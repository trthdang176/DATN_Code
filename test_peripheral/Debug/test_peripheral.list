
test_peripheral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089cc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  08008ae0  08008ae0  00009ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091e4  080091e4  0000b204  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080091e4  080091e4  0000a1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091ec  080091ec  0000b204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091ec  080091ec  0000a1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091f0  080091f0  0000a1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  080091f4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000204  080093f8  0000b204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  080093f8  0000b564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099a2  00000000  00000000  0000b22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc5  00000000  00000000  00014bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  00016898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000690  00000000  00000000  00017140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183a7  00000000  00000000  000177d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a963  00000000  00000000  0002fb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008500f  00000000  00000000  0003a4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf4e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038e8  00000000  00000000  000bf52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000c2e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000204 	.word	0x20000204
 800012c:	00000000 	.word	0x00000000
 8000130:	08008ac4 	.word	0x08008ac4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000208 	.word	0x20000208
 800014c:	08008ac4 	.word	0x08008ac4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_d2lz>:
 8000c54:	b538      	push	{r3, r4, r5, lr}
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	460d      	mov	r5, r1
 8000c5e:	f7ff fead 	bl	80009bc <__aeabi_dcmplt>
 8000c62:	b928      	cbnz	r0, 8000c70 <__aeabi_d2lz+0x1c>
 8000c64:	4620      	mov	r0, r4
 8000c66:	4629      	mov	r1, r5
 8000c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c6c:	f000 b80a 	b.w	8000c84 <__aeabi_d2ulz>
 8000c70:	4620      	mov	r0, r4
 8000c72:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c76:	f000 f805 	bl	8000c84 <__aeabi_d2ulz>
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	bd38      	pop	{r3, r4, r5, pc}
 8000c82:	bf00      	nop

08000c84 <__aeabi_d2ulz>:
 8000c84:	b5d0      	push	{r4, r6, r7, lr}
 8000c86:	2200      	movs	r2, #0
 8000c88:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <__aeabi_d2ulz+0x34>)
 8000c8a:	4606      	mov	r6, r0
 8000c8c:	460f      	mov	r7, r1
 8000c8e:	f7ff fc23 	bl	80004d8 <__aeabi_dmul>
 8000c92:	f7ff fef9 	bl	8000a88 <__aeabi_d2uiz>
 8000c96:	4604      	mov	r4, r0
 8000c98:	f7ff fba4 	bl	80003e4 <__aeabi_ui2d>
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <__aeabi_d2ulz+0x38>)
 8000ca0:	f7ff fc1a 	bl	80004d8 <__aeabi_dmul>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4630      	mov	r0, r6
 8000caa:	4639      	mov	r1, r7
 8000cac:	f7ff fa5c 	bl	8000168 <__aeabi_dsub>
 8000cb0:	f7ff feea 	bl	8000a88 <__aeabi_d2uiz>
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb8:	3df00000 	.word	0x3df00000
 8000cbc:	41f00000 	.word	0x41f00000

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc4:	f000 fa86 	bl	80011d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc8:	f000 f816 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ccc:	f000 f884 	bl	8000dd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cd0:	f000 f858 	bl	8000d84 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(3000);
 8000cd4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000cd8:	f000 fade 	bl	8001298 <HAL_Delay>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8000cdc:	2264      	movs	r2, #100	@ 0x64
 8000cde:	4904      	ldr	r1, [pc, #16]	@ (8000cf0 <main+0x30>)
 8000ce0:	4804      	ldr	r0, [pc, #16]	@ (8000cf4 <main+0x34>)
 8000ce2:	f001 fb2c 	bl	800233e <HAL_UARTEx_ReceiveToIdle_IT>

  Screen_begin(&huart2);
 8000ce6:	4803      	ldr	r0, [pc, #12]	@ (8000cf4 <main+0x34>)
 8000ce8:	f002 f8ee 	bl	8002ec8 <Screen_begin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <main+0x2c>
 8000cf0:	20000268 	.word	0x20000268
 8000cf4:	20000220 	.word	0x20000220

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b090      	sub	sp, #64	@ 0x40
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0318 	add.w	r3, r7, #24
 8000d02:	2228      	movs	r2, #40	@ 0x28
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f005 f999 	bl	800603e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d36:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fe11 	bl	8001968 <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d4c:	f000 f894 	bl	8000e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	230f      	movs	r3, #15
 8000d52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d54:	2302      	movs	r3, #2
 8000d56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 f87e 	bl	8001e6c <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d76:	f000 f87f 	bl	8000e78 <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3740      	adds	r7, #64	@ 0x40
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <MX_USART2_UART_Init+0x50>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d90:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f001 f9e4 	bl	8002188 <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc6:	f000 f857 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000220 	.word	0x20000220
 8000dd4:	40004400 	.word	0x40004400

08000dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_GPIO_Init+0x58>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	4a13      	ldr	r2, [pc, #76]	@ (8000e30 <MX_GPIO_Init+0x58>)
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	6193      	str	r3, [r2, #24]
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_GPIO_Init+0x58>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	f003 0320 	and.w	r3, r3, #32
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_GPIO_Init+0x58>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <MX_GPIO_Init+0x58>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6193      	str	r3, [r2, #24]
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <MX_GPIO_Init+0x58>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <MX_GPIO_Init+0x58>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a07      	ldr	r2, [pc, #28]	@ (8000e30 <MX_GPIO_Init+0x58>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <MX_GPIO_Init+0x58>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d10c      	bne.n	8000e66 <HAL_UARTEx_RxEventCallback+0x32>

		// Call to callback function screen
		Screen_RX_data(dataRX);
 8000e4c:	4809      	ldr	r0, [pc, #36]	@ (8000e74 <HAL_UARTEx_RxEventCallback+0x40>)
 8000e4e:	f002 f8b7 	bl	8002fc0 <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 8000e52:	2264      	movs	r2, #100	@ 0x64
 8000e54:	2100      	movs	r1, #0
 8000e56:	4807      	ldr	r0, [pc, #28]	@ (8000e74 <HAL_UARTEx_RxEventCallback+0x40>)
 8000e58:	f005 f8f1 	bl	800603e <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8000e5c:	2264      	movs	r2, #100	@ 0x64
 8000e5e:	4905      	ldr	r1, [pc, #20]	@ (8000e74 <HAL_UARTEx_RxEventCallback+0x40>)
 8000e60:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000e62:	f001 fa6c 	bl	800233e <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000220 	.word	0x20000220
 8000e74:	20000268 	.word	0x20000268

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <Error_Handler+0x8>

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <HAL_MspInit+0x5c>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4a14      	ldr	r2, [pc, #80]	@ (8000ee0 <HAL_MspInit+0x5c>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6193      	str	r3, [r2, #24]
 8000e96:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_MspInit+0x5c>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <HAL_MspInit+0x5c>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee0 <HAL_MspInit+0x5c>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <HAL_MspInit+0x5c>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_MspInit+0x60>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <HAL_MspInit+0x60>)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010000 	.word	0x40010000

08000ee8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1f      	ldr	r2, [pc, #124]	@ (8000f80 <HAL_UART_MspInit+0x98>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d137      	bne.n	8000f78 <HAL_UART_MspInit+0x90>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f08:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <HAL_UART_MspInit+0x9c>)
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f84 <HAL_UART_MspInit+0x9c>)
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f12:	61d3      	str	r3, [r2, #28]
 8000f14:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <HAL_UART_MspInit+0x9c>)
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <HAL_UART_MspInit+0x9c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a17      	ldr	r2, [pc, #92]	@ (8000f84 <HAL_UART_MspInit+0x9c>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <HAL_UART_MspInit+0x9c>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <HAL_UART_MspInit+0xa0>)
 8000f4c:	f000 fb88 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f50:	2308      	movs	r3, #8
 8000f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4619      	mov	r1, r3
 8000f62:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <HAL_UART_MspInit+0xa0>)
 8000f64:	f000 fb7c 	bl	8001660 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2026      	movs	r0, #38	@ 0x26
 8000f6e:	f000 fa8e 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f72:	2026      	movs	r0, #38	@ 0x26
 8000f74:	f000 faa7 	bl	80014c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f78:	bf00      	nop
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40004400 	.word	0x40004400
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010800 	.word	0x40010800

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <NMI_Handler+0x4>

08000f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f940 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <USART2_IRQHandler+0x10>)
 8000fea:	f001 fa05 	bl	80023f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000220 	.word	0x20000220

08000ff8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return 1;
 8000ffc:	2301      	movs	r3, #1
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <_kill>:

int _kill(int pid, int sig)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001010:	f005 f8b4 	bl	800617c <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	2216      	movs	r2, #22
 8001018:	601a      	str	r2, [r3, #0]
  return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_exit>:

void _exit (int status)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800102e:	f04f 31ff 	mov.w	r1, #4294967295
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffe7 	bl	8001006 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <_exit+0x12>

0800103c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	e00a      	b.n	8001064 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800104e:	f3af 8000 	nop.w
 8001052:	4601      	mov	r1, r0
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	b2ca      	uxtb	r2, r1
 800105c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf0      	blt.n	800104e <_read+0x12>
  }

  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	e009      	b.n	800109c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dbf1      	blt.n	8001088 <_write+0x12>
  }
  return len;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_close>:

int _close(int file)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010d4:	605a      	str	r2, [r3, #4]
  return 0;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <_isatty>:

int _isatty(int file)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b085      	sub	sp, #20
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
	...

08001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001118:	4a14      	ldr	r2, [pc, #80]	@ (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001140:	f005 f81c 	bl	800617c <__errno>
 8001144:	4603      	mov	r3, r0
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	@ (8001174 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20005000 	.word	0x20005000
 8001170:	00000400 	.word	0x00000400
 8001174:	200002cc 	.word	0x200002cc
 8001178:	20000568 	.word	0x20000568

0800117c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8001188:	f7ff fff8 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480b      	ldr	r0, [pc, #44]	@ (80011bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800118e:	490c      	ldr	r1, [pc, #48]	@ (80011c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001190:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a09      	ldr	r2, [pc, #36]	@ (80011c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011a4:	4c09      	ldr	r4, [pc, #36]	@ (80011cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b2:	f004 ffe9 	bl	8006188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011b6:	f7ff fd83 	bl	8000cc0 <main>
  bx lr
 80011ba:	4770      	bx	lr
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80011c4:	080091f4 	.word	0x080091f4
  ldr r2, =_sbss
 80011c8:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80011cc:	20000564 	.word	0x20000564

080011d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC1_2_IRQHandler>
	...

080011d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_Init+0x28>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <HAL_Init+0x28>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f947 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	200f      	movs	r0, #15
 80011ec:	f000 f808 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff fe48 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40022000 	.word	0x40022000

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_InitTick+0x54>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_InitTick+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f95f 	bl	80014e2 <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f000 f927 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	@ (800125c <HAL_InitTick+0x5c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000000 	.word	0x20000000
 8001258:	20000008 	.word	0x20000008
 800125c:	20000004 	.word	0x20000004

08001260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <HAL_IncTick+0x1c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <HAL_IncTick+0x20>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a03      	ldr	r2, [pc, #12]	@ (8001280 <HAL_IncTick+0x20>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	20000008 	.word	0x20000008
 8001280:	200002d0 	.word	0x200002d0

08001284 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b02      	ldr	r3, [pc, #8]	@ (8001294 <HAL_GetTick+0x10>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	200002d0 	.word	0x200002d0

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff fff0 	bl	8001284 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffe0 	bl	8001284 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4906      	ldr	r1, [pc, #24]	@ (8001378 <__NVIC_EnableIRQ+0x34>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	@ (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	@ (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	@ 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	@ 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	@ (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff90 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff2d 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff42 	bl	8001328 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff90 	bl	80013d0 <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5f 	bl	800137c <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff35 	bl	8001344 <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa2 	bl	8001434 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b085      	sub	sp, #20
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d008      	beq.n	8001524 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2204      	movs	r2, #4
 8001516:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e020      	b.n	8001566 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 020e 	bic.w	r2, r2, #14
 8001532:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0201 	bic.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800154c:	2101      	movs	r1, #1
 800154e:	fa01 f202 	lsl.w	r2, r1, r2
 8001552:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d005      	beq.n	8001594 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2204      	movs	r2, #4
 800158c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e051      	b.n	8001638 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 020e 	bic.w	r2, r2, #14
 80015a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0201 	bic.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a22      	ldr	r2, [pc, #136]	@ (8001644 <HAL_DMA_Abort_IT+0xd4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d029      	beq.n	8001612 <HAL_DMA_Abort_IT+0xa2>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a21      	ldr	r2, [pc, #132]	@ (8001648 <HAL_DMA_Abort_IT+0xd8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d022      	beq.n	800160e <HAL_DMA_Abort_IT+0x9e>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1f      	ldr	r2, [pc, #124]	@ (800164c <HAL_DMA_Abort_IT+0xdc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01a      	beq.n	8001608 <HAL_DMA_Abort_IT+0x98>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001650 <HAL_DMA_Abort_IT+0xe0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d012      	beq.n	8001602 <HAL_DMA_Abort_IT+0x92>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <HAL_DMA_Abort_IT+0xe4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00a      	beq.n	80015fc <HAL_DMA_Abort_IT+0x8c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001658 <HAL_DMA_Abort_IT+0xe8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d102      	bne.n	80015f6 <HAL_DMA_Abort_IT+0x86>
 80015f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015f4:	e00e      	b.n	8001614 <HAL_DMA_Abort_IT+0xa4>
 80015f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015fa:	e00b      	b.n	8001614 <HAL_DMA_Abort_IT+0xa4>
 80015fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001600:	e008      	b.n	8001614 <HAL_DMA_Abort_IT+0xa4>
 8001602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001606:	e005      	b.n	8001614 <HAL_DMA_Abort_IT+0xa4>
 8001608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800160c:	e002      	b.n	8001614 <HAL_DMA_Abort_IT+0xa4>
 800160e:	2310      	movs	r3, #16
 8001610:	e000      	b.n	8001614 <HAL_DMA_Abort_IT+0xa4>
 8001612:	2301      	movs	r3, #1
 8001614:	4a11      	ldr	r2, [pc, #68]	@ (800165c <HAL_DMA_Abort_IT+0xec>)
 8001616:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
    } 
  }
  return status;
 8001638:	7bfb      	ldrb	r3, [r7, #15]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40020008 	.word	0x40020008
 8001648:	4002001c 	.word	0x4002001c
 800164c:	40020030 	.word	0x40020030
 8001650:	40020044 	.word	0x40020044
 8001654:	40020058 	.word	0x40020058
 8001658:	4002006c 	.word	0x4002006c
 800165c:	40020000 	.word	0x40020000

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b08b      	sub	sp, #44	@ 0x2c
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	e169      	b.n	8001948 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001674:	2201      	movs	r2, #1
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	429a      	cmp	r2, r3
 800168e:	f040 8158 	bne.w	8001942 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a9a      	ldr	r2, [pc, #616]	@ (8001900 <HAL_GPIO_Init+0x2a0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d05e      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 800169c:	4a98      	ldr	r2, [pc, #608]	@ (8001900 <HAL_GPIO_Init+0x2a0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d875      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016a2:	4a98      	ldr	r2, [pc, #608]	@ (8001904 <HAL_GPIO_Init+0x2a4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d058      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016a8:	4a96      	ldr	r2, [pc, #600]	@ (8001904 <HAL_GPIO_Init+0x2a4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d86f      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016ae:	4a96      	ldr	r2, [pc, #600]	@ (8001908 <HAL_GPIO_Init+0x2a8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d052      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016b4:	4a94      	ldr	r2, [pc, #592]	@ (8001908 <HAL_GPIO_Init+0x2a8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d869      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016ba:	4a94      	ldr	r2, [pc, #592]	@ (800190c <HAL_GPIO_Init+0x2ac>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d04c      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016c0:	4a92      	ldr	r2, [pc, #584]	@ (800190c <HAL_GPIO_Init+0x2ac>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d863      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016c6:	4a92      	ldr	r2, [pc, #584]	@ (8001910 <HAL_GPIO_Init+0x2b0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d046      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016cc:	4a90      	ldr	r2, [pc, #576]	@ (8001910 <HAL_GPIO_Init+0x2b0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d85d      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	d82a      	bhi.n	800172c <HAL_GPIO_Init+0xcc>
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	d859      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016da:	a201      	add	r2, pc, #4	@ (adr r2, 80016e0 <HAL_GPIO_Init+0x80>)
 80016dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e0:	0800175b 	.word	0x0800175b
 80016e4:	08001735 	.word	0x08001735
 80016e8:	08001747 	.word	0x08001747
 80016ec:	08001789 	.word	0x08001789
 80016f0:	0800178f 	.word	0x0800178f
 80016f4:	0800178f 	.word	0x0800178f
 80016f8:	0800178f 	.word	0x0800178f
 80016fc:	0800178f 	.word	0x0800178f
 8001700:	0800178f 	.word	0x0800178f
 8001704:	0800178f 	.word	0x0800178f
 8001708:	0800178f 	.word	0x0800178f
 800170c:	0800178f 	.word	0x0800178f
 8001710:	0800178f 	.word	0x0800178f
 8001714:	0800178f 	.word	0x0800178f
 8001718:	0800178f 	.word	0x0800178f
 800171c:	0800178f 	.word	0x0800178f
 8001720:	0800178f 	.word	0x0800178f
 8001724:	0800173d 	.word	0x0800173d
 8001728:	08001751 	.word	0x08001751
 800172c:	4a79      	ldr	r2, [pc, #484]	@ (8001914 <HAL_GPIO_Init+0x2b4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d013      	beq.n	800175a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001732:	e02c      	b.n	800178e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	623b      	str	r3, [r7, #32]
          break;
 800173a:	e029      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	3304      	adds	r3, #4
 8001742:	623b      	str	r3, [r7, #32]
          break;
 8001744:	e024      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	3308      	adds	r3, #8
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e01f      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	330c      	adds	r3, #12
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e01a      	b.n	8001790 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001762:	2304      	movs	r3, #4
 8001764:	623b      	str	r3, [r7, #32]
          break;
 8001766:	e013      	b.n	8001790 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d105      	bne.n	800177c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001770:	2308      	movs	r3, #8
 8001772:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	611a      	str	r2, [r3, #16]
          break;
 800177a:	e009      	b.n	8001790 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800177c:	2308      	movs	r3, #8
 800177e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	615a      	str	r2, [r3, #20]
          break;
 8001786:	e003      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x130>
          break;
 800178e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2bff      	cmp	r3, #255	@ 0xff
 8001794:	d801      	bhi.n	800179a <HAL_GPIO_Init+0x13a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	e001      	b.n	800179e <HAL_GPIO_Init+0x13e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3304      	adds	r3, #4
 800179e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2bff      	cmp	r3, #255	@ 0xff
 80017a4:	d802      	bhi.n	80017ac <HAL_GPIO_Init+0x14c>
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	e002      	b.n	80017b2 <HAL_GPIO_Init+0x152>
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	3b08      	subs	r3, #8
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	210f      	movs	r1, #15
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	6a39      	ldr	r1, [r7, #32]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	431a      	orrs	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80b1 	beq.w	8001942 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017f8:	4a48      	ldr	r2, [pc, #288]	@ (800191c <HAL_GPIO_Init+0x2bc>)
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a40      	ldr	r2, [pc, #256]	@ (8001920 <HAL_GPIO_Init+0x2c0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d013      	beq.n	800184c <HAL_GPIO_Init+0x1ec>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a3f      	ldr	r2, [pc, #252]	@ (8001924 <HAL_GPIO_Init+0x2c4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d00d      	beq.n	8001848 <HAL_GPIO_Init+0x1e8>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a3e      	ldr	r2, [pc, #248]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d007      	beq.n	8001844 <HAL_GPIO_Init+0x1e4>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3d      	ldr	r2, [pc, #244]	@ (800192c <HAL_GPIO_Init+0x2cc>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_GPIO_Init+0x1e0>
 800183c:	2303      	movs	r3, #3
 800183e:	e006      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 8001840:	2304      	movs	r3, #4
 8001842:	e004      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 8001844:	2302      	movs	r3, #2
 8001846:	e002      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 800184c:	2300      	movs	r3, #0
 800184e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001850:	f002 0203 	and.w	r2, r2, #3
 8001854:	0092      	lsls	r2, r2, #2
 8001856:	4093      	lsls	r3, r2
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800185e:	492f      	ldr	r1, [pc, #188]	@ (800191c <HAL_GPIO_Init+0x2bc>)
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	3302      	adds	r3, #2
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001878:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	492c      	ldr	r1, [pc, #176]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001886:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	43db      	mvns	r3, r3
 800188e:	4928      	ldr	r1, [pc, #160]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 8001890:	4013      	ands	r3, r2
 8001892:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a0:	4b23      	ldr	r3, [pc, #140]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	4922      	ldr	r1, [pc, #136]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60cb      	str	r3, [r1, #12]
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	491e      	ldr	r1, [pc, #120]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018c8:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	4918      	ldr	r1, [pc, #96]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	43db      	mvns	r3, r3
 80018de:	4914      	ldr	r1, [pc, #80]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d021      	beq.n	8001934 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	490e      	ldr	r1, [pc, #56]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
 80018fc:	e021      	b.n	8001942 <HAL_GPIO_Init+0x2e2>
 80018fe:	bf00      	nop
 8001900:	10320000 	.word	0x10320000
 8001904:	10310000 	.word	0x10310000
 8001908:	10220000 	.word	0x10220000
 800190c:	10210000 	.word	0x10210000
 8001910:	10120000 	.word	0x10120000
 8001914:	10110000 	.word	0x10110000
 8001918:	40021000 	.word	0x40021000
 800191c:	40010000 	.word	0x40010000
 8001920:	40010800 	.word	0x40010800
 8001924:	40010c00 	.word	0x40010c00
 8001928:	40011000 	.word	0x40011000
 800192c:	40011400 	.word	0x40011400
 8001930:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_GPIO_Init+0x304>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	43db      	mvns	r3, r3
 800193c:	4909      	ldr	r1, [pc, #36]	@ (8001964 <HAL_GPIO_Init+0x304>)
 800193e:	4013      	ands	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	3301      	adds	r3, #1
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	f47f ae8e 	bne.w	8001674 <HAL_GPIO_Init+0x14>
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	372c      	adds	r7, #44	@ 0x2c
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	40010400 	.word	0x40010400

08001968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e272      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8087 	beq.w	8001a96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001988:	4b92      	ldr	r3, [pc, #584]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b04      	cmp	r3, #4
 8001992:	d00c      	beq.n	80019ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001994:	4b8f      	ldr	r3, [pc, #572]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d112      	bne.n	80019c6 <HAL_RCC_OscConfig+0x5e>
 80019a0:	4b8c      	ldr	r3, [pc, #560]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ac:	d10b      	bne.n	80019c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ae:	4b89      	ldr	r3, [pc, #548]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d06c      	beq.n	8001a94 <HAL_RCC_OscConfig+0x12c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d168      	bne.n	8001a94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e24c      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x76>
 80019d0:	4b80      	ldr	r3, [pc, #512]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a7f      	ldr	r2, [pc, #508]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e02e      	b.n	8001a3c <HAL_RCC_OscConfig+0xd4>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x98>
 80019e6:	4b7b      	ldr	r3, [pc, #492]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a7a      	ldr	r2, [pc, #488]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b78      	ldr	r3, [pc, #480]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a77      	ldr	r2, [pc, #476]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e01d      	b.n	8001a3c <HAL_RCC_OscConfig+0xd4>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0xbc>
 8001a0a:	4b72      	ldr	r3, [pc, #456]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a71      	ldr	r2, [pc, #452]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b6f      	ldr	r3, [pc, #444]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0xd4>
 8001a24:	4b6b      	ldr	r3, [pc, #428]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a6a      	ldr	r2, [pc, #424]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b68      	ldr	r3, [pc, #416]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a67      	ldr	r2, [pc, #412]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fc1e 	bl	8001284 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fc1a 	bl	8001284 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	@ 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e200      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0xe4>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fc0a 	bl	8001284 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff fc06 	bl	8001284 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	@ 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1ec      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x10c>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d063      	beq.n	8001b6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aa2:	4b4c      	ldr	r3, [pc, #304]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aae:	4b49      	ldr	r3, [pc, #292]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d11c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x18c>
 8001aba:	4b46      	ldr	r3, [pc, #280]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	4b43      	ldr	r3, [pc, #268]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x176>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e1c0      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4939      	ldr	r1, [pc, #228]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	e03a      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	4b36      	ldr	r3, [pc, #216]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fbbf 	bl	8001284 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fbbb 	bl	8001284 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1a1      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4927      	ldr	r1, [pc, #156]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
 8001b3c:	e015      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b26      	ldr	r3, [pc, #152]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fb9e 	bl	8001284 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fb9a 	bl	8001284 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e180      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d03a      	beq.n	8001bec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d019      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b84:	f7ff fb7e 	bl	8001284 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fb7a 	bl	8001284 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e160      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f000 face 	bl	800214c <RCC_Delay>
 8001bb0:	e01c      	b.n	8001bec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fb64 	bl	8001284 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbe:	e00f      	b.n	8001be0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fb60 	bl	8001284 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d908      	bls.n	8001be0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e146      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	42420000 	.word	0x42420000
 8001bdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	4b92      	ldr	r3, [pc, #584]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1e9      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80a6 	beq.w	8001d46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfe:	4b8b      	ldr	r3, [pc, #556]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10d      	bne.n	8001c26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b88      	ldr	r3, [pc, #544]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4a87      	ldr	r2, [pc, #540]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	61d3      	str	r3, [r2, #28]
 8001c16:	4b85      	ldr	r3, [pc, #532]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c22:	2301      	movs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b82      	ldr	r3, [pc, #520]	@ (8001e30 <HAL_RCC_OscConfig+0x4c8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d118      	bne.n	8001c64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c32:	4b7f      	ldr	r3, [pc, #508]	@ (8001e30 <HAL_RCC_OscConfig+0x4c8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7e      	ldr	r2, [pc, #504]	@ (8001e30 <HAL_RCC_OscConfig+0x4c8>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff fb21 	bl	8001284 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c46:	f7ff fb1d 	bl	8001284 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b64      	cmp	r3, #100	@ 0x64
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e103      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	4b75      	ldr	r3, [pc, #468]	@ (8001e30 <HAL_RCC_OscConfig+0x4c8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x312>
 8001c6c:	4b6f      	ldr	r3, [pc, #444]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4a6e      	ldr	r2, [pc, #440]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6213      	str	r3, [r2, #32]
 8001c78:	e02d      	b.n	8001cd6 <HAL_RCC_OscConfig+0x36e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x334>
 8001c82:	4b6a      	ldr	r3, [pc, #424]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4a69      	ldr	r2, [pc, #420]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	6213      	str	r3, [r2, #32]
 8001c8e:	4b67      	ldr	r3, [pc, #412]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	4a66      	ldr	r2, [pc, #408]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	6213      	str	r3, [r2, #32]
 8001c9a:	e01c      	b.n	8001cd6 <HAL_RCC_OscConfig+0x36e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	d10c      	bne.n	8001cbe <HAL_RCC_OscConfig+0x356>
 8001ca4:	4b61      	ldr	r3, [pc, #388]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a60      	ldr	r2, [pc, #384]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	e00b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x36e>
 8001cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a5a      	ldr	r2, [pc, #360]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	4b58      	ldr	r3, [pc, #352]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a57      	ldr	r2, [pc, #348]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d015      	beq.n	8001d0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cde:	f7ff fad1 	bl	8001284 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7ff facd 	bl	8001284 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0b1      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ee      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x37e>
 8001d08:	e014      	b.n	8001d34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fabb 	bl	8001284 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7ff fab7 	bl	8001284 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e09b      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d28:	4b40      	ldr	r3, [pc, #256]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1ee      	bne.n	8001d12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d105      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8087 	beq.w	8001e5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d50:	4b36      	ldr	r3, [pc, #216]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d061      	beq.n	8001e20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d146      	bne.n	8001df2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d64:	4b33      	ldr	r3, [pc, #204]	@ (8001e34 <HAL_RCC_OscConfig+0x4cc>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fa8b 	bl	8001284 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d72:	f7ff fa87 	bl	8001284 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e06d      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d84:	4b29      	ldr	r3, [pc, #164]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d98:	d108      	bne.n	8001dac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d9a:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	4921      	ldr	r1, [pc, #132]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dac:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a19      	ldr	r1, [r3, #32]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	491b      	ldr	r1, [pc, #108]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <HAL_RCC_OscConfig+0x4cc>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7ff fa5b 	bl	8001284 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7ff fa57 	bl	8001284 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e03d      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x46a>
 8001df0:	e035      	b.n	8001e5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <HAL_RCC_OscConfig+0x4cc>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fa44 	bl	8001284 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e00:	f7ff fa40 	bl	8001284 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e026      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x498>
 8001e1e:	e01e      	b.n	8001e5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d107      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e019      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40007000 	.word	0x40007000
 8001e34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_RCC_OscConfig+0x500>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d001      	beq.n	8001e5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0d0      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b6a      	ldr	r3, [pc, #424]	@ (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d910      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b67      	ldr	r3, [pc, #412]	@ (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0207 	bic.w	r2, r3, #7
 8001e96:	4965      	ldr	r1, [pc, #404]	@ (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b63      	ldr	r3, [pc, #396]	@ (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0b8      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec8:	4b59      	ldr	r3, [pc, #356]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a58      	ldr	r2, [pc, #352]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ed2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee0:	4b53      	ldr	r3, [pc, #332]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001eea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4b50      	ldr	r3, [pc, #320]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	494d      	ldr	r1, [pc, #308]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d040      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b47      	ldr	r3, [pc, #284]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d115      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07f      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	4b41      	ldr	r3, [pc, #260]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e073      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e06b      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	4b39      	ldr	r3, [pc, #228]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f023 0203 	bic.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4936      	ldr	r1, [pc, #216]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f5c:	f7ff f992 	bl	8001284 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7ff f98e 	bl	8001284 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e053      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 020c 	and.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1eb      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b27      	ldr	r3, [pc, #156]	@ (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d210      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b24      	ldr	r3, [pc, #144]	@ (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0207 	bic.w	r2, r3, #7
 8001fa2:	4922      	ldr	r1, [pc, #136]	@ (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b20      	ldr	r3, [pc, #128]	@ (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e032      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4916      	ldr	r1, [pc, #88]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fe6:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	490e      	ldr	r1, [pc, #56]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ffa:	f000 f821 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	490a      	ldr	r1, [pc, #40]	@ (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 800200c:	5ccb      	ldrb	r3, [r1, r3]
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	4a09      	ldr	r2, [pc, #36]	@ (8002038 <HAL_RCC_ClockConfig+0x1cc>)
 8002014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <HAL_RCC_ClockConfig+0x1d0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f8f0 	bl	8001200 <HAL_InitTick>

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40022000 	.word	0x40022000
 8002030:	40021000 	.word	0x40021000
 8002034:	08008d8c 	.word	0x08008d8c
 8002038:	20000000 	.word	0x20000000
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800205a:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b04      	cmp	r3, #4
 8002068:	d002      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x30>
 800206a:	2b08      	cmp	r3, #8
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x36>
 800206e:	e027      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002070:	4b19      	ldr	r3, [pc, #100]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002072:	613b      	str	r3, [r7, #16]
      break;
 8002074:	e027      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	0c9b      	lsrs	r3, r3, #18
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	4a17      	ldr	r2, [pc, #92]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002080:	5cd3      	ldrb	r3, [r2, r3]
 8002082:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d010      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800208e:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	0c5b      	lsrs	r3, r3, #17
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	4a11      	ldr	r2, [pc, #68]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020a2:	fb03 f202 	mul.w	r2, r3, r2
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	e004      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0c      	ldr	r2, [pc, #48]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020b4:	fb02 f303 	mul.w	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	613b      	str	r3, [r7, #16]
      break;
 80020be:	e002      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020c2:	613b      	str	r3, [r7, #16]
      break;
 80020c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c6:	693b      	ldr	r3, [r7, #16]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	007a1200 	.word	0x007a1200
 80020dc:	08008da4 	.word	0x08008da4
 80020e0:	08008db4 	.word	0x08008db4
 80020e4:	003d0900 	.word	0x003d0900

080020e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ec:	4b02      	ldr	r3, [pc, #8]	@ (80020f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	20000000 	.word	0x20000000

080020fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002100:	f7ff fff2 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b05      	ldr	r3, [pc, #20]	@ (800211c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	4903      	ldr	r1, [pc, #12]	@ (8002120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	08008d9c 	.word	0x08008d9c

08002124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002128:	f7ff ffde 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	0adb      	lsrs	r3, r3, #11
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	4903      	ldr	r1, [pc, #12]	@ (8002148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	08008d9c 	.word	0x08008d9c

0800214c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002154:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <RCC_Delay+0x34>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <RCC_Delay+0x38>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0a5b      	lsrs	r3, r3, #9
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002168:	bf00      	nop
  }
  while (Delay --);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	60fa      	str	r2, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f9      	bne.n	8002168 <RCC_Delay+0x1c>
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20000000 	.word	0x20000000
 8002184:	10624dd3 	.word	0x10624dd3

08002188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e042      	b.n	8002220 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe fe9a 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	@ 0x24
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fded 	bl	8002dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b20      	cmp	r3, #32
 8002246:	d175      	bne.n	8002334 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_UART_Transmit+0x2c>
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e06e      	b.n	8002336 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2221      	movs	r2, #33	@ 0x21
 8002262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002266:	f7ff f80d 	bl	8001284 <HAL_GetTick>
 800226a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002280:	d108      	bne.n	8002294 <HAL_UART_Transmit+0x6c>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d104      	bne.n	8002294 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	e003      	b.n	800229c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800229c:	e02e      	b.n	80022fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2200      	movs	r2, #0
 80022a6:	2180      	movs	r1, #128	@ 0x80
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fb52 	bl	8002952 <UART_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e03a      	b.n	8002336 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10b      	bne.n	80022de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3302      	adds	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	e007      	b.n	80022ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	3301      	adds	r3, #1
 80022ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1cb      	bne.n	800229e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	2140      	movs	r1, #64	@ 0x40
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fb1e 	bl	8002952 <UART_WaitOnFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e006      	b.n	8002336 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e000      	b.n	8002336 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b08c      	sub	sp, #48	@ 0x30
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	4613      	mov	r3, r2
 800234a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b20      	cmp	r3, #32
 8002356:	d14a      	bne.n	80023ee <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e043      	b.n	80023f0 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	461a      	mov	r2, r3
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 fb42 	bl	8002a04 <UART_Start_Receive_IT>
 8002380:	4603      	mov	r3, r0
 8002382:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002386:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800238a:	2b00      	cmp	r3, #0
 800238c:	d12c      	bne.n	80023e8 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	2b01      	cmp	r3, #1
 8002394:	d125      	bne.n	80023e2 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	330c      	adds	r3, #12
 80023b2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	e853 3f00 	ldrex	r3, [r3]
 80023ba:	617b      	str	r3, [r7, #20]
   return(result);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	330c      	adds	r3, #12
 80023ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80023ce:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d0:	6a39      	ldr	r1, [r7, #32]
 80023d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d4:	e841 2300 	strex	r3, r2, [r1]
 80023d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e5      	bne.n	80023ac <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80023e0:	e002      	b.n	80023e8 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80023e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80023ec:	e000      	b.n	80023f0 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80023ee:	2302      	movs	r3, #2
  }
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3730      	adds	r7, #48	@ 0x30
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b0ba      	sub	sp, #232	@ 0xe8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800242a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10f      	bne.n	800245e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800243e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_UART_IRQHandler+0x66>
 800244a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fbea 	bl	8002c30 <UART_Receive_IT>
      return;
 800245c:	e25b      	b.n	8002916 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800245e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80de 	beq.w	8002624 <HAL_UART_IRQHandler+0x22c>
 8002468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d106      	bne.n	8002482 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002478:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80d1 	beq.w	8002624 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_UART_IRQHandler+0xae>
 800248e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f043 0201 	orr.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_UART_IRQHandler+0xd2>
 80024b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c2:	f043 0202 	orr.w	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_UART_IRQHandler+0xf6>
 80024d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e6:	f043 0204 	orr.w	r2, r3, #4
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d011      	beq.n	800251e <HAL_UART_IRQHandler+0x126>
 80024fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	f043 0208 	orr.w	r2, r3, #8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 81f2 	beq.w	800290c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_UART_IRQHandler+0x14e>
 8002534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fb75 	bl	8002c30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf14      	ite	ne
 8002554:	2301      	movne	r3, #1
 8002556:	2300      	moveq	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d103      	bne.n	8002572 <HAL_UART_IRQHandler+0x17a>
 800256a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d04f      	beq.n	8002612 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fa7f 	bl	8002a76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d041      	beq.n	800260a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3314      	adds	r3, #20
 800258c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002590:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002594:	e853 3f00 	ldrex	r3, [r3]
 8002598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800259c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3314      	adds	r3, #20
 80025ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80025be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80025c2:	e841 2300 	strex	r3, r2, [r1]
 80025c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80025ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1d9      	bne.n	8002586 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d013      	beq.n	8002602 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025de:	4a7e      	ldr	r2, [pc, #504]	@ (80027d8 <HAL_UART_IRQHandler+0x3e0>)
 80025e0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe ffc2 	bl	8001570 <HAL_DMA_Abort_IT>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025fc:	4610      	mov	r0, r2
 80025fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002600:	e00e      	b.n	8002620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f99c 	bl	8002940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002608:	e00a      	b.n	8002620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f998 	bl	8002940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002610:	e006      	b.n	8002620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f994 	bl	8002940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800261e:	e175      	b.n	800290c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002620:	bf00      	nop
    return;
 8002622:	e173      	b.n	800290c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	2b01      	cmp	r3, #1
 800262a:	f040 814f 	bne.w	80028cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800262e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8148 	beq.w	80028cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800263c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8141 	beq.w	80028cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80b6 	beq.w	80027dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800267c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8145 	beq.w	8002910 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800268a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800268e:	429a      	cmp	r2, r3
 8002690:	f080 813e 	bcs.w	8002910 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800269a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	f000 8088 	beq.w	80027b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	330c      	adds	r3, #12
 80026ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026b6:	e853 3f00 	ldrex	r3, [r3]
 80026ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80026be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	330c      	adds	r3, #12
 80026d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80026d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80026e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80026e4:	e841 2300 	strex	r3, r2, [r1]
 80026e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80026ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1d9      	bne.n	80026a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3314      	adds	r3, #20
 80026fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026fe:	e853 3f00 	ldrex	r3, [r3]
 8002702:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002704:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3314      	adds	r3, #20
 8002714:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002718:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800271c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002720:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002724:	e841 2300 	strex	r3, r2, [r1]
 8002728:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800272a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e1      	bne.n	80026f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3314      	adds	r3, #20
 8002736:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002738:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800273a:	e853 3f00 	ldrex	r3, [r3]
 800273e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002740:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002746:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3314      	adds	r3, #20
 8002750:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002754:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002756:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002758:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800275a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800275c:	e841 2300 	strex	r3, r2, [r1]
 8002760:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002762:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e3      	bne.n	8002730 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	330c      	adds	r3, #12
 800277c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002780:	e853 3f00 	ldrex	r3, [r3]
 8002784:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002788:	f023 0310 	bic.w	r3, r3, #16
 800278c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800279a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800279c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027a2:	e841 2300 	strex	r3, r2, [r1]
 80027a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80027a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1e3      	bne.n	8002776 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fea1 	bl	80014fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe fb30 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027d4:	e09c      	b.n	8002910 <HAL_UART_IRQHandler+0x518>
 80027d6:	bf00      	nop
 80027d8:	08002b3b 	.word	0x08002b3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 808e 	beq.w	8002914 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80027f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8089 	beq.w	8002914 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	330c      	adds	r3, #12
 8002808:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280c:	e853 3f00 	ldrex	r3, [r3]
 8002810:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002818:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002826:	647a      	str	r2, [r7, #68]	@ 0x44
 8002828:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800282c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800282e:	e841 2300 	strex	r3, r2, [r1]
 8002832:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e3      	bne.n	8002802 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3314      	adds	r3, #20
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	e853 3f00 	ldrex	r3, [r3]
 8002848:	623b      	str	r3, [r7, #32]
   return(result);
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3314      	adds	r3, #20
 800285a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800285e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002860:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002866:	e841 2300 	strex	r3, r2, [r1]
 800286a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800286c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1e3      	bne.n	800283a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	330c      	adds	r3, #12
 8002886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	e853 3f00 	ldrex	r3, [r3]
 800288e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0310 	bic.w	r3, r3, #16
 8002896:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	330c      	adds	r3, #12
 80028a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80028a4:	61fa      	str	r2, [r7, #28]
 80028a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	69b9      	ldr	r1, [r7, #24]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	e841 2300 	strex	r3, r2, [r1]
 80028b0:	617b      	str	r3, [r7, #20]
   return(result);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e3      	bne.n	8002880 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028c2:	4619      	mov	r1, r3
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7fe fab5 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028ca:	e023      	b.n	8002914 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d009      	beq.n	80028ec <HAL_UART_IRQHandler+0x4f4>
 80028d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f93c 	bl	8002b62 <UART_Transmit_IT>
    return;
 80028ea:	e014      	b.n	8002916 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00e      	beq.n	8002916 <HAL_UART_IRQHandler+0x51e>
 80028f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f97b 	bl	8002c00 <UART_EndTransmit_IT>
    return;
 800290a:	e004      	b.n	8002916 <HAL_UART_IRQHandler+0x51e>
    return;
 800290c:	bf00      	nop
 800290e:	e002      	b.n	8002916 <HAL_UART_IRQHandler+0x51e>
      return;
 8002910:	bf00      	nop
 8002912:	e000      	b.n	8002916 <HAL_UART_IRQHandler+0x51e>
      return;
 8002914:	bf00      	nop
  }
}
 8002916:	37e8      	adds	r7, #232	@ 0xe8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	4613      	mov	r3, r2
 8002960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002962:	e03b      	b.n	80029dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296a:	d037      	beq.n	80029dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296c:	f7fe fc8a 	bl	8001284 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	6a3a      	ldr	r2, [r7, #32]
 8002978:	429a      	cmp	r2, r3
 800297a:	d302      	bcc.n	8002982 <UART_WaitOnFlagUntilTimeout+0x30>
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e03a      	b.n	80029fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d023      	beq.n	80029dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b80      	cmp	r3, #128	@ 0x80
 8002998:	d020      	beq.n	80029dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b40      	cmp	r3, #64	@ 0x40
 800299e:	d01d      	beq.n	80029dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d116      	bne.n	80029dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f856 	bl	8002a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2208      	movs	r2, #8
 80029ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e00f      	b.n	80029fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d0b4      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	88fa      	ldrh	r2, [r7, #6]
 8002a22:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2222      	movs	r2, #34	@ 0x22
 8002a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0220 	orr.w	r2, r2, #32
 8002a68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b095      	sub	sp, #84	@ 0x54
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a88:	e853 3f00 	ldrex	r3, [r3]
 8002a8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002aa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002aa6:	e841 2300 	strex	r3, r2, [r1]
 8002aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1e5      	bne.n	8002a7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3314      	adds	r3, #20
 8002ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	e853 3f00 	ldrex	r3, [r3]
 8002ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3314      	adds	r3, #20
 8002ad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e5      	bne.n	8002ab2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d119      	bne.n	8002b22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	e853 3f00 	ldrex	r3, [r3]
 8002afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f023 0310 	bic.w	r3, r3, #16
 8002b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b0e:	61ba      	str	r2, [r7, #24]
 8002b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b12:	6979      	ldr	r1, [r7, #20]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	e841 2300 	strex	r3, r2, [r1]
 8002b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1e5      	bne.n	8002aee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b30:	bf00      	nop
 8002b32:	3754      	adds	r7, #84	@ 0x54
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f7ff fef3 	bl	8002940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b085      	sub	sp, #20
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b21      	cmp	r3, #33	@ 0x21
 8002b74:	d13e      	bne.n	8002bf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b7e:	d114      	bne.n	8002baa <UART_Transmit_IT+0x48>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d110      	bne.n	8002baa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	1c9a      	adds	r2, r3, #2
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	621a      	str	r2, [r3, #32]
 8002ba8:	e008      	b.n	8002bbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	1c59      	adds	r1, r3, #1
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6211      	str	r1, [r2, #32]
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10f      	bne.n	8002bf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e000      	b.n	8002bf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff fe7b 	bl	800291c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08c      	sub	sp, #48	@ 0x30
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b22      	cmp	r3, #34	@ 0x22
 8002c42:	f040 80ae 	bne.w	8002da2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c4e:	d117      	bne.n	8002c80 <UART_Receive_IT+0x50>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d113      	bne.n	8002c80 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c60:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	1c9a      	adds	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c7e:	e026      	b.n	8002cce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c92:	d007      	beq.n	8002ca4 <UART_Receive_IT+0x74>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10a      	bne.n	8002cb2 <UART_Receive_IT+0x82>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e008      	b.n	8002cc4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d15d      	bne.n	8002d9e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0220 	bic.w	r2, r2, #32
 8002cf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695a      	ldr	r2, [r3, #20]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d135      	bne.n	8002d94 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	330c      	adds	r3, #12
 8002d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	e853 3f00 	ldrex	r3, [r3]
 8002d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f023 0310 	bic.w	r3, r3, #16
 8002d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d4e:	623a      	str	r2, [r7, #32]
 8002d50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	69f9      	ldr	r1, [r7, #28]
 8002d54:	6a3a      	ldr	r2, [r7, #32]
 8002d56:	e841 2300 	strex	r3, r2, [r1]
 8002d5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e5      	bne.n	8002d2e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d10a      	bne.n	8002d86 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7fe f851 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
 8002d92:	e002      	b.n	8002d9a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff fdca 	bl	800292e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e002      	b.n	8002da4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e000      	b.n	8002da4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002da2:	2302      	movs	r3, #2
  }
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3730      	adds	r7, #48	@ 0x30
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002de6:	f023 030c 	bic.w	r3, r3, #12
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	430b      	orrs	r3, r1
 8002df2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec0 <UART_SetConfig+0x114>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d103      	bne.n	8002e1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e14:	f7ff f986 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	e002      	b.n	8002e22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e1c:	f7ff f96e 	bl	80020fc <HAL_RCC_GetPCLK1Freq>
 8002e20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009a      	lsls	r2, r3, #2
 8002e2c:	441a      	add	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	4a22      	ldr	r2, [pc, #136]	@ (8002ec4 <UART_SetConfig+0x118>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	0119      	lsls	r1, r3, #4
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	009a      	lsls	r2, r3, #2
 8002e4c:	441a      	add	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e58:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec4 <UART_SetConfig+0x118>)
 8002e5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	2064      	movs	r0, #100	@ 0x64
 8002e62:	fb00 f303 	mul.w	r3, r0, r3
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	3332      	adds	r3, #50	@ 0x32
 8002e6c:	4a15      	ldr	r2, [pc, #84]	@ (8002ec4 <UART_SetConfig+0x118>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e78:	4419      	add	r1, r3
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	009a      	lsls	r2, r3, #2
 8002e84:	441a      	add	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <UART_SetConfig+0x118>)
 8002e92:	fba3 0302 	umull	r0, r3, r3, r2
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2064      	movs	r0, #100	@ 0x64
 8002e9a:	fb00 f303 	mul.w	r3, r0, r3
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	3332      	adds	r3, #50	@ 0x32
 8002ea4:	4a07      	ldr	r2, [pc, #28]	@ (8002ec4 <UART_SetConfig+0x118>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	f003 020f 	and.w	r2, r3, #15
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	440a      	add	r2, r1
 8002eb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	51eb851f 	.word	0x51eb851f

08002ec8 <Screen_begin>:
    [CONDITION_YEAR]     = {.max_value = 99, .min_value = 1},
    [CONDITION_HOUR]     = {.max_value = 23, .min_value = 0},
    [CONDITION_MINUTE]   = {.max_value = 59, .min_value = 0}
};

void Screen_begin(UART_HandleTypeDef * UART_Screen) {
 8002ec8:	b5b0      	push	{r4, r5, r7, lr}
 8002eca:	b09e      	sub	sp, #120	@ 0x78
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
    // Init _DWIN UART
	_Screen.Screen_DWIN.pUart = UART_Screen;
 8002ed0:	4a36      	ldr	r2, [pc, #216]	@ (8002fac <Screen_begin+0xe4>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6013      	str	r3, [r2, #0]

    // add receive function callback
	Screen_init_handler_table(&_Screen);
 8002ed6:	4835      	ldr	r0, [pc, #212]	@ (8002fac <Screen_begin+0xe4>)
 8002ed8:	f000 fbec 	bl	80036b4 <Screen_init_handler_table>
    DWIN_SetCallback((Dwin_t *)&_Screen,(pListenDWIN)Screen_RX_Callback);
 8002edc:	4934      	ldr	r1, [pc, #208]	@ (8002fb0 <Screen_begin+0xe8>)
 8002ede:	4833      	ldr	r0, [pc, #204]	@ (8002fac <Screen_begin+0xe4>)
 8002ee0:	f001 f9d7 	bl	8004292 <DWIN_SetCallback>

    Screen_Init_Variable(&_Screen);
 8002ee4:	4831      	ldr	r0, [pc, #196]	@ (8002fac <Screen_begin+0xe4>)
 8002ee6:	f000 fe81 	bl	8003bec <Screen_Init_Variable>

    // Init screen keyboard     
    _Screen.Screen_keyboard.VP_Text = 0xFFFF;
 8002eea:	4b30      	ldr	r3, [pc, #192]	@ (8002fac <Screen_begin+0xe4>)
 8002eec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ef0:	819a      	strh	r2, [r3, #12]
    _Screen.Screen_keyboard.Index_String = 0;
 8002ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8002fac <Screen_begin+0xe4>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    _Screen.Screen_keyboard.Caplock = 0;
 8002efa:	4b2c      	ldr	r3, [pc, #176]	@ (8002fac <Screen_begin+0xe4>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    DWIN_SetPage((Dwin_t *)&_Screen,DWINPAGE_MAIN);  // Go to first page when start
 8002f02:	2165      	movs	r1, #101	@ 0x65
 8002f04:	4829      	ldr	r0, [pc, #164]	@ (8002fac <Screen_begin+0xe4>)
 8002f06:	f001 f885 	bl	8004014 <DWIN_SetPage>
    // DWIN_SetText((Dwin_t *)&_Screen,0x7000,(uint8_t *)"Dang tt", strlen("Dangtt"));
    // DWIN_SetText((Dwin_t *)&_Screen,0x7010,(uint8_t *)"Dangtt1762003", sizeof("Dangtt1762003"));

    _Screen.pre_page = 106;
 8002f0a:	4b28      	ldr	r3, [pc, #160]	@ (8002fac <Screen_begin+0xe4>)
 8002f0c:	226a      	movs	r2, #106	@ 0x6a
 8002f0e:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8

    char* data_pin[] = {
 8002f12:	4b28      	ldr	r3, [pc, #160]	@ (8002fb4 <Screen_begin+0xec>)
 8002f14:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002f18:	461d      	mov	r5, r3
 8002f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f26:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    "VEE", "INH", "Z", "Y", "X", "VSS", "B", "C",
        "A", "VCC", "X0", "X1", "Y0", "Y1", "Z0", "Z1"
    };

    Screen_SetInfo_Pin(&_Screen,data_pin);
 8002f2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f32:	4619      	mov	r1, r3
 8002f34:	481d      	ldr	r0, [pc, #116]	@ (8002fac <Screen_begin+0xe4>)
 8002f36:	f001 f81d 	bl	8003f74 <Screen_SetInfo_Pin>

    char *data_test[] = {
 8002f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb8 <Screen_begin+0xf0>)
 8002f3c:	f107 0418 	add.w	r4, r7, #24
 8002f40:	461d      	mov	r5, r3
 8002f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        "11L1000G1011111V",
        "10L1100G1101111V",
        "11L0100G1111111V"
    };

    Screen_GetIcon_Pin(&_Screen,data_test);
 8002f4e:	f107 0318 	add.w	r3, r7, #24
 8002f52:	4619      	mov	r1, r3
 8002f54:	4815      	ldr	r0, [pc, #84]	@ (8002fac <Screen_begin+0xe4>)
 8002f56:	f000 fcf1 	bl	800393c <Screen_GetIcon_Pin>
    DWIN_SetArray_Icon(&_Screen,VP_ICON_DIRECTION_PIN,_Screen.IC_Testerx[PROGRAM_TEST1].config_pin,16);
 8002f5a:	4b14      	ldr	r3, [pc, #80]	@ (8002fac <Screen_begin+0xe4>)
 8002f5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f5e:	2310      	movs	r3, #16
 8002f60:	f244 0150 	movw	r1, #16464	@ 0x4050
 8002f64:	4811      	ldr	r0, [pc, #68]	@ (8002fac <Screen_begin+0xe4>)
 8002f66:	f001 f918 	bl	800419a <DWIN_SetArray_Icon>
    Screen_GetIcon_Result(&_Screen,data_test);
 8002f6a:	f107 0318 	add.w	r3, r7, #24
 8002f6e:	4619      	mov	r1, r3
 8002f70:	480e      	ldr	r0, [pc, #56]	@ (8002fac <Screen_begin+0xe4>)
 8002f72:	f000 fd6c 	bl	8003a4e <Screen_GetIcon_Result>
    DWIN_SetArray_Icon(&_Screen,VP_ICON_RESULT,_Screen.IC_Testerx[PROGRAM_TEST1].data_result[0],16);
 8002f76:	4b0d      	ldr	r3, [pc, #52]	@ (8002fac <Screen_begin+0xe4>)
 8002f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	f244 1150 	movw	r1, #16720	@ 0x4150
 8002f82:	480a      	ldr	r0, [pc, #40]	@ (8002fac <Screen_begin+0xe4>)
 8002f84:	f001 f909 	bl	800419a <DWIN_SetArray_Icon>
    // uint8_t data_clock2[] = {1,0,1,0,1,0,1,0,1,0};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1800,25,200,data_clock2,sizeof(data_clock2));
    // HAL_Delay(200);
    // uint8_t data_clock3[] = {0,1,0,1,0,1,0,1,0,1,1,1};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1800,25,200,data_clock3,sizeof(data_clock3));
    uint8_t data[15] = {1,1,0,0,1,0,0,1,1,0,0,0,1,1,0};
 8002f88:	4b0c      	ldr	r3, [pc, #48]	@ (8002fbc <Screen_begin+0xf4>)
 8002f8a:	f107 0408 	add.w	r4, r7, #8
 8002f8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f90:	c407      	stmia	r4!, {r0, r1, r2}
 8002f92:	8023      	strh	r3, [r4, #0]
 8002f94:	3402      	adds	r4, #2
 8002f96:	0c1b      	lsrs	r3, r3, #16
 8002f98:	7023      	strb	r3, [r4, #0]
    //     Address_show = Address_show + 0x200;
    //     Y_Coordinate = Y_Coordinate + 30;
    //     HAL_Delay(500);
    // }

    _Screen.Status_Dev_1 = false;
 8002f9a:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <Screen_begin+0xe4>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
}
 8002fa2:	bf00      	nop
 8002fa4:	3778      	adds	r7, #120	@ 0x78
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200002d4 	.word	0x200002d4
 8002fb0:	08002fdd 	.word	0x08002fdd
 8002fb4:	08008b34 	.word	0x08008b34
 8002fb8:	08008c14 	.word	0x08008c14
 8002fbc:	08008c34 	.word	0x08008c34

08002fc0 <Screen_RX_data>:

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4803      	ldr	r0, [pc, #12]	@ (8002fd8 <Screen_RX_data+0x18>)
 8002fcc:	f001 f96e 	bl	80042ac <DWIN_Listen>
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	200002d4 	.word	0x200002d4

08002fdc <Screen_RX_Callback>:

void Screen_RX_Callback(uint16_t Vpaddress, uint8_t lowByte, uint8_t highByte) { 
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80fb      	strh	r3, [r7, #6]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	717b      	strb	r3, [r7, #5]
 8002fea:	4613      	mov	r3, r2
 8002fec:	713b      	strb	r3, [r7, #4]
    screen_event_t screen_event;
    // If the VP is FFFF -> skip
    if (Vpaddress != 0xFFFF) {
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d014      	beq.n	8003022 <Screen_RX_Callback+0x46>
        screen_event.event = Index_VP(Vpaddress,lookup_VP_SIG,SIZE_LOOKUP_VP_SIG);
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	2206      	movs	r2, #6
 8002ffc:	490b      	ldr	r1, [pc, #44]	@ (800302c <Screen_RX_Callback+0x50>)
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fb1c 	bl	800363c <Index_VP>
 8003004:	4603      	mov	r3, r0
 8003006:	723b      	strb	r3, [r7, #8]
        screen_event.action = lowByte;
 8003008:	797b      	ldrb	r3, [r7, #5]
 800300a:	727b      	strb	r3, [r7, #9]
        screen_event.data = highByte;
 800300c:	793b      	ldrb	r3, [r7, #4]
 800300e:	72bb      	strb	r3, [r7, #10]
        screen_event.keyvalue = (uint16_t)((highByte<<8)&0xFF | lowByte&0xFF);
 8003010:	797b      	ldrb	r3, [r7, #5]
 8003012:	b29b      	uxth	r3, r3
 8003014:	81bb      	strh	r3, [r7, #12]

        // call to respective function
        Screen_excute_RX_function(&_Screen,&screen_event);
 8003016:	f107 0308 	add.w	r3, r7, #8
 800301a:	4619      	mov	r1, r3
 800301c:	4804      	ldr	r0, [pc, #16]	@ (8003030 <Screen_RX_Callback+0x54>)
 800301e:	f000 fbad 	bl	800377c <Screen_excute_RX_function>
    }
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2000000c 	.word	0x2000000c
 8003030:	200002d4 	.word	0x200002d4

08003034 <Navigation_setting_page>:


#pragma region CALLBACK FUNCTION VP ADRRESS 

void Navigation_setting_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
 800303e:	2174      	movs	r1, #116	@ 0x74
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 ffe7 	bl	8004014 <DWIN_SetPage>
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <Navigation_home_page>:

void Navigation_home_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
    uint8_t current_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 800305e:	4619      	mov	r1, r3
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	334a      	adds	r3, #74	@ 0x4a
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	73fb      	strb	r3, [r7, #15]
    UNUSED(current_program);
    // Show data

    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003078:	4619      	mov	r1, r3
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	3349      	adds	r3, #73	@ 0x49
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 ffc1 	bl	8004014 <DWIN_SetPage>
}   
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <Navigation_setting_program>:

void Navigation_setting_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]

    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
 80030a4:	216b      	movs	r1, #107	@ 0x6b
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 ffb4 	bl	8004014 <DWIN_SetPage>
}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <Navigation_setting_time>:

void Navigation_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_TIME);
 80030be:	2176      	movs	r1, #118	@ 0x76
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 ffa7 	bl	8004014 <DWIN_SetPage>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <Navigation_modify_program>:

void Navigation_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 80030d8:	216c      	movs	r1, #108	@ 0x6c
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 ff9a 	bl	8004014 <DWIN_SetPage>
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <Navigation_Change_MainPage>:

void Navigation_Change_MainPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
    // Change current device
    if (screen_event->data == DATA_NEXT_MAINPAGE) {
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	789b      	ldrb	r3, [r3, #2]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d111      	bne.n	800311e <Navigation_Change_MainPage+0x36>
        screen_obj->curr_device++;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003100:	3301      	adds	r3, #1
 8003102:	b2da      	uxtb	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        if (screen_obj->curr_device == MAX_DEVICE) {
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003110:	2b03      	cmp	r3, #3
 8003112:	d119      	bne.n	8003148 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_1;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
 800311c:	e014      	b.n	8003148 <Navigation_Change_MainPage+0x60>
        }
    } else if (screen_event->data == DATA_PREV_MAINPAGE) {
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	789b      	ldrb	r3, [r3, #2]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d110      	bne.n	8003148 <Navigation_Change_MainPage+0x60>
        screen_obj->curr_device--;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 800312c:	3b01      	subs	r3, #1
 800312e:	b2da      	uxtb	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        if (screen_obj->curr_device == 255 ) {
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 800313c:	2bff      	cmp	r3, #255	@ 0xff
 800313e:	d103      	bne.n	8003148 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_3;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        }
    }
    uint8_t curr_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 800314e:	4619      	mov	r1, r3
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	334a      	adds	r3, #74	@ 0x4a
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	73fb      	strb	r3, [r7, #15]
    /* Show data with correspond device index */
    switch (screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain) {
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003168:	4619      	mov	r1, r3
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	3349      	adds	r3, #73	@ 0x49
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	3b64      	subs	r3, #100	@ 0x64
 800317c:	2b0b      	cmp	r3, #11
 800317e:	d845      	bhi.n	800320c <Navigation_Change_MainPage+0x124>
 8003180:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <Navigation_Change_MainPage+0xa0>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	0800320b 	.word	0x0800320b
 800318c:	080031b9 	.word	0x080031b9
 8003190:	0800320b 	.word	0x0800320b
 8003194:	0800320d 	.word	0x0800320d
 8003198:	0800320d 	.word	0x0800320d
 800319c:	0800320d 	.word	0x0800320d
 80031a0:	0800320d 	.word	0x0800320d
 80031a4:	0800320d 	.word	0x0800320d
 80031a8:	0800320d 	.word	0x0800320d
 80031ac:	0800320d 	.word	0x0800320d
 80031b0:	0800320d 	.word	0x0800320d
 80031b4:	0800320b 	.word	0x0800320b
        case DWINPAGE_MAIN : {
            /* Show info */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 80031be:	4619      	mov	r1, r3
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	334c      	adds	r3, #76	@ 0x4c
 80031ce:	681c      	ldr	r4, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 80031d6:	4619      	mov	r1, r3
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	334c      	adds	r3, #76	@ 0x4c
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fc ffb1 	bl	8000150 <strlen>
 80031ee:	4603      	mov	r3, r0
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	4622      	mov	r2, r4
 80031f4:	f249 3150 	movw	r1, #37712	@ 0x9350
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 ff32 	bl	8004062 <DWIN_SetText>
            Screen_ShowData_Mainpage(screen_obj,curr_program);
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fde2 	bl	8003dcc <Screen_ShowData_Mainpage>
        } break;
 8003208:	e000      	b.n	800320c <Navigation_Change_MainPage+0x124>
        case DWINPAGE_MAIN_FINISH: {

        } break;
 800320a:	bf00      	nop
        } break;
        case DWINPAGE_MAIN_GRAPH: {

        } break;
    }
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	bd90      	pop	{r4, r7, pc}

08003214 <Navigation_Change_CaseTest>:

void Navigation_Change_CaseTest(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8003214:	b580      	push	{r7, lr}
 8003216:	b08e      	sub	sp, #56	@ 0x38
 8003218:	af02      	add	r7, sp, #8
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003224:	4619      	mov	r1, r3
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	334a      	adds	r3, #74	@ 0x4a
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	4619      	mov	r1, r3
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	1a5b      	subs	r3, r3, r1
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	3394      	adds	r3, #148	@ 0x94
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003252:	4619      	mov	r1, r3
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	334a      	adds	r3, #74	@ 0x4a
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 8003268:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	3395      	adds	r3, #149	@ 0x95
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    char ShowCase_String[30];
    // Change current case
    if (screen_event->data == DATA_PREV_CASE) {
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	789b      	ldrb	r3, [r3, #2]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d125      	bne.n	80032d4 <Navigation_Change_CaseTest+0xc0>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 800328e:	4619      	mov	r1, r3
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	3348      	adds	r3, #72	@ 0x48
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d044      	beq.n	800332e <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 80032aa:	461a      	mov	r2, r3
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	3348      	adds	r3, #72	@ 0x48
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	3b01      	subs	r3, #1
 80032be:	b2d8      	uxtb	r0, r3
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3348      	adds	r3, #72	@ 0x48
 80032ce:	4602      	mov	r2, r0
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e02c      	b.n	800332e <Navigation_Change_CaseTest+0x11a>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	789b      	ldrb	r3, [r3, #2]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d128      	bne.n	800332e <Navigation_Change_CaseTest+0x11a>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < (num_case - 1)) {
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 80032e2:	4619      	mov	r1, r3
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	460b      	mov	r3, r1
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	3348      	adds	r3, #72	@ 0x48
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032fa:	3b01      	subs	r3, #1
 80032fc:	429a      	cmp	r2, r3
 80032fe:	da16      	bge.n	800332e <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003306:	461a      	mov	r2, r3
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	3348      	adds	r3, #72	@ 0x48
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	b2d8      	uxtb	r0, r3
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	3348      	adds	r3, #72	@ 0x48
 800332a:	4602      	mov	r2, r0
 800332c:	701a      	strb	r2, [r3, #0]
        }
    }

    /* Show data */
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1,num_case);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003334:	4619      	mov	r1, r3
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	3348      	adds	r3, #72	@ 0x48
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800334c:	f107 000c 	add.w	r0, r7, #12
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	4a1a      	ldr	r2, [pc, #104]	@ (80033c0 <Navigation_Change_CaseTest+0x1ac>)
 8003356:	211e      	movs	r1, #30
 8003358:	f002 fdd6 	bl	8005f08 <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 800335c:	f107 030c 	add.w	r3, r7, #12
 8003360:	4618      	mov	r0, r3
 8003362:	f7fc fef5 	bl	8000150 <strlen>
 8003366:	4603      	mov	r3, r0
 8003368:	b29b      	uxth	r3, r3
 800336a:	f107 020c 	add.w	r2, r7, #12
 800336e:	f249 3180 	movw	r1, #37760	@ 0x9380
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fe75 	bl	8004062 <DWIN_SetText>
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_RESULT,_Screen.IC_Testerx[selectedProgram].data_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case],num_pin);
 8003378:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800337c:	4911      	ldr	r1, [pc, #68]	@ (80033c4 <Navigation_Change_CaseTest+0x1b0>)
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	3354      	adds	r3, #84	@ 0x54
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003392:	4618      	mov	r0, r3
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4603      	mov	r3, r0
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4403      	add	r3, r0
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3348      	adds	r3, #72	@ 0x48
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80033ae:	f244 1150 	movw	r1, #16720	@ 0x4150
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fef1 	bl	800419a <DWIN_SetArray_Icon>
}
 80033b8:	bf00      	nop
 80033ba:	3730      	adds	r7, #48	@ 0x30
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	08008c44 	.word	0x08008c44
 80033c4:	200002d4 	.word	0x200002d4

080033c8 <ON_OFF_Button>:

void Navigation_Next_PrevPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {

}

void ON_OFF_Button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
    // do sth
    screen_obj->Status_Dev_1 = !screen_obj->Status_Dev_1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf14      	ite	ne
 80033dc:	2301      	movne	r3, #1
 80033de:	2300      	moveq	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f083 0301 	eor.w	r3, r3, #1
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
    // change icon
    // DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ON_OFF_Icon_1,ON_ICON);
    //    HAL_Delay(1000);
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ON_OFF_Icon_1,screen_obj->Status_Dev_1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 80033fa:	461a      	mov	r2, r3
 80033fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fe9d 	bl	8004140 <DWIN_SetVariable_Icon>

}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <Select_program_button>:

void Select_program_button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
    uint8_t programID = screen_event->data; // Get new index program
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	789b      	ldrb	r3, [r3, #2]
 800341c:	73fb      	strb	r3, [r7, #15]

    /* Show data correspond with new index program */
    Screen_ShowData_Mainpage(screen_obj,programID);
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fcd2 	bl	8003dcc <Screen_ShowData_Mainpage>
}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <Navigation_num_keyboard>:

void Navigation_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8003430:	b580      	push	{r7, lr}
 8003432:	b08c      	sub	sp, #48	@ 0x30
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
    char TypeData_String[20] = {0};
 800343a:	f107 031c 	add.w	r3, r7, #28
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	611a      	str	r2, [r3, #16]
    char UnitData_String[20] = {0};
 800344a:	f107 0308 	add.w	r3, r7, #8
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	605a      	str	r2, [r3, #4]
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	60da      	str	r2, [r3, #12]
 8003458:	611a      	str	r2, [r3, #16]
    // Switch screen keyboard will excute in screen

    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	889a      	ldrh	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	330e      	adds	r3, #14
 800346e:	2232      	movs	r2, #50	@ 0x32
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f002 fde3 	bl	800603e <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f103 020e 	add.w	r2, r3, #14
 800347e:	2332      	movs	r3, #50	@ 0x32
 8003480:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fdec 	bl	8004062 <DWIN_SetText>
    // DWIN_SetText((Dwin_t *)screen_obj,VP_ShowType_Keyboard)

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_NUM_KEYBOARD);
 800348a:	216d      	movs	r1, #109	@ 0x6d
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fdc1 	bl	8004014 <DWIN_SetPage>
}
 8003492:	bf00      	nop
 8003494:	3730      	adds	r7, #48	@ 0x30
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <Navigation_full_keyboard>:

void Navigation_full_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	889a      	ldrh	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	330e      	adds	r3, #14
 80034b8:	2232      	movs	r2, #50	@ 0x32
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f002 fdbe 	bl	800603e <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f103 020e 	add.w	r2, r3, #14
 80034c8:	2332      	movs	r3, #50	@ 0x32
 80034ca:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fdc7 	bl	8004062 <DWIN_SetText>

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_FULL_KEYBOARD);
 80034d4:	2178      	movs	r1, #120	@ 0x78
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fd9c 	bl	8004014 <DWIN_SetPage>
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <Save_Information>:

void Save_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]

}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <Keyboard>:

void Keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
    
    /* The other Functions button */
    if (screen_event->data == 0xF3) { // Delete button
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	789b      	ldrb	r3, [r3, #2]
 8003506:	2bf3      	cmp	r3, #243	@ 0xf3
 8003508:	d10e      	bne.n	8003528 <Keyboard+0x30>
        if (screen_obj->Screen_keyboard.Index_String != 0) {
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8084 	beq.w	800361e <Keyboard+0x126>
            --screen_obj->Screen_keyboard.Index_String;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8003526:	e07a      	b.n	800361e <Keyboard+0x126>
        }
    } else if (screen_event->data == 0xF4) { // Caplock button
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	789b      	ldrb	r3, [r3, #2]
 800352c:	2bf4      	cmp	r3, #244	@ 0xf4
 800352e:	d11a      	bne.n	8003566 <Keyboard+0x6e>
        /* Toggle status Caplock keyboard */
        screen_obj->Screen_keyboard.Caplock = !screen_obj->Screen_keyboard.Caplock; 
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f083 0301 	eor.w	r3, r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	b2da      	uxtb	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_CAPLOCK,screen_obj->Screen_keyboard.Caplock);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003558:	461a      	mov	r2, r3
 800355a:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fdee 	bl	8004140 <DWIN_SetVariable_Icon>
 8003564:	e05b      	b.n	800361e <Keyboard+0x126>
    } else if (screen_event->data == 0xF1) { // Enter button
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	789b      	ldrb	r3, [r3, #2]
 800356a:	2bf1      	cmp	r3, #241	@ 0xf1
 800356c:	d118      	bne.n	80035a0 <Keyboard+0xa8>
        // Check if the data is valid
        if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f944 	bl	80037fc <Screen_CheckInput_Keyboard>
 8003574:	4603      	mov	r3, r0
 8003576:	2b01      	cmp	r3, #1
 8003578:	d151      	bne.n	800361e <Keyboard+0x126>
            // Show data input to VP 
            DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8999      	ldrh	r1, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f103 020e 	add.w	r2, r3, #14
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fd69 	bl	8004062 <DWIN_SetText>
            DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8003596:	4619      	mov	r1, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fd3b 	bl	8004014 <DWIN_SetPage>
 800359e:	e03e      	b.n	800361e <Keyboard+0x126>
        }
    }
    /* the data value is the character input -> add to string */
    else if (screen_event->data >= 0x41 && screen_event->data <= 0x5A) { // letter need check Caplock
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	789b      	ldrb	r3, [r3, #2]
 80035a4:	2b40      	cmp	r3, #64	@ 0x40
 80035a6:	d92c      	bls.n	8003602 <Keyboard+0x10a>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	789b      	ldrb	r3, [r3, #2]
 80035ac:	2b5a      	cmp	r3, #90	@ 0x5a
 80035ae:	d828      	bhi.n	8003602 <Keyboard+0x10a>
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035b6:	f083 0301 	eor.w	r3, r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d011      	beq.n	80035e4 <Keyboard+0xec>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data + 0x20;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	789a      	ldrb	r2, [r3, #2]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035ca:	1c59      	adds	r1, r3, #1
 80035cc:	b288      	uxth	r0, r1
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	f8a1 0040 	strh.w	r0, [r1, #64]	@ 0x40
 80035d4:	4619      	mov	r1, r3
 80035d6:	f102 0320 	add.w	r3, r2, #32
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	440b      	add	r3, r1
 80035e0:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 80035e2:	e01c      	b.n	800361e <Keyboard+0x126>
        } else {
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	b291      	uxth	r1, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 80035f4:	4619      	mov	r1, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	789a      	ldrb	r2, [r3, #2]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	440b      	add	r3, r1
 80035fe:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8003600:	e00d      	b.n	800361e <Keyboard+0x126>
        }
    } else {
        screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	b291      	uxth	r1, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 8003612:	4619      	mov	r1, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	789a      	ldrb	r2, [r3, #2]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	440b      	add	r3, r1
 800361c:	739a      	strb	r2, [r3, #14]
    }

    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f103 020e 	add.w	r2, r3, #14
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800362a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fd17 	bl	8004062 <DWIN_SetText>
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <Index_VP>:
#pragma endregion CALLBACK FUNCTION VP ADRRESS 

#pragma region FUNCTION EXCUTE SCREEN

// binary search index of VP address
uint8_t Index_VP(uint16_t vp, VP_item* VP_array, uint8_t Size_array) {
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	6039      	str	r1, [r7, #0]
 8003646:	80fb      	strh	r3, [r7, #6]
 8003648:	4613      	mov	r3, r2
 800364a:	717b      	strb	r3, [r7, #5]
    int left = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
    int right = Size_array - 1;
 8003650:	797b      	ldrb	r3, [r7, #5]
 8003652:	3b01      	subs	r3, #1
 8003654:	613b      	str	r3, [r7, #16]
    int mid;

    while (left <= right) {
 8003656:	e023      	b.n	80036a0 <Index_VP+0x64>
        mid = (left + right) / 2;
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4413      	add	r3, r2
 800365e:	0fda      	lsrs	r2, r3, #31
 8003660:	4413      	add	r3, r2
 8003662:	105b      	asrs	r3, r3, #1
 8003664:	60fb      	str	r3, [r7, #12]
        if (VP_array[mid].VP_address == vp) {
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	4413      	add	r3, r2
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	88fa      	ldrh	r2, [r7, #6]
 8003672:	429a      	cmp	r2, r3
 8003674:	d105      	bne.n	8003682 <Index_VP+0x46>
            return VP_array[mid].index;  // Found the vp
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	4413      	add	r3, r2
 800367e:	789b      	ldrb	r3, [r3, #2]
 8003680:	e013      	b.n	80036aa <Index_VP+0x6e>
        } else if (VP_array[mid].VP_address > vp) {
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	4413      	add	r3, r2
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	88fa      	ldrh	r2, [r7, #6]
 800368e:	429a      	cmp	r2, r3
 8003690:	d203      	bcs.n	800369a <Index_VP+0x5e>
            right = mid - 1;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3b01      	subs	r3, #1
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	e002      	b.n	80036a0 <Index_VP+0x64>
        } else {
            left = mid + 1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3301      	adds	r3, #1
 800369e:	617b      	str	r3, [r7, #20]
    while (left <= right) {
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	ddd7      	ble.n	8003658 <Index_VP+0x1c>
        }
    }

    return 255;  // VP not found
 80036a8:	23ff      	movs	r3, #255	@ 0xff
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <Screen_init_handler_table>:

void Screen_init_handler_table(Screen_t *const obj_screen) {
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
                                                                a_handler_num_keyboard,
                                                                a_handler_full_keyboard,
                                                                a_handler_save_sig  };

    // Assign the callback function to handler table
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PAGE]         = Navigation_setting_page ;
 80036bc:	4b21      	ldr	r3, [pc, #132]	@ (8003744 <Screen_init_handler_table+0x90>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a21      	ldr	r2, [pc, #132]	@ (8003748 <Screen_init_handler_table+0x94>)
 80036c2:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_HOME]                 = Navigation_home_page;
 80036c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003744 <Screen_init_handler_table+0x90>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3308      	adds	r3, #8
 80036ca:	4a20      	ldr	r2, [pc, #128]	@ (800374c <Screen_init_handler_table+0x98>)
 80036cc:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PROGRAM]      = Navigation_setting_program;
 80036ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <Screen_init_handler_table+0x90>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3314      	adds	r3, #20
 80036d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003750 <Screen_init_handler_table+0x9c>)
 80036d6:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_TIME]         = Navigation_setting_time;
 80036d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003744 <Screen_init_handler_table+0x90>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	330c      	adds	r3, #12
 80036de:	4a1d      	ldr	r2, [pc, #116]	@ (8003754 <Screen_init_handler_table+0xa0>)
 80036e0:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_MODIFY_PROGRAM]       = Navigation_modify_program;
 80036e2:	4b18      	ldr	r3, [pc, #96]	@ (8003744 <Screen_init_handler_table+0x90>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3328      	adds	r3, #40	@ 0x28
 80036e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003758 <Screen_init_handler_table+0xa4>)
 80036ea:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_MAINPAGE]      = Navigation_Change_MainPage;
 80036ec:	4b15      	ldr	r3, [pc, #84]	@ (8003744 <Screen_init_handler_table+0x90>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3318      	adds	r3, #24
 80036f2:	4a1a      	ldr	r2, [pc, #104]	@ (800375c <Screen_init_handler_table+0xa8>)
 80036f4:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASEDATA]      = Navigation_Change_CaseTest;
 80036f6:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <Screen_init_handler_table+0x90>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	331c      	adds	r3, #28
 80036fc:	4a18      	ldr	r2, [pc, #96]	@ (8003760 <Screen_init_handler_table+0xac>)
 80036fe:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_CHANGE_ICON][ON_OFF_DEV]                     = ON_OFF_Button;
 8003700:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <Screen_init_handler_table+0x90>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4a17      	ldr	r2, [pc, #92]	@ (8003764 <Screen_init_handler_table+0xb0>)
 8003706:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_CHANGE_ICON][SELECT_PROGRAM]                 = Select_program_button;
 8003708:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <Screen_init_handler_table+0x90>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	4a16      	ldr	r2, [pc, #88]	@ (8003768 <Screen_init_handler_table+0xb4>)
 8003710:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]     = Navigation_num_keyboard;
 8003712:	4b0c      	ldr	r3, [pc, #48]	@ (8003744 <Screen_init_handler_table+0x90>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	4a15      	ldr	r2, [pc, #84]	@ (800376c <Screen_init_handler_table+0xb8>)
 8003718:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]    = Navigation_full_keyboard;
 800371a:	4b0a      	ldr	r3, [pc, #40]	@ (8003744 <Screen_init_handler_table+0x90>)
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	4a14      	ldr	r2, [pc, #80]	@ (8003770 <Screen_init_handler_table+0xbc>)
 8003720:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SAVE][VALUE_SAVE_INFORMATION]                = Save_Information;
 8003722:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <Screen_init_handler_table+0x90>)
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	4a13      	ldr	r2, [pc, #76]	@ (8003774 <Screen_init_handler_table+0xc0>)
 8003728:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD]                     = Keyboard;
 800372a:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <Screen_init_handler_table+0x90>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	4a12      	ldr	r2, [pc, #72]	@ (8003778 <Screen_init_handler_table+0xc4>)
 8003730:	601a      	str	r2, [r3, #0]

    // assign handler table to handler table of object
    obj_screen->p_handler_table = (void *)handler_function_table;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a03      	ldr	r2, [pc, #12]	@ (8003744 <Screen_init_handler_table+0x90>)
 8003736:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	20000024 	.word	0x20000024
 8003748:	08003035 	.word	0x08003035
 800374c:	0800304f 	.word	0x0800304f
 8003750:	0800309b 	.word	0x0800309b
 8003754:	080030b5 	.word	0x080030b5
 8003758:	080030cf 	.word	0x080030cf
 800375c:	080030e9 	.word	0x080030e9
 8003760:	08003215 	.word	0x08003215
 8003764:	080033c9 	.word	0x080033c9
 8003768:	0800340f 	.word	0x0800340f
 800376c:	08003431 	.word	0x08003431
 8003770:	0800349b 	.word	0x0800349b
 8003774:	080034e5 	.word	0x080034e5
 8003778:	080034f9 	.word	0x080034f9

0800377c <Screen_excute_RX_function>:

void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
    // do sth ...


	handler_func **handler_function_table = (handler_func **) obj_screen->p_handler_table;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800378c:	60fb      	str	r3, [r7, #12]
    // excute the callback function
    if (screen_e->event == SIG_KEYBOARD) {  // ENVENT KEYBOARD
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d107      	bne.n	80037a6 <Screen_excute_RX_function+0x2a>
        handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD](obj_screen, screen_e);   
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3308      	adds	r3, #8
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6839      	ldr	r1, [r7, #0]
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
    } else {
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
    }  
}
 80037a4:	e025      	b.n	80037f2 <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_NUM_KEYBOARD) {  // SWTICH TO NUMBER KEYBOARD
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d107      	bne.n	80037be <Screen_excute_RX_function+0x42>
        handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	330c      	adds	r3, #12
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	4798      	blx	r3
}
 80037bc:	e019      	b.n	80037f2 <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d107      	bne.n	80037d6 <Screen_excute_RX_function+0x5a>
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3310      	adds	r3, #16
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6839      	ldr	r1, [r7, #0]
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
}
 80037d4:	e00d      	b.n	80037f2 <Screen_excute_RX_function+0x76>
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	785b      	ldrb	r3, [r3, #1]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6839      	ldr	r1, [r7, #0]
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <Screen_CheckInput_Keyboard>:

#pragma endregion FUNCTION EXCUTE SCREEN

#pragma region FUNCTION SCREEN 

Return_Status Screen_CheckInput_Keyboard(Screen_t *const obj_screen) {
 80037fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003800:	b08d      	sub	sp, #52	@ 0x34
 8003802:	af02      	add	r7, sp, #8
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	466b      	mov	r3, sp
 8003808:	461e      	mov	r6, r3
    char string[obj_screen->Screen_keyboard.Index_String];
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 8003810:	460b      	mov	r3, r1
 8003812:	3b01      	subs	r3, #1
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
 8003816:	b28b      	uxth	r3, r1
 8003818:	2200      	movs	r2, #0
 800381a:	4698      	mov	r8, r3
 800381c:	4691      	mov	r9, r2
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800382a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800382e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003832:	b28b      	uxth	r3, r1
 8003834:	2200      	movs	r2, #0
 8003836:	461c      	mov	r4, r3
 8003838:	4615      	mov	r5, r2
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	00eb      	lsls	r3, r5, #3
 8003844:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003848:	00e2      	lsls	r2, r4, #3
 800384a:	460b      	mov	r3, r1
 800384c:	3307      	adds	r3, #7
 800384e:	08db      	lsrs	r3, r3, #3
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	ebad 0d03 	sub.w	sp, sp, r3
 8003856:	ab02      	add	r3, sp, #8
 8003858:	3300      	adds	r3, #0
 800385a:	623b      	str	r3, [r7, #32]
    char warm_string[20] = {0};
 800385c:	f107 0308 	add.w	r3, r7, #8
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	611a      	str	r2, [r3, #16]
    float data_compare;
    // copy string
    memcpy(string,obj_screen->Screen_keyboard.String,obj_screen->Screen_keyboard.Index_String);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f103 010e 	add.w	r1, r3, #14
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003878:	461a      	mov	r2, r3
 800387a:	6a38      	ldr	r0, [r7, #32]
 800387c:	f002 fcb9 	bl	80061f2 <memcpy>
    /* compare data with limit */
    data_compare = atof(string);
 8003880:	6a38      	ldr	r0, [r7, #32]
 8003882:	f000 fd54 	bl	800432e <atof>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4610      	mov	r0, r2
 800388c:	4619      	mov	r1, r3
 800388e:	f7fd f91b 	bl	8000ac8 <__aeabi_d2f>
 8003892:	4603      	mov	r3, r0
 8003894:	61fb      	str	r3, [r7, #28]
    if (data_compare > obj_screen->Screen_condition->max_value) {
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4619      	mov	r1, r3
 800389e:	69f8      	ldr	r0, [r7, #28]
 80038a0:	f7fd f9ce 	bl	8000c40 <__aeabi_fcmpgt>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d019      	beq.n	80038de <Screen_CheckInput_Keyboard+0xe2>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MAX: %.2f", obj_screen->Screen_condition->max_value);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fc fdb9 	bl	8000428 <__aeabi_f2d>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	f107 0008 	add.w	r0, r7, #8
 80038be:	e9cd 2300 	strd	r2, r3, [sp]
 80038c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003934 <Screen_CheckInput_Keyboard+0x138>)
 80038c4:	2114      	movs	r1, #20
 80038c6:	f002 fb1f 	bl	8005f08 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,(uint8_t *)warm_string,sizeof(warm_string));
 80038ca:	f107 0208 	add.w	r2, r7, #8
 80038ce:	2314      	movs	r3, #20
 80038d0:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fbc4 	bl	8004062 <DWIN_SetText>
        return Status_ERROR;
 80038da:	2300      	movs	r3, #0
 80038dc:	e024      	b.n	8003928 <Screen_CheckInput_Keyboard+0x12c>
    } else if (data_compare < obj_screen->Screen_condition->min_value) {
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4619      	mov	r1, r3
 80038e6:	69f8      	ldr	r0, [r7, #28]
 80038e8:	f7fd f98c 	bl	8000c04 <__aeabi_fcmplt>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d019      	beq.n	8003926 <Screen_CheckInput_Keyboard+0x12a>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MIN: %.2f", obj_screen->Screen_condition->min_value);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc fd95 	bl	8000428 <__aeabi_f2d>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	f107 0008 	add.w	r0, r7, #8
 8003906:	e9cd 2300 	strd	r2, r3, [sp]
 800390a:	4a0b      	ldr	r2, [pc, #44]	@ (8003938 <Screen_CheckInput_Keyboard+0x13c>)
 800390c:	2114      	movs	r1, #20
 800390e:	f002 fafb 	bl	8005f08 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,(uint8_t *)warm_string,sizeof(warm_string));
 8003912:	f107 0208 	add.w	r2, r7, #8
 8003916:	2314      	movs	r3, #20
 8003918:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fba0 	bl	8004062 <DWIN_SetText>
        return Status_ERROR;
 8003922:	2300      	movs	r3, #0
 8003924:	e000      	b.n	8003928 <Screen_CheckInput_Keyboard+0x12c>
    } 
    return Status_SUCCESS; 
 8003926:	2301      	movs	r3, #1
 8003928:	46b5      	mov	sp, r6
}
 800392a:	4618      	mov	r0, r3
 800392c:	372c      	adds	r7, #44	@ 0x2c
 800392e:	46bd      	mov	sp, r7
 8003930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003934:	08008c50 	.word	0x08008c50
 8003938:	08008c5c 	.word	0x08008c5c

0800393c <Screen_GetIcon_Pin>:
 * @brief Function used to setup icon with data test
 * 
 * @param obj_screen : object screen
 * @param data_pin : array 2d data test
 */
void Screen_GetIcon_Pin(Screen_t *const screen_obj, char **data_pin) {
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b0a5      	sub	sp, #148	@ 0x94
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 800394c:	4619      	mov	r1, r3
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	334a      	adds	r3, #74	@ 0x4a
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	4619      	mov	r1, r3
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	1a5b      	subs	r3, r3, r1
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	3395      	adds	r3, #149	@ 0x95
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    
    uint8_t map_array[128] = {0};
 8003974:	f107 030c 	add.w	r3, r7, #12
 8003978:	2280      	movs	r2, #128	@ 0x80
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f002 fb5e 	bl	800603e <memset>
    map_array['G'] = ICON_GND;
 8003982:	2302      	movs	r3, #2
 8003984:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    map_array['V'] = ICON_VCC;
 8003988:	2303      	movs	r3, #3
 800398a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = malloc(num_pin * sizeof(uint8_t));
 800398e:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003998:	461c      	mov	r4, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 fcca 	bl	8004334 <malloc>
 80039a0:	4603      	mov	r3, r0
 80039a2:	4619      	mov	r1, r3
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	4623      	mov	r3, r4
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4423      	add	r3, r4
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	3350      	adds	r3, #80	@ 0x50
 80039b2:	6019      	str	r1, [r3, #0]

    /* Convert data to icon pin config */
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80039ba:	e03d      	b.n	8003a38 <Screen_GetIcon_Pin+0xfc>
        if (Pin_x >= 8) {
 80039bc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80039c0:	2b07      	cmp	r3, #7
 80039c2:	d90c      	bls.n	80039de <Screen_GetIcon_Pin+0xa2>
            map_array['0'] = ICON_OUTPUT;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_OUTPUT;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_INPUT;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_INPUT;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80039dc:	e00b      	b.n	80039f6 <Screen_GetIcon_Pin+0xba>
        } else {
            map_array['0'] = ICON_INPUT;
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_INPUT;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_OUTPUT;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_OUTPUT;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        }
        screen_obj->IC_Testerx[screen_obj->curr_device].config_pin[Pin_x] = map_array[(uint8_t)(data_pin[0][Pin_x])];
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80039fe:	4413      	add	r3, r2
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	3350      	adds	r3, #80	@ 0x50
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003a20:	4413      	add	r3, r2
 8003a22:	f100 0290 	add.w	r2, r0, #144	@ 0x90
 8003a26:	443a      	add	r2, r7
 8003a28:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8003a2c:	701a      	strb	r2, [r3, #0]
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 8003a2e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003a32:	3301      	adds	r3, #1
 8003a34:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8003a38:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8003a3c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d3bb      	bcc.n	80039bc <Screen_GetIcon_Pin+0x80>
    }
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	3794      	adds	r7, #148	@ 0x94
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd90      	pop	{r4, r7, pc}

08003a4e <Screen_GetIcon_Result>:

void Screen_SetIcon_Pin(Screen_t *const obj_screen) {

}

void Screen_GetIcon_Result(Screen_t *const screen_obj, char **result) {
 8003a4e:	b590      	push	{r4, r7, lr}
 8003a50:	b0a5      	sub	sp, #148	@ 0x94
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	6039      	str	r1, [r7, #0]
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003a5e:	4619      	mov	r1, r3
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	334a      	adds	r3, #74	@ 0x4a
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	4619      	mov	r1, r3
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	1a5b      	subs	r3, r3, r1
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3395      	adds	r3, #149	@ 0x95
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	334a      	adds	r3, #74	@ 0x4a
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	1a5b      	subs	r3, r3, r1
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	3394      	adds	r3, #148	@ 0x94
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    uint8_t map_array[128] = {0};
 8003ab4:	f107 0308 	add.w	r3, r7, #8
 8003ab8:	2280      	movs	r2, #128	@ 0x80
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f002 fabe 	bl	800603e <memset>
    map_array['0'] = ICON_LOGIC_LOW;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    map_array['1'] = ICON_LOGIC_HIGH;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    map_array['L'] = ICON_CLOCK_LOW;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    map_array['H'] = ICON_CLOCK_HIGH;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    map_array['V'] = ICON_LOGIC_NONE;
 8003ada:	2304      	movs	r3, #4
 8003adc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    map_array['G'] = ICON_LOGIC_NONE;
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].data_result = malloc(num_case * sizeof(char *));
 8003ae6:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8003aea:	009a      	lsls	r2, r3, #2
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003af2:	461c      	mov	r4, r3
 8003af4:	4610      	mov	r0, r2
 8003af6:	f000 fc1d 	bl	8004334 <malloc>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4619      	mov	r1, r3
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4623      	mov	r3, r4
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4423      	add	r3, r4
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	3354      	adds	r3, #84	@ 0x54
 8003b0c:	6019      	str	r1, [r3, #0]
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8003b14:	e01b      	b.n	8003b4e <Screen_GetIcon_Result+0x100>
        screen_obj->IC_Testerx[screen_obj->curr_device].data_result[Case_x] = malloc(num_pin * sizeof(char));
 8003b16:	f897 108c 	ldrb.w	r1, [r7, #140]	@ 0x8c
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003b20:	4618      	mov	r0, r3
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4603      	mov	r3, r0
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4403      	add	r3, r0
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3354      	adds	r3, #84	@ 0x54
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	18d4      	adds	r4, r2, r3
 8003b3a:	4608      	mov	r0, r1
 8003b3c:	f000 fbfa 	bl	8004334 <malloc>
 8003b40:	4603      	mov	r3, r0
 8003b42:	6023      	str	r3, [r4, #0]
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 8003b44:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8003b4e:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8003b52:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d3dd      	bcc.n	8003b16 <Screen_GetIcon_Result+0xc8>
    }

    /* Convert data to icon pin config */
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8003b60:	e038      	b.n	8003bd4 <Screen_GetIcon_Result+0x186>
        for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 8003b62:	2300      	movs	r3, #0
 8003b64:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8003b68:	e029      	b.n	8003bbe <Screen_GetIcon_Result+0x170>
        	screen_obj->IC_Testerx[screen_obj->curr_device].data_result[Case_x][Pin_x] = map_array[(uint8_t)(result[Case_x][Pin_x])];
 8003b6a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	4413      	add	r3, r2
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8003b7a:	4413      	add	r3, r2
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003b86:	4619      	mov	r1, r3
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	3354      	adds	r3, #84	@ 0x54
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f100 0290 	add.w	r2, r0, #144	@ 0x90
 8003bac:	443a      	add	r2, r7
 8003bae:	f812 2c88 	ldrb.w	r2, [r2, #-136]
 8003bb2:	701a      	strb	r2, [r3, #0]
        for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 8003bb4:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8003bb8:	3301      	adds	r3, #1
 8003bba:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8003bbe:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8003bc2:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d3cf      	bcc.n	8003b6a <Screen_GetIcon_Result+0x11c>
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 8003bca:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8003bd4:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 8003bd8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d3c0      	bcc.n	8003b62 <Screen_GetIcon_Result+0x114>
        }
    }
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3794      	adds	r7, #148	@ 0x94
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd90      	pop	{r4, r7, pc}
	...

08003bec <Screen_Init_Variable>:

void Screen_Init_Variable(Screen_t *const obj_screen) {
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
    obj_screen->curr_device = DEVICE_1;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_IC = "74HC4051";
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a5f      	ldr	r2, [pc, #380]	@ (8003d7c <Screen_Init_Variable+0x190>)
 8003c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC = "Description IC 74HC4051";
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a5e      	ldr	r2, [pc, #376]	@ (8003d80 <Screen_Init_Variable+0x194>)
 8003c08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    obj_screen->Program_Testx[PROGRAM_TEST1].num_IC = "5";
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a5d      	ldr	r2, [pc, #372]	@ (8003d84 <Screen_Init_Variable+0x198>)
 8003c10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    obj_screen->Program_Testx[PROGRAM_TEST2].Name_IC = "74HC4052";
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a5c      	ldr	r2, [pc, #368]	@ (8003d88 <Screen_Init_Variable+0x19c>)
 8003c18:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC = "Description IC 74HC4052";
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8003d8c <Screen_Init_Variable+0x1a0>)
 8003c20:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    obj_screen->Program_Testx[PROGRAM_TEST2].num_IC = "10";
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a5a      	ldr	r2, [pc, #360]	@ (8003d90 <Screen_Init_Variable+0x1a4>)
 8003c28:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

    obj_screen->Program_Testx[PROGRAM_TEST3].Name_IC = "74HC4053";
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a59      	ldr	r2, [pc, #356]	@ (8003d94 <Screen_Init_Variable+0x1a8>)
 8003c30:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC = "Description IC 74HC4053";
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a58      	ldr	r2, [pc, #352]	@ (8003d98 <Screen_Init_Variable+0x1ac>)
 8003c38:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    obj_screen->Program_Testx[PROGRAM_TEST3].num_IC = "15";
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a57      	ldr	r2, [pc, #348]	@ (8003d9c <Screen_Init_Variable+0x1b0>)
 8003c40:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    obj_screen->Program_Testx[PROGRAM_TEST4].Name_IC = "74HC4054";
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a56      	ldr	r2, [pc, #344]	@ (8003da0 <Screen_Init_Variable+0x1b4>)
 8003c48:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC = "Description IC 74HC4054";
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a55      	ldr	r2, [pc, #340]	@ (8003da4 <Screen_Init_Variable+0x1b8>)
 8003c50:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    obj_screen->Program_Testx[PROGRAM_TEST4].num_IC = "20";
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a54      	ldr	r2, [pc, #336]	@ (8003da8 <Screen_Init_Variable+0x1bc>)
 8003c58:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program = "Program 1";
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a53      	ldr	r2, [pc, #332]	@ (8003dac <Screen_Init_Variable+0x1c0>)
 8003c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program = "Program 2";
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a52      	ldr	r2, [pc, #328]	@ (8003db0 <Screen_Init_Variable+0x1c4>)
 8003c68:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program = "Program 3";
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a51      	ldr	r2, [pc, #324]	@ (8003db4 <Screen_Init_Variable+0x1c8>)
 8003c70:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program = "Program 4";
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a50      	ldr	r2, [pc, #320]	@ (8003db8 <Screen_Init_Variable+0x1cc>)
 8003c78:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

    obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester = "IC TESTER 1";
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a4f      	ldr	r2, [pc, #316]	@ (8003dbc <Screen_Init_Variable+0x1d0>)
 8003c80:	64da      	str	r2, [r3, #76]	@ 0x4c
    obj_screen->IC_Testerx[DEVICE_2].NameIC_Tester = "IC TESTER 2";
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a4e      	ldr	r2, [pc, #312]	@ (8003dc0 <Screen_Init_Variable+0x1d4>)
 8003c86:	661a      	str	r2, [r3, #96]	@ 0x60
    obj_screen->IC_Testerx[DEVICE_3].NameIC_Tester = "IC TESTER 3";
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a4e      	ldr	r2, [pc, #312]	@ (8003dc4 <Screen_Init_Variable+0x1d8>)
 8003c8c:	675a      	str	r2, [r3, #116]	@ 0x74

    obj_screen->IC_Testerx[DEVICE_1].curr_PageMain = DWINPAGE_MAIN;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2265      	movs	r2, #101	@ 0x65
 8003c92:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    obj_screen->IC_Testerx[DEVICE_2].curr_PageMain = DWINPAGE_MAIN;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2265      	movs	r2, #101	@ 0x65
 8003c9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    obj_screen->IC_Testerx[DEVICE_3].curr_PageMain = DWINPAGE_MAIN; 
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2265      	movs	r2, #101	@ 0x65
 8003ca2:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71

    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_1,(uint8_t *)obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fc fa4c 	bl	8000150 <strlen>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	f249 2125 	movw	r1, #37413	@ 0x9225
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f9cd 	bl	8004062 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_2,(uint8_t *)obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 40a0 	ldr.w	r4, [r3, #160]	@ 0xa0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fc fa3b 	bl	8000150 <strlen>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	4622      	mov	r2, r4
 8003ce0:	f249 2150 	movw	r1, #37456	@ 0x9250
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f9bc 	bl	8004062 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_3,(uint8_t *)obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fc fa2a 	bl	8000150 <strlen>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4622      	mov	r2, r4
 8003d02:	f249 2175 	movw	r1, #37493	@ 0x9275
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f9ab 	bl	8004062 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_4,(uint8_t *)obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 40d8 	ldr.w	r4, [r3, #216]	@ 0xd8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc fa19 	bl	8000150 <strlen>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	4622      	mov	r2, r4
 8003d24:	f44f 4113 	mov.w	r1, #37632	@ 0x9300
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f99a 	bl	8004062 <DWIN_SetText>

    DWIN_SetText((Dwin_t *)obj_screen,VP_Name_Tester,(uint8_t *)obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,strlen(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fc fa0a 	bl	8000150 <strlen>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	4622      	mov	r2, r4
 8003d42:	f249 3150 	movw	r1, #37712	@ 0x9350
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f98b 	bl	8004062 <DWIN_SetText>

    obj_screen->Program_Testx[PROGRAM_TEST1].num_pin = 16;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2210      	movs	r2, #16
 8003d50:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    obj_screen->Program_Testx[PROGRAM_TEST1].num_case = 8;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2208      	movs	r2, #8
 8003d58:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94

    /* Screen */
    obj_screen->Screen_keyboard.Caplock = false;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    obj_screen->Screen_keyboard.Index_String = 0;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    Screen_ShowData_Mainpage(&_Screen,0);
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4816      	ldr	r0, [pc, #88]	@ (8003dc8 <Screen_Init_Variable+0x1dc>)
 8003d70:	f000 f82c 	bl	8003dcc <Screen_ShowData_Mainpage>
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd90      	pop	{r4, r7, pc}
 8003d7c:	08008c68 	.word	0x08008c68
 8003d80:	08008c74 	.word	0x08008c74
 8003d84:	08008c8c 	.word	0x08008c8c
 8003d88:	08008c90 	.word	0x08008c90
 8003d8c:	08008c9c 	.word	0x08008c9c
 8003d90:	08008cb4 	.word	0x08008cb4
 8003d94:	08008cb8 	.word	0x08008cb8
 8003d98:	08008cc4 	.word	0x08008cc4
 8003d9c:	08008cdc 	.word	0x08008cdc
 8003da0:	08008ce0 	.word	0x08008ce0
 8003da4:	08008cec 	.word	0x08008cec
 8003da8:	08008d04 	.word	0x08008d04
 8003dac:	08008d08 	.word	0x08008d08
 8003db0:	08008d14 	.word	0x08008d14
 8003db4:	08008d20 	.word	0x08008d20
 8003db8:	08008d2c 	.word	0x08008d2c
 8003dbc:	08008d38 	.word	0x08008d38
 8003dc0:	08008d44 	.word	0x08008d44
 8003dc4:	08008d50 	.word	0x08008d50
 8003dc8:	200002d4 	.word	0x200002d4

08003dcc <Screen_ShowData_Mainpage>:

void Screen_ShowData_Mainpage(Screen_t *const screen_obj, uint8_t index_program) {
 8003dcc:	b5b0      	push	{r4, r5, r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
    uint8_t a_select_program[MAX_PROGRAM_TEST];
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	3388      	adds	r3, #136	@ 0x88
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fc f9b0 	bl	8000150 <strlen>
 8003df0:	4603      	mov	r3, r0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	3309      	adds	r3, #9
 8003df6:	77fb      	strb	r3, [r7, #31]
    uint8_t size_Description_IC = strlen("IC Description: ") + strlen((char *)screen_obj->Program_Testx[index_program].Description_IC);
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	338c      	adds	r3, #140	@ 0x8c
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fc f9a0 	bl	8000150 <strlen>
 8003e10:	4603      	mov	r3, r0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	3310      	adds	r3, #16
 8003e16:	77bb      	strb	r3, [r7, #30]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	3390      	adds	r3, #144	@ 0x90
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fc f990 	bl	8000150 <strlen>
 8003e30:	4603      	mov	r3, r0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	330f      	adds	r3, #15
 8003e36:	777b      	strb	r3, [r7, #29]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8003e38:	7ffb      	ldrb	r3, [r7, #31]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fa79 	bl	8004334 <malloc>
 8003e42:	4603      	mov	r3, r0
 8003e44:	61bb      	str	r3, [r7, #24]
    char *Text_Description_IC = malloc(size_Description_IC + 1);
 8003e46:	7fbb      	ldrb	r3, [r7, #30]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fa72 	bl	8004334 <malloc>
 8003e50:	4603      	mov	r3, r0
 8003e52:	617b      	str	r3, [r7, #20]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 8003e54:	7f7b      	ldrb	r3, [r7, #29]
 8003e56:	3301      	adds	r3, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fa6b 	bl	8004334 <malloc>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	613b      	str	r3, [r7, #16]

    strcpy(Text_Name_IC,"IC Name: ");
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	4940      	ldr	r1, [pc, #256]	@ (8003f68 <Screen_ShowData_Mainpage+0x19c>)
 8003e66:	461a      	mov	r2, r3
 8003e68:	460b      	mov	r3, r1
 8003e6a:	cb03      	ldmia	r3!, {r0, r1}
 8003e6c:	6010      	str	r0, [r2, #0]
 8003e6e:	6051      	str	r1, [r2, #4]
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	3388      	adds	r3, #136	@ 0x88
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4619      	mov	r1, r3
 8003e88:	69b8      	ldr	r0, [r7, #24]
 8003e8a:	f002 f8e0 	bl	800604e <strcat>
    strcpy(Text_Description_IC,"IC Description: ");
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	4a36      	ldr	r2, [pc, #216]	@ (8003f6c <Screen_ShowData_Mainpage+0x1a0>)
 8003e92:	461d      	mov	r5, r3
 8003e94:	4614      	mov	r4, r2
 8003e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e98:	6028      	str	r0, [r5, #0]
 8003e9a:	6069      	str	r1, [r5, #4]
 8003e9c:	60aa      	str	r2, [r5, #8]
 8003e9e:	60eb      	str	r3, [r5, #12]
 8003ea0:	7823      	ldrb	r3, [r4, #0]
 8003ea2:	742b      	strb	r3, [r5, #16]
    strcat(Text_Description_IC,(char *)screen_obj->Program_Testx[index_program].Description_IC);
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	338c      	adds	r3, #140	@ 0x8c
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6978      	ldr	r0, [r7, #20]
 8003eba:	f002 f8c8 	bl	800604e <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f70 <Screen_ShowData_Mainpage+0x1a4>)
 8003ec2:	461c      	mov	r4, r3
 8003ec4:	4615      	mov	r5, r2
 8003ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ec8:	6020      	str	r0, [r4, #0]
 8003eca:	6061      	str	r1, [r4, #4]
 8003ecc:	60a2      	str	r2, [r4, #8]
 8003ece:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3390      	adds	r3, #144	@ 0x90
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6938      	ldr	r0, [r7, #16]
 8003ee6:	f002 f8b2 	bl	800604e <strcat>

    memset(a_select_program,1,MAX_PROGRAM_TEST);
 8003eea:	f107 030c 	add.w	r3, r7, #12
 8003eee:	2204      	movs	r2, #4
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f002 f8a3 	bl	800603e <memset>
    // Get the program selected
    a_select_program[index_program] = 0 ;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	3320      	adds	r3, #32
 8003efc:	443b      	add	r3, r7
 8003efe:	2200      	movs	r2, #0
 8003f00:	f803 2c14 	strb.w	r2, [r3, #-20]
    screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index = index_program;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	334a      	adds	r3, #74	@ 0x4a
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	701a      	strb	r2, [r3, #0]

    // Show data in screen
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_SELECT_PROGRAM,a_select_program,MAX_PROGRAM_TEST);
 8003f1e:	f107 020c 	add.w	r2, r7, #12
 8003f22:	2304      	movs	r3, #4
 8003f24:	f44f 4182 	mov.w	r1, #16640	@ 0x4100
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f936 	bl	800419a <DWIN_SetArray_Icon>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_IC,(uint8_t *)Text_Name_IC,size_Name_IC);
 8003f2e:	7ffb      	ldrb	r3, [r7, #31]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	f44f 4111 	mov.w	r1, #37120	@ 0x9100
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f892 	bl	8004062 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Description_IC,(uint8_t *)Text_Description_IC,size_Description_IC);
 8003f3e:	7fbb      	ldrb	r3, [r7, #30]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	f249 1150 	movw	r1, #37200	@ 0x9150
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f88a 	bl	8004062 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,(uint8_t *)Text_Num_IC,size_Num_IC);
 8003f4e:	7f7b      	ldrb	r3, [r7, #29]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f882 	bl	8004062 <DWIN_SetText>
}
 8003f5e:	bf00      	nop
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bdb0      	pop	{r4, r5, r7, pc}
 8003f66:	bf00      	nop
 8003f68:	08008d5c 	.word	0x08008d5c
 8003f6c:	08008d68 	.word	0x08008d68
 8003f70:	08008d7c 	.word	0x08008d7c

08003f74 <Screen_SetInfo_Pin>:

void Screen_SetInfo_Pin(Screen_t *const screen_obj, char **array_data) {
 8003f74:	b590      	push	{r4, r7, lr}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
    // for (uint8_t pin_x = 0; pin_x < screen_obj->Program_Testx[PROGRAM_TEST1].num_pin; pin_x++) {
    //     if (screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x] != NULL) {
    //         free(screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x]);
    //     } 
    // }
    uint16_t Address_VP = VP_Name_Pin;
 8003f7e:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 8003f82:	81fb      	strh	r3, [r7, #14]
    screen_obj->Program_Testx[PROGRAM_TEST1].data_pin = malloc( screen_obj->Program_Testx[PROGRAM_TEST1].num_pin * sizeof(char *) );
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 f9d1 	bl	8004334 <malloc>
 8003f92:	4603      	mov	r3, r0
 8003f94:	461a      	mov	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    /* Get new data */
    for (uint8_t pin_x = 0; pin_x < screen_obj->Program_Testx[PROGRAM_TEST1].num_pin; pin_x++) {
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	737b      	strb	r3, [r7, #13]
 8003fa0:	e02d      	b.n	8003ffe <Screen_SetInfo_Pin+0x8a>
        screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x] = strdup(array_data[pin_x]);
 8003fa2:	7b7b      	ldrb	r3, [r7, #13]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	4413      	add	r3, r2
 8003faa:	6819      	ldr	r1, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003fb2:	7b7b      	ldrb	r3, [r7, #13]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	18d4      	adds	r4, r2, r3
 8003fb8:	4608      	mov	r0, r1
 8003fba:	f002 f857 	bl	800606c <strdup>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	6023      	str	r3, [r4, #0]
        DWIN_SetText((Dwin_t *)screen_obj,Address_VP,screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x],strlen(screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x]));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003fc8:	7b7b      	ldrb	r3, [r7, #13]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	681c      	ldr	r4, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003fd6:	7b7b      	ldrb	r3, [r7, #13]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fc f8b6 	bl	8000150 <strlen>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	89f9      	ldrh	r1, [r7, #14]
 8003fea:	4622      	mov	r2, r4
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f838 	bl	8004062 <DWIN_SetText>
        Address_VP = Address_VP + 0x10;
 8003ff2:	89fb      	ldrh	r3, [r7, #14]
 8003ff4:	3310      	adds	r3, #16
 8003ff6:	81fb      	strh	r3, [r7, #14]
    for (uint8_t pin_x = 0; pin_x < screen_obj->Program_Testx[PROGRAM_TEST1].num_pin; pin_x++) {
 8003ff8:	7b7b      	ldrb	r3, [r7, #13]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	737b      	strb	r3, [r7, #13]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8004004:	7b7a      	ldrb	r2, [r7, #13]
 8004006:	429a      	cmp	r2, r3
 8004008:	d3cb      	bcc.n	8003fa2 <Screen_SetInfo_Pin+0x2e>
    }
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	bd90      	pop	{r4, r7, pc}

08004014 <DWIN_SetPage>:
#include "DWIN_HMI.h"

void DWIN_SetPage(Dwin_t *pDwin, uint8_t page)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	70fb      	strb	r3, [r7, #3]
    uint8_t sendBuffer[10] = {CMD_HEAD1, CMD_HEAD2, 0x07, CMD_WRITE, 0x00, 0x84, 0x5A, 0x01, 0x00, page};
 8004020:	235a      	movs	r3, #90	@ 0x5a
 8004022:	733b      	strb	r3, [r7, #12]
 8004024:	23a5      	movs	r3, #165	@ 0xa5
 8004026:	737b      	strb	r3, [r7, #13]
 8004028:	2307      	movs	r3, #7
 800402a:	73bb      	strb	r3, [r7, #14]
 800402c:	2382      	movs	r3, #130	@ 0x82
 800402e:	73fb      	strb	r3, [r7, #15]
 8004030:	2300      	movs	r3, #0
 8004032:	743b      	strb	r3, [r7, #16]
 8004034:	2384      	movs	r3, #132	@ 0x84
 8004036:	747b      	strb	r3, [r7, #17]
 8004038:	235a      	movs	r3, #90	@ 0x5a
 800403a:	74bb      	strb	r3, [r7, #18]
 800403c:	2301      	movs	r3, #1
 800403e:	74fb      	strb	r3, [r7, #19]
 8004040:	2300      	movs	r3, #0
 8004042:	753b      	strb	r3, [r7, #20]
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	f107 010c 	add.w	r1, r7, #12
 8004050:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004054:	220a      	movs	r2, #10
 8004056:	f7fe f8e7 	bl	8002228 <HAL_UART_Transmit>
}
 800405a:	bf00      	nop
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <DWIN_SetText>:

void DWIN_SetText(Dwin_t *pDwin, uint16_t VP_address, uint8_t *textData, uint16_t datalen) {
 8004062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004066:	b08a      	sub	sp, #40	@ 0x28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	461a      	mov	r2, r3
 8004070:	460b      	mov	r3, r1
 8004072:	817b      	strh	r3, [r7, #10]
 8004074:	4613      	mov	r3, r2
 8004076:	813b      	strh	r3, [r7, #8]
 8004078:	466b      	mov	r3, sp
 800407a:	469a      	mov	sl, r3
    uint8_t ffEnding[2] = { 0xFF, 0xFF };
 800407c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004080:	83bb      	strh	r3, [r7, #28]
    uint8_t sendBuffer[8 + datalen];
 8004082:	893b      	ldrh	r3, [r7, #8]
 8004084:	f103 0608 	add.w	r6, r3, #8
 8004088:	1e73      	subs	r3, r6, #1
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24
 800408c:	4632      	mov	r2, r6
 800408e:	2300      	movs	r3, #0
 8004090:	4690      	mov	r8, r2
 8004092:	4699      	mov	r9, r3
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040a8:	4632      	mov	r2, r6
 80040aa:	2300      	movs	r3, #0
 80040ac:	4614      	mov	r4, r2
 80040ae:	461d      	mov	r5, r3
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	00eb      	lsls	r3, r5, #3
 80040ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040be:	00e2      	lsls	r2, r4, #3
 80040c0:	4633      	mov	r3, r6
 80040c2:	3307      	adds	r3, #7
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	ebad 0d03 	sub.w	sp, sp, r3
 80040cc:	466b      	mov	r3, sp
 80040ce:	3300      	adds	r3, #0
 80040d0:	623b      	str	r3, [r7, #32]

    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 80040d2:	235a      	movs	r3, #90	@ 0x5a
 80040d4:	753b      	strb	r3, [r7, #20]
 80040d6:	23a5      	movs	r3, #165	@ 0xa5
 80040d8:	757b      	strb	r3, [r7, #21]
 80040da:	893b      	ldrh	r3, [r7, #8]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	3305      	adds	r3, #5
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	75bb      	strb	r3, [r7, #22]
 80040e4:	2382      	movs	r3, #130	@ 0x82
 80040e6:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 80040e8:	897b      	ldrh	r3, [r7, #10]
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 80040f0:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 80040f2:	897b      	ldrh	r3, [r7, #10]
 80040f4:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 80040f6:	767b      	strb	r3, [r7, #25]
    
    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f107 0314 	add.w	r3, r7, #20
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	6010      	str	r0, [r2, #0]
 8004104:	889b      	ldrh	r3, [r3, #4]
 8004106:	8093      	strh	r3, [r2, #4]
    memcpy(sendBuffer + 6, textData, datalen);
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	3306      	adds	r3, #6
 800410c:	893a      	ldrh	r2, [r7, #8]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4618      	mov	r0, r3
 8004112:	f002 f86e 	bl	80061f2 <memcpy>
    memcpy(sendBuffer + (6 + datalen), ffEnding, sizeof(ffEnding));
 8004116:	893b      	ldrh	r3, [r7, #8]
 8004118:	3306      	adds	r3, #6
 800411a:	461a      	mov	r2, r3
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	4413      	add	r3, r2
 8004120:	8bba      	ldrh	r2, [r7, #28]
 8004122:	801a      	strh	r2, [r3, #0]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	b2b2      	uxth	r2, r6
 800412a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800412e:	6a39      	ldr	r1, [r7, #32]
 8004130:	f7fe f87a 	bl	8002228 <HAL_UART_Transmit>
 8004134:	46d5      	mov	sp, sl
}
 8004136:	bf00      	nop
 8004138:	3728      	adds	r7, #40	@ 0x28
 800413a:	46bd      	mov	sp, r7
 800413c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004140 <DWIN_SetVariable_Icon>:
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
}

void DWIN_SetVariable_Icon(Dwin_t *pDwin, uint16_t VP_address, uint16_t data ) {
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	807b      	strh	r3, [r7, #2]
 800414c:	4613      	mov	r3, r2
 800414e:	803b      	strh	r3, [r7, #0]
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8004150:	235a      	movs	r3, #90	@ 0x5a
 8004152:	723b      	strb	r3, [r7, #8]
 8004154:	23a5      	movs	r3, #165	@ 0xa5
 8004156:	727b      	strb	r3, [r7, #9]
 8004158:	2305      	movs	r3, #5
 800415a:	72bb      	strb	r3, [r7, #10]
 800415c:	2382      	movs	r3, #130	@ 0x82
 800415e:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 8004160:	887b      	ldrh	r3, [r7, #2]
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	b29b      	uxth	r3, r3
 8004166:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8004168:	733b      	strb	r3, [r7, #12]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 800416a:	887b      	ldrh	r3, [r7, #2]
 800416c:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800416e:	737b      	strb	r3, [r7, #13]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 8004170:	883b      	ldrh	r3, [r7, #0]
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	b29b      	uxth	r3, r3
 8004176:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8004178:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 800417a:	883b      	ldrh	r3, [r7, #0]
 800417c:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800417e:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	f107 0108 	add.w	r1, r7, #8
 8004188:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800418c:	2208      	movs	r2, #8
 800418e:	f7fe f84b 	bl	8002228 <HAL_UART_Transmit>
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <DWIN_SetArray_Icon>:

void DWIN_SetArray_Icon(Dwin_t *pDwin, uint16_t VP_address_begin, uint8_t *data_array, uint8_t data_length ) {
 800419a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800419e:	b08b      	sub	sp, #44	@ 0x2c
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	461a      	mov	r2, r3
 80041a8:	460b      	mov	r3, r1
 80041aa:	817b      	strh	r3, [r7, #10]
 80041ac:	4613      	mov	r3, r2
 80041ae:	727b      	strb	r3, [r7, #9]
 80041b0:	466b      	mov	r3, sp
 80041b2:	461e      	mov	r6, r3
    uint16_t Total_Data_Length = data_length * 2;
 80041b4:	7a7b      	ldrb	r3, [r7, #9]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t sendBuffer[6 +Total_Data_Length];
 80041bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80041be:	1d99      	adds	r1, r3, #6
 80041c0:	1e4b      	subs	r3, r1, #1
 80041c2:	623b      	str	r3, [r7, #32]
 80041c4:	460a      	mov	r2, r1
 80041c6:	2300      	movs	r3, #0
 80041c8:	4690      	mov	r8, r2
 80041ca:	4699      	mov	r9, r3
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041e0:	460a      	mov	r2, r1
 80041e2:	2300      	movs	r3, #0
 80041e4:	4614      	mov	r4, r2
 80041e6:	461d      	mov	r5, r3
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	00eb      	lsls	r3, r5, #3
 80041f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f6:	00e2      	lsls	r2, r4, #3
 80041f8:	460b      	mov	r3, r1
 80041fa:	3307      	adds	r3, #7
 80041fc:	08db      	lsrs	r3, r3, #3
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	ebad 0d03 	sub.w	sp, sp, r3
 8004204:	466b      	mov	r3, sp
 8004206:	3300      	adds	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800420a:	235a      	movs	r3, #90	@ 0x5a
 800420c:	753b      	strb	r3, [r7, #20]
 800420e:	23a5      	movs	r3, #165	@ 0xa5
 8004210:	757b      	strb	r3, [r7, #21]
 8004212:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004214:	b2db      	uxtb	r3, r3
 8004216:	3303      	adds	r3, #3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	75bb      	strb	r3, [r7, #22]
 800421c:	2382      	movs	r3, #130	@ 0x82
 800421e:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 8004220:	897b      	ldrh	r3, [r7, #10]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	b29b      	uxth	r3, r3
 8004226:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 8004228:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 800422a:	897b      	ldrh	r3, [r7, #10]
 800422c:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800422e:	767b      	strb	r3, [r7, #25]

    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	461a      	mov	r2, r3
 8004234:	f107 0314 	add.w	r3, r7, #20
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	6010      	str	r0, [r2, #0]
 800423c:	889b      	ldrh	r3, [r3, #4]
 800423e:	8093      	strh	r3, [r2, #4]
    /* Convert data array uint8_t to uint16_t */
    for (uint16_t i = 0; i < data_length; i++) {
 8004240:	2300      	movs	r3, #0
 8004242:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004244:	e012      	b.n	800426c <DWIN_SetArray_Icon+0xd2>
        sendBuffer[6 + (i * 2)] = 0x00;              // High byte 
 8004246:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004248:	3303      	adds	r3, #3
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	2000      	movs	r0, #0
 8004250:	54d0      	strb	r0, [r2, r3]
        sendBuffer[6 + (i * 2) + 1] = data_array[i]; // Low byte is data
 8004252:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	441a      	add	r2, r3
 8004258:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800425a:	3303      	adds	r3, #3
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	3301      	adds	r3, #1
 8004260:	7810      	ldrb	r0, [r2, #0]
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	54d0      	strb	r0, [r2, r3]
    for (uint16_t i = 0; i < data_length; i++) {
 8004266:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004268:	3301      	adds	r3, #1
 800426a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800426c:	7a7b      	ldrb	r3, [r7, #9]
 800426e:	b29b      	uxth	r3, r3
 8004270:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004272:	429a      	cmp	r2, r3
 8004274:	d3e7      	bcc.n	8004246 <DWIN_SetArray_Icon+0xac>
    }

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	b28a      	uxth	r2, r1
 800427c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004280:	69f9      	ldr	r1, [r7, #28]
 8004282:	f7fd ffd1 	bl	8002228 <HAL_UART_Transmit>
 8004286:	46b5      	mov	sp, r6
}
 8004288:	bf00      	nop
 800428a:	372c      	adds	r7, #44	@ 0x2c
 800428c:	46bd      	mov	sp, r7
 800428e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004292 <DWIN_SetCallback>:
    }
}

// Set DWIN callback function when receive data 
void DWIN_SetCallback(Dwin_t *pDwin, pListenDWIN dwin_callback)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
    pDwin->p_ListenDWIN_Callback = dwin_callback;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	609a      	str	r2, [r3, #8]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <DWIN_Listen>:

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
    uint16_t VPaddress;
    uint16_t lowByte;
    uint16_t highByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b5a      	cmp	r3, #90	@ 0x5a
 80042bc:	d133      	bne.n	8004326 <DWIN_Listen+0x7a>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	3301      	adds	r3, #1
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2ba5      	cmp	r3, #165	@ 0xa5
 80042c6:	d12e      	bne.n	8004326 <DWIN_Listen+0x7a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	3303      	adds	r3, #3
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b83      	cmp	r3, #131	@ 0x83
 80042d0:	d129      	bne.n	8004326 <DWIN_Listen+0x7a>
        {
            datalength = RX_Buffer[2];
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	789b      	ldrb	r3, [r3, #2]
 80042d6:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	3302      	adds	r3, #2
 80042dc:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	3304      	adds	r3, #4
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	b21b      	sxth	r3, r3
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	b21a      	sxth	r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	3305      	adds	r3, #5
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	b21b      	sxth	r3, r3
 80042f2:	4313      	orrs	r3, r2
 80042f4:	b21b      	sxth	r3, r3
 80042f6:	81bb      	strh	r3, [r7, #12]
            /* get return key value */
            lowByte = RX_Buffer[datalength];  
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	4413      	add	r3, r2
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	817b      	strh	r3, [r7, #10]
            highByte = RX_Buffer[datalength-1];
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	3b01      	subs	r3, #1
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	4413      	add	r3, r2
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	813b      	strh	r3, [r7, #8]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <DWIN_Listen+0x7a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lowByte,highByte);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	897a      	ldrh	r2, [r7, #10]
 800431c:	b2d1      	uxtb	r1, r2
 800431e:	893a      	ldrh	r2, [r7, #8]
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	89b8      	ldrh	r0, [r7, #12]
 8004324:	4798      	blx	r3
            }
        }
    }

    
}
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <atof>:
 800432e:	2100      	movs	r1, #0
 8004330:	f000 beb8 	b.w	80050a4 <strtod>

08004334 <malloc>:
 8004334:	4b02      	ldr	r3, [pc, #8]	@ (8004340 <malloc+0xc>)
 8004336:	4601      	mov	r1, r0
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	f000 b825 	b.w	8004388 <_malloc_r>
 800433e:	bf00      	nop
 8004340:	200001b4 	.word	0x200001b4

08004344 <sbrk_aligned>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	4e0f      	ldr	r6, [pc, #60]	@ (8004384 <sbrk_aligned+0x40>)
 8004348:	460c      	mov	r4, r1
 800434a:	6831      	ldr	r1, [r6, #0]
 800434c:	4605      	mov	r5, r0
 800434e:	b911      	cbnz	r1, 8004356 <sbrk_aligned+0x12>
 8004350:	f001 fef2 	bl	8006138 <_sbrk_r>
 8004354:	6030      	str	r0, [r6, #0]
 8004356:	4621      	mov	r1, r4
 8004358:	4628      	mov	r0, r5
 800435a:	f001 feed 	bl	8006138 <_sbrk_r>
 800435e:	1c43      	adds	r3, r0, #1
 8004360:	d103      	bne.n	800436a <sbrk_aligned+0x26>
 8004362:	f04f 34ff 	mov.w	r4, #4294967295
 8004366:	4620      	mov	r0, r4
 8004368:	bd70      	pop	{r4, r5, r6, pc}
 800436a:	1cc4      	adds	r4, r0, #3
 800436c:	f024 0403 	bic.w	r4, r4, #3
 8004370:	42a0      	cmp	r0, r4
 8004372:	d0f8      	beq.n	8004366 <sbrk_aligned+0x22>
 8004374:	1a21      	subs	r1, r4, r0
 8004376:	4628      	mov	r0, r5
 8004378:	f001 fede 	bl	8006138 <_sbrk_r>
 800437c:	3001      	adds	r0, #1
 800437e:	d1f2      	bne.n	8004366 <sbrk_aligned+0x22>
 8004380:	e7ef      	b.n	8004362 <sbrk_aligned+0x1e>
 8004382:	bf00      	nop
 8004384:	20000418 	.word	0x20000418

08004388 <_malloc_r>:
 8004388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800438c:	1ccd      	adds	r5, r1, #3
 800438e:	f025 0503 	bic.w	r5, r5, #3
 8004392:	3508      	adds	r5, #8
 8004394:	2d0c      	cmp	r5, #12
 8004396:	bf38      	it	cc
 8004398:	250c      	movcc	r5, #12
 800439a:	2d00      	cmp	r5, #0
 800439c:	4606      	mov	r6, r0
 800439e:	db01      	blt.n	80043a4 <_malloc_r+0x1c>
 80043a0:	42a9      	cmp	r1, r5
 80043a2:	d904      	bls.n	80043ae <_malloc_r+0x26>
 80043a4:	230c      	movs	r3, #12
 80043a6:	6033      	str	r3, [r6, #0]
 80043a8:	2000      	movs	r0, #0
 80043aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004484 <_malloc_r+0xfc>
 80043b2:	f000 f869 	bl	8004488 <__malloc_lock>
 80043b6:	f8d8 3000 	ldr.w	r3, [r8]
 80043ba:	461c      	mov	r4, r3
 80043bc:	bb44      	cbnz	r4, 8004410 <_malloc_r+0x88>
 80043be:	4629      	mov	r1, r5
 80043c0:	4630      	mov	r0, r6
 80043c2:	f7ff ffbf 	bl	8004344 <sbrk_aligned>
 80043c6:	1c43      	adds	r3, r0, #1
 80043c8:	4604      	mov	r4, r0
 80043ca:	d158      	bne.n	800447e <_malloc_r+0xf6>
 80043cc:	f8d8 4000 	ldr.w	r4, [r8]
 80043d0:	4627      	mov	r7, r4
 80043d2:	2f00      	cmp	r7, #0
 80043d4:	d143      	bne.n	800445e <_malloc_r+0xd6>
 80043d6:	2c00      	cmp	r4, #0
 80043d8:	d04b      	beq.n	8004472 <_malloc_r+0xea>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	4639      	mov	r1, r7
 80043de:	4630      	mov	r0, r6
 80043e0:	eb04 0903 	add.w	r9, r4, r3
 80043e4:	f001 fea8 	bl	8006138 <_sbrk_r>
 80043e8:	4581      	cmp	r9, r0
 80043ea:	d142      	bne.n	8004472 <_malloc_r+0xea>
 80043ec:	6821      	ldr	r1, [r4, #0]
 80043ee:	4630      	mov	r0, r6
 80043f0:	1a6d      	subs	r5, r5, r1
 80043f2:	4629      	mov	r1, r5
 80043f4:	f7ff ffa6 	bl	8004344 <sbrk_aligned>
 80043f8:	3001      	adds	r0, #1
 80043fa:	d03a      	beq.n	8004472 <_malloc_r+0xea>
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	442b      	add	r3, r5
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	f8d8 3000 	ldr.w	r3, [r8]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	bb62      	cbnz	r2, 8004464 <_malloc_r+0xdc>
 800440a:	f8c8 7000 	str.w	r7, [r8]
 800440e:	e00f      	b.n	8004430 <_malloc_r+0xa8>
 8004410:	6822      	ldr	r2, [r4, #0]
 8004412:	1b52      	subs	r2, r2, r5
 8004414:	d420      	bmi.n	8004458 <_malloc_r+0xd0>
 8004416:	2a0b      	cmp	r2, #11
 8004418:	d917      	bls.n	800444a <_malloc_r+0xc2>
 800441a:	1961      	adds	r1, r4, r5
 800441c:	42a3      	cmp	r3, r4
 800441e:	6025      	str	r5, [r4, #0]
 8004420:	bf18      	it	ne
 8004422:	6059      	strne	r1, [r3, #4]
 8004424:	6863      	ldr	r3, [r4, #4]
 8004426:	bf08      	it	eq
 8004428:	f8c8 1000 	streq.w	r1, [r8]
 800442c:	5162      	str	r2, [r4, r5]
 800442e:	604b      	str	r3, [r1, #4]
 8004430:	4630      	mov	r0, r6
 8004432:	f000 f82f 	bl	8004494 <__malloc_unlock>
 8004436:	f104 000b 	add.w	r0, r4, #11
 800443a:	1d23      	adds	r3, r4, #4
 800443c:	f020 0007 	bic.w	r0, r0, #7
 8004440:	1ac2      	subs	r2, r0, r3
 8004442:	bf1c      	itt	ne
 8004444:	1a1b      	subne	r3, r3, r0
 8004446:	50a3      	strne	r3, [r4, r2]
 8004448:	e7af      	b.n	80043aa <_malloc_r+0x22>
 800444a:	6862      	ldr	r2, [r4, #4]
 800444c:	42a3      	cmp	r3, r4
 800444e:	bf0c      	ite	eq
 8004450:	f8c8 2000 	streq.w	r2, [r8]
 8004454:	605a      	strne	r2, [r3, #4]
 8004456:	e7eb      	b.n	8004430 <_malloc_r+0xa8>
 8004458:	4623      	mov	r3, r4
 800445a:	6864      	ldr	r4, [r4, #4]
 800445c:	e7ae      	b.n	80043bc <_malloc_r+0x34>
 800445e:	463c      	mov	r4, r7
 8004460:	687f      	ldr	r7, [r7, #4]
 8004462:	e7b6      	b.n	80043d2 <_malloc_r+0x4a>
 8004464:	461a      	mov	r2, r3
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	42a3      	cmp	r3, r4
 800446a:	d1fb      	bne.n	8004464 <_malloc_r+0xdc>
 800446c:	2300      	movs	r3, #0
 800446e:	6053      	str	r3, [r2, #4]
 8004470:	e7de      	b.n	8004430 <_malloc_r+0xa8>
 8004472:	230c      	movs	r3, #12
 8004474:	4630      	mov	r0, r6
 8004476:	6033      	str	r3, [r6, #0]
 8004478:	f000 f80c 	bl	8004494 <__malloc_unlock>
 800447c:	e794      	b.n	80043a8 <_malloc_r+0x20>
 800447e:	6005      	str	r5, [r0, #0]
 8004480:	e7d6      	b.n	8004430 <_malloc_r+0xa8>
 8004482:	bf00      	nop
 8004484:	2000041c 	.word	0x2000041c

08004488 <__malloc_lock>:
 8004488:	4801      	ldr	r0, [pc, #4]	@ (8004490 <__malloc_lock+0x8>)
 800448a:	f001 bea2 	b.w	80061d2 <__retarget_lock_acquire_recursive>
 800448e:	bf00      	nop
 8004490:	20000560 	.word	0x20000560

08004494 <__malloc_unlock>:
 8004494:	4801      	ldr	r0, [pc, #4]	@ (800449c <__malloc_unlock+0x8>)
 8004496:	f001 be9d 	b.w	80061d4 <__retarget_lock_release_recursive>
 800449a:	bf00      	nop
 800449c:	20000560 	.word	0x20000560

080044a0 <sulp>:
 80044a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a4:	460f      	mov	r7, r1
 80044a6:	4690      	mov	r8, r2
 80044a8:	f003 fc1a 	bl	8007ce0 <__ulp>
 80044ac:	4604      	mov	r4, r0
 80044ae:	460d      	mov	r5, r1
 80044b0:	f1b8 0f00 	cmp.w	r8, #0
 80044b4:	d011      	beq.n	80044da <sulp+0x3a>
 80044b6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80044ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80044be:	2b00      	cmp	r3, #0
 80044c0:	dd0b      	ble.n	80044da <sulp+0x3a>
 80044c2:	2400      	movs	r4, #0
 80044c4:	051b      	lsls	r3, r3, #20
 80044c6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80044ca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80044ce:	4622      	mov	r2, r4
 80044d0:	462b      	mov	r3, r5
 80044d2:	f7fc f801 	bl	80004d8 <__aeabi_dmul>
 80044d6:	4604      	mov	r4, r0
 80044d8:	460d      	mov	r5, r1
 80044da:	4620      	mov	r0, r4
 80044dc:	4629      	mov	r1, r5
 80044de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044e2:	0000      	movs	r0, r0
 80044e4:	0000      	movs	r0, r0
	...

080044e8 <_strtod_l>:
 80044e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ec:	b09f      	sub	sp, #124	@ 0x7c
 80044ee:	9217      	str	r2, [sp, #92]	@ 0x5c
 80044f0:	2200      	movs	r2, #0
 80044f2:	460c      	mov	r4, r1
 80044f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80044f6:	f04f 0a00 	mov.w	sl, #0
 80044fa:	f04f 0b00 	mov.w	fp, #0
 80044fe:	460a      	mov	r2, r1
 8004500:	9005      	str	r0, [sp, #20]
 8004502:	9219      	str	r2, [sp, #100]	@ 0x64
 8004504:	7811      	ldrb	r1, [r2, #0]
 8004506:	292b      	cmp	r1, #43	@ 0x2b
 8004508:	d048      	beq.n	800459c <_strtod_l+0xb4>
 800450a:	d836      	bhi.n	800457a <_strtod_l+0x92>
 800450c:	290d      	cmp	r1, #13
 800450e:	d830      	bhi.n	8004572 <_strtod_l+0x8a>
 8004510:	2908      	cmp	r1, #8
 8004512:	d830      	bhi.n	8004576 <_strtod_l+0x8e>
 8004514:	2900      	cmp	r1, #0
 8004516:	d039      	beq.n	800458c <_strtod_l+0xa4>
 8004518:	2200      	movs	r2, #0
 800451a:	920e      	str	r2, [sp, #56]	@ 0x38
 800451c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800451e:	782a      	ldrb	r2, [r5, #0]
 8004520:	2a30      	cmp	r2, #48	@ 0x30
 8004522:	f040 80b0 	bne.w	8004686 <_strtod_l+0x19e>
 8004526:	786a      	ldrb	r2, [r5, #1]
 8004528:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800452c:	2a58      	cmp	r2, #88	@ 0x58
 800452e:	d16c      	bne.n	800460a <_strtod_l+0x122>
 8004530:	9302      	str	r3, [sp, #8]
 8004532:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004534:	4a8f      	ldr	r2, [pc, #572]	@ (8004774 <_strtod_l+0x28c>)
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	ab1a      	add	r3, sp, #104	@ 0x68
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	9805      	ldr	r0, [sp, #20]
 800453e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004540:	a919      	add	r1, sp, #100	@ 0x64
 8004542:	f002 fd7d 	bl	8007040 <__gethex>
 8004546:	f010 060f 	ands.w	r6, r0, #15
 800454a:	4604      	mov	r4, r0
 800454c:	d005      	beq.n	800455a <_strtod_l+0x72>
 800454e:	2e06      	cmp	r6, #6
 8004550:	d126      	bne.n	80045a0 <_strtod_l+0xb8>
 8004552:	2300      	movs	r3, #0
 8004554:	3501      	adds	r5, #1
 8004556:	9519      	str	r5, [sp, #100]	@ 0x64
 8004558:	930e      	str	r3, [sp, #56]	@ 0x38
 800455a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800455c:	2b00      	cmp	r3, #0
 800455e:	f040 8582 	bne.w	8005066 <_strtod_l+0xb7e>
 8004562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004564:	b1bb      	cbz	r3, 8004596 <_strtod_l+0xae>
 8004566:	4650      	mov	r0, sl
 8004568:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800456c:	b01f      	add	sp, #124	@ 0x7c
 800456e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004572:	2920      	cmp	r1, #32
 8004574:	d1d0      	bne.n	8004518 <_strtod_l+0x30>
 8004576:	3201      	adds	r2, #1
 8004578:	e7c3      	b.n	8004502 <_strtod_l+0x1a>
 800457a:	292d      	cmp	r1, #45	@ 0x2d
 800457c:	d1cc      	bne.n	8004518 <_strtod_l+0x30>
 800457e:	2101      	movs	r1, #1
 8004580:	910e      	str	r1, [sp, #56]	@ 0x38
 8004582:	1c51      	adds	r1, r2, #1
 8004584:	9119      	str	r1, [sp, #100]	@ 0x64
 8004586:	7852      	ldrb	r2, [r2, #1]
 8004588:	2a00      	cmp	r2, #0
 800458a:	d1c7      	bne.n	800451c <_strtod_l+0x34>
 800458c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800458e:	9419      	str	r4, [sp, #100]	@ 0x64
 8004590:	2b00      	cmp	r3, #0
 8004592:	f040 8566 	bne.w	8005062 <_strtod_l+0xb7a>
 8004596:	4650      	mov	r0, sl
 8004598:	4659      	mov	r1, fp
 800459a:	e7e7      	b.n	800456c <_strtod_l+0x84>
 800459c:	2100      	movs	r1, #0
 800459e:	e7ef      	b.n	8004580 <_strtod_l+0x98>
 80045a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80045a2:	b13a      	cbz	r2, 80045b4 <_strtod_l+0xcc>
 80045a4:	2135      	movs	r1, #53	@ 0x35
 80045a6:	a81c      	add	r0, sp, #112	@ 0x70
 80045a8:	f003 fc8a 	bl	8007ec0 <__copybits>
 80045ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80045ae:	9805      	ldr	r0, [sp, #20]
 80045b0:	f003 f86a 	bl	8007688 <_Bfree>
 80045b4:	3e01      	subs	r6, #1
 80045b6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80045b8:	2e04      	cmp	r6, #4
 80045ba:	d806      	bhi.n	80045ca <_strtod_l+0xe2>
 80045bc:	e8df f006 	tbb	[pc, r6]
 80045c0:	201d0314 	.word	0x201d0314
 80045c4:	14          	.byte	0x14
 80045c5:	00          	.byte	0x00
 80045c6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80045ca:	05e1      	lsls	r1, r4, #23
 80045cc:	bf48      	it	mi
 80045ce:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80045d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80045d6:	0d1b      	lsrs	r3, r3, #20
 80045d8:	051b      	lsls	r3, r3, #20
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1bd      	bne.n	800455a <_strtod_l+0x72>
 80045de:	f001 fdcd 	bl	800617c <__errno>
 80045e2:	2322      	movs	r3, #34	@ 0x22
 80045e4:	6003      	str	r3, [r0, #0]
 80045e6:	e7b8      	b.n	800455a <_strtod_l+0x72>
 80045e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80045ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80045f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80045f4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80045f8:	e7e7      	b.n	80045ca <_strtod_l+0xe2>
 80045fa:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004778 <_strtod_l+0x290>
 80045fe:	e7e4      	b.n	80045ca <_strtod_l+0xe2>
 8004600:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004604:	f04f 3aff 	mov.w	sl, #4294967295
 8004608:	e7df      	b.n	80045ca <_strtod_l+0xe2>
 800460a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	9219      	str	r2, [sp, #100]	@ 0x64
 8004610:	785b      	ldrb	r3, [r3, #1]
 8004612:	2b30      	cmp	r3, #48	@ 0x30
 8004614:	d0f9      	beq.n	800460a <_strtod_l+0x122>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d09f      	beq.n	800455a <_strtod_l+0x72>
 800461a:	2301      	movs	r3, #1
 800461c:	2700      	movs	r7, #0
 800461e:	220a      	movs	r2, #10
 8004620:	46b9      	mov	r9, r7
 8004622:	9308      	str	r3, [sp, #32]
 8004624:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004626:	970b      	str	r7, [sp, #44]	@ 0x2c
 8004628:	930c      	str	r3, [sp, #48]	@ 0x30
 800462a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800462c:	7805      	ldrb	r5, [r0, #0]
 800462e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004632:	b2d9      	uxtb	r1, r3
 8004634:	2909      	cmp	r1, #9
 8004636:	d928      	bls.n	800468a <_strtod_l+0x1a2>
 8004638:	2201      	movs	r2, #1
 800463a:	4950      	ldr	r1, [pc, #320]	@ (800477c <_strtod_l+0x294>)
 800463c:	f001 fd31 	bl	80060a2 <strncmp>
 8004640:	2800      	cmp	r0, #0
 8004642:	d032      	beq.n	80046aa <_strtod_l+0x1c2>
 8004644:	2000      	movs	r0, #0
 8004646:	462a      	mov	r2, r5
 8004648:	4603      	mov	r3, r0
 800464a:	464d      	mov	r5, r9
 800464c:	900a      	str	r0, [sp, #40]	@ 0x28
 800464e:	2a65      	cmp	r2, #101	@ 0x65
 8004650:	d001      	beq.n	8004656 <_strtod_l+0x16e>
 8004652:	2a45      	cmp	r2, #69	@ 0x45
 8004654:	d114      	bne.n	8004680 <_strtod_l+0x198>
 8004656:	b91d      	cbnz	r5, 8004660 <_strtod_l+0x178>
 8004658:	9a08      	ldr	r2, [sp, #32]
 800465a:	4302      	orrs	r2, r0
 800465c:	d096      	beq.n	800458c <_strtod_l+0xa4>
 800465e:	2500      	movs	r5, #0
 8004660:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004662:	1c62      	adds	r2, r4, #1
 8004664:	9219      	str	r2, [sp, #100]	@ 0x64
 8004666:	7862      	ldrb	r2, [r4, #1]
 8004668:	2a2b      	cmp	r2, #43	@ 0x2b
 800466a:	d07a      	beq.n	8004762 <_strtod_l+0x27a>
 800466c:	2a2d      	cmp	r2, #45	@ 0x2d
 800466e:	d07e      	beq.n	800476e <_strtod_l+0x286>
 8004670:	f04f 0c00 	mov.w	ip, #0
 8004674:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004678:	2909      	cmp	r1, #9
 800467a:	f240 8085 	bls.w	8004788 <_strtod_l+0x2a0>
 800467e:	9419      	str	r4, [sp, #100]	@ 0x64
 8004680:	f04f 0800 	mov.w	r8, #0
 8004684:	e0a5      	b.n	80047d2 <_strtod_l+0x2ea>
 8004686:	2300      	movs	r3, #0
 8004688:	e7c8      	b.n	800461c <_strtod_l+0x134>
 800468a:	f1b9 0f08 	cmp.w	r9, #8
 800468e:	bfd8      	it	le
 8004690:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8004692:	f100 0001 	add.w	r0, r0, #1
 8004696:	bfd6      	itet	le
 8004698:	fb02 3301 	mlale	r3, r2, r1, r3
 800469c:	fb02 3707 	mlagt	r7, r2, r7, r3
 80046a0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80046a2:	f109 0901 	add.w	r9, r9, #1
 80046a6:	9019      	str	r0, [sp, #100]	@ 0x64
 80046a8:	e7bf      	b.n	800462a <_strtod_l+0x142>
 80046aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80046b0:	785a      	ldrb	r2, [r3, #1]
 80046b2:	f1b9 0f00 	cmp.w	r9, #0
 80046b6:	d03b      	beq.n	8004730 <_strtod_l+0x248>
 80046b8:	464d      	mov	r5, r9
 80046ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80046bc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80046c0:	2b09      	cmp	r3, #9
 80046c2:	d912      	bls.n	80046ea <_strtod_l+0x202>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e7c2      	b.n	800464e <_strtod_l+0x166>
 80046c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80046ca:	3001      	adds	r0, #1
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80046d0:	785a      	ldrb	r2, [r3, #1]
 80046d2:	2a30      	cmp	r2, #48	@ 0x30
 80046d4:	d0f8      	beq.n	80046c8 <_strtod_l+0x1e0>
 80046d6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80046da:	2b08      	cmp	r3, #8
 80046dc:	f200 84c8 	bhi.w	8005070 <_strtod_l+0xb88>
 80046e0:	900a      	str	r0, [sp, #40]	@ 0x28
 80046e2:	2000      	movs	r0, #0
 80046e4:	4605      	mov	r5, r0
 80046e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80046e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80046ea:	3a30      	subs	r2, #48	@ 0x30
 80046ec:	f100 0301 	add.w	r3, r0, #1
 80046f0:	d018      	beq.n	8004724 <_strtod_l+0x23c>
 80046f2:	462e      	mov	r6, r5
 80046f4:	f04f 0e0a 	mov.w	lr, #10
 80046f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80046fa:	4419      	add	r1, r3
 80046fc:	910a      	str	r1, [sp, #40]	@ 0x28
 80046fe:	1c71      	adds	r1, r6, #1
 8004700:	eba1 0c05 	sub.w	ip, r1, r5
 8004704:	4563      	cmp	r3, ip
 8004706:	dc15      	bgt.n	8004734 <_strtod_l+0x24c>
 8004708:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800470c:	182b      	adds	r3, r5, r0
 800470e:	2b08      	cmp	r3, #8
 8004710:	f105 0501 	add.w	r5, r5, #1
 8004714:	4405      	add	r5, r0
 8004716:	dc1a      	bgt.n	800474e <_strtod_l+0x266>
 8004718:	230a      	movs	r3, #10
 800471a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800471c:	fb03 2301 	mla	r3, r3, r1, r2
 8004720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004722:	2300      	movs	r3, #0
 8004724:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004726:	4618      	mov	r0, r3
 8004728:	1c51      	adds	r1, r2, #1
 800472a:	9119      	str	r1, [sp, #100]	@ 0x64
 800472c:	7852      	ldrb	r2, [r2, #1]
 800472e:	e7c5      	b.n	80046bc <_strtod_l+0x1d4>
 8004730:	4648      	mov	r0, r9
 8004732:	e7ce      	b.n	80046d2 <_strtod_l+0x1ea>
 8004734:	2e08      	cmp	r6, #8
 8004736:	dc05      	bgt.n	8004744 <_strtod_l+0x25c>
 8004738:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800473a:	fb0e f606 	mul.w	r6, lr, r6
 800473e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8004740:	460e      	mov	r6, r1
 8004742:	e7dc      	b.n	80046fe <_strtod_l+0x216>
 8004744:	2910      	cmp	r1, #16
 8004746:	bfd8      	it	le
 8004748:	fb0e f707 	mulle.w	r7, lr, r7
 800474c:	e7f8      	b.n	8004740 <_strtod_l+0x258>
 800474e:	2b0f      	cmp	r3, #15
 8004750:	bfdc      	itt	le
 8004752:	230a      	movle	r3, #10
 8004754:	fb03 2707 	mlale	r7, r3, r7, r2
 8004758:	e7e3      	b.n	8004722 <_strtod_l+0x23a>
 800475a:	2300      	movs	r3, #0
 800475c:	930a      	str	r3, [sp, #40]	@ 0x28
 800475e:	2301      	movs	r3, #1
 8004760:	e77a      	b.n	8004658 <_strtod_l+0x170>
 8004762:	f04f 0c00 	mov.w	ip, #0
 8004766:	1ca2      	adds	r2, r4, #2
 8004768:	9219      	str	r2, [sp, #100]	@ 0x64
 800476a:	78a2      	ldrb	r2, [r4, #2]
 800476c:	e782      	b.n	8004674 <_strtod_l+0x18c>
 800476e:	f04f 0c01 	mov.w	ip, #1
 8004772:	e7f8      	b.n	8004766 <_strtod_l+0x27e>
 8004774:	08008fa0 	.word	0x08008fa0
 8004778:	7ff00000 	.word	0x7ff00000
 800477c:	08008db6 	.word	0x08008db6
 8004780:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004782:	1c51      	adds	r1, r2, #1
 8004784:	9119      	str	r1, [sp, #100]	@ 0x64
 8004786:	7852      	ldrb	r2, [r2, #1]
 8004788:	2a30      	cmp	r2, #48	@ 0x30
 800478a:	d0f9      	beq.n	8004780 <_strtod_l+0x298>
 800478c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004790:	2908      	cmp	r1, #8
 8004792:	f63f af75 	bhi.w	8004680 <_strtod_l+0x198>
 8004796:	f04f 080a 	mov.w	r8, #10
 800479a:	3a30      	subs	r2, #48	@ 0x30
 800479c:	9209      	str	r2, [sp, #36]	@ 0x24
 800479e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80047a0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80047a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80047a4:	1c56      	adds	r6, r2, #1
 80047a6:	9619      	str	r6, [sp, #100]	@ 0x64
 80047a8:	7852      	ldrb	r2, [r2, #1]
 80047aa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80047ae:	f1be 0f09 	cmp.w	lr, #9
 80047b2:	d939      	bls.n	8004828 <_strtod_l+0x340>
 80047b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80047b6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80047ba:	1a76      	subs	r6, r6, r1
 80047bc:	2e08      	cmp	r6, #8
 80047be:	dc03      	bgt.n	80047c8 <_strtod_l+0x2e0>
 80047c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80047c2:	4588      	cmp	r8, r1
 80047c4:	bfa8      	it	ge
 80047c6:	4688      	movge	r8, r1
 80047c8:	f1bc 0f00 	cmp.w	ip, #0
 80047cc:	d001      	beq.n	80047d2 <_strtod_l+0x2ea>
 80047ce:	f1c8 0800 	rsb	r8, r8, #0
 80047d2:	2d00      	cmp	r5, #0
 80047d4:	d14e      	bne.n	8004874 <_strtod_l+0x38c>
 80047d6:	9908      	ldr	r1, [sp, #32]
 80047d8:	4308      	orrs	r0, r1
 80047da:	f47f aebe 	bne.w	800455a <_strtod_l+0x72>
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f47f aed4 	bne.w	800458c <_strtod_l+0xa4>
 80047e4:	2a69      	cmp	r2, #105	@ 0x69
 80047e6:	d028      	beq.n	800483a <_strtod_l+0x352>
 80047e8:	dc25      	bgt.n	8004836 <_strtod_l+0x34e>
 80047ea:	2a49      	cmp	r2, #73	@ 0x49
 80047ec:	d025      	beq.n	800483a <_strtod_l+0x352>
 80047ee:	2a4e      	cmp	r2, #78	@ 0x4e
 80047f0:	f47f aecc 	bne.w	800458c <_strtod_l+0xa4>
 80047f4:	4999      	ldr	r1, [pc, #612]	@ (8004a5c <_strtod_l+0x574>)
 80047f6:	a819      	add	r0, sp, #100	@ 0x64
 80047f8:	f002 fe44 	bl	8007484 <__match>
 80047fc:	2800      	cmp	r0, #0
 80047fe:	f43f aec5 	beq.w	800458c <_strtod_l+0xa4>
 8004802:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b28      	cmp	r3, #40	@ 0x28
 8004808:	d12e      	bne.n	8004868 <_strtod_l+0x380>
 800480a:	4995      	ldr	r1, [pc, #596]	@ (8004a60 <_strtod_l+0x578>)
 800480c:	aa1c      	add	r2, sp, #112	@ 0x70
 800480e:	a819      	add	r0, sp, #100	@ 0x64
 8004810:	f002 fe4c 	bl	80074ac <__hexnan>
 8004814:	2805      	cmp	r0, #5
 8004816:	d127      	bne.n	8004868 <_strtod_l+0x380>
 8004818:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800481a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800481e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004822:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004826:	e698      	b.n	800455a <_strtod_l+0x72>
 8004828:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800482a:	fb08 2101 	mla	r1, r8, r1, r2
 800482e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004832:	9209      	str	r2, [sp, #36]	@ 0x24
 8004834:	e7b5      	b.n	80047a2 <_strtod_l+0x2ba>
 8004836:	2a6e      	cmp	r2, #110	@ 0x6e
 8004838:	e7da      	b.n	80047f0 <_strtod_l+0x308>
 800483a:	498a      	ldr	r1, [pc, #552]	@ (8004a64 <_strtod_l+0x57c>)
 800483c:	a819      	add	r0, sp, #100	@ 0x64
 800483e:	f002 fe21 	bl	8007484 <__match>
 8004842:	2800      	cmp	r0, #0
 8004844:	f43f aea2 	beq.w	800458c <_strtod_l+0xa4>
 8004848:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800484a:	4987      	ldr	r1, [pc, #540]	@ (8004a68 <_strtod_l+0x580>)
 800484c:	3b01      	subs	r3, #1
 800484e:	a819      	add	r0, sp, #100	@ 0x64
 8004850:	9319      	str	r3, [sp, #100]	@ 0x64
 8004852:	f002 fe17 	bl	8007484 <__match>
 8004856:	b910      	cbnz	r0, 800485e <_strtod_l+0x376>
 8004858:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800485a:	3301      	adds	r3, #1
 800485c:	9319      	str	r3, [sp, #100]	@ 0x64
 800485e:	f04f 0a00 	mov.w	sl, #0
 8004862:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8004a6c <_strtod_l+0x584>
 8004866:	e678      	b.n	800455a <_strtod_l+0x72>
 8004868:	4881      	ldr	r0, [pc, #516]	@ (8004a70 <_strtod_l+0x588>)
 800486a:	f001 fcd1 	bl	8006210 <nan>
 800486e:	4682      	mov	sl, r0
 8004870:	468b      	mov	fp, r1
 8004872:	e672      	b.n	800455a <_strtod_l+0x72>
 8004874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004876:	f1b9 0f00 	cmp.w	r9, #0
 800487a:	bf08      	it	eq
 800487c:	46a9      	moveq	r9, r5
 800487e:	eba8 0303 	sub.w	r3, r8, r3
 8004882:	2d10      	cmp	r5, #16
 8004884:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004886:	462c      	mov	r4, r5
 8004888:	9309      	str	r3, [sp, #36]	@ 0x24
 800488a:	bfa8      	it	ge
 800488c:	2410      	movge	r4, #16
 800488e:	f7fb fda9 	bl	80003e4 <__aeabi_ui2d>
 8004892:	2d09      	cmp	r5, #9
 8004894:	4682      	mov	sl, r0
 8004896:	468b      	mov	fp, r1
 8004898:	dc11      	bgt.n	80048be <_strtod_l+0x3d6>
 800489a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	f43f ae5c 	beq.w	800455a <_strtod_l+0x72>
 80048a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048a4:	dd76      	ble.n	8004994 <_strtod_l+0x4ac>
 80048a6:	2b16      	cmp	r3, #22
 80048a8:	dc5d      	bgt.n	8004966 <_strtod_l+0x47e>
 80048aa:	4972      	ldr	r1, [pc, #456]	@ (8004a74 <_strtod_l+0x58c>)
 80048ac:	4652      	mov	r2, sl
 80048ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80048b2:	465b      	mov	r3, fp
 80048b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048b8:	f7fb fe0e 	bl	80004d8 <__aeabi_dmul>
 80048bc:	e7d7      	b.n	800486e <_strtod_l+0x386>
 80048be:	4b6d      	ldr	r3, [pc, #436]	@ (8004a74 <_strtod_l+0x58c>)
 80048c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80048c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80048c8:	f7fb fe06 	bl	80004d8 <__aeabi_dmul>
 80048cc:	4682      	mov	sl, r0
 80048ce:	4638      	mov	r0, r7
 80048d0:	468b      	mov	fp, r1
 80048d2:	f7fb fd87 	bl	80003e4 <__aeabi_ui2d>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4650      	mov	r0, sl
 80048dc:	4659      	mov	r1, fp
 80048de:	f7fb fc45 	bl	800016c <__adddf3>
 80048e2:	2d0f      	cmp	r5, #15
 80048e4:	4682      	mov	sl, r0
 80048e6:	468b      	mov	fp, r1
 80048e8:	ddd7      	ble.n	800489a <_strtod_l+0x3b2>
 80048ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ec:	1b2c      	subs	r4, r5, r4
 80048ee:	441c      	add	r4, r3
 80048f0:	2c00      	cmp	r4, #0
 80048f2:	f340 8093 	ble.w	8004a1c <_strtod_l+0x534>
 80048f6:	f014 030f 	ands.w	r3, r4, #15
 80048fa:	d00a      	beq.n	8004912 <_strtod_l+0x42a>
 80048fc:	495d      	ldr	r1, [pc, #372]	@ (8004a74 <_strtod_l+0x58c>)
 80048fe:	4652      	mov	r2, sl
 8004900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004904:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004908:	465b      	mov	r3, fp
 800490a:	f7fb fde5 	bl	80004d8 <__aeabi_dmul>
 800490e:	4682      	mov	sl, r0
 8004910:	468b      	mov	fp, r1
 8004912:	f034 040f 	bics.w	r4, r4, #15
 8004916:	d073      	beq.n	8004a00 <_strtod_l+0x518>
 8004918:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800491c:	dd49      	ble.n	80049b2 <_strtod_l+0x4ca>
 800491e:	2400      	movs	r4, #0
 8004920:	46a0      	mov	r8, r4
 8004922:	46a1      	mov	r9, r4
 8004924:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004926:	2322      	movs	r3, #34	@ 0x22
 8004928:	f04f 0a00 	mov.w	sl, #0
 800492c:	9a05      	ldr	r2, [sp, #20]
 800492e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8004a6c <_strtod_l+0x584>
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004936:	2b00      	cmp	r3, #0
 8004938:	f43f ae0f 	beq.w	800455a <_strtod_l+0x72>
 800493c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800493e:	9805      	ldr	r0, [sp, #20]
 8004940:	f002 fea2 	bl	8007688 <_Bfree>
 8004944:	4649      	mov	r1, r9
 8004946:	9805      	ldr	r0, [sp, #20]
 8004948:	f002 fe9e 	bl	8007688 <_Bfree>
 800494c:	4641      	mov	r1, r8
 800494e:	9805      	ldr	r0, [sp, #20]
 8004950:	f002 fe9a 	bl	8007688 <_Bfree>
 8004954:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004956:	9805      	ldr	r0, [sp, #20]
 8004958:	f002 fe96 	bl	8007688 <_Bfree>
 800495c:	4621      	mov	r1, r4
 800495e:	9805      	ldr	r0, [sp, #20]
 8004960:	f002 fe92 	bl	8007688 <_Bfree>
 8004964:	e5f9      	b.n	800455a <_strtod_l+0x72>
 8004966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004968:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800496c:	4293      	cmp	r3, r2
 800496e:	dbbc      	blt.n	80048ea <_strtod_l+0x402>
 8004970:	4c40      	ldr	r4, [pc, #256]	@ (8004a74 <_strtod_l+0x58c>)
 8004972:	f1c5 050f 	rsb	r5, r5, #15
 8004976:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800497a:	4652      	mov	r2, sl
 800497c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004980:	465b      	mov	r3, fp
 8004982:	f7fb fda9 	bl	80004d8 <__aeabi_dmul>
 8004986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004988:	1b5d      	subs	r5, r3, r5
 800498a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800498e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004992:	e791      	b.n	80048b8 <_strtod_l+0x3d0>
 8004994:	3316      	adds	r3, #22
 8004996:	dba8      	blt.n	80048ea <_strtod_l+0x402>
 8004998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800499a:	4650      	mov	r0, sl
 800499c:	eba3 0808 	sub.w	r8, r3, r8
 80049a0:	4b34      	ldr	r3, [pc, #208]	@ (8004a74 <_strtod_l+0x58c>)
 80049a2:	4659      	mov	r1, fp
 80049a4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80049a8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80049ac:	f7fb febe 	bl	800072c <__aeabi_ddiv>
 80049b0:	e75d      	b.n	800486e <_strtod_l+0x386>
 80049b2:	2300      	movs	r3, #0
 80049b4:	4650      	mov	r0, sl
 80049b6:	4659      	mov	r1, fp
 80049b8:	461e      	mov	r6, r3
 80049ba:	4f2f      	ldr	r7, [pc, #188]	@ (8004a78 <_strtod_l+0x590>)
 80049bc:	1124      	asrs	r4, r4, #4
 80049be:	2c01      	cmp	r4, #1
 80049c0:	dc21      	bgt.n	8004a06 <_strtod_l+0x51e>
 80049c2:	b10b      	cbz	r3, 80049c8 <_strtod_l+0x4e0>
 80049c4:	4682      	mov	sl, r0
 80049c6:	468b      	mov	fp, r1
 80049c8:	492b      	ldr	r1, [pc, #172]	@ (8004a78 <_strtod_l+0x590>)
 80049ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80049ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80049d2:	4652      	mov	r2, sl
 80049d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049d8:	465b      	mov	r3, fp
 80049da:	f7fb fd7d 	bl	80004d8 <__aeabi_dmul>
 80049de:	4b23      	ldr	r3, [pc, #140]	@ (8004a6c <_strtod_l+0x584>)
 80049e0:	460a      	mov	r2, r1
 80049e2:	400b      	ands	r3, r1
 80049e4:	4925      	ldr	r1, [pc, #148]	@ (8004a7c <_strtod_l+0x594>)
 80049e6:	4682      	mov	sl, r0
 80049e8:	428b      	cmp	r3, r1
 80049ea:	d898      	bhi.n	800491e <_strtod_l+0x436>
 80049ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80049f0:	428b      	cmp	r3, r1
 80049f2:	bf86      	itte	hi
 80049f4:	f04f 3aff 	movhi.w	sl, #4294967295
 80049f8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8004a80 <_strtod_l+0x598>
 80049fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004a00:	2300      	movs	r3, #0
 8004a02:	9308      	str	r3, [sp, #32]
 8004a04:	e076      	b.n	8004af4 <_strtod_l+0x60c>
 8004a06:	07e2      	lsls	r2, r4, #31
 8004a08:	d504      	bpl.n	8004a14 <_strtod_l+0x52c>
 8004a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a0e:	f7fb fd63 	bl	80004d8 <__aeabi_dmul>
 8004a12:	2301      	movs	r3, #1
 8004a14:	3601      	adds	r6, #1
 8004a16:	1064      	asrs	r4, r4, #1
 8004a18:	3708      	adds	r7, #8
 8004a1a:	e7d0      	b.n	80049be <_strtod_l+0x4d6>
 8004a1c:	d0f0      	beq.n	8004a00 <_strtod_l+0x518>
 8004a1e:	4264      	negs	r4, r4
 8004a20:	f014 020f 	ands.w	r2, r4, #15
 8004a24:	d00a      	beq.n	8004a3c <_strtod_l+0x554>
 8004a26:	4b13      	ldr	r3, [pc, #76]	@ (8004a74 <_strtod_l+0x58c>)
 8004a28:	4650      	mov	r0, sl
 8004a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a2e:	4659      	mov	r1, fp
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f7fb fe7a 	bl	800072c <__aeabi_ddiv>
 8004a38:	4682      	mov	sl, r0
 8004a3a:	468b      	mov	fp, r1
 8004a3c:	1124      	asrs	r4, r4, #4
 8004a3e:	d0df      	beq.n	8004a00 <_strtod_l+0x518>
 8004a40:	2c1f      	cmp	r4, #31
 8004a42:	dd1f      	ble.n	8004a84 <_strtod_l+0x59c>
 8004a44:	2400      	movs	r4, #0
 8004a46:	46a0      	mov	r8, r4
 8004a48:	46a1      	mov	r9, r4
 8004a4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004a4c:	2322      	movs	r3, #34	@ 0x22
 8004a4e:	9a05      	ldr	r2, [sp, #20]
 8004a50:	f04f 0a00 	mov.w	sl, #0
 8004a54:	f04f 0b00 	mov.w	fp, #0
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e76b      	b.n	8004934 <_strtod_l+0x44c>
 8004a5c:	08008dc5 	.word	0x08008dc5
 8004a60:	08008f8c 	.word	0x08008f8c
 8004a64:	08008dbd 	.word	0x08008dbd
 8004a68:	08008dfc 	.word	0x08008dfc
 8004a6c:	7ff00000 	.word	0x7ff00000
 8004a70:	08008f8b 	.word	0x08008f8b
 8004a74:	08009018 	.word	0x08009018
 8004a78:	08008ff0 	.word	0x08008ff0
 8004a7c:	7ca00000 	.word	0x7ca00000
 8004a80:	7fefffff 	.word	0x7fefffff
 8004a84:	f014 0310 	ands.w	r3, r4, #16
 8004a88:	bf18      	it	ne
 8004a8a:	236a      	movne	r3, #106	@ 0x6a
 8004a8c:	4650      	mov	r0, sl
 8004a8e:	9308      	str	r3, [sp, #32]
 8004a90:	4659      	mov	r1, fp
 8004a92:	2300      	movs	r3, #0
 8004a94:	4e77      	ldr	r6, [pc, #476]	@ (8004c74 <_strtod_l+0x78c>)
 8004a96:	07e7      	lsls	r7, r4, #31
 8004a98:	d504      	bpl.n	8004aa4 <_strtod_l+0x5bc>
 8004a9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a9e:	f7fb fd1b 	bl	80004d8 <__aeabi_dmul>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	1064      	asrs	r4, r4, #1
 8004aa6:	f106 0608 	add.w	r6, r6, #8
 8004aaa:	d1f4      	bne.n	8004a96 <_strtod_l+0x5ae>
 8004aac:	b10b      	cbz	r3, 8004ab2 <_strtod_l+0x5ca>
 8004aae:	4682      	mov	sl, r0
 8004ab0:	468b      	mov	fp, r1
 8004ab2:	9b08      	ldr	r3, [sp, #32]
 8004ab4:	b1b3      	cbz	r3, 8004ae4 <_strtod_l+0x5fc>
 8004ab6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004aba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	dd0f      	ble.n	8004ae4 <_strtod_l+0x5fc>
 8004ac4:	2b1f      	cmp	r3, #31
 8004ac6:	dd58      	ble.n	8004b7a <_strtod_l+0x692>
 8004ac8:	2b34      	cmp	r3, #52	@ 0x34
 8004aca:	bfd8      	it	le
 8004acc:	f04f 33ff 	movle.w	r3, #4294967295
 8004ad0:	f04f 0a00 	mov.w	sl, #0
 8004ad4:	bfcf      	iteee	gt
 8004ad6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004ada:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004ade:	4093      	lslle	r3, r2
 8004ae0:	ea03 0b01 	andle.w	fp, r3, r1
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	4650      	mov	r0, sl
 8004aea:	4659      	mov	r1, fp
 8004aec:	f7fb ff5c 	bl	80009a8 <__aeabi_dcmpeq>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d1a7      	bne.n	8004a44 <_strtod_l+0x55c>
 8004af4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004af6:	464a      	mov	r2, r9
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004afc:	462b      	mov	r3, r5
 8004afe:	9805      	ldr	r0, [sp, #20]
 8004b00:	f002 fe2a 	bl	8007758 <__s2b>
 8004b04:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004b06:	2800      	cmp	r0, #0
 8004b08:	f43f af09 	beq.w	800491e <_strtod_l+0x436>
 8004b0c:	2400      	movs	r4, #0
 8004b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b12:	2a00      	cmp	r2, #0
 8004b14:	eba3 0308 	sub.w	r3, r3, r8
 8004b18:	bfa8      	it	ge
 8004b1a:	2300      	movge	r3, #0
 8004b1c:	46a0      	mov	r8, r4
 8004b1e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004b20:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004b24:	9316      	str	r3, [sp, #88]	@ 0x58
 8004b26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b28:	9805      	ldr	r0, [sp, #20]
 8004b2a:	6859      	ldr	r1, [r3, #4]
 8004b2c:	f002 fd6c 	bl	8007608 <_Balloc>
 8004b30:	4681      	mov	r9, r0
 8004b32:	2800      	cmp	r0, #0
 8004b34:	f43f aef7 	beq.w	8004926 <_strtod_l+0x43e>
 8004b38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b3a:	300c      	adds	r0, #12
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	f103 010c 	add.w	r1, r3, #12
 8004b42:	3202      	adds	r2, #2
 8004b44:	0092      	lsls	r2, r2, #2
 8004b46:	f001 fb54 	bl	80061f2 <memcpy>
 8004b4a:	ab1c      	add	r3, sp, #112	@ 0x70
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	4652      	mov	r2, sl
 8004b54:	465b      	mov	r3, fp
 8004b56:	9805      	ldr	r0, [sp, #20]
 8004b58:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8004b5c:	f003 f928 	bl	8007db0 <__d2b>
 8004b60:	901a      	str	r0, [sp, #104]	@ 0x68
 8004b62:	2800      	cmp	r0, #0
 8004b64:	f43f aedf 	beq.w	8004926 <_strtod_l+0x43e>
 8004b68:	2101      	movs	r1, #1
 8004b6a:	9805      	ldr	r0, [sp, #20]
 8004b6c:	f002 fe8a 	bl	8007884 <__i2b>
 8004b70:	4680      	mov	r8, r0
 8004b72:	b948      	cbnz	r0, 8004b88 <_strtod_l+0x6a0>
 8004b74:	f04f 0800 	mov.w	r8, #0
 8004b78:	e6d5      	b.n	8004926 <_strtod_l+0x43e>
 8004b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	ea03 0a0a 	and.w	sl, r3, sl
 8004b86:	e7ad      	b.n	8004ae4 <_strtod_l+0x5fc>
 8004b88:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004b8a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004b8c:	2d00      	cmp	r5, #0
 8004b8e:	bfab      	itete	ge
 8004b90:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004b92:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004b94:	18ef      	addge	r7, r5, r3
 8004b96:	1b5e      	sublt	r6, r3, r5
 8004b98:	9b08      	ldr	r3, [sp, #32]
 8004b9a:	bfa8      	it	ge
 8004b9c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8004b9e:	eba5 0503 	sub.w	r5, r5, r3
 8004ba2:	4415      	add	r5, r2
 8004ba4:	4b34      	ldr	r3, [pc, #208]	@ (8004c78 <_strtod_l+0x790>)
 8004ba6:	f105 35ff 	add.w	r5, r5, #4294967295
 8004baa:	bfb8      	it	lt
 8004bac:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8004bae:	429d      	cmp	r5, r3
 8004bb0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004bb4:	da50      	bge.n	8004c58 <_strtod_l+0x770>
 8004bb6:	1b5b      	subs	r3, r3, r5
 8004bb8:	2b1f      	cmp	r3, #31
 8004bba:	f04f 0101 	mov.w	r1, #1
 8004bbe:	eba2 0203 	sub.w	r2, r2, r3
 8004bc2:	dc3d      	bgt.n	8004c40 <_strtod_l+0x758>
 8004bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004bca:	2300      	movs	r3, #0
 8004bcc:	9310      	str	r3, [sp, #64]	@ 0x40
 8004bce:	18bd      	adds	r5, r7, r2
 8004bd0:	9b08      	ldr	r3, [sp, #32]
 8004bd2:	42af      	cmp	r7, r5
 8004bd4:	4416      	add	r6, r2
 8004bd6:	441e      	add	r6, r3
 8004bd8:	463b      	mov	r3, r7
 8004bda:	bfa8      	it	ge
 8004bdc:	462b      	movge	r3, r5
 8004bde:	42b3      	cmp	r3, r6
 8004be0:	bfa8      	it	ge
 8004be2:	4633      	movge	r3, r6
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bfc2      	ittt	gt
 8004be8:	1aed      	subgt	r5, r5, r3
 8004bea:	1af6      	subgt	r6, r6, r3
 8004bec:	1aff      	subgt	r7, r7, r3
 8004bee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	dd16      	ble.n	8004c22 <_strtod_l+0x73a>
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	9805      	ldr	r0, [sp, #20]
 8004bfa:	f002 fefb 	bl	80079f4 <__pow5mult>
 8004bfe:	4680      	mov	r8, r0
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d0b7      	beq.n	8004b74 <_strtod_l+0x68c>
 8004c04:	4601      	mov	r1, r0
 8004c06:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004c08:	9805      	ldr	r0, [sp, #20]
 8004c0a:	f002 fe51 	bl	80078b0 <__multiply>
 8004c0e:	900a      	str	r0, [sp, #40]	@ 0x28
 8004c10:	2800      	cmp	r0, #0
 8004c12:	f43f ae88 	beq.w	8004926 <_strtod_l+0x43e>
 8004c16:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004c18:	9805      	ldr	r0, [sp, #20]
 8004c1a:	f002 fd35 	bl	8007688 <_Bfree>
 8004c1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c20:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c22:	2d00      	cmp	r5, #0
 8004c24:	dc1d      	bgt.n	8004c62 <_strtod_l+0x77a>
 8004c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	dd27      	ble.n	8004c7c <_strtod_l+0x794>
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8004c30:	9805      	ldr	r0, [sp, #20]
 8004c32:	f002 fedf 	bl	80079f4 <__pow5mult>
 8004c36:	4681      	mov	r9, r0
 8004c38:	bb00      	cbnz	r0, 8004c7c <_strtod_l+0x794>
 8004c3a:	f04f 0900 	mov.w	r9, #0
 8004c3e:	e672      	b.n	8004926 <_strtod_l+0x43e>
 8004c40:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8004c44:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8004c48:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8004c4c:	35e2      	adds	r5, #226	@ 0xe2
 8004c4e:	fa01 f305 	lsl.w	r3, r1, r5
 8004c52:	9310      	str	r3, [sp, #64]	@ 0x40
 8004c54:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004c56:	e7ba      	b.n	8004bce <_strtod_l+0x6e6>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004c60:	e7b5      	b.n	8004bce <_strtod_l+0x6e6>
 8004c62:	462a      	mov	r2, r5
 8004c64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004c66:	9805      	ldr	r0, [sp, #20]
 8004c68:	f002 ff1e 	bl	8007aa8 <__lshift>
 8004c6c:	901a      	str	r0, [sp, #104]	@ 0x68
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d1d9      	bne.n	8004c26 <_strtod_l+0x73e>
 8004c72:	e658      	b.n	8004926 <_strtod_l+0x43e>
 8004c74:	08008fb8 	.word	0x08008fb8
 8004c78:	fffffc02 	.word	0xfffffc02
 8004c7c:	2e00      	cmp	r6, #0
 8004c7e:	dd07      	ble.n	8004c90 <_strtod_l+0x7a8>
 8004c80:	4649      	mov	r1, r9
 8004c82:	4632      	mov	r2, r6
 8004c84:	9805      	ldr	r0, [sp, #20]
 8004c86:	f002 ff0f 	bl	8007aa8 <__lshift>
 8004c8a:	4681      	mov	r9, r0
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d0d4      	beq.n	8004c3a <_strtod_l+0x752>
 8004c90:	2f00      	cmp	r7, #0
 8004c92:	dd08      	ble.n	8004ca6 <_strtod_l+0x7be>
 8004c94:	4641      	mov	r1, r8
 8004c96:	463a      	mov	r2, r7
 8004c98:	9805      	ldr	r0, [sp, #20]
 8004c9a:	f002 ff05 	bl	8007aa8 <__lshift>
 8004c9e:	4680      	mov	r8, r0
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	f43f ae40 	beq.w	8004926 <_strtod_l+0x43e>
 8004ca6:	464a      	mov	r2, r9
 8004ca8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004caa:	9805      	ldr	r0, [sp, #20]
 8004cac:	f002 ff84 	bl	8007bb8 <__mdiff>
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	f43f ae37 	beq.w	8004926 <_strtod_l+0x43e>
 8004cb8:	68c3      	ldr	r3, [r0, #12]
 8004cba:	4641      	mov	r1, r8
 8004cbc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60c3      	str	r3, [r0, #12]
 8004cc2:	f002 ff5d 	bl	8007b80 <__mcmp>
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	da3d      	bge.n	8004d46 <_strtod_l+0x85e>
 8004cca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ccc:	ea53 030a 	orrs.w	r3, r3, sl
 8004cd0:	d163      	bne.n	8004d9a <_strtod_l+0x8b2>
 8004cd2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d15f      	bne.n	8004d9a <_strtod_l+0x8b2>
 8004cda:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004cde:	0d1b      	lsrs	r3, r3, #20
 8004ce0:	051b      	lsls	r3, r3, #20
 8004ce2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004ce6:	d958      	bls.n	8004d9a <_strtod_l+0x8b2>
 8004ce8:	6963      	ldr	r3, [r4, #20]
 8004cea:	b913      	cbnz	r3, 8004cf2 <_strtod_l+0x80a>
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	dd53      	ble.n	8004d9a <_strtod_l+0x8b2>
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	9805      	ldr	r0, [sp, #20]
 8004cf8:	f002 fed6 	bl	8007aa8 <__lshift>
 8004cfc:	4641      	mov	r1, r8
 8004cfe:	4604      	mov	r4, r0
 8004d00:	f002 ff3e 	bl	8007b80 <__mcmp>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	dd48      	ble.n	8004d9a <_strtod_l+0x8b2>
 8004d08:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004d0c:	9a08      	ldr	r2, [sp, #32]
 8004d0e:	0d1b      	lsrs	r3, r3, #20
 8004d10:	051b      	lsls	r3, r3, #20
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	d062      	beq.n	8004ddc <_strtod_l+0x8f4>
 8004d16:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004d1a:	d85f      	bhi.n	8004ddc <_strtod_l+0x8f4>
 8004d1c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8004d20:	f67f ae94 	bls.w	8004a4c <_strtod_l+0x564>
 8004d24:	4650      	mov	r0, sl
 8004d26:	4659      	mov	r1, fp
 8004d28:	4ba3      	ldr	r3, [pc, #652]	@ (8004fb8 <_strtod_l+0xad0>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f7fb fbd4 	bl	80004d8 <__aeabi_dmul>
 8004d30:	4ba2      	ldr	r3, [pc, #648]	@ (8004fbc <_strtod_l+0xad4>)
 8004d32:	4682      	mov	sl, r0
 8004d34:	400b      	ands	r3, r1
 8004d36:	468b      	mov	fp, r1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f47f adff 	bne.w	800493c <_strtod_l+0x454>
 8004d3e:	2322      	movs	r3, #34	@ 0x22
 8004d40:	9a05      	ldr	r2, [sp, #20]
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e5fa      	b.n	800493c <_strtod_l+0x454>
 8004d46:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8004d4a:	d165      	bne.n	8004e18 <_strtod_l+0x930>
 8004d4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004d4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d52:	b35a      	cbz	r2, 8004dac <_strtod_l+0x8c4>
 8004d54:	4a9a      	ldr	r2, [pc, #616]	@ (8004fc0 <_strtod_l+0xad8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d12b      	bne.n	8004db2 <_strtod_l+0x8ca>
 8004d5a:	9b08      	ldr	r3, [sp, #32]
 8004d5c:	4651      	mov	r1, sl
 8004d5e:	b303      	cbz	r3, 8004da2 <_strtod_l+0x8ba>
 8004d60:	465a      	mov	r2, fp
 8004d62:	4b96      	ldr	r3, [pc, #600]	@ (8004fbc <_strtod_l+0xad4>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8004d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d6e:	d81b      	bhi.n	8004da8 <_strtod_l+0x8c0>
 8004d70:	0d1b      	lsrs	r3, r3, #20
 8004d72:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	4299      	cmp	r1, r3
 8004d7c:	d119      	bne.n	8004db2 <_strtod_l+0x8ca>
 8004d7e:	4b91      	ldr	r3, [pc, #580]	@ (8004fc4 <_strtod_l+0xadc>)
 8004d80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d102      	bne.n	8004d8c <_strtod_l+0x8a4>
 8004d86:	3101      	adds	r1, #1
 8004d88:	f43f adcd 	beq.w	8004926 <_strtod_l+0x43e>
 8004d8c:	f04f 0a00 	mov.w	sl, #0
 8004d90:	4b8a      	ldr	r3, [pc, #552]	@ (8004fbc <_strtod_l+0xad4>)
 8004d92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d94:	401a      	ands	r2, r3
 8004d96:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8004d9a:	9b08      	ldr	r3, [sp, #32]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1c1      	bne.n	8004d24 <_strtod_l+0x83c>
 8004da0:	e5cc      	b.n	800493c <_strtod_l+0x454>
 8004da2:	f04f 33ff 	mov.w	r3, #4294967295
 8004da6:	e7e8      	b.n	8004d7a <_strtod_l+0x892>
 8004da8:	4613      	mov	r3, r2
 8004daa:	e7e6      	b.n	8004d7a <_strtod_l+0x892>
 8004dac:	ea53 030a 	orrs.w	r3, r3, sl
 8004db0:	d0aa      	beq.n	8004d08 <_strtod_l+0x820>
 8004db2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004db4:	b1db      	cbz	r3, 8004dee <_strtod_l+0x906>
 8004db6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004db8:	4213      	tst	r3, r2
 8004dba:	d0ee      	beq.n	8004d9a <_strtod_l+0x8b2>
 8004dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004dbe:	4650      	mov	r0, sl
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	9a08      	ldr	r2, [sp, #32]
 8004dc4:	b1bb      	cbz	r3, 8004df6 <_strtod_l+0x90e>
 8004dc6:	f7ff fb6b 	bl	80044a0 <sulp>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004dd2:	f7fb f9cb 	bl	800016c <__adddf3>
 8004dd6:	4682      	mov	sl, r0
 8004dd8:	468b      	mov	fp, r1
 8004dda:	e7de      	b.n	8004d9a <_strtod_l+0x8b2>
 8004ddc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8004de0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004de4:	f04f 3aff 	mov.w	sl, #4294967295
 8004de8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004dec:	e7d5      	b.n	8004d9a <_strtod_l+0x8b2>
 8004dee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004df0:	ea13 0f0a 	tst.w	r3, sl
 8004df4:	e7e1      	b.n	8004dba <_strtod_l+0x8d2>
 8004df6:	f7ff fb53 	bl	80044a0 <sulp>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e02:	f7fb f9b1 	bl	8000168 <__aeabi_dsub>
 8004e06:	2200      	movs	r2, #0
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4682      	mov	sl, r0
 8004e0c:	468b      	mov	fp, r1
 8004e0e:	f7fb fdcb 	bl	80009a8 <__aeabi_dcmpeq>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d0c1      	beq.n	8004d9a <_strtod_l+0x8b2>
 8004e16:	e619      	b.n	8004a4c <_strtod_l+0x564>
 8004e18:	4641      	mov	r1, r8
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f003 f820 	bl	8007e60 <__ratio>
 8004e20:	2200      	movs	r2, #0
 8004e22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004e26:	4606      	mov	r6, r0
 8004e28:	460f      	mov	r7, r1
 8004e2a:	f7fb fdd1 	bl	80009d0 <__aeabi_dcmple>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d06d      	beq.n	8004f0e <_strtod_l+0xa26>
 8004e32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d178      	bne.n	8004f2a <_strtod_l+0xa42>
 8004e38:	f1ba 0f00 	cmp.w	sl, #0
 8004e3c:	d156      	bne.n	8004eec <_strtod_l+0xa04>
 8004e3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d158      	bne.n	8004efa <_strtod_l+0xa12>
 8004e48:	2200      	movs	r2, #0
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	4639      	mov	r1, r7
 8004e4e:	4b5e      	ldr	r3, [pc, #376]	@ (8004fc8 <_strtod_l+0xae0>)
 8004e50:	f7fb fdb4 	bl	80009bc <__aeabi_dcmplt>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d157      	bne.n	8004f08 <_strtod_l+0xa20>
 8004e58:	4630      	mov	r0, r6
 8004e5a:	4639      	mov	r1, r7
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8004fcc <_strtod_l+0xae4>)
 8004e60:	f7fb fb3a 	bl	80004d8 <__aeabi_dmul>
 8004e64:	4606      	mov	r6, r0
 8004e66:	460f      	mov	r7, r1
 8004e68:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8004e6c:	9606      	str	r6, [sp, #24]
 8004e6e:	9307      	str	r3, [sp, #28]
 8004e70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e74:	4d51      	ldr	r5, [pc, #324]	@ (8004fbc <_strtod_l+0xad4>)
 8004e76:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004e7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e7c:	401d      	ands	r5, r3
 8004e7e:	4b54      	ldr	r3, [pc, #336]	@ (8004fd0 <_strtod_l+0xae8>)
 8004e80:	429d      	cmp	r5, r3
 8004e82:	f040 80ab 	bne.w	8004fdc <_strtod_l+0xaf4>
 8004e86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e88:	4650      	mov	r0, sl
 8004e8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8004e8e:	4659      	mov	r1, fp
 8004e90:	f002 ff26 	bl	8007ce0 <__ulp>
 8004e94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e98:	f7fb fb1e 	bl	80004d8 <__aeabi_dmul>
 8004e9c:	4652      	mov	r2, sl
 8004e9e:	465b      	mov	r3, fp
 8004ea0:	f7fb f964 	bl	800016c <__adddf3>
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4945      	ldr	r1, [pc, #276]	@ (8004fbc <_strtod_l+0xad4>)
 8004ea8:	4a4a      	ldr	r2, [pc, #296]	@ (8004fd4 <_strtod_l+0xaec>)
 8004eaa:	4019      	ands	r1, r3
 8004eac:	4291      	cmp	r1, r2
 8004eae:	4682      	mov	sl, r0
 8004eb0:	d942      	bls.n	8004f38 <_strtod_l+0xa50>
 8004eb2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004eb4:	4b43      	ldr	r3, [pc, #268]	@ (8004fc4 <_strtod_l+0xadc>)
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d103      	bne.n	8004ec2 <_strtod_l+0x9da>
 8004eba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	f43f ad32 	beq.w	8004926 <_strtod_l+0x43e>
 8004ec2:	f04f 3aff 	mov.w	sl, #4294967295
 8004ec6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8004fc4 <_strtod_l+0xadc>
 8004eca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004ecc:	9805      	ldr	r0, [sp, #20]
 8004ece:	f002 fbdb 	bl	8007688 <_Bfree>
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	9805      	ldr	r0, [sp, #20]
 8004ed6:	f002 fbd7 	bl	8007688 <_Bfree>
 8004eda:	4641      	mov	r1, r8
 8004edc:	9805      	ldr	r0, [sp, #20]
 8004ede:	f002 fbd3 	bl	8007688 <_Bfree>
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	9805      	ldr	r0, [sp, #20]
 8004ee6:	f002 fbcf 	bl	8007688 <_Bfree>
 8004eea:	e61c      	b.n	8004b26 <_strtod_l+0x63e>
 8004eec:	f1ba 0f01 	cmp.w	sl, #1
 8004ef0:	d103      	bne.n	8004efa <_strtod_l+0xa12>
 8004ef2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f43f ada9 	beq.w	8004a4c <_strtod_l+0x564>
 8004efa:	2200      	movs	r2, #0
 8004efc:	4b36      	ldr	r3, [pc, #216]	@ (8004fd8 <_strtod_l+0xaf0>)
 8004efe:	2600      	movs	r6, #0
 8004f00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f04:	4f30      	ldr	r7, [pc, #192]	@ (8004fc8 <_strtod_l+0xae0>)
 8004f06:	e7b3      	b.n	8004e70 <_strtod_l+0x988>
 8004f08:	2600      	movs	r6, #0
 8004f0a:	4f30      	ldr	r7, [pc, #192]	@ (8004fcc <_strtod_l+0xae4>)
 8004f0c:	e7ac      	b.n	8004e68 <_strtod_l+0x980>
 8004f0e:	4630      	mov	r0, r6
 8004f10:	4639      	mov	r1, r7
 8004f12:	4b2e      	ldr	r3, [pc, #184]	@ (8004fcc <_strtod_l+0xae4>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	f7fb fadf 	bl	80004d8 <__aeabi_dmul>
 8004f1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f1c:	4606      	mov	r6, r0
 8004f1e:	460f      	mov	r7, r1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0a1      	beq.n	8004e68 <_strtod_l+0x980>
 8004f24:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004f28:	e7a2      	b.n	8004e70 <_strtod_l+0x988>
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	4b26      	ldr	r3, [pc, #152]	@ (8004fc8 <_strtod_l+0xae0>)
 8004f2e:	4616      	mov	r6, r2
 8004f30:	461f      	mov	r7, r3
 8004f32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f36:	e79b      	b.n	8004e70 <_strtod_l+0x988>
 8004f38:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8004f3c:	9b08      	ldr	r3, [sp, #32]
 8004f3e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1c1      	bne.n	8004eca <_strtod_l+0x9e2>
 8004f46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004f4a:	0d1b      	lsrs	r3, r3, #20
 8004f4c:	051b      	lsls	r3, r3, #20
 8004f4e:	429d      	cmp	r5, r3
 8004f50:	d1bb      	bne.n	8004eca <_strtod_l+0x9e2>
 8004f52:	4630      	mov	r0, r6
 8004f54:	4639      	mov	r1, r7
 8004f56:	f7fb fe7d 	bl	8000c54 <__aeabi_d2lz>
 8004f5a:	f7fb fa8f 	bl	800047c <__aeabi_l2d>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4630      	mov	r0, r6
 8004f64:	4639      	mov	r1, r7
 8004f66:	f7fb f8ff 	bl	8000168 <__aeabi_dsub>
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8004f72:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004f76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f78:	ea46 060a 	orr.w	r6, r6, sl
 8004f7c:	431e      	orrs	r6, r3
 8004f7e:	d06a      	beq.n	8005056 <_strtod_l+0xb6e>
 8004f80:	a309      	add	r3, pc, #36	@ (adr r3, 8004fa8 <_strtod_l+0xac0>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f7fb fd19 	bl	80009bc <__aeabi_dcmplt>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	f47f acd6 	bne.w	800493c <_strtod_l+0x454>
 8004f90:	a307      	add	r3, pc, #28	@ (adr r3, 8004fb0 <_strtod_l+0xac8>)
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f9a:	f7fb fd2d 	bl	80009f8 <__aeabi_dcmpgt>
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d093      	beq.n	8004eca <_strtod_l+0x9e2>
 8004fa2:	e4cb      	b.n	800493c <_strtod_l+0x454>
 8004fa4:	f3af 8000 	nop.w
 8004fa8:	94a03595 	.word	0x94a03595
 8004fac:	3fdfffff 	.word	0x3fdfffff
 8004fb0:	35afe535 	.word	0x35afe535
 8004fb4:	3fe00000 	.word	0x3fe00000
 8004fb8:	39500000 	.word	0x39500000
 8004fbc:	7ff00000 	.word	0x7ff00000
 8004fc0:	000fffff 	.word	0x000fffff
 8004fc4:	7fefffff 	.word	0x7fefffff
 8004fc8:	3ff00000 	.word	0x3ff00000
 8004fcc:	3fe00000 	.word	0x3fe00000
 8004fd0:	7fe00000 	.word	0x7fe00000
 8004fd4:	7c9fffff 	.word	0x7c9fffff
 8004fd8:	bff00000 	.word	0xbff00000
 8004fdc:	9b08      	ldr	r3, [sp, #32]
 8004fde:	b323      	cbz	r3, 800502a <_strtod_l+0xb42>
 8004fe0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8004fe4:	d821      	bhi.n	800502a <_strtod_l+0xb42>
 8004fe6:	a328      	add	r3, pc, #160	@ (adr r3, 8005088 <_strtod_l+0xba0>)
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	4630      	mov	r0, r6
 8004fee:	4639      	mov	r1, r7
 8004ff0:	f7fb fcee 	bl	80009d0 <__aeabi_dcmple>
 8004ff4:	b1a0      	cbz	r0, 8005020 <_strtod_l+0xb38>
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f7fb fd45 	bl	8000a88 <__aeabi_d2uiz>
 8004ffe:	2801      	cmp	r0, #1
 8005000:	bf38      	it	cc
 8005002:	2001      	movcc	r0, #1
 8005004:	f7fb f9ee 	bl	80003e4 <__aeabi_ui2d>
 8005008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800500a:	4606      	mov	r6, r0
 800500c:	460f      	mov	r7, r1
 800500e:	b9fb      	cbnz	r3, 8005050 <_strtod_l+0xb68>
 8005010:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005014:	9014      	str	r0, [sp, #80]	@ 0x50
 8005016:	9315      	str	r3, [sp, #84]	@ 0x54
 8005018:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800501c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005020:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005022:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005026:	1b5b      	subs	r3, r3, r5
 8005028:	9311      	str	r3, [sp, #68]	@ 0x44
 800502a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800502e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005032:	f002 fe55 	bl	8007ce0 <__ulp>
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	4650      	mov	r0, sl
 800503c:	4659      	mov	r1, fp
 800503e:	f7fb fa4b 	bl	80004d8 <__aeabi_dmul>
 8005042:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005046:	f7fb f891 	bl	800016c <__adddf3>
 800504a:	4682      	mov	sl, r0
 800504c:	468b      	mov	fp, r1
 800504e:	e775      	b.n	8004f3c <_strtod_l+0xa54>
 8005050:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005054:	e7e0      	b.n	8005018 <_strtod_l+0xb30>
 8005056:	a30e      	add	r3, pc, #56	@ (adr r3, 8005090 <_strtod_l+0xba8>)
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	f7fb fcae 	bl	80009bc <__aeabi_dcmplt>
 8005060:	e79d      	b.n	8004f9e <_strtod_l+0xab6>
 8005062:	2300      	movs	r3, #0
 8005064:	930e      	str	r3, [sp, #56]	@ 0x38
 8005066:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005068:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	f7ff ba79 	b.w	8004562 <_strtod_l+0x7a>
 8005070:	2a65      	cmp	r2, #101	@ 0x65
 8005072:	f43f ab72 	beq.w	800475a <_strtod_l+0x272>
 8005076:	2a45      	cmp	r2, #69	@ 0x45
 8005078:	f43f ab6f 	beq.w	800475a <_strtod_l+0x272>
 800507c:	2301      	movs	r3, #1
 800507e:	f7ff bbaa 	b.w	80047d6 <_strtod_l+0x2ee>
 8005082:	bf00      	nop
 8005084:	f3af 8000 	nop.w
 8005088:	ffc00000 	.word	0xffc00000
 800508c:	41dfffff 	.word	0x41dfffff
 8005090:	94a03595 	.word	0x94a03595
 8005094:	3fcfffff 	.word	0x3fcfffff

08005098 <_strtod_r>:
 8005098:	4b01      	ldr	r3, [pc, #4]	@ (80050a0 <_strtod_r+0x8>)
 800509a:	f7ff ba25 	b.w	80044e8 <_strtod_l>
 800509e:	bf00      	nop
 80050a0:	20000048 	.word	0x20000048

080050a4 <strtod>:
 80050a4:	460a      	mov	r2, r1
 80050a6:	4601      	mov	r1, r0
 80050a8:	4802      	ldr	r0, [pc, #8]	@ (80050b4 <strtod+0x10>)
 80050aa:	4b03      	ldr	r3, [pc, #12]	@ (80050b8 <strtod+0x14>)
 80050ac:	6800      	ldr	r0, [r0, #0]
 80050ae:	f7ff ba1b 	b.w	80044e8 <_strtod_l>
 80050b2:	bf00      	nop
 80050b4:	200001b4 	.word	0x200001b4
 80050b8:	20000048 	.word	0x20000048

080050bc <__cvt>:
 80050bc:	2b00      	cmp	r3, #0
 80050be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c2:	461d      	mov	r5, r3
 80050c4:	bfbb      	ittet	lt
 80050c6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80050ca:	461d      	movlt	r5, r3
 80050cc:	2300      	movge	r3, #0
 80050ce:	232d      	movlt	r3, #45	@ 0x2d
 80050d0:	b088      	sub	sp, #32
 80050d2:	4614      	mov	r4, r2
 80050d4:	bfb8      	it	lt
 80050d6:	4614      	movlt	r4, r2
 80050d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80050da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80050dc:	7013      	strb	r3, [r2, #0]
 80050de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80050e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80050e4:	f023 0820 	bic.w	r8, r3, #32
 80050e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050ec:	d005      	beq.n	80050fa <__cvt+0x3e>
 80050ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80050f2:	d100      	bne.n	80050f6 <__cvt+0x3a>
 80050f4:	3601      	adds	r6, #1
 80050f6:	2302      	movs	r3, #2
 80050f8:	e000      	b.n	80050fc <__cvt+0x40>
 80050fa:	2303      	movs	r3, #3
 80050fc:	aa07      	add	r2, sp, #28
 80050fe:	9204      	str	r2, [sp, #16]
 8005100:	aa06      	add	r2, sp, #24
 8005102:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005106:	e9cd 3600 	strd	r3, r6, [sp]
 800510a:	4622      	mov	r2, r4
 800510c:	462b      	mov	r3, r5
 800510e:	f001 f913 	bl	8006338 <_dtoa_r>
 8005112:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005116:	4607      	mov	r7, r0
 8005118:	d119      	bne.n	800514e <__cvt+0x92>
 800511a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800511c:	07db      	lsls	r3, r3, #31
 800511e:	d50e      	bpl.n	800513e <__cvt+0x82>
 8005120:	eb00 0906 	add.w	r9, r0, r6
 8005124:	2200      	movs	r2, #0
 8005126:	2300      	movs	r3, #0
 8005128:	4620      	mov	r0, r4
 800512a:	4629      	mov	r1, r5
 800512c:	f7fb fc3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005130:	b108      	cbz	r0, 8005136 <__cvt+0x7a>
 8005132:	f8cd 901c 	str.w	r9, [sp, #28]
 8005136:	2230      	movs	r2, #48	@ 0x30
 8005138:	9b07      	ldr	r3, [sp, #28]
 800513a:	454b      	cmp	r3, r9
 800513c:	d31e      	bcc.n	800517c <__cvt+0xc0>
 800513e:	4638      	mov	r0, r7
 8005140:	9b07      	ldr	r3, [sp, #28]
 8005142:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005144:	1bdb      	subs	r3, r3, r7
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	b008      	add	sp, #32
 800514a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005152:	eb00 0906 	add.w	r9, r0, r6
 8005156:	d1e5      	bne.n	8005124 <__cvt+0x68>
 8005158:	7803      	ldrb	r3, [r0, #0]
 800515a:	2b30      	cmp	r3, #48	@ 0x30
 800515c:	d10a      	bne.n	8005174 <__cvt+0xb8>
 800515e:	2200      	movs	r2, #0
 8005160:	2300      	movs	r3, #0
 8005162:	4620      	mov	r0, r4
 8005164:	4629      	mov	r1, r5
 8005166:	f7fb fc1f 	bl	80009a8 <__aeabi_dcmpeq>
 800516a:	b918      	cbnz	r0, 8005174 <__cvt+0xb8>
 800516c:	f1c6 0601 	rsb	r6, r6, #1
 8005170:	f8ca 6000 	str.w	r6, [sl]
 8005174:	f8da 3000 	ldr.w	r3, [sl]
 8005178:	4499      	add	r9, r3
 800517a:	e7d3      	b.n	8005124 <__cvt+0x68>
 800517c:	1c59      	adds	r1, r3, #1
 800517e:	9107      	str	r1, [sp, #28]
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	e7d9      	b.n	8005138 <__cvt+0x7c>

08005184 <__exponent>:
 8005184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005186:	2900      	cmp	r1, #0
 8005188:	bfb6      	itet	lt
 800518a:	232d      	movlt	r3, #45	@ 0x2d
 800518c:	232b      	movge	r3, #43	@ 0x2b
 800518e:	4249      	neglt	r1, r1
 8005190:	2909      	cmp	r1, #9
 8005192:	7002      	strb	r2, [r0, #0]
 8005194:	7043      	strb	r3, [r0, #1]
 8005196:	dd29      	ble.n	80051ec <__exponent+0x68>
 8005198:	f10d 0307 	add.w	r3, sp, #7
 800519c:	461d      	mov	r5, r3
 800519e:	270a      	movs	r7, #10
 80051a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80051a4:	461a      	mov	r2, r3
 80051a6:	fb07 1416 	mls	r4, r7, r6, r1
 80051aa:	3430      	adds	r4, #48	@ 0x30
 80051ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80051b0:	460c      	mov	r4, r1
 80051b2:	2c63      	cmp	r4, #99	@ 0x63
 80051b4:	4631      	mov	r1, r6
 80051b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80051ba:	dcf1      	bgt.n	80051a0 <__exponent+0x1c>
 80051bc:	3130      	adds	r1, #48	@ 0x30
 80051be:	1e94      	subs	r4, r2, #2
 80051c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80051c4:	4623      	mov	r3, r4
 80051c6:	1c41      	adds	r1, r0, #1
 80051c8:	42ab      	cmp	r3, r5
 80051ca:	d30a      	bcc.n	80051e2 <__exponent+0x5e>
 80051cc:	f10d 0309 	add.w	r3, sp, #9
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	42ac      	cmp	r4, r5
 80051d4:	bf88      	it	hi
 80051d6:	2300      	movhi	r3, #0
 80051d8:	3302      	adds	r3, #2
 80051da:	4403      	add	r3, r0
 80051dc:	1a18      	subs	r0, r3, r0
 80051de:	b003      	add	sp, #12
 80051e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80051e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80051ea:	e7ed      	b.n	80051c8 <__exponent+0x44>
 80051ec:	2330      	movs	r3, #48	@ 0x30
 80051ee:	3130      	adds	r1, #48	@ 0x30
 80051f0:	7083      	strb	r3, [r0, #2]
 80051f2:	70c1      	strb	r1, [r0, #3]
 80051f4:	1d03      	adds	r3, r0, #4
 80051f6:	e7f1      	b.n	80051dc <__exponent+0x58>

080051f8 <_printf_float>:
 80051f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fc:	b091      	sub	sp, #68	@ 0x44
 80051fe:	460c      	mov	r4, r1
 8005200:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005204:	4616      	mov	r6, r2
 8005206:	461f      	mov	r7, r3
 8005208:	4605      	mov	r5, r0
 800520a:	f000 ff5d 	bl	80060c8 <_localeconv_r>
 800520e:	6803      	ldr	r3, [r0, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	9308      	str	r3, [sp, #32]
 8005214:	f7fa ff9c 	bl	8000150 <strlen>
 8005218:	2300      	movs	r3, #0
 800521a:	930e      	str	r3, [sp, #56]	@ 0x38
 800521c:	f8d8 3000 	ldr.w	r3, [r8]
 8005220:	9009      	str	r0, [sp, #36]	@ 0x24
 8005222:	3307      	adds	r3, #7
 8005224:	f023 0307 	bic.w	r3, r3, #7
 8005228:	f103 0208 	add.w	r2, r3, #8
 800522c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005230:	f8d4 b000 	ldr.w	fp, [r4]
 8005234:	f8c8 2000 	str.w	r2, [r8]
 8005238:	e9d3 8900 	ldrd	r8, r9, [r3]
 800523c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005240:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005242:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005246:	f04f 32ff 	mov.w	r2, #4294967295
 800524a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800524e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005252:	4b9c      	ldr	r3, [pc, #624]	@ (80054c4 <_printf_float+0x2cc>)
 8005254:	f7fb fbda 	bl	8000a0c <__aeabi_dcmpun>
 8005258:	bb70      	cbnz	r0, 80052b8 <_printf_float+0xc0>
 800525a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800525e:	f04f 32ff 	mov.w	r2, #4294967295
 8005262:	4b98      	ldr	r3, [pc, #608]	@ (80054c4 <_printf_float+0x2cc>)
 8005264:	f7fb fbb4 	bl	80009d0 <__aeabi_dcmple>
 8005268:	bb30      	cbnz	r0, 80052b8 <_printf_float+0xc0>
 800526a:	2200      	movs	r2, #0
 800526c:	2300      	movs	r3, #0
 800526e:	4640      	mov	r0, r8
 8005270:	4649      	mov	r1, r9
 8005272:	f7fb fba3 	bl	80009bc <__aeabi_dcmplt>
 8005276:	b110      	cbz	r0, 800527e <_printf_float+0x86>
 8005278:	232d      	movs	r3, #45	@ 0x2d
 800527a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800527e:	4a92      	ldr	r2, [pc, #584]	@ (80054c8 <_printf_float+0x2d0>)
 8005280:	4b92      	ldr	r3, [pc, #584]	@ (80054cc <_printf_float+0x2d4>)
 8005282:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005286:	bf8c      	ite	hi
 8005288:	4690      	movhi	r8, r2
 800528a:	4698      	movls	r8, r3
 800528c:	2303      	movs	r3, #3
 800528e:	f04f 0900 	mov.w	r9, #0
 8005292:	6123      	str	r3, [r4, #16]
 8005294:	f02b 0304 	bic.w	r3, fp, #4
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	4633      	mov	r3, r6
 800529c:	4621      	mov	r1, r4
 800529e:	4628      	mov	r0, r5
 80052a0:	9700      	str	r7, [sp, #0]
 80052a2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80052a4:	f000 f9d4 	bl	8005650 <_printf_common>
 80052a8:	3001      	adds	r0, #1
 80052aa:	f040 8090 	bne.w	80053ce <_printf_float+0x1d6>
 80052ae:	f04f 30ff 	mov.w	r0, #4294967295
 80052b2:	b011      	add	sp, #68	@ 0x44
 80052b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	4640      	mov	r0, r8
 80052be:	4649      	mov	r1, r9
 80052c0:	f7fb fba4 	bl	8000a0c <__aeabi_dcmpun>
 80052c4:	b148      	cbz	r0, 80052da <_printf_float+0xe2>
 80052c6:	464b      	mov	r3, r9
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bfb8      	it	lt
 80052cc:	232d      	movlt	r3, #45	@ 0x2d
 80052ce:	4a80      	ldr	r2, [pc, #512]	@ (80054d0 <_printf_float+0x2d8>)
 80052d0:	bfb8      	it	lt
 80052d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80052d6:	4b7f      	ldr	r3, [pc, #508]	@ (80054d4 <_printf_float+0x2dc>)
 80052d8:	e7d3      	b.n	8005282 <_printf_float+0x8a>
 80052da:	6863      	ldr	r3, [r4, #4]
 80052dc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	d13f      	bne.n	8005364 <_printf_float+0x16c>
 80052e4:	2306      	movs	r3, #6
 80052e6:	6063      	str	r3, [r4, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	9206      	str	r2, [sp, #24]
 80052f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80052f4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80052f8:	aa0d      	add	r2, sp, #52	@ 0x34
 80052fa:	9203      	str	r2, [sp, #12]
 80052fc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005300:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005304:	6863      	ldr	r3, [r4, #4]
 8005306:	4642      	mov	r2, r8
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	4628      	mov	r0, r5
 800530c:	464b      	mov	r3, r9
 800530e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005310:	f7ff fed4 	bl	80050bc <__cvt>
 8005314:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005316:	4680      	mov	r8, r0
 8005318:	2947      	cmp	r1, #71	@ 0x47
 800531a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800531c:	d128      	bne.n	8005370 <_printf_float+0x178>
 800531e:	1cc8      	adds	r0, r1, #3
 8005320:	db02      	blt.n	8005328 <_printf_float+0x130>
 8005322:	6863      	ldr	r3, [r4, #4]
 8005324:	4299      	cmp	r1, r3
 8005326:	dd40      	ble.n	80053aa <_printf_float+0x1b2>
 8005328:	f1aa 0a02 	sub.w	sl, sl, #2
 800532c:	fa5f fa8a 	uxtb.w	sl, sl
 8005330:	4652      	mov	r2, sl
 8005332:	3901      	subs	r1, #1
 8005334:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005338:	910d      	str	r1, [sp, #52]	@ 0x34
 800533a:	f7ff ff23 	bl	8005184 <__exponent>
 800533e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005340:	4681      	mov	r9, r0
 8005342:	1813      	adds	r3, r2, r0
 8005344:	2a01      	cmp	r2, #1
 8005346:	6123      	str	r3, [r4, #16]
 8005348:	dc02      	bgt.n	8005350 <_printf_float+0x158>
 800534a:	6822      	ldr	r2, [r4, #0]
 800534c:	07d2      	lsls	r2, r2, #31
 800534e:	d501      	bpl.n	8005354 <_printf_float+0x15c>
 8005350:	3301      	adds	r3, #1
 8005352:	6123      	str	r3, [r4, #16]
 8005354:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005358:	2b00      	cmp	r3, #0
 800535a:	d09e      	beq.n	800529a <_printf_float+0xa2>
 800535c:	232d      	movs	r3, #45	@ 0x2d
 800535e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005362:	e79a      	b.n	800529a <_printf_float+0xa2>
 8005364:	2947      	cmp	r1, #71	@ 0x47
 8005366:	d1bf      	bne.n	80052e8 <_printf_float+0xf0>
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1bd      	bne.n	80052e8 <_printf_float+0xf0>
 800536c:	2301      	movs	r3, #1
 800536e:	e7ba      	b.n	80052e6 <_printf_float+0xee>
 8005370:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005374:	d9dc      	bls.n	8005330 <_printf_float+0x138>
 8005376:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800537a:	d118      	bne.n	80053ae <_printf_float+0x1b6>
 800537c:	2900      	cmp	r1, #0
 800537e:	6863      	ldr	r3, [r4, #4]
 8005380:	dd0b      	ble.n	800539a <_printf_float+0x1a2>
 8005382:	6121      	str	r1, [r4, #16]
 8005384:	b913      	cbnz	r3, 800538c <_printf_float+0x194>
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	07d0      	lsls	r0, r2, #31
 800538a:	d502      	bpl.n	8005392 <_printf_float+0x19a>
 800538c:	3301      	adds	r3, #1
 800538e:	440b      	add	r3, r1
 8005390:	6123      	str	r3, [r4, #16]
 8005392:	f04f 0900 	mov.w	r9, #0
 8005396:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005398:	e7dc      	b.n	8005354 <_printf_float+0x15c>
 800539a:	b913      	cbnz	r3, 80053a2 <_printf_float+0x1aa>
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	07d2      	lsls	r2, r2, #31
 80053a0:	d501      	bpl.n	80053a6 <_printf_float+0x1ae>
 80053a2:	3302      	adds	r3, #2
 80053a4:	e7f4      	b.n	8005390 <_printf_float+0x198>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e7f2      	b.n	8005390 <_printf_float+0x198>
 80053aa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80053ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053b0:	4299      	cmp	r1, r3
 80053b2:	db05      	blt.n	80053c0 <_printf_float+0x1c8>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	6121      	str	r1, [r4, #16]
 80053b8:	07d8      	lsls	r0, r3, #31
 80053ba:	d5ea      	bpl.n	8005392 <_printf_float+0x19a>
 80053bc:	1c4b      	adds	r3, r1, #1
 80053be:	e7e7      	b.n	8005390 <_printf_float+0x198>
 80053c0:	2900      	cmp	r1, #0
 80053c2:	bfcc      	ite	gt
 80053c4:	2201      	movgt	r2, #1
 80053c6:	f1c1 0202 	rsble	r2, r1, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	e7e0      	b.n	8005390 <_printf_float+0x198>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	055a      	lsls	r2, r3, #21
 80053d2:	d407      	bmi.n	80053e4 <_printf_float+0x1ec>
 80053d4:	6923      	ldr	r3, [r4, #16]
 80053d6:	4642      	mov	r2, r8
 80053d8:	4631      	mov	r1, r6
 80053da:	4628      	mov	r0, r5
 80053dc:	47b8      	blx	r7
 80053de:	3001      	adds	r0, #1
 80053e0:	d12b      	bne.n	800543a <_printf_float+0x242>
 80053e2:	e764      	b.n	80052ae <_printf_float+0xb6>
 80053e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80053e8:	f240 80dc 	bls.w	80055a4 <_printf_float+0x3ac>
 80053ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053f0:	2200      	movs	r2, #0
 80053f2:	2300      	movs	r3, #0
 80053f4:	f7fb fad8 	bl	80009a8 <__aeabi_dcmpeq>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d033      	beq.n	8005464 <_printf_float+0x26c>
 80053fc:	2301      	movs	r3, #1
 80053fe:	4631      	mov	r1, r6
 8005400:	4628      	mov	r0, r5
 8005402:	4a35      	ldr	r2, [pc, #212]	@ (80054d8 <_printf_float+0x2e0>)
 8005404:	47b8      	blx	r7
 8005406:	3001      	adds	r0, #1
 8005408:	f43f af51 	beq.w	80052ae <_printf_float+0xb6>
 800540c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005410:	4543      	cmp	r3, r8
 8005412:	db02      	blt.n	800541a <_printf_float+0x222>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	07d8      	lsls	r0, r3, #31
 8005418:	d50f      	bpl.n	800543a <_printf_float+0x242>
 800541a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f af42 	beq.w	80052ae <_printf_float+0xb6>
 800542a:	f04f 0900 	mov.w	r9, #0
 800542e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005432:	f104 0a1a 	add.w	sl, r4, #26
 8005436:	45c8      	cmp	r8, r9
 8005438:	dc09      	bgt.n	800544e <_printf_float+0x256>
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	079b      	lsls	r3, r3, #30
 800543e:	f100 8102 	bmi.w	8005646 <_printf_float+0x44e>
 8005442:	68e0      	ldr	r0, [r4, #12]
 8005444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005446:	4298      	cmp	r0, r3
 8005448:	bfb8      	it	lt
 800544a:	4618      	movlt	r0, r3
 800544c:	e731      	b.n	80052b2 <_printf_float+0xba>
 800544e:	2301      	movs	r3, #1
 8005450:	4652      	mov	r2, sl
 8005452:	4631      	mov	r1, r6
 8005454:	4628      	mov	r0, r5
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	f43f af28 	beq.w	80052ae <_printf_float+0xb6>
 800545e:	f109 0901 	add.w	r9, r9, #1
 8005462:	e7e8      	b.n	8005436 <_printf_float+0x23e>
 8005464:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005466:	2b00      	cmp	r3, #0
 8005468:	dc38      	bgt.n	80054dc <_printf_float+0x2e4>
 800546a:	2301      	movs	r3, #1
 800546c:	4631      	mov	r1, r6
 800546e:	4628      	mov	r0, r5
 8005470:	4a19      	ldr	r2, [pc, #100]	@ (80054d8 <_printf_float+0x2e0>)
 8005472:	47b8      	blx	r7
 8005474:	3001      	adds	r0, #1
 8005476:	f43f af1a 	beq.w	80052ae <_printf_float+0xb6>
 800547a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800547e:	ea59 0303 	orrs.w	r3, r9, r3
 8005482:	d102      	bne.n	800548a <_printf_float+0x292>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	07d9      	lsls	r1, r3, #31
 8005488:	d5d7      	bpl.n	800543a <_printf_float+0x242>
 800548a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800548e:	4631      	mov	r1, r6
 8005490:	4628      	mov	r0, r5
 8005492:	47b8      	blx	r7
 8005494:	3001      	adds	r0, #1
 8005496:	f43f af0a 	beq.w	80052ae <_printf_float+0xb6>
 800549a:	f04f 0a00 	mov.w	sl, #0
 800549e:	f104 0b1a 	add.w	fp, r4, #26
 80054a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054a4:	425b      	negs	r3, r3
 80054a6:	4553      	cmp	r3, sl
 80054a8:	dc01      	bgt.n	80054ae <_printf_float+0x2b6>
 80054aa:	464b      	mov	r3, r9
 80054ac:	e793      	b.n	80053d6 <_printf_float+0x1de>
 80054ae:	2301      	movs	r3, #1
 80054b0:	465a      	mov	r2, fp
 80054b2:	4631      	mov	r1, r6
 80054b4:	4628      	mov	r0, r5
 80054b6:	47b8      	blx	r7
 80054b8:	3001      	adds	r0, #1
 80054ba:	f43f aef8 	beq.w	80052ae <_printf_float+0xb6>
 80054be:	f10a 0a01 	add.w	sl, sl, #1
 80054c2:	e7ee      	b.n	80054a2 <_printf_float+0x2aa>
 80054c4:	7fefffff 	.word	0x7fefffff
 80054c8:	08008dbc 	.word	0x08008dbc
 80054cc:	08008db8 	.word	0x08008db8
 80054d0:	08008dc4 	.word	0x08008dc4
 80054d4:	08008dc0 	.word	0x08008dc0
 80054d8:	08008dc8 	.word	0x08008dc8
 80054dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054de:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80054e2:	4553      	cmp	r3, sl
 80054e4:	bfa8      	it	ge
 80054e6:	4653      	movge	r3, sl
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	4699      	mov	r9, r3
 80054ec:	dc36      	bgt.n	800555c <_printf_float+0x364>
 80054ee:	f04f 0b00 	mov.w	fp, #0
 80054f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054f6:	f104 021a 	add.w	r2, r4, #26
 80054fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80054fe:	eba3 0309 	sub.w	r3, r3, r9
 8005502:	455b      	cmp	r3, fp
 8005504:	dc31      	bgt.n	800556a <_printf_float+0x372>
 8005506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005508:	459a      	cmp	sl, r3
 800550a:	dc3a      	bgt.n	8005582 <_printf_float+0x38a>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	07da      	lsls	r2, r3, #31
 8005510:	d437      	bmi.n	8005582 <_printf_float+0x38a>
 8005512:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005514:	ebaa 0903 	sub.w	r9, sl, r3
 8005518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800551a:	ebaa 0303 	sub.w	r3, sl, r3
 800551e:	4599      	cmp	r9, r3
 8005520:	bfa8      	it	ge
 8005522:	4699      	movge	r9, r3
 8005524:	f1b9 0f00 	cmp.w	r9, #0
 8005528:	dc33      	bgt.n	8005592 <_printf_float+0x39a>
 800552a:	f04f 0800 	mov.w	r8, #0
 800552e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005532:	f104 0b1a 	add.w	fp, r4, #26
 8005536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005538:	ebaa 0303 	sub.w	r3, sl, r3
 800553c:	eba3 0309 	sub.w	r3, r3, r9
 8005540:	4543      	cmp	r3, r8
 8005542:	f77f af7a 	ble.w	800543a <_printf_float+0x242>
 8005546:	2301      	movs	r3, #1
 8005548:	465a      	mov	r2, fp
 800554a:	4631      	mov	r1, r6
 800554c:	4628      	mov	r0, r5
 800554e:	47b8      	blx	r7
 8005550:	3001      	adds	r0, #1
 8005552:	f43f aeac 	beq.w	80052ae <_printf_float+0xb6>
 8005556:	f108 0801 	add.w	r8, r8, #1
 800555a:	e7ec      	b.n	8005536 <_printf_float+0x33e>
 800555c:	4642      	mov	r2, r8
 800555e:	4631      	mov	r1, r6
 8005560:	4628      	mov	r0, r5
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	d1c2      	bne.n	80054ee <_printf_float+0x2f6>
 8005568:	e6a1      	b.n	80052ae <_printf_float+0xb6>
 800556a:	2301      	movs	r3, #1
 800556c:	4631      	mov	r1, r6
 800556e:	4628      	mov	r0, r5
 8005570:	920a      	str	r2, [sp, #40]	@ 0x28
 8005572:	47b8      	blx	r7
 8005574:	3001      	adds	r0, #1
 8005576:	f43f ae9a 	beq.w	80052ae <_printf_float+0xb6>
 800557a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800557c:	f10b 0b01 	add.w	fp, fp, #1
 8005580:	e7bb      	b.n	80054fa <_printf_float+0x302>
 8005582:	4631      	mov	r1, r6
 8005584:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005588:	4628      	mov	r0, r5
 800558a:	47b8      	blx	r7
 800558c:	3001      	adds	r0, #1
 800558e:	d1c0      	bne.n	8005512 <_printf_float+0x31a>
 8005590:	e68d      	b.n	80052ae <_printf_float+0xb6>
 8005592:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005594:	464b      	mov	r3, r9
 8005596:	4631      	mov	r1, r6
 8005598:	4628      	mov	r0, r5
 800559a:	4442      	add	r2, r8
 800559c:	47b8      	blx	r7
 800559e:	3001      	adds	r0, #1
 80055a0:	d1c3      	bne.n	800552a <_printf_float+0x332>
 80055a2:	e684      	b.n	80052ae <_printf_float+0xb6>
 80055a4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80055a8:	f1ba 0f01 	cmp.w	sl, #1
 80055ac:	dc01      	bgt.n	80055b2 <_printf_float+0x3ba>
 80055ae:	07db      	lsls	r3, r3, #31
 80055b0:	d536      	bpl.n	8005620 <_printf_float+0x428>
 80055b2:	2301      	movs	r3, #1
 80055b4:	4642      	mov	r2, r8
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	47b8      	blx	r7
 80055bc:	3001      	adds	r0, #1
 80055be:	f43f ae76 	beq.w	80052ae <_printf_float+0xb6>
 80055c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055c6:	4631      	mov	r1, r6
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b8      	blx	r7
 80055cc:	3001      	adds	r0, #1
 80055ce:	f43f ae6e 	beq.w	80052ae <_printf_float+0xb6>
 80055d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055d6:	2200      	movs	r2, #0
 80055d8:	2300      	movs	r3, #0
 80055da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055de:	f7fb f9e3 	bl	80009a8 <__aeabi_dcmpeq>
 80055e2:	b9c0      	cbnz	r0, 8005616 <_printf_float+0x41e>
 80055e4:	4653      	mov	r3, sl
 80055e6:	f108 0201 	add.w	r2, r8, #1
 80055ea:	4631      	mov	r1, r6
 80055ec:	4628      	mov	r0, r5
 80055ee:	47b8      	blx	r7
 80055f0:	3001      	adds	r0, #1
 80055f2:	d10c      	bne.n	800560e <_printf_float+0x416>
 80055f4:	e65b      	b.n	80052ae <_printf_float+0xb6>
 80055f6:	2301      	movs	r3, #1
 80055f8:	465a      	mov	r2, fp
 80055fa:	4631      	mov	r1, r6
 80055fc:	4628      	mov	r0, r5
 80055fe:	47b8      	blx	r7
 8005600:	3001      	adds	r0, #1
 8005602:	f43f ae54 	beq.w	80052ae <_printf_float+0xb6>
 8005606:	f108 0801 	add.w	r8, r8, #1
 800560a:	45d0      	cmp	r8, sl
 800560c:	dbf3      	blt.n	80055f6 <_printf_float+0x3fe>
 800560e:	464b      	mov	r3, r9
 8005610:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005614:	e6e0      	b.n	80053d8 <_printf_float+0x1e0>
 8005616:	f04f 0800 	mov.w	r8, #0
 800561a:	f104 0b1a 	add.w	fp, r4, #26
 800561e:	e7f4      	b.n	800560a <_printf_float+0x412>
 8005620:	2301      	movs	r3, #1
 8005622:	4642      	mov	r2, r8
 8005624:	e7e1      	b.n	80055ea <_printf_float+0x3f2>
 8005626:	2301      	movs	r3, #1
 8005628:	464a      	mov	r2, r9
 800562a:	4631      	mov	r1, r6
 800562c:	4628      	mov	r0, r5
 800562e:	47b8      	blx	r7
 8005630:	3001      	adds	r0, #1
 8005632:	f43f ae3c 	beq.w	80052ae <_printf_float+0xb6>
 8005636:	f108 0801 	add.w	r8, r8, #1
 800563a:	68e3      	ldr	r3, [r4, #12]
 800563c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800563e:	1a5b      	subs	r3, r3, r1
 8005640:	4543      	cmp	r3, r8
 8005642:	dcf0      	bgt.n	8005626 <_printf_float+0x42e>
 8005644:	e6fd      	b.n	8005442 <_printf_float+0x24a>
 8005646:	f04f 0800 	mov.w	r8, #0
 800564a:	f104 0919 	add.w	r9, r4, #25
 800564e:	e7f4      	b.n	800563a <_printf_float+0x442>

08005650 <_printf_common>:
 8005650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005654:	4616      	mov	r6, r2
 8005656:	4698      	mov	r8, r3
 8005658:	688a      	ldr	r2, [r1, #8]
 800565a:	690b      	ldr	r3, [r1, #16]
 800565c:	4607      	mov	r7, r0
 800565e:	4293      	cmp	r3, r2
 8005660:	bfb8      	it	lt
 8005662:	4613      	movlt	r3, r2
 8005664:	6033      	str	r3, [r6, #0]
 8005666:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800566a:	460c      	mov	r4, r1
 800566c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005670:	b10a      	cbz	r2, 8005676 <_printf_common+0x26>
 8005672:	3301      	adds	r3, #1
 8005674:	6033      	str	r3, [r6, #0]
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	0699      	lsls	r1, r3, #26
 800567a:	bf42      	ittt	mi
 800567c:	6833      	ldrmi	r3, [r6, #0]
 800567e:	3302      	addmi	r3, #2
 8005680:	6033      	strmi	r3, [r6, #0]
 8005682:	6825      	ldr	r5, [r4, #0]
 8005684:	f015 0506 	ands.w	r5, r5, #6
 8005688:	d106      	bne.n	8005698 <_printf_common+0x48>
 800568a:	f104 0a19 	add.w	sl, r4, #25
 800568e:	68e3      	ldr	r3, [r4, #12]
 8005690:	6832      	ldr	r2, [r6, #0]
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	42ab      	cmp	r3, r5
 8005696:	dc2b      	bgt.n	80056f0 <_printf_common+0xa0>
 8005698:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800569c:	6822      	ldr	r2, [r4, #0]
 800569e:	3b00      	subs	r3, #0
 80056a0:	bf18      	it	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	0692      	lsls	r2, r2, #26
 80056a6:	d430      	bmi.n	800570a <_printf_common+0xba>
 80056a8:	4641      	mov	r1, r8
 80056aa:	4638      	mov	r0, r7
 80056ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056b0:	47c8      	blx	r9
 80056b2:	3001      	adds	r0, #1
 80056b4:	d023      	beq.n	80056fe <_printf_common+0xae>
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	6922      	ldr	r2, [r4, #16]
 80056ba:	f003 0306 	and.w	r3, r3, #6
 80056be:	2b04      	cmp	r3, #4
 80056c0:	bf14      	ite	ne
 80056c2:	2500      	movne	r5, #0
 80056c4:	6833      	ldreq	r3, [r6, #0]
 80056c6:	f04f 0600 	mov.w	r6, #0
 80056ca:	bf08      	it	eq
 80056cc:	68e5      	ldreq	r5, [r4, #12]
 80056ce:	f104 041a 	add.w	r4, r4, #26
 80056d2:	bf08      	it	eq
 80056d4:	1aed      	subeq	r5, r5, r3
 80056d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80056da:	bf08      	it	eq
 80056dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056e0:	4293      	cmp	r3, r2
 80056e2:	bfc4      	itt	gt
 80056e4:	1a9b      	subgt	r3, r3, r2
 80056e6:	18ed      	addgt	r5, r5, r3
 80056e8:	42b5      	cmp	r5, r6
 80056ea:	d11a      	bne.n	8005722 <_printf_common+0xd2>
 80056ec:	2000      	movs	r0, #0
 80056ee:	e008      	b.n	8005702 <_printf_common+0xb2>
 80056f0:	2301      	movs	r3, #1
 80056f2:	4652      	mov	r2, sl
 80056f4:	4641      	mov	r1, r8
 80056f6:	4638      	mov	r0, r7
 80056f8:	47c8      	blx	r9
 80056fa:	3001      	adds	r0, #1
 80056fc:	d103      	bne.n	8005706 <_printf_common+0xb6>
 80056fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005706:	3501      	adds	r5, #1
 8005708:	e7c1      	b.n	800568e <_printf_common+0x3e>
 800570a:	2030      	movs	r0, #48	@ 0x30
 800570c:	18e1      	adds	r1, r4, r3
 800570e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005718:	4422      	add	r2, r4
 800571a:	3302      	adds	r3, #2
 800571c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005720:	e7c2      	b.n	80056a8 <_printf_common+0x58>
 8005722:	2301      	movs	r3, #1
 8005724:	4622      	mov	r2, r4
 8005726:	4641      	mov	r1, r8
 8005728:	4638      	mov	r0, r7
 800572a:	47c8      	blx	r9
 800572c:	3001      	adds	r0, #1
 800572e:	d0e6      	beq.n	80056fe <_printf_common+0xae>
 8005730:	3601      	adds	r6, #1
 8005732:	e7d9      	b.n	80056e8 <_printf_common+0x98>

08005734 <_printf_i>:
 8005734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005738:	7e0f      	ldrb	r7, [r1, #24]
 800573a:	4691      	mov	r9, r2
 800573c:	2f78      	cmp	r7, #120	@ 0x78
 800573e:	4680      	mov	r8, r0
 8005740:	460c      	mov	r4, r1
 8005742:	469a      	mov	sl, r3
 8005744:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005746:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800574a:	d807      	bhi.n	800575c <_printf_i+0x28>
 800574c:	2f62      	cmp	r7, #98	@ 0x62
 800574e:	d80a      	bhi.n	8005766 <_printf_i+0x32>
 8005750:	2f00      	cmp	r7, #0
 8005752:	f000 80d1 	beq.w	80058f8 <_printf_i+0x1c4>
 8005756:	2f58      	cmp	r7, #88	@ 0x58
 8005758:	f000 80b8 	beq.w	80058cc <_printf_i+0x198>
 800575c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005760:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005764:	e03a      	b.n	80057dc <_printf_i+0xa8>
 8005766:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800576a:	2b15      	cmp	r3, #21
 800576c:	d8f6      	bhi.n	800575c <_printf_i+0x28>
 800576e:	a101      	add	r1, pc, #4	@ (adr r1, 8005774 <_printf_i+0x40>)
 8005770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005774:	080057cd 	.word	0x080057cd
 8005778:	080057e1 	.word	0x080057e1
 800577c:	0800575d 	.word	0x0800575d
 8005780:	0800575d 	.word	0x0800575d
 8005784:	0800575d 	.word	0x0800575d
 8005788:	0800575d 	.word	0x0800575d
 800578c:	080057e1 	.word	0x080057e1
 8005790:	0800575d 	.word	0x0800575d
 8005794:	0800575d 	.word	0x0800575d
 8005798:	0800575d 	.word	0x0800575d
 800579c:	0800575d 	.word	0x0800575d
 80057a0:	080058df 	.word	0x080058df
 80057a4:	0800580b 	.word	0x0800580b
 80057a8:	08005899 	.word	0x08005899
 80057ac:	0800575d 	.word	0x0800575d
 80057b0:	0800575d 	.word	0x0800575d
 80057b4:	08005901 	.word	0x08005901
 80057b8:	0800575d 	.word	0x0800575d
 80057bc:	0800580b 	.word	0x0800580b
 80057c0:	0800575d 	.word	0x0800575d
 80057c4:	0800575d 	.word	0x0800575d
 80057c8:	080058a1 	.word	0x080058a1
 80057cc:	6833      	ldr	r3, [r6, #0]
 80057ce:	1d1a      	adds	r2, r3, #4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6032      	str	r2, [r6, #0]
 80057d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057dc:	2301      	movs	r3, #1
 80057de:	e09c      	b.n	800591a <_printf_i+0x1e6>
 80057e0:	6833      	ldr	r3, [r6, #0]
 80057e2:	6820      	ldr	r0, [r4, #0]
 80057e4:	1d19      	adds	r1, r3, #4
 80057e6:	6031      	str	r1, [r6, #0]
 80057e8:	0606      	lsls	r6, r0, #24
 80057ea:	d501      	bpl.n	80057f0 <_printf_i+0xbc>
 80057ec:	681d      	ldr	r5, [r3, #0]
 80057ee:	e003      	b.n	80057f8 <_printf_i+0xc4>
 80057f0:	0645      	lsls	r5, r0, #25
 80057f2:	d5fb      	bpl.n	80057ec <_printf_i+0xb8>
 80057f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057f8:	2d00      	cmp	r5, #0
 80057fa:	da03      	bge.n	8005804 <_printf_i+0xd0>
 80057fc:	232d      	movs	r3, #45	@ 0x2d
 80057fe:	426d      	negs	r5, r5
 8005800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005804:	230a      	movs	r3, #10
 8005806:	4858      	ldr	r0, [pc, #352]	@ (8005968 <_printf_i+0x234>)
 8005808:	e011      	b.n	800582e <_printf_i+0xfa>
 800580a:	6821      	ldr	r1, [r4, #0]
 800580c:	6833      	ldr	r3, [r6, #0]
 800580e:	0608      	lsls	r0, r1, #24
 8005810:	f853 5b04 	ldr.w	r5, [r3], #4
 8005814:	d402      	bmi.n	800581c <_printf_i+0xe8>
 8005816:	0649      	lsls	r1, r1, #25
 8005818:	bf48      	it	mi
 800581a:	b2ad      	uxthmi	r5, r5
 800581c:	2f6f      	cmp	r7, #111	@ 0x6f
 800581e:	6033      	str	r3, [r6, #0]
 8005820:	bf14      	ite	ne
 8005822:	230a      	movne	r3, #10
 8005824:	2308      	moveq	r3, #8
 8005826:	4850      	ldr	r0, [pc, #320]	@ (8005968 <_printf_i+0x234>)
 8005828:	2100      	movs	r1, #0
 800582a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800582e:	6866      	ldr	r6, [r4, #4]
 8005830:	2e00      	cmp	r6, #0
 8005832:	60a6      	str	r6, [r4, #8]
 8005834:	db05      	blt.n	8005842 <_printf_i+0x10e>
 8005836:	6821      	ldr	r1, [r4, #0]
 8005838:	432e      	orrs	r6, r5
 800583a:	f021 0104 	bic.w	r1, r1, #4
 800583e:	6021      	str	r1, [r4, #0]
 8005840:	d04b      	beq.n	80058da <_printf_i+0x1a6>
 8005842:	4616      	mov	r6, r2
 8005844:	fbb5 f1f3 	udiv	r1, r5, r3
 8005848:	fb03 5711 	mls	r7, r3, r1, r5
 800584c:	5dc7      	ldrb	r7, [r0, r7]
 800584e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005852:	462f      	mov	r7, r5
 8005854:	42bb      	cmp	r3, r7
 8005856:	460d      	mov	r5, r1
 8005858:	d9f4      	bls.n	8005844 <_printf_i+0x110>
 800585a:	2b08      	cmp	r3, #8
 800585c:	d10b      	bne.n	8005876 <_printf_i+0x142>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	07df      	lsls	r7, r3, #31
 8005862:	d508      	bpl.n	8005876 <_printf_i+0x142>
 8005864:	6923      	ldr	r3, [r4, #16]
 8005866:	6861      	ldr	r1, [r4, #4]
 8005868:	4299      	cmp	r1, r3
 800586a:	bfde      	ittt	le
 800586c:	2330      	movle	r3, #48	@ 0x30
 800586e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005872:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005876:	1b92      	subs	r2, r2, r6
 8005878:	6122      	str	r2, [r4, #16]
 800587a:	464b      	mov	r3, r9
 800587c:	4621      	mov	r1, r4
 800587e:	4640      	mov	r0, r8
 8005880:	f8cd a000 	str.w	sl, [sp]
 8005884:	aa03      	add	r2, sp, #12
 8005886:	f7ff fee3 	bl	8005650 <_printf_common>
 800588a:	3001      	adds	r0, #1
 800588c:	d14a      	bne.n	8005924 <_printf_i+0x1f0>
 800588e:	f04f 30ff 	mov.w	r0, #4294967295
 8005892:	b004      	add	sp, #16
 8005894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	f043 0320 	orr.w	r3, r3, #32
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	2778      	movs	r7, #120	@ 0x78
 80058a2:	4832      	ldr	r0, [pc, #200]	@ (800596c <_printf_i+0x238>)
 80058a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	6831      	ldr	r1, [r6, #0]
 80058ac:	061f      	lsls	r7, r3, #24
 80058ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80058b2:	d402      	bmi.n	80058ba <_printf_i+0x186>
 80058b4:	065f      	lsls	r7, r3, #25
 80058b6:	bf48      	it	mi
 80058b8:	b2ad      	uxthmi	r5, r5
 80058ba:	6031      	str	r1, [r6, #0]
 80058bc:	07d9      	lsls	r1, r3, #31
 80058be:	bf44      	itt	mi
 80058c0:	f043 0320 	orrmi.w	r3, r3, #32
 80058c4:	6023      	strmi	r3, [r4, #0]
 80058c6:	b11d      	cbz	r5, 80058d0 <_printf_i+0x19c>
 80058c8:	2310      	movs	r3, #16
 80058ca:	e7ad      	b.n	8005828 <_printf_i+0xf4>
 80058cc:	4826      	ldr	r0, [pc, #152]	@ (8005968 <_printf_i+0x234>)
 80058ce:	e7e9      	b.n	80058a4 <_printf_i+0x170>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	f023 0320 	bic.w	r3, r3, #32
 80058d6:	6023      	str	r3, [r4, #0]
 80058d8:	e7f6      	b.n	80058c8 <_printf_i+0x194>
 80058da:	4616      	mov	r6, r2
 80058dc:	e7bd      	b.n	800585a <_printf_i+0x126>
 80058de:	6833      	ldr	r3, [r6, #0]
 80058e0:	6825      	ldr	r5, [r4, #0]
 80058e2:	1d18      	adds	r0, r3, #4
 80058e4:	6961      	ldr	r1, [r4, #20]
 80058e6:	6030      	str	r0, [r6, #0]
 80058e8:	062e      	lsls	r6, r5, #24
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	d501      	bpl.n	80058f2 <_printf_i+0x1be>
 80058ee:	6019      	str	r1, [r3, #0]
 80058f0:	e002      	b.n	80058f8 <_printf_i+0x1c4>
 80058f2:	0668      	lsls	r0, r5, #25
 80058f4:	d5fb      	bpl.n	80058ee <_printf_i+0x1ba>
 80058f6:	8019      	strh	r1, [r3, #0]
 80058f8:	2300      	movs	r3, #0
 80058fa:	4616      	mov	r6, r2
 80058fc:	6123      	str	r3, [r4, #16]
 80058fe:	e7bc      	b.n	800587a <_printf_i+0x146>
 8005900:	6833      	ldr	r3, [r6, #0]
 8005902:	2100      	movs	r1, #0
 8005904:	1d1a      	adds	r2, r3, #4
 8005906:	6032      	str	r2, [r6, #0]
 8005908:	681e      	ldr	r6, [r3, #0]
 800590a:	6862      	ldr	r2, [r4, #4]
 800590c:	4630      	mov	r0, r6
 800590e:	f000 fc62 	bl	80061d6 <memchr>
 8005912:	b108      	cbz	r0, 8005918 <_printf_i+0x1e4>
 8005914:	1b80      	subs	r0, r0, r6
 8005916:	6060      	str	r0, [r4, #4]
 8005918:	6863      	ldr	r3, [r4, #4]
 800591a:	6123      	str	r3, [r4, #16]
 800591c:	2300      	movs	r3, #0
 800591e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005922:	e7aa      	b.n	800587a <_printf_i+0x146>
 8005924:	4632      	mov	r2, r6
 8005926:	4649      	mov	r1, r9
 8005928:	4640      	mov	r0, r8
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	47d0      	blx	sl
 800592e:	3001      	adds	r0, #1
 8005930:	d0ad      	beq.n	800588e <_printf_i+0x15a>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	079b      	lsls	r3, r3, #30
 8005936:	d413      	bmi.n	8005960 <_printf_i+0x22c>
 8005938:	68e0      	ldr	r0, [r4, #12]
 800593a:	9b03      	ldr	r3, [sp, #12]
 800593c:	4298      	cmp	r0, r3
 800593e:	bfb8      	it	lt
 8005940:	4618      	movlt	r0, r3
 8005942:	e7a6      	b.n	8005892 <_printf_i+0x15e>
 8005944:	2301      	movs	r3, #1
 8005946:	4632      	mov	r2, r6
 8005948:	4649      	mov	r1, r9
 800594a:	4640      	mov	r0, r8
 800594c:	47d0      	blx	sl
 800594e:	3001      	adds	r0, #1
 8005950:	d09d      	beq.n	800588e <_printf_i+0x15a>
 8005952:	3501      	adds	r5, #1
 8005954:	68e3      	ldr	r3, [r4, #12]
 8005956:	9903      	ldr	r1, [sp, #12]
 8005958:	1a5b      	subs	r3, r3, r1
 800595a:	42ab      	cmp	r3, r5
 800595c:	dcf2      	bgt.n	8005944 <_printf_i+0x210>
 800595e:	e7eb      	b.n	8005938 <_printf_i+0x204>
 8005960:	2500      	movs	r5, #0
 8005962:	f104 0619 	add.w	r6, r4, #25
 8005966:	e7f5      	b.n	8005954 <_printf_i+0x220>
 8005968:	08008dca 	.word	0x08008dca
 800596c:	08008ddb 	.word	0x08008ddb

08005970 <_scanf_float>:
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	b087      	sub	sp, #28
 8005976:	9303      	str	r3, [sp, #12]
 8005978:	688b      	ldr	r3, [r1, #8]
 800597a:	4691      	mov	r9, r2
 800597c:	1e5a      	subs	r2, r3, #1
 800597e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005982:	bf82      	ittt	hi
 8005984:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005988:	eb03 0b05 	addhi.w	fp, r3, r5
 800598c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005990:	460a      	mov	r2, r1
 8005992:	f04f 0500 	mov.w	r5, #0
 8005996:	bf88      	it	hi
 8005998:	608b      	strhi	r3, [r1, #8]
 800599a:	680b      	ldr	r3, [r1, #0]
 800599c:	4680      	mov	r8, r0
 800599e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80059a2:	f842 3b1c 	str.w	r3, [r2], #28
 80059a6:	460c      	mov	r4, r1
 80059a8:	bf98      	it	ls
 80059aa:	f04f 0b00 	movls.w	fp, #0
 80059ae:	4616      	mov	r6, r2
 80059b0:	46aa      	mov	sl, r5
 80059b2:	462f      	mov	r7, r5
 80059b4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80059b8:	9201      	str	r2, [sp, #4]
 80059ba:	9502      	str	r5, [sp, #8]
 80059bc:	68a2      	ldr	r2, [r4, #8]
 80059be:	b15a      	cbz	r2, 80059d8 <_scanf_float+0x68>
 80059c0:	f8d9 3000 	ldr.w	r3, [r9]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b4e      	cmp	r3, #78	@ 0x4e
 80059c8:	d862      	bhi.n	8005a90 <_scanf_float+0x120>
 80059ca:	2b40      	cmp	r3, #64	@ 0x40
 80059cc:	d83a      	bhi.n	8005a44 <_scanf_float+0xd4>
 80059ce:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80059d2:	b2c8      	uxtb	r0, r1
 80059d4:	280e      	cmp	r0, #14
 80059d6:	d938      	bls.n	8005a4a <_scanf_float+0xda>
 80059d8:	b11f      	cbz	r7, 80059e2 <_scanf_float+0x72>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059e6:	f1ba 0f01 	cmp.w	sl, #1
 80059ea:	f200 8114 	bhi.w	8005c16 <_scanf_float+0x2a6>
 80059ee:	9b01      	ldr	r3, [sp, #4]
 80059f0:	429e      	cmp	r6, r3
 80059f2:	f200 8105 	bhi.w	8005c00 <_scanf_float+0x290>
 80059f6:	2001      	movs	r0, #1
 80059f8:	b007      	add	sp, #28
 80059fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005a02:	2a0d      	cmp	r2, #13
 8005a04:	d8e8      	bhi.n	80059d8 <_scanf_float+0x68>
 8005a06:	a101      	add	r1, pc, #4	@ (adr r1, 8005a0c <_scanf_float+0x9c>)
 8005a08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a0c:	08005b55 	.word	0x08005b55
 8005a10:	080059d9 	.word	0x080059d9
 8005a14:	080059d9 	.word	0x080059d9
 8005a18:	080059d9 	.word	0x080059d9
 8005a1c:	08005bb1 	.word	0x08005bb1
 8005a20:	08005b8b 	.word	0x08005b8b
 8005a24:	080059d9 	.word	0x080059d9
 8005a28:	080059d9 	.word	0x080059d9
 8005a2c:	08005b63 	.word	0x08005b63
 8005a30:	080059d9 	.word	0x080059d9
 8005a34:	080059d9 	.word	0x080059d9
 8005a38:	080059d9 	.word	0x080059d9
 8005a3c:	080059d9 	.word	0x080059d9
 8005a40:	08005b1f 	.word	0x08005b1f
 8005a44:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005a48:	e7db      	b.n	8005a02 <_scanf_float+0x92>
 8005a4a:	290e      	cmp	r1, #14
 8005a4c:	d8c4      	bhi.n	80059d8 <_scanf_float+0x68>
 8005a4e:	a001      	add	r0, pc, #4	@ (adr r0, 8005a54 <_scanf_float+0xe4>)
 8005a50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005a54:	08005b0f 	.word	0x08005b0f
 8005a58:	080059d9 	.word	0x080059d9
 8005a5c:	08005b0f 	.word	0x08005b0f
 8005a60:	08005b9f 	.word	0x08005b9f
 8005a64:	080059d9 	.word	0x080059d9
 8005a68:	08005ab1 	.word	0x08005ab1
 8005a6c:	08005af5 	.word	0x08005af5
 8005a70:	08005af5 	.word	0x08005af5
 8005a74:	08005af5 	.word	0x08005af5
 8005a78:	08005af5 	.word	0x08005af5
 8005a7c:	08005af5 	.word	0x08005af5
 8005a80:	08005af5 	.word	0x08005af5
 8005a84:	08005af5 	.word	0x08005af5
 8005a88:	08005af5 	.word	0x08005af5
 8005a8c:	08005af5 	.word	0x08005af5
 8005a90:	2b6e      	cmp	r3, #110	@ 0x6e
 8005a92:	d809      	bhi.n	8005aa8 <_scanf_float+0x138>
 8005a94:	2b60      	cmp	r3, #96	@ 0x60
 8005a96:	d8b2      	bhi.n	80059fe <_scanf_float+0x8e>
 8005a98:	2b54      	cmp	r3, #84	@ 0x54
 8005a9a:	d07b      	beq.n	8005b94 <_scanf_float+0x224>
 8005a9c:	2b59      	cmp	r3, #89	@ 0x59
 8005a9e:	d19b      	bne.n	80059d8 <_scanf_float+0x68>
 8005aa0:	2d07      	cmp	r5, #7
 8005aa2:	d199      	bne.n	80059d8 <_scanf_float+0x68>
 8005aa4:	2508      	movs	r5, #8
 8005aa6:	e02f      	b.n	8005b08 <_scanf_float+0x198>
 8005aa8:	2b74      	cmp	r3, #116	@ 0x74
 8005aaa:	d073      	beq.n	8005b94 <_scanf_float+0x224>
 8005aac:	2b79      	cmp	r3, #121	@ 0x79
 8005aae:	e7f6      	b.n	8005a9e <_scanf_float+0x12e>
 8005ab0:	6821      	ldr	r1, [r4, #0]
 8005ab2:	05c8      	lsls	r0, r1, #23
 8005ab4:	d51e      	bpl.n	8005af4 <_scanf_float+0x184>
 8005ab6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005aba:	6021      	str	r1, [r4, #0]
 8005abc:	3701      	adds	r7, #1
 8005abe:	f1bb 0f00 	cmp.w	fp, #0
 8005ac2:	d003      	beq.n	8005acc <_scanf_float+0x15c>
 8005ac4:	3201      	adds	r2, #1
 8005ac6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005aca:	60a2      	str	r2, [r4, #8]
 8005acc:	68a3      	ldr	r3, [r4, #8]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	60a3      	str	r3, [r4, #8]
 8005ad2:	6923      	ldr	r3, [r4, #16]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	6123      	str	r3, [r4, #16]
 8005ad8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f8c9 3004 	str.w	r3, [r9, #4]
 8005ae4:	f340 8083 	ble.w	8005bee <_scanf_float+0x27e>
 8005ae8:	f8d9 3000 	ldr.w	r3, [r9]
 8005aec:	3301      	adds	r3, #1
 8005aee:	f8c9 3000 	str.w	r3, [r9]
 8005af2:	e763      	b.n	80059bc <_scanf_float+0x4c>
 8005af4:	eb1a 0105 	adds.w	r1, sl, r5
 8005af8:	f47f af6e 	bne.w	80059d8 <_scanf_float+0x68>
 8005afc:	460d      	mov	r5, r1
 8005afe:	468a      	mov	sl, r1
 8005b00:	6822      	ldr	r2, [r4, #0]
 8005b02:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005b06:	6022      	str	r2, [r4, #0]
 8005b08:	f806 3b01 	strb.w	r3, [r6], #1
 8005b0c:	e7de      	b.n	8005acc <_scanf_float+0x15c>
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	0610      	lsls	r0, r2, #24
 8005b12:	f57f af61 	bpl.w	80059d8 <_scanf_float+0x68>
 8005b16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b1a:	6022      	str	r2, [r4, #0]
 8005b1c:	e7f4      	b.n	8005b08 <_scanf_float+0x198>
 8005b1e:	f1ba 0f00 	cmp.w	sl, #0
 8005b22:	d10c      	bne.n	8005b3e <_scanf_float+0x1ce>
 8005b24:	b977      	cbnz	r7, 8005b44 <_scanf_float+0x1d4>
 8005b26:	6822      	ldr	r2, [r4, #0]
 8005b28:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005b2c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005b30:	d108      	bne.n	8005b44 <_scanf_float+0x1d4>
 8005b32:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005b36:	f04f 0a01 	mov.w	sl, #1
 8005b3a:	6022      	str	r2, [r4, #0]
 8005b3c:	e7e4      	b.n	8005b08 <_scanf_float+0x198>
 8005b3e:	f1ba 0f02 	cmp.w	sl, #2
 8005b42:	d051      	beq.n	8005be8 <_scanf_float+0x278>
 8005b44:	2d01      	cmp	r5, #1
 8005b46:	d002      	beq.n	8005b4e <_scanf_float+0x1de>
 8005b48:	2d04      	cmp	r5, #4
 8005b4a:	f47f af45 	bne.w	80059d8 <_scanf_float+0x68>
 8005b4e:	3501      	adds	r5, #1
 8005b50:	b2ed      	uxtb	r5, r5
 8005b52:	e7d9      	b.n	8005b08 <_scanf_float+0x198>
 8005b54:	f1ba 0f01 	cmp.w	sl, #1
 8005b58:	f47f af3e 	bne.w	80059d8 <_scanf_float+0x68>
 8005b5c:	f04f 0a02 	mov.w	sl, #2
 8005b60:	e7d2      	b.n	8005b08 <_scanf_float+0x198>
 8005b62:	b975      	cbnz	r5, 8005b82 <_scanf_float+0x212>
 8005b64:	2f00      	cmp	r7, #0
 8005b66:	f47f af38 	bne.w	80059da <_scanf_float+0x6a>
 8005b6a:	6822      	ldr	r2, [r4, #0]
 8005b6c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005b70:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005b74:	f040 80ff 	bne.w	8005d76 <_scanf_float+0x406>
 8005b78:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005b7c:	2501      	movs	r5, #1
 8005b7e:	6022      	str	r2, [r4, #0]
 8005b80:	e7c2      	b.n	8005b08 <_scanf_float+0x198>
 8005b82:	2d03      	cmp	r5, #3
 8005b84:	d0e3      	beq.n	8005b4e <_scanf_float+0x1de>
 8005b86:	2d05      	cmp	r5, #5
 8005b88:	e7df      	b.n	8005b4a <_scanf_float+0x1da>
 8005b8a:	2d02      	cmp	r5, #2
 8005b8c:	f47f af24 	bne.w	80059d8 <_scanf_float+0x68>
 8005b90:	2503      	movs	r5, #3
 8005b92:	e7b9      	b.n	8005b08 <_scanf_float+0x198>
 8005b94:	2d06      	cmp	r5, #6
 8005b96:	f47f af1f 	bne.w	80059d8 <_scanf_float+0x68>
 8005b9a:	2507      	movs	r5, #7
 8005b9c:	e7b4      	b.n	8005b08 <_scanf_float+0x198>
 8005b9e:	6822      	ldr	r2, [r4, #0]
 8005ba0:	0591      	lsls	r1, r2, #22
 8005ba2:	f57f af19 	bpl.w	80059d8 <_scanf_float+0x68>
 8005ba6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005baa:	6022      	str	r2, [r4, #0]
 8005bac:	9702      	str	r7, [sp, #8]
 8005bae:	e7ab      	b.n	8005b08 <_scanf_float+0x198>
 8005bb0:	6822      	ldr	r2, [r4, #0]
 8005bb2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005bb6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005bba:	d005      	beq.n	8005bc8 <_scanf_float+0x258>
 8005bbc:	0550      	lsls	r0, r2, #21
 8005bbe:	f57f af0b 	bpl.w	80059d8 <_scanf_float+0x68>
 8005bc2:	2f00      	cmp	r7, #0
 8005bc4:	f000 80d7 	beq.w	8005d76 <_scanf_float+0x406>
 8005bc8:	0591      	lsls	r1, r2, #22
 8005bca:	bf58      	it	pl
 8005bcc:	9902      	ldrpl	r1, [sp, #8]
 8005bce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005bd2:	bf58      	it	pl
 8005bd4:	1a79      	subpl	r1, r7, r1
 8005bd6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005bda:	f04f 0700 	mov.w	r7, #0
 8005bde:	bf58      	it	pl
 8005be0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005be4:	6022      	str	r2, [r4, #0]
 8005be6:	e78f      	b.n	8005b08 <_scanf_float+0x198>
 8005be8:	f04f 0a03 	mov.w	sl, #3
 8005bec:	e78c      	b.n	8005b08 <_scanf_float+0x198>
 8005bee:	4649      	mov	r1, r9
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005bf6:	4798      	blx	r3
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	f43f aedf 	beq.w	80059bc <_scanf_float+0x4c>
 8005bfe:	e6eb      	b.n	80059d8 <_scanf_float+0x68>
 8005c00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c04:	464a      	mov	r2, r9
 8005c06:	4640      	mov	r0, r8
 8005c08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c0c:	4798      	blx	r3
 8005c0e:	6923      	ldr	r3, [r4, #16]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	6123      	str	r3, [r4, #16]
 8005c14:	e6eb      	b.n	80059ee <_scanf_float+0x7e>
 8005c16:	1e6b      	subs	r3, r5, #1
 8005c18:	2b06      	cmp	r3, #6
 8005c1a:	d824      	bhi.n	8005c66 <_scanf_float+0x2f6>
 8005c1c:	2d02      	cmp	r5, #2
 8005c1e:	d836      	bhi.n	8005c8e <_scanf_float+0x31e>
 8005c20:	9b01      	ldr	r3, [sp, #4]
 8005c22:	429e      	cmp	r6, r3
 8005c24:	f67f aee7 	bls.w	80059f6 <_scanf_float+0x86>
 8005c28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c2c:	464a      	mov	r2, r9
 8005c2e:	4640      	mov	r0, r8
 8005c30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c34:	4798      	blx	r3
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	e7f0      	b.n	8005c20 <_scanf_float+0x2b0>
 8005c3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c42:	464a      	mov	r2, r9
 8005c44:	4640      	mov	r0, r8
 8005c46:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005c4a:	4798      	blx	r3
 8005c4c:	6923      	ldr	r3, [r4, #16]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c56:	fa5f fa8a 	uxtb.w	sl, sl
 8005c5a:	f1ba 0f02 	cmp.w	sl, #2
 8005c5e:	d1ee      	bne.n	8005c3e <_scanf_float+0x2ce>
 8005c60:	3d03      	subs	r5, #3
 8005c62:	b2ed      	uxtb	r5, r5
 8005c64:	1b76      	subs	r6, r6, r5
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	05da      	lsls	r2, r3, #23
 8005c6a:	d530      	bpl.n	8005cce <_scanf_float+0x35e>
 8005c6c:	055b      	lsls	r3, r3, #21
 8005c6e:	d511      	bpl.n	8005c94 <_scanf_float+0x324>
 8005c70:	9b01      	ldr	r3, [sp, #4]
 8005c72:	429e      	cmp	r6, r3
 8005c74:	f67f aebf 	bls.w	80059f6 <_scanf_float+0x86>
 8005c78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c7c:	464a      	mov	r2, r9
 8005c7e:	4640      	mov	r0, r8
 8005c80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c84:	4798      	blx	r3
 8005c86:	6923      	ldr	r3, [r4, #16]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	6123      	str	r3, [r4, #16]
 8005c8c:	e7f0      	b.n	8005c70 <_scanf_float+0x300>
 8005c8e:	46aa      	mov	sl, r5
 8005c90:	46b3      	mov	fp, r6
 8005c92:	e7de      	b.n	8005c52 <_scanf_float+0x2e2>
 8005c94:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	2965      	cmp	r1, #101	@ 0x65
 8005c9c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ca0:	f106 35ff 	add.w	r5, r6, #4294967295
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	d00c      	beq.n	8005cc2 <_scanf_float+0x352>
 8005ca8:	2945      	cmp	r1, #69	@ 0x45
 8005caa:	d00a      	beq.n	8005cc2 <_scanf_float+0x352>
 8005cac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005cb0:	464a      	mov	r2, r9
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	4798      	blx	r3
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	1eb5      	subs	r5, r6, #2
 8005cc0:	6123      	str	r3, [r4, #16]
 8005cc2:	464a      	mov	r2, r9
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005cca:	4798      	blx	r3
 8005ccc:	462e      	mov	r6, r5
 8005cce:	6822      	ldr	r2, [r4, #0]
 8005cd0:	f012 0210 	ands.w	r2, r2, #16
 8005cd4:	d001      	beq.n	8005cda <_scanf_float+0x36a>
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	e68e      	b.n	80059f8 <_scanf_float+0x88>
 8005cda:	7032      	strb	r2, [r6, #0]
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ce6:	d125      	bne.n	8005d34 <_scanf_float+0x3c4>
 8005ce8:	9b02      	ldr	r3, [sp, #8]
 8005cea:	429f      	cmp	r7, r3
 8005cec:	d00a      	beq.n	8005d04 <_scanf_float+0x394>
 8005cee:	1bda      	subs	r2, r3, r7
 8005cf0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005cf4:	429e      	cmp	r6, r3
 8005cf6:	bf28      	it	cs
 8005cf8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	491f      	ldr	r1, [pc, #124]	@ (8005d7c <_scanf_float+0x40c>)
 8005d00:	f000 f938 	bl	8005f74 <siprintf>
 8005d04:	2200      	movs	r2, #0
 8005d06:	4640      	mov	r0, r8
 8005d08:	9901      	ldr	r1, [sp, #4]
 8005d0a:	f7ff f9c5 	bl	8005098 <_strtod_r>
 8005d0e:	9b03      	ldr	r3, [sp, #12]
 8005d10:	6825      	ldr	r5, [r4, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f015 0f02 	tst.w	r5, #2
 8005d18:	4606      	mov	r6, r0
 8005d1a:	460f      	mov	r7, r1
 8005d1c:	f103 0204 	add.w	r2, r3, #4
 8005d20:	d015      	beq.n	8005d4e <_scanf_float+0x3de>
 8005d22:	9903      	ldr	r1, [sp, #12]
 8005d24:	600a      	str	r2, [r1, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	e9c3 6700 	strd	r6, r7, [r3]
 8005d2c:	68e3      	ldr	r3, [r4, #12]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60e3      	str	r3, [r4, #12]
 8005d32:	e7d0      	b.n	8005cd6 <_scanf_float+0x366>
 8005d34:	9b04      	ldr	r3, [sp, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0e4      	beq.n	8005d04 <_scanf_float+0x394>
 8005d3a:	9905      	ldr	r1, [sp, #20]
 8005d3c:	230a      	movs	r3, #10
 8005d3e:	4640      	mov	r0, r8
 8005d40:	3101      	adds	r1, #1
 8005d42:	f002 f97b 	bl	800803c <_strtol_r>
 8005d46:	9b04      	ldr	r3, [sp, #16]
 8005d48:	9e05      	ldr	r6, [sp, #20]
 8005d4a:	1ac2      	subs	r2, r0, r3
 8005d4c:	e7d0      	b.n	8005cf0 <_scanf_float+0x380>
 8005d4e:	076d      	lsls	r5, r5, #29
 8005d50:	d4e7      	bmi.n	8005d22 <_scanf_float+0x3b2>
 8005d52:	9d03      	ldr	r5, [sp, #12]
 8005d54:	602a      	str	r2, [r5, #0]
 8005d56:	681d      	ldr	r5, [r3, #0]
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	f7fa fe56 	bl	8000a0c <__aeabi_dcmpun>
 8005d60:	b120      	cbz	r0, 8005d6c <_scanf_float+0x3fc>
 8005d62:	4807      	ldr	r0, [pc, #28]	@ (8005d80 <_scanf_float+0x410>)
 8005d64:	f000 fa5a 	bl	800621c <nanf>
 8005d68:	6028      	str	r0, [r5, #0]
 8005d6a:	e7df      	b.n	8005d2c <_scanf_float+0x3bc>
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	4639      	mov	r1, r7
 8005d70:	f7fa feaa 	bl	8000ac8 <__aeabi_d2f>
 8005d74:	e7f8      	b.n	8005d68 <_scanf_float+0x3f8>
 8005d76:	2700      	movs	r7, #0
 8005d78:	e633      	b.n	80059e2 <_scanf_float+0x72>
 8005d7a:	bf00      	nop
 8005d7c:	08008dec 	.word	0x08008dec
 8005d80:	08008f8b 	.word	0x08008f8b

08005d84 <std>:
 8005d84:	2300      	movs	r3, #0
 8005d86:	b510      	push	{r4, lr}
 8005d88:	4604      	mov	r4, r0
 8005d8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d92:	6083      	str	r3, [r0, #8]
 8005d94:	8181      	strh	r1, [r0, #12]
 8005d96:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d98:	81c2      	strh	r2, [r0, #14]
 8005d9a:	6183      	str	r3, [r0, #24]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	2208      	movs	r2, #8
 8005da0:	305c      	adds	r0, #92	@ 0x5c
 8005da2:	f000 f94c 	bl	800603e <memset>
 8005da6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ddc <std+0x58>)
 8005da8:	6224      	str	r4, [r4, #32]
 8005daa:	6263      	str	r3, [r4, #36]	@ 0x24
 8005dac:	4b0c      	ldr	r3, [pc, #48]	@ (8005de0 <std+0x5c>)
 8005dae:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005db0:	4b0c      	ldr	r3, [pc, #48]	@ (8005de4 <std+0x60>)
 8005db2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005db4:	4b0c      	ldr	r3, [pc, #48]	@ (8005de8 <std+0x64>)
 8005db6:	6323      	str	r3, [r4, #48]	@ 0x30
 8005db8:	4b0c      	ldr	r3, [pc, #48]	@ (8005dec <std+0x68>)
 8005dba:	429c      	cmp	r4, r3
 8005dbc:	d006      	beq.n	8005dcc <std+0x48>
 8005dbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005dc2:	4294      	cmp	r4, r2
 8005dc4:	d002      	beq.n	8005dcc <std+0x48>
 8005dc6:	33d0      	adds	r3, #208	@ 0xd0
 8005dc8:	429c      	cmp	r4, r3
 8005dca:	d105      	bne.n	8005dd8 <std+0x54>
 8005dcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd4:	f000 b9fc 	b.w	80061d0 <__retarget_lock_init_recursive>
 8005dd8:	bd10      	pop	{r4, pc}
 8005dda:	bf00      	nop
 8005ddc:	08005fb9 	.word	0x08005fb9
 8005de0:	08005fdb 	.word	0x08005fdb
 8005de4:	08006013 	.word	0x08006013
 8005de8:	08006037 	.word	0x08006037
 8005dec:	20000420 	.word	0x20000420

08005df0 <stdio_exit_handler>:
 8005df0:	4a02      	ldr	r2, [pc, #8]	@ (8005dfc <stdio_exit_handler+0xc>)
 8005df2:	4903      	ldr	r1, [pc, #12]	@ (8005e00 <stdio_exit_handler+0x10>)
 8005df4:	4803      	ldr	r0, [pc, #12]	@ (8005e04 <stdio_exit_handler+0x14>)
 8005df6:	f000 b869 	b.w	8005ecc <_fwalk_sglue>
 8005dfa:	bf00      	nop
 8005dfc:	2000003c 	.word	0x2000003c
 8005e00:	08008409 	.word	0x08008409
 8005e04:	200001b8 	.word	0x200001b8

08005e08 <cleanup_stdio>:
 8005e08:	6841      	ldr	r1, [r0, #4]
 8005e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e3c <cleanup_stdio+0x34>)
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	4299      	cmp	r1, r3
 8005e10:	4604      	mov	r4, r0
 8005e12:	d001      	beq.n	8005e18 <cleanup_stdio+0x10>
 8005e14:	f002 faf8 	bl	8008408 <_fflush_r>
 8005e18:	68a1      	ldr	r1, [r4, #8]
 8005e1a:	4b09      	ldr	r3, [pc, #36]	@ (8005e40 <cleanup_stdio+0x38>)
 8005e1c:	4299      	cmp	r1, r3
 8005e1e:	d002      	beq.n	8005e26 <cleanup_stdio+0x1e>
 8005e20:	4620      	mov	r0, r4
 8005e22:	f002 faf1 	bl	8008408 <_fflush_r>
 8005e26:	68e1      	ldr	r1, [r4, #12]
 8005e28:	4b06      	ldr	r3, [pc, #24]	@ (8005e44 <cleanup_stdio+0x3c>)
 8005e2a:	4299      	cmp	r1, r3
 8005e2c:	d004      	beq.n	8005e38 <cleanup_stdio+0x30>
 8005e2e:	4620      	mov	r0, r4
 8005e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e34:	f002 bae8 	b.w	8008408 <_fflush_r>
 8005e38:	bd10      	pop	{r4, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20000420 	.word	0x20000420
 8005e40:	20000488 	.word	0x20000488
 8005e44:	200004f0 	.word	0x200004f0

08005e48 <global_stdio_init.part.0>:
 8005e48:	b510      	push	{r4, lr}
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e78 <global_stdio_init.part.0+0x30>)
 8005e4c:	4c0b      	ldr	r4, [pc, #44]	@ (8005e7c <global_stdio_init.part.0+0x34>)
 8005e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8005e80 <global_stdio_init.part.0+0x38>)
 8005e50:	4620      	mov	r0, r4
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	2104      	movs	r1, #4
 8005e56:	2200      	movs	r2, #0
 8005e58:	f7ff ff94 	bl	8005d84 <std>
 8005e5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e60:	2201      	movs	r2, #1
 8005e62:	2109      	movs	r1, #9
 8005e64:	f7ff ff8e 	bl	8005d84 <std>
 8005e68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e72:	2112      	movs	r1, #18
 8005e74:	f7ff bf86 	b.w	8005d84 <std>
 8005e78:	20000558 	.word	0x20000558
 8005e7c:	20000420 	.word	0x20000420
 8005e80:	08005df1 	.word	0x08005df1

08005e84 <__sfp_lock_acquire>:
 8005e84:	4801      	ldr	r0, [pc, #4]	@ (8005e8c <__sfp_lock_acquire+0x8>)
 8005e86:	f000 b9a4 	b.w	80061d2 <__retarget_lock_acquire_recursive>
 8005e8a:	bf00      	nop
 8005e8c:	20000561 	.word	0x20000561

08005e90 <__sfp_lock_release>:
 8005e90:	4801      	ldr	r0, [pc, #4]	@ (8005e98 <__sfp_lock_release+0x8>)
 8005e92:	f000 b99f 	b.w	80061d4 <__retarget_lock_release_recursive>
 8005e96:	bf00      	nop
 8005e98:	20000561 	.word	0x20000561

08005e9c <__sinit>:
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	f7ff fff0 	bl	8005e84 <__sfp_lock_acquire>
 8005ea4:	6a23      	ldr	r3, [r4, #32]
 8005ea6:	b11b      	cbz	r3, 8005eb0 <__sinit+0x14>
 8005ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eac:	f7ff bff0 	b.w	8005e90 <__sfp_lock_release>
 8005eb0:	4b04      	ldr	r3, [pc, #16]	@ (8005ec4 <__sinit+0x28>)
 8005eb2:	6223      	str	r3, [r4, #32]
 8005eb4:	4b04      	ldr	r3, [pc, #16]	@ (8005ec8 <__sinit+0x2c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1f5      	bne.n	8005ea8 <__sinit+0xc>
 8005ebc:	f7ff ffc4 	bl	8005e48 <global_stdio_init.part.0>
 8005ec0:	e7f2      	b.n	8005ea8 <__sinit+0xc>
 8005ec2:	bf00      	nop
 8005ec4:	08005e09 	.word	0x08005e09
 8005ec8:	20000558 	.word	0x20000558

08005ecc <_fwalk_sglue>:
 8005ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed0:	4607      	mov	r7, r0
 8005ed2:	4688      	mov	r8, r1
 8005ed4:	4614      	mov	r4, r2
 8005ed6:	2600      	movs	r6, #0
 8005ed8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005edc:	f1b9 0901 	subs.w	r9, r9, #1
 8005ee0:	d505      	bpl.n	8005eee <_fwalk_sglue+0x22>
 8005ee2:	6824      	ldr	r4, [r4, #0]
 8005ee4:	2c00      	cmp	r4, #0
 8005ee6:	d1f7      	bne.n	8005ed8 <_fwalk_sglue+0xc>
 8005ee8:	4630      	mov	r0, r6
 8005eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eee:	89ab      	ldrh	r3, [r5, #12]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d907      	bls.n	8005f04 <_fwalk_sglue+0x38>
 8005ef4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	d003      	beq.n	8005f04 <_fwalk_sglue+0x38>
 8005efc:	4629      	mov	r1, r5
 8005efe:	4638      	mov	r0, r7
 8005f00:	47c0      	blx	r8
 8005f02:	4306      	orrs	r6, r0
 8005f04:	3568      	adds	r5, #104	@ 0x68
 8005f06:	e7e9      	b.n	8005edc <_fwalk_sglue+0x10>

08005f08 <sniprintf>:
 8005f08:	b40c      	push	{r2, r3}
 8005f0a:	b530      	push	{r4, r5, lr}
 8005f0c:	4b18      	ldr	r3, [pc, #96]	@ (8005f70 <sniprintf+0x68>)
 8005f0e:	1e0c      	subs	r4, r1, #0
 8005f10:	681d      	ldr	r5, [r3, #0]
 8005f12:	b09d      	sub	sp, #116	@ 0x74
 8005f14:	da08      	bge.n	8005f28 <sniprintf+0x20>
 8005f16:	238b      	movs	r3, #139	@ 0x8b
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	602b      	str	r3, [r5, #0]
 8005f1e:	b01d      	add	sp, #116	@ 0x74
 8005f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f24:	b002      	add	sp, #8
 8005f26:	4770      	bx	lr
 8005f28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005f2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005f36:	bf0c      	ite	eq
 8005f38:	4623      	moveq	r3, r4
 8005f3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f3e:	9304      	str	r3, [sp, #16]
 8005f40:	9307      	str	r3, [sp, #28]
 8005f42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f46:	9002      	str	r0, [sp, #8]
 8005f48:	9006      	str	r0, [sp, #24]
 8005f4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f4e:	4628      	mov	r0, r5
 8005f50:	ab21      	add	r3, sp, #132	@ 0x84
 8005f52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005f54:	a902      	add	r1, sp, #8
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	f002 f8da 	bl	8008110 <_svfiprintf_r>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	bfbc      	itt	lt
 8005f60:	238b      	movlt	r3, #139	@ 0x8b
 8005f62:	602b      	strlt	r3, [r5, #0]
 8005f64:	2c00      	cmp	r4, #0
 8005f66:	d0da      	beq.n	8005f1e <sniprintf+0x16>
 8005f68:	2200      	movs	r2, #0
 8005f6a:	9b02      	ldr	r3, [sp, #8]
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	e7d6      	b.n	8005f1e <sniprintf+0x16>
 8005f70:	200001b4 	.word	0x200001b4

08005f74 <siprintf>:
 8005f74:	b40e      	push	{r1, r2, r3}
 8005f76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005f7a:	b510      	push	{r4, lr}
 8005f7c:	2400      	movs	r4, #0
 8005f7e:	b09d      	sub	sp, #116	@ 0x74
 8005f80:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005f82:	9002      	str	r0, [sp, #8]
 8005f84:	9006      	str	r0, [sp, #24]
 8005f86:	9107      	str	r1, [sp, #28]
 8005f88:	9104      	str	r1, [sp, #16]
 8005f8a:	4809      	ldr	r0, [pc, #36]	@ (8005fb0 <siprintf+0x3c>)
 8005f8c:	4909      	ldr	r1, [pc, #36]	@ (8005fb4 <siprintf+0x40>)
 8005f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f92:	9105      	str	r1, [sp, #20]
 8005f94:	6800      	ldr	r0, [r0, #0]
 8005f96:	a902      	add	r1, sp, #8
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005f9c:	f002 f8b8 	bl	8008110 <_svfiprintf_r>
 8005fa0:	9b02      	ldr	r3, [sp, #8]
 8005fa2:	701c      	strb	r4, [r3, #0]
 8005fa4:	b01d      	add	sp, #116	@ 0x74
 8005fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005faa:	b003      	add	sp, #12
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	200001b4 	.word	0x200001b4
 8005fb4:	ffff0208 	.word	0xffff0208

08005fb8 <__sread>:
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	460c      	mov	r4, r1
 8005fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc0:	f000 f8a8 	bl	8006114 <_read_r>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	bfab      	itete	ge
 8005fc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005fca:	89a3      	ldrhlt	r3, [r4, #12]
 8005fcc:	181b      	addge	r3, r3, r0
 8005fce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005fd2:	bfac      	ite	ge
 8005fd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005fd6:	81a3      	strhlt	r3, [r4, #12]
 8005fd8:	bd10      	pop	{r4, pc}

08005fda <__swrite>:
 8005fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fde:	461f      	mov	r7, r3
 8005fe0:	898b      	ldrh	r3, [r1, #12]
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	05db      	lsls	r3, r3, #23
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	4616      	mov	r6, r2
 8005fea:	d505      	bpl.n	8005ff8 <__swrite+0x1e>
 8005fec:	2302      	movs	r3, #2
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff4:	f000 f87c 	bl	80060f0 <_lseek_r>
 8005ff8:	89a3      	ldrh	r3, [r4, #12]
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	4628      	mov	r0, r5
 8006004:	463b      	mov	r3, r7
 8006006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800600a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800600e:	f000 b8a3 	b.w	8006158 <_write_r>

08006012 <__sseek>:
 8006012:	b510      	push	{r4, lr}
 8006014:	460c      	mov	r4, r1
 8006016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800601a:	f000 f869 	bl	80060f0 <_lseek_r>
 800601e:	1c43      	adds	r3, r0, #1
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	bf15      	itete	ne
 8006024:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006026:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800602a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800602e:	81a3      	strheq	r3, [r4, #12]
 8006030:	bf18      	it	ne
 8006032:	81a3      	strhne	r3, [r4, #12]
 8006034:	bd10      	pop	{r4, pc}

08006036 <__sclose>:
 8006036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800603a:	f000 b849 	b.w	80060d0 <_close_r>

0800603e <memset>:
 800603e:	4603      	mov	r3, r0
 8006040:	4402      	add	r2, r0
 8006042:	4293      	cmp	r3, r2
 8006044:	d100      	bne.n	8006048 <memset+0xa>
 8006046:	4770      	bx	lr
 8006048:	f803 1b01 	strb.w	r1, [r3], #1
 800604c:	e7f9      	b.n	8006042 <memset+0x4>

0800604e <strcat>:
 800604e:	4602      	mov	r2, r0
 8006050:	b510      	push	{r4, lr}
 8006052:	7814      	ldrb	r4, [r2, #0]
 8006054:	4613      	mov	r3, r2
 8006056:	3201      	adds	r2, #1
 8006058:	2c00      	cmp	r4, #0
 800605a:	d1fa      	bne.n	8006052 <strcat+0x4>
 800605c:	3b01      	subs	r3, #1
 800605e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006066:	2a00      	cmp	r2, #0
 8006068:	d1f9      	bne.n	800605e <strcat+0x10>
 800606a:	bd10      	pop	{r4, pc}

0800606c <strdup>:
 800606c:	4b02      	ldr	r3, [pc, #8]	@ (8006078 <strdup+0xc>)
 800606e:	4601      	mov	r1, r0
 8006070:	6818      	ldr	r0, [r3, #0]
 8006072:	f000 b803 	b.w	800607c <_strdup_r>
 8006076:	bf00      	nop
 8006078:	200001b4 	.word	0x200001b4

0800607c <_strdup_r>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4604      	mov	r4, r0
 8006080:	4608      	mov	r0, r1
 8006082:	460d      	mov	r5, r1
 8006084:	f7fa f864 	bl	8000150 <strlen>
 8006088:	1c46      	adds	r6, r0, #1
 800608a:	4631      	mov	r1, r6
 800608c:	4620      	mov	r0, r4
 800608e:	f7fe f97b 	bl	8004388 <_malloc_r>
 8006092:	4604      	mov	r4, r0
 8006094:	b118      	cbz	r0, 800609e <_strdup_r+0x22>
 8006096:	4632      	mov	r2, r6
 8006098:	4629      	mov	r1, r5
 800609a:	f000 f8aa 	bl	80061f2 <memcpy>
 800609e:	4620      	mov	r0, r4
 80060a0:	bd70      	pop	{r4, r5, r6, pc}

080060a2 <strncmp>:
 80060a2:	b510      	push	{r4, lr}
 80060a4:	b16a      	cbz	r2, 80060c2 <strncmp+0x20>
 80060a6:	3901      	subs	r1, #1
 80060a8:	1884      	adds	r4, r0, r2
 80060aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d103      	bne.n	80060be <strncmp+0x1c>
 80060b6:	42a0      	cmp	r0, r4
 80060b8:	d001      	beq.n	80060be <strncmp+0x1c>
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	d1f5      	bne.n	80060aa <strncmp+0x8>
 80060be:	1ad0      	subs	r0, r2, r3
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	4610      	mov	r0, r2
 80060c4:	e7fc      	b.n	80060c0 <strncmp+0x1e>
	...

080060c8 <_localeconv_r>:
 80060c8:	4800      	ldr	r0, [pc, #0]	@ (80060cc <_localeconv_r+0x4>)
 80060ca:	4770      	bx	lr
 80060cc:	20000138 	.word	0x20000138

080060d0 <_close_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	2300      	movs	r3, #0
 80060d4:	4d05      	ldr	r5, [pc, #20]	@ (80060ec <_close_r+0x1c>)
 80060d6:	4604      	mov	r4, r0
 80060d8:	4608      	mov	r0, r1
 80060da:	602b      	str	r3, [r5, #0]
 80060dc:	f7fa ffe7 	bl	80010ae <_close>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	d102      	bne.n	80060ea <_close_r+0x1a>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	b103      	cbz	r3, 80060ea <_close_r+0x1a>
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	2000055c 	.word	0x2000055c

080060f0 <_lseek_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4604      	mov	r4, r0
 80060f4:	4608      	mov	r0, r1
 80060f6:	4611      	mov	r1, r2
 80060f8:	2200      	movs	r2, #0
 80060fa:	4d05      	ldr	r5, [pc, #20]	@ (8006110 <_lseek_r+0x20>)
 80060fc:	602a      	str	r2, [r5, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f7fa fff9 	bl	80010f6 <_lseek>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_lseek_r+0x1e>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_lseek_r+0x1e>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	2000055c 	.word	0x2000055c

08006114 <_read_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4604      	mov	r4, r0
 8006118:	4608      	mov	r0, r1
 800611a:	4611      	mov	r1, r2
 800611c:	2200      	movs	r2, #0
 800611e:	4d05      	ldr	r5, [pc, #20]	@ (8006134 <_read_r+0x20>)
 8006120:	602a      	str	r2, [r5, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	f7fa ff8a 	bl	800103c <_read>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_read_r+0x1e>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	b103      	cbz	r3, 8006132 <_read_r+0x1e>
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	2000055c 	.word	0x2000055c

08006138 <_sbrk_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	2300      	movs	r3, #0
 800613c:	4d05      	ldr	r5, [pc, #20]	@ (8006154 <_sbrk_r+0x1c>)
 800613e:	4604      	mov	r4, r0
 8006140:	4608      	mov	r0, r1
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	f7fa ffe4 	bl	8001110 <_sbrk>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_sbrk_r+0x1a>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_sbrk_r+0x1a>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	2000055c 	.word	0x2000055c

08006158 <_write_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4604      	mov	r4, r0
 800615c:	4608      	mov	r0, r1
 800615e:	4611      	mov	r1, r2
 8006160:	2200      	movs	r2, #0
 8006162:	4d05      	ldr	r5, [pc, #20]	@ (8006178 <_write_r+0x20>)
 8006164:	602a      	str	r2, [r5, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	f7fa ff85 	bl	8001076 <_write>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d102      	bne.n	8006176 <_write_r+0x1e>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	b103      	cbz	r3, 8006176 <_write_r+0x1e>
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	bd38      	pop	{r3, r4, r5, pc}
 8006178:	2000055c 	.word	0x2000055c

0800617c <__errno>:
 800617c:	4b01      	ldr	r3, [pc, #4]	@ (8006184 <__errno+0x8>)
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	200001b4 	.word	0x200001b4

08006188 <__libc_init_array>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	2600      	movs	r6, #0
 800618c:	4d0c      	ldr	r5, [pc, #48]	@ (80061c0 <__libc_init_array+0x38>)
 800618e:	4c0d      	ldr	r4, [pc, #52]	@ (80061c4 <__libc_init_array+0x3c>)
 8006190:	1b64      	subs	r4, r4, r5
 8006192:	10a4      	asrs	r4, r4, #2
 8006194:	42a6      	cmp	r6, r4
 8006196:	d109      	bne.n	80061ac <__libc_init_array+0x24>
 8006198:	f002 fc94 	bl	8008ac4 <_init>
 800619c:	2600      	movs	r6, #0
 800619e:	4d0a      	ldr	r5, [pc, #40]	@ (80061c8 <__libc_init_array+0x40>)
 80061a0:	4c0a      	ldr	r4, [pc, #40]	@ (80061cc <__libc_init_array+0x44>)
 80061a2:	1b64      	subs	r4, r4, r5
 80061a4:	10a4      	asrs	r4, r4, #2
 80061a6:	42a6      	cmp	r6, r4
 80061a8:	d105      	bne.n	80061b6 <__libc_init_array+0x2e>
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80061b0:	4798      	blx	r3
 80061b2:	3601      	adds	r6, #1
 80061b4:	e7ee      	b.n	8006194 <__libc_init_array+0xc>
 80061b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ba:	4798      	blx	r3
 80061bc:	3601      	adds	r6, #1
 80061be:	e7f2      	b.n	80061a6 <__libc_init_array+0x1e>
 80061c0:	080091ec 	.word	0x080091ec
 80061c4:	080091ec 	.word	0x080091ec
 80061c8:	080091ec 	.word	0x080091ec
 80061cc:	080091f0 	.word	0x080091f0

080061d0 <__retarget_lock_init_recursive>:
 80061d0:	4770      	bx	lr

080061d2 <__retarget_lock_acquire_recursive>:
 80061d2:	4770      	bx	lr

080061d4 <__retarget_lock_release_recursive>:
 80061d4:	4770      	bx	lr

080061d6 <memchr>:
 80061d6:	4603      	mov	r3, r0
 80061d8:	b510      	push	{r4, lr}
 80061da:	b2c9      	uxtb	r1, r1
 80061dc:	4402      	add	r2, r0
 80061de:	4293      	cmp	r3, r2
 80061e0:	4618      	mov	r0, r3
 80061e2:	d101      	bne.n	80061e8 <memchr+0x12>
 80061e4:	2000      	movs	r0, #0
 80061e6:	e003      	b.n	80061f0 <memchr+0x1a>
 80061e8:	7804      	ldrb	r4, [r0, #0]
 80061ea:	3301      	adds	r3, #1
 80061ec:	428c      	cmp	r4, r1
 80061ee:	d1f6      	bne.n	80061de <memchr+0x8>
 80061f0:	bd10      	pop	{r4, pc}

080061f2 <memcpy>:
 80061f2:	440a      	add	r2, r1
 80061f4:	4291      	cmp	r1, r2
 80061f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80061fa:	d100      	bne.n	80061fe <memcpy+0xc>
 80061fc:	4770      	bx	lr
 80061fe:	b510      	push	{r4, lr}
 8006200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006204:	4291      	cmp	r1, r2
 8006206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800620a:	d1f9      	bne.n	8006200 <memcpy+0xe>
 800620c:	bd10      	pop	{r4, pc}
	...

08006210 <nan>:
 8006210:	2000      	movs	r0, #0
 8006212:	4901      	ldr	r1, [pc, #4]	@ (8006218 <nan+0x8>)
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	7ff80000 	.word	0x7ff80000

0800621c <nanf>:
 800621c:	4800      	ldr	r0, [pc, #0]	@ (8006220 <nanf+0x4>)
 800621e:	4770      	bx	lr
 8006220:	7fc00000 	.word	0x7fc00000

08006224 <quorem>:
 8006224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006228:	6903      	ldr	r3, [r0, #16]
 800622a:	690c      	ldr	r4, [r1, #16]
 800622c:	4607      	mov	r7, r0
 800622e:	42a3      	cmp	r3, r4
 8006230:	db7e      	blt.n	8006330 <quorem+0x10c>
 8006232:	3c01      	subs	r4, #1
 8006234:	00a3      	lsls	r3, r4, #2
 8006236:	f100 0514 	add.w	r5, r0, #20
 800623a:	f101 0814 	add.w	r8, r1, #20
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800624a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800624e:	3301      	adds	r3, #1
 8006250:	429a      	cmp	r2, r3
 8006252:	fbb2 f6f3 	udiv	r6, r2, r3
 8006256:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800625a:	d32e      	bcc.n	80062ba <quorem+0x96>
 800625c:	f04f 0a00 	mov.w	sl, #0
 8006260:	46c4      	mov	ip, r8
 8006262:	46ae      	mov	lr, r5
 8006264:	46d3      	mov	fp, sl
 8006266:	f85c 3b04 	ldr.w	r3, [ip], #4
 800626a:	b298      	uxth	r0, r3
 800626c:	fb06 a000 	mla	r0, r6, r0, sl
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	0c02      	lsrs	r2, r0, #16
 8006274:	fb06 2303 	mla	r3, r6, r3, r2
 8006278:	f8de 2000 	ldr.w	r2, [lr]
 800627c:	b280      	uxth	r0, r0
 800627e:	b292      	uxth	r2, r2
 8006280:	1a12      	subs	r2, r2, r0
 8006282:	445a      	add	r2, fp
 8006284:	f8de 0000 	ldr.w	r0, [lr]
 8006288:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800628c:	b29b      	uxth	r3, r3
 800628e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006292:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006296:	b292      	uxth	r2, r2
 8006298:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800629c:	45e1      	cmp	r9, ip
 800629e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80062a2:	f84e 2b04 	str.w	r2, [lr], #4
 80062a6:	d2de      	bcs.n	8006266 <quorem+0x42>
 80062a8:	9b00      	ldr	r3, [sp, #0]
 80062aa:	58eb      	ldr	r3, [r5, r3]
 80062ac:	b92b      	cbnz	r3, 80062ba <quorem+0x96>
 80062ae:	9b01      	ldr	r3, [sp, #4]
 80062b0:	3b04      	subs	r3, #4
 80062b2:	429d      	cmp	r5, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	d32f      	bcc.n	8006318 <quorem+0xf4>
 80062b8:	613c      	str	r4, [r7, #16]
 80062ba:	4638      	mov	r0, r7
 80062bc:	f001 fc60 	bl	8007b80 <__mcmp>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	db25      	blt.n	8006310 <quorem+0xec>
 80062c4:	4629      	mov	r1, r5
 80062c6:	2000      	movs	r0, #0
 80062c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80062cc:	f8d1 c000 	ldr.w	ip, [r1]
 80062d0:	fa1f fe82 	uxth.w	lr, r2
 80062d4:	fa1f f38c 	uxth.w	r3, ip
 80062d8:	eba3 030e 	sub.w	r3, r3, lr
 80062dc:	4403      	add	r3, r0
 80062de:	0c12      	lsrs	r2, r2, #16
 80062e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80062e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062ee:	45c1      	cmp	r9, r8
 80062f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80062f4:	f841 3b04 	str.w	r3, [r1], #4
 80062f8:	d2e6      	bcs.n	80062c8 <quorem+0xa4>
 80062fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006302:	b922      	cbnz	r2, 800630e <quorem+0xea>
 8006304:	3b04      	subs	r3, #4
 8006306:	429d      	cmp	r5, r3
 8006308:	461a      	mov	r2, r3
 800630a:	d30b      	bcc.n	8006324 <quorem+0x100>
 800630c:	613c      	str	r4, [r7, #16]
 800630e:	3601      	adds	r6, #1
 8006310:	4630      	mov	r0, r6
 8006312:	b003      	add	sp, #12
 8006314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006318:	6812      	ldr	r2, [r2, #0]
 800631a:	3b04      	subs	r3, #4
 800631c:	2a00      	cmp	r2, #0
 800631e:	d1cb      	bne.n	80062b8 <quorem+0x94>
 8006320:	3c01      	subs	r4, #1
 8006322:	e7c6      	b.n	80062b2 <quorem+0x8e>
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	3b04      	subs	r3, #4
 8006328:	2a00      	cmp	r2, #0
 800632a:	d1ef      	bne.n	800630c <quorem+0xe8>
 800632c:	3c01      	subs	r4, #1
 800632e:	e7ea      	b.n	8006306 <quorem+0xe2>
 8006330:	2000      	movs	r0, #0
 8006332:	e7ee      	b.n	8006312 <quorem+0xee>
 8006334:	0000      	movs	r0, r0
	...

08006338 <_dtoa_r>:
 8006338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633c:	4614      	mov	r4, r2
 800633e:	461d      	mov	r5, r3
 8006340:	69c7      	ldr	r7, [r0, #28]
 8006342:	b097      	sub	sp, #92	@ 0x5c
 8006344:	4681      	mov	r9, r0
 8006346:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800634a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800634c:	b97f      	cbnz	r7, 800636e <_dtoa_r+0x36>
 800634e:	2010      	movs	r0, #16
 8006350:	f7fd fff0 	bl	8004334 <malloc>
 8006354:	4602      	mov	r2, r0
 8006356:	f8c9 001c 	str.w	r0, [r9, #28]
 800635a:	b920      	cbnz	r0, 8006366 <_dtoa_r+0x2e>
 800635c:	21ef      	movs	r1, #239	@ 0xef
 800635e:	4bac      	ldr	r3, [pc, #688]	@ (8006610 <_dtoa_r+0x2d8>)
 8006360:	48ac      	ldr	r0, [pc, #688]	@ (8006614 <_dtoa_r+0x2dc>)
 8006362:	f002 f893 	bl	800848c <__assert_func>
 8006366:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800636a:	6007      	str	r7, [r0, #0]
 800636c:	60c7      	str	r7, [r0, #12]
 800636e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006372:	6819      	ldr	r1, [r3, #0]
 8006374:	b159      	cbz	r1, 800638e <_dtoa_r+0x56>
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	2301      	movs	r3, #1
 800637a:	4093      	lsls	r3, r2
 800637c:	604a      	str	r2, [r1, #4]
 800637e:	608b      	str	r3, [r1, #8]
 8006380:	4648      	mov	r0, r9
 8006382:	f001 f981 	bl	8007688 <_Bfree>
 8006386:	2200      	movs	r2, #0
 8006388:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	1e2b      	subs	r3, r5, #0
 8006390:	bfaf      	iteee	ge
 8006392:	2300      	movge	r3, #0
 8006394:	2201      	movlt	r2, #1
 8006396:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800639a:	9307      	strlt	r3, [sp, #28]
 800639c:	bfa8      	it	ge
 800639e:	6033      	strge	r3, [r6, #0]
 80063a0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80063a4:	4b9c      	ldr	r3, [pc, #624]	@ (8006618 <_dtoa_r+0x2e0>)
 80063a6:	bfb8      	it	lt
 80063a8:	6032      	strlt	r2, [r6, #0]
 80063aa:	ea33 0308 	bics.w	r3, r3, r8
 80063ae:	d112      	bne.n	80063d6 <_dtoa_r+0x9e>
 80063b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80063b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80063bc:	4323      	orrs	r3, r4
 80063be:	f000 855e 	beq.w	8006e7e <_dtoa_r+0xb46>
 80063c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80063c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800661c <_dtoa_r+0x2e4>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8560 	beq.w	8006e8e <_dtoa_r+0xb56>
 80063ce:	f10a 0303 	add.w	r3, sl, #3
 80063d2:	f000 bd5a 	b.w	8006e8a <_dtoa_r+0xb52>
 80063d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80063de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063e2:	2200      	movs	r2, #0
 80063e4:	2300      	movs	r3, #0
 80063e6:	f7fa fadf 	bl	80009a8 <__aeabi_dcmpeq>
 80063ea:	4607      	mov	r7, r0
 80063ec:	b158      	cbz	r0, 8006406 <_dtoa_r+0xce>
 80063ee:	2301      	movs	r3, #1
 80063f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80063f6:	b113      	cbz	r3, 80063fe <_dtoa_r+0xc6>
 80063f8:	4b89      	ldr	r3, [pc, #548]	@ (8006620 <_dtoa_r+0x2e8>)
 80063fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006624 <_dtoa_r+0x2ec>
 8006402:	f000 bd44 	b.w	8006e8e <_dtoa_r+0xb56>
 8006406:	ab14      	add	r3, sp, #80	@ 0x50
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	ab15      	add	r3, sp, #84	@ 0x54
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	4648      	mov	r0, r9
 8006410:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006414:	f001 fccc 	bl	8007db0 <__d2b>
 8006418:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800641c:	9003      	str	r0, [sp, #12]
 800641e:	2e00      	cmp	r6, #0
 8006420:	d078      	beq.n	8006514 <_dtoa_r+0x1dc>
 8006422:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006426:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006428:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800642c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006430:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006434:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006438:	9712      	str	r7, [sp, #72]	@ 0x48
 800643a:	4619      	mov	r1, r3
 800643c:	2200      	movs	r2, #0
 800643e:	4b7a      	ldr	r3, [pc, #488]	@ (8006628 <_dtoa_r+0x2f0>)
 8006440:	f7f9 fe92 	bl	8000168 <__aeabi_dsub>
 8006444:	a36c      	add	r3, pc, #432	@ (adr r3, 80065f8 <_dtoa_r+0x2c0>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f7fa f845 	bl	80004d8 <__aeabi_dmul>
 800644e:	a36c      	add	r3, pc, #432	@ (adr r3, 8006600 <_dtoa_r+0x2c8>)
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	f7f9 fe8a 	bl	800016c <__adddf3>
 8006458:	4604      	mov	r4, r0
 800645a:	4630      	mov	r0, r6
 800645c:	460d      	mov	r5, r1
 800645e:	f7f9 ffd1 	bl	8000404 <__aeabi_i2d>
 8006462:	a369      	add	r3, pc, #420	@ (adr r3, 8006608 <_dtoa_r+0x2d0>)
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	f7fa f836 	bl	80004d8 <__aeabi_dmul>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4620      	mov	r0, r4
 8006472:	4629      	mov	r1, r5
 8006474:	f7f9 fe7a 	bl	800016c <__adddf3>
 8006478:	4604      	mov	r4, r0
 800647a:	460d      	mov	r5, r1
 800647c:	f7fa fadc 	bl	8000a38 <__aeabi_d2iz>
 8006480:	2200      	movs	r2, #0
 8006482:	4607      	mov	r7, r0
 8006484:	2300      	movs	r3, #0
 8006486:	4620      	mov	r0, r4
 8006488:	4629      	mov	r1, r5
 800648a:	f7fa fa97 	bl	80009bc <__aeabi_dcmplt>
 800648e:	b140      	cbz	r0, 80064a2 <_dtoa_r+0x16a>
 8006490:	4638      	mov	r0, r7
 8006492:	f7f9 ffb7 	bl	8000404 <__aeabi_i2d>
 8006496:	4622      	mov	r2, r4
 8006498:	462b      	mov	r3, r5
 800649a:	f7fa fa85 	bl	80009a8 <__aeabi_dcmpeq>
 800649e:	b900      	cbnz	r0, 80064a2 <_dtoa_r+0x16a>
 80064a0:	3f01      	subs	r7, #1
 80064a2:	2f16      	cmp	r7, #22
 80064a4:	d854      	bhi.n	8006550 <_dtoa_r+0x218>
 80064a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064aa:	4b60      	ldr	r3, [pc, #384]	@ (800662c <_dtoa_r+0x2f4>)
 80064ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f7fa fa82 	bl	80009bc <__aeabi_dcmplt>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d04b      	beq.n	8006554 <_dtoa_r+0x21c>
 80064bc:	2300      	movs	r3, #0
 80064be:	3f01      	subs	r7, #1
 80064c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80064c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064c4:	1b9b      	subs	r3, r3, r6
 80064c6:	1e5a      	subs	r2, r3, #1
 80064c8:	bf49      	itett	mi
 80064ca:	f1c3 0301 	rsbmi	r3, r3, #1
 80064ce:	2300      	movpl	r3, #0
 80064d0:	9304      	strmi	r3, [sp, #16]
 80064d2:	2300      	movmi	r3, #0
 80064d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80064d6:	bf54      	ite	pl
 80064d8:	9304      	strpl	r3, [sp, #16]
 80064da:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80064dc:	2f00      	cmp	r7, #0
 80064de:	db3b      	blt.n	8006558 <_dtoa_r+0x220>
 80064e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e2:	970e      	str	r7, [sp, #56]	@ 0x38
 80064e4:	443b      	add	r3, r7
 80064e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80064e8:	2300      	movs	r3, #0
 80064ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80064ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064ee:	2b09      	cmp	r3, #9
 80064f0:	d865      	bhi.n	80065be <_dtoa_r+0x286>
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	bfc4      	itt	gt
 80064f6:	3b04      	subgt	r3, #4
 80064f8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80064fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064fc:	bfc8      	it	gt
 80064fe:	2400      	movgt	r4, #0
 8006500:	f1a3 0302 	sub.w	r3, r3, #2
 8006504:	bfd8      	it	le
 8006506:	2401      	movle	r4, #1
 8006508:	2b03      	cmp	r3, #3
 800650a:	d864      	bhi.n	80065d6 <_dtoa_r+0x29e>
 800650c:	e8df f003 	tbb	[pc, r3]
 8006510:	2c385553 	.word	0x2c385553
 8006514:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006518:	441e      	add	r6, r3
 800651a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800651e:	2b20      	cmp	r3, #32
 8006520:	bfc1      	itttt	gt
 8006522:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006526:	fa08 f803 	lslgt.w	r8, r8, r3
 800652a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800652e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006532:	bfd6      	itet	le
 8006534:	f1c3 0320 	rsble	r3, r3, #32
 8006538:	ea48 0003 	orrgt.w	r0, r8, r3
 800653c:	fa04 f003 	lslle.w	r0, r4, r3
 8006540:	f7f9 ff50 	bl	80003e4 <__aeabi_ui2d>
 8006544:	2201      	movs	r2, #1
 8006546:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800654a:	3e01      	subs	r6, #1
 800654c:	9212      	str	r2, [sp, #72]	@ 0x48
 800654e:	e774      	b.n	800643a <_dtoa_r+0x102>
 8006550:	2301      	movs	r3, #1
 8006552:	e7b5      	b.n	80064c0 <_dtoa_r+0x188>
 8006554:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006556:	e7b4      	b.n	80064c2 <_dtoa_r+0x18a>
 8006558:	9b04      	ldr	r3, [sp, #16]
 800655a:	1bdb      	subs	r3, r3, r7
 800655c:	9304      	str	r3, [sp, #16]
 800655e:	427b      	negs	r3, r7
 8006560:	930a      	str	r3, [sp, #40]	@ 0x28
 8006562:	2300      	movs	r3, #0
 8006564:	930e      	str	r3, [sp, #56]	@ 0x38
 8006566:	e7c1      	b.n	80064ec <_dtoa_r+0x1b4>
 8006568:	2301      	movs	r3, #1
 800656a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800656c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800656e:	eb07 0b03 	add.w	fp, r7, r3
 8006572:	f10b 0301 	add.w	r3, fp, #1
 8006576:	2b01      	cmp	r3, #1
 8006578:	9308      	str	r3, [sp, #32]
 800657a:	bfb8      	it	lt
 800657c:	2301      	movlt	r3, #1
 800657e:	e006      	b.n	800658e <_dtoa_r+0x256>
 8006580:	2301      	movs	r3, #1
 8006582:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006584:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006586:	2b00      	cmp	r3, #0
 8006588:	dd28      	ble.n	80065dc <_dtoa_r+0x2a4>
 800658a:	469b      	mov	fp, r3
 800658c:	9308      	str	r3, [sp, #32]
 800658e:	2100      	movs	r1, #0
 8006590:	2204      	movs	r2, #4
 8006592:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006596:	f102 0514 	add.w	r5, r2, #20
 800659a:	429d      	cmp	r5, r3
 800659c:	d926      	bls.n	80065ec <_dtoa_r+0x2b4>
 800659e:	6041      	str	r1, [r0, #4]
 80065a0:	4648      	mov	r0, r9
 80065a2:	f001 f831 	bl	8007608 <_Balloc>
 80065a6:	4682      	mov	sl, r0
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d143      	bne.n	8006634 <_dtoa_r+0x2fc>
 80065ac:	4602      	mov	r2, r0
 80065ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80065b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006630 <_dtoa_r+0x2f8>)
 80065b4:	e6d4      	b.n	8006360 <_dtoa_r+0x28>
 80065b6:	2300      	movs	r3, #0
 80065b8:	e7e3      	b.n	8006582 <_dtoa_r+0x24a>
 80065ba:	2300      	movs	r3, #0
 80065bc:	e7d5      	b.n	800656a <_dtoa_r+0x232>
 80065be:	2401      	movs	r4, #1
 80065c0:	2300      	movs	r3, #0
 80065c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80065c4:	9320      	str	r3, [sp, #128]	@ 0x80
 80065c6:	f04f 3bff 	mov.w	fp, #4294967295
 80065ca:	2200      	movs	r2, #0
 80065cc:	2312      	movs	r3, #18
 80065ce:	f8cd b020 	str.w	fp, [sp, #32]
 80065d2:	9221      	str	r2, [sp, #132]	@ 0x84
 80065d4:	e7db      	b.n	800658e <_dtoa_r+0x256>
 80065d6:	2301      	movs	r3, #1
 80065d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065da:	e7f4      	b.n	80065c6 <_dtoa_r+0x28e>
 80065dc:	f04f 0b01 	mov.w	fp, #1
 80065e0:	465b      	mov	r3, fp
 80065e2:	f8cd b020 	str.w	fp, [sp, #32]
 80065e6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80065ea:	e7d0      	b.n	800658e <_dtoa_r+0x256>
 80065ec:	3101      	adds	r1, #1
 80065ee:	0052      	lsls	r2, r2, #1
 80065f0:	e7d1      	b.n	8006596 <_dtoa_r+0x25e>
 80065f2:	bf00      	nop
 80065f4:	f3af 8000 	nop.w
 80065f8:	636f4361 	.word	0x636f4361
 80065fc:	3fd287a7 	.word	0x3fd287a7
 8006600:	8b60c8b3 	.word	0x8b60c8b3
 8006604:	3fc68a28 	.word	0x3fc68a28
 8006608:	509f79fb 	.word	0x509f79fb
 800660c:	3fd34413 	.word	0x3fd34413
 8006610:	08008e06 	.word	0x08008e06
 8006614:	08008e1d 	.word	0x08008e1d
 8006618:	7ff00000 	.word	0x7ff00000
 800661c:	08008e02 	.word	0x08008e02
 8006620:	08008dc9 	.word	0x08008dc9
 8006624:	08008dc8 	.word	0x08008dc8
 8006628:	3ff80000 	.word	0x3ff80000
 800662c:	08009018 	.word	0x08009018
 8006630:	08008e75 	.word	0x08008e75
 8006634:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006638:	6018      	str	r0, [r3, #0]
 800663a:	9b08      	ldr	r3, [sp, #32]
 800663c:	2b0e      	cmp	r3, #14
 800663e:	f200 80a1 	bhi.w	8006784 <_dtoa_r+0x44c>
 8006642:	2c00      	cmp	r4, #0
 8006644:	f000 809e 	beq.w	8006784 <_dtoa_r+0x44c>
 8006648:	2f00      	cmp	r7, #0
 800664a:	dd33      	ble.n	80066b4 <_dtoa_r+0x37c>
 800664c:	4b9c      	ldr	r3, [pc, #624]	@ (80068c0 <_dtoa_r+0x588>)
 800664e:	f007 020f 	and.w	r2, r7, #15
 8006652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006656:	05f8      	lsls	r0, r7, #23
 8006658:	e9d3 3400 	ldrd	r3, r4, [r3]
 800665c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006660:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006664:	d516      	bpl.n	8006694 <_dtoa_r+0x35c>
 8006666:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800666a:	4b96      	ldr	r3, [pc, #600]	@ (80068c4 <_dtoa_r+0x58c>)
 800666c:	2603      	movs	r6, #3
 800666e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006672:	f7fa f85b 	bl	800072c <__aeabi_ddiv>
 8006676:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800667a:	f004 040f 	and.w	r4, r4, #15
 800667e:	4d91      	ldr	r5, [pc, #580]	@ (80068c4 <_dtoa_r+0x58c>)
 8006680:	b954      	cbnz	r4, 8006698 <_dtoa_r+0x360>
 8006682:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800668a:	f7fa f84f 	bl	800072c <__aeabi_ddiv>
 800668e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006692:	e028      	b.n	80066e6 <_dtoa_r+0x3ae>
 8006694:	2602      	movs	r6, #2
 8006696:	e7f2      	b.n	800667e <_dtoa_r+0x346>
 8006698:	07e1      	lsls	r1, r4, #31
 800669a:	d508      	bpl.n	80066ae <_dtoa_r+0x376>
 800669c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066a4:	f7f9 ff18 	bl	80004d8 <__aeabi_dmul>
 80066a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066ac:	3601      	adds	r6, #1
 80066ae:	1064      	asrs	r4, r4, #1
 80066b0:	3508      	adds	r5, #8
 80066b2:	e7e5      	b.n	8006680 <_dtoa_r+0x348>
 80066b4:	f000 80af 	beq.w	8006816 <_dtoa_r+0x4de>
 80066b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066bc:	427c      	negs	r4, r7
 80066be:	4b80      	ldr	r3, [pc, #512]	@ (80068c0 <_dtoa_r+0x588>)
 80066c0:	f004 020f 	and.w	r2, r4, #15
 80066c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	f7f9 ff04 	bl	80004d8 <__aeabi_dmul>
 80066d0:	2602      	movs	r6, #2
 80066d2:	2300      	movs	r3, #0
 80066d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80066d8:	4d7a      	ldr	r5, [pc, #488]	@ (80068c4 <_dtoa_r+0x58c>)
 80066da:	1124      	asrs	r4, r4, #4
 80066dc:	2c00      	cmp	r4, #0
 80066de:	f040 808f 	bne.w	8006800 <_dtoa_r+0x4c8>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1d3      	bne.n	800668e <_dtoa_r+0x356>
 80066e6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80066ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 8094 	beq.w	800681a <_dtoa_r+0x4e2>
 80066f2:	2200      	movs	r2, #0
 80066f4:	4620      	mov	r0, r4
 80066f6:	4629      	mov	r1, r5
 80066f8:	4b73      	ldr	r3, [pc, #460]	@ (80068c8 <_dtoa_r+0x590>)
 80066fa:	f7fa f95f 	bl	80009bc <__aeabi_dcmplt>
 80066fe:	2800      	cmp	r0, #0
 8006700:	f000 808b 	beq.w	800681a <_dtoa_r+0x4e2>
 8006704:	9b08      	ldr	r3, [sp, #32]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 8087 	beq.w	800681a <_dtoa_r+0x4e2>
 800670c:	f1bb 0f00 	cmp.w	fp, #0
 8006710:	dd34      	ble.n	800677c <_dtoa_r+0x444>
 8006712:	4620      	mov	r0, r4
 8006714:	2200      	movs	r2, #0
 8006716:	4629      	mov	r1, r5
 8006718:	4b6c      	ldr	r3, [pc, #432]	@ (80068cc <_dtoa_r+0x594>)
 800671a:	f7f9 fedd 	bl	80004d8 <__aeabi_dmul>
 800671e:	465c      	mov	r4, fp
 8006720:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006724:	f107 38ff 	add.w	r8, r7, #4294967295
 8006728:	3601      	adds	r6, #1
 800672a:	4630      	mov	r0, r6
 800672c:	f7f9 fe6a 	bl	8000404 <__aeabi_i2d>
 8006730:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006734:	f7f9 fed0 	bl	80004d8 <__aeabi_dmul>
 8006738:	2200      	movs	r2, #0
 800673a:	4b65      	ldr	r3, [pc, #404]	@ (80068d0 <_dtoa_r+0x598>)
 800673c:	f7f9 fd16 	bl	800016c <__adddf3>
 8006740:	4605      	mov	r5, r0
 8006742:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006746:	2c00      	cmp	r4, #0
 8006748:	d16a      	bne.n	8006820 <_dtoa_r+0x4e8>
 800674a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800674e:	2200      	movs	r2, #0
 8006750:	4b60      	ldr	r3, [pc, #384]	@ (80068d4 <_dtoa_r+0x59c>)
 8006752:	f7f9 fd09 	bl	8000168 <__aeabi_dsub>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800675e:	462a      	mov	r2, r5
 8006760:	4633      	mov	r3, r6
 8006762:	f7fa f949 	bl	80009f8 <__aeabi_dcmpgt>
 8006766:	2800      	cmp	r0, #0
 8006768:	f040 8298 	bne.w	8006c9c <_dtoa_r+0x964>
 800676c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006770:	462a      	mov	r2, r5
 8006772:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006776:	f7fa f921 	bl	80009bc <__aeabi_dcmplt>
 800677a:	bb38      	cbnz	r0, 80067cc <_dtoa_r+0x494>
 800677c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006780:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006784:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006786:	2b00      	cmp	r3, #0
 8006788:	f2c0 8157 	blt.w	8006a3a <_dtoa_r+0x702>
 800678c:	2f0e      	cmp	r7, #14
 800678e:	f300 8154 	bgt.w	8006a3a <_dtoa_r+0x702>
 8006792:	4b4b      	ldr	r3, [pc, #300]	@ (80068c0 <_dtoa_r+0x588>)
 8006794:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006798:	e9d3 3400 	ldrd	r3, r4, [r3]
 800679c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f280 80e5 	bge.w	8006972 <_dtoa_r+0x63a>
 80067a8:	9b08      	ldr	r3, [sp, #32]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f300 80e1 	bgt.w	8006972 <_dtoa_r+0x63a>
 80067b0:	d10c      	bne.n	80067cc <_dtoa_r+0x494>
 80067b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067b6:	2200      	movs	r2, #0
 80067b8:	4b46      	ldr	r3, [pc, #280]	@ (80068d4 <_dtoa_r+0x59c>)
 80067ba:	f7f9 fe8d 	bl	80004d8 <__aeabi_dmul>
 80067be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067c2:	f7fa f90f 	bl	80009e4 <__aeabi_dcmpge>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f000 8266 	beq.w	8006c98 <_dtoa_r+0x960>
 80067cc:	2400      	movs	r4, #0
 80067ce:	4625      	mov	r5, r4
 80067d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067d2:	4656      	mov	r6, sl
 80067d4:	ea6f 0803 	mvn.w	r8, r3
 80067d8:	2700      	movs	r7, #0
 80067da:	4621      	mov	r1, r4
 80067dc:	4648      	mov	r0, r9
 80067de:	f000 ff53 	bl	8007688 <_Bfree>
 80067e2:	2d00      	cmp	r5, #0
 80067e4:	f000 80bd 	beq.w	8006962 <_dtoa_r+0x62a>
 80067e8:	b12f      	cbz	r7, 80067f6 <_dtoa_r+0x4be>
 80067ea:	42af      	cmp	r7, r5
 80067ec:	d003      	beq.n	80067f6 <_dtoa_r+0x4be>
 80067ee:	4639      	mov	r1, r7
 80067f0:	4648      	mov	r0, r9
 80067f2:	f000 ff49 	bl	8007688 <_Bfree>
 80067f6:	4629      	mov	r1, r5
 80067f8:	4648      	mov	r0, r9
 80067fa:	f000 ff45 	bl	8007688 <_Bfree>
 80067fe:	e0b0      	b.n	8006962 <_dtoa_r+0x62a>
 8006800:	07e2      	lsls	r2, r4, #31
 8006802:	d505      	bpl.n	8006810 <_dtoa_r+0x4d8>
 8006804:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006808:	f7f9 fe66 	bl	80004d8 <__aeabi_dmul>
 800680c:	2301      	movs	r3, #1
 800680e:	3601      	adds	r6, #1
 8006810:	1064      	asrs	r4, r4, #1
 8006812:	3508      	adds	r5, #8
 8006814:	e762      	b.n	80066dc <_dtoa_r+0x3a4>
 8006816:	2602      	movs	r6, #2
 8006818:	e765      	b.n	80066e6 <_dtoa_r+0x3ae>
 800681a:	46b8      	mov	r8, r7
 800681c:	9c08      	ldr	r4, [sp, #32]
 800681e:	e784      	b.n	800672a <_dtoa_r+0x3f2>
 8006820:	4b27      	ldr	r3, [pc, #156]	@ (80068c0 <_dtoa_r+0x588>)
 8006822:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006824:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006828:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800682c:	4454      	add	r4, sl
 800682e:	2900      	cmp	r1, #0
 8006830:	d054      	beq.n	80068dc <_dtoa_r+0x5a4>
 8006832:	2000      	movs	r0, #0
 8006834:	4928      	ldr	r1, [pc, #160]	@ (80068d8 <_dtoa_r+0x5a0>)
 8006836:	f7f9 ff79 	bl	800072c <__aeabi_ddiv>
 800683a:	4633      	mov	r3, r6
 800683c:	462a      	mov	r2, r5
 800683e:	f7f9 fc93 	bl	8000168 <__aeabi_dsub>
 8006842:	4656      	mov	r6, sl
 8006844:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800684c:	f7fa f8f4 	bl	8000a38 <__aeabi_d2iz>
 8006850:	4605      	mov	r5, r0
 8006852:	f7f9 fdd7 	bl	8000404 <__aeabi_i2d>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800685e:	f7f9 fc83 	bl	8000168 <__aeabi_dsub>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	3530      	adds	r5, #48	@ 0x30
 8006868:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800686c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006870:	f806 5b01 	strb.w	r5, [r6], #1
 8006874:	f7fa f8a2 	bl	80009bc <__aeabi_dcmplt>
 8006878:	2800      	cmp	r0, #0
 800687a:	d172      	bne.n	8006962 <_dtoa_r+0x62a>
 800687c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006880:	2000      	movs	r0, #0
 8006882:	4911      	ldr	r1, [pc, #68]	@ (80068c8 <_dtoa_r+0x590>)
 8006884:	f7f9 fc70 	bl	8000168 <__aeabi_dsub>
 8006888:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800688c:	f7fa f896 	bl	80009bc <__aeabi_dcmplt>
 8006890:	2800      	cmp	r0, #0
 8006892:	f040 80b4 	bne.w	80069fe <_dtoa_r+0x6c6>
 8006896:	42a6      	cmp	r6, r4
 8006898:	f43f af70 	beq.w	800677c <_dtoa_r+0x444>
 800689c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80068a0:	2200      	movs	r2, #0
 80068a2:	4b0a      	ldr	r3, [pc, #40]	@ (80068cc <_dtoa_r+0x594>)
 80068a4:	f7f9 fe18 	bl	80004d8 <__aeabi_dmul>
 80068a8:	2200      	movs	r2, #0
 80068aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068b2:	4b06      	ldr	r3, [pc, #24]	@ (80068cc <_dtoa_r+0x594>)
 80068b4:	f7f9 fe10 	bl	80004d8 <__aeabi_dmul>
 80068b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068bc:	e7c4      	b.n	8006848 <_dtoa_r+0x510>
 80068be:	bf00      	nop
 80068c0:	08009018 	.word	0x08009018
 80068c4:	08008ff0 	.word	0x08008ff0
 80068c8:	3ff00000 	.word	0x3ff00000
 80068cc:	40240000 	.word	0x40240000
 80068d0:	401c0000 	.word	0x401c0000
 80068d4:	40140000 	.word	0x40140000
 80068d8:	3fe00000 	.word	0x3fe00000
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	f7f9 fdfa 	bl	80004d8 <__aeabi_dmul>
 80068e4:	4656      	mov	r6, sl
 80068e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068ea:	9413      	str	r4, [sp, #76]	@ 0x4c
 80068ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068f0:	f7fa f8a2 	bl	8000a38 <__aeabi_d2iz>
 80068f4:	4605      	mov	r5, r0
 80068f6:	f7f9 fd85 	bl	8000404 <__aeabi_i2d>
 80068fa:	4602      	mov	r2, r0
 80068fc:	460b      	mov	r3, r1
 80068fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006902:	f7f9 fc31 	bl	8000168 <__aeabi_dsub>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	3530      	adds	r5, #48	@ 0x30
 800690c:	f806 5b01 	strb.w	r5, [r6], #1
 8006910:	42a6      	cmp	r6, r4
 8006912:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	d124      	bne.n	8006966 <_dtoa_r+0x62e>
 800691c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006920:	4bae      	ldr	r3, [pc, #696]	@ (8006bdc <_dtoa_r+0x8a4>)
 8006922:	f7f9 fc23 	bl	800016c <__adddf3>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800692e:	f7fa f863 	bl	80009f8 <__aeabi_dcmpgt>
 8006932:	2800      	cmp	r0, #0
 8006934:	d163      	bne.n	80069fe <_dtoa_r+0x6c6>
 8006936:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800693a:	2000      	movs	r0, #0
 800693c:	49a7      	ldr	r1, [pc, #668]	@ (8006bdc <_dtoa_r+0x8a4>)
 800693e:	f7f9 fc13 	bl	8000168 <__aeabi_dsub>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800694a:	f7fa f837 	bl	80009bc <__aeabi_dcmplt>
 800694e:	2800      	cmp	r0, #0
 8006950:	f43f af14 	beq.w	800677c <_dtoa_r+0x444>
 8006954:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006956:	1e73      	subs	r3, r6, #1
 8006958:	9313      	str	r3, [sp, #76]	@ 0x4c
 800695a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800695e:	2b30      	cmp	r3, #48	@ 0x30
 8006960:	d0f8      	beq.n	8006954 <_dtoa_r+0x61c>
 8006962:	4647      	mov	r7, r8
 8006964:	e03b      	b.n	80069de <_dtoa_r+0x6a6>
 8006966:	4b9e      	ldr	r3, [pc, #632]	@ (8006be0 <_dtoa_r+0x8a8>)
 8006968:	f7f9 fdb6 	bl	80004d8 <__aeabi_dmul>
 800696c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006970:	e7bc      	b.n	80068ec <_dtoa_r+0x5b4>
 8006972:	4656      	mov	r6, sl
 8006974:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7f9 fed4 	bl	800072c <__aeabi_ddiv>
 8006984:	f7fa f858 	bl	8000a38 <__aeabi_d2iz>
 8006988:	4680      	mov	r8, r0
 800698a:	f7f9 fd3b 	bl	8000404 <__aeabi_i2d>
 800698e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006992:	f7f9 fda1 	bl	80004d8 <__aeabi_dmul>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4620      	mov	r0, r4
 800699c:	4629      	mov	r1, r5
 800699e:	f7f9 fbe3 	bl	8000168 <__aeabi_dsub>
 80069a2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80069a6:	9d08      	ldr	r5, [sp, #32]
 80069a8:	f806 4b01 	strb.w	r4, [r6], #1
 80069ac:	eba6 040a 	sub.w	r4, r6, sl
 80069b0:	42a5      	cmp	r5, r4
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	d133      	bne.n	8006a20 <_dtoa_r+0x6e8>
 80069b8:	f7f9 fbd8 	bl	800016c <__adddf3>
 80069bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069c0:	4604      	mov	r4, r0
 80069c2:	460d      	mov	r5, r1
 80069c4:	f7fa f818 	bl	80009f8 <__aeabi_dcmpgt>
 80069c8:	b9c0      	cbnz	r0, 80069fc <_dtoa_r+0x6c4>
 80069ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ce:	4620      	mov	r0, r4
 80069d0:	4629      	mov	r1, r5
 80069d2:	f7f9 ffe9 	bl	80009a8 <__aeabi_dcmpeq>
 80069d6:	b110      	cbz	r0, 80069de <_dtoa_r+0x6a6>
 80069d8:	f018 0f01 	tst.w	r8, #1
 80069dc:	d10e      	bne.n	80069fc <_dtoa_r+0x6c4>
 80069de:	4648      	mov	r0, r9
 80069e0:	9903      	ldr	r1, [sp, #12]
 80069e2:	f000 fe51 	bl	8007688 <_Bfree>
 80069e6:	2300      	movs	r3, #0
 80069e8:	7033      	strb	r3, [r6, #0]
 80069ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80069ec:	3701      	adds	r7, #1
 80069ee:	601f      	str	r7, [r3, #0]
 80069f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 824b 	beq.w	8006e8e <_dtoa_r+0xb56>
 80069f8:	601e      	str	r6, [r3, #0]
 80069fa:	e248      	b.n	8006e8e <_dtoa_r+0xb56>
 80069fc:	46b8      	mov	r8, r7
 80069fe:	4633      	mov	r3, r6
 8006a00:	461e      	mov	r6, r3
 8006a02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a06:	2a39      	cmp	r2, #57	@ 0x39
 8006a08:	d106      	bne.n	8006a18 <_dtoa_r+0x6e0>
 8006a0a:	459a      	cmp	sl, r3
 8006a0c:	d1f8      	bne.n	8006a00 <_dtoa_r+0x6c8>
 8006a0e:	2230      	movs	r2, #48	@ 0x30
 8006a10:	f108 0801 	add.w	r8, r8, #1
 8006a14:	f88a 2000 	strb.w	r2, [sl]
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	3201      	adds	r2, #1
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	e7a0      	b.n	8006962 <_dtoa_r+0x62a>
 8006a20:	2200      	movs	r2, #0
 8006a22:	4b6f      	ldr	r3, [pc, #444]	@ (8006be0 <_dtoa_r+0x8a8>)
 8006a24:	f7f9 fd58 	bl	80004d8 <__aeabi_dmul>
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	460d      	mov	r5, r1
 8006a30:	f7f9 ffba 	bl	80009a8 <__aeabi_dcmpeq>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d09f      	beq.n	8006978 <_dtoa_r+0x640>
 8006a38:	e7d1      	b.n	80069de <_dtoa_r+0x6a6>
 8006a3a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006a3c:	2a00      	cmp	r2, #0
 8006a3e:	f000 80ea 	beq.w	8006c16 <_dtoa_r+0x8de>
 8006a42:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006a44:	2a01      	cmp	r2, #1
 8006a46:	f300 80cd 	bgt.w	8006be4 <_dtoa_r+0x8ac>
 8006a4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a4c:	2a00      	cmp	r2, #0
 8006a4e:	f000 80c1 	beq.w	8006bd4 <_dtoa_r+0x89c>
 8006a52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006a56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a58:	9e04      	ldr	r6, [sp, #16]
 8006a5a:	9a04      	ldr	r2, [sp, #16]
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	441a      	add	r2, r3
 8006a60:	9204      	str	r2, [sp, #16]
 8006a62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a64:	4648      	mov	r0, r9
 8006a66:	441a      	add	r2, r3
 8006a68:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a6a:	f000 ff0b 	bl	8007884 <__i2b>
 8006a6e:	4605      	mov	r5, r0
 8006a70:	b166      	cbz	r6, 8006a8c <_dtoa_r+0x754>
 8006a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dd09      	ble.n	8006a8c <_dtoa_r+0x754>
 8006a78:	42b3      	cmp	r3, r6
 8006a7a:	bfa8      	it	ge
 8006a7c:	4633      	movge	r3, r6
 8006a7e:	9a04      	ldr	r2, [sp, #16]
 8006a80:	1af6      	subs	r6, r6, r3
 8006a82:	1ad2      	subs	r2, r2, r3
 8006a84:	9204      	str	r2, [sp, #16]
 8006a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a8e:	b30b      	cbz	r3, 8006ad4 <_dtoa_r+0x79c>
 8006a90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 80c6 	beq.w	8006c24 <_dtoa_r+0x8ec>
 8006a98:	2c00      	cmp	r4, #0
 8006a9a:	f000 80c0 	beq.w	8006c1e <_dtoa_r+0x8e6>
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	4622      	mov	r2, r4
 8006aa2:	4648      	mov	r0, r9
 8006aa4:	f000 ffa6 	bl	80079f4 <__pow5mult>
 8006aa8:	9a03      	ldr	r2, [sp, #12]
 8006aaa:	4601      	mov	r1, r0
 8006aac:	4605      	mov	r5, r0
 8006aae:	4648      	mov	r0, r9
 8006ab0:	f000 fefe 	bl	80078b0 <__multiply>
 8006ab4:	9903      	ldr	r1, [sp, #12]
 8006ab6:	4680      	mov	r8, r0
 8006ab8:	4648      	mov	r0, r9
 8006aba:	f000 fde5 	bl	8007688 <_Bfree>
 8006abe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ac0:	1b1b      	subs	r3, r3, r4
 8006ac2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ac4:	f000 80b1 	beq.w	8006c2a <_dtoa_r+0x8f2>
 8006ac8:	4641      	mov	r1, r8
 8006aca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006acc:	4648      	mov	r0, r9
 8006ace:	f000 ff91 	bl	80079f4 <__pow5mult>
 8006ad2:	9003      	str	r0, [sp, #12]
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	4648      	mov	r0, r9
 8006ad8:	f000 fed4 	bl	8007884 <__i2b>
 8006adc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ade:	4604      	mov	r4, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 81d8 	beq.w	8006e96 <_dtoa_r+0xb5e>
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4601      	mov	r1, r0
 8006aea:	4648      	mov	r0, r9
 8006aec:	f000 ff82 	bl	80079f4 <__pow5mult>
 8006af0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006af2:	4604      	mov	r4, r0
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	f300 809f 	bgt.w	8006c38 <_dtoa_r+0x900>
 8006afa:	9b06      	ldr	r3, [sp, #24]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f040 8097 	bne.w	8006c30 <_dtoa_r+0x8f8>
 8006b02:	9b07      	ldr	r3, [sp, #28]
 8006b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f040 8093 	bne.w	8006c34 <_dtoa_r+0x8fc>
 8006b0e:	9b07      	ldr	r3, [sp, #28]
 8006b10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b14:	0d1b      	lsrs	r3, r3, #20
 8006b16:	051b      	lsls	r3, r3, #20
 8006b18:	b133      	cbz	r3, 8006b28 <_dtoa_r+0x7f0>
 8006b1a:	9b04      	ldr	r3, [sp, #16]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	9304      	str	r3, [sp, #16]
 8006b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b22:	3301      	adds	r3, #1
 8006b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b26:	2301      	movs	r3, #1
 8006b28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 81b8 	beq.w	8006ea2 <_dtoa_r+0xb6a>
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b38:	6918      	ldr	r0, [r3, #16]
 8006b3a:	f000 fe57 	bl	80077ec <__hi0bits>
 8006b3e:	f1c0 0020 	rsb	r0, r0, #32
 8006b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b44:	4418      	add	r0, r3
 8006b46:	f010 001f 	ands.w	r0, r0, #31
 8006b4a:	f000 8082 	beq.w	8006c52 <_dtoa_r+0x91a>
 8006b4e:	f1c0 0320 	rsb	r3, r0, #32
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	dd73      	ble.n	8006c3e <_dtoa_r+0x906>
 8006b56:	9b04      	ldr	r3, [sp, #16]
 8006b58:	f1c0 001c 	rsb	r0, r0, #28
 8006b5c:	4403      	add	r3, r0
 8006b5e:	9304      	str	r3, [sp, #16]
 8006b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b62:	4406      	add	r6, r0
 8006b64:	4403      	add	r3, r0
 8006b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b68:	9b04      	ldr	r3, [sp, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	dd05      	ble.n	8006b7a <_dtoa_r+0x842>
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4648      	mov	r0, r9
 8006b72:	9903      	ldr	r1, [sp, #12]
 8006b74:	f000 ff98 	bl	8007aa8 <__lshift>
 8006b78:	9003      	str	r0, [sp, #12]
 8006b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	dd05      	ble.n	8006b8c <_dtoa_r+0x854>
 8006b80:	4621      	mov	r1, r4
 8006b82:	461a      	mov	r2, r3
 8006b84:	4648      	mov	r0, r9
 8006b86:	f000 ff8f 	bl	8007aa8 <__lshift>
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d061      	beq.n	8006c56 <_dtoa_r+0x91e>
 8006b92:	4621      	mov	r1, r4
 8006b94:	9803      	ldr	r0, [sp, #12]
 8006b96:	f000 fff3 	bl	8007b80 <__mcmp>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	da5b      	bge.n	8006c56 <_dtoa_r+0x91e>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	220a      	movs	r2, #10
 8006ba2:	4648      	mov	r0, r9
 8006ba4:	9903      	ldr	r1, [sp, #12]
 8006ba6:	f000 fd91 	bl	80076cc <__multadd>
 8006baa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bac:	f107 38ff 	add.w	r8, r7, #4294967295
 8006bb0:	9003      	str	r0, [sp, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 8177 	beq.w	8006ea6 <_dtoa_r+0xb6e>
 8006bb8:	4629      	mov	r1, r5
 8006bba:	2300      	movs	r3, #0
 8006bbc:	220a      	movs	r2, #10
 8006bbe:	4648      	mov	r0, r9
 8006bc0:	f000 fd84 	bl	80076cc <__multadd>
 8006bc4:	f1bb 0f00 	cmp.w	fp, #0
 8006bc8:	4605      	mov	r5, r0
 8006bca:	dc6f      	bgt.n	8006cac <_dtoa_r+0x974>
 8006bcc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	dc49      	bgt.n	8006c66 <_dtoa_r+0x92e>
 8006bd2:	e06b      	b.n	8006cac <_dtoa_r+0x974>
 8006bd4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006bd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006bda:	e73c      	b.n	8006a56 <_dtoa_r+0x71e>
 8006bdc:	3fe00000 	.word	0x3fe00000
 8006be0:	40240000 	.word	0x40240000
 8006be4:	9b08      	ldr	r3, [sp, #32]
 8006be6:	1e5c      	subs	r4, r3, #1
 8006be8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bea:	42a3      	cmp	r3, r4
 8006bec:	db09      	blt.n	8006c02 <_dtoa_r+0x8ca>
 8006bee:	1b1c      	subs	r4, r3, r4
 8006bf0:	9b08      	ldr	r3, [sp, #32]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f6bf af30 	bge.w	8006a58 <_dtoa_r+0x720>
 8006bf8:	9b04      	ldr	r3, [sp, #16]
 8006bfa:	9a08      	ldr	r2, [sp, #32]
 8006bfc:	1a9e      	subs	r6, r3, r2
 8006bfe:	2300      	movs	r3, #0
 8006c00:	e72b      	b.n	8006a5a <_dtoa_r+0x722>
 8006c02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c06:	1ae3      	subs	r3, r4, r3
 8006c08:	441a      	add	r2, r3
 8006c0a:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c0c:	9e04      	ldr	r6, [sp, #16]
 8006c0e:	2400      	movs	r4, #0
 8006c10:	9b08      	ldr	r3, [sp, #32]
 8006c12:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c14:	e721      	b.n	8006a5a <_dtoa_r+0x722>
 8006c16:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c18:	9e04      	ldr	r6, [sp, #16]
 8006c1a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006c1c:	e728      	b.n	8006a70 <_dtoa_r+0x738>
 8006c1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c22:	e751      	b.n	8006ac8 <_dtoa_r+0x790>
 8006c24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c26:	9903      	ldr	r1, [sp, #12]
 8006c28:	e750      	b.n	8006acc <_dtoa_r+0x794>
 8006c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c2e:	e751      	b.n	8006ad4 <_dtoa_r+0x79c>
 8006c30:	2300      	movs	r3, #0
 8006c32:	e779      	b.n	8006b28 <_dtoa_r+0x7f0>
 8006c34:	9b06      	ldr	r3, [sp, #24]
 8006c36:	e777      	b.n	8006b28 <_dtoa_r+0x7f0>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c3c:	e779      	b.n	8006b32 <_dtoa_r+0x7fa>
 8006c3e:	d093      	beq.n	8006b68 <_dtoa_r+0x830>
 8006c40:	9a04      	ldr	r2, [sp, #16]
 8006c42:	331c      	adds	r3, #28
 8006c44:	441a      	add	r2, r3
 8006c46:	9204      	str	r2, [sp, #16]
 8006c48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c4a:	441e      	add	r6, r3
 8006c4c:	441a      	add	r2, r3
 8006c4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c50:	e78a      	b.n	8006b68 <_dtoa_r+0x830>
 8006c52:	4603      	mov	r3, r0
 8006c54:	e7f4      	b.n	8006c40 <_dtoa_r+0x908>
 8006c56:	9b08      	ldr	r3, [sp, #32]
 8006c58:	46b8      	mov	r8, r7
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	dc20      	bgt.n	8006ca0 <_dtoa_r+0x968>
 8006c5e:	469b      	mov	fp, r3
 8006c60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	dd1e      	ble.n	8006ca4 <_dtoa_r+0x96c>
 8006c66:	f1bb 0f00 	cmp.w	fp, #0
 8006c6a:	f47f adb1 	bne.w	80067d0 <_dtoa_r+0x498>
 8006c6e:	4621      	mov	r1, r4
 8006c70:	465b      	mov	r3, fp
 8006c72:	2205      	movs	r2, #5
 8006c74:	4648      	mov	r0, r9
 8006c76:	f000 fd29 	bl	80076cc <__multadd>
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	9803      	ldr	r0, [sp, #12]
 8006c80:	f000 ff7e 	bl	8007b80 <__mcmp>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	f77f ada3 	ble.w	80067d0 <_dtoa_r+0x498>
 8006c8a:	4656      	mov	r6, sl
 8006c8c:	2331      	movs	r3, #49	@ 0x31
 8006c8e:	f108 0801 	add.w	r8, r8, #1
 8006c92:	f806 3b01 	strb.w	r3, [r6], #1
 8006c96:	e59f      	b.n	80067d8 <_dtoa_r+0x4a0>
 8006c98:	46b8      	mov	r8, r7
 8006c9a:	9c08      	ldr	r4, [sp, #32]
 8006c9c:	4625      	mov	r5, r4
 8006c9e:	e7f4      	b.n	8006c8a <_dtoa_r+0x952>
 8006ca0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006ca4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 8101 	beq.w	8006eae <_dtoa_r+0xb76>
 8006cac:	2e00      	cmp	r6, #0
 8006cae:	dd05      	ble.n	8006cbc <_dtoa_r+0x984>
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	4632      	mov	r2, r6
 8006cb4:	4648      	mov	r0, r9
 8006cb6:	f000 fef7 	bl	8007aa8 <__lshift>
 8006cba:	4605      	mov	r5, r0
 8006cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d05c      	beq.n	8006d7c <_dtoa_r+0xa44>
 8006cc2:	4648      	mov	r0, r9
 8006cc4:	6869      	ldr	r1, [r5, #4]
 8006cc6:	f000 fc9f 	bl	8007608 <_Balloc>
 8006cca:	4606      	mov	r6, r0
 8006ccc:	b928      	cbnz	r0, 8006cda <_dtoa_r+0x9a2>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006cd4:	4b80      	ldr	r3, [pc, #512]	@ (8006ed8 <_dtoa_r+0xba0>)
 8006cd6:	f7ff bb43 	b.w	8006360 <_dtoa_r+0x28>
 8006cda:	692a      	ldr	r2, [r5, #16]
 8006cdc:	f105 010c 	add.w	r1, r5, #12
 8006ce0:	3202      	adds	r2, #2
 8006ce2:	0092      	lsls	r2, r2, #2
 8006ce4:	300c      	adds	r0, #12
 8006ce6:	f7ff fa84 	bl	80061f2 <memcpy>
 8006cea:	2201      	movs	r2, #1
 8006cec:	4631      	mov	r1, r6
 8006cee:	4648      	mov	r0, r9
 8006cf0:	f000 feda 	bl	8007aa8 <__lshift>
 8006cf4:	462f      	mov	r7, r5
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	f10a 0301 	add.w	r3, sl, #1
 8006cfc:	9304      	str	r3, [sp, #16]
 8006cfe:	eb0a 030b 	add.w	r3, sl, fp
 8006d02:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d04:	9b06      	ldr	r3, [sp, #24]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d0c:	9b04      	ldr	r3, [sp, #16]
 8006d0e:	4621      	mov	r1, r4
 8006d10:	9803      	ldr	r0, [sp, #12]
 8006d12:	f103 3bff 	add.w	fp, r3, #4294967295
 8006d16:	f7ff fa85 	bl	8006224 <quorem>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	4639      	mov	r1, r7
 8006d1e:	3330      	adds	r3, #48	@ 0x30
 8006d20:	9006      	str	r0, [sp, #24]
 8006d22:	9803      	ldr	r0, [sp, #12]
 8006d24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d26:	f000 ff2b 	bl	8007b80 <__mcmp>
 8006d2a:	462a      	mov	r2, r5
 8006d2c:	9008      	str	r0, [sp, #32]
 8006d2e:	4621      	mov	r1, r4
 8006d30:	4648      	mov	r0, r9
 8006d32:	f000 ff41 	bl	8007bb8 <__mdiff>
 8006d36:	68c2      	ldr	r2, [r0, #12]
 8006d38:	4606      	mov	r6, r0
 8006d3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d3c:	bb02      	cbnz	r2, 8006d80 <_dtoa_r+0xa48>
 8006d3e:	4601      	mov	r1, r0
 8006d40:	9803      	ldr	r0, [sp, #12]
 8006d42:	f000 ff1d 	bl	8007b80 <__mcmp>
 8006d46:	4602      	mov	r2, r0
 8006d48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4648      	mov	r0, r9
 8006d4e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006d52:	f000 fc99 	bl	8007688 <_Bfree>
 8006d56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d58:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006d5a:	9e04      	ldr	r6, [sp, #16]
 8006d5c:	ea42 0103 	orr.w	r1, r2, r3
 8006d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d62:	4319      	orrs	r1, r3
 8006d64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d66:	d10d      	bne.n	8006d84 <_dtoa_r+0xa4c>
 8006d68:	2b39      	cmp	r3, #57	@ 0x39
 8006d6a:	d027      	beq.n	8006dbc <_dtoa_r+0xa84>
 8006d6c:	9a08      	ldr	r2, [sp, #32]
 8006d6e:	2a00      	cmp	r2, #0
 8006d70:	dd01      	ble.n	8006d76 <_dtoa_r+0xa3e>
 8006d72:	9b06      	ldr	r3, [sp, #24]
 8006d74:	3331      	adds	r3, #49	@ 0x31
 8006d76:	f88b 3000 	strb.w	r3, [fp]
 8006d7a:	e52e      	b.n	80067da <_dtoa_r+0x4a2>
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	e7b9      	b.n	8006cf4 <_dtoa_r+0x9bc>
 8006d80:	2201      	movs	r2, #1
 8006d82:	e7e2      	b.n	8006d4a <_dtoa_r+0xa12>
 8006d84:	9908      	ldr	r1, [sp, #32]
 8006d86:	2900      	cmp	r1, #0
 8006d88:	db04      	blt.n	8006d94 <_dtoa_r+0xa5c>
 8006d8a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006d8c:	4301      	orrs	r1, r0
 8006d8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d90:	4301      	orrs	r1, r0
 8006d92:	d120      	bne.n	8006dd6 <_dtoa_r+0xa9e>
 8006d94:	2a00      	cmp	r2, #0
 8006d96:	ddee      	ble.n	8006d76 <_dtoa_r+0xa3e>
 8006d98:	2201      	movs	r2, #1
 8006d9a:	9903      	ldr	r1, [sp, #12]
 8006d9c:	4648      	mov	r0, r9
 8006d9e:	9304      	str	r3, [sp, #16]
 8006da0:	f000 fe82 	bl	8007aa8 <__lshift>
 8006da4:	4621      	mov	r1, r4
 8006da6:	9003      	str	r0, [sp, #12]
 8006da8:	f000 feea 	bl	8007b80 <__mcmp>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	9b04      	ldr	r3, [sp, #16]
 8006db0:	dc02      	bgt.n	8006db8 <_dtoa_r+0xa80>
 8006db2:	d1e0      	bne.n	8006d76 <_dtoa_r+0xa3e>
 8006db4:	07da      	lsls	r2, r3, #31
 8006db6:	d5de      	bpl.n	8006d76 <_dtoa_r+0xa3e>
 8006db8:	2b39      	cmp	r3, #57	@ 0x39
 8006dba:	d1da      	bne.n	8006d72 <_dtoa_r+0xa3a>
 8006dbc:	2339      	movs	r3, #57	@ 0x39
 8006dbe:	f88b 3000 	strb.w	r3, [fp]
 8006dc2:	4633      	mov	r3, r6
 8006dc4:	461e      	mov	r6, r3
 8006dc6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	2a39      	cmp	r2, #57	@ 0x39
 8006dce:	d04e      	beq.n	8006e6e <_dtoa_r+0xb36>
 8006dd0:	3201      	adds	r2, #1
 8006dd2:	701a      	strb	r2, [r3, #0]
 8006dd4:	e501      	b.n	80067da <_dtoa_r+0x4a2>
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	dd03      	ble.n	8006de2 <_dtoa_r+0xaaa>
 8006dda:	2b39      	cmp	r3, #57	@ 0x39
 8006ddc:	d0ee      	beq.n	8006dbc <_dtoa_r+0xa84>
 8006dde:	3301      	adds	r3, #1
 8006de0:	e7c9      	b.n	8006d76 <_dtoa_r+0xa3e>
 8006de2:	9a04      	ldr	r2, [sp, #16]
 8006de4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006de6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006dea:	428a      	cmp	r2, r1
 8006dec:	d028      	beq.n	8006e40 <_dtoa_r+0xb08>
 8006dee:	2300      	movs	r3, #0
 8006df0:	220a      	movs	r2, #10
 8006df2:	9903      	ldr	r1, [sp, #12]
 8006df4:	4648      	mov	r0, r9
 8006df6:	f000 fc69 	bl	80076cc <__multadd>
 8006dfa:	42af      	cmp	r7, r5
 8006dfc:	9003      	str	r0, [sp, #12]
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	f04f 020a 	mov.w	r2, #10
 8006e06:	4639      	mov	r1, r7
 8006e08:	4648      	mov	r0, r9
 8006e0a:	d107      	bne.n	8006e1c <_dtoa_r+0xae4>
 8006e0c:	f000 fc5e 	bl	80076cc <__multadd>
 8006e10:	4607      	mov	r7, r0
 8006e12:	4605      	mov	r5, r0
 8006e14:	9b04      	ldr	r3, [sp, #16]
 8006e16:	3301      	adds	r3, #1
 8006e18:	9304      	str	r3, [sp, #16]
 8006e1a:	e777      	b.n	8006d0c <_dtoa_r+0x9d4>
 8006e1c:	f000 fc56 	bl	80076cc <__multadd>
 8006e20:	4629      	mov	r1, r5
 8006e22:	4607      	mov	r7, r0
 8006e24:	2300      	movs	r3, #0
 8006e26:	220a      	movs	r2, #10
 8006e28:	4648      	mov	r0, r9
 8006e2a:	f000 fc4f 	bl	80076cc <__multadd>
 8006e2e:	4605      	mov	r5, r0
 8006e30:	e7f0      	b.n	8006e14 <_dtoa_r+0xadc>
 8006e32:	f1bb 0f00 	cmp.w	fp, #0
 8006e36:	bfcc      	ite	gt
 8006e38:	465e      	movgt	r6, fp
 8006e3a:	2601      	movle	r6, #1
 8006e3c:	2700      	movs	r7, #0
 8006e3e:	4456      	add	r6, sl
 8006e40:	2201      	movs	r2, #1
 8006e42:	9903      	ldr	r1, [sp, #12]
 8006e44:	4648      	mov	r0, r9
 8006e46:	9304      	str	r3, [sp, #16]
 8006e48:	f000 fe2e 	bl	8007aa8 <__lshift>
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	9003      	str	r0, [sp, #12]
 8006e50:	f000 fe96 	bl	8007b80 <__mcmp>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	dcb4      	bgt.n	8006dc2 <_dtoa_r+0xa8a>
 8006e58:	d102      	bne.n	8006e60 <_dtoa_r+0xb28>
 8006e5a:	9b04      	ldr	r3, [sp, #16]
 8006e5c:	07db      	lsls	r3, r3, #31
 8006e5e:	d4b0      	bmi.n	8006dc2 <_dtoa_r+0xa8a>
 8006e60:	4633      	mov	r3, r6
 8006e62:	461e      	mov	r6, r3
 8006e64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e68:	2a30      	cmp	r2, #48	@ 0x30
 8006e6a:	d0fa      	beq.n	8006e62 <_dtoa_r+0xb2a>
 8006e6c:	e4b5      	b.n	80067da <_dtoa_r+0x4a2>
 8006e6e:	459a      	cmp	sl, r3
 8006e70:	d1a8      	bne.n	8006dc4 <_dtoa_r+0xa8c>
 8006e72:	2331      	movs	r3, #49	@ 0x31
 8006e74:	f108 0801 	add.w	r8, r8, #1
 8006e78:	f88a 3000 	strb.w	r3, [sl]
 8006e7c:	e4ad      	b.n	80067da <_dtoa_r+0x4a2>
 8006e7e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006e80:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006edc <_dtoa_r+0xba4>
 8006e84:	b11b      	cbz	r3, 8006e8e <_dtoa_r+0xb56>
 8006e86:	f10a 0308 	add.w	r3, sl, #8
 8006e8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	4650      	mov	r0, sl
 8006e90:	b017      	add	sp, #92	@ 0x5c
 8006e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	f77f ae2e 	ble.w	8006afa <_dtoa_r+0x7c2>
 8006e9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ea0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	e64d      	b.n	8006b42 <_dtoa_r+0x80a>
 8006ea6:	f1bb 0f00 	cmp.w	fp, #0
 8006eaa:	f77f aed9 	ble.w	8006c60 <_dtoa_r+0x928>
 8006eae:	4656      	mov	r6, sl
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	9803      	ldr	r0, [sp, #12]
 8006eb4:	f7ff f9b6 	bl	8006224 <quorem>
 8006eb8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006ebc:	f806 3b01 	strb.w	r3, [r6], #1
 8006ec0:	eba6 020a 	sub.w	r2, r6, sl
 8006ec4:	4593      	cmp	fp, r2
 8006ec6:	ddb4      	ble.n	8006e32 <_dtoa_r+0xafa>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	220a      	movs	r2, #10
 8006ecc:	4648      	mov	r0, r9
 8006ece:	9903      	ldr	r1, [sp, #12]
 8006ed0:	f000 fbfc 	bl	80076cc <__multadd>
 8006ed4:	9003      	str	r0, [sp, #12]
 8006ed6:	e7eb      	b.n	8006eb0 <_dtoa_r+0xb78>
 8006ed8:	08008e75 	.word	0x08008e75
 8006edc:	08008df9 	.word	0x08008df9

08006ee0 <_free_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4605      	mov	r5, r0
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	d040      	beq.n	8006f6a <_free_r+0x8a>
 8006ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eec:	1f0c      	subs	r4, r1, #4
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	bfb8      	it	lt
 8006ef2:	18e4      	addlt	r4, r4, r3
 8006ef4:	f7fd fac8 	bl	8004488 <__malloc_lock>
 8006ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8006f6c <_free_r+0x8c>)
 8006efa:	6813      	ldr	r3, [r2, #0]
 8006efc:	b933      	cbnz	r3, 8006f0c <_free_r+0x2c>
 8006efe:	6063      	str	r3, [r4, #4]
 8006f00:	6014      	str	r4, [r2, #0]
 8006f02:	4628      	mov	r0, r5
 8006f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f08:	f7fd bac4 	b.w	8004494 <__malloc_unlock>
 8006f0c:	42a3      	cmp	r3, r4
 8006f0e:	d908      	bls.n	8006f22 <_free_r+0x42>
 8006f10:	6820      	ldr	r0, [r4, #0]
 8006f12:	1821      	adds	r1, r4, r0
 8006f14:	428b      	cmp	r3, r1
 8006f16:	bf01      	itttt	eq
 8006f18:	6819      	ldreq	r1, [r3, #0]
 8006f1a:	685b      	ldreq	r3, [r3, #4]
 8006f1c:	1809      	addeq	r1, r1, r0
 8006f1e:	6021      	streq	r1, [r4, #0]
 8006f20:	e7ed      	b.n	8006efe <_free_r+0x1e>
 8006f22:	461a      	mov	r2, r3
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	b10b      	cbz	r3, 8006f2c <_free_r+0x4c>
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	d9fa      	bls.n	8006f22 <_free_r+0x42>
 8006f2c:	6811      	ldr	r1, [r2, #0]
 8006f2e:	1850      	adds	r0, r2, r1
 8006f30:	42a0      	cmp	r0, r4
 8006f32:	d10b      	bne.n	8006f4c <_free_r+0x6c>
 8006f34:	6820      	ldr	r0, [r4, #0]
 8006f36:	4401      	add	r1, r0
 8006f38:	1850      	adds	r0, r2, r1
 8006f3a:	4283      	cmp	r3, r0
 8006f3c:	6011      	str	r1, [r2, #0]
 8006f3e:	d1e0      	bne.n	8006f02 <_free_r+0x22>
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	4408      	add	r0, r1
 8006f46:	6010      	str	r0, [r2, #0]
 8006f48:	6053      	str	r3, [r2, #4]
 8006f4a:	e7da      	b.n	8006f02 <_free_r+0x22>
 8006f4c:	d902      	bls.n	8006f54 <_free_r+0x74>
 8006f4e:	230c      	movs	r3, #12
 8006f50:	602b      	str	r3, [r5, #0]
 8006f52:	e7d6      	b.n	8006f02 <_free_r+0x22>
 8006f54:	6820      	ldr	r0, [r4, #0]
 8006f56:	1821      	adds	r1, r4, r0
 8006f58:	428b      	cmp	r3, r1
 8006f5a:	bf01      	itttt	eq
 8006f5c:	6819      	ldreq	r1, [r3, #0]
 8006f5e:	685b      	ldreq	r3, [r3, #4]
 8006f60:	1809      	addeq	r1, r1, r0
 8006f62:	6021      	streq	r1, [r4, #0]
 8006f64:	6063      	str	r3, [r4, #4]
 8006f66:	6054      	str	r4, [r2, #4]
 8006f68:	e7cb      	b.n	8006f02 <_free_r+0x22>
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	2000041c 	.word	0x2000041c

08006f70 <rshift>:
 8006f70:	6903      	ldr	r3, [r0, #16]
 8006f72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006f7a:	f100 0414 	add.w	r4, r0, #20
 8006f7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006f82:	dd46      	ble.n	8007012 <rshift+0xa2>
 8006f84:	f011 011f 	ands.w	r1, r1, #31
 8006f88:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006f8c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006f90:	d10c      	bne.n	8006fac <rshift+0x3c>
 8006f92:	4629      	mov	r1, r5
 8006f94:	f100 0710 	add.w	r7, r0, #16
 8006f98:	42b1      	cmp	r1, r6
 8006f9a:	d335      	bcc.n	8007008 <rshift+0x98>
 8006f9c:	1a9b      	subs	r3, r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	1eea      	subs	r2, r5, #3
 8006fa2:	4296      	cmp	r6, r2
 8006fa4:	bf38      	it	cc
 8006fa6:	2300      	movcc	r3, #0
 8006fa8:	4423      	add	r3, r4
 8006faa:	e015      	b.n	8006fd8 <rshift+0x68>
 8006fac:	46a1      	mov	r9, r4
 8006fae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006fb2:	f1c1 0820 	rsb	r8, r1, #32
 8006fb6:	40cf      	lsrs	r7, r1
 8006fb8:	f105 0e04 	add.w	lr, r5, #4
 8006fbc:	4576      	cmp	r6, lr
 8006fbe:	46f4      	mov	ip, lr
 8006fc0:	d816      	bhi.n	8006ff0 <rshift+0x80>
 8006fc2:	1a9a      	subs	r2, r3, r2
 8006fc4:	0092      	lsls	r2, r2, #2
 8006fc6:	3a04      	subs	r2, #4
 8006fc8:	3501      	adds	r5, #1
 8006fca:	42ae      	cmp	r6, r5
 8006fcc:	bf38      	it	cc
 8006fce:	2200      	movcc	r2, #0
 8006fd0:	18a3      	adds	r3, r4, r2
 8006fd2:	50a7      	str	r7, [r4, r2]
 8006fd4:	b107      	cbz	r7, 8006fd8 <rshift+0x68>
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	42a3      	cmp	r3, r4
 8006fda:	eba3 0204 	sub.w	r2, r3, r4
 8006fde:	bf08      	it	eq
 8006fe0:	2300      	moveq	r3, #0
 8006fe2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006fe6:	6102      	str	r2, [r0, #16]
 8006fe8:	bf08      	it	eq
 8006fea:	6143      	streq	r3, [r0, #20]
 8006fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ff0:	f8dc c000 	ldr.w	ip, [ip]
 8006ff4:	fa0c fc08 	lsl.w	ip, ip, r8
 8006ff8:	ea4c 0707 	orr.w	r7, ip, r7
 8006ffc:	f849 7b04 	str.w	r7, [r9], #4
 8007000:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007004:	40cf      	lsrs	r7, r1
 8007006:	e7d9      	b.n	8006fbc <rshift+0x4c>
 8007008:	f851 cb04 	ldr.w	ip, [r1], #4
 800700c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007010:	e7c2      	b.n	8006f98 <rshift+0x28>
 8007012:	4623      	mov	r3, r4
 8007014:	e7e0      	b.n	8006fd8 <rshift+0x68>

08007016 <__hexdig_fun>:
 8007016:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800701a:	2b09      	cmp	r3, #9
 800701c:	d802      	bhi.n	8007024 <__hexdig_fun+0xe>
 800701e:	3820      	subs	r0, #32
 8007020:	b2c0      	uxtb	r0, r0
 8007022:	4770      	bx	lr
 8007024:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007028:	2b05      	cmp	r3, #5
 800702a:	d801      	bhi.n	8007030 <__hexdig_fun+0x1a>
 800702c:	3847      	subs	r0, #71	@ 0x47
 800702e:	e7f7      	b.n	8007020 <__hexdig_fun+0xa>
 8007030:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007034:	2b05      	cmp	r3, #5
 8007036:	d801      	bhi.n	800703c <__hexdig_fun+0x26>
 8007038:	3827      	subs	r0, #39	@ 0x27
 800703a:	e7f1      	b.n	8007020 <__hexdig_fun+0xa>
 800703c:	2000      	movs	r0, #0
 800703e:	4770      	bx	lr

08007040 <__gethex>:
 8007040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	468a      	mov	sl, r1
 8007046:	4690      	mov	r8, r2
 8007048:	b085      	sub	sp, #20
 800704a:	9302      	str	r3, [sp, #8]
 800704c:	680b      	ldr	r3, [r1, #0]
 800704e:	9001      	str	r0, [sp, #4]
 8007050:	1c9c      	adds	r4, r3, #2
 8007052:	46a1      	mov	r9, r4
 8007054:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007058:	2830      	cmp	r0, #48	@ 0x30
 800705a:	d0fa      	beq.n	8007052 <__gethex+0x12>
 800705c:	eba9 0303 	sub.w	r3, r9, r3
 8007060:	f1a3 0b02 	sub.w	fp, r3, #2
 8007064:	f7ff ffd7 	bl	8007016 <__hexdig_fun>
 8007068:	4605      	mov	r5, r0
 800706a:	2800      	cmp	r0, #0
 800706c:	d168      	bne.n	8007140 <__gethex+0x100>
 800706e:	2201      	movs	r2, #1
 8007070:	4648      	mov	r0, r9
 8007072:	499f      	ldr	r1, [pc, #636]	@ (80072f0 <__gethex+0x2b0>)
 8007074:	f7ff f815 	bl	80060a2 <strncmp>
 8007078:	4607      	mov	r7, r0
 800707a:	2800      	cmp	r0, #0
 800707c:	d167      	bne.n	800714e <__gethex+0x10e>
 800707e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007082:	4626      	mov	r6, r4
 8007084:	f7ff ffc7 	bl	8007016 <__hexdig_fun>
 8007088:	2800      	cmp	r0, #0
 800708a:	d062      	beq.n	8007152 <__gethex+0x112>
 800708c:	4623      	mov	r3, r4
 800708e:	7818      	ldrb	r0, [r3, #0]
 8007090:	4699      	mov	r9, r3
 8007092:	2830      	cmp	r0, #48	@ 0x30
 8007094:	f103 0301 	add.w	r3, r3, #1
 8007098:	d0f9      	beq.n	800708e <__gethex+0x4e>
 800709a:	f7ff ffbc 	bl	8007016 <__hexdig_fun>
 800709e:	fab0 f580 	clz	r5, r0
 80070a2:	f04f 0b01 	mov.w	fp, #1
 80070a6:	096d      	lsrs	r5, r5, #5
 80070a8:	464a      	mov	r2, r9
 80070aa:	4616      	mov	r6, r2
 80070ac:	7830      	ldrb	r0, [r6, #0]
 80070ae:	3201      	adds	r2, #1
 80070b0:	f7ff ffb1 	bl	8007016 <__hexdig_fun>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d1f8      	bne.n	80070aa <__gethex+0x6a>
 80070b8:	2201      	movs	r2, #1
 80070ba:	4630      	mov	r0, r6
 80070bc:	498c      	ldr	r1, [pc, #560]	@ (80072f0 <__gethex+0x2b0>)
 80070be:	f7fe fff0 	bl	80060a2 <strncmp>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d13f      	bne.n	8007146 <__gethex+0x106>
 80070c6:	b944      	cbnz	r4, 80070da <__gethex+0x9a>
 80070c8:	1c74      	adds	r4, r6, #1
 80070ca:	4622      	mov	r2, r4
 80070cc:	4616      	mov	r6, r2
 80070ce:	7830      	ldrb	r0, [r6, #0]
 80070d0:	3201      	adds	r2, #1
 80070d2:	f7ff ffa0 	bl	8007016 <__hexdig_fun>
 80070d6:	2800      	cmp	r0, #0
 80070d8:	d1f8      	bne.n	80070cc <__gethex+0x8c>
 80070da:	1ba4      	subs	r4, r4, r6
 80070dc:	00a7      	lsls	r7, r4, #2
 80070de:	7833      	ldrb	r3, [r6, #0]
 80070e0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80070e4:	2b50      	cmp	r3, #80	@ 0x50
 80070e6:	d13e      	bne.n	8007166 <__gethex+0x126>
 80070e8:	7873      	ldrb	r3, [r6, #1]
 80070ea:	2b2b      	cmp	r3, #43	@ 0x2b
 80070ec:	d033      	beq.n	8007156 <__gethex+0x116>
 80070ee:	2b2d      	cmp	r3, #45	@ 0x2d
 80070f0:	d034      	beq.n	800715c <__gethex+0x11c>
 80070f2:	2400      	movs	r4, #0
 80070f4:	1c71      	adds	r1, r6, #1
 80070f6:	7808      	ldrb	r0, [r1, #0]
 80070f8:	f7ff ff8d 	bl	8007016 <__hexdig_fun>
 80070fc:	1e43      	subs	r3, r0, #1
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b18      	cmp	r3, #24
 8007102:	d830      	bhi.n	8007166 <__gethex+0x126>
 8007104:	f1a0 0210 	sub.w	r2, r0, #16
 8007108:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800710c:	f7ff ff83 	bl	8007016 <__hexdig_fun>
 8007110:	f100 3cff 	add.w	ip, r0, #4294967295
 8007114:	fa5f fc8c 	uxtb.w	ip, ip
 8007118:	f1bc 0f18 	cmp.w	ip, #24
 800711c:	f04f 030a 	mov.w	r3, #10
 8007120:	d91e      	bls.n	8007160 <__gethex+0x120>
 8007122:	b104      	cbz	r4, 8007126 <__gethex+0xe6>
 8007124:	4252      	negs	r2, r2
 8007126:	4417      	add	r7, r2
 8007128:	f8ca 1000 	str.w	r1, [sl]
 800712c:	b1ed      	cbz	r5, 800716a <__gethex+0x12a>
 800712e:	f1bb 0f00 	cmp.w	fp, #0
 8007132:	bf0c      	ite	eq
 8007134:	2506      	moveq	r5, #6
 8007136:	2500      	movne	r5, #0
 8007138:	4628      	mov	r0, r5
 800713a:	b005      	add	sp, #20
 800713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007140:	2500      	movs	r5, #0
 8007142:	462c      	mov	r4, r5
 8007144:	e7b0      	b.n	80070a8 <__gethex+0x68>
 8007146:	2c00      	cmp	r4, #0
 8007148:	d1c7      	bne.n	80070da <__gethex+0x9a>
 800714a:	4627      	mov	r7, r4
 800714c:	e7c7      	b.n	80070de <__gethex+0x9e>
 800714e:	464e      	mov	r6, r9
 8007150:	462f      	mov	r7, r5
 8007152:	2501      	movs	r5, #1
 8007154:	e7c3      	b.n	80070de <__gethex+0x9e>
 8007156:	2400      	movs	r4, #0
 8007158:	1cb1      	adds	r1, r6, #2
 800715a:	e7cc      	b.n	80070f6 <__gethex+0xb6>
 800715c:	2401      	movs	r4, #1
 800715e:	e7fb      	b.n	8007158 <__gethex+0x118>
 8007160:	fb03 0002 	mla	r0, r3, r2, r0
 8007164:	e7ce      	b.n	8007104 <__gethex+0xc4>
 8007166:	4631      	mov	r1, r6
 8007168:	e7de      	b.n	8007128 <__gethex+0xe8>
 800716a:	4629      	mov	r1, r5
 800716c:	eba6 0309 	sub.w	r3, r6, r9
 8007170:	3b01      	subs	r3, #1
 8007172:	2b07      	cmp	r3, #7
 8007174:	dc0a      	bgt.n	800718c <__gethex+0x14c>
 8007176:	9801      	ldr	r0, [sp, #4]
 8007178:	f000 fa46 	bl	8007608 <_Balloc>
 800717c:	4604      	mov	r4, r0
 800717e:	b940      	cbnz	r0, 8007192 <__gethex+0x152>
 8007180:	4602      	mov	r2, r0
 8007182:	21e4      	movs	r1, #228	@ 0xe4
 8007184:	4b5b      	ldr	r3, [pc, #364]	@ (80072f4 <__gethex+0x2b4>)
 8007186:	485c      	ldr	r0, [pc, #368]	@ (80072f8 <__gethex+0x2b8>)
 8007188:	f001 f980 	bl	800848c <__assert_func>
 800718c:	3101      	adds	r1, #1
 800718e:	105b      	asrs	r3, r3, #1
 8007190:	e7ef      	b.n	8007172 <__gethex+0x132>
 8007192:	2300      	movs	r3, #0
 8007194:	f100 0a14 	add.w	sl, r0, #20
 8007198:	4655      	mov	r5, sl
 800719a:	469b      	mov	fp, r3
 800719c:	45b1      	cmp	r9, r6
 800719e:	d337      	bcc.n	8007210 <__gethex+0x1d0>
 80071a0:	f845 bb04 	str.w	fp, [r5], #4
 80071a4:	eba5 050a 	sub.w	r5, r5, sl
 80071a8:	10ad      	asrs	r5, r5, #2
 80071aa:	6125      	str	r5, [r4, #16]
 80071ac:	4658      	mov	r0, fp
 80071ae:	f000 fb1d 	bl	80077ec <__hi0bits>
 80071b2:	016d      	lsls	r5, r5, #5
 80071b4:	f8d8 6000 	ldr.w	r6, [r8]
 80071b8:	1a2d      	subs	r5, r5, r0
 80071ba:	42b5      	cmp	r5, r6
 80071bc:	dd54      	ble.n	8007268 <__gethex+0x228>
 80071be:	1bad      	subs	r5, r5, r6
 80071c0:	4629      	mov	r1, r5
 80071c2:	4620      	mov	r0, r4
 80071c4:	f000 fe9f 	bl	8007f06 <__any_on>
 80071c8:	4681      	mov	r9, r0
 80071ca:	b178      	cbz	r0, 80071ec <__gethex+0x1ac>
 80071cc:	f04f 0901 	mov.w	r9, #1
 80071d0:	1e6b      	subs	r3, r5, #1
 80071d2:	1159      	asrs	r1, r3, #5
 80071d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80071d8:	f003 021f 	and.w	r2, r3, #31
 80071dc:	fa09 f202 	lsl.w	r2, r9, r2
 80071e0:	420a      	tst	r2, r1
 80071e2:	d003      	beq.n	80071ec <__gethex+0x1ac>
 80071e4:	454b      	cmp	r3, r9
 80071e6:	dc36      	bgt.n	8007256 <__gethex+0x216>
 80071e8:	f04f 0902 	mov.w	r9, #2
 80071ec:	4629      	mov	r1, r5
 80071ee:	4620      	mov	r0, r4
 80071f0:	f7ff febe 	bl	8006f70 <rshift>
 80071f4:	442f      	add	r7, r5
 80071f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80071fa:	42bb      	cmp	r3, r7
 80071fc:	da42      	bge.n	8007284 <__gethex+0x244>
 80071fe:	4621      	mov	r1, r4
 8007200:	9801      	ldr	r0, [sp, #4]
 8007202:	f000 fa41 	bl	8007688 <_Bfree>
 8007206:	2300      	movs	r3, #0
 8007208:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800720a:	25a3      	movs	r5, #163	@ 0xa3
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	e793      	b.n	8007138 <__gethex+0xf8>
 8007210:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007214:	2a2e      	cmp	r2, #46	@ 0x2e
 8007216:	d012      	beq.n	800723e <__gethex+0x1fe>
 8007218:	2b20      	cmp	r3, #32
 800721a:	d104      	bne.n	8007226 <__gethex+0x1e6>
 800721c:	f845 bb04 	str.w	fp, [r5], #4
 8007220:	f04f 0b00 	mov.w	fp, #0
 8007224:	465b      	mov	r3, fp
 8007226:	7830      	ldrb	r0, [r6, #0]
 8007228:	9303      	str	r3, [sp, #12]
 800722a:	f7ff fef4 	bl	8007016 <__hexdig_fun>
 800722e:	9b03      	ldr	r3, [sp, #12]
 8007230:	f000 000f 	and.w	r0, r0, #15
 8007234:	4098      	lsls	r0, r3
 8007236:	ea4b 0b00 	orr.w	fp, fp, r0
 800723a:	3304      	adds	r3, #4
 800723c:	e7ae      	b.n	800719c <__gethex+0x15c>
 800723e:	45b1      	cmp	r9, r6
 8007240:	d8ea      	bhi.n	8007218 <__gethex+0x1d8>
 8007242:	2201      	movs	r2, #1
 8007244:	4630      	mov	r0, r6
 8007246:	492a      	ldr	r1, [pc, #168]	@ (80072f0 <__gethex+0x2b0>)
 8007248:	9303      	str	r3, [sp, #12]
 800724a:	f7fe ff2a 	bl	80060a2 <strncmp>
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	2800      	cmp	r0, #0
 8007252:	d1e1      	bne.n	8007218 <__gethex+0x1d8>
 8007254:	e7a2      	b.n	800719c <__gethex+0x15c>
 8007256:	4620      	mov	r0, r4
 8007258:	1ea9      	subs	r1, r5, #2
 800725a:	f000 fe54 	bl	8007f06 <__any_on>
 800725e:	2800      	cmp	r0, #0
 8007260:	d0c2      	beq.n	80071e8 <__gethex+0x1a8>
 8007262:	f04f 0903 	mov.w	r9, #3
 8007266:	e7c1      	b.n	80071ec <__gethex+0x1ac>
 8007268:	da09      	bge.n	800727e <__gethex+0x23e>
 800726a:	1b75      	subs	r5, r6, r5
 800726c:	4621      	mov	r1, r4
 800726e:	462a      	mov	r2, r5
 8007270:	9801      	ldr	r0, [sp, #4]
 8007272:	f000 fc19 	bl	8007aa8 <__lshift>
 8007276:	4604      	mov	r4, r0
 8007278:	1b7f      	subs	r7, r7, r5
 800727a:	f100 0a14 	add.w	sl, r0, #20
 800727e:	f04f 0900 	mov.w	r9, #0
 8007282:	e7b8      	b.n	80071f6 <__gethex+0x1b6>
 8007284:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007288:	42bd      	cmp	r5, r7
 800728a:	dd6f      	ble.n	800736c <__gethex+0x32c>
 800728c:	1bed      	subs	r5, r5, r7
 800728e:	42ae      	cmp	r6, r5
 8007290:	dc34      	bgt.n	80072fc <__gethex+0x2bc>
 8007292:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d022      	beq.n	80072e0 <__gethex+0x2a0>
 800729a:	2b03      	cmp	r3, #3
 800729c:	d024      	beq.n	80072e8 <__gethex+0x2a8>
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d115      	bne.n	80072ce <__gethex+0x28e>
 80072a2:	42ae      	cmp	r6, r5
 80072a4:	d113      	bne.n	80072ce <__gethex+0x28e>
 80072a6:	2e01      	cmp	r6, #1
 80072a8:	d10b      	bne.n	80072c2 <__gethex+0x282>
 80072aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80072ae:	9a02      	ldr	r2, [sp, #8]
 80072b0:	2562      	movs	r5, #98	@ 0x62
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	2301      	movs	r3, #1
 80072b6:	6123      	str	r3, [r4, #16]
 80072b8:	f8ca 3000 	str.w	r3, [sl]
 80072bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072be:	601c      	str	r4, [r3, #0]
 80072c0:	e73a      	b.n	8007138 <__gethex+0xf8>
 80072c2:	4620      	mov	r0, r4
 80072c4:	1e71      	subs	r1, r6, #1
 80072c6:	f000 fe1e 	bl	8007f06 <__any_on>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d1ed      	bne.n	80072aa <__gethex+0x26a>
 80072ce:	4621      	mov	r1, r4
 80072d0:	9801      	ldr	r0, [sp, #4]
 80072d2:	f000 f9d9 	bl	8007688 <_Bfree>
 80072d6:	2300      	movs	r3, #0
 80072d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072da:	2550      	movs	r5, #80	@ 0x50
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	e72b      	b.n	8007138 <__gethex+0xf8>
 80072e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1f3      	bne.n	80072ce <__gethex+0x28e>
 80072e6:	e7e0      	b.n	80072aa <__gethex+0x26a>
 80072e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1dd      	bne.n	80072aa <__gethex+0x26a>
 80072ee:	e7ee      	b.n	80072ce <__gethex+0x28e>
 80072f0:	08008db6 	.word	0x08008db6
 80072f4:	08008e75 	.word	0x08008e75
 80072f8:	08008e86 	.word	0x08008e86
 80072fc:	1e6f      	subs	r7, r5, #1
 80072fe:	f1b9 0f00 	cmp.w	r9, #0
 8007302:	d130      	bne.n	8007366 <__gethex+0x326>
 8007304:	b127      	cbz	r7, 8007310 <__gethex+0x2d0>
 8007306:	4639      	mov	r1, r7
 8007308:	4620      	mov	r0, r4
 800730a:	f000 fdfc 	bl	8007f06 <__any_on>
 800730e:	4681      	mov	r9, r0
 8007310:	2301      	movs	r3, #1
 8007312:	4629      	mov	r1, r5
 8007314:	1b76      	subs	r6, r6, r5
 8007316:	2502      	movs	r5, #2
 8007318:	117a      	asrs	r2, r7, #5
 800731a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800731e:	f007 071f 	and.w	r7, r7, #31
 8007322:	40bb      	lsls	r3, r7
 8007324:	4213      	tst	r3, r2
 8007326:	4620      	mov	r0, r4
 8007328:	bf18      	it	ne
 800732a:	f049 0902 	orrne.w	r9, r9, #2
 800732e:	f7ff fe1f 	bl	8006f70 <rshift>
 8007332:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007336:	f1b9 0f00 	cmp.w	r9, #0
 800733a:	d047      	beq.n	80073cc <__gethex+0x38c>
 800733c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d015      	beq.n	8007370 <__gethex+0x330>
 8007344:	2b03      	cmp	r3, #3
 8007346:	d017      	beq.n	8007378 <__gethex+0x338>
 8007348:	2b01      	cmp	r3, #1
 800734a:	d109      	bne.n	8007360 <__gethex+0x320>
 800734c:	f019 0f02 	tst.w	r9, #2
 8007350:	d006      	beq.n	8007360 <__gethex+0x320>
 8007352:	f8da 3000 	ldr.w	r3, [sl]
 8007356:	ea49 0903 	orr.w	r9, r9, r3
 800735a:	f019 0f01 	tst.w	r9, #1
 800735e:	d10e      	bne.n	800737e <__gethex+0x33e>
 8007360:	f045 0510 	orr.w	r5, r5, #16
 8007364:	e032      	b.n	80073cc <__gethex+0x38c>
 8007366:	f04f 0901 	mov.w	r9, #1
 800736a:	e7d1      	b.n	8007310 <__gethex+0x2d0>
 800736c:	2501      	movs	r5, #1
 800736e:	e7e2      	b.n	8007336 <__gethex+0x2f6>
 8007370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007372:	f1c3 0301 	rsb	r3, r3, #1
 8007376:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f0      	beq.n	8007360 <__gethex+0x320>
 800737e:	f04f 0c00 	mov.w	ip, #0
 8007382:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007386:	f104 0314 	add.w	r3, r4, #20
 800738a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800738e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007392:	4618      	mov	r0, r3
 8007394:	f853 2b04 	ldr.w	r2, [r3], #4
 8007398:	f1b2 3fff 	cmp.w	r2, #4294967295
 800739c:	d01b      	beq.n	80073d6 <__gethex+0x396>
 800739e:	3201      	adds	r2, #1
 80073a0:	6002      	str	r2, [r0, #0]
 80073a2:	2d02      	cmp	r5, #2
 80073a4:	f104 0314 	add.w	r3, r4, #20
 80073a8:	d13c      	bne.n	8007424 <__gethex+0x3e4>
 80073aa:	f8d8 2000 	ldr.w	r2, [r8]
 80073ae:	3a01      	subs	r2, #1
 80073b0:	42b2      	cmp	r2, r6
 80073b2:	d109      	bne.n	80073c8 <__gethex+0x388>
 80073b4:	2201      	movs	r2, #1
 80073b6:	1171      	asrs	r1, r6, #5
 80073b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073bc:	f006 061f 	and.w	r6, r6, #31
 80073c0:	fa02 f606 	lsl.w	r6, r2, r6
 80073c4:	421e      	tst	r6, r3
 80073c6:	d13a      	bne.n	800743e <__gethex+0x3fe>
 80073c8:	f045 0520 	orr.w	r5, r5, #32
 80073cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073ce:	601c      	str	r4, [r3, #0]
 80073d0:	9b02      	ldr	r3, [sp, #8]
 80073d2:	601f      	str	r7, [r3, #0]
 80073d4:	e6b0      	b.n	8007138 <__gethex+0xf8>
 80073d6:	4299      	cmp	r1, r3
 80073d8:	f843 cc04 	str.w	ip, [r3, #-4]
 80073dc:	d8d9      	bhi.n	8007392 <__gethex+0x352>
 80073de:	68a3      	ldr	r3, [r4, #8]
 80073e0:	459b      	cmp	fp, r3
 80073e2:	db17      	blt.n	8007414 <__gethex+0x3d4>
 80073e4:	6861      	ldr	r1, [r4, #4]
 80073e6:	9801      	ldr	r0, [sp, #4]
 80073e8:	3101      	adds	r1, #1
 80073ea:	f000 f90d 	bl	8007608 <_Balloc>
 80073ee:	4681      	mov	r9, r0
 80073f0:	b918      	cbnz	r0, 80073fa <__gethex+0x3ba>
 80073f2:	4602      	mov	r2, r0
 80073f4:	2184      	movs	r1, #132	@ 0x84
 80073f6:	4b19      	ldr	r3, [pc, #100]	@ (800745c <__gethex+0x41c>)
 80073f8:	e6c5      	b.n	8007186 <__gethex+0x146>
 80073fa:	6922      	ldr	r2, [r4, #16]
 80073fc:	f104 010c 	add.w	r1, r4, #12
 8007400:	3202      	adds	r2, #2
 8007402:	0092      	lsls	r2, r2, #2
 8007404:	300c      	adds	r0, #12
 8007406:	f7fe fef4 	bl	80061f2 <memcpy>
 800740a:	4621      	mov	r1, r4
 800740c:	9801      	ldr	r0, [sp, #4]
 800740e:	f000 f93b 	bl	8007688 <_Bfree>
 8007412:	464c      	mov	r4, r9
 8007414:	6923      	ldr	r3, [r4, #16]
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	6122      	str	r2, [r4, #16]
 800741a:	2201      	movs	r2, #1
 800741c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007420:	615a      	str	r2, [r3, #20]
 8007422:	e7be      	b.n	80073a2 <__gethex+0x362>
 8007424:	6922      	ldr	r2, [r4, #16]
 8007426:	455a      	cmp	r2, fp
 8007428:	dd0b      	ble.n	8007442 <__gethex+0x402>
 800742a:	2101      	movs	r1, #1
 800742c:	4620      	mov	r0, r4
 800742e:	f7ff fd9f 	bl	8006f70 <rshift>
 8007432:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007436:	3701      	adds	r7, #1
 8007438:	42bb      	cmp	r3, r7
 800743a:	f6ff aee0 	blt.w	80071fe <__gethex+0x1be>
 800743e:	2501      	movs	r5, #1
 8007440:	e7c2      	b.n	80073c8 <__gethex+0x388>
 8007442:	f016 061f 	ands.w	r6, r6, #31
 8007446:	d0fa      	beq.n	800743e <__gethex+0x3fe>
 8007448:	4453      	add	r3, sl
 800744a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800744e:	f000 f9cd 	bl	80077ec <__hi0bits>
 8007452:	f1c6 0620 	rsb	r6, r6, #32
 8007456:	42b0      	cmp	r0, r6
 8007458:	dbe7      	blt.n	800742a <__gethex+0x3ea>
 800745a:	e7f0      	b.n	800743e <__gethex+0x3fe>
 800745c:	08008e75 	.word	0x08008e75

08007460 <L_shift>:
 8007460:	f1c2 0208 	rsb	r2, r2, #8
 8007464:	0092      	lsls	r2, r2, #2
 8007466:	b570      	push	{r4, r5, r6, lr}
 8007468:	f1c2 0620 	rsb	r6, r2, #32
 800746c:	6843      	ldr	r3, [r0, #4]
 800746e:	6804      	ldr	r4, [r0, #0]
 8007470:	fa03 f506 	lsl.w	r5, r3, r6
 8007474:	432c      	orrs	r4, r5
 8007476:	40d3      	lsrs	r3, r2
 8007478:	6004      	str	r4, [r0, #0]
 800747a:	f840 3f04 	str.w	r3, [r0, #4]!
 800747e:	4288      	cmp	r0, r1
 8007480:	d3f4      	bcc.n	800746c <L_shift+0xc>
 8007482:	bd70      	pop	{r4, r5, r6, pc}

08007484 <__match>:
 8007484:	b530      	push	{r4, r5, lr}
 8007486:	6803      	ldr	r3, [r0, #0]
 8007488:	3301      	adds	r3, #1
 800748a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800748e:	b914      	cbnz	r4, 8007496 <__match+0x12>
 8007490:	6003      	str	r3, [r0, #0]
 8007492:	2001      	movs	r0, #1
 8007494:	bd30      	pop	{r4, r5, pc}
 8007496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800749a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800749e:	2d19      	cmp	r5, #25
 80074a0:	bf98      	it	ls
 80074a2:	3220      	addls	r2, #32
 80074a4:	42a2      	cmp	r2, r4
 80074a6:	d0f0      	beq.n	800748a <__match+0x6>
 80074a8:	2000      	movs	r0, #0
 80074aa:	e7f3      	b.n	8007494 <__match+0x10>

080074ac <__hexnan>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	2500      	movs	r5, #0
 80074b2:	680b      	ldr	r3, [r1, #0]
 80074b4:	4682      	mov	sl, r0
 80074b6:	115e      	asrs	r6, r3, #5
 80074b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80074bc:	f013 031f 	ands.w	r3, r3, #31
 80074c0:	bf18      	it	ne
 80074c2:	3604      	addne	r6, #4
 80074c4:	1f37      	subs	r7, r6, #4
 80074c6:	4690      	mov	r8, r2
 80074c8:	46b9      	mov	r9, r7
 80074ca:	463c      	mov	r4, r7
 80074cc:	46ab      	mov	fp, r5
 80074ce:	b087      	sub	sp, #28
 80074d0:	6801      	ldr	r1, [r0, #0]
 80074d2:	9301      	str	r3, [sp, #4]
 80074d4:	f846 5c04 	str.w	r5, [r6, #-4]
 80074d8:	9502      	str	r5, [sp, #8]
 80074da:	784a      	ldrb	r2, [r1, #1]
 80074dc:	1c4b      	adds	r3, r1, #1
 80074de:	9303      	str	r3, [sp, #12]
 80074e0:	b342      	cbz	r2, 8007534 <__hexnan+0x88>
 80074e2:	4610      	mov	r0, r2
 80074e4:	9105      	str	r1, [sp, #20]
 80074e6:	9204      	str	r2, [sp, #16]
 80074e8:	f7ff fd95 	bl	8007016 <__hexdig_fun>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d151      	bne.n	8007594 <__hexnan+0xe8>
 80074f0:	9a04      	ldr	r2, [sp, #16]
 80074f2:	9905      	ldr	r1, [sp, #20]
 80074f4:	2a20      	cmp	r2, #32
 80074f6:	d818      	bhi.n	800752a <__hexnan+0x7e>
 80074f8:	9b02      	ldr	r3, [sp, #8]
 80074fa:	459b      	cmp	fp, r3
 80074fc:	dd13      	ble.n	8007526 <__hexnan+0x7a>
 80074fe:	454c      	cmp	r4, r9
 8007500:	d206      	bcs.n	8007510 <__hexnan+0x64>
 8007502:	2d07      	cmp	r5, #7
 8007504:	dc04      	bgt.n	8007510 <__hexnan+0x64>
 8007506:	462a      	mov	r2, r5
 8007508:	4649      	mov	r1, r9
 800750a:	4620      	mov	r0, r4
 800750c:	f7ff ffa8 	bl	8007460 <L_shift>
 8007510:	4544      	cmp	r4, r8
 8007512:	d952      	bls.n	80075ba <__hexnan+0x10e>
 8007514:	2300      	movs	r3, #0
 8007516:	f1a4 0904 	sub.w	r9, r4, #4
 800751a:	f844 3c04 	str.w	r3, [r4, #-4]
 800751e:	461d      	mov	r5, r3
 8007520:	464c      	mov	r4, r9
 8007522:	f8cd b008 	str.w	fp, [sp, #8]
 8007526:	9903      	ldr	r1, [sp, #12]
 8007528:	e7d7      	b.n	80074da <__hexnan+0x2e>
 800752a:	2a29      	cmp	r2, #41	@ 0x29
 800752c:	d157      	bne.n	80075de <__hexnan+0x132>
 800752e:	3102      	adds	r1, #2
 8007530:	f8ca 1000 	str.w	r1, [sl]
 8007534:	f1bb 0f00 	cmp.w	fp, #0
 8007538:	d051      	beq.n	80075de <__hexnan+0x132>
 800753a:	454c      	cmp	r4, r9
 800753c:	d206      	bcs.n	800754c <__hexnan+0xa0>
 800753e:	2d07      	cmp	r5, #7
 8007540:	dc04      	bgt.n	800754c <__hexnan+0xa0>
 8007542:	462a      	mov	r2, r5
 8007544:	4649      	mov	r1, r9
 8007546:	4620      	mov	r0, r4
 8007548:	f7ff ff8a 	bl	8007460 <L_shift>
 800754c:	4544      	cmp	r4, r8
 800754e:	d936      	bls.n	80075be <__hexnan+0x112>
 8007550:	4623      	mov	r3, r4
 8007552:	f1a8 0204 	sub.w	r2, r8, #4
 8007556:	f853 1b04 	ldr.w	r1, [r3], #4
 800755a:	429f      	cmp	r7, r3
 800755c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007560:	d2f9      	bcs.n	8007556 <__hexnan+0xaa>
 8007562:	1b3b      	subs	r3, r7, r4
 8007564:	f023 0303 	bic.w	r3, r3, #3
 8007568:	3304      	adds	r3, #4
 800756a:	3401      	adds	r4, #1
 800756c:	3e03      	subs	r6, #3
 800756e:	42b4      	cmp	r4, r6
 8007570:	bf88      	it	hi
 8007572:	2304      	movhi	r3, #4
 8007574:	2200      	movs	r2, #0
 8007576:	4443      	add	r3, r8
 8007578:	f843 2b04 	str.w	r2, [r3], #4
 800757c:	429f      	cmp	r7, r3
 800757e:	d2fb      	bcs.n	8007578 <__hexnan+0xcc>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	b91b      	cbnz	r3, 800758c <__hexnan+0xe0>
 8007584:	4547      	cmp	r7, r8
 8007586:	d128      	bne.n	80075da <__hexnan+0x12e>
 8007588:	2301      	movs	r3, #1
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	2005      	movs	r0, #5
 800758e:	b007      	add	sp, #28
 8007590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007594:	3501      	adds	r5, #1
 8007596:	2d08      	cmp	r5, #8
 8007598:	f10b 0b01 	add.w	fp, fp, #1
 800759c:	dd06      	ble.n	80075ac <__hexnan+0x100>
 800759e:	4544      	cmp	r4, r8
 80075a0:	d9c1      	bls.n	8007526 <__hexnan+0x7a>
 80075a2:	2300      	movs	r3, #0
 80075a4:	2501      	movs	r5, #1
 80075a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80075aa:	3c04      	subs	r4, #4
 80075ac:	6822      	ldr	r2, [r4, #0]
 80075ae:	f000 000f 	and.w	r0, r0, #15
 80075b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80075b6:	6020      	str	r0, [r4, #0]
 80075b8:	e7b5      	b.n	8007526 <__hexnan+0x7a>
 80075ba:	2508      	movs	r5, #8
 80075bc:	e7b3      	b.n	8007526 <__hexnan+0x7a>
 80075be:	9b01      	ldr	r3, [sp, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d0dd      	beq.n	8007580 <__hexnan+0xd4>
 80075c4:	f04f 32ff 	mov.w	r2, #4294967295
 80075c8:	f1c3 0320 	rsb	r3, r3, #32
 80075cc:	40da      	lsrs	r2, r3
 80075ce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80075d2:	4013      	ands	r3, r2
 80075d4:	f846 3c04 	str.w	r3, [r6, #-4]
 80075d8:	e7d2      	b.n	8007580 <__hexnan+0xd4>
 80075da:	3f04      	subs	r7, #4
 80075dc:	e7d0      	b.n	8007580 <__hexnan+0xd4>
 80075de:	2004      	movs	r0, #4
 80075e0:	e7d5      	b.n	800758e <__hexnan+0xe2>

080075e2 <__ascii_mbtowc>:
 80075e2:	b082      	sub	sp, #8
 80075e4:	b901      	cbnz	r1, 80075e8 <__ascii_mbtowc+0x6>
 80075e6:	a901      	add	r1, sp, #4
 80075e8:	b142      	cbz	r2, 80075fc <__ascii_mbtowc+0x1a>
 80075ea:	b14b      	cbz	r3, 8007600 <__ascii_mbtowc+0x1e>
 80075ec:	7813      	ldrb	r3, [r2, #0]
 80075ee:	600b      	str	r3, [r1, #0]
 80075f0:	7812      	ldrb	r2, [r2, #0]
 80075f2:	1e10      	subs	r0, r2, #0
 80075f4:	bf18      	it	ne
 80075f6:	2001      	movne	r0, #1
 80075f8:	b002      	add	sp, #8
 80075fa:	4770      	bx	lr
 80075fc:	4610      	mov	r0, r2
 80075fe:	e7fb      	b.n	80075f8 <__ascii_mbtowc+0x16>
 8007600:	f06f 0001 	mvn.w	r0, #1
 8007604:	e7f8      	b.n	80075f8 <__ascii_mbtowc+0x16>
	...

08007608 <_Balloc>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	69c6      	ldr	r6, [r0, #28]
 800760c:	4604      	mov	r4, r0
 800760e:	460d      	mov	r5, r1
 8007610:	b976      	cbnz	r6, 8007630 <_Balloc+0x28>
 8007612:	2010      	movs	r0, #16
 8007614:	f7fc fe8e 	bl	8004334 <malloc>
 8007618:	4602      	mov	r2, r0
 800761a:	61e0      	str	r0, [r4, #28]
 800761c:	b920      	cbnz	r0, 8007628 <_Balloc+0x20>
 800761e:	216b      	movs	r1, #107	@ 0x6b
 8007620:	4b17      	ldr	r3, [pc, #92]	@ (8007680 <_Balloc+0x78>)
 8007622:	4818      	ldr	r0, [pc, #96]	@ (8007684 <_Balloc+0x7c>)
 8007624:	f000 ff32 	bl	800848c <__assert_func>
 8007628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800762c:	6006      	str	r6, [r0, #0]
 800762e:	60c6      	str	r6, [r0, #12]
 8007630:	69e6      	ldr	r6, [r4, #28]
 8007632:	68f3      	ldr	r3, [r6, #12]
 8007634:	b183      	cbz	r3, 8007658 <_Balloc+0x50>
 8007636:	69e3      	ldr	r3, [r4, #28]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800763e:	b9b8      	cbnz	r0, 8007670 <_Balloc+0x68>
 8007640:	2101      	movs	r1, #1
 8007642:	fa01 f605 	lsl.w	r6, r1, r5
 8007646:	1d72      	adds	r2, r6, #5
 8007648:	4620      	mov	r0, r4
 800764a:	0092      	lsls	r2, r2, #2
 800764c:	f000 ff3c 	bl	80084c8 <_calloc_r>
 8007650:	b160      	cbz	r0, 800766c <_Balloc+0x64>
 8007652:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007656:	e00e      	b.n	8007676 <_Balloc+0x6e>
 8007658:	2221      	movs	r2, #33	@ 0x21
 800765a:	2104      	movs	r1, #4
 800765c:	4620      	mov	r0, r4
 800765e:	f000 ff33 	bl	80084c8 <_calloc_r>
 8007662:	69e3      	ldr	r3, [r4, #28]
 8007664:	60f0      	str	r0, [r6, #12]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e4      	bne.n	8007636 <_Balloc+0x2e>
 800766c:	2000      	movs	r0, #0
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	6802      	ldr	r2, [r0, #0]
 8007672:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007676:	2300      	movs	r3, #0
 8007678:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800767c:	e7f7      	b.n	800766e <_Balloc+0x66>
 800767e:	bf00      	nop
 8007680:	08008e06 	.word	0x08008e06
 8007684:	08008ee6 	.word	0x08008ee6

08007688 <_Bfree>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	69c6      	ldr	r6, [r0, #28]
 800768c:	4605      	mov	r5, r0
 800768e:	460c      	mov	r4, r1
 8007690:	b976      	cbnz	r6, 80076b0 <_Bfree+0x28>
 8007692:	2010      	movs	r0, #16
 8007694:	f7fc fe4e 	bl	8004334 <malloc>
 8007698:	4602      	mov	r2, r0
 800769a:	61e8      	str	r0, [r5, #28]
 800769c:	b920      	cbnz	r0, 80076a8 <_Bfree+0x20>
 800769e:	218f      	movs	r1, #143	@ 0x8f
 80076a0:	4b08      	ldr	r3, [pc, #32]	@ (80076c4 <_Bfree+0x3c>)
 80076a2:	4809      	ldr	r0, [pc, #36]	@ (80076c8 <_Bfree+0x40>)
 80076a4:	f000 fef2 	bl	800848c <__assert_func>
 80076a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076ac:	6006      	str	r6, [r0, #0]
 80076ae:	60c6      	str	r6, [r0, #12]
 80076b0:	b13c      	cbz	r4, 80076c2 <_Bfree+0x3a>
 80076b2:	69eb      	ldr	r3, [r5, #28]
 80076b4:	6862      	ldr	r2, [r4, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076bc:	6021      	str	r1, [r4, #0]
 80076be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076c2:	bd70      	pop	{r4, r5, r6, pc}
 80076c4:	08008e06 	.word	0x08008e06
 80076c8:	08008ee6 	.word	0x08008ee6

080076cc <__multadd>:
 80076cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d0:	4607      	mov	r7, r0
 80076d2:	460c      	mov	r4, r1
 80076d4:	461e      	mov	r6, r3
 80076d6:	2000      	movs	r0, #0
 80076d8:	690d      	ldr	r5, [r1, #16]
 80076da:	f101 0c14 	add.w	ip, r1, #20
 80076de:	f8dc 3000 	ldr.w	r3, [ip]
 80076e2:	3001      	adds	r0, #1
 80076e4:	b299      	uxth	r1, r3
 80076e6:	fb02 6101 	mla	r1, r2, r1, r6
 80076ea:	0c1e      	lsrs	r6, r3, #16
 80076ec:	0c0b      	lsrs	r3, r1, #16
 80076ee:	fb02 3306 	mla	r3, r2, r6, r3
 80076f2:	b289      	uxth	r1, r1
 80076f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076f8:	4285      	cmp	r5, r0
 80076fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80076fe:	f84c 1b04 	str.w	r1, [ip], #4
 8007702:	dcec      	bgt.n	80076de <__multadd+0x12>
 8007704:	b30e      	cbz	r6, 800774a <__multadd+0x7e>
 8007706:	68a3      	ldr	r3, [r4, #8]
 8007708:	42ab      	cmp	r3, r5
 800770a:	dc19      	bgt.n	8007740 <__multadd+0x74>
 800770c:	6861      	ldr	r1, [r4, #4]
 800770e:	4638      	mov	r0, r7
 8007710:	3101      	adds	r1, #1
 8007712:	f7ff ff79 	bl	8007608 <_Balloc>
 8007716:	4680      	mov	r8, r0
 8007718:	b928      	cbnz	r0, 8007726 <__multadd+0x5a>
 800771a:	4602      	mov	r2, r0
 800771c:	21ba      	movs	r1, #186	@ 0xba
 800771e:	4b0c      	ldr	r3, [pc, #48]	@ (8007750 <__multadd+0x84>)
 8007720:	480c      	ldr	r0, [pc, #48]	@ (8007754 <__multadd+0x88>)
 8007722:	f000 feb3 	bl	800848c <__assert_func>
 8007726:	6922      	ldr	r2, [r4, #16]
 8007728:	f104 010c 	add.w	r1, r4, #12
 800772c:	3202      	adds	r2, #2
 800772e:	0092      	lsls	r2, r2, #2
 8007730:	300c      	adds	r0, #12
 8007732:	f7fe fd5e 	bl	80061f2 <memcpy>
 8007736:	4621      	mov	r1, r4
 8007738:	4638      	mov	r0, r7
 800773a:	f7ff ffa5 	bl	8007688 <_Bfree>
 800773e:	4644      	mov	r4, r8
 8007740:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007744:	3501      	adds	r5, #1
 8007746:	615e      	str	r6, [r3, #20]
 8007748:	6125      	str	r5, [r4, #16]
 800774a:	4620      	mov	r0, r4
 800774c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007750:	08008e75 	.word	0x08008e75
 8007754:	08008ee6 	.word	0x08008ee6

08007758 <__s2b>:
 8007758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800775c:	4615      	mov	r5, r2
 800775e:	2209      	movs	r2, #9
 8007760:	461f      	mov	r7, r3
 8007762:	3308      	adds	r3, #8
 8007764:	460c      	mov	r4, r1
 8007766:	fb93 f3f2 	sdiv	r3, r3, r2
 800776a:	4606      	mov	r6, r0
 800776c:	2201      	movs	r2, #1
 800776e:	2100      	movs	r1, #0
 8007770:	429a      	cmp	r2, r3
 8007772:	db09      	blt.n	8007788 <__s2b+0x30>
 8007774:	4630      	mov	r0, r6
 8007776:	f7ff ff47 	bl	8007608 <_Balloc>
 800777a:	b940      	cbnz	r0, 800778e <__s2b+0x36>
 800777c:	4602      	mov	r2, r0
 800777e:	21d3      	movs	r1, #211	@ 0xd3
 8007780:	4b18      	ldr	r3, [pc, #96]	@ (80077e4 <__s2b+0x8c>)
 8007782:	4819      	ldr	r0, [pc, #100]	@ (80077e8 <__s2b+0x90>)
 8007784:	f000 fe82 	bl	800848c <__assert_func>
 8007788:	0052      	lsls	r2, r2, #1
 800778a:	3101      	adds	r1, #1
 800778c:	e7f0      	b.n	8007770 <__s2b+0x18>
 800778e:	9b08      	ldr	r3, [sp, #32]
 8007790:	2d09      	cmp	r5, #9
 8007792:	6143      	str	r3, [r0, #20]
 8007794:	f04f 0301 	mov.w	r3, #1
 8007798:	6103      	str	r3, [r0, #16]
 800779a:	dd16      	ble.n	80077ca <__s2b+0x72>
 800779c:	f104 0909 	add.w	r9, r4, #9
 80077a0:	46c8      	mov	r8, r9
 80077a2:	442c      	add	r4, r5
 80077a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80077a8:	4601      	mov	r1, r0
 80077aa:	220a      	movs	r2, #10
 80077ac:	4630      	mov	r0, r6
 80077ae:	3b30      	subs	r3, #48	@ 0x30
 80077b0:	f7ff ff8c 	bl	80076cc <__multadd>
 80077b4:	45a0      	cmp	r8, r4
 80077b6:	d1f5      	bne.n	80077a4 <__s2b+0x4c>
 80077b8:	f1a5 0408 	sub.w	r4, r5, #8
 80077bc:	444c      	add	r4, r9
 80077be:	1b2d      	subs	r5, r5, r4
 80077c0:	1963      	adds	r3, r4, r5
 80077c2:	42bb      	cmp	r3, r7
 80077c4:	db04      	blt.n	80077d0 <__s2b+0x78>
 80077c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ca:	2509      	movs	r5, #9
 80077cc:	340a      	adds	r4, #10
 80077ce:	e7f6      	b.n	80077be <__s2b+0x66>
 80077d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80077d4:	4601      	mov	r1, r0
 80077d6:	220a      	movs	r2, #10
 80077d8:	4630      	mov	r0, r6
 80077da:	3b30      	subs	r3, #48	@ 0x30
 80077dc:	f7ff ff76 	bl	80076cc <__multadd>
 80077e0:	e7ee      	b.n	80077c0 <__s2b+0x68>
 80077e2:	bf00      	nop
 80077e4:	08008e75 	.word	0x08008e75
 80077e8:	08008ee6 	.word	0x08008ee6

080077ec <__hi0bits>:
 80077ec:	4603      	mov	r3, r0
 80077ee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80077f2:	bf3a      	itte	cc
 80077f4:	0403      	lslcc	r3, r0, #16
 80077f6:	2010      	movcc	r0, #16
 80077f8:	2000      	movcs	r0, #0
 80077fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077fe:	bf3c      	itt	cc
 8007800:	021b      	lslcc	r3, r3, #8
 8007802:	3008      	addcc	r0, #8
 8007804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007808:	bf3c      	itt	cc
 800780a:	011b      	lslcc	r3, r3, #4
 800780c:	3004      	addcc	r0, #4
 800780e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007812:	bf3c      	itt	cc
 8007814:	009b      	lslcc	r3, r3, #2
 8007816:	3002      	addcc	r0, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	db05      	blt.n	8007828 <__hi0bits+0x3c>
 800781c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007820:	f100 0001 	add.w	r0, r0, #1
 8007824:	bf08      	it	eq
 8007826:	2020      	moveq	r0, #32
 8007828:	4770      	bx	lr

0800782a <__lo0bits>:
 800782a:	6803      	ldr	r3, [r0, #0]
 800782c:	4602      	mov	r2, r0
 800782e:	f013 0007 	ands.w	r0, r3, #7
 8007832:	d00b      	beq.n	800784c <__lo0bits+0x22>
 8007834:	07d9      	lsls	r1, r3, #31
 8007836:	d421      	bmi.n	800787c <__lo0bits+0x52>
 8007838:	0798      	lsls	r0, r3, #30
 800783a:	bf49      	itett	mi
 800783c:	085b      	lsrmi	r3, r3, #1
 800783e:	089b      	lsrpl	r3, r3, #2
 8007840:	2001      	movmi	r0, #1
 8007842:	6013      	strmi	r3, [r2, #0]
 8007844:	bf5c      	itt	pl
 8007846:	2002      	movpl	r0, #2
 8007848:	6013      	strpl	r3, [r2, #0]
 800784a:	4770      	bx	lr
 800784c:	b299      	uxth	r1, r3
 800784e:	b909      	cbnz	r1, 8007854 <__lo0bits+0x2a>
 8007850:	2010      	movs	r0, #16
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	b2d9      	uxtb	r1, r3
 8007856:	b909      	cbnz	r1, 800785c <__lo0bits+0x32>
 8007858:	3008      	adds	r0, #8
 800785a:	0a1b      	lsrs	r3, r3, #8
 800785c:	0719      	lsls	r1, r3, #28
 800785e:	bf04      	itt	eq
 8007860:	091b      	lsreq	r3, r3, #4
 8007862:	3004      	addeq	r0, #4
 8007864:	0799      	lsls	r1, r3, #30
 8007866:	bf04      	itt	eq
 8007868:	089b      	lsreq	r3, r3, #2
 800786a:	3002      	addeq	r0, #2
 800786c:	07d9      	lsls	r1, r3, #31
 800786e:	d403      	bmi.n	8007878 <__lo0bits+0x4e>
 8007870:	085b      	lsrs	r3, r3, #1
 8007872:	f100 0001 	add.w	r0, r0, #1
 8007876:	d003      	beq.n	8007880 <__lo0bits+0x56>
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	4770      	bx	lr
 800787c:	2000      	movs	r0, #0
 800787e:	4770      	bx	lr
 8007880:	2020      	movs	r0, #32
 8007882:	4770      	bx	lr

08007884 <__i2b>:
 8007884:	b510      	push	{r4, lr}
 8007886:	460c      	mov	r4, r1
 8007888:	2101      	movs	r1, #1
 800788a:	f7ff febd 	bl	8007608 <_Balloc>
 800788e:	4602      	mov	r2, r0
 8007890:	b928      	cbnz	r0, 800789e <__i2b+0x1a>
 8007892:	f240 1145 	movw	r1, #325	@ 0x145
 8007896:	4b04      	ldr	r3, [pc, #16]	@ (80078a8 <__i2b+0x24>)
 8007898:	4804      	ldr	r0, [pc, #16]	@ (80078ac <__i2b+0x28>)
 800789a:	f000 fdf7 	bl	800848c <__assert_func>
 800789e:	2301      	movs	r3, #1
 80078a0:	6144      	str	r4, [r0, #20]
 80078a2:	6103      	str	r3, [r0, #16]
 80078a4:	bd10      	pop	{r4, pc}
 80078a6:	bf00      	nop
 80078a8:	08008e75 	.word	0x08008e75
 80078ac:	08008ee6 	.word	0x08008ee6

080078b0 <__multiply>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	4617      	mov	r7, r2
 80078b6:	690a      	ldr	r2, [r1, #16]
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	4689      	mov	r9, r1
 80078bc:	429a      	cmp	r2, r3
 80078be:	bfa2      	ittt	ge
 80078c0:	463b      	movge	r3, r7
 80078c2:	460f      	movge	r7, r1
 80078c4:	4699      	movge	r9, r3
 80078c6:	693d      	ldr	r5, [r7, #16]
 80078c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	6879      	ldr	r1, [r7, #4]
 80078d0:	eb05 060a 	add.w	r6, r5, sl
 80078d4:	42b3      	cmp	r3, r6
 80078d6:	b085      	sub	sp, #20
 80078d8:	bfb8      	it	lt
 80078da:	3101      	addlt	r1, #1
 80078dc:	f7ff fe94 	bl	8007608 <_Balloc>
 80078e0:	b930      	cbnz	r0, 80078f0 <__multiply+0x40>
 80078e2:	4602      	mov	r2, r0
 80078e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80078e8:	4b40      	ldr	r3, [pc, #256]	@ (80079ec <__multiply+0x13c>)
 80078ea:	4841      	ldr	r0, [pc, #260]	@ (80079f0 <__multiply+0x140>)
 80078ec:	f000 fdce 	bl	800848c <__assert_func>
 80078f0:	f100 0414 	add.w	r4, r0, #20
 80078f4:	4623      	mov	r3, r4
 80078f6:	2200      	movs	r2, #0
 80078f8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80078fc:	4573      	cmp	r3, lr
 80078fe:	d320      	bcc.n	8007942 <__multiply+0x92>
 8007900:	f107 0814 	add.w	r8, r7, #20
 8007904:	f109 0114 	add.w	r1, r9, #20
 8007908:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800790c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007910:	9302      	str	r3, [sp, #8]
 8007912:	1beb      	subs	r3, r5, r7
 8007914:	3b15      	subs	r3, #21
 8007916:	f023 0303 	bic.w	r3, r3, #3
 800791a:	3304      	adds	r3, #4
 800791c:	3715      	adds	r7, #21
 800791e:	42bd      	cmp	r5, r7
 8007920:	bf38      	it	cc
 8007922:	2304      	movcc	r3, #4
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	9b02      	ldr	r3, [sp, #8]
 8007928:	9103      	str	r1, [sp, #12]
 800792a:	428b      	cmp	r3, r1
 800792c:	d80c      	bhi.n	8007948 <__multiply+0x98>
 800792e:	2e00      	cmp	r6, #0
 8007930:	dd03      	ble.n	800793a <__multiply+0x8a>
 8007932:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007936:	2b00      	cmp	r3, #0
 8007938:	d055      	beq.n	80079e6 <__multiply+0x136>
 800793a:	6106      	str	r6, [r0, #16]
 800793c:	b005      	add	sp, #20
 800793e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007942:	f843 2b04 	str.w	r2, [r3], #4
 8007946:	e7d9      	b.n	80078fc <__multiply+0x4c>
 8007948:	f8b1 a000 	ldrh.w	sl, [r1]
 800794c:	f1ba 0f00 	cmp.w	sl, #0
 8007950:	d01f      	beq.n	8007992 <__multiply+0xe2>
 8007952:	46c4      	mov	ip, r8
 8007954:	46a1      	mov	r9, r4
 8007956:	2700      	movs	r7, #0
 8007958:	f85c 2b04 	ldr.w	r2, [ip], #4
 800795c:	f8d9 3000 	ldr.w	r3, [r9]
 8007960:	fa1f fb82 	uxth.w	fp, r2
 8007964:	b29b      	uxth	r3, r3
 8007966:	fb0a 330b 	mla	r3, sl, fp, r3
 800796a:	443b      	add	r3, r7
 800796c:	f8d9 7000 	ldr.w	r7, [r9]
 8007970:	0c12      	lsrs	r2, r2, #16
 8007972:	0c3f      	lsrs	r7, r7, #16
 8007974:	fb0a 7202 	mla	r2, sl, r2, r7
 8007978:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800797c:	b29b      	uxth	r3, r3
 800797e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007982:	4565      	cmp	r5, ip
 8007984:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007988:	f849 3b04 	str.w	r3, [r9], #4
 800798c:	d8e4      	bhi.n	8007958 <__multiply+0xa8>
 800798e:	9b01      	ldr	r3, [sp, #4]
 8007990:	50e7      	str	r7, [r4, r3]
 8007992:	9b03      	ldr	r3, [sp, #12]
 8007994:	3104      	adds	r1, #4
 8007996:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800799a:	f1b9 0f00 	cmp.w	r9, #0
 800799e:	d020      	beq.n	80079e2 <__multiply+0x132>
 80079a0:	4647      	mov	r7, r8
 80079a2:	46a4      	mov	ip, r4
 80079a4:	f04f 0a00 	mov.w	sl, #0
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	f8b7 b000 	ldrh.w	fp, [r7]
 80079ae:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	fb09 220b 	mla	r2, r9, fp, r2
 80079b8:	4452      	add	r2, sl
 80079ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079be:	f84c 3b04 	str.w	r3, [ip], #4
 80079c2:	f857 3b04 	ldr.w	r3, [r7], #4
 80079c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079ca:	f8bc 3000 	ldrh.w	r3, [ip]
 80079ce:	42bd      	cmp	r5, r7
 80079d0:	fb09 330a 	mla	r3, r9, sl, r3
 80079d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80079d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079dc:	d8e5      	bhi.n	80079aa <__multiply+0xfa>
 80079de:	9a01      	ldr	r2, [sp, #4]
 80079e0:	50a3      	str	r3, [r4, r2]
 80079e2:	3404      	adds	r4, #4
 80079e4:	e79f      	b.n	8007926 <__multiply+0x76>
 80079e6:	3e01      	subs	r6, #1
 80079e8:	e7a1      	b.n	800792e <__multiply+0x7e>
 80079ea:	bf00      	nop
 80079ec:	08008e75 	.word	0x08008e75
 80079f0:	08008ee6 	.word	0x08008ee6

080079f4 <__pow5mult>:
 80079f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f8:	4615      	mov	r5, r2
 80079fa:	f012 0203 	ands.w	r2, r2, #3
 80079fe:	4607      	mov	r7, r0
 8007a00:	460e      	mov	r6, r1
 8007a02:	d007      	beq.n	8007a14 <__pow5mult+0x20>
 8007a04:	4c25      	ldr	r4, [pc, #148]	@ (8007a9c <__pow5mult+0xa8>)
 8007a06:	3a01      	subs	r2, #1
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a0e:	f7ff fe5d 	bl	80076cc <__multadd>
 8007a12:	4606      	mov	r6, r0
 8007a14:	10ad      	asrs	r5, r5, #2
 8007a16:	d03d      	beq.n	8007a94 <__pow5mult+0xa0>
 8007a18:	69fc      	ldr	r4, [r7, #28]
 8007a1a:	b97c      	cbnz	r4, 8007a3c <__pow5mult+0x48>
 8007a1c:	2010      	movs	r0, #16
 8007a1e:	f7fc fc89 	bl	8004334 <malloc>
 8007a22:	4602      	mov	r2, r0
 8007a24:	61f8      	str	r0, [r7, #28]
 8007a26:	b928      	cbnz	r0, 8007a34 <__pow5mult+0x40>
 8007a28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8007aa0 <__pow5mult+0xac>)
 8007a2e:	481d      	ldr	r0, [pc, #116]	@ (8007aa4 <__pow5mult+0xb0>)
 8007a30:	f000 fd2c 	bl	800848c <__assert_func>
 8007a34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a38:	6004      	str	r4, [r0, #0]
 8007a3a:	60c4      	str	r4, [r0, #12]
 8007a3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a44:	b94c      	cbnz	r4, 8007a5a <__pow5mult+0x66>
 8007a46:	f240 2171 	movw	r1, #625	@ 0x271
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	f7ff ff1a 	bl	8007884 <__i2b>
 8007a50:	2300      	movs	r3, #0
 8007a52:	4604      	mov	r4, r0
 8007a54:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a58:	6003      	str	r3, [r0, #0]
 8007a5a:	f04f 0900 	mov.w	r9, #0
 8007a5e:	07eb      	lsls	r3, r5, #31
 8007a60:	d50a      	bpl.n	8007a78 <__pow5mult+0x84>
 8007a62:	4631      	mov	r1, r6
 8007a64:	4622      	mov	r2, r4
 8007a66:	4638      	mov	r0, r7
 8007a68:	f7ff ff22 	bl	80078b0 <__multiply>
 8007a6c:	4680      	mov	r8, r0
 8007a6e:	4631      	mov	r1, r6
 8007a70:	4638      	mov	r0, r7
 8007a72:	f7ff fe09 	bl	8007688 <_Bfree>
 8007a76:	4646      	mov	r6, r8
 8007a78:	106d      	asrs	r5, r5, #1
 8007a7a:	d00b      	beq.n	8007a94 <__pow5mult+0xa0>
 8007a7c:	6820      	ldr	r0, [r4, #0]
 8007a7e:	b938      	cbnz	r0, 8007a90 <__pow5mult+0x9c>
 8007a80:	4622      	mov	r2, r4
 8007a82:	4621      	mov	r1, r4
 8007a84:	4638      	mov	r0, r7
 8007a86:	f7ff ff13 	bl	80078b0 <__multiply>
 8007a8a:	6020      	str	r0, [r4, #0]
 8007a8c:	f8c0 9000 	str.w	r9, [r0]
 8007a90:	4604      	mov	r4, r0
 8007a92:	e7e4      	b.n	8007a5e <__pow5mult+0x6a>
 8007a94:	4630      	mov	r0, r6
 8007a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a9a:	bf00      	nop
 8007a9c:	08008fe0 	.word	0x08008fe0
 8007aa0:	08008e06 	.word	0x08008e06
 8007aa4:	08008ee6 	.word	0x08008ee6

08007aa8 <__lshift>:
 8007aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aac:	460c      	mov	r4, r1
 8007aae:	4607      	mov	r7, r0
 8007ab0:	4691      	mov	r9, r2
 8007ab2:	6923      	ldr	r3, [r4, #16]
 8007ab4:	6849      	ldr	r1, [r1, #4]
 8007ab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007aba:	68a3      	ldr	r3, [r4, #8]
 8007abc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ac0:	f108 0601 	add.w	r6, r8, #1
 8007ac4:	42b3      	cmp	r3, r6
 8007ac6:	db0b      	blt.n	8007ae0 <__lshift+0x38>
 8007ac8:	4638      	mov	r0, r7
 8007aca:	f7ff fd9d 	bl	8007608 <_Balloc>
 8007ace:	4605      	mov	r5, r0
 8007ad0:	b948      	cbnz	r0, 8007ae6 <__lshift+0x3e>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ad8:	4b27      	ldr	r3, [pc, #156]	@ (8007b78 <__lshift+0xd0>)
 8007ada:	4828      	ldr	r0, [pc, #160]	@ (8007b7c <__lshift+0xd4>)
 8007adc:	f000 fcd6 	bl	800848c <__assert_func>
 8007ae0:	3101      	adds	r1, #1
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	e7ee      	b.n	8007ac4 <__lshift+0x1c>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f100 0114 	add.w	r1, r0, #20
 8007aec:	f100 0210 	add.w	r2, r0, #16
 8007af0:	4618      	mov	r0, r3
 8007af2:	4553      	cmp	r3, sl
 8007af4:	db33      	blt.n	8007b5e <__lshift+0xb6>
 8007af6:	6920      	ldr	r0, [r4, #16]
 8007af8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007afc:	f104 0314 	add.w	r3, r4, #20
 8007b00:	f019 091f 	ands.w	r9, r9, #31
 8007b04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b0c:	d02b      	beq.n	8007b66 <__lshift+0xbe>
 8007b0e:	468a      	mov	sl, r1
 8007b10:	2200      	movs	r2, #0
 8007b12:	f1c9 0e20 	rsb	lr, r9, #32
 8007b16:	6818      	ldr	r0, [r3, #0]
 8007b18:	fa00 f009 	lsl.w	r0, r0, r9
 8007b1c:	4310      	orrs	r0, r2
 8007b1e:	f84a 0b04 	str.w	r0, [sl], #4
 8007b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b26:	459c      	cmp	ip, r3
 8007b28:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b2c:	d8f3      	bhi.n	8007b16 <__lshift+0x6e>
 8007b2e:	ebac 0304 	sub.w	r3, ip, r4
 8007b32:	3b15      	subs	r3, #21
 8007b34:	f023 0303 	bic.w	r3, r3, #3
 8007b38:	3304      	adds	r3, #4
 8007b3a:	f104 0015 	add.w	r0, r4, #21
 8007b3e:	4560      	cmp	r0, ip
 8007b40:	bf88      	it	hi
 8007b42:	2304      	movhi	r3, #4
 8007b44:	50ca      	str	r2, [r1, r3]
 8007b46:	b10a      	cbz	r2, 8007b4c <__lshift+0xa4>
 8007b48:	f108 0602 	add.w	r6, r8, #2
 8007b4c:	3e01      	subs	r6, #1
 8007b4e:	4638      	mov	r0, r7
 8007b50:	4621      	mov	r1, r4
 8007b52:	612e      	str	r6, [r5, #16]
 8007b54:	f7ff fd98 	bl	8007688 <_Bfree>
 8007b58:	4628      	mov	r0, r5
 8007b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b62:	3301      	adds	r3, #1
 8007b64:	e7c5      	b.n	8007af2 <__lshift+0x4a>
 8007b66:	3904      	subs	r1, #4
 8007b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b6c:	459c      	cmp	ip, r3
 8007b6e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b72:	d8f9      	bhi.n	8007b68 <__lshift+0xc0>
 8007b74:	e7ea      	b.n	8007b4c <__lshift+0xa4>
 8007b76:	bf00      	nop
 8007b78:	08008e75 	.word	0x08008e75
 8007b7c:	08008ee6 	.word	0x08008ee6

08007b80 <__mcmp>:
 8007b80:	4603      	mov	r3, r0
 8007b82:	690a      	ldr	r2, [r1, #16]
 8007b84:	6900      	ldr	r0, [r0, #16]
 8007b86:	b530      	push	{r4, r5, lr}
 8007b88:	1a80      	subs	r0, r0, r2
 8007b8a:	d10e      	bne.n	8007baa <__mcmp+0x2a>
 8007b8c:	3314      	adds	r3, #20
 8007b8e:	3114      	adds	r1, #20
 8007b90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ba0:	4295      	cmp	r5, r2
 8007ba2:	d003      	beq.n	8007bac <__mcmp+0x2c>
 8007ba4:	d205      	bcs.n	8007bb2 <__mcmp+0x32>
 8007ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8007baa:	bd30      	pop	{r4, r5, pc}
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	d3f3      	bcc.n	8007b98 <__mcmp+0x18>
 8007bb0:	e7fb      	b.n	8007baa <__mcmp+0x2a>
 8007bb2:	2001      	movs	r0, #1
 8007bb4:	e7f9      	b.n	8007baa <__mcmp+0x2a>
	...

08007bb8 <__mdiff>:
 8007bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	4689      	mov	r9, r1
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4648      	mov	r0, r9
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	f7ff ffdb 	bl	8007b80 <__mcmp>
 8007bca:	1e05      	subs	r5, r0, #0
 8007bcc:	d112      	bne.n	8007bf4 <__mdiff+0x3c>
 8007bce:	4629      	mov	r1, r5
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f7ff fd19 	bl	8007608 <_Balloc>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	b928      	cbnz	r0, 8007be6 <__mdiff+0x2e>
 8007bda:	f240 2137 	movw	r1, #567	@ 0x237
 8007bde:	4b3e      	ldr	r3, [pc, #248]	@ (8007cd8 <__mdiff+0x120>)
 8007be0:	483e      	ldr	r0, [pc, #248]	@ (8007cdc <__mdiff+0x124>)
 8007be2:	f000 fc53 	bl	800848c <__assert_func>
 8007be6:	2301      	movs	r3, #1
 8007be8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007bec:	4610      	mov	r0, r2
 8007bee:	b003      	add	sp, #12
 8007bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf4:	bfbc      	itt	lt
 8007bf6:	464b      	movlt	r3, r9
 8007bf8:	46a1      	movlt	r9, r4
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c00:	bfba      	itte	lt
 8007c02:	461c      	movlt	r4, r3
 8007c04:	2501      	movlt	r5, #1
 8007c06:	2500      	movge	r5, #0
 8007c08:	f7ff fcfe 	bl	8007608 <_Balloc>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	b918      	cbnz	r0, 8007c18 <__mdiff+0x60>
 8007c10:	f240 2145 	movw	r1, #581	@ 0x245
 8007c14:	4b30      	ldr	r3, [pc, #192]	@ (8007cd8 <__mdiff+0x120>)
 8007c16:	e7e3      	b.n	8007be0 <__mdiff+0x28>
 8007c18:	f100 0b14 	add.w	fp, r0, #20
 8007c1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c20:	f109 0310 	add.w	r3, r9, #16
 8007c24:	60c5      	str	r5, [r0, #12]
 8007c26:	f04f 0c00 	mov.w	ip, #0
 8007c2a:	f109 0514 	add.w	r5, r9, #20
 8007c2e:	46d9      	mov	r9, fp
 8007c30:	6926      	ldr	r6, [r4, #16]
 8007c32:	f104 0e14 	add.w	lr, r4, #20
 8007c36:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c3a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	9b01      	ldr	r3, [sp, #4]
 8007c42:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c46:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c4a:	b281      	uxth	r1, r0
 8007c4c:	9301      	str	r3, [sp, #4]
 8007c4e:	fa1f f38a 	uxth.w	r3, sl
 8007c52:	1a5b      	subs	r3, r3, r1
 8007c54:	0c00      	lsrs	r0, r0, #16
 8007c56:	4463      	add	r3, ip
 8007c58:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c5c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c66:	4576      	cmp	r6, lr
 8007c68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c6c:	f849 3b04 	str.w	r3, [r9], #4
 8007c70:	d8e6      	bhi.n	8007c40 <__mdiff+0x88>
 8007c72:	1b33      	subs	r3, r6, r4
 8007c74:	3b15      	subs	r3, #21
 8007c76:	f023 0303 	bic.w	r3, r3, #3
 8007c7a:	3415      	adds	r4, #21
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	42a6      	cmp	r6, r4
 8007c80:	bf38      	it	cc
 8007c82:	2304      	movcc	r3, #4
 8007c84:	441d      	add	r5, r3
 8007c86:	445b      	add	r3, fp
 8007c88:	461e      	mov	r6, r3
 8007c8a:	462c      	mov	r4, r5
 8007c8c:	4544      	cmp	r4, r8
 8007c8e:	d30e      	bcc.n	8007cae <__mdiff+0xf6>
 8007c90:	f108 0103 	add.w	r1, r8, #3
 8007c94:	1b49      	subs	r1, r1, r5
 8007c96:	f021 0103 	bic.w	r1, r1, #3
 8007c9a:	3d03      	subs	r5, #3
 8007c9c:	45a8      	cmp	r8, r5
 8007c9e:	bf38      	it	cc
 8007ca0:	2100      	movcc	r1, #0
 8007ca2:	440b      	add	r3, r1
 8007ca4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ca8:	b199      	cbz	r1, 8007cd2 <__mdiff+0x11a>
 8007caa:	6117      	str	r7, [r2, #16]
 8007cac:	e79e      	b.n	8007bec <__mdiff+0x34>
 8007cae:	46e6      	mov	lr, ip
 8007cb0:	f854 1b04 	ldr.w	r1, [r4], #4
 8007cb4:	fa1f fc81 	uxth.w	ip, r1
 8007cb8:	44f4      	add	ip, lr
 8007cba:	0c08      	lsrs	r0, r1, #16
 8007cbc:	4471      	add	r1, lr
 8007cbe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007cc2:	b289      	uxth	r1, r1
 8007cc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007cc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ccc:	f846 1b04 	str.w	r1, [r6], #4
 8007cd0:	e7dc      	b.n	8007c8c <__mdiff+0xd4>
 8007cd2:	3f01      	subs	r7, #1
 8007cd4:	e7e6      	b.n	8007ca4 <__mdiff+0xec>
 8007cd6:	bf00      	nop
 8007cd8:	08008e75 	.word	0x08008e75
 8007cdc:	08008ee6 	.word	0x08008ee6

08007ce0 <__ulp>:
 8007ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8007d1c <__ulp+0x3c>)
 8007ce2:	400b      	ands	r3, r1
 8007ce4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	dc08      	bgt.n	8007cfe <__ulp+0x1e>
 8007cec:	425b      	negs	r3, r3
 8007cee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007cf2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007cf6:	da04      	bge.n	8007d02 <__ulp+0x22>
 8007cf8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007cfc:	4113      	asrs	r3, r2
 8007cfe:	2200      	movs	r2, #0
 8007d00:	e008      	b.n	8007d14 <__ulp+0x34>
 8007d02:	f1a2 0314 	sub.w	r3, r2, #20
 8007d06:	2b1e      	cmp	r3, #30
 8007d08:	bfd6      	itet	le
 8007d0a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007d0e:	2201      	movgt	r2, #1
 8007d10:	40da      	lsrle	r2, r3
 8007d12:	2300      	movs	r3, #0
 8007d14:	4619      	mov	r1, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	7ff00000 	.word	0x7ff00000

08007d20 <__b2d>:
 8007d20:	6902      	ldr	r2, [r0, #16]
 8007d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d24:	f100 0614 	add.w	r6, r0, #20
 8007d28:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007d2c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007d30:	4f1e      	ldr	r7, [pc, #120]	@ (8007dac <__b2d+0x8c>)
 8007d32:	4620      	mov	r0, r4
 8007d34:	f7ff fd5a 	bl	80077ec <__hi0bits>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	f1c0 0020 	rsb	r0, r0, #32
 8007d3e:	2b0a      	cmp	r3, #10
 8007d40:	f1a2 0504 	sub.w	r5, r2, #4
 8007d44:	6008      	str	r0, [r1, #0]
 8007d46:	dc12      	bgt.n	8007d6e <__b2d+0x4e>
 8007d48:	42ae      	cmp	r6, r5
 8007d4a:	bf2c      	ite	cs
 8007d4c:	2200      	movcs	r2, #0
 8007d4e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007d52:	f1c3 0c0b 	rsb	ip, r3, #11
 8007d56:	3315      	adds	r3, #21
 8007d58:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007d5c:	fa04 f303 	lsl.w	r3, r4, r3
 8007d60:	fa22 f20c 	lsr.w	r2, r2, ip
 8007d64:	ea4e 0107 	orr.w	r1, lr, r7
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d6e:	42ae      	cmp	r6, r5
 8007d70:	bf36      	itet	cc
 8007d72:	f1a2 0508 	subcc.w	r5, r2, #8
 8007d76:	2200      	movcs	r2, #0
 8007d78:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007d7c:	3b0b      	subs	r3, #11
 8007d7e:	d012      	beq.n	8007da6 <__b2d+0x86>
 8007d80:	f1c3 0720 	rsb	r7, r3, #32
 8007d84:	fa22 f107 	lsr.w	r1, r2, r7
 8007d88:	409c      	lsls	r4, r3
 8007d8a:	430c      	orrs	r4, r1
 8007d8c:	42b5      	cmp	r5, r6
 8007d8e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007d92:	bf94      	ite	ls
 8007d94:	2400      	movls	r4, #0
 8007d96:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007d9a:	409a      	lsls	r2, r3
 8007d9c:	40fc      	lsrs	r4, r7
 8007d9e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007da2:	4322      	orrs	r2, r4
 8007da4:	e7e1      	b.n	8007d6a <__b2d+0x4a>
 8007da6:	ea44 0107 	orr.w	r1, r4, r7
 8007daa:	e7de      	b.n	8007d6a <__b2d+0x4a>
 8007dac:	3ff00000 	.word	0x3ff00000

08007db0 <__d2b>:
 8007db0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007db4:	2101      	movs	r1, #1
 8007db6:	4690      	mov	r8, r2
 8007db8:	4699      	mov	r9, r3
 8007dba:	9e08      	ldr	r6, [sp, #32]
 8007dbc:	f7ff fc24 	bl	8007608 <_Balloc>
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	b930      	cbnz	r0, 8007dd2 <__d2b+0x22>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	f240 310f 	movw	r1, #783	@ 0x30f
 8007dca:	4b23      	ldr	r3, [pc, #140]	@ (8007e58 <__d2b+0xa8>)
 8007dcc:	4823      	ldr	r0, [pc, #140]	@ (8007e5c <__d2b+0xac>)
 8007dce:	f000 fb5d 	bl	800848c <__assert_func>
 8007dd2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007dd6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dda:	b10d      	cbz	r5, 8007de0 <__d2b+0x30>
 8007ddc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	f1b8 0300 	subs.w	r3, r8, #0
 8007de6:	d024      	beq.n	8007e32 <__d2b+0x82>
 8007de8:	4668      	mov	r0, sp
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	f7ff fd1d 	bl	800782a <__lo0bits>
 8007df0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007df4:	b1d8      	cbz	r0, 8007e2e <__d2b+0x7e>
 8007df6:	f1c0 0320 	rsb	r3, r0, #32
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	430b      	orrs	r3, r1
 8007e00:	40c2      	lsrs	r2, r0
 8007e02:	6163      	str	r3, [r4, #20]
 8007e04:	9201      	str	r2, [sp, #4]
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	bf0c      	ite	eq
 8007e0c:	2201      	moveq	r2, #1
 8007e0e:	2202      	movne	r2, #2
 8007e10:	61a3      	str	r3, [r4, #24]
 8007e12:	6122      	str	r2, [r4, #16]
 8007e14:	b1ad      	cbz	r5, 8007e42 <__d2b+0x92>
 8007e16:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e1a:	4405      	add	r5, r0
 8007e1c:	6035      	str	r5, [r6, #0]
 8007e1e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e24:	6018      	str	r0, [r3, #0]
 8007e26:	4620      	mov	r0, r4
 8007e28:	b002      	add	sp, #8
 8007e2a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007e2e:	6161      	str	r1, [r4, #20]
 8007e30:	e7e9      	b.n	8007e06 <__d2b+0x56>
 8007e32:	a801      	add	r0, sp, #4
 8007e34:	f7ff fcf9 	bl	800782a <__lo0bits>
 8007e38:	9b01      	ldr	r3, [sp, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	6163      	str	r3, [r4, #20]
 8007e3e:	3020      	adds	r0, #32
 8007e40:	e7e7      	b.n	8007e12 <__d2b+0x62>
 8007e42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007e46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e4a:	6030      	str	r0, [r6, #0]
 8007e4c:	6918      	ldr	r0, [r3, #16]
 8007e4e:	f7ff fccd 	bl	80077ec <__hi0bits>
 8007e52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e56:	e7e4      	b.n	8007e22 <__d2b+0x72>
 8007e58:	08008e75 	.word	0x08008e75
 8007e5c:	08008ee6 	.word	0x08008ee6

08007e60 <__ratio>:
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	b085      	sub	sp, #20
 8007e66:	e9cd 1000 	strd	r1, r0, [sp]
 8007e6a:	a902      	add	r1, sp, #8
 8007e6c:	f7ff ff58 	bl	8007d20 <__b2d>
 8007e70:	468b      	mov	fp, r1
 8007e72:	4606      	mov	r6, r0
 8007e74:	460f      	mov	r7, r1
 8007e76:	9800      	ldr	r0, [sp, #0]
 8007e78:	a903      	add	r1, sp, #12
 8007e7a:	f7ff ff51 	bl	8007d20 <__b2d>
 8007e7e:	460d      	mov	r5, r1
 8007e80:	9b01      	ldr	r3, [sp, #4]
 8007e82:	4689      	mov	r9, r1
 8007e84:	6919      	ldr	r1, [r3, #16]
 8007e86:	9b00      	ldr	r3, [sp, #0]
 8007e88:	4604      	mov	r4, r0
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	1ac9      	subs	r1, r1, r3
 8007e90:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bfcd      	iteet	gt
 8007e9e:	463a      	movgt	r2, r7
 8007ea0:	462a      	movle	r2, r5
 8007ea2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ea6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007eaa:	bfd8      	it	le
 8007eac:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007eb0:	464b      	mov	r3, r9
 8007eb2:	4622      	mov	r2, r4
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	f7f8 fc39 	bl	800072c <__aeabi_ddiv>
 8007eba:	b005      	add	sp, #20
 8007ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ec0 <__copybits>:
 8007ec0:	3901      	subs	r1, #1
 8007ec2:	b570      	push	{r4, r5, r6, lr}
 8007ec4:	1149      	asrs	r1, r1, #5
 8007ec6:	6914      	ldr	r4, [r2, #16]
 8007ec8:	3101      	adds	r1, #1
 8007eca:	f102 0314 	add.w	r3, r2, #20
 8007ece:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ed2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ed6:	1f05      	subs	r5, r0, #4
 8007ed8:	42a3      	cmp	r3, r4
 8007eda:	d30c      	bcc.n	8007ef6 <__copybits+0x36>
 8007edc:	1aa3      	subs	r3, r4, r2
 8007ede:	3b11      	subs	r3, #17
 8007ee0:	f023 0303 	bic.w	r3, r3, #3
 8007ee4:	3211      	adds	r2, #17
 8007ee6:	42a2      	cmp	r2, r4
 8007ee8:	bf88      	it	hi
 8007eea:	2300      	movhi	r3, #0
 8007eec:	4418      	add	r0, r3
 8007eee:	2300      	movs	r3, #0
 8007ef0:	4288      	cmp	r0, r1
 8007ef2:	d305      	bcc.n	8007f00 <__copybits+0x40>
 8007ef4:	bd70      	pop	{r4, r5, r6, pc}
 8007ef6:	f853 6b04 	ldr.w	r6, [r3], #4
 8007efa:	f845 6f04 	str.w	r6, [r5, #4]!
 8007efe:	e7eb      	b.n	8007ed8 <__copybits+0x18>
 8007f00:	f840 3b04 	str.w	r3, [r0], #4
 8007f04:	e7f4      	b.n	8007ef0 <__copybits+0x30>

08007f06 <__any_on>:
 8007f06:	f100 0214 	add.w	r2, r0, #20
 8007f0a:	6900      	ldr	r0, [r0, #16]
 8007f0c:	114b      	asrs	r3, r1, #5
 8007f0e:	4298      	cmp	r0, r3
 8007f10:	b510      	push	{r4, lr}
 8007f12:	db11      	blt.n	8007f38 <__any_on+0x32>
 8007f14:	dd0a      	ble.n	8007f2c <__any_on+0x26>
 8007f16:	f011 011f 	ands.w	r1, r1, #31
 8007f1a:	d007      	beq.n	8007f2c <__any_on+0x26>
 8007f1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007f20:	fa24 f001 	lsr.w	r0, r4, r1
 8007f24:	fa00 f101 	lsl.w	r1, r0, r1
 8007f28:	428c      	cmp	r4, r1
 8007f2a:	d10b      	bne.n	8007f44 <__any_on+0x3e>
 8007f2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d803      	bhi.n	8007f3c <__any_on+0x36>
 8007f34:	2000      	movs	r0, #0
 8007f36:	bd10      	pop	{r4, pc}
 8007f38:	4603      	mov	r3, r0
 8007f3a:	e7f7      	b.n	8007f2c <__any_on+0x26>
 8007f3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f40:	2900      	cmp	r1, #0
 8007f42:	d0f5      	beq.n	8007f30 <__any_on+0x2a>
 8007f44:	2001      	movs	r0, #1
 8007f46:	e7f6      	b.n	8007f36 <__any_on+0x30>

08007f48 <_strtol_l.isra.0>:
 8007f48:	2b24      	cmp	r3, #36	@ 0x24
 8007f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4e:	4686      	mov	lr, r0
 8007f50:	4690      	mov	r8, r2
 8007f52:	d801      	bhi.n	8007f58 <_strtol_l.isra.0+0x10>
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d106      	bne.n	8007f66 <_strtol_l.isra.0+0x1e>
 8007f58:	f7fe f910 	bl	800617c <__errno>
 8007f5c:	2316      	movs	r3, #22
 8007f5e:	6003      	str	r3, [r0, #0]
 8007f60:	2000      	movs	r0, #0
 8007f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f66:	460d      	mov	r5, r1
 8007f68:	4833      	ldr	r0, [pc, #204]	@ (8008038 <_strtol_l.isra.0+0xf0>)
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f70:	5d06      	ldrb	r6, [r0, r4]
 8007f72:	f016 0608 	ands.w	r6, r6, #8
 8007f76:	d1f8      	bne.n	8007f6a <_strtol_l.isra.0+0x22>
 8007f78:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f7a:	d110      	bne.n	8007f9e <_strtol_l.isra.0+0x56>
 8007f7c:	2601      	movs	r6, #1
 8007f7e:	782c      	ldrb	r4, [r5, #0]
 8007f80:	1c95      	adds	r5, r2, #2
 8007f82:	f033 0210 	bics.w	r2, r3, #16
 8007f86:	d115      	bne.n	8007fb4 <_strtol_l.isra.0+0x6c>
 8007f88:	2c30      	cmp	r4, #48	@ 0x30
 8007f8a:	d10d      	bne.n	8007fa8 <_strtol_l.isra.0+0x60>
 8007f8c:	782a      	ldrb	r2, [r5, #0]
 8007f8e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f92:	2a58      	cmp	r2, #88	@ 0x58
 8007f94:	d108      	bne.n	8007fa8 <_strtol_l.isra.0+0x60>
 8007f96:	786c      	ldrb	r4, [r5, #1]
 8007f98:	3502      	adds	r5, #2
 8007f9a:	2310      	movs	r3, #16
 8007f9c:	e00a      	b.n	8007fb4 <_strtol_l.isra.0+0x6c>
 8007f9e:	2c2b      	cmp	r4, #43	@ 0x2b
 8007fa0:	bf04      	itt	eq
 8007fa2:	782c      	ldrbeq	r4, [r5, #0]
 8007fa4:	1c95      	addeq	r5, r2, #2
 8007fa6:	e7ec      	b.n	8007f82 <_strtol_l.isra.0+0x3a>
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1f6      	bne.n	8007f9a <_strtol_l.isra.0+0x52>
 8007fac:	2c30      	cmp	r4, #48	@ 0x30
 8007fae:	bf14      	ite	ne
 8007fb0:	230a      	movne	r3, #10
 8007fb2:	2308      	moveq	r3, #8
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007fba:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007fbe:	fbbc f9f3 	udiv	r9, ip, r3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	fb03 ca19 	mls	sl, r3, r9, ip
 8007fc8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007fcc:	2f09      	cmp	r7, #9
 8007fce:	d80f      	bhi.n	8007ff0 <_strtol_l.isra.0+0xa8>
 8007fd0:	463c      	mov	r4, r7
 8007fd2:	42a3      	cmp	r3, r4
 8007fd4:	dd1b      	ble.n	800800e <_strtol_l.isra.0+0xc6>
 8007fd6:	1c57      	adds	r7, r2, #1
 8007fd8:	d007      	beq.n	8007fea <_strtol_l.isra.0+0xa2>
 8007fda:	4581      	cmp	r9, r0
 8007fdc:	d314      	bcc.n	8008008 <_strtol_l.isra.0+0xc0>
 8007fde:	d101      	bne.n	8007fe4 <_strtol_l.isra.0+0x9c>
 8007fe0:	45a2      	cmp	sl, r4
 8007fe2:	db11      	blt.n	8008008 <_strtol_l.isra.0+0xc0>
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	fb00 4003 	mla	r0, r0, r3, r4
 8007fea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fee:	e7eb      	b.n	8007fc8 <_strtol_l.isra.0+0x80>
 8007ff0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007ff4:	2f19      	cmp	r7, #25
 8007ff6:	d801      	bhi.n	8007ffc <_strtol_l.isra.0+0xb4>
 8007ff8:	3c37      	subs	r4, #55	@ 0x37
 8007ffa:	e7ea      	b.n	8007fd2 <_strtol_l.isra.0+0x8a>
 8007ffc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008000:	2f19      	cmp	r7, #25
 8008002:	d804      	bhi.n	800800e <_strtol_l.isra.0+0xc6>
 8008004:	3c57      	subs	r4, #87	@ 0x57
 8008006:	e7e4      	b.n	8007fd2 <_strtol_l.isra.0+0x8a>
 8008008:	f04f 32ff 	mov.w	r2, #4294967295
 800800c:	e7ed      	b.n	8007fea <_strtol_l.isra.0+0xa2>
 800800e:	1c53      	adds	r3, r2, #1
 8008010:	d108      	bne.n	8008024 <_strtol_l.isra.0+0xdc>
 8008012:	2322      	movs	r3, #34	@ 0x22
 8008014:	4660      	mov	r0, ip
 8008016:	f8ce 3000 	str.w	r3, [lr]
 800801a:	f1b8 0f00 	cmp.w	r8, #0
 800801e:	d0a0      	beq.n	8007f62 <_strtol_l.isra.0+0x1a>
 8008020:	1e69      	subs	r1, r5, #1
 8008022:	e006      	b.n	8008032 <_strtol_l.isra.0+0xea>
 8008024:	b106      	cbz	r6, 8008028 <_strtol_l.isra.0+0xe0>
 8008026:	4240      	negs	r0, r0
 8008028:	f1b8 0f00 	cmp.w	r8, #0
 800802c:	d099      	beq.n	8007f62 <_strtol_l.isra.0+0x1a>
 800802e:	2a00      	cmp	r2, #0
 8008030:	d1f6      	bne.n	8008020 <_strtol_l.isra.0+0xd8>
 8008032:	f8c8 1000 	str.w	r1, [r8]
 8008036:	e794      	b.n	8007f62 <_strtol_l.isra.0+0x1a>
 8008038:	080090e1 	.word	0x080090e1

0800803c <_strtol_r>:
 800803c:	f7ff bf84 	b.w	8007f48 <_strtol_l.isra.0>

08008040 <__ascii_wctomb>:
 8008040:	4603      	mov	r3, r0
 8008042:	4608      	mov	r0, r1
 8008044:	b141      	cbz	r1, 8008058 <__ascii_wctomb+0x18>
 8008046:	2aff      	cmp	r2, #255	@ 0xff
 8008048:	d904      	bls.n	8008054 <__ascii_wctomb+0x14>
 800804a:	228a      	movs	r2, #138	@ 0x8a
 800804c:	f04f 30ff 	mov.w	r0, #4294967295
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	4770      	bx	lr
 8008054:	2001      	movs	r0, #1
 8008056:	700a      	strb	r2, [r1, #0]
 8008058:	4770      	bx	lr

0800805a <__ssputs_r>:
 800805a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800805e:	461f      	mov	r7, r3
 8008060:	688e      	ldr	r6, [r1, #8]
 8008062:	4682      	mov	sl, r0
 8008064:	42be      	cmp	r6, r7
 8008066:	460c      	mov	r4, r1
 8008068:	4690      	mov	r8, r2
 800806a:	680b      	ldr	r3, [r1, #0]
 800806c:	d82d      	bhi.n	80080ca <__ssputs_r+0x70>
 800806e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008072:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008076:	d026      	beq.n	80080c6 <__ssputs_r+0x6c>
 8008078:	6965      	ldr	r5, [r4, #20]
 800807a:	6909      	ldr	r1, [r1, #16]
 800807c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008080:	eba3 0901 	sub.w	r9, r3, r1
 8008084:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008088:	1c7b      	adds	r3, r7, #1
 800808a:	444b      	add	r3, r9
 800808c:	106d      	asrs	r5, r5, #1
 800808e:	429d      	cmp	r5, r3
 8008090:	bf38      	it	cc
 8008092:	461d      	movcc	r5, r3
 8008094:	0553      	lsls	r3, r2, #21
 8008096:	d527      	bpl.n	80080e8 <__ssputs_r+0x8e>
 8008098:	4629      	mov	r1, r5
 800809a:	f7fc f975 	bl	8004388 <_malloc_r>
 800809e:	4606      	mov	r6, r0
 80080a0:	b360      	cbz	r0, 80080fc <__ssputs_r+0xa2>
 80080a2:	464a      	mov	r2, r9
 80080a4:	6921      	ldr	r1, [r4, #16]
 80080a6:	f7fe f8a4 	bl	80061f2 <memcpy>
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b4:	81a3      	strh	r3, [r4, #12]
 80080b6:	6126      	str	r6, [r4, #16]
 80080b8:	444e      	add	r6, r9
 80080ba:	6026      	str	r6, [r4, #0]
 80080bc:	463e      	mov	r6, r7
 80080be:	6165      	str	r5, [r4, #20]
 80080c0:	eba5 0509 	sub.w	r5, r5, r9
 80080c4:	60a5      	str	r5, [r4, #8]
 80080c6:	42be      	cmp	r6, r7
 80080c8:	d900      	bls.n	80080cc <__ssputs_r+0x72>
 80080ca:	463e      	mov	r6, r7
 80080cc:	4632      	mov	r2, r6
 80080ce:	4641      	mov	r1, r8
 80080d0:	6820      	ldr	r0, [r4, #0]
 80080d2:	f000 f9c1 	bl	8008458 <memmove>
 80080d6:	2000      	movs	r0, #0
 80080d8:	68a3      	ldr	r3, [r4, #8]
 80080da:	1b9b      	subs	r3, r3, r6
 80080dc:	60a3      	str	r3, [r4, #8]
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	4433      	add	r3, r6
 80080e2:	6023      	str	r3, [r4, #0]
 80080e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e8:	462a      	mov	r2, r5
 80080ea:	f000 fa01 	bl	80084f0 <_realloc_r>
 80080ee:	4606      	mov	r6, r0
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d1e0      	bne.n	80080b6 <__ssputs_r+0x5c>
 80080f4:	4650      	mov	r0, sl
 80080f6:	6921      	ldr	r1, [r4, #16]
 80080f8:	f7fe fef2 	bl	8006ee0 <_free_r>
 80080fc:	230c      	movs	r3, #12
 80080fe:	f8ca 3000 	str.w	r3, [sl]
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	e7e9      	b.n	80080e4 <__ssputs_r+0x8a>

08008110 <_svfiprintf_r>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	4698      	mov	r8, r3
 8008116:	898b      	ldrh	r3, [r1, #12]
 8008118:	4607      	mov	r7, r0
 800811a:	061b      	lsls	r3, r3, #24
 800811c:	460d      	mov	r5, r1
 800811e:	4614      	mov	r4, r2
 8008120:	b09d      	sub	sp, #116	@ 0x74
 8008122:	d510      	bpl.n	8008146 <_svfiprintf_r+0x36>
 8008124:	690b      	ldr	r3, [r1, #16]
 8008126:	b973      	cbnz	r3, 8008146 <_svfiprintf_r+0x36>
 8008128:	2140      	movs	r1, #64	@ 0x40
 800812a:	f7fc f92d 	bl	8004388 <_malloc_r>
 800812e:	6028      	str	r0, [r5, #0]
 8008130:	6128      	str	r0, [r5, #16]
 8008132:	b930      	cbnz	r0, 8008142 <_svfiprintf_r+0x32>
 8008134:	230c      	movs	r3, #12
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	f04f 30ff 	mov.w	r0, #4294967295
 800813c:	b01d      	add	sp, #116	@ 0x74
 800813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008142:	2340      	movs	r3, #64	@ 0x40
 8008144:	616b      	str	r3, [r5, #20]
 8008146:	2300      	movs	r3, #0
 8008148:	9309      	str	r3, [sp, #36]	@ 0x24
 800814a:	2320      	movs	r3, #32
 800814c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008150:	2330      	movs	r3, #48	@ 0x30
 8008152:	f04f 0901 	mov.w	r9, #1
 8008156:	f8cd 800c 	str.w	r8, [sp, #12]
 800815a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80082f4 <_svfiprintf_r+0x1e4>
 800815e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008162:	4623      	mov	r3, r4
 8008164:	469a      	mov	sl, r3
 8008166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800816a:	b10a      	cbz	r2, 8008170 <_svfiprintf_r+0x60>
 800816c:	2a25      	cmp	r2, #37	@ 0x25
 800816e:	d1f9      	bne.n	8008164 <_svfiprintf_r+0x54>
 8008170:	ebba 0b04 	subs.w	fp, sl, r4
 8008174:	d00b      	beq.n	800818e <_svfiprintf_r+0x7e>
 8008176:	465b      	mov	r3, fp
 8008178:	4622      	mov	r2, r4
 800817a:	4629      	mov	r1, r5
 800817c:	4638      	mov	r0, r7
 800817e:	f7ff ff6c 	bl	800805a <__ssputs_r>
 8008182:	3001      	adds	r0, #1
 8008184:	f000 80a7 	beq.w	80082d6 <_svfiprintf_r+0x1c6>
 8008188:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800818a:	445a      	add	r2, fp
 800818c:	9209      	str	r2, [sp, #36]	@ 0x24
 800818e:	f89a 3000 	ldrb.w	r3, [sl]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 809f 	beq.w	80082d6 <_svfiprintf_r+0x1c6>
 8008198:	2300      	movs	r3, #0
 800819a:	f04f 32ff 	mov.w	r2, #4294967295
 800819e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081a2:	f10a 0a01 	add.w	sl, sl, #1
 80081a6:	9304      	str	r3, [sp, #16]
 80081a8:	9307      	str	r3, [sp, #28]
 80081aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80081b0:	4654      	mov	r4, sl
 80081b2:	2205      	movs	r2, #5
 80081b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b8:	484e      	ldr	r0, [pc, #312]	@ (80082f4 <_svfiprintf_r+0x1e4>)
 80081ba:	f7fe f80c 	bl	80061d6 <memchr>
 80081be:	9a04      	ldr	r2, [sp, #16]
 80081c0:	b9d8      	cbnz	r0, 80081fa <_svfiprintf_r+0xea>
 80081c2:	06d0      	lsls	r0, r2, #27
 80081c4:	bf44      	itt	mi
 80081c6:	2320      	movmi	r3, #32
 80081c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081cc:	0711      	lsls	r1, r2, #28
 80081ce:	bf44      	itt	mi
 80081d0:	232b      	movmi	r3, #43	@ 0x2b
 80081d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081d6:	f89a 3000 	ldrb.w	r3, [sl]
 80081da:	2b2a      	cmp	r3, #42	@ 0x2a
 80081dc:	d015      	beq.n	800820a <_svfiprintf_r+0xfa>
 80081de:	4654      	mov	r4, sl
 80081e0:	2000      	movs	r0, #0
 80081e2:	f04f 0c0a 	mov.w	ip, #10
 80081e6:	9a07      	ldr	r2, [sp, #28]
 80081e8:	4621      	mov	r1, r4
 80081ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ee:	3b30      	subs	r3, #48	@ 0x30
 80081f0:	2b09      	cmp	r3, #9
 80081f2:	d94b      	bls.n	800828c <_svfiprintf_r+0x17c>
 80081f4:	b1b0      	cbz	r0, 8008224 <_svfiprintf_r+0x114>
 80081f6:	9207      	str	r2, [sp, #28]
 80081f8:	e014      	b.n	8008224 <_svfiprintf_r+0x114>
 80081fa:	eba0 0308 	sub.w	r3, r0, r8
 80081fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008202:	4313      	orrs	r3, r2
 8008204:	46a2      	mov	sl, r4
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	e7d2      	b.n	80081b0 <_svfiprintf_r+0xa0>
 800820a:	9b03      	ldr	r3, [sp, #12]
 800820c:	1d19      	adds	r1, r3, #4
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	9103      	str	r1, [sp, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	bfbb      	ittet	lt
 8008216:	425b      	neglt	r3, r3
 8008218:	f042 0202 	orrlt.w	r2, r2, #2
 800821c:	9307      	strge	r3, [sp, #28]
 800821e:	9307      	strlt	r3, [sp, #28]
 8008220:	bfb8      	it	lt
 8008222:	9204      	strlt	r2, [sp, #16]
 8008224:	7823      	ldrb	r3, [r4, #0]
 8008226:	2b2e      	cmp	r3, #46	@ 0x2e
 8008228:	d10a      	bne.n	8008240 <_svfiprintf_r+0x130>
 800822a:	7863      	ldrb	r3, [r4, #1]
 800822c:	2b2a      	cmp	r3, #42	@ 0x2a
 800822e:	d132      	bne.n	8008296 <_svfiprintf_r+0x186>
 8008230:	9b03      	ldr	r3, [sp, #12]
 8008232:	3402      	adds	r4, #2
 8008234:	1d1a      	adds	r2, r3, #4
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	9203      	str	r2, [sp, #12]
 800823a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800823e:	9305      	str	r3, [sp, #20]
 8008240:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80082f8 <_svfiprintf_r+0x1e8>
 8008244:	2203      	movs	r2, #3
 8008246:	4650      	mov	r0, sl
 8008248:	7821      	ldrb	r1, [r4, #0]
 800824a:	f7fd ffc4 	bl	80061d6 <memchr>
 800824e:	b138      	cbz	r0, 8008260 <_svfiprintf_r+0x150>
 8008250:	2240      	movs	r2, #64	@ 0x40
 8008252:	9b04      	ldr	r3, [sp, #16]
 8008254:	eba0 000a 	sub.w	r0, r0, sl
 8008258:	4082      	lsls	r2, r0
 800825a:	4313      	orrs	r3, r2
 800825c:	3401      	adds	r4, #1
 800825e:	9304      	str	r3, [sp, #16]
 8008260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008264:	2206      	movs	r2, #6
 8008266:	4825      	ldr	r0, [pc, #148]	@ (80082fc <_svfiprintf_r+0x1ec>)
 8008268:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800826c:	f7fd ffb3 	bl	80061d6 <memchr>
 8008270:	2800      	cmp	r0, #0
 8008272:	d036      	beq.n	80082e2 <_svfiprintf_r+0x1d2>
 8008274:	4b22      	ldr	r3, [pc, #136]	@ (8008300 <_svfiprintf_r+0x1f0>)
 8008276:	bb1b      	cbnz	r3, 80082c0 <_svfiprintf_r+0x1b0>
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	3307      	adds	r3, #7
 800827c:	f023 0307 	bic.w	r3, r3, #7
 8008280:	3308      	adds	r3, #8
 8008282:	9303      	str	r3, [sp, #12]
 8008284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008286:	4433      	add	r3, r6
 8008288:	9309      	str	r3, [sp, #36]	@ 0x24
 800828a:	e76a      	b.n	8008162 <_svfiprintf_r+0x52>
 800828c:	460c      	mov	r4, r1
 800828e:	2001      	movs	r0, #1
 8008290:	fb0c 3202 	mla	r2, ip, r2, r3
 8008294:	e7a8      	b.n	80081e8 <_svfiprintf_r+0xd8>
 8008296:	2300      	movs	r3, #0
 8008298:	f04f 0c0a 	mov.w	ip, #10
 800829c:	4619      	mov	r1, r3
 800829e:	3401      	adds	r4, #1
 80082a0:	9305      	str	r3, [sp, #20]
 80082a2:	4620      	mov	r0, r4
 80082a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a8:	3a30      	subs	r2, #48	@ 0x30
 80082aa:	2a09      	cmp	r2, #9
 80082ac:	d903      	bls.n	80082b6 <_svfiprintf_r+0x1a6>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0c6      	beq.n	8008240 <_svfiprintf_r+0x130>
 80082b2:	9105      	str	r1, [sp, #20]
 80082b4:	e7c4      	b.n	8008240 <_svfiprintf_r+0x130>
 80082b6:	4604      	mov	r4, r0
 80082b8:	2301      	movs	r3, #1
 80082ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80082be:	e7f0      	b.n	80082a2 <_svfiprintf_r+0x192>
 80082c0:	ab03      	add	r3, sp, #12
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	462a      	mov	r2, r5
 80082c6:	4638      	mov	r0, r7
 80082c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008304 <_svfiprintf_r+0x1f4>)
 80082ca:	a904      	add	r1, sp, #16
 80082cc:	f7fc ff94 	bl	80051f8 <_printf_float>
 80082d0:	1c42      	adds	r2, r0, #1
 80082d2:	4606      	mov	r6, r0
 80082d4:	d1d6      	bne.n	8008284 <_svfiprintf_r+0x174>
 80082d6:	89ab      	ldrh	r3, [r5, #12]
 80082d8:	065b      	lsls	r3, r3, #25
 80082da:	f53f af2d 	bmi.w	8008138 <_svfiprintf_r+0x28>
 80082de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082e0:	e72c      	b.n	800813c <_svfiprintf_r+0x2c>
 80082e2:	ab03      	add	r3, sp, #12
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	462a      	mov	r2, r5
 80082e8:	4638      	mov	r0, r7
 80082ea:	4b06      	ldr	r3, [pc, #24]	@ (8008304 <_svfiprintf_r+0x1f4>)
 80082ec:	a904      	add	r1, sp, #16
 80082ee:	f7fd fa21 	bl	8005734 <_printf_i>
 80082f2:	e7ed      	b.n	80082d0 <_svfiprintf_r+0x1c0>
 80082f4:	08008f3f 	.word	0x08008f3f
 80082f8:	08008f45 	.word	0x08008f45
 80082fc:	08008f49 	.word	0x08008f49
 8008300:	080051f9 	.word	0x080051f9
 8008304:	0800805b 	.word	0x0800805b

08008308 <__sflush_r>:
 8008308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830e:	0716      	lsls	r6, r2, #28
 8008310:	4605      	mov	r5, r0
 8008312:	460c      	mov	r4, r1
 8008314:	d454      	bmi.n	80083c0 <__sflush_r+0xb8>
 8008316:	684b      	ldr	r3, [r1, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	dc02      	bgt.n	8008322 <__sflush_r+0x1a>
 800831c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800831e:	2b00      	cmp	r3, #0
 8008320:	dd48      	ble.n	80083b4 <__sflush_r+0xac>
 8008322:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008324:	2e00      	cmp	r6, #0
 8008326:	d045      	beq.n	80083b4 <__sflush_r+0xac>
 8008328:	2300      	movs	r3, #0
 800832a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800832e:	682f      	ldr	r7, [r5, #0]
 8008330:	6a21      	ldr	r1, [r4, #32]
 8008332:	602b      	str	r3, [r5, #0]
 8008334:	d030      	beq.n	8008398 <__sflush_r+0x90>
 8008336:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	0759      	lsls	r1, r3, #29
 800833c:	d505      	bpl.n	800834a <__sflush_r+0x42>
 800833e:	6863      	ldr	r3, [r4, #4]
 8008340:	1ad2      	subs	r2, r2, r3
 8008342:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008344:	b10b      	cbz	r3, 800834a <__sflush_r+0x42>
 8008346:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008348:	1ad2      	subs	r2, r2, r3
 800834a:	2300      	movs	r3, #0
 800834c:	4628      	mov	r0, r5
 800834e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008350:	6a21      	ldr	r1, [r4, #32]
 8008352:	47b0      	blx	r6
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	d106      	bne.n	8008368 <__sflush_r+0x60>
 800835a:	6829      	ldr	r1, [r5, #0]
 800835c:	291d      	cmp	r1, #29
 800835e:	d82b      	bhi.n	80083b8 <__sflush_r+0xb0>
 8008360:	4a28      	ldr	r2, [pc, #160]	@ (8008404 <__sflush_r+0xfc>)
 8008362:	40ca      	lsrs	r2, r1
 8008364:	07d6      	lsls	r6, r2, #31
 8008366:	d527      	bpl.n	80083b8 <__sflush_r+0xb0>
 8008368:	2200      	movs	r2, #0
 800836a:	6062      	str	r2, [r4, #4]
 800836c:	6922      	ldr	r2, [r4, #16]
 800836e:	04d9      	lsls	r1, r3, #19
 8008370:	6022      	str	r2, [r4, #0]
 8008372:	d504      	bpl.n	800837e <__sflush_r+0x76>
 8008374:	1c42      	adds	r2, r0, #1
 8008376:	d101      	bne.n	800837c <__sflush_r+0x74>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b903      	cbnz	r3, 800837e <__sflush_r+0x76>
 800837c:	6560      	str	r0, [r4, #84]	@ 0x54
 800837e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008380:	602f      	str	r7, [r5, #0]
 8008382:	b1b9      	cbz	r1, 80083b4 <__sflush_r+0xac>
 8008384:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008388:	4299      	cmp	r1, r3
 800838a:	d002      	beq.n	8008392 <__sflush_r+0x8a>
 800838c:	4628      	mov	r0, r5
 800838e:	f7fe fda7 	bl	8006ee0 <_free_r>
 8008392:	2300      	movs	r3, #0
 8008394:	6363      	str	r3, [r4, #52]	@ 0x34
 8008396:	e00d      	b.n	80083b4 <__sflush_r+0xac>
 8008398:	2301      	movs	r3, #1
 800839a:	4628      	mov	r0, r5
 800839c:	47b0      	blx	r6
 800839e:	4602      	mov	r2, r0
 80083a0:	1c50      	adds	r0, r2, #1
 80083a2:	d1c9      	bne.n	8008338 <__sflush_r+0x30>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0c6      	beq.n	8008338 <__sflush_r+0x30>
 80083aa:	2b1d      	cmp	r3, #29
 80083ac:	d001      	beq.n	80083b2 <__sflush_r+0xaa>
 80083ae:	2b16      	cmp	r3, #22
 80083b0:	d11d      	bne.n	80083ee <__sflush_r+0xe6>
 80083b2:	602f      	str	r7, [r5, #0]
 80083b4:	2000      	movs	r0, #0
 80083b6:	e021      	b.n	80083fc <__sflush_r+0xf4>
 80083b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083bc:	b21b      	sxth	r3, r3
 80083be:	e01a      	b.n	80083f6 <__sflush_r+0xee>
 80083c0:	690f      	ldr	r7, [r1, #16]
 80083c2:	2f00      	cmp	r7, #0
 80083c4:	d0f6      	beq.n	80083b4 <__sflush_r+0xac>
 80083c6:	0793      	lsls	r3, r2, #30
 80083c8:	bf18      	it	ne
 80083ca:	2300      	movne	r3, #0
 80083cc:	680e      	ldr	r6, [r1, #0]
 80083ce:	bf08      	it	eq
 80083d0:	694b      	ldreq	r3, [r1, #20]
 80083d2:	1bf6      	subs	r6, r6, r7
 80083d4:	600f      	str	r7, [r1, #0]
 80083d6:	608b      	str	r3, [r1, #8]
 80083d8:	2e00      	cmp	r6, #0
 80083da:	ddeb      	ble.n	80083b4 <__sflush_r+0xac>
 80083dc:	4633      	mov	r3, r6
 80083de:	463a      	mov	r2, r7
 80083e0:	4628      	mov	r0, r5
 80083e2:	6a21      	ldr	r1, [r4, #32]
 80083e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80083e8:	47e0      	blx	ip
 80083ea:	2800      	cmp	r0, #0
 80083ec:	dc07      	bgt.n	80083fe <__sflush_r+0xf6>
 80083ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083f6:	f04f 30ff 	mov.w	r0, #4294967295
 80083fa:	81a3      	strh	r3, [r4, #12]
 80083fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083fe:	4407      	add	r7, r0
 8008400:	1a36      	subs	r6, r6, r0
 8008402:	e7e9      	b.n	80083d8 <__sflush_r+0xd0>
 8008404:	20400001 	.word	0x20400001

08008408 <_fflush_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	690b      	ldr	r3, [r1, #16]
 800840c:	4605      	mov	r5, r0
 800840e:	460c      	mov	r4, r1
 8008410:	b913      	cbnz	r3, 8008418 <_fflush_r+0x10>
 8008412:	2500      	movs	r5, #0
 8008414:	4628      	mov	r0, r5
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	b118      	cbz	r0, 8008422 <_fflush_r+0x1a>
 800841a:	6a03      	ldr	r3, [r0, #32]
 800841c:	b90b      	cbnz	r3, 8008422 <_fflush_r+0x1a>
 800841e:	f7fd fd3d 	bl	8005e9c <__sinit>
 8008422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0f3      	beq.n	8008412 <_fflush_r+0xa>
 800842a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800842c:	07d0      	lsls	r0, r2, #31
 800842e:	d404      	bmi.n	800843a <_fflush_r+0x32>
 8008430:	0599      	lsls	r1, r3, #22
 8008432:	d402      	bmi.n	800843a <_fflush_r+0x32>
 8008434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008436:	f7fd fecc 	bl	80061d2 <__retarget_lock_acquire_recursive>
 800843a:	4628      	mov	r0, r5
 800843c:	4621      	mov	r1, r4
 800843e:	f7ff ff63 	bl	8008308 <__sflush_r>
 8008442:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008444:	4605      	mov	r5, r0
 8008446:	07da      	lsls	r2, r3, #31
 8008448:	d4e4      	bmi.n	8008414 <_fflush_r+0xc>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	059b      	lsls	r3, r3, #22
 800844e:	d4e1      	bmi.n	8008414 <_fflush_r+0xc>
 8008450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008452:	f7fd febf 	bl	80061d4 <__retarget_lock_release_recursive>
 8008456:	e7dd      	b.n	8008414 <_fflush_r+0xc>

08008458 <memmove>:
 8008458:	4288      	cmp	r0, r1
 800845a:	b510      	push	{r4, lr}
 800845c:	eb01 0402 	add.w	r4, r1, r2
 8008460:	d902      	bls.n	8008468 <memmove+0x10>
 8008462:	4284      	cmp	r4, r0
 8008464:	4623      	mov	r3, r4
 8008466:	d807      	bhi.n	8008478 <memmove+0x20>
 8008468:	1e43      	subs	r3, r0, #1
 800846a:	42a1      	cmp	r1, r4
 800846c:	d008      	beq.n	8008480 <memmove+0x28>
 800846e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008476:	e7f8      	b.n	800846a <memmove+0x12>
 8008478:	4601      	mov	r1, r0
 800847a:	4402      	add	r2, r0
 800847c:	428a      	cmp	r2, r1
 800847e:	d100      	bne.n	8008482 <memmove+0x2a>
 8008480:	bd10      	pop	{r4, pc}
 8008482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800848a:	e7f7      	b.n	800847c <memmove+0x24>

0800848c <__assert_func>:
 800848c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800848e:	4614      	mov	r4, r2
 8008490:	461a      	mov	r2, r3
 8008492:	4b09      	ldr	r3, [pc, #36]	@ (80084b8 <__assert_func+0x2c>)
 8008494:	4605      	mov	r5, r0
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68d8      	ldr	r0, [r3, #12]
 800849a:	b14c      	cbz	r4, 80084b0 <__assert_func+0x24>
 800849c:	4b07      	ldr	r3, [pc, #28]	@ (80084bc <__assert_func+0x30>)
 800849e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084a2:	9100      	str	r1, [sp, #0]
 80084a4:	462b      	mov	r3, r5
 80084a6:	4906      	ldr	r1, [pc, #24]	@ (80084c0 <__assert_func+0x34>)
 80084a8:	f000 f850 	bl	800854c <fiprintf>
 80084ac:	f000 f860 	bl	8008570 <abort>
 80084b0:	4b04      	ldr	r3, [pc, #16]	@ (80084c4 <__assert_func+0x38>)
 80084b2:	461c      	mov	r4, r3
 80084b4:	e7f3      	b.n	800849e <__assert_func+0x12>
 80084b6:	bf00      	nop
 80084b8:	200001b4 	.word	0x200001b4
 80084bc:	08008f50 	.word	0x08008f50
 80084c0:	08008f5d 	.word	0x08008f5d
 80084c4:	08008f8b 	.word	0x08008f8b

080084c8 <_calloc_r>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	fba1 5402 	umull	r5, r4, r1, r2
 80084ce:	b934      	cbnz	r4, 80084de <_calloc_r+0x16>
 80084d0:	4629      	mov	r1, r5
 80084d2:	f7fb ff59 	bl	8004388 <_malloc_r>
 80084d6:	4606      	mov	r6, r0
 80084d8:	b928      	cbnz	r0, 80084e6 <_calloc_r+0x1e>
 80084da:	4630      	mov	r0, r6
 80084dc:	bd70      	pop	{r4, r5, r6, pc}
 80084de:	220c      	movs	r2, #12
 80084e0:	2600      	movs	r6, #0
 80084e2:	6002      	str	r2, [r0, #0]
 80084e4:	e7f9      	b.n	80084da <_calloc_r+0x12>
 80084e6:	462a      	mov	r2, r5
 80084e8:	4621      	mov	r1, r4
 80084ea:	f7fd fda8 	bl	800603e <memset>
 80084ee:	e7f4      	b.n	80084da <_calloc_r+0x12>

080084f0 <_realloc_r>:
 80084f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f4:	4607      	mov	r7, r0
 80084f6:	4614      	mov	r4, r2
 80084f8:	460d      	mov	r5, r1
 80084fa:	b921      	cbnz	r1, 8008506 <_realloc_r+0x16>
 80084fc:	4611      	mov	r1, r2
 80084fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008502:	f7fb bf41 	b.w	8004388 <_malloc_r>
 8008506:	b92a      	cbnz	r2, 8008514 <_realloc_r+0x24>
 8008508:	f7fe fcea 	bl	8006ee0 <_free_r>
 800850c:	4625      	mov	r5, r4
 800850e:	4628      	mov	r0, r5
 8008510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008514:	f000 f833 	bl	800857e <_malloc_usable_size_r>
 8008518:	4284      	cmp	r4, r0
 800851a:	4606      	mov	r6, r0
 800851c:	d802      	bhi.n	8008524 <_realloc_r+0x34>
 800851e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008522:	d8f4      	bhi.n	800850e <_realloc_r+0x1e>
 8008524:	4621      	mov	r1, r4
 8008526:	4638      	mov	r0, r7
 8008528:	f7fb ff2e 	bl	8004388 <_malloc_r>
 800852c:	4680      	mov	r8, r0
 800852e:	b908      	cbnz	r0, 8008534 <_realloc_r+0x44>
 8008530:	4645      	mov	r5, r8
 8008532:	e7ec      	b.n	800850e <_realloc_r+0x1e>
 8008534:	42b4      	cmp	r4, r6
 8008536:	4622      	mov	r2, r4
 8008538:	4629      	mov	r1, r5
 800853a:	bf28      	it	cs
 800853c:	4632      	movcs	r2, r6
 800853e:	f7fd fe58 	bl	80061f2 <memcpy>
 8008542:	4629      	mov	r1, r5
 8008544:	4638      	mov	r0, r7
 8008546:	f7fe fccb 	bl	8006ee0 <_free_r>
 800854a:	e7f1      	b.n	8008530 <_realloc_r+0x40>

0800854c <fiprintf>:
 800854c:	b40e      	push	{r1, r2, r3}
 800854e:	b503      	push	{r0, r1, lr}
 8008550:	4601      	mov	r1, r0
 8008552:	ab03      	add	r3, sp, #12
 8008554:	4805      	ldr	r0, [pc, #20]	@ (800856c <fiprintf+0x20>)
 8008556:	f853 2b04 	ldr.w	r2, [r3], #4
 800855a:	6800      	ldr	r0, [r0, #0]
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	f000 f83d 	bl	80085dc <_vfiprintf_r>
 8008562:	b002      	add	sp, #8
 8008564:	f85d eb04 	ldr.w	lr, [sp], #4
 8008568:	b003      	add	sp, #12
 800856a:	4770      	bx	lr
 800856c:	200001b4 	.word	0x200001b4

08008570 <abort>:
 8008570:	2006      	movs	r0, #6
 8008572:	b508      	push	{r3, lr}
 8008574:	f000 fa06 	bl	8008984 <raise>
 8008578:	2001      	movs	r0, #1
 800857a:	f7f8 fd54 	bl	8001026 <_exit>

0800857e <_malloc_usable_size_r>:
 800857e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008582:	1f18      	subs	r0, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	bfbc      	itt	lt
 8008588:	580b      	ldrlt	r3, [r1, r0]
 800858a:	18c0      	addlt	r0, r0, r3
 800858c:	4770      	bx	lr

0800858e <__sfputc_r>:
 800858e:	6893      	ldr	r3, [r2, #8]
 8008590:	b410      	push	{r4}
 8008592:	3b01      	subs	r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	6093      	str	r3, [r2, #8]
 8008598:	da07      	bge.n	80085aa <__sfputc_r+0x1c>
 800859a:	6994      	ldr	r4, [r2, #24]
 800859c:	42a3      	cmp	r3, r4
 800859e:	db01      	blt.n	80085a4 <__sfputc_r+0x16>
 80085a0:	290a      	cmp	r1, #10
 80085a2:	d102      	bne.n	80085aa <__sfputc_r+0x1c>
 80085a4:	bc10      	pop	{r4}
 80085a6:	f000 b931 	b.w	800880c <__swbuf_r>
 80085aa:	6813      	ldr	r3, [r2, #0]
 80085ac:	1c58      	adds	r0, r3, #1
 80085ae:	6010      	str	r0, [r2, #0]
 80085b0:	7019      	strb	r1, [r3, #0]
 80085b2:	4608      	mov	r0, r1
 80085b4:	bc10      	pop	{r4}
 80085b6:	4770      	bx	lr

080085b8 <__sfputs_r>:
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ba:	4606      	mov	r6, r0
 80085bc:	460f      	mov	r7, r1
 80085be:	4614      	mov	r4, r2
 80085c0:	18d5      	adds	r5, r2, r3
 80085c2:	42ac      	cmp	r4, r5
 80085c4:	d101      	bne.n	80085ca <__sfputs_r+0x12>
 80085c6:	2000      	movs	r0, #0
 80085c8:	e007      	b.n	80085da <__sfputs_r+0x22>
 80085ca:	463a      	mov	r2, r7
 80085cc:	4630      	mov	r0, r6
 80085ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d2:	f7ff ffdc 	bl	800858e <__sfputc_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d1f3      	bne.n	80085c2 <__sfputs_r+0xa>
 80085da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085dc <_vfiprintf_r>:
 80085dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e0:	460d      	mov	r5, r1
 80085e2:	4614      	mov	r4, r2
 80085e4:	4698      	mov	r8, r3
 80085e6:	4606      	mov	r6, r0
 80085e8:	b09d      	sub	sp, #116	@ 0x74
 80085ea:	b118      	cbz	r0, 80085f4 <_vfiprintf_r+0x18>
 80085ec:	6a03      	ldr	r3, [r0, #32]
 80085ee:	b90b      	cbnz	r3, 80085f4 <_vfiprintf_r+0x18>
 80085f0:	f7fd fc54 	bl	8005e9c <__sinit>
 80085f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085f6:	07d9      	lsls	r1, r3, #31
 80085f8:	d405      	bmi.n	8008606 <_vfiprintf_r+0x2a>
 80085fa:	89ab      	ldrh	r3, [r5, #12]
 80085fc:	059a      	lsls	r2, r3, #22
 80085fe:	d402      	bmi.n	8008606 <_vfiprintf_r+0x2a>
 8008600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008602:	f7fd fde6 	bl	80061d2 <__retarget_lock_acquire_recursive>
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	071b      	lsls	r3, r3, #28
 800860a:	d501      	bpl.n	8008610 <_vfiprintf_r+0x34>
 800860c:	692b      	ldr	r3, [r5, #16]
 800860e:	b99b      	cbnz	r3, 8008638 <_vfiprintf_r+0x5c>
 8008610:	4629      	mov	r1, r5
 8008612:	4630      	mov	r0, r6
 8008614:	f000 f938 	bl	8008888 <__swsetup_r>
 8008618:	b170      	cbz	r0, 8008638 <_vfiprintf_r+0x5c>
 800861a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800861c:	07dc      	lsls	r4, r3, #31
 800861e:	d504      	bpl.n	800862a <_vfiprintf_r+0x4e>
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	b01d      	add	sp, #116	@ 0x74
 8008626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862a:	89ab      	ldrh	r3, [r5, #12]
 800862c:	0598      	lsls	r0, r3, #22
 800862e:	d4f7      	bmi.n	8008620 <_vfiprintf_r+0x44>
 8008630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008632:	f7fd fdcf 	bl	80061d4 <__retarget_lock_release_recursive>
 8008636:	e7f3      	b.n	8008620 <_vfiprintf_r+0x44>
 8008638:	2300      	movs	r3, #0
 800863a:	9309      	str	r3, [sp, #36]	@ 0x24
 800863c:	2320      	movs	r3, #32
 800863e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008642:	2330      	movs	r3, #48	@ 0x30
 8008644:	f04f 0901 	mov.w	r9, #1
 8008648:	f8cd 800c 	str.w	r8, [sp, #12]
 800864c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80087f8 <_vfiprintf_r+0x21c>
 8008650:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008654:	4623      	mov	r3, r4
 8008656:	469a      	mov	sl, r3
 8008658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800865c:	b10a      	cbz	r2, 8008662 <_vfiprintf_r+0x86>
 800865e:	2a25      	cmp	r2, #37	@ 0x25
 8008660:	d1f9      	bne.n	8008656 <_vfiprintf_r+0x7a>
 8008662:	ebba 0b04 	subs.w	fp, sl, r4
 8008666:	d00b      	beq.n	8008680 <_vfiprintf_r+0xa4>
 8008668:	465b      	mov	r3, fp
 800866a:	4622      	mov	r2, r4
 800866c:	4629      	mov	r1, r5
 800866e:	4630      	mov	r0, r6
 8008670:	f7ff ffa2 	bl	80085b8 <__sfputs_r>
 8008674:	3001      	adds	r0, #1
 8008676:	f000 80a7 	beq.w	80087c8 <_vfiprintf_r+0x1ec>
 800867a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800867c:	445a      	add	r2, fp
 800867e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008680:	f89a 3000 	ldrb.w	r3, [sl]
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 809f 	beq.w	80087c8 <_vfiprintf_r+0x1ec>
 800868a:	2300      	movs	r3, #0
 800868c:	f04f 32ff 	mov.w	r2, #4294967295
 8008690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008694:	f10a 0a01 	add.w	sl, sl, #1
 8008698:	9304      	str	r3, [sp, #16]
 800869a:	9307      	str	r3, [sp, #28]
 800869c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80086a2:	4654      	mov	r4, sl
 80086a4:	2205      	movs	r2, #5
 80086a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086aa:	4853      	ldr	r0, [pc, #332]	@ (80087f8 <_vfiprintf_r+0x21c>)
 80086ac:	f7fd fd93 	bl	80061d6 <memchr>
 80086b0:	9a04      	ldr	r2, [sp, #16]
 80086b2:	b9d8      	cbnz	r0, 80086ec <_vfiprintf_r+0x110>
 80086b4:	06d1      	lsls	r1, r2, #27
 80086b6:	bf44      	itt	mi
 80086b8:	2320      	movmi	r3, #32
 80086ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086be:	0713      	lsls	r3, r2, #28
 80086c0:	bf44      	itt	mi
 80086c2:	232b      	movmi	r3, #43	@ 0x2b
 80086c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086c8:	f89a 3000 	ldrb.w	r3, [sl]
 80086cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80086ce:	d015      	beq.n	80086fc <_vfiprintf_r+0x120>
 80086d0:	4654      	mov	r4, sl
 80086d2:	2000      	movs	r0, #0
 80086d4:	f04f 0c0a 	mov.w	ip, #10
 80086d8:	9a07      	ldr	r2, [sp, #28]
 80086da:	4621      	mov	r1, r4
 80086dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086e0:	3b30      	subs	r3, #48	@ 0x30
 80086e2:	2b09      	cmp	r3, #9
 80086e4:	d94b      	bls.n	800877e <_vfiprintf_r+0x1a2>
 80086e6:	b1b0      	cbz	r0, 8008716 <_vfiprintf_r+0x13a>
 80086e8:	9207      	str	r2, [sp, #28]
 80086ea:	e014      	b.n	8008716 <_vfiprintf_r+0x13a>
 80086ec:	eba0 0308 	sub.w	r3, r0, r8
 80086f0:	fa09 f303 	lsl.w	r3, r9, r3
 80086f4:	4313      	orrs	r3, r2
 80086f6:	46a2      	mov	sl, r4
 80086f8:	9304      	str	r3, [sp, #16]
 80086fa:	e7d2      	b.n	80086a2 <_vfiprintf_r+0xc6>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	1d19      	adds	r1, r3, #4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	9103      	str	r1, [sp, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	bfbb      	ittet	lt
 8008708:	425b      	neglt	r3, r3
 800870a:	f042 0202 	orrlt.w	r2, r2, #2
 800870e:	9307      	strge	r3, [sp, #28]
 8008710:	9307      	strlt	r3, [sp, #28]
 8008712:	bfb8      	it	lt
 8008714:	9204      	strlt	r2, [sp, #16]
 8008716:	7823      	ldrb	r3, [r4, #0]
 8008718:	2b2e      	cmp	r3, #46	@ 0x2e
 800871a:	d10a      	bne.n	8008732 <_vfiprintf_r+0x156>
 800871c:	7863      	ldrb	r3, [r4, #1]
 800871e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008720:	d132      	bne.n	8008788 <_vfiprintf_r+0x1ac>
 8008722:	9b03      	ldr	r3, [sp, #12]
 8008724:	3402      	adds	r4, #2
 8008726:	1d1a      	adds	r2, r3, #4
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	9203      	str	r2, [sp, #12]
 800872c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008730:	9305      	str	r3, [sp, #20]
 8008732:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80087fc <_vfiprintf_r+0x220>
 8008736:	2203      	movs	r2, #3
 8008738:	4650      	mov	r0, sl
 800873a:	7821      	ldrb	r1, [r4, #0]
 800873c:	f7fd fd4b 	bl	80061d6 <memchr>
 8008740:	b138      	cbz	r0, 8008752 <_vfiprintf_r+0x176>
 8008742:	2240      	movs	r2, #64	@ 0x40
 8008744:	9b04      	ldr	r3, [sp, #16]
 8008746:	eba0 000a 	sub.w	r0, r0, sl
 800874a:	4082      	lsls	r2, r0
 800874c:	4313      	orrs	r3, r2
 800874e:	3401      	adds	r4, #1
 8008750:	9304      	str	r3, [sp, #16]
 8008752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008756:	2206      	movs	r2, #6
 8008758:	4829      	ldr	r0, [pc, #164]	@ (8008800 <_vfiprintf_r+0x224>)
 800875a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800875e:	f7fd fd3a 	bl	80061d6 <memchr>
 8008762:	2800      	cmp	r0, #0
 8008764:	d03f      	beq.n	80087e6 <_vfiprintf_r+0x20a>
 8008766:	4b27      	ldr	r3, [pc, #156]	@ (8008804 <_vfiprintf_r+0x228>)
 8008768:	bb1b      	cbnz	r3, 80087b2 <_vfiprintf_r+0x1d6>
 800876a:	9b03      	ldr	r3, [sp, #12]
 800876c:	3307      	adds	r3, #7
 800876e:	f023 0307 	bic.w	r3, r3, #7
 8008772:	3308      	adds	r3, #8
 8008774:	9303      	str	r3, [sp, #12]
 8008776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008778:	443b      	add	r3, r7
 800877a:	9309      	str	r3, [sp, #36]	@ 0x24
 800877c:	e76a      	b.n	8008654 <_vfiprintf_r+0x78>
 800877e:	460c      	mov	r4, r1
 8008780:	2001      	movs	r0, #1
 8008782:	fb0c 3202 	mla	r2, ip, r2, r3
 8008786:	e7a8      	b.n	80086da <_vfiprintf_r+0xfe>
 8008788:	2300      	movs	r3, #0
 800878a:	f04f 0c0a 	mov.w	ip, #10
 800878e:	4619      	mov	r1, r3
 8008790:	3401      	adds	r4, #1
 8008792:	9305      	str	r3, [sp, #20]
 8008794:	4620      	mov	r0, r4
 8008796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800879a:	3a30      	subs	r2, #48	@ 0x30
 800879c:	2a09      	cmp	r2, #9
 800879e:	d903      	bls.n	80087a8 <_vfiprintf_r+0x1cc>
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d0c6      	beq.n	8008732 <_vfiprintf_r+0x156>
 80087a4:	9105      	str	r1, [sp, #20]
 80087a6:	e7c4      	b.n	8008732 <_vfiprintf_r+0x156>
 80087a8:	4604      	mov	r4, r0
 80087aa:	2301      	movs	r3, #1
 80087ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80087b0:	e7f0      	b.n	8008794 <_vfiprintf_r+0x1b8>
 80087b2:	ab03      	add	r3, sp, #12
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	462a      	mov	r2, r5
 80087b8:	4630      	mov	r0, r6
 80087ba:	4b13      	ldr	r3, [pc, #76]	@ (8008808 <_vfiprintf_r+0x22c>)
 80087bc:	a904      	add	r1, sp, #16
 80087be:	f7fc fd1b 	bl	80051f8 <_printf_float>
 80087c2:	4607      	mov	r7, r0
 80087c4:	1c78      	adds	r0, r7, #1
 80087c6:	d1d6      	bne.n	8008776 <_vfiprintf_r+0x19a>
 80087c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087ca:	07d9      	lsls	r1, r3, #31
 80087cc:	d405      	bmi.n	80087da <_vfiprintf_r+0x1fe>
 80087ce:	89ab      	ldrh	r3, [r5, #12]
 80087d0:	059a      	lsls	r2, r3, #22
 80087d2:	d402      	bmi.n	80087da <_vfiprintf_r+0x1fe>
 80087d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087d6:	f7fd fcfd 	bl	80061d4 <__retarget_lock_release_recursive>
 80087da:	89ab      	ldrh	r3, [r5, #12]
 80087dc:	065b      	lsls	r3, r3, #25
 80087de:	f53f af1f 	bmi.w	8008620 <_vfiprintf_r+0x44>
 80087e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087e4:	e71e      	b.n	8008624 <_vfiprintf_r+0x48>
 80087e6:	ab03      	add	r3, sp, #12
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	462a      	mov	r2, r5
 80087ec:	4630      	mov	r0, r6
 80087ee:	4b06      	ldr	r3, [pc, #24]	@ (8008808 <_vfiprintf_r+0x22c>)
 80087f0:	a904      	add	r1, sp, #16
 80087f2:	f7fc ff9f 	bl	8005734 <_printf_i>
 80087f6:	e7e4      	b.n	80087c2 <_vfiprintf_r+0x1e6>
 80087f8:	08008f3f 	.word	0x08008f3f
 80087fc:	08008f45 	.word	0x08008f45
 8008800:	08008f49 	.word	0x08008f49
 8008804:	080051f9 	.word	0x080051f9
 8008808:	080085b9 	.word	0x080085b9

0800880c <__swbuf_r>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	460e      	mov	r6, r1
 8008810:	4614      	mov	r4, r2
 8008812:	4605      	mov	r5, r0
 8008814:	b118      	cbz	r0, 800881e <__swbuf_r+0x12>
 8008816:	6a03      	ldr	r3, [r0, #32]
 8008818:	b90b      	cbnz	r3, 800881e <__swbuf_r+0x12>
 800881a:	f7fd fb3f 	bl	8005e9c <__sinit>
 800881e:	69a3      	ldr	r3, [r4, #24]
 8008820:	60a3      	str	r3, [r4, #8]
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	071a      	lsls	r2, r3, #28
 8008826:	d501      	bpl.n	800882c <__swbuf_r+0x20>
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	b943      	cbnz	r3, 800883e <__swbuf_r+0x32>
 800882c:	4621      	mov	r1, r4
 800882e:	4628      	mov	r0, r5
 8008830:	f000 f82a 	bl	8008888 <__swsetup_r>
 8008834:	b118      	cbz	r0, 800883e <__swbuf_r+0x32>
 8008836:	f04f 37ff 	mov.w	r7, #4294967295
 800883a:	4638      	mov	r0, r7
 800883c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	6922      	ldr	r2, [r4, #16]
 8008842:	b2f6      	uxtb	r6, r6
 8008844:	1a98      	subs	r0, r3, r2
 8008846:	6963      	ldr	r3, [r4, #20]
 8008848:	4637      	mov	r7, r6
 800884a:	4283      	cmp	r3, r0
 800884c:	dc05      	bgt.n	800885a <__swbuf_r+0x4e>
 800884e:	4621      	mov	r1, r4
 8008850:	4628      	mov	r0, r5
 8008852:	f7ff fdd9 	bl	8008408 <_fflush_r>
 8008856:	2800      	cmp	r0, #0
 8008858:	d1ed      	bne.n	8008836 <__swbuf_r+0x2a>
 800885a:	68a3      	ldr	r3, [r4, #8]
 800885c:	3b01      	subs	r3, #1
 800885e:	60a3      	str	r3, [r4, #8]
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	6022      	str	r2, [r4, #0]
 8008866:	701e      	strb	r6, [r3, #0]
 8008868:	6962      	ldr	r2, [r4, #20]
 800886a:	1c43      	adds	r3, r0, #1
 800886c:	429a      	cmp	r2, r3
 800886e:	d004      	beq.n	800887a <__swbuf_r+0x6e>
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	07db      	lsls	r3, r3, #31
 8008874:	d5e1      	bpl.n	800883a <__swbuf_r+0x2e>
 8008876:	2e0a      	cmp	r6, #10
 8008878:	d1df      	bne.n	800883a <__swbuf_r+0x2e>
 800887a:	4621      	mov	r1, r4
 800887c:	4628      	mov	r0, r5
 800887e:	f7ff fdc3 	bl	8008408 <_fflush_r>
 8008882:	2800      	cmp	r0, #0
 8008884:	d0d9      	beq.n	800883a <__swbuf_r+0x2e>
 8008886:	e7d6      	b.n	8008836 <__swbuf_r+0x2a>

08008888 <__swsetup_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4b29      	ldr	r3, [pc, #164]	@ (8008930 <__swsetup_r+0xa8>)
 800888c:	4605      	mov	r5, r0
 800888e:	6818      	ldr	r0, [r3, #0]
 8008890:	460c      	mov	r4, r1
 8008892:	b118      	cbz	r0, 800889c <__swsetup_r+0x14>
 8008894:	6a03      	ldr	r3, [r0, #32]
 8008896:	b90b      	cbnz	r3, 800889c <__swsetup_r+0x14>
 8008898:	f7fd fb00 	bl	8005e9c <__sinit>
 800889c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a0:	0719      	lsls	r1, r3, #28
 80088a2:	d422      	bmi.n	80088ea <__swsetup_r+0x62>
 80088a4:	06da      	lsls	r2, r3, #27
 80088a6:	d407      	bmi.n	80088b8 <__swsetup_r+0x30>
 80088a8:	2209      	movs	r2, #9
 80088aa:	602a      	str	r2, [r5, #0]
 80088ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	e033      	b.n	8008920 <__swsetup_r+0x98>
 80088b8:	0758      	lsls	r0, r3, #29
 80088ba:	d512      	bpl.n	80088e2 <__swsetup_r+0x5a>
 80088bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088be:	b141      	cbz	r1, 80088d2 <__swsetup_r+0x4a>
 80088c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088c4:	4299      	cmp	r1, r3
 80088c6:	d002      	beq.n	80088ce <__swsetup_r+0x46>
 80088c8:	4628      	mov	r0, r5
 80088ca:	f7fe fb09 	bl	8006ee0 <_free_r>
 80088ce:	2300      	movs	r3, #0
 80088d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088d8:	81a3      	strh	r3, [r4, #12]
 80088da:	2300      	movs	r3, #0
 80088dc:	6063      	str	r3, [r4, #4]
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	f043 0308 	orr.w	r3, r3, #8
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	b94b      	cbnz	r3, 8008902 <__swsetup_r+0x7a>
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088f8:	d003      	beq.n	8008902 <__swsetup_r+0x7a>
 80088fa:	4621      	mov	r1, r4
 80088fc:	4628      	mov	r0, r5
 80088fe:	f000 f882 	bl	8008a06 <__smakebuf_r>
 8008902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008906:	f013 0201 	ands.w	r2, r3, #1
 800890a:	d00a      	beq.n	8008922 <__swsetup_r+0x9a>
 800890c:	2200      	movs	r2, #0
 800890e:	60a2      	str	r2, [r4, #8]
 8008910:	6962      	ldr	r2, [r4, #20]
 8008912:	4252      	negs	r2, r2
 8008914:	61a2      	str	r2, [r4, #24]
 8008916:	6922      	ldr	r2, [r4, #16]
 8008918:	b942      	cbnz	r2, 800892c <__swsetup_r+0xa4>
 800891a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800891e:	d1c5      	bne.n	80088ac <__swsetup_r+0x24>
 8008920:	bd38      	pop	{r3, r4, r5, pc}
 8008922:	0799      	lsls	r1, r3, #30
 8008924:	bf58      	it	pl
 8008926:	6962      	ldrpl	r2, [r4, #20]
 8008928:	60a2      	str	r2, [r4, #8]
 800892a:	e7f4      	b.n	8008916 <__swsetup_r+0x8e>
 800892c:	2000      	movs	r0, #0
 800892e:	e7f7      	b.n	8008920 <__swsetup_r+0x98>
 8008930:	200001b4 	.word	0x200001b4

08008934 <_raise_r>:
 8008934:	291f      	cmp	r1, #31
 8008936:	b538      	push	{r3, r4, r5, lr}
 8008938:	4605      	mov	r5, r0
 800893a:	460c      	mov	r4, r1
 800893c:	d904      	bls.n	8008948 <_raise_r+0x14>
 800893e:	2316      	movs	r3, #22
 8008940:	6003      	str	r3, [r0, #0]
 8008942:	f04f 30ff 	mov.w	r0, #4294967295
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800894a:	b112      	cbz	r2, 8008952 <_raise_r+0x1e>
 800894c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008950:	b94b      	cbnz	r3, 8008966 <_raise_r+0x32>
 8008952:	4628      	mov	r0, r5
 8008954:	f000 f830 	bl	80089b8 <_getpid_r>
 8008958:	4622      	mov	r2, r4
 800895a:	4601      	mov	r1, r0
 800895c:	4628      	mov	r0, r5
 800895e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008962:	f000 b817 	b.w	8008994 <_kill_r>
 8008966:	2b01      	cmp	r3, #1
 8008968:	d00a      	beq.n	8008980 <_raise_r+0x4c>
 800896a:	1c59      	adds	r1, r3, #1
 800896c:	d103      	bne.n	8008976 <_raise_r+0x42>
 800896e:	2316      	movs	r3, #22
 8008970:	6003      	str	r3, [r0, #0]
 8008972:	2001      	movs	r0, #1
 8008974:	e7e7      	b.n	8008946 <_raise_r+0x12>
 8008976:	2100      	movs	r1, #0
 8008978:	4620      	mov	r0, r4
 800897a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800897e:	4798      	blx	r3
 8008980:	2000      	movs	r0, #0
 8008982:	e7e0      	b.n	8008946 <_raise_r+0x12>

08008984 <raise>:
 8008984:	4b02      	ldr	r3, [pc, #8]	@ (8008990 <raise+0xc>)
 8008986:	4601      	mov	r1, r0
 8008988:	6818      	ldr	r0, [r3, #0]
 800898a:	f7ff bfd3 	b.w	8008934 <_raise_r>
 800898e:	bf00      	nop
 8008990:	200001b4 	.word	0x200001b4

08008994 <_kill_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	2300      	movs	r3, #0
 8008998:	4d06      	ldr	r5, [pc, #24]	@ (80089b4 <_kill_r+0x20>)
 800899a:	4604      	mov	r4, r0
 800899c:	4608      	mov	r0, r1
 800899e:	4611      	mov	r1, r2
 80089a0:	602b      	str	r3, [r5, #0]
 80089a2:	f7f8 fb30 	bl	8001006 <_kill>
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	d102      	bne.n	80089b0 <_kill_r+0x1c>
 80089aa:	682b      	ldr	r3, [r5, #0]
 80089ac:	b103      	cbz	r3, 80089b0 <_kill_r+0x1c>
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	bd38      	pop	{r3, r4, r5, pc}
 80089b2:	bf00      	nop
 80089b4:	2000055c 	.word	0x2000055c

080089b8 <_getpid_r>:
 80089b8:	f7f8 bb1e 	b.w	8000ff8 <_getpid>

080089bc <__swhatbuf_r>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	460c      	mov	r4, r1
 80089c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c4:	4615      	mov	r5, r2
 80089c6:	2900      	cmp	r1, #0
 80089c8:	461e      	mov	r6, r3
 80089ca:	b096      	sub	sp, #88	@ 0x58
 80089cc:	da0c      	bge.n	80089e8 <__swhatbuf_r+0x2c>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	2100      	movs	r1, #0
 80089d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089d6:	bf14      	ite	ne
 80089d8:	2340      	movne	r3, #64	@ 0x40
 80089da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089de:	2000      	movs	r0, #0
 80089e0:	6031      	str	r1, [r6, #0]
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	b016      	add	sp, #88	@ 0x58
 80089e6:	bd70      	pop	{r4, r5, r6, pc}
 80089e8:	466a      	mov	r2, sp
 80089ea:	f000 f849 	bl	8008a80 <_fstat_r>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	dbed      	blt.n	80089ce <__swhatbuf_r+0x12>
 80089f2:	9901      	ldr	r1, [sp, #4]
 80089f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089fc:	4259      	negs	r1, r3
 80089fe:	4159      	adcs	r1, r3
 8008a00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a04:	e7eb      	b.n	80089de <__swhatbuf_r+0x22>

08008a06 <__smakebuf_r>:
 8008a06:	898b      	ldrh	r3, [r1, #12]
 8008a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a0a:	079d      	lsls	r5, r3, #30
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	d507      	bpl.n	8008a22 <__smakebuf_r+0x1c>
 8008a12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a16:	6023      	str	r3, [r4, #0]
 8008a18:	6123      	str	r3, [r4, #16]
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	6163      	str	r3, [r4, #20]
 8008a1e:	b003      	add	sp, #12
 8008a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a22:	466a      	mov	r2, sp
 8008a24:	ab01      	add	r3, sp, #4
 8008a26:	f7ff ffc9 	bl	80089bc <__swhatbuf_r>
 8008a2a:	9f00      	ldr	r7, [sp, #0]
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	4639      	mov	r1, r7
 8008a30:	4630      	mov	r0, r6
 8008a32:	f7fb fca9 	bl	8004388 <_malloc_r>
 8008a36:	b948      	cbnz	r0, 8008a4c <__smakebuf_r+0x46>
 8008a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3c:	059a      	lsls	r2, r3, #22
 8008a3e:	d4ee      	bmi.n	8008a1e <__smakebuf_r+0x18>
 8008a40:	f023 0303 	bic.w	r3, r3, #3
 8008a44:	f043 0302 	orr.w	r3, r3, #2
 8008a48:	81a3      	strh	r3, [r4, #12]
 8008a4a:	e7e2      	b.n	8008a12 <__smakebuf_r+0xc>
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a56:	81a3      	strh	r3, [r4, #12]
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	6020      	str	r0, [r4, #0]
 8008a5c:	b15b      	cbz	r3, 8008a76 <__smakebuf_r+0x70>
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a64:	f000 f81e 	bl	8008aa4 <_isatty_r>
 8008a68:	b128      	cbz	r0, 8008a76 <__smakebuf_r+0x70>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f023 0303 	bic.w	r3, r3, #3
 8008a70:	f043 0301 	orr.w	r3, r3, #1
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	431d      	orrs	r5, r3
 8008a7a:	81a5      	strh	r5, [r4, #12]
 8008a7c:	e7cf      	b.n	8008a1e <__smakebuf_r+0x18>
	...

08008a80 <_fstat_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	2300      	movs	r3, #0
 8008a84:	4d06      	ldr	r5, [pc, #24]	@ (8008aa0 <_fstat_r+0x20>)
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	602b      	str	r3, [r5, #0]
 8008a8e:	f7f8 fb19 	bl	80010c4 <_fstat>
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	d102      	bne.n	8008a9c <_fstat_r+0x1c>
 8008a96:	682b      	ldr	r3, [r5, #0]
 8008a98:	b103      	cbz	r3, 8008a9c <_fstat_r+0x1c>
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	bd38      	pop	{r3, r4, r5, pc}
 8008a9e:	bf00      	nop
 8008aa0:	2000055c 	.word	0x2000055c

08008aa4 <_isatty_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	4d05      	ldr	r5, [pc, #20]	@ (8008ac0 <_isatty_r+0x1c>)
 8008aaa:	4604      	mov	r4, r0
 8008aac:	4608      	mov	r0, r1
 8008aae:	602b      	str	r3, [r5, #0]
 8008ab0:	f7f8 fb17 	bl	80010e2 <_isatty>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_isatty_r+0x1a>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_isatty_r+0x1a>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	2000055c 	.word	0x2000055c

08008ac4 <_init>:
 8008ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac6:	bf00      	nop
 8008ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aca:	bc08      	pop	{r3}
 8008acc:	469e      	mov	lr, r3
 8008ace:	4770      	bx	lr

08008ad0 <_fini>:
 8008ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad2:	bf00      	nop
 8008ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad6:	bc08      	pop	{r3}
 8008ad8:	469e      	mov	lr, r3
 8008ada:	4770      	bx	lr
