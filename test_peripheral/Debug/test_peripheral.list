
test_peripheral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcc0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  0800bdd0  0800bdd0  0000cdd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5dc  0800c5dc  0000e20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c5dc  0800c5dc  0000d5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5e4  0800c5e4  0000e20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5e4  0800c5e4  0000d5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5e8  0800c5e8  0000d5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800c5ec  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e0  2000020c  0800c7f8  0000e20c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bec  0800c7f8  0000ebec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011474  00000000  00000000  0000e235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cfd  00000000  00000000  0001f6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  000223a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b41  00000000  00000000  00023248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a237  00000000  00000000  00023d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135ca  00000000  00000000  0003dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aef1  00000000  00000000  0005158a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc47b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f4  00000000  00000000  000dc4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000e17b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bdb8 	.word	0x0800bdb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	0800bdb8 	.word	0x0800bdb8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gesf2>:
 8000b7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b80:	e006      	b.n	8000b90 <__cmpsf2+0x4>
 8000b82:	bf00      	nop

08000b84 <__lesf2>:
 8000b84:	f04f 0c01 	mov.w	ip, #1
 8000b88:	e002      	b.n	8000b90 <__cmpsf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__cmpsf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba6:	d011      	beq.n	8000bcc <__cmpsf2+0x40>
 8000ba8:	b001      	add	sp, #4
 8000baa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bae:	bf18      	it	ne
 8000bb0:	ea90 0f01 	teqne	r0, r1
 8000bb4:	bf58      	it	pl
 8000bb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bba:	bf88      	it	hi
 8000bbc:	17c8      	asrhi	r0, r1, #31
 8000bbe:	bf38      	it	cc
 8000bc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc4:	bf18      	it	ne
 8000bc6:	f040 0001 	orrne.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	d102      	bne.n	8000bd8 <__cmpsf2+0x4c>
 8000bd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bd6:	d105      	bne.n	8000be4 <__cmpsf2+0x58>
 8000bd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bdc:	d1e4      	bne.n	8000ba8 <__cmpsf2+0x1c>
 8000bde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000be2:	d0e1      	beq.n	8000ba8 <__cmpsf2+0x1c>
 8000be4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_cfrcmple>:
 8000bec:	4684      	mov	ip, r0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	4661      	mov	r1, ip
 8000bf2:	e7ff      	b.n	8000bf4 <__aeabi_cfcmpeq>

08000bf4 <__aeabi_cfcmpeq>:
 8000bf4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bf6:	f7ff ffc9 	bl	8000b8c <__cmpsf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	bf48      	it	mi
 8000bfe:	f110 0f00 	cmnmi.w	r0, #0
 8000c02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c04 <__aeabi_fcmpeq>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff fff4 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2001      	moveq	r0, #1
 8000c10:	2000      	movne	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmplt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffea 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmple>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffe0 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpge>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffd2 	bl	8000bec <__aeabi_cfrcmple>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_fcmpgt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffc8 	bl	8000bec <__aeabi_cfrcmple>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff fead 	bl	80009d0 <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc23 	bl	80004ec <__aeabi_dmul>
 8000ca6:	f7ff fef9 	bl	8000a9c <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fba4 	bl	80003f8 <__aeabi_ui2d>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb4:	f7ff fc1a 	bl	80004ec <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fa5c 	bl	800017c <__aeabi_dsub>
 8000cc4:	f7ff feea 	bl	8000a9c <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cdc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ce0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d013      	beq.n	8000d14 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cf0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000cf4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00b      	beq.n	8000d14 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000cfc:	e000      	b.n	8000d00 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000cfe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d00:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f9      	beq.n	8000cfe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d0a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f000 fca3 	bl	8001670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 f83d 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f000 f957 	bl	8000fe0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d32:	f000 f92b 	bl	8000f8c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d36:	f000 f8d1 	bl	8000edc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d3a:	f000 f8fd 	bl	8000f38 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000d3e:	f000 f879 	bl	8000e34 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */


  HAL_Delay(3000);
 8000d42:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000d46:	f000 fcf5 	bl	8001734 <HAL_Delay>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8000d4a:	2264      	movs	r2, #100	@ 0x64
 8000d4c:	4911      	ldr	r1, [pc, #68]	@ (8000d94 <main+0x74>)
 8000d4e:	4812      	ldr	r0, [pc, #72]	@ (8000d98 <main+0x78>)
 8000d50:	f004 f82d 	bl	8004dae <HAL_UARTEx_ReceiveToIdle_IT>

  Screen_begin(&huart2);
 8000d54:	4810      	ldr	r0, [pc, #64]	@ (8000d98 <main+0x78>)
 8000d56:	f004 fdef 	bl	8005938 <Screen_begin>
  //  HAL_UART_Transmit(&huart2,sendBuffer_3,sizeof(sendBuffer_3),500);
//  for (uint8_t i=0; i < 6; i++) {
//  			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
//  			  HAL_Delay(500);
//  		  }
  HAL_CAN_Start(&hcan);
 8000d5a:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <main+0x7c>)
 8000d5c:	f000 fed2 	bl	8001b04 <HAL_CAN_Start>

  TxHeader.DLC = 5;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <main+0x80>)
 8000d62:	2205      	movs	r2, #5
 8000d64:	611a      	str	r2, [r3, #16]
  TxHeader.StdId = 0x103;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <main+0x80>)
 8000d68:	f240 1203 	movw	r2, #259	@ 0x103
 8000d6c:	601a      	str	r2, [r3, #0]
  TxHeader.IDE = CAN_ID_STD;
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <main+0x80>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <main+0x80>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]

  uint8_t data_tx[5] = {'H','E','L','L','O'};
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <main+0x84>)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d82:	6018      	str	r0, [r3, #0]
 8000d84:	3304      	adds	r3, #4
 8000d86:	7019      	strb	r1, [r3, #0]


  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000d88:	2110      	movs	r1, #16
 8000d8a:	4804      	ldr	r0, [pc, #16]	@ (8000d9c <main+0x7c>)
 8000d8c:	f001 f81f 	bl	8001dce <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <main+0x70>
 8000d94:	20000370 	.word	0x20000370
 8000d98:	200002ec 	.word	0x200002ec
 8000d9c:	20000228 	.word	0x20000228
 8000da0:	20000334 	.word	0x20000334
 8000da4:	0800be84 	.word	0x0800be84

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b090      	sub	sp, #64	@ 0x40
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0318 	add.w	r3, r7, #24
 8000db2:	2228      	movs	r2, #40	@ 0x28
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f008 fb46 	bl	8009448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000de4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000de6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 0318 	add.w	r3, r7, #24
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 faf1 	bl	80043d8 <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000dfc:	f000 f9aa 	bl	8001154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e00:	230f      	movs	r3, #15
 8000e02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e04:	2302      	movs	r3, #2
 8000e06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2102      	movs	r1, #2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fd5e 	bl	80048dc <HAL_RCC_ClockConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e26:	f000 f995 	bl	8001154 <Error_Handler>
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	3740      	adds	r7, #64	@ 0x40
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000e3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000e3c:	4a26      	ldr	r2, [pc, #152]	@ (8000ed8 <MX_CAN_Init+0xa4>)
 8000e3e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000e40:	4b24      	ldr	r3, [pc, #144]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000e42:	2204      	movs	r2, #4
 8000e44:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e46:	4b23      	ldr	r3, [pc, #140]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000e52:	4b20      	ldr	r3, [pc, #128]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000e54:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000e58:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000e5c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e60:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e74:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e86:	4813      	ldr	r0, [pc, #76]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000e88:	f000 fc78 	bl	800177c <HAL_CAN_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000e92:	f000 f95f 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000e96:	2301      	movs	r3, #1
 8000e98:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x103<<5;
 8000ea2:	f242 0360 	movw	r3, #8288	@ 0x2060
 8000ea6:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4803      	ldr	r0, [pc, #12]	@ (8000ed4 <MX_CAN_Init+0xa0>)
 8000ec6:	f000 fd54 	bl	8001972 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	@ 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000228 	.word	0x20000228
 8000ed8:	40006400 	.word	0x40006400

08000edc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <MX_I2C1_Init+0x50>)
 8000ee2:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <MX_I2C1_Init+0x54>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 300000;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_I2C1_Init+0x50>)
 8000ee8:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <MX_I2C1_Init+0x58>)
 8000eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_I2C1_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_I2C1_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_I2C1_Init+0x50>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <MX_I2C1_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_I2C1_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <MX_I2C1_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_I2C1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_I2C1_Init+0x50>)
 8000f1a:	f001 fd37 	bl	800298c <HAL_I2C_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f24:	f000 f916 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000250 	.word	0x20000250
 8000f30:	40005400 	.word	0x40005400
 8000f34:	000493e0 	.word	0x000493e0

08000f38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <MX_USART1_UART_Init+0x4c>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	@ (8000f88 <MX_USART1_UART_Init+0x50>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <MX_USART1_UART_Init+0x4c>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <MX_USART1_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <MX_USART1_UART_Init+0x4c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <MX_USART1_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <MX_USART1_UART_Init+0x4c>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <MX_USART1_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <MX_USART1_UART_Init+0x4c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <MX_USART1_UART_Init+0x4c>)
 8000f70:	f003 fe42 	bl	8004bf8 <HAL_UART_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f7a:	f000 f8eb 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200002a4 	.word	0x200002a4
 8000f88:	40013800 	.word	0x40013800

08000f8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f90:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	@ (8000fdc <MX_USART2_UART_Init+0x50>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000f98:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fc4:	f003 fe18 	bl	8004bf8 <HAL_UART_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fce:	f000 f8c1 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200002ec 	.word	0x200002ec
 8000fdc:	40004400 	.word	0x40004400

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff4:	4b24      	ldr	r3, [pc, #144]	@ (8001088 <MX_GPIO_Init+0xa8>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a23      	ldr	r2, [pc, #140]	@ (8001088 <MX_GPIO_Init+0xa8>)
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b21      	ldr	r3, [pc, #132]	@ (8001088 <MX_GPIO_Init+0xa8>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0310 	and.w	r3, r3, #16
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100c:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <MX_GPIO_Init+0xa8>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a1d      	ldr	r2, [pc, #116]	@ (8001088 <MX_GPIO_Init+0xa8>)
 8001012:	f043 0320 	orr.w	r3, r3, #32
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <MX_GPIO_Init+0xa8>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f003 0320 	and.w	r3, r3, #32
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <MX_GPIO_Init+0xa8>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a17      	ldr	r2, [pc, #92]	@ (8001088 <MX_GPIO_Init+0xa8>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <MX_GPIO_Init+0xa8>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MX_GPIO_Init+0xa8>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a11      	ldr	r2, [pc, #68]	@ (8001088 <MX_GPIO_Init+0xa8>)
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_GPIO_Init+0xa8>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800105a:	480c      	ldr	r0, [pc, #48]	@ (800108c <MX_GPIO_Init+0xac>)
 800105c:	f001 fc7e 	bl	800295c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800106e:	2301      	movs	r3, #1
 8001070:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4619      	mov	r1, r3
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <MX_GPIO_Init+0xac>)
 800107a:	f001 faeb 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800107e:	bf00      	nop
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	40011000 	.word	0x40011000

08001090 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <HAL_UARTEx_RxEventCallback+0x3c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d10c      	bne.n	80010c2 <HAL_UARTEx_RxEventCallback+0x32>

		// Call to callback function screen
		Screen_RX_data(dataRX);
 80010a8:	4809      	ldr	r0, [pc, #36]	@ (80010d0 <HAL_UARTEx_RxEventCallback+0x40>)
 80010aa:	f004 fcbd 	bl	8005a28 <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 80010ae:	2264      	movs	r2, #100	@ 0x64
 80010b0:	2100      	movs	r1, #0
 80010b2:	4807      	ldr	r0, [pc, #28]	@ (80010d0 <HAL_UARTEx_RxEventCallback+0x40>)
 80010b4:	f008 f9c8 	bl	8009448 <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 80010b8:	2264      	movs	r2, #100	@ 0x64
 80010ba:	4905      	ldr	r1, [pc, #20]	@ (80010d0 <HAL_UARTEx_RxEventCallback+0x40>)
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <HAL_UARTEx_RxEventCallback+0x3c>)
 80010be:	f003 fe76 	bl	8004dae <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200002ec 	.word	0x200002ec
 80010d0:	20000370 	.word	0x20000370

080010d4 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c1.Instance) {

		
	}
  /* Transmit complete wait eeprom write */
  OS_task_post_event(AO_task_eeprom, WAIT_WRITE_TIMEOUT, (uint8_t *)0, 0);
 80010dc:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <HAL_I2C_MemTxCpltCallback+0x20>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	f006 f941 	bl	800736c <OS_task_post_event>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	0800c1a8 	.word	0x0800c1a8

080010f8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001100:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c>)
 8001102:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 8001104:	2101      	movs	r1, #1
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 fd40 	bl	8001b8c <HAL_CAN_GetRxMessage>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000368 	.word	0x20000368
 8001118:	2000034c 	.word	0x2000034c

0800111c <_write>:

int _write(int file, char *ptr, int len) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	e009      	b.n	8001142 <_write+0x26>
        ITM_SendChar(ptr[i]);
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fdcc 	bl	8000cd4 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	3301      	adds	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	429a      	cmp	r2, r3
 8001148:	dbf1      	blt.n	800112e <_write+0x12>
    }
    return len;
 800114a:	687b      	ldr	r3, [r7, #4]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <Error_Handler+0x8>

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_MspInit+0x5c>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <HAL_MspInit+0x5c>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6193      	str	r3, [r2, #24]
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_MspInit+0x5c>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <HAL_MspInit+0x5c>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a0e      	ldr	r2, [pc, #56]	@ (80011bc <HAL_MspInit+0x5c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <HAL_MspInit+0x5c>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <HAL_MspInit+0x60>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_MspInit+0x60>)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000

080011c4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a20      	ldr	r2, [pc, #128]	@ (8001260 <HAL_CAN_MspInit+0x9c>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d139      	bne.n	8001258 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <HAL_CAN_MspInit+0xa0>)
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001264 <HAL_CAN_MspInit+0xa0>)
 80011ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ee:	61d3      	str	r3, [r2, #28]
 80011f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <HAL_CAN_MspInit+0xa0>)
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <HAL_CAN_MspInit+0xa0>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a18      	ldr	r2, [pc, #96]	@ (8001264 <HAL_CAN_MspInit+0xa0>)
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <HAL_CAN_MspInit+0xa0>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001214:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001218:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	4619      	mov	r1, r3
 8001228:	480f      	ldr	r0, [pc, #60]	@ (8001268 <HAL_CAN_MspInit+0xa4>)
 800122a:	f001 fa13 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800122e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4619      	mov	r1, r3
 8001242:	4809      	ldr	r0, [pc, #36]	@ (8001268 <HAL_CAN_MspInit+0xa4>)
 8001244:	f001 fa06 	bl	8002654 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	2015      	movs	r0, #21
 800124e:	f001 f8fc 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001252:	2015      	movs	r0, #21
 8001254:	f001 f915 	bl	8002482 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001258:	bf00      	nop
 800125a:	3720      	adds	r7, #32
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40006400 	.word	0x40006400
 8001264:	40021000 	.word	0x40021000
 8001268:	40010800 	.word	0x40010800

0800126c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a19      	ldr	r2, [pc, #100]	@ (80012ec <HAL_I2C_MspInit+0x80>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d12b      	bne.n	80012e4 <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a17      	ldr	r2, [pc, #92]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a4:	23c0      	movs	r3, #192	@ 0xc0
 80012a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a8:	2312      	movs	r3, #18
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4619      	mov	r1, r3
 80012b6:	480f      	ldr	r0, [pc, #60]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012b8:	f001 f9cc 	bl	8002654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	4a0b      	ldr	r2, [pc, #44]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 80012c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012c6:	61d3      	str	r3, [r2, #28]
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	201f      	movs	r0, #31
 80012da:	f001 f8b6 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012de:	201f      	movs	r0, #31
 80012e0:	f001 f8cf 	bl	8002482 <HAL_NVIC_EnableIRQ>
//    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT);
    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012e4:	bf00      	nop
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40005400 	.word	0x40005400
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010c00 	.word	0x40010c00

080012f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a3f      	ldr	r2, [pc, #252]	@ (8001410 <HAL_UART_MspInit+0x118>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d13a      	bne.n	800138e <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001318:	4b3e      	ldr	r3, [pc, #248]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a3d      	ldr	r2, [pc, #244]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 800131e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b3b      	ldr	r3, [pc, #236]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b38      	ldr	r3, [pc, #224]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a37      	ldr	r2, [pc, #220]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b35      	ldr	r3, [pc, #212]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	4619      	mov	r1, r3
 800135c:	482e      	ldr	r0, [pc, #184]	@ (8001418 <HAL_UART_MspInit+0x120>)
 800135e:	f001 f979 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0318 	add.w	r3, r7, #24
 8001374:	4619      	mov	r1, r3
 8001376:	4828      	ldr	r0, [pc, #160]	@ (8001418 <HAL_UART_MspInit+0x120>)
 8001378:	f001 f96c 	bl	8002654 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	210e      	movs	r1, #14
 8001380:	2025      	movs	r0, #37	@ 0x25
 8001382:	f001 f862 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001386:	2025      	movs	r0, #37	@ 0x25
 8001388:	f001 f87b 	bl	8002482 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800138c:	e03c      	b.n	8001408 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a22      	ldr	r2, [pc, #136]	@ (800141c <HAL_UART_MspInit+0x124>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d137      	bne.n	8001408 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	4a1d      	ldr	r2, [pc, #116]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 800139e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a2:	61d3      	str	r3, [r2, #28]
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c8:	2304      	movs	r3, #4
 80013ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0318 	add.w	r3, r7, #24
 80013d8:	4619      	mov	r1, r3
 80013da:	480f      	ldr	r0, [pc, #60]	@ (8001418 <HAL_UART_MspInit+0x120>)
 80013dc:	f001 f93a 	bl	8002654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e0:	2308      	movs	r3, #8
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	4619      	mov	r1, r3
 80013f2:	4809      	ldr	r0, [pc, #36]	@ (8001418 <HAL_UART_MspInit+0x120>)
 80013f4:	f001 f92e 	bl	8002654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2026      	movs	r0, #38	@ 0x26
 80013fe:	f001 f824 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001402:	2026      	movs	r0, #38	@ 0x26
 8001404:	f001 f83d 	bl	8002482 <HAL_NVIC_EnableIRQ>
}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	@ 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40013800 	.word	0x40013800
 8001414:	40021000 	.word	0x40021000
 8001418:	40010800 	.word	0x40010800
 800141c:	40004400 	.word	0x40004400

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <NMI_Handler+0x4>

08001428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <MemManage_Handler+0x4>

08001438 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <UsageFault_Handler+0x4>

08001448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f944 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  OS_TimeEvt_tick();
 8001474:	f005 ff98 	bl	80073a8 <OS_TimeEvt_tick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <CAN1_RX1_IRQHandler+0x10>)
 8001482:	f000 fcc9 	bl	8001e18 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000228 	.word	0x20000228

08001490 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <I2C1_EV_IRQHandler+0x10>)
 8001496:	f001 fbd1 	bl	8002c3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000250 	.word	0x20000250

080014a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <USART1_IRQHandler+0x10>)
 80014aa:	f003 fcdd 	bl	8004e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200002a4 	.word	0x200002a4

080014b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <USART2_IRQHandler+0x10>)
 80014be:	f003 fcd3 	bl	8004e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200002ec 	.word	0x200002ec

080014cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return 1;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <_kill>:

int _kill(int pid, int sig)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014e4:	f008 f850 	bl	8009588 <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2216      	movs	r2, #22
 80014ec:	601a      	str	r2, [r3, #0]
  return -1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_exit>:

void _exit (int status)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001502:	f04f 31ff 	mov.w	r1, #4294967295
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffe7 	bl	80014da <_kill>
  while (1) {}    /* Make sure we hang here */
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <_exit+0x12>

08001510 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e00a      	b.n	8001538 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001522:	f3af 8000 	nop.w
 8001526:	4601      	mov	r1, r0
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60ba      	str	r2, [r7, #8]
 800152e:	b2ca      	uxtb	r2, r1
 8001530:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf0      	blt.n	8001522 <_read+0x12>
  }

  return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_close>:
  }
  return len;
}

int _close(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001570:	605a      	str	r2, [r3, #4]
  return 0;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <_isatty>:

int _isatty(int file)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
	...

080015ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b4:	4a14      	ldr	r2, [pc, #80]	@ (8001608 <_sbrk+0x5c>)
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <_sbrk+0x60>)
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <_sbrk+0x64>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <_sbrk+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d207      	bcs.n	80015ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015dc:	f007 ffd4 	bl	8009588 <__errno>
 80015e0:	4603      	mov	r3, r0
 80015e2:	220c      	movs	r2, #12
 80015e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e009      	b.n	8001600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f2:	4b07      	ldr	r3, [pc, #28]	@ (8001610 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a05      	ldr	r2, [pc, #20]	@ (8001610 <_sbrk+0x64>)
 80015fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20005000 	.word	0x20005000
 800160c:	00000400 	.word	0x00000400
 8001610:	200003d4 	.word	0x200003d4
 8001614:	20000bf0 	.word	0x20000bf0

08001618 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8001624:	f7ff fff8 	bl	8001618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001628:	480b      	ldr	r0, [pc, #44]	@ (8001658 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800162a:	490c      	ldr	r1, [pc, #48]	@ (800165c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800162c:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <LoopFillZerobss+0x16>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a09      	ldr	r2, [pc, #36]	@ (8001664 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001640:	4c09      	ldr	r4, [pc, #36]	@ (8001668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164e:	f007 ffa1 	bl	8009594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001652:	f7ff fb65 	bl	8000d20 <main>
  bx lr
 8001656:	4770      	bx	lr
  ldr r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800165c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001660:	0800c5ec 	.word	0x0800c5ec
  ldr r2, =_sbss
 8001664:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001668:	20000bec 	.word	0x20000bec

0800166c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC1_2_IRQHandler>
	...

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001674:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <HAL_Init+0x28>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a07      	ldr	r2, [pc, #28]	@ (8001698 <HAL_Init+0x28>)
 800167a:	f043 0310 	orr.w	r3, r3, #16
 800167e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001680:	2003      	movs	r0, #3
 8001682:	f000 fed7 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001686:	200f      	movs	r0, #15
 8001688:	f000 f808 	bl	800169c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800168c:	f7ff fd68 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40022000 	.word	0x40022000

0800169c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a4:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <HAL_InitTick+0x54>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_InitTick+0x58>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 feef 	bl	800249e <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00e      	b.n	80016e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d80a      	bhi.n	80016e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d0:	2200      	movs	r2, #0
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f000 feb7 	bl	800244a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016dc:	4a06      	ldr	r2, [pc, #24]	@ (80016f8 <HAL_InitTick+0x5c>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000008 	.word	0x20000008
 80016f8:	20000004 	.word	0x20000004

080016fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <HAL_IncTick+0x1c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b05      	ldr	r3, [pc, #20]	@ (800171c <HAL_IncTick+0x20>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a03      	ldr	r2, [pc, #12]	@ (800171c <HAL_IncTick+0x20>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	20000008 	.word	0x20000008
 800171c:	200003d8 	.word	0x200003d8

08001720 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b02      	ldr	r3, [pc, #8]	@ (8001730 <HAL_GetTick+0x10>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	200003d8 	.word	0x200003d8

08001734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff fff0 	bl	8001720 <HAL_GetTick>
 8001740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d005      	beq.n	800175a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800174e:	4b0a      	ldr	r3, [pc, #40]	@ (8001778 <HAL_Delay+0x44>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800175a:	bf00      	nop
 800175c:	f7ff ffe0 	bl	8001720 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	429a      	cmp	r2, r3
 800176a:	d8f7      	bhi.n	800175c <HAL_Delay+0x28>
  {
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008

0800177c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0ed      	b.n	800196a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fd12 	bl	80011c4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b0:	f7ff ffb6 	bl	8001720 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017b6:	e012      	b.n	80017de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017b8:	f7ff ffb2 	bl	8001720 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b0a      	cmp	r3, #10
 80017c4:	d90b      	bls.n	80017de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2205      	movs	r2, #5
 80017d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0c5      	b.n	800196a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0e5      	beq.n	80017b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0202 	bic.w	r2, r2, #2
 80017fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017fc:	f7ff ff90 	bl	8001720 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001802:	e012      	b.n	800182a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001804:	f7ff ff8c 	bl	8001720 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b0a      	cmp	r3, #10
 8001810:	d90b      	bls.n	800182a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001816:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2205      	movs	r2, #5
 8001822:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e09f      	b.n	800196a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1e5      	bne.n	8001804 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7e1b      	ldrb	r3, [r3, #24]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d108      	bne.n	8001852 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	e007      	b.n	8001862 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7e5b      	ldrb	r3, [r3, #25]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d108      	bne.n	800187c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	e007      	b.n	800188c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800188a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	7e9b      	ldrb	r3, [r3, #26]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d108      	bne.n	80018a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0220 	orr.w	r2, r2, #32
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e007      	b.n	80018b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0220 	bic.w	r2, r2, #32
 80018b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	7edb      	ldrb	r3, [r3, #27]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d108      	bne.n	80018d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0210 	bic.w	r2, r2, #16
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e007      	b.n	80018e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0210 	orr.w	r2, r2, #16
 80018de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7f1b      	ldrb	r3, [r3, #28]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d108      	bne.n	80018fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0208 	orr.w	r2, r2, #8
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e007      	b.n	800190a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0208 	bic.w	r2, r2, #8
 8001908:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7f5b      	ldrb	r3, [r3, #29]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d108      	bne.n	8001924 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0204 	orr.w	r2, r2, #4
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e007      	b.n	8001934 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0204 	bic.w	r2, r2, #4
 8001932:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	ea42 0103 	orr.w	r1, r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	1e5a      	subs	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001972:	b480      	push	{r7}
 8001974:	b087      	sub	sp, #28
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001988:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800198a:	7cfb      	ldrb	r3, [r7, #19]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d003      	beq.n	8001998 <HAL_CAN_ConfigFilter+0x26>
 8001990:	7cfb      	ldrb	r3, [r7, #19]
 8001992:	2b02      	cmp	r3, #2
 8001994:	f040 80aa 	bne.w	8001aec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800199e:	f043 0201 	orr.w	r2, r3, #1
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2201      	movs	r2, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d123      	bne.n	8001a1a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43db      	mvns	r3, r3
 80019dc:	401a      	ands	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3248      	adds	r2, #72	@ 0x48
 80019fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a10:	6979      	ldr	r1, [r7, #20]
 8001a12:	3348      	adds	r3, #72	@ 0x48
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	440b      	add	r3, r1
 8001a18:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d122      	bne.n	8001a68 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3248      	adds	r2, #72	@ 0x48
 8001a48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a5e:	6979      	ldr	r1, [r7, #20]
 8001a60:	3348      	adds	r3, #72	@ 0x48
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001a82:	e007      	b.n	8001a94 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001aae:	e007      	b.n	8001ac0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d107      	bne.n	8001ad8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ade:	f023 0201 	bic.w	r2, r3, #1
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e006      	b.n	8001afa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d12e      	bne.n	8001b76 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b30:	f7ff fdf6 	bl	8001720 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b36:	e012      	b.n	8001b5e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b38:	f7ff fdf2 	bl	8001720 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b0a      	cmp	r3, #10
 8001b44:	d90b      	bls.n	8001b5e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2205      	movs	r2, #5
 8001b56:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e012      	b.n	8001b84 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1e5      	bne.n	8001b38 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e006      	b.n	8001b84 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
  }
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d003      	beq.n	8001bb0 <HAL_CAN_GetRxMessage+0x24>
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	f040 8103 	bne.w	8001db6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d116      	bne.n	8001bf2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0f7      	b.n	8001dc4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0e8      	b.n	8001dc4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	331b      	adds	r3, #27
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	4413      	add	r3, r2
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0204 	and.w	r2, r3, #4
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10c      	bne.n	8001c2a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	331b      	adds	r3, #27
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	4413      	add	r3, r2
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	0d5b      	lsrs	r3, r3, #21
 8001c20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e00b      	b.n	8001c42 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	331b      	adds	r3, #27
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	4413      	add	r3, r2
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	08db      	lsrs	r3, r3, #3
 8001c3a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	331b      	adds	r3, #27
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	4413      	add	r3, r2
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0202 	and.w	r2, r3, #2
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	331b      	adds	r3, #27
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	4413      	add	r3, r2
 8001c64:	3304      	adds	r3, #4
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2208      	movs	r2, #8
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	e00b      	b.n	8001c90 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	331b      	adds	r3, #27
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	4413      	add	r3, r2
 8001c84:	3304      	adds	r3, #4
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 020f 	and.w	r2, r3, #15
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	331b      	adds	r3, #27
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	331b      	adds	r3, #27
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	0a1a      	lsrs	r2, r3, #8
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0c1a      	lsrs	r2, r3, #16
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	3302      	adds	r3, #2
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0e1a      	lsrs	r2, r3, #24
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	3303      	adds	r3, #3
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	3304      	adds	r3, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0a1a      	lsrs	r2, r3, #8
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	3305      	adds	r3, #5
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0c1a      	lsrs	r2, r3, #16
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	3306      	adds	r3, #6
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0e1a      	lsrs	r2, r3, #24
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	3307      	adds	r3, #7
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d108      	bne.n	8001da2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0220 	orr.w	r2, r2, #32
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	e007      	b.n	8001db2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0220 	orr.w	r2, r2, #32
 8001db0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e006      	b.n	8001dc4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
  }
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dde:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d002      	beq.n	8001dec <HAL_CAN_ActivateNotification+0x1e>
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d109      	bne.n	8001e00 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6959      	ldr	r1, [r3, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e006      	b.n	8001e0e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
  }
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	@ 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d07c      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d023      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f983 	bl	8002186 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e80:	e016      	b.n	8001eb0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e94:	e00c      	b.n	8001eb0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea8:	e002      	b.n	8001eb0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f986 	bl	80021bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d024      	beq.n	8001f04 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ec2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f962 	bl	8002198 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ed4:	e016      	b.n	8001f04 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d004      	beq.n	8001eea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee8:	e00c      	b.n	8001f04 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d004      	beq.n	8001efe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efc:	e002      	b.n	8001f04 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f965 	bl	80021ce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d024      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f941 	bl	80021aa <HAL_CAN_TxMailbox2CompleteCallback>
 8001f28:	e016      	b.n	8001f58 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3c:	e00c      	b.n	8001f58 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d004      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f50:	e002      	b.n	8001f58 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f944 	bl	80021e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2210      	movs	r2, #16
 8001f7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2208      	movs	r2, #8
 8001f96:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f933 	bl	8002204 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d009      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f91b 	bl	80021f2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00c      	beq.n	8001fe0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2210      	movs	r2, #16
 8001fde:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00b      	beq.n	8002002 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f90a 	bl	8002216 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b00      	cmp	r3, #0
 800200a:	d009      	beq.n	8002020 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff f86c 	bl	80010f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2210      	movs	r2, #16
 800203a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f8f3 	bl	8002228 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d006      	beq.n	8002064 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2208      	movs	r2, #8
 800205c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8eb 	bl	800223a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d07b      	beq.n	8002166 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d072      	beq.n	800215e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800209a:	2b00      	cmp	r3, #0
 800209c:	d008      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d008      	beq.n	80020cc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d043      	beq.n	800215e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d03e      	beq.n	800215e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020e6:	2b60      	cmp	r3, #96	@ 0x60
 80020e8:	d02b      	beq.n	8002142 <HAL_CAN_IRQHandler+0x32a>
 80020ea:	2b60      	cmp	r3, #96	@ 0x60
 80020ec:	d82e      	bhi.n	800214c <HAL_CAN_IRQHandler+0x334>
 80020ee:	2b50      	cmp	r3, #80	@ 0x50
 80020f0:	d022      	beq.n	8002138 <HAL_CAN_IRQHandler+0x320>
 80020f2:	2b50      	cmp	r3, #80	@ 0x50
 80020f4:	d82a      	bhi.n	800214c <HAL_CAN_IRQHandler+0x334>
 80020f6:	2b40      	cmp	r3, #64	@ 0x40
 80020f8:	d019      	beq.n	800212e <HAL_CAN_IRQHandler+0x316>
 80020fa:	2b40      	cmp	r3, #64	@ 0x40
 80020fc:	d826      	bhi.n	800214c <HAL_CAN_IRQHandler+0x334>
 80020fe:	2b30      	cmp	r3, #48	@ 0x30
 8002100:	d010      	beq.n	8002124 <HAL_CAN_IRQHandler+0x30c>
 8002102:	2b30      	cmp	r3, #48	@ 0x30
 8002104:	d822      	bhi.n	800214c <HAL_CAN_IRQHandler+0x334>
 8002106:	2b10      	cmp	r3, #16
 8002108:	d002      	beq.n	8002110 <HAL_CAN_IRQHandler+0x2f8>
 800210a:	2b20      	cmp	r3, #32
 800210c:	d005      	beq.n	800211a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800210e:	e01d      	b.n	800214c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002118:	e019      	b.n	800214e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	f043 0310 	orr.w	r3, r3, #16
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002122:	e014      	b.n	800214e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	f043 0320 	orr.w	r3, r3, #32
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800212c:	e00f      	b.n	800214e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002136:	e00a      	b.n	800214e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002140:	e005      	b.n	800214e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800214a:	e000      	b.n	800214e <HAL_CAN_IRQHandler+0x336>
            break;
 800214c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800215c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2204      	movs	r2, #4
 8002164:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f867 	bl	800224c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	@ 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr

08002216 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
	...

08002260 <__NVIC_SetPriorityGrouping>:
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_GetPriorityGrouping>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4906      	ldr	r1, [pc, #24]	@ (80022f8 <__NVIC_EnableIRQ+0x34>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100

080022fc <__NVIC_SetPendingIRQ>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db0c      	blt.n	8002328 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	f003 021f 	and.w	r2, r3, #31
 8002314:	4907      	ldr	r1, [pc, #28]	@ (8002334 <__NVIC_SetPendingIRQ+0x38>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2001      	movs	r0, #1
 800231e:	fa00 f202 	lsl.w	r2, r0, r2
 8002322:	3340      	adds	r3, #64	@ 0x40
 8002324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000e100 	.word	0xe000e100

08002338 <__NVIC_SetPriority>:
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	db0a      	blt.n	8002362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	490c      	ldr	r1, [pc, #48]	@ (8002384 <__NVIC_SetPriority+0x4c>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	440b      	add	r3, r1
 800235c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002360:	e00a      	b.n	8002378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4908      	ldr	r1, [pc, #32]	@ (8002388 <__NVIC_SetPriority+0x50>)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	3b04      	subs	r3, #4
 8002370:	0112      	lsls	r2, r2, #4
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	440b      	add	r3, r1
 8002376:	761a      	strb	r2, [r3, #24]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000e100 	.word	0xe000e100
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <NVIC_EncodePriority>:
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	@ 0x24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f1c3 0307 	rsb	r3, r3, #7
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	bf28      	it	cs
 80023aa:	2304      	movcs	r3, #4
 80023ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d902      	bls.n	80023bc <NVIC_EncodePriority+0x30>
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3b03      	subs	r3, #3
 80023ba:	e000      	b.n	80023be <NVIC_EncodePriority+0x32>
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	f04f 32ff 	mov.w	r2, #4294967295
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	401a      	ands	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	43d9      	mvns	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	4313      	orrs	r3, r2
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3724      	adds	r7, #36	@ 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <SysTick_Config>:
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002400:	d301      	bcc.n	8002406 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002402:	2301      	movs	r3, #1
 8002404:	e00f      	b.n	8002426 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002406:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <SysTick_Config+0x40>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240e:	210f      	movs	r1, #15
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	f7ff ff90 	bl	8002338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002418:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <SysTick_Config+0x40>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241e:	4b04      	ldr	r3, [pc, #16]	@ (8002430 <SysTick_Config+0x40>)
 8002420:	2207      	movs	r2, #7
 8002422:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	e000e010 	.word	0xe000e010

08002434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff0f 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245c:	f7ff ff24 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 8002460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	6978      	ldr	r0, [r7, #20]
 8002468:	f7ff ff90 	bl	800238c <NVIC_EncodePriority>
 800246c:	4602      	mov	r2, r0
 800246e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff5f 	bl	8002338 <__NVIC_SetPriority>
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff17 	bl	80022c4 <__NVIC_EnableIRQ>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ffa2 	bl	80023f0 <SysTick_Config>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff19 	bl	80022fc <__NVIC_SetPendingIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d008      	beq.n	80024fc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2204      	movs	r2, #4
 80024ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e020      	b.n	800253e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 020e 	bic.w	r2, r2, #14
 800250a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800253c:	7bfb      	ldrb	r3, [r7, #15]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d005      	beq.n	800256c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2204      	movs	r2, #4
 8002564:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	e051      	b.n	8002610 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 020e 	bic.w	r2, r2, #14
 800257a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a22      	ldr	r2, [pc, #136]	@ (800261c <HAL_DMA_Abort_IT+0xd4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d029      	beq.n	80025ea <HAL_DMA_Abort_IT+0xa2>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a21      	ldr	r2, [pc, #132]	@ (8002620 <HAL_DMA_Abort_IT+0xd8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d022      	beq.n	80025e6 <HAL_DMA_Abort_IT+0x9e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002624 <HAL_DMA_Abort_IT+0xdc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01a      	beq.n	80025e0 <HAL_DMA_Abort_IT+0x98>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002628 <HAL_DMA_Abort_IT+0xe0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d012      	beq.n	80025da <HAL_DMA_Abort_IT+0x92>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1c      	ldr	r2, [pc, #112]	@ (800262c <HAL_DMA_Abort_IT+0xe4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00a      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x8c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002630 <HAL_DMA_Abort_IT+0xe8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d102      	bne.n	80025ce <HAL_DMA_Abort_IT+0x86>
 80025c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80025cc:	e00e      	b.n	80025ec <HAL_DMA_Abort_IT+0xa4>
 80025ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025d2:	e00b      	b.n	80025ec <HAL_DMA_Abort_IT+0xa4>
 80025d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025d8:	e008      	b.n	80025ec <HAL_DMA_Abort_IT+0xa4>
 80025da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025de:	e005      	b.n	80025ec <HAL_DMA_Abort_IT+0xa4>
 80025e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025e4:	e002      	b.n	80025ec <HAL_DMA_Abort_IT+0xa4>
 80025e6:	2310      	movs	r3, #16
 80025e8:	e000      	b.n	80025ec <HAL_DMA_Abort_IT+0xa4>
 80025ea:	2301      	movs	r3, #1
 80025ec:	4a11      	ldr	r2, [pc, #68]	@ (8002634 <HAL_DMA_Abort_IT+0xec>)
 80025ee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
    } 
  }
  return status;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40020008 	.word	0x40020008
 8002620:	4002001c 	.word	0x4002001c
 8002624:	40020030 	.word	0x40020030
 8002628:	40020044 	.word	0x40020044
 800262c:	40020058 	.word	0x40020058
 8002630:	4002006c 	.word	0x4002006c
 8002634:	40020000 	.word	0x40020000

08002638 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002646:	b2db      	uxtb	r3, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
	...

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b08b      	sub	sp, #44	@ 0x2c
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002666:	e169      	b.n	800293c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002668:	2201      	movs	r2, #1
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 8158 	bne.w	8002936 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a9a      	ldr	r2, [pc, #616]	@ (80028f4 <HAL_GPIO_Init+0x2a0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d05e      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 8002690:	4a98      	ldr	r2, [pc, #608]	@ (80028f4 <HAL_GPIO_Init+0x2a0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d875      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 8002696:	4a98      	ldr	r2, [pc, #608]	@ (80028f8 <HAL_GPIO_Init+0x2a4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d058      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 800269c:	4a96      	ldr	r2, [pc, #600]	@ (80028f8 <HAL_GPIO_Init+0x2a4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d86f      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026a2:	4a96      	ldr	r2, [pc, #600]	@ (80028fc <HAL_GPIO_Init+0x2a8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d052      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026a8:	4a94      	ldr	r2, [pc, #592]	@ (80028fc <HAL_GPIO_Init+0x2a8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d869      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ae:	4a94      	ldr	r2, [pc, #592]	@ (8002900 <HAL_GPIO_Init+0x2ac>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d04c      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026b4:	4a92      	ldr	r2, [pc, #584]	@ (8002900 <HAL_GPIO_Init+0x2ac>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d863      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ba:	4a92      	ldr	r2, [pc, #584]	@ (8002904 <HAL_GPIO_Init+0x2b0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d046      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026c0:	4a90      	ldr	r2, [pc, #576]	@ (8002904 <HAL_GPIO_Init+0x2b0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d85d      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026c6:	2b12      	cmp	r3, #18
 80026c8:	d82a      	bhi.n	8002720 <HAL_GPIO_Init+0xcc>
 80026ca:	2b12      	cmp	r3, #18
 80026cc:	d859      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ce:	a201      	add	r2, pc, #4	@ (adr r2, 80026d4 <HAL_GPIO_Init+0x80>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	0800274f 	.word	0x0800274f
 80026d8:	08002729 	.word	0x08002729
 80026dc:	0800273b 	.word	0x0800273b
 80026e0:	0800277d 	.word	0x0800277d
 80026e4:	08002783 	.word	0x08002783
 80026e8:	08002783 	.word	0x08002783
 80026ec:	08002783 	.word	0x08002783
 80026f0:	08002783 	.word	0x08002783
 80026f4:	08002783 	.word	0x08002783
 80026f8:	08002783 	.word	0x08002783
 80026fc:	08002783 	.word	0x08002783
 8002700:	08002783 	.word	0x08002783
 8002704:	08002783 	.word	0x08002783
 8002708:	08002783 	.word	0x08002783
 800270c:	08002783 	.word	0x08002783
 8002710:	08002783 	.word	0x08002783
 8002714:	08002783 	.word	0x08002783
 8002718:	08002731 	.word	0x08002731
 800271c:	08002745 	.word	0x08002745
 8002720:	4a79      	ldr	r2, [pc, #484]	@ (8002908 <HAL_GPIO_Init+0x2b4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002726:	e02c      	b.n	8002782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	623b      	str	r3, [r7, #32]
          break;
 800272e:	e029      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	3304      	adds	r3, #4
 8002736:	623b      	str	r3, [r7, #32]
          break;
 8002738:	e024      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	3308      	adds	r3, #8
 8002740:	623b      	str	r3, [r7, #32]
          break;
 8002742:	e01f      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	330c      	adds	r3, #12
 800274a:	623b      	str	r3, [r7, #32]
          break;
 800274c:	e01a      	b.n	8002784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002756:	2304      	movs	r3, #4
 8002758:	623b      	str	r3, [r7, #32]
          break;
 800275a:	e013      	b.n	8002784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002764:	2308      	movs	r3, #8
 8002766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	611a      	str	r2, [r3, #16]
          break;
 800276e:	e009      	b.n	8002784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002770:	2308      	movs	r3, #8
 8002772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	615a      	str	r2, [r3, #20]
          break;
 800277a:	e003      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800277c:	2300      	movs	r3, #0
 800277e:	623b      	str	r3, [r7, #32]
          break;
 8002780:	e000      	b.n	8002784 <HAL_GPIO_Init+0x130>
          break;
 8002782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2bff      	cmp	r3, #255	@ 0xff
 8002788:	d801      	bhi.n	800278e <HAL_GPIO_Init+0x13a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	e001      	b.n	8002792 <HAL_GPIO_Init+0x13e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2bff      	cmp	r3, #255	@ 0xff
 8002798:	d802      	bhi.n	80027a0 <HAL_GPIO_Init+0x14c>
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	e002      	b.n	80027a6 <HAL_GPIO_Init+0x152>
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	3b08      	subs	r3, #8
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	210f      	movs	r1, #15
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	401a      	ands	r2, r3
 80027b8:	6a39      	ldr	r1, [r7, #32]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	fa01 f303 	lsl.w	r3, r1, r3
 80027c0:	431a      	orrs	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80b1 	beq.w	8002936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027d4:	4b4d      	ldr	r3, [pc, #308]	@ (800290c <HAL_GPIO_Init+0x2b8>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4a4c      	ldr	r2, [pc, #304]	@ (800290c <HAL_GPIO_Init+0x2b8>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	4b4a      	ldr	r3, [pc, #296]	@ (800290c <HAL_GPIO_Init+0x2b8>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027ec:	4a48      	ldr	r2, [pc, #288]	@ (8002910 <HAL_GPIO_Init+0x2bc>)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a40      	ldr	r2, [pc, #256]	@ (8002914 <HAL_GPIO_Init+0x2c0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <HAL_GPIO_Init+0x1ec>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3f      	ldr	r2, [pc, #252]	@ (8002918 <HAL_GPIO_Init+0x2c4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00d      	beq.n	800283c <HAL_GPIO_Init+0x1e8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3e      	ldr	r2, [pc, #248]	@ (800291c <HAL_GPIO_Init+0x2c8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d007      	beq.n	8002838 <HAL_GPIO_Init+0x1e4>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a3d      	ldr	r2, [pc, #244]	@ (8002920 <HAL_GPIO_Init+0x2cc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d101      	bne.n	8002834 <HAL_GPIO_Init+0x1e0>
 8002830:	2303      	movs	r3, #3
 8002832:	e006      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 8002834:	2304      	movs	r3, #4
 8002836:	e004      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 8002838:	2302      	movs	r3, #2
 800283a:	e002      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 8002840:	2300      	movs	r3, #0
 8002842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002844:	f002 0203 	and.w	r2, r2, #3
 8002848:	0092      	lsls	r2, r2, #2
 800284a:	4093      	lsls	r3, r2
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002852:	492f      	ldr	r1, [pc, #188]	@ (8002910 <HAL_GPIO_Init+0x2bc>)
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800286c:	4b2d      	ldr	r3, [pc, #180]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	492c      	ldr	r1, [pc, #176]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800287a:	4b2a      	ldr	r3, [pc, #168]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	43db      	mvns	r3, r3
 8002882:	4928      	ldr	r1, [pc, #160]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 8002884:	4013      	ands	r3, r2
 8002886:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002894:	4b23      	ldr	r3, [pc, #140]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	4922      	ldr	r1, [pc, #136]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	60cb      	str	r3, [r1, #12]
 80028a0:	e006      	b.n	80028b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028a2:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	491e      	ldr	r1, [pc, #120]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028bc:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4918      	ldr	r1, [pc, #96]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
 80028c8:	e006      	b.n	80028d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ca:	4b16      	ldr	r3, [pc, #88]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	4914      	ldr	r1, [pc, #80]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d021      	beq.n	8002928 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	490e      	ldr	r1, [pc, #56]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e021      	b.n	8002936 <HAL_GPIO_Init+0x2e2>
 80028f2:	bf00      	nop
 80028f4:	10320000 	.word	0x10320000
 80028f8:	10310000 	.word	0x10310000
 80028fc:	10220000 	.word	0x10220000
 8002900:	10210000 	.word	0x10210000
 8002904:	10120000 	.word	0x10120000
 8002908:	10110000 	.word	0x10110000
 800290c:	40021000 	.word	0x40021000
 8002910:	40010000 	.word	0x40010000
 8002914:	40010800 	.word	0x40010800
 8002918:	40010c00 	.word	0x40010c00
 800291c:	40011000 	.word	0x40011000
 8002920:	40011400 	.word	0x40011400
 8002924:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_GPIO_Init+0x304>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	43db      	mvns	r3, r3
 8002930:	4909      	ldr	r1, [pc, #36]	@ (8002958 <HAL_GPIO_Init+0x304>)
 8002932:	4013      	ands	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	3301      	adds	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	fa22 f303 	lsr.w	r3, r2, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	f47f ae8e 	bne.w	8002668 <HAL_GPIO_Init+0x14>
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	372c      	adds	r7, #44	@ 0x2c
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	40010400 	.word	0x40010400

0800295c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
 8002968:	4613      	mov	r3, r2
 800296a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800296c:	787b      	ldrb	r3, [r7, #1]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002972:	887a      	ldrh	r2, [r7, #2]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002978:	e003      	b.n	8002982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800297a:	887b      	ldrh	r3, [r7, #2]
 800297c:	041a      	lsls	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	611a      	str	r2, [r3, #16]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e12b      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fc5a 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	@ 0x24
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029f0:	f002 f8bc 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 80029f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a81      	ldr	r2, [pc, #516]	@ (8002c00 <HAL_I2C_Init+0x274>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d807      	bhi.n	8002a10 <HAL_I2C_Init+0x84>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a80      	ldr	r2, [pc, #512]	@ (8002c04 <HAL_I2C_Init+0x278>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e006      	b.n	8002a1e <HAL_I2C_Init+0x92>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a7d      	ldr	r2, [pc, #500]	@ (8002c08 <HAL_I2C_Init+0x27c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	bf94      	ite	ls
 8002a18:	2301      	movls	r3, #1
 8002a1a:	2300      	movhi	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0e7      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a78      	ldr	r2, [pc, #480]	@ (8002c0c <HAL_I2C_Init+0x280>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a6a      	ldr	r2, [pc, #424]	@ (8002c00 <HAL_I2C_Init+0x274>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d802      	bhi.n	8002a60 <HAL_I2C_Init+0xd4>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	e009      	b.n	8002a74 <HAL_I2C_Init+0xe8>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	4a69      	ldr	r2, [pc, #420]	@ (8002c10 <HAL_I2C_Init+0x284>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	3301      	adds	r3, #1
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	495c      	ldr	r1, [pc, #368]	@ (8002c00 <HAL_I2C_Init+0x274>)
 8002a90:	428b      	cmp	r3, r1
 8002a92:	d819      	bhi.n	8002ac8 <HAL_I2C_Init+0x13c>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e59      	subs	r1, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa2:	1c59      	adds	r1, r3, #1
 8002aa4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_I2C_Init+0x138>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1e59      	subs	r1, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac2:	e051      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	e04f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d111      	bne.n	8002af4 <HAL_I2C_Init+0x168>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	440b      	add	r3, r1
 8002ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e012      	b.n	8002b1a <HAL_I2C_Init+0x18e>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	0099      	lsls	r1, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Init+0x196>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e022      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10e      	bne.n	8002b48 <HAL_I2C_Init+0x1bc>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e58      	subs	r0, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	440b      	add	r3, r1
 8002b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b46:	e00f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	0099      	lsls	r1, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	6809      	ldr	r1, [r1, #0]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6911      	ldr	r1, [r2, #16]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68d2      	ldr	r2, [r2, #12]
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	000186a0 	.word	0x000186a0
 8002c04:	001e847f 	.word	0x001e847f
 8002c08:	003d08ff 	.word	0x003d08ff
 8002c0c:	431bde83 	.word	0x431bde83
 8002c10:	10624dd3 	.word	0x10624dd3

08002c14 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c26:	2b80      	cmp	r3, #128	@ 0x80
 8002c28:	d103      	bne.n	8002c32 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  }
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c54:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c64:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d003      	beq.n	8002c74 <HAL_I2C_EV_IRQHandler+0x38>
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b40      	cmp	r3, #64	@ 0x40
 8002c70:	f040 80c1 	bne.w	8002df6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <HAL_I2C_EV_IRQHandler+0x6e>
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002c94:	d003      	beq.n	8002c9e <HAL_I2C_EV_IRQHandler+0x62>
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2C_EV_IRQHandler+0x66>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x68>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	f000 8132 	beq.w	8002f0e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00c      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0x92>
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	0a5b      	lsrs	r3, r3, #9
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d006      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f001 fb6f 	bl	80043a4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fce1 	bl	800368e <I2C_Master_SB>
 8002ccc:	e092      	b.n	8002df4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	08db      	lsrs	r3, r3, #3
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_I2C_EV_IRQHandler+0xb2>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	0a5b      	lsrs	r3, r3, #9
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fd56 	bl	8003798 <I2C_Master_ADD10>
 8002cec:	e082      	b.n	8002df4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0xd2>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	0a5b      	lsrs	r3, r3, #9
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fd6f 	bl	80037ea <I2C_Master_ADDR>
 8002d0c:	e072      	b.n	8002df4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d03b      	beq.n	8002d92 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d28:	f000 80f3 	beq.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	09db      	lsrs	r3, r3, #7
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00f      	beq.n	8002d58 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	0a9b      	lsrs	r3, r3, #10
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d009      	beq.n	8002d58 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d103      	bne.n	8002d58 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f939 	bl	8002fc8 <I2C_MasterTransmit_TXE>
 8002d56:	e04d      	b.n	8002df4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80d6 	beq.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	0a5b      	lsrs	r3, r3, #9
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80cf 	beq.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d74:	7bbb      	ldrb	r3, [r7, #14]
 8002d76:	2b21      	cmp	r3, #33	@ 0x21
 8002d78:	d103      	bne.n	8002d82 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f9c0 	bl	8003100 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d80:	e0c7      	b.n	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b40      	cmp	r3, #64	@ 0x40
 8002d86:	f040 80c4 	bne.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa2e 	bl	80031ec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d90:	e0bf      	b.n	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002da0:	f000 80b7 	beq.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	099b      	lsrs	r3, r3, #6
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00f      	beq.n	8002dd0 <HAL_I2C_EV_IRQHandler+0x194>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	0a9b      	lsrs	r3, r3, #10
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <HAL_I2C_EV_IRQHandler+0x194>
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d103      	bne.n	8002dd0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 faa7 	bl	800331c <I2C_MasterReceive_RXNE>
 8002dce:	e011      	b.n	8002df4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 809a 	beq.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	0a5b      	lsrs	r3, r3, #9
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8093 	beq.w	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fb5d 	bl	80034ac <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002df2:	e08e      	b.n	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002df4:	e08d      	b.n	8002f12 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	e007      	b.n	8002e18 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	085b      	lsrs	r3, r3, #1
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <HAL_I2C_EV_IRQHandler+0x20e>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	0a5b      	lsrs	r3, r3, #9
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00c      	beq.n	8002e4a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002e40:	69b9      	ldr	r1, [r7, #24]
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 ff28 	bl	8003c98 <I2C_Slave_ADDR>
 8002e48:	e066      	b.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_I2C_EV_IRQHandler+0x22e>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	0a5b      	lsrs	r3, r3, #9
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 ff62 	bl	8003d2c <I2C_Slave_STOPF>
 8002e68:	e056      	b.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e6a:	7bbb      	ldrb	r3, [r7, #14]
 8002e6c:	2b21      	cmp	r3, #33	@ 0x21
 8002e6e:	d002      	beq.n	8002e76 <HAL_I2C_EV_IRQHandler+0x23a>
 8002e70:	7bbb      	ldrb	r3, [r7, #14]
 8002e72:	2b29      	cmp	r3, #41	@ 0x29
 8002e74:	d125      	bne.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	09db      	lsrs	r3, r3, #7
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00f      	beq.n	8002ea2 <HAL_I2C_EV_IRQHandler+0x266>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	0a9b      	lsrs	r3, r3, #10
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_I2C_EV_IRQHandler+0x266>
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d103      	bne.n	8002ea2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fe40 	bl	8003b20 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ea0:	e039      	b.n	8002f16 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d033      	beq.n	8002f16 <HAL_I2C_EV_IRQHandler+0x2da>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	0a5b      	lsrs	r3, r3, #9
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d02d      	beq.n	8002f16 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fe6d 	bl	8003b9a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ec0:	e029      	b.n	8002f16 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00f      	beq.n	8002eee <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	0a9b      	lsrs	r3, r3, #10
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_I2C_EV_IRQHandler+0x2b2>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d103      	bne.n	8002eee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fe77 	bl	8003bda <I2C_SlaveReceive_RXNE>
 8002eec:	e014      	b.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	089b      	lsrs	r3, r3, #2
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00e      	beq.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	0a5b      	lsrs	r3, r3, #9
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fea5 	bl	8003c56 <I2C_SlaveReceive_BTF>
 8002f0c:	e004      	b.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002f0e:	bf00      	nop
 8002f10:	e002      	b.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f12:	bf00      	nop
 8002f14:	e000      	b.n	8002f18 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f16:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	70fb      	strb	r3, [r7, #3]
 8002f72:	4613      	mov	r3, r2
 8002f74:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d150      	bne.n	8003090 <I2C_MasterTransmit_TXE+0xc8>
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b21      	cmp	r3, #33	@ 0x21
 8002ff2:	d14d      	bne.n	8003090 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d01d      	beq.n	8003036 <I2C_MasterTransmit_TXE+0x6e>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d01a      	beq.n	8003036 <I2C_MasterTransmit_TXE+0x6e>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003006:	d016      	beq.n	8003036 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003016:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2211      	movs	r2, #17
 800301c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ff75 	bl	8002f1e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003034:	e060      	b.n	80030f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003044:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003054:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d107      	bne.n	8003080 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7fe f82b 	bl	80010d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800307e:	e03b      	b.n	80030f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff48 	bl	8002f1e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800308e:	e033      	b.n	80030f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b21      	cmp	r3, #33	@ 0x21
 8003094:	d005      	beq.n	80030a2 <I2C_MasterTransmit_TXE+0xda>
 8003096:	7bbb      	ldrb	r3, [r7, #14]
 8003098:	2b40      	cmp	r3, #64	@ 0x40
 800309a:	d12d      	bne.n	80030f8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b22      	cmp	r3, #34	@ 0x22
 80030a0:	d12a      	bne.n	80030f8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d108      	bne.n	80030be <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80030bc:	e01c      	b.n	80030f8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b40      	cmp	r3, #64	@ 0x40
 80030c8:	d103      	bne.n	80030d2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f88e 	bl	80031ec <I2C_MemoryTransmit_TXE_BTF>
}
 80030d0:	e012      	b.n	80030f8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80030f6:	e7ff      	b.n	80030f8 <I2C_MasterTransmit_TXE+0x130>
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b21      	cmp	r3, #33	@ 0x21
 8003118:	d164      	bne.n	80031e4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d012      	beq.n	800314a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003148:	e04c      	b.n	80031e4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d01d      	beq.n	800318c <I2C_MasterTransmit_BTF+0x8c>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b20      	cmp	r3, #32
 8003154:	d01a      	beq.n	800318c <I2C_MasterTransmit_BTF+0x8c>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800315c:	d016      	beq.n	800318c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800316c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2211      	movs	r2, #17
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff feca 	bl	8002f1e <HAL_I2C_MasterTxCpltCallback>
}
 800318a:	e02b      	b.n	80031e4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800319a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031aa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b40      	cmp	r3, #64	@ 0x40
 80031c4:	d107      	bne.n	80031d6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fd ff80 	bl	80010d4 <HAL_I2C_MemTxCpltCallback>
}
 80031d4:	e006      	b.n	80031e4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff fe9d 	bl	8002f1e <HAL_I2C_MasterTxCpltCallback>
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003200:	2b00      	cmp	r3, #0
 8003202:	d11d      	bne.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d10b      	bne.n	8003224 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003210:	b2da      	uxtb	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321c:	1c9a      	adds	r2, r3, #2
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003222:	e077      	b.n	8003314 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003228:	b29b      	uxth	r3, r3
 800322a:	121b      	asrs	r3, r3, #8
 800322c:	b2da      	uxtb	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800323e:	e069      	b.n	8003314 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003244:	2b01      	cmp	r3, #1
 8003246:	d10b      	bne.n	8003260 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800324c:	b2da      	uxtb	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800325e:	e059      	b.n	8003314 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003264:	2b02      	cmp	r3, #2
 8003266:	d152      	bne.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	2b22      	cmp	r3, #34	@ 0x22
 800326c:	d10d      	bne.n	800328a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800327c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003288:	e044      	b.n	8003314 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d015      	beq.n	80032c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b21      	cmp	r3, #33	@ 0x21
 8003298:	d112      	bne.n	80032c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80032be:	e029      	b.n	8003314 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d124      	bne.n	8003314 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b21      	cmp	r3, #33	@ 0x21
 80032ce:	d121      	bne.n	8003314 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032de:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd fee4 	bl	80010d4 <HAL_I2C_MemTxCpltCallback>
}
 800330c:	e002      	b.n	8003314 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fc80 	bl	8002c14 <I2C_Flush_DR>
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b22      	cmp	r3, #34	@ 0x22
 800332e:	f040 80b9 	bne.w	80034a4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003336:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d921      	bls.n	800338a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b03      	cmp	r3, #3
 8003374:	f040 8096 	bne.w	80034a4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003386:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003388:	e08c      	b.n	80034a4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338e:	2b02      	cmp	r3, #2
 8003390:	d07f      	beq.n	8003492 <I2C_MasterReceive_RXNE+0x176>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d002      	beq.n	800339e <I2C_MasterReceive_RXNE+0x82>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d179      	bne.n	8003492 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 ffce 	bl	8004340 <I2C_WaitOnSTOPRequestThroughIT>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d14c      	bne.n	8003444 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033b8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b40      	cmp	r3, #64	@ 0x40
 8003402:	d10a      	bne.n	800341a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff fdbd 	bl	8002f92 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003418:	e044      	b.n	80034a4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d002      	beq.n	800342e <I2C_MasterReceive_RXNE+0x112>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b20      	cmp	r3, #32
 800342c:	d103      	bne.n	8003436 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	@ 0x30
 8003434:	e002      	b.n	800343c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2212      	movs	r2, #18
 800343a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff fd77 	bl	8002f30 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003442:	e02f      	b.n	80034a4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003452:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff fd8a 	bl	8002fa4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003490:	e008      	b.n	80034a4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034a0:	605a      	str	r2, [r3, #4]
}
 80034a2:	e7ff      	b.n	80034a4 <I2C_MasterReceive_RXNE+0x188>
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d11b      	bne.n	80034fc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034d2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80034fa:	e0c4      	b.n	8003686 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b03      	cmp	r3, #3
 8003504:	d129      	bne.n	800355a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003514:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d00a      	beq.n	8003532 <I2C_MasterReceive_BTF+0x86>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d007      	beq.n	8003532 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003530:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003558:	e095      	b.n	8003686 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d17d      	bne.n	8003660 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d002      	beq.n	8003570 <I2C_MasterReceive_BTF+0xc4>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b10      	cmp	r3, #16
 800356e:	d108      	bne.n	8003582 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e016      	b.n	80035b0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d002      	beq.n	800358e <I2C_MasterReceive_BTF+0xe2>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d108      	bne.n	80035a0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e007      	b.n	80035b0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800360a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b40      	cmp	r3, #64	@ 0x40
 800361e:	d10a      	bne.n	8003636 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff fcaf 	bl	8002f92 <HAL_I2C_MemRxCpltCallback>
}
 8003634:	e027      	b.n	8003686 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d002      	beq.n	800364a <I2C_MasterReceive_BTF+0x19e>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b20      	cmp	r3, #32
 8003648:	d103      	bne.n	8003652 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003650:	e002      	b.n	8003658 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2212      	movs	r2, #18
 8003656:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff fc69 	bl	8002f30 <HAL_I2C_MasterRxCpltCallback>
}
 800365e:	e012      	b.n	8003686 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b40      	cmp	r3, #64	@ 0x40
 80036a0:	d117      	bne.n	80036d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80036bc:	e067      	b.n	800378e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	611a      	str	r2, [r3, #16]
}
 80036d0:	e05d      	b.n	800378e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036da:	d133      	bne.n	8003744 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b21      	cmp	r3, #33	@ 0x21
 80036e6:	d109      	bne.n	80036fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036f8:	611a      	str	r2, [r3, #16]
 80036fa:	e008      	b.n	800370e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	b2da      	uxtb	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003712:	2b00      	cmp	r3, #0
 8003714:	d004      	beq.n	8003720 <I2C_Master_SB+0x92>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	2b00      	cmp	r3, #0
 800371e:	d108      	bne.n	8003732 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003724:	2b00      	cmp	r3, #0
 8003726:	d032      	beq.n	800378e <I2C_Master_SB+0x100>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	2b00      	cmp	r3, #0
 8003730:	d02d      	beq.n	800378e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003740:	605a      	str	r2, [r3, #4]
}
 8003742:	e024      	b.n	800378e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10e      	bne.n	800376a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003750:	b29b      	uxth	r3, r3
 8003752:	11db      	asrs	r3, r3, #7
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f003 0306 	and.w	r3, r3, #6
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f063 030f 	orn	r3, r3, #15
 8003760:	b2da      	uxtb	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	611a      	str	r2, [r3, #16]
}
 8003768:	e011      	b.n	800378e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376e:	2b01      	cmp	r3, #1
 8003770:	d10d      	bne.n	800378e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003776:	b29b      	uxth	r3, r3
 8003778:	11db      	asrs	r3, r3, #7
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f003 0306 	and.w	r3, r3, #6
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f063 030e 	orn	r3, r3, #14
 8003786:	b2da      	uxtb	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	611a      	str	r2, [r3, #16]
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <I2C_Master_ADD10+0x26>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d108      	bne.n	80037d0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00c      	beq.n	80037e0 <I2C_Master_ADD10+0x48>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037de:	605a      	str	r2, [r3, #4]
  }
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b091      	sub	sp, #68	@ 0x44
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b22      	cmp	r3, #34	@ 0x22
 8003812:	f040 8174 	bne.w	8003afe <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <I2C_Master_ADDR+0x54>
 800381e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003822:	2b40      	cmp	r3, #64	@ 0x40
 8003824:	d10b      	bne.n	800383e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003826:	2300      	movs	r3, #0
 8003828:	633b      	str	r3, [r7, #48]	@ 0x30
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	633b      	str	r3, [r7, #48]	@ 0x30
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	633b      	str	r3, [r7, #48]	@ 0x30
 800383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383c:	e16b      	b.n	8003b16 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003842:	2b00      	cmp	r3, #0
 8003844:	d11d      	bne.n	8003882 <I2C_Master_ADDR+0x98>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800384e:	d118      	bne.n	8003882 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003850:	2300      	movs	r3, #0
 8003852:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003874:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003880:	e149      	b.n	8003b16 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d113      	bne.n	80038b4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388c:	2300      	movs	r3, #0
 800388e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	e120      	b.n	8003af6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	f040 808a 	bne.w	80039d4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80038c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038c6:	d137      	bne.n	8003938 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038d6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038e6:	d113      	bne.n	8003910 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f8:	2300      	movs	r3, #0
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
 800390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390e:	e0f2      	b.n	8003af6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003910:	2300      	movs	r3, #0
 8003912:	623b      	str	r3, [r7, #32]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	623b      	str	r3, [r7, #32]
 8003924:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e0de      	b.n	8003af6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393a:	2b08      	cmp	r3, #8
 800393c:	d02e      	beq.n	800399c <I2C_Master_ADDR+0x1b2>
 800393e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003940:	2b20      	cmp	r3, #32
 8003942:	d02b      	beq.n	800399c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003946:	2b12      	cmp	r3, #18
 8003948:	d102      	bne.n	8003950 <I2C_Master_ADDR+0x166>
 800394a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394c:	2b01      	cmp	r3, #1
 800394e:	d125      	bne.n	800399c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003952:	2b04      	cmp	r3, #4
 8003954:	d00e      	beq.n	8003974 <I2C_Master_ADDR+0x18a>
 8003956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003958:	2b02      	cmp	r3, #2
 800395a:	d00b      	beq.n	8003974 <I2C_Master_ADDR+0x18a>
 800395c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395e:	2b10      	cmp	r3, #16
 8003960:	d008      	beq.n	8003974 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	e007      	b.n	8003984 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003982:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	e0ac      	b.n	8003af6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e090      	b.n	8003af6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d158      	bne.n	8003a90 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d021      	beq.n	8003a28 <I2C_Master_ADDR+0x23e>
 80039e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d01e      	beq.n	8003a28 <I2C_Master_ADDR+0x23e>
 80039ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d01b      	beq.n	8003a28 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e012      	b.n	8003a4e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a36:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a5c:	d14b      	bne.n	8003af6 <I2C_Master_ADDR+0x30c>
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a64:	d00b      	beq.n	8003a7e <I2C_Master_ADDR+0x294>
 8003a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d008      	beq.n	8003a7e <I2C_Master_ADDR+0x294>
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d005      	beq.n	8003a7e <I2C_Master_ADDR+0x294>
 8003a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d002      	beq.n	8003a7e <I2C_Master_ADDR+0x294>
 8003a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d13b      	bne.n	8003af6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	e032      	b.n	8003af6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a9e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aae:	d117      	bne.n	8003ae0 <I2C_Master_ADDR+0x2f6>
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ab6:	d00b      	beq.n	8003ad0 <I2C_Master_ADDR+0x2e6>
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d008      	beq.n	8003ad0 <I2C_Master_ADDR+0x2e6>
 8003abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d005      	beq.n	8003ad0 <I2C_Master_ADDR+0x2e6>
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac6:	2b10      	cmp	r3, #16
 8003ac8:	d002      	beq.n	8003ad0 <I2C_Master_ADDR+0x2e6>
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d107      	bne.n	8003ae0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ade:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003afc:	e00b      	b.n	8003b16 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
}
 8003b14:	e7ff      	b.n	8003b16 <I2C_Master_ADDR+0x32c>
 8003b16:	bf00      	nop
 8003b18:	3744      	adds	r7, #68	@ 0x44
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d02b      	beq.n	8003b92 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d114      	bne.n	8003b92 <I2C_SlaveTransmit_TXE+0x72>
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	2b29      	cmp	r3, #41	@ 0x29
 8003b6c:	d111      	bne.n	8003b92 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2221      	movs	r2, #33	@ 0x21
 8003b82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2228      	movs	r2, #40	@ 0x28
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff f9d8 	bl	8002f42 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d011      	beq.n	8003bd0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d02c      	beq.n	8003c4e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d114      	bne.n	8003c4e <I2C_SlaveReceive_RXNE+0x74>
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c28:	d111      	bne.n	8003c4e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c38:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2222      	movs	r2, #34	@ 0x22
 8003c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2228      	movs	r2, #40	@ 0x28
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff f983 	bl	8002f54 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d012      	beq.n	8003c8e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003cb2:	2b28      	cmp	r3, #40	@ 0x28
 8003cb4:	d127      	bne.n	8003d06 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	09db      	lsrs	r3, r3, #7
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	81bb      	strh	r3, [r7, #12]
 8003ce8:	e002      	b.n	8003cf0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003cf8:	89ba      	ldrh	r2, [r7, #12]
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff f931 	bl	8002f66 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d04:	e00e      	b.n	8003d24 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d4a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d78:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d88:	d172      	bne.n	8003e70 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	2b22      	cmp	r3, #34	@ 0x22
 8003d8e:	d002      	beq.n	8003d96 <I2C_Slave_STOPF+0x6a>
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d94:	d135      	bne.n	8003e02 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	f043 0204 	orr.w	r2, r3, #4
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe fc32 	bl	8002638 <HAL_DMA_GetState>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d049      	beq.n	8003e6e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dde:	4a69      	ldr	r2, [pc, #420]	@ (8003f84 <I2C_Slave_STOPF+0x258>)
 8003de0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fbae 	bl	8002548 <HAL_DMA_Abort_IT>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d03d      	beq.n	8003e6e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e00:	e035      	b.n	8003e6e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	f043 0204 	orr.w	r2, r3, #4
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fbfc 	bl	8002638 <HAL_DMA_GetState>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d014      	beq.n	8003e70 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4a:	4a4e      	ldr	r2, [pc, #312]	@ (8003f84 <I2C_Slave_STOPF+0x258>)
 8003e4c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe fb78 	bl	8002548 <HAL_DMA_Abort_IT>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4798      	blx	r3
 8003e6c:	e000      	b.n	8003e70 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e6e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d03e      	beq.n	8003ef8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d112      	bne.n	8003eae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb8:	2b40      	cmp	r3, #64	@ 0x40
 8003eba:	d112      	bne.n	8003ee2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	f043 0204 	orr.w	r2, r3, #4
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f843 	bl	8003f8c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f06:	e039      	b.n	8003f7c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f0c:	d109      	bne.n	8003f22 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2228      	movs	r2, #40	@ 0x28
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff f819 	bl	8002f54 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b28      	cmp	r3, #40	@ 0x28
 8003f2c:	d111      	bne.n	8003f52 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a15      	ldr	r2, [pc, #84]	@ (8003f88 <I2C_Slave_STOPF+0x25c>)
 8003f32:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff f818 	bl	8002f80 <HAL_I2C_ListenCpltCallback>
}
 8003f50:	e014      	b.n	8003f7c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	2b22      	cmp	r3, #34	@ 0x22
 8003f58:	d002      	beq.n	8003f60 <I2C_Slave_STOPF+0x234>
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b22      	cmp	r3, #34	@ 0x22
 8003f5e:	d10d      	bne.n	8003f7c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fe ffec 	bl	8002f54 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	080041f1 	.word	0x080041f1
 8003f88:	ffff0000 	.word	0xffff0000

08003f8c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f9a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fa2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fa4:	7bbb      	ldrb	r3, [r7, #14]
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d002      	beq.n	8003fb0 <I2C_ITError+0x24>
 8003faa:	7bbb      	ldrb	r3, [r7, #14]
 8003fac:	2b40      	cmp	r3, #64	@ 0x40
 8003fae:	d10a      	bne.n	8003fc6 <I2C_ITError+0x3a>
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b22      	cmp	r3, #34	@ 0x22
 8003fb4:	d107      	bne.n	8003fc6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fc4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003fcc:	2b28      	cmp	r3, #40	@ 0x28
 8003fce:	d107      	bne.n	8003fe0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2228      	movs	r2, #40	@ 0x28
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003fde:	e015      	b.n	800400c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fee:	d00a      	beq.n	8004006 <I2C_ITError+0x7a>
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b60      	cmp	r3, #96	@ 0x60
 8003ff4:	d007      	beq.n	8004006 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004016:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800401a:	d162      	bne.n	80040e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800402a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004030:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b01      	cmp	r3, #1
 8004038:	d020      	beq.n	800407c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403e:	4a6a      	ldr	r2, [pc, #424]	@ (80041e8 <I2C_ITError+0x25c>)
 8004040:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fa7e 	bl	8002548 <HAL_DMA_Abort_IT>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8089 	beq.w	8004166 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004076:	4610      	mov	r0, r2
 8004078:	4798      	blx	r3
 800407a:	e074      	b.n	8004166 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004080:	4a59      	ldr	r2, [pc, #356]	@ (80041e8 <I2C_ITError+0x25c>)
 8004082:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fa5d 	bl	8002548 <HAL_DMA_Abort_IT>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d068      	beq.n	8004166 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409e:	2b40      	cmp	r3, #64	@ 0x40
 80040a0:	d10b      	bne.n	80040ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040dc:	4610      	mov	r0, r2
 80040de:	4798      	blx	r3
 80040e0:	e041      	b.n	8004166 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b60      	cmp	r3, #96	@ 0x60
 80040ec:	d125      	bne.n	800413a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004106:	2b40      	cmp	r3, #64	@ 0x40
 8004108:	d10b      	bne.n	8004122 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fe ff3f 	bl	8002fb6 <HAL_I2C_AbortCpltCallback>
 8004138:	e015      	b.n	8004166 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004144:	2b40      	cmp	r3, #64	@ 0x40
 8004146:	d10b      	bne.n	8004160 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691a      	ldr	r2, [r3, #16]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fe ff1f 	bl	8002fa4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10e      	bne.n	8004194 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004186:	2b00      	cmp	r3, #0
 8004188:	d104      	bne.n	8004194 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041a2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041aa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d113      	bne.n	80041e0 <I2C_ITError+0x254>
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b28      	cmp	r3, #40	@ 0x28
 80041bc:	d110      	bne.n	80041e0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a0a      	ldr	r2, [pc, #40]	@ (80041ec <I2C_ITError+0x260>)
 80041c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fe fed0 	bl	8002f80 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	080041f1 	.word	0x080041f1
 80041ec:	ffff0000 	.word	0xffff0000

080041f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004208:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800420a:	4b4b      	ldr	r3, [pc, #300]	@ (8004338 <I2C_DMAAbort+0x148>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	08db      	lsrs	r3, r3, #3
 8004210:	4a4a      	ldr	r2, [pc, #296]	@ (800433c <I2C_DMAAbort+0x14c>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	0a1a      	lsrs	r2, r3, #8
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	00da      	lsls	r2, r3, #3
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	f043 0220 	orr.w	r2, r3, #32
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004236:	e00a      	b.n	800424e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3b01      	subs	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800424c:	d0ea      	beq.n	8004224 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800425a:	2200      	movs	r2, #0
 800425c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426a:	2200      	movs	r2, #0
 800426c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800427c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004290:	2200      	movs	r2, #0
 8004292:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a0:	2200      	movs	r2, #0
 80042a2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b60      	cmp	r3, #96	@ 0x60
 80042be:	d10e      	bne.n	80042de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2200      	movs	r2, #0
 80042d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	f7fe fe6d 	bl	8002fb6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042dc:	e027      	b.n	800432e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042e4:	2b28      	cmp	r3, #40	@ 0x28
 80042e6:	d117      	bne.n	8004318 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004306:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2228      	movs	r2, #40	@ 0x28
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004316:	e007      	b.n	8004328 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004328:	6978      	ldr	r0, [r7, #20]
 800432a:	f7fe fe3b 	bl	8002fa4 <HAL_I2C_ErrorCallback>
}
 800432e:	bf00      	nop
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000000 	.word	0x20000000
 800433c:	14f8b589 	.word	0x14f8b589

08004340 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800434c:	4b13      	ldr	r3, [pc, #76]	@ (800439c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	08db      	lsrs	r3, r3, #3
 8004352:	4a13      	ldr	r2, [pc, #76]	@ (80043a0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	0a1a      	lsrs	r2, r3, #8
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3b01      	subs	r3, #1
 8004366:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d107      	bne.n	800437e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f043 0220 	orr.w	r2, r3, #32
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e008      	b.n	8004390 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438c:	d0e9      	beq.n	8004362 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000000 	.word	0x20000000
 80043a0:	14f8b589 	.word	0x14f8b589

080043a4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80043b4:	d103      	bne.n	80043be <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80043bc:	e007      	b.n	80043ce <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80043c6:	d102      	bne.n	80043ce <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2208      	movs	r2, #8
 80043cc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr

080043d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e272      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 8087 	beq.w	8004506 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043f8:	4b92      	ldr	r3, [pc, #584]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 030c 	and.w	r3, r3, #12
 8004400:	2b04      	cmp	r3, #4
 8004402:	d00c      	beq.n	800441e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004404:	4b8f      	ldr	r3, [pc, #572]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 030c 	and.w	r3, r3, #12
 800440c:	2b08      	cmp	r3, #8
 800440e:	d112      	bne.n	8004436 <HAL_RCC_OscConfig+0x5e>
 8004410:	4b8c      	ldr	r3, [pc, #560]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800441c:	d10b      	bne.n	8004436 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441e:	4b89      	ldr	r3, [pc, #548]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d06c      	beq.n	8004504 <HAL_RCC_OscConfig+0x12c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d168      	bne.n	8004504 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e24c      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800443e:	d106      	bne.n	800444e <HAL_RCC_OscConfig+0x76>
 8004440:	4b80      	ldr	r3, [pc, #512]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a7f      	ldr	r2, [pc, #508]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	e02e      	b.n	80044ac <HAL_RCC_OscConfig+0xd4>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10c      	bne.n	8004470 <HAL_RCC_OscConfig+0x98>
 8004456:	4b7b      	ldr	r3, [pc, #492]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a7a      	ldr	r2, [pc, #488]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 800445c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	4b78      	ldr	r3, [pc, #480]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a77      	ldr	r2, [pc, #476]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004468:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	e01d      	b.n	80044ac <HAL_RCC_OscConfig+0xd4>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0xbc>
 800447a:	4b72      	ldr	r3, [pc, #456]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a71      	ldr	r2, [pc, #452]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	4b6f      	ldr	r3, [pc, #444]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a6e      	ldr	r2, [pc, #440]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e00b      	b.n	80044ac <HAL_RCC_OscConfig+0xd4>
 8004494:	4b6b      	ldr	r3, [pc, #428]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a6a      	ldr	r2, [pc, #424]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 800449a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b68      	ldr	r3, [pc, #416]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a67      	ldr	r2, [pc, #412]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 80044a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d013      	beq.n	80044dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fd f934 	bl	8001720 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044bc:	f7fd f930 	bl	8001720 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	@ 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e200      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0xe4>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fd f920 	bl	8001720 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fd f91c 	bl	8001720 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	@ 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e1ec      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f6:	4b53      	ldr	r3, [pc, #332]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x10c>
 8004502:	e000      	b.n	8004506 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d063      	beq.n	80045da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004512:	4b4c      	ldr	r3, [pc, #304]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800451e:	4b49      	ldr	r3, [pc, #292]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b08      	cmp	r3, #8
 8004528:	d11c      	bne.n	8004564 <HAL_RCC_OscConfig+0x18c>
 800452a:	4b46      	ldr	r3, [pc, #280]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d116      	bne.n	8004564 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004536:	4b43      	ldr	r3, [pc, #268]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_RCC_OscConfig+0x176>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d001      	beq.n	800454e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e1c0      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454e:	4b3d      	ldr	r3, [pc, #244]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4939      	ldr	r1, [pc, #228]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 800455e:	4313      	orrs	r3, r2
 8004560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004562:	e03a      	b.n	80045da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800456c:	4b36      	ldr	r3, [pc, #216]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004572:	f7fd f8d5 	bl	8001720 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800457a:	f7fd f8d1 	bl	8001720 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e1a1      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458c:	4b2d      	ldr	r3, [pc, #180]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004598:	4b2a      	ldr	r3, [pc, #168]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4927      	ldr	r1, [pc, #156]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	600b      	str	r3, [r1, #0]
 80045ac:	e015      	b.n	80045da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ae:	4b26      	ldr	r3, [pc, #152]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fd f8b4 	bl	8001720 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045bc:	f7fd f8b0 	bl	8001720 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e180      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d03a      	beq.n	800465c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d019      	beq.n	8004622 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ee:	4b17      	ldr	r3, [pc, #92]	@ (800464c <HAL_RCC_OscConfig+0x274>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f4:	f7fd f894 	bl	8001720 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045fc:	f7fd f890 	bl	8001720 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e160      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460e:	4b0d      	ldr	r3, [pc, #52]	@ (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800461a:	2001      	movs	r0, #1
 800461c:	f000 face 	bl	8004bbc <RCC_Delay>
 8004620:	e01c      	b.n	800465c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004622:	4b0a      	ldr	r3, [pc, #40]	@ (800464c <HAL_RCC_OscConfig+0x274>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004628:	f7fd f87a 	bl	8001720 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800462e:	e00f      	b.n	8004650 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004630:	f7fd f876 	bl	8001720 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d908      	bls.n	8004650 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e146      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000
 8004648:	42420000 	.word	0x42420000
 800464c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004650:	4b92      	ldr	r3, [pc, #584]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e9      	bne.n	8004630 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80a6 	beq.w	80047b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800466e:	4b8b      	ldr	r3, [pc, #556]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10d      	bne.n	8004696 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800467a:	4b88      	ldr	r3, [pc, #544]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	4a87      	ldr	r2, [pc, #540]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004684:	61d3      	str	r3, [r2, #28]
 8004686:	4b85      	ldr	r3, [pc, #532]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004692:	2301      	movs	r3, #1
 8004694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004696:	4b82      	ldr	r3, [pc, #520]	@ (80048a0 <HAL_RCC_OscConfig+0x4c8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d118      	bne.n	80046d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046a2:	4b7f      	ldr	r3, [pc, #508]	@ (80048a0 <HAL_RCC_OscConfig+0x4c8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a7e      	ldr	r2, [pc, #504]	@ (80048a0 <HAL_RCC_OscConfig+0x4c8>)
 80046a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ae:	f7fd f837 	bl	8001720 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b6:	f7fd f833 	bl	8001720 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b64      	cmp	r3, #100	@ 0x64
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e103      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c8:	4b75      	ldr	r3, [pc, #468]	@ (80048a0 <HAL_RCC_OscConfig+0x4c8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d106      	bne.n	80046ea <HAL_RCC_OscConfig+0x312>
 80046dc:	4b6f      	ldr	r3, [pc, #444]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	4a6e      	ldr	r2, [pc, #440]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	6213      	str	r3, [r2, #32]
 80046e8:	e02d      	b.n	8004746 <HAL_RCC_OscConfig+0x36e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10c      	bne.n	800470c <HAL_RCC_OscConfig+0x334>
 80046f2:	4b6a      	ldr	r3, [pc, #424]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	4a69      	ldr	r2, [pc, #420]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	6213      	str	r3, [r2, #32]
 80046fe:	4b67      	ldr	r3, [pc, #412]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	4a66      	ldr	r2, [pc, #408]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004704:	f023 0304 	bic.w	r3, r3, #4
 8004708:	6213      	str	r3, [r2, #32]
 800470a:	e01c      	b.n	8004746 <HAL_RCC_OscConfig+0x36e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	2b05      	cmp	r3, #5
 8004712:	d10c      	bne.n	800472e <HAL_RCC_OscConfig+0x356>
 8004714:	4b61      	ldr	r3, [pc, #388]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	4a60      	ldr	r2, [pc, #384]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 800471a:	f043 0304 	orr.w	r3, r3, #4
 800471e:	6213      	str	r3, [r2, #32]
 8004720:	4b5e      	ldr	r3, [pc, #376]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	4a5d      	ldr	r2, [pc, #372]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	6213      	str	r3, [r2, #32]
 800472c:	e00b      	b.n	8004746 <HAL_RCC_OscConfig+0x36e>
 800472e:	4b5b      	ldr	r3, [pc, #364]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	4a5a      	ldr	r2, [pc, #360]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	6213      	str	r3, [r2, #32]
 800473a:	4b58      	ldr	r3, [pc, #352]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	4a57      	ldr	r2, [pc, #348]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004740:	f023 0304 	bic.w	r3, r3, #4
 8004744:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d015      	beq.n	800477a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474e:	f7fc ffe7 	bl	8001720 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fc ffe3 	bl	8001720 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e0b1      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	4b4b      	ldr	r3, [pc, #300]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ee      	beq.n	8004756 <HAL_RCC_OscConfig+0x37e>
 8004778:	e014      	b.n	80047a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477a:	f7fc ffd1 	bl	8001720 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004780:	e00a      	b.n	8004798 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004782:	f7fc ffcd 	bl	8001720 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004790:	4293      	cmp	r3, r2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e09b      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004798:	4b40      	ldr	r3, [pc, #256]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1ee      	bne.n	8004782 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d105      	bne.n	80047b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047aa:	4b3c      	ldr	r3, [pc, #240]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	4a3b      	ldr	r2, [pc, #236]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8087 	beq.w	80048ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c0:	4b36      	ldr	r3, [pc, #216]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d061      	beq.n	8004890 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d146      	bne.n	8004862 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d4:	4b33      	ldr	r3, [pc, #204]	@ (80048a4 <HAL_RCC_OscConfig+0x4cc>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047da:	f7fc ffa1 	bl	8001720 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e2:	f7fc ff9d 	bl	8001720 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e06d      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f4:	4b29      	ldr	r3, [pc, #164]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004808:	d108      	bne.n	800481c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800480a:	4b24      	ldr	r3, [pc, #144]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	4921      	ldr	r1, [pc, #132]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800481c:	4b1f      	ldr	r3, [pc, #124]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a19      	ldr	r1, [r3, #32]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	430b      	orrs	r3, r1
 800482e:	491b      	ldr	r1, [pc, #108]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004830:	4313      	orrs	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004834:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <HAL_RCC_OscConfig+0x4cc>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483a:	f7fc ff71 	bl	8001720 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004842:	f7fc ff6d 	bl	8001720 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e03d      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004854:	4b11      	ldr	r3, [pc, #68]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x46a>
 8004860:	e035      	b.n	80048ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004862:	4b10      	ldr	r3, [pc, #64]	@ (80048a4 <HAL_RCC_OscConfig+0x4cc>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fc ff5a 	bl	8001720 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004870:	f7fc ff56 	bl	8001720 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e026      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004882:	4b06      	ldr	r3, [pc, #24]	@ (800489c <HAL_RCC_OscConfig+0x4c4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x498>
 800488e:	e01e      	b.n	80048ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d107      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e019      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
 800489c:	40021000 	.word	0x40021000
 80048a0:	40007000 	.word	0x40007000
 80048a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048a8:	4b0b      	ldr	r3, [pc, #44]	@ (80048d8 <HAL_RCC_OscConfig+0x500>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d106      	bne.n	80048ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d001      	beq.n	80048ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40021000 	.word	0x40021000

080048dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0d0      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048f0:	4b6a      	ldr	r3, [pc, #424]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c0>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d910      	bls.n	8004920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b67      	ldr	r3, [pc, #412]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 0207 	bic.w	r2, r3, #7
 8004906:	4965      	ldr	r1, [pc, #404]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c0>)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b63      	ldr	r3, [pc, #396]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0b8      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d020      	beq.n	800496e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004938:	4b59      	ldr	r3, [pc, #356]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4a58      	ldr	r2, [pc, #352]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800493e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004942:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004950:	4b53      	ldr	r3, [pc, #332]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	4a52      	ldr	r2, [pc, #328]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004956:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800495a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800495c:	4b50      	ldr	r3, [pc, #320]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	494d      	ldr	r1, [pc, #308]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d040      	beq.n	80049fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d107      	bne.n	8004992 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	4b47      	ldr	r3, [pc, #284]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d115      	bne.n	80049ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e07f      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d107      	bne.n	80049aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499a:	4b41      	ldr	r3, [pc, #260]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e073      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049aa:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e06b      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ba:	4b39      	ldr	r3, [pc, #228]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f023 0203 	bic.w	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4936      	ldr	r1, [pc, #216]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049cc:	f7fc fea8 	bl	8001720 <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d2:	e00a      	b.n	80049ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d4:	f7fc fea4 	bl	8001720 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e053      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ea:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f003 020c 	and.w	r2, r3, #12
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d1eb      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049fc:	4b27      	ldr	r3, [pc, #156]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d210      	bcs.n	8004a2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0a:	4b24      	ldr	r3, [pc, #144]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f023 0207 	bic.w	r2, r3, #7
 8004a12:	4922      	ldr	r1, [pc, #136]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c0>)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1a:	4b20      	ldr	r3, [pc, #128]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e032      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a38:	4b19      	ldr	r3, [pc, #100]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4916      	ldr	r1, [pc, #88]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a56:	4b12      	ldr	r3, [pc, #72]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	490e      	ldr	r1, [pc, #56]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a6a:	f000 f821 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	490a      	ldr	r1, [pc, #40]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7c:	5ccb      	ldrb	r3, [r1, r3]
 8004a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a82:	4a09      	ldr	r2, [pc, #36]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1cc>)
 8004a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a86:	4b09      	ldr	r3, [pc, #36]	@ (8004aac <HAL_RCC_ClockConfig+0x1d0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fc fe06 	bl	800169c <HAL_InitTick>

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40022000 	.word	0x40022000
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	0800c178 	.word	0x0800c178
 8004aa8:	20000000 	.word	0x20000000
 8004aac:	20000004 	.word	0x20000004

08004ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	2300      	movs	r3, #0
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004aca:	4b1e      	ldr	r3, [pc, #120]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x94>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d002      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x30>
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x36>
 8004ade:	e027      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ae0:	4b19      	ldr	r3, [pc, #100]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ae2:	613b      	str	r3, [r7, #16]
      break;
 8004ae4:	e027      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	0c9b      	lsrs	r3, r3, #18
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	4a17      	ldr	r2, [pc, #92]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004af0:	5cd3      	ldrb	r3, [r2, r3]
 8004af2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d010      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004afe:	4b11      	ldr	r3, [pc, #68]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	0c5b      	lsrs	r3, r3, #17
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	4a11      	ldr	r2, [pc, #68]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b0a:	5cd3      	ldrb	r3, [r2, r3]
 8004b0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a0d      	ldr	r2, [pc, #52]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b12:	fb03 f202 	mul.w	r2, r3, r2
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	e004      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a0c      	ldr	r2, [pc, #48]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b24:	fb02 f303 	mul.w	r3, r2, r3
 8004b28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	613b      	str	r3, [r7, #16]
      break;
 8004b2e:	e002      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b30:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b32:	613b      	str	r3, [r7, #16]
      break;
 8004b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b36:	693b      	ldr	r3, [r7, #16]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	007a1200 	.word	0x007a1200
 8004b4c:	0800c190 	.word	0x0800c190
 8004b50:	0800c1a0 	.word	0x0800c1a0
 8004b54:	003d0900 	.word	0x003d0900

08004b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b5c:	4b02      	ldr	r3, [pc, #8]	@ (8004b68 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	20000000 	.word	0x20000000

08004b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b70:	f7ff fff2 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	4903      	ldr	r1, [pc, #12]	@ (8004b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b82:	5ccb      	ldrb	r3, [r1, r3]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	0800c188 	.word	0x0800c188

08004b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b98:	f7ff ffde 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4b05      	ldr	r3, [pc, #20]	@ (8004bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	0adb      	lsrs	r3, r3, #11
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	4903      	ldr	r1, [pc, #12]	@ (8004bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004baa:	5ccb      	ldrb	r3, [r1, r3]
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	0800c188 	.word	0x0800c188

08004bbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <RCC_Delay+0x34>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf4 <RCC_Delay+0x38>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	0a5b      	lsrs	r3, r3, #9
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	fb02 f303 	mul.w	r3, r2, r3
 8004bd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004bd8:	bf00      	nop
  }
  while (Delay --);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1e5a      	subs	r2, r3, #1
 8004bde:	60fa      	str	r2, [r7, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f9      	bne.n	8004bd8 <RCC_Delay+0x1c>
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr
 8004bf0:	20000000 	.word	0x20000000
 8004bf4:	10624dd3 	.word	0x10624dd3

08004bf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e042      	b.n	8004c90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fc fb6a 	bl	80012f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2224      	movs	r2, #36	@ 0x24
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fded 	bl	800581c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08a      	sub	sp, #40	@ 0x28
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d175      	bne.n	8004da4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_UART_Transmit+0x2c>
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e06e      	b.n	8004da6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2221      	movs	r2, #33	@ 0x21
 8004cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cd6:	f7fc fd23 	bl	8001720 <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	88fa      	ldrh	r2, [r7, #6]
 8004ce6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf0:	d108      	bne.n	8004d04 <HAL_UART_Transmit+0x6c>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d104      	bne.n	8004d04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	61bb      	str	r3, [r7, #24]
 8004d02:	e003      	b.n	8004d0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d0c:	e02e      	b.n	8004d6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2200      	movs	r2, #0
 8004d16:	2180      	movs	r1, #128	@ 0x80
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fb52 	bl	80053c2 <UART_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e03a      	b.n	8004da6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10b      	bne.n	8004d4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	3302      	adds	r3, #2
 8004d4a:	61bb      	str	r3, [r7, #24]
 8004d4c:	e007      	b.n	8004d5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	781a      	ldrb	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1cb      	bne.n	8004d0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2140      	movs	r1, #64	@ 0x40
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 fb1e 	bl	80053c2 <UART_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e006      	b.n	8004da6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e000      	b.n	8004da6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
  }
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b08c      	sub	sp, #48	@ 0x30
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	4613      	mov	r3, r2
 8004dba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d14a      	bne.n	8004e5e <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e043      	b.n	8004e60 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	461a      	mov	r2, r3
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fb42 	bl	8005474 <UART_Start_Receive_IT>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004df6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d12c      	bne.n	8004e58 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d125      	bne.n	8004e52 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330c      	adds	r3, #12
 8004e22:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f043 0310 	orr.w	r3, r3, #16
 8004e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e3e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	6a39      	ldr	r1, [r7, #32]
 8004e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e5      	bne.n	8004e1c <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004e50:	e002      	b.n	8004e58 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004e58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e5c:	e000      	b.n	8004e60 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004e5e:	2302      	movs	r3, #2
  }
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3730      	adds	r7, #48	@ 0x30
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10f      	bne.n	8004ece <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <HAL_UART_IRQHandler+0x66>
 8004eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fbea 	bl	80056a0 <UART_Receive_IT>
      return;
 8004ecc:	e25b      	b.n	8005386 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80de 	beq.w	8005094 <HAL_UART_IRQHandler+0x22c>
 8004ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80d1 	beq.w	8005094 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_UART_IRQHandler+0xae>
 8004efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0e:	f043 0201 	orr.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00b      	beq.n	8004f3a <HAL_UART_IRQHandler+0xd2>
 8004f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	f043 0202 	orr.w	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <HAL_UART_IRQHandler+0xf6>
 8004f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f56:	f043 0204 	orr.w	r2, r3, #4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d011      	beq.n	8004f8e <HAL_UART_IRQHandler+0x126>
 8004f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d105      	bne.n	8004f82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f86:	f043 0208 	orr.w	r2, r3, #8
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 81f2 	beq.w	800537c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x14e>
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fb75 	bl	80056a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bf14      	ite	ne
 8004fc4:	2301      	movne	r3, #1
 8004fc6:	2300      	moveq	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x17a>
 8004fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d04f      	beq.n	8005082 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fa7f 	bl	80054e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d041      	beq.n	800507a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3314      	adds	r3, #20
 8004ffc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800500c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005014:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3314      	adds	r3, #20
 800501e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005022:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800502e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800503a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1d9      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d013      	beq.n	8005072 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504e:	4a7e      	ldr	r2, [pc, #504]	@ (8005248 <HAL_UART_IRQHandler+0x3e0>)
 8005050:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005056:	4618      	mov	r0, r3
 8005058:	f7fd fa76 	bl	8002548 <HAL_DMA_Abort_IT>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800506c:	4610      	mov	r0, r2
 800506e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005070:	e00e      	b.n	8005090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f99c 	bl	80053b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005078:	e00a      	b.n	8005090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f998 	bl	80053b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005080:	e006      	b.n	8005090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f994 	bl	80053b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800508e:	e175      	b.n	800537c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	bf00      	nop
    return;
 8005092:	e173      	b.n	800537c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005098:	2b01      	cmp	r3, #1
 800509a:	f040 814f 	bne.w	800533c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8148 	beq.w	800533c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8141 	beq.w	800533c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 80b6 	beq.w	800524c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8145 	beq.w	8005380 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050fe:	429a      	cmp	r2, r3
 8005100:	f080 813e 	bcs.w	8005380 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800510a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b20      	cmp	r3, #32
 8005114:	f000 8088 	beq.w	8005228 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	330c      	adds	r3, #12
 800511e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800512e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005132:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005136:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005144:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005148:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005150:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800515c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1d9      	bne.n	8005118 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3314      	adds	r3, #20
 800516a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005174:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3314      	adds	r3, #20
 8005184:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005188:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800518c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005190:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005194:	e841 2300 	strex	r3, r2, [r1]
 8005198:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800519a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e1      	bne.n	8005164 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3314      	adds	r3, #20
 80051a6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3314      	adds	r3, #20
 80051c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051c4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e3      	bne.n	80051a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	330c      	adds	r3, #12
 80051ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051f8:	f023 0310 	bic.w	r3, r3, #16
 80051fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	330c      	adds	r3, #12
 8005206:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800520a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800520c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005210:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e3      	bne.n	80051e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005222:	4618      	mov	r0, r3
 8005224:	f7fd f955 	bl	80024d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005236:	b29b      	uxth	r3, r3
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	b29b      	uxth	r3, r3
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fb ff26 	bl	8001090 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005244:	e09c      	b.n	8005380 <HAL_UART_IRQHandler+0x518>
 8005246:	bf00      	nop
 8005248:	080055ab 	.word	0x080055ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005254:	b29b      	uxth	r3, r3
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 808e 	beq.w	8005384 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 8089 	beq.w	8005384 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	330c      	adds	r3, #12
 8005278:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005288:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005296:	647a      	str	r2, [r7, #68]	@ 0x44
 8005298:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800529c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e3      	bne.n	8005272 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3314      	adds	r3, #20
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	623b      	str	r3, [r7, #32]
   return(result);
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3314      	adds	r3, #20
 80052ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80052d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e3      	bne.n	80052aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0310 	bic.w	r3, r3, #16
 8005306:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005314:	61fa      	str	r2, [r7, #28]
 8005316:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	69b9      	ldr	r1, [r7, #24]
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	617b      	str	r3, [r7, #20]
   return(result);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e3      	bne.n	80052f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800532e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7fb feab 	bl	8001090 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800533a:	e023      	b.n	8005384 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800533c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005344:	2b00      	cmp	r3, #0
 8005346:	d009      	beq.n	800535c <HAL_UART_IRQHandler+0x4f4>
 8005348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800534c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f93c 	bl	80055d2 <UART_Transmit_IT>
    return;
 800535a:	e014      	b.n	8005386 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800535c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00e      	beq.n	8005386 <HAL_UART_IRQHandler+0x51e>
 8005368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800536c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f97b 	bl	8005670 <UART_EndTransmit_IT>
    return;
 800537a:	e004      	b.n	8005386 <HAL_UART_IRQHandler+0x51e>
    return;
 800537c:	bf00      	nop
 800537e:	e002      	b.n	8005386 <HAL_UART_IRQHandler+0x51e>
      return;
 8005380:	bf00      	nop
 8005382:	e000      	b.n	8005386 <HAL_UART_IRQHandler+0x51e>
      return;
 8005384:	bf00      	nop
  }
}
 8005386:	37e8      	adds	r7, #232	@ 0xe8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr

0800539e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr

080053b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr

080053c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b086      	sub	sp, #24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	603b      	str	r3, [r7, #0]
 80053ce:	4613      	mov	r3, r2
 80053d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d2:	e03b      	b.n	800544c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d037      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053dc:	f7fc f9a0 	bl	8001720 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	6a3a      	ldr	r2, [r7, #32]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d302      	bcc.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e03a      	b.n	800546c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d023      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b80      	cmp	r3, #128	@ 0x80
 8005408:	d020      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0x8a>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b40      	cmp	r3, #64	@ 0x40
 800540e:	d01d      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b08      	cmp	r3, #8
 800541c:	d116      	bne.n	800544c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f856 	bl	80054e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2208      	movs	r2, #8
 800543e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e00f      	b.n	800546c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4013      	ands	r3, r2
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	429a      	cmp	r2, r3
 800545a:	bf0c      	ite	eq
 800545c:	2301      	moveq	r3, #1
 800545e:	2300      	movne	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	429a      	cmp	r2, r3
 8005468:	d0b4      	beq.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	4613      	mov	r3, r2
 8005480:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	88fa      	ldrh	r2, [r7, #6]
 800548c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	88fa      	ldrh	r2, [r7, #6]
 8005492:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2222      	movs	r2, #34	@ 0x22
 800549e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695a      	ldr	r2, [r3, #20]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0201 	orr.w	r2, r2, #1
 80054c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0220 	orr.w	r2, r2, #32
 80054d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr

080054e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b095      	sub	sp, #84	@ 0x54
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	330c      	adds	r3, #12
 80054f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	330c      	adds	r3, #12
 800550c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800550e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005510:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005514:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800551c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e5      	bne.n	80054ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3314      	adds	r3, #20
 8005528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	61fb      	str	r3, [r7, #28]
   return(result);
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3314      	adds	r3, #20
 8005540:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005542:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005544:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e5      	bne.n	8005522 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555a:	2b01      	cmp	r3, #1
 800555c:	d119      	bne.n	8005592 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	330c      	adds	r3, #12
 8005564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	60bb      	str	r3, [r7, #8]
   return(result);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f023 0310 	bic.w	r3, r3, #16
 8005574:	647b      	str	r3, [r7, #68]	@ 0x44
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	330c      	adds	r3, #12
 800557c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800557e:	61ba      	str	r2, [r7, #24]
 8005580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	6979      	ldr	r1, [r7, #20]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	613b      	str	r3, [r7, #16]
   return(result);
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e5      	bne.n	800555e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055a0:	bf00      	nop
 80055a2:	3754      	adds	r7, #84	@ 0x54
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff fef3 	bl	80053b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b21      	cmp	r3, #33	@ 0x21
 80055e4:	d13e      	bne.n	8005664 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ee:	d114      	bne.n	800561a <UART_Transmit_IT+0x48>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d110      	bne.n	800561a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800560c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	1c9a      	adds	r2, r3, #2
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	621a      	str	r2, [r3, #32]
 8005618:	e008      	b.n	800562c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	1c59      	adds	r1, r3, #1
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6211      	str	r1, [r2, #32]
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29b      	uxth	r3, r3
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	4619      	mov	r1, r3
 800563a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10f      	bne.n	8005660 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800564e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800565e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005686:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fe7b 	bl	800538c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08c      	sub	sp, #48	@ 0x30
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b22      	cmp	r3, #34	@ 0x22
 80056b2:	f040 80ae 	bne.w	8005812 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056be:	d117      	bne.n	80056f0 <UART_Receive_IT+0x50>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d113      	bne.n	80056f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056de:	b29a      	uxth	r2, r3
 80056e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e8:	1c9a      	adds	r2, r3, #2
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80056ee:	e026      	b.n	800573e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005702:	d007      	beq.n	8005714 <UART_Receive_IT+0x74>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <UART_Receive_IT+0x82>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d106      	bne.n	8005722 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	e008      	b.n	8005734 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800572e:	b2da      	uxtb	r2, r3
 8005730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005732:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29b      	uxth	r3, r3
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4619      	mov	r1, r3
 800574c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800574e:	2b00      	cmp	r3, #0
 8005750:	d15d      	bne.n	800580e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0220 	bic.w	r2, r2, #32
 8005760:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005770:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695a      	ldr	r2, [r3, #20]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0201 	bic.w	r2, r2, #1
 8005780:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	2b01      	cmp	r3, #1
 8005796:	d135      	bne.n	8005804 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	330c      	adds	r3, #12
 80057a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	613b      	str	r3, [r7, #16]
   return(result);
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f023 0310 	bic.w	r3, r3, #16
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057be:	623a      	str	r2, [r7, #32]
 80057c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	69f9      	ldr	r1, [r7, #28]
 80057c4:	6a3a      	ldr	r2, [r7, #32]
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e5      	bne.n	800579e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b10      	cmp	r3, #16
 80057de:	d10a      	bne.n	80057f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7fb fc47 	bl	8001090 <HAL_UARTEx_RxEventCallback>
 8005802:	e002      	b.n	800580a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff fdca 	bl	800539e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	e002      	b.n	8005814 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	e000      	b.n	8005814 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005812:	2302      	movs	r3, #2
  }
}
 8005814:	4618      	mov	r0, r3
 8005816:	3730      	adds	r7, #48	@ 0x30
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005856:	f023 030c 	bic.w	r3, r3, #12
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	430b      	orrs	r3, r1
 8005862:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a2c      	ldr	r2, [pc, #176]	@ (8005930 <UART_SetConfig+0x114>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d103      	bne.n	800588c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005884:	f7ff f986 	bl	8004b94 <HAL_RCC_GetPCLK2Freq>
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	e002      	b.n	8005892 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800588c:	f7ff f96e 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 8005890:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009a      	lsls	r2, r3, #2
 800589c:	441a      	add	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	4a22      	ldr	r2, [pc, #136]	@ (8005934 <UART_SetConfig+0x118>)
 80058aa:	fba2 2303 	umull	r2, r3, r2, r3
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	0119      	lsls	r1, r3, #4
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009a      	lsls	r2, r3, #2
 80058bc:	441a      	add	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80058c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005934 <UART_SetConfig+0x118>)
 80058ca:	fba3 0302 	umull	r0, r3, r3, r2
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	2064      	movs	r0, #100	@ 0x64
 80058d2:	fb00 f303 	mul.w	r3, r0, r3
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	3332      	adds	r3, #50	@ 0x32
 80058dc:	4a15      	ldr	r2, [pc, #84]	@ (8005934 <UART_SetConfig+0x118>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058e8:	4419      	add	r1, r3
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009a      	lsls	r2, r3, #2
 80058f4:	441a      	add	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005900:	4b0c      	ldr	r3, [pc, #48]	@ (8005934 <UART_SetConfig+0x118>)
 8005902:	fba3 0302 	umull	r0, r3, r3, r2
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	2064      	movs	r0, #100	@ 0x64
 800590a:	fb00 f303 	mul.w	r3, r0, r3
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	3332      	adds	r3, #50	@ 0x32
 8005914:	4a07      	ldr	r2, [pc, #28]	@ (8005934 <UART_SetConfig+0x118>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	f003 020f 	and.w	r2, r3, #15
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	440a      	add	r2, r1
 8005926:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005928:	bf00      	nop
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	40013800 	.word	0x40013800
 8005934:	51eb851f 	.word	0x51eb851f

08005938 <Screen_begin>:
    [CONDITION_YEAR]     = {.max_value = 99, .min_value = 1},
    [CONDITION_HOUR]     = {.max_value = 23, .min_value = 0},
    [CONDITION_MINUTE]   = {.max_value = 59, .min_value = 0}
};

void Screen_begin(UART_HandleTypeDef * UART_Screen) {
 8005938:	b5b0      	push	{r4, r5, r7, lr}
 800593a:	b09e      	sub	sp, #120	@ 0x78
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
    // Init _DWIN UART
	_Screen.Screen_DWIN.pUart = UART_Screen;
 8005940:	4a34      	ldr	r2, [pc, #208]	@ (8005a14 <Screen_begin+0xdc>)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6013      	str	r3, [r2, #0]

    // add receive function callback
	Screen_init_handler_table(&_Screen);
 8005946:	4833      	ldr	r0, [pc, #204]	@ (8005a14 <Screen_begin+0xdc>)
 8005948:	f000 fdf0 	bl	800652c <Screen_init_handler_table>
    DWIN_SetCallback((Dwin_t *)&_Screen,(pListenDWIN)Screen_RX_Callback);
 800594c:	4932      	ldr	r1, [pc, #200]	@ (8005a18 <Screen_begin+0xe0>)
 800594e:	4831      	ldr	r0, [pc, #196]	@ (8005a14 <Screen_begin+0xdc>)
 8005950:	f001 fc4f 	bl	80071f2 <DWIN_SetCallback>

    Screen_Init_Variable(&_Screen);
 8005954:	482f      	ldr	r0, [pc, #188]	@ (8005a14 <Screen_begin+0xdc>)
 8005956:	f001 f8a1 	bl	8006a9c <Screen_Init_Variable>

    // Init screen keyboard     
    _Screen.Screen_keyboard.VP_Text = 0xFFFF;
 800595a:	4b2e      	ldr	r3, [pc, #184]	@ (8005a14 <Screen_begin+0xdc>)
 800595c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005960:	819a      	strh	r2, [r3, #12]
    _Screen.Screen_keyboard.Index_String = 0;
 8005962:	4b2c      	ldr	r3, [pc, #176]	@ (8005a14 <Screen_begin+0xdc>)
 8005964:	2200      	movs	r2, #0
 8005966:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    _Screen.Screen_keyboard.Caplock = 0;
 800596a:	4b2a      	ldr	r3, [pc, #168]	@ (8005a14 <Screen_begin+0xdc>)
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    DWIN_SetPage((Dwin_t *)&_Screen,DWINPAGE_MAIN);  // Go to first page when start
 8005972:	2165      	movs	r1, #101	@ 0x65
 8005974:	4827      	ldr	r0, [pc, #156]	@ (8005a14 <Screen_begin+0xdc>)
 8005976:	f001 faea 	bl	8006f4e <DWIN_SetPage>

    _Screen.pre_page = 106;
 800597a:	4b26      	ldr	r3, [pc, #152]	@ (8005a14 <Screen_begin+0xdc>)
 800597c:	226a      	movs	r2, #106	@ 0x6a
 800597e:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134

    char* data_pin[] = {
 8005982:	4b26      	ldr	r3, [pc, #152]	@ (8005a1c <Screen_begin+0xe4>)
 8005984:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8005988:	461d      	mov	r5, r3
 800598a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800598c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800598e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005996:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800599a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    "VEE", "INH", "Z", "Y", "X", "VSS", "B", "C",
        "A", "VCC", "X0", "X1", "Y0", "Y1", "Z0", "Z1"
    };

    Screen_SetInfo_Pin(&_Screen,data_pin);
 800599e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80059a2:	4619      	mov	r1, r3
 80059a4:	481b      	ldr	r0, [pc, #108]	@ (8005a14 <Screen_begin+0xdc>)
 80059a6:	f001 fa75 	bl	8006e94 <Screen_SetInfo_Pin>

    char *data_test[] = {
 80059aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005a20 <Screen_begin+0xe8>)
 80059ac:	f107 0418 	add.w	r4, r7, #24
 80059b0:	461d      	mov	r5, r3
 80059b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80059ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        "11L1000G1011111V",
        "10L1100G1101111V",
        "11L0100G1111111V"
    };

    Screen_GetIcon_Pin(&_Screen,data_test);
 80059be:	f107 0318 	add.w	r3, r7, #24
 80059c2:	4619      	mov	r1, r3
 80059c4:	4813      	ldr	r0, [pc, #76]	@ (8005a14 <Screen_begin+0xdc>)
 80059c6:	f000 ff11 	bl	80067ec <Screen_GetIcon_Pin>
    DWIN_SetArray_Icon(&_Screen,VP_ICON_DIRECTION_PIN,_Screen.IC_Testerx[PROGRAM_TEST1].config_pin,16);
 80059ca:	4b12      	ldr	r3, [pc, #72]	@ (8005a14 <Screen_begin+0xdc>)
 80059cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059ce:	2310      	movs	r3, #16
 80059d0:	f244 0150 	movw	r1, #16464	@ 0x4050
 80059d4:	480f      	ldr	r0, [pc, #60]	@ (8005a14 <Screen_begin+0xdc>)
 80059d6:	f001 fb90 	bl	80070fa <DWIN_SetArray_Icon>
    Screen_GetIcon_Result(&_Screen,data_test);
 80059da:	f107 0318 	add.w	r3, r7, #24
 80059de:	4619      	mov	r1, r3
 80059e0:	480c      	ldr	r0, [pc, #48]	@ (8005a14 <Screen_begin+0xdc>)
 80059e2:	f000 ff8c 	bl	80068fe <Screen_GetIcon_Result>
    DWIN_SetArray_Icon(&_Screen,VP_ICON_RESULT,_Screen.IC_Testerx[PROGRAM_TEST1].data_result[0],16);
 80059e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a14 <Screen_begin+0xdc>)
 80059e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	2310      	movs	r3, #16
 80059ee:	f244 1150 	movw	r1, #16720	@ 0x4150
 80059f2:	4808      	ldr	r0, [pc, #32]	@ (8005a14 <Screen_begin+0xdc>)
 80059f4:	f001 fb81 	bl	80070fa <DWIN_SetArray_Icon>
    // uint8_t data_clock2[] = {1,0,1,0,1,0,1,0,1,0};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1800,25,200,data_clock2,sizeof(data_clock2));
    // HAL_Delay(200);
    // uint8_t data_clock3[] = {0,1,0,1,0,1,0,1,0,1,1,1};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1800,25,200,data_clock3,sizeof(data_clock3));
    uint8_t data[15] = {1,1,0,0,1,0,0,1,1,0,0,0,1,1,0};
 80059f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a24 <Screen_begin+0xec>)
 80059fa:	f107 0408 	add.w	r4, r7, #8
 80059fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a00:	c407      	stmia	r4!, {r0, r1, r2}
 8005a02:	8023      	strh	r3, [r4, #0]
 8005a04:	3402      	adds	r4, #2
 8005a06:	0c1b      	lsrs	r3, r3, #16
 8005a08:	7023      	strb	r3, [r4, #0]
    //     DWIN_Create_Basic_line((Dwin_t *)&_Screen,Address_show,X_Coordinate,Y_Coordinate,data,15);
    //     Address_show = Address_show + 0x200;
    //     Y_Coordinate = Y_Coordinate + 30;
    //     HAL_Delay(500);
    // }
}
 8005a0a:	bf00      	nop
 8005a0c:	3778      	adds	r7, #120	@ 0x78
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bdb0      	pop	{r4, r5, r7, pc}
 8005a12:	bf00      	nop
 8005a14:	200003dc 	.word	0x200003dc
 8005a18:	08005a45 	.word	0x08005a45
 8005a1c:	0800bee0 	.word	0x0800bee0
 8005a20:	0800bfc0 	.word	0x0800bfc0
 8005a24:	0800bfe0 	.word	0x0800bfe0

08005a28 <Screen_RX_data>:

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4803      	ldr	r0, [pc, #12]	@ (8005a40 <Screen_RX_data+0x18>)
 8005a34:	f001 fbea 	bl	800720c <DWIN_Listen>
}
 8005a38:	bf00      	nop
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	200003dc 	.word	0x200003dc

08005a44 <Screen_RX_Callback>:

void Screen_RX_Callback(uint16_t Vpaddress, uint8_t lowByte, uint8_t highByte) { 
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	80fb      	strh	r3, [r7, #6]
 8005a4e:	460b      	mov	r3, r1
 8005a50:	717b      	strb	r3, [r7, #5]
 8005a52:	4613      	mov	r3, r2
 8005a54:	713b      	strb	r3, [r7, #4]
    screen_event_t screen_event;
    // If the VP is FFFF -> skip
    if (Vpaddress != 0xFFFF) {
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d01b      	beq.n	8005a98 <Screen_RX_Callback+0x54>
        screen_event.event = Index_VP(Vpaddress,lookup_VP_SIG,SIZE_LOOKUP_VP_SIG);
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	2207      	movs	r2, #7
 8005a64:	490e      	ldr	r1, [pc, #56]	@ (8005aa0 <Screen_RX_Callback+0x5c>)
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fd24 	bl	80064b4 <Index_VP>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	723b      	strb	r3, [r7, #8]
        screen_event.action = lowByte;
 8005a70:	797b      	ldrb	r3, [r7, #5]
 8005a72:	727b      	strb	r3, [r7, #9]
        screen_event.data = highByte;
 8005a74:	793b      	ldrb	r3, [r7, #4]
 8005a76:	72bb      	strb	r3, [r7, #10]
        screen_event.keyvalue = (uint16_t)((highByte<<8) | (lowByte&0xFF));
 8005a78:	793b      	ldrb	r3, [r7, #4]
 8005a7a:	b21b      	sxth	r3, r3
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	b21a      	sxth	r2, r3
 8005a80:	797b      	ldrb	r3, [r7, #5]
 8005a82:	b21b      	sxth	r3, r3
 8005a84:	4313      	orrs	r3, r2
 8005a86:	b21b      	sxth	r3, r3
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	81bb      	strh	r3, [r7, #12]

        // call to respective function
        Screen_excute_RX_function(&_Screen,&screen_event);
 8005a8c:	f107 0308 	add.w	r3, r7, #8
 8005a90:	4619      	mov	r1, r3
 8005a92:	4804      	ldr	r0, [pc, #16]	@ (8005aa4 <Screen_RX_Callback+0x60>)
 8005a94:	f000 fdca 	bl	800662c <Screen_excute_RX_function>
    }
}
 8005a98:	bf00      	nop
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	2000000c 	.word	0x2000000c
 8005aa4:	200003dc 	.word	0x200003dc

08005aa8 <Navigation_setting_page>:


#pragma region CALLBACK FUNCTION VP ADRRESS 

void Navigation_setting_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
 8005ab2:	2174      	movs	r1, #116	@ 0x74
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f001 fa4a 	bl	8006f4e <DWIN_SetPage>
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <Navigation_home_page>:

void Navigation_home_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
    uint8_t current_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	334a      	adds	r3, #74	@ 0x4a
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	73fb      	strb	r3, [r7, #15]
    UNUSED(current_program);
    // Show data

    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005aec:	4619      	mov	r1, r3
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	3349      	adds	r3, #73	@ 0x49
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 fa24 	bl	8006f4e <DWIN_SetPage>
}   
 8005b06:	bf00      	nop
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <Navigation_setting_program>:

void Navigation_setting_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]

    // Switch page
    // DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
    /* Get the setting page */
    screen_obj->page_setting = DWINPAGE_SETTING_PROGRAM;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	226b      	movs	r2, #107	@ 0x6b
 8005b1e:	f883 2137 	strb.w	r2, [r3, #311]	@ 0x137
    // Switch page password 
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password,"",strlen(""));
 8005b22:	2300      	movs	r3, #0
 8005b24:	4a06      	ldr	r2, [pc, #24]	@ (8005b40 <Navigation_setting_program+0x30>)
 8005b26:	f249 5160 	movw	r1, #38240	@ 0x9560
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f001 fa36 	bl	8006f9c <DWIN_SetText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 8005b30:	216e      	movs	r1, #110	@ 0x6e
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f001 fa0b 	bl	8006f4e <DWIN_SetPage>
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	0800bff0 	.word	0x0800bff0

08005b44 <Navigation_setting_time>:

void Navigation_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_TIME);
 8005b4e:	2176      	movs	r1, #118	@ 0x76
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 f9fc 	bl	8006f4e <DWIN_SetPage>
}
 8005b56:	bf00      	nop
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <Navigation_setting_wifi>:

void Navigation_setting_wifi(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005b5e:	b590      	push	{r4, r7, lr}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
    /* show data */
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Wifi,screen_obj->Wifi_setting.Name_Wifi,strlen(screen_obj->Wifi_setting.Name_Wifi));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f103 04f4 	add.w	r4, r3, #244	@ 0xf4
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	33f4      	adds	r3, #244	@ 0xf4
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fa faf6 	bl	8000164 <strlen>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	4622      	mov	r2, r4
 8005b7e:	f249 51a0 	movw	r1, #38304	@ 0x95a0
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f001 fa0a 	bl	8006f9c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password_Wifi,screen_obj->Wifi_setting.Password_Wifi,strlen(screen_obj->Wifi_setting.Password_Wifi));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f503 7489 	add.w	r4, r3, #274	@ 0x112
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f503 7389 	add.w	r3, r3, #274	@ 0x112
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fa fae5 	bl	8000164 <strlen>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	f249 51d0 	movw	r1, #38352	@ 0x95d0
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 f9f9 	bl	8006f9c <DWIN_SetText>

    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 8005baa:	2175      	movs	r1, #117	@ 0x75
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 f9ce 	bl	8006f4e <DWIN_SetPage>
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd90      	pop	{r4, r7, pc}

08005bba <Navigation_modify_program>:

void Navigation_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005bba:	b590      	push	{r4, r7, lr}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_Program_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8005bca:	4619      	mov	r1, r3
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	1a5b      	subs	r3, r3, r1
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	3384      	adds	r3, #132	@ 0x84
 8005bda:	681c      	ldr	r4, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8005be2:	4619      	mov	r1, r3
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	460b      	mov	r3, r1
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	1a5b      	subs	r3, r3, r1
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	3384      	adds	r3, #132	@ 0x84
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fa fab5 	bl	8000164 <strlen>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	4622      	mov	r2, r4
 8005c00:	f44f 4115 	mov.w	r1, #38144	@ 0x9500
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 f9c9 	bl	8006f9c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8005c10:	4619      	mov	r1, r3
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	1a5b      	subs	r3, r3, r1
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	3388      	adds	r3, #136	@ 0x88
 8005c20:	681c      	ldr	r4, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8005c28:	4619      	mov	r1, r3
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	1a5b      	subs	r3, r3, r1
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	3388      	adds	r3, #136	@ 0x88
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fa fa92 	bl	8000164 <strlen>
 8005c40:	4603      	mov	r3, r0
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	4622      	mov	r2, r4
 8005c46:	f249 5120 	movw	r1, #38176	@ 0x9520
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f001 f9a6 	bl	8006f9c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8005c56:	4619      	mov	r1, r3
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	1a5b      	subs	r3, r3, r1
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	3390      	adds	r3, #144	@ 0x90
 8005c66:	681c      	ldr	r4, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8005c6e:	4619      	mov	r1, r3
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	1a5b      	subs	r3, r3, r1
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3390      	adds	r3, #144	@ 0x90
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fa fa6f 	bl	8000164 <strlen>
 8005c86:	4603      	mov	r3, r0
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	f249 5140 	movw	r1, #38208	@ 0x9540
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f001 f983 	bl	8006f9c <DWIN_SetText>
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 8005c96:	216c      	movs	r1, #108	@ 0x6c
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 f958 	bl	8006f4e <DWIN_SetPage>
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd90      	pop	{r4, r7, pc}
	...

08005ca8 <Navigation_Change_MainPage>:

void Navigation_Change_MainPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
    // Change current device
    if (screen_event->data == DATA_NEXT_MAINPAGE) {
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	789b      	ldrb	r3, [r3, #2]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d111      	bne.n	8005cde <Navigation_Change_MainPage+0x36>
        screen_obj->curr_device++;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
        if (screen_obj->curr_device == MAX_DEVICE) {
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d119      	bne.n	8005d08 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_1;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
 8005cdc:	e014      	b.n	8005d08 <Navigation_Change_MainPage+0x60>
        }
    } else if (screen_event->data == DATA_PREV_MAINPAGE) {
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	789b      	ldrb	r3, [r3, #2]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d110      	bne.n	8005d08 <Navigation_Change_MainPage+0x60>
        screen_obj->curr_device--;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
        if (screen_obj->curr_device == 255 ) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005cfc:	2bff      	cmp	r3, #255	@ 0xff
 8005cfe:	d103      	bne.n	8005d08 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_3;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
        }
    }
    uint8_t curr_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005d0e:	4619      	mov	r1, r3
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	334a      	adds	r3, #74	@ 0x4a
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	73fb      	strb	r3, [r7, #15]
    /* Show data with correspond device index */
    switch (screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain) {
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005d28:	4619      	mov	r1, r3
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	3349      	adds	r3, #73	@ 0x49
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	3b64      	subs	r3, #100	@ 0x64
 8005d3c:	2b0b      	cmp	r3, #11
 8005d3e:	d857      	bhi.n	8005df0 <Navigation_Change_MainPage+0x148>
 8005d40:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <Navigation_Change_MainPage+0xa0>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005def 	.word	0x08005def
 8005d4c:	08005d79 	.word	0x08005d79
 8005d50:	08005def 	.word	0x08005def
 8005d54:	08005df1 	.word	0x08005df1
 8005d58:	08005df1 	.word	0x08005df1
 8005d5c:	08005df1 	.word	0x08005df1
 8005d60:	08005df1 	.word	0x08005df1
 8005d64:	08005df1 	.word	0x08005df1
 8005d68:	08005df1 	.word	0x08005df1
 8005d6c:	08005df1 	.word	0x08005df1
 8005d70:	08005df1 	.word	0x08005df1
 8005d74:	08005def 	.word	0x08005def
        case DWINPAGE_MAIN : {
            /* Show info */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005d7e:	4619      	mov	r1, r3
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	460b      	mov	r3, r1
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	334c      	adds	r3, #76	@ 0x4c
 8005d8e:	681c      	ldr	r4, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005d96:	4619      	mov	r1, r3
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	440b      	add	r3, r1
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	334c      	adds	r3, #76	@ 0x4c
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fa f9db 	bl	8000164 <strlen>
 8005dae:	4603      	mov	r3, r0
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	4622      	mov	r2, r4
 8005db4:	f249 3150 	movw	r1, #37712	@ 0x9350
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 f8ef 	bl	8006f9c <DWIN_SetText>
            DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	334b      	adds	r3, #75	@ 0x4b
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f001 f95f 	bl	80070a0 <DWIN_SetVariable_Icon>
            Screen_ShowData_Mainpage(screen_obj,curr_program);
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	4619      	mov	r1, r3
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 ff78 	bl	8006cdc <Screen_ShowData_Mainpage>
        } break;
 8005dec:	e000      	b.n	8005df0 <Navigation_Change_MainPage+0x148>
        case DWINPAGE_MAIN_FINISH: {

        } break;
 8005dee:	bf00      	nop
        } break;
        case DWINPAGE_MAIN_GRAPH: {

        } break;
    }
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd90      	pop	{r4, r7, pc}

08005df8 <Navigation_Change_CaseTest>:

void Navigation_Change_CaseTest(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08e      	sub	sp, #56	@ 0x38
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005e08:	4619      	mov	r1, r3
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	334a      	adds	r3, #74	@ 0x4a
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	1a5b      	subs	r3, r3, r1
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	3394      	adds	r3, #148	@ 0x94
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005e36:	4619      	mov	r1, r3
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	334a      	adds	r3, #74	@ 0x4a
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 8005e4c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4613      	mov	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3395      	adds	r3, #149	@ 0x95
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    char ShowCase_String[30];
    // Change current case
    if (screen_event->data == DATA_PREV_CASE) {
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	789b      	ldrb	r3, [r3, #2]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d125      	bne.n	8005eb8 <Navigation_Change_CaseTest+0xc0>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005e72:	4619      	mov	r1, r3
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	460b      	mov	r3, r1
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	3348      	adds	r3, #72	@ 0x48
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d044      	beq.n	8005f12 <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005e8e:	461a      	mov	r2, r3
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	3348      	adds	r3, #72	@ 0x48
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b2d8      	uxtb	r0, r3
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	3348      	adds	r3, #72	@ 0x48
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e02c      	b.n	8005f12 <Navigation_Change_CaseTest+0x11a>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	789b      	ldrb	r3, [r3, #2]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d128      	bne.n	8005f12 <Navigation_Change_CaseTest+0x11a>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < (num_case - 1)) {
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	440b      	add	r3, r1
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3348      	adds	r3, #72	@ 0x48
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	da16      	bge.n	8005f12 <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005eea:	461a      	mov	r2, r3
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	3348      	adds	r3, #72	@ 0x48
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	b2d8      	uxtb	r0, r3
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3348      	adds	r3, #72	@ 0x48
 8005f0e:	4602      	mov	r2, r0
 8005f10:	701a      	strb	r2, [r3, #0]
        }
    }

    /* Show data */
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1,num_case);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005f18:	4619      	mov	r1, r3
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	3348      	adds	r3, #72	@ 0x48
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f30:	f107 000c 	add.w	r0, r7, #12
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	4613      	mov	r3, r2
 8005f38:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa4 <Navigation_Change_CaseTest+0x1ac>)
 8005f3a:	211e      	movs	r1, #30
 8005f3c:	f003 f954 	bl	80091e8 <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 8005f40:	f107 030c 	add.w	r3, r7, #12
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fa f90d 	bl	8000164 <strlen>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f107 020c 	add.w	r2, r7, #12
 8005f52:	f249 3180 	movw	r1, #37760	@ 0x9380
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f001 f820 	bl	8006f9c <DWIN_SetText>
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_RESULT,_Screen.IC_Testerx[selectedProgram].data_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case],num_pin);
 8005f5c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005f60:	4911      	ldr	r1, [pc, #68]	@ (8005fa8 <Navigation_Change_CaseTest+0x1b0>)
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	3354      	adds	r3, #84	@ 0x54
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005f76:	4618      	mov	r0, r3
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4403      	add	r3, r0
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	3348      	adds	r3, #72	@ 0x48
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005f92:	f244 1150 	movw	r1, #16720	@ 0x4150
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f001 f8af 	bl	80070fa <DWIN_SetArray_Icon>
}
 8005f9c:	bf00      	nop
 8005f9e:	3730      	adds	r7, #48	@ 0x30
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	0800bff4 	.word	0x0800bff4
 8005fa8:	200003dc 	.word	0x200003dc

08005fac <ON_OFF_Button>:

void Navigation_Next_PrevPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {

}

void ON_OFF_Button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
    // do sth
    screen_obj->IC_Testerx[screen_obj->curr_device].state = !screen_obj->IC_Testerx[screen_obj->curr_device].state;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	334b      	adds	r3, #75	@ 0x4b
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bf14      	ite	ne
 8005fd2:	2301      	movne	r3, #1
 8005fd4:	2300      	moveq	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	f083 0301 	eor.w	r3, r3, #1
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4613      	mov	r3, r2
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	b2d8      	uxtb	r0, r3
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	334b      	adds	r3, #75	@ 0x4b
 8005ffe:	4602      	mov	r2, r0
 8006000:	701a      	strb	r2, [r3, #0]
    // change icon
    // DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ON_OFF_Icon_1,ON_ICON);
    //    HAL_Delay(1000);
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006008:	4619      	mov	r1, r3
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	440b      	add	r3, r1
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	334b      	adds	r3, #75	@ 0x4b
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 f83d 	bl	80070a0 <DWIN_SetVariable_Icon>
    
    OS_task_post_event(AO_task_can_bus,SEND_DATA_CAN_BUS,(uint8_t *)0,0);
 8006026:	4b05      	ldr	r3, [pc, #20]	@ (800603c <ON_OFF_Button+0x90>)
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	2300      	movs	r3, #0
 800602c:	2200      	movs	r2, #0
 800602e:	2100      	movs	r1, #0
 8006030:	f001 f99c 	bl	800736c <OS_task_post_event>
}
 8006034:	bf00      	nop
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	0800c1a4 	.word	0x0800c1a4

08006040 <select_running_program>:

void select_running_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
    uint8_t programID = screen_event->data; // Get new index program
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	789b      	ldrb	r3, [r3, #2]
 800604e:	73fb      	strb	r3, [r7, #15]

    /* Show data correspond with new index program */
    Screen_ShowData_Mainpage(screen_obj,programID);
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fe41 	bl	8006cdc <Screen_ShowData_Mainpage>
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <select_modify_program>:

void select_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006064:	b5b0      	push	{r4, r5, r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
    // Get the index modify program 
    uint8_t index_program = screen_event->data;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	789b      	ldrb	r3, [r3, #2]
 8006072:	75fb      	strb	r3, [r7, #23]
    screen_obj->modify_program_index = index_program;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	7dfa      	ldrb	r2, [r7, #23]
 8006078:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 800607c:	7dfa      	ldrb	r2, [r7, #23]
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4613      	mov	r3, r2
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	3388      	adds	r3, #136	@ 0x88
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f7fa f868 	bl	8000164 <strlen>
 8006094:	4603      	mov	r3, r0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	3309      	adds	r3, #9
 800609a:	75bb      	strb	r3, [r7, #22]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 800609c:	7dfa      	ldrb	r2, [r7, #23]
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	3390      	adds	r3, #144	@ 0x90
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fa f858 	bl	8000164 <strlen>
 80060b4:	4603      	mov	r3, r0
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	330f      	adds	r3, #15
 80060ba:	757b      	strb	r3, [r7, #21]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 80060bc:	7dbb      	ldrb	r3, [r7, #22]
 80060be:	3301      	adds	r3, #1
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 faa1 	bl	8007608 <malloc>
 80060c6:	4603      	mov	r3, r0
 80060c8:	613b      	str	r3, [r7, #16]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 80060ca:	7d7b      	ldrb	r3, [r7, #21]
 80060cc:	3301      	adds	r3, #1
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 fa9a 	bl	8007608 <malloc>
 80060d4:	4603      	mov	r3, r0
 80060d6:	60fb      	str	r3, [r7, #12]

    strcpy(Text_Name_IC,"IC Name: ");
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	491f      	ldr	r1, [pc, #124]	@ (8006158 <select_modify_program+0xf4>)
 80060dc:	461a      	mov	r2, r3
 80060de:	460b      	mov	r3, r1
 80060e0:	cb03      	ldmia	r3!, {r0, r1}
 80060e2:	6010      	str	r0, [r2, #0]
 80060e4:	6051      	str	r1, [r2, #4]
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 80060ea:	7dfa      	ldrb	r2, [r7, #23]
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	4613      	mov	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	1a9b      	subs	r3, r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	440b      	add	r3, r1
 80060f8:	3388      	adds	r3, #136	@ 0x88
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4619      	mov	r1, r3
 80060fe:	6938      	ldr	r0, [r7, #16]
 8006100:	f003 f9aa 	bl	8009458 <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4a15      	ldr	r2, [pc, #84]	@ (800615c <select_modify_program+0xf8>)
 8006108:	461c      	mov	r4, r3
 800610a:	4615      	mov	r5, r2
 800610c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800610e:	6020      	str	r0, [r4, #0]
 8006110:	6061      	str	r1, [r4, #4]
 8006112:	60a2      	str	r2, [r4, #8]
 8006114:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);
 8006116:	7dfa      	ldrb	r2, [r7, #23]
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	1a9b      	subs	r3, r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	3390      	adds	r3, #144	@ 0x90
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4619      	mov	r1, r3
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f003 f994 	bl	8009458 <strcat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 8006130:	7dbb      	ldrb	r3, [r7, #22]
 8006132:	b29b      	uxth	r3, r3
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	f249 5120 	movw	r1, #38176	@ 0x9520
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 ff2e 	bl	8006f9c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 8006140:	7d7b      	ldrb	r3, [r7, #21]
 8006142:	b29b      	uxth	r3, r3
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	f249 5140 	movw	r1, #38208	@ 0x9540
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 ff26 	bl	8006f9c <DWIN_SetText>
}
 8006150:	bf00      	nop
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bdb0      	pop	{r4, r5, r7, pc}
 8006158:	0800c000 	.word	0x0800c000
 800615c:	0800c00c 	.word	0x0800c00c

08006160 <Navigation_num_keyboard>:

void Navigation_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
    //char TypeData_String[20] = {0};
    //char UnitData_String[20] = {0};
    // Switch screen keyboard will excute in screen

    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	889a      	ldrh	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	330e      	adds	r3, #14
 800617e:	2232      	movs	r2, #50	@ 0x32
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f003 f960 	bl	8009448 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f103 020e 	add.w	r2, r3, #14
 800618e:	2332      	movs	r3, #50	@ 0x32
 8006190:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 ff01 	bl	8006f9c <DWIN_SetText>
    // DWIN_SetText((Dwin_t *)screen_obj,VP_ShowType_Keyboard)

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_NUM_KEYBOARD);
 800619a:	216d      	movs	r1, #109	@ 0x6d
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fed6 	bl	8006f4e <DWIN_SetPage>
}
 80061a2:	bf00      	nop
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <Navigation_full_keyboard>:

void Navigation_full_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	889a      	ldrh	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	330e      	adds	r3, #14
 80061c8:	2232      	movs	r2, #50	@ 0x32
 80061ca:	2100      	movs	r1, #0
 80061cc:	4618      	mov	r0, r3
 80061ce:	f003 f93b 	bl	8009448 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f103 020e 	add.w	r2, r3, #14
 80061d8:	2332      	movs	r3, #50	@ 0x32
 80061da:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fedc 	bl	8006f9c <DWIN_SetText>

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_FULL_KEYBOARD);
 80061e4:	2178      	movs	r1, #120	@ 0x78
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 feb1 	bl	8006f4e <DWIN_SetPage>
}
 80061ec:	bf00      	nop
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <Save_Information>:

void Save_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]

}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr

08006208 <Enter_password>:

void Enter_password(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800620c:	b087      	sub	sp, #28
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
 8006214:	466b      	mov	r3, sp
 8006216:	461e      	mov	r6, r3
    /* Get the password input */
    uint8_t len = screen_obj->Screen_keyboard.Index_String + 1;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800621e:	b2db      	uxtb	r3, r3
 8006220:	3301      	adds	r3, #1
 8006222:	75fb      	strb	r3, [r7, #23]
    char input_pass[len];
 8006224:	7df9      	ldrb	r1, [r7, #23]
 8006226:	460b      	mov	r3, r1
 8006228:	3b01      	subs	r3, #1
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	b2cb      	uxtb	r3, r1
 800622e:	2200      	movs	r2, #0
 8006230:	4698      	mov	r8, r3
 8006232:	4691      	mov	r9, r2
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006240:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006244:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006248:	b2cb      	uxtb	r3, r1
 800624a:	2200      	movs	r2, #0
 800624c:	461c      	mov	r4, r3
 800624e:	4615      	mov	r5, r2
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	00eb      	lsls	r3, r5, #3
 800625a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800625e:	00e2      	lsls	r2, r4, #3
 8006260:	460b      	mov	r3, r1
 8006262:	3307      	adds	r3, #7
 8006264:	08db      	lsrs	r3, r3, #3
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	ebad 0d03 	sub.w	sp, sp, r3
 800626c:	466b      	mov	r3, sp
 800626e:	3300      	adds	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
    strcpy(input_pass,screen_obj->Screen_keyboard.String);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	330e      	adds	r3, #14
 8006276:	4619      	mov	r1, r3
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f003 f9b2 	bl	80095e2 <strcpy>
    /* Check password */
    if (strcmp(input_pass,MACHINE_PASSWORD) == 0) { /* Correct password */
 800627e:	490e      	ldr	r1, [pc, #56]	@ (80062b8 <Enter_password+0xb0>)
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7f9 ff65 	bl	8000150 <strcmp>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d107      	bne.n	800629c <Enter_password+0x94>
        /* Goto setting page */
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->page_setting);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3137 	ldrb.w	r3, [r3, #311]	@ 0x137
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fe5a 	bl	8006f4e <DWIN_SetPage>
 800629a:	e006      	b.n	80062aa <Enter_password+0xa2>
    } else {
        /* Show text */
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_Password,INCORRECT_PASSWORD_TEXT,strlen(INCORRECT_PASSWORD_TEXT));
 800629c:	2312      	movs	r3, #18
 800629e:	4a07      	ldr	r2, [pc, #28]	@ (80062bc <Enter_password+0xb4>)
 80062a0:	f249 5180 	movw	r1, #38272	@ 0x9580
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fe79 	bl	8006f9c <DWIN_SetText>
 80062aa:	46b5      	mov	sp, r6
    }
}
 80062ac:	bf00      	nop
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062b6:	bf00      	nop
 80062b8:	0800c01c 	.word	0x0800c01c
 80062bc:	0800c024 	.word	0x0800c024

080062c0 <Enter_num_keyboard>:

void Enter_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
    uint16_t VP_show = screen_obj->Screen_keyboard.VP_Text;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	899b      	ldrh	r3, [r3, #12]
 80062ce:	81fb      	strh	r3, [r7, #14]
    
    /* Show text to VP */
    DWIN_SetText((Dwin_t *)screen_obj,VP_show,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f103 020e 	add.w	r2, r3, #14
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80062dc:	89f9      	ldrh	r1, [r7, #14]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fe5c 	bl	8006f9c <DWIN_SetText>

    /* Return page base on VP address */
    switch (VP_show) {
 80062e4:	89fb      	ldrh	r3, [r7, #14]
 80062e6:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d032      	beq.n	8006354 <Enter_num_keyboard+0x94>
 80062ee:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 80062f2:	4293      	cmp	r3, r2
 80062f4:	dc33      	bgt.n	800635e <Enter_num_keyboard+0x9e>
 80062f6:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d02a      	beq.n	8006354 <Enter_num_keyboard+0x94>
 80062fe:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 8006302:	4293      	cmp	r3, r2
 8006304:	dc2b      	bgt.n	800635e <Enter_num_keyboard+0x9e>
 8006306:	f249 5260 	movw	r2, #38240	@ 0x9560
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <Enter_num_keyboard+0x76>
 800630e:	f249 5260 	movw	r2, #38240	@ 0x9560
 8006312:	4293      	cmp	r3, r2
 8006314:	dc23      	bgt.n	800635e <Enter_num_keyboard+0x9e>
 8006316:	f249 5240 	movw	r2, #38208	@ 0x9540
 800631a:	4293      	cmp	r3, r2
 800631c:	d015      	beq.n	800634a <Enter_num_keyboard+0x8a>
 800631e:	f249 5240 	movw	r2, #38208	@ 0x9540
 8006322:	4293      	cmp	r3, r2
 8006324:	dc1b      	bgt.n	800635e <Enter_num_keyboard+0x9e>
 8006326:	f5b3 4f15 	cmp.w	r3, #38144	@ 0x9500
 800632a:	d00e      	beq.n	800634a <Enter_num_keyboard+0x8a>
 800632c:	f249 5220 	movw	r2, #38176	@ 0x9520
 8006330:	4293      	cmp	r3, r2
 8006332:	d00a      	beq.n	800634a <Enter_num_keyboard+0x8a>
        } break;
        case VP_Name_Wifi :
        case VP_Password_Wifi : {
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
        } break;
        default: break;
 8006334:	e013      	b.n	800635e <Enter_num_keyboard+0x9e>
            DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password); /* Clear warning text if any */
 8006336:	f249 5180 	movw	r1, #38272	@ 0x9580
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fe9e 	bl	800707c <DWIN_ClearText>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 8006340:	216e      	movs	r1, #110	@ 0x6e
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fe03 	bl	8006f4e <DWIN_SetPage>
        } break;
 8006348:	e00a      	b.n	8006360 <Enter_num_keyboard+0xa0>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 800634a:	216c      	movs	r1, #108	@ 0x6c
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fdfe 	bl	8006f4e <DWIN_SetPage>
        } break;
 8006352:	e005      	b.n	8006360 <Enter_num_keyboard+0xa0>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 8006354:	2175      	movs	r1, #117	@ 0x75
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fdf9 	bl	8006f4e <DWIN_SetPage>
        } break;
 800635c:	e000      	b.n	8006360 <Enter_num_keyboard+0xa0>
        default: break;
 800635e:	bf00      	nop
    }
}
 8006360:	bf00      	nop
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <Keyboard>:

void Keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
    
    /* The other Functions button */
    if (screen_event->data == 0xF3) { // Delete button
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	789b      	ldrb	r3, [r3, #2]
 8006376:	2bf3      	cmp	r3, #243	@ 0xf3
 8006378:	d10e      	bne.n	8006398 <Keyboard+0x30>
        if (screen_obj->Screen_keyboard.Index_String != 0) {
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 8088 	beq.w	8006496 <Keyboard+0x12e>
            --screen_obj->Screen_keyboard.Index_String;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8006396:	e07e      	b.n	8006496 <Keyboard+0x12e>
        }
    } else if (screen_event->data == 0xF4) { // Caplock button
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	789b      	ldrb	r3, [r3, #2]
 800639c:	2bf4      	cmp	r3, #244	@ 0xf4
 800639e:	d11a      	bne.n	80063d6 <Keyboard+0x6e>
        /* Toggle status Caplock keyboard */
        screen_obj->Screen_keyboard.Caplock = !screen_obj->Screen_keyboard.Caplock; 
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bf14      	ite	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	2300      	moveq	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	f083 0301 	eor.w	r3, r3, #1
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_CAPLOCK,screen_obj->Screen_keyboard.Caplock);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063c8:	461a      	mov	r2, r3
 80063ca:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fe66 	bl	80070a0 <DWIN_SetVariable_Icon>
 80063d4:	e05f      	b.n	8006496 <Keyboard+0x12e>
    } else if (screen_event->data == 0xF2) { // Space button
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	789b      	ldrb	r3, [r3, #2]
 80063da:	2bf2      	cmp	r3, #242	@ 0xf2
 80063dc:	d05b      	beq.n	8006496 <Keyboard+0x12e>
        // screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = 32;
    } else if (screen_event->data == 0xF1) { // Enter button
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	789b      	ldrb	r3, [r3, #2]
 80063e2:	2bf1      	cmp	r3, #241	@ 0xf1
 80063e4:	d118      	bne.n	8006418 <Keyboard+0xb0>
        // Check if the data is valid
        if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f960 	bl	80066ac <Screen_CheckInput_Keyboard>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d151      	bne.n	8006496 <Keyboard+0x12e>
            // Show data input to VP 
            DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	8999      	ldrh	r1, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f103 020e 	add.w	r2, r3, #14
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fdca 	bl	8006f9c <DWIN_SetText>
            DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fd9c 	bl	8006f4e <DWIN_SetPage>
 8006416:	e03e      	b.n	8006496 <Keyboard+0x12e>
        }
    }
    /* the data value is the character input -> add to string */
    else if (screen_event->data >= 0x41 && screen_event->data <= 0x5A) { // letter need check Caplock
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	789b      	ldrb	r3, [r3, #2]
 800641c:	2b40      	cmp	r3, #64	@ 0x40
 800641e:	d92c      	bls.n	800647a <Keyboard+0x112>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	789b      	ldrb	r3, [r3, #2]
 8006424:	2b5a      	cmp	r3, #90	@ 0x5a
 8006426:	d828      	bhi.n	800647a <Keyboard+0x112>
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800642e:	f083 0301 	eor.w	r3, r3, #1
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d011      	beq.n	800645c <Keyboard+0xf4>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data + 0x20;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	789a      	ldrb	r2, [r3, #2]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006442:	1c59      	adds	r1, r3, #1
 8006444:	b288      	uxth	r0, r1
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	f8a1 0040 	strh.w	r0, [r1, #64]	@ 0x40
 800644c:	4619      	mov	r1, r3
 800644e:	f102 0320 	add.w	r3, r2, #32
 8006452:	b2da      	uxtb	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	440b      	add	r3, r1
 8006458:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 800645a:	e01c      	b.n	8006496 <Keyboard+0x12e>
        } else {
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	b291      	uxth	r1, r2
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 800646c:	4619      	mov	r1, r3
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	789a      	ldrb	r2, [r3, #2]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	440b      	add	r3, r1
 8006476:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8006478:	e00d      	b.n	8006496 <Keyboard+0x12e>
        }
    } else {
        screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	b291      	uxth	r1, r2
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 800648a:	4619      	mov	r1, r3
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	789a      	ldrb	r2, [r3, #2]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	440b      	add	r3, r1
 8006494:	739a      	strb	r2, [r3, #14]
    }

    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f103 020e 	add.w	r2, r3, #14
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064a2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fd78 	bl	8006f9c <DWIN_SetText>
}
 80064ac:	bf00      	nop
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <Index_VP>:
#pragma endregion CALLBACK FUNCTION VP ADRRESS 

#pragma region FUNCTION EXCUTE SCREEN

// binary search index of VP address
uint8_t Index_VP(uint16_t vp, VP_item* VP_array, uint8_t Size_array) {
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	6039      	str	r1, [r7, #0]
 80064be:	80fb      	strh	r3, [r7, #6]
 80064c0:	4613      	mov	r3, r2
 80064c2:	717b      	strb	r3, [r7, #5]
    int left = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]
    int right = Size_array - 1;
 80064c8:	797b      	ldrb	r3, [r7, #5]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	613b      	str	r3, [r7, #16]
    int mid;

    while (left <= right) {
 80064ce:	e023      	b.n	8006518 <Index_VP+0x64>
        mid = (left + right) / 2;
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	4413      	add	r3, r2
 80064d6:	0fda      	lsrs	r2, r3, #31
 80064d8:	4413      	add	r3, r2
 80064da:	105b      	asrs	r3, r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]
        if (VP_array[mid].VP_address == vp) {
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	4413      	add	r3, r2
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	88fa      	ldrh	r2, [r7, #6]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d105      	bne.n	80064fa <Index_VP+0x46>
            return VP_array[mid].index;  // Found the vp
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	4413      	add	r3, r2
 80064f6:	789b      	ldrb	r3, [r3, #2]
 80064f8:	e013      	b.n	8006522 <Index_VP+0x6e>
        } else if (VP_array[mid].VP_address > vp) {
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	4413      	add	r3, r2
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	88fa      	ldrh	r2, [r7, #6]
 8006506:	429a      	cmp	r2, r3
 8006508:	d203      	bcs.n	8006512 <Index_VP+0x5e>
            right = mid - 1;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3b01      	subs	r3, #1
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	e002      	b.n	8006518 <Index_VP+0x64>
        } else {
            left = mid + 1;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3301      	adds	r3, #1
 8006516:	617b      	str	r3, [r7, #20]
    while (left <= right) {
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	429a      	cmp	r2, r3
 800651e:	ddd7      	ble.n	80064d0 <Index_VP+0x1c>
        }
    }

    return 255;  // VP not found
 8006520:	23ff      	movs	r3, #255	@ 0xff
}
 8006522:	4618      	mov	r0, r3
 8006524:	371c      	adds	r7, #28
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr

0800652c <Screen_init_handler_table>:

void Screen_init_handler_table(Screen_t *const obj_screen) {
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
                                                                a_handler_full_keyboard,
                                                                a_handler_save_sig,
                                                                a_handler_enter_sig };

    // Assign the callback function to handler table
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PAGE]         = Navigation_setting_page ;
 8006534:	4b2b      	ldr	r3, [pc, #172]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a2b      	ldr	r2, [pc, #172]	@ (80065e8 <Screen_init_handler_table+0xbc>)
 800653a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_HOME]                 = Navigation_home_page;
 800653c:	4b29      	ldr	r3, [pc, #164]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3308      	adds	r3, #8
 8006542:	4a2a      	ldr	r2, [pc, #168]	@ (80065ec <Screen_init_handler_table+0xc0>)
 8006544:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PROGRAM]      = Navigation_setting_program;
 8006546:	4b27      	ldr	r3, [pc, #156]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3314      	adds	r3, #20
 800654c:	4a28      	ldr	r2, [pc, #160]	@ (80065f0 <Screen_init_handler_table+0xc4>)
 800654e:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_TIME]         = Navigation_setting_time;
 8006550:	4b24      	ldr	r3, [pc, #144]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	330c      	adds	r3, #12
 8006556:	4a27      	ldr	r2, [pc, #156]	@ (80065f4 <Screen_init_handler_table+0xc8>)
 8006558:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_WIFI]         = Navigation_setting_wifi;
 800655a:	4b22      	ldr	r3, [pc, #136]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3310      	adds	r3, #16
 8006560:	4a25      	ldr	r2, [pc, #148]	@ (80065f8 <Screen_init_handler_table+0xcc>)
 8006562:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_MODIFY_PROGRAM]       = Navigation_modify_program;
 8006564:	4b1f      	ldr	r3, [pc, #124]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3328      	adds	r3, #40	@ 0x28
 800656a:	4a24      	ldr	r2, [pc, #144]	@ (80065fc <Screen_init_handler_table+0xd0>)
 800656c:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_MAINPAGE]      = Navigation_Change_MainPage;
 800656e:	4b1d      	ldr	r3, [pc, #116]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3318      	adds	r3, #24
 8006574:	4a22      	ldr	r2, [pc, #136]	@ (8006600 <Screen_init_handler_table+0xd4>)
 8006576:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASEDATA]      = Navigation_Change_CaseTest;
 8006578:	4b1a      	ldr	r3, [pc, #104]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	331c      	adds	r3, #28
 800657e:	4a21      	ldr	r2, [pc, #132]	@ (8006604 <Screen_init_handler_table+0xd8>)
 8006580:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SELECTION][ON_OFF_DEV]                       = ON_OFF_Button;
 8006582:	4b18      	ldr	r3, [pc, #96]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	4a20      	ldr	r2, [pc, #128]	@ (8006608 <Screen_init_handler_table+0xdc>)
 8006588:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SELECT_PROGRAM]                   = select_running_program;
 800658a:	4b16      	ldr	r3, [pc, #88]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	3304      	adds	r3, #4
 8006590:	4a1e      	ldr	r2, [pc, #120]	@ (800660c <Screen_init_handler_table+0xe0>)
 8006592:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SElECT_MODIFY_PROGRAM]            = select_modify_program;
 8006594:	4b13      	ldr	r3, [pc, #76]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	3308      	adds	r3, #8
 800659a:	4a1d      	ldr	r2, [pc, #116]	@ (8006610 <Screen_init_handler_table+0xe4>)
 800659c:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]     = Navigation_num_keyboard;
 800659e:	4b11      	ldr	r3, [pc, #68]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006614 <Screen_init_handler_table+0xe8>)
 80065a4:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]    = Navigation_full_keyboard;
 80065a6:	4b0f      	ldr	r3, [pc, #60]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006618 <Screen_init_handler_table+0xec>)
 80065ac:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SAVE][VALUE_SAVE_INFORMATION]                = Save_Information;
 80065ae:	4b0d      	ldr	r3, [pc, #52]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	4a1a      	ldr	r2, [pc, #104]	@ (800661c <Screen_init_handler_table+0xf0>)
 80065b4:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_ENTER][ENTER_PASSWORD]                       = Enter_password;
 80065b6:	4b0b      	ldr	r3, [pc, #44]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	4a19      	ldr	r2, [pc, #100]	@ (8006620 <Screen_init_handler_table+0xf4>)
 80065bc:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_NUM_KEYBOARD]                   = Enter_num_keyboard;
 80065be:	4b09      	ldr	r3, [pc, #36]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4a17      	ldr	r2, [pc, #92]	@ (8006624 <Screen_init_handler_table+0xf8>)
 80065c6:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD]                     = Keyboard;
 80065c8:	4b06      	ldr	r3, [pc, #24]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	4a16      	ldr	r2, [pc, #88]	@ (8006628 <Screen_init_handler_table+0xfc>)
 80065ce:	601a      	str	r2, [r3, #0]

    // assign handler table to handler table of object
    obj_screen->p_handler_table = (void *)handler_function_table;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a04      	ldr	r2, [pc, #16]	@ (80065e4 <Screen_init_handler_table+0xb8>)
 80065d4:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000028 	.word	0x20000028
 80065e8:	08005aa9 	.word	0x08005aa9
 80065ec:	08005ac3 	.word	0x08005ac3
 80065f0:	08005b11 	.word	0x08005b11
 80065f4:	08005b45 	.word	0x08005b45
 80065f8:	08005b5f 	.word	0x08005b5f
 80065fc:	08005bbb 	.word	0x08005bbb
 8006600:	08005ca9 	.word	0x08005ca9
 8006604:	08005df9 	.word	0x08005df9
 8006608:	08005fad 	.word	0x08005fad
 800660c:	08006041 	.word	0x08006041
 8006610:	08006065 	.word	0x08006065
 8006614:	08006161 	.word	0x08006161
 8006618:	080061ab 	.word	0x080061ab
 800661c:	080061f5 	.word	0x080061f5
 8006620:	08006209 	.word	0x08006209
 8006624:	080062c1 	.word	0x080062c1
 8006628:	08006369 	.word	0x08006369

0800662c <Screen_excute_RX_function>:

void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e) {
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
    // do sth ...


	handler_func **handler_function_table = (handler_func **) obj_screen->p_handler_table;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800663c:	60fb      	str	r3, [r7, #12]
    // excute the callback function
    if (screen_e->event == SIG_KEYBOARD) {  // ENVENT KEYBOARD
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d107      	bne.n	8006656 <Screen_excute_RX_function+0x2a>
        handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD](obj_screen, screen_e);   
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3308      	adds	r3, #8
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
    } else {
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
    }  
}
 8006654:	e025      	b.n	80066a2 <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_NUM_KEYBOARD) {  // SWTICH TO NUMBER KEYBOARD
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b03      	cmp	r3, #3
 800665c:	d107      	bne.n	800666e <Screen_excute_RX_function+0x42>
        handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	330c      	adds	r3, #12
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	4798      	blx	r3
}
 800666c:	e019      	b.n	80066a2 <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b04      	cmp	r3, #4
 8006674:	d107      	bne.n	8006686 <Screen_excute_RX_function+0x5a>
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3310      	adds	r3, #16
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
}
 8006684:	e00d      	b.n	80066a2 <Screen_excute_RX_function+0x76>
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
}
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <Screen_CheckInput_Keyboard>:

#pragma endregion FUNCTION EXCUTE SCREEN

#pragma region FUNCTION SCREEN 

Return_Status Screen_CheckInput_Keyboard(Screen_t *const obj_screen) {
 80066ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066b0:	b08d      	sub	sp, #52	@ 0x34
 80066b2:	af02      	add	r7, sp, #8
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	466b      	mov	r3, sp
 80066b8:	461e      	mov	r6, r3
    char string[obj_screen->Screen_keyboard.Index_String];
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 80066c0:	460b      	mov	r3, r1
 80066c2:	3b01      	subs	r3, #1
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80066c6:	b28b      	uxth	r3, r1
 80066c8:	2200      	movs	r2, #0
 80066ca:	4698      	mov	r8, r3
 80066cc:	4691      	mov	r9, r2
 80066ce:	f04f 0200 	mov.w	r2, #0
 80066d2:	f04f 0300 	mov.w	r3, #0
 80066d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066e2:	b28b      	uxth	r3, r1
 80066e4:	2200      	movs	r2, #0
 80066e6:	461c      	mov	r4, r3
 80066e8:	4615      	mov	r5, r2
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	00eb      	lsls	r3, r5, #3
 80066f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066f8:	00e2      	lsls	r2, r4, #3
 80066fa:	460b      	mov	r3, r1
 80066fc:	3307      	adds	r3, #7
 80066fe:	08db      	lsrs	r3, r3, #3
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	ebad 0d03 	sub.w	sp, sp, r3
 8006706:	ab02      	add	r3, sp, #8
 8006708:	3300      	adds	r3, #0
 800670a:	623b      	str	r3, [r7, #32]
    char warm_string[20] = {0};
 800670c:	f107 0308 	add.w	r3, r7, #8
 8006710:	2200      	movs	r2, #0
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	605a      	str	r2, [r3, #4]
 8006716:	609a      	str	r2, [r3, #8]
 8006718:	60da      	str	r2, [r3, #12]
 800671a:	611a      	str	r2, [r3, #16]
    float data_compare;
    // copy string
    memcpy(string,obj_screen->Screen_keyboard.String,obj_screen->Screen_keyboard.Index_String);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f103 010e 	add.w	r1, r3, #14
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006728:	461a      	mov	r2, r3
 800672a:	6a38      	ldr	r0, [r7, #32]
 800672c:	f002 ff6f 	bl	800960e <memcpy>
    /* compare data with limit */
    data_compare = atof(string);
 8006730:	6a38      	ldr	r0, [r7, #32]
 8006732:	f000 ff66 	bl	8007602 <atof>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4610      	mov	r0, r2
 800673c:	4619      	mov	r1, r3
 800673e:	f7fa f9cd 	bl	8000adc <__aeabi_d2f>
 8006742:	4603      	mov	r3, r0
 8006744:	61fb      	str	r3, [r7, #28]
    if (data_compare > obj_screen->Screen_condition->max_value) {
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4619      	mov	r1, r3
 800674e:	69f8      	ldr	r0, [r7, #28]
 8006750:	f7fa fa80 	bl	8000c54 <__aeabi_fcmpgt>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d019      	beq.n	800678e <Screen_CheckInput_Keyboard+0xe2>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MAX: %.2f", obj_screen->Screen_condition->max_value);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4618      	mov	r0, r3
 8006762:	f7f9 fe6b 	bl	800043c <__aeabi_f2d>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	f107 0008 	add.w	r0, r7, #8
 800676e:	e9cd 2300 	strd	r2, r3, [sp]
 8006772:	4a1c      	ldr	r2, [pc, #112]	@ (80067e4 <Screen_CheckInput_Keyboard+0x138>)
 8006774:	2114      	movs	r1, #20
 8006776:	f002 fd37 	bl	80091e8 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 800677a:	f107 0208 	add.w	r2, r7, #8
 800677e:	2314      	movs	r3, #20
 8006780:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fc09 	bl	8006f9c <DWIN_SetText>
        return Status_ERROR;
 800678a:	2300      	movs	r3, #0
 800678c:	e024      	b.n	80067d8 <Screen_CheckInput_Keyboard+0x12c>
    } else if (data_compare < obj_screen->Screen_condition->min_value) {
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	4619      	mov	r1, r3
 8006796:	69f8      	ldr	r0, [r7, #28]
 8006798:	f7fa fa3e 	bl	8000c18 <__aeabi_fcmplt>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d019      	beq.n	80067d6 <Screen_CheckInput_Keyboard+0x12a>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MIN: %.2f", obj_screen->Screen_condition->min_value);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7f9 fe47 	bl	800043c <__aeabi_f2d>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	f107 0008 	add.w	r0, r7, #8
 80067b6:	e9cd 2300 	strd	r2, r3, [sp]
 80067ba:	4a0b      	ldr	r2, [pc, #44]	@ (80067e8 <Screen_CheckInput_Keyboard+0x13c>)
 80067bc:	2114      	movs	r1, #20
 80067be:	f002 fd13 	bl	80091e8 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 80067c2:	f107 0208 	add.w	r2, r7, #8
 80067c6:	2314      	movs	r3, #20
 80067c8:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fbe5 	bl	8006f9c <DWIN_SetText>
        return Status_ERROR;
 80067d2:	2300      	movs	r3, #0
 80067d4:	e000      	b.n	80067d8 <Screen_CheckInput_Keyboard+0x12c>
    } 
    return Status_SUCCESS; 
 80067d6:	2301      	movs	r3, #1
 80067d8:	46b5      	mov	sp, r6
}
 80067da:	4618      	mov	r0, r3
 80067dc:	372c      	adds	r7, #44	@ 0x2c
 80067de:	46bd      	mov	sp, r7
 80067e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067e4:	0800c038 	.word	0x0800c038
 80067e8:	0800c044 	.word	0x0800c044

080067ec <Screen_GetIcon_Pin>:
 * @brief Function used to setup icon with data test
 * 
 * @param obj_screen : object screen
 * @param data_pin : array 2d data test
 */
void Screen_GetIcon_Pin(Screen_t *const screen_obj, char **data_pin) {
 80067ec:	b590      	push	{r4, r7, lr}
 80067ee:	b0a5      	sub	sp, #148	@ 0x94
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80067fc:	4619      	mov	r1, r3
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	440b      	add	r3, r1
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	334a      	adds	r3, #74	@ 0x4a
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	4619      	mov	r1, r3
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	460b      	mov	r3, r1
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	1a5b      	subs	r3, r3, r1
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	3395      	adds	r3, #149	@ 0x95
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    
    uint8_t map_array[128] = {0};
 8006824:	f107 030c 	add.w	r3, r7, #12
 8006828:	2280      	movs	r2, #128	@ 0x80
 800682a:	2100      	movs	r1, #0
 800682c:	4618      	mov	r0, r3
 800682e:	f002 fe0b 	bl	8009448 <memset>
    map_array['G'] = ICON_GND;
 8006832:	2302      	movs	r3, #2
 8006834:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    map_array['V'] = ICON_VCC;
 8006838:	2303      	movs	r3, #3
 800683a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = malloc(num_pin * sizeof(uint8_t));
 800683e:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006848:	461c      	mov	r4, r3
 800684a:	4610      	mov	r0, r2
 800684c:	f000 fedc 	bl	8007608 <malloc>
 8006850:	4603      	mov	r3, r0
 8006852:	4619      	mov	r1, r3
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	4623      	mov	r3, r4
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4423      	add	r3, r4
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	3350      	adds	r3, #80	@ 0x50
 8006862:	6019      	str	r1, [r3, #0]

    /* Convert data to icon pin config */
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 8006864:	2300      	movs	r3, #0
 8006866:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800686a:	e03d      	b.n	80068e8 <Screen_GetIcon_Pin+0xfc>
        if (Pin_x >= 8) {
 800686c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8006870:	2b07      	cmp	r3, #7
 8006872:	d90c      	bls.n	800688e <Screen_GetIcon_Pin+0xa2>
            map_array['0'] = ICON_OUTPUT;
 8006874:	2301      	movs	r3, #1
 8006876:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_OUTPUT;
 800687a:	2301      	movs	r3, #1
 800687c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_INPUT;
 8006880:	2300      	movs	r3, #0
 8006882:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_INPUT;
 8006886:	2300      	movs	r3, #0
 8006888:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 800688c:	e00b      	b.n	80068a6 <Screen_GetIcon_Pin+0xba>
        } else {
            map_array['0'] = ICON_INPUT;
 800688e:	2300      	movs	r3, #0
 8006890:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_INPUT;
 8006894:	2300      	movs	r3, #0
 8006896:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_OUTPUT;
 800689a:	2301      	movs	r3, #1
 800689c:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_OUTPUT;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        }
        screen_obj->IC_Testerx[screen_obj->curr_device].config_pin[Pin_x] = map_array[(uint8_t)(data_pin[0][Pin_x])];
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80068ae:	4413      	add	r3, r2
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80068ba:	4619      	mov	r1, r3
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	460b      	mov	r3, r1
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	3350      	adds	r3, #80	@ 0x50
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80068d0:	4413      	add	r3, r2
 80068d2:	f100 0290 	add.w	r2, r0, #144	@ 0x90
 80068d6:	443a      	add	r2, r7
 80068d8:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 80068dc:	701a      	strb	r2, [r3, #0]
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 80068de:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80068e2:	3301      	adds	r3, #1
 80068e4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80068e8:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80068ec:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d3bb      	bcc.n	800686c <Screen_GetIcon_Pin+0x80>
    }
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
 80068f8:	3794      	adds	r7, #148	@ 0x94
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd90      	pop	{r4, r7, pc}

080068fe <Screen_GetIcon_Result>:

void Screen_SetIcon_Pin(Screen_t *const obj_screen) {

}

void Screen_GetIcon_Result(Screen_t *const screen_obj, char **result) {
 80068fe:	b590      	push	{r4, r7, lr}
 8006900:	b0a5      	sub	sp, #148	@ 0x94
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 800690e:	4619      	mov	r1, r3
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	460b      	mov	r3, r1
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	440b      	add	r3, r1
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	334a      	adds	r3, #74	@ 0x4a
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	4619      	mov	r1, r3
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	1a5b      	subs	r3, r3, r1
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	3395      	adds	r3, #149	@ 0x95
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 800693c:	4619      	mov	r1, r3
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	334a      	adds	r3, #74	@ 0x4a
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	4619      	mov	r1, r3
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	1a5b      	subs	r3, r3, r1
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	3394      	adds	r3, #148	@ 0x94
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    uint8_t map_array[128] = {0};
 8006964:	f107 0308 	add.w	r3, r7, #8
 8006968:	2280      	movs	r2, #128	@ 0x80
 800696a:	2100      	movs	r1, #0
 800696c:	4618      	mov	r0, r3
 800696e:	f002 fd6b 	bl	8009448 <memset>
    map_array['0'] = ICON_LOGIC_LOW;
 8006972:	2300      	movs	r3, #0
 8006974:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    map_array['1'] = ICON_LOGIC_HIGH;
 8006978:	2301      	movs	r3, #1
 800697a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    map_array['L'] = ICON_CLOCK_LOW;
 800697e:	2302      	movs	r3, #2
 8006980:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    map_array['H'] = ICON_CLOCK_HIGH;
 8006984:	2303      	movs	r3, #3
 8006986:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    map_array['V'] = ICON_LOGIC_NONE;
 800698a:	2304      	movs	r3, #4
 800698c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    map_array['G'] = ICON_LOGIC_NONE;
 8006990:	2304      	movs	r3, #4
 8006992:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].data_result = malloc(num_case * sizeof(char *));
 8006996:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800699a:	009a      	lsls	r2, r3, #2
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80069a2:	461c      	mov	r4, r3
 80069a4:	4610      	mov	r0, r2
 80069a6:	f000 fe2f 	bl	8007608 <malloc>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4619      	mov	r1, r3
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4623      	mov	r3, r4
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4423      	add	r3, r4
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	3354      	adds	r3, #84	@ 0x54
 80069bc:	6019      	str	r1, [r3, #0]
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 80069be:	2300      	movs	r3, #0
 80069c0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80069c4:	e01b      	b.n	80069fe <Screen_GetIcon_Result+0x100>
        screen_obj->IC_Testerx[screen_obj->curr_device].data_result[Case_x] = malloc(num_pin * sizeof(char));
 80069c6:	f897 108c 	ldrb.w	r1, [r7, #140]	@ 0x8c
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80069d0:	4618      	mov	r0, r3
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	4603      	mov	r3, r0
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4403      	add	r3, r0
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	3354      	adds	r3, #84	@ 0x54
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	18d4      	adds	r4, r2, r3
 80069ea:	4608      	mov	r0, r1
 80069ec:	f000 fe0c 	bl	8007608 <malloc>
 80069f0:	4603      	mov	r3, r0
 80069f2:	6023      	str	r3, [r4, #0]
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 80069f4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80069f8:	3301      	adds	r3, #1
 80069fa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80069fe:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8006a02:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d3dd      	bcc.n	80069c6 <Screen_GetIcon_Result+0xc8>
    }

    /* Convert data to icon pin config */
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8006a10:	e038      	b.n	8006a84 <Screen_GetIcon_Result+0x186>
        for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 8006a12:	2300      	movs	r3, #0
 8006a14:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8006a18:	e029      	b.n	8006a6e <Screen_GetIcon_Result+0x170>
        	screen_obj->IC_Testerx[screen_obj->curr_device].data_result[Case_x][Pin_x] = map_array[(uint8_t)(result[Case_x][Pin_x])];
 8006a1a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	4413      	add	r3, r2
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8006a2a:	4413      	add	r3, r2
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006a36:	4619      	mov	r1, r3
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	440b      	add	r3, r1
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	3354      	adds	r3, #84	@ 0x54
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8006a56:	4413      	add	r3, r2
 8006a58:	f100 0290 	add.w	r2, r0, #144	@ 0x90
 8006a5c:	443a      	add	r2, r7
 8006a5e:	f812 2c88 	ldrb.w	r2, [r2, #-136]
 8006a62:	701a      	strb	r2, [r3, #0]
        for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 8006a64:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8006a68:	3301      	adds	r3, #1
 8006a6a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8006a6e:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8006a72:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d3cf      	bcc.n	8006a1a <Screen_GetIcon_Result+0x11c>
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 8006a7a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8006a7e:	3301      	adds	r3, #1
 8006a80:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8006a84:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 8006a88:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d3c0      	bcc.n	8006a12 <Screen_GetIcon_Result+0x114>
        }
    }
}
 8006a90:	bf00      	nop
 8006a92:	bf00      	nop
 8006a94:	3794      	adds	r7, #148	@ 0x94
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd90      	pop	{r4, r7, pc}
	...

08006a9c <Screen_Init_Variable>:

void Screen_Init_Variable(Screen_t *const obj_screen) {
 8006a9c:	b590      	push	{r4, r7, lr}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
    obj_screen->curr_device = DEVICE_1;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_IC = "74HC4051";
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a76      	ldr	r2, [pc, #472]	@ (8006c88 <Screen_Init_Variable+0x1ec>)
 8006ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC = "Description IC 74HC4051";
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a75      	ldr	r2, [pc, #468]	@ (8006c8c <Screen_Init_Variable+0x1f0>)
 8006ab8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    obj_screen->Program_Testx[PROGRAM_TEST1].num_IC = "5";
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a74      	ldr	r2, [pc, #464]	@ (8006c90 <Screen_Init_Variable+0x1f4>)
 8006ac0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    obj_screen->Program_Testx[PROGRAM_TEST2].Name_IC = "74HC4052";
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a73      	ldr	r2, [pc, #460]	@ (8006c94 <Screen_Init_Variable+0x1f8>)
 8006ac8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC = "Description IC 74HC4052";
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a72      	ldr	r2, [pc, #456]	@ (8006c98 <Screen_Init_Variable+0x1fc>)
 8006ad0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    obj_screen->Program_Testx[PROGRAM_TEST2].num_IC = "10";
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a71      	ldr	r2, [pc, #452]	@ (8006c9c <Screen_Init_Variable+0x200>)
 8006ad8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

    obj_screen->Program_Testx[PROGRAM_TEST3].Name_IC = "74HC4053";
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a70      	ldr	r2, [pc, #448]	@ (8006ca0 <Screen_Init_Variable+0x204>)
 8006ae0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC = "Description IC 74HC4053";
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a6f      	ldr	r2, [pc, #444]	@ (8006ca4 <Screen_Init_Variable+0x208>)
 8006ae8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    obj_screen->Program_Testx[PROGRAM_TEST3].num_IC = "15";
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a6e      	ldr	r2, [pc, #440]	@ (8006ca8 <Screen_Init_Variable+0x20c>)
 8006af0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    obj_screen->Program_Testx[PROGRAM_TEST4].Name_IC = "74HC4054";
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a6d      	ldr	r2, [pc, #436]	@ (8006cac <Screen_Init_Variable+0x210>)
 8006af8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC = "Description IC 74HC4054";
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a6c      	ldr	r2, [pc, #432]	@ (8006cb0 <Screen_Init_Variable+0x214>)
 8006b00:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    obj_screen->Program_Testx[PROGRAM_TEST4].num_IC = "20";
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a6b      	ldr	r2, [pc, #428]	@ (8006cb4 <Screen_Init_Variable+0x218>)
 8006b08:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program = "Program 1";
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a6a      	ldr	r2, [pc, #424]	@ (8006cb8 <Screen_Init_Variable+0x21c>)
 8006b10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program = "Program 2";
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a69      	ldr	r2, [pc, #420]	@ (8006cbc <Screen_Init_Variable+0x220>)
 8006b18:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program = "Program 3";
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a68      	ldr	r2, [pc, #416]	@ (8006cc0 <Screen_Init_Variable+0x224>)
 8006b20:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program = "Program 4";
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a67      	ldr	r2, [pc, #412]	@ (8006cc4 <Screen_Init_Variable+0x228>)
 8006b28:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

    obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester = "IC TESTER 1";
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a66      	ldr	r2, [pc, #408]	@ (8006cc8 <Screen_Init_Variable+0x22c>)
 8006b30:	64da      	str	r2, [r3, #76]	@ 0x4c
    obj_screen->IC_Testerx[DEVICE_2].NameIC_Tester = "IC TESTER 2";
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a65      	ldr	r2, [pc, #404]	@ (8006ccc <Screen_Init_Variable+0x230>)
 8006b36:	661a      	str	r2, [r3, #96]	@ 0x60
    obj_screen->IC_Testerx[DEVICE_3].NameIC_Tester = "IC TESTER 3";
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a65      	ldr	r2, [pc, #404]	@ (8006cd0 <Screen_Init_Variable+0x234>)
 8006b3c:	675a      	str	r2, [r3, #116]	@ 0x74

    memcpy(obj_screen->Wifi_setting.Name_Wifi,"Wifi TEST 1",strlen("Wifi TEST 1"));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	33f4      	adds	r3, #244	@ 0xf4
 8006b42:	220b      	movs	r2, #11
 8006b44:	4963      	ldr	r1, [pc, #396]	@ (8006cd4 <Screen_Init_Variable+0x238>)
 8006b46:	4618      	mov	r0, r3
 8006b48:	f002 fd61 	bl	800960e <memcpy>
    memcpy(obj_screen->Wifi_setting.Password_Wifi,"PASSword 1234",strlen("PASSword 1234"));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f503 7389 	add.w	r3, r3, #274	@ 0x112
 8006b52:	220d      	movs	r2, #13
 8006b54:	4960      	ldr	r1, [pc, #384]	@ (8006cd8 <Screen_Init_Variable+0x23c>)
 8006b56:	4618      	mov	r0, r3
 8006b58:	f002 fd59 	bl	800960e <memcpy>

    obj_screen->IC_Testerx[DEVICE_1].curr_PageMain = DWINPAGE_MAIN;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2265      	movs	r2, #101	@ 0x65
 8006b60:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    obj_screen->IC_Testerx[DEVICE_2].curr_PageMain = DWINPAGE_MAIN;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2265      	movs	r2, #101	@ 0x65
 8006b68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    obj_screen->IC_Testerx[DEVICE_3].curr_PageMain = DWINPAGE_MAIN; 
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2265      	movs	r2, #101	@ 0x65
 8006b70:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71

    obj_screen->IC_Testerx[DEVICE_1].state = false;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    obj_screen->IC_Testerx[DEVICE_2].state = false;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
    obj_screen->IC_Testerx[DEVICE_3].state = false;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_1,obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7f9 fae3 	bl	8000164 <strlen>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	f249 2125 	movw	r1, #37413	@ 0x9225
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f9f7 	bl	8006f9c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_2,obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 40a0 	ldr.w	r4, [r3, #160]	@ 0xa0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7f9 fad2 	bl	8000164 <strlen>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	f249 2150 	movw	r1, #37456	@ 0x9250
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f9e6 	bl	8006f9c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_3,obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7f9 fac1 	bl	8000164 <strlen>
 8006be2:	4603      	mov	r3, r0
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	4622      	mov	r2, r4
 8006be8:	f249 2175 	movw	r1, #37493	@ 0x9275
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f9d5 	bl	8006f9c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_4,obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program));
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 40d8 	ldr.w	r4, [r3, #216]	@ 0xd8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7f9 fab0 	bl	8000164 <strlen>
 8006c04:	4603      	mov	r3, r0
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	4622      	mov	r2, r4
 8006c0a:	f44f 4113 	mov.w	r1, #37632	@ 0x9300
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f9c4 	bl	8006f9c <DWIN_SetText>

    DWIN_SetText((Dwin_t *)obj_screen,VP_Name_Tester,obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,strlen(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7f9 faa1 	bl	8000164 <strlen>
 8006c22:	4603      	mov	r3, r0
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	4622      	mov	r2, r4
 8006c28:	f249 3150 	movw	r1, #37712	@ 0x9350
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f9b5 	bl	8006f9c <DWIN_SetText>

    obj_screen->Program_Testx[PROGRAM_TEST1].num_pin = 16;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2210      	movs	r2, #16
 8006c36:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    obj_screen->Program_Testx[PROGRAM_TEST1].num_case = 8;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94

    /* Screen */
    obj_screen->Screen_keyboard.Caplock = false;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    obj_screen->Screen_keyboard.Index_String = 0;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    Screen_ShowData_Mainpage(obj_screen,0);
 8006c52:	2100      	movs	r1, #0
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f841 	bl	8006cdc <Screen_ShowData_Mainpage>
    DWIN_SetVariable_Icon((Dwin_t *)obj_screen,VP_ICON_ON_OFF,obj_screen->IC_Testerx[obj_screen->curr_device].state);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006c60:	4619      	mov	r1, r3
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	334b      	adds	r3, #75	@ 0x4b
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fa11 	bl	80070a0 <DWIN_SetVariable_Icon>
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd90      	pop	{r4, r7, pc}
 8006c86:	bf00      	nop
 8006c88:	0800c050 	.word	0x0800c050
 8006c8c:	0800c05c 	.word	0x0800c05c
 8006c90:	0800c074 	.word	0x0800c074
 8006c94:	0800c078 	.word	0x0800c078
 8006c98:	0800c084 	.word	0x0800c084
 8006c9c:	0800c09c 	.word	0x0800c09c
 8006ca0:	0800c0a0 	.word	0x0800c0a0
 8006ca4:	0800c0ac 	.word	0x0800c0ac
 8006ca8:	0800c0c4 	.word	0x0800c0c4
 8006cac:	0800c0c8 	.word	0x0800c0c8
 8006cb0:	0800c0d4 	.word	0x0800c0d4
 8006cb4:	0800c0ec 	.word	0x0800c0ec
 8006cb8:	0800c0f0 	.word	0x0800c0f0
 8006cbc:	0800c0fc 	.word	0x0800c0fc
 8006cc0:	0800c108 	.word	0x0800c108
 8006cc4:	0800c114 	.word	0x0800c114
 8006cc8:	0800c120 	.word	0x0800c120
 8006ccc:	0800c12c 	.word	0x0800c12c
 8006cd0:	0800c138 	.word	0x0800c138
 8006cd4:	0800c144 	.word	0x0800c144
 8006cd8:	0800c150 	.word	0x0800c150

08006cdc <Screen_ShowData_Mainpage>:

void Screen_ShowData_Mainpage(Screen_t *const screen_obj, uint8_t index_program) {
 8006cdc:	b5b0      	push	{r4, r5, r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
    uint8_t a_select_program[MAX_PROGRAM_TEST];
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 8006ce8:	78fa      	ldrb	r2, [r7, #3]
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	4613      	mov	r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	440b      	add	r3, r1
 8006cf6:	3388      	adds	r3, #136	@ 0x88
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7f9 fa32 	bl	8000164 <strlen>
 8006d00:	4603      	mov	r3, r0
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	3309      	adds	r3, #9
 8006d06:	77fb      	strb	r3, [r7, #31]
    uint8_t size_Description_IC = strlen("IC Description: ") + strlen((char *)screen_obj->Program_Testx[index_program].Description_IC);
 8006d08:	78fa      	ldrb	r2, [r7, #3]
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	338c      	adds	r3, #140	@ 0x8c
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7f9 fa22 	bl	8000164 <strlen>
 8006d20:	4603      	mov	r3, r0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	3310      	adds	r3, #16
 8006d26:	77bb      	strb	r3, [r7, #30]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 8006d28:	78fa      	ldrb	r2, [r7, #3]
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	1a9b      	subs	r3, r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	440b      	add	r3, r1
 8006d36:	3390      	adds	r3, #144	@ 0x90
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7f9 fa12 	bl	8000164 <strlen>
 8006d40:	4603      	mov	r3, r0
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	330f      	adds	r3, #15
 8006d46:	777b      	strb	r3, [r7, #29]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8006d48:	7ffb      	ldrb	r3, [r7, #31]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fc5b 	bl	8007608 <malloc>
 8006d52:	4603      	mov	r3, r0
 8006d54:	61bb      	str	r3, [r7, #24]
    char *Text_Description_IC = malloc(size_Description_IC + 1);
 8006d56:	7fbb      	ldrb	r3, [r7, #30]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fc54 	bl	8007608 <malloc>
 8006d60:	4603      	mov	r3, r0
 8006d62:	617b      	str	r3, [r7, #20]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 8006d64:	7f7b      	ldrb	r3, [r7, #29]
 8006d66:	3301      	adds	r3, #1
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fc4d 	bl	8007608 <malloc>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	613b      	str	r3, [r7, #16]

    strcpy(Text_Name_IC,"IC Name: ");
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	4944      	ldr	r1, [pc, #272]	@ (8006e88 <Screen_ShowData_Mainpage+0x1ac>)
 8006d76:	461a      	mov	r2, r3
 8006d78:	460b      	mov	r3, r1
 8006d7a:	cb03      	ldmia	r3!, {r0, r1}
 8006d7c:	6010      	str	r0, [r2, #0]
 8006d7e:	6051      	str	r1, [r2, #4]
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 8006d84:	78fa      	ldrb	r2, [r7, #3]
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	440b      	add	r3, r1
 8006d92:	3388      	adds	r3, #136	@ 0x88
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4619      	mov	r1, r3
 8006d98:	69b8      	ldr	r0, [r7, #24]
 8006d9a:	f002 fb5d 	bl	8009458 <strcat>
    strcpy(Text_Description_IC,"IC Description: ");
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	4a3a      	ldr	r2, [pc, #232]	@ (8006e8c <Screen_ShowData_Mainpage+0x1b0>)
 8006da2:	461d      	mov	r5, r3
 8006da4:	4614      	mov	r4, r2
 8006da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006da8:	6028      	str	r0, [r5, #0]
 8006daa:	6069      	str	r1, [r5, #4]
 8006dac:	60aa      	str	r2, [r5, #8]
 8006dae:	60eb      	str	r3, [r5, #12]
 8006db0:	7823      	ldrb	r3, [r4, #0]
 8006db2:	742b      	strb	r3, [r5, #16]
    strcat(Text_Description_IC,(char *)screen_obj->Program_Testx[index_program].Description_IC);
 8006db4:	78fa      	ldrb	r2, [r7, #3]
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	4613      	mov	r3, r2
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	1a9b      	subs	r3, r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	440b      	add	r3, r1
 8006dc2:	338c      	adds	r3, #140	@ 0x8c
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6978      	ldr	r0, [r7, #20]
 8006dca:	f002 fb45 	bl	8009458 <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	4a2f      	ldr	r2, [pc, #188]	@ (8006e90 <Screen_ShowData_Mainpage+0x1b4>)
 8006dd2:	461c      	mov	r4, r3
 8006dd4:	4615      	mov	r5, r2
 8006dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dd8:	6020      	str	r0, [r4, #0]
 8006dda:	6061      	str	r1, [r4, #4]
 8006ddc:	60a2      	str	r2, [r4, #8]
 8006dde:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);
 8006de0:	78fa      	ldrb	r2, [r7, #3]
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	1a9b      	subs	r3, r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	3390      	adds	r3, #144	@ 0x90
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6938      	ldr	r0, [r7, #16]
 8006df6:	f002 fb2f 	bl	8009458 <strcat>

    memset(a_select_program,1,MAX_PROGRAM_TEST);
 8006dfa:	f107 030c 	add.w	r3, r7, #12
 8006dfe:	2204      	movs	r2, #4
 8006e00:	2101      	movs	r1, #1
 8006e02:	4618      	mov	r0, r3
 8006e04:	f002 fb20 	bl	8009448 <memset>
    // Get the program selected
    a_select_program[index_program] = 0 ;
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	3320      	adds	r3, #32
 8006e0c:	443b      	add	r3, r7
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f803 2c14 	strb.w	r2, [r3, #-20]
    screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index = index_program;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	334a      	adds	r3, #74	@ 0x4a
 8006e2a:	78fa      	ldrb	r2, [r7, #3]
 8006e2c:	701a      	strb	r2, [r3, #0]

    // Show data in screen
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_SELECT_PROGRAM,a_select_program,MAX_PROGRAM_TEST);
 8006e2e:	f107 020c 	add.w	r2, r7, #12
 8006e32:	2304      	movs	r3, #4
 8006e34:	f44f 4182 	mov.w	r1, #16640	@ 0x4100
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f95e 	bl	80070fa <DWIN_SetArray_Icon>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_IC,Text_Name_IC,size_Name_IC);
 8006e3e:	7ffb      	ldrb	r3, [r7, #31]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	f44f 4111 	mov.w	r1, #37120	@ 0x9100
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f8a7 	bl	8006f9c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Description_IC,Text_Description_IC,size_Description_IC);
 8006e4e:	7fbb      	ldrb	r3, [r7, #30]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	f249 1150 	movw	r1, #37200	@ 0x9150
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f89f 	bl	8006f9c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,Text_Num_IC,size_Num_IC);
 8006e5e:	7f7b      	ldrb	r3, [r7, #29]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f897 	bl	8006f9c <DWIN_SetText>
    
    /* free malloc */
    free(Text_Name_IC);
 8006e6e:	69b8      	ldr	r0, [r7, #24]
 8006e70:	f000 fbd2 	bl	8007618 <free>
    free(Text_Description_IC);
 8006e74:	6978      	ldr	r0, [r7, #20]
 8006e76:	f000 fbcf 	bl	8007618 <free>
    free(Text_Num_IC);
 8006e7a:	6938      	ldr	r0, [r7, #16]
 8006e7c:	f000 fbcc 	bl	8007618 <free>
}
 8006e80:	bf00      	nop
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bdb0      	pop	{r4, r5, r7, pc}
 8006e88:	0800c000 	.word	0x0800c000
 8006e8c:	0800c160 	.word	0x0800c160
 8006e90:	0800c00c 	.word	0x0800c00c

08006e94 <Screen_SetInfo_Pin>:

void Screen_SetInfo_Pin(Screen_t *const screen_obj, char **array_data) {
 8006e94:	b590      	push	{r4, r7, lr}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
    // for (uint8_t pin_x = 0; pin_x < screen_obj->Program_Testx[PROGRAM_TEST1].num_pin; pin_x++) {
    //     if (screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x] != NULL) {
    //         free(screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x]);
    //     } 
    // }
    uint16_t Address_VP = VP_Name_Pin;
 8006e9e:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 8006ea2:	81fb      	strh	r3, [r7, #14]
    screen_obj->Program_Testx[PROGRAM_TEST1].data_pin = malloc( screen_obj->Program_Testx[PROGRAM_TEST1].num_pin * sizeof(char *) );
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fbab 	bl	8007608 <malloc>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    /* Get new data */
    for (uint8_t pin_x = 0; pin_x < screen_obj->Program_Testx[PROGRAM_TEST1].num_pin; pin_x++) {
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	737b      	strb	r3, [r7, #13]
 8006ec0:	e02d      	b.n	8006f1e <Screen_SetInfo_Pin+0x8a>
        screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x] = strdup(array_data[pin_x]);
 8006ec2:	7b7b      	ldrb	r3, [r7, #13]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	4413      	add	r3, r2
 8006eca:	6819      	ldr	r1, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006ed2:	7b7b      	ldrb	r3, [r7, #13]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	18d4      	adds	r4, r2, r3
 8006ed8:	4608      	mov	r0, r1
 8006eda:	f002 facd 	bl	8009478 <strdup>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	6023      	str	r3, [r4, #0]
        DWIN_SetText((Dwin_t *)screen_obj,Address_VP,screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x],strlen(screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x]));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006ee8:	7b7b      	ldrb	r3, [r7, #13]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	681c      	ldr	r4, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006ef6:	7b7b      	ldrb	r3, [r7, #13]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7f9 f930 	bl	8000164 <strlen>
 8006f04:	4603      	mov	r3, r0
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	89f9      	ldrh	r1, [r7, #14]
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f845 	bl	8006f9c <DWIN_SetText>
        Address_VP = Address_VP + 0x10;
 8006f12:	89fb      	ldrh	r3, [r7, #14]
 8006f14:	3310      	adds	r3, #16
 8006f16:	81fb      	strh	r3, [r7, #14]
    for (uint8_t pin_x = 0; pin_x < screen_obj->Program_Testx[PROGRAM_TEST1].num_pin; pin_x++) {
 8006f18:	7b7b      	ldrb	r3, [r7, #13]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	737b      	strb	r3, [r7, #13]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8006f24:	7b7a      	ldrb	r2, [r7, #13]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d3cb      	bcc.n	8006ec2 <Screen_SetInfo_Pin+0x2e>
    }
}
 8006f2a:	bf00      	nop
 8006f2c:	bf00      	nop
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd90      	pop	{r4, r7, pc}

08006f34 <I2C1_ER_IRQHandler>:
#include "../Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h" /* CMSIS STM32F1xx Device Peripheral Access Layer Header File */

void I2C1_ER_IRQHandler(void);
void RTC_IRQHandler(void);

void I2C1_ER_IRQHandler(void) { 
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0
    // OS_task_activate(1);  
    // HAL_NVIC_ClearPendingIRQ(I2C1_ER_IRQn); // clear NVIC pending bit
}
 8006f38:	bf00      	nop
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bc80      	pop	{r7}
 8006f3e:	4770      	bx	lr

08006f40 <RTC_IRQHandler>:
void RTC_IRQHandler(void) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
    OS_task_activate(1);  
 8006f44:	2001      	movs	r0, #1
 8006f46:	f000 fa6b 	bl	8007420 <OS_task_activate>
}
 8006f4a:	bf00      	nop
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <DWIN_SetPage>:
#include "DWIN_HMI.h"

void DWIN_SetPage(Dwin_t *pDwin, uint8_t page)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b086      	sub	sp, #24
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	460b      	mov	r3, r1
 8006f58:	70fb      	strb	r3, [r7, #3]
    uint8_t sendBuffer[10] = {CMD_HEAD1, CMD_HEAD2, 0x07, CMD_WRITE, 0x00, 0x84, 0x5A, 0x01, 0x00, page};
 8006f5a:	235a      	movs	r3, #90	@ 0x5a
 8006f5c:	733b      	strb	r3, [r7, #12]
 8006f5e:	23a5      	movs	r3, #165	@ 0xa5
 8006f60:	737b      	strb	r3, [r7, #13]
 8006f62:	2307      	movs	r3, #7
 8006f64:	73bb      	strb	r3, [r7, #14]
 8006f66:	2382      	movs	r3, #130	@ 0x82
 8006f68:	73fb      	strb	r3, [r7, #15]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	743b      	strb	r3, [r7, #16]
 8006f6e:	2384      	movs	r3, #132	@ 0x84
 8006f70:	747b      	strb	r3, [r7, #17]
 8006f72:	235a      	movs	r3, #90	@ 0x5a
 8006f74:	74bb      	strb	r3, [r7, #18]
 8006f76:	2301      	movs	r3, #1
 8006f78:	74fb      	strb	r3, [r7, #19]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	753b      	strb	r3, [r7, #20]
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	f107 010c 	add.w	r1, r7, #12
 8006f8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006f8e:	220a      	movs	r2, #10
 8006f90:	f7fd fe82 	bl	8004c98 <HAL_UART_Transmit>
}
 8006f94:	bf00      	nop
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <DWIN_SetText>:

void DWIN_SetText(Dwin_t *pDwin, uint16_t VP_address, char *textData, uint16_t datalen) {
 8006f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	b08a      	sub	sp, #40	@ 0x28
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	460b      	mov	r3, r1
 8006fac:	817b      	strh	r3, [r7, #10]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	813b      	strh	r3, [r7, #8]
 8006fb2:	466b      	mov	r3, sp
 8006fb4:	469a      	mov	sl, r3
    uint8_t ffEnding[2] = { 0xFF, 0xFF };
 8006fb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006fba:	83bb      	strh	r3, [r7, #28]
    uint8_t sendBuffer[8 + datalen];
 8006fbc:	893b      	ldrh	r3, [r7, #8]
 8006fbe:	f103 0608 	add.w	r6, r3, #8
 8006fc2:	1e73      	subs	r3, r6, #1
 8006fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4690      	mov	r8, r2
 8006fcc:	4699      	mov	r9, r3
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fe2:	4632      	mov	r2, r6
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	4614      	mov	r4, r2
 8006fe8:	461d      	mov	r5, r3
 8006fea:	f04f 0200 	mov.w	r2, #0
 8006fee:	f04f 0300 	mov.w	r3, #0
 8006ff2:	00eb      	lsls	r3, r5, #3
 8006ff4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ff8:	00e2      	lsls	r2, r4, #3
 8006ffa:	4633      	mov	r3, r6
 8006ffc:	3307      	adds	r3, #7
 8006ffe:	08db      	lsrs	r3, r3, #3
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	ebad 0d03 	sub.w	sp, sp, r3
 8007006:	466b      	mov	r3, sp
 8007008:	3300      	adds	r3, #0
 800700a:	623b      	str	r3, [r7, #32]

    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800700c:	235a      	movs	r3, #90	@ 0x5a
 800700e:	753b      	strb	r3, [r7, #20]
 8007010:	23a5      	movs	r3, #165	@ 0xa5
 8007012:	757b      	strb	r3, [r7, #21]
 8007014:	893b      	ldrh	r3, [r7, #8]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	3305      	adds	r3, #5
 800701a:	b2db      	uxtb	r3, r3
 800701c:	75bb      	strb	r3, [r7, #22]
 800701e:	2382      	movs	r3, #130	@ 0x82
 8007020:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 8007022:	897b      	ldrh	r3, [r7, #10]
 8007024:	0a1b      	lsrs	r3, r3, #8
 8007026:	b29b      	uxth	r3, r3
 8007028:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800702a:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 800702c:	897b      	ldrh	r3, [r7, #10]
 800702e:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 8007030:	767b      	strb	r3, [r7, #25]
    
    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	461a      	mov	r2, r3
 8007036:	f107 0314 	add.w	r3, r7, #20
 800703a:	6818      	ldr	r0, [r3, #0]
 800703c:	6010      	str	r0, [r2, #0]
 800703e:	889b      	ldrh	r3, [r3, #4]
 8007040:	8093      	strh	r3, [r2, #4]
    memcpy(sendBuffer + 6, textData, datalen);
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	3306      	adds	r3, #6
 8007046:	893a      	ldrh	r2, [r7, #8]
 8007048:	6879      	ldr	r1, [r7, #4]
 800704a:	4618      	mov	r0, r3
 800704c:	f002 fadf 	bl	800960e <memcpy>
    memcpy(sendBuffer + (6 + datalen), ffEnding, sizeof(ffEnding));
 8007050:	893b      	ldrh	r3, [r7, #8]
 8007052:	3306      	adds	r3, #6
 8007054:	461a      	mov	r2, r3
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	4413      	add	r3, r2
 800705a:	8bba      	ldrh	r2, [r7, #28]
 800705c:	801a      	strh	r2, [r3, #0]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	b2b2      	uxth	r2, r6
 8007064:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007068:	6a39      	ldr	r1, [r7, #32]
 800706a:	f7fd fe15 	bl	8004c98 <HAL_UART_Transmit>
 800706e:	46d5      	mov	sp, sl
}
 8007070:	bf00      	nop
 8007072:	3728      	adds	r7, #40	@ 0x28
 8007074:	46bd      	mov	sp, r7
 8007076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800707c <DWIN_ClearText>:

void DWIN_ClearText(Dwin_t *pDwin, uint16_t VP_address) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	807b      	strh	r3, [r7, #2]
    DWIN_SetText(pDwin,VP_address,(uint8_t *)"",strlen(""));
 8007088:	8879      	ldrh	r1, [r7, #2]
 800708a:	2300      	movs	r3, #0
 800708c:	4a03      	ldr	r2, [pc, #12]	@ (800709c <DWIN_ClearText+0x20>)
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff ff84 	bl	8006f9c <DWIN_SetText>
}
 8007094:	bf00      	nop
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	0800c174 	.word	0x0800c174

080070a0 <DWIN_SetVariable_Icon>:
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
}

void DWIN_SetVariable_Icon(Dwin_t *pDwin, uint16_t VP_address, uint16_t data ) {
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	807b      	strh	r3, [r7, #2]
 80070ac:	4613      	mov	r3, r2
 80070ae:	803b      	strh	r3, [r7, #0]
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80070b0:	235a      	movs	r3, #90	@ 0x5a
 80070b2:	723b      	strb	r3, [r7, #8]
 80070b4:	23a5      	movs	r3, #165	@ 0xa5
 80070b6:	727b      	strb	r3, [r7, #9]
 80070b8:	2305      	movs	r3, #5
 80070ba:	72bb      	strb	r3, [r7, #10]
 80070bc:	2382      	movs	r3, #130	@ 0x82
 80070be:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 80070c0:	887b      	ldrh	r3, [r7, #2]
 80070c2:	0a1b      	lsrs	r3, r3, #8
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80070c8:	733b      	strb	r3, [r7, #12]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 80070ca:	887b      	ldrh	r3, [r7, #2]
 80070cc:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80070ce:	737b      	strb	r3, [r7, #13]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 80070d0:	883b      	ldrh	r3, [r7, #0]
 80070d2:	0a1b      	lsrs	r3, r3, #8
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80070d8:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 80070da:	883b      	ldrh	r3, [r7, #0]
 80070dc:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80070de:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	f107 0108 	add.w	r1, r7, #8
 80070e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80070ec:	2208      	movs	r2, #8
 80070ee:	f7fd fdd3 	bl	8004c98 <HAL_UART_Transmit>
}
 80070f2:	bf00      	nop
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <DWIN_SetArray_Icon>:

void DWIN_SetArray_Icon(Dwin_t *pDwin, uint16_t VP_address_begin, uint8_t *data_array, uint8_t data_length ) {
 80070fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070fe:	b08b      	sub	sp, #44	@ 0x2c
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	607a      	str	r2, [r7, #4]
 8007106:	461a      	mov	r2, r3
 8007108:	460b      	mov	r3, r1
 800710a:	817b      	strh	r3, [r7, #10]
 800710c:	4613      	mov	r3, r2
 800710e:	727b      	strb	r3, [r7, #9]
 8007110:	466b      	mov	r3, sp
 8007112:	461e      	mov	r6, r3
    uint16_t Total_Data_Length = data_length * 2;
 8007114:	7a7b      	ldrb	r3, [r7, #9]
 8007116:	b29b      	uxth	r3, r3
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t sendBuffer[6 +Total_Data_Length];
 800711c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800711e:	1d99      	adds	r1, r3, #6
 8007120:	1e4b      	subs	r3, r1, #1
 8007122:	623b      	str	r3, [r7, #32]
 8007124:	460a      	mov	r2, r1
 8007126:	2300      	movs	r3, #0
 8007128:	4690      	mov	r8, r2
 800712a:	4699      	mov	r9, r3
 800712c:	f04f 0200 	mov.w	r2, #0
 8007130:	f04f 0300 	mov.w	r3, #0
 8007134:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007138:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800713c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007140:	460a      	mov	r2, r1
 8007142:	2300      	movs	r3, #0
 8007144:	4614      	mov	r4, r2
 8007146:	461d      	mov	r5, r3
 8007148:	f04f 0200 	mov.w	r2, #0
 800714c:	f04f 0300 	mov.w	r3, #0
 8007150:	00eb      	lsls	r3, r5, #3
 8007152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007156:	00e2      	lsls	r2, r4, #3
 8007158:	460b      	mov	r3, r1
 800715a:	3307      	adds	r3, #7
 800715c:	08db      	lsrs	r3, r3, #3
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	ebad 0d03 	sub.w	sp, sp, r3
 8007164:	466b      	mov	r3, sp
 8007166:	3300      	adds	r3, #0
 8007168:	61fb      	str	r3, [r7, #28]
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800716a:	235a      	movs	r3, #90	@ 0x5a
 800716c:	753b      	strb	r3, [r7, #20]
 800716e:	23a5      	movs	r3, #165	@ 0xa5
 8007170:	757b      	strb	r3, [r7, #21]
 8007172:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007174:	b2db      	uxtb	r3, r3
 8007176:	3303      	adds	r3, #3
 8007178:	b2db      	uxtb	r3, r3
 800717a:	75bb      	strb	r3, [r7, #22]
 800717c:	2382      	movs	r3, #130	@ 0x82
 800717e:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 8007180:	897b      	ldrh	r3, [r7, #10]
 8007182:	0a1b      	lsrs	r3, r3, #8
 8007184:	b29b      	uxth	r3, r3
 8007186:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 8007188:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 800718a:	897b      	ldrh	r3, [r7, #10]
 800718c:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800718e:	767b      	strb	r3, [r7, #25]

    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	461a      	mov	r2, r3
 8007194:	f107 0314 	add.w	r3, r7, #20
 8007198:	6818      	ldr	r0, [r3, #0]
 800719a:	6010      	str	r0, [r2, #0]
 800719c:	889b      	ldrh	r3, [r3, #4]
 800719e:	8093      	strh	r3, [r2, #4]
    /* Convert data array uint8_t to uint16_t */
    for (uint16_t i = 0; i < data_length; i++) {
 80071a0:	2300      	movs	r3, #0
 80071a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80071a4:	e012      	b.n	80071cc <DWIN_SetArray_Icon+0xd2>
        sendBuffer[6 + (i * 2)] = 0x00;              // High byte 
 80071a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071a8:	3303      	adds	r3, #3
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	69fa      	ldr	r2, [r7, #28]
 80071ae:	2000      	movs	r0, #0
 80071b0:	54d0      	strb	r0, [r2, r3]
        sendBuffer[6 + (i * 2) + 1] = data_array[i]; // Low byte is data
 80071b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	441a      	add	r2, r3
 80071b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071ba:	3303      	adds	r3, #3
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	3301      	adds	r3, #1
 80071c0:	7810      	ldrb	r0, [r2, #0]
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	54d0      	strb	r0, [r2, r3]
    for (uint16_t i = 0; i < data_length; i++) {
 80071c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071c8:	3301      	adds	r3, #1
 80071ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80071cc:	7a7b      	ldrb	r3, [r7, #9]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d3e7      	bcc.n	80071a6 <DWIN_SetArray_Icon+0xac>
    }

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	b28a      	uxth	r2, r1
 80071dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80071e0:	69f9      	ldr	r1, [r7, #28]
 80071e2:	f7fd fd59 	bl	8004c98 <HAL_UART_Transmit>
 80071e6:	46b5      	mov	sp, r6
}
 80071e8:	bf00      	nop
 80071ea:	372c      	adds	r7, #44	@ 0x2c
 80071ec:	46bd      	mov	sp, r7
 80071ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080071f2 <DWIN_SetCallback>:
    }
}

// Set DWIN callback function when receive data 
void DWIN_SetCallback(Dwin_t *pDwin, pListenDWIN dwin_callback)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
    pDwin->p_ListenDWIN_Callback = dwin_callback;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	609a      	str	r2, [r3, #8]
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr

0800720c <DWIN_Listen>:

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
    uint16_t VPaddress;
    uint16_t lowByte;
    uint16_t highByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b5a      	cmp	r3, #90	@ 0x5a
 800721c:	d133      	bne.n	8007286 <DWIN_Listen+0x7a>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2ba5      	cmp	r3, #165	@ 0xa5
 8007226:	d12e      	bne.n	8007286 <DWIN_Listen+0x7a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	3303      	adds	r3, #3
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b83      	cmp	r3, #131	@ 0x83
 8007230:	d129      	bne.n	8007286 <DWIN_Listen+0x7a>
        {
            datalength = RX_Buffer[2];
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	789b      	ldrb	r3, [r3, #2]
 8007236:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	3302      	adds	r3, #2
 800723c:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	3304      	adds	r3, #4
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	b21b      	sxth	r3, r3
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	b21a      	sxth	r2, r3
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	3305      	adds	r3, #5
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	b21b      	sxth	r3, r3
 8007252:	4313      	orrs	r3, r2
 8007254:	b21b      	sxth	r3, r3
 8007256:	81bb      	strh	r3, [r7, #12]
            /* get return key value */
            lowByte = RX_Buffer[datalength];  
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	4413      	add	r3, r2
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	817b      	strh	r3, [r7, #10]
            highByte = RX_Buffer[datalength-1];
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	3b01      	subs	r3, #1
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	4413      	add	r3, r2
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	813b      	strh	r3, [r7, #8]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d007      	beq.n	8007286 <DWIN_Listen+0x7a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lowByte,highByte);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	897a      	ldrh	r2, [r7, #10]
 800727c:	b2d1      	uxtb	r1, r2
 800727e:	893a      	ldrh	r2, [r7, #8]
 8007280:	b2d2      	uxtb	r2, r2
 8007282:	89b8      	ldrh	r0, [r7, #12]
 8007284:	4798      	blx	r3
            }
        }
    }

    
}
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <OS_task_post>:
 * @brief Post the event to event queue of task 
 * 
 * @param pOS_task 
 * @param pEvent 
 */ 
void OS_task_post(OS_task *const pOS_task, OS_event_t const * const pEvent) {
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
    OS_ring_buf_tcb *pQueue = &pri_queue[pOS_task->task_piro];
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	7c1b      	ldrb	r3, [r3, #16]
 800729e:	461a      	mov	r2, r3
 80072a0:	2358      	movs	r3, #88	@ 0x58
 80072a2:	fb02 f303 	mul.w	r3, r2, r3
 80072a6:	4a30      	ldr	r2, [pc, #192]	@ (8007368 <OS_task_post+0xd8>)
 80072a8:	4413      	add	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]

    /* Check over flow of queue */
    if (pri_queue[pOS_task->task_piro].nUsed >= OS_TASK_PER_PRI || pOS_task->nUsed > pOS_task->end ) { /* full queue */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	7c1b      	ldrb	r3, [r3, #16]
 80072b0:	4619      	mov	r1, r3
 80072b2:	4a2d      	ldr	r2, [pc, #180]	@ (8007368 <OS_task_post+0xd8>)
 80072b4:	2358      	movs	r3, #88	@ 0x58
 80072b6:	fb01 f303 	mul.w	r3, r1, r3
 80072ba:	4413      	add	r3, r2
 80072bc:	3303      	adds	r3, #3
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b09      	cmp	r3, #9
 80072c2:	d84d      	bhi.n	8007360 <OS_task_post+0xd0>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	7bda      	ldrb	r2, [r3, #15]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	7b1b      	ldrb	r3, [r3, #12]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d847      	bhi.n	8007360 <OS_task_post+0xd0>
        return;
    }

    /* insert tcb to queue */
    OS_PORT_CRIT_ENTRY();
 80072d0:	b672      	cpsid	i
    pQueue->buf_tcb[pQueue->head_index].pEvent = pEvent;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	4413      	add	r3, r2
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	609a      	str	r2, [r3, #8]
    pQueue->buf_tcb[pQueue->head_index].pOS_task = pOS_task;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	4413      	add	r3, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	605a      	str	r2, [r3, #4]

    if (pQueue->head_index == 0) {
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d103      	bne.n	80072fe <OS_task_post+0x6e>
        pQueue->head_index = OS_TASK_PER_PRI - 1; /* wrap around to end of the buffer */
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2209      	movs	r2, #9
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	e005      	b.n	800730a <OS_task_post+0x7a>
    } else {
        --pQueue->head_index;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	3b01      	subs	r3, #1
 8007304:	b2da      	uxtb	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	701a      	strb	r2, [r3, #0]
    }
    ++pQueue->nUsed; /* Increase number event used in queue */
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	78db      	ldrb	r3, [r3, #3]
 800730e:	3301      	adds	r3, #1
 8007310:	b2da      	uxtb	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	70da      	strb	r2, [r3, #3]

    pOS_task->qBuf[pOS_task->head] = pEvent; /* insert event to queue */
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7b5b      	ldrb	r3, [r3, #13]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	601a      	str	r2, [r3, #0]
    if (pOS_task->head == 0) { 
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	7b5b      	ldrb	r3, [r3, #13]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <OS_task_post+0xa8>
        pOS_task->head = pOS_task->end; /* wrap around to end of the buffer */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	7b1a      	ldrb	r2, [r3, #12]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	735a      	strb	r2, [r3, #13]
 8007336:	e005      	b.n	8007344 <OS_task_post+0xb4>
    } else {
        --pOS_task->head;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	7b5b      	ldrb	r3, [r3, #13]
 800733c:	3b01      	subs	r3, #1
 800733e:	b2da      	uxtb	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	735a      	strb	r2, [r3, #13]
    }
    ++pOS_task->nUsed; /* Increase number event used in queue */
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7bdb      	ldrb	r3, [r3, #15]
 8007348:	3301      	adds	r3, #1
 800734a:	b2da      	uxtb	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	73da      	strb	r2, [r3, #15]

    /* Post event -> make the interrupt */
    // OS_PORT_TASK_PEND();
    HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007354:	b25b      	sxtb	r3, r3
 8007356:	4618      	mov	r0, r3
 8007358:	f7fb f8ad 	bl	80024b6 <HAL_NVIC_SetPendingIRQ>
    OS_PORT_CRIT_EXIT();
 800735c:	b662      	cpsie	i
 800735e:	e000      	b.n	8007362 <OS_task_post+0xd2>
        return;
 8007360:	bf00      	nop
}
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	200006b8 	.word	0x200006b8

0800736c <OS_task_post_event>:

void OS_task_post_event(OS_task *const pOS_task,uint8_t sig, uint8_t *data, uint32_t size) {
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	607a      	str	r2, [r7, #4]
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	460b      	mov	r3, r1
 800737a:	72fb      	strb	r3, [r7, #11]
    OS_event_t *e = get_dynamic_event();
 800737c:	f000 f8e6 	bl	800754c <get_dynamic_event>
 8007380:	6178      	str	r0, [r7, #20]
    set_sig_dynamic_event(e,sig);
 8007382:	7afb      	ldrb	r3, [r7, #11]
 8007384:	4619      	mov	r1, r3
 8007386:	6978      	ldr	r0, [r7, #20]
 8007388:	f000 f92c 	bl	80075e4 <set_sig_dynamic_event>
    set_data_dynamic_event(e,data,size);
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	6978      	ldr	r0, [r7, #20]
 8007392:	f000 f905 	bl	80075a0 <set_data_dynamic_event>
    OS_task_post(pOS_task,e);
 8007396:	6979      	ldr	r1, [r7, #20]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f7ff ff79 	bl	8007290 <OS_task_post>
}
 800739e:	bf00      	nop
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <OS_TimeEvt_tick>:

/**
 * @brief function in systemtick handler (1ms) to execute task time OS 
 * 
 */
void OS_TimeEvt_tick(void) {
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
    /* run for all the node time event */
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 80073ae:	4b1b      	ldr	r3, [pc, #108]	@ (800741c <OS_TimeEvt_tick+0x74>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	607b      	str	r3, [r7, #4]
 80073b4:	e029      	b.n	800740a <OS_TimeEvt_tick+0x62>
        OS_PORT_CRIT_ENTRY();
 80073b6:	b672      	cpsid	i
        if (node->Time_Ctr == 0) { /* down counter = 0  -> stop node */
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <OS_TimeEvt_tick+0x1e>
            OS_PORT_CRIT_EXIT();
 80073c2:	b662      	cpsie	i
 80073c4:	e01e      	b.n	8007404 <OS_TimeEvt_tick+0x5c>
        } else if (node->Time_Ctr == 1) { /* TIMEOUT */
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d110      	bne.n	80073f2 <OS_TimeEvt_tick+0x4a>
            node->Time_Ctr = node->Time_interval;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 80073dc:	b662      	cpsie	i
            /* Post event */
            // OS_task_post(node->task_post,&node->Time_event);
            OS_task_post_event(node->task_post,node->Time_event.sig,(uint8_t *)0,0);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b2d9      	uxtb	r1, r3
 80073e8:	2300      	movs	r3, #0
 80073ea:	2200      	movs	r2, #0
 80073ec:	f7ff ffbe 	bl	800736c <OS_task_post_event>
 80073f0:	e008      	b.n	8007404 <OS_TimeEvt_tick+0x5c>
        } else { /* count down value */
            --node->Time_Ctr;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 8007402:	b662      	cpsie	i
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007408:	607b      	str	r3, [r7, #4]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1d2      	bne.n	80073b6 <OS_TimeEvt_tick+0xe>
        }
    }
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	200007c0 	.word	0x200007c0

08007420 <OS_task_activate>:
/**
 * @brief The task performs an action when it receives an event from the queue. Call in interrupt handler to get event and dispatch
 * 
 * @param pOS_task Task pointer
 */
void OS_task_activate(uint8_t prio_task) {
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	71fb      	strb	r3, [r7, #7]
    OS_ring_buf_tcb *pQueue = &pri_queue[prio_task - 1];
 800742a:	79fb      	ldrb	r3, [r7, #7]
 800742c:	3b01      	subs	r3, #1
 800742e:	2258      	movs	r2, #88	@ 0x58
 8007430:	fb02 f303 	mul.w	r3, r2, r3
 8007434:	4a2e      	ldr	r2, [pc, #184]	@ (80074f0 <OS_task_activate+0xd0>)
 8007436:	4413      	add	r3, r2
 8007438:	617b      	str	r3, [r7, #20]
    
    if (pQueue->nUsed == 0) { /* don't have tcb */
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	78db      	ldrb	r3, [r3, #3]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d050      	beq.n	80074e4 <OS_task_activate+0xc4>
        return;
    }
    
    uint8_t index = pQueue->tail_index;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	74fb      	strb	r3, [r7, #19]
    if (pQueue->tail_index == 0) {
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	785b      	ldrb	r3, [r3, #1]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d103      	bne.n	8007458 <OS_task_activate+0x38>
        pQueue->tail_index = OS_TASK_PER_PRI - 1; /* wrap around */
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2209      	movs	r2, #9
 8007454:	705a      	strb	r2, [r3, #1]
 8007456:	e005      	b.n	8007464 <OS_task_activate+0x44>
    } else {
        --pQueue->tail_index;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	785b      	ldrb	r3, [r3, #1]
 800745c:	3b01      	subs	r3, #1
 800745e:	b2da      	uxtb	r2, r3
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	705a      	strb	r2, [r3, #1]
    }

    --pQueue->nUsed;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	78db      	ldrb	r3, [r3, #3]
 8007468:	3b01      	subs	r3, #1
 800746a:	b2da      	uxtb	r2, r3
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	70da      	strb	r2, [r3, #3]

    OS_task *pOS_task = pQueue->buf_tcb[index].pOS_task;
 8007470:	7cfb      	ldrb	r3, [r7, #19]
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	4413      	add	r3, r2
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	60fb      	str	r3, [r7, #12]

    /* Check event in queue */
    if (pOS_task->nUsed == 0) { /* don't have event in queue */
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	7bdb      	ldrb	r3, [r3, #15]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d031      	beq.n	80074e8 <OS_task_activate+0xc8>
        return;
    }

    OS_event_t const *e_receive = pQueue->buf_tcb[index].pEvent;
 8007484:	7cfb      	ldrb	r3, [r7, #19]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	4413      	add	r3, r2
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	60bb      	str	r3, [r7, #8]
    if (pOS_task->tail == 0) {
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	7b9b      	ldrb	r3, [r3, #14]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d104      	bne.n	80074a2 <OS_task_activate+0x82>
        pOS_task->tail = pOS_task->end; /* wrap around */
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	7b1a      	ldrb	r2, [r3, #12]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	739a      	strb	r2, [r3, #14]
 80074a0:	e005      	b.n	80074ae <OS_task_activate+0x8e>
    } else {
        --pOS_task->tail;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	7b9b      	ldrb	r3, [r3, #14]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	739a      	strb	r2, [r3, #14]
    }
    OS_PORT_CRIT_ENTRY();
 80074ae:	b672      	cpsid	i
    if (--pOS_task->nUsed > 0) { /* check have any event in queue */
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	7bdb      	ldrb	r3, [r3, #15]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	73da      	strb	r2, [r3, #15]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	7bdb      	ldrb	r3, [r3, #15]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <OS_task_activate+0xb0>
    	 HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c8:	b25b      	sxtb	r3, r3
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fa fff3 	bl	80024b6 <HAL_NVIC_SetPendingIRQ>
    }
    OS_PORT_CRIT_EXIT();
 80074d0:	b662      	cpsie	i

    /* Dispatch the received event to this task */
    (*pOS_task->dispatch)(pOS_task,e_receive);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	4798      	blx	r3

    free_dynamic_event(e_receive);
 80074dc:	68b8      	ldr	r0, [r7, #8]
 80074de:	f000 f809 	bl	80074f4 <free_dynamic_event>
 80074e2:	e002      	b.n	80074ea <OS_task_activate+0xca>
        return;
 80074e4:	bf00      	nop
 80074e6:	e000      	b.n	80074ea <OS_task_activate+0xca>
        return;
 80074e8:	bf00      	nop
}
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	200006b8 	.word	0x200006b8

080074f4 <free_dynamic_event>:
    
    OS_PORT_CRIT_EXIT();
}


void free_dynamic_event(OS_event_t *e) {
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 80074fc:	b672      	cpsid	i

    uint8_t idx = e - dynamic_event_pool; /* Get index of event */
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a0e      	ldr	r2, [pc, #56]	@ (800753c <free_dynamic_event+0x48>)
 8007502:	1a9b      	subs	r3, r3, r2
 8007504:	10db      	asrs	r3, r3, #3
 8007506:	4a0e      	ldr	r2, [pc, #56]	@ (8007540 <free_dynamic_event+0x4c>)
 8007508:	fb02 f303 	mul.w	r3, r2, r3
 800750c:	73fb      	strb	r3, [r7, #15]
//    free(e->data); /* free allocated memory */
    if (idx > 0 && idx < OS_EVT_POOL_SIZE) {
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00c      	beq.n	800752e <free_dynamic_event+0x3a>
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	2b09      	cmp	r3, #9
 8007518:	d809      	bhi.n	800752e <free_dynamic_event+0x3a>
        dynamic_event_pool_free[dynamic_event_free_stack++] = idx; 
 800751a:	4b0a      	ldr	r3, [pc, #40]	@ (8007544 <free_dynamic_event+0x50>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	b2d1      	uxtb	r1, r2
 8007522:	4a08      	ldr	r2, [pc, #32]	@ (8007544 <free_dynamic_event+0x50>)
 8007524:	7011      	strb	r1, [r2, #0]
 8007526:	4619      	mov	r1, r3
 8007528:	4a07      	ldr	r2, [pc, #28]	@ (8007548 <free_dynamic_event+0x54>)
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	5453      	strb	r3, [r2, r1]
    }

    OS_PORT_CRIT_EXIT();
 800752e:	b662      	cpsie	i
}
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	200007c4 	.word	0x200007c4
 8007540:	38e38e39 	.word	0x38e38e39
 8007544:	20000a9e 	.word	0x20000a9e
 8007548:	20000a94 	.word	0x20000a94

0800754c <get_dynamic_event>:

OS_event_t *get_dynamic_event(void) {
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 8007552:	b672      	cpsid	i
    
    if (dynamic_event_free_stack == 0) return NULL; /* full */
 8007554:	4b0f      	ldr	r3, [pc, #60]	@ (8007594 <get_dynamic_event+0x48>)
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <get_dynamic_event+0x14>
 800755c:	2300      	movs	r3, #0
 800755e:	e013      	b.n	8007588 <get_dynamic_event+0x3c>
    uint8_t idx = dynamic_event_pool_free[--dynamic_event_free_stack]; /* Get index in free */
 8007560:	4b0c      	ldr	r3, [pc, #48]	@ (8007594 <get_dynamic_event+0x48>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	3b01      	subs	r3, #1
 8007566:	b2da      	uxtb	r2, r3
 8007568:	4b0a      	ldr	r3, [pc, #40]	@ (8007594 <get_dynamic_event+0x48>)
 800756a:	701a      	strb	r2, [r3, #0]
 800756c:	4b09      	ldr	r3, [pc, #36]	@ (8007594 <get_dynamic_event+0x48>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	461a      	mov	r2, r3
 8007572:	4b09      	ldr	r3, [pc, #36]	@ (8007598 <get_dynamic_event+0x4c>)
 8007574:	5c9b      	ldrb	r3, [r3, r2]
 8007576:	71fb      	strb	r3, [r7, #7]
    
    OS_PORT_CRIT_EXIT();
 8007578:	b662      	cpsie	i
    return &dynamic_event_pool[idx];
 800757a:	79fa      	ldrb	r2, [r7, #7]
 800757c:	4613      	mov	r3, r2
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	4413      	add	r3, r2
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	4a05      	ldr	r2, [pc, #20]	@ (800759c <get_dynamic_event+0x50>)
 8007586:	4413      	add	r3, r2
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	20000a9e 	.word	0x20000a9e
 8007598:	20000a94 	.word	0x20000a94
 800759c:	200007c4 	.word	0x200007c4

080075a0 <set_data_dynamic_event>:

void set_data_dynamic_event(OS_event_t *e, uint8_t *data, uint32_t len) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
    if (len != 0) {
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00a      	beq.n	80075c8 <set_data_dynamic_event+0x28>
        e->len = len;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	645a      	str	r2, [r3, #68]	@ 0x44
        memcpy(e->data,data,len);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3302      	adds	r3, #2
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f002 f824 	bl	800960e <memcpy>
    } else {
        e->len = len;
        memset(e->data, 0, sizeof(e->data));
    }
}
 80075c6:	e009      	b.n	80075dc <set_data_dynamic_event+0x3c>
        e->len = len;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	645a      	str	r2, [r3, #68]	@ 0x44
        memset(e->data, 0, sizeof(e->data));
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3302      	adds	r3, #2
 80075d2:	2240      	movs	r2, #64	@ 0x40
 80075d4:	2100      	movs	r1, #0
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 ff36 	bl	8009448 <memset>
}
 80075dc:	bf00      	nop
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <set_sig_dynamic_event>:

void set_sig_dynamic_event(OS_event_t *e, uint8_t sig) {
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
    e->sig = sig;
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	801a      	strh	r2, [r3, #0]
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr

08007602 <atof>:
 8007602:	2100      	movs	r1, #0
 8007604:	f000 bebe 	b.w	8008384 <strtod>

08007608 <malloc>:
 8007608:	4b02      	ldr	r3, [pc, #8]	@ (8007614 <malloc+0xc>)
 800760a:	4601      	mov	r1, r0
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	f000 b82d 	b.w	800766c <_malloc_r>
 8007612:	bf00      	nop
 8007614:	200001bc 	.word	0x200001bc

08007618 <free>:
 8007618:	4b02      	ldr	r3, [pc, #8]	@ (8007624 <free+0xc>)
 800761a:	4601      	mov	r1, r0
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	f002 be6b 	b.w	800a2f8 <_free_r>
 8007622:	bf00      	nop
 8007624:	200001bc 	.word	0x200001bc

08007628 <sbrk_aligned>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	4e0f      	ldr	r6, [pc, #60]	@ (8007668 <sbrk_aligned+0x40>)
 800762c:	460c      	mov	r4, r1
 800762e:	6831      	ldr	r1, [r6, #0]
 8007630:	4605      	mov	r5, r0
 8007632:	b911      	cbnz	r1, 800763a <sbrk_aligned+0x12>
 8007634:	f001 ff86 	bl	8009544 <_sbrk_r>
 8007638:	6030      	str	r0, [r6, #0]
 800763a:	4621      	mov	r1, r4
 800763c:	4628      	mov	r0, r5
 800763e:	f001 ff81 	bl	8009544 <_sbrk_r>
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	d103      	bne.n	800764e <sbrk_aligned+0x26>
 8007646:	f04f 34ff 	mov.w	r4, #4294967295
 800764a:	4620      	mov	r0, r4
 800764c:	bd70      	pop	{r4, r5, r6, pc}
 800764e:	1cc4      	adds	r4, r0, #3
 8007650:	f024 0403 	bic.w	r4, r4, #3
 8007654:	42a0      	cmp	r0, r4
 8007656:	d0f8      	beq.n	800764a <sbrk_aligned+0x22>
 8007658:	1a21      	subs	r1, r4, r0
 800765a:	4628      	mov	r0, r5
 800765c:	f001 ff72 	bl	8009544 <_sbrk_r>
 8007660:	3001      	adds	r0, #1
 8007662:	d1f2      	bne.n	800764a <sbrk_aligned+0x22>
 8007664:	e7ef      	b.n	8007646 <sbrk_aligned+0x1e>
 8007666:	bf00      	nop
 8007668:	20000aa0 	.word	0x20000aa0

0800766c <_malloc_r>:
 800766c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007670:	1ccd      	adds	r5, r1, #3
 8007672:	f025 0503 	bic.w	r5, r5, #3
 8007676:	3508      	adds	r5, #8
 8007678:	2d0c      	cmp	r5, #12
 800767a:	bf38      	it	cc
 800767c:	250c      	movcc	r5, #12
 800767e:	2d00      	cmp	r5, #0
 8007680:	4606      	mov	r6, r0
 8007682:	db01      	blt.n	8007688 <_malloc_r+0x1c>
 8007684:	42a9      	cmp	r1, r5
 8007686:	d904      	bls.n	8007692 <_malloc_r+0x26>
 8007688:	230c      	movs	r3, #12
 800768a:	6033      	str	r3, [r6, #0]
 800768c:	2000      	movs	r0, #0
 800768e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007768 <_malloc_r+0xfc>
 8007696:	f000 f869 	bl	800776c <__malloc_lock>
 800769a:	f8d8 3000 	ldr.w	r3, [r8]
 800769e:	461c      	mov	r4, r3
 80076a0:	bb44      	cbnz	r4, 80076f4 <_malloc_r+0x88>
 80076a2:	4629      	mov	r1, r5
 80076a4:	4630      	mov	r0, r6
 80076a6:	f7ff ffbf 	bl	8007628 <sbrk_aligned>
 80076aa:	1c43      	adds	r3, r0, #1
 80076ac:	4604      	mov	r4, r0
 80076ae:	d158      	bne.n	8007762 <_malloc_r+0xf6>
 80076b0:	f8d8 4000 	ldr.w	r4, [r8]
 80076b4:	4627      	mov	r7, r4
 80076b6:	2f00      	cmp	r7, #0
 80076b8:	d143      	bne.n	8007742 <_malloc_r+0xd6>
 80076ba:	2c00      	cmp	r4, #0
 80076bc:	d04b      	beq.n	8007756 <_malloc_r+0xea>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	4639      	mov	r1, r7
 80076c2:	4630      	mov	r0, r6
 80076c4:	eb04 0903 	add.w	r9, r4, r3
 80076c8:	f001 ff3c 	bl	8009544 <_sbrk_r>
 80076cc:	4581      	cmp	r9, r0
 80076ce:	d142      	bne.n	8007756 <_malloc_r+0xea>
 80076d0:	6821      	ldr	r1, [r4, #0]
 80076d2:	4630      	mov	r0, r6
 80076d4:	1a6d      	subs	r5, r5, r1
 80076d6:	4629      	mov	r1, r5
 80076d8:	f7ff ffa6 	bl	8007628 <sbrk_aligned>
 80076dc:	3001      	adds	r0, #1
 80076de:	d03a      	beq.n	8007756 <_malloc_r+0xea>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	442b      	add	r3, r5
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	f8d8 3000 	ldr.w	r3, [r8]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	bb62      	cbnz	r2, 8007748 <_malloc_r+0xdc>
 80076ee:	f8c8 7000 	str.w	r7, [r8]
 80076f2:	e00f      	b.n	8007714 <_malloc_r+0xa8>
 80076f4:	6822      	ldr	r2, [r4, #0]
 80076f6:	1b52      	subs	r2, r2, r5
 80076f8:	d420      	bmi.n	800773c <_malloc_r+0xd0>
 80076fa:	2a0b      	cmp	r2, #11
 80076fc:	d917      	bls.n	800772e <_malloc_r+0xc2>
 80076fe:	1961      	adds	r1, r4, r5
 8007700:	42a3      	cmp	r3, r4
 8007702:	6025      	str	r5, [r4, #0]
 8007704:	bf18      	it	ne
 8007706:	6059      	strne	r1, [r3, #4]
 8007708:	6863      	ldr	r3, [r4, #4]
 800770a:	bf08      	it	eq
 800770c:	f8c8 1000 	streq.w	r1, [r8]
 8007710:	5162      	str	r2, [r4, r5]
 8007712:	604b      	str	r3, [r1, #4]
 8007714:	4630      	mov	r0, r6
 8007716:	f000 f82f 	bl	8007778 <__malloc_unlock>
 800771a:	f104 000b 	add.w	r0, r4, #11
 800771e:	1d23      	adds	r3, r4, #4
 8007720:	f020 0007 	bic.w	r0, r0, #7
 8007724:	1ac2      	subs	r2, r0, r3
 8007726:	bf1c      	itt	ne
 8007728:	1a1b      	subne	r3, r3, r0
 800772a:	50a3      	strne	r3, [r4, r2]
 800772c:	e7af      	b.n	800768e <_malloc_r+0x22>
 800772e:	6862      	ldr	r2, [r4, #4]
 8007730:	42a3      	cmp	r3, r4
 8007732:	bf0c      	ite	eq
 8007734:	f8c8 2000 	streq.w	r2, [r8]
 8007738:	605a      	strne	r2, [r3, #4]
 800773a:	e7eb      	b.n	8007714 <_malloc_r+0xa8>
 800773c:	4623      	mov	r3, r4
 800773e:	6864      	ldr	r4, [r4, #4]
 8007740:	e7ae      	b.n	80076a0 <_malloc_r+0x34>
 8007742:	463c      	mov	r4, r7
 8007744:	687f      	ldr	r7, [r7, #4]
 8007746:	e7b6      	b.n	80076b6 <_malloc_r+0x4a>
 8007748:	461a      	mov	r2, r3
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	42a3      	cmp	r3, r4
 800774e:	d1fb      	bne.n	8007748 <_malloc_r+0xdc>
 8007750:	2300      	movs	r3, #0
 8007752:	6053      	str	r3, [r2, #4]
 8007754:	e7de      	b.n	8007714 <_malloc_r+0xa8>
 8007756:	230c      	movs	r3, #12
 8007758:	4630      	mov	r0, r6
 800775a:	6033      	str	r3, [r6, #0]
 800775c:	f000 f80c 	bl	8007778 <__malloc_unlock>
 8007760:	e794      	b.n	800768c <_malloc_r+0x20>
 8007762:	6005      	str	r5, [r0, #0]
 8007764:	e7d6      	b.n	8007714 <_malloc_r+0xa8>
 8007766:	bf00      	nop
 8007768:	20000aa4 	.word	0x20000aa4

0800776c <__malloc_lock>:
 800776c:	4801      	ldr	r0, [pc, #4]	@ (8007774 <__malloc_lock+0x8>)
 800776e:	f001 bf36 	b.w	80095de <__retarget_lock_acquire_recursive>
 8007772:	bf00      	nop
 8007774:	20000be8 	.word	0x20000be8

08007778 <__malloc_unlock>:
 8007778:	4801      	ldr	r0, [pc, #4]	@ (8007780 <__malloc_unlock+0x8>)
 800777a:	f001 bf31 	b.w	80095e0 <__retarget_lock_release_recursive>
 800777e:	bf00      	nop
 8007780:	20000be8 	.word	0x20000be8

08007784 <sulp>:
 8007784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007788:	460f      	mov	r7, r1
 800778a:	4690      	mov	r8, r2
 800778c:	f003 fcb4 	bl	800b0f8 <__ulp>
 8007790:	4604      	mov	r4, r0
 8007792:	460d      	mov	r5, r1
 8007794:	f1b8 0f00 	cmp.w	r8, #0
 8007798:	d011      	beq.n	80077be <sulp+0x3a>
 800779a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800779e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	dd0b      	ble.n	80077be <sulp+0x3a>
 80077a6:	2400      	movs	r4, #0
 80077a8:	051b      	lsls	r3, r3, #20
 80077aa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80077ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80077b2:	4622      	mov	r2, r4
 80077b4:	462b      	mov	r3, r5
 80077b6:	f7f8 fe99 	bl	80004ec <__aeabi_dmul>
 80077ba:	4604      	mov	r4, r0
 80077bc:	460d      	mov	r5, r1
 80077be:	4620      	mov	r0, r4
 80077c0:	4629      	mov	r1, r5
 80077c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080077c8 <_strtod_l>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	b09f      	sub	sp, #124	@ 0x7c
 80077ce:	9217      	str	r2, [sp, #92]	@ 0x5c
 80077d0:	2200      	movs	r2, #0
 80077d2:	460c      	mov	r4, r1
 80077d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80077d6:	f04f 0a00 	mov.w	sl, #0
 80077da:	f04f 0b00 	mov.w	fp, #0
 80077de:	460a      	mov	r2, r1
 80077e0:	9005      	str	r0, [sp, #20]
 80077e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80077e4:	7811      	ldrb	r1, [r2, #0]
 80077e6:	292b      	cmp	r1, #43	@ 0x2b
 80077e8:	d048      	beq.n	800787c <_strtod_l+0xb4>
 80077ea:	d836      	bhi.n	800785a <_strtod_l+0x92>
 80077ec:	290d      	cmp	r1, #13
 80077ee:	d830      	bhi.n	8007852 <_strtod_l+0x8a>
 80077f0:	2908      	cmp	r1, #8
 80077f2:	d830      	bhi.n	8007856 <_strtod_l+0x8e>
 80077f4:	2900      	cmp	r1, #0
 80077f6:	d039      	beq.n	800786c <_strtod_l+0xa4>
 80077f8:	2200      	movs	r2, #0
 80077fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80077fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80077fe:	782a      	ldrb	r2, [r5, #0]
 8007800:	2a30      	cmp	r2, #48	@ 0x30
 8007802:	f040 80b0 	bne.w	8007966 <_strtod_l+0x19e>
 8007806:	786a      	ldrb	r2, [r5, #1]
 8007808:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800780c:	2a58      	cmp	r2, #88	@ 0x58
 800780e:	d16c      	bne.n	80078ea <_strtod_l+0x122>
 8007810:	9302      	str	r3, [sp, #8]
 8007812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007814:	4a8f      	ldr	r2, [pc, #572]	@ (8007a54 <_strtod_l+0x28c>)
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	ab1a      	add	r3, sp, #104	@ 0x68
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	9805      	ldr	r0, [sp, #20]
 800781e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007820:	a919      	add	r1, sp, #100	@ 0x64
 8007822:	f002 fe19 	bl	800a458 <__gethex>
 8007826:	f010 060f 	ands.w	r6, r0, #15
 800782a:	4604      	mov	r4, r0
 800782c:	d005      	beq.n	800783a <_strtod_l+0x72>
 800782e:	2e06      	cmp	r6, #6
 8007830:	d126      	bne.n	8007880 <_strtod_l+0xb8>
 8007832:	2300      	movs	r3, #0
 8007834:	3501      	adds	r5, #1
 8007836:	9519      	str	r5, [sp, #100]	@ 0x64
 8007838:	930e      	str	r3, [sp, #56]	@ 0x38
 800783a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800783c:	2b00      	cmp	r3, #0
 800783e:	f040 8582 	bne.w	8008346 <_strtod_l+0xb7e>
 8007842:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007844:	b1bb      	cbz	r3, 8007876 <_strtod_l+0xae>
 8007846:	4650      	mov	r0, sl
 8007848:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800784c:	b01f      	add	sp, #124	@ 0x7c
 800784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007852:	2920      	cmp	r1, #32
 8007854:	d1d0      	bne.n	80077f8 <_strtod_l+0x30>
 8007856:	3201      	adds	r2, #1
 8007858:	e7c3      	b.n	80077e2 <_strtod_l+0x1a>
 800785a:	292d      	cmp	r1, #45	@ 0x2d
 800785c:	d1cc      	bne.n	80077f8 <_strtod_l+0x30>
 800785e:	2101      	movs	r1, #1
 8007860:	910e      	str	r1, [sp, #56]	@ 0x38
 8007862:	1c51      	adds	r1, r2, #1
 8007864:	9119      	str	r1, [sp, #100]	@ 0x64
 8007866:	7852      	ldrb	r2, [r2, #1]
 8007868:	2a00      	cmp	r2, #0
 800786a:	d1c7      	bne.n	80077fc <_strtod_l+0x34>
 800786c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800786e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007870:	2b00      	cmp	r3, #0
 8007872:	f040 8566 	bne.w	8008342 <_strtod_l+0xb7a>
 8007876:	4650      	mov	r0, sl
 8007878:	4659      	mov	r1, fp
 800787a:	e7e7      	b.n	800784c <_strtod_l+0x84>
 800787c:	2100      	movs	r1, #0
 800787e:	e7ef      	b.n	8007860 <_strtod_l+0x98>
 8007880:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007882:	b13a      	cbz	r2, 8007894 <_strtod_l+0xcc>
 8007884:	2135      	movs	r1, #53	@ 0x35
 8007886:	a81c      	add	r0, sp, #112	@ 0x70
 8007888:	f003 fd26 	bl	800b2d8 <__copybits>
 800788c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800788e:	9805      	ldr	r0, [sp, #20]
 8007890:	f003 f906 	bl	800aaa0 <_Bfree>
 8007894:	3e01      	subs	r6, #1
 8007896:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007898:	2e04      	cmp	r6, #4
 800789a:	d806      	bhi.n	80078aa <_strtod_l+0xe2>
 800789c:	e8df f006 	tbb	[pc, r6]
 80078a0:	201d0314 	.word	0x201d0314
 80078a4:	14          	.byte	0x14
 80078a5:	00          	.byte	0x00
 80078a6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80078aa:	05e1      	lsls	r1, r4, #23
 80078ac:	bf48      	it	mi
 80078ae:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80078b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078b6:	0d1b      	lsrs	r3, r3, #20
 80078b8:	051b      	lsls	r3, r3, #20
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1bd      	bne.n	800783a <_strtod_l+0x72>
 80078be:	f001 fe63 	bl	8009588 <__errno>
 80078c2:	2322      	movs	r3, #34	@ 0x22
 80078c4:	6003      	str	r3, [r0, #0]
 80078c6:	e7b8      	b.n	800783a <_strtod_l+0x72>
 80078c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80078cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80078d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80078d4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80078d8:	e7e7      	b.n	80078aa <_strtod_l+0xe2>
 80078da:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007a58 <_strtod_l+0x290>
 80078de:	e7e4      	b.n	80078aa <_strtod_l+0xe2>
 80078e0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80078e4:	f04f 3aff 	mov.w	sl, #4294967295
 80078e8:	e7df      	b.n	80078aa <_strtod_l+0xe2>
 80078ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	2b30      	cmp	r3, #48	@ 0x30
 80078f4:	d0f9      	beq.n	80078ea <_strtod_l+0x122>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d09f      	beq.n	800783a <_strtod_l+0x72>
 80078fa:	2301      	movs	r3, #1
 80078fc:	2700      	movs	r7, #0
 80078fe:	220a      	movs	r2, #10
 8007900:	46b9      	mov	r9, r7
 8007902:	9308      	str	r3, [sp, #32]
 8007904:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007906:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007908:	930c      	str	r3, [sp, #48]	@ 0x30
 800790a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800790c:	7805      	ldrb	r5, [r0, #0]
 800790e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007912:	b2d9      	uxtb	r1, r3
 8007914:	2909      	cmp	r1, #9
 8007916:	d928      	bls.n	800796a <_strtod_l+0x1a2>
 8007918:	2201      	movs	r2, #1
 800791a:	4950      	ldr	r1, [pc, #320]	@ (8007a5c <_strtod_l+0x294>)
 800791c:	f001 fdc7 	bl	80094ae <strncmp>
 8007920:	2800      	cmp	r0, #0
 8007922:	d032      	beq.n	800798a <_strtod_l+0x1c2>
 8007924:	2000      	movs	r0, #0
 8007926:	462a      	mov	r2, r5
 8007928:	4603      	mov	r3, r0
 800792a:	464d      	mov	r5, r9
 800792c:	900a      	str	r0, [sp, #40]	@ 0x28
 800792e:	2a65      	cmp	r2, #101	@ 0x65
 8007930:	d001      	beq.n	8007936 <_strtod_l+0x16e>
 8007932:	2a45      	cmp	r2, #69	@ 0x45
 8007934:	d114      	bne.n	8007960 <_strtod_l+0x198>
 8007936:	b91d      	cbnz	r5, 8007940 <_strtod_l+0x178>
 8007938:	9a08      	ldr	r2, [sp, #32]
 800793a:	4302      	orrs	r2, r0
 800793c:	d096      	beq.n	800786c <_strtod_l+0xa4>
 800793e:	2500      	movs	r5, #0
 8007940:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007942:	1c62      	adds	r2, r4, #1
 8007944:	9219      	str	r2, [sp, #100]	@ 0x64
 8007946:	7862      	ldrb	r2, [r4, #1]
 8007948:	2a2b      	cmp	r2, #43	@ 0x2b
 800794a:	d07a      	beq.n	8007a42 <_strtod_l+0x27a>
 800794c:	2a2d      	cmp	r2, #45	@ 0x2d
 800794e:	d07e      	beq.n	8007a4e <_strtod_l+0x286>
 8007950:	f04f 0c00 	mov.w	ip, #0
 8007954:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007958:	2909      	cmp	r1, #9
 800795a:	f240 8085 	bls.w	8007a68 <_strtod_l+0x2a0>
 800795e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007960:	f04f 0800 	mov.w	r8, #0
 8007964:	e0a5      	b.n	8007ab2 <_strtod_l+0x2ea>
 8007966:	2300      	movs	r3, #0
 8007968:	e7c8      	b.n	80078fc <_strtod_l+0x134>
 800796a:	f1b9 0f08 	cmp.w	r9, #8
 800796e:	bfd8      	it	le
 8007970:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007972:	f100 0001 	add.w	r0, r0, #1
 8007976:	bfd6      	itet	le
 8007978:	fb02 3301 	mlale	r3, r2, r1, r3
 800797c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007980:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007982:	f109 0901 	add.w	r9, r9, #1
 8007986:	9019      	str	r0, [sp, #100]	@ 0x64
 8007988:	e7bf      	b.n	800790a <_strtod_l+0x142>
 800798a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007990:	785a      	ldrb	r2, [r3, #1]
 8007992:	f1b9 0f00 	cmp.w	r9, #0
 8007996:	d03b      	beq.n	8007a10 <_strtod_l+0x248>
 8007998:	464d      	mov	r5, r9
 800799a:	900a      	str	r0, [sp, #40]	@ 0x28
 800799c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80079a0:	2b09      	cmp	r3, #9
 80079a2:	d912      	bls.n	80079ca <_strtod_l+0x202>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e7c2      	b.n	800792e <_strtod_l+0x166>
 80079a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079aa:	3001      	adds	r0, #1
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80079b0:	785a      	ldrb	r2, [r3, #1]
 80079b2:	2a30      	cmp	r2, #48	@ 0x30
 80079b4:	d0f8      	beq.n	80079a8 <_strtod_l+0x1e0>
 80079b6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80079ba:	2b08      	cmp	r3, #8
 80079bc:	f200 84c8 	bhi.w	8008350 <_strtod_l+0xb88>
 80079c0:	900a      	str	r0, [sp, #40]	@ 0x28
 80079c2:	2000      	movs	r0, #0
 80079c4:	4605      	mov	r5, r0
 80079c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80079ca:	3a30      	subs	r2, #48	@ 0x30
 80079cc:	f100 0301 	add.w	r3, r0, #1
 80079d0:	d018      	beq.n	8007a04 <_strtod_l+0x23c>
 80079d2:	462e      	mov	r6, r5
 80079d4:	f04f 0e0a 	mov.w	lr, #10
 80079d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079da:	4419      	add	r1, r3
 80079dc:	910a      	str	r1, [sp, #40]	@ 0x28
 80079de:	1c71      	adds	r1, r6, #1
 80079e0:	eba1 0c05 	sub.w	ip, r1, r5
 80079e4:	4563      	cmp	r3, ip
 80079e6:	dc15      	bgt.n	8007a14 <_strtod_l+0x24c>
 80079e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80079ec:	182b      	adds	r3, r5, r0
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	f105 0501 	add.w	r5, r5, #1
 80079f4:	4405      	add	r5, r0
 80079f6:	dc1a      	bgt.n	8007a2e <_strtod_l+0x266>
 80079f8:	230a      	movs	r3, #10
 80079fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079fc:	fb03 2301 	mla	r3, r3, r1, r2
 8007a00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a02:	2300      	movs	r3, #0
 8007a04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a06:	4618      	mov	r0, r3
 8007a08:	1c51      	adds	r1, r2, #1
 8007a0a:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a0c:	7852      	ldrb	r2, [r2, #1]
 8007a0e:	e7c5      	b.n	800799c <_strtod_l+0x1d4>
 8007a10:	4648      	mov	r0, r9
 8007a12:	e7ce      	b.n	80079b2 <_strtod_l+0x1ea>
 8007a14:	2e08      	cmp	r6, #8
 8007a16:	dc05      	bgt.n	8007a24 <_strtod_l+0x25c>
 8007a18:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007a1a:	fb0e f606 	mul.w	r6, lr, r6
 8007a1e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007a20:	460e      	mov	r6, r1
 8007a22:	e7dc      	b.n	80079de <_strtod_l+0x216>
 8007a24:	2910      	cmp	r1, #16
 8007a26:	bfd8      	it	le
 8007a28:	fb0e f707 	mulle.w	r7, lr, r7
 8007a2c:	e7f8      	b.n	8007a20 <_strtod_l+0x258>
 8007a2e:	2b0f      	cmp	r3, #15
 8007a30:	bfdc      	itt	le
 8007a32:	230a      	movle	r3, #10
 8007a34:	fb03 2707 	mlale	r7, r3, r7, r2
 8007a38:	e7e3      	b.n	8007a02 <_strtod_l+0x23a>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e77a      	b.n	8007938 <_strtod_l+0x170>
 8007a42:	f04f 0c00 	mov.w	ip, #0
 8007a46:	1ca2      	adds	r2, r4, #2
 8007a48:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a4a:	78a2      	ldrb	r2, [r4, #2]
 8007a4c:	e782      	b.n	8007954 <_strtod_l+0x18c>
 8007a4e:	f04f 0c01 	mov.w	ip, #1
 8007a52:	e7f8      	b.n	8007a46 <_strtod_l+0x27e>
 8007a54:	0800c398 	.word	0x0800c398
 8007a58:	7ff00000 	.word	0x7ff00000
 8007a5c:	0800c1ac 	.word	0x0800c1ac
 8007a60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a62:	1c51      	adds	r1, r2, #1
 8007a64:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a66:	7852      	ldrb	r2, [r2, #1]
 8007a68:	2a30      	cmp	r2, #48	@ 0x30
 8007a6a:	d0f9      	beq.n	8007a60 <_strtod_l+0x298>
 8007a6c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007a70:	2908      	cmp	r1, #8
 8007a72:	f63f af75 	bhi.w	8007960 <_strtod_l+0x198>
 8007a76:	f04f 080a 	mov.w	r8, #10
 8007a7a:	3a30      	subs	r2, #48	@ 0x30
 8007a7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a80:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007a82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a84:	1c56      	adds	r6, r2, #1
 8007a86:	9619      	str	r6, [sp, #100]	@ 0x64
 8007a88:	7852      	ldrb	r2, [r2, #1]
 8007a8a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007a8e:	f1be 0f09 	cmp.w	lr, #9
 8007a92:	d939      	bls.n	8007b08 <_strtod_l+0x340>
 8007a94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007a96:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007a9a:	1a76      	subs	r6, r6, r1
 8007a9c:	2e08      	cmp	r6, #8
 8007a9e:	dc03      	bgt.n	8007aa8 <_strtod_l+0x2e0>
 8007aa0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007aa2:	4588      	cmp	r8, r1
 8007aa4:	bfa8      	it	ge
 8007aa6:	4688      	movge	r8, r1
 8007aa8:	f1bc 0f00 	cmp.w	ip, #0
 8007aac:	d001      	beq.n	8007ab2 <_strtod_l+0x2ea>
 8007aae:	f1c8 0800 	rsb	r8, r8, #0
 8007ab2:	2d00      	cmp	r5, #0
 8007ab4:	d14e      	bne.n	8007b54 <_strtod_l+0x38c>
 8007ab6:	9908      	ldr	r1, [sp, #32]
 8007ab8:	4308      	orrs	r0, r1
 8007aba:	f47f aebe 	bne.w	800783a <_strtod_l+0x72>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f47f aed4 	bne.w	800786c <_strtod_l+0xa4>
 8007ac4:	2a69      	cmp	r2, #105	@ 0x69
 8007ac6:	d028      	beq.n	8007b1a <_strtod_l+0x352>
 8007ac8:	dc25      	bgt.n	8007b16 <_strtod_l+0x34e>
 8007aca:	2a49      	cmp	r2, #73	@ 0x49
 8007acc:	d025      	beq.n	8007b1a <_strtod_l+0x352>
 8007ace:	2a4e      	cmp	r2, #78	@ 0x4e
 8007ad0:	f47f aecc 	bne.w	800786c <_strtod_l+0xa4>
 8007ad4:	4999      	ldr	r1, [pc, #612]	@ (8007d3c <_strtod_l+0x574>)
 8007ad6:	a819      	add	r0, sp, #100	@ 0x64
 8007ad8:	f002 fee0 	bl	800a89c <__match>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	f43f aec5 	beq.w	800786c <_strtod_l+0xa4>
 8007ae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	2b28      	cmp	r3, #40	@ 0x28
 8007ae8:	d12e      	bne.n	8007b48 <_strtod_l+0x380>
 8007aea:	4995      	ldr	r1, [pc, #596]	@ (8007d40 <_strtod_l+0x578>)
 8007aec:	aa1c      	add	r2, sp, #112	@ 0x70
 8007aee:	a819      	add	r0, sp, #100	@ 0x64
 8007af0:	f002 fee8 	bl	800a8c4 <__hexnan>
 8007af4:	2805      	cmp	r0, #5
 8007af6:	d127      	bne.n	8007b48 <_strtod_l+0x380>
 8007af8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007afa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007afe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007b02:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007b06:	e698      	b.n	800783a <_strtod_l+0x72>
 8007b08:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b0a:	fb08 2101 	mla	r1, r8, r1, r2
 8007b0e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b14:	e7b5      	b.n	8007a82 <_strtod_l+0x2ba>
 8007b16:	2a6e      	cmp	r2, #110	@ 0x6e
 8007b18:	e7da      	b.n	8007ad0 <_strtod_l+0x308>
 8007b1a:	498a      	ldr	r1, [pc, #552]	@ (8007d44 <_strtod_l+0x57c>)
 8007b1c:	a819      	add	r0, sp, #100	@ 0x64
 8007b1e:	f002 febd 	bl	800a89c <__match>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	f43f aea2 	beq.w	800786c <_strtod_l+0xa4>
 8007b28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b2a:	4987      	ldr	r1, [pc, #540]	@ (8007d48 <_strtod_l+0x580>)
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	a819      	add	r0, sp, #100	@ 0x64
 8007b30:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b32:	f002 feb3 	bl	800a89c <__match>
 8007b36:	b910      	cbnz	r0, 8007b3e <_strtod_l+0x376>
 8007b38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b3e:	f04f 0a00 	mov.w	sl, #0
 8007b42:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8007d4c <_strtod_l+0x584>
 8007b46:	e678      	b.n	800783a <_strtod_l+0x72>
 8007b48:	4881      	ldr	r0, [pc, #516]	@ (8007d50 <_strtod_l+0x588>)
 8007b4a:	f001 fd6f 	bl	800962c <nan>
 8007b4e:	4682      	mov	sl, r0
 8007b50:	468b      	mov	fp, r1
 8007b52:	e672      	b.n	800783a <_strtod_l+0x72>
 8007b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b56:	f1b9 0f00 	cmp.w	r9, #0
 8007b5a:	bf08      	it	eq
 8007b5c:	46a9      	moveq	r9, r5
 8007b5e:	eba8 0303 	sub.w	r3, r8, r3
 8007b62:	2d10      	cmp	r5, #16
 8007b64:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007b66:	462c      	mov	r4, r5
 8007b68:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b6a:	bfa8      	it	ge
 8007b6c:	2410      	movge	r4, #16
 8007b6e:	f7f8 fc43 	bl	80003f8 <__aeabi_ui2d>
 8007b72:	2d09      	cmp	r5, #9
 8007b74:	4682      	mov	sl, r0
 8007b76:	468b      	mov	fp, r1
 8007b78:	dc11      	bgt.n	8007b9e <_strtod_l+0x3d6>
 8007b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f43f ae5c 	beq.w	800783a <_strtod_l+0x72>
 8007b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b84:	dd76      	ble.n	8007c74 <_strtod_l+0x4ac>
 8007b86:	2b16      	cmp	r3, #22
 8007b88:	dc5d      	bgt.n	8007c46 <_strtod_l+0x47e>
 8007b8a:	4972      	ldr	r1, [pc, #456]	@ (8007d54 <_strtod_l+0x58c>)
 8007b8c:	4652      	mov	r2, sl
 8007b8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b92:	465b      	mov	r3, fp
 8007b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b98:	f7f8 fca8 	bl	80004ec <__aeabi_dmul>
 8007b9c:	e7d7      	b.n	8007b4e <_strtod_l+0x386>
 8007b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8007d54 <_strtod_l+0x58c>)
 8007ba0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ba4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007ba8:	f7f8 fca0 	bl	80004ec <__aeabi_dmul>
 8007bac:	4682      	mov	sl, r0
 8007bae:	4638      	mov	r0, r7
 8007bb0:	468b      	mov	fp, r1
 8007bb2:	f7f8 fc21 	bl	80003f8 <__aeabi_ui2d>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4650      	mov	r0, sl
 8007bbc:	4659      	mov	r1, fp
 8007bbe:	f7f8 fadf 	bl	8000180 <__adddf3>
 8007bc2:	2d0f      	cmp	r5, #15
 8007bc4:	4682      	mov	sl, r0
 8007bc6:	468b      	mov	fp, r1
 8007bc8:	ddd7      	ble.n	8007b7a <_strtod_l+0x3b2>
 8007bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bcc:	1b2c      	subs	r4, r5, r4
 8007bce:	441c      	add	r4, r3
 8007bd0:	2c00      	cmp	r4, #0
 8007bd2:	f340 8093 	ble.w	8007cfc <_strtod_l+0x534>
 8007bd6:	f014 030f 	ands.w	r3, r4, #15
 8007bda:	d00a      	beq.n	8007bf2 <_strtod_l+0x42a>
 8007bdc:	495d      	ldr	r1, [pc, #372]	@ (8007d54 <_strtod_l+0x58c>)
 8007bde:	4652      	mov	r2, sl
 8007be0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007be8:	465b      	mov	r3, fp
 8007bea:	f7f8 fc7f 	bl	80004ec <__aeabi_dmul>
 8007bee:	4682      	mov	sl, r0
 8007bf0:	468b      	mov	fp, r1
 8007bf2:	f034 040f 	bics.w	r4, r4, #15
 8007bf6:	d073      	beq.n	8007ce0 <_strtod_l+0x518>
 8007bf8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007bfc:	dd49      	ble.n	8007c92 <_strtod_l+0x4ca>
 8007bfe:	2400      	movs	r4, #0
 8007c00:	46a0      	mov	r8, r4
 8007c02:	46a1      	mov	r9, r4
 8007c04:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c06:	2322      	movs	r3, #34	@ 0x22
 8007c08:	f04f 0a00 	mov.w	sl, #0
 8007c0c:	9a05      	ldr	r2, [sp, #20]
 8007c0e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8007d4c <_strtod_l+0x584>
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f43f ae0f 	beq.w	800783a <_strtod_l+0x72>
 8007c1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c1e:	9805      	ldr	r0, [sp, #20]
 8007c20:	f002 ff3e 	bl	800aaa0 <_Bfree>
 8007c24:	4649      	mov	r1, r9
 8007c26:	9805      	ldr	r0, [sp, #20]
 8007c28:	f002 ff3a 	bl	800aaa0 <_Bfree>
 8007c2c:	4641      	mov	r1, r8
 8007c2e:	9805      	ldr	r0, [sp, #20]
 8007c30:	f002 ff36 	bl	800aaa0 <_Bfree>
 8007c34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c36:	9805      	ldr	r0, [sp, #20]
 8007c38:	f002 ff32 	bl	800aaa0 <_Bfree>
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	9805      	ldr	r0, [sp, #20]
 8007c40:	f002 ff2e 	bl	800aaa0 <_Bfree>
 8007c44:	e5f9      	b.n	800783a <_strtod_l+0x72>
 8007c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	dbbc      	blt.n	8007bca <_strtod_l+0x402>
 8007c50:	4c40      	ldr	r4, [pc, #256]	@ (8007d54 <_strtod_l+0x58c>)
 8007c52:	f1c5 050f 	rsb	r5, r5, #15
 8007c56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c5a:	4652      	mov	r2, sl
 8007c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c60:	465b      	mov	r3, fp
 8007c62:	f7f8 fc43 	bl	80004ec <__aeabi_dmul>
 8007c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c68:	1b5d      	subs	r5, r3, r5
 8007c6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c72:	e791      	b.n	8007b98 <_strtod_l+0x3d0>
 8007c74:	3316      	adds	r3, #22
 8007c76:	dba8      	blt.n	8007bca <_strtod_l+0x402>
 8007c78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c7a:	4650      	mov	r0, sl
 8007c7c:	eba3 0808 	sub.w	r8, r3, r8
 8007c80:	4b34      	ldr	r3, [pc, #208]	@ (8007d54 <_strtod_l+0x58c>)
 8007c82:	4659      	mov	r1, fp
 8007c84:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007c88:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007c8c:	f7f8 fd58 	bl	8000740 <__aeabi_ddiv>
 8007c90:	e75d      	b.n	8007b4e <_strtod_l+0x386>
 8007c92:	2300      	movs	r3, #0
 8007c94:	4650      	mov	r0, sl
 8007c96:	4659      	mov	r1, fp
 8007c98:	461e      	mov	r6, r3
 8007c9a:	4f2f      	ldr	r7, [pc, #188]	@ (8007d58 <_strtod_l+0x590>)
 8007c9c:	1124      	asrs	r4, r4, #4
 8007c9e:	2c01      	cmp	r4, #1
 8007ca0:	dc21      	bgt.n	8007ce6 <_strtod_l+0x51e>
 8007ca2:	b10b      	cbz	r3, 8007ca8 <_strtod_l+0x4e0>
 8007ca4:	4682      	mov	sl, r0
 8007ca6:	468b      	mov	fp, r1
 8007ca8:	492b      	ldr	r1, [pc, #172]	@ (8007d58 <_strtod_l+0x590>)
 8007caa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007cae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007cb2:	4652      	mov	r2, sl
 8007cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cb8:	465b      	mov	r3, fp
 8007cba:	f7f8 fc17 	bl	80004ec <__aeabi_dmul>
 8007cbe:	4b23      	ldr	r3, [pc, #140]	@ (8007d4c <_strtod_l+0x584>)
 8007cc0:	460a      	mov	r2, r1
 8007cc2:	400b      	ands	r3, r1
 8007cc4:	4925      	ldr	r1, [pc, #148]	@ (8007d5c <_strtod_l+0x594>)
 8007cc6:	4682      	mov	sl, r0
 8007cc8:	428b      	cmp	r3, r1
 8007cca:	d898      	bhi.n	8007bfe <_strtod_l+0x436>
 8007ccc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007cd0:	428b      	cmp	r3, r1
 8007cd2:	bf86      	itte	hi
 8007cd4:	f04f 3aff 	movhi.w	sl, #4294967295
 8007cd8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8007d60 <_strtod_l+0x598>
 8007cdc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	9308      	str	r3, [sp, #32]
 8007ce4:	e076      	b.n	8007dd4 <_strtod_l+0x60c>
 8007ce6:	07e2      	lsls	r2, r4, #31
 8007ce8:	d504      	bpl.n	8007cf4 <_strtod_l+0x52c>
 8007cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cee:	f7f8 fbfd 	bl	80004ec <__aeabi_dmul>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	3601      	adds	r6, #1
 8007cf6:	1064      	asrs	r4, r4, #1
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	e7d0      	b.n	8007c9e <_strtod_l+0x4d6>
 8007cfc:	d0f0      	beq.n	8007ce0 <_strtod_l+0x518>
 8007cfe:	4264      	negs	r4, r4
 8007d00:	f014 020f 	ands.w	r2, r4, #15
 8007d04:	d00a      	beq.n	8007d1c <_strtod_l+0x554>
 8007d06:	4b13      	ldr	r3, [pc, #76]	@ (8007d54 <_strtod_l+0x58c>)
 8007d08:	4650      	mov	r0, sl
 8007d0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d0e:	4659      	mov	r1, fp
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f7f8 fd14 	bl	8000740 <__aeabi_ddiv>
 8007d18:	4682      	mov	sl, r0
 8007d1a:	468b      	mov	fp, r1
 8007d1c:	1124      	asrs	r4, r4, #4
 8007d1e:	d0df      	beq.n	8007ce0 <_strtod_l+0x518>
 8007d20:	2c1f      	cmp	r4, #31
 8007d22:	dd1f      	ble.n	8007d64 <_strtod_l+0x59c>
 8007d24:	2400      	movs	r4, #0
 8007d26:	46a0      	mov	r8, r4
 8007d28:	46a1      	mov	r9, r4
 8007d2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d2c:	2322      	movs	r3, #34	@ 0x22
 8007d2e:	9a05      	ldr	r2, [sp, #20]
 8007d30:	f04f 0a00 	mov.w	sl, #0
 8007d34:	f04f 0b00 	mov.w	fp, #0
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	e76b      	b.n	8007c14 <_strtod_l+0x44c>
 8007d3c:	0800c1bb 	.word	0x0800c1bb
 8007d40:	0800c384 	.word	0x0800c384
 8007d44:	0800c1b3 	.word	0x0800c1b3
 8007d48:	0800c1f2 	.word	0x0800c1f2
 8007d4c:	7ff00000 	.word	0x7ff00000
 8007d50:	0800c381 	.word	0x0800c381
 8007d54:	0800c410 	.word	0x0800c410
 8007d58:	0800c3e8 	.word	0x0800c3e8
 8007d5c:	7ca00000 	.word	0x7ca00000
 8007d60:	7fefffff 	.word	0x7fefffff
 8007d64:	f014 0310 	ands.w	r3, r4, #16
 8007d68:	bf18      	it	ne
 8007d6a:	236a      	movne	r3, #106	@ 0x6a
 8007d6c:	4650      	mov	r0, sl
 8007d6e:	9308      	str	r3, [sp, #32]
 8007d70:	4659      	mov	r1, fp
 8007d72:	2300      	movs	r3, #0
 8007d74:	4e77      	ldr	r6, [pc, #476]	@ (8007f54 <_strtod_l+0x78c>)
 8007d76:	07e7      	lsls	r7, r4, #31
 8007d78:	d504      	bpl.n	8007d84 <_strtod_l+0x5bc>
 8007d7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d7e:	f7f8 fbb5 	bl	80004ec <__aeabi_dmul>
 8007d82:	2301      	movs	r3, #1
 8007d84:	1064      	asrs	r4, r4, #1
 8007d86:	f106 0608 	add.w	r6, r6, #8
 8007d8a:	d1f4      	bne.n	8007d76 <_strtod_l+0x5ae>
 8007d8c:	b10b      	cbz	r3, 8007d92 <_strtod_l+0x5ca>
 8007d8e:	4682      	mov	sl, r0
 8007d90:	468b      	mov	fp, r1
 8007d92:	9b08      	ldr	r3, [sp, #32]
 8007d94:	b1b3      	cbz	r3, 8007dc4 <_strtod_l+0x5fc>
 8007d96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007d9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	4659      	mov	r1, fp
 8007da2:	dd0f      	ble.n	8007dc4 <_strtod_l+0x5fc>
 8007da4:	2b1f      	cmp	r3, #31
 8007da6:	dd58      	ble.n	8007e5a <_strtod_l+0x692>
 8007da8:	2b34      	cmp	r3, #52	@ 0x34
 8007daa:	bfd8      	it	le
 8007dac:	f04f 33ff 	movle.w	r3, #4294967295
 8007db0:	f04f 0a00 	mov.w	sl, #0
 8007db4:	bfcf      	iteee	gt
 8007db6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007dba:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007dbe:	4093      	lslle	r3, r2
 8007dc0:	ea03 0b01 	andle.w	fp, r3, r1
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	4650      	mov	r0, sl
 8007dca:	4659      	mov	r1, fp
 8007dcc:	f7f8 fdf6 	bl	80009bc <__aeabi_dcmpeq>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d1a7      	bne.n	8007d24 <_strtod_l+0x55c>
 8007dd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007dd6:	464a      	mov	r2, r9
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007ddc:	462b      	mov	r3, r5
 8007dde:	9805      	ldr	r0, [sp, #20]
 8007de0:	f002 fec6 	bl	800ab70 <__s2b>
 8007de4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f43f af09 	beq.w	8007bfe <_strtod_l+0x436>
 8007dec:	2400      	movs	r4, #0
 8007dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007df0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007df2:	2a00      	cmp	r2, #0
 8007df4:	eba3 0308 	sub.w	r3, r3, r8
 8007df8:	bfa8      	it	ge
 8007dfa:	2300      	movge	r3, #0
 8007dfc:	46a0      	mov	r8, r4
 8007dfe:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e00:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007e04:	9316      	str	r3, [sp, #88]	@ 0x58
 8007e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e08:	9805      	ldr	r0, [sp, #20]
 8007e0a:	6859      	ldr	r1, [r3, #4]
 8007e0c:	f002 fe08 	bl	800aa20 <_Balloc>
 8007e10:	4681      	mov	r9, r0
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f43f aef7 	beq.w	8007c06 <_strtod_l+0x43e>
 8007e18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e1a:	300c      	adds	r0, #12
 8007e1c:	691a      	ldr	r2, [r3, #16]
 8007e1e:	f103 010c 	add.w	r1, r3, #12
 8007e22:	3202      	adds	r2, #2
 8007e24:	0092      	lsls	r2, r2, #2
 8007e26:	f001 fbf2 	bl	800960e <memcpy>
 8007e2a:	ab1c      	add	r3, sp, #112	@ 0x70
 8007e2c:	9301      	str	r3, [sp, #4]
 8007e2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	4652      	mov	r2, sl
 8007e34:	465b      	mov	r3, fp
 8007e36:	9805      	ldr	r0, [sp, #20]
 8007e38:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007e3c:	f003 f9c4 	bl	800b1c8 <__d2b>
 8007e40:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e42:	2800      	cmp	r0, #0
 8007e44:	f43f aedf 	beq.w	8007c06 <_strtod_l+0x43e>
 8007e48:	2101      	movs	r1, #1
 8007e4a:	9805      	ldr	r0, [sp, #20]
 8007e4c:	f002 ff26 	bl	800ac9c <__i2b>
 8007e50:	4680      	mov	r8, r0
 8007e52:	b948      	cbnz	r0, 8007e68 <_strtod_l+0x6a0>
 8007e54:	f04f 0800 	mov.w	r8, #0
 8007e58:	e6d5      	b.n	8007c06 <_strtod_l+0x43e>
 8007e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e62:	ea03 0a0a 	and.w	sl, r3, sl
 8007e66:	e7ad      	b.n	8007dc4 <_strtod_l+0x5fc>
 8007e68:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007e6a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	bfab      	itete	ge
 8007e70:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007e72:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007e74:	18ef      	addge	r7, r5, r3
 8007e76:	1b5e      	sublt	r6, r3, r5
 8007e78:	9b08      	ldr	r3, [sp, #32]
 8007e7a:	bfa8      	it	ge
 8007e7c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007e7e:	eba5 0503 	sub.w	r5, r5, r3
 8007e82:	4415      	add	r5, r2
 8007e84:	4b34      	ldr	r3, [pc, #208]	@ (8007f58 <_strtod_l+0x790>)
 8007e86:	f105 35ff 	add.w	r5, r5, #4294967295
 8007e8a:	bfb8      	it	lt
 8007e8c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007e8e:	429d      	cmp	r5, r3
 8007e90:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007e94:	da50      	bge.n	8007f38 <_strtod_l+0x770>
 8007e96:	1b5b      	subs	r3, r3, r5
 8007e98:	2b1f      	cmp	r3, #31
 8007e9a:	f04f 0101 	mov.w	r1, #1
 8007e9e:	eba2 0203 	sub.w	r2, r2, r3
 8007ea2:	dc3d      	bgt.n	8007f20 <_strtod_l+0x758>
 8007ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007eaa:	2300      	movs	r3, #0
 8007eac:	9310      	str	r3, [sp, #64]	@ 0x40
 8007eae:	18bd      	adds	r5, r7, r2
 8007eb0:	9b08      	ldr	r3, [sp, #32]
 8007eb2:	42af      	cmp	r7, r5
 8007eb4:	4416      	add	r6, r2
 8007eb6:	441e      	add	r6, r3
 8007eb8:	463b      	mov	r3, r7
 8007eba:	bfa8      	it	ge
 8007ebc:	462b      	movge	r3, r5
 8007ebe:	42b3      	cmp	r3, r6
 8007ec0:	bfa8      	it	ge
 8007ec2:	4633      	movge	r3, r6
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bfc2      	ittt	gt
 8007ec8:	1aed      	subgt	r5, r5, r3
 8007eca:	1af6      	subgt	r6, r6, r3
 8007ecc:	1aff      	subgt	r7, r7, r3
 8007ece:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	dd16      	ble.n	8007f02 <_strtod_l+0x73a>
 8007ed4:	4641      	mov	r1, r8
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	9805      	ldr	r0, [sp, #20]
 8007eda:	f002 ff97 	bl	800ae0c <__pow5mult>
 8007ede:	4680      	mov	r8, r0
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d0b7      	beq.n	8007e54 <_strtod_l+0x68c>
 8007ee4:	4601      	mov	r1, r0
 8007ee6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007ee8:	9805      	ldr	r0, [sp, #20]
 8007eea:	f002 feed 	bl	800acc8 <__multiply>
 8007eee:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f43f ae88 	beq.w	8007c06 <_strtod_l+0x43e>
 8007ef6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ef8:	9805      	ldr	r0, [sp, #20]
 8007efa:	f002 fdd1 	bl	800aaa0 <_Bfree>
 8007efe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f00:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f02:	2d00      	cmp	r5, #0
 8007f04:	dc1d      	bgt.n	8007f42 <_strtod_l+0x77a>
 8007f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dd27      	ble.n	8007f5c <_strtod_l+0x794>
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007f10:	9805      	ldr	r0, [sp, #20]
 8007f12:	f002 ff7b 	bl	800ae0c <__pow5mult>
 8007f16:	4681      	mov	r9, r0
 8007f18:	bb00      	cbnz	r0, 8007f5c <_strtod_l+0x794>
 8007f1a:	f04f 0900 	mov.w	r9, #0
 8007f1e:	e672      	b.n	8007c06 <_strtod_l+0x43e>
 8007f20:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007f24:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007f28:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007f2c:	35e2      	adds	r5, #226	@ 0xe2
 8007f2e:	fa01 f305 	lsl.w	r3, r1, r5
 8007f32:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f34:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007f36:	e7ba      	b.n	8007eae <_strtod_l+0x6e6>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f40:	e7b5      	b.n	8007eae <_strtod_l+0x6e6>
 8007f42:	462a      	mov	r2, r5
 8007f44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f46:	9805      	ldr	r0, [sp, #20]
 8007f48:	f002 ffba 	bl	800aec0 <__lshift>
 8007f4c:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d1d9      	bne.n	8007f06 <_strtod_l+0x73e>
 8007f52:	e658      	b.n	8007c06 <_strtod_l+0x43e>
 8007f54:	0800c3b0 	.word	0x0800c3b0
 8007f58:	fffffc02 	.word	0xfffffc02
 8007f5c:	2e00      	cmp	r6, #0
 8007f5e:	dd07      	ble.n	8007f70 <_strtod_l+0x7a8>
 8007f60:	4649      	mov	r1, r9
 8007f62:	4632      	mov	r2, r6
 8007f64:	9805      	ldr	r0, [sp, #20]
 8007f66:	f002 ffab 	bl	800aec0 <__lshift>
 8007f6a:	4681      	mov	r9, r0
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d0d4      	beq.n	8007f1a <_strtod_l+0x752>
 8007f70:	2f00      	cmp	r7, #0
 8007f72:	dd08      	ble.n	8007f86 <_strtod_l+0x7be>
 8007f74:	4641      	mov	r1, r8
 8007f76:	463a      	mov	r2, r7
 8007f78:	9805      	ldr	r0, [sp, #20]
 8007f7a:	f002 ffa1 	bl	800aec0 <__lshift>
 8007f7e:	4680      	mov	r8, r0
 8007f80:	2800      	cmp	r0, #0
 8007f82:	f43f ae40 	beq.w	8007c06 <_strtod_l+0x43e>
 8007f86:	464a      	mov	r2, r9
 8007f88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f8a:	9805      	ldr	r0, [sp, #20]
 8007f8c:	f003 f820 	bl	800afd0 <__mdiff>
 8007f90:	4604      	mov	r4, r0
 8007f92:	2800      	cmp	r0, #0
 8007f94:	f43f ae37 	beq.w	8007c06 <_strtod_l+0x43e>
 8007f98:	68c3      	ldr	r3, [r0, #12]
 8007f9a:	4641      	mov	r1, r8
 8007f9c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60c3      	str	r3, [r0, #12]
 8007fa2:	f002 fff9 	bl	800af98 <__mcmp>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	da3d      	bge.n	8008026 <_strtod_l+0x85e>
 8007faa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fac:	ea53 030a 	orrs.w	r3, r3, sl
 8007fb0:	d163      	bne.n	800807a <_strtod_l+0x8b2>
 8007fb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d15f      	bne.n	800807a <_strtod_l+0x8b2>
 8007fba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fbe:	0d1b      	lsrs	r3, r3, #20
 8007fc0:	051b      	lsls	r3, r3, #20
 8007fc2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007fc6:	d958      	bls.n	800807a <_strtod_l+0x8b2>
 8007fc8:	6963      	ldr	r3, [r4, #20]
 8007fca:	b913      	cbnz	r3, 8007fd2 <_strtod_l+0x80a>
 8007fcc:	6923      	ldr	r3, [r4, #16]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	dd53      	ble.n	800807a <_strtod_l+0x8b2>
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	9805      	ldr	r0, [sp, #20]
 8007fd8:	f002 ff72 	bl	800aec0 <__lshift>
 8007fdc:	4641      	mov	r1, r8
 8007fde:	4604      	mov	r4, r0
 8007fe0:	f002 ffda 	bl	800af98 <__mcmp>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	dd48      	ble.n	800807a <_strtod_l+0x8b2>
 8007fe8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fec:	9a08      	ldr	r2, [sp, #32]
 8007fee:	0d1b      	lsrs	r3, r3, #20
 8007ff0:	051b      	lsls	r3, r3, #20
 8007ff2:	2a00      	cmp	r2, #0
 8007ff4:	d062      	beq.n	80080bc <_strtod_l+0x8f4>
 8007ff6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007ffa:	d85f      	bhi.n	80080bc <_strtod_l+0x8f4>
 8007ffc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008000:	f67f ae94 	bls.w	8007d2c <_strtod_l+0x564>
 8008004:	4650      	mov	r0, sl
 8008006:	4659      	mov	r1, fp
 8008008:	4ba3      	ldr	r3, [pc, #652]	@ (8008298 <_strtod_l+0xad0>)
 800800a:	2200      	movs	r2, #0
 800800c:	f7f8 fa6e 	bl	80004ec <__aeabi_dmul>
 8008010:	4ba2      	ldr	r3, [pc, #648]	@ (800829c <_strtod_l+0xad4>)
 8008012:	4682      	mov	sl, r0
 8008014:	400b      	ands	r3, r1
 8008016:	468b      	mov	fp, r1
 8008018:	2b00      	cmp	r3, #0
 800801a:	f47f adff 	bne.w	8007c1c <_strtod_l+0x454>
 800801e:	2322      	movs	r3, #34	@ 0x22
 8008020:	9a05      	ldr	r2, [sp, #20]
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	e5fa      	b.n	8007c1c <_strtod_l+0x454>
 8008026:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800802a:	d165      	bne.n	80080f8 <_strtod_l+0x930>
 800802c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800802e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008032:	b35a      	cbz	r2, 800808c <_strtod_l+0x8c4>
 8008034:	4a9a      	ldr	r2, [pc, #616]	@ (80082a0 <_strtod_l+0xad8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d12b      	bne.n	8008092 <_strtod_l+0x8ca>
 800803a:	9b08      	ldr	r3, [sp, #32]
 800803c:	4651      	mov	r1, sl
 800803e:	b303      	cbz	r3, 8008082 <_strtod_l+0x8ba>
 8008040:	465a      	mov	r2, fp
 8008042:	4b96      	ldr	r3, [pc, #600]	@ (800829c <_strtod_l+0xad4>)
 8008044:	4013      	ands	r3, r2
 8008046:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800804a:	f04f 32ff 	mov.w	r2, #4294967295
 800804e:	d81b      	bhi.n	8008088 <_strtod_l+0x8c0>
 8008050:	0d1b      	lsrs	r3, r3, #20
 8008052:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008056:	fa02 f303 	lsl.w	r3, r2, r3
 800805a:	4299      	cmp	r1, r3
 800805c:	d119      	bne.n	8008092 <_strtod_l+0x8ca>
 800805e:	4b91      	ldr	r3, [pc, #580]	@ (80082a4 <_strtod_l+0xadc>)
 8008060:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008062:	429a      	cmp	r2, r3
 8008064:	d102      	bne.n	800806c <_strtod_l+0x8a4>
 8008066:	3101      	adds	r1, #1
 8008068:	f43f adcd 	beq.w	8007c06 <_strtod_l+0x43e>
 800806c:	f04f 0a00 	mov.w	sl, #0
 8008070:	4b8a      	ldr	r3, [pc, #552]	@ (800829c <_strtod_l+0xad4>)
 8008072:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008074:	401a      	ands	r2, r3
 8008076:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800807a:	9b08      	ldr	r3, [sp, #32]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1c1      	bne.n	8008004 <_strtod_l+0x83c>
 8008080:	e5cc      	b.n	8007c1c <_strtod_l+0x454>
 8008082:	f04f 33ff 	mov.w	r3, #4294967295
 8008086:	e7e8      	b.n	800805a <_strtod_l+0x892>
 8008088:	4613      	mov	r3, r2
 800808a:	e7e6      	b.n	800805a <_strtod_l+0x892>
 800808c:	ea53 030a 	orrs.w	r3, r3, sl
 8008090:	d0aa      	beq.n	8007fe8 <_strtod_l+0x820>
 8008092:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008094:	b1db      	cbz	r3, 80080ce <_strtod_l+0x906>
 8008096:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008098:	4213      	tst	r3, r2
 800809a:	d0ee      	beq.n	800807a <_strtod_l+0x8b2>
 800809c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800809e:	4650      	mov	r0, sl
 80080a0:	4659      	mov	r1, fp
 80080a2:	9a08      	ldr	r2, [sp, #32]
 80080a4:	b1bb      	cbz	r3, 80080d6 <_strtod_l+0x90e>
 80080a6:	f7ff fb6d 	bl	8007784 <sulp>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080b2:	f7f8 f865 	bl	8000180 <__adddf3>
 80080b6:	4682      	mov	sl, r0
 80080b8:	468b      	mov	fp, r1
 80080ba:	e7de      	b.n	800807a <_strtod_l+0x8b2>
 80080bc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80080c0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80080c4:	f04f 3aff 	mov.w	sl, #4294967295
 80080c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80080cc:	e7d5      	b.n	800807a <_strtod_l+0x8b2>
 80080ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080d0:	ea13 0f0a 	tst.w	r3, sl
 80080d4:	e7e1      	b.n	800809a <_strtod_l+0x8d2>
 80080d6:	f7ff fb55 	bl	8007784 <sulp>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080e2:	f7f8 f84b 	bl	800017c <__aeabi_dsub>
 80080e6:	2200      	movs	r2, #0
 80080e8:	2300      	movs	r3, #0
 80080ea:	4682      	mov	sl, r0
 80080ec:	468b      	mov	fp, r1
 80080ee:	f7f8 fc65 	bl	80009bc <__aeabi_dcmpeq>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d0c1      	beq.n	800807a <_strtod_l+0x8b2>
 80080f6:	e619      	b.n	8007d2c <_strtod_l+0x564>
 80080f8:	4641      	mov	r1, r8
 80080fa:	4620      	mov	r0, r4
 80080fc:	f003 f8bc 	bl	800b278 <__ratio>
 8008100:	2200      	movs	r2, #0
 8008102:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008106:	4606      	mov	r6, r0
 8008108:	460f      	mov	r7, r1
 800810a:	f7f8 fc6b 	bl	80009e4 <__aeabi_dcmple>
 800810e:	2800      	cmp	r0, #0
 8008110:	d06d      	beq.n	80081ee <_strtod_l+0xa26>
 8008112:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d178      	bne.n	800820a <_strtod_l+0xa42>
 8008118:	f1ba 0f00 	cmp.w	sl, #0
 800811c:	d156      	bne.n	80081cc <_strtod_l+0xa04>
 800811e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008124:	2b00      	cmp	r3, #0
 8008126:	d158      	bne.n	80081da <_strtod_l+0xa12>
 8008128:	2200      	movs	r2, #0
 800812a:	4630      	mov	r0, r6
 800812c:	4639      	mov	r1, r7
 800812e:	4b5e      	ldr	r3, [pc, #376]	@ (80082a8 <_strtod_l+0xae0>)
 8008130:	f7f8 fc4e 	bl	80009d0 <__aeabi_dcmplt>
 8008134:	2800      	cmp	r0, #0
 8008136:	d157      	bne.n	80081e8 <_strtod_l+0xa20>
 8008138:	4630      	mov	r0, r6
 800813a:	4639      	mov	r1, r7
 800813c:	2200      	movs	r2, #0
 800813e:	4b5b      	ldr	r3, [pc, #364]	@ (80082ac <_strtod_l+0xae4>)
 8008140:	f7f8 f9d4 	bl	80004ec <__aeabi_dmul>
 8008144:	4606      	mov	r6, r0
 8008146:	460f      	mov	r7, r1
 8008148:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800814c:	9606      	str	r6, [sp, #24]
 800814e:	9307      	str	r3, [sp, #28]
 8008150:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008154:	4d51      	ldr	r5, [pc, #324]	@ (800829c <_strtod_l+0xad4>)
 8008156:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800815a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800815c:	401d      	ands	r5, r3
 800815e:	4b54      	ldr	r3, [pc, #336]	@ (80082b0 <_strtod_l+0xae8>)
 8008160:	429d      	cmp	r5, r3
 8008162:	f040 80ab 	bne.w	80082bc <_strtod_l+0xaf4>
 8008166:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008168:	4650      	mov	r0, sl
 800816a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800816e:	4659      	mov	r1, fp
 8008170:	f002 ffc2 	bl	800b0f8 <__ulp>
 8008174:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008178:	f7f8 f9b8 	bl	80004ec <__aeabi_dmul>
 800817c:	4652      	mov	r2, sl
 800817e:	465b      	mov	r3, fp
 8008180:	f7f7 fffe 	bl	8000180 <__adddf3>
 8008184:	460b      	mov	r3, r1
 8008186:	4945      	ldr	r1, [pc, #276]	@ (800829c <_strtod_l+0xad4>)
 8008188:	4a4a      	ldr	r2, [pc, #296]	@ (80082b4 <_strtod_l+0xaec>)
 800818a:	4019      	ands	r1, r3
 800818c:	4291      	cmp	r1, r2
 800818e:	4682      	mov	sl, r0
 8008190:	d942      	bls.n	8008218 <_strtod_l+0xa50>
 8008192:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008194:	4b43      	ldr	r3, [pc, #268]	@ (80082a4 <_strtod_l+0xadc>)
 8008196:	429a      	cmp	r2, r3
 8008198:	d103      	bne.n	80081a2 <_strtod_l+0x9da>
 800819a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800819c:	3301      	adds	r3, #1
 800819e:	f43f ad32 	beq.w	8007c06 <_strtod_l+0x43e>
 80081a2:	f04f 3aff 	mov.w	sl, #4294967295
 80081a6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80082a4 <_strtod_l+0xadc>
 80081aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081ac:	9805      	ldr	r0, [sp, #20]
 80081ae:	f002 fc77 	bl	800aaa0 <_Bfree>
 80081b2:	4649      	mov	r1, r9
 80081b4:	9805      	ldr	r0, [sp, #20]
 80081b6:	f002 fc73 	bl	800aaa0 <_Bfree>
 80081ba:	4641      	mov	r1, r8
 80081bc:	9805      	ldr	r0, [sp, #20]
 80081be:	f002 fc6f 	bl	800aaa0 <_Bfree>
 80081c2:	4621      	mov	r1, r4
 80081c4:	9805      	ldr	r0, [sp, #20]
 80081c6:	f002 fc6b 	bl	800aaa0 <_Bfree>
 80081ca:	e61c      	b.n	8007e06 <_strtod_l+0x63e>
 80081cc:	f1ba 0f01 	cmp.w	sl, #1
 80081d0:	d103      	bne.n	80081da <_strtod_l+0xa12>
 80081d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f43f ada9 	beq.w	8007d2c <_strtod_l+0x564>
 80081da:	2200      	movs	r2, #0
 80081dc:	4b36      	ldr	r3, [pc, #216]	@ (80082b8 <_strtod_l+0xaf0>)
 80081de:	2600      	movs	r6, #0
 80081e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081e4:	4f30      	ldr	r7, [pc, #192]	@ (80082a8 <_strtod_l+0xae0>)
 80081e6:	e7b3      	b.n	8008150 <_strtod_l+0x988>
 80081e8:	2600      	movs	r6, #0
 80081ea:	4f30      	ldr	r7, [pc, #192]	@ (80082ac <_strtod_l+0xae4>)
 80081ec:	e7ac      	b.n	8008148 <_strtod_l+0x980>
 80081ee:	4630      	mov	r0, r6
 80081f0:	4639      	mov	r1, r7
 80081f2:	4b2e      	ldr	r3, [pc, #184]	@ (80082ac <_strtod_l+0xae4>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	f7f8 f979 	bl	80004ec <__aeabi_dmul>
 80081fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081fc:	4606      	mov	r6, r0
 80081fe:	460f      	mov	r7, r1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d0a1      	beq.n	8008148 <_strtod_l+0x980>
 8008204:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008208:	e7a2      	b.n	8008150 <_strtod_l+0x988>
 800820a:	2200      	movs	r2, #0
 800820c:	4b26      	ldr	r3, [pc, #152]	@ (80082a8 <_strtod_l+0xae0>)
 800820e:	4616      	mov	r6, r2
 8008210:	461f      	mov	r7, r3
 8008212:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008216:	e79b      	b.n	8008150 <_strtod_l+0x988>
 8008218:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800821c:	9b08      	ldr	r3, [sp, #32]
 800821e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1c1      	bne.n	80081aa <_strtod_l+0x9e2>
 8008226:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800822a:	0d1b      	lsrs	r3, r3, #20
 800822c:	051b      	lsls	r3, r3, #20
 800822e:	429d      	cmp	r5, r3
 8008230:	d1bb      	bne.n	80081aa <_strtod_l+0x9e2>
 8008232:	4630      	mov	r0, r6
 8008234:	4639      	mov	r1, r7
 8008236:	f7f8 fd17 	bl	8000c68 <__aeabi_d2lz>
 800823a:	f7f8 f929 	bl	8000490 <__aeabi_l2d>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	4630      	mov	r0, r6
 8008244:	4639      	mov	r1, r7
 8008246:	f7f7 ff99 	bl	800017c <__aeabi_dsub>
 800824a:	460b      	mov	r3, r1
 800824c:	4602      	mov	r2, r0
 800824e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008252:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008256:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008258:	ea46 060a 	orr.w	r6, r6, sl
 800825c:	431e      	orrs	r6, r3
 800825e:	d06a      	beq.n	8008336 <_strtod_l+0xb6e>
 8008260:	a309      	add	r3, pc, #36	@ (adr r3, 8008288 <_strtod_l+0xac0>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f7f8 fbb3 	bl	80009d0 <__aeabi_dcmplt>
 800826a:	2800      	cmp	r0, #0
 800826c:	f47f acd6 	bne.w	8007c1c <_strtod_l+0x454>
 8008270:	a307      	add	r3, pc, #28	@ (adr r3, 8008290 <_strtod_l+0xac8>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800827a:	f7f8 fbc7 	bl	8000a0c <__aeabi_dcmpgt>
 800827e:	2800      	cmp	r0, #0
 8008280:	d093      	beq.n	80081aa <_strtod_l+0x9e2>
 8008282:	e4cb      	b.n	8007c1c <_strtod_l+0x454>
 8008284:	f3af 8000 	nop.w
 8008288:	94a03595 	.word	0x94a03595
 800828c:	3fdfffff 	.word	0x3fdfffff
 8008290:	35afe535 	.word	0x35afe535
 8008294:	3fe00000 	.word	0x3fe00000
 8008298:	39500000 	.word	0x39500000
 800829c:	7ff00000 	.word	0x7ff00000
 80082a0:	000fffff 	.word	0x000fffff
 80082a4:	7fefffff 	.word	0x7fefffff
 80082a8:	3ff00000 	.word	0x3ff00000
 80082ac:	3fe00000 	.word	0x3fe00000
 80082b0:	7fe00000 	.word	0x7fe00000
 80082b4:	7c9fffff 	.word	0x7c9fffff
 80082b8:	bff00000 	.word	0xbff00000
 80082bc:	9b08      	ldr	r3, [sp, #32]
 80082be:	b323      	cbz	r3, 800830a <_strtod_l+0xb42>
 80082c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80082c4:	d821      	bhi.n	800830a <_strtod_l+0xb42>
 80082c6:	a328      	add	r3, pc, #160	@ (adr r3, 8008368 <_strtod_l+0xba0>)
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	4630      	mov	r0, r6
 80082ce:	4639      	mov	r1, r7
 80082d0:	f7f8 fb88 	bl	80009e4 <__aeabi_dcmple>
 80082d4:	b1a0      	cbz	r0, 8008300 <_strtod_l+0xb38>
 80082d6:	4639      	mov	r1, r7
 80082d8:	4630      	mov	r0, r6
 80082da:	f7f8 fbdf 	bl	8000a9c <__aeabi_d2uiz>
 80082de:	2801      	cmp	r0, #1
 80082e0:	bf38      	it	cc
 80082e2:	2001      	movcc	r0, #1
 80082e4:	f7f8 f888 	bl	80003f8 <__aeabi_ui2d>
 80082e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082ea:	4606      	mov	r6, r0
 80082ec:	460f      	mov	r7, r1
 80082ee:	b9fb      	cbnz	r3, 8008330 <_strtod_l+0xb68>
 80082f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082f4:	9014      	str	r0, [sp, #80]	@ 0x50
 80082f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80082f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80082fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008300:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008302:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008306:	1b5b      	subs	r3, r3, r5
 8008308:	9311      	str	r3, [sp, #68]	@ 0x44
 800830a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800830e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008312:	f002 fef1 	bl	800b0f8 <__ulp>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	4650      	mov	r0, sl
 800831c:	4659      	mov	r1, fp
 800831e:	f7f8 f8e5 	bl	80004ec <__aeabi_dmul>
 8008322:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008326:	f7f7 ff2b 	bl	8000180 <__adddf3>
 800832a:	4682      	mov	sl, r0
 800832c:	468b      	mov	fp, r1
 800832e:	e775      	b.n	800821c <_strtod_l+0xa54>
 8008330:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008334:	e7e0      	b.n	80082f8 <_strtod_l+0xb30>
 8008336:	a30e      	add	r3, pc, #56	@ (adr r3, 8008370 <_strtod_l+0xba8>)
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	f7f8 fb48 	bl	80009d0 <__aeabi_dcmplt>
 8008340:	e79d      	b.n	800827e <_strtod_l+0xab6>
 8008342:	2300      	movs	r3, #0
 8008344:	930e      	str	r3, [sp, #56]	@ 0x38
 8008346:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008348:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	f7ff ba79 	b.w	8007842 <_strtod_l+0x7a>
 8008350:	2a65      	cmp	r2, #101	@ 0x65
 8008352:	f43f ab72 	beq.w	8007a3a <_strtod_l+0x272>
 8008356:	2a45      	cmp	r2, #69	@ 0x45
 8008358:	f43f ab6f 	beq.w	8007a3a <_strtod_l+0x272>
 800835c:	2301      	movs	r3, #1
 800835e:	f7ff bbaa 	b.w	8007ab6 <_strtod_l+0x2ee>
 8008362:	bf00      	nop
 8008364:	f3af 8000 	nop.w
 8008368:	ffc00000 	.word	0xffc00000
 800836c:	41dfffff 	.word	0x41dfffff
 8008370:	94a03595 	.word	0x94a03595
 8008374:	3fcfffff 	.word	0x3fcfffff

08008378 <_strtod_r>:
 8008378:	4b01      	ldr	r3, [pc, #4]	@ (8008380 <_strtod_r+0x8>)
 800837a:	f7ff ba25 	b.w	80077c8 <_strtod_l>
 800837e:	bf00      	nop
 8008380:	20000050 	.word	0x20000050

08008384 <strtod>:
 8008384:	460a      	mov	r2, r1
 8008386:	4601      	mov	r1, r0
 8008388:	4802      	ldr	r0, [pc, #8]	@ (8008394 <strtod+0x10>)
 800838a:	4b03      	ldr	r3, [pc, #12]	@ (8008398 <strtod+0x14>)
 800838c:	6800      	ldr	r0, [r0, #0]
 800838e:	f7ff ba1b 	b.w	80077c8 <_strtod_l>
 8008392:	bf00      	nop
 8008394:	200001bc 	.word	0x200001bc
 8008398:	20000050 	.word	0x20000050

0800839c <__cvt>:
 800839c:	2b00      	cmp	r3, #0
 800839e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a2:	461d      	mov	r5, r3
 80083a4:	bfbb      	ittet	lt
 80083a6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80083aa:	461d      	movlt	r5, r3
 80083ac:	2300      	movge	r3, #0
 80083ae:	232d      	movlt	r3, #45	@ 0x2d
 80083b0:	b088      	sub	sp, #32
 80083b2:	4614      	mov	r4, r2
 80083b4:	bfb8      	it	lt
 80083b6:	4614      	movlt	r4, r2
 80083b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80083ba:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80083bc:	7013      	strb	r3, [r2, #0]
 80083be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80083c4:	f023 0820 	bic.w	r8, r3, #32
 80083c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083cc:	d005      	beq.n	80083da <__cvt+0x3e>
 80083ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80083d2:	d100      	bne.n	80083d6 <__cvt+0x3a>
 80083d4:	3601      	adds	r6, #1
 80083d6:	2302      	movs	r3, #2
 80083d8:	e000      	b.n	80083dc <__cvt+0x40>
 80083da:	2303      	movs	r3, #3
 80083dc:	aa07      	add	r2, sp, #28
 80083de:	9204      	str	r2, [sp, #16]
 80083e0:	aa06      	add	r2, sp, #24
 80083e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80083e6:	e9cd 3600 	strd	r3, r6, [sp]
 80083ea:	4622      	mov	r2, r4
 80083ec:	462b      	mov	r3, r5
 80083ee:	f001 f9af 	bl	8009750 <_dtoa_r>
 80083f2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80083f6:	4607      	mov	r7, r0
 80083f8:	d119      	bne.n	800842e <__cvt+0x92>
 80083fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80083fc:	07db      	lsls	r3, r3, #31
 80083fe:	d50e      	bpl.n	800841e <__cvt+0x82>
 8008400:	eb00 0906 	add.w	r9, r0, r6
 8008404:	2200      	movs	r2, #0
 8008406:	2300      	movs	r3, #0
 8008408:	4620      	mov	r0, r4
 800840a:	4629      	mov	r1, r5
 800840c:	f7f8 fad6 	bl	80009bc <__aeabi_dcmpeq>
 8008410:	b108      	cbz	r0, 8008416 <__cvt+0x7a>
 8008412:	f8cd 901c 	str.w	r9, [sp, #28]
 8008416:	2230      	movs	r2, #48	@ 0x30
 8008418:	9b07      	ldr	r3, [sp, #28]
 800841a:	454b      	cmp	r3, r9
 800841c:	d31e      	bcc.n	800845c <__cvt+0xc0>
 800841e:	4638      	mov	r0, r7
 8008420:	9b07      	ldr	r3, [sp, #28]
 8008422:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008424:	1bdb      	subs	r3, r3, r7
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	b008      	add	sp, #32
 800842a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008432:	eb00 0906 	add.w	r9, r0, r6
 8008436:	d1e5      	bne.n	8008404 <__cvt+0x68>
 8008438:	7803      	ldrb	r3, [r0, #0]
 800843a:	2b30      	cmp	r3, #48	@ 0x30
 800843c:	d10a      	bne.n	8008454 <__cvt+0xb8>
 800843e:	2200      	movs	r2, #0
 8008440:	2300      	movs	r3, #0
 8008442:	4620      	mov	r0, r4
 8008444:	4629      	mov	r1, r5
 8008446:	f7f8 fab9 	bl	80009bc <__aeabi_dcmpeq>
 800844a:	b918      	cbnz	r0, 8008454 <__cvt+0xb8>
 800844c:	f1c6 0601 	rsb	r6, r6, #1
 8008450:	f8ca 6000 	str.w	r6, [sl]
 8008454:	f8da 3000 	ldr.w	r3, [sl]
 8008458:	4499      	add	r9, r3
 800845a:	e7d3      	b.n	8008404 <__cvt+0x68>
 800845c:	1c59      	adds	r1, r3, #1
 800845e:	9107      	str	r1, [sp, #28]
 8008460:	701a      	strb	r2, [r3, #0]
 8008462:	e7d9      	b.n	8008418 <__cvt+0x7c>

08008464 <__exponent>:
 8008464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008466:	2900      	cmp	r1, #0
 8008468:	bfb6      	itet	lt
 800846a:	232d      	movlt	r3, #45	@ 0x2d
 800846c:	232b      	movge	r3, #43	@ 0x2b
 800846e:	4249      	neglt	r1, r1
 8008470:	2909      	cmp	r1, #9
 8008472:	7002      	strb	r2, [r0, #0]
 8008474:	7043      	strb	r3, [r0, #1]
 8008476:	dd29      	ble.n	80084cc <__exponent+0x68>
 8008478:	f10d 0307 	add.w	r3, sp, #7
 800847c:	461d      	mov	r5, r3
 800847e:	270a      	movs	r7, #10
 8008480:	fbb1 f6f7 	udiv	r6, r1, r7
 8008484:	461a      	mov	r2, r3
 8008486:	fb07 1416 	mls	r4, r7, r6, r1
 800848a:	3430      	adds	r4, #48	@ 0x30
 800848c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008490:	460c      	mov	r4, r1
 8008492:	2c63      	cmp	r4, #99	@ 0x63
 8008494:	4631      	mov	r1, r6
 8008496:	f103 33ff 	add.w	r3, r3, #4294967295
 800849a:	dcf1      	bgt.n	8008480 <__exponent+0x1c>
 800849c:	3130      	adds	r1, #48	@ 0x30
 800849e:	1e94      	subs	r4, r2, #2
 80084a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80084a4:	4623      	mov	r3, r4
 80084a6:	1c41      	adds	r1, r0, #1
 80084a8:	42ab      	cmp	r3, r5
 80084aa:	d30a      	bcc.n	80084c2 <__exponent+0x5e>
 80084ac:	f10d 0309 	add.w	r3, sp, #9
 80084b0:	1a9b      	subs	r3, r3, r2
 80084b2:	42ac      	cmp	r4, r5
 80084b4:	bf88      	it	hi
 80084b6:	2300      	movhi	r3, #0
 80084b8:	3302      	adds	r3, #2
 80084ba:	4403      	add	r3, r0
 80084bc:	1a18      	subs	r0, r3, r0
 80084be:	b003      	add	sp, #12
 80084c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80084c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80084ca:	e7ed      	b.n	80084a8 <__exponent+0x44>
 80084cc:	2330      	movs	r3, #48	@ 0x30
 80084ce:	3130      	adds	r1, #48	@ 0x30
 80084d0:	7083      	strb	r3, [r0, #2]
 80084d2:	70c1      	strb	r1, [r0, #3]
 80084d4:	1d03      	adds	r3, r0, #4
 80084d6:	e7f1      	b.n	80084bc <__exponent+0x58>

080084d8 <_printf_float>:
 80084d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084dc:	b091      	sub	sp, #68	@ 0x44
 80084de:	460c      	mov	r4, r1
 80084e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80084e4:	4616      	mov	r6, r2
 80084e6:	461f      	mov	r7, r3
 80084e8:	4605      	mov	r5, r0
 80084ea:	f000 fff3 	bl	80094d4 <_localeconv_r>
 80084ee:	6803      	ldr	r3, [r0, #0]
 80084f0:	4618      	mov	r0, r3
 80084f2:	9308      	str	r3, [sp, #32]
 80084f4:	f7f7 fe36 	bl	8000164 <strlen>
 80084f8:	2300      	movs	r3, #0
 80084fa:	930e      	str	r3, [sp, #56]	@ 0x38
 80084fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008500:	9009      	str	r0, [sp, #36]	@ 0x24
 8008502:	3307      	adds	r3, #7
 8008504:	f023 0307 	bic.w	r3, r3, #7
 8008508:	f103 0208 	add.w	r2, r3, #8
 800850c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008510:	f8d4 b000 	ldr.w	fp, [r4]
 8008514:	f8c8 2000 	str.w	r2, [r8]
 8008518:	e9d3 8900 	ldrd	r8, r9, [r3]
 800851c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008520:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008522:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008526:	f04f 32ff 	mov.w	r2, #4294967295
 800852a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800852e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008532:	4b9c      	ldr	r3, [pc, #624]	@ (80087a4 <_printf_float+0x2cc>)
 8008534:	f7f8 fa74 	bl	8000a20 <__aeabi_dcmpun>
 8008538:	bb70      	cbnz	r0, 8008598 <_printf_float+0xc0>
 800853a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800853e:	f04f 32ff 	mov.w	r2, #4294967295
 8008542:	4b98      	ldr	r3, [pc, #608]	@ (80087a4 <_printf_float+0x2cc>)
 8008544:	f7f8 fa4e 	bl	80009e4 <__aeabi_dcmple>
 8008548:	bb30      	cbnz	r0, 8008598 <_printf_float+0xc0>
 800854a:	2200      	movs	r2, #0
 800854c:	2300      	movs	r3, #0
 800854e:	4640      	mov	r0, r8
 8008550:	4649      	mov	r1, r9
 8008552:	f7f8 fa3d 	bl	80009d0 <__aeabi_dcmplt>
 8008556:	b110      	cbz	r0, 800855e <_printf_float+0x86>
 8008558:	232d      	movs	r3, #45	@ 0x2d
 800855a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800855e:	4a92      	ldr	r2, [pc, #584]	@ (80087a8 <_printf_float+0x2d0>)
 8008560:	4b92      	ldr	r3, [pc, #584]	@ (80087ac <_printf_float+0x2d4>)
 8008562:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008566:	bf8c      	ite	hi
 8008568:	4690      	movhi	r8, r2
 800856a:	4698      	movls	r8, r3
 800856c:	2303      	movs	r3, #3
 800856e:	f04f 0900 	mov.w	r9, #0
 8008572:	6123      	str	r3, [r4, #16]
 8008574:	f02b 0304 	bic.w	r3, fp, #4
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	4633      	mov	r3, r6
 800857c:	4621      	mov	r1, r4
 800857e:	4628      	mov	r0, r5
 8008580:	9700      	str	r7, [sp, #0]
 8008582:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008584:	f000 f9d4 	bl	8008930 <_printf_common>
 8008588:	3001      	adds	r0, #1
 800858a:	f040 8090 	bne.w	80086ae <_printf_float+0x1d6>
 800858e:	f04f 30ff 	mov.w	r0, #4294967295
 8008592:	b011      	add	sp, #68	@ 0x44
 8008594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008598:	4642      	mov	r2, r8
 800859a:	464b      	mov	r3, r9
 800859c:	4640      	mov	r0, r8
 800859e:	4649      	mov	r1, r9
 80085a0:	f7f8 fa3e 	bl	8000a20 <__aeabi_dcmpun>
 80085a4:	b148      	cbz	r0, 80085ba <_printf_float+0xe2>
 80085a6:	464b      	mov	r3, r9
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	bfb8      	it	lt
 80085ac:	232d      	movlt	r3, #45	@ 0x2d
 80085ae:	4a80      	ldr	r2, [pc, #512]	@ (80087b0 <_printf_float+0x2d8>)
 80085b0:	bfb8      	it	lt
 80085b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80085b6:	4b7f      	ldr	r3, [pc, #508]	@ (80087b4 <_printf_float+0x2dc>)
 80085b8:	e7d3      	b.n	8008562 <_printf_float+0x8a>
 80085ba:	6863      	ldr	r3, [r4, #4]
 80085bc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	d13f      	bne.n	8008644 <_printf_float+0x16c>
 80085c4:	2306      	movs	r3, #6
 80085c6:	6063      	str	r3, [r4, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80085ce:	6023      	str	r3, [r4, #0]
 80085d0:	9206      	str	r2, [sp, #24]
 80085d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80085d4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80085d8:	aa0d      	add	r2, sp, #52	@ 0x34
 80085da:	9203      	str	r2, [sp, #12]
 80085dc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80085e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80085e4:	6863      	ldr	r3, [r4, #4]
 80085e6:	4642      	mov	r2, r8
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	4628      	mov	r0, r5
 80085ec:	464b      	mov	r3, r9
 80085ee:	910a      	str	r1, [sp, #40]	@ 0x28
 80085f0:	f7ff fed4 	bl	800839c <__cvt>
 80085f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085f6:	4680      	mov	r8, r0
 80085f8:	2947      	cmp	r1, #71	@ 0x47
 80085fa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80085fc:	d128      	bne.n	8008650 <_printf_float+0x178>
 80085fe:	1cc8      	adds	r0, r1, #3
 8008600:	db02      	blt.n	8008608 <_printf_float+0x130>
 8008602:	6863      	ldr	r3, [r4, #4]
 8008604:	4299      	cmp	r1, r3
 8008606:	dd40      	ble.n	800868a <_printf_float+0x1b2>
 8008608:	f1aa 0a02 	sub.w	sl, sl, #2
 800860c:	fa5f fa8a 	uxtb.w	sl, sl
 8008610:	4652      	mov	r2, sl
 8008612:	3901      	subs	r1, #1
 8008614:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008618:	910d      	str	r1, [sp, #52]	@ 0x34
 800861a:	f7ff ff23 	bl	8008464 <__exponent>
 800861e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008620:	4681      	mov	r9, r0
 8008622:	1813      	adds	r3, r2, r0
 8008624:	2a01      	cmp	r2, #1
 8008626:	6123      	str	r3, [r4, #16]
 8008628:	dc02      	bgt.n	8008630 <_printf_float+0x158>
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	07d2      	lsls	r2, r2, #31
 800862e:	d501      	bpl.n	8008634 <_printf_float+0x15c>
 8008630:	3301      	adds	r3, #1
 8008632:	6123      	str	r3, [r4, #16]
 8008634:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008638:	2b00      	cmp	r3, #0
 800863a:	d09e      	beq.n	800857a <_printf_float+0xa2>
 800863c:	232d      	movs	r3, #45	@ 0x2d
 800863e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008642:	e79a      	b.n	800857a <_printf_float+0xa2>
 8008644:	2947      	cmp	r1, #71	@ 0x47
 8008646:	d1bf      	bne.n	80085c8 <_printf_float+0xf0>
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1bd      	bne.n	80085c8 <_printf_float+0xf0>
 800864c:	2301      	movs	r3, #1
 800864e:	e7ba      	b.n	80085c6 <_printf_float+0xee>
 8008650:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008654:	d9dc      	bls.n	8008610 <_printf_float+0x138>
 8008656:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800865a:	d118      	bne.n	800868e <_printf_float+0x1b6>
 800865c:	2900      	cmp	r1, #0
 800865e:	6863      	ldr	r3, [r4, #4]
 8008660:	dd0b      	ble.n	800867a <_printf_float+0x1a2>
 8008662:	6121      	str	r1, [r4, #16]
 8008664:	b913      	cbnz	r3, 800866c <_printf_float+0x194>
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	07d0      	lsls	r0, r2, #31
 800866a:	d502      	bpl.n	8008672 <_printf_float+0x19a>
 800866c:	3301      	adds	r3, #1
 800866e:	440b      	add	r3, r1
 8008670:	6123      	str	r3, [r4, #16]
 8008672:	f04f 0900 	mov.w	r9, #0
 8008676:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008678:	e7dc      	b.n	8008634 <_printf_float+0x15c>
 800867a:	b913      	cbnz	r3, 8008682 <_printf_float+0x1aa>
 800867c:	6822      	ldr	r2, [r4, #0]
 800867e:	07d2      	lsls	r2, r2, #31
 8008680:	d501      	bpl.n	8008686 <_printf_float+0x1ae>
 8008682:	3302      	adds	r3, #2
 8008684:	e7f4      	b.n	8008670 <_printf_float+0x198>
 8008686:	2301      	movs	r3, #1
 8008688:	e7f2      	b.n	8008670 <_printf_float+0x198>
 800868a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800868e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008690:	4299      	cmp	r1, r3
 8008692:	db05      	blt.n	80086a0 <_printf_float+0x1c8>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	6121      	str	r1, [r4, #16]
 8008698:	07d8      	lsls	r0, r3, #31
 800869a:	d5ea      	bpl.n	8008672 <_printf_float+0x19a>
 800869c:	1c4b      	adds	r3, r1, #1
 800869e:	e7e7      	b.n	8008670 <_printf_float+0x198>
 80086a0:	2900      	cmp	r1, #0
 80086a2:	bfcc      	ite	gt
 80086a4:	2201      	movgt	r2, #1
 80086a6:	f1c1 0202 	rsble	r2, r1, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	e7e0      	b.n	8008670 <_printf_float+0x198>
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	055a      	lsls	r2, r3, #21
 80086b2:	d407      	bmi.n	80086c4 <_printf_float+0x1ec>
 80086b4:	6923      	ldr	r3, [r4, #16]
 80086b6:	4642      	mov	r2, r8
 80086b8:	4631      	mov	r1, r6
 80086ba:	4628      	mov	r0, r5
 80086bc:	47b8      	blx	r7
 80086be:	3001      	adds	r0, #1
 80086c0:	d12b      	bne.n	800871a <_printf_float+0x242>
 80086c2:	e764      	b.n	800858e <_printf_float+0xb6>
 80086c4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086c8:	f240 80dc 	bls.w	8008884 <_printf_float+0x3ac>
 80086cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086d0:	2200      	movs	r2, #0
 80086d2:	2300      	movs	r3, #0
 80086d4:	f7f8 f972 	bl	80009bc <__aeabi_dcmpeq>
 80086d8:	2800      	cmp	r0, #0
 80086da:	d033      	beq.n	8008744 <_printf_float+0x26c>
 80086dc:	2301      	movs	r3, #1
 80086de:	4631      	mov	r1, r6
 80086e0:	4628      	mov	r0, r5
 80086e2:	4a35      	ldr	r2, [pc, #212]	@ (80087b8 <_printf_float+0x2e0>)
 80086e4:	47b8      	blx	r7
 80086e6:	3001      	adds	r0, #1
 80086e8:	f43f af51 	beq.w	800858e <_printf_float+0xb6>
 80086ec:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80086f0:	4543      	cmp	r3, r8
 80086f2:	db02      	blt.n	80086fa <_printf_float+0x222>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	07d8      	lsls	r0, r3, #31
 80086f8:	d50f      	bpl.n	800871a <_printf_float+0x242>
 80086fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80086fe:	4631      	mov	r1, r6
 8008700:	4628      	mov	r0, r5
 8008702:	47b8      	blx	r7
 8008704:	3001      	adds	r0, #1
 8008706:	f43f af42 	beq.w	800858e <_printf_float+0xb6>
 800870a:	f04f 0900 	mov.w	r9, #0
 800870e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008712:	f104 0a1a 	add.w	sl, r4, #26
 8008716:	45c8      	cmp	r8, r9
 8008718:	dc09      	bgt.n	800872e <_printf_float+0x256>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	079b      	lsls	r3, r3, #30
 800871e:	f100 8102 	bmi.w	8008926 <_printf_float+0x44e>
 8008722:	68e0      	ldr	r0, [r4, #12]
 8008724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008726:	4298      	cmp	r0, r3
 8008728:	bfb8      	it	lt
 800872a:	4618      	movlt	r0, r3
 800872c:	e731      	b.n	8008592 <_printf_float+0xba>
 800872e:	2301      	movs	r3, #1
 8008730:	4652      	mov	r2, sl
 8008732:	4631      	mov	r1, r6
 8008734:	4628      	mov	r0, r5
 8008736:	47b8      	blx	r7
 8008738:	3001      	adds	r0, #1
 800873a:	f43f af28 	beq.w	800858e <_printf_float+0xb6>
 800873e:	f109 0901 	add.w	r9, r9, #1
 8008742:	e7e8      	b.n	8008716 <_printf_float+0x23e>
 8008744:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008746:	2b00      	cmp	r3, #0
 8008748:	dc38      	bgt.n	80087bc <_printf_float+0x2e4>
 800874a:	2301      	movs	r3, #1
 800874c:	4631      	mov	r1, r6
 800874e:	4628      	mov	r0, r5
 8008750:	4a19      	ldr	r2, [pc, #100]	@ (80087b8 <_printf_float+0x2e0>)
 8008752:	47b8      	blx	r7
 8008754:	3001      	adds	r0, #1
 8008756:	f43f af1a 	beq.w	800858e <_printf_float+0xb6>
 800875a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800875e:	ea59 0303 	orrs.w	r3, r9, r3
 8008762:	d102      	bne.n	800876a <_printf_float+0x292>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	07d9      	lsls	r1, r3, #31
 8008768:	d5d7      	bpl.n	800871a <_printf_float+0x242>
 800876a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800876e:	4631      	mov	r1, r6
 8008770:	4628      	mov	r0, r5
 8008772:	47b8      	blx	r7
 8008774:	3001      	adds	r0, #1
 8008776:	f43f af0a 	beq.w	800858e <_printf_float+0xb6>
 800877a:	f04f 0a00 	mov.w	sl, #0
 800877e:	f104 0b1a 	add.w	fp, r4, #26
 8008782:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008784:	425b      	negs	r3, r3
 8008786:	4553      	cmp	r3, sl
 8008788:	dc01      	bgt.n	800878e <_printf_float+0x2b6>
 800878a:	464b      	mov	r3, r9
 800878c:	e793      	b.n	80086b6 <_printf_float+0x1de>
 800878e:	2301      	movs	r3, #1
 8008790:	465a      	mov	r2, fp
 8008792:	4631      	mov	r1, r6
 8008794:	4628      	mov	r0, r5
 8008796:	47b8      	blx	r7
 8008798:	3001      	adds	r0, #1
 800879a:	f43f aef8 	beq.w	800858e <_printf_float+0xb6>
 800879e:	f10a 0a01 	add.w	sl, sl, #1
 80087a2:	e7ee      	b.n	8008782 <_printf_float+0x2aa>
 80087a4:	7fefffff 	.word	0x7fefffff
 80087a8:	0800c1b2 	.word	0x0800c1b2
 80087ac:	0800c1ae 	.word	0x0800c1ae
 80087b0:	0800c1ba 	.word	0x0800c1ba
 80087b4:	0800c1b6 	.word	0x0800c1b6
 80087b8:	0800c1be 	.word	0x0800c1be
 80087bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80087be:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80087c2:	4553      	cmp	r3, sl
 80087c4:	bfa8      	it	ge
 80087c6:	4653      	movge	r3, sl
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	4699      	mov	r9, r3
 80087cc:	dc36      	bgt.n	800883c <_printf_float+0x364>
 80087ce:	f04f 0b00 	mov.w	fp, #0
 80087d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087d6:	f104 021a 	add.w	r2, r4, #26
 80087da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80087dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80087de:	eba3 0309 	sub.w	r3, r3, r9
 80087e2:	455b      	cmp	r3, fp
 80087e4:	dc31      	bgt.n	800884a <_printf_float+0x372>
 80087e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087e8:	459a      	cmp	sl, r3
 80087ea:	dc3a      	bgt.n	8008862 <_printf_float+0x38a>
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	07da      	lsls	r2, r3, #31
 80087f0:	d437      	bmi.n	8008862 <_printf_float+0x38a>
 80087f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087f4:	ebaa 0903 	sub.w	r9, sl, r3
 80087f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087fa:	ebaa 0303 	sub.w	r3, sl, r3
 80087fe:	4599      	cmp	r9, r3
 8008800:	bfa8      	it	ge
 8008802:	4699      	movge	r9, r3
 8008804:	f1b9 0f00 	cmp.w	r9, #0
 8008808:	dc33      	bgt.n	8008872 <_printf_float+0x39a>
 800880a:	f04f 0800 	mov.w	r8, #0
 800880e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008812:	f104 0b1a 	add.w	fp, r4, #26
 8008816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008818:	ebaa 0303 	sub.w	r3, sl, r3
 800881c:	eba3 0309 	sub.w	r3, r3, r9
 8008820:	4543      	cmp	r3, r8
 8008822:	f77f af7a 	ble.w	800871a <_printf_float+0x242>
 8008826:	2301      	movs	r3, #1
 8008828:	465a      	mov	r2, fp
 800882a:	4631      	mov	r1, r6
 800882c:	4628      	mov	r0, r5
 800882e:	47b8      	blx	r7
 8008830:	3001      	adds	r0, #1
 8008832:	f43f aeac 	beq.w	800858e <_printf_float+0xb6>
 8008836:	f108 0801 	add.w	r8, r8, #1
 800883a:	e7ec      	b.n	8008816 <_printf_float+0x33e>
 800883c:	4642      	mov	r2, r8
 800883e:	4631      	mov	r1, r6
 8008840:	4628      	mov	r0, r5
 8008842:	47b8      	blx	r7
 8008844:	3001      	adds	r0, #1
 8008846:	d1c2      	bne.n	80087ce <_printf_float+0x2f6>
 8008848:	e6a1      	b.n	800858e <_printf_float+0xb6>
 800884a:	2301      	movs	r3, #1
 800884c:	4631      	mov	r1, r6
 800884e:	4628      	mov	r0, r5
 8008850:	920a      	str	r2, [sp, #40]	@ 0x28
 8008852:	47b8      	blx	r7
 8008854:	3001      	adds	r0, #1
 8008856:	f43f ae9a 	beq.w	800858e <_printf_float+0xb6>
 800885a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800885c:	f10b 0b01 	add.w	fp, fp, #1
 8008860:	e7bb      	b.n	80087da <_printf_float+0x302>
 8008862:	4631      	mov	r1, r6
 8008864:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008868:	4628      	mov	r0, r5
 800886a:	47b8      	blx	r7
 800886c:	3001      	adds	r0, #1
 800886e:	d1c0      	bne.n	80087f2 <_printf_float+0x31a>
 8008870:	e68d      	b.n	800858e <_printf_float+0xb6>
 8008872:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008874:	464b      	mov	r3, r9
 8008876:	4631      	mov	r1, r6
 8008878:	4628      	mov	r0, r5
 800887a:	4442      	add	r2, r8
 800887c:	47b8      	blx	r7
 800887e:	3001      	adds	r0, #1
 8008880:	d1c3      	bne.n	800880a <_printf_float+0x332>
 8008882:	e684      	b.n	800858e <_printf_float+0xb6>
 8008884:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008888:	f1ba 0f01 	cmp.w	sl, #1
 800888c:	dc01      	bgt.n	8008892 <_printf_float+0x3ba>
 800888e:	07db      	lsls	r3, r3, #31
 8008890:	d536      	bpl.n	8008900 <_printf_float+0x428>
 8008892:	2301      	movs	r3, #1
 8008894:	4642      	mov	r2, r8
 8008896:	4631      	mov	r1, r6
 8008898:	4628      	mov	r0, r5
 800889a:	47b8      	blx	r7
 800889c:	3001      	adds	r0, #1
 800889e:	f43f ae76 	beq.w	800858e <_printf_float+0xb6>
 80088a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80088a6:	4631      	mov	r1, r6
 80088a8:	4628      	mov	r0, r5
 80088aa:	47b8      	blx	r7
 80088ac:	3001      	adds	r0, #1
 80088ae:	f43f ae6e 	beq.w	800858e <_printf_float+0xb6>
 80088b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80088b6:	2200      	movs	r2, #0
 80088b8:	2300      	movs	r3, #0
 80088ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088be:	f7f8 f87d 	bl	80009bc <__aeabi_dcmpeq>
 80088c2:	b9c0      	cbnz	r0, 80088f6 <_printf_float+0x41e>
 80088c4:	4653      	mov	r3, sl
 80088c6:	f108 0201 	add.w	r2, r8, #1
 80088ca:	4631      	mov	r1, r6
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b8      	blx	r7
 80088d0:	3001      	adds	r0, #1
 80088d2:	d10c      	bne.n	80088ee <_printf_float+0x416>
 80088d4:	e65b      	b.n	800858e <_printf_float+0xb6>
 80088d6:	2301      	movs	r3, #1
 80088d8:	465a      	mov	r2, fp
 80088da:	4631      	mov	r1, r6
 80088dc:	4628      	mov	r0, r5
 80088de:	47b8      	blx	r7
 80088e0:	3001      	adds	r0, #1
 80088e2:	f43f ae54 	beq.w	800858e <_printf_float+0xb6>
 80088e6:	f108 0801 	add.w	r8, r8, #1
 80088ea:	45d0      	cmp	r8, sl
 80088ec:	dbf3      	blt.n	80088d6 <_printf_float+0x3fe>
 80088ee:	464b      	mov	r3, r9
 80088f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80088f4:	e6e0      	b.n	80086b8 <_printf_float+0x1e0>
 80088f6:	f04f 0800 	mov.w	r8, #0
 80088fa:	f104 0b1a 	add.w	fp, r4, #26
 80088fe:	e7f4      	b.n	80088ea <_printf_float+0x412>
 8008900:	2301      	movs	r3, #1
 8008902:	4642      	mov	r2, r8
 8008904:	e7e1      	b.n	80088ca <_printf_float+0x3f2>
 8008906:	2301      	movs	r3, #1
 8008908:	464a      	mov	r2, r9
 800890a:	4631      	mov	r1, r6
 800890c:	4628      	mov	r0, r5
 800890e:	47b8      	blx	r7
 8008910:	3001      	adds	r0, #1
 8008912:	f43f ae3c 	beq.w	800858e <_printf_float+0xb6>
 8008916:	f108 0801 	add.w	r8, r8, #1
 800891a:	68e3      	ldr	r3, [r4, #12]
 800891c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800891e:	1a5b      	subs	r3, r3, r1
 8008920:	4543      	cmp	r3, r8
 8008922:	dcf0      	bgt.n	8008906 <_printf_float+0x42e>
 8008924:	e6fd      	b.n	8008722 <_printf_float+0x24a>
 8008926:	f04f 0800 	mov.w	r8, #0
 800892a:	f104 0919 	add.w	r9, r4, #25
 800892e:	e7f4      	b.n	800891a <_printf_float+0x442>

08008930 <_printf_common>:
 8008930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008934:	4616      	mov	r6, r2
 8008936:	4698      	mov	r8, r3
 8008938:	688a      	ldr	r2, [r1, #8]
 800893a:	690b      	ldr	r3, [r1, #16]
 800893c:	4607      	mov	r7, r0
 800893e:	4293      	cmp	r3, r2
 8008940:	bfb8      	it	lt
 8008942:	4613      	movlt	r3, r2
 8008944:	6033      	str	r3, [r6, #0]
 8008946:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800894a:	460c      	mov	r4, r1
 800894c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008950:	b10a      	cbz	r2, 8008956 <_printf_common+0x26>
 8008952:	3301      	adds	r3, #1
 8008954:	6033      	str	r3, [r6, #0]
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	0699      	lsls	r1, r3, #26
 800895a:	bf42      	ittt	mi
 800895c:	6833      	ldrmi	r3, [r6, #0]
 800895e:	3302      	addmi	r3, #2
 8008960:	6033      	strmi	r3, [r6, #0]
 8008962:	6825      	ldr	r5, [r4, #0]
 8008964:	f015 0506 	ands.w	r5, r5, #6
 8008968:	d106      	bne.n	8008978 <_printf_common+0x48>
 800896a:	f104 0a19 	add.w	sl, r4, #25
 800896e:	68e3      	ldr	r3, [r4, #12]
 8008970:	6832      	ldr	r2, [r6, #0]
 8008972:	1a9b      	subs	r3, r3, r2
 8008974:	42ab      	cmp	r3, r5
 8008976:	dc2b      	bgt.n	80089d0 <_printf_common+0xa0>
 8008978:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800897c:	6822      	ldr	r2, [r4, #0]
 800897e:	3b00      	subs	r3, #0
 8008980:	bf18      	it	ne
 8008982:	2301      	movne	r3, #1
 8008984:	0692      	lsls	r2, r2, #26
 8008986:	d430      	bmi.n	80089ea <_printf_common+0xba>
 8008988:	4641      	mov	r1, r8
 800898a:	4638      	mov	r0, r7
 800898c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008990:	47c8      	blx	r9
 8008992:	3001      	adds	r0, #1
 8008994:	d023      	beq.n	80089de <_printf_common+0xae>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	6922      	ldr	r2, [r4, #16]
 800899a:	f003 0306 	and.w	r3, r3, #6
 800899e:	2b04      	cmp	r3, #4
 80089a0:	bf14      	ite	ne
 80089a2:	2500      	movne	r5, #0
 80089a4:	6833      	ldreq	r3, [r6, #0]
 80089a6:	f04f 0600 	mov.w	r6, #0
 80089aa:	bf08      	it	eq
 80089ac:	68e5      	ldreq	r5, [r4, #12]
 80089ae:	f104 041a 	add.w	r4, r4, #26
 80089b2:	bf08      	it	eq
 80089b4:	1aed      	subeq	r5, r5, r3
 80089b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80089ba:	bf08      	it	eq
 80089bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089c0:	4293      	cmp	r3, r2
 80089c2:	bfc4      	itt	gt
 80089c4:	1a9b      	subgt	r3, r3, r2
 80089c6:	18ed      	addgt	r5, r5, r3
 80089c8:	42b5      	cmp	r5, r6
 80089ca:	d11a      	bne.n	8008a02 <_printf_common+0xd2>
 80089cc:	2000      	movs	r0, #0
 80089ce:	e008      	b.n	80089e2 <_printf_common+0xb2>
 80089d0:	2301      	movs	r3, #1
 80089d2:	4652      	mov	r2, sl
 80089d4:	4641      	mov	r1, r8
 80089d6:	4638      	mov	r0, r7
 80089d8:	47c8      	blx	r9
 80089da:	3001      	adds	r0, #1
 80089dc:	d103      	bne.n	80089e6 <_printf_common+0xb6>
 80089de:	f04f 30ff 	mov.w	r0, #4294967295
 80089e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e6:	3501      	adds	r5, #1
 80089e8:	e7c1      	b.n	800896e <_printf_common+0x3e>
 80089ea:	2030      	movs	r0, #48	@ 0x30
 80089ec:	18e1      	adds	r1, r4, r3
 80089ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089f8:	4422      	add	r2, r4
 80089fa:	3302      	adds	r3, #2
 80089fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a00:	e7c2      	b.n	8008988 <_printf_common+0x58>
 8008a02:	2301      	movs	r3, #1
 8008a04:	4622      	mov	r2, r4
 8008a06:	4641      	mov	r1, r8
 8008a08:	4638      	mov	r0, r7
 8008a0a:	47c8      	blx	r9
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d0e6      	beq.n	80089de <_printf_common+0xae>
 8008a10:	3601      	adds	r6, #1
 8008a12:	e7d9      	b.n	80089c8 <_printf_common+0x98>

08008a14 <_printf_i>:
 8008a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a18:	7e0f      	ldrb	r7, [r1, #24]
 8008a1a:	4691      	mov	r9, r2
 8008a1c:	2f78      	cmp	r7, #120	@ 0x78
 8008a1e:	4680      	mov	r8, r0
 8008a20:	460c      	mov	r4, r1
 8008a22:	469a      	mov	sl, r3
 8008a24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a2a:	d807      	bhi.n	8008a3c <_printf_i+0x28>
 8008a2c:	2f62      	cmp	r7, #98	@ 0x62
 8008a2e:	d80a      	bhi.n	8008a46 <_printf_i+0x32>
 8008a30:	2f00      	cmp	r7, #0
 8008a32:	f000 80d1 	beq.w	8008bd8 <_printf_i+0x1c4>
 8008a36:	2f58      	cmp	r7, #88	@ 0x58
 8008a38:	f000 80b8 	beq.w	8008bac <_printf_i+0x198>
 8008a3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a44:	e03a      	b.n	8008abc <_printf_i+0xa8>
 8008a46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a4a:	2b15      	cmp	r3, #21
 8008a4c:	d8f6      	bhi.n	8008a3c <_printf_i+0x28>
 8008a4e:	a101      	add	r1, pc, #4	@ (adr r1, 8008a54 <_printf_i+0x40>)
 8008a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a54:	08008aad 	.word	0x08008aad
 8008a58:	08008ac1 	.word	0x08008ac1
 8008a5c:	08008a3d 	.word	0x08008a3d
 8008a60:	08008a3d 	.word	0x08008a3d
 8008a64:	08008a3d 	.word	0x08008a3d
 8008a68:	08008a3d 	.word	0x08008a3d
 8008a6c:	08008ac1 	.word	0x08008ac1
 8008a70:	08008a3d 	.word	0x08008a3d
 8008a74:	08008a3d 	.word	0x08008a3d
 8008a78:	08008a3d 	.word	0x08008a3d
 8008a7c:	08008a3d 	.word	0x08008a3d
 8008a80:	08008bbf 	.word	0x08008bbf
 8008a84:	08008aeb 	.word	0x08008aeb
 8008a88:	08008b79 	.word	0x08008b79
 8008a8c:	08008a3d 	.word	0x08008a3d
 8008a90:	08008a3d 	.word	0x08008a3d
 8008a94:	08008be1 	.word	0x08008be1
 8008a98:	08008a3d 	.word	0x08008a3d
 8008a9c:	08008aeb 	.word	0x08008aeb
 8008aa0:	08008a3d 	.word	0x08008a3d
 8008aa4:	08008a3d 	.word	0x08008a3d
 8008aa8:	08008b81 	.word	0x08008b81
 8008aac:	6833      	ldr	r3, [r6, #0]
 8008aae:	1d1a      	adds	r2, r3, #4
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6032      	str	r2, [r6, #0]
 8008ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ab8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008abc:	2301      	movs	r3, #1
 8008abe:	e09c      	b.n	8008bfa <_printf_i+0x1e6>
 8008ac0:	6833      	ldr	r3, [r6, #0]
 8008ac2:	6820      	ldr	r0, [r4, #0]
 8008ac4:	1d19      	adds	r1, r3, #4
 8008ac6:	6031      	str	r1, [r6, #0]
 8008ac8:	0606      	lsls	r6, r0, #24
 8008aca:	d501      	bpl.n	8008ad0 <_printf_i+0xbc>
 8008acc:	681d      	ldr	r5, [r3, #0]
 8008ace:	e003      	b.n	8008ad8 <_printf_i+0xc4>
 8008ad0:	0645      	lsls	r5, r0, #25
 8008ad2:	d5fb      	bpl.n	8008acc <_printf_i+0xb8>
 8008ad4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ad8:	2d00      	cmp	r5, #0
 8008ada:	da03      	bge.n	8008ae4 <_printf_i+0xd0>
 8008adc:	232d      	movs	r3, #45	@ 0x2d
 8008ade:	426d      	negs	r5, r5
 8008ae0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ae4:	230a      	movs	r3, #10
 8008ae6:	4858      	ldr	r0, [pc, #352]	@ (8008c48 <_printf_i+0x234>)
 8008ae8:	e011      	b.n	8008b0e <_printf_i+0xfa>
 8008aea:	6821      	ldr	r1, [r4, #0]
 8008aec:	6833      	ldr	r3, [r6, #0]
 8008aee:	0608      	lsls	r0, r1, #24
 8008af0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008af4:	d402      	bmi.n	8008afc <_printf_i+0xe8>
 8008af6:	0649      	lsls	r1, r1, #25
 8008af8:	bf48      	it	mi
 8008afa:	b2ad      	uxthmi	r5, r5
 8008afc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008afe:	6033      	str	r3, [r6, #0]
 8008b00:	bf14      	ite	ne
 8008b02:	230a      	movne	r3, #10
 8008b04:	2308      	moveq	r3, #8
 8008b06:	4850      	ldr	r0, [pc, #320]	@ (8008c48 <_printf_i+0x234>)
 8008b08:	2100      	movs	r1, #0
 8008b0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b0e:	6866      	ldr	r6, [r4, #4]
 8008b10:	2e00      	cmp	r6, #0
 8008b12:	60a6      	str	r6, [r4, #8]
 8008b14:	db05      	blt.n	8008b22 <_printf_i+0x10e>
 8008b16:	6821      	ldr	r1, [r4, #0]
 8008b18:	432e      	orrs	r6, r5
 8008b1a:	f021 0104 	bic.w	r1, r1, #4
 8008b1e:	6021      	str	r1, [r4, #0]
 8008b20:	d04b      	beq.n	8008bba <_printf_i+0x1a6>
 8008b22:	4616      	mov	r6, r2
 8008b24:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b28:	fb03 5711 	mls	r7, r3, r1, r5
 8008b2c:	5dc7      	ldrb	r7, [r0, r7]
 8008b2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b32:	462f      	mov	r7, r5
 8008b34:	42bb      	cmp	r3, r7
 8008b36:	460d      	mov	r5, r1
 8008b38:	d9f4      	bls.n	8008b24 <_printf_i+0x110>
 8008b3a:	2b08      	cmp	r3, #8
 8008b3c:	d10b      	bne.n	8008b56 <_printf_i+0x142>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	07df      	lsls	r7, r3, #31
 8008b42:	d508      	bpl.n	8008b56 <_printf_i+0x142>
 8008b44:	6923      	ldr	r3, [r4, #16]
 8008b46:	6861      	ldr	r1, [r4, #4]
 8008b48:	4299      	cmp	r1, r3
 8008b4a:	bfde      	ittt	le
 8008b4c:	2330      	movle	r3, #48	@ 0x30
 8008b4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b56:	1b92      	subs	r2, r2, r6
 8008b58:	6122      	str	r2, [r4, #16]
 8008b5a:	464b      	mov	r3, r9
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	4640      	mov	r0, r8
 8008b60:	f8cd a000 	str.w	sl, [sp]
 8008b64:	aa03      	add	r2, sp, #12
 8008b66:	f7ff fee3 	bl	8008930 <_printf_common>
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	d14a      	bne.n	8008c04 <_printf_i+0x1f0>
 8008b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b72:	b004      	add	sp, #16
 8008b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	f043 0320 	orr.w	r3, r3, #32
 8008b7e:	6023      	str	r3, [r4, #0]
 8008b80:	2778      	movs	r7, #120	@ 0x78
 8008b82:	4832      	ldr	r0, [pc, #200]	@ (8008c4c <_printf_i+0x238>)
 8008b84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	6831      	ldr	r1, [r6, #0]
 8008b8c:	061f      	lsls	r7, r3, #24
 8008b8e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b92:	d402      	bmi.n	8008b9a <_printf_i+0x186>
 8008b94:	065f      	lsls	r7, r3, #25
 8008b96:	bf48      	it	mi
 8008b98:	b2ad      	uxthmi	r5, r5
 8008b9a:	6031      	str	r1, [r6, #0]
 8008b9c:	07d9      	lsls	r1, r3, #31
 8008b9e:	bf44      	itt	mi
 8008ba0:	f043 0320 	orrmi.w	r3, r3, #32
 8008ba4:	6023      	strmi	r3, [r4, #0]
 8008ba6:	b11d      	cbz	r5, 8008bb0 <_printf_i+0x19c>
 8008ba8:	2310      	movs	r3, #16
 8008baa:	e7ad      	b.n	8008b08 <_printf_i+0xf4>
 8008bac:	4826      	ldr	r0, [pc, #152]	@ (8008c48 <_printf_i+0x234>)
 8008bae:	e7e9      	b.n	8008b84 <_printf_i+0x170>
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	f023 0320 	bic.w	r3, r3, #32
 8008bb6:	6023      	str	r3, [r4, #0]
 8008bb8:	e7f6      	b.n	8008ba8 <_printf_i+0x194>
 8008bba:	4616      	mov	r6, r2
 8008bbc:	e7bd      	b.n	8008b3a <_printf_i+0x126>
 8008bbe:	6833      	ldr	r3, [r6, #0]
 8008bc0:	6825      	ldr	r5, [r4, #0]
 8008bc2:	1d18      	adds	r0, r3, #4
 8008bc4:	6961      	ldr	r1, [r4, #20]
 8008bc6:	6030      	str	r0, [r6, #0]
 8008bc8:	062e      	lsls	r6, r5, #24
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	d501      	bpl.n	8008bd2 <_printf_i+0x1be>
 8008bce:	6019      	str	r1, [r3, #0]
 8008bd0:	e002      	b.n	8008bd8 <_printf_i+0x1c4>
 8008bd2:	0668      	lsls	r0, r5, #25
 8008bd4:	d5fb      	bpl.n	8008bce <_printf_i+0x1ba>
 8008bd6:	8019      	strh	r1, [r3, #0]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4616      	mov	r6, r2
 8008bdc:	6123      	str	r3, [r4, #16]
 8008bde:	e7bc      	b.n	8008b5a <_printf_i+0x146>
 8008be0:	6833      	ldr	r3, [r6, #0]
 8008be2:	2100      	movs	r1, #0
 8008be4:	1d1a      	adds	r2, r3, #4
 8008be6:	6032      	str	r2, [r6, #0]
 8008be8:	681e      	ldr	r6, [r3, #0]
 8008bea:	6862      	ldr	r2, [r4, #4]
 8008bec:	4630      	mov	r0, r6
 8008bee:	f000 fd00 	bl	80095f2 <memchr>
 8008bf2:	b108      	cbz	r0, 8008bf8 <_printf_i+0x1e4>
 8008bf4:	1b80      	subs	r0, r0, r6
 8008bf6:	6060      	str	r0, [r4, #4]
 8008bf8:	6863      	ldr	r3, [r4, #4]
 8008bfa:	6123      	str	r3, [r4, #16]
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c02:	e7aa      	b.n	8008b5a <_printf_i+0x146>
 8008c04:	4632      	mov	r2, r6
 8008c06:	4649      	mov	r1, r9
 8008c08:	4640      	mov	r0, r8
 8008c0a:	6923      	ldr	r3, [r4, #16]
 8008c0c:	47d0      	blx	sl
 8008c0e:	3001      	adds	r0, #1
 8008c10:	d0ad      	beq.n	8008b6e <_printf_i+0x15a>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	079b      	lsls	r3, r3, #30
 8008c16:	d413      	bmi.n	8008c40 <_printf_i+0x22c>
 8008c18:	68e0      	ldr	r0, [r4, #12]
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	4298      	cmp	r0, r3
 8008c1e:	bfb8      	it	lt
 8008c20:	4618      	movlt	r0, r3
 8008c22:	e7a6      	b.n	8008b72 <_printf_i+0x15e>
 8008c24:	2301      	movs	r3, #1
 8008c26:	4632      	mov	r2, r6
 8008c28:	4649      	mov	r1, r9
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	47d0      	blx	sl
 8008c2e:	3001      	adds	r0, #1
 8008c30:	d09d      	beq.n	8008b6e <_printf_i+0x15a>
 8008c32:	3501      	adds	r5, #1
 8008c34:	68e3      	ldr	r3, [r4, #12]
 8008c36:	9903      	ldr	r1, [sp, #12]
 8008c38:	1a5b      	subs	r3, r3, r1
 8008c3a:	42ab      	cmp	r3, r5
 8008c3c:	dcf2      	bgt.n	8008c24 <_printf_i+0x210>
 8008c3e:	e7eb      	b.n	8008c18 <_printf_i+0x204>
 8008c40:	2500      	movs	r5, #0
 8008c42:	f104 0619 	add.w	r6, r4, #25
 8008c46:	e7f5      	b.n	8008c34 <_printf_i+0x220>
 8008c48:	0800c1c0 	.word	0x0800c1c0
 8008c4c:	0800c1d1 	.word	0x0800c1d1

08008c50 <_scanf_float>:
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	b087      	sub	sp, #28
 8008c56:	9303      	str	r3, [sp, #12]
 8008c58:	688b      	ldr	r3, [r1, #8]
 8008c5a:	4691      	mov	r9, r2
 8008c5c:	1e5a      	subs	r2, r3, #1
 8008c5e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008c62:	bf82      	ittt	hi
 8008c64:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008c68:	eb03 0b05 	addhi.w	fp, r3, r5
 8008c6c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008c70:	460a      	mov	r2, r1
 8008c72:	f04f 0500 	mov.w	r5, #0
 8008c76:	bf88      	it	hi
 8008c78:	608b      	strhi	r3, [r1, #8]
 8008c7a:	680b      	ldr	r3, [r1, #0]
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008c82:	f842 3b1c 	str.w	r3, [r2], #28
 8008c86:	460c      	mov	r4, r1
 8008c88:	bf98      	it	ls
 8008c8a:	f04f 0b00 	movls.w	fp, #0
 8008c8e:	4616      	mov	r6, r2
 8008c90:	46aa      	mov	sl, r5
 8008c92:	462f      	mov	r7, r5
 8008c94:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008c98:	9201      	str	r2, [sp, #4]
 8008c9a:	9502      	str	r5, [sp, #8]
 8008c9c:	68a2      	ldr	r2, [r4, #8]
 8008c9e:	b15a      	cbz	r2, 8008cb8 <_scanf_float+0x68>
 8008ca0:	f8d9 3000 	ldr.w	r3, [r9]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b4e      	cmp	r3, #78	@ 0x4e
 8008ca8:	d862      	bhi.n	8008d70 <_scanf_float+0x120>
 8008caa:	2b40      	cmp	r3, #64	@ 0x40
 8008cac:	d83a      	bhi.n	8008d24 <_scanf_float+0xd4>
 8008cae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008cb2:	b2c8      	uxtb	r0, r1
 8008cb4:	280e      	cmp	r0, #14
 8008cb6:	d938      	bls.n	8008d2a <_scanf_float+0xda>
 8008cb8:	b11f      	cbz	r7, 8008cc2 <_scanf_float+0x72>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cc6:	f1ba 0f01 	cmp.w	sl, #1
 8008cca:	f200 8114 	bhi.w	8008ef6 <_scanf_float+0x2a6>
 8008cce:	9b01      	ldr	r3, [sp, #4]
 8008cd0:	429e      	cmp	r6, r3
 8008cd2:	f200 8105 	bhi.w	8008ee0 <_scanf_float+0x290>
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	b007      	add	sp, #28
 8008cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cde:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008ce2:	2a0d      	cmp	r2, #13
 8008ce4:	d8e8      	bhi.n	8008cb8 <_scanf_float+0x68>
 8008ce6:	a101      	add	r1, pc, #4	@ (adr r1, 8008cec <_scanf_float+0x9c>)
 8008ce8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008cec:	08008e35 	.word	0x08008e35
 8008cf0:	08008cb9 	.word	0x08008cb9
 8008cf4:	08008cb9 	.word	0x08008cb9
 8008cf8:	08008cb9 	.word	0x08008cb9
 8008cfc:	08008e91 	.word	0x08008e91
 8008d00:	08008e6b 	.word	0x08008e6b
 8008d04:	08008cb9 	.word	0x08008cb9
 8008d08:	08008cb9 	.word	0x08008cb9
 8008d0c:	08008e43 	.word	0x08008e43
 8008d10:	08008cb9 	.word	0x08008cb9
 8008d14:	08008cb9 	.word	0x08008cb9
 8008d18:	08008cb9 	.word	0x08008cb9
 8008d1c:	08008cb9 	.word	0x08008cb9
 8008d20:	08008dff 	.word	0x08008dff
 8008d24:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008d28:	e7db      	b.n	8008ce2 <_scanf_float+0x92>
 8008d2a:	290e      	cmp	r1, #14
 8008d2c:	d8c4      	bhi.n	8008cb8 <_scanf_float+0x68>
 8008d2e:	a001      	add	r0, pc, #4	@ (adr r0, 8008d34 <_scanf_float+0xe4>)
 8008d30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008d34:	08008def 	.word	0x08008def
 8008d38:	08008cb9 	.word	0x08008cb9
 8008d3c:	08008def 	.word	0x08008def
 8008d40:	08008e7f 	.word	0x08008e7f
 8008d44:	08008cb9 	.word	0x08008cb9
 8008d48:	08008d91 	.word	0x08008d91
 8008d4c:	08008dd5 	.word	0x08008dd5
 8008d50:	08008dd5 	.word	0x08008dd5
 8008d54:	08008dd5 	.word	0x08008dd5
 8008d58:	08008dd5 	.word	0x08008dd5
 8008d5c:	08008dd5 	.word	0x08008dd5
 8008d60:	08008dd5 	.word	0x08008dd5
 8008d64:	08008dd5 	.word	0x08008dd5
 8008d68:	08008dd5 	.word	0x08008dd5
 8008d6c:	08008dd5 	.word	0x08008dd5
 8008d70:	2b6e      	cmp	r3, #110	@ 0x6e
 8008d72:	d809      	bhi.n	8008d88 <_scanf_float+0x138>
 8008d74:	2b60      	cmp	r3, #96	@ 0x60
 8008d76:	d8b2      	bhi.n	8008cde <_scanf_float+0x8e>
 8008d78:	2b54      	cmp	r3, #84	@ 0x54
 8008d7a:	d07b      	beq.n	8008e74 <_scanf_float+0x224>
 8008d7c:	2b59      	cmp	r3, #89	@ 0x59
 8008d7e:	d19b      	bne.n	8008cb8 <_scanf_float+0x68>
 8008d80:	2d07      	cmp	r5, #7
 8008d82:	d199      	bne.n	8008cb8 <_scanf_float+0x68>
 8008d84:	2508      	movs	r5, #8
 8008d86:	e02f      	b.n	8008de8 <_scanf_float+0x198>
 8008d88:	2b74      	cmp	r3, #116	@ 0x74
 8008d8a:	d073      	beq.n	8008e74 <_scanf_float+0x224>
 8008d8c:	2b79      	cmp	r3, #121	@ 0x79
 8008d8e:	e7f6      	b.n	8008d7e <_scanf_float+0x12e>
 8008d90:	6821      	ldr	r1, [r4, #0]
 8008d92:	05c8      	lsls	r0, r1, #23
 8008d94:	d51e      	bpl.n	8008dd4 <_scanf_float+0x184>
 8008d96:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008d9a:	6021      	str	r1, [r4, #0]
 8008d9c:	3701      	adds	r7, #1
 8008d9e:	f1bb 0f00 	cmp.w	fp, #0
 8008da2:	d003      	beq.n	8008dac <_scanf_float+0x15c>
 8008da4:	3201      	adds	r2, #1
 8008da6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008daa:	60a2      	str	r2, [r4, #8]
 8008dac:	68a3      	ldr	r3, [r4, #8]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	60a3      	str	r3, [r4, #8]
 8008db2:	6923      	ldr	r3, [r4, #16]
 8008db4:	3301      	adds	r3, #1
 8008db6:	6123      	str	r3, [r4, #16]
 8008db8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f8c9 3004 	str.w	r3, [r9, #4]
 8008dc4:	f340 8083 	ble.w	8008ece <_scanf_float+0x27e>
 8008dc8:	f8d9 3000 	ldr.w	r3, [r9]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	f8c9 3000 	str.w	r3, [r9]
 8008dd2:	e763      	b.n	8008c9c <_scanf_float+0x4c>
 8008dd4:	eb1a 0105 	adds.w	r1, sl, r5
 8008dd8:	f47f af6e 	bne.w	8008cb8 <_scanf_float+0x68>
 8008ddc:	460d      	mov	r5, r1
 8008dde:	468a      	mov	sl, r1
 8008de0:	6822      	ldr	r2, [r4, #0]
 8008de2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008de6:	6022      	str	r2, [r4, #0]
 8008de8:	f806 3b01 	strb.w	r3, [r6], #1
 8008dec:	e7de      	b.n	8008dac <_scanf_float+0x15c>
 8008dee:	6822      	ldr	r2, [r4, #0]
 8008df0:	0610      	lsls	r0, r2, #24
 8008df2:	f57f af61 	bpl.w	8008cb8 <_scanf_float+0x68>
 8008df6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008dfa:	6022      	str	r2, [r4, #0]
 8008dfc:	e7f4      	b.n	8008de8 <_scanf_float+0x198>
 8008dfe:	f1ba 0f00 	cmp.w	sl, #0
 8008e02:	d10c      	bne.n	8008e1e <_scanf_float+0x1ce>
 8008e04:	b977      	cbnz	r7, 8008e24 <_scanf_float+0x1d4>
 8008e06:	6822      	ldr	r2, [r4, #0]
 8008e08:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008e0c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008e10:	d108      	bne.n	8008e24 <_scanf_float+0x1d4>
 8008e12:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008e16:	f04f 0a01 	mov.w	sl, #1
 8008e1a:	6022      	str	r2, [r4, #0]
 8008e1c:	e7e4      	b.n	8008de8 <_scanf_float+0x198>
 8008e1e:	f1ba 0f02 	cmp.w	sl, #2
 8008e22:	d051      	beq.n	8008ec8 <_scanf_float+0x278>
 8008e24:	2d01      	cmp	r5, #1
 8008e26:	d002      	beq.n	8008e2e <_scanf_float+0x1de>
 8008e28:	2d04      	cmp	r5, #4
 8008e2a:	f47f af45 	bne.w	8008cb8 <_scanf_float+0x68>
 8008e2e:	3501      	adds	r5, #1
 8008e30:	b2ed      	uxtb	r5, r5
 8008e32:	e7d9      	b.n	8008de8 <_scanf_float+0x198>
 8008e34:	f1ba 0f01 	cmp.w	sl, #1
 8008e38:	f47f af3e 	bne.w	8008cb8 <_scanf_float+0x68>
 8008e3c:	f04f 0a02 	mov.w	sl, #2
 8008e40:	e7d2      	b.n	8008de8 <_scanf_float+0x198>
 8008e42:	b975      	cbnz	r5, 8008e62 <_scanf_float+0x212>
 8008e44:	2f00      	cmp	r7, #0
 8008e46:	f47f af38 	bne.w	8008cba <_scanf_float+0x6a>
 8008e4a:	6822      	ldr	r2, [r4, #0]
 8008e4c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008e50:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008e54:	f040 80ff 	bne.w	8009056 <_scanf_float+0x406>
 8008e58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008e5c:	2501      	movs	r5, #1
 8008e5e:	6022      	str	r2, [r4, #0]
 8008e60:	e7c2      	b.n	8008de8 <_scanf_float+0x198>
 8008e62:	2d03      	cmp	r5, #3
 8008e64:	d0e3      	beq.n	8008e2e <_scanf_float+0x1de>
 8008e66:	2d05      	cmp	r5, #5
 8008e68:	e7df      	b.n	8008e2a <_scanf_float+0x1da>
 8008e6a:	2d02      	cmp	r5, #2
 8008e6c:	f47f af24 	bne.w	8008cb8 <_scanf_float+0x68>
 8008e70:	2503      	movs	r5, #3
 8008e72:	e7b9      	b.n	8008de8 <_scanf_float+0x198>
 8008e74:	2d06      	cmp	r5, #6
 8008e76:	f47f af1f 	bne.w	8008cb8 <_scanf_float+0x68>
 8008e7a:	2507      	movs	r5, #7
 8008e7c:	e7b4      	b.n	8008de8 <_scanf_float+0x198>
 8008e7e:	6822      	ldr	r2, [r4, #0]
 8008e80:	0591      	lsls	r1, r2, #22
 8008e82:	f57f af19 	bpl.w	8008cb8 <_scanf_float+0x68>
 8008e86:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008e8a:	6022      	str	r2, [r4, #0]
 8008e8c:	9702      	str	r7, [sp, #8]
 8008e8e:	e7ab      	b.n	8008de8 <_scanf_float+0x198>
 8008e90:	6822      	ldr	r2, [r4, #0]
 8008e92:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008e96:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008e9a:	d005      	beq.n	8008ea8 <_scanf_float+0x258>
 8008e9c:	0550      	lsls	r0, r2, #21
 8008e9e:	f57f af0b 	bpl.w	8008cb8 <_scanf_float+0x68>
 8008ea2:	2f00      	cmp	r7, #0
 8008ea4:	f000 80d7 	beq.w	8009056 <_scanf_float+0x406>
 8008ea8:	0591      	lsls	r1, r2, #22
 8008eaa:	bf58      	it	pl
 8008eac:	9902      	ldrpl	r1, [sp, #8]
 8008eae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008eb2:	bf58      	it	pl
 8008eb4:	1a79      	subpl	r1, r7, r1
 8008eb6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008eba:	f04f 0700 	mov.w	r7, #0
 8008ebe:	bf58      	it	pl
 8008ec0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008ec4:	6022      	str	r2, [r4, #0]
 8008ec6:	e78f      	b.n	8008de8 <_scanf_float+0x198>
 8008ec8:	f04f 0a03 	mov.w	sl, #3
 8008ecc:	e78c      	b.n	8008de8 <_scanf_float+0x198>
 8008ece:	4649      	mov	r1, r9
 8008ed0:	4640      	mov	r0, r8
 8008ed2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008ed6:	4798      	blx	r3
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	f43f aedf 	beq.w	8008c9c <_scanf_float+0x4c>
 8008ede:	e6eb      	b.n	8008cb8 <_scanf_float+0x68>
 8008ee0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ee4:	464a      	mov	r2, r9
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008eec:	4798      	blx	r3
 8008eee:	6923      	ldr	r3, [r4, #16]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	6123      	str	r3, [r4, #16]
 8008ef4:	e6eb      	b.n	8008cce <_scanf_float+0x7e>
 8008ef6:	1e6b      	subs	r3, r5, #1
 8008ef8:	2b06      	cmp	r3, #6
 8008efa:	d824      	bhi.n	8008f46 <_scanf_float+0x2f6>
 8008efc:	2d02      	cmp	r5, #2
 8008efe:	d836      	bhi.n	8008f6e <_scanf_float+0x31e>
 8008f00:	9b01      	ldr	r3, [sp, #4]
 8008f02:	429e      	cmp	r6, r3
 8008f04:	f67f aee7 	bls.w	8008cd6 <_scanf_float+0x86>
 8008f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f0c:	464a      	mov	r2, r9
 8008f0e:	4640      	mov	r0, r8
 8008f10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f14:	4798      	blx	r3
 8008f16:	6923      	ldr	r3, [r4, #16]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	6123      	str	r3, [r4, #16]
 8008f1c:	e7f0      	b.n	8008f00 <_scanf_float+0x2b0>
 8008f1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f22:	464a      	mov	r2, r9
 8008f24:	4640      	mov	r0, r8
 8008f26:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008f2a:	4798      	blx	r3
 8008f2c:	6923      	ldr	r3, [r4, #16]
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	6123      	str	r3, [r4, #16]
 8008f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f36:	fa5f fa8a 	uxtb.w	sl, sl
 8008f3a:	f1ba 0f02 	cmp.w	sl, #2
 8008f3e:	d1ee      	bne.n	8008f1e <_scanf_float+0x2ce>
 8008f40:	3d03      	subs	r5, #3
 8008f42:	b2ed      	uxtb	r5, r5
 8008f44:	1b76      	subs	r6, r6, r5
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	05da      	lsls	r2, r3, #23
 8008f4a:	d530      	bpl.n	8008fae <_scanf_float+0x35e>
 8008f4c:	055b      	lsls	r3, r3, #21
 8008f4e:	d511      	bpl.n	8008f74 <_scanf_float+0x324>
 8008f50:	9b01      	ldr	r3, [sp, #4]
 8008f52:	429e      	cmp	r6, r3
 8008f54:	f67f aebf 	bls.w	8008cd6 <_scanf_float+0x86>
 8008f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f5c:	464a      	mov	r2, r9
 8008f5e:	4640      	mov	r0, r8
 8008f60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f64:	4798      	blx	r3
 8008f66:	6923      	ldr	r3, [r4, #16]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	6123      	str	r3, [r4, #16]
 8008f6c:	e7f0      	b.n	8008f50 <_scanf_float+0x300>
 8008f6e:	46aa      	mov	sl, r5
 8008f70:	46b3      	mov	fp, r6
 8008f72:	e7de      	b.n	8008f32 <_scanf_float+0x2e2>
 8008f74:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008f78:	6923      	ldr	r3, [r4, #16]
 8008f7a:	2965      	cmp	r1, #101	@ 0x65
 8008f7c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f80:	f106 35ff 	add.w	r5, r6, #4294967295
 8008f84:	6123      	str	r3, [r4, #16]
 8008f86:	d00c      	beq.n	8008fa2 <_scanf_float+0x352>
 8008f88:	2945      	cmp	r1, #69	@ 0x45
 8008f8a:	d00a      	beq.n	8008fa2 <_scanf_float+0x352>
 8008f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f90:	464a      	mov	r2, r9
 8008f92:	4640      	mov	r0, r8
 8008f94:	4798      	blx	r3
 8008f96:	6923      	ldr	r3, [r4, #16]
 8008f98:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	1eb5      	subs	r5, r6, #2
 8008fa0:	6123      	str	r3, [r4, #16]
 8008fa2:	464a      	mov	r2, r9
 8008fa4:	4640      	mov	r0, r8
 8008fa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008faa:	4798      	blx	r3
 8008fac:	462e      	mov	r6, r5
 8008fae:	6822      	ldr	r2, [r4, #0]
 8008fb0:	f012 0210 	ands.w	r2, r2, #16
 8008fb4:	d001      	beq.n	8008fba <_scanf_float+0x36a>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	e68e      	b.n	8008cd8 <_scanf_float+0x88>
 8008fba:	7032      	strb	r2, [r6, #0]
 8008fbc:	6823      	ldr	r3, [r4, #0]
 8008fbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fc6:	d125      	bne.n	8009014 <_scanf_float+0x3c4>
 8008fc8:	9b02      	ldr	r3, [sp, #8]
 8008fca:	429f      	cmp	r7, r3
 8008fcc:	d00a      	beq.n	8008fe4 <_scanf_float+0x394>
 8008fce:	1bda      	subs	r2, r3, r7
 8008fd0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008fd4:	429e      	cmp	r6, r3
 8008fd6:	bf28      	it	cs
 8008fd8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008fdc:	4630      	mov	r0, r6
 8008fde:	491f      	ldr	r1, [pc, #124]	@ (800905c <_scanf_float+0x40c>)
 8008fe0:	f000 f938 	bl	8009254 <siprintf>
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	9901      	ldr	r1, [sp, #4]
 8008fea:	f7ff f9c5 	bl	8008378 <_strtod_r>
 8008fee:	9b03      	ldr	r3, [sp, #12]
 8008ff0:	6825      	ldr	r5, [r4, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f015 0f02 	tst.w	r5, #2
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	460f      	mov	r7, r1
 8008ffc:	f103 0204 	add.w	r2, r3, #4
 8009000:	d015      	beq.n	800902e <_scanf_float+0x3de>
 8009002:	9903      	ldr	r1, [sp, #12]
 8009004:	600a      	str	r2, [r1, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	e9c3 6700 	strd	r6, r7, [r3]
 800900c:	68e3      	ldr	r3, [r4, #12]
 800900e:	3301      	adds	r3, #1
 8009010:	60e3      	str	r3, [r4, #12]
 8009012:	e7d0      	b.n	8008fb6 <_scanf_float+0x366>
 8009014:	9b04      	ldr	r3, [sp, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0e4      	beq.n	8008fe4 <_scanf_float+0x394>
 800901a:	9905      	ldr	r1, [sp, #20]
 800901c:	230a      	movs	r3, #10
 800901e:	4640      	mov	r0, r8
 8009020:	3101      	adds	r1, #1
 8009022:	f002 fa17 	bl	800b454 <_strtol_r>
 8009026:	9b04      	ldr	r3, [sp, #16]
 8009028:	9e05      	ldr	r6, [sp, #20]
 800902a:	1ac2      	subs	r2, r0, r3
 800902c:	e7d0      	b.n	8008fd0 <_scanf_float+0x380>
 800902e:	076d      	lsls	r5, r5, #29
 8009030:	d4e7      	bmi.n	8009002 <_scanf_float+0x3b2>
 8009032:	9d03      	ldr	r5, [sp, #12]
 8009034:	602a      	str	r2, [r5, #0]
 8009036:	681d      	ldr	r5, [r3, #0]
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	f7f7 fcf0 	bl	8000a20 <__aeabi_dcmpun>
 8009040:	b120      	cbz	r0, 800904c <_scanf_float+0x3fc>
 8009042:	4807      	ldr	r0, [pc, #28]	@ (8009060 <_scanf_float+0x410>)
 8009044:	f000 faf8 	bl	8009638 <nanf>
 8009048:	6028      	str	r0, [r5, #0]
 800904a:	e7df      	b.n	800900c <_scanf_float+0x3bc>
 800904c:	4630      	mov	r0, r6
 800904e:	4639      	mov	r1, r7
 8009050:	f7f7 fd44 	bl	8000adc <__aeabi_d2f>
 8009054:	e7f8      	b.n	8009048 <_scanf_float+0x3f8>
 8009056:	2700      	movs	r7, #0
 8009058:	e633      	b.n	8008cc2 <_scanf_float+0x72>
 800905a:	bf00      	nop
 800905c:	0800c1e2 	.word	0x0800c1e2
 8009060:	0800c381 	.word	0x0800c381

08009064 <std>:
 8009064:	2300      	movs	r3, #0
 8009066:	b510      	push	{r4, lr}
 8009068:	4604      	mov	r4, r0
 800906a:	e9c0 3300 	strd	r3, r3, [r0]
 800906e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009072:	6083      	str	r3, [r0, #8]
 8009074:	8181      	strh	r1, [r0, #12]
 8009076:	6643      	str	r3, [r0, #100]	@ 0x64
 8009078:	81c2      	strh	r2, [r0, #14]
 800907a:	6183      	str	r3, [r0, #24]
 800907c:	4619      	mov	r1, r3
 800907e:	2208      	movs	r2, #8
 8009080:	305c      	adds	r0, #92	@ 0x5c
 8009082:	f000 f9e1 	bl	8009448 <memset>
 8009086:	4b0d      	ldr	r3, [pc, #52]	@ (80090bc <std+0x58>)
 8009088:	6224      	str	r4, [r4, #32]
 800908a:	6263      	str	r3, [r4, #36]	@ 0x24
 800908c:	4b0c      	ldr	r3, [pc, #48]	@ (80090c0 <std+0x5c>)
 800908e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009090:	4b0c      	ldr	r3, [pc, #48]	@ (80090c4 <std+0x60>)
 8009092:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009094:	4b0c      	ldr	r3, [pc, #48]	@ (80090c8 <std+0x64>)
 8009096:	6323      	str	r3, [r4, #48]	@ 0x30
 8009098:	4b0c      	ldr	r3, [pc, #48]	@ (80090cc <std+0x68>)
 800909a:	429c      	cmp	r4, r3
 800909c:	d006      	beq.n	80090ac <std+0x48>
 800909e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80090a2:	4294      	cmp	r4, r2
 80090a4:	d002      	beq.n	80090ac <std+0x48>
 80090a6:	33d0      	adds	r3, #208	@ 0xd0
 80090a8:	429c      	cmp	r4, r3
 80090aa:	d105      	bne.n	80090b8 <std+0x54>
 80090ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80090b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090b4:	f000 ba92 	b.w	80095dc <__retarget_lock_init_recursive>
 80090b8:	bd10      	pop	{r4, pc}
 80090ba:	bf00      	nop
 80090bc:	08009299 	.word	0x08009299
 80090c0:	080092bb 	.word	0x080092bb
 80090c4:	080092f3 	.word	0x080092f3
 80090c8:	08009317 	.word	0x08009317
 80090cc:	20000aa8 	.word	0x20000aa8

080090d0 <stdio_exit_handler>:
 80090d0:	4a02      	ldr	r2, [pc, #8]	@ (80090dc <stdio_exit_handler+0xc>)
 80090d2:	4903      	ldr	r1, [pc, #12]	@ (80090e0 <stdio_exit_handler+0x10>)
 80090d4:	4803      	ldr	r0, [pc, #12]	@ (80090e4 <stdio_exit_handler+0x14>)
 80090d6:	f000 b869 	b.w	80091ac <_fwalk_sglue>
 80090da:	bf00      	nop
 80090dc:	20000044 	.word	0x20000044
 80090e0:	0800baa1 	.word	0x0800baa1
 80090e4:	200001c0 	.word	0x200001c0

080090e8 <cleanup_stdio>:
 80090e8:	6841      	ldr	r1, [r0, #4]
 80090ea:	4b0c      	ldr	r3, [pc, #48]	@ (800911c <cleanup_stdio+0x34>)
 80090ec:	b510      	push	{r4, lr}
 80090ee:	4299      	cmp	r1, r3
 80090f0:	4604      	mov	r4, r0
 80090f2:	d001      	beq.n	80090f8 <cleanup_stdio+0x10>
 80090f4:	f002 fcd4 	bl	800baa0 <_fflush_r>
 80090f8:	68a1      	ldr	r1, [r4, #8]
 80090fa:	4b09      	ldr	r3, [pc, #36]	@ (8009120 <cleanup_stdio+0x38>)
 80090fc:	4299      	cmp	r1, r3
 80090fe:	d002      	beq.n	8009106 <cleanup_stdio+0x1e>
 8009100:	4620      	mov	r0, r4
 8009102:	f002 fccd 	bl	800baa0 <_fflush_r>
 8009106:	68e1      	ldr	r1, [r4, #12]
 8009108:	4b06      	ldr	r3, [pc, #24]	@ (8009124 <cleanup_stdio+0x3c>)
 800910a:	4299      	cmp	r1, r3
 800910c:	d004      	beq.n	8009118 <cleanup_stdio+0x30>
 800910e:	4620      	mov	r0, r4
 8009110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009114:	f002 bcc4 	b.w	800baa0 <_fflush_r>
 8009118:	bd10      	pop	{r4, pc}
 800911a:	bf00      	nop
 800911c:	20000aa8 	.word	0x20000aa8
 8009120:	20000b10 	.word	0x20000b10
 8009124:	20000b78 	.word	0x20000b78

08009128 <global_stdio_init.part.0>:
 8009128:	b510      	push	{r4, lr}
 800912a:	4b0b      	ldr	r3, [pc, #44]	@ (8009158 <global_stdio_init.part.0+0x30>)
 800912c:	4c0b      	ldr	r4, [pc, #44]	@ (800915c <global_stdio_init.part.0+0x34>)
 800912e:	4a0c      	ldr	r2, [pc, #48]	@ (8009160 <global_stdio_init.part.0+0x38>)
 8009130:	4620      	mov	r0, r4
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	2104      	movs	r1, #4
 8009136:	2200      	movs	r2, #0
 8009138:	f7ff ff94 	bl	8009064 <std>
 800913c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009140:	2201      	movs	r2, #1
 8009142:	2109      	movs	r1, #9
 8009144:	f7ff ff8e 	bl	8009064 <std>
 8009148:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800914c:	2202      	movs	r2, #2
 800914e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009152:	2112      	movs	r1, #18
 8009154:	f7ff bf86 	b.w	8009064 <std>
 8009158:	20000be0 	.word	0x20000be0
 800915c:	20000aa8 	.word	0x20000aa8
 8009160:	080090d1 	.word	0x080090d1

08009164 <__sfp_lock_acquire>:
 8009164:	4801      	ldr	r0, [pc, #4]	@ (800916c <__sfp_lock_acquire+0x8>)
 8009166:	f000 ba3a 	b.w	80095de <__retarget_lock_acquire_recursive>
 800916a:	bf00      	nop
 800916c:	20000be9 	.word	0x20000be9

08009170 <__sfp_lock_release>:
 8009170:	4801      	ldr	r0, [pc, #4]	@ (8009178 <__sfp_lock_release+0x8>)
 8009172:	f000 ba35 	b.w	80095e0 <__retarget_lock_release_recursive>
 8009176:	bf00      	nop
 8009178:	20000be9 	.word	0x20000be9

0800917c <__sinit>:
 800917c:	b510      	push	{r4, lr}
 800917e:	4604      	mov	r4, r0
 8009180:	f7ff fff0 	bl	8009164 <__sfp_lock_acquire>
 8009184:	6a23      	ldr	r3, [r4, #32]
 8009186:	b11b      	cbz	r3, 8009190 <__sinit+0x14>
 8009188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800918c:	f7ff bff0 	b.w	8009170 <__sfp_lock_release>
 8009190:	4b04      	ldr	r3, [pc, #16]	@ (80091a4 <__sinit+0x28>)
 8009192:	6223      	str	r3, [r4, #32]
 8009194:	4b04      	ldr	r3, [pc, #16]	@ (80091a8 <__sinit+0x2c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1f5      	bne.n	8009188 <__sinit+0xc>
 800919c:	f7ff ffc4 	bl	8009128 <global_stdio_init.part.0>
 80091a0:	e7f2      	b.n	8009188 <__sinit+0xc>
 80091a2:	bf00      	nop
 80091a4:	080090e9 	.word	0x080090e9
 80091a8:	20000be0 	.word	0x20000be0

080091ac <_fwalk_sglue>:
 80091ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b0:	4607      	mov	r7, r0
 80091b2:	4688      	mov	r8, r1
 80091b4:	4614      	mov	r4, r2
 80091b6:	2600      	movs	r6, #0
 80091b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091bc:	f1b9 0901 	subs.w	r9, r9, #1
 80091c0:	d505      	bpl.n	80091ce <_fwalk_sglue+0x22>
 80091c2:	6824      	ldr	r4, [r4, #0]
 80091c4:	2c00      	cmp	r4, #0
 80091c6:	d1f7      	bne.n	80091b8 <_fwalk_sglue+0xc>
 80091c8:	4630      	mov	r0, r6
 80091ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ce:	89ab      	ldrh	r3, [r5, #12]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d907      	bls.n	80091e4 <_fwalk_sglue+0x38>
 80091d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091d8:	3301      	adds	r3, #1
 80091da:	d003      	beq.n	80091e4 <_fwalk_sglue+0x38>
 80091dc:	4629      	mov	r1, r5
 80091de:	4638      	mov	r0, r7
 80091e0:	47c0      	blx	r8
 80091e2:	4306      	orrs	r6, r0
 80091e4:	3568      	adds	r5, #104	@ 0x68
 80091e6:	e7e9      	b.n	80091bc <_fwalk_sglue+0x10>

080091e8 <sniprintf>:
 80091e8:	b40c      	push	{r2, r3}
 80091ea:	b530      	push	{r4, r5, lr}
 80091ec:	4b18      	ldr	r3, [pc, #96]	@ (8009250 <sniprintf+0x68>)
 80091ee:	1e0c      	subs	r4, r1, #0
 80091f0:	681d      	ldr	r5, [r3, #0]
 80091f2:	b09d      	sub	sp, #116	@ 0x74
 80091f4:	da08      	bge.n	8009208 <sniprintf+0x20>
 80091f6:	238b      	movs	r3, #139	@ 0x8b
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295
 80091fc:	602b      	str	r3, [r5, #0]
 80091fe:	b01d      	add	sp, #116	@ 0x74
 8009200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009204:	b002      	add	sp, #8
 8009206:	4770      	bx	lr
 8009208:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800920c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009210:	f04f 0300 	mov.w	r3, #0
 8009214:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009216:	bf0c      	ite	eq
 8009218:	4623      	moveq	r3, r4
 800921a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800921e:	9304      	str	r3, [sp, #16]
 8009220:	9307      	str	r3, [sp, #28]
 8009222:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009226:	9002      	str	r0, [sp, #8]
 8009228:	9006      	str	r0, [sp, #24]
 800922a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800922e:	4628      	mov	r0, r5
 8009230:	ab21      	add	r3, sp, #132	@ 0x84
 8009232:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009234:	a902      	add	r1, sp, #8
 8009236:	9301      	str	r3, [sp, #4]
 8009238:	f002 f976 	bl	800b528 <_svfiprintf_r>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	bfbc      	itt	lt
 8009240:	238b      	movlt	r3, #139	@ 0x8b
 8009242:	602b      	strlt	r3, [r5, #0]
 8009244:	2c00      	cmp	r4, #0
 8009246:	d0da      	beq.n	80091fe <sniprintf+0x16>
 8009248:	2200      	movs	r2, #0
 800924a:	9b02      	ldr	r3, [sp, #8]
 800924c:	701a      	strb	r2, [r3, #0]
 800924e:	e7d6      	b.n	80091fe <sniprintf+0x16>
 8009250:	200001bc 	.word	0x200001bc

08009254 <siprintf>:
 8009254:	b40e      	push	{r1, r2, r3}
 8009256:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800925a:	b510      	push	{r4, lr}
 800925c:	2400      	movs	r4, #0
 800925e:	b09d      	sub	sp, #116	@ 0x74
 8009260:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009262:	9002      	str	r0, [sp, #8]
 8009264:	9006      	str	r0, [sp, #24]
 8009266:	9107      	str	r1, [sp, #28]
 8009268:	9104      	str	r1, [sp, #16]
 800926a:	4809      	ldr	r0, [pc, #36]	@ (8009290 <siprintf+0x3c>)
 800926c:	4909      	ldr	r1, [pc, #36]	@ (8009294 <siprintf+0x40>)
 800926e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009272:	9105      	str	r1, [sp, #20]
 8009274:	6800      	ldr	r0, [r0, #0]
 8009276:	a902      	add	r1, sp, #8
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800927c:	f002 f954 	bl	800b528 <_svfiprintf_r>
 8009280:	9b02      	ldr	r3, [sp, #8]
 8009282:	701c      	strb	r4, [r3, #0]
 8009284:	b01d      	add	sp, #116	@ 0x74
 8009286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800928a:	b003      	add	sp, #12
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	200001bc 	.word	0x200001bc
 8009294:	ffff0208 	.word	0xffff0208

08009298 <__sread>:
 8009298:	b510      	push	{r4, lr}
 800929a:	460c      	mov	r4, r1
 800929c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a0:	f000 f93e 	bl	8009520 <_read_r>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	bfab      	itete	ge
 80092a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80092aa:	89a3      	ldrhlt	r3, [r4, #12]
 80092ac:	181b      	addge	r3, r3, r0
 80092ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80092b2:	bfac      	ite	ge
 80092b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80092b6:	81a3      	strhlt	r3, [r4, #12]
 80092b8:	bd10      	pop	{r4, pc}

080092ba <__swrite>:
 80092ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092be:	461f      	mov	r7, r3
 80092c0:	898b      	ldrh	r3, [r1, #12]
 80092c2:	4605      	mov	r5, r0
 80092c4:	05db      	lsls	r3, r3, #23
 80092c6:	460c      	mov	r4, r1
 80092c8:	4616      	mov	r6, r2
 80092ca:	d505      	bpl.n	80092d8 <__swrite+0x1e>
 80092cc:	2302      	movs	r3, #2
 80092ce:	2200      	movs	r2, #0
 80092d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d4:	f000 f912 	bl	80094fc <_lseek_r>
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	4632      	mov	r2, r6
 80092dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092e0:	81a3      	strh	r3, [r4, #12]
 80092e2:	4628      	mov	r0, r5
 80092e4:	463b      	mov	r3, r7
 80092e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092ee:	f000 b939 	b.w	8009564 <_write_r>

080092f2 <__sseek>:
 80092f2:	b510      	push	{r4, lr}
 80092f4:	460c      	mov	r4, r1
 80092f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092fa:	f000 f8ff 	bl	80094fc <_lseek_r>
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	bf15      	itete	ne
 8009304:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009306:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800930a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800930e:	81a3      	strheq	r3, [r4, #12]
 8009310:	bf18      	it	ne
 8009312:	81a3      	strhne	r3, [r4, #12]
 8009314:	bd10      	pop	{r4, pc}

08009316 <__sclose>:
 8009316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931a:	f000 b8df 	b.w	80094dc <_close_r>

0800931e <__swbuf_r>:
 800931e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009320:	460e      	mov	r6, r1
 8009322:	4614      	mov	r4, r2
 8009324:	4605      	mov	r5, r0
 8009326:	b118      	cbz	r0, 8009330 <__swbuf_r+0x12>
 8009328:	6a03      	ldr	r3, [r0, #32]
 800932a:	b90b      	cbnz	r3, 8009330 <__swbuf_r+0x12>
 800932c:	f7ff ff26 	bl	800917c <__sinit>
 8009330:	69a3      	ldr	r3, [r4, #24]
 8009332:	60a3      	str	r3, [r4, #8]
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	071a      	lsls	r2, r3, #28
 8009338:	d501      	bpl.n	800933e <__swbuf_r+0x20>
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	b943      	cbnz	r3, 8009350 <__swbuf_r+0x32>
 800933e:	4621      	mov	r1, r4
 8009340:	4628      	mov	r0, r5
 8009342:	f000 f82b 	bl	800939c <__swsetup_r>
 8009346:	b118      	cbz	r0, 8009350 <__swbuf_r+0x32>
 8009348:	f04f 37ff 	mov.w	r7, #4294967295
 800934c:	4638      	mov	r0, r7
 800934e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	6922      	ldr	r2, [r4, #16]
 8009354:	b2f6      	uxtb	r6, r6
 8009356:	1a98      	subs	r0, r3, r2
 8009358:	6963      	ldr	r3, [r4, #20]
 800935a:	4637      	mov	r7, r6
 800935c:	4283      	cmp	r3, r0
 800935e:	dc05      	bgt.n	800936c <__swbuf_r+0x4e>
 8009360:	4621      	mov	r1, r4
 8009362:	4628      	mov	r0, r5
 8009364:	f002 fb9c 	bl	800baa0 <_fflush_r>
 8009368:	2800      	cmp	r0, #0
 800936a:	d1ed      	bne.n	8009348 <__swbuf_r+0x2a>
 800936c:	68a3      	ldr	r3, [r4, #8]
 800936e:	3b01      	subs	r3, #1
 8009370:	60a3      	str	r3, [r4, #8]
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	6022      	str	r2, [r4, #0]
 8009378:	701e      	strb	r6, [r3, #0]
 800937a:	6962      	ldr	r2, [r4, #20]
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	429a      	cmp	r2, r3
 8009380:	d004      	beq.n	800938c <__swbuf_r+0x6e>
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	07db      	lsls	r3, r3, #31
 8009386:	d5e1      	bpl.n	800934c <__swbuf_r+0x2e>
 8009388:	2e0a      	cmp	r6, #10
 800938a:	d1df      	bne.n	800934c <__swbuf_r+0x2e>
 800938c:	4621      	mov	r1, r4
 800938e:	4628      	mov	r0, r5
 8009390:	f002 fb86 	bl	800baa0 <_fflush_r>
 8009394:	2800      	cmp	r0, #0
 8009396:	d0d9      	beq.n	800934c <__swbuf_r+0x2e>
 8009398:	e7d6      	b.n	8009348 <__swbuf_r+0x2a>
	...

0800939c <__swsetup_r>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4b29      	ldr	r3, [pc, #164]	@ (8009444 <__swsetup_r+0xa8>)
 80093a0:	4605      	mov	r5, r0
 80093a2:	6818      	ldr	r0, [r3, #0]
 80093a4:	460c      	mov	r4, r1
 80093a6:	b118      	cbz	r0, 80093b0 <__swsetup_r+0x14>
 80093a8:	6a03      	ldr	r3, [r0, #32]
 80093aa:	b90b      	cbnz	r3, 80093b0 <__swsetup_r+0x14>
 80093ac:	f7ff fee6 	bl	800917c <__sinit>
 80093b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b4:	0719      	lsls	r1, r3, #28
 80093b6:	d422      	bmi.n	80093fe <__swsetup_r+0x62>
 80093b8:	06da      	lsls	r2, r3, #27
 80093ba:	d407      	bmi.n	80093cc <__swsetup_r+0x30>
 80093bc:	2209      	movs	r2, #9
 80093be:	602a      	str	r2, [r5, #0]
 80093c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093c4:	f04f 30ff 	mov.w	r0, #4294967295
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	e033      	b.n	8009434 <__swsetup_r+0x98>
 80093cc:	0758      	lsls	r0, r3, #29
 80093ce:	d512      	bpl.n	80093f6 <__swsetup_r+0x5a>
 80093d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093d2:	b141      	cbz	r1, 80093e6 <__swsetup_r+0x4a>
 80093d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093d8:	4299      	cmp	r1, r3
 80093da:	d002      	beq.n	80093e2 <__swsetup_r+0x46>
 80093dc:	4628      	mov	r0, r5
 80093de:	f000 ff8b 	bl	800a2f8 <_free_r>
 80093e2:	2300      	movs	r3, #0
 80093e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	2300      	movs	r3, #0
 80093f0:	6063      	str	r3, [r4, #4]
 80093f2:	6923      	ldr	r3, [r4, #16]
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	f043 0308 	orr.w	r3, r3, #8
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	b94b      	cbnz	r3, 8009416 <__swsetup_r+0x7a>
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800940c:	d003      	beq.n	8009416 <__swsetup_r+0x7a>
 800940e:	4621      	mov	r1, r4
 8009410:	4628      	mov	r0, r5
 8009412:	f002 fb92 	bl	800bb3a <__smakebuf_r>
 8009416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941a:	f013 0201 	ands.w	r2, r3, #1
 800941e:	d00a      	beq.n	8009436 <__swsetup_r+0x9a>
 8009420:	2200      	movs	r2, #0
 8009422:	60a2      	str	r2, [r4, #8]
 8009424:	6962      	ldr	r2, [r4, #20]
 8009426:	4252      	negs	r2, r2
 8009428:	61a2      	str	r2, [r4, #24]
 800942a:	6922      	ldr	r2, [r4, #16]
 800942c:	b942      	cbnz	r2, 8009440 <__swsetup_r+0xa4>
 800942e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009432:	d1c5      	bne.n	80093c0 <__swsetup_r+0x24>
 8009434:	bd38      	pop	{r3, r4, r5, pc}
 8009436:	0799      	lsls	r1, r3, #30
 8009438:	bf58      	it	pl
 800943a:	6962      	ldrpl	r2, [r4, #20]
 800943c:	60a2      	str	r2, [r4, #8]
 800943e:	e7f4      	b.n	800942a <__swsetup_r+0x8e>
 8009440:	2000      	movs	r0, #0
 8009442:	e7f7      	b.n	8009434 <__swsetup_r+0x98>
 8009444:	200001bc 	.word	0x200001bc

08009448 <memset>:
 8009448:	4603      	mov	r3, r0
 800944a:	4402      	add	r2, r0
 800944c:	4293      	cmp	r3, r2
 800944e:	d100      	bne.n	8009452 <memset+0xa>
 8009450:	4770      	bx	lr
 8009452:	f803 1b01 	strb.w	r1, [r3], #1
 8009456:	e7f9      	b.n	800944c <memset+0x4>

08009458 <strcat>:
 8009458:	4602      	mov	r2, r0
 800945a:	b510      	push	{r4, lr}
 800945c:	7814      	ldrb	r4, [r2, #0]
 800945e:	4613      	mov	r3, r2
 8009460:	3201      	adds	r2, #1
 8009462:	2c00      	cmp	r4, #0
 8009464:	d1fa      	bne.n	800945c <strcat+0x4>
 8009466:	3b01      	subs	r3, #1
 8009468:	f811 2b01 	ldrb.w	r2, [r1], #1
 800946c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009470:	2a00      	cmp	r2, #0
 8009472:	d1f9      	bne.n	8009468 <strcat+0x10>
 8009474:	bd10      	pop	{r4, pc}
	...

08009478 <strdup>:
 8009478:	4b02      	ldr	r3, [pc, #8]	@ (8009484 <strdup+0xc>)
 800947a:	4601      	mov	r1, r0
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	f000 b803 	b.w	8009488 <_strdup_r>
 8009482:	bf00      	nop
 8009484:	200001bc 	.word	0x200001bc

08009488 <_strdup_r>:
 8009488:	b570      	push	{r4, r5, r6, lr}
 800948a:	4604      	mov	r4, r0
 800948c:	4608      	mov	r0, r1
 800948e:	460d      	mov	r5, r1
 8009490:	f7f6 fe68 	bl	8000164 <strlen>
 8009494:	1c46      	adds	r6, r0, #1
 8009496:	4631      	mov	r1, r6
 8009498:	4620      	mov	r0, r4
 800949a:	f7fe f8e7 	bl	800766c <_malloc_r>
 800949e:	4604      	mov	r4, r0
 80094a0:	b118      	cbz	r0, 80094aa <_strdup_r+0x22>
 80094a2:	4632      	mov	r2, r6
 80094a4:	4629      	mov	r1, r5
 80094a6:	f000 f8b2 	bl	800960e <memcpy>
 80094aa:	4620      	mov	r0, r4
 80094ac:	bd70      	pop	{r4, r5, r6, pc}

080094ae <strncmp>:
 80094ae:	b510      	push	{r4, lr}
 80094b0:	b16a      	cbz	r2, 80094ce <strncmp+0x20>
 80094b2:	3901      	subs	r1, #1
 80094b4:	1884      	adds	r4, r0, r2
 80094b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80094be:	429a      	cmp	r2, r3
 80094c0:	d103      	bne.n	80094ca <strncmp+0x1c>
 80094c2:	42a0      	cmp	r0, r4
 80094c4:	d001      	beq.n	80094ca <strncmp+0x1c>
 80094c6:	2a00      	cmp	r2, #0
 80094c8:	d1f5      	bne.n	80094b6 <strncmp+0x8>
 80094ca:	1ad0      	subs	r0, r2, r3
 80094cc:	bd10      	pop	{r4, pc}
 80094ce:	4610      	mov	r0, r2
 80094d0:	e7fc      	b.n	80094cc <strncmp+0x1e>
	...

080094d4 <_localeconv_r>:
 80094d4:	4800      	ldr	r0, [pc, #0]	@ (80094d8 <_localeconv_r+0x4>)
 80094d6:	4770      	bx	lr
 80094d8:	20000140 	.word	0x20000140

080094dc <_close_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	2300      	movs	r3, #0
 80094e0:	4d05      	ldr	r5, [pc, #20]	@ (80094f8 <_close_r+0x1c>)
 80094e2:	4604      	mov	r4, r0
 80094e4:	4608      	mov	r0, r1
 80094e6:	602b      	str	r3, [r5, #0]
 80094e8:	f7f8 f82f 	bl	800154a <_close>
 80094ec:	1c43      	adds	r3, r0, #1
 80094ee:	d102      	bne.n	80094f6 <_close_r+0x1a>
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	b103      	cbz	r3, 80094f6 <_close_r+0x1a>
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	bd38      	pop	{r3, r4, r5, pc}
 80094f8:	20000be4 	.word	0x20000be4

080094fc <_lseek_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4604      	mov	r4, r0
 8009500:	4608      	mov	r0, r1
 8009502:	4611      	mov	r1, r2
 8009504:	2200      	movs	r2, #0
 8009506:	4d05      	ldr	r5, [pc, #20]	@ (800951c <_lseek_r+0x20>)
 8009508:	602a      	str	r2, [r5, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	f7f8 f841 	bl	8001592 <_lseek>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_lseek_r+0x1e>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_lseek_r+0x1e>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	20000be4 	.word	0x20000be4

08009520 <_read_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4604      	mov	r4, r0
 8009524:	4608      	mov	r0, r1
 8009526:	4611      	mov	r1, r2
 8009528:	2200      	movs	r2, #0
 800952a:	4d05      	ldr	r5, [pc, #20]	@ (8009540 <_read_r+0x20>)
 800952c:	602a      	str	r2, [r5, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	f7f7 ffee 	bl	8001510 <_read>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d102      	bne.n	800953e <_read_r+0x1e>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	b103      	cbz	r3, 800953e <_read_r+0x1e>
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	20000be4 	.word	0x20000be4

08009544 <_sbrk_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	2300      	movs	r3, #0
 8009548:	4d05      	ldr	r5, [pc, #20]	@ (8009560 <_sbrk_r+0x1c>)
 800954a:	4604      	mov	r4, r0
 800954c:	4608      	mov	r0, r1
 800954e:	602b      	str	r3, [r5, #0]
 8009550:	f7f8 f82c 	bl	80015ac <_sbrk>
 8009554:	1c43      	adds	r3, r0, #1
 8009556:	d102      	bne.n	800955e <_sbrk_r+0x1a>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	b103      	cbz	r3, 800955e <_sbrk_r+0x1a>
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	20000be4 	.word	0x20000be4

08009564 <_write_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4604      	mov	r4, r0
 8009568:	4608      	mov	r0, r1
 800956a:	4611      	mov	r1, r2
 800956c:	2200      	movs	r2, #0
 800956e:	4d05      	ldr	r5, [pc, #20]	@ (8009584 <_write_r+0x20>)
 8009570:	602a      	str	r2, [r5, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	f7f7 fdd2 	bl	800111c <_write>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d102      	bne.n	8009582 <_write_r+0x1e>
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	b103      	cbz	r3, 8009582 <_write_r+0x1e>
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	20000be4 	.word	0x20000be4

08009588 <__errno>:
 8009588:	4b01      	ldr	r3, [pc, #4]	@ (8009590 <__errno+0x8>)
 800958a:	6818      	ldr	r0, [r3, #0]
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	200001bc 	.word	0x200001bc

08009594 <__libc_init_array>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	2600      	movs	r6, #0
 8009598:	4d0c      	ldr	r5, [pc, #48]	@ (80095cc <__libc_init_array+0x38>)
 800959a:	4c0d      	ldr	r4, [pc, #52]	@ (80095d0 <__libc_init_array+0x3c>)
 800959c:	1b64      	subs	r4, r4, r5
 800959e:	10a4      	asrs	r4, r4, #2
 80095a0:	42a6      	cmp	r6, r4
 80095a2:	d109      	bne.n	80095b8 <__libc_init_array+0x24>
 80095a4:	f002 fc08 	bl	800bdb8 <_init>
 80095a8:	2600      	movs	r6, #0
 80095aa:	4d0a      	ldr	r5, [pc, #40]	@ (80095d4 <__libc_init_array+0x40>)
 80095ac:	4c0a      	ldr	r4, [pc, #40]	@ (80095d8 <__libc_init_array+0x44>)
 80095ae:	1b64      	subs	r4, r4, r5
 80095b0:	10a4      	asrs	r4, r4, #2
 80095b2:	42a6      	cmp	r6, r4
 80095b4:	d105      	bne.n	80095c2 <__libc_init_array+0x2e>
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095bc:	4798      	blx	r3
 80095be:	3601      	adds	r6, #1
 80095c0:	e7ee      	b.n	80095a0 <__libc_init_array+0xc>
 80095c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c6:	4798      	blx	r3
 80095c8:	3601      	adds	r6, #1
 80095ca:	e7f2      	b.n	80095b2 <__libc_init_array+0x1e>
 80095cc:	0800c5e4 	.word	0x0800c5e4
 80095d0:	0800c5e4 	.word	0x0800c5e4
 80095d4:	0800c5e4 	.word	0x0800c5e4
 80095d8:	0800c5e8 	.word	0x0800c5e8

080095dc <__retarget_lock_init_recursive>:
 80095dc:	4770      	bx	lr

080095de <__retarget_lock_acquire_recursive>:
 80095de:	4770      	bx	lr

080095e0 <__retarget_lock_release_recursive>:
 80095e0:	4770      	bx	lr

080095e2 <strcpy>:
 80095e2:	4603      	mov	r3, r0
 80095e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095e8:	f803 2b01 	strb.w	r2, [r3], #1
 80095ec:	2a00      	cmp	r2, #0
 80095ee:	d1f9      	bne.n	80095e4 <strcpy+0x2>
 80095f0:	4770      	bx	lr

080095f2 <memchr>:
 80095f2:	4603      	mov	r3, r0
 80095f4:	b510      	push	{r4, lr}
 80095f6:	b2c9      	uxtb	r1, r1
 80095f8:	4402      	add	r2, r0
 80095fa:	4293      	cmp	r3, r2
 80095fc:	4618      	mov	r0, r3
 80095fe:	d101      	bne.n	8009604 <memchr+0x12>
 8009600:	2000      	movs	r0, #0
 8009602:	e003      	b.n	800960c <memchr+0x1a>
 8009604:	7804      	ldrb	r4, [r0, #0]
 8009606:	3301      	adds	r3, #1
 8009608:	428c      	cmp	r4, r1
 800960a:	d1f6      	bne.n	80095fa <memchr+0x8>
 800960c:	bd10      	pop	{r4, pc}

0800960e <memcpy>:
 800960e:	440a      	add	r2, r1
 8009610:	4291      	cmp	r1, r2
 8009612:	f100 33ff 	add.w	r3, r0, #4294967295
 8009616:	d100      	bne.n	800961a <memcpy+0xc>
 8009618:	4770      	bx	lr
 800961a:	b510      	push	{r4, lr}
 800961c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009620:	4291      	cmp	r1, r2
 8009622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009626:	d1f9      	bne.n	800961c <memcpy+0xe>
 8009628:	bd10      	pop	{r4, pc}
	...

0800962c <nan>:
 800962c:	2000      	movs	r0, #0
 800962e:	4901      	ldr	r1, [pc, #4]	@ (8009634 <nan+0x8>)
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	7ff80000 	.word	0x7ff80000

08009638 <nanf>:
 8009638:	4800      	ldr	r0, [pc, #0]	@ (800963c <nanf+0x4>)
 800963a:	4770      	bx	lr
 800963c:	7fc00000 	.word	0x7fc00000

08009640 <quorem>:
 8009640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	6903      	ldr	r3, [r0, #16]
 8009646:	690c      	ldr	r4, [r1, #16]
 8009648:	4607      	mov	r7, r0
 800964a:	42a3      	cmp	r3, r4
 800964c:	db7e      	blt.n	800974c <quorem+0x10c>
 800964e:	3c01      	subs	r4, #1
 8009650:	00a3      	lsls	r3, r4, #2
 8009652:	f100 0514 	add.w	r5, r0, #20
 8009656:	f101 0814 	add.w	r8, r1, #20
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009660:	9301      	str	r3, [sp, #4]
 8009662:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800966a:	3301      	adds	r3, #1
 800966c:	429a      	cmp	r2, r3
 800966e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009672:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009676:	d32e      	bcc.n	80096d6 <quorem+0x96>
 8009678:	f04f 0a00 	mov.w	sl, #0
 800967c:	46c4      	mov	ip, r8
 800967e:	46ae      	mov	lr, r5
 8009680:	46d3      	mov	fp, sl
 8009682:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009686:	b298      	uxth	r0, r3
 8009688:	fb06 a000 	mla	r0, r6, r0, sl
 800968c:	0c1b      	lsrs	r3, r3, #16
 800968e:	0c02      	lsrs	r2, r0, #16
 8009690:	fb06 2303 	mla	r3, r6, r3, r2
 8009694:	f8de 2000 	ldr.w	r2, [lr]
 8009698:	b280      	uxth	r0, r0
 800969a:	b292      	uxth	r2, r2
 800969c:	1a12      	subs	r2, r2, r0
 800969e:	445a      	add	r2, fp
 80096a0:	f8de 0000 	ldr.w	r0, [lr]
 80096a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80096ae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80096b2:	b292      	uxth	r2, r2
 80096b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80096b8:	45e1      	cmp	r9, ip
 80096ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80096be:	f84e 2b04 	str.w	r2, [lr], #4
 80096c2:	d2de      	bcs.n	8009682 <quorem+0x42>
 80096c4:	9b00      	ldr	r3, [sp, #0]
 80096c6:	58eb      	ldr	r3, [r5, r3]
 80096c8:	b92b      	cbnz	r3, 80096d6 <quorem+0x96>
 80096ca:	9b01      	ldr	r3, [sp, #4]
 80096cc:	3b04      	subs	r3, #4
 80096ce:	429d      	cmp	r5, r3
 80096d0:	461a      	mov	r2, r3
 80096d2:	d32f      	bcc.n	8009734 <quorem+0xf4>
 80096d4:	613c      	str	r4, [r7, #16]
 80096d6:	4638      	mov	r0, r7
 80096d8:	f001 fc5e 	bl	800af98 <__mcmp>
 80096dc:	2800      	cmp	r0, #0
 80096de:	db25      	blt.n	800972c <quorem+0xec>
 80096e0:	4629      	mov	r1, r5
 80096e2:	2000      	movs	r0, #0
 80096e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80096e8:	f8d1 c000 	ldr.w	ip, [r1]
 80096ec:	fa1f fe82 	uxth.w	lr, r2
 80096f0:	fa1f f38c 	uxth.w	r3, ip
 80096f4:	eba3 030e 	sub.w	r3, r3, lr
 80096f8:	4403      	add	r3, r0
 80096fa:	0c12      	lsrs	r2, r2, #16
 80096fc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009700:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009704:	b29b      	uxth	r3, r3
 8009706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800970a:	45c1      	cmp	r9, r8
 800970c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009710:	f841 3b04 	str.w	r3, [r1], #4
 8009714:	d2e6      	bcs.n	80096e4 <quorem+0xa4>
 8009716:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800971a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800971e:	b922      	cbnz	r2, 800972a <quorem+0xea>
 8009720:	3b04      	subs	r3, #4
 8009722:	429d      	cmp	r5, r3
 8009724:	461a      	mov	r2, r3
 8009726:	d30b      	bcc.n	8009740 <quorem+0x100>
 8009728:	613c      	str	r4, [r7, #16]
 800972a:	3601      	adds	r6, #1
 800972c:	4630      	mov	r0, r6
 800972e:	b003      	add	sp, #12
 8009730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009734:	6812      	ldr	r2, [r2, #0]
 8009736:	3b04      	subs	r3, #4
 8009738:	2a00      	cmp	r2, #0
 800973a:	d1cb      	bne.n	80096d4 <quorem+0x94>
 800973c:	3c01      	subs	r4, #1
 800973e:	e7c6      	b.n	80096ce <quorem+0x8e>
 8009740:	6812      	ldr	r2, [r2, #0]
 8009742:	3b04      	subs	r3, #4
 8009744:	2a00      	cmp	r2, #0
 8009746:	d1ef      	bne.n	8009728 <quorem+0xe8>
 8009748:	3c01      	subs	r4, #1
 800974a:	e7ea      	b.n	8009722 <quorem+0xe2>
 800974c:	2000      	movs	r0, #0
 800974e:	e7ee      	b.n	800972e <quorem+0xee>

08009750 <_dtoa_r>:
 8009750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	4614      	mov	r4, r2
 8009756:	461d      	mov	r5, r3
 8009758:	69c7      	ldr	r7, [r0, #28]
 800975a:	b097      	sub	sp, #92	@ 0x5c
 800975c:	4681      	mov	r9, r0
 800975e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009762:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009764:	b97f      	cbnz	r7, 8009786 <_dtoa_r+0x36>
 8009766:	2010      	movs	r0, #16
 8009768:	f7fd ff4e 	bl	8007608 <malloc>
 800976c:	4602      	mov	r2, r0
 800976e:	f8c9 001c 	str.w	r0, [r9, #28]
 8009772:	b920      	cbnz	r0, 800977e <_dtoa_r+0x2e>
 8009774:	21ef      	movs	r1, #239	@ 0xef
 8009776:	4bac      	ldr	r3, [pc, #688]	@ (8009a28 <_dtoa_r+0x2d8>)
 8009778:	48ac      	ldr	r0, [pc, #688]	@ (8009a2c <_dtoa_r+0x2dc>)
 800977a:	f002 fa57 	bl	800bc2c <__assert_func>
 800977e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009782:	6007      	str	r7, [r0, #0]
 8009784:	60c7      	str	r7, [r0, #12]
 8009786:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800978a:	6819      	ldr	r1, [r3, #0]
 800978c:	b159      	cbz	r1, 80097a6 <_dtoa_r+0x56>
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	2301      	movs	r3, #1
 8009792:	4093      	lsls	r3, r2
 8009794:	604a      	str	r2, [r1, #4]
 8009796:	608b      	str	r3, [r1, #8]
 8009798:	4648      	mov	r0, r9
 800979a:	f001 f981 	bl	800aaa0 <_Bfree>
 800979e:	2200      	movs	r2, #0
 80097a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	1e2b      	subs	r3, r5, #0
 80097a8:	bfaf      	iteee	ge
 80097aa:	2300      	movge	r3, #0
 80097ac:	2201      	movlt	r2, #1
 80097ae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80097b2:	9307      	strlt	r3, [sp, #28]
 80097b4:	bfa8      	it	ge
 80097b6:	6033      	strge	r3, [r6, #0]
 80097b8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80097bc:	4b9c      	ldr	r3, [pc, #624]	@ (8009a30 <_dtoa_r+0x2e0>)
 80097be:	bfb8      	it	lt
 80097c0:	6032      	strlt	r2, [r6, #0]
 80097c2:	ea33 0308 	bics.w	r3, r3, r8
 80097c6:	d112      	bne.n	80097ee <_dtoa_r+0x9e>
 80097c8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80097cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80097ce:	6013      	str	r3, [r2, #0]
 80097d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80097d4:	4323      	orrs	r3, r4
 80097d6:	f000 855e 	beq.w	800a296 <_dtoa_r+0xb46>
 80097da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80097dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009a34 <_dtoa_r+0x2e4>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 8560 	beq.w	800a2a6 <_dtoa_r+0xb56>
 80097e6:	f10a 0303 	add.w	r3, sl, #3
 80097ea:	f000 bd5a 	b.w	800a2a2 <_dtoa_r+0xb52>
 80097ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80097f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097fa:	2200      	movs	r2, #0
 80097fc:	2300      	movs	r3, #0
 80097fe:	f7f7 f8dd 	bl	80009bc <__aeabi_dcmpeq>
 8009802:	4607      	mov	r7, r0
 8009804:	b158      	cbz	r0, 800981e <_dtoa_r+0xce>
 8009806:	2301      	movs	r3, #1
 8009808:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800980e:	b113      	cbz	r3, 8009816 <_dtoa_r+0xc6>
 8009810:	4b89      	ldr	r3, [pc, #548]	@ (8009a38 <_dtoa_r+0x2e8>)
 8009812:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8009a3c <_dtoa_r+0x2ec>
 800981a:	f000 bd44 	b.w	800a2a6 <_dtoa_r+0xb56>
 800981e:	ab14      	add	r3, sp, #80	@ 0x50
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	ab15      	add	r3, sp, #84	@ 0x54
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	4648      	mov	r0, r9
 8009828:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800982c:	f001 fccc 	bl	800b1c8 <__d2b>
 8009830:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009834:	9003      	str	r0, [sp, #12]
 8009836:	2e00      	cmp	r6, #0
 8009838:	d078      	beq.n	800992c <_dtoa_r+0x1dc>
 800983a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800983e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009840:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009848:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800984c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009850:	9712      	str	r7, [sp, #72]	@ 0x48
 8009852:	4619      	mov	r1, r3
 8009854:	2200      	movs	r2, #0
 8009856:	4b7a      	ldr	r3, [pc, #488]	@ (8009a40 <_dtoa_r+0x2f0>)
 8009858:	f7f6 fc90 	bl	800017c <__aeabi_dsub>
 800985c:	a36c      	add	r3, pc, #432	@ (adr r3, 8009a10 <_dtoa_r+0x2c0>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f6 fe43 	bl	80004ec <__aeabi_dmul>
 8009866:	a36c      	add	r3, pc, #432	@ (adr r3, 8009a18 <_dtoa_r+0x2c8>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f7f6 fc88 	bl	8000180 <__adddf3>
 8009870:	4604      	mov	r4, r0
 8009872:	4630      	mov	r0, r6
 8009874:	460d      	mov	r5, r1
 8009876:	f7f6 fdcf 	bl	8000418 <__aeabi_i2d>
 800987a:	a369      	add	r3, pc, #420	@ (adr r3, 8009a20 <_dtoa_r+0x2d0>)
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f7f6 fe34 	bl	80004ec <__aeabi_dmul>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	4620      	mov	r0, r4
 800988a:	4629      	mov	r1, r5
 800988c:	f7f6 fc78 	bl	8000180 <__adddf3>
 8009890:	4604      	mov	r4, r0
 8009892:	460d      	mov	r5, r1
 8009894:	f7f7 f8da 	bl	8000a4c <__aeabi_d2iz>
 8009898:	2200      	movs	r2, #0
 800989a:	4607      	mov	r7, r0
 800989c:	2300      	movs	r3, #0
 800989e:	4620      	mov	r0, r4
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7f7 f895 	bl	80009d0 <__aeabi_dcmplt>
 80098a6:	b140      	cbz	r0, 80098ba <_dtoa_r+0x16a>
 80098a8:	4638      	mov	r0, r7
 80098aa:	f7f6 fdb5 	bl	8000418 <__aeabi_i2d>
 80098ae:	4622      	mov	r2, r4
 80098b0:	462b      	mov	r3, r5
 80098b2:	f7f7 f883 	bl	80009bc <__aeabi_dcmpeq>
 80098b6:	b900      	cbnz	r0, 80098ba <_dtoa_r+0x16a>
 80098b8:	3f01      	subs	r7, #1
 80098ba:	2f16      	cmp	r7, #22
 80098bc:	d854      	bhi.n	8009968 <_dtoa_r+0x218>
 80098be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098c2:	4b60      	ldr	r3, [pc, #384]	@ (8009a44 <_dtoa_r+0x2f4>)
 80098c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	f7f7 f880 	bl	80009d0 <__aeabi_dcmplt>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d04b      	beq.n	800996c <_dtoa_r+0x21c>
 80098d4:	2300      	movs	r3, #0
 80098d6:	3f01      	subs	r7, #1
 80098d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80098dc:	1b9b      	subs	r3, r3, r6
 80098de:	1e5a      	subs	r2, r3, #1
 80098e0:	bf49      	itett	mi
 80098e2:	f1c3 0301 	rsbmi	r3, r3, #1
 80098e6:	2300      	movpl	r3, #0
 80098e8:	9304      	strmi	r3, [sp, #16]
 80098ea:	2300      	movmi	r3, #0
 80098ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80098ee:	bf54      	ite	pl
 80098f0:	9304      	strpl	r3, [sp, #16]
 80098f2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80098f4:	2f00      	cmp	r7, #0
 80098f6:	db3b      	blt.n	8009970 <_dtoa_r+0x220>
 80098f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098fa:	970e      	str	r7, [sp, #56]	@ 0x38
 80098fc:	443b      	add	r3, r7
 80098fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009900:	2300      	movs	r3, #0
 8009902:	930a      	str	r3, [sp, #40]	@ 0x28
 8009904:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009906:	2b09      	cmp	r3, #9
 8009908:	d865      	bhi.n	80099d6 <_dtoa_r+0x286>
 800990a:	2b05      	cmp	r3, #5
 800990c:	bfc4      	itt	gt
 800990e:	3b04      	subgt	r3, #4
 8009910:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009912:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009914:	bfc8      	it	gt
 8009916:	2400      	movgt	r4, #0
 8009918:	f1a3 0302 	sub.w	r3, r3, #2
 800991c:	bfd8      	it	le
 800991e:	2401      	movle	r4, #1
 8009920:	2b03      	cmp	r3, #3
 8009922:	d864      	bhi.n	80099ee <_dtoa_r+0x29e>
 8009924:	e8df f003 	tbb	[pc, r3]
 8009928:	2c385553 	.word	0x2c385553
 800992c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009930:	441e      	add	r6, r3
 8009932:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009936:	2b20      	cmp	r3, #32
 8009938:	bfc1      	itttt	gt
 800993a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800993e:	fa08 f803 	lslgt.w	r8, r8, r3
 8009942:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009946:	fa24 f303 	lsrgt.w	r3, r4, r3
 800994a:	bfd6      	itet	le
 800994c:	f1c3 0320 	rsble	r3, r3, #32
 8009950:	ea48 0003 	orrgt.w	r0, r8, r3
 8009954:	fa04 f003 	lslle.w	r0, r4, r3
 8009958:	f7f6 fd4e 	bl	80003f8 <__aeabi_ui2d>
 800995c:	2201      	movs	r2, #1
 800995e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009962:	3e01      	subs	r6, #1
 8009964:	9212      	str	r2, [sp, #72]	@ 0x48
 8009966:	e774      	b.n	8009852 <_dtoa_r+0x102>
 8009968:	2301      	movs	r3, #1
 800996a:	e7b5      	b.n	80098d8 <_dtoa_r+0x188>
 800996c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800996e:	e7b4      	b.n	80098da <_dtoa_r+0x18a>
 8009970:	9b04      	ldr	r3, [sp, #16]
 8009972:	1bdb      	subs	r3, r3, r7
 8009974:	9304      	str	r3, [sp, #16]
 8009976:	427b      	negs	r3, r7
 8009978:	930a      	str	r3, [sp, #40]	@ 0x28
 800997a:	2300      	movs	r3, #0
 800997c:	930e      	str	r3, [sp, #56]	@ 0x38
 800997e:	e7c1      	b.n	8009904 <_dtoa_r+0x1b4>
 8009980:	2301      	movs	r3, #1
 8009982:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009984:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009986:	eb07 0b03 	add.w	fp, r7, r3
 800998a:	f10b 0301 	add.w	r3, fp, #1
 800998e:	2b01      	cmp	r3, #1
 8009990:	9308      	str	r3, [sp, #32]
 8009992:	bfb8      	it	lt
 8009994:	2301      	movlt	r3, #1
 8009996:	e006      	b.n	80099a6 <_dtoa_r+0x256>
 8009998:	2301      	movs	r3, #1
 800999a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800999c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800999e:	2b00      	cmp	r3, #0
 80099a0:	dd28      	ble.n	80099f4 <_dtoa_r+0x2a4>
 80099a2:	469b      	mov	fp, r3
 80099a4:	9308      	str	r3, [sp, #32]
 80099a6:	2100      	movs	r1, #0
 80099a8:	2204      	movs	r2, #4
 80099aa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80099ae:	f102 0514 	add.w	r5, r2, #20
 80099b2:	429d      	cmp	r5, r3
 80099b4:	d926      	bls.n	8009a04 <_dtoa_r+0x2b4>
 80099b6:	6041      	str	r1, [r0, #4]
 80099b8:	4648      	mov	r0, r9
 80099ba:	f001 f831 	bl	800aa20 <_Balloc>
 80099be:	4682      	mov	sl, r0
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d143      	bne.n	8009a4c <_dtoa_r+0x2fc>
 80099c4:	4602      	mov	r2, r0
 80099c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80099ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009a48 <_dtoa_r+0x2f8>)
 80099cc:	e6d4      	b.n	8009778 <_dtoa_r+0x28>
 80099ce:	2300      	movs	r3, #0
 80099d0:	e7e3      	b.n	800999a <_dtoa_r+0x24a>
 80099d2:	2300      	movs	r3, #0
 80099d4:	e7d5      	b.n	8009982 <_dtoa_r+0x232>
 80099d6:	2401      	movs	r4, #1
 80099d8:	2300      	movs	r3, #0
 80099da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80099dc:	9320      	str	r3, [sp, #128]	@ 0x80
 80099de:	f04f 3bff 	mov.w	fp, #4294967295
 80099e2:	2200      	movs	r2, #0
 80099e4:	2312      	movs	r3, #18
 80099e6:	f8cd b020 	str.w	fp, [sp, #32]
 80099ea:	9221      	str	r2, [sp, #132]	@ 0x84
 80099ec:	e7db      	b.n	80099a6 <_dtoa_r+0x256>
 80099ee:	2301      	movs	r3, #1
 80099f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099f2:	e7f4      	b.n	80099de <_dtoa_r+0x28e>
 80099f4:	f04f 0b01 	mov.w	fp, #1
 80099f8:	465b      	mov	r3, fp
 80099fa:	f8cd b020 	str.w	fp, [sp, #32]
 80099fe:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8009a02:	e7d0      	b.n	80099a6 <_dtoa_r+0x256>
 8009a04:	3101      	adds	r1, #1
 8009a06:	0052      	lsls	r2, r2, #1
 8009a08:	e7d1      	b.n	80099ae <_dtoa_r+0x25e>
 8009a0a:	bf00      	nop
 8009a0c:	f3af 8000 	nop.w
 8009a10:	636f4361 	.word	0x636f4361
 8009a14:	3fd287a7 	.word	0x3fd287a7
 8009a18:	8b60c8b3 	.word	0x8b60c8b3
 8009a1c:	3fc68a28 	.word	0x3fc68a28
 8009a20:	509f79fb 	.word	0x509f79fb
 8009a24:	3fd34413 	.word	0x3fd34413
 8009a28:	0800c1fc 	.word	0x0800c1fc
 8009a2c:	0800c213 	.word	0x0800c213
 8009a30:	7ff00000 	.word	0x7ff00000
 8009a34:	0800c1f8 	.word	0x0800c1f8
 8009a38:	0800c1bf 	.word	0x0800c1bf
 8009a3c:	0800c1be 	.word	0x0800c1be
 8009a40:	3ff80000 	.word	0x3ff80000
 8009a44:	0800c410 	.word	0x0800c410
 8009a48:	0800c26b 	.word	0x0800c26b
 8009a4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009a50:	6018      	str	r0, [r3, #0]
 8009a52:	9b08      	ldr	r3, [sp, #32]
 8009a54:	2b0e      	cmp	r3, #14
 8009a56:	f200 80a1 	bhi.w	8009b9c <_dtoa_r+0x44c>
 8009a5a:	2c00      	cmp	r4, #0
 8009a5c:	f000 809e 	beq.w	8009b9c <_dtoa_r+0x44c>
 8009a60:	2f00      	cmp	r7, #0
 8009a62:	dd33      	ble.n	8009acc <_dtoa_r+0x37c>
 8009a64:	4b9c      	ldr	r3, [pc, #624]	@ (8009cd8 <_dtoa_r+0x588>)
 8009a66:	f007 020f 	and.w	r2, r7, #15
 8009a6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a6e:	05f8      	lsls	r0, r7, #23
 8009a70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a74:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8009a78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009a7c:	d516      	bpl.n	8009aac <_dtoa_r+0x35c>
 8009a7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a82:	4b96      	ldr	r3, [pc, #600]	@ (8009cdc <_dtoa_r+0x58c>)
 8009a84:	2603      	movs	r6, #3
 8009a86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a8a:	f7f6 fe59 	bl	8000740 <__aeabi_ddiv>
 8009a8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a92:	f004 040f 	and.w	r4, r4, #15
 8009a96:	4d91      	ldr	r5, [pc, #580]	@ (8009cdc <_dtoa_r+0x58c>)
 8009a98:	b954      	cbnz	r4, 8009ab0 <_dtoa_r+0x360>
 8009a9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aa2:	f7f6 fe4d 	bl	8000740 <__aeabi_ddiv>
 8009aa6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009aaa:	e028      	b.n	8009afe <_dtoa_r+0x3ae>
 8009aac:	2602      	movs	r6, #2
 8009aae:	e7f2      	b.n	8009a96 <_dtoa_r+0x346>
 8009ab0:	07e1      	lsls	r1, r4, #31
 8009ab2:	d508      	bpl.n	8009ac6 <_dtoa_r+0x376>
 8009ab4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ab8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009abc:	f7f6 fd16 	bl	80004ec <__aeabi_dmul>
 8009ac0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ac4:	3601      	adds	r6, #1
 8009ac6:	1064      	asrs	r4, r4, #1
 8009ac8:	3508      	adds	r5, #8
 8009aca:	e7e5      	b.n	8009a98 <_dtoa_r+0x348>
 8009acc:	f000 80af 	beq.w	8009c2e <_dtoa_r+0x4de>
 8009ad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ad4:	427c      	negs	r4, r7
 8009ad6:	4b80      	ldr	r3, [pc, #512]	@ (8009cd8 <_dtoa_r+0x588>)
 8009ad8:	f004 020f 	and.w	r2, r4, #15
 8009adc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae4:	f7f6 fd02 	bl	80004ec <__aeabi_dmul>
 8009ae8:	2602      	movs	r6, #2
 8009aea:	2300      	movs	r3, #0
 8009aec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009af0:	4d7a      	ldr	r5, [pc, #488]	@ (8009cdc <_dtoa_r+0x58c>)
 8009af2:	1124      	asrs	r4, r4, #4
 8009af4:	2c00      	cmp	r4, #0
 8009af6:	f040 808f 	bne.w	8009c18 <_dtoa_r+0x4c8>
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1d3      	bne.n	8009aa6 <_dtoa_r+0x356>
 8009afe:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009b02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 8094 	beq.w	8009c32 <_dtoa_r+0x4e2>
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	4629      	mov	r1, r5
 8009b10:	4b73      	ldr	r3, [pc, #460]	@ (8009ce0 <_dtoa_r+0x590>)
 8009b12:	f7f6 ff5d 	bl	80009d0 <__aeabi_dcmplt>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	f000 808b 	beq.w	8009c32 <_dtoa_r+0x4e2>
 8009b1c:	9b08      	ldr	r3, [sp, #32]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f000 8087 	beq.w	8009c32 <_dtoa_r+0x4e2>
 8009b24:	f1bb 0f00 	cmp.w	fp, #0
 8009b28:	dd34      	ble.n	8009b94 <_dtoa_r+0x444>
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	4629      	mov	r1, r5
 8009b30:	4b6c      	ldr	r3, [pc, #432]	@ (8009ce4 <_dtoa_r+0x594>)
 8009b32:	f7f6 fcdb 	bl	80004ec <__aeabi_dmul>
 8009b36:	465c      	mov	r4, fp
 8009b38:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b3c:	f107 38ff 	add.w	r8, r7, #4294967295
 8009b40:	3601      	adds	r6, #1
 8009b42:	4630      	mov	r0, r6
 8009b44:	f7f6 fc68 	bl	8000418 <__aeabi_i2d>
 8009b48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b4c:	f7f6 fcce 	bl	80004ec <__aeabi_dmul>
 8009b50:	2200      	movs	r2, #0
 8009b52:	4b65      	ldr	r3, [pc, #404]	@ (8009ce8 <_dtoa_r+0x598>)
 8009b54:	f7f6 fb14 	bl	8000180 <__adddf3>
 8009b58:	4605      	mov	r5, r0
 8009b5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009b5e:	2c00      	cmp	r4, #0
 8009b60:	d16a      	bne.n	8009c38 <_dtoa_r+0x4e8>
 8009b62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b66:	2200      	movs	r2, #0
 8009b68:	4b60      	ldr	r3, [pc, #384]	@ (8009cec <_dtoa_r+0x59c>)
 8009b6a:	f7f6 fb07 	bl	800017c <__aeabi_dsub>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b76:	462a      	mov	r2, r5
 8009b78:	4633      	mov	r3, r6
 8009b7a:	f7f6 ff47 	bl	8000a0c <__aeabi_dcmpgt>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	f040 8298 	bne.w	800a0b4 <_dtoa_r+0x964>
 8009b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b88:	462a      	mov	r2, r5
 8009b8a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009b8e:	f7f6 ff1f 	bl	80009d0 <__aeabi_dcmplt>
 8009b92:	bb38      	cbnz	r0, 8009be4 <_dtoa_r+0x494>
 8009b94:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009b98:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009b9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f2c0 8157 	blt.w	8009e52 <_dtoa_r+0x702>
 8009ba4:	2f0e      	cmp	r7, #14
 8009ba6:	f300 8154 	bgt.w	8009e52 <_dtoa_r+0x702>
 8009baa:	4b4b      	ldr	r3, [pc, #300]	@ (8009cd8 <_dtoa_r+0x588>)
 8009bac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009bb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009bb4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009bb8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f280 80e5 	bge.w	8009d8a <_dtoa_r+0x63a>
 8009bc0:	9b08      	ldr	r3, [sp, #32]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f300 80e1 	bgt.w	8009d8a <_dtoa_r+0x63a>
 8009bc8:	d10c      	bne.n	8009be4 <_dtoa_r+0x494>
 8009bca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	4b46      	ldr	r3, [pc, #280]	@ (8009cec <_dtoa_r+0x59c>)
 8009bd2:	f7f6 fc8b 	bl	80004ec <__aeabi_dmul>
 8009bd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bda:	f7f6 ff0d 	bl	80009f8 <__aeabi_dcmpge>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	f000 8266 	beq.w	800a0b0 <_dtoa_r+0x960>
 8009be4:	2400      	movs	r4, #0
 8009be6:	4625      	mov	r5, r4
 8009be8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009bea:	4656      	mov	r6, sl
 8009bec:	ea6f 0803 	mvn.w	r8, r3
 8009bf0:	2700      	movs	r7, #0
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	4648      	mov	r0, r9
 8009bf6:	f000 ff53 	bl	800aaa0 <_Bfree>
 8009bfa:	2d00      	cmp	r5, #0
 8009bfc:	f000 80bd 	beq.w	8009d7a <_dtoa_r+0x62a>
 8009c00:	b12f      	cbz	r7, 8009c0e <_dtoa_r+0x4be>
 8009c02:	42af      	cmp	r7, r5
 8009c04:	d003      	beq.n	8009c0e <_dtoa_r+0x4be>
 8009c06:	4639      	mov	r1, r7
 8009c08:	4648      	mov	r0, r9
 8009c0a:	f000 ff49 	bl	800aaa0 <_Bfree>
 8009c0e:	4629      	mov	r1, r5
 8009c10:	4648      	mov	r0, r9
 8009c12:	f000 ff45 	bl	800aaa0 <_Bfree>
 8009c16:	e0b0      	b.n	8009d7a <_dtoa_r+0x62a>
 8009c18:	07e2      	lsls	r2, r4, #31
 8009c1a:	d505      	bpl.n	8009c28 <_dtoa_r+0x4d8>
 8009c1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c20:	f7f6 fc64 	bl	80004ec <__aeabi_dmul>
 8009c24:	2301      	movs	r3, #1
 8009c26:	3601      	adds	r6, #1
 8009c28:	1064      	asrs	r4, r4, #1
 8009c2a:	3508      	adds	r5, #8
 8009c2c:	e762      	b.n	8009af4 <_dtoa_r+0x3a4>
 8009c2e:	2602      	movs	r6, #2
 8009c30:	e765      	b.n	8009afe <_dtoa_r+0x3ae>
 8009c32:	46b8      	mov	r8, r7
 8009c34:	9c08      	ldr	r4, [sp, #32]
 8009c36:	e784      	b.n	8009b42 <_dtoa_r+0x3f2>
 8009c38:	4b27      	ldr	r3, [pc, #156]	@ (8009cd8 <_dtoa_r+0x588>)
 8009c3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c44:	4454      	add	r4, sl
 8009c46:	2900      	cmp	r1, #0
 8009c48:	d054      	beq.n	8009cf4 <_dtoa_r+0x5a4>
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	4928      	ldr	r1, [pc, #160]	@ (8009cf0 <_dtoa_r+0x5a0>)
 8009c4e:	f7f6 fd77 	bl	8000740 <__aeabi_ddiv>
 8009c52:	4633      	mov	r3, r6
 8009c54:	462a      	mov	r2, r5
 8009c56:	f7f6 fa91 	bl	800017c <__aeabi_dsub>
 8009c5a:	4656      	mov	r6, sl
 8009c5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c64:	f7f6 fef2 	bl	8000a4c <__aeabi_d2iz>
 8009c68:	4605      	mov	r5, r0
 8009c6a:	f7f6 fbd5 	bl	8000418 <__aeabi_i2d>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c76:	f7f6 fa81 	bl	800017c <__aeabi_dsub>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	3530      	adds	r5, #48	@ 0x30
 8009c80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c88:	f806 5b01 	strb.w	r5, [r6], #1
 8009c8c:	f7f6 fea0 	bl	80009d0 <__aeabi_dcmplt>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d172      	bne.n	8009d7a <_dtoa_r+0x62a>
 8009c94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c98:	2000      	movs	r0, #0
 8009c9a:	4911      	ldr	r1, [pc, #68]	@ (8009ce0 <_dtoa_r+0x590>)
 8009c9c:	f7f6 fa6e 	bl	800017c <__aeabi_dsub>
 8009ca0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ca4:	f7f6 fe94 	bl	80009d0 <__aeabi_dcmplt>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	f040 80b4 	bne.w	8009e16 <_dtoa_r+0x6c6>
 8009cae:	42a6      	cmp	r6, r4
 8009cb0:	f43f af70 	beq.w	8009b94 <_dtoa_r+0x444>
 8009cb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009cb8:	2200      	movs	r2, #0
 8009cba:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce4 <_dtoa_r+0x594>)
 8009cbc:	f7f6 fc16 	bl	80004ec <__aeabi_dmul>
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009cc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cca:	4b06      	ldr	r3, [pc, #24]	@ (8009ce4 <_dtoa_r+0x594>)
 8009ccc:	f7f6 fc0e 	bl	80004ec <__aeabi_dmul>
 8009cd0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009cd4:	e7c4      	b.n	8009c60 <_dtoa_r+0x510>
 8009cd6:	bf00      	nop
 8009cd8:	0800c410 	.word	0x0800c410
 8009cdc:	0800c3e8 	.word	0x0800c3e8
 8009ce0:	3ff00000 	.word	0x3ff00000
 8009ce4:	40240000 	.word	0x40240000
 8009ce8:	401c0000 	.word	0x401c0000
 8009cec:	40140000 	.word	0x40140000
 8009cf0:	3fe00000 	.word	0x3fe00000
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f7f6 fbf8 	bl	80004ec <__aeabi_dmul>
 8009cfc:	4656      	mov	r6, sl
 8009cfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d02:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009d04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d08:	f7f6 fea0 	bl	8000a4c <__aeabi_d2iz>
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	f7f6 fb83 	bl	8000418 <__aeabi_i2d>
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d1a:	f7f6 fa2f 	bl	800017c <__aeabi_dsub>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	460b      	mov	r3, r1
 8009d22:	3530      	adds	r5, #48	@ 0x30
 8009d24:	f806 5b01 	strb.w	r5, [r6], #1
 8009d28:	42a6      	cmp	r6, r4
 8009d2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d2e:	f04f 0200 	mov.w	r2, #0
 8009d32:	d124      	bne.n	8009d7e <_dtoa_r+0x62e>
 8009d34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d38:	4bae      	ldr	r3, [pc, #696]	@ (8009ff4 <_dtoa_r+0x8a4>)
 8009d3a:	f7f6 fa21 	bl	8000180 <__adddf3>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d46:	f7f6 fe61 	bl	8000a0c <__aeabi_dcmpgt>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d163      	bne.n	8009e16 <_dtoa_r+0x6c6>
 8009d4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d52:	2000      	movs	r0, #0
 8009d54:	49a7      	ldr	r1, [pc, #668]	@ (8009ff4 <_dtoa_r+0x8a4>)
 8009d56:	f7f6 fa11 	bl	800017c <__aeabi_dsub>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d62:	f7f6 fe35 	bl	80009d0 <__aeabi_dcmplt>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f43f af14 	beq.w	8009b94 <_dtoa_r+0x444>
 8009d6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009d6e:	1e73      	subs	r3, r6, #1
 8009d70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d76:	2b30      	cmp	r3, #48	@ 0x30
 8009d78:	d0f8      	beq.n	8009d6c <_dtoa_r+0x61c>
 8009d7a:	4647      	mov	r7, r8
 8009d7c:	e03b      	b.n	8009df6 <_dtoa_r+0x6a6>
 8009d7e:	4b9e      	ldr	r3, [pc, #632]	@ (8009ff8 <_dtoa_r+0x8a8>)
 8009d80:	f7f6 fbb4 	bl	80004ec <__aeabi_dmul>
 8009d84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d88:	e7bc      	b.n	8009d04 <_dtoa_r+0x5b4>
 8009d8a:	4656      	mov	r6, sl
 8009d8c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d94:	4620      	mov	r0, r4
 8009d96:	4629      	mov	r1, r5
 8009d98:	f7f6 fcd2 	bl	8000740 <__aeabi_ddiv>
 8009d9c:	f7f6 fe56 	bl	8000a4c <__aeabi_d2iz>
 8009da0:	4680      	mov	r8, r0
 8009da2:	f7f6 fb39 	bl	8000418 <__aeabi_i2d>
 8009da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009daa:	f7f6 fb9f 	bl	80004ec <__aeabi_dmul>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	4620      	mov	r0, r4
 8009db4:	4629      	mov	r1, r5
 8009db6:	f7f6 f9e1 	bl	800017c <__aeabi_dsub>
 8009dba:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009dbe:	9d08      	ldr	r5, [sp, #32]
 8009dc0:	f806 4b01 	strb.w	r4, [r6], #1
 8009dc4:	eba6 040a 	sub.w	r4, r6, sl
 8009dc8:	42a5      	cmp	r5, r4
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	d133      	bne.n	8009e38 <_dtoa_r+0x6e8>
 8009dd0:	f7f6 f9d6 	bl	8000180 <__adddf3>
 8009dd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dd8:	4604      	mov	r4, r0
 8009dda:	460d      	mov	r5, r1
 8009ddc:	f7f6 fe16 	bl	8000a0c <__aeabi_dcmpgt>
 8009de0:	b9c0      	cbnz	r0, 8009e14 <_dtoa_r+0x6c4>
 8009de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009de6:	4620      	mov	r0, r4
 8009de8:	4629      	mov	r1, r5
 8009dea:	f7f6 fde7 	bl	80009bc <__aeabi_dcmpeq>
 8009dee:	b110      	cbz	r0, 8009df6 <_dtoa_r+0x6a6>
 8009df0:	f018 0f01 	tst.w	r8, #1
 8009df4:	d10e      	bne.n	8009e14 <_dtoa_r+0x6c4>
 8009df6:	4648      	mov	r0, r9
 8009df8:	9903      	ldr	r1, [sp, #12]
 8009dfa:	f000 fe51 	bl	800aaa0 <_Bfree>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	7033      	strb	r3, [r6, #0]
 8009e02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009e04:	3701      	adds	r7, #1
 8009e06:	601f      	str	r7, [r3, #0]
 8009e08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f000 824b 	beq.w	800a2a6 <_dtoa_r+0xb56>
 8009e10:	601e      	str	r6, [r3, #0]
 8009e12:	e248      	b.n	800a2a6 <_dtoa_r+0xb56>
 8009e14:	46b8      	mov	r8, r7
 8009e16:	4633      	mov	r3, r6
 8009e18:	461e      	mov	r6, r3
 8009e1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e1e:	2a39      	cmp	r2, #57	@ 0x39
 8009e20:	d106      	bne.n	8009e30 <_dtoa_r+0x6e0>
 8009e22:	459a      	cmp	sl, r3
 8009e24:	d1f8      	bne.n	8009e18 <_dtoa_r+0x6c8>
 8009e26:	2230      	movs	r2, #48	@ 0x30
 8009e28:	f108 0801 	add.w	r8, r8, #1
 8009e2c:	f88a 2000 	strb.w	r2, [sl]
 8009e30:	781a      	ldrb	r2, [r3, #0]
 8009e32:	3201      	adds	r2, #1
 8009e34:	701a      	strb	r2, [r3, #0]
 8009e36:	e7a0      	b.n	8009d7a <_dtoa_r+0x62a>
 8009e38:	2200      	movs	r2, #0
 8009e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8009ff8 <_dtoa_r+0x8a8>)
 8009e3c:	f7f6 fb56 	bl	80004ec <__aeabi_dmul>
 8009e40:	2200      	movs	r2, #0
 8009e42:	2300      	movs	r3, #0
 8009e44:	4604      	mov	r4, r0
 8009e46:	460d      	mov	r5, r1
 8009e48:	f7f6 fdb8 	bl	80009bc <__aeabi_dcmpeq>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d09f      	beq.n	8009d90 <_dtoa_r+0x640>
 8009e50:	e7d1      	b.n	8009df6 <_dtoa_r+0x6a6>
 8009e52:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e54:	2a00      	cmp	r2, #0
 8009e56:	f000 80ea 	beq.w	800a02e <_dtoa_r+0x8de>
 8009e5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009e5c:	2a01      	cmp	r2, #1
 8009e5e:	f300 80cd 	bgt.w	8009ffc <_dtoa_r+0x8ac>
 8009e62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009e64:	2a00      	cmp	r2, #0
 8009e66:	f000 80c1 	beq.w	8009fec <_dtoa_r+0x89c>
 8009e6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009e6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e70:	9e04      	ldr	r6, [sp, #16]
 8009e72:	9a04      	ldr	r2, [sp, #16]
 8009e74:	2101      	movs	r1, #1
 8009e76:	441a      	add	r2, r3
 8009e78:	9204      	str	r2, [sp, #16]
 8009e7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e7c:	4648      	mov	r0, r9
 8009e7e:	441a      	add	r2, r3
 8009e80:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e82:	f000 ff0b 	bl	800ac9c <__i2b>
 8009e86:	4605      	mov	r5, r0
 8009e88:	b166      	cbz	r6, 8009ea4 <_dtoa_r+0x754>
 8009e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	dd09      	ble.n	8009ea4 <_dtoa_r+0x754>
 8009e90:	42b3      	cmp	r3, r6
 8009e92:	bfa8      	it	ge
 8009e94:	4633      	movge	r3, r6
 8009e96:	9a04      	ldr	r2, [sp, #16]
 8009e98:	1af6      	subs	r6, r6, r3
 8009e9a:	1ad2      	subs	r2, r2, r3
 8009e9c:	9204      	str	r2, [sp, #16]
 8009e9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ea6:	b30b      	cbz	r3, 8009eec <_dtoa_r+0x79c>
 8009ea8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	f000 80c6 	beq.w	800a03c <_dtoa_r+0x8ec>
 8009eb0:	2c00      	cmp	r4, #0
 8009eb2:	f000 80c0 	beq.w	800a036 <_dtoa_r+0x8e6>
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	4622      	mov	r2, r4
 8009eba:	4648      	mov	r0, r9
 8009ebc:	f000 ffa6 	bl	800ae0c <__pow5mult>
 8009ec0:	9a03      	ldr	r2, [sp, #12]
 8009ec2:	4601      	mov	r1, r0
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	4648      	mov	r0, r9
 8009ec8:	f000 fefe 	bl	800acc8 <__multiply>
 8009ecc:	9903      	ldr	r1, [sp, #12]
 8009ece:	4680      	mov	r8, r0
 8009ed0:	4648      	mov	r0, r9
 8009ed2:	f000 fde5 	bl	800aaa0 <_Bfree>
 8009ed6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ed8:	1b1b      	subs	r3, r3, r4
 8009eda:	930a      	str	r3, [sp, #40]	@ 0x28
 8009edc:	f000 80b1 	beq.w	800a042 <_dtoa_r+0x8f2>
 8009ee0:	4641      	mov	r1, r8
 8009ee2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ee4:	4648      	mov	r0, r9
 8009ee6:	f000 ff91 	bl	800ae0c <__pow5mult>
 8009eea:	9003      	str	r0, [sp, #12]
 8009eec:	2101      	movs	r1, #1
 8009eee:	4648      	mov	r0, r9
 8009ef0:	f000 fed4 	bl	800ac9c <__i2b>
 8009ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f000 81d8 	beq.w	800a2ae <_dtoa_r+0xb5e>
 8009efe:	461a      	mov	r2, r3
 8009f00:	4601      	mov	r1, r0
 8009f02:	4648      	mov	r0, r9
 8009f04:	f000 ff82 	bl	800ae0c <__pow5mult>
 8009f08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	f300 809f 	bgt.w	800a050 <_dtoa_r+0x900>
 8009f12:	9b06      	ldr	r3, [sp, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f040 8097 	bne.w	800a048 <_dtoa_r+0x8f8>
 8009f1a:	9b07      	ldr	r3, [sp, #28]
 8009f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f040 8093 	bne.w	800a04c <_dtoa_r+0x8fc>
 8009f26:	9b07      	ldr	r3, [sp, #28]
 8009f28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f2c:	0d1b      	lsrs	r3, r3, #20
 8009f2e:	051b      	lsls	r3, r3, #20
 8009f30:	b133      	cbz	r3, 8009f40 <_dtoa_r+0x7f0>
 8009f32:	9b04      	ldr	r3, [sp, #16]
 8009f34:	3301      	adds	r3, #1
 8009f36:	9304      	str	r3, [sp, #16]
 8009f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f3e:	2301      	movs	r3, #1
 8009f40:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 81b8 	beq.w	800a2ba <_dtoa_r+0xb6a>
 8009f4a:	6923      	ldr	r3, [r4, #16]
 8009f4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f50:	6918      	ldr	r0, [r3, #16]
 8009f52:	f000 fe57 	bl	800ac04 <__hi0bits>
 8009f56:	f1c0 0020 	rsb	r0, r0, #32
 8009f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f5c:	4418      	add	r0, r3
 8009f5e:	f010 001f 	ands.w	r0, r0, #31
 8009f62:	f000 8082 	beq.w	800a06a <_dtoa_r+0x91a>
 8009f66:	f1c0 0320 	rsb	r3, r0, #32
 8009f6a:	2b04      	cmp	r3, #4
 8009f6c:	dd73      	ble.n	800a056 <_dtoa_r+0x906>
 8009f6e:	9b04      	ldr	r3, [sp, #16]
 8009f70:	f1c0 001c 	rsb	r0, r0, #28
 8009f74:	4403      	add	r3, r0
 8009f76:	9304      	str	r3, [sp, #16]
 8009f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f7a:	4406      	add	r6, r0
 8009f7c:	4403      	add	r3, r0
 8009f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f80:	9b04      	ldr	r3, [sp, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	dd05      	ble.n	8009f92 <_dtoa_r+0x842>
 8009f86:	461a      	mov	r2, r3
 8009f88:	4648      	mov	r0, r9
 8009f8a:	9903      	ldr	r1, [sp, #12]
 8009f8c:	f000 ff98 	bl	800aec0 <__lshift>
 8009f90:	9003      	str	r0, [sp, #12]
 8009f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	dd05      	ble.n	8009fa4 <_dtoa_r+0x854>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	4648      	mov	r0, r9
 8009f9e:	f000 ff8f 	bl	800aec0 <__lshift>
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d061      	beq.n	800a06e <_dtoa_r+0x91e>
 8009faa:	4621      	mov	r1, r4
 8009fac:	9803      	ldr	r0, [sp, #12]
 8009fae:	f000 fff3 	bl	800af98 <__mcmp>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	da5b      	bge.n	800a06e <_dtoa_r+0x91e>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	220a      	movs	r2, #10
 8009fba:	4648      	mov	r0, r9
 8009fbc:	9903      	ldr	r1, [sp, #12]
 8009fbe:	f000 fd91 	bl	800aae4 <__multadd>
 8009fc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fc4:	f107 38ff 	add.w	r8, r7, #4294967295
 8009fc8:	9003      	str	r0, [sp, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f000 8177 	beq.w	800a2be <_dtoa_r+0xb6e>
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	220a      	movs	r2, #10
 8009fd6:	4648      	mov	r0, r9
 8009fd8:	f000 fd84 	bl	800aae4 <__multadd>
 8009fdc:	f1bb 0f00 	cmp.w	fp, #0
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	dc6f      	bgt.n	800a0c4 <_dtoa_r+0x974>
 8009fe4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	dc49      	bgt.n	800a07e <_dtoa_r+0x92e>
 8009fea:	e06b      	b.n	800a0c4 <_dtoa_r+0x974>
 8009fec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009fee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009ff2:	e73c      	b.n	8009e6e <_dtoa_r+0x71e>
 8009ff4:	3fe00000 	.word	0x3fe00000
 8009ff8:	40240000 	.word	0x40240000
 8009ffc:	9b08      	ldr	r3, [sp, #32]
 8009ffe:	1e5c      	subs	r4, r3, #1
 800a000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a002:	42a3      	cmp	r3, r4
 800a004:	db09      	blt.n	800a01a <_dtoa_r+0x8ca>
 800a006:	1b1c      	subs	r4, r3, r4
 800a008:	9b08      	ldr	r3, [sp, #32]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f6bf af30 	bge.w	8009e70 <_dtoa_r+0x720>
 800a010:	9b04      	ldr	r3, [sp, #16]
 800a012:	9a08      	ldr	r2, [sp, #32]
 800a014:	1a9e      	subs	r6, r3, r2
 800a016:	2300      	movs	r3, #0
 800a018:	e72b      	b.n	8009e72 <_dtoa_r+0x722>
 800a01a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a01c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a01e:	1ae3      	subs	r3, r4, r3
 800a020:	441a      	add	r2, r3
 800a022:	940a      	str	r4, [sp, #40]	@ 0x28
 800a024:	9e04      	ldr	r6, [sp, #16]
 800a026:	2400      	movs	r4, #0
 800a028:	9b08      	ldr	r3, [sp, #32]
 800a02a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a02c:	e721      	b.n	8009e72 <_dtoa_r+0x722>
 800a02e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a030:	9e04      	ldr	r6, [sp, #16]
 800a032:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a034:	e728      	b.n	8009e88 <_dtoa_r+0x738>
 800a036:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a03a:	e751      	b.n	8009ee0 <_dtoa_r+0x790>
 800a03c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a03e:	9903      	ldr	r1, [sp, #12]
 800a040:	e750      	b.n	8009ee4 <_dtoa_r+0x794>
 800a042:	f8cd 800c 	str.w	r8, [sp, #12]
 800a046:	e751      	b.n	8009eec <_dtoa_r+0x79c>
 800a048:	2300      	movs	r3, #0
 800a04a:	e779      	b.n	8009f40 <_dtoa_r+0x7f0>
 800a04c:	9b06      	ldr	r3, [sp, #24]
 800a04e:	e777      	b.n	8009f40 <_dtoa_r+0x7f0>
 800a050:	2300      	movs	r3, #0
 800a052:	930a      	str	r3, [sp, #40]	@ 0x28
 800a054:	e779      	b.n	8009f4a <_dtoa_r+0x7fa>
 800a056:	d093      	beq.n	8009f80 <_dtoa_r+0x830>
 800a058:	9a04      	ldr	r2, [sp, #16]
 800a05a:	331c      	adds	r3, #28
 800a05c:	441a      	add	r2, r3
 800a05e:	9204      	str	r2, [sp, #16]
 800a060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a062:	441e      	add	r6, r3
 800a064:	441a      	add	r2, r3
 800a066:	9209      	str	r2, [sp, #36]	@ 0x24
 800a068:	e78a      	b.n	8009f80 <_dtoa_r+0x830>
 800a06a:	4603      	mov	r3, r0
 800a06c:	e7f4      	b.n	800a058 <_dtoa_r+0x908>
 800a06e:	9b08      	ldr	r3, [sp, #32]
 800a070:	46b8      	mov	r8, r7
 800a072:	2b00      	cmp	r3, #0
 800a074:	dc20      	bgt.n	800a0b8 <_dtoa_r+0x968>
 800a076:	469b      	mov	fp, r3
 800a078:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	dd1e      	ble.n	800a0bc <_dtoa_r+0x96c>
 800a07e:	f1bb 0f00 	cmp.w	fp, #0
 800a082:	f47f adb1 	bne.w	8009be8 <_dtoa_r+0x498>
 800a086:	4621      	mov	r1, r4
 800a088:	465b      	mov	r3, fp
 800a08a:	2205      	movs	r2, #5
 800a08c:	4648      	mov	r0, r9
 800a08e:	f000 fd29 	bl	800aae4 <__multadd>
 800a092:	4601      	mov	r1, r0
 800a094:	4604      	mov	r4, r0
 800a096:	9803      	ldr	r0, [sp, #12]
 800a098:	f000 ff7e 	bl	800af98 <__mcmp>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	f77f ada3 	ble.w	8009be8 <_dtoa_r+0x498>
 800a0a2:	4656      	mov	r6, sl
 800a0a4:	2331      	movs	r3, #49	@ 0x31
 800a0a6:	f108 0801 	add.w	r8, r8, #1
 800a0aa:	f806 3b01 	strb.w	r3, [r6], #1
 800a0ae:	e59f      	b.n	8009bf0 <_dtoa_r+0x4a0>
 800a0b0:	46b8      	mov	r8, r7
 800a0b2:	9c08      	ldr	r4, [sp, #32]
 800a0b4:	4625      	mov	r5, r4
 800a0b6:	e7f4      	b.n	800a0a2 <_dtoa_r+0x952>
 800a0b8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800a0bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f000 8101 	beq.w	800a2c6 <_dtoa_r+0xb76>
 800a0c4:	2e00      	cmp	r6, #0
 800a0c6:	dd05      	ble.n	800a0d4 <_dtoa_r+0x984>
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	4632      	mov	r2, r6
 800a0cc:	4648      	mov	r0, r9
 800a0ce:	f000 fef7 	bl	800aec0 <__lshift>
 800a0d2:	4605      	mov	r5, r0
 800a0d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d05c      	beq.n	800a194 <_dtoa_r+0xa44>
 800a0da:	4648      	mov	r0, r9
 800a0dc:	6869      	ldr	r1, [r5, #4]
 800a0de:	f000 fc9f 	bl	800aa20 <_Balloc>
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	b928      	cbnz	r0, 800a0f2 <_dtoa_r+0x9a2>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a0ec:	4b80      	ldr	r3, [pc, #512]	@ (800a2f0 <_dtoa_r+0xba0>)
 800a0ee:	f7ff bb43 	b.w	8009778 <_dtoa_r+0x28>
 800a0f2:	692a      	ldr	r2, [r5, #16]
 800a0f4:	f105 010c 	add.w	r1, r5, #12
 800a0f8:	3202      	adds	r2, #2
 800a0fa:	0092      	lsls	r2, r2, #2
 800a0fc:	300c      	adds	r0, #12
 800a0fe:	f7ff fa86 	bl	800960e <memcpy>
 800a102:	2201      	movs	r2, #1
 800a104:	4631      	mov	r1, r6
 800a106:	4648      	mov	r0, r9
 800a108:	f000 feda 	bl	800aec0 <__lshift>
 800a10c:	462f      	mov	r7, r5
 800a10e:	4605      	mov	r5, r0
 800a110:	f10a 0301 	add.w	r3, sl, #1
 800a114:	9304      	str	r3, [sp, #16]
 800a116:	eb0a 030b 	add.w	r3, sl, fp
 800a11a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a11c:	9b06      	ldr	r3, [sp, #24]
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	9309      	str	r3, [sp, #36]	@ 0x24
 800a124:	9b04      	ldr	r3, [sp, #16]
 800a126:	4621      	mov	r1, r4
 800a128:	9803      	ldr	r0, [sp, #12]
 800a12a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a12e:	f7ff fa87 	bl	8009640 <quorem>
 800a132:	4603      	mov	r3, r0
 800a134:	4639      	mov	r1, r7
 800a136:	3330      	adds	r3, #48	@ 0x30
 800a138:	9006      	str	r0, [sp, #24]
 800a13a:	9803      	ldr	r0, [sp, #12]
 800a13c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a13e:	f000 ff2b 	bl	800af98 <__mcmp>
 800a142:	462a      	mov	r2, r5
 800a144:	9008      	str	r0, [sp, #32]
 800a146:	4621      	mov	r1, r4
 800a148:	4648      	mov	r0, r9
 800a14a:	f000 ff41 	bl	800afd0 <__mdiff>
 800a14e:	68c2      	ldr	r2, [r0, #12]
 800a150:	4606      	mov	r6, r0
 800a152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a154:	bb02      	cbnz	r2, 800a198 <_dtoa_r+0xa48>
 800a156:	4601      	mov	r1, r0
 800a158:	9803      	ldr	r0, [sp, #12]
 800a15a:	f000 ff1d 	bl	800af98 <__mcmp>
 800a15e:	4602      	mov	r2, r0
 800a160:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a162:	4631      	mov	r1, r6
 800a164:	4648      	mov	r0, r9
 800a166:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800a16a:	f000 fc99 	bl	800aaa0 <_Bfree>
 800a16e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a170:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a172:	9e04      	ldr	r6, [sp, #16]
 800a174:	ea42 0103 	orr.w	r1, r2, r3
 800a178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a17a:	4319      	orrs	r1, r3
 800a17c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a17e:	d10d      	bne.n	800a19c <_dtoa_r+0xa4c>
 800a180:	2b39      	cmp	r3, #57	@ 0x39
 800a182:	d027      	beq.n	800a1d4 <_dtoa_r+0xa84>
 800a184:	9a08      	ldr	r2, [sp, #32]
 800a186:	2a00      	cmp	r2, #0
 800a188:	dd01      	ble.n	800a18e <_dtoa_r+0xa3e>
 800a18a:	9b06      	ldr	r3, [sp, #24]
 800a18c:	3331      	adds	r3, #49	@ 0x31
 800a18e:	f88b 3000 	strb.w	r3, [fp]
 800a192:	e52e      	b.n	8009bf2 <_dtoa_r+0x4a2>
 800a194:	4628      	mov	r0, r5
 800a196:	e7b9      	b.n	800a10c <_dtoa_r+0x9bc>
 800a198:	2201      	movs	r2, #1
 800a19a:	e7e2      	b.n	800a162 <_dtoa_r+0xa12>
 800a19c:	9908      	ldr	r1, [sp, #32]
 800a19e:	2900      	cmp	r1, #0
 800a1a0:	db04      	blt.n	800a1ac <_dtoa_r+0xa5c>
 800a1a2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800a1a4:	4301      	orrs	r1, r0
 800a1a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1a8:	4301      	orrs	r1, r0
 800a1aa:	d120      	bne.n	800a1ee <_dtoa_r+0xa9e>
 800a1ac:	2a00      	cmp	r2, #0
 800a1ae:	ddee      	ble.n	800a18e <_dtoa_r+0xa3e>
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	9903      	ldr	r1, [sp, #12]
 800a1b4:	4648      	mov	r0, r9
 800a1b6:	9304      	str	r3, [sp, #16]
 800a1b8:	f000 fe82 	bl	800aec0 <__lshift>
 800a1bc:	4621      	mov	r1, r4
 800a1be:	9003      	str	r0, [sp, #12]
 800a1c0:	f000 feea 	bl	800af98 <__mcmp>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	9b04      	ldr	r3, [sp, #16]
 800a1c8:	dc02      	bgt.n	800a1d0 <_dtoa_r+0xa80>
 800a1ca:	d1e0      	bne.n	800a18e <_dtoa_r+0xa3e>
 800a1cc:	07da      	lsls	r2, r3, #31
 800a1ce:	d5de      	bpl.n	800a18e <_dtoa_r+0xa3e>
 800a1d0:	2b39      	cmp	r3, #57	@ 0x39
 800a1d2:	d1da      	bne.n	800a18a <_dtoa_r+0xa3a>
 800a1d4:	2339      	movs	r3, #57	@ 0x39
 800a1d6:	f88b 3000 	strb.w	r3, [fp]
 800a1da:	4633      	mov	r3, r6
 800a1dc:	461e      	mov	r6, r3
 800a1de:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	2a39      	cmp	r2, #57	@ 0x39
 800a1e6:	d04e      	beq.n	800a286 <_dtoa_r+0xb36>
 800a1e8:	3201      	adds	r2, #1
 800a1ea:	701a      	strb	r2, [r3, #0]
 800a1ec:	e501      	b.n	8009bf2 <_dtoa_r+0x4a2>
 800a1ee:	2a00      	cmp	r2, #0
 800a1f0:	dd03      	ble.n	800a1fa <_dtoa_r+0xaaa>
 800a1f2:	2b39      	cmp	r3, #57	@ 0x39
 800a1f4:	d0ee      	beq.n	800a1d4 <_dtoa_r+0xa84>
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	e7c9      	b.n	800a18e <_dtoa_r+0xa3e>
 800a1fa:	9a04      	ldr	r2, [sp, #16]
 800a1fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a1fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a202:	428a      	cmp	r2, r1
 800a204:	d028      	beq.n	800a258 <_dtoa_r+0xb08>
 800a206:	2300      	movs	r3, #0
 800a208:	220a      	movs	r2, #10
 800a20a:	9903      	ldr	r1, [sp, #12]
 800a20c:	4648      	mov	r0, r9
 800a20e:	f000 fc69 	bl	800aae4 <__multadd>
 800a212:	42af      	cmp	r7, r5
 800a214:	9003      	str	r0, [sp, #12]
 800a216:	f04f 0300 	mov.w	r3, #0
 800a21a:	f04f 020a 	mov.w	r2, #10
 800a21e:	4639      	mov	r1, r7
 800a220:	4648      	mov	r0, r9
 800a222:	d107      	bne.n	800a234 <_dtoa_r+0xae4>
 800a224:	f000 fc5e 	bl	800aae4 <__multadd>
 800a228:	4607      	mov	r7, r0
 800a22a:	4605      	mov	r5, r0
 800a22c:	9b04      	ldr	r3, [sp, #16]
 800a22e:	3301      	adds	r3, #1
 800a230:	9304      	str	r3, [sp, #16]
 800a232:	e777      	b.n	800a124 <_dtoa_r+0x9d4>
 800a234:	f000 fc56 	bl	800aae4 <__multadd>
 800a238:	4629      	mov	r1, r5
 800a23a:	4607      	mov	r7, r0
 800a23c:	2300      	movs	r3, #0
 800a23e:	220a      	movs	r2, #10
 800a240:	4648      	mov	r0, r9
 800a242:	f000 fc4f 	bl	800aae4 <__multadd>
 800a246:	4605      	mov	r5, r0
 800a248:	e7f0      	b.n	800a22c <_dtoa_r+0xadc>
 800a24a:	f1bb 0f00 	cmp.w	fp, #0
 800a24e:	bfcc      	ite	gt
 800a250:	465e      	movgt	r6, fp
 800a252:	2601      	movle	r6, #1
 800a254:	2700      	movs	r7, #0
 800a256:	4456      	add	r6, sl
 800a258:	2201      	movs	r2, #1
 800a25a:	9903      	ldr	r1, [sp, #12]
 800a25c:	4648      	mov	r0, r9
 800a25e:	9304      	str	r3, [sp, #16]
 800a260:	f000 fe2e 	bl	800aec0 <__lshift>
 800a264:	4621      	mov	r1, r4
 800a266:	9003      	str	r0, [sp, #12]
 800a268:	f000 fe96 	bl	800af98 <__mcmp>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	dcb4      	bgt.n	800a1da <_dtoa_r+0xa8a>
 800a270:	d102      	bne.n	800a278 <_dtoa_r+0xb28>
 800a272:	9b04      	ldr	r3, [sp, #16]
 800a274:	07db      	lsls	r3, r3, #31
 800a276:	d4b0      	bmi.n	800a1da <_dtoa_r+0xa8a>
 800a278:	4633      	mov	r3, r6
 800a27a:	461e      	mov	r6, r3
 800a27c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a280:	2a30      	cmp	r2, #48	@ 0x30
 800a282:	d0fa      	beq.n	800a27a <_dtoa_r+0xb2a>
 800a284:	e4b5      	b.n	8009bf2 <_dtoa_r+0x4a2>
 800a286:	459a      	cmp	sl, r3
 800a288:	d1a8      	bne.n	800a1dc <_dtoa_r+0xa8c>
 800a28a:	2331      	movs	r3, #49	@ 0x31
 800a28c:	f108 0801 	add.w	r8, r8, #1
 800a290:	f88a 3000 	strb.w	r3, [sl]
 800a294:	e4ad      	b.n	8009bf2 <_dtoa_r+0x4a2>
 800a296:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a298:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a2f4 <_dtoa_r+0xba4>
 800a29c:	b11b      	cbz	r3, 800a2a6 <_dtoa_r+0xb56>
 800a29e:	f10a 0308 	add.w	r3, sl, #8
 800a2a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a2a4:	6013      	str	r3, [r2, #0]
 800a2a6:	4650      	mov	r0, sl
 800a2a8:	b017      	add	sp, #92	@ 0x5c
 800a2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	f77f ae2e 	ble.w	8009f12 <_dtoa_r+0x7c2>
 800a2b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2ba:	2001      	movs	r0, #1
 800a2bc:	e64d      	b.n	8009f5a <_dtoa_r+0x80a>
 800a2be:	f1bb 0f00 	cmp.w	fp, #0
 800a2c2:	f77f aed9 	ble.w	800a078 <_dtoa_r+0x928>
 800a2c6:	4656      	mov	r6, sl
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	9803      	ldr	r0, [sp, #12]
 800a2cc:	f7ff f9b8 	bl	8009640 <quorem>
 800a2d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a2d4:	f806 3b01 	strb.w	r3, [r6], #1
 800a2d8:	eba6 020a 	sub.w	r2, r6, sl
 800a2dc:	4593      	cmp	fp, r2
 800a2de:	ddb4      	ble.n	800a24a <_dtoa_r+0xafa>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	220a      	movs	r2, #10
 800a2e4:	4648      	mov	r0, r9
 800a2e6:	9903      	ldr	r1, [sp, #12]
 800a2e8:	f000 fbfc 	bl	800aae4 <__multadd>
 800a2ec:	9003      	str	r0, [sp, #12]
 800a2ee:	e7eb      	b.n	800a2c8 <_dtoa_r+0xb78>
 800a2f0:	0800c26b 	.word	0x0800c26b
 800a2f4:	0800c1ef 	.word	0x0800c1ef

0800a2f8 <_free_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	2900      	cmp	r1, #0
 800a2fe:	d040      	beq.n	800a382 <_free_r+0x8a>
 800a300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a304:	1f0c      	subs	r4, r1, #4
 800a306:	2b00      	cmp	r3, #0
 800a308:	bfb8      	it	lt
 800a30a:	18e4      	addlt	r4, r4, r3
 800a30c:	f7fd fa2e 	bl	800776c <__malloc_lock>
 800a310:	4a1c      	ldr	r2, [pc, #112]	@ (800a384 <_free_r+0x8c>)
 800a312:	6813      	ldr	r3, [r2, #0]
 800a314:	b933      	cbnz	r3, 800a324 <_free_r+0x2c>
 800a316:	6063      	str	r3, [r4, #4]
 800a318:	6014      	str	r4, [r2, #0]
 800a31a:	4628      	mov	r0, r5
 800a31c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a320:	f7fd ba2a 	b.w	8007778 <__malloc_unlock>
 800a324:	42a3      	cmp	r3, r4
 800a326:	d908      	bls.n	800a33a <_free_r+0x42>
 800a328:	6820      	ldr	r0, [r4, #0]
 800a32a:	1821      	adds	r1, r4, r0
 800a32c:	428b      	cmp	r3, r1
 800a32e:	bf01      	itttt	eq
 800a330:	6819      	ldreq	r1, [r3, #0]
 800a332:	685b      	ldreq	r3, [r3, #4]
 800a334:	1809      	addeq	r1, r1, r0
 800a336:	6021      	streq	r1, [r4, #0]
 800a338:	e7ed      	b.n	800a316 <_free_r+0x1e>
 800a33a:	461a      	mov	r2, r3
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	b10b      	cbz	r3, 800a344 <_free_r+0x4c>
 800a340:	42a3      	cmp	r3, r4
 800a342:	d9fa      	bls.n	800a33a <_free_r+0x42>
 800a344:	6811      	ldr	r1, [r2, #0]
 800a346:	1850      	adds	r0, r2, r1
 800a348:	42a0      	cmp	r0, r4
 800a34a:	d10b      	bne.n	800a364 <_free_r+0x6c>
 800a34c:	6820      	ldr	r0, [r4, #0]
 800a34e:	4401      	add	r1, r0
 800a350:	1850      	adds	r0, r2, r1
 800a352:	4283      	cmp	r3, r0
 800a354:	6011      	str	r1, [r2, #0]
 800a356:	d1e0      	bne.n	800a31a <_free_r+0x22>
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	4408      	add	r0, r1
 800a35e:	6010      	str	r0, [r2, #0]
 800a360:	6053      	str	r3, [r2, #4]
 800a362:	e7da      	b.n	800a31a <_free_r+0x22>
 800a364:	d902      	bls.n	800a36c <_free_r+0x74>
 800a366:	230c      	movs	r3, #12
 800a368:	602b      	str	r3, [r5, #0]
 800a36a:	e7d6      	b.n	800a31a <_free_r+0x22>
 800a36c:	6820      	ldr	r0, [r4, #0]
 800a36e:	1821      	adds	r1, r4, r0
 800a370:	428b      	cmp	r3, r1
 800a372:	bf01      	itttt	eq
 800a374:	6819      	ldreq	r1, [r3, #0]
 800a376:	685b      	ldreq	r3, [r3, #4]
 800a378:	1809      	addeq	r1, r1, r0
 800a37a:	6021      	streq	r1, [r4, #0]
 800a37c:	6063      	str	r3, [r4, #4]
 800a37e:	6054      	str	r4, [r2, #4]
 800a380:	e7cb      	b.n	800a31a <_free_r+0x22>
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	20000aa4 	.word	0x20000aa4

0800a388 <rshift>:
 800a388:	6903      	ldr	r3, [r0, #16]
 800a38a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a38e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a392:	f100 0414 	add.w	r4, r0, #20
 800a396:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a39a:	dd46      	ble.n	800a42a <rshift+0xa2>
 800a39c:	f011 011f 	ands.w	r1, r1, #31
 800a3a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3a8:	d10c      	bne.n	800a3c4 <rshift+0x3c>
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	f100 0710 	add.w	r7, r0, #16
 800a3b0:	42b1      	cmp	r1, r6
 800a3b2:	d335      	bcc.n	800a420 <rshift+0x98>
 800a3b4:	1a9b      	subs	r3, r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	1eea      	subs	r2, r5, #3
 800a3ba:	4296      	cmp	r6, r2
 800a3bc:	bf38      	it	cc
 800a3be:	2300      	movcc	r3, #0
 800a3c0:	4423      	add	r3, r4
 800a3c2:	e015      	b.n	800a3f0 <rshift+0x68>
 800a3c4:	46a1      	mov	r9, r4
 800a3c6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3ca:	f1c1 0820 	rsb	r8, r1, #32
 800a3ce:	40cf      	lsrs	r7, r1
 800a3d0:	f105 0e04 	add.w	lr, r5, #4
 800a3d4:	4576      	cmp	r6, lr
 800a3d6:	46f4      	mov	ip, lr
 800a3d8:	d816      	bhi.n	800a408 <rshift+0x80>
 800a3da:	1a9a      	subs	r2, r3, r2
 800a3dc:	0092      	lsls	r2, r2, #2
 800a3de:	3a04      	subs	r2, #4
 800a3e0:	3501      	adds	r5, #1
 800a3e2:	42ae      	cmp	r6, r5
 800a3e4:	bf38      	it	cc
 800a3e6:	2200      	movcc	r2, #0
 800a3e8:	18a3      	adds	r3, r4, r2
 800a3ea:	50a7      	str	r7, [r4, r2]
 800a3ec:	b107      	cbz	r7, 800a3f0 <rshift+0x68>
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	42a3      	cmp	r3, r4
 800a3f2:	eba3 0204 	sub.w	r2, r3, r4
 800a3f6:	bf08      	it	eq
 800a3f8:	2300      	moveq	r3, #0
 800a3fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3fe:	6102      	str	r2, [r0, #16]
 800a400:	bf08      	it	eq
 800a402:	6143      	streq	r3, [r0, #20]
 800a404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a408:	f8dc c000 	ldr.w	ip, [ip]
 800a40c:	fa0c fc08 	lsl.w	ip, ip, r8
 800a410:	ea4c 0707 	orr.w	r7, ip, r7
 800a414:	f849 7b04 	str.w	r7, [r9], #4
 800a418:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a41c:	40cf      	lsrs	r7, r1
 800a41e:	e7d9      	b.n	800a3d4 <rshift+0x4c>
 800a420:	f851 cb04 	ldr.w	ip, [r1], #4
 800a424:	f847 cf04 	str.w	ip, [r7, #4]!
 800a428:	e7c2      	b.n	800a3b0 <rshift+0x28>
 800a42a:	4623      	mov	r3, r4
 800a42c:	e7e0      	b.n	800a3f0 <rshift+0x68>

0800a42e <__hexdig_fun>:
 800a42e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a432:	2b09      	cmp	r3, #9
 800a434:	d802      	bhi.n	800a43c <__hexdig_fun+0xe>
 800a436:	3820      	subs	r0, #32
 800a438:	b2c0      	uxtb	r0, r0
 800a43a:	4770      	bx	lr
 800a43c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a440:	2b05      	cmp	r3, #5
 800a442:	d801      	bhi.n	800a448 <__hexdig_fun+0x1a>
 800a444:	3847      	subs	r0, #71	@ 0x47
 800a446:	e7f7      	b.n	800a438 <__hexdig_fun+0xa>
 800a448:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a44c:	2b05      	cmp	r3, #5
 800a44e:	d801      	bhi.n	800a454 <__hexdig_fun+0x26>
 800a450:	3827      	subs	r0, #39	@ 0x27
 800a452:	e7f1      	b.n	800a438 <__hexdig_fun+0xa>
 800a454:	2000      	movs	r0, #0
 800a456:	4770      	bx	lr

0800a458 <__gethex>:
 800a458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45c:	468a      	mov	sl, r1
 800a45e:	4690      	mov	r8, r2
 800a460:	b085      	sub	sp, #20
 800a462:	9302      	str	r3, [sp, #8]
 800a464:	680b      	ldr	r3, [r1, #0]
 800a466:	9001      	str	r0, [sp, #4]
 800a468:	1c9c      	adds	r4, r3, #2
 800a46a:	46a1      	mov	r9, r4
 800a46c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a470:	2830      	cmp	r0, #48	@ 0x30
 800a472:	d0fa      	beq.n	800a46a <__gethex+0x12>
 800a474:	eba9 0303 	sub.w	r3, r9, r3
 800a478:	f1a3 0b02 	sub.w	fp, r3, #2
 800a47c:	f7ff ffd7 	bl	800a42e <__hexdig_fun>
 800a480:	4605      	mov	r5, r0
 800a482:	2800      	cmp	r0, #0
 800a484:	d168      	bne.n	800a558 <__gethex+0x100>
 800a486:	2201      	movs	r2, #1
 800a488:	4648      	mov	r0, r9
 800a48a:	499f      	ldr	r1, [pc, #636]	@ (800a708 <__gethex+0x2b0>)
 800a48c:	f7ff f80f 	bl	80094ae <strncmp>
 800a490:	4607      	mov	r7, r0
 800a492:	2800      	cmp	r0, #0
 800a494:	d167      	bne.n	800a566 <__gethex+0x10e>
 800a496:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a49a:	4626      	mov	r6, r4
 800a49c:	f7ff ffc7 	bl	800a42e <__hexdig_fun>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d062      	beq.n	800a56a <__gethex+0x112>
 800a4a4:	4623      	mov	r3, r4
 800a4a6:	7818      	ldrb	r0, [r3, #0]
 800a4a8:	4699      	mov	r9, r3
 800a4aa:	2830      	cmp	r0, #48	@ 0x30
 800a4ac:	f103 0301 	add.w	r3, r3, #1
 800a4b0:	d0f9      	beq.n	800a4a6 <__gethex+0x4e>
 800a4b2:	f7ff ffbc 	bl	800a42e <__hexdig_fun>
 800a4b6:	fab0 f580 	clz	r5, r0
 800a4ba:	f04f 0b01 	mov.w	fp, #1
 800a4be:	096d      	lsrs	r5, r5, #5
 800a4c0:	464a      	mov	r2, r9
 800a4c2:	4616      	mov	r6, r2
 800a4c4:	7830      	ldrb	r0, [r6, #0]
 800a4c6:	3201      	adds	r2, #1
 800a4c8:	f7ff ffb1 	bl	800a42e <__hexdig_fun>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d1f8      	bne.n	800a4c2 <__gethex+0x6a>
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	498c      	ldr	r1, [pc, #560]	@ (800a708 <__gethex+0x2b0>)
 800a4d6:	f7fe ffea 	bl	80094ae <strncmp>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d13f      	bne.n	800a55e <__gethex+0x106>
 800a4de:	b944      	cbnz	r4, 800a4f2 <__gethex+0x9a>
 800a4e0:	1c74      	adds	r4, r6, #1
 800a4e2:	4622      	mov	r2, r4
 800a4e4:	4616      	mov	r6, r2
 800a4e6:	7830      	ldrb	r0, [r6, #0]
 800a4e8:	3201      	adds	r2, #1
 800a4ea:	f7ff ffa0 	bl	800a42e <__hexdig_fun>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d1f8      	bne.n	800a4e4 <__gethex+0x8c>
 800a4f2:	1ba4      	subs	r4, r4, r6
 800a4f4:	00a7      	lsls	r7, r4, #2
 800a4f6:	7833      	ldrb	r3, [r6, #0]
 800a4f8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a4fc:	2b50      	cmp	r3, #80	@ 0x50
 800a4fe:	d13e      	bne.n	800a57e <__gethex+0x126>
 800a500:	7873      	ldrb	r3, [r6, #1]
 800a502:	2b2b      	cmp	r3, #43	@ 0x2b
 800a504:	d033      	beq.n	800a56e <__gethex+0x116>
 800a506:	2b2d      	cmp	r3, #45	@ 0x2d
 800a508:	d034      	beq.n	800a574 <__gethex+0x11c>
 800a50a:	2400      	movs	r4, #0
 800a50c:	1c71      	adds	r1, r6, #1
 800a50e:	7808      	ldrb	r0, [r1, #0]
 800a510:	f7ff ff8d 	bl	800a42e <__hexdig_fun>
 800a514:	1e43      	subs	r3, r0, #1
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b18      	cmp	r3, #24
 800a51a:	d830      	bhi.n	800a57e <__gethex+0x126>
 800a51c:	f1a0 0210 	sub.w	r2, r0, #16
 800a520:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a524:	f7ff ff83 	bl	800a42e <__hexdig_fun>
 800a528:	f100 3cff 	add.w	ip, r0, #4294967295
 800a52c:	fa5f fc8c 	uxtb.w	ip, ip
 800a530:	f1bc 0f18 	cmp.w	ip, #24
 800a534:	f04f 030a 	mov.w	r3, #10
 800a538:	d91e      	bls.n	800a578 <__gethex+0x120>
 800a53a:	b104      	cbz	r4, 800a53e <__gethex+0xe6>
 800a53c:	4252      	negs	r2, r2
 800a53e:	4417      	add	r7, r2
 800a540:	f8ca 1000 	str.w	r1, [sl]
 800a544:	b1ed      	cbz	r5, 800a582 <__gethex+0x12a>
 800a546:	f1bb 0f00 	cmp.w	fp, #0
 800a54a:	bf0c      	ite	eq
 800a54c:	2506      	moveq	r5, #6
 800a54e:	2500      	movne	r5, #0
 800a550:	4628      	mov	r0, r5
 800a552:	b005      	add	sp, #20
 800a554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a558:	2500      	movs	r5, #0
 800a55a:	462c      	mov	r4, r5
 800a55c:	e7b0      	b.n	800a4c0 <__gethex+0x68>
 800a55e:	2c00      	cmp	r4, #0
 800a560:	d1c7      	bne.n	800a4f2 <__gethex+0x9a>
 800a562:	4627      	mov	r7, r4
 800a564:	e7c7      	b.n	800a4f6 <__gethex+0x9e>
 800a566:	464e      	mov	r6, r9
 800a568:	462f      	mov	r7, r5
 800a56a:	2501      	movs	r5, #1
 800a56c:	e7c3      	b.n	800a4f6 <__gethex+0x9e>
 800a56e:	2400      	movs	r4, #0
 800a570:	1cb1      	adds	r1, r6, #2
 800a572:	e7cc      	b.n	800a50e <__gethex+0xb6>
 800a574:	2401      	movs	r4, #1
 800a576:	e7fb      	b.n	800a570 <__gethex+0x118>
 800a578:	fb03 0002 	mla	r0, r3, r2, r0
 800a57c:	e7ce      	b.n	800a51c <__gethex+0xc4>
 800a57e:	4631      	mov	r1, r6
 800a580:	e7de      	b.n	800a540 <__gethex+0xe8>
 800a582:	4629      	mov	r1, r5
 800a584:	eba6 0309 	sub.w	r3, r6, r9
 800a588:	3b01      	subs	r3, #1
 800a58a:	2b07      	cmp	r3, #7
 800a58c:	dc0a      	bgt.n	800a5a4 <__gethex+0x14c>
 800a58e:	9801      	ldr	r0, [sp, #4]
 800a590:	f000 fa46 	bl	800aa20 <_Balloc>
 800a594:	4604      	mov	r4, r0
 800a596:	b940      	cbnz	r0, 800a5aa <__gethex+0x152>
 800a598:	4602      	mov	r2, r0
 800a59a:	21e4      	movs	r1, #228	@ 0xe4
 800a59c:	4b5b      	ldr	r3, [pc, #364]	@ (800a70c <__gethex+0x2b4>)
 800a59e:	485c      	ldr	r0, [pc, #368]	@ (800a710 <__gethex+0x2b8>)
 800a5a0:	f001 fb44 	bl	800bc2c <__assert_func>
 800a5a4:	3101      	adds	r1, #1
 800a5a6:	105b      	asrs	r3, r3, #1
 800a5a8:	e7ef      	b.n	800a58a <__gethex+0x132>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f100 0a14 	add.w	sl, r0, #20
 800a5b0:	4655      	mov	r5, sl
 800a5b2:	469b      	mov	fp, r3
 800a5b4:	45b1      	cmp	r9, r6
 800a5b6:	d337      	bcc.n	800a628 <__gethex+0x1d0>
 800a5b8:	f845 bb04 	str.w	fp, [r5], #4
 800a5bc:	eba5 050a 	sub.w	r5, r5, sl
 800a5c0:	10ad      	asrs	r5, r5, #2
 800a5c2:	6125      	str	r5, [r4, #16]
 800a5c4:	4658      	mov	r0, fp
 800a5c6:	f000 fb1d 	bl	800ac04 <__hi0bits>
 800a5ca:	016d      	lsls	r5, r5, #5
 800a5cc:	f8d8 6000 	ldr.w	r6, [r8]
 800a5d0:	1a2d      	subs	r5, r5, r0
 800a5d2:	42b5      	cmp	r5, r6
 800a5d4:	dd54      	ble.n	800a680 <__gethex+0x228>
 800a5d6:	1bad      	subs	r5, r5, r6
 800a5d8:	4629      	mov	r1, r5
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f000 fe9f 	bl	800b31e <__any_on>
 800a5e0:	4681      	mov	r9, r0
 800a5e2:	b178      	cbz	r0, 800a604 <__gethex+0x1ac>
 800a5e4:	f04f 0901 	mov.w	r9, #1
 800a5e8:	1e6b      	subs	r3, r5, #1
 800a5ea:	1159      	asrs	r1, r3, #5
 800a5ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a5f0:	f003 021f 	and.w	r2, r3, #31
 800a5f4:	fa09 f202 	lsl.w	r2, r9, r2
 800a5f8:	420a      	tst	r2, r1
 800a5fa:	d003      	beq.n	800a604 <__gethex+0x1ac>
 800a5fc:	454b      	cmp	r3, r9
 800a5fe:	dc36      	bgt.n	800a66e <__gethex+0x216>
 800a600:	f04f 0902 	mov.w	r9, #2
 800a604:	4629      	mov	r1, r5
 800a606:	4620      	mov	r0, r4
 800a608:	f7ff febe 	bl	800a388 <rshift>
 800a60c:	442f      	add	r7, r5
 800a60e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a612:	42bb      	cmp	r3, r7
 800a614:	da42      	bge.n	800a69c <__gethex+0x244>
 800a616:	4621      	mov	r1, r4
 800a618:	9801      	ldr	r0, [sp, #4]
 800a61a:	f000 fa41 	bl	800aaa0 <_Bfree>
 800a61e:	2300      	movs	r3, #0
 800a620:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a622:	25a3      	movs	r5, #163	@ 0xa3
 800a624:	6013      	str	r3, [r2, #0]
 800a626:	e793      	b.n	800a550 <__gethex+0xf8>
 800a628:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a62c:	2a2e      	cmp	r2, #46	@ 0x2e
 800a62e:	d012      	beq.n	800a656 <__gethex+0x1fe>
 800a630:	2b20      	cmp	r3, #32
 800a632:	d104      	bne.n	800a63e <__gethex+0x1e6>
 800a634:	f845 bb04 	str.w	fp, [r5], #4
 800a638:	f04f 0b00 	mov.w	fp, #0
 800a63c:	465b      	mov	r3, fp
 800a63e:	7830      	ldrb	r0, [r6, #0]
 800a640:	9303      	str	r3, [sp, #12]
 800a642:	f7ff fef4 	bl	800a42e <__hexdig_fun>
 800a646:	9b03      	ldr	r3, [sp, #12]
 800a648:	f000 000f 	and.w	r0, r0, #15
 800a64c:	4098      	lsls	r0, r3
 800a64e:	ea4b 0b00 	orr.w	fp, fp, r0
 800a652:	3304      	adds	r3, #4
 800a654:	e7ae      	b.n	800a5b4 <__gethex+0x15c>
 800a656:	45b1      	cmp	r9, r6
 800a658:	d8ea      	bhi.n	800a630 <__gethex+0x1d8>
 800a65a:	2201      	movs	r2, #1
 800a65c:	4630      	mov	r0, r6
 800a65e:	492a      	ldr	r1, [pc, #168]	@ (800a708 <__gethex+0x2b0>)
 800a660:	9303      	str	r3, [sp, #12]
 800a662:	f7fe ff24 	bl	80094ae <strncmp>
 800a666:	9b03      	ldr	r3, [sp, #12]
 800a668:	2800      	cmp	r0, #0
 800a66a:	d1e1      	bne.n	800a630 <__gethex+0x1d8>
 800a66c:	e7a2      	b.n	800a5b4 <__gethex+0x15c>
 800a66e:	4620      	mov	r0, r4
 800a670:	1ea9      	subs	r1, r5, #2
 800a672:	f000 fe54 	bl	800b31e <__any_on>
 800a676:	2800      	cmp	r0, #0
 800a678:	d0c2      	beq.n	800a600 <__gethex+0x1a8>
 800a67a:	f04f 0903 	mov.w	r9, #3
 800a67e:	e7c1      	b.n	800a604 <__gethex+0x1ac>
 800a680:	da09      	bge.n	800a696 <__gethex+0x23e>
 800a682:	1b75      	subs	r5, r6, r5
 800a684:	4621      	mov	r1, r4
 800a686:	462a      	mov	r2, r5
 800a688:	9801      	ldr	r0, [sp, #4]
 800a68a:	f000 fc19 	bl	800aec0 <__lshift>
 800a68e:	4604      	mov	r4, r0
 800a690:	1b7f      	subs	r7, r7, r5
 800a692:	f100 0a14 	add.w	sl, r0, #20
 800a696:	f04f 0900 	mov.w	r9, #0
 800a69a:	e7b8      	b.n	800a60e <__gethex+0x1b6>
 800a69c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6a0:	42bd      	cmp	r5, r7
 800a6a2:	dd6f      	ble.n	800a784 <__gethex+0x32c>
 800a6a4:	1bed      	subs	r5, r5, r7
 800a6a6:	42ae      	cmp	r6, r5
 800a6a8:	dc34      	bgt.n	800a714 <__gethex+0x2bc>
 800a6aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d022      	beq.n	800a6f8 <__gethex+0x2a0>
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d024      	beq.n	800a700 <__gethex+0x2a8>
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d115      	bne.n	800a6e6 <__gethex+0x28e>
 800a6ba:	42ae      	cmp	r6, r5
 800a6bc:	d113      	bne.n	800a6e6 <__gethex+0x28e>
 800a6be:	2e01      	cmp	r6, #1
 800a6c0:	d10b      	bne.n	800a6da <__gethex+0x282>
 800a6c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6c6:	9a02      	ldr	r2, [sp, #8]
 800a6c8:	2562      	movs	r5, #98	@ 0x62
 800a6ca:	6013      	str	r3, [r2, #0]
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	6123      	str	r3, [r4, #16]
 800a6d0:	f8ca 3000 	str.w	r3, [sl]
 800a6d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6d6:	601c      	str	r4, [r3, #0]
 800a6d8:	e73a      	b.n	800a550 <__gethex+0xf8>
 800a6da:	4620      	mov	r0, r4
 800a6dc:	1e71      	subs	r1, r6, #1
 800a6de:	f000 fe1e 	bl	800b31e <__any_on>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d1ed      	bne.n	800a6c2 <__gethex+0x26a>
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	9801      	ldr	r0, [sp, #4]
 800a6ea:	f000 f9d9 	bl	800aaa0 <_Bfree>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6f2:	2550      	movs	r5, #80	@ 0x50
 800a6f4:	6013      	str	r3, [r2, #0]
 800a6f6:	e72b      	b.n	800a550 <__gethex+0xf8>
 800a6f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1f3      	bne.n	800a6e6 <__gethex+0x28e>
 800a6fe:	e7e0      	b.n	800a6c2 <__gethex+0x26a>
 800a700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1dd      	bne.n	800a6c2 <__gethex+0x26a>
 800a706:	e7ee      	b.n	800a6e6 <__gethex+0x28e>
 800a708:	0800c1ac 	.word	0x0800c1ac
 800a70c:	0800c26b 	.word	0x0800c26b
 800a710:	0800c27c 	.word	0x0800c27c
 800a714:	1e6f      	subs	r7, r5, #1
 800a716:	f1b9 0f00 	cmp.w	r9, #0
 800a71a:	d130      	bne.n	800a77e <__gethex+0x326>
 800a71c:	b127      	cbz	r7, 800a728 <__gethex+0x2d0>
 800a71e:	4639      	mov	r1, r7
 800a720:	4620      	mov	r0, r4
 800a722:	f000 fdfc 	bl	800b31e <__any_on>
 800a726:	4681      	mov	r9, r0
 800a728:	2301      	movs	r3, #1
 800a72a:	4629      	mov	r1, r5
 800a72c:	1b76      	subs	r6, r6, r5
 800a72e:	2502      	movs	r5, #2
 800a730:	117a      	asrs	r2, r7, #5
 800a732:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a736:	f007 071f 	and.w	r7, r7, #31
 800a73a:	40bb      	lsls	r3, r7
 800a73c:	4213      	tst	r3, r2
 800a73e:	4620      	mov	r0, r4
 800a740:	bf18      	it	ne
 800a742:	f049 0902 	orrne.w	r9, r9, #2
 800a746:	f7ff fe1f 	bl	800a388 <rshift>
 800a74a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a74e:	f1b9 0f00 	cmp.w	r9, #0
 800a752:	d047      	beq.n	800a7e4 <__gethex+0x38c>
 800a754:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d015      	beq.n	800a788 <__gethex+0x330>
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d017      	beq.n	800a790 <__gethex+0x338>
 800a760:	2b01      	cmp	r3, #1
 800a762:	d109      	bne.n	800a778 <__gethex+0x320>
 800a764:	f019 0f02 	tst.w	r9, #2
 800a768:	d006      	beq.n	800a778 <__gethex+0x320>
 800a76a:	f8da 3000 	ldr.w	r3, [sl]
 800a76e:	ea49 0903 	orr.w	r9, r9, r3
 800a772:	f019 0f01 	tst.w	r9, #1
 800a776:	d10e      	bne.n	800a796 <__gethex+0x33e>
 800a778:	f045 0510 	orr.w	r5, r5, #16
 800a77c:	e032      	b.n	800a7e4 <__gethex+0x38c>
 800a77e:	f04f 0901 	mov.w	r9, #1
 800a782:	e7d1      	b.n	800a728 <__gethex+0x2d0>
 800a784:	2501      	movs	r5, #1
 800a786:	e7e2      	b.n	800a74e <__gethex+0x2f6>
 800a788:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a78a:	f1c3 0301 	rsb	r3, r3, #1
 800a78e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0f0      	beq.n	800a778 <__gethex+0x320>
 800a796:	f04f 0c00 	mov.w	ip, #0
 800a79a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a79e:	f104 0314 	add.w	r3, r4, #20
 800a7a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7b4:	d01b      	beq.n	800a7ee <__gethex+0x396>
 800a7b6:	3201      	adds	r2, #1
 800a7b8:	6002      	str	r2, [r0, #0]
 800a7ba:	2d02      	cmp	r5, #2
 800a7bc:	f104 0314 	add.w	r3, r4, #20
 800a7c0:	d13c      	bne.n	800a83c <__gethex+0x3e4>
 800a7c2:	f8d8 2000 	ldr.w	r2, [r8]
 800a7c6:	3a01      	subs	r2, #1
 800a7c8:	42b2      	cmp	r2, r6
 800a7ca:	d109      	bne.n	800a7e0 <__gethex+0x388>
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	1171      	asrs	r1, r6, #5
 800a7d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7d4:	f006 061f 	and.w	r6, r6, #31
 800a7d8:	fa02 f606 	lsl.w	r6, r2, r6
 800a7dc:	421e      	tst	r6, r3
 800a7de:	d13a      	bne.n	800a856 <__gethex+0x3fe>
 800a7e0:	f045 0520 	orr.w	r5, r5, #32
 800a7e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7e6:	601c      	str	r4, [r3, #0]
 800a7e8:	9b02      	ldr	r3, [sp, #8]
 800a7ea:	601f      	str	r7, [r3, #0]
 800a7ec:	e6b0      	b.n	800a550 <__gethex+0xf8>
 800a7ee:	4299      	cmp	r1, r3
 800a7f0:	f843 cc04 	str.w	ip, [r3, #-4]
 800a7f4:	d8d9      	bhi.n	800a7aa <__gethex+0x352>
 800a7f6:	68a3      	ldr	r3, [r4, #8]
 800a7f8:	459b      	cmp	fp, r3
 800a7fa:	db17      	blt.n	800a82c <__gethex+0x3d4>
 800a7fc:	6861      	ldr	r1, [r4, #4]
 800a7fe:	9801      	ldr	r0, [sp, #4]
 800a800:	3101      	adds	r1, #1
 800a802:	f000 f90d 	bl	800aa20 <_Balloc>
 800a806:	4681      	mov	r9, r0
 800a808:	b918      	cbnz	r0, 800a812 <__gethex+0x3ba>
 800a80a:	4602      	mov	r2, r0
 800a80c:	2184      	movs	r1, #132	@ 0x84
 800a80e:	4b19      	ldr	r3, [pc, #100]	@ (800a874 <__gethex+0x41c>)
 800a810:	e6c5      	b.n	800a59e <__gethex+0x146>
 800a812:	6922      	ldr	r2, [r4, #16]
 800a814:	f104 010c 	add.w	r1, r4, #12
 800a818:	3202      	adds	r2, #2
 800a81a:	0092      	lsls	r2, r2, #2
 800a81c:	300c      	adds	r0, #12
 800a81e:	f7fe fef6 	bl	800960e <memcpy>
 800a822:	4621      	mov	r1, r4
 800a824:	9801      	ldr	r0, [sp, #4]
 800a826:	f000 f93b 	bl	800aaa0 <_Bfree>
 800a82a:	464c      	mov	r4, r9
 800a82c:	6923      	ldr	r3, [r4, #16]
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	6122      	str	r2, [r4, #16]
 800a832:	2201      	movs	r2, #1
 800a834:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a838:	615a      	str	r2, [r3, #20]
 800a83a:	e7be      	b.n	800a7ba <__gethex+0x362>
 800a83c:	6922      	ldr	r2, [r4, #16]
 800a83e:	455a      	cmp	r2, fp
 800a840:	dd0b      	ble.n	800a85a <__gethex+0x402>
 800a842:	2101      	movs	r1, #1
 800a844:	4620      	mov	r0, r4
 800a846:	f7ff fd9f 	bl	800a388 <rshift>
 800a84a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a84e:	3701      	adds	r7, #1
 800a850:	42bb      	cmp	r3, r7
 800a852:	f6ff aee0 	blt.w	800a616 <__gethex+0x1be>
 800a856:	2501      	movs	r5, #1
 800a858:	e7c2      	b.n	800a7e0 <__gethex+0x388>
 800a85a:	f016 061f 	ands.w	r6, r6, #31
 800a85e:	d0fa      	beq.n	800a856 <__gethex+0x3fe>
 800a860:	4453      	add	r3, sl
 800a862:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a866:	f000 f9cd 	bl	800ac04 <__hi0bits>
 800a86a:	f1c6 0620 	rsb	r6, r6, #32
 800a86e:	42b0      	cmp	r0, r6
 800a870:	dbe7      	blt.n	800a842 <__gethex+0x3ea>
 800a872:	e7f0      	b.n	800a856 <__gethex+0x3fe>
 800a874:	0800c26b 	.word	0x0800c26b

0800a878 <L_shift>:
 800a878:	f1c2 0208 	rsb	r2, r2, #8
 800a87c:	0092      	lsls	r2, r2, #2
 800a87e:	b570      	push	{r4, r5, r6, lr}
 800a880:	f1c2 0620 	rsb	r6, r2, #32
 800a884:	6843      	ldr	r3, [r0, #4]
 800a886:	6804      	ldr	r4, [r0, #0]
 800a888:	fa03 f506 	lsl.w	r5, r3, r6
 800a88c:	432c      	orrs	r4, r5
 800a88e:	40d3      	lsrs	r3, r2
 800a890:	6004      	str	r4, [r0, #0]
 800a892:	f840 3f04 	str.w	r3, [r0, #4]!
 800a896:	4288      	cmp	r0, r1
 800a898:	d3f4      	bcc.n	800a884 <L_shift+0xc>
 800a89a:	bd70      	pop	{r4, r5, r6, pc}

0800a89c <__match>:
 800a89c:	b530      	push	{r4, r5, lr}
 800a89e:	6803      	ldr	r3, [r0, #0]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8a6:	b914      	cbnz	r4, 800a8ae <__match+0x12>
 800a8a8:	6003      	str	r3, [r0, #0]
 800a8aa:	2001      	movs	r0, #1
 800a8ac:	bd30      	pop	{r4, r5, pc}
 800a8ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8b2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a8b6:	2d19      	cmp	r5, #25
 800a8b8:	bf98      	it	ls
 800a8ba:	3220      	addls	r2, #32
 800a8bc:	42a2      	cmp	r2, r4
 800a8be:	d0f0      	beq.n	800a8a2 <__match+0x6>
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	e7f3      	b.n	800a8ac <__match+0x10>

0800a8c4 <__hexnan>:
 800a8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c8:	2500      	movs	r5, #0
 800a8ca:	680b      	ldr	r3, [r1, #0]
 800a8cc:	4682      	mov	sl, r0
 800a8ce:	115e      	asrs	r6, r3, #5
 800a8d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8d4:	f013 031f 	ands.w	r3, r3, #31
 800a8d8:	bf18      	it	ne
 800a8da:	3604      	addne	r6, #4
 800a8dc:	1f37      	subs	r7, r6, #4
 800a8de:	4690      	mov	r8, r2
 800a8e0:	46b9      	mov	r9, r7
 800a8e2:	463c      	mov	r4, r7
 800a8e4:	46ab      	mov	fp, r5
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	6801      	ldr	r1, [r0, #0]
 800a8ea:	9301      	str	r3, [sp, #4]
 800a8ec:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8f0:	9502      	str	r5, [sp, #8]
 800a8f2:	784a      	ldrb	r2, [r1, #1]
 800a8f4:	1c4b      	adds	r3, r1, #1
 800a8f6:	9303      	str	r3, [sp, #12]
 800a8f8:	b342      	cbz	r2, 800a94c <__hexnan+0x88>
 800a8fa:	4610      	mov	r0, r2
 800a8fc:	9105      	str	r1, [sp, #20]
 800a8fe:	9204      	str	r2, [sp, #16]
 800a900:	f7ff fd95 	bl	800a42e <__hexdig_fun>
 800a904:	2800      	cmp	r0, #0
 800a906:	d151      	bne.n	800a9ac <__hexnan+0xe8>
 800a908:	9a04      	ldr	r2, [sp, #16]
 800a90a:	9905      	ldr	r1, [sp, #20]
 800a90c:	2a20      	cmp	r2, #32
 800a90e:	d818      	bhi.n	800a942 <__hexnan+0x7e>
 800a910:	9b02      	ldr	r3, [sp, #8]
 800a912:	459b      	cmp	fp, r3
 800a914:	dd13      	ble.n	800a93e <__hexnan+0x7a>
 800a916:	454c      	cmp	r4, r9
 800a918:	d206      	bcs.n	800a928 <__hexnan+0x64>
 800a91a:	2d07      	cmp	r5, #7
 800a91c:	dc04      	bgt.n	800a928 <__hexnan+0x64>
 800a91e:	462a      	mov	r2, r5
 800a920:	4649      	mov	r1, r9
 800a922:	4620      	mov	r0, r4
 800a924:	f7ff ffa8 	bl	800a878 <L_shift>
 800a928:	4544      	cmp	r4, r8
 800a92a:	d952      	bls.n	800a9d2 <__hexnan+0x10e>
 800a92c:	2300      	movs	r3, #0
 800a92e:	f1a4 0904 	sub.w	r9, r4, #4
 800a932:	f844 3c04 	str.w	r3, [r4, #-4]
 800a936:	461d      	mov	r5, r3
 800a938:	464c      	mov	r4, r9
 800a93a:	f8cd b008 	str.w	fp, [sp, #8]
 800a93e:	9903      	ldr	r1, [sp, #12]
 800a940:	e7d7      	b.n	800a8f2 <__hexnan+0x2e>
 800a942:	2a29      	cmp	r2, #41	@ 0x29
 800a944:	d157      	bne.n	800a9f6 <__hexnan+0x132>
 800a946:	3102      	adds	r1, #2
 800a948:	f8ca 1000 	str.w	r1, [sl]
 800a94c:	f1bb 0f00 	cmp.w	fp, #0
 800a950:	d051      	beq.n	800a9f6 <__hexnan+0x132>
 800a952:	454c      	cmp	r4, r9
 800a954:	d206      	bcs.n	800a964 <__hexnan+0xa0>
 800a956:	2d07      	cmp	r5, #7
 800a958:	dc04      	bgt.n	800a964 <__hexnan+0xa0>
 800a95a:	462a      	mov	r2, r5
 800a95c:	4649      	mov	r1, r9
 800a95e:	4620      	mov	r0, r4
 800a960:	f7ff ff8a 	bl	800a878 <L_shift>
 800a964:	4544      	cmp	r4, r8
 800a966:	d936      	bls.n	800a9d6 <__hexnan+0x112>
 800a968:	4623      	mov	r3, r4
 800a96a:	f1a8 0204 	sub.w	r2, r8, #4
 800a96e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a972:	429f      	cmp	r7, r3
 800a974:	f842 1f04 	str.w	r1, [r2, #4]!
 800a978:	d2f9      	bcs.n	800a96e <__hexnan+0xaa>
 800a97a:	1b3b      	subs	r3, r7, r4
 800a97c:	f023 0303 	bic.w	r3, r3, #3
 800a980:	3304      	adds	r3, #4
 800a982:	3401      	adds	r4, #1
 800a984:	3e03      	subs	r6, #3
 800a986:	42b4      	cmp	r4, r6
 800a988:	bf88      	it	hi
 800a98a:	2304      	movhi	r3, #4
 800a98c:	2200      	movs	r2, #0
 800a98e:	4443      	add	r3, r8
 800a990:	f843 2b04 	str.w	r2, [r3], #4
 800a994:	429f      	cmp	r7, r3
 800a996:	d2fb      	bcs.n	800a990 <__hexnan+0xcc>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	b91b      	cbnz	r3, 800a9a4 <__hexnan+0xe0>
 800a99c:	4547      	cmp	r7, r8
 800a99e:	d128      	bne.n	800a9f2 <__hexnan+0x12e>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	603b      	str	r3, [r7, #0]
 800a9a4:	2005      	movs	r0, #5
 800a9a6:	b007      	add	sp, #28
 800a9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ac:	3501      	adds	r5, #1
 800a9ae:	2d08      	cmp	r5, #8
 800a9b0:	f10b 0b01 	add.w	fp, fp, #1
 800a9b4:	dd06      	ble.n	800a9c4 <__hexnan+0x100>
 800a9b6:	4544      	cmp	r4, r8
 800a9b8:	d9c1      	bls.n	800a93e <__hexnan+0x7a>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	2501      	movs	r5, #1
 800a9be:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9c2:	3c04      	subs	r4, #4
 800a9c4:	6822      	ldr	r2, [r4, #0]
 800a9c6:	f000 000f 	and.w	r0, r0, #15
 800a9ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a9ce:	6020      	str	r0, [r4, #0]
 800a9d0:	e7b5      	b.n	800a93e <__hexnan+0x7a>
 800a9d2:	2508      	movs	r5, #8
 800a9d4:	e7b3      	b.n	800a93e <__hexnan+0x7a>
 800a9d6:	9b01      	ldr	r3, [sp, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d0dd      	beq.n	800a998 <__hexnan+0xd4>
 800a9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e0:	f1c3 0320 	rsb	r3, r3, #32
 800a9e4:	40da      	lsrs	r2, r3
 800a9e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	f846 3c04 	str.w	r3, [r6, #-4]
 800a9f0:	e7d2      	b.n	800a998 <__hexnan+0xd4>
 800a9f2:	3f04      	subs	r7, #4
 800a9f4:	e7d0      	b.n	800a998 <__hexnan+0xd4>
 800a9f6:	2004      	movs	r0, #4
 800a9f8:	e7d5      	b.n	800a9a6 <__hexnan+0xe2>

0800a9fa <__ascii_mbtowc>:
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	b901      	cbnz	r1, 800aa00 <__ascii_mbtowc+0x6>
 800a9fe:	a901      	add	r1, sp, #4
 800aa00:	b142      	cbz	r2, 800aa14 <__ascii_mbtowc+0x1a>
 800aa02:	b14b      	cbz	r3, 800aa18 <__ascii_mbtowc+0x1e>
 800aa04:	7813      	ldrb	r3, [r2, #0]
 800aa06:	600b      	str	r3, [r1, #0]
 800aa08:	7812      	ldrb	r2, [r2, #0]
 800aa0a:	1e10      	subs	r0, r2, #0
 800aa0c:	bf18      	it	ne
 800aa0e:	2001      	movne	r0, #1
 800aa10:	b002      	add	sp, #8
 800aa12:	4770      	bx	lr
 800aa14:	4610      	mov	r0, r2
 800aa16:	e7fb      	b.n	800aa10 <__ascii_mbtowc+0x16>
 800aa18:	f06f 0001 	mvn.w	r0, #1
 800aa1c:	e7f8      	b.n	800aa10 <__ascii_mbtowc+0x16>
	...

0800aa20 <_Balloc>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	69c6      	ldr	r6, [r0, #28]
 800aa24:	4604      	mov	r4, r0
 800aa26:	460d      	mov	r5, r1
 800aa28:	b976      	cbnz	r6, 800aa48 <_Balloc+0x28>
 800aa2a:	2010      	movs	r0, #16
 800aa2c:	f7fc fdec 	bl	8007608 <malloc>
 800aa30:	4602      	mov	r2, r0
 800aa32:	61e0      	str	r0, [r4, #28]
 800aa34:	b920      	cbnz	r0, 800aa40 <_Balloc+0x20>
 800aa36:	216b      	movs	r1, #107	@ 0x6b
 800aa38:	4b17      	ldr	r3, [pc, #92]	@ (800aa98 <_Balloc+0x78>)
 800aa3a:	4818      	ldr	r0, [pc, #96]	@ (800aa9c <_Balloc+0x7c>)
 800aa3c:	f001 f8f6 	bl	800bc2c <__assert_func>
 800aa40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa44:	6006      	str	r6, [r0, #0]
 800aa46:	60c6      	str	r6, [r0, #12]
 800aa48:	69e6      	ldr	r6, [r4, #28]
 800aa4a:	68f3      	ldr	r3, [r6, #12]
 800aa4c:	b183      	cbz	r3, 800aa70 <_Balloc+0x50>
 800aa4e:	69e3      	ldr	r3, [r4, #28]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa56:	b9b8      	cbnz	r0, 800aa88 <_Balloc+0x68>
 800aa58:	2101      	movs	r1, #1
 800aa5a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa5e:	1d72      	adds	r2, r6, #5
 800aa60:	4620      	mov	r0, r4
 800aa62:	0092      	lsls	r2, r2, #2
 800aa64:	f001 f900 	bl	800bc68 <_calloc_r>
 800aa68:	b160      	cbz	r0, 800aa84 <_Balloc+0x64>
 800aa6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa6e:	e00e      	b.n	800aa8e <_Balloc+0x6e>
 800aa70:	2221      	movs	r2, #33	@ 0x21
 800aa72:	2104      	movs	r1, #4
 800aa74:	4620      	mov	r0, r4
 800aa76:	f001 f8f7 	bl	800bc68 <_calloc_r>
 800aa7a:	69e3      	ldr	r3, [r4, #28]
 800aa7c:	60f0      	str	r0, [r6, #12]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e4      	bne.n	800aa4e <_Balloc+0x2e>
 800aa84:	2000      	movs	r0, #0
 800aa86:	bd70      	pop	{r4, r5, r6, pc}
 800aa88:	6802      	ldr	r2, [r0, #0]
 800aa8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa8e:	2300      	movs	r3, #0
 800aa90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa94:	e7f7      	b.n	800aa86 <_Balloc+0x66>
 800aa96:	bf00      	nop
 800aa98:	0800c1fc 	.word	0x0800c1fc
 800aa9c:	0800c2dc 	.word	0x0800c2dc

0800aaa0 <_Bfree>:
 800aaa0:	b570      	push	{r4, r5, r6, lr}
 800aaa2:	69c6      	ldr	r6, [r0, #28]
 800aaa4:	4605      	mov	r5, r0
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	b976      	cbnz	r6, 800aac8 <_Bfree+0x28>
 800aaaa:	2010      	movs	r0, #16
 800aaac:	f7fc fdac 	bl	8007608 <malloc>
 800aab0:	4602      	mov	r2, r0
 800aab2:	61e8      	str	r0, [r5, #28]
 800aab4:	b920      	cbnz	r0, 800aac0 <_Bfree+0x20>
 800aab6:	218f      	movs	r1, #143	@ 0x8f
 800aab8:	4b08      	ldr	r3, [pc, #32]	@ (800aadc <_Bfree+0x3c>)
 800aaba:	4809      	ldr	r0, [pc, #36]	@ (800aae0 <_Bfree+0x40>)
 800aabc:	f001 f8b6 	bl	800bc2c <__assert_func>
 800aac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aac4:	6006      	str	r6, [r0, #0]
 800aac6:	60c6      	str	r6, [r0, #12]
 800aac8:	b13c      	cbz	r4, 800aada <_Bfree+0x3a>
 800aaca:	69eb      	ldr	r3, [r5, #28]
 800aacc:	6862      	ldr	r2, [r4, #4]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aad4:	6021      	str	r1, [r4, #0]
 800aad6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aada:	bd70      	pop	{r4, r5, r6, pc}
 800aadc:	0800c1fc 	.word	0x0800c1fc
 800aae0:	0800c2dc 	.word	0x0800c2dc

0800aae4 <__multadd>:
 800aae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae8:	4607      	mov	r7, r0
 800aaea:	460c      	mov	r4, r1
 800aaec:	461e      	mov	r6, r3
 800aaee:	2000      	movs	r0, #0
 800aaf0:	690d      	ldr	r5, [r1, #16]
 800aaf2:	f101 0c14 	add.w	ip, r1, #20
 800aaf6:	f8dc 3000 	ldr.w	r3, [ip]
 800aafa:	3001      	adds	r0, #1
 800aafc:	b299      	uxth	r1, r3
 800aafe:	fb02 6101 	mla	r1, r2, r1, r6
 800ab02:	0c1e      	lsrs	r6, r3, #16
 800ab04:	0c0b      	lsrs	r3, r1, #16
 800ab06:	fb02 3306 	mla	r3, r2, r6, r3
 800ab0a:	b289      	uxth	r1, r1
 800ab0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab10:	4285      	cmp	r5, r0
 800ab12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab16:	f84c 1b04 	str.w	r1, [ip], #4
 800ab1a:	dcec      	bgt.n	800aaf6 <__multadd+0x12>
 800ab1c:	b30e      	cbz	r6, 800ab62 <__multadd+0x7e>
 800ab1e:	68a3      	ldr	r3, [r4, #8]
 800ab20:	42ab      	cmp	r3, r5
 800ab22:	dc19      	bgt.n	800ab58 <__multadd+0x74>
 800ab24:	6861      	ldr	r1, [r4, #4]
 800ab26:	4638      	mov	r0, r7
 800ab28:	3101      	adds	r1, #1
 800ab2a:	f7ff ff79 	bl	800aa20 <_Balloc>
 800ab2e:	4680      	mov	r8, r0
 800ab30:	b928      	cbnz	r0, 800ab3e <__multadd+0x5a>
 800ab32:	4602      	mov	r2, r0
 800ab34:	21ba      	movs	r1, #186	@ 0xba
 800ab36:	4b0c      	ldr	r3, [pc, #48]	@ (800ab68 <__multadd+0x84>)
 800ab38:	480c      	ldr	r0, [pc, #48]	@ (800ab6c <__multadd+0x88>)
 800ab3a:	f001 f877 	bl	800bc2c <__assert_func>
 800ab3e:	6922      	ldr	r2, [r4, #16]
 800ab40:	f104 010c 	add.w	r1, r4, #12
 800ab44:	3202      	adds	r2, #2
 800ab46:	0092      	lsls	r2, r2, #2
 800ab48:	300c      	adds	r0, #12
 800ab4a:	f7fe fd60 	bl	800960e <memcpy>
 800ab4e:	4621      	mov	r1, r4
 800ab50:	4638      	mov	r0, r7
 800ab52:	f7ff ffa5 	bl	800aaa0 <_Bfree>
 800ab56:	4644      	mov	r4, r8
 800ab58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab5c:	3501      	adds	r5, #1
 800ab5e:	615e      	str	r6, [r3, #20]
 800ab60:	6125      	str	r5, [r4, #16]
 800ab62:	4620      	mov	r0, r4
 800ab64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab68:	0800c26b 	.word	0x0800c26b
 800ab6c:	0800c2dc 	.word	0x0800c2dc

0800ab70 <__s2b>:
 800ab70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab74:	4615      	mov	r5, r2
 800ab76:	2209      	movs	r2, #9
 800ab78:	461f      	mov	r7, r3
 800ab7a:	3308      	adds	r3, #8
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab82:	4606      	mov	r6, r0
 800ab84:	2201      	movs	r2, #1
 800ab86:	2100      	movs	r1, #0
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	db09      	blt.n	800aba0 <__s2b+0x30>
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f7ff ff47 	bl	800aa20 <_Balloc>
 800ab92:	b940      	cbnz	r0, 800aba6 <__s2b+0x36>
 800ab94:	4602      	mov	r2, r0
 800ab96:	21d3      	movs	r1, #211	@ 0xd3
 800ab98:	4b18      	ldr	r3, [pc, #96]	@ (800abfc <__s2b+0x8c>)
 800ab9a:	4819      	ldr	r0, [pc, #100]	@ (800ac00 <__s2b+0x90>)
 800ab9c:	f001 f846 	bl	800bc2c <__assert_func>
 800aba0:	0052      	lsls	r2, r2, #1
 800aba2:	3101      	adds	r1, #1
 800aba4:	e7f0      	b.n	800ab88 <__s2b+0x18>
 800aba6:	9b08      	ldr	r3, [sp, #32]
 800aba8:	2d09      	cmp	r5, #9
 800abaa:	6143      	str	r3, [r0, #20]
 800abac:	f04f 0301 	mov.w	r3, #1
 800abb0:	6103      	str	r3, [r0, #16]
 800abb2:	dd16      	ble.n	800abe2 <__s2b+0x72>
 800abb4:	f104 0909 	add.w	r9, r4, #9
 800abb8:	46c8      	mov	r8, r9
 800abba:	442c      	add	r4, r5
 800abbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800abc0:	4601      	mov	r1, r0
 800abc2:	220a      	movs	r2, #10
 800abc4:	4630      	mov	r0, r6
 800abc6:	3b30      	subs	r3, #48	@ 0x30
 800abc8:	f7ff ff8c 	bl	800aae4 <__multadd>
 800abcc:	45a0      	cmp	r8, r4
 800abce:	d1f5      	bne.n	800abbc <__s2b+0x4c>
 800abd0:	f1a5 0408 	sub.w	r4, r5, #8
 800abd4:	444c      	add	r4, r9
 800abd6:	1b2d      	subs	r5, r5, r4
 800abd8:	1963      	adds	r3, r4, r5
 800abda:	42bb      	cmp	r3, r7
 800abdc:	db04      	blt.n	800abe8 <__s2b+0x78>
 800abde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abe2:	2509      	movs	r5, #9
 800abe4:	340a      	adds	r4, #10
 800abe6:	e7f6      	b.n	800abd6 <__s2b+0x66>
 800abe8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800abec:	4601      	mov	r1, r0
 800abee:	220a      	movs	r2, #10
 800abf0:	4630      	mov	r0, r6
 800abf2:	3b30      	subs	r3, #48	@ 0x30
 800abf4:	f7ff ff76 	bl	800aae4 <__multadd>
 800abf8:	e7ee      	b.n	800abd8 <__s2b+0x68>
 800abfa:	bf00      	nop
 800abfc:	0800c26b 	.word	0x0800c26b
 800ac00:	0800c2dc 	.word	0x0800c2dc

0800ac04 <__hi0bits>:
 800ac04:	4603      	mov	r3, r0
 800ac06:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ac0a:	bf3a      	itte	cc
 800ac0c:	0403      	lslcc	r3, r0, #16
 800ac0e:	2010      	movcc	r0, #16
 800ac10:	2000      	movcs	r0, #0
 800ac12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac16:	bf3c      	itt	cc
 800ac18:	021b      	lslcc	r3, r3, #8
 800ac1a:	3008      	addcc	r0, #8
 800ac1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac20:	bf3c      	itt	cc
 800ac22:	011b      	lslcc	r3, r3, #4
 800ac24:	3004      	addcc	r0, #4
 800ac26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac2a:	bf3c      	itt	cc
 800ac2c:	009b      	lslcc	r3, r3, #2
 800ac2e:	3002      	addcc	r0, #2
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	db05      	blt.n	800ac40 <__hi0bits+0x3c>
 800ac34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ac38:	f100 0001 	add.w	r0, r0, #1
 800ac3c:	bf08      	it	eq
 800ac3e:	2020      	moveq	r0, #32
 800ac40:	4770      	bx	lr

0800ac42 <__lo0bits>:
 800ac42:	6803      	ldr	r3, [r0, #0]
 800ac44:	4602      	mov	r2, r0
 800ac46:	f013 0007 	ands.w	r0, r3, #7
 800ac4a:	d00b      	beq.n	800ac64 <__lo0bits+0x22>
 800ac4c:	07d9      	lsls	r1, r3, #31
 800ac4e:	d421      	bmi.n	800ac94 <__lo0bits+0x52>
 800ac50:	0798      	lsls	r0, r3, #30
 800ac52:	bf49      	itett	mi
 800ac54:	085b      	lsrmi	r3, r3, #1
 800ac56:	089b      	lsrpl	r3, r3, #2
 800ac58:	2001      	movmi	r0, #1
 800ac5a:	6013      	strmi	r3, [r2, #0]
 800ac5c:	bf5c      	itt	pl
 800ac5e:	2002      	movpl	r0, #2
 800ac60:	6013      	strpl	r3, [r2, #0]
 800ac62:	4770      	bx	lr
 800ac64:	b299      	uxth	r1, r3
 800ac66:	b909      	cbnz	r1, 800ac6c <__lo0bits+0x2a>
 800ac68:	2010      	movs	r0, #16
 800ac6a:	0c1b      	lsrs	r3, r3, #16
 800ac6c:	b2d9      	uxtb	r1, r3
 800ac6e:	b909      	cbnz	r1, 800ac74 <__lo0bits+0x32>
 800ac70:	3008      	adds	r0, #8
 800ac72:	0a1b      	lsrs	r3, r3, #8
 800ac74:	0719      	lsls	r1, r3, #28
 800ac76:	bf04      	itt	eq
 800ac78:	091b      	lsreq	r3, r3, #4
 800ac7a:	3004      	addeq	r0, #4
 800ac7c:	0799      	lsls	r1, r3, #30
 800ac7e:	bf04      	itt	eq
 800ac80:	089b      	lsreq	r3, r3, #2
 800ac82:	3002      	addeq	r0, #2
 800ac84:	07d9      	lsls	r1, r3, #31
 800ac86:	d403      	bmi.n	800ac90 <__lo0bits+0x4e>
 800ac88:	085b      	lsrs	r3, r3, #1
 800ac8a:	f100 0001 	add.w	r0, r0, #1
 800ac8e:	d003      	beq.n	800ac98 <__lo0bits+0x56>
 800ac90:	6013      	str	r3, [r2, #0]
 800ac92:	4770      	bx	lr
 800ac94:	2000      	movs	r0, #0
 800ac96:	4770      	bx	lr
 800ac98:	2020      	movs	r0, #32
 800ac9a:	4770      	bx	lr

0800ac9c <__i2b>:
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	460c      	mov	r4, r1
 800aca0:	2101      	movs	r1, #1
 800aca2:	f7ff febd 	bl	800aa20 <_Balloc>
 800aca6:	4602      	mov	r2, r0
 800aca8:	b928      	cbnz	r0, 800acb6 <__i2b+0x1a>
 800acaa:	f240 1145 	movw	r1, #325	@ 0x145
 800acae:	4b04      	ldr	r3, [pc, #16]	@ (800acc0 <__i2b+0x24>)
 800acb0:	4804      	ldr	r0, [pc, #16]	@ (800acc4 <__i2b+0x28>)
 800acb2:	f000 ffbb 	bl	800bc2c <__assert_func>
 800acb6:	2301      	movs	r3, #1
 800acb8:	6144      	str	r4, [r0, #20]
 800acba:	6103      	str	r3, [r0, #16]
 800acbc:	bd10      	pop	{r4, pc}
 800acbe:	bf00      	nop
 800acc0:	0800c26b 	.word	0x0800c26b
 800acc4:	0800c2dc 	.word	0x0800c2dc

0800acc8 <__multiply>:
 800acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800accc:	4617      	mov	r7, r2
 800acce:	690a      	ldr	r2, [r1, #16]
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	4689      	mov	r9, r1
 800acd4:	429a      	cmp	r2, r3
 800acd6:	bfa2      	ittt	ge
 800acd8:	463b      	movge	r3, r7
 800acda:	460f      	movge	r7, r1
 800acdc:	4699      	movge	r9, r3
 800acde:	693d      	ldr	r5, [r7, #16]
 800ace0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	6879      	ldr	r1, [r7, #4]
 800ace8:	eb05 060a 	add.w	r6, r5, sl
 800acec:	42b3      	cmp	r3, r6
 800acee:	b085      	sub	sp, #20
 800acf0:	bfb8      	it	lt
 800acf2:	3101      	addlt	r1, #1
 800acf4:	f7ff fe94 	bl	800aa20 <_Balloc>
 800acf8:	b930      	cbnz	r0, 800ad08 <__multiply+0x40>
 800acfa:	4602      	mov	r2, r0
 800acfc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ad00:	4b40      	ldr	r3, [pc, #256]	@ (800ae04 <__multiply+0x13c>)
 800ad02:	4841      	ldr	r0, [pc, #260]	@ (800ae08 <__multiply+0x140>)
 800ad04:	f000 ff92 	bl	800bc2c <__assert_func>
 800ad08:	f100 0414 	add.w	r4, r0, #20
 800ad0c:	4623      	mov	r3, r4
 800ad0e:	2200      	movs	r2, #0
 800ad10:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ad14:	4573      	cmp	r3, lr
 800ad16:	d320      	bcc.n	800ad5a <__multiply+0x92>
 800ad18:	f107 0814 	add.w	r8, r7, #20
 800ad1c:	f109 0114 	add.w	r1, r9, #20
 800ad20:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ad24:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ad28:	9302      	str	r3, [sp, #8]
 800ad2a:	1beb      	subs	r3, r5, r7
 800ad2c:	3b15      	subs	r3, #21
 800ad2e:	f023 0303 	bic.w	r3, r3, #3
 800ad32:	3304      	adds	r3, #4
 800ad34:	3715      	adds	r7, #21
 800ad36:	42bd      	cmp	r5, r7
 800ad38:	bf38      	it	cc
 800ad3a:	2304      	movcc	r3, #4
 800ad3c:	9301      	str	r3, [sp, #4]
 800ad3e:	9b02      	ldr	r3, [sp, #8]
 800ad40:	9103      	str	r1, [sp, #12]
 800ad42:	428b      	cmp	r3, r1
 800ad44:	d80c      	bhi.n	800ad60 <__multiply+0x98>
 800ad46:	2e00      	cmp	r6, #0
 800ad48:	dd03      	ble.n	800ad52 <__multiply+0x8a>
 800ad4a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d055      	beq.n	800adfe <__multiply+0x136>
 800ad52:	6106      	str	r6, [r0, #16]
 800ad54:	b005      	add	sp, #20
 800ad56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5a:	f843 2b04 	str.w	r2, [r3], #4
 800ad5e:	e7d9      	b.n	800ad14 <__multiply+0x4c>
 800ad60:	f8b1 a000 	ldrh.w	sl, [r1]
 800ad64:	f1ba 0f00 	cmp.w	sl, #0
 800ad68:	d01f      	beq.n	800adaa <__multiply+0xe2>
 800ad6a:	46c4      	mov	ip, r8
 800ad6c:	46a1      	mov	r9, r4
 800ad6e:	2700      	movs	r7, #0
 800ad70:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad74:	f8d9 3000 	ldr.w	r3, [r9]
 800ad78:	fa1f fb82 	uxth.w	fp, r2
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	fb0a 330b 	mla	r3, sl, fp, r3
 800ad82:	443b      	add	r3, r7
 800ad84:	f8d9 7000 	ldr.w	r7, [r9]
 800ad88:	0c12      	lsrs	r2, r2, #16
 800ad8a:	0c3f      	lsrs	r7, r7, #16
 800ad8c:	fb0a 7202 	mla	r2, sl, r2, r7
 800ad90:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad9a:	4565      	cmp	r5, ip
 800ad9c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ada0:	f849 3b04 	str.w	r3, [r9], #4
 800ada4:	d8e4      	bhi.n	800ad70 <__multiply+0xa8>
 800ada6:	9b01      	ldr	r3, [sp, #4]
 800ada8:	50e7      	str	r7, [r4, r3]
 800adaa:	9b03      	ldr	r3, [sp, #12]
 800adac:	3104      	adds	r1, #4
 800adae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800adb2:	f1b9 0f00 	cmp.w	r9, #0
 800adb6:	d020      	beq.n	800adfa <__multiply+0x132>
 800adb8:	4647      	mov	r7, r8
 800adba:	46a4      	mov	ip, r4
 800adbc:	f04f 0a00 	mov.w	sl, #0
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	f8b7 b000 	ldrh.w	fp, [r7]
 800adc6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800adca:	b29b      	uxth	r3, r3
 800adcc:	fb09 220b 	mla	r2, r9, fp, r2
 800add0:	4452      	add	r2, sl
 800add2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800add6:	f84c 3b04 	str.w	r3, [ip], #4
 800adda:	f857 3b04 	ldr.w	r3, [r7], #4
 800adde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ade2:	f8bc 3000 	ldrh.w	r3, [ip]
 800ade6:	42bd      	cmp	r5, r7
 800ade8:	fb09 330a 	mla	r3, r9, sl, r3
 800adec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800adf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adf4:	d8e5      	bhi.n	800adc2 <__multiply+0xfa>
 800adf6:	9a01      	ldr	r2, [sp, #4]
 800adf8:	50a3      	str	r3, [r4, r2]
 800adfa:	3404      	adds	r4, #4
 800adfc:	e79f      	b.n	800ad3e <__multiply+0x76>
 800adfe:	3e01      	subs	r6, #1
 800ae00:	e7a1      	b.n	800ad46 <__multiply+0x7e>
 800ae02:	bf00      	nop
 800ae04:	0800c26b 	.word	0x0800c26b
 800ae08:	0800c2dc 	.word	0x0800c2dc

0800ae0c <__pow5mult>:
 800ae0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae10:	4615      	mov	r5, r2
 800ae12:	f012 0203 	ands.w	r2, r2, #3
 800ae16:	4607      	mov	r7, r0
 800ae18:	460e      	mov	r6, r1
 800ae1a:	d007      	beq.n	800ae2c <__pow5mult+0x20>
 800ae1c:	4c25      	ldr	r4, [pc, #148]	@ (800aeb4 <__pow5mult+0xa8>)
 800ae1e:	3a01      	subs	r2, #1
 800ae20:	2300      	movs	r3, #0
 800ae22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae26:	f7ff fe5d 	bl	800aae4 <__multadd>
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	10ad      	asrs	r5, r5, #2
 800ae2e:	d03d      	beq.n	800aeac <__pow5mult+0xa0>
 800ae30:	69fc      	ldr	r4, [r7, #28]
 800ae32:	b97c      	cbnz	r4, 800ae54 <__pow5mult+0x48>
 800ae34:	2010      	movs	r0, #16
 800ae36:	f7fc fbe7 	bl	8007608 <malloc>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	61f8      	str	r0, [r7, #28]
 800ae3e:	b928      	cbnz	r0, 800ae4c <__pow5mult+0x40>
 800ae40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ae44:	4b1c      	ldr	r3, [pc, #112]	@ (800aeb8 <__pow5mult+0xac>)
 800ae46:	481d      	ldr	r0, [pc, #116]	@ (800aebc <__pow5mult+0xb0>)
 800ae48:	f000 fef0 	bl	800bc2c <__assert_func>
 800ae4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae50:	6004      	str	r4, [r0, #0]
 800ae52:	60c4      	str	r4, [r0, #12]
 800ae54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ae58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae5c:	b94c      	cbnz	r4, 800ae72 <__pow5mult+0x66>
 800ae5e:	f240 2171 	movw	r1, #625	@ 0x271
 800ae62:	4638      	mov	r0, r7
 800ae64:	f7ff ff1a 	bl	800ac9c <__i2b>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae70:	6003      	str	r3, [r0, #0]
 800ae72:	f04f 0900 	mov.w	r9, #0
 800ae76:	07eb      	lsls	r3, r5, #31
 800ae78:	d50a      	bpl.n	800ae90 <__pow5mult+0x84>
 800ae7a:	4631      	mov	r1, r6
 800ae7c:	4622      	mov	r2, r4
 800ae7e:	4638      	mov	r0, r7
 800ae80:	f7ff ff22 	bl	800acc8 <__multiply>
 800ae84:	4680      	mov	r8, r0
 800ae86:	4631      	mov	r1, r6
 800ae88:	4638      	mov	r0, r7
 800ae8a:	f7ff fe09 	bl	800aaa0 <_Bfree>
 800ae8e:	4646      	mov	r6, r8
 800ae90:	106d      	asrs	r5, r5, #1
 800ae92:	d00b      	beq.n	800aeac <__pow5mult+0xa0>
 800ae94:	6820      	ldr	r0, [r4, #0]
 800ae96:	b938      	cbnz	r0, 800aea8 <__pow5mult+0x9c>
 800ae98:	4622      	mov	r2, r4
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	f7ff ff13 	bl	800acc8 <__multiply>
 800aea2:	6020      	str	r0, [r4, #0]
 800aea4:	f8c0 9000 	str.w	r9, [r0]
 800aea8:	4604      	mov	r4, r0
 800aeaa:	e7e4      	b.n	800ae76 <__pow5mult+0x6a>
 800aeac:	4630      	mov	r0, r6
 800aeae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeb2:	bf00      	nop
 800aeb4:	0800c3d8 	.word	0x0800c3d8
 800aeb8:	0800c1fc 	.word	0x0800c1fc
 800aebc:	0800c2dc 	.word	0x0800c2dc

0800aec0 <__lshift>:
 800aec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec4:	460c      	mov	r4, r1
 800aec6:	4607      	mov	r7, r0
 800aec8:	4691      	mov	r9, r2
 800aeca:	6923      	ldr	r3, [r4, #16]
 800aecc:	6849      	ldr	r1, [r1, #4]
 800aece:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aed2:	68a3      	ldr	r3, [r4, #8]
 800aed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aed8:	f108 0601 	add.w	r6, r8, #1
 800aedc:	42b3      	cmp	r3, r6
 800aede:	db0b      	blt.n	800aef8 <__lshift+0x38>
 800aee0:	4638      	mov	r0, r7
 800aee2:	f7ff fd9d 	bl	800aa20 <_Balloc>
 800aee6:	4605      	mov	r5, r0
 800aee8:	b948      	cbnz	r0, 800aefe <__lshift+0x3e>
 800aeea:	4602      	mov	r2, r0
 800aeec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aef0:	4b27      	ldr	r3, [pc, #156]	@ (800af90 <__lshift+0xd0>)
 800aef2:	4828      	ldr	r0, [pc, #160]	@ (800af94 <__lshift+0xd4>)
 800aef4:	f000 fe9a 	bl	800bc2c <__assert_func>
 800aef8:	3101      	adds	r1, #1
 800aefa:	005b      	lsls	r3, r3, #1
 800aefc:	e7ee      	b.n	800aedc <__lshift+0x1c>
 800aefe:	2300      	movs	r3, #0
 800af00:	f100 0114 	add.w	r1, r0, #20
 800af04:	f100 0210 	add.w	r2, r0, #16
 800af08:	4618      	mov	r0, r3
 800af0a:	4553      	cmp	r3, sl
 800af0c:	db33      	blt.n	800af76 <__lshift+0xb6>
 800af0e:	6920      	ldr	r0, [r4, #16]
 800af10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af14:	f104 0314 	add.w	r3, r4, #20
 800af18:	f019 091f 	ands.w	r9, r9, #31
 800af1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af24:	d02b      	beq.n	800af7e <__lshift+0xbe>
 800af26:	468a      	mov	sl, r1
 800af28:	2200      	movs	r2, #0
 800af2a:	f1c9 0e20 	rsb	lr, r9, #32
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	fa00 f009 	lsl.w	r0, r0, r9
 800af34:	4310      	orrs	r0, r2
 800af36:	f84a 0b04 	str.w	r0, [sl], #4
 800af3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af3e:	459c      	cmp	ip, r3
 800af40:	fa22 f20e 	lsr.w	r2, r2, lr
 800af44:	d8f3      	bhi.n	800af2e <__lshift+0x6e>
 800af46:	ebac 0304 	sub.w	r3, ip, r4
 800af4a:	3b15      	subs	r3, #21
 800af4c:	f023 0303 	bic.w	r3, r3, #3
 800af50:	3304      	adds	r3, #4
 800af52:	f104 0015 	add.w	r0, r4, #21
 800af56:	4560      	cmp	r0, ip
 800af58:	bf88      	it	hi
 800af5a:	2304      	movhi	r3, #4
 800af5c:	50ca      	str	r2, [r1, r3]
 800af5e:	b10a      	cbz	r2, 800af64 <__lshift+0xa4>
 800af60:	f108 0602 	add.w	r6, r8, #2
 800af64:	3e01      	subs	r6, #1
 800af66:	4638      	mov	r0, r7
 800af68:	4621      	mov	r1, r4
 800af6a:	612e      	str	r6, [r5, #16]
 800af6c:	f7ff fd98 	bl	800aaa0 <_Bfree>
 800af70:	4628      	mov	r0, r5
 800af72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af76:	f842 0f04 	str.w	r0, [r2, #4]!
 800af7a:	3301      	adds	r3, #1
 800af7c:	e7c5      	b.n	800af0a <__lshift+0x4a>
 800af7e:	3904      	subs	r1, #4
 800af80:	f853 2b04 	ldr.w	r2, [r3], #4
 800af84:	459c      	cmp	ip, r3
 800af86:	f841 2f04 	str.w	r2, [r1, #4]!
 800af8a:	d8f9      	bhi.n	800af80 <__lshift+0xc0>
 800af8c:	e7ea      	b.n	800af64 <__lshift+0xa4>
 800af8e:	bf00      	nop
 800af90:	0800c26b 	.word	0x0800c26b
 800af94:	0800c2dc 	.word	0x0800c2dc

0800af98 <__mcmp>:
 800af98:	4603      	mov	r3, r0
 800af9a:	690a      	ldr	r2, [r1, #16]
 800af9c:	6900      	ldr	r0, [r0, #16]
 800af9e:	b530      	push	{r4, r5, lr}
 800afa0:	1a80      	subs	r0, r0, r2
 800afa2:	d10e      	bne.n	800afc2 <__mcmp+0x2a>
 800afa4:	3314      	adds	r3, #20
 800afa6:	3114      	adds	r1, #20
 800afa8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800afac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800afb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800afb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800afb8:	4295      	cmp	r5, r2
 800afba:	d003      	beq.n	800afc4 <__mcmp+0x2c>
 800afbc:	d205      	bcs.n	800afca <__mcmp+0x32>
 800afbe:	f04f 30ff 	mov.w	r0, #4294967295
 800afc2:	bd30      	pop	{r4, r5, pc}
 800afc4:	42a3      	cmp	r3, r4
 800afc6:	d3f3      	bcc.n	800afb0 <__mcmp+0x18>
 800afc8:	e7fb      	b.n	800afc2 <__mcmp+0x2a>
 800afca:	2001      	movs	r0, #1
 800afcc:	e7f9      	b.n	800afc2 <__mcmp+0x2a>
	...

0800afd0 <__mdiff>:
 800afd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd4:	4689      	mov	r9, r1
 800afd6:	4606      	mov	r6, r0
 800afd8:	4611      	mov	r1, r2
 800afda:	4648      	mov	r0, r9
 800afdc:	4614      	mov	r4, r2
 800afde:	f7ff ffdb 	bl	800af98 <__mcmp>
 800afe2:	1e05      	subs	r5, r0, #0
 800afe4:	d112      	bne.n	800b00c <__mdiff+0x3c>
 800afe6:	4629      	mov	r1, r5
 800afe8:	4630      	mov	r0, r6
 800afea:	f7ff fd19 	bl	800aa20 <_Balloc>
 800afee:	4602      	mov	r2, r0
 800aff0:	b928      	cbnz	r0, 800affe <__mdiff+0x2e>
 800aff2:	f240 2137 	movw	r1, #567	@ 0x237
 800aff6:	4b3e      	ldr	r3, [pc, #248]	@ (800b0f0 <__mdiff+0x120>)
 800aff8:	483e      	ldr	r0, [pc, #248]	@ (800b0f4 <__mdiff+0x124>)
 800affa:	f000 fe17 	bl	800bc2c <__assert_func>
 800affe:	2301      	movs	r3, #1
 800b000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b004:	4610      	mov	r0, r2
 800b006:	b003      	add	sp, #12
 800b008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00c:	bfbc      	itt	lt
 800b00e:	464b      	movlt	r3, r9
 800b010:	46a1      	movlt	r9, r4
 800b012:	4630      	mov	r0, r6
 800b014:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b018:	bfba      	itte	lt
 800b01a:	461c      	movlt	r4, r3
 800b01c:	2501      	movlt	r5, #1
 800b01e:	2500      	movge	r5, #0
 800b020:	f7ff fcfe 	bl	800aa20 <_Balloc>
 800b024:	4602      	mov	r2, r0
 800b026:	b918      	cbnz	r0, 800b030 <__mdiff+0x60>
 800b028:	f240 2145 	movw	r1, #581	@ 0x245
 800b02c:	4b30      	ldr	r3, [pc, #192]	@ (800b0f0 <__mdiff+0x120>)
 800b02e:	e7e3      	b.n	800aff8 <__mdiff+0x28>
 800b030:	f100 0b14 	add.w	fp, r0, #20
 800b034:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b038:	f109 0310 	add.w	r3, r9, #16
 800b03c:	60c5      	str	r5, [r0, #12]
 800b03e:	f04f 0c00 	mov.w	ip, #0
 800b042:	f109 0514 	add.w	r5, r9, #20
 800b046:	46d9      	mov	r9, fp
 800b048:	6926      	ldr	r6, [r4, #16]
 800b04a:	f104 0e14 	add.w	lr, r4, #20
 800b04e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b052:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b056:	9301      	str	r3, [sp, #4]
 800b058:	9b01      	ldr	r3, [sp, #4]
 800b05a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b05e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b062:	b281      	uxth	r1, r0
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	fa1f f38a 	uxth.w	r3, sl
 800b06a:	1a5b      	subs	r3, r3, r1
 800b06c:	0c00      	lsrs	r0, r0, #16
 800b06e:	4463      	add	r3, ip
 800b070:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b074:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b078:	b29b      	uxth	r3, r3
 800b07a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b07e:	4576      	cmp	r6, lr
 800b080:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b084:	f849 3b04 	str.w	r3, [r9], #4
 800b088:	d8e6      	bhi.n	800b058 <__mdiff+0x88>
 800b08a:	1b33      	subs	r3, r6, r4
 800b08c:	3b15      	subs	r3, #21
 800b08e:	f023 0303 	bic.w	r3, r3, #3
 800b092:	3415      	adds	r4, #21
 800b094:	3304      	adds	r3, #4
 800b096:	42a6      	cmp	r6, r4
 800b098:	bf38      	it	cc
 800b09a:	2304      	movcc	r3, #4
 800b09c:	441d      	add	r5, r3
 800b09e:	445b      	add	r3, fp
 800b0a0:	461e      	mov	r6, r3
 800b0a2:	462c      	mov	r4, r5
 800b0a4:	4544      	cmp	r4, r8
 800b0a6:	d30e      	bcc.n	800b0c6 <__mdiff+0xf6>
 800b0a8:	f108 0103 	add.w	r1, r8, #3
 800b0ac:	1b49      	subs	r1, r1, r5
 800b0ae:	f021 0103 	bic.w	r1, r1, #3
 800b0b2:	3d03      	subs	r5, #3
 800b0b4:	45a8      	cmp	r8, r5
 800b0b6:	bf38      	it	cc
 800b0b8:	2100      	movcc	r1, #0
 800b0ba:	440b      	add	r3, r1
 800b0bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0c0:	b199      	cbz	r1, 800b0ea <__mdiff+0x11a>
 800b0c2:	6117      	str	r7, [r2, #16]
 800b0c4:	e79e      	b.n	800b004 <__mdiff+0x34>
 800b0c6:	46e6      	mov	lr, ip
 800b0c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b0cc:	fa1f fc81 	uxth.w	ip, r1
 800b0d0:	44f4      	add	ip, lr
 800b0d2:	0c08      	lsrs	r0, r1, #16
 800b0d4:	4471      	add	r1, lr
 800b0d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b0da:	b289      	uxth	r1, r1
 800b0dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b0e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b0e4:	f846 1b04 	str.w	r1, [r6], #4
 800b0e8:	e7dc      	b.n	800b0a4 <__mdiff+0xd4>
 800b0ea:	3f01      	subs	r7, #1
 800b0ec:	e7e6      	b.n	800b0bc <__mdiff+0xec>
 800b0ee:	bf00      	nop
 800b0f0:	0800c26b 	.word	0x0800c26b
 800b0f4:	0800c2dc 	.word	0x0800c2dc

0800b0f8 <__ulp>:
 800b0f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b134 <__ulp+0x3c>)
 800b0fa:	400b      	ands	r3, r1
 800b0fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b100:	2b00      	cmp	r3, #0
 800b102:	dc08      	bgt.n	800b116 <__ulp+0x1e>
 800b104:	425b      	negs	r3, r3
 800b106:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b10a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b10e:	da04      	bge.n	800b11a <__ulp+0x22>
 800b110:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b114:	4113      	asrs	r3, r2
 800b116:	2200      	movs	r2, #0
 800b118:	e008      	b.n	800b12c <__ulp+0x34>
 800b11a:	f1a2 0314 	sub.w	r3, r2, #20
 800b11e:	2b1e      	cmp	r3, #30
 800b120:	bfd6      	itet	le
 800b122:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b126:	2201      	movgt	r2, #1
 800b128:	40da      	lsrle	r2, r3
 800b12a:	2300      	movs	r3, #0
 800b12c:	4619      	mov	r1, r3
 800b12e:	4610      	mov	r0, r2
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	7ff00000 	.word	0x7ff00000

0800b138 <__b2d>:
 800b138:	6902      	ldr	r2, [r0, #16]
 800b13a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13c:	f100 0614 	add.w	r6, r0, #20
 800b140:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b144:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b148:	4f1e      	ldr	r7, [pc, #120]	@ (800b1c4 <__b2d+0x8c>)
 800b14a:	4620      	mov	r0, r4
 800b14c:	f7ff fd5a 	bl	800ac04 <__hi0bits>
 800b150:	4603      	mov	r3, r0
 800b152:	f1c0 0020 	rsb	r0, r0, #32
 800b156:	2b0a      	cmp	r3, #10
 800b158:	f1a2 0504 	sub.w	r5, r2, #4
 800b15c:	6008      	str	r0, [r1, #0]
 800b15e:	dc12      	bgt.n	800b186 <__b2d+0x4e>
 800b160:	42ae      	cmp	r6, r5
 800b162:	bf2c      	ite	cs
 800b164:	2200      	movcs	r2, #0
 800b166:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b16a:	f1c3 0c0b 	rsb	ip, r3, #11
 800b16e:	3315      	adds	r3, #21
 800b170:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b174:	fa04 f303 	lsl.w	r3, r4, r3
 800b178:	fa22 f20c 	lsr.w	r2, r2, ip
 800b17c:	ea4e 0107 	orr.w	r1, lr, r7
 800b180:	431a      	orrs	r2, r3
 800b182:	4610      	mov	r0, r2
 800b184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b186:	42ae      	cmp	r6, r5
 800b188:	bf36      	itet	cc
 800b18a:	f1a2 0508 	subcc.w	r5, r2, #8
 800b18e:	2200      	movcs	r2, #0
 800b190:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b194:	3b0b      	subs	r3, #11
 800b196:	d012      	beq.n	800b1be <__b2d+0x86>
 800b198:	f1c3 0720 	rsb	r7, r3, #32
 800b19c:	fa22 f107 	lsr.w	r1, r2, r7
 800b1a0:	409c      	lsls	r4, r3
 800b1a2:	430c      	orrs	r4, r1
 800b1a4:	42b5      	cmp	r5, r6
 800b1a6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b1aa:	bf94      	ite	ls
 800b1ac:	2400      	movls	r4, #0
 800b1ae:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b1b2:	409a      	lsls	r2, r3
 800b1b4:	40fc      	lsrs	r4, r7
 800b1b6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b1ba:	4322      	orrs	r2, r4
 800b1bc:	e7e1      	b.n	800b182 <__b2d+0x4a>
 800b1be:	ea44 0107 	orr.w	r1, r4, r7
 800b1c2:	e7de      	b.n	800b182 <__b2d+0x4a>
 800b1c4:	3ff00000 	.word	0x3ff00000

0800b1c8 <__d2b>:
 800b1c8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	4690      	mov	r8, r2
 800b1d0:	4699      	mov	r9, r3
 800b1d2:	9e08      	ldr	r6, [sp, #32]
 800b1d4:	f7ff fc24 	bl	800aa20 <_Balloc>
 800b1d8:	4604      	mov	r4, r0
 800b1da:	b930      	cbnz	r0, 800b1ea <__d2b+0x22>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	f240 310f 	movw	r1, #783	@ 0x30f
 800b1e2:	4b23      	ldr	r3, [pc, #140]	@ (800b270 <__d2b+0xa8>)
 800b1e4:	4823      	ldr	r0, [pc, #140]	@ (800b274 <__d2b+0xac>)
 800b1e6:	f000 fd21 	bl	800bc2c <__assert_func>
 800b1ea:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b1ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1f2:	b10d      	cbz	r5, 800b1f8 <__d2b+0x30>
 800b1f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	f1b8 0300 	subs.w	r3, r8, #0
 800b1fe:	d024      	beq.n	800b24a <__d2b+0x82>
 800b200:	4668      	mov	r0, sp
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	f7ff fd1d 	bl	800ac42 <__lo0bits>
 800b208:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b20c:	b1d8      	cbz	r0, 800b246 <__d2b+0x7e>
 800b20e:	f1c0 0320 	rsb	r3, r0, #32
 800b212:	fa02 f303 	lsl.w	r3, r2, r3
 800b216:	430b      	orrs	r3, r1
 800b218:	40c2      	lsrs	r2, r0
 800b21a:	6163      	str	r3, [r4, #20]
 800b21c:	9201      	str	r2, [sp, #4]
 800b21e:	9b01      	ldr	r3, [sp, #4]
 800b220:	2b00      	cmp	r3, #0
 800b222:	bf0c      	ite	eq
 800b224:	2201      	moveq	r2, #1
 800b226:	2202      	movne	r2, #2
 800b228:	61a3      	str	r3, [r4, #24]
 800b22a:	6122      	str	r2, [r4, #16]
 800b22c:	b1ad      	cbz	r5, 800b25a <__d2b+0x92>
 800b22e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b232:	4405      	add	r5, r0
 800b234:	6035      	str	r5, [r6, #0]
 800b236:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b23c:	6018      	str	r0, [r3, #0]
 800b23e:	4620      	mov	r0, r4
 800b240:	b002      	add	sp, #8
 800b242:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b246:	6161      	str	r1, [r4, #20]
 800b248:	e7e9      	b.n	800b21e <__d2b+0x56>
 800b24a:	a801      	add	r0, sp, #4
 800b24c:	f7ff fcf9 	bl	800ac42 <__lo0bits>
 800b250:	9b01      	ldr	r3, [sp, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	6163      	str	r3, [r4, #20]
 800b256:	3020      	adds	r0, #32
 800b258:	e7e7      	b.n	800b22a <__d2b+0x62>
 800b25a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b25e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b262:	6030      	str	r0, [r6, #0]
 800b264:	6918      	ldr	r0, [r3, #16]
 800b266:	f7ff fccd 	bl	800ac04 <__hi0bits>
 800b26a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b26e:	e7e4      	b.n	800b23a <__d2b+0x72>
 800b270:	0800c26b 	.word	0x0800c26b
 800b274:	0800c2dc 	.word	0x0800c2dc

0800b278 <__ratio>:
 800b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	b085      	sub	sp, #20
 800b27e:	e9cd 1000 	strd	r1, r0, [sp]
 800b282:	a902      	add	r1, sp, #8
 800b284:	f7ff ff58 	bl	800b138 <__b2d>
 800b288:	468b      	mov	fp, r1
 800b28a:	4606      	mov	r6, r0
 800b28c:	460f      	mov	r7, r1
 800b28e:	9800      	ldr	r0, [sp, #0]
 800b290:	a903      	add	r1, sp, #12
 800b292:	f7ff ff51 	bl	800b138 <__b2d>
 800b296:	460d      	mov	r5, r1
 800b298:	9b01      	ldr	r3, [sp, #4]
 800b29a:	4689      	mov	r9, r1
 800b29c:	6919      	ldr	r1, [r3, #16]
 800b29e:	9b00      	ldr	r3, [sp, #0]
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	1ac9      	subs	r1, r1, r3
 800b2a8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b2ac:	1a9b      	subs	r3, r3, r2
 800b2ae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	bfcd      	iteet	gt
 800b2b6:	463a      	movgt	r2, r7
 800b2b8:	462a      	movle	r2, r5
 800b2ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b2be:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b2c2:	bfd8      	it	le
 800b2c4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b2c8:	464b      	mov	r3, r9
 800b2ca:	4622      	mov	r2, r4
 800b2cc:	4659      	mov	r1, fp
 800b2ce:	f7f5 fa37 	bl	8000740 <__aeabi_ddiv>
 800b2d2:	b005      	add	sp, #20
 800b2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2d8 <__copybits>:
 800b2d8:	3901      	subs	r1, #1
 800b2da:	b570      	push	{r4, r5, r6, lr}
 800b2dc:	1149      	asrs	r1, r1, #5
 800b2de:	6914      	ldr	r4, [r2, #16]
 800b2e0:	3101      	adds	r1, #1
 800b2e2:	f102 0314 	add.w	r3, r2, #20
 800b2e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b2ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b2ee:	1f05      	subs	r5, r0, #4
 800b2f0:	42a3      	cmp	r3, r4
 800b2f2:	d30c      	bcc.n	800b30e <__copybits+0x36>
 800b2f4:	1aa3      	subs	r3, r4, r2
 800b2f6:	3b11      	subs	r3, #17
 800b2f8:	f023 0303 	bic.w	r3, r3, #3
 800b2fc:	3211      	adds	r2, #17
 800b2fe:	42a2      	cmp	r2, r4
 800b300:	bf88      	it	hi
 800b302:	2300      	movhi	r3, #0
 800b304:	4418      	add	r0, r3
 800b306:	2300      	movs	r3, #0
 800b308:	4288      	cmp	r0, r1
 800b30a:	d305      	bcc.n	800b318 <__copybits+0x40>
 800b30c:	bd70      	pop	{r4, r5, r6, pc}
 800b30e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b312:	f845 6f04 	str.w	r6, [r5, #4]!
 800b316:	e7eb      	b.n	800b2f0 <__copybits+0x18>
 800b318:	f840 3b04 	str.w	r3, [r0], #4
 800b31c:	e7f4      	b.n	800b308 <__copybits+0x30>

0800b31e <__any_on>:
 800b31e:	f100 0214 	add.w	r2, r0, #20
 800b322:	6900      	ldr	r0, [r0, #16]
 800b324:	114b      	asrs	r3, r1, #5
 800b326:	4298      	cmp	r0, r3
 800b328:	b510      	push	{r4, lr}
 800b32a:	db11      	blt.n	800b350 <__any_on+0x32>
 800b32c:	dd0a      	ble.n	800b344 <__any_on+0x26>
 800b32e:	f011 011f 	ands.w	r1, r1, #31
 800b332:	d007      	beq.n	800b344 <__any_on+0x26>
 800b334:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b338:	fa24 f001 	lsr.w	r0, r4, r1
 800b33c:	fa00 f101 	lsl.w	r1, r0, r1
 800b340:	428c      	cmp	r4, r1
 800b342:	d10b      	bne.n	800b35c <__any_on+0x3e>
 800b344:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b348:	4293      	cmp	r3, r2
 800b34a:	d803      	bhi.n	800b354 <__any_on+0x36>
 800b34c:	2000      	movs	r0, #0
 800b34e:	bd10      	pop	{r4, pc}
 800b350:	4603      	mov	r3, r0
 800b352:	e7f7      	b.n	800b344 <__any_on+0x26>
 800b354:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b358:	2900      	cmp	r1, #0
 800b35a:	d0f5      	beq.n	800b348 <__any_on+0x2a>
 800b35c:	2001      	movs	r0, #1
 800b35e:	e7f6      	b.n	800b34e <__any_on+0x30>

0800b360 <_strtol_l.isra.0>:
 800b360:	2b24      	cmp	r3, #36	@ 0x24
 800b362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b366:	4686      	mov	lr, r0
 800b368:	4690      	mov	r8, r2
 800b36a:	d801      	bhi.n	800b370 <_strtol_l.isra.0+0x10>
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d106      	bne.n	800b37e <_strtol_l.isra.0+0x1e>
 800b370:	f7fe f90a 	bl	8009588 <__errno>
 800b374:	2316      	movs	r3, #22
 800b376:	6003      	str	r3, [r0, #0]
 800b378:	2000      	movs	r0, #0
 800b37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37e:	460d      	mov	r5, r1
 800b380:	4833      	ldr	r0, [pc, #204]	@ (800b450 <_strtol_l.isra.0+0xf0>)
 800b382:	462a      	mov	r2, r5
 800b384:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b388:	5d06      	ldrb	r6, [r0, r4]
 800b38a:	f016 0608 	ands.w	r6, r6, #8
 800b38e:	d1f8      	bne.n	800b382 <_strtol_l.isra.0+0x22>
 800b390:	2c2d      	cmp	r4, #45	@ 0x2d
 800b392:	d110      	bne.n	800b3b6 <_strtol_l.isra.0+0x56>
 800b394:	2601      	movs	r6, #1
 800b396:	782c      	ldrb	r4, [r5, #0]
 800b398:	1c95      	adds	r5, r2, #2
 800b39a:	f033 0210 	bics.w	r2, r3, #16
 800b39e:	d115      	bne.n	800b3cc <_strtol_l.isra.0+0x6c>
 800b3a0:	2c30      	cmp	r4, #48	@ 0x30
 800b3a2:	d10d      	bne.n	800b3c0 <_strtol_l.isra.0+0x60>
 800b3a4:	782a      	ldrb	r2, [r5, #0]
 800b3a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b3aa:	2a58      	cmp	r2, #88	@ 0x58
 800b3ac:	d108      	bne.n	800b3c0 <_strtol_l.isra.0+0x60>
 800b3ae:	786c      	ldrb	r4, [r5, #1]
 800b3b0:	3502      	adds	r5, #2
 800b3b2:	2310      	movs	r3, #16
 800b3b4:	e00a      	b.n	800b3cc <_strtol_l.isra.0+0x6c>
 800b3b6:	2c2b      	cmp	r4, #43	@ 0x2b
 800b3b8:	bf04      	itt	eq
 800b3ba:	782c      	ldrbeq	r4, [r5, #0]
 800b3bc:	1c95      	addeq	r5, r2, #2
 800b3be:	e7ec      	b.n	800b39a <_strtol_l.isra.0+0x3a>
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1f6      	bne.n	800b3b2 <_strtol_l.isra.0+0x52>
 800b3c4:	2c30      	cmp	r4, #48	@ 0x30
 800b3c6:	bf14      	ite	ne
 800b3c8:	230a      	movne	r3, #10
 800b3ca:	2308      	moveq	r3, #8
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b3d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b3d6:	fbbc f9f3 	udiv	r9, ip, r3
 800b3da:	4610      	mov	r0, r2
 800b3dc:	fb03 ca19 	mls	sl, r3, r9, ip
 800b3e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b3e4:	2f09      	cmp	r7, #9
 800b3e6:	d80f      	bhi.n	800b408 <_strtol_l.isra.0+0xa8>
 800b3e8:	463c      	mov	r4, r7
 800b3ea:	42a3      	cmp	r3, r4
 800b3ec:	dd1b      	ble.n	800b426 <_strtol_l.isra.0+0xc6>
 800b3ee:	1c57      	adds	r7, r2, #1
 800b3f0:	d007      	beq.n	800b402 <_strtol_l.isra.0+0xa2>
 800b3f2:	4581      	cmp	r9, r0
 800b3f4:	d314      	bcc.n	800b420 <_strtol_l.isra.0+0xc0>
 800b3f6:	d101      	bne.n	800b3fc <_strtol_l.isra.0+0x9c>
 800b3f8:	45a2      	cmp	sl, r4
 800b3fa:	db11      	blt.n	800b420 <_strtol_l.isra.0+0xc0>
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	fb00 4003 	mla	r0, r0, r3, r4
 800b402:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b406:	e7eb      	b.n	800b3e0 <_strtol_l.isra.0+0x80>
 800b408:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b40c:	2f19      	cmp	r7, #25
 800b40e:	d801      	bhi.n	800b414 <_strtol_l.isra.0+0xb4>
 800b410:	3c37      	subs	r4, #55	@ 0x37
 800b412:	e7ea      	b.n	800b3ea <_strtol_l.isra.0+0x8a>
 800b414:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b418:	2f19      	cmp	r7, #25
 800b41a:	d804      	bhi.n	800b426 <_strtol_l.isra.0+0xc6>
 800b41c:	3c57      	subs	r4, #87	@ 0x57
 800b41e:	e7e4      	b.n	800b3ea <_strtol_l.isra.0+0x8a>
 800b420:	f04f 32ff 	mov.w	r2, #4294967295
 800b424:	e7ed      	b.n	800b402 <_strtol_l.isra.0+0xa2>
 800b426:	1c53      	adds	r3, r2, #1
 800b428:	d108      	bne.n	800b43c <_strtol_l.isra.0+0xdc>
 800b42a:	2322      	movs	r3, #34	@ 0x22
 800b42c:	4660      	mov	r0, ip
 800b42e:	f8ce 3000 	str.w	r3, [lr]
 800b432:	f1b8 0f00 	cmp.w	r8, #0
 800b436:	d0a0      	beq.n	800b37a <_strtol_l.isra.0+0x1a>
 800b438:	1e69      	subs	r1, r5, #1
 800b43a:	e006      	b.n	800b44a <_strtol_l.isra.0+0xea>
 800b43c:	b106      	cbz	r6, 800b440 <_strtol_l.isra.0+0xe0>
 800b43e:	4240      	negs	r0, r0
 800b440:	f1b8 0f00 	cmp.w	r8, #0
 800b444:	d099      	beq.n	800b37a <_strtol_l.isra.0+0x1a>
 800b446:	2a00      	cmp	r2, #0
 800b448:	d1f6      	bne.n	800b438 <_strtol_l.isra.0+0xd8>
 800b44a:	f8c8 1000 	str.w	r1, [r8]
 800b44e:	e794      	b.n	800b37a <_strtol_l.isra.0+0x1a>
 800b450:	0800c4d9 	.word	0x0800c4d9

0800b454 <_strtol_r>:
 800b454:	f7ff bf84 	b.w	800b360 <_strtol_l.isra.0>

0800b458 <__ascii_wctomb>:
 800b458:	4603      	mov	r3, r0
 800b45a:	4608      	mov	r0, r1
 800b45c:	b141      	cbz	r1, 800b470 <__ascii_wctomb+0x18>
 800b45e:	2aff      	cmp	r2, #255	@ 0xff
 800b460:	d904      	bls.n	800b46c <__ascii_wctomb+0x14>
 800b462:	228a      	movs	r2, #138	@ 0x8a
 800b464:	f04f 30ff 	mov.w	r0, #4294967295
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	4770      	bx	lr
 800b46c:	2001      	movs	r0, #1
 800b46e:	700a      	strb	r2, [r1, #0]
 800b470:	4770      	bx	lr

0800b472 <__ssputs_r>:
 800b472:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b476:	461f      	mov	r7, r3
 800b478:	688e      	ldr	r6, [r1, #8]
 800b47a:	4682      	mov	sl, r0
 800b47c:	42be      	cmp	r6, r7
 800b47e:	460c      	mov	r4, r1
 800b480:	4690      	mov	r8, r2
 800b482:	680b      	ldr	r3, [r1, #0]
 800b484:	d82d      	bhi.n	800b4e2 <__ssputs_r+0x70>
 800b486:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b48a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b48e:	d026      	beq.n	800b4de <__ssputs_r+0x6c>
 800b490:	6965      	ldr	r5, [r4, #20]
 800b492:	6909      	ldr	r1, [r1, #16]
 800b494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b498:	eba3 0901 	sub.w	r9, r3, r1
 800b49c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4a0:	1c7b      	adds	r3, r7, #1
 800b4a2:	444b      	add	r3, r9
 800b4a4:	106d      	asrs	r5, r5, #1
 800b4a6:	429d      	cmp	r5, r3
 800b4a8:	bf38      	it	cc
 800b4aa:	461d      	movcc	r5, r3
 800b4ac:	0553      	lsls	r3, r2, #21
 800b4ae:	d527      	bpl.n	800b500 <__ssputs_r+0x8e>
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	f7fc f8db 	bl	800766c <_malloc_r>
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	b360      	cbz	r0, 800b514 <__ssputs_r+0xa2>
 800b4ba:	464a      	mov	r2, r9
 800b4bc:	6921      	ldr	r1, [r4, #16]
 800b4be:	f7fe f8a6 	bl	800960e <memcpy>
 800b4c2:	89a3      	ldrh	r3, [r4, #12]
 800b4c4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4cc:	81a3      	strh	r3, [r4, #12]
 800b4ce:	6126      	str	r6, [r4, #16]
 800b4d0:	444e      	add	r6, r9
 800b4d2:	6026      	str	r6, [r4, #0]
 800b4d4:	463e      	mov	r6, r7
 800b4d6:	6165      	str	r5, [r4, #20]
 800b4d8:	eba5 0509 	sub.w	r5, r5, r9
 800b4dc:	60a5      	str	r5, [r4, #8]
 800b4de:	42be      	cmp	r6, r7
 800b4e0:	d900      	bls.n	800b4e4 <__ssputs_r+0x72>
 800b4e2:	463e      	mov	r6, r7
 800b4e4:	4632      	mov	r2, r6
 800b4e6:	4641      	mov	r1, r8
 800b4e8:	6820      	ldr	r0, [r4, #0]
 800b4ea:	f000 fb62 	bl	800bbb2 <memmove>
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	68a3      	ldr	r3, [r4, #8]
 800b4f2:	1b9b      	subs	r3, r3, r6
 800b4f4:	60a3      	str	r3, [r4, #8]
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	4433      	add	r3, r6
 800b4fa:	6023      	str	r3, [r4, #0]
 800b4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b500:	462a      	mov	r2, r5
 800b502:	f000 fbc5 	bl	800bc90 <_realloc_r>
 800b506:	4606      	mov	r6, r0
 800b508:	2800      	cmp	r0, #0
 800b50a:	d1e0      	bne.n	800b4ce <__ssputs_r+0x5c>
 800b50c:	4650      	mov	r0, sl
 800b50e:	6921      	ldr	r1, [r4, #16]
 800b510:	f7fe fef2 	bl	800a2f8 <_free_r>
 800b514:	230c      	movs	r3, #12
 800b516:	f8ca 3000 	str.w	r3, [sl]
 800b51a:	89a3      	ldrh	r3, [r4, #12]
 800b51c:	f04f 30ff 	mov.w	r0, #4294967295
 800b520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b524:	81a3      	strh	r3, [r4, #12]
 800b526:	e7e9      	b.n	800b4fc <__ssputs_r+0x8a>

0800b528 <_svfiprintf_r>:
 800b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52c:	4698      	mov	r8, r3
 800b52e:	898b      	ldrh	r3, [r1, #12]
 800b530:	4607      	mov	r7, r0
 800b532:	061b      	lsls	r3, r3, #24
 800b534:	460d      	mov	r5, r1
 800b536:	4614      	mov	r4, r2
 800b538:	b09d      	sub	sp, #116	@ 0x74
 800b53a:	d510      	bpl.n	800b55e <_svfiprintf_r+0x36>
 800b53c:	690b      	ldr	r3, [r1, #16]
 800b53e:	b973      	cbnz	r3, 800b55e <_svfiprintf_r+0x36>
 800b540:	2140      	movs	r1, #64	@ 0x40
 800b542:	f7fc f893 	bl	800766c <_malloc_r>
 800b546:	6028      	str	r0, [r5, #0]
 800b548:	6128      	str	r0, [r5, #16]
 800b54a:	b930      	cbnz	r0, 800b55a <_svfiprintf_r+0x32>
 800b54c:	230c      	movs	r3, #12
 800b54e:	603b      	str	r3, [r7, #0]
 800b550:	f04f 30ff 	mov.w	r0, #4294967295
 800b554:	b01d      	add	sp, #116	@ 0x74
 800b556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55a:	2340      	movs	r3, #64	@ 0x40
 800b55c:	616b      	str	r3, [r5, #20]
 800b55e:	2300      	movs	r3, #0
 800b560:	9309      	str	r3, [sp, #36]	@ 0x24
 800b562:	2320      	movs	r3, #32
 800b564:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b568:	2330      	movs	r3, #48	@ 0x30
 800b56a:	f04f 0901 	mov.w	r9, #1
 800b56e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b572:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b70c <_svfiprintf_r+0x1e4>
 800b576:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b57a:	4623      	mov	r3, r4
 800b57c:	469a      	mov	sl, r3
 800b57e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b582:	b10a      	cbz	r2, 800b588 <_svfiprintf_r+0x60>
 800b584:	2a25      	cmp	r2, #37	@ 0x25
 800b586:	d1f9      	bne.n	800b57c <_svfiprintf_r+0x54>
 800b588:	ebba 0b04 	subs.w	fp, sl, r4
 800b58c:	d00b      	beq.n	800b5a6 <_svfiprintf_r+0x7e>
 800b58e:	465b      	mov	r3, fp
 800b590:	4622      	mov	r2, r4
 800b592:	4629      	mov	r1, r5
 800b594:	4638      	mov	r0, r7
 800b596:	f7ff ff6c 	bl	800b472 <__ssputs_r>
 800b59a:	3001      	adds	r0, #1
 800b59c:	f000 80a7 	beq.w	800b6ee <_svfiprintf_r+0x1c6>
 800b5a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5a2:	445a      	add	r2, fp
 800b5a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f000 809f 	beq.w	800b6ee <_svfiprintf_r+0x1c6>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ba:	f10a 0a01 	add.w	sl, sl, #1
 800b5be:	9304      	str	r3, [sp, #16]
 800b5c0:	9307      	str	r3, [sp, #28]
 800b5c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5c8:	4654      	mov	r4, sl
 800b5ca:	2205      	movs	r2, #5
 800b5cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5d0:	484e      	ldr	r0, [pc, #312]	@ (800b70c <_svfiprintf_r+0x1e4>)
 800b5d2:	f7fe f80e 	bl	80095f2 <memchr>
 800b5d6:	9a04      	ldr	r2, [sp, #16]
 800b5d8:	b9d8      	cbnz	r0, 800b612 <_svfiprintf_r+0xea>
 800b5da:	06d0      	lsls	r0, r2, #27
 800b5dc:	bf44      	itt	mi
 800b5de:	2320      	movmi	r3, #32
 800b5e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5e4:	0711      	lsls	r1, r2, #28
 800b5e6:	bf44      	itt	mi
 800b5e8:	232b      	movmi	r3, #43	@ 0x2b
 800b5ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b5f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5f4:	d015      	beq.n	800b622 <_svfiprintf_r+0xfa>
 800b5f6:	4654      	mov	r4, sl
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	f04f 0c0a 	mov.w	ip, #10
 800b5fe:	9a07      	ldr	r2, [sp, #28]
 800b600:	4621      	mov	r1, r4
 800b602:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b606:	3b30      	subs	r3, #48	@ 0x30
 800b608:	2b09      	cmp	r3, #9
 800b60a:	d94b      	bls.n	800b6a4 <_svfiprintf_r+0x17c>
 800b60c:	b1b0      	cbz	r0, 800b63c <_svfiprintf_r+0x114>
 800b60e:	9207      	str	r2, [sp, #28]
 800b610:	e014      	b.n	800b63c <_svfiprintf_r+0x114>
 800b612:	eba0 0308 	sub.w	r3, r0, r8
 800b616:	fa09 f303 	lsl.w	r3, r9, r3
 800b61a:	4313      	orrs	r3, r2
 800b61c:	46a2      	mov	sl, r4
 800b61e:	9304      	str	r3, [sp, #16]
 800b620:	e7d2      	b.n	800b5c8 <_svfiprintf_r+0xa0>
 800b622:	9b03      	ldr	r3, [sp, #12]
 800b624:	1d19      	adds	r1, r3, #4
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	9103      	str	r1, [sp, #12]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	bfbb      	ittet	lt
 800b62e:	425b      	neglt	r3, r3
 800b630:	f042 0202 	orrlt.w	r2, r2, #2
 800b634:	9307      	strge	r3, [sp, #28]
 800b636:	9307      	strlt	r3, [sp, #28]
 800b638:	bfb8      	it	lt
 800b63a:	9204      	strlt	r2, [sp, #16]
 800b63c:	7823      	ldrb	r3, [r4, #0]
 800b63e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b640:	d10a      	bne.n	800b658 <_svfiprintf_r+0x130>
 800b642:	7863      	ldrb	r3, [r4, #1]
 800b644:	2b2a      	cmp	r3, #42	@ 0x2a
 800b646:	d132      	bne.n	800b6ae <_svfiprintf_r+0x186>
 800b648:	9b03      	ldr	r3, [sp, #12]
 800b64a:	3402      	adds	r4, #2
 800b64c:	1d1a      	adds	r2, r3, #4
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	9203      	str	r2, [sp, #12]
 800b652:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b656:	9305      	str	r3, [sp, #20]
 800b658:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b710 <_svfiprintf_r+0x1e8>
 800b65c:	2203      	movs	r2, #3
 800b65e:	4650      	mov	r0, sl
 800b660:	7821      	ldrb	r1, [r4, #0]
 800b662:	f7fd ffc6 	bl	80095f2 <memchr>
 800b666:	b138      	cbz	r0, 800b678 <_svfiprintf_r+0x150>
 800b668:	2240      	movs	r2, #64	@ 0x40
 800b66a:	9b04      	ldr	r3, [sp, #16]
 800b66c:	eba0 000a 	sub.w	r0, r0, sl
 800b670:	4082      	lsls	r2, r0
 800b672:	4313      	orrs	r3, r2
 800b674:	3401      	adds	r4, #1
 800b676:	9304      	str	r3, [sp, #16]
 800b678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b67c:	2206      	movs	r2, #6
 800b67e:	4825      	ldr	r0, [pc, #148]	@ (800b714 <_svfiprintf_r+0x1ec>)
 800b680:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b684:	f7fd ffb5 	bl	80095f2 <memchr>
 800b688:	2800      	cmp	r0, #0
 800b68a:	d036      	beq.n	800b6fa <_svfiprintf_r+0x1d2>
 800b68c:	4b22      	ldr	r3, [pc, #136]	@ (800b718 <_svfiprintf_r+0x1f0>)
 800b68e:	bb1b      	cbnz	r3, 800b6d8 <_svfiprintf_r+0x1b0>
 800b690:	9b03      	ldr	r3, [sp, #12]
 800b692:	3307      	adds	r3, #7
 800b694:	f023 0307 	bic.w	r3, r3, #7
 800b698:	3308      	adds	r3, #8
 800b69a:	9303      	str	r3, [sp, #12]
 800b69c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b69e:	4433      	add	r3, r6
 800b6a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6a2:	e76a      	b.n	800b57a <_svfiprintf_r+0x52>
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	2001      	movs	r0, #1
 800b6a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6ac:	e7a8      	b.n	800b600 <_svfiprintf_r+0xd8>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	f04f 0c0a 	mov.w	ip, #10
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	3401      	adds	r4, #1
 800b6b8:	9305      	str	r3, [sp, #20]
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6c0:	3a30      	subs	r2, #48	@ 0x30
 800b6c2:	2a09      	cmp	r2, #9
 800b6c4:	d903      	bls.n	800b6ce <_svfiprintf_r+0x1a6>
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d0c6      	beq.n	800b658 <_svfiprintf_r+0x130>
 800b6ca:	9105      	str	r1, [sp, #20]
 800b6cc:	e7c4      	b.n	800b658 <_svfiprintf_r+0x130>
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6d6:	e7f0      	b.n	800b6ba <_svfiprintf_r+0x192>
 800b6d8:	ab03      	add	r3, sp, #12
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	462a      	mov	r2, r5
 800b6de:	4638      	mov	r0, r7
 800b6e0:	4b0e      	ldr	r3, [pc, #56]	@ (800b71c <_svfiprintf_r+0x1f4>)
 800b6e2:	a904      	add	r1, sp, #16
 800b6e4:	f7fc fef8 	bl	80084d8 <_printf_float>
 800b6e8:	1c42      	adds	r2, r0, #1
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	d1d6      	bne.n	800b69c <_svfiprintf_r+0x174>
 800b6ee:	89ab      	ldrh	r3, [r5, #12]
 800b6f0:	065b      	lsls	r3, r3, #25
 800b6f2:	f53f af2d 	bmi.w	800b550 <_svfiprintf_r+0x28>
 800b6f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6f8:	e72c      	b.n	800b554 <_svfiprintf_r+0x2c>
 800b6fa:	ab03      	add	r3, sp, #12
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	462a      	mov	r2, r5
 800b700:	4638      	mov	r0, r7
 800b702:	4b06      	ldr	r3, [pc, #24]	@ (800b71c <_svfiprintf_r+0x1f4>)
 800b704:	a904      	add	r1, sp, #16
 800b706:	f7fd f985 	bl	8008a14 <_printf_i>
 800b70a:	e7ed      	b.n	800b6e8 <_svfiprintf_r+0x1c0>
 800b70c:	0800c335 	.word	0x0800c335
 800b710:	0800c33b 	.word	0x0800c33b
 800b714:	0800c33f 	.word	0x0800c33f
 800b718:	080084d9 	.word	0x080084d9
 800b71c:	0800b473 	.word	0x0800b473

0800b720 <__sfputc_r>:
 800b720:	6893      	ldr	r3, [r2, #8]
 800b722:	b410      	push	{r4}
 800b724:	3b01      	subs	r3, #1
 800b726:	2b00      	cmp	r3, #0
 800b728:	6093      	str	r3, [r2, #8]
 800b72a:	da07      	bge.n	800b73c <__sfputc_r+0x1c>
 800b72c:	6994      	ldr	r4, [r2, #24]
 800b72e:	42a3      	cmp	r3, r4
 800b730:	db01      	blt.n	800b736 <__sfputc_r+0x16>
 800b732:	290a      	cmp	r1, #10
 800b734:	d102      	bne.n	800b73c <__sfputc_r+0x1c>
 800b736:	bc10      	pop	{r4}
 800b738:	f7fd bdf1 	b.w	800931e <__swbuf_r>
 800b73c:	6813      	ldr	r3, [r2, #0]
 800b73e:	1c58      	adds	r0, r3, #1
 800b740:	6010      	str	r0, [r2, #0]
 800b742:	7019      	strb	r1, [r3, #0]
 800b744:	4608      	mov	r0, r1
 800b746:	bc10      	pop	{r4}
 800b748:	4770      	bx	lr

0800b74a <__sfputs_r>:
 800b74a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74c:	4606      	mov	r6, r0
 800b74e:	460f      	mov	r7, r1
 800b750:	4614      	mov	r4, r2
 800b752:	18d5      	adds	r5, r2, r3
 800b754:	42ac      	cmp	r4, r5
 800b756:	d101      	bne.n	800b75c <__sfputs_r+0x12>
 800b758:	2000      	movs	r0, #0
 800b75a:	e007      	b.n	800b76c <__sfputs_r+0x22>
 800b75c:	463a      	mov	r2, r7
 800b75e:	4630      	mov	r0, r6
 800b760:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b764:	f7ff ffdc 	bl	800b720 <__sfputc_r>
 800b768:	1c43      	adds	r3, r0, #1
 800b76a:	d1f3      	bne.n	800b754 <__sfputs_r+0xa>
 800b76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b770 <_vfiprintf_r>:
 800b770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b774:	460d      	mov	r5, r1
 800b776:	4614      	mov	r4, r2
 800b778:	4698      	mov	r8, r3
 800b77a:	4606      	mov	r6, r0
 800b77c:	b09d      	sub	sp, #116	@ 0x74
 800b77e:	b118      	cbz	r0, 800b788 <_vfiprintf_r+0x18>
 800b780:	6a03      	ldr	r3, [r0, #32]
 800b782:	b90b      	cbnz	r3, 800b788 <_vfiprintf_r+0x18>
 800b784:	f7fd fcfa 	bl	800917c <__sinit>
 800b788:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b78a:	07d9      	lsls	r1, r3, #31
 800b78c:	d405      	bmi.n	800b79a <_vfiprintf_r+0x2a>
 800b78e:	89ab      	ldrh	r3, [r5, #12]
 800b790:	059a      	lsls	r2, r3, #22
 800b792:	d402      	bmi.n	800b79a <_vfiprintf_r+0x2a>
 800b794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b796:	f7fd ff22 	bl	80095de <__retarget_lock_acquire_recursive>
 800b79a:	89ab      	ldrh	r3, [r5, #12]
 800b79c:	071b      	lsls	r3, r3, #28
 800b79e:	d501      	bpl.n	800b7a4 <_vfiprintf_r+0x34>
 800b7a0:	692b      	ldr	r3, [r5, #16]
 800b7a2:	b99b      	cbnz	r3, 800b7cc <_vfiprintf_r+0x5c>
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	f7fd fdf8 	bl	800939c <__swsetup_r>
 800b7ac:	b170      	cbz	r0, 800b7cc <_vfiprintf_r+0x5c>
 800b7ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7b0:	07dc      	lsls	r4, r3, #31
 800b7b2:	d504      	bpl.n	800b7be <_vfiprintf_r+0x4e>
 800b7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b8:	b01d      	add	sp, #116	@ 0x74
 800b7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7be:	89ab      	ldrh	r3, [r5, #12]
 800b7c0:	0598      	lsls	r0, r3, #22
 800b7c2:	d4f7      	bmi.n	800b7b4 <_vfiprintf_r+0x44>
 800b7c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7c6:	f7fd ff0b 	bl	80095e0 <__retarget_lock_release_recursive>
 800b7ca:	e7f3      	b.n	800b7b4 <_vfiprintf_r+0x44>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7d0:	2320      	movs	r3, #32
 800b7d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7d6:	2330      	movs	r3, #48	@ 0x30
 800b7d8:	f04f 0901 	mov.w	r9, #1
 800b7dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7e0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b98c <_vfiprintf_r+0x21c>
 800b7e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7e8:	4623      	mov	r3, r4
 800b7ea:	469a      	mov	sl, r3
 800b7ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7f0:	b10a      	cbz	r2, 800b7f6 <_vfiprintf_r+0x86>
 800b7f2:	2a25      	cmp	r2, #37	@ 0x25
 800b7f4:	d1f9      	bne.n	800b7ea <_vfiprintf_r+0x7a>
 800b7f6:	ebba 0b04 	subs.w	fp, sl, r4
 800b7fa:	d00b      	beq.n	800b814 <_vfiprintf_r+0xa4>
 800b7fc:	465b      	mov	r3, fp
 800b7fe:	4622      	mov	r2, r4
 800b800:	4629      	mov	r1, r5
 800b802:	4630      	mov	r0, r6
 800b804:	f7ff ffa1 	bl	800b74a <__sfputs_r>
 800b808:	3001      	adds	r0, #1
 800b80a:	f000 80a7 	beq.w	800b95c <_vfiprintf_r+0x1ec>
 800b80e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b810:	445a      	add	r2, fp
 800b812:	9209      	str	r2, [sp, #36]	@ 0x24
 800b814:	f89a 3000 	ldrb.w	r3, [sl]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 809f 	beq.w	800b95c <_vfiprintf_r+0x1ec>
 800b81e:	2300      	movs	r3, #0
 800b820:	f04f 32ff 	mov.w	r2, #4294967295
 800b824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b828:	f10a 0a01 	add.w	sl, sl, #1
 800b82c:	9304      	str	r3, [sp, #16]
 800b82e:	9307      	str	r3, [sp, #28]
 800b830:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b834:	931a      	str	r3, [sp, #104]	@ 0x68
 800b836:	4654      	mov	r4, sl
 800b838:	2205      	movs	r2, #5
 800b83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b83e:	4853      	ldr	r0, [pc, #332]	@ (800b98c <_vfiprintf_r+0x21c>)
 800b840:	f7fd fed7 	bl	80095f2 <memchr>
 800b844:	9a04      	ldr	r2, [sp, #16]
 800b846:	b9d8      	cbnz	r0, 800b880 <_vfiprintf_r+0x110>
 800b848:	06d1      	lsls	r1, r2, #27
 800b84a:	bf44      	itt	mi
 800b84c:	2320      	movmi	r3, #32
 800b84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b852:	0713      	lsls	r3, r2, #28
 800b854:	bf44      	itt	mi
 800b856:	232b      	movmi	r3, #43	@ 0x2b
 800b858:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b85c:	f89a 3000 	ldrb.w	r3, [sl]
 800b860:	2b2a      	cmp	r3, #42	@ 0x2a
 800b862:	d015      	beq.n	800b890 <_vfiprintf_r+0x120>
 800b864:	4654      	mov	r4, sl
 800b866:	2000      	movs	r0, #0
 800b868:	f04f 0c0a 	mov.w	ip, #10
 800b86c:	9a07      	ldr	r2, [sp, #28]
 800b86e:	4621      	mov	r1, r4
 800b870:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b874:	3b30      	subs	r3, #48	@ 0x30
 800b876:	2b09      	cmp	r3, #9
 800b878:	d94b      	bls.n	800b912 <_vfiprintf_r+0x1a2>
 800b87a:	b1b0      	cbz	r0, 800b8aa <_vfiprintf_r+0x13a>
 800b87c:	9207      	str	r2, [sp, #28]
 800b87e:	e014      	b.n	800b8aa <_vfiprintf_r+0x13a>
 800b880:	eba0 0308 	sub.w	r3, r0, r8
 800b884:	fa09 f303 	lsl.w	r3, r9, r3
 800b888:	4313      	orrs	r3, r2
 800b88a:	46a2      	mov	sl, r4
 800b88c:	9304      	str	r3, [sp, #16]
 800b88e:	e7d2      	b.n	800b836 <_vfiprintf_r+0xc6>
 800b890:	9b03      	ldr	r3, [sp, #12]
 800b892:	1d19      	adds	r1, r3, #4
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	9103      	str	r1, [sp, #12]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	bfbb      	ittet	lt
 800b89c:	425b      	neglt	r3, r3
 800b89e:	f042 0202 	orrlt.w	r2, r2, #2
 800b8a2:	9307      	strge	r3, [sp, #28]
 800b8a4:	9307      	strlt	r3, [sp, #28]
 800b8a6:	bfb8      	it	lt
 800b8a8:	9204      	strlt	r2, [sp, #16]
 800b8aa:	7823      	ldrb	r3, [r4, #0]
 800b8ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8ae:	d10a      	bne.n	800b8c6 <_vfiprintf_r+0x156>
 800b8b0:	7863      	ldrb	r3, [r4, #1]
 800b8b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8b4:	d132      	bne.n	800b91c <_vfiprintf_r+0x1ac>
 800b8b6:	9b03      	ldr	r3, [sp, #12]
 800b8b8:	3402      	adds	r4, #2
 800b8ba:	1d1a      	adds	r2, r3, #4
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	9203      	str	r2, [sp, #12]
 800b8c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8c4:	9305      	str	r3, [sp, #20]
 800b8c6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b990 <_vfiprintf_r+0x220>
 800b8ca:	2203      	movs	r2, #3
 800b8cc:	4650      	mov	r0, sl
 800b8ce:	7821      	ldrb	r1, [r4, #0]
 800b8d0:	f7fd fe8f 	bl	80095f2 <memchr>
 800b8d4:	b138      	cbz	r0, 800b8e6 <_vfiprintf_r+0x176>
 800b8d6:	2240      	movs	r2, #64	@ 0x40
 800b8d8:	9b04      	ldr	r3, [sp, #16]
 800b8da:	eba0 000a 	sub.w	r0, r0, sl
 800b8de:	4082      	lsls	r2, r0
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	3401      	adds	r4, #1
 800b8e4:	9304      	str	r3, [sp, #16]
 800b8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ea:	2206      	movs	r2, #6
 800b8ec:	4829      	ldr	r0, [pc, #164]	@ (800b994 <_vfiprintf_r+0x224>)
 800b8ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8f2:	f7fd fe7e 	bl	80095f2 <memchr>
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	d03f      	beq.n	800b97a <_vfiprintf_r+0x20a>
 800b8fa:	4b27      	ldr	r3, [pc, #156]	@ (800b998 <_vfiprintf_r+0x228>)
 800b8fc:	bb1b      	cbnz	r3, 800b946 <_vfiprintf_r+0x1d6>
 800b8fe:	9b03      	ldr	r3, [sp, #12]
 800b900:	3307      	adds	r3, #7
 800b902:	f023 0307 	bic.w	r3, r3, #7
 800b906:	3308      	adds	r3, #8
 800b908:	9303      	str	r3, [sp, #12]
 800b90a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b90c:	443b      	add	r3, r7
 800b90e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b910:	e76a      	b.n	800b7e8 <_vfiprintf_r+0x78>
 800b912:	460c      	mov	r4, r1
 800b914:	2001      	movs	r0, #1
 800b916:	fb0c 3202 	mla	r2, ip, r2, r3
 800b91a:	e7a8      	b.n	800b86e <_vfiprintf_r+0xfe>
 800b91c:	2300      	movs	r3, #0
 800b91e:	f04f 0c0a 	mov.w	ip, #10
 800b922:	4619      	mov	r1, r3
 800b924:	3401      	adds	r4, #1
 800b926:	9305      	str	r3, [sp, #20]
 800b928:	4620      	mov	r0, r4
 800b92a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b92e:	3a30      	subs	r2, #48	@ 0x30
 800b930:	2a09      	cmp	r2, #9
 800b932:	d903      	bls.n	800b93c <_vfiprintf_r+0x1cc>
 800b934:	2b00      	cmp	r3, #0
 800b936:	d0c6      	beq.n	800b8c6 <_vfiprintf_r+0x156>
 800b938:	9105      	str	r1, [sp, #20]
 800b93a:	e7c4      	b.n	800b8c6 <_vfiprintf_r+0x156>
 800b93c:	4604      	mov	r4, r0
 800b93e:	2301      	movs	r3, #1
 800b940:	fb0c 2101 	mla	r1, ip, r1, r2
 800b944:	e7f0      	b.n	800b928 <_vfiprintf_r+0x1b8>
 800b946:	ab03      	add	r3, sp, #12
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	462a      	mov	r2, r5
 800b94c:	4630      	mov	r0, r6
 800b94e:	4b13      	ldr	r3, [pc, #76]	@ (800b99c <_vfiprintf_r+0x22c>)
 800b950:	a904      	add	r1, sp, #16
 800b952:	f7fc fdc1 	bl	80084d8 <_printf_float>
 800b956:	4607      	mov	r7, r0
 800b958:	1c78      	adds	r0, r7, #1
 800b95a:	d1d6      	bne.n	800b90a <_vfiprintf_r+0x19a>
 800b95c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b95e:	07d9      	lsls	r1, r3, #31
 800b960:	d405      	bmi.n	800b96e <_vfiprintf_r+0x1fe>
 800b962:	89ab      	ldrh	r3, [r5, #12]
 800b964:	059a      	lsls	r2, r3, #22
 800b966:	d402      	bmi.n	800b96e <_vfiprintf_r+0x1fe>
 800b968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b96a:	f7fd fe39 	bl	80095e0 <__retarget_lock_release_recursive>
 800b96e:	89ab      	ldrh	r3, [r5, #12]
 800b970:	065b      	lsls	r3, r3, #25
 800b972:	f53f af1f 	bmi.w	800b7b4 <_vfiprintf_r+0x44>
 800b976:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b978:	e71e      	b.n	800b7b8 <_vfiprintf_r+0x48>
 800b97a:	ab03      	add	r3, sp, #12
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	462a      	mov	r2, r5
 800b980:	4630      	mov	r0, r6
 800b982:	4b06      	ldr	r3, [pc, #24]	@ (800b99c <_vfiprintf_r+0x22c>)
 800b984:	a904      	add	r1, sp, #16
 800b986:	f7fd f845 	bl	8008a14 <_printf_i>
 800b98a:	e7e4      	b.n	800b956 <_vfiprintf_r+0x1e6>
 800b98c:	0800c335 	.word	0x0800c335
 800b990:	0800c33b 	.word	0x0800c33b
 800b994:	0800c33f 	.word	0x0800c33f
 800b998:	080084d9 	.word	0x080084d9
 800b99c:	0800b74b 	.word	0x0800b74b

0800b9a0 <__sflush_r>:
 800b9a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	0716      	lsls	r6, r2, #28
 800b9a8:	4605      	mov	r5, r0
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	d454      	bmi.n	800ba58 <__sflush_r+0xb8>
 800b9ae:	684b      	ldr	r3, [r1, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	dc02      	bgt.n	800b9ba <__sflush_r+0x1a>
 800b9b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	dd48      	ble.n	800ba4c <__sflush_r+0xac>
 800b9ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9bc:	2e00      	cmp	r6, #0
 800b9be:	d045      	beq.n	800ba4c <__sflush_r+0xac>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b9c6:	682f      	ldr	r7, [r5, #0]
 800b9c8:	6a21      	ldr	r1, [r4, #32]
 800b9ca:	602b      	str	r3, [r5, #0]
 800b9cc:	d030      	beq.n	800ba30 <__sflush_r+0x90>
 800b9ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	0759      	lsls	r1, r3, #29
 800b9d4:	d505      	bpl.n	800b9e2 <__sflush_r+0x42>
 800b9d6:	6863      	ldr	r3, [r4, #4]
 800b9d8:	1ad2      	subs	r2, r2, r3
 800b9da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b9dc:	b10b      	cbz	r3, 800b9e2 <__sflush_r+0x42>
 800b9de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b9e0:	1ad2      	subs	r2, r2, r3
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9e8:	6a21      	ldr	r1, [r4, #32]
 800b9ea:	47b0      	blx	r6
 800b9ec:	1c43      	adds	r3, r0, #1
 800b9ee:	89a3      	ldrh	r3, [r4, #12]
 800b9f0:	d106      	bne.n	800ba00 <__sflush_r+0x60>
 800b9f2:	6829      	ldr	r1, [r5, #0]
 800b9f4:	291d      	cmp	r1, #29
 800b9f6:	d82b      	bhi.n	800ba50 <__sflush_r+0xb0>
 800b9f8:	4a28      	ldr	r2, [pc, #160]	@ (800ba9c <__sflush_r+0xfc>)
 800b9fa:	40ca      	lsrs	r2, r1
 800b9fc:	07d6      	lsls	r6, r2, #31
 800b9fe:	d527      	bpl.n	800ba50 <__sflush_r+0xb0>
 800ba00:	2200      	movs	r2, #0
 800ba02:	6062      	str	r2, [r4, #4]
 800ba04:	6922      	ldr	r2, [r4, #16]
 800ba06:	04d9      	lsls	r1, r3, #19
 800ba08:	6022      	str	r2, [r4, #0]
 800ba0a:	d504      	bpl.n	800ba16 <__sflush_r+0x76>
 800ba0c:	1c42      	adds	r2, r0, #1
 800ba0e:	d101      	bne.n	800ba14 <__sflush_r+0x74>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	b903      	cbnz	r3, 800ba16 <__sflush_r+0x76>
 800ba14:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba18:	602f      	str	r7, [r5, #0]
 800ba1a:	b1b9      	cbz	r1, 800ba4c <__sflush_r+0xac>
 800ba1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba20:	4299      	cmp	r1, r3
 800ba22:	d002      	beq.n	800ba2a <__sflush_r+0x8a>
 800ba24:	4628      	mov	r0, r5
 800ba26:	f7fe fc67 	bl	800a2f8 <_free_r>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba2e:	e00d      	b.n	800ba4c <__sflush_r+0xac>
 800ba30:	2301      	movs	r3, #1
 800ba32:	4628      	mov	r0, r5
 800ba34:	47b0      	blx	r6
 800ba36:	4602      	mov	r2, r0
 800ba38:	1c50      	adds	r0, r2, #1
 800ba3a:	d1c9      	bne.n	800b9d0 <__sflush_r+0x30>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d0c6      	beq.n	800b9d0 <__sflush_r+0x30>
 800ba42:	2b1d      	cmp	r3, #29
 800ba44:	d001      	beq.n	800ba4a <__sflush_r+0xaa>
 800ba46:	2b16      	cmp	r3, #22
 800ba48:	d11d      	bne.n	800ba86 <__sflush_r+0xe6>
 800ba4a:	602f      	str	r7, [r5, #0]
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	e021      	b.n	800ba94 <__sflush_r+0xf4>
 800ba50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba54:	b21b      	sxth	r3, r3
 800ba56:	e01a      	b.n	800ba8e <__sflush_r+0xee>
 800ba58:	690f      	ldr	r7, [r1, #16]
 800ba5a:	2f00      	cmp	r7, #0
 800ba5c:	d0f6      	beq.n	800ba4c <__sflush_r+0xac>
 800ba5e:	0793      	lsls	r3, r2, #30
 800ba60:	bf18      	it	ne
 800ba62:	2300      	movne	r3, #0
 800ba64:	680e      	ldr	r6, [r1, #0]
 800ba66:	bf08      	it	eq
 800ba68:	694b      	ldreq	r3, [r1, #20]
 800ba6a:	1bf6      	subs	r6, r6, r7
 800ba6c:	600f      	str	r7, [r1, #0]
 800ba6e:	608b      	str	r3, [r1, #8]
 800ba70:	2e00      	cmp	r6, #0
 800ba72:	ddeb      	ble.n	800ba4c <__sflush_r+0xac>
 800ba74:	4633      	mov	r3, r6
 800ba76:	463a      	mov	r2, r7
 800ba78:	4628      	mov	r0, r5
 800ba7a:	6a21      	ldr	r1, [r4, #32]
 800ba7c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ba80:	47e0      	blx	ip
 800ba82:	2800      	cmp	r0, #0
 800ba84:	dc07      	bgt.n	800ba96 <__sflush_r+0xf6>
 800ba86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba92:	81a3      	strh	r3, [r4, #12]
 800ba94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba96:	4407      	add	r7, r0
 800ba98:	1a36      	subs	r6, r6, r0
 800ba9a:	e7e9      	b.n	800ba70 <__sflush_r+0xd0>
 800ba9c:	20400001 	.word	0x20400001

0800baa0 <_fflush_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	690b      	ldr	r3, [r1, #16]
 800baa4:	4605      	mov	r5, r0
 800baa6:	460c      	mov	r4, r1
 800baa8:	b913      	cbnz	r3, 800bab0 <_fflush_r+0x10>
 800baaa:	2500      	movs	r5, #0
 800baac:	4628      	mov	r0, r5
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	b118      	cbz	r0, 800baba <_fflush_r+0x1a>
 800bab2:	6a03      	ldr	r3, [r0, #32]
 800bab4:	b90b      	cbnz	r3, 800baba <_fflush_r+0x1a>
 800bab6:	f7fd fb61 	bl	800917c <__sinit>
 800baba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d0f3      	beq.n	800baaa <_fflush_r+0xa>
 800bac2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bac4:	07d0      	lsls	r0, r2, #31
 800bac6:	d404      	bmi.n	800bad2 <_fflush_r+0x32>
 800bac8:	0599      	lsls	r1, r3, #22
 800baca:	d402      	bmi.n	800bad2 <_fflush_r+0x32>
 800bacc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bace:	f7fd fd86 	bl	80095de <__retarget_lock_acquire_recursive>
 800bad2:	4628      	mov	r0, r5
 800bad4:	4621      	mov	r1, r4
 800bad6:	f7ff ff63 	bl	800b9a0 <__sflush_r>
 800bada:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800badc:	4605      	mov	r5, r0
 800bade:	07da      	lsls	r2, r3, #31
 800bae0:	d4e4      	bmi.n	800baac <_fflush_r+0xc>
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	059b      	lsls	r3, r3, #22
 800bae6:	d4e1      	bmi.n	800baac <_fflush_r+0xc>
 800bae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800baea:	f7fd fd79 	bl	80095e0 <__retarget_lock_release_recursive>
 800baee:	e7dd      	b.n	800baac <_fflush_r+0xc>

0800baf0 <__swhatbuf_r>:
 800baf0:	b570      	push	{r4, r5, r6, lr}
 800baf2:	460c      	mov	r4, r1
 800baf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf8:	4615      	mov	r5, r2
 800bafa:	2900      	cmp	r1, #0
 800bafc:	461e      	mov	r6, r3
 800bafe:	b096      	sub	sp, #88	@ 0x58
 800bb00:	da0c      	bge.n	800bb1c <__swhatbuf_r+0x2c>
 800bb02:	89a3      	ldrh	r3, [r4, #12]
 800bb04:	2100      	movs	r1, #0
 800bb06:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb0a:	bf14      	ite	ne
 800bb0c:	2340      	movne	r3, #64	@ 0x40
 800bb0e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb12:	2000      	movs	r0, #0
 800bb14:	6031      	str	r1, [r6, #0]
 800bb16:	602b      	str	r3, [r5, #0]
 800bb18:	b016      	add	sp, #88	@ 0x58
 800bb1a:	bd70      	pop	{r4, r5, r6, pc}
 800bb1c:	466a      	mov	r2, sp
 800bb1e:	f000 f863 	bl	800bbe8 <_fstat_r>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	dbed      	blt.n	800bb02 <__swhatbuf_r+0x12>
 800bb26:	9901      	ldr	r1, [sp, #4]
 800bb28:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb2c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb30:	4259      	negs	r1, r3
 800bb32:	4159      	adcs	r1, r3
 800bb34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb38:	e7eb      	b.n	800bb12 <__swhatbuf_r+0x22>

0800bb3a <__smakebuf_r>:
 800bb3a:	898b      	ldrh	r3, [r1, #12]
 800bb3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb3e:	079d      	lsls	r5, r3, #30
 800bb40:	4606      	mov	r6, r0
 800bb42:	460c      	mov	r4, r1
 800bb44:	d507      	bpl.n	800bb56 <__smakebuf_r+0x1c>
 800bb46:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb4a:	6023      	str	r3, [r4, #0]
 800bb4c:	6123      	str	r3, [r4, #16]
 800bb4e:	2301      	movs	r3, #1
 800bb50:	6163      	str	r3, [r4, #20]
 800bb52:	b003      	add	sp, #12
 800bb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb56:	466a      	mov	r2, sp
 800bb58:	ab01      	add	r3, sp, #4
 800bb5a:	f7ff ffc9 	bl	800baf0 <__swhatbuf_r>
 800bb5e:	9f00      	ldr	r7, [sp, #0]
 800bb60:	4605      	mov	r5, r0
 800bb62:	4639      	mov	r1, r7
 800bb64:	4630      	mov	r0, r6
 800bb66:	f7fb fd81 	bl	800766c <_malloc_r>
 800bb6a:	b948      	cbnz	r0, 800bb80 <__smakebuf_r+0x46>
 800bb6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb70:	059a      	lsls	r2, r3, #22
 800bb72:	d4ee      	bmi.n	800bb52 <__smakebuf_r+0x18>
 800bb74:	f023 0303 	bic.w	r3, r3, #3
 800bb78:	f043 0302 	orr.w	r3, r3, #2
 800bb7c:	81a3      	strh	r3, [r4, #12]
 800bb7e:	e7e2      	b.n	800bb46 <__smakebuf_r+0xc>
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	9b01      	ldr	r3, [sp, #4]
 800bb8e:	6020      	str	r0, [r4, #0]
 800bb90:	b15b      	cbz	r3, 800bbaa <__smakebuf_r+0x70>
 800bb92:	4630      	mov	r0, r6
 800bb94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb98:	f000 f838 	bl	800bc0c <_isatty_r>
 800bb9c:	b128      	cbz	r0, 800bbaa <__smakebuf_r+0x70>
 800bb9e:	89a3      	ldrh	r3, [r4, #12]
 800bba0:	f023 0303 	bic.w	r3, r3, #3
 800bba4:	f043 0301 	orr.w	r3, r3, #1
 800bba8:	81a3      	strh	r3, [r4, #12]
 800bbaa:	89a3      	ldrh	r3, [r4, #12]
 800bbac:	431d      	orrs	r5, r3
 800bbae:	81a5      	strh	r5, [r4, #12]
 800bbb0:	e7cf      	b.n	800bb52 <__smakebuf_r+0x18>

0800bbb2 <memmove>:
 800bbb2:	4288      	cmp	r0, r1
 800bbb4:	b510      	push	{r4, lr}
 800bbb6:	eb01 0402 	add.w	r4, r1, r2
 800bbba:	d902      	bls.n	800bbc2 <memmove+0x10>
 800bbbc:	4284      	cmp	r4, r0
 800bbbe:	4623      	mov	r3, r4
 800bbc0:	d807      	bhi.n	800bbd2 <memmove+0x20>
 800bbc2:	1e43      	subs	r3, r0, #1
 800bbc4:	42a1      	cmp	r1, r4
 800bbc6:	d008      	beq.n	800bbda <memmove+0x28>
 800bbc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbcc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbd0:	e7f8      	b.n	800bbc4 <memmove+0x12>
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	4402      	add	r2, r0
 800bbd6:	428a      	cmp	r2, r1
 800bbd8:	d100      	bne.n	800bbdc <memmove+0x2a>
 800bbda:	bd10      	pop	{r4, pc}
 800bbdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbe0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbe4:	e7f7      	b.n	800bbd6 <memmove+0x24>
	...

0800bbe8 <_fstat_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	2300      	movs	r3, #0
 800bbec:	4d06      	ldr	r5, [pc, #24]	@ (800bc08 <_fstat_r+0x20>)
 800bbee:	4604      	mov	r4, r0
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	602b      	str	r3, [r5, #0]
 800bbf6:	f7f5 fcb3 	bl	8001560 <_fstat>
 800bbfa:	1c43      	adds	r3, r0, #1
 800bbfc:	d102      	bne.n	800bc04 <_fstat_r+0x1c>
 800bbfe:	682b      	ldr	r3, [r5, #0]
 800bc00:	b103      	cbz	r3, 800bc04 <_fstat_r+0x1c>
 800bc02:	6023      	str	r3, [r4, #0]
 800bc04:	bd38      	pop	{r3, r4, r5, pc}
 800bc06:	bf00      	nop
 800bc08:	20000be4 	.word	0x20000be4

0800bc0c <_isatty_r>:
 800bc0c:	b538      	push	{r3, r4, r5, lr}
 800bc0e:	2300      	movs	r3, #0
 800bc10:	4d05      	ldr	r5, [pc, #20]	@ (800bc28 <_isatty_r+0x1c>)
 800bc12:	4604      	mov	r4, r0
 800bc14:	4608      	mov	r0, r1
 800bc16:	602b      	str	r3, [r5, #0]
 800bc18:	f7f5 fcb1 	bl	800157e <_isatty>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	d102      	bne.n	800bc26 <_isatty_r+0x1a>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	b103      	cbz	r3, 800bc26 <_isatty_r+0x1a>
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	20000be4 	.word	0x20000be4

0800bc2c <__assert_func>:
 800bc2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc2e:	4614      	mov	r4, r2
 800bc30:	461a      	mov	r2, r3
 800bc32:	4b09      	ldr	r3, [pc, #36]	@ (800bc58 <__assert_func+0x2c>)
 800bc34:	4605      	mov	r5, r0
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	68d8      	ldr	r0, [r3, #12]
 800bc3a:	b14c      	cbz	r4, 800bc50 <__assert_func+0x24>
 800bc3c:	4b07      	ldr	r3, [pc, #28]	@ (800bc5c <__assert_func+0x30>)
 800bc3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc42:	9100      	str	r1, [sp, #0]
 800bc44:	462b      	mov	r3, r5
 800bc46:	4906      	ldr	r1, [pc, #24]	@ (800bc60 <__assert_func+0x34>)
 800bc48:	f000 f850 	bl	800bcec <fiprintf>
 800bc4c:	f000 f860 	bl	800bd10 <abort>
 800bc50:	4b04      	ldr	r3, [pc, #16]	@ (800bc64 <__assert_func+0x38>)
 800bc52:	461c      	mov	r4, r3
 800bc54:	e7f3      	b.n	800bc3e <__assert_func+0x12>
 800bc56:	bf00      	nop
 800bc58:	200001bc 	.word	0x200001bc
 800bc5c:	0800c346 	.word	0x0800c346
 800bc60:	0800c353 	.word	0x0800c353
 800bc64:	0800c381 	.word	0x0800c381

0800bc68 <_calloc_r>:
 800bc68:	b570      	push	{r4, r5, r6, lr}
 800bc6a:	fba1 5402 	umull	r5, r4, r1, r2
 800bc6e:	b934      	cbnz	r4, 800bc7e <_calloc_r+0x16>
 800bc70:	4629      	mov	r1, r5
 800bc72:	f7fb fcfb 	bl	800766c <_malloc_r>
 800bc76:	4606      	mov	r6, r0
 800bc78:	b928      	cbnz	r0, 800bc86 <_calloc_r+0x1e>
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	bd70      	pop	{r4, r5, r6, pc}
 800bc7e:	220c      	movs	r2, #12
 800bc80:	2600      	movs	r6, #0
 800bc82:	6002      	str	r2, [r0, #0]
 800bc84:	e7f9      	b.n	800bc7a <_calloc_r+0x12>
 800bc86:	462a      	mov	r2, r5
 800bc88:	4621      	mov	r1, r4
 800bc8a:	f7fd fbdd 	bl	8009448 <memset>
 800bc8e:	e7f4      	b.n	800bc7a <_calloc_r+0x12>

0800bc90 <_realloc_r>:
 800bc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc94:	4607      	mov	r7, r0
 800bc96:	4614      	mov	r4, r2
 800bc98:	460d      	mov	r5, r1
 800bc9a:	b921      	cbnz	r1, 800bca6 <_realloc_r+0x16>
 800bc9c:	4611      	mov	r1, r2
 800bc9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bca2:	f7fb bce3 	b.w	800766c <_malloc_r>
 800bca6:	b92a      	cbnz	r2, 800bcb4 <_realloc_r+0x24>
 800bca8:	f7fe fb26 	bl	800a2f8 <_free_r>
 800bcac:	4625      	mov	r5, r4
 800bcae:	4628      	mov	r0, r5
 800bcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb4:	f000 f833 	bl	800bd1e <_malloc_usable_size_r>
 800bcb8:	4284      	cmp	r4, r0
 800bcba:	4606      	mov	r6, r0
 800bcbc:	d802      	bhi.n	800bcc4 <_realloc_r+0x34>
 800bcbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bcc2:	d8f4      	bhi.n	800bcae <_realloc_r+0x1e>
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	f7fb fcd0 	bl	800766c <_malloc_r>
 800bccc:	4680      	mov	r8, r0
 800bcce:	b908      	cbnz	r0, 800bcd4 <_realloc_r+0x44>
 800bcd0:	4645      	mov	r5, r8
 800bcd2:	e7ec      	b.n	800bcae <_realloc_r+0x1e>
 800bcd4:	42b4      	cmp	r4, r6
 800bcd6:	4622      	mov	r2, r4
 800bcd8:	4629      	mov	r1, r5
 800bcda:	bf28      	it	cs
 800bcdc:	4632      	movcs	r2, r6
 800bcde:	f7fd fc96 	bl	800960e <memcpy>
 800bce2:	4629      	mov	r1, r5
 800bce4:	4638      	mov	r0, r7
 800bce6:	f7fe fb07 	bl	800a2f8 <_free_r>
 800bcea:	e7f1      	b.n	800bcd0 <_realloc_r+0x40>

0800bcec <fiprintf>:
 800bcec:	b40e      	push	{r1, r2, r3}
 800bcee:	b503      	push	{r0, r1, lr}
 800bcf0:	4601      	mov	r1, r0
 800bcf2:	ab03      	add	r3, sp, #12
 800bcf4:	4805      	ldr	r0, [pc, #20]	@ (800bd0c <fiprintf+0x20>)
 800bcf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcfa:	6800      	ldr	r0, [r0, #0]
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	f7ff fd37 	bl	800b770 <_vfiprintf_r>
 800bd02:	b002      	add	sp, #8
 800bd04:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd08:	b003      	add	sp, #12
 800bd0a:	4770      	bx	lr
 800bd0c:	200001bc 	.word	0x200001bc

0800bd10 <abort>:
 800bd10:	2006      	movs	r0, #6
 800bd12:	b508      	push	{r3, lr}
 800bd14:	f000 f834 	bl	800bd80 <raise>
 800bd18:	2001      	movs	r0, #1
 800bd1a:	f7f5 fbee 	bl	80014fa <_exit>

0800bd1e <_malloc_usable_size_r>:
 800bd1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd22:	1f18      	subs	r0, r3, #4
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	bfbc      	itt	lt
 800bd28:	580b      	ldrlt	r3, [r1, r0]
 800bd2a:	18c0      	addlt	r0, r0, r3
 800bd2c:	4770      	bx	lr

0800bd2e <_raise_r>:
 800bd2e:	291f      	cmp	r1, #31
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	4605      	mov	r5, r0
 800bd34:	460c      	mov	r4, r1
 800bd36:	d904      	bls.n	800bd42 <_raise_r+0x14>
 800bd38:	2316      	movs	r3, #22
 800bd3a:	6003      	str	r3, [r0, #0]
 800bd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd40:	bd38      	pop	{r3, r4, r5, pc}
 800bd42:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bd44:	b112      	cbz	r2, 800bd4c <_raise_r+0x1e>
 800bd46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd4a:	b94b      	cbnz	r3, 800bd60 <_raise_r+0x32>
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	f000 f831 	bl	800bdb4 <_getpid_r>
 800bd52:	4622      	mov	r2, r4
 800bd54:	4601      	mov	r1, r0
 800bd56:	4628      	mov	r0, r5
 800bd58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd5c:	f000 b818 	b.w	800bd90 <_kill_r>
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d00a      	beq.n	800bd7a <_raise_r+0x4c>
 800bd64:	1c59      	adds	r1, r3, #1
 800bd66:	d103      	bne.n	800bd70 <_raise_r+0x42>
 800bd68:	2316      	movs	r3, #22
 800bd6a:	6003      	str	r3, [r0, #0]
 800bd6c:	2001      	movs	r0, #1
 800bd6e:	e7e7      	b.n	800bd40 <_raise_r+0x12>
 800bd70:	2100      	movs	r1, #0
 800bd72:	4620      	mov	r0, r4
 800bd74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bd78:	4798      	blx	r3
 800bd7a:	2000      	movs	r0, #0
 800bd7c:	e7e0      	b.n	800bd40 <_raise_r+0x12>
	...

0800bd80 <raise>:
 800bd80:	4b02      	ldr	r3, [pc, #8]	@ (800bd8c <raise+0xc>)
 800bd82:	4601      	mov	r1, r0
 800bd84:	6818      	ldr	r0, [r3, #0]
 800bd86:	f7ff bfd2 	b.w	800bd2e <_raise_r>
 800bd8a:	bf00      	nop
 800bd8c:	200001bc 	.word	0x200001bc

0800bd90 <_kill_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	2300      	movs	r3, #0
 800bd94:	4d06      	ldr	r5, [pc, #24]	@ (800bdb0 <_kill_r+0x20>)
 800bd96:	4604      	mov	r4, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	4611      	mov	r1, r2
 800bd9c:	602b      	str	r3, [r5, #0]
 800bd9e:	f7f5 fb9c 	bl	80014da <_kill>
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	d102      	bne.n	800bdac <_kill_r+0x1c>
 800bda6:	682b      	ldr	r3, [r5, #0]
 800bda8:	b103      	cbz	r3, 800bdac <_kill_r+0x1c>
 800bdaa:	6023      	str	r3, [r4, #0]
 800bdac:	bd38      	pop	{r3, r4, r5, pc}
 800bdae:	bf00      	nop
 800bdb0:	20000be4 	.word	0x20000be4

0800bdb4 <_getpid_r>:
 800bdb4:	f7f5 bb8a 	b.w	80014cc <_getpid>

0800bdb8 <_init>:
 800bdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdba:	bf00      	nop
 800bdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdbe:	bc08      	pop	{r3}
 800bdc0:	469e      	mov	lr, r3
 800bdc2:	4770      	bx	lr

0800bdc4 <_fini>:
 800bdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc6:	bf00      	nop
 800bdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdca:	bc08      	pop	{r3}
 800bdcc:	469e      	mov	lr, r3
 800bdce:	4770      	bx	lr
