
test_peripheral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbb8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ac  0800dcc8  0800dcc8  0000ecc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e674  0800e674  00010238  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e674  0800e674  0000f674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e67c  0800e67c  00010238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e67c  0800e67c  0000f67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e680  0800e680  0000f680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000238  20000000  0800e684  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e08  20000238  0800e8bc  00010238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001040  0800e8bc  00011040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001359c  00000000  00000000  00010261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000351e  00000000  00000000  000237fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00026d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bde  00000000  00000000  00027ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af8e  00000000  00000000  00028886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160ba  00000000  00000000  00043814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2da  00000000  00000000  000598ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4ba8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005660  00000000  00000000  000e4bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000ea24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	0800dcb0 	.word	0x0800dcb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	0800dcb0 	.word	0x0800dcb0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gesf2>:
 8000b7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b80:	e006      	b.n	8000b90 <__cmpsf2+0x4>
 8000b82:	bf00      	nop

08000b84 <__lesf2>:
 8000b84:	f04f 0c01 	mov.w	ip, #1
 8000b88:	e002      	b.n	8000b90 <__cmpsf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__cmpsf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba6:	d011      	beq.n	8000bcc <__cmpsf2+0x40>
 8000ba8:	b001      	add	sp, #4
 8000baa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bae:	bf18      	it	ne
 8000bb0:	ea90 0f01 	teqne	r0, r1
 8000bb4:	bf58      	it	pl
 8000bb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bba:	bf88      	it	hi
 8000bbc:	17c8      	asrhi	r0, r1, #31
 8000bbe:	bf38      	it	cc
 8000bc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc4:	bf18      	it	ne
 8000bc6:	f040 0001 	orrne.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	d102      	bne.n	8000bd8 <__cmpsf2+0x4c>
 8000bd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bd6:	d105      	bne.n	8000be4 <__cmpsf2+0x58>
 8000bd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bdc:	d1e4      	bne.n	8000ba8 <__cmpsf2+0x1c>
 8000bde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000be2:	d0e1      	beq.n	8000ba8 <__cmpsf2+0x1c>
 8000be4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_cfrcmple>:
 8000bec:	4684      	mov	ip, r0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	4661      	mov	r1, ip
 8000bf2:	e7ff      	b.n	8000bf4 <__aeabi_cfcmpeq>

08000bf4 <__aeabi_cfcmpeq>:
 8000bf4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bf6:	f7ff ffc9 	bl	8000b8c <__cmpsf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	bf48      	it	mi
 8000bfe:	f110 0f00 	cmnmi.w	r0, #0
 8000c02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c04 <__aeabi_fcmpeq>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff fff4 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2001      	moveq	r0, #1
 8000c10:	2000      	movne	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmplt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffea 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmple>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffe0 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpge>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffd2 	bl	8000bec <__aeabi_cfrcmple>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_fcmpgt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffc8 	bl	8000bec <__aeabi_cfrcmple>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff fead 	bl	80009d0 <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc23 	bl	80004ec <__aeabi_dmul>
 8000ca6:	f7ff fef9 	bl	8000a9c <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fba4 	bl	80003f8 <__aeabi_ui2d>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb4:	f7ff fc1a 	bl	80004ec <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fa5c 	bl	800017c <__aeabi_dsub>
 8000cc4:	f7ff feea 	bl	8000a9c <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cdc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ce0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d013      	beq.n	8000d14 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cf0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000cf4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00b      	beq.n	8000d14 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000cfc:	e000      	b.n	8000d00 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000cfe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d00:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f9      	beq.n	8000cfe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d0a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f000 fcfb 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 f895 	bl	8000e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f000 f9af 	bl	8001090 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d32:	f000 f983 	bl	800103c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d36:	f000 f929 	bl	8000f8c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d3a:	f000 f955 	bl	8000fe8 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000d3e:	f000 f8d1 	bl	8000ee4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */


  HAL_Delay(3000);
 8000d42:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000d46:	f000 fd4d 	bl	80017e4 <HAL_Delay>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8000d4a:	2264      	movs	r2, #100	@ 0x64
 8000d4c:	4931      	ldr	r1, [pc, #196]	@ (8000e14 <main+0xf4>)
 8000d4e:	4832      	ldr	r0, [pc, #200]	@ (8000e18 <main+0xf8>)
 8000d50:	f004 ffa9 	bl	8005ca6 <HAL_UARTEx_ReceiveToIdle_IT>

  Screen_begin(&huart2);
 8000d54:	4830      	ldr	r0, [pc, #192]	@ (8000e18 <main+0xf8>)
 8000d56:	f005 fd6b 	bl	8006830 <Screen_begin>
//    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
//    HAL_Delay(200);
//	printf("SWO Debug!!!\n");
//  }

 BSP_init();
 8000d5a:	f007 fb51 	bl	8008400 <BSP_init>

 Post_task_init();
 8000d5e:	f007 fb93 	bl	8008488 <Post_task_init>
 static OS_event_t const *q_app_post[10];
 OS_task_create(AO_taskPost,
 8000d62:	4b2e      	ldr	r3, [pc, #184]	@ (8000e1c <main+0xfc>)
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	2300      	movs	r3, #0
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e20 <main+0x100>)
 8000d6e:	2101      	movs	r1, #1
 8000d70:	f008 f8a6 	bl	8008ec0 <OS_task_create>
   1,
   q_app_post,
   ARRAY_ELEMENT(q_app_post),
   (OS_event_t *)0 );

 eeprom_task_init(&hi2c1,EEPROM_ADDRESS);
 8000d74:	2150      	movs	r1, #80	@ 0x50
 8000d76:	482b      	ldr	r0, [pc, #172]	@ (8000e24 <main+0x104>)
 8000d78:	f007 f8a8 	bl	8007ecc <eeprom_task_init>
 static OS_event_t const *q_eeprom_event[10];
 OS_task_create( AO_task_eeprom,
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e28 <main+0x108>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	2300      	movs	r3, #0
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	230a      	movs	r3, #10
 8000d86:	4a29      	ldr	r2, [pc, #164]	@ (8000e2c <main+0x10c>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	f008 f899 	bl	8008ec0 <OS_task_create>
   1,
   q_eeprom_event,
   ARRAY_ELEMENT(q_eeprom_event),
   (OS_event_t *)0 );

  uart_esp32_task_init(&huart1);
 8000d8e:	4828      	ldr	r0, [pc, #160]	@ (8000e30 <main+0x110>)
 8000d90:	f007 fbec 	bl	800856c <uart_esp32_task_init>
  static OS_event_t const *q_uart_esp32_event[10];
  OS_task_create(AO_task_uart_esp32,
 8000d94:	4b27      	ldr	r3, [pc, #156]	@ (8000e34 <main+0x114>)
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	230a      	movs	r3, #10
 8000d9e:	4a26      	ldr	r2, [pc, #152]	@ (8000e38 <main+0x118>)
 8000da0:	2101      	movs	r1, #1
 8000da2:	f008 f88d 	bl	8008ec0 <OS_task_create>
  1,
  q_uart_esp32_event,
  ARRAY_ELEMENT(q_uart_esp32_event),
  (OS_event_t *)0);

  BlinkyTest_app_init();
 8000da6:	f007 fc35 	bl	8008614 <BlinkyTest_app_init>
  static OS_event_t const *TestOS_blinky[10]; /* Event queue */
  OS_task_create(
 8000daa:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <main+0x11c>)
 8000dac:	681c      	ldr	r4, [r3, #0]
 8000dae:	f007 fb55 	bl	800845c <TestOS_Work>
 8000db2:	4603      	mov	r3, r0
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	230a      	movs	r3, #10
 8000db8:	4a21      	ldr	r2, [pc, #132]	@ (8000e40 <main+0x120>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f008 f87f 	bl	8008ec0 <OS_task_create>
    TestOS_blinky,
    ARRAY_ELEMENT(TestOS_blinky),
    TestOS_Work()
  );

  app_can_bus_init(&hcan);
 8000dc2:	4820      	ldr	r0, [pc, #128]	@ (8000e44 <main+0x124>)
 8000dc4:	f007 f832 	bl	8007e2c <app_can_bus_init>
  static OS_event_t const *Can_app_event[10];
  OS_task_create( AO_task_can_bus,
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <main+0x128>)
 8000dca:	6818      	ldr	r0, [r3, #0]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	230a      	movs	r3, #10
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e4c <main+0x12c>)
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	f008 f873 	bl	8008ec0 <OS_task_create>
  //  HAL_UART_Transmit(&huart2,sendBuffer_3,sizeof(sendBuffer_3),500);
//  for (uint8_t i=0; i < 6; i++) {
//  			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
//  			  HAL_Delay(500);
//  		  }
  HAL_CAN_Start(&hcan);
 8000dda:	481a      	ldr	r0, [pc, #104]	@ (8000e44 <main+0x124>)
 8000ddc:	f000 feea 	bl	8001bb4 <HAL_CAN_Start>

  TxHeader.DLC = 5;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <main+0x130>)
 8000de2:	2205      	movs	r2, #5
 8000de4:	611a      	str	r2, [r3, #16]
  TxHeader.StdId = 0x103;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <main+0x130>)
 8000de8:	f240 1203 	movw	r2, #259	@ 0x103
 8000dec:	601a      	str	r2, [r3, #0]
  TxHeader.IDE = CAN_ID_STD;
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <main+0x130>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <main+0x130>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]

  uint8_t data_tx[5] = {'H','E','L','L','O'};
 8000dfa:	4a16      	ldr	r2, [pc, #88]	@ (8000e54 <main+0x134>)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e02:	6018      	str	r0, [r3, #0]
 8000e04:	3304      	adds	r3, #4
 8000e06:	7019      	strb	r1, [r3, #0]


  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000e08:	2110      	movs	r1, #16
 8000e0a:	480e      	ldr	r0, [pc, #56]	@ (8000e44 <main+0x124>)
 8000e0c:	f001 f837 	bl	8001e7e <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <main+0xf0>
 8000e14:	2000039c 	.word	0x2000039c
 8000e18:	20000318 	.word	0x20000318
 8000e1c:	0800e23c 	.word	0x0800e23c
 8000e20:	20000400 	.word	0x20000400
 8000e24:	2000027c 	.word	0x2000027c
 8000e28:	0800e238 	.word	0x0800e238
 8000e2c:	20000428 	.word	0x20000428
 8000e30:	200002d0 	.word	0x200002d0
 8000e34:	0800e240 	.word	0x0800e240
 8000e38:	20000450 	.word	0x20000450
 8000e3c:	0800e244 	.word	0x0800e244
 8000e40:	20000478 	.word	0x20000478
 8000e44:	20000254 	.word	0x20000254
 8000e48:	0800e234 	.word	0x0800e234
 8000e4c:	200004a0 	.word	0x200004a0
 8000e50:	20000360 	.word	0x20000360
 8000e54:	0800dd7c 	.word	0x0800dd7c

08000e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b090      	sub	sp, #64	@ 0x40
 8000e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	f107 0318 	add.w	r3, r7, #24
 8000e62:	2228      	movs	r2, #40	@ 0x28
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f00a fa6a 	bl	800b340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e96:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f004 fa15 	bl	80052d0 <HAL_RCC_OscConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000eac:	f000 f9aa 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ec0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2102      	movs	r1, #2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f004 fc82 	bl	80057d4 <HAL_RCC_ClockConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ed6:	f000 f995 	bl	8001204 <Error_Handler>
  }
}
 8000eda:	bf00      	nop
 8000edc:	3740      	adds	r7, #64	@ 0x40
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000eea:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000eec:	4a26      	ldr	r2, [pc, #152]	@ (8000f88 <MX_CAN_Init+0xa4>)
 8000eee:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000ef0:	4b24      	ldr	r3, [pc, #144]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ef6:	4b23      	ldr	r3, [pc, #140]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000efc:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000f02:	4b20      	ldr	r3, [pc, #128]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000f04:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000f08:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000f0c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f10:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f24:	4b17      	ldr	r3, [pc, #92]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f30:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f36:	4813      	ldr	r0, [pc, #76]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000f38:	f000 fc78 	bl	800182c <HAL_CAN_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000f42:	f000 f95f 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f46:	2301      	movs	r3, #1
 8000f48:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x103<<5;
 8000f52:	f242 0360 	movw	r3, #8288	@ 0x2060
 8000f56:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000f70:	463b      	mov	r3, r7
 8000f72:	4619      	mov	r1, r3
 8000f74:	4803      	ldr	r0, [pc, #12]	@ (8000f84 <MX_CAN_Init+0xa0>)
 8000f76:	f000 fd54 	bl	8001a22 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000254 	.word	0x20000254
 8000f88:	40006400 	.word	0x40006400

08000f8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000f92:	4a13      	ldr	r2, [pc, #76]	@ (8000fe0 <MX_I2C1_Init+0x54>)
 8000f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 300000;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000f98:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <MX_I2C1_Init+0x58>)
 8000f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000faa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fca:	f001 fd37 	bl	8002a3c <HAL_I2C_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fd4:	f000 f916 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2000027c 	.word	0x2000027c
 8000fe0:	40005400 	.word	0x40005400
 8000fe4:	000493e0 	.word	0x000493e0

08000fe8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_USART1_UART_Init+0x4c>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <MX_USART1_UART_Init+0x50>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <MX_USART1_UART_Init+0x4c>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_USART1_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_USART1_UART_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_USART1_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_USART1_UART_Init+0x4c>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MX_USART1_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_USART1_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_USART1_UART_Init+0x4c>)
 8001020:	f004 fd66 	bl	8005af0 <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800102a:	f000 f8eb 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200002d0 	.word	0x200002d0
 8001038:	40013800 	.word	0x40013800

0800103c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001042:	4a12      	ldr	r2, [pc, #72]	@ (800108c <MX_USART2_UART_Init+0x50>)
 8001044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001048:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 800104c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001074:	f004 fd3c 	bl	8005af0 <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800107e:	f000 f8c1 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000318 	.word	0x20000318
 800108c:	40004400 	.word	0x40004400

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a4:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <MX_GPIO_Init+0xa8>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a23      	ldr	r2, [pc, #140]	@ (8001138 <MX_GPIO_Init+0xa8>)
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b21      	ldr	r3, [pc, #132]	@ (8001138 <MX_GPIO_Init+0xa8>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001138 <MX_GPIO_Init+0xa8>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001138 <MX_GPIO_Init+0xa8>)
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <MX_GPIO_Init+0xa8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <MX_GPIO_Init+0xa8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a17      	ldr	r2, [pc, #92]	@ (8001138 <MX_GPIO_Init+0xa8>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <MX_GPIO_Init+0xa8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_GPIO_Init+0xa8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a11      	ldr	r2, [pc, #68]	@ (8001138 <MX_GPIO_Init+0xa8>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <MX_GPIO_Init+0xa8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110a:	480c      	ldr	r0, [pc, #48]	@ (800113c <MX_GPIO_Init+0xac>)
 800110c:	f001 fc7e 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001110:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800111e:	2301      	movs	r3, #1
 8001120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4619      	mov	r1, r3
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <MX_GPIO_Init+0xac>)
 800112a:	f001 faeb 	bl	8002704 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800112e:	bf00      	nop
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	40011000 	.word	0x40011000

08001140 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_UARTEx_RxEventCallback+0x3c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d10c      	bne.n	8001172 <HAL_UARTEx_RxEventCallback+0x32>

		// Call to callback function screen
		Screen_RX_data(dataRX);
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <HAL_UARTEx_RxEventCallback+0x40>)
 800115a:	f005 fbe1 	bl	8006920 <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 800115e:	2264      	movs	r2, #100	@ 0x64
 8001160:	2100      	movs	r1, #0
 8001162:	4807      	ldr	r0, [pc, #28]	@ (8001180 <HAL_UARTEx_RxEventCallback+0x40>)
 8001164:	f00a f8ec 	bl	800b340 <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8001168:	2264      	movs	r2, #100	@ 0x64
 800116a:	4905      	ldr	r1, [pc, #20]	@ (8001180 <HAL_UARTEx_RxEventCallback+0x40>)
 800116c:	4803      	ldr	r0, [pc, #12]	@ (800117c <HAL_UARTEx_RxEventCallback+0x3c>)
 800116e:	f004 fd9a 	bl	8005ca6 <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000318 	.word	0x20000318
 8001180:	2000039c 	.word	0x2000039c

08001184 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c1.Instance) {

		
	}
  /* Transmit complete wait eeprom write */
  OS_task_post_event(AO_task_eeprom, WAIT_WRITE_TIMEOUT, (uint8_t *)0, 0);
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <HAL_I2C_MemTxCpltCallback+0x20>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	2300      	movs	r3, #0
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	f007 ff33 	bl	8009000 <OS_task_post_event>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	0800e238 	.word	0x0800e238

080011a8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c>)
 80011b2:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 80011b4:	2101      	movs	r1, #1
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fd40 	bl	8001c3c <HAL_CAN_GetRxMessage>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000394 	.word	0x20000394
 80011c8:	20000378 	.word	0x20000378

080011cc <_write>:

int _write(int file, char *ptr, int len) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	e009      	b.n	80011f2 <_write+0x26>
        ITM_SendChar(ptr[i]);
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	4413      	add	r3, r2
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fd74 	bl	8000cd4 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	3301      	adds	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	dbf1      	blt.n	80011de <_write+0x12>
    }
    return len;
 80011fa:	687b      	ldr	r3, [r7, #4]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <Error_Handler+0x8>

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <HAL_MspInit+0x5c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a14      	ldr	r2, [pc, #80]	@ (800126c <HAL_MspInit+0x5c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_MspInit+0x5c>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <HAL_MspInit+0x5c>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0e      	ldr	r2, [pc, #56]	@ (800126c <HAL_MspInit+0x5c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <HAL_MspInit+0x5c>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_MspInit+0x60>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <HAL_MspInit+0x60>)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000

08001274 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a20      	ldr	r2, [pc, #128]	@ (8001310 <HAL_CAN_MspInit+0x9c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d139      	bne.n	8001308 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <HAL_CAN_MspInit+0xa0>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	4a1e      	ldr	r2, [pc, #120]	@ (8001314 <HAL_CAN_MspInit+0xa0>)
 800129a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800129e:	61d3      	str	r3, [r2, #28]
 80012a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <HAL_CAN_MspInit+0xa0>)
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_CAN_MspInit+0xa0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a18      	ldr	r2, [pc, #96]	@ (8001314 <HAL_CAN_MspInit+0xa0>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <HAL_CAN_MspInit+0xa0>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	480f      	ldr	r0, [pc, #60]	@ (8001318 <HAL_CAN_MspInit+0xa4>)
 80012da:	f001 fa13 	bl	8002704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	4809      	ldr	r0, [pc, #36]	@ (8001318 <HAL_CAN_MspInit+0xa4>)
 80012f4:	f001 fa06 	bl	8002704 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	2015      	movs	r0, #21
 80012fe:	f001 f8fc 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001302:	2015      	movs	r0, #21
 8001304:	f001 f915 	bl	8002532 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001308:	bf00      	nop
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40006400 	.word	0x40006400
 8001314:	40021000 	.word	0x40021000
 8001318:	40010800 	.word	0x40010800

0800131c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a19      	ldr	r2, [pc, #100]	@ (800139c <HAL_I2C_MspInit+0x80>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d12b      	bne.n	8001394 <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <HAL_I2C_MspInit+0x84>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a17      	ldr	r2, [pc, #92]	@ (80013a0 <HAL_I2C_MspInit+0x84>)
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_I2C_MspInit+0x84>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001354:	23c0      	movs	r3, #192	@ 0xc0
 8001356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001358:	2312      	movs	r3, #18
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	480f      	ldr	r0, [pc, #60]	@ (80013a4 <HAL_I2C_MspInit+0x88>)
 8001368:	f001 f9cc 	bl	8002704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <HAL_I2C_MspInit+0x84>)
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <HAL_I2C_MspInit+0x84>)
 8001372:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001376:	61d3      	str	r3, [r2, #28]
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <HAL_I2C_MspInit+0x84>)
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	201f      	movs	r0, #31
 800138a:	f001 f8b6 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800138e:	201f      	movs	r0, #31
 8001390:	f001 f8cf 	bl	8002532 <HAL_NVIC_EnableIRQ>
//    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT);
    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40005400 	.word	0x40005400
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010c00 	.word	0x40010c00

080013a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a3f      	ldr	r2, [pc, #252]	@ (80014c0 <HAL_UART_MspInit+0x118>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d13a      	bne.n	800143e <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013c8:	4b3e      	ldr	r3, [pc, #248]	@ (80014c4 <HAL_UART_MspInit+0x11c>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a3d      	ldr	r2, [pc, #244]	@ (80014c4 <HAL_UART_MspInit+0x11c>)
 80013ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b3b      	ldr	r3, [pc, #236]	@ (80014c4 <HAL_UART_MspInit+0x11c>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b38      	ldr	r3, [pc, #224]	@ (80014c4 <HAL_UART_MspInit+0x11c>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a37      	ldr	r2, [pc, #220]	@ (80014c4 <HAL_UART_MspInit+0x11c>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b35      	ldr	r3, [pc, #212]	@ (80014c4 <HAL_UART_MspInit+0x11c>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 0318 	add.w	r3, r7, #24
 800140a:	4619      	mov	r1, r3
 800140c:	482e      	ldr	r0, [pc, #184]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 800140e:	f001 f979 	bl	8002704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0318 	add.w	r3, r7, #24
 8001424:	4619      	mov	r1, r3
 8001426:	4828      	ldr	r0, [pc, #160]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 8001428:	f001 f96c 	bl	8002704 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	210e      	movs	r1, #14
 8001430:	2025      	movs	r0, #37	@ 0x25
 8001432:	f001 f862 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001436:	2025      	movs	r0, #37	@ 0x25
 8001438:	f001 f87b 	bl	8002532 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800143c:	e03c      	b.n	80014b8 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a22      	ldr	r2, [pc, #136]	@ (80014cc <HAL_UART_MspInit+0x124>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d137      	bne.n	80014b8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001448:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <HAL_UART_MspInit+0x11c>)
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	4a1d      	ldr	r2, [pc, #116]	@ (80014c4 <HAL_UART_MspInit+0x11c>)
 800144e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001452:	61d3      	str	r3, [r2, #28]
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_UART_MspInit+0x11c>)
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <HAL_UART_MspInit+0x11c>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a17      	ldr	r2, [pc, #92]	@ (80014c4 <HAL_UART_MspInit+0x11c>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_UART_MspInit+0x11c>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001478:	2304      	movs	r3, #4
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	4619      	mov	r1, r3
 800148a:	480f      	ldr	r0, [pc, #60]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 800148c:	f001 f93a 	bl	8002704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001490:	2308      	movs	r3, #8
 8001492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 0318 	add.w	r3, r7, #24
 80014a0:	4619      	mov	r1, r3
 80014a2:	4809      	ldr	r0, [pc, #36]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 80014a4:	f001 f92e 	bl	8002704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2026      	movs	r0, #38	@ 0x26
 80014ae:	f001 f824 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014b2:	2026      	movs	r0, #38	@ 0x26
 80014b4:	f001 f83d 	bl	8002532 <HAL_NVIC_EnableIRQ>
}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	@ 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40013800 	.word	0x40013800
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010800 	.word	0x40010800
 80014cc:	40004400 	.word	0x40004400

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <NMI_Handler+0x4>

080014d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <MemManage_Handler+0x4>

080014e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001520:	f000 f944 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  OS_TimeEvt_tick();
 8001524:	f007 fdda 	bl	80090dc <OS_TimeEvt_tick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001530:	4802      	ldr	r0, [pc, #8]	@ (800153c <CAN1_RX1_IRQHandler+0x10>)
 8001532:	f000 fcc9 	bl	8001ec8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000254 	.word	0x20000254

08001540 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <I2C1_EV_IRQHandler+0x10>)
 8001546:	f002 f81f 	bl	8003588 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000027c 	.word	0x2000027c

08001554 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <USART1_IRQHandler+0x10>)
 800155a:	f004 fc01 	bl	8005d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200002d0 	.word	0x200002d0

08001568 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800156c:	4802      	ldr	r0, [pc, #8]	@ (8001578 <USART2_IRQHandler+0x10>)
 800156e:	f004 fbf7 	bl	8005d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000318 	.word	0x20000318

0800157c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return 1;
 8001580:	2301      	movs	r3, #1
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <_kill>:

int _kill(int pid, int sig)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001594:	f009 ff74 	bl	800b480 <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	2216      	movs	r2, #22
 800159c:	601a      	str	r2, [r3, #0]
  return -1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_exit>:

void _exit (int status)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015b2:	f04f 31ff 	mov.w	r1, #4294967295
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffe7 	bl	800158a <_kill>
  while (1) {}    /* Make sure we hang here */
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <_exit+0x12>

080015c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e00a      	b.n	80015e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015d2:	f3af 8000 	nop.w
 80015d6:	4601      	mov	r1, r0
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	60ba      	str	r2, [r7, #8]
 80015de:	b2ca      	uxtb	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbf0      	blt.n	80015d2 <_read+0x12>
  }

  return len;
 80015f0:	687b      	ldr	r3, [r7, #4]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_close>:
  }
  return len;
}

int _close(int file)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001620:	605a      	str	r2, [r3, #4]
  return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <_isatty>:

int _isatty(int file)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
	...

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f009 fef8 	bl	800b480 <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	@ (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20005000 	.word	0x20005000
 80016bc:	00000400 	.word	0x00000400
 80016c0:	200004c8 	.word	0x200004c8
 80016c4:	20001040 	.word	0x20001040

080016c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 80016d4:	f7ff fff8 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d8:	480b      	ldr	r0, [pc, #44]	@ (8001708 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016da:	490c      	ldr	r1, [pc, #48]	@ (800170c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001710 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a09      	ldr	r2, [pc, #36]	@ (8001714 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016f0:	4c09      	ldr	r4, [pc, #36]	@ (8001718 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fe:	f009 fec5 	bl	800b48c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001702:	f7ff fb0d 	bl	8000d20 <main>
  bx lr
 8001706:	4770      	bx	lr
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8001710:	0800e684 	.word	0x0800e684
  ldr r2, =_sbss
 8001714:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8001718:	20001040 	.word	0x20001040

0800171c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC1_2_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <HAL_Init+0x28>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a07      	ldr	r2, [pc, #28]	@ (8001748 <HAL_Init+0x28>)
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001730:	2003      	movs	r0, #3
 8001732:	f000 fed7 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001736:	200f      	movs	r0, #15
 8001738:	f000 f808 	bl	800174c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800173c:	f7ff fd68 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40022000 	.word	0x40022000

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_InitTick+0x54>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_InitTick+0x58>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f000 feef 	bl	800254e <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e00e      	b.n	8001798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d80a      	bhi.n	8001796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001780:	2200      	movs	r2, #0
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f000 feb7 	bl	80024fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800178c:	4a06      	ldr	r2, [pc, #24]	@ (80017a8 <HAL_InitTick+0x5c>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <HAL_IncTick+0x1c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_IncTick+0x20>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a03      	ldr	r2, [pc, #12]	@ (80017cc <HAL_IncTick+0x20>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	20000008 	.word	0x20000008
 80017cc:	200004cc 	.word	0x200004cc

080017d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b02      	ldr	r3, [pc, #8]	@ (80017e0 <HAL_GetTick+0x10>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	200004cc 	.word	0x200004cc

080017e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff fff0 	bl	80017d0 <HAL_GetTick>
 80017f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d005      	beq.n	800180a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_Delay+0x44>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180a:	bf00      	nop
 800180c:	f7ff ffe0 	bl	80017d0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	d8f7      	bhi.n	800180c <HAL_Delay+0x28>
  {
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000008 	.word	0x20000008

0800182c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0ed      	b.n	8001a1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fd12 	bl	8001274 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001860:	f7ff ffb6 	bl	80017d0 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001866:	e012      	b.n	800188e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001868:	f7ff ffb2 	bl	80017d0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b0a      	cmp	r3, #10
 8001874:	d90b      	bls.n	800188e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2205      	movs	r2, #5
 8001886:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0c5      	b.n	8001a1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0e5      	beq.n	8001868 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0202 	bic.w	r2, r2, #2
 80018aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ac:	f7ff ff90 	bl	80017d0 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018b2:	e012      	b.n	80018da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018b4:	f7ff ff8c 	bl	80017d0 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b0a      	cmp	r3, #10
 80018c0:	d90b      	bls.n	80018da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2205      	movs	r2, #5
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e09f      	b.n	8001a1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1e5      	bne.n	80018b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7e1b      	ldrb	r3, [r3, #24]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d108      	bne.n	8001902 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e007      	b.n	8001912 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7e5b      	ldrb	r3, [r3, #25]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d108      	bne.n	800192c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e007      	b.n	800193c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800193a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7e9b      	ldrb	r3, [r3, #26]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d108      	bne.n	8001956 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0220 	orr.w	r2, r2, #32
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e007      	b.n	8001966 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0220 	bic.w	r2, r2, #32
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7edb      	ldrb	r3, [r3, #27]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d108      	bne.n	8001980 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0210 	bic.w	r2, r2, #16
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e007      	b.n	8001990 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0210 	orr.w	r2, r2, #16
 800198e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7f1b      	ldrb	r3, [r3, #28]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0208 	orr.w	r2, r2, #8
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e007      	b.n	80019ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0208 	bic.w	r2, r2, #8
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7f5b      	ldrb	r3, [r3, #29]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d108      	bne.n	80019d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0204 	orr.w	r2, r2, #4
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	e007      	b.n	80019e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0204 	bic.w	r2, r2, #4
 80019e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	ea42 0103 	orr.w	r1, r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	1e5a      	subs	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b087      	sub	sp, #28
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a38:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a3a:	7cfb      	ldrb	r3, [r7, #19]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d003      	beq.n	8001a48 <HAL_CAN_ConfigFilter+0x26>
 8001a40:	7cfb      	ldrb	r3, [r7, #19]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	f040 80aa 	bne.w	8001b9c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a4e:	f043 0201 	orr.w	r2, r3, #1
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f003 031f 	and.w	r3, r3, #31
 8001a60:	2201      	movs	r2, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d123      	bne.n	8001aca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001aa4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3248      	adds	r2, #72	@ 0x48
 8001aaa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001abe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ac0:	6979      	ldr	r1, [r7, #20]
 8001ac2:	3348      	adds	r3, #72	@ 0x48
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d122      	bne.n	8001b18 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001af2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3248      	adds	r2, #72	@ 0x48
 8001af8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b0e:	6979      	ldr	r1, [r7, #20]
 8001b10:	3348      	adds	r3, #72	@ 0x48
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d109      	bne.n	8001b34 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001b32:	e007      	b.n	8001b44 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001b5e:	e007      	b.n	8001b70 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	431a      	orrs	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b8e:	f023 0201 	bic.w	r2, r3, #1
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e006      	b.n	8001baa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	371c      	adds	r7, #28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d12e      	bne.n	8001c26 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001be0:	f7ff fdf6 	bl	80017d0 <HAL_GetTick>
 8001be4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001be6:	e012      	b.n	8001c0e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001be8:	f7ff fdf2 	bl	80017d0 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b0a      	cmp	r3, #10
 8001bf4:	d90b      	bls.n	8001c0e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2205      	movs	r2, #5
 8001c06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e012      	b.n	8001c34 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1e5      	bne.n	8001be8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e006      	b.n	8001c34 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c50:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d003      	beq.n	8001c60 <HAL_CAN_GetRxMessage+0x24>
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	f040 8103 	bne.w	8001e66 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10e      	bne.n	8001c84 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d116      	bne.n	8001ca2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0f7      	b.n	8001e74 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d107      	bne.n	8001ca2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0e8      	b.n	8001e74 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	331b      	adds	r3, #27
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	4413      	add	r3, r2
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0204 	and.w	r2, r3, #4
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10c      	bne.n	8001cda <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	331b      	adds	r3, #27
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	4413      	add	r3, r2
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	0d5b      	lsrs	r3, r3, #21
 8001cd0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e00b      	b.n	8001cf2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	331b      	adds	r3, #27
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	4413      	add	r3, r2
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	08db      	lsrs	r3, r3, #3
 8001cea:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	331b      	adds	r3, #27
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4413      	add	r3, r2
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0202 	and.w	r2, r3, #2
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	331b      	adds	r3, #27
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2208      	movs	r2, #8
 8001d24:	611a      	str	r2, [r3, #16]
 8001d26:	e00b      	b.n	8001d40 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	331b      	adds	r3, #27
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	4413      	add	r3, r2
 8001d34:	3304      	adds	r3, #4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 020f 	and.w	r2, r3, #15
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	331b      	adds	r3, #27
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	331b      	adds	r3, #27
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	4413      	add	r3, r2
 8001d64:	3304      	adds	r3, #4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0c1b      	lsrs	r3, r3, #16
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	0a1a      	lsrs	r2, r3, #8
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	0c1a      	lsrs	r2, r3, #16
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	3302      	adds	r3, #2
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0e1a      	lsrs	r2, r3, #24
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	3303      	adds	r3, #3
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	3304      	adds	r3, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0a1a      	lsrs	r2, r3, #8
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	3305      	adds	r3, #5
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	0c1a      	lsrs	r2, r3, #16
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	3306      	adds	r3, #6
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0e1a      	lsrs	r2, r3, #24
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	3307      	adds	r3, #7
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d108      	bne.n	8001e52 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0220 	orr.w	r2, r2, #32
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	e007      	b.n	8001e62 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0220 	orr.w	r2, r2, #32
 8001e60:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e006      	b.n	8001e74 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
  }
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d002      	beq.n	8001e9c <HAL_CAN_ActivateNotification+0x1e>
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d109      	bne.n	8001eb0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6959      	ldr	r1, [r3, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	e006      	b.n	8001ebe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
  }
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	@ 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d07c      	beq.n	8002008 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d023      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f983 	bl	8002236 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f30:	e016      	b.n	8001f60 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f44:	e00c      	b.n	8001f60 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f58:	e002      	b.n	8001f60 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f986 	bl	800226c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d024      	beq.n	8001fb4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f962 	bl	8002248 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f84:	e016      	b.n	8001fb4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f98:	e00c      	b.n	8001fb4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fac:	e002      	b.n	8001fb4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f965 	bl	800227e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d024      	beq.n	8002008 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f941 	bl	800225a <HAL_CAN_TxMailbox2CompleteCallback>
 8001fd8:	e016      	b.n	8002008 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fec:	e00c      	b.n	8002008 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d004      	beq.n	8002002 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002000:	e002      	b.n	8002008 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f944 	bl	8002290 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00c      	beq.n	800202c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2210      	movs	r2, #16
 800202a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2208      	movs	r2, #8
 8002046:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f933 	bl	80022b4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d009      	beq.n	800206c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f91b 	bl	80022a2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2210      	movs	r2, #16
 800208e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2208      	movs	r2, #8
 80020aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f90a 	bl	80022c6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d009      	beq.n	80020d0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff f86c 	bl	80011a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2210      	movs	r2, #16
 80020ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f8f3 	bl	80022d8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00b      	beq.n	8002114 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2208      	movs	r2, #8
 800210c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8eb 	bl	80022ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d07b      	beq.n	8002216 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d072      	beq.n	800220e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d008      	beq.n	8002144 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	f043 0302 	orr.w	r3, r3, #2
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002182:	2b00      	cmp	r3, #0
 8002184:	d043      	beq.n	800220e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800218c:	2b00      	cmp	r3, #0
 800218e:	d03e      	beq.n	800220e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002196:	2b60      	cmp	r3, #96	@ 0x60
 8002198:	d02b      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x32a>
 800219a:	2b60      	cmp	r3, #96	@ 0x60
 800219c:	d82e      	bhi.n	80021fc <HAL_CAN_IRQHandler+0x334>
 800219e:	2b50      	cmp	r3, #80	@ 0x50
 80021a0:	d022      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x320>
 80021a2:	2b50      	cmp	r3, #80	@ 0x50
 80021a4:	d82a      	bhi.n	80021fc <HAL_CAN_IRQHandler+0x334>
 80021a6:	2b40      	cmp	r3, #64	@ 0x40
 80021a8:	d019      	beq.n	80021de <HAL_CAN_IRQHandler+0x316>
 80021aa:	2b40      	cmp	r3, #64	@ 0x40
 80021ac:	d826      	bhi.n	80021fc <HAL_CAN_IRQHandler+0x334>
 80021ae:	2b30      	cmp	r3, #48	@ 0x30
 80021b0:	d010      	beq.n	80021d4 <HAL_CAN_IRQHandler+0x30c>
 80021b2:	2b30      	cmp	r3, #48	@ 0x30
 80021b4:	d822      	bhi.n	80021fc <HAL_CAN_IRQHandler+0x334>
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d002      	beq.n	80021c0 <HAL_CAN_IRQHandler+0x2f8>
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	d005      	beq.n	80021ca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021be:	e01d      	b.n	80021fc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	f043 0308 	orr.w	r3, r3, #8
 80021c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021c8:	e019      	b.n	80021fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	f043 0310 	orr.w	r3, r3, #16
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021d2:	e014      	b.n	80021fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	f043 0320 	orr.w	r3, r3, #32
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021dc:	e00f      	b.n	80021fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021e6:	e00a      	b.n	80021fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021f0:	e005      	b.n	80021fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021fa:	e000      	b.n	80021fe <HAL_CAN_IRQHandler+0x336>
            break;
 80021fc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800220c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2204      	movs	r2, #4
 8002214:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f867 	bl	80022fc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800222e:	bf00      	nop
 8002230:	3728      	adds	r7, #40	@ 0x28
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
	...

08002310 <__NVIC_SetPriorityGrouping>:
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002338:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800233c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_GetPriorityGrouping>:
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <__NVIC_GetPriorityGrouping+0x18>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0307 	and.w	r3, r3, #7
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_EnableIRQ>:
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0b      	blt.n	800239e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4906      	ldr	r1, [pc, #24]	@ (80023a8 <__NVIC_EnableIRQ+0x34>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100

080023ac <__NVIC_SetPendingIRQ>:
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db0c      	blt.n	80023d8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4907      	ldr	r1, [pc, #28]	@ (80023e4 <__NVIC_SetPendingIRQ+0x38>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2001      	movs	r0, #1
 80023ce:	fa00 f202 	lsl.w	r2, r0, r2
 80023d2:	3340      	adds	r3, #64	@ 0x40
 80023d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <__NVIC_SetPriority>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	db0a      	blt.n	8002412 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	490c      	ldr	r1, [pc, #48]	@ (8002434 <__NVIC_SetPriority+0x4c>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	440b      	add	r3, r1
 800240c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002410:	e00a      	b.n	8002428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4908      	ldr	r1, [pc, #32]	@ (8002438 <__NVIC_SetPriority+0x50>)
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	3b04      	subs	r3, #4
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	440b      	add	r3, r1
 8002426:	761a      	strb	r2, [r3, #24]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000e100 	.word	0xe000e100
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <NVIC_EncodePriority>:
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	@ 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f1c3 0307 	rsb	r3, r3, #7
 8002456:	2b04      	cmp	r3, #4
 8002458:	bf28      	it	cs
 800245a:	2304      	movcs	r3, #4
 800245c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3304      	adds	r3, #4
 8002462:	2b06      	cmp	r3, #6
 8002464:	d902      	bls.n	800246c <NVIC_EncodePriority+0x30>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3b03      	subs	r3, #3
 800246a:	e000      	b.n	800246e <NVIC_EncodePriority+0x32>
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	f04f 32ff 	mov.w	r2, #4294967295
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	401a      	ands	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	43d9      	mvns	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	4313      	orrs	r3, r2
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	@ 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <SysTick_Config>:
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f7ff ff90 	bl	80023e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff0f 	bl	8002310 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff24 	bl	8002358 <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff90 	bl	800243c <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5f 	bl	80023e8 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff17 	bl	8002374 <__NVIC_EnableIRQ>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffa2 	bl	80024a0 <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff19 	bl	80023ac <__NVIC_SetPendingIRQ>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002582:	b480      	push	{r7}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d008      	beq.n	80025ac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2204      	movs	r2, #4
 800259e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e020      	b.n	80025ee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 020e 	bic.w	r2, r2, #14
 80025ba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f202 	lsl.w	r2, r1, r2
 80025da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d005      	beq.n	800261c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2204      	movs	r2, #4
 8002614:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
 800261a:	e051      	b.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 020e 	bic.w	r2, r2, #14
 800262a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a22      	ldr	r2, [pc, #136]	@ (80026cc <HAL_DMA_Abort_IT+0xd4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d029      	beq.n	800269a <HAL_DMA_Abort_IT+0xa2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a21      	ldr	r2, [pc, #132]	@ (80026d0 <HAL_DMA_Abort_IT+0xd8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d022      	beq.n	8002696 <HAL_DMA_Abort_IT+0x9e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1f      	ldr	r2, [pc, #124]	@ (80026d4 <HAL_DMA_Abort_IT+0xdc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01a      	beq.n	8002690 <HAL_DMA_Abort_IT+0x98>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1e      	ldr	r2, [pc, #120]	@ (80026d8 <HAL_DMA_Abort_IT+0xe0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d012      	beq.n	800268a <HAL_DMA_Abort_IT+0x92>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1c      	ldr	r2, [pc, #112]	@ (80026dc <HAL_DMA_Abort_IT+0xe4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00a      	beq.n	8002684 <HAL_DMA_Abort_IT+0x8c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1b      	ldr	r2, [pc, #108]	@ (80026e0 <HAL_DMA_Abort_IT+0xe8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d102      	bne.n	800267e <HAL_DMA_Abort_IT+0x86>
 8002678:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800267c:	e00e      	b.n	800269c <HAL_DMA_Abort_IT+0xa4>
 800267e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002682:	e00b      	b.n	800269c <HAL_DMA_Abort_IT+0xa4>
 8002684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002688:	e008      	b.n	800269c <HAL_DMA_Abort_IT+0xa4>
 800268a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800268e:	e005      	b.n	800269c <HAL_DMA_Abort_IT+0xa4>
 8002690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002694:	e002      	b.n	800269c <HAL_DMA_Abort_IT+0xa4>
 8002696:	2310      	movs	r3, #16
 8002698:	e000      	b.n	800269c <HAL_DMA_Abort_IT+0xa4>
 800269a:	2301      	movs	r3, #1
 800269c:	4a11      	ldr	r2, [pc, #68]	@ (80026e4 <HAL_DMA_Abort_IT+0xec>)
 800269e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
    } 
  }
  return status;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40020008 	.word	0x40020008
 80026d0:	4002001c 	.word	0x4002001c
 80026d4:	40020030 	.word	0x40020030
 80026d8:	40020044 	.word	0x40020044
 80026dc:	40020058 	.word	0x40020058
 80026e0:	4002006c 	.word	0x4002006c
 80026e4:	40020000 	.word	0x40020000

080026e8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026f6:	b2db      	uxtb	r3, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
	...

08002704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002704:	b480      	push	{r7}
 8002706:	b08b      	sub	sp, #44	@ 0x2c
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002716:	e169      	b.n	80029ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002718:	2201      	movs	r2, #1
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	429a      	cmp	r2, r3
 8002732:	f040 8158 	bne.w	80029e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a9a      	ldr	r2, [pc, #616]	@ (80029a4 <HAL_GPIO_Init+0x2a0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d05e      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002740:	4a98      	ldr	r2, [pc, #608]	@ (80029a4 <HAL_GPIO_Init+0x2a0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d875      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002746:	4a98      	ldr	r2, [pc, #608]	@ (80029a8 <HAL_GPIO_Init+0x2a4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d058      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 800274c:	4a96      	ldr	r2, [pc, #600]	@ (80029a8 <HAL_GPIO_Init+0x2a4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d86f      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002752:	4a96      	ldr	r2, [pc, #600]	@ (80029ac <HAL_GPIO_Init+0x2a8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d052      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002758:	4a94      	ldr	r2, [pc, #592]	@ (80029ac <HAL_GPIO_Init+0x2a8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d869      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800275e:	4a94      	ldr	r2, [pc, #592]	@ (80029b0 <HAL_GPIO_Init+0x2ac>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d04c      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002764:	4a92      	ldr	r2, [pc, #584]	@ (80029b0 <HAL_GPIO_Init+0x2ac>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d863      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800276a:	4a92      	ldr	r2, [pc, #584]	@ (80029b4 <HAL_GPIO_Init+0x2b0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d046      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002770:	4a90      	ldr	r2, [pc, #576]	@ (80029b4 <HAL_GPIO_Init+0x2b0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d85d      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002776:	2b12      	cmp	r3, #18
 8002778:	d82a      	bhi.n	80027d0 <HAL_GPIO_Init+0xcc>
 800277a:	2b12      	cmp	r3, #18
 800277c:	d859      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800277e:	a201      	add	r2, pc, #4	@ (adr r2, 8002784 <HAL_GPIO_Init+0x80>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	080027ff 	.word	0x080027ff
 8002788:	080027d9 	.word	0x080027d9
 800278c:	080027eb 	.word	0x080027eb
 8002790:	0800282d 	.word	0x0800282d
 8002794:	08002833 	.word	0x08002833
 8002798:	08002833 	.word	0x08002833
 800279c:	08002833 	.word	0x08002833
 80027a0:	08002833 	.word	0x08002833
 80027a4:	08002833 	.word	0x08002833
 80027a8:	08002833 	.word	0x08002833
 80027ac:	08002833 	.word	0x08002833
 80027b0:	08002833 	.word	0x08002833
 80027b4:	08002833 	.word	0x08002833
 80027b8:	08002833 	.word	0x08002833
 80027bc:	08002833 	.word	0x08002833
 80027c0:	08002833 	.word	0x08002833
 80027c4:	08002833 	.word	0x08002833
 80027c8:	080027e1 	.word	0x080027e1
 80027cc:	080027f5 	.word	0x080027f5
 80027d0:	4a79      	ldr	r2, [pc, #484]	@ (80029b8 <HAL_GPIO_Init+0x2b4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027d6:	e02c      	b.n	8002832 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	623b      	str	r3, [r7, #32]
          break;
 80027de:	e029      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	3304      	adds	r3, #4
 80027e6:	623b      	str	r3, [r7, #32]
          break;
 80027e8:	e024      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	3308      	adds	r3, #8
 80027f0:	623b      	str	r3, [r7, #32]
          break;
 80027f2:	e01f      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	330c      	adds	r3, #12
 80027fa:	623b      	str	r3, [r7, #32]
          break;
 80027fc:	e01a      	b.n	8002834 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002806:	2304      	movs	r3, #4
 8002808:	623b      	str	r3, [r7, #32]
          break;
 800280a:	e013      	b.n	8002834 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d105      	bne.n	8002820 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002814:	2308      	movs	r3, #8
 8002816:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	611a      	str	r2, [r3, #16]
          break;
 800281e:	e009      	b.n	8002834 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002820:	2308      	movs	r3, #8
 8002822:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	615a      	str	r2, [r3, #20]
          break;
 800282a:	e003      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
          break;
 8002830:	e000      	b.n	8002834 <HAL_GPIO_Init+0x130>
          break;
 8002832:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2bff      	cmp	r3, #255	@ 0xff
 8002838:	d801      	bhi.n	800283e <HAL_GPIO_Init+0x13a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	e001      	b.n	8002842 <HAL_GPIO_Init+0x13e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2bff      	cmp	r3, #255	@ 0xff
 8002848:	d802      	bhi.n	8002850 <HAL_GPIO_Init+0x14c>
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	e002      	b.n	8002856 <HAL_GPIO_Init+0x152>
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	3b08      	subs	r3, #8
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	210f      	movs	r1, #15
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	401a      	ands	r2, r3
 8002868:	6a39      	ldr	r1, [r7, #32]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	431a      	orrs	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80b1 	beq.w	80029e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002884:	4b4d      	ldr	r3, [pc, #308]	@ (80029bc <HAL_GPIO_Init+0x2b8>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4a4c      	ldr	r2, [pc, #304]	@ (80029bc <HAL_GPIO_Init+0x2b8>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6193      	str	r3, [r2, #24]
 8002890:	4b4a      	ldr	r3, [pc, #296]	@ (80029bc <HAL_GPIO_Init+0x2b8>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800289c:	4a48      	ldr	r2, [pc, #288]	@ (80029c0 <HAL_GPIO_Init+0x2bc>)
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a40      	ldr	r2, [pc, #256]	@ (80029c4 <HAL_GPIO_Init+0x2c0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d013      	beq.n	80028f0 <HAL_GPIO_Init+0x1ec>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a3f      	ldr	r2, [pc, #252]	@ (80029c8 <HAL_GPIO_Init+0x2c4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00d      	beq.n	80028ec <HAL_GPIO_Init+0x1e8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3e      	ldr	r2, [pc, #248]	@ (80029cc <HAL_GPIO_Init+0x2c8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d007      	beq.n	80028e8 <HAL_GPIO_Init+0x1e4>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a3d      	ldr	r2, [pc, #244]	@ (80029d0 <HAL_GPIO_Init+0x2cc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d101      	bne.n	80028e4 <HAL_GPIO_Init+0x1e0>
 80028e0:	2303      	movs	r3, #3
 80028e2:	e006      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028e4:	2304      	movs	r3, #4
 80028e6:	e004      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e002      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028f0:	2300      	movs	r3, #0
 80028f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f4:	f002 0203 	and.w	r2, r2, #3
 80028f8:	0092      	lsls	r2, r2, #2
 80028fa:	4093      	lsls	r3, r2
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002902:	492f      	ldr	r1, [pc, #188]	@ (80029c0 <HAL_GPIO_Init+0x2bc>)
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d006      	beq.n	800292a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800291c:	4b2d      	ldr	r3, [pc, #180]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	492c      	ldr	r1, [pc, #176]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	608b      	str	r3, [r1, #8]
 8002928:	e006      	b.n	8002938 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800292a:	4b2a      	ldr	r3, [pc, #168]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	43db      	mvns	r3, r3
 8002932:	4928      	ldr	r1, [pc, #160]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002934:	4013      	ands	r3, r2
 8002936:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002944:	4b23      	ldr	r3, [pc, #140]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	4922      	ldr	r1, [pc, #136]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	60cb      	str	r3, [r1, #12]
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002952:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	43db      	mvns	r3, r3
 800295a:	491e      	ldr	r1, [pc, #120]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800295c:	4013      	ands	r3, r2
 800295e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800296c:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4918      	ldr	r1, [pc, #96]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800297a:	4b16      	ldr	r3, [pc, #88]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	43db      	mvns	r3, r3
 8002982:	4914      	ldr	r1, [pc, #80]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002984:	4013      	ands	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d021      	beq.n	80029d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002994:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	490e      	ldr	r1, [pc, #56]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]
 80029a0:	e021      	b.n	80029e6 <HAL_GPIO_Init+0x2e2>
 80029a2:	bf00      	nop
 80029a4:	10320000 	.word	0x10320000
 80029a8:	10310000 	.word	0x10310000
 80029ac:	10220000 	.word	0x10220000
 80029b0:	10210000 	.word	0x10210000
 80029b4:	10120000 	.word	0x10120000
 80029b8:	10110000 	.word	0x10110000
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40010800 	.word	0x40010800
 80029c8:	40010c00 	.word	0x40010c00
 80029cc:	40011000 	.word	0x40011000
 80029d0:	40011400 	.word	0x40011400
 80029d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_GPIO_Init+0x304>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	43db      	mvns	r3, r3
 80029e0:	4909      	ldr	r1, [pc, #36]	@ (8002a08 <HAL_GPIO_Init+0x304>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	3301      	adds	r3, #1
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f47f ae8e 	bne.w	8002718 <HAL_GPIO_Init+0x14>
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	372c      	adds	r7, #44	@ 0x2c
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	40010400 	.word	0x40010400

08002a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a1c:	787b      	ldrb	r3, [r7, #1]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a28:	e003      	b.n	8002a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a2a:	887b      	ldrh	r3, [r7, #2]
 8002a2c:	041a      	lsls	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e12b      	b.n	8002ca6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe fc5a 	bl	800131c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2224      	movs	r2, #36	@ 0x24
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002aa0:	f002 ffe0 	bl	8005a64 <HAL_RCC_GetPCLK1Freq>
 8002aa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4a81      	ldr	r2, [pc, #516]	@ (8002cb0 <HAL_I2C_Init+0x274>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d807      	bhi.n	8002ac0 <HAL_I2C_Init+0x84>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a80      	ldr	r2, [pc, #512]	@ (8002cb4 <HAL_I2C_Init+0x278>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	bf94      	ite	ls
 8002ab8:	2301      	movls	r3, #1
 8002aba:	2300      	movhi	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e006      	b.n	8002ace <HAL_I2C_Init+0x92>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a7d      	ldr	r2, [pc, #500]	@ (8002cb8 <HAL_I2C_Init+0x27c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	bf94      	ite	ls
 8002ac8:	2301      	movls	r3, #1
 8002aca:	2300      	movhi	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e0e7      	b.n	8002ca6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a78      	ldr	r2, [pc, #480]	@ (8002cbc <HAL_I2C_Init+0x280>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	0c9b      	lsrs	r3, r3, #18
 8002ae0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4a6a      	ldr	r2, [pc, #424]	@ (8002cb0 <HAL_I2C_Init+0x274>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d802      	bhi.n	8002b10 <HAL_I2C_Init+0xd4>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	e009      	b.n	8002b24 <HAL_I2C_Init+0xe8>
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b16:	fb02 f303 	mul.w	r3, r2, r3
 8002b1a:	4a69      	ldr	r2, [pc, #420]	@ (8002cc0 <HAL_I2C_Init+0x284>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	3301      	adds	r3, #1
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	495c      	ldr	r1, [pc, #368]	@ (8002cb0 <HAL_I2C_Init+0x274>)
 8002b40:	428b      	cmp	r3, r1
 8002b42:	d819      	bhi.n	8002b78 <HAL_I2C_Init+0x13c>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1e59      	subs	r1, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b52:	1c59      	adds	r1, r3, #1
 8002b54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b58:	400b      	ands	r3, r1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_I2C_Init+0x138>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1e59      	subs	r1, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b72:	e051      	b.n	8002c18 <HAL_I2C_Init+0x1dc>
 8002b74:	2304      	movs	r3, #4
 8002b76:	e04f      	b.n	8002c18 <HAL_I2C_Init+0x1dc>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d111      	bne.n	8002ba4 <HAL_I2C_Init+0x168>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	440b      	add	r3, r1
 8002b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	e012      	b.n	8002bca <HAL_I2C_Init+0x18e>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	0099      	lsls	r1, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_I2C_Init+0x196>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e022      	b.n	8002c18 <HAL_I2C_Init+0x1dc>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_I2C_Init+0x1bc>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1e58      	subs	r0, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	440b      	add	r3, r1
 8002be8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bf6:	e00f      	b.n	8002c18 <HAL_I2C_Init+0x1dc>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e58      	subs	r0, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	0099      	lsls	r1, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	6809      	ldr	r1, [r1, #0]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6911      	ldr	r1, [r2, #16]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68d2      	ldr	r2, [r2, #12]
 8002c52:	4311      	orrs	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	000186a0 	.word	0x000186a0
 8002cb4:	001e847f 	.word	0x001e847f
 8002cb8:	003d08ff 	.word	0x003d08ff
 8002cbc:	431bde83 	.word	0x431bde83
 8002cc0:	10624dd3 	.word	0x10624dd3

08002cc4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd6:	2b80      	cmp	r3, #128	@ 0x80
 8002cd8:	d103      	bne.n	8002ce2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	611a      	str	r2, [r3, #16]
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08c      	sub	sp, #48	@ 0x30
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	817b      	strh	r3, [r7, #10]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	813b      	strh	r3, [r7, #8]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d0a:	f7fe fd61 	bl	80017d0 <HAL_GetTick>
 8002d0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	f040 8250 	bne.w	80031be <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2319      	movs	r3, #25
 8002d24:	2201      	movs	r2, #1
 8002d26:	4982      	ldr	r1, [pc, #520]	@ (8002f30 <HAL_I2C_Mem_Read+0x244>)
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f002 f897 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
 8002d36:	e243      	b.n	80031c0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_I2C_Mem_Read+0x5a>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e23c      	b.n	80031c0 <HAL_I2C_Mem_Read+0x4d4>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d007      	beq.n	8002d6c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2222      	movs	r2, #34	@ 0x22
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2240      	movs	r2, #64	@ 0x40
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a62      	ldr	r2, [pc, #392]	@ (8002f34 <HAL_I2C_Mem_Read+0x248>)
 8002dac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dae:	88f8      	ldrh	r0, [r7, #6]
 8002db0:	893a      	ldrh	r2, [r7, #8]
 8002db2:	8979      	ldrh	r1, [r7, #10]
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f001 febc 	bl	8004b3c <I2C_RequestMemoryRead>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e1f8      	b.n	80031c0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d113      	bne.n	8002dfe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e1cc      	b.n	8003198 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d11e      	bne.n	8002e44 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e16:	b672      	cpsid	i
}
 8002e18:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e40:	b662      	cpsie	i
}
 8002e42:	e035      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d11e      	bne.n	8002e8a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e5c:	b672      	cpsid	i
}
 8002e5e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e86:	b662      	cpsie	i
}
 8002e88:	e012      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e98:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002eb0:	e172      	b.n	8003198 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	f200 811f 	bhi.w	80030fa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d123      	bne.n	8002f0c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f002 f95b 	bl	8005184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e173      	b.n	80031c0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f0a:	e145      	b.n	8003198 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d152      	bne.n	8002fba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	4906      	ldr	r1, [pc, #24]	@ (8002f38 <HAL_I2C_Mem_Read+0x24c>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f001 ff9c 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e148      	b.n	80031c0 <HAL_I2C_Mem_Read+0x4d4>
 8002f2e:	bf00      	nop
 8002f30:	00100002 	.word	0x00100002
 8002f34:	ffff0000 	.word	0xffff0000
 8002f38:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f3c:	b672      	cpsid	i
}
 8002f3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f82:	b662      	cpsie	i
}
 8002f84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fb8:	e0ee      	b.n	8003198 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	4981      	ldr	r1, [pc, #516]	@ (80031c8 <HAL_I2C_Mem_Read+0x4dc>)
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f001 ff49 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0f5      	b.n	80031c0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe4:	b672      	cpsid	i
}
 8002fe6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800301a:	4b6c      	ldr	r3, [pc, #432]	@ (80031cc <HAL_I2C_Mem_Read+0x4e0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	08db      	lsrs	r3, r3, #3
 8003020:	4a6b      	ldr	r2, [pc, #428]	@ (80031d0 <HAL_I2C_Mem_Read+0x4e4>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	0a1a      	lsrs	r2, r3, #8
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00da      	lsls	r2, r3, #3
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	3b01      	subs	r3, #1
 8003038:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d118      	bne.n	8003072 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	f043 0220 	orr.w	r2, r3, #32
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003062:	b662      	cpsie	i
}
 8003064:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0a6      	b.n	80031c0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b04      	cmp	r3, #4
 800307e:	d1d9      	bne.n	8003034 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800308e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030c2:	b662      	cpsie	i
}
 80030c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030f8:	e04e      	b.n	8003198 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f002 f840 	bl	8005184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e058      	b.n	80031c0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d124      	bne.n	8003198 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003152:	2b03      	cmp	r3, #3
 8003154:	d107      	bne.n	8003166 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003164:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319c:	2b00      	cmp	r3, #0
 800319e:	f47f ae88 	bne.w	8002eb2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e000      	b.n	80031c0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80031be:	2302      	movs	r3, #2
  }
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3728      	adds	r7, #40	@ 0x28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	00010004 	.word	0x00010004
 80031cc:	20000000 	.word	0x20000000
 80031d0:	14f8b589 	.word	0x14f8b589

080031d4 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	4608      	mov	r0, r1
 80031de:	4611      	mov	r1, r2
 80031e0:	461a      	mov	r2, r3
 80031e2:	4603      	mov	r3, r0
 80031e4:	817b      	strh	r3, [r7, #10]
 80031e6:	460b      	mov	r3, r1
 80031e8:	813b      	strh	r3, [r7, #8]
 80031ea:	4613      	mov	r3, r2
 80031ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	f040 808a 	bne.w	8003314 <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003200:	4b47      	ldr	r3, [pc, #284]	@ (8003320 <HAL_I2C_Mem_Write_IT+0x14c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	08db      	lsrs	r3, r3, #3
 8003206:	4a47      	ldr	r2, [pc, #284]	@ (8003324 <HAL_I2C_Mem_Write_IT+0x150>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	0a1a      	lsrs	r2, r3, #8
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009a      	lsls	r2, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	3b01      	subs	r3, #1
 800321e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d112      	bne.n	800324c <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
 800324a:	e064      	b.n	8003316 <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d0df      	beq.n	800321a <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_I2C_Mem_Write_IT+0x94>
 8003264:	2302      	movs	r3, #2
 8003266:	e056      	b.n	8003316 <HAL_I2C_Mem_Write_IT+0x142>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d007      	beq.n	800328e <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0201 	orr.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800329c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2221      	movs	r2, #33	@ 0x21
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2240      	movs	r2, #64	@ 0x40
 80032aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a3a      	ldr	r2, [r7, #32]
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a16      	ldr	r2, [pc, #88]	@ (8003328 <HAL_I2C_Mem_Write_IT+0x154>)
 80032ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80032d0:	897a      	ldrh	r2, [r7, #10]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80032d6:	893a      	ldrh	r2, [r7, #8]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032f6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800330e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8003314:	2302      	movs	r3, #2
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	20000000 	.word	0x20000000
 8003324:	14f8b589 	.word	0x14f8b589
 8003328:	ffff0000 	.word	0xffff0000

0800332c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	@ 0x28
 8003330:	af02      	add	r7, sp, #8
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	460b      	mov	r3, r1
 800333a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800333c:	f7fe fa48 	bl	80017d0 <HAL_GetTick>
 8003340:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b20      	cmp	r3, #32
 8003350:	f040 8111 	bne.w	8003576 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2319      	movs	r3, #25
 800335a:	2201      	movs	r2, #1
 800335c:	4988      	ldr	r1, [pc, #544]	@ (8003580 <HAL_I2C_IsDeviceReady+0x254>)
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f001 fd7c 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800336a:	2302      	movs	r3, #2
 800336c:	e104      	b.n	8003578 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_I2C_IsDeviceReady+0x50>
 8003378:	2302      	movs	r3, #2
 800337a:	e0fd      	b.n	8003578 <HAL_I2C_IsDeviceReady+0x24c>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	d007      	beq.n	80033a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0201 	orr.w	r2, r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2224      	movs	r2, #36	@ 0x24
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a70      	ldr	r2, [pc, #448]	@ (8003584 <HAL_I2C_IsDeviceReady+0x258>)
 80033c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2200      	movs	r2, #0
 80033de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f001 fd3a 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00d      	beq.n	800340a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033fc:	d103      	bne.n	8003406 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003404:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e0b6      	b.n	8003578 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800340a:	897b      	ldrh	r3, [r7, #10]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003418:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800341a:	f7fe f9d9 	bl	80017d0 <HAL_GetTick>
 800341e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b02      	cmp	r3, #2
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003444:	bf0c      	ite	eq
 8003446:	2301      	moveq	r3, #1
 8003448:	2300      	movne	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800344e:	e025      	b.n	800349c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003450:	f7fe f9be 	bl	80017d0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d302      	bcc.n	8003466 <HAL_I2C_IsDeviceReady+0x13a>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d103      	bne.n	800346e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	22a0      	movs	r2, #160	@ 0xa0
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b02      	cmp	r3, #2
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80034a6:	d005      	beq.n	80034b4 <HAL_I2C_IsDeviceReady+0x188>
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <HAL_I2C_IsDeviceReady+0x188>
 80034ae:	7dbb      	ldrb	r3, [r7, #22]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0cd      	beq.n	8003450 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d129      	bne.n	800351e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	2319      	movs	r3, #25
 80034f6:	2201      	movs	r2, #1
 80034f8:	4921      	ldr	r1, [pc, #132]	@ (8003580 <HAL_I2C_IsDeviceReady+0x254>)
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f001 fcae 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e036      	b.n	8003578 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	e02c      	b.n	8003578 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800352c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003536:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2319      	movs	r3, #25
 800353e:	2201      	movs	r2, #1
 8003540:	490f      	ldr	r1, [pc, #60]	@ (8003580 <HAL_I2C_IsDeviceReady+0x254>)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f001 fc8a 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e012      	b.n	8003578 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	3301      	adds	r3, #1
 8003556:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	429a      	cmp	r2, r3
 800355e:	f4ff af32 	bcc.w	80033c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003576:	2302      	movs	r3, #2
  }
}
 8003578:	4618      	mov	r0, r3
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	00100002 	.word	0x00100002
 8003584:	ffff0000 	.word	0xffff0000

08003588 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d003      	beq.n	80035c0 <HAL_I2C_EV_IRQHandler+0x38>
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	2b40      	cmp	r3, #64	@ 0x40
 80035bc:	f040 80c1 	bne.w	8003742 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10d      	bne.n	80035f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80035e0:	d003      	beq.n	80035ea <HAL_I2C_EV_IRQHandler+0x62>
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_EV_IRQHandler+0x66>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_I2C_EV_IRQHandler+0x68>
 80035ee:	2300      	movs	r3, #0
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	f000 8132 	beq.w	800385a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00c      	beq.n	800361a <HAL_I2C_EV_IRQHandler+0x92>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	0a5b      	lsrs	r3, r3, #9
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f001 fe44 	bl	800529a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fce1 	bl	8003fda <I2C_Master_SB>
 8003618:	e092      	b.n	8003740 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	08db      	lsrs	r3, r3, #3
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_I2C_EV_IRQHandler+0xb2>
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	0a5b      	lsrs	r3, r3, #9
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fd56 	bl	80040e4 <I2C_Master_ADD10>
 8003638:	e082      	b.n	8003740 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_I2C_EV_IRQHandler+0xd2>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	0a5b      	lsrs	r3, r3, #9
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fd6f 	bl	8004136 <I2C_Master_ADDR>
 8003658:	e072      	b.n	8003740 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	089b      	lsrs	r3, r3, #2
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d03b      	beq.n	80036de <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003674:	f000 80f3 	beq.w	800385e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	09db      	lsrs	r3, r3, #7
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00f      	beq.n	80036a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	0a9b      	lsrs	r3, r3, #10
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d009      	beq.n	80036a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	089b      	lsrs	r3, r3, #2
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d103      	bne.n	80036a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f939 	bl	8003914 <I2C_MasterTransmit_TXE>
 80036a2:	e04d      	b.n	8003740 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80d6 	beq.w	800385e <HAL_I2C_EV_IRQHandler+0x2d6>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	0a5b      	lsrs	r3, r3, #9
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80cf 	beq.w	800385e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80036c0:	7bbb      	ldrb	r3, [r7, #14]
 80036c2:	2b21      	cmp	r3, #33	@ 0x21
 80036c4:	d103      	bne.n	80036ce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f9c0 	bl	8003a4c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036cc:	e0c7      	b.n	800385e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	2b40      	cmp	r3, #64	@ 0x40
 80036d2:	f040 80c4 	bne.w	800385e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fa2e 	bl	8003b38 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036dc:	e0bf      	b.n	800385e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ec:	f000 80b7 	beq.w	800385e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	099b      	lsrs	r3, r3, #6
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00f      	beq.n	800371c <HAL_I2C_EV_IRQHandler+0x194>
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	0a9b      	lsrs	r3, r3, #10
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d009      	beq.n	800371c <HAL_I2C_EV_IRQHandler+0x194>
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d103      	bne.n	800371c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 faa7 	bl	8003c68 <I2C_MasterReceive_RXNE>
 800371a:	e011      	b.n	8003740 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 809a 	beq.w	800385e <HAL_I2C_EV_IRQHandler+0x2d6>
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	0a5b      	lsrs	r3, r3, #9
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8093 	beq.w	800385e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fb5d 	bl	8003df8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800373e:	e08e      	b.n	800385e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003740:	e08d      	b.n	800385e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d004      	beq.n	8003754 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	e007      	b.n	8003764 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d012      	beq.n	8003796 <HAL_I2C_EV_IRQHandler+0x20e>
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	0a5b      	lsrs	r3, r3, #9
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00c      	beq.n	8003796 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800378c:	69b9      	ldr	r1, [r7, #24]
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 ff28 	bl	80045e4 <I2C_Slave_ADDR>
 8003794:	e066      	b.n	8003864 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_I2C_EV_IRQHandler+0x22e>
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	0a5b      	lsrs	r3, r3, #9
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 ff62 	bl	8004678 <I2C_Slave_STOPF>
 80037b4:	e056      	b.n	8003864 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037b6:	7bbb      	ldrb	r3, [r7, #14]
 80037b8:	2b21      	cmp	r3, #33	@ 0x21
 80037ba:	d002      	beq.n	80037c2 <HAL_I2C_EV_IRQHandler+0x23a>
 80037bc:	7bbb      	ldrb	r3, [r7, #14]
 80037be:	2b29      	cmp	r3, #41	@ 0x29
 80037c0:	d125      	bne.n	800380e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	09db      	lsrs	r3, r3, #7
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00f      	beq.n	80037ee <HAL_I2C_EV_IRQHandler+0x266>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	0a9b      	lsrs	r3, r3, #10
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_I2C_EV_IRQHandler+0x266>
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	089b      	lsrs	r3, r3, #2
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d103      	bne.n	80037ee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fe40 	bl	800446c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ec:	e039      	b.n	8003862 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d033      	beq.n	8003862 <HAL_I2C_EV_IRQHandler+0x2da>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	0a5b      	lsrs	r3, r3, #9
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02d      	beq.n	8003862 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fe6d 	bl	80044e6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800380c:	e029      	b.n	8003862 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00f      	beq.n	800383a <HAL_I2C_EV_IRQHandler+0x2b2>
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	0a9b      	lsrs	r3, r3, #10
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	089b      	lsrs	r3, r3, #2
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fe77 	bl	8004526 <I2C_SlaveReceive_RXNE>
 8003838:	e014      	b.n	8003864 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00e      	beq.n	8003864 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	0a5b      	lsrs	r3, r3, #9
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fea5 	bl	80045a2 <I2C_SlaveReceive_BTF>
 8003858:	e004      	b.n	8003864 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800385a:	bf00      	nop
 800385c:	e002      	b.n	8003864 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003862:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr

080038b2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	70fb      	strb	r3, [r7, #3]
 80038be:	4613      	mov	r3, r2
 80038c0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003922:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800392a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003930:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	d150      	bne.n	80039dc <I2C_MasterTransmit_TXE+0xc8>
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b21      	cmp	r3, #33	@ 0x21
 800393e:	d14d      	bne.n	80039dc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b08      	cmp	r3, #8
 8003944:	d01d      	beq.n	8003982 <I2C_MasterTransmit_TXE+0x6e>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b20      	cmp	r3, #32
 800394a:	d01a      	beq.n	8003982 <I2C_MasterTransmit_TXE+0x6e>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003952:	d016      	beq.n	8003982 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003962:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2211      	movs	r2, #17
 8003968:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ff75 	bl	800386a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003980:	e060      	b.n	8003a44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003990:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039a0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b40      	cmp	r3, #64	@ 0x40
 80039ba:	d107      	bne.n	80039cc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7fd fbdd 	bl	8001184 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039ca:	e03b      	b.n	8003a44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff ff48 	bl	800386a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039da:	e033      	b.n	8003a44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b21      	cmp	r3, #33	@ 0x21
 80039e0:	d005      	beq.n	80039ee <I2C_MasterTransmit_TXE+0xda>
 80039e2:	7bbb      	ldrb	r3, [r7, #14]
 80039e4:	2b40      	cmp	r3, #64	@ 0x40
 80039e6:	d12d      	bne.n	8003a44 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2b22      	cmp	r3, #34	@ 0x22
 80039ec:	d12a      	bne.n	8003a44 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d108      	bne.n	8003a0a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a06:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003a08:	e01c      	b.n	8003a44 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b40      	cmp	r3, #64	@ 0x40
 8003a14:	d103      	bne.n	8003a1e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f88e 	bl	8003b38 <I2C_MemoryTransmit_TXE_BTF>
}
 8003a1c:	e012      	b.n	8003a44 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	781a      	ldrb	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a42:	e7ff      	b.n	8003a44 <I2C_MasterTransmit_TXE+0x130>
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a58:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b21      	cmp	r3, #33	@ 0x21
 8003a64:	d164      	bne.n	8003b30 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d012      	beq.n	8003a96 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a94:	e04c      	b.n	8003b30 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d01d      	beq.n	8003ad8 <I2C_MasterTransmit_BTF+0x8c>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d01a      	beq.n	8003ad8 <I2C_MasterTransmit_BTF+0x8c>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003aa8:	d016      	beq.n	8003ad8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ab8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2211      	movs	r2, #17
 8003abe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff feca 	bl	800386a <HAL_I2C_MasterTxCpltCallback>
}
 8003ad6:	e02b      	b.n	8003b30 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ae6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b40      	cmp	r3, #64	@ 0x40
 8003b10:	d107      	bne.n	8003b22 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fb32 	bl	8001184 <HAL_I2C_MemTxCpltCallback>
}
 8003b20:	e006      	b.n	8003b30 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff fe9d 	bl	800386a <HAL_I2C_MasterTxCpltCallback>
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11d      	bne.n	8003b8c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10b      	bne.n	8003b70 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b68:	1c9a      	adds	r2, r3, #2
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003b6e:	e077      	b.n	8003c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	121b      	asrs	r3, r3, #8
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b8a:	e069      	b.n	8003c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d10b      	bne.n	8003bac <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003baa:	e059      	b.n	8003c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d152      	bne.n	8003c5a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b22      	cmp	r3, #34	@ 0x22
 8003bb8:	d10d      	bne.n	8003bd6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bd4:	e044      	b.n	8003c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d015      	beq.n	8003c0c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	2b21      	cmp	r3, #33	@ 0x21
 8003be4:	d112      	bne.n	8003c0c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003c0a:	e029      	b.n	8003c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d124      	bne.n	8003c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	2b21      	cmp	r3, #33	@ 0x21
 8003c1a:	d121      	bne.n	8003c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c2a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd fa96 	bl	8001184 <HAL_I2C_MemTxCpltCallback>
}
 8003c58:	e002      	b.n	8003c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff f832 	bl	8002cc4 <I2C_Flush_DR>
}
 8003c60:	bf00      	nop
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b22      	cmp	r3, #34	@ 0x22
 8003c7a:	f040 80b9 	bne.w	8003df0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c82:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d921      	bls.n	8003cd6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	f040 8096 	bne.w	8003df0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003cd4:	e08c      	b.n	8003df0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d07f      	beq.n	8003dde <I2C_MasterReceive_RXNE+0x176>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d002      	beq.n	8003cea <I2C_MasterReceive_RXNE+0x82>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d179      	bne.n	8003dde <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f001 fa18 	bl	8005120 <I2C_WaitOnSTOPRequestThroughIT>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d14c      	bne.n	8003d90 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d04:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d14:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b40      	cmp	r3, #64	@ 0x40
 8003d4e:	d10a      	bne.n	8003d66 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff fdbd 	bl	80038de <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d64:	e044      	b.n	8003df0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d002      	beq.n	8003d7a <I2C_MasterReceive_RXNE+0x112>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d103      	bne.n	8003d82 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d80:	e002      	b.n	8003d88 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2212      	movs	r2, #18
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fd77 	bl	800387c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d8e:	e02f      	b.n	8003df0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d9e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fd8a 	bl	80038f0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ddc:	e008      	b.n	8003df0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dec:	605a      	str	r2, [r3, #4]
}
 8003dee:	e7ff      	b.n	8003df0 <I2C_MasterReceive_RXNE+0x188>
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d11b      	bne.n	8003e48 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e1e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e46:	e0c4      	b.n	8003fd2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d129      	bne.n	8003ea6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e60:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d00a      	beq.n	8003e7e <I2C_MasterReceive_BTF+0x86>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d007      	beq.n	8003e7e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e7c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ea4:	e095      	b.n	8003fd2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d17d      	bne.n	8003fac <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d002      	beq.n	8003ebc <I2C_MasterReceive_BTF+0xc4>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b10      	cmp	r3, #16
 8003eba:	d108      	bne.n	8003ece <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e016      	b.n	8003efc <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d002      	beq.n	8003eda <I2C_MasterReceive_BTF+0xe2>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d108      	bne.n	8003eec <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e007      	b.n	8003efc <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003efa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f56:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b40      	cmp	r3, #64	@ 0x40
 8003f6a:	d10a      	bne.n	8003f82 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff fcaf 	bl	80038de <HAL_I2C_MemRxCpltCallback>
}
 8003f80:	e027      	b.n	8003fd2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d002      	beq.n	8003f96 <I2C_MasterReceive_BTF+0x19e>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d103      	bne.n	8003f9e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f9c:	e002      	b.n	8003fa4 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2212      	movs	r2, #18
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff fc69 	bl	800387c <HAL_I2C_MasterRxCpltCallback>
}
 8003faa:	e012      	b.n	8003fd2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b40      	cmp	r3, #64	@ 0x40
 8003fec:	d117      	bne.n	800401e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004006:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004008:	e067      	b.n	80040da <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	b2da      	uxtb	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	611a      	str	r2, [r3, #16]
}
 800401c:	e05d      	b.n	80040da <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004026:	d133      	bne.n	8004090 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b21      	cmp	r3, #33	@ 0x21
 8004032:	d109      	bne.n	8004048 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004038:	b2db      	uxtb	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004044:	611a      	str	r2, [r3, #16]
 8004046:	e008      	b.n	800405a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	b2da      	uxtb	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405e:	2b00      	cmp	r3, #0
 8004060:	d004      	beq.n	800406c <I2C_Master_SB+0x92>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	d108      	bne.n	800407e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004070:	2b00      	cmp	r3, #0
 8004072:	d032      	beq.n	80040da <I2C_Master_SB+0x100>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d02d      	beq.n	80040da <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800408c:	605a      	str	r2, [r3, #4]
}
 800408e:	e024      	b.n	80040da <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10e      	bne.n	80040b6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409c:	b29b      	uxth	r3, r3
 800409e:	11db      	asrs	r3, r3, #7
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	f003 0306 	and.w	r3, r3, #6
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f063 030f 	orn	r3, r3, #15
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	611a      	str	r2, [r3, #16]
}
 80040b4:	e011      	b.n	80040da <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d10d      	bne.n	80040da <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	11db      	asrs	r3, r3, #7
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f003 0306 	and.w	r3, r3, #6
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f063 030e 	orn	r3, r3, #14
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	611a      	str	r2, [r3, #16]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d004      	beq.n	800410a <I2C_Master_ADD10+0x26>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	2b00      	cmp	r3, #0
 8004108:	d108      	bne.n	800411c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00c      	beq.n	800412c <I2C_Master_ADD10+0x48>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	d007      	beq.n	800412c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800412a:	605a      	str	r2, [r3, #4]
  }
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004136:	b480      	push	{r7}
 8004138:	b091      	sub	sp, #68	@ 0x44
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004144:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b22      	cmp	r3, #34	@ 0x22
 800415e:	f040 8174 	bne.w	800444a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10f      	bne.n	800418a <I2C_Master_ADDR+0x54>
 800416a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800416e:	2b40      	cmp	r3, #64	@ 0x40
 8004170:	d10b      	bne.n	800418a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004172:	2300      	movs	r3, #0
 8004174:	633b      	str	r3, [r7, #48]	@ 0x30
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	633b      	str	r3, [r7, #48]	@ 0x30
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	633b      	str	r3, [r7, #48]	@ 0x30
 8004186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004188:	e16b      	b.n	8004462 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11d      	bne.n	80041ce <I2C_Master_ADDR+0x98>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800419a:	d118      	bne.n	80041ce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419c:	2300      	movs	r3, #0
 800419e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80041cc:	e149      	b.n	8004462 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d113      	bne.n	8004200 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d8:	2300      	movs	r3, #0
 80041da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e120      	b.n	8004442 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b01      	cmp	r3, #1
 8004208:	f040 808a 	bne.w	8004320 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800420c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004212:	d137      	bne.n	8004284 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004222:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800422e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004232:	d113      	bne.n	800425c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004242:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004244:	2300      	movs	r3, #0
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	e0f2      	b.n	8004442 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425c:	2300      	movs	r3, #0
 800425e:	623b      	str	r3, [r7, #32]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	623b      	str	r3, [r7, #32]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	623b      	str	r3, [r7, #32]
 8004270:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	e0de      	b.n	8004442 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004286:	2b08      	cmp	r3, #8
 8004288:	d02e      	beq.n	80042e8 <I2C_Master_ADDR+0x1b2>
 800428a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428c:	2b20      	cmp	r3, #32
 800428e:	d02b      	beq.n	80042e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004292:	2b12      	cmp	r3, #18
 8004294:	d102      	bne.n	800429c <I2C_Master_ADDR+0x166>
 8004296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004298:	2b01      	cmp	r3, #1
 800429a:	d125      	bne.n	80042e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800429c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d00e      	beq.n	80042c0 <I2C_Master_ADDR+0x18a>
 80042a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d00b      	beq.n	80042c0 <I2C_Master_ADDR+0x18a>
 80042a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042aa:	2b10      	cmp	r3, #16
 80042ac:	d008      	beq.n	80042c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e007      	b.n	80042d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	e0ac      	b.n	8004442 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f8:	2300      	movs	r3, #0
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e090      	b.n	8004442 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d158      	bne.n	80043dc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800432a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432c:	2b04      	cmp	r3, #4
 800432e:	d021      	beq.n	8004374 <I2C_Master_ADDR+0x23e>
 8004330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004332:	2b02      	cmp	r3, #2
 8004334:	d01e      	beq.n	8004374 <I2C_Master_ADDR+0x23e>
 8004336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004338:	2b10      	cmp	r3, #16
 800433a:	d01b      	beq.n	8004374 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800434a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e012      	b.n	800439a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004382:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043a8:	d14b      	bne.n	8004442 <I2C_Master_ADDR+0x30c>
 80043aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043b0:	d00b      	beq.n	80043ca <I2C_Master_ADDR+0x294>
 80043b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d008      	beq.n	80043ca <I2C_Master_ADDR+0x294>
 80043b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d005      	beq.n	80043ca <I2C_Master_ADDR+0x294>
 80043be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	d002      	beq.n	80043ca <I2C_Master_ADDR+0x294>
 80043c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d13b      	bne.n	8004442 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	e032      	b.n	8004442 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043ea:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043fa:	d117      	bne.n	800442c <I2C_Master_ADDR+0x2f6>
 80043fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004402:	d00b      	beq.n	800441c <I2C_Master_ADDR+0x2e6>
 8004404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004406:	2b01      	cmp	r3, #1
 8004408:	d008      	beq.n	800441c <I2C_Master_ADDR+0x2e6>
 800440a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440c:	2b08      	cmp	r3, #8
 800440e:	d005      	beq.n	800441c <I2C_Master_ADDR+0x2e6>
 8004410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004412:	2b10      	cmp	r3, #16
 8004414:	d002      	beq.n	800441c <I2C_Master_ADDR+0x2e6>
 8004416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004418:	2b20      	cmp	r3, #32
 800441a:	d107      	bne.n	800442c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800442a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004448:	e00b      	b.n	8004462 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444a:	2300      	movs	r3, #0
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	68bb      	ldr	r3, [r7, #8]
}
 8004460:	e7ff      	b.n	8004462 <I2C_Master_ADDR+0x32c>
 8004462:	bf00      	nop
 8004464:	3744      	adds	r7, #68	@ 0x44
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d02b      	beq.n	80044de <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448a:	781a      	ldrb	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d114      	bne.n	80044de <I2C_SlaveTransmit_TXE+0x72>
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b29      	cmp	r3, #41	@ 0x29
 80044b8:	d111      	bne.n	80044de <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2221      	movs	r2, #33	@ 0x21
 80044ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2228      	movs	r2, #40	@ 0x28
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff f9d8 	bl	800388e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d011      	beq.n	800451c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr

08004526 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004534:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d02c      	beq.n	800459a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d114      	bne.n	800459a <I2C_SlaveReceive_RXNE+0x74>
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b2a      	cmp	r3, #42	@ 0x2a
 8004574:	d111      	bne.n	800459a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004584:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2222      	movs	r2, #34	@ 0x22
 800458a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2228      	movs	r2, #40	@ 0x28
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff f983 	bl	80038a0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d012      	beq.n	80045da <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80045ee:	2300      	movs	r3, #0
 80045f0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045fe:	2b28      	cmp	r3, #40	@ 0x28
 8004600:	d127      	bne.n	8004652 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004610:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	089b      	lsrs	r3, r3, #2
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	09db      	lsrs	r3, r3, #7
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d103      	bne.n	8004636 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	81bb      	strh	r3, [r7, #12]
 8004634:	e002      	b.n	800463c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004644:	89ba      	ldrh	r2, [r7, #12]
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	4619      	mov	r1, r3
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff f931 	bl	80038b2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004650:	e00e      	b.n	8004670 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004686:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004696:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004698:	2300      	movs	r3, #0
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046d4:	d172      	bne.n	80047bc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	2b22      	cmp	r3, #34	@ 0x22
 80046da:	d002      	beq.n	80046e2 <I2C_Slave_STOPF+0x6a>
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b2a      	cmp	r3, #42	@ 0x2a
 80046e0:	d135      	bne.n	800474e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	f043 0204 	orr.w	r2, r3, #4
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004714:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471a:	4618      	mov	r0, r3
 800471c:	f7fd ffe4 	bl	80026e8 <HAL_DMA_GetState>
 8004720:	4603      	mov	r3, r0
 8004722:	2b01      	cmp	r3, #1
 8004724:	d049      	beq.n	80047ba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472a:	4a69      	ldr	r2, [pc, #420]	@ (80048d0 <I2C_Slave_STOPF+0x258>)
 800472c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004732:	4618      	mov	r0, r3
 8004734:	f7fd ff60 	bl	80025f8 <HAL_DMA_Abort_IT>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d03d      	beq.n	80047ba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004748:	4610      	mov	r0, r2
 800474a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800474c:	e035      	b.n	80047ba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	b29a      	uxth	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	f043 0204 	orr.w	r2, r3, #4
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004780:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004786:	4618      	mov	r0, r3
 8004788:	f7fd ffae 	bl	80026e8 <HAL_DMA_GetState>
 800478c:	4603      	mov	r3, r0
 800478e:	2b01      	cmp	r3, #1
 8004790:	d014      	beq.n	80047bc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004796:	4a4e      	ldr	r2, [pc, #312]	@ (80048d0 <I2C_Slave_STOPF+0x258>)
 8004798:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fd ff2a 	bl	80025f8 <HAL_DMA_Abort_IT>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d008      	beq.n	80047bc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047b4:	4610      	mov	r0, r2
 80047b6:	4798      	blx	r3
 80047b8:	e000      	b.n	80047bc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047ba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d03e      	beq.n	8004844 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d112      	bne.n	80047fa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004804:	2b40      	cmp	r3, #64	@ 0x40
 8004806:	d112      	bne.n	800482e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	f043 0204 	orr.w	r2, r3, #4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f843 	bl	80048d8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004852:	e039      	b.n	80048c8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2b2a      	cmp	r3, #42	@ 0x2a
 8004858:	d109      	bne.n	800486e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2228      	movs	r2, #40	@ 0x28
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff f819 	bl	80038a0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b28      	cmp	r3, #40	@ 0x28
 8004878:	d111      	bne.n	800489e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a15      	ldr	r2, [pc, #84]	@ (80048d4 <I2C_Slave_STOPF+0x25c>)
 800487e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff f818 	bl	80038cc <HAL_I2C_ListenCpltCallback>
}
 800489c:	e014      	b.n	80048c8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a2:	2b22      	cmp	r3, #34	@ 0x22
 80048a4:	d002      	beq.n	80048ac <I2C_Slave_STOPF+0x234>
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	2b22      	cmp	r3, #34	@ 0x22
 80048aa:	d10d      	bne.n	80048c8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fe ffec 	bl	80038a0 <HAL_I2C_SlaveRxCpltCallback>
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	08004d0d 	.word	0x08004d0d
 80048d4:	ffff0000 	.word	0xffff0000

080048d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048f0:	7bbb      	ldrb	r3, [r7, #14]
 80048f2:	2b10      	cmp	r3, #16
 80048f4:	d002      	beq.n	80048fc <I2C_ITError+0x24>
 80048f6:	7bbb      	ldrb	r3, [r7, #14]
 80048f8:	2b40      	cmp	r3, #64	@ 0x40
 80048fa:	d10a      	bne.n	8004912 <I2C_ITError+0x3a>
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	2b22      	cmp	r3, #34	@ 0x22
 8004900:	d107      	bne.n	8004912 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004910:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004918:	2b28      	cmp	r3, #40	@ 0x28
 800491a:	d107      	bne.n	800492c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2228      	movs	r2, #40	@ 0x28
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800492a:	e015      	b.n	8004958 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004936:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800493a:	d00a      	beq.n	8004952 <I2C_ITError+0x7a>
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b60      	cmp	r3, #96	@ 0x60
 8004940:	d007      	beq.n	8004952 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004966:	d162      	bne.n	8004a2e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004976:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d020      	beq.n	80049c8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800498a:	4a6a      	ldr	r2, [pc, #424]	@ (8004b34 <I2C_ITError+0x25c>)
 800498c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004992:	4618      	mov	r0, r3
 8004994:	f7fd fe30 	bl	80025f8 <HAL_DMA_Abort_IT>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8089 	beq.w	8004ab2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0201 	bic.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049c2:	4610      	mov	r0, r2
 80049c4:	4798      	blx	r3
 80049c6:	e074      	b.n	8004ab2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	4a59      	ldr	r2, [pc, #356]	@ (8004b34 <I2C_ITError+0x25c>)
 80049ce:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fd fe0f 	bl	80025f8 <HAL_DMA_Abort_IT>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d068      	beq.n	8004ab2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ea:	2b40      	cmp	r3, #64	@ 0x40
 80049ec:	d10b      	bne.n	8004a06 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0201 	bic.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4798      	blx	r3
 8004a2c:	e041      	b.n	8004ab2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b60      	cmp	r3, #96	@ 0x60
 8004a38:	d125      	bne.n	8004a86 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a52:	2b40      	cmp	r3, #64	@ 0x40
 8004a54:	d10b      	bne.n	8004a6e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fe ff3f 	bl	8003902 <HAL_I2C_AbortCpltCallback>
 8004a84:	e015      	b.n	8004ab2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a90:	2b40      	cmp	r3, #64	@ 0x40
 8004a92:	d10b      	bne.n	8004aac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7fe ff1f 	bl	80038f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10e      	bne.n	8004ae0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d109      	bne.n	8004ae0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d104      	bne.n	8004ae0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d007      	beq.n	8004af0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004aee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d113      	bne.n	8004b2c <I2C_ITError+0x254>
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b28      	cmp	r3, #40	@ 0x28
 8004b08:	d110      	bne.n	8004b2c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004b38 <I2C_ITError+0x260>)
 8004b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fe fed0 	bl	80038cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b2c:	bf00      	nop
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	08004d0d 	.word	0x08004d0d
 8004b38:	ffff0000 	.word	0xffff0000

08004b3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	817b      	strh	r3, [r7, #10]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	813b      	strh	r3, [r7, #8]
 8004b52:	4613      	mov	r3, r2
 8004b54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f96a 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00d      	beq.n	8004baa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b9c:	d103      	bne.n	8004ba6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ba4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e0aa      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004baa:	897b      	ldrh	r3, [r7, #10]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	6a3a      	ldr	r2, [r7, #32]
 8004bbe:	4952      	ldr	r1, [pc, #328]	@ (8004d08 <I2C_RequestMemoryRead+0x1cc>)
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f9c5 	bl	8004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e097      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be8:	6a39      	ldr	r1, [r7, #32]
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 fa50 	bl	8005090 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00d      	beq.n	8004c12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d107      	bne.n	8004c0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e076      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d105      	bne.n	8004c24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c18:	893b      	ldrh	r3, [r7, #8]
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	611a      	str	r2, [r3, #16]
 8004c22:	e021      	b.n	8004c68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c24:	893b      	ldrh	r3, [r7, #8]
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c34:	6a39      	ldr	r1, [r7, #32]
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 fa2a 	bl	8005090 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00d      	beq.n	8004c5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d107      	bne.n	8004c5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e050      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c5e:	893b      	ldrh	r3, [r7, #8]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c6a:	6a39      	ldr	r1, [r7, #32]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fa0f 	bl	8005090 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00d      	beq.n	8004c94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d107      	bne.n	8004c90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e035      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f8d3 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00d      	beq.n	8004cd8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cca:	d103      	bne.n	8004cd4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e013      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004cd8:	897b      	ldrh	r3, [r7, #10]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	6a3a      	ldr	r2, [r7, #32]
 8004cec:	4906      	ldr	r1, [pc, #24]	@ (8004d08 <I2C_RequestMemoryRead+0x1cc>)
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f92e 	bl	8004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	00010002 	.word	0x00010002

08004d0c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d24:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d26:	4b4b      	ldr	r3, [pc, #300]	@ (8004e54 <I2C_DMAAbort+0x148>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	08db      	lsrs	r3, r3, #3
 8004d2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004e58 <I2C_DMAAbort+0x14c>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	0a1a      	lsrs	r2, r3, #8
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	00da      	lsls	r2, r3, #3
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	f043 0220 	orr.w	r2, r3, #32
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004d52:	e00a      	b.n	8004d6a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d68:	d0ea      	beq.n	8004d40 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d76:	2200      	movs	r2, #0
 8004d78:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d86:	2200      	movs	r2, #0
 8004d88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d98:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dac:	2200      	movs	r2, #0
 8004dae:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0201 	bic.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b60      	cmp	r3, #96	@ 0x60
 8004dda:	d10e      	bne.n	8004dfa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2200      	movs	r2, #0
 8004df0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004df2:	6978      	ldr	r0, [r7, #20]
 8004df4:	f7fe fd85 	bl	8003902 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004df8:	e027      	b.n	8004e4a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dfa:	7cfb      	ldrb	r3, [r7, #19]
 8004dfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e00:	2b28      	cmp	r3, #40	@ 0x28
 8004e02:	d117      	bne.n	8004e34 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e22:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2228      	movs	r2, #40	@ 0x28
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e32:	e007      	b.n	8004e44 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e44:	6978      	ldr	r0, [r7, #20]
 8004e46:	f7fe fd53 	bl	80038f0 <HAL_I2C_ErrorCallback>
}
 8004e4a:	bf00      	nop
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000000 	.word	0x20000000
 8004e58:	14f8b589 	.word	0x14f8b589

08004e5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e6c:	e048      	b.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d044      	beq.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e76:	f7fc fcab 	bl	80017d0 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d302      	bcc.n	8004e8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d139      	bne.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	0c1b      	lsrs	r3, r3, #16
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d10d      	bne.n	8004eb2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	43da      	mvns	r2, r3
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2301      	moveq	r3, #1
 8004eaa:	2300      	movne	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	e00c      	b.n	8004ecc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	43da      	mvns	r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d116      	bne.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	f043 0220 	orr.w	r2, r3, #32
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e023      	b.n	8004f48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d10d      	bne.n	8004f26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	43da      	mvns	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4013      	ands	r3, r2
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf0c      	ite	eq
 8004f1c:	2301      	moveq	r3, #1
 8004f1e:	2300      	movne	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	e00c      	b.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	43da      	mvns	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4013      	ands	r3, r2
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d093      	beq.n	8004e6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f5e:	e071      	b.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6e:	d123      	bne.n	8004fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	f043 0204 	orr.w	r2, r3, #4
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e067      	b.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d041      	beq.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc0:	f7fc fc06 	bl	80017d0 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d302      	bcc.n	8004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d136      	bne.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	0c1b      	lsrs	r3, r3, #16
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d10c      	bne.n	8004ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	43da      	mvns	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4013      	ands	r3, r2
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bf14      	ite	ne
 8004ff2:	2301      	movne	r3, #1
 8004ff4:	2300      	moveq	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	e00b      	b.n	8005012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	43da      	mvns	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4013      	ands	r3, r2
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d016      	beq.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	f043 0220 	orr.w	r2, r3, #32
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e021      	b.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	0c1b      	lsrs	r3, r3, #16
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d10c      	bne.n	8005068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	43da      	mvns	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4013      	ands	r3, r2
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	e00b      	b.n	8005080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	43da      	mvns	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4013      	ands	r3, r2
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	bf14      	ite	ne
 800507a:	2301      	movne	r3, #1
 800507c:	2300      	moveq	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	f47f af6d 	bne.w	8004f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800509c:	e034      	b.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f8cd 	bl	800523e <I2C_IsAcknowledgeFailed>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e034      	b.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d028      	beq.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b6:	f7fc fb8b 	bl	80017d0 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d302      	bcc.n	80050cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d11d      	bne.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d6:	2b80      	cmp	r3, #128	@ 0x80
 80050d8:	d016      	beq.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e007      	b.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005112:	2b80      	cmp	r3, #128	@ 0x80
 8005114:	d1c3      	bne.n	800509e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800512c:	4b13      	ldr	r3, [pc, #76]	@ (800517c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	08db      	lsrs	r3, r3, #3
 8005132:	4a13      	ldr	r2, [pc, #76]	@ (8005180 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005134:	fba2 2303 	umull	r2, r3, r2, r3
 8005138:	0a1a      	lsrs	r2, r3, #8
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3b01      	subs	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d107      	bne.n	800515e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e008      	b.n	8005170 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800516c:	d0e9      	beq.n	8005142 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000000 	.word	0x20000000
 8005180:	14f8b589 	.word	0x14f8b589

08005184 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005190:	e049      	b.n	8005226 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2b10      	cmp	r3, #16
 800519e:	d119      	bne.n	80051d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0210 	mvn.w	r2, #16
 80051a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e030      	b.n	8005236 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d4:	f7fc fafc 	bl	80017d0 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d302      	bcc.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d11d      	bne.n	8005226 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f4:	2b40      	cmp	r3, #64	@ 0x40
 80051f6:	d016      	beq.n	8005226 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	f043 0220 	orr.w	r2, r3, #32
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e007      	b.n	8005236 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005230:	2b40      	cmp	r3, #64	@ 0x40
 8005232:	d1ae      	bne.n	8005192 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005254:	d11b      	bne.n	800528e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800525e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	f043 0204 	orr.w	r2, r3, #4
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr

0800529a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80052aa:	d103      	bne.n	80052b4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80052b2:	e007      	b.n	80052c4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80052bc:	d102      	bne.n	80052c4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2208      	movs	r2, #8
 80052c2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr
	...

080052d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e272      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 8087 	beq.w	80053fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052f0:	4b92      	ldr	r3, [pc, #584]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 030c 	and.w	r3, r3, #12
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d00c      	beq.n	8005316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052fc:	4b8f      	ldr	r3, [pc, #572]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f003 030c 	and.w	r3, r3, #12
 8005304:	2b08      	cmp	r3, #8
 8005306:	d112      	bne.n	800532e <HAL_RCC_OscConfig+0x5e>
 8005308:	4b8c      	ldr	r3, [pc, #560]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005314:	d10b      	bne.n	800532e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005316:	4b89      	ldr	r3, [pc, #548]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d06c      	beq.n	80053fc <HAL_RCC_OscConfig+0x12c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d168      	bne.n	80053fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e24c      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005336:	d106      	bne.n	8005346 <HAL_RCC_OscConfig+0x76>
 8005338:	4b80      	ldr	r3, [pc, #512]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a7f      	ldr	r2, [pc, #508]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 800533e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	e02e      	b.n	80053a4 <HAL_RCC_OscConfig+0xd4>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10c      	bne.n	8005368 <HAL_RCC_OscConfig+0x98>
 800534e:	4b7b      	ldr	r3, [pc, #492]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a7a      	ldr	r2, [pc, #488]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	4b78      	ldr	r3, [pc, #480]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a77      	ldr	r2, [pc, #476]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e01d      	b.n	80053a4 <HAL_RCC_OscConfig+0xd4>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005370:	d10c      	bne.n	800538c <HAL_RCC_OscConfig+0xbc>
 8005372:	4b72      	ldr	r3, [pc, #456]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a71      	ldr	r2, [pc, #452]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	4b6f      	ldr	r3, [pc, #444]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a6e      	ldr	r2, [pc, #440]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	e00b      	b.n	80053a4 <HAL_RCC_OscConfig+0xd4>
 800538c:	4b6b      	ldr	r3, [pc, #428]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a6a      	ldr	r2, [pc, #424]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	4b68      	ldr	r3, [pc, #416]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a67      	ldr	r2, [pc, #412]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 800539e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d013      	beq.n	80053d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ac:	f7fc fa10 	bl	80017d0 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fc fa0c 	bl	80017d0 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	@ 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e200      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c6:	4b5d      	ldr	r3, [pc, #372]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0xe4>
 80053d2:	e014      	b.n	80053fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fc f9fc 	bl	80017d0 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fc f9f8 	bl	80017d0 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	@ 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e1ec      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ee:	4b53      	ldr	r3, [pc, #332]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x10c>
 80053fa:	e000      	b.n	80053fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d063      	beq.n	80054d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800540a:	4b4c      	ldr	r3, [pc, #304]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 030c 	and.w	r3, r3, #12
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00b      	beq.n	800542e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005416:	4b49      	ldr	r3, [pc, #292]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f003 030c 	and.w	r3, r3, #12
 800541e:	2b08      	cmp	r3, #8
 8005420:	d11c      	bne.n	800545c <HAL_RCC_OscConfig+0x18c>
 8005422:	4b46      	ldr	r3, [pc, #280]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d116      	bne.n	800545c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800542e:	4b43      	ldr	r3, [pc, #268]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <HAL_RCC_OscConfig+0x176>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d001      	beq.n	8005446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e1c0      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005446:	4b3d      	ldr	r3, [pc, #244]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	4939      	ldr	r1, [pc, #228]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005456:	4313      	orrs	r3, r2
 8005458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800545a:	e03a      	b.n	80054d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d020      	beq.n	80054a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005464:	4b36      	ldr	r3, [pc, #216]	@ (8005540 <HAL_RCC_OscConfig+0x270>)
 8005466:	2201      	movs	r2, #1
 8005468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546a:	f7fc f9b1 	bl	80017d0 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005470:	e008      	b.n	8005484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005472:	f7fc f9ad 	bl	80017d0 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e1a1      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005484:	4b2d      	ldr	r3, [pc, #180]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0f0      	beq.n	8005472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005490:	4b2a      	ldr	r3, [pc, #168]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	4927      	ldr	r1, [pc, #156]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	600b      	str	r3, [r1, #0]
 80054a4:	e015      	b.n	80054d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054a6:	4b26      	ldr	r3, [pc, #152]	@ (8005540 <HAL_RCC_OscConfig+0x270>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ac:	f7fc f990 	bl	80017d0 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054b4:	f7fc f98c 	bl	80017d0 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e180      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054c6:	4b1d      	ldr	r3, [pc, #116]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f0      	bne.n	80054b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d03a      	beq.n	8005554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d019      	beq.n	800551a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054e6:	4b17      	ldr	r3, [pc, #92]	@ (8005544 <HAL_RCC_OscConfig+0x274>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ec:	f7fc f970 	bl	80017d0 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f4:	f7fc f96c 	bl	80017d0 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e160      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005506:	4b0d      	ldr	r3, [pc, #52]	@ (800553c <HAL_RCC_OscConfig+0x26c>)
 8005508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f0      	beq.n	80054f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005512:	2001      	movs	r0, #1
 8005514:	f000 face 	bl	8005ab4 <RCC_Delay>
 8005518:	e01c      	b.n	8005554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800551a:	4b0a      	ldr	r3, [pc, #40]	@ (8005544 <HAL_RCC_OscConfig+0x274>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005520:	f7fc f956 	bl	80017d0 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005526:	e00f      	b.n	8005548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005528:	f7fc f952 	bl	80017d0 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d908      	bls.n	8005548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e146      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
 8005540:	42420000 	.word	0x42420000
 8005544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005548:	4b92      	ldr	r3, [pc, #584]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 800554a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e9      	bne.n	8005528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80a6 	beq.w	80056ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005562:	2300      	movs	r3, #0
 8005564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005566:	4b8b      	ldr	r3, [pc, #556]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10d      	bne.n	800558e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005572:	4b88      	ldr	r3, [pc, #544]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	4a87      	ldr	r2, [pc, #540]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800557c:	61d3      	str	r3, [r2, #28]
 800557e:	4b85      	ldr	r3, [pc, #532]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005586:	60bb      	str	r3, [r7, #8]
 8005588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800558a:	2301      	movs	r3, #1
 800558c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800558e:	4b82      	ldr	r3, [pc, #520]	@ (8005798 <HAL_RCC_OscConfig+0x4c8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d118      	bne.n	80055cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800559a:	4b7f      	ldr	r3, [pc, #508]	@ (8005798 <HAL_RCC_OscConfig+0x4c8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a7e      	ldr	r2, [pc, #504]	@ (8005798 <HAL_RCC_OscConfig+0x4c8>)
 80055a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055a6:	f7fc f913 	bl	80017d0 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ae:	f7fc f90f 	bl	80017d0 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b64      	cmp	r3, #100	@ 0x64
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e103      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c0:	4b75      	ldr	r3, [pc, #468]	@ (8005798 <HAL_RCC_OscConfig+0x4c8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d106      	bne.n	80055e2 <HAL_RCC_OscConfig+0x312>
 80055d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	4a6e      	ldr	r2, [pc, #440]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	6213      	str	r3, [r2, #32]
 80055e0:	e02d      	b.n	800563e <HAL_RCC_OscConfig+0x36e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10c      	bne.n	8005604 <HAL_RCC_OscConfig+0x334>
 80055ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	4a69      	ldr	r2, [pc, #420]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 80055f0:	f023 0301 	bic.w	r3, r3, #1
 80055f4:	6213      	str	r3, [r2, #32]
 80055f6:	4b67      	ldr	r3, [pc, #412]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	4a66      	ldr	r2, [pc, #408]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 80055fc:	f023 0304 	bic.w	r3, r3, #4
 8005600:	6213      	str	r3, [r2, #32]
 8005602:	e01c      	b.n	800563e <HAL_RCC_OscConfig+0x36e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	2b05      	cmp	r3, #5
 800560a:	d10c      	bne.n	8005626 <HAL_RCC_OscConfig+0x356>
 800560c:	4b61      	ldr	r3, [pc, #388]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	4a60      	ldr	r2, [pc, #384]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005612:	f043 0304 	orr.w	r3, r3, #4
 8005616:	6213      	str	r3, [r2, #32]
 8005618:	4b5e      	ldr	r3, [pc, #376]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	4a5d      	ldr	r2, [pc, #372]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	6213      	str	r3, [r2, #32]
 8005624:	e00b      	b.n	800563e <HAL_RCC_OscConfig+0x36e>
 8005626:	4b5b      	ldr	r3, [pc, #364]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	4a5a      	ldr	r2, [pc, #360]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	6213      	str	r3, [r2, #32]
 8005632:	4b58      	ldr	r3, [pc, #352]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	4a57      	ldr	r2, [pc, #348]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005638:	f023 0304 	bic.w	r3, r3, #4
 800563c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d015      	beq.n	8005672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005646:	f7fc f8c3 	bl	80017d0 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564c:	e00a      	b.n	8005664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800564e:	f7fc f8bf 	bl	80017d0 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800565c:	4293      	cmp	r3, r2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e0b1      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005664:	4b4b      	ldr	r3, [pc, #300]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0ee      	beq.n	800564e <HAL_RCC_OscConfig+0x37e>
 8005670:	e014      	b.n	800569c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005672:	f7fc f8ad 	bl	80017d0 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005678:	e00a      	b.n	8005690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567a:	f7fc f8a9 	bl	80017d0 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005688:	4293      	cmp	r3, r2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e09b      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005690:	4b40      	ldr	r3, [pc, #256]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1ee      	bne.n	800567a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800569c:	7dfb      	ldrb	r3, [r7, #23]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d105      	bne.n	80056ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	4a3b      	ldr	r2, [pc, #236]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 80056a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 8087 	beq.w	80057c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056b8:	4b36      	ldr	r3, [pc, #216]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f003 030c 	and.w	r3, r3, #12
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d061      	beq.n	8005788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d146      	bne.n	800575a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056cc:	4b33      	ldr	r3, [pc, #204]	@ (800579c <HAL_RCC_OscConfig+0x4cc>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d2:	f7fc f87d 	bl	80017d0 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056d8:	e008      	b.n	80056ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056da:	f7fc f879 	bl	80017d0 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e06d      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ec:	4b29      	ldr	r3, [pc, #164]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f0      	bne.n	80056da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005700:	d108      	bne.n	8005714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005702:	4b24      	ldr	r3, [pc, #144]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	4921      	ldr	r1, [pc, #132]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005710:	4313      	orrs	r3, r2
 8005712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005714:	4b1f      	ldr	r3, [pc, #124]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a19      	ldr	r1, [r3, #32]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005724:	430b      	orrs	r3, r1
 8005726:	491b      	ldr	r1, [pc, #108]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 8005728:	4313      	orrs	r3, r2
 800572a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800572c:	4b1b      	ldr	r3, [pc, #108]	@ (800579c <HAL_RCC_OscConfig+0x4cc>)
 800572e:	2201      	movs	r2, #1
 8005730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005732:	f7fc f84d 	bl	80017d0 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800573a:	f7fc f849 	bl	80017d0 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e03d      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800574c:	4b11      	ldr	r3, [pc, #68]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0f0      	beq.n	800573a <HAL_RCC_OscConfig+0x46a>
 8005758:	e035      	b.n	80057c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800575a:	4b10      	ldr	r3, [pc, #64]	@ (800579c <HAL_RCC_OscConfig+0x4cc>)
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005760:	f7fc f836 	bl	80017d0 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005768:	f7fc f832 	bl	80017d0 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e026      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800577a:	4b06      	ldr	r3, [pc, #24]	@ (8005794 <HAL_RCC_OscConfig+0x4c4>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f0      	bne.n	8005768 <HAL_RCC_OscConfig+0x498>
 8005786:	e01e      	b.n	80057c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d107      	bne.n	80057a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e019      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
 8005794:	40021000 	.word	0x40021000
 8005798:	40007000 	.word	0x40007000
 800579c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057a0:	4b0b      	ldr	r3, [pc, #44]	@ (80057d0 <HAL_RCC_OscConfig+0x500>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d106      	bne.n	80057c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057be:	429a      	cmp	r2, r3
 80057c0:	d001      	beq.n	80057c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40021000 	.word	0x40021000

080057d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0d0      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d910      	bls.n	8005818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f6:	4b67      	ldr	r3, [pc, #412]	@ (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f023 0207 	bic.w	r2, r3, #7
 80057fe:	4965      	ldr	r1, [pc, #404]	@ (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	4313      	orrs	r3, r2
 8005804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005806:	4b63      	ldr	r3, [pc, #396]	@ (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d001      	beq.n	8005818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e0b8      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d020      	beq.n	8005866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005830:	4b59      	ldr	r3, [pc, #356]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	4a58      	ldr	r2, [pc, #352]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005836:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800583a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005848:	4b53      	ldr	r3, [pc, #332]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	4a52      	ldr	r2, [pc, #328]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 800584e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005854:	4b50      	ldr	r3, [pc, #320]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	494d      	ldr	r1, [pc, #308]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005862:	4313      	orrs	r3, r2
 8005864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d040      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d107      	bne.n	800588a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587a:	4b47      	ldr	r3, [pc, #284]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d115      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e07f      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d107      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005892:	4b41      	ldr	r3, [pc, #260]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d109      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e073      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e06b      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058b2:	4b39      	ldr	r3, [pc, #228]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f023 0203 	bic.w	r2, r3, #3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4936      	ldr	r1, [pc, #216]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058c4:	f7fb ff84 	bl	80017d0 <HAL_GetTick>
 80058c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ca:	e00a      	b.n	80058e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058cc:	f7fb ff80 	bl	80017d0 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e053      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f003 020c 	and.w	r2, r3, #12
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d1eb      	bne.n	80058cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058f4:	4b27      	ldr	r3, [pc, #156]	@ (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d210      	bcs.n	8005924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005902:	4b24      	ldr	r3, [pc, #144]	@ (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f023 0207 	bic.w	r2, r3, #7
 800590a:	4922      	ldr	r1, [pc, #136]	@ (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	4313      	orrs	r3, r2
 8005910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005912:	4b20      	ldr	r3, [pc, #128]	@ (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d001      	beq.n	8005924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e032      	b.n	800598a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005930:	4b19      	ldr	r3, [pc, #100]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4916      	ldr	r1, [pc, #88]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 800593e:	4313      	orrs	r3, r2
 8005940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800594e:	4b12      	ldr	r3, [pc, #72]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	490e      	ldr	r1, [pc, #56]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 800595e:	4313      	orrs	r3, r2
 8005960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005962:	f000 f821 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8005966:	4602      	mov	r2, r0
 8005968:	4b0b      	ldr	r3, [pc, #44]	@ (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	091b      	lsrs	r3, r3, #4
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	490a      	ldr	r1, [pc, #40]	@ (800599c <HAL_RCC_ClockConfig+0x1c8>)
 8005974:	5ccb      	ldrb	r3, [r1, r3]
 8005976:	fa22 f303 	lsr.w	r3, r2, r3
 800597a:	4a09      	ldr	r2, [pc, #36]	@ (80059a0 <HAL_RCC_ClockConfig+0x1cc>)
 800597c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800597e:	4b09      	ldr	r3, [pc, #36]	@ (80059a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f7fb fee2 	bl	800174c <HAL_InitTick>

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40022000 	.word	0x40022000
 8005998:	40021000 	.word	0x40021000
 800599c:	0800e208 	.word	0x0800e208
 80059a0:	20000000 	.word	0x20000000
 80059a4:	20000004 	.word	0x20000004

080059a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	2300      	movs	r3, #0
 80059b4:	60bb      	str	r3, [r7, #8]
 80059b6:	2300      	movs	r3, #0
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80059c2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d002      	beq.n	80059d8 <HAL_RCC_GetSysClockFreq+0x30>
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d003      	beq.n	80059de <HAL_RCC_GetSysClockFreq+0x36>
 80059d6:	e027      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059d8:	4b19      	ldr	r3, [pc, #100]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x98>)
 80059da:	613b      	str	r3, [r7, #16]
      break;
 80059dc:	e027      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	0c9b      	lsrs	r3, r3, #18
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	4a17      	ldr	r2, [pc, #92]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80059e8:	5cd3      	ldrb	r3, [r2, r3]
 80059ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d010      	beq.n	8005a18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059f6:	4b11      	ldr	r3, [pc, #68]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	0c5b      	lsrs	r3, r3, #17
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	4a11      	ldr	r2, [pc, #68]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a02:	5cd3      	ldrb	r3, [r2, r3]
 8005a04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a0d      	ldr	r2, [pc, #52]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a0a:	fb03 f202 	mul.w	r2, r3, r2
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	e004      	b.n	8005a22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a1c:	fb02 f303 	mul.w	r3, r2, r3
 8005a20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	613b      	str	r3, [r7, #16]
      break;
 8005a26:	e002      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a28:	4b05      	ldr	r3, [pc, #20]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a2a:	613b      	str	r3, [r7, #16]
      break;
 8005a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a2e:	693b      	ldr	r3, [r7, #16]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	007a1200 	.word	0x007a1200
 8005a44:	0800e220 	.word	0x0800e220
 8005a48:	0800e230 	.word	0x0800e230
 8005a4c:	003d0900 	.word	0x003d0900

08005a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a54:	4b02      	ldr	r3, [pc, #8]	@ (8005a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a56:	681b      	ldr	r3, [r3, #0]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr
 8005a60:	20000000 	.word	0x20000000

08005a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a68:	f7ff fff2 	bl	8005a50 <HAL_RCC_GetHCLKFreq>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	4b05      	ldr	r3, [pc, #20]	@ (8005a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	0a1b      	lsrs	r3, r3, #8
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	4903      	ldr	r1, [pc, #12]	@ (8005a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a7a:	5ccb      	ldrb	r3, [r1, r3]
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40021000 	.word	0x40021000
 8005a88:	0800e218 	.word	0x0800e218

08005a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a90:	f7ff ffde 	bl	8005a50 <HAL_RCC_GetHCLKFreq>
 8005a94:	4602      	mov	r2, r0
 8005a96:	4b05      	ldr	r3, [pc, #20]	@ (8005aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	0adb      	lsrs	r3, r3, #11
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	4903      	ldr	r1, [pc, #12]	@ (8005ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aa2:	5ccb      	ldrb	r3, [r1, r3]
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40021000 	.word	0x40021000
 8005ab0:	0800e218 	.word	0x0800e218

08005ab4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005abc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <RCC_Delay+0x34>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8005aec <RCC_Delay+0x38>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	0a5b      	lsrs	r3, r3, #9
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	fb02 f303 	mul.w	r3, r2, r3
 8005ace:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ad0:	bf00      	nop
  }
  while (Delay --);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1e5a      	subs	r2, r3, #1
 8005ad6:	60fa      	str	r2, [r7, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1f9      	bne.n	8005ad0 <RCC_Delay+0x1c>
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr
 8005ae8:	20000000 	.word	0x20000000
 8005aec:	10624dd3 	.word	0x10624dd3

08005af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e042      	b.n	8005b88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fb fc46 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2224      	movs	r2, #36	@ 0x24
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fded 	bl	8006714 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	@ 0x28
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d175      	bne.n	8005c9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_UART_Transmit+0x2c>
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e06e      	b.n	8005c9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2221      	movs	r2, #33	@ 0x21
 8005bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bce:	f7fb fdff 	bl	80017d0 <HAL_GetTick>
 8005bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	88fa      	ldrh	r2, [r7, #6]
 8005bd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	88fa      	ldrh	r2, [r7, #6]
 8005bde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be8:	d108      	bne.n	8005bfc <HAL_UART_Transmit+0x6c>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	e003      	b.n	8005c04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c04:	e02e      	b.n	8005c64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2180      	movs	r1, #128	@ 0x80
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 fb52 	bl	80062ba <UART_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e03a      	b.n	8005c9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10b      	bne.n	8005c46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	3302      	adds	r3, #2
 8005c42:	61bb      	str	r3, [r7, #24]
 8005c44:	e007      	b.n	8005c56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	781a      	ldrb	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	3301      	adds	r3, #1
 8005c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1cb      	bne.n	8005c06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2200      	movs	r2, #0
 8005c76:	2140      	movs	r1, #64	@ 0x40
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 fb1e 	bl	80062ba <UART_WaitOnFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e006      	b.n	8005c9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e000      	b.n	8005c9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b08c      	sub	sp, #48	@ 0x30
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	d14a      	bne.n	8005d56 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e043      	b.n	8005d58 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 fb42 	bl	800636c <UART_Start_Receive_IT>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d12c      	bne.n	8005d50 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d125      	bne.n	8005d4a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cfe:	2300      	movs	r3, #0
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	617b      	str	r3, [r7, #20]
   return(result);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f043 0310 	orr.w	r3, r3, #16
 8005d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d34:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d36:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6a39      	ldr	r1, [r7, #32]
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e5      	bne.n	8005d14 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005d48:	e002      	b.n	8005d50 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005d50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d54:	e000      	b.n	8005d58 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005d56:	2302      	movs	r3, #2
  }
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3730      	adds	r7, #48	@ 0x30
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b0ba      	sub	sp, #232	@ 0xe8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10f      	bne.n	8005dc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d009      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x66>
 8005db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fbea 	bl	8006598 <UART_Receive_IT>
      return;
 8005dc4:	e25b      	b.n	800627e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 80de 	beq.w	8005f8c <HAL_UART_IRQHandler+0x22c>
 8005dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d106      	bne.n	8005dea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005de0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 80d1 	beq.w	8005f8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00b      	beq.n	8005e0e <HAL_UART_IRQHandler+0xae>
 8005df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d005      	beq.n	8005e0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e06:	f043 0201 	orr.w	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00b      	beq.n	8005e32 <HAL_UART_IRQHandler+0xd2>
 8005e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e2a:	f043 0202 	orr.w	r2, r3, #2
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <HAL_UART_IRQHandler+0xf6>
 8005e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d005      	beq.n	8005e56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e4e:	f043 0204 	orr.w	r2, r3, #4
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d011      	beq.n	8005e86 <HAL_UART_IRQHandler+0x126>
 8005e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d105      	bne.n	8005e7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7e:	f043 0208 	orr.w	r2, r3, #8
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 81f2 	beq.w	8006274 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_UART_IRQHandler+0x14e>
 8005e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fb75 	bl	8006598 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	bf14      	ite	ne
 8005ebc:	2301      	movne	r3, #1
 8005ebe:	2300      	moveq	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d103      	bne.n	8005eda <HAL_UART_IRQHandler+0x17a>
 8005ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d04f      	beq.n	8005f7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa7f 	bl	80063de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d041      	beq.n	8005f72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3314      	adds	r3, #20
 8005ef4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3314      	adds	r3, #20
 8005f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1d9      	bne.n	8005eee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d013      	beq.n	8005f6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f46:	4a7e      	ldr	r2, [pc, #504]	@ (8006140 <HAL_UART_IRQHandler+0x3e0>)
 8005f48:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fc fb52 	bl	80025f8 <HAL_DMA_Abort_IT>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d016      	beq.n	8005f88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f64:	4610      	mov	r0, r2
 8005f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f68:	e00e      	b.n	8005f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f99c 	bl	80062a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	e00a      	b.n	8005f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f998 	bl	80062a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f78:	e006      	b.n	8005f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f994 	bl	80062a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005f86:	e175      	b.n	8006274 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f88:	bf00      	nop
    return;
 8005f8a:	e173      	b.n	8006274 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	f040 814f 	bne.w	8006234 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f9a:	f003 0310 	and.w	r3, r3, #16
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 8148 	beq.w	8006234 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 8141 	beq.w	8006234 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60bb      	str	r3, [r7, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	60bb      	str	r3, [r7, #8]
 8005fc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 80b6 	beq.w	8006144 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fe4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 8145 	beq.w	8006278 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	f080 813e 	bcs.w	8006278 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006002:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	2b20      	cmp	r3, #32
 800600c:	f000 8088 	beq.w	8006120 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	330c      	adds	r3, #12
 8006016:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006026:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800602a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800602e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	330c      	adds	r3, #12
 8006038:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800603c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006040:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006048:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1d9      	bne.n	8006010 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3314      	adds	r3, #20
 8006062:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800606c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800606e:	f023 0301 	bic.w	r3, r3, #1
 8006072:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3314      	adds	r3, #20
 800607c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006080:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006084:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006088:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006092:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e1      	bne.n	800605c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3314      	adds	r3, #20
 800609e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80060a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3314      	adds	r3, #20
 80060b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80060bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80060c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80060ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e3      	bne.n	8006098 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	330c      	adds	r3, #12
 80060e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060f0:	f023 0310 	bic.w	r3, r3, #16
 80060f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	330c      	adds	r3, #12
 80060fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006102:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006104:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006108:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e3      	bne.n	80060de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611a:	4618      	mov	r0, r3
 800611c:	f7fc fa31 	bl	8002582 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800612e:	b29b      	uxth	r3, r3
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	b29b      	uxth	r3, r3
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7fb f802 	bl	8001140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800613c:	e09c      	b.n	8006278 <HAL_UART_IRQHandler+0x518>
 800613e:	bf00      	nop
 8006140:	080064a3 	.word	0x080064a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800614c:	b29b      	uxth	r3, r3
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 808e 	beq.w	800627c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 8089 	beq.w	800627c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	330c      	adds	r3, #12
 8006170:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800617a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800617c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006180:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	330c      	adds	r3, #12
 800618a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800618e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006190:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800619c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e3      	bne.n	800616a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3314      	adds	r3, #20
 80061a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	623b      	str	r3, [r7, #32]
   return(result);
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	f023 0301 	bic.w	r3, r3, #1
 80061b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3314      	adds	r3, #20
 80061c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80061c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80061c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e3      	bne.n	80061a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	330c      	adds	r3, #12
 80061ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0310 	bic.w	r3, r3, #16
 80061fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	330c      	adds	r3, #12
 8006208:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800620c:	61fa      	str	r2, [r7, #28]
 800620e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	69b9      	ldr	r1, [r7, #24]
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	e841 2300 	strex	r3, r2, [r1]
 8006218:	617b      	str	r3, [r7, #20]
   return(result);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e3      	bne.n	80061e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7fa ff87 	bl	8001140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006232:	e023      	b.n	800627c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <HAL_UART_IRQHandler+0x4f4>
 8006240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f93c 	bl	80064ca <UART_Transmit_IT>
    return;
 8006252:	e014      	b.n	800627e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00e      	beq.n	800627e <HAL_UART_IRQHandler+0x51e>
 8006260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d008      	beq.n	800627e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f97b 	bl	8006568 <UART_EndTransmit_IT>
    return;
 8006272:	e004      	b.n	800627e <HAL_UART_IRQHandler+0x51e>
    return;
 8006274:	bf00      	nop
 8006276:	e002      	b.n	800627e <HAL_UART_IRQHandler+0x51e>
      return;
 8006278:	bf00      	nop
 800627a:	e000      	b.n	800627e <HAL_UART_IRQHandler+0x51e>
      return;
 800627c:	bf00      	nop
  }
}
 800627e:	37e8      	adds	r7, #232	@ 0xe8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bc80      	pop	{r7}
 80062a6:	4770      	bx	lr

080062a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bc80      	pop	{r7}
 80062b8:	4770      	bx	lr

080062ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b086      	sub	sp, #24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	603b      	str	r3, [r7, #0]
 80062c6:	4613      	mov	r3, r2
 80062c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ca:	e03b      	b.n	8006344 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d2:	d037      	beq.n	8006344 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d4:	f7fb fa7c 	bl	80017d0 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	6a3a      	ldr	r2, [r7, #32]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d302      	bcc.n	80062ea <UART_WaitOnFlagUntilTimeout+0x30>
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e03a      	b.n	8006364 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d023      	beq.n	8006344 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b80      	cmp	r3, #128	@ 0x80
 8006300:	d020      	beq.n	8006344 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b40      	cmp	r3, #64	@ 0x40
 8006306:	d01d      	beq.n	8006344 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b08      	cmp	r3, #8
 8006314:	d116      	bne.n	8006344 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f856 	bl	80063de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2208      	movs	r2, #8
 8006336:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e00f      	b.n	8006364 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4013      	ands	r3, r2
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	429a      	cmp	r2, r3
 8006352:	bf0c      	ite	eq
 8006354:	2301      	moveq	r3, #1
 8006356:	2300      	movne	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	429a      	cmp	r2, r3
 8006360:	d0b4      	beq.n	80062cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	88fa      	ldrh	r2, [r7, #6]
 8006384:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	88fa      	ldrh	r2, [r7, #6]
 800638a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2222      	movs	r2, #34	@ 0x22
 8006396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	695a      	ldr	r2, [r3, #20]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0201 	orr.w	r2, r2, #1
 80063c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 0220 	orr.w	r2, r2, #32
 80063d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	4770      	bx	lr

080063de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063de:	b480      	push	{r7}
 80063e0:	b095      	sub	sp, #84	@ 0x54
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	330c      	adds	r3, #12
 80063ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	330c      	adds	r3, #12
 8006404:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006406:	643a      	str	r2, [r7, #64]	@ 0x40
 8006408:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800640c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e5      	bne.n	80063e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3314      	adds	r3, #20
 8006420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	e853 3f00 	ldrex	r3, [r3]
 8006428:	61fb      	str	r3, [r7, #28]
   return(result);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	f023 0301 	bic.w	r3, r3, #1
 8006430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3314      	adds	r3, #20
 8006438:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800643a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e5      	bne.n	800641a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006452:	2b01      	cmp	r3, #1
 8006454:	d119      	bne.n	800648a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330c      	adds	r3, #12
 800645c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	60bb      	str	r3, [r7, #8]
   return(result);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f023 0310 	bic.w	r3, r3, #16
 800646c:	647b      	str	r3, [r7, #68]	@ 0x44
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006476:	61ba      	str	r2, [r7, #24]
 8006478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	6979      	ldr	r1, [r7, #20]
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	613b      	str	r3, [r7, #16]
   return(result);
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e5      	bne.n	8006456 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006498:	bf00      	nop
 800649a:	3754      	adds	r7, #84	@ 0x54
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr

080064a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff fef3 	bl	80062a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064c2:	bf00      	nop
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b21      	cmp	r3, #33	@ 0x21
 80064dc:	d13e      	bne.n	800655c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064e6:	d114      	bne.n	8006512 <UART_Transmit_IT+0x48>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d110      	bne.n	8006512 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006504:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	1c9a      	adds	r2, r3, #2
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	621a      	str	r2, [r3, #32]
 8006510:	e008      	b.n	8006524 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	1c59      	adds	r1, r3, #1
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6211      	str	r1, [r2, #32]
 800651c:	781a      	ldrb	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29b      	uxth	r3, r3
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4619      	mov	r1, r3
 8006532:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10f      	bne.n	8006558 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006546:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006556:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	e000      	b.n	800655e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800655c:	2302      	movs	r3, #2
  }
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr

08006568 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800657e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7ff fe7b 	bl	8006284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08c      	sub	sp, #48	@ 0x30
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b22      	cmp	r3, #34	@ 0x22
 80065aa:	f040 80ae 	bne.w	800670a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065b6:	d117      	bne.n	80065e8 <UART_Receive_IT+0x50>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d113      	bne.n	80065e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065c0:	2300      	movs	r3, #0
 80065c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e0:	1c9a      	adds	r2, r3, #2
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80065e6:	e026      	b.n	8006636 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065fa:	d007      	beq.n	800660c <UART_Receive_IT+0x74>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <UART_Receive_IT+0x82>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d106      	bne.n	800661a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	b2da      	uxtb	r2, r3
 8006614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	e008      	b.n	800662c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006626:	b2da      	uxtb	r2, r3
 8006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29b      	uxth	r3, r3
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	4619      	mov	r1, r3
 8006644:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006646:	2b00      	cmp	r3, #0
 8006648:	d15d      	bne.n	8006706 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0220 	bic.w	r2, r2, #32
 8006658:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006668:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0201 	bic.w	r2, r2, #1
 8006678:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668c:	2b01      	cmp	r3, #1
 800668e:	d135      	bne.n	80066fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	330c      	adds	r3, #12
 800669c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	613b      	str	r3, [r7, #16]
   return(result);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f023 0310 	bic.w	r3, r3, #16
 80066ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066b6:	623a      	str	r2, [r7, #32]
 80066b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	69f9      	ldr	r1, [r7, #28]
 80066bc:	6a3a      	ldr	r2, [r7, #32]
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e5      	bne.n	8006696 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d10a      	bne.n	80066ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7fa fd23 	bl	8001140 <HAL_UARTEx_RxEventCallback>
 80066fa:	e002      	b.n	8006702 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff fdca 	bl	8006296 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	e002      	b.n	800670c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	e000      	b.n	800670c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800670a:	2302      	movs	r3, #2
  }
}
 800670c:	4618      	mov	r0, r3
 800670e:	3730      	adds	r7, #48	@ 0x30
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800674e:	f023 030c 	bic.w	r3, r3, #12
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6812      	ldr	r2, [r2, #0]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	430b      	orrs	r3, r1
 800675a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a2c      	ldr	r2, [pc, #176]	@ (8006828 <UART_SetConfig+0x114>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d103      	bne.n	8006784 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800677c:	f7ff f986 	bl	8005a8c <HAL_RCC_GetPCLK2Freq>
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	e002      	b.n	800678a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006784:	f7ff f96e 	bl	8005a64 <HAL_RCC_GetPCLK1Freq>
 8006788:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009a      	lsls	r2, r3, #2
 8006794:	441a      	add	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a0:	4a22      	ldr	r2, [pc, #136]	@ (800682c <UART_SetConfig+0x118>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	095b      	lsrs	r3, r3, #5
 80067a8:	0119      	lsls	r1, r3, #4
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4613      	mov	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	009a      	lsls	r2, r3, #2
 80067b4:	441a      	add	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80067c0:	4b1a      	ldr	r3, [pc, #104]	@ (800682c <UART_SetConfig+0x118>)
 80067c2:	fba3 0302 	umull	r0, r3, r3, r2
 80067c6:	095b      	lsrs	r3, r3, #5
 80067c8:	2064      	movs	r0, #100	@ 0x64
 80067ca:	fb00 f303 	mul.w	r3, r0, r3
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	3332      	adds	r3, #50	@ 0x32
 80067d4:	4a15      	ldr	r2, [pc, #84]	@ (800682c <UART_SetConfig+0x118>)
 80067d6:	fba2 2303 	umull	r2, r3, r2, r3
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067e0:	4419      	add	r1, r3
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	009a      	lsls	r2, r3, #2
 80067ec:	441a      	add	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067f8:	4b0c      	ldr	r3, [pc, #48]	@ (800682c <UART_SetConfig+0x118>)
 80067fa:	fba3 0302 	umull	r0, r3, r3, r2
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	2064      	movs	r0, #100	@ 0x64
 8006802:	fb00 f303 	mul.w	r3, r0, r3
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	3332      	adds	r3, #50	@ 0x32
 800680c:	4a07      	ldr	r2, [pc, #28]	@ (800682c <UART_SetConfig+0x118>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	f003 020f 	and.w	r2, r3, #15
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	440a      	add	r2, r1
 800681e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006820:	bf00      	nop
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40013800 	.word	0x40013800
 800682c:	51eb851f 	.word	0x51eb851f

08006830 <Screen_begin>:
    [CONDITION_YEAR]     = {.max_value = 99, .min_value = 1},
    [CONDITION_HOUR]     = {.max_value = 23, .min_value = 0},
    [CONDITION_MINUTE]   = {.max_value = 59, .min_value = 0}
};

void Screen_begin(UART_HandleTypeDef * UART_Screen) {
 8006830:	b5b0      	push	{r4, r5, r7, lr}
 8006832:	b09e      	sub	sp, #120	@ 0x78
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
    // Init _DWIN UART
	_Screen.Screen_DWIN.pUart = UART_Screen;
 8006838:	4a34      	ldr	r2, [pc, #208]	@ (800690c <Screen_begin+0xdc>)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6013      	str	r3, [r2, #0]

    // add receive function callback
	Screen_init_handler_table(&_Screen);
 800683e:	4833      	ldr	r0, [pc, #204]	@ (800690c <Screen_begin+0xdc>)
 8006840:	f000 fdf0 	bl	8007424 <Screen_init_handler_table>
    DWIN_SetCallback((Dwin_t *)&_Screen,(pListenDWIN)Screen_RX_Callback);
 8006844:	4932      	ldr	r1, [pc, #200]	@ (8006910 <Screen_begin+0xe0>)
 8006846:	4831      	ldr	r0, [pc, #196]	@ (800690c <Screen_begin+0xdc>)
 8006848:	f002 fadb 	bl	8008e02 <DWIN_SetCallback>

    Screen_Init_Variable(&_Screen);
 800684c:	482f      	ldr	r0, [pc, #188]	@ (800690c <Screen_begin+0xdc>)
 800684e:	f001 f8a1 	bl	8007994 <Screen_Init_Variable>

    // Init screen keyboard     
    _Screen.Screen_keyboard.VP_Text = 0xFFFF;
 8006852:	4b2e      	ldr	r3, [pc, #184]	@ (800690c <Screen_begin+0xdc>)
 8006854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006858:	819a      	strh	r2, [r3, #12]
    _Screen.Screen_keyboard.Index_String = 0;
 800685a:	4b2c      	ldr	r3, [pc, #176]	@ (800690c <Screen_begin+0xdc>)
 800685c:	2200      	movs	r2, #0
 800685e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    _Screen.Screen_keyboard.Caplock = 0;
 8006862:	4b2a      	ldr	r3, [pc, #168]	@ (800690c <Screen_begin+0xdc>)
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    DWIN_SetPage((Dwin_t *)&_Screen,DWINPAGE_MAIN);  // Go to first page when start
 800686a:	2165      	movs	r1, #101	@ 0x65
 800686c:	4827      	ldr	r0, [pc, #156]	@ (800690c <Screen_begin+0xdc>)
 800686e:	f002 f976 	bl	8008b5e <DWIN_SetPage>

    _Screen.pre_page = 106;
 8006872:	4b26      	ldr	r3, [pc, #152]	@ (800690c <Screen_begin+0xdc>)
 8006874:	226a      	movs	r2, #106	@ 0x6a
 8006876:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134

    char* data_pin[] = {
 800687a:	4b26      	ldr	r3, [pc, #152]	@ (8006914 <Screen_begin+0xe4>)
 800687c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8006880:	461d      	mov	r5, r3
 8006882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800688a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800688c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800688e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    "VEE", "INH", "Z", "Y", "X", "VSS", "B", "C",
        "A", "VCC", "X0", "X1", "Y0", "Y1", "Z0", "Z1"
    };

    Screen_SetInfo_Pin(&_Screen,data_pin);
 8006896:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800689a:	4619      	mov	r1, r3
 800689c:	481b      	ldr	r0, [pc, #108]	@ (800690c <Screen_begin+0xdc>)
 800689e:	f001 fa75 	bl	8007d8c <Screen_SetInfo_Pin>

    char *data_test[] = {
 80068a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006918 <Screen_begin+0xe8>)
 80068a4:	f107 0418 	add.w	r4, r7, #24
 80068a8:	461d      	mov	r5, r3
 80068aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80068b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        "11L1000G1011111V",
        "10L1100G1101111V",
        "11L0100G1111111V"
    };

    Screen_GetIcon_Pin(&_Screen,data_test);
 80068b6:	f107 0318 	add.w	r3, r7, #24
 80068ba:	4619      	mov	r1, r3
 80068bc:	4813      	ldr	r0, [pc, #76]	@ (800690c <Screen_begin+0xdc>)
 80068be:	f000 ff11 	bl	80076e4 <Screen_GetIcon_Pin>
    DWIN_SetArray_Icon(&_Screen,VP_ICON_DIRECTION_PIN,_Screen.IC_Testerx[PROGRAM_TEST1].config_pin,16);
 80068c2:	4b12      	ldr	r3, [pc, #72]	@ (800690c <Screen_begin+0xdc>)
 80068c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068c6:	2310      	movs	r3, #16
 80068c8:	f244 0150 	movw	r1, #16464	@ 0x4050
 80068cc:	480f      	ldr	r0, [pc, #60]	@ (800690c <Screen_begin+0xdc>)
 80068ce:	f002 fa1c 	bl	8008d0a <DWIN_SetArray_Icon>
    Screen_GetIcon_Result(&_Screen,data_test);
 80068d2:	f107 0318 	add.w	r3, r7, #24
 80068d6:	4619      	mov	r1, r3
 80068d8:	480c      	ldr	r0, [pc, #48]	@ (800690c <Screen_begin+0xdc>)
 80068da:	f000 ff8c 	bl	80077f6 <Screen_GetIcon_Result>
    DWIN_SetArray_Icon(&_Screen,VP_ICON_RESULT,_Screen.IC_Testerx[PROGRAM_TEST1].data_result[0],16);
 80068de:	4b0b      	ldr	r3, [pc, #44]	@ (800690c <Screen_begin+0xdc>)
 80068e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	2310      	movs	r3, #16
 80068e6:	f244 1150 	movw	r1, #16720	@ 0x4150
 80068ea:	4808      	ldr	r0, [pc, #32]	@ (800690c <Screen_begin+0xdc>)
 80068ec:	f002 fa0d 	bl	8008d0a <DWIN_SetArray_Icon>
    // uint8_t data_clock2[] = {1,0,1,0,1,0,1,0,1,0};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1800,25,200,data_clock2,sizeof(data_clock2));
    // HAL_Delay(200);
    // uint8_t data_clock3[] = {0,1,0,1,0,1,0,1,0,1,1,1};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1800,25,200,data_clock3,sizeof(data_clock3));
    uint8_t data[15] = {1,1,0,0,1,0,0,1,1,0,0,0,1,1,0};
 80068f0:	4b0a      	ldr	r3, [pc, #40]	@ (800691c <Screen_begin+0xec>)
 80068f2:	f107 0408 	add.w	r4, r7, #8
 80068f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068f8:	c407      	stmia	r4!, {r0, r1, r2}
 80068fa:	8023      	strh	r3, [r4, #0]
 80068fc:	3402      	adds	r4, #2
 80068fe:	0c1b      	lsrs	r3, r3, #16
 8006900:	7023      	strb	r3, [r4, #0]
    //     DWIN_Create_Basic_line((Dwin_t *)&_Screen,Address_show,X_Coordinate,Y_Coordinate,data,15);
    //     Address_show = Address_show + 0x200;
    //     Y_Coordinate = Y_Coordinate + 30;
    //     HAL_Delay(500);
    // }
}
 8006902:	bf00      	nop
 8006904:	3778      	adds	r7, #120	@ 0x78
 8006906:	46bd      	mov	sp, r7
 8006908:	bdb0      	pop	{r4, r5, r7, pc}
 800690a:	bf00      	nop
 800690c:	200004d0 	.word	0x200004d0
 8006910:	0800693d 	.word	0x0800693d
 8006914:	0800ddd8 	.word	0x0800ddd8
 8006918:	0800deb8 	.word	0x0800deb8
 800691c:	0800ded8 	.word	0x0800ded8

08006920 <Screen_RX_data>:

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	4803      	ldr	r0, [pc, #12]	@ (8006938 <Screen_RX_data+0x18>)
 800692c:	f002 fa76 	bl	8008e1c <DWIN_Listen>
}
 8006930:	bf00      	nop
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	200004d0 	.word	0x200004d0

0800693c <Screen_RX_Callback>:

void Screen_RX_Callback(uint16_t Vpaddress, uint8_t lowByte, uint8_t highByte) { 
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	80fb      	strh	r3, [r7, #6]
 8006946:	460b      	mov	r3, r1
 8006948:	717b      	strb	r3, [r7, #5]
 800694a:	4613      	mov	r3, r2
 800694c:	713b      	strb	r3, [r7, #4]
    screen_event_t screen_event;
    // If the VP is FFFF -> skip
    if (Vpaddress != 0xFFFF) {
 800694e:	88fb      	ldrh	r3, [r7, #6]
 8006950:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006954:	4293      	cmp	r3, r2
 8006956:	d01b      	beq.n	8006990 <Screen_RX_Callback+0x54>
        screen_event.event = Index_VP(Vpaddress,lookup_VP_SIG,SIZE_LOOKUP_VP_SIG);
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	2207      	movs	r2, #7
 800695c:	490e      	ldr	r1, [pc, #56]	@ (8006998 <Screen_RX_Callback+0x5c>)
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fd24 	bl	80073ac <Index_VP>
 8006964:	4603      	mov	r3, r0
 8006966:	723b      	strb	r3, [r7, #8]
        screen_event.action = lowByte;
 8006968:	797b      	ldrb	r3, [r7, #5]
 800696a:	727b      	strb	r3, [r7, #9]
        screen_event.data = highByte;
 800696c:	793b      	ldrb	r3, [r7, #4]
 800696e:	72bb      	strb	r3, [r7, #10]
        screen_event.keyvalue = (uint16_t)((highByte<<8) | (lowByte&0xFF));
 8006970:	793b      	ldrb	r3, [r7, #4]
 8006972:	b21b      	sxth	r3, r3
 8006974:	021b      	lsls	r3, r3, #8
 8006976:	b21a      	sxth	r2, r3
 8006978:	797b      	ldrb	r3, [r7, #5]
 800697a:	b21b      	sxth	r3, r3
 800697c:	4313      	orrs	r3, r2
 800697e:	b21b      	sxth	r3, r3
 8006980:	b29b      	uxth	r3, r3
 8006982:	81bb      	strh	r3, [r7, #12]

        // call to respective function
        Screen_excute_RX_function(&_Screen,&screen_event);
 8006984:	f107 0308 	add.w	r3, r7, #8
 8006988:	4619      	mov	r1, r3
 800698a:	4804      	ldr	r0, [pc, #16]	@ (800699c <Screen_RX_Callback+0x60>)
 800698c:	f000 fdca 	bl	8007524 <Screen_excute_RX_function>
    }
}
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	2000000c 	.word	0x2000000c
 800699c:	200004d0 	.word	0x200004d0

080069a0 <Navigation_setting_page>:


#pragma region CALLBACK FUNCTION VP ADRRESS 

void Navigation_setting_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
 80069aa:	2174      	movs	r1, #116	@ 0x74
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f002 f8d6 	bl	8008b5e <DWIN_SetPage>
}
 80069b2:	bf00      	nop
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <Navigation_home_page>:

void Navigation_home_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
    uint8_t current_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80069ca:	4619      	mov	r1, r3
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	460b      	mov	r3, r1
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	334a      	adds	r3, #74	@ 0x4a
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	73fb      	strb	r3, [r7, #15]
    UNUSED(current_program);
    // Show data

    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80069e4:	4619      	mov	r1, r3
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	3349      	adds	r3, #73	@ 0x49
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f002 f8b0 	bl	8008b5e <DWIN_SetPage>
}   
 80069fe:	bf00      	nop
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
	...

08006a08 <Navigation_setting_program>:

void Navigation_setting_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]

    // Switch page
    // DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
    /* Get the setting page */
    screen_obj->page_setting = DWINPAGE_SETTING_PROGRAM;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	226b      	movs	r2, #107	@ 0x6b
 8006a16:	f883 2137 	strb.w	r2, [r3, #311]	@ 0x137
    // Switch page password 
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password,"",strlen(""));
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	4a06      	ldr	r2, [pc, #24]	@ (8006a38 <Navigation_setting_program+0x30>)
 8006a1e:	f249 5160 	movw	r1, #38240	@ 0x9560
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f002 f8c2 	bl	8008bac <DWIN_SetText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 8006a28:	216e      	movs	r1, #110	@ 0x6e
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f002 f897 	bl	8008b5e <DWIN_SetPage>
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	0800dee8 	.word	0x0800dee8

08006a3c <Navigation_setting_time>:

void Navigation_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_TIME);
 8006a46:	2176      	movs	r1, #118	@ 0x76
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f002 f888 	bl	8008b5e <DWIN_SetPage>
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <Navigation_setting_wifi>:

void Navigation_setting_wifi(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006a56:	b590      	push	{r4, r7, lr}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
    /* show data */
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Wifi,screen_obj->Wifi_setting.Name_Wifi,strlen(screen_obj->Wifi_setting.Name_Wifi));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f103 04f4 	add.w	r4, r3, #244	@ 0xf4
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	33f4      	adds	r3, #244	@ 0xf4
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7f9 fb7a 	bl	8000164 <strlen>
 8006a70:	4603      	mov	r3, r0
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	4622      	mov	r2, r4
 8006a76:	f249 51a0 	movw	r1, #38304	@ 0x95a0
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f002 f896 	bl	8008bac <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password_Wifi,screen_obj->Wifi_setting.Password_Wifi,strlen(screen_obj->Wifi_setting.Password_Wifi));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f503 7489 	add.w	r4, r3, #274	@ 0x112
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f503 7389 	add.w	r3, r3, #274	@ 0x112
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7f9 fb69 	bl	8000164 <strlen>
 8006a92:	4603      	mov	r3, r0
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	4622      	mov	r2, r4
 8006a98:	f249 51d0 	movw	r1, #38352	@ 0x95d0
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f002 f885 	bl	8008bac <DWIN_SetText>

    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 8006aa2:	2175      	movs	r1, #117	@ 0x75
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f002 f85a 	bl	8008b5e <DWIN_SetPage>
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd90      	pop	{r4, r7, pc}

08006ab2 <Navigation_modify_program>:

void Navigation_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006ab2:	b590      	push	{r4, r7, lr}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_Program_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	1a5b      	subs	r3, r3, r1
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	3384      	adds	r3, #132	@ 0x84
 8006ad2:	681c      	ldr	r4, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8006ada:	4619      	mov	r1, r3
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	1a5b      	subs	r3, r3, r1
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	3384      	adds	r3, #132	@ 0x84
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7f9 fb39 	bl	8000164 <strlen>
 8006af2:	4603      	mov	r3, r0
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	4622      	mov	r2, r4
 8006af8:	f44f 4115 	mov.w	r1, #38144	@ 0x9500
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f002 f855 	bl	8008bac <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8006b08:	4619      	mov	r1, r3
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	1a5b      	subs	r3, r3, r1
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	3388      	adds	r3, #136	@ 0x88
 8006b18:	681c      	ldr	r4, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8006b20:	4619      	mov	r1, r3
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	1a5b      	subs	r3, r3, r1
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	3388      	adds	r3, #136	@ 0x88
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7f9 fb16 	bl	8000164 <strlen>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	4622      	mov	r2, r4
 8006b3e:	f249 5120 	movw	r1, #38176	@ 0x9520
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f002 f832 	bl	8008bac <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8006b4e:	4619      	mov	r1, r3
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	460b      	mov	r3, r1
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	1a5b      	subs	r3, r3, r1
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3390      	adds	r3, #144	@ 0x90
 8006b5e:	681c      	ldr	r4, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8006b66:	4619      	mov	r1, r3
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	1a5b      	subs	r3, r3, r1
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	3390      	adds	r3, #144	@ 0x90
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7f9 faf3 	bl	8000164 <strlen>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	4622      	mov	r2, r4
 8006b84:	f249 5140 	movw	r1, #38208	@ 0x9540
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f002 f80f 	bl	8008bac <DWIN_SetText>
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 8006b8e:	216c      	movs	r1, #108	@ 0x6c
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 ffe4 	bl	8008b5e <DWIN_SetPage>
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd90      	pop	{r4, r7, pc}
	...

08006ba0 <Navigation_Change_MainPage>:

void Navigation_Change_MainPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006ba0:	b590      	push	{r4, r7, lr}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
    // Change current device
    if (screen_event->data == DATA_NEXT_MAINPAGE) {
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	789b      	ldrb	r3, [r3, #2]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d111      	bne.n	8006bd6 <Navigation_Change_MainPage+0x36>
        screen_obj->curr_device++;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006bb8:	3301      	adds	r3, #1
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
        if (screen_obj->curr_device == MAX_DEVICE) {
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d119      	bne.n	8006c00 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_1;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
 8006bd4:	e014      	b.n	8006c00 <Navigation_Change_MainPage+0x60>
        }
    } else if (screen_event->data == DATA_PREV_MAINPAGE) {
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	789b      	ldrb	r3, [r3, #2]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d110      	bne.n	8006c00 <Navigation_Change_MainPage+0x60>
        screen_obj->curr_device--;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
        if (screen_obj->curr_device == 255 ) {
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006bf4:	2bff      	cmp	r3, #255	@ 0xff
 8006bf6:	d103      	bne.n	8006c00 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_3;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
        }
    }
    uint8_t curr_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006c06:	4619      	mov	r1, r3
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	334a      	adds	r3, #74	@ 0x4a
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	73fb      	strb	r3, [r7, #15]
    /* Show data with correspond device index */
    switch (screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain) {
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006c20:	4619      	mov	r1, r3
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	440b      	add	r3, r1
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	3349      	adds	r3, #73	@ 0x49
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	3b64      	subs	r3, #100	@ 0x64
 8006c34:	2b0b      	cmp	r3, #11
 8006c36:	d857      	bhi.n	8006ce8 <Navigation_Change_MainPage+0x148>
 8006c38:	a201      	add	r2, pc, #4	@ (adr r2, 8006c40 <Navigation_Change_MainPage+0xa0>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006ce7 	.word	0x08006ce7
 8006c44:	08006c71 	.word	0x08006c71
 8006c48:	08006ce7 	.word	0x08006ce7
 8006c4c:	08006ce9 	.word	0x08006ce9
 8006c50:	08006ce9 	.word	0x08006ce9
 8006c54:	08006ce9 	.word	0x08006ce9
 8006c58:	08006ce9 	.word	0x08006ce9
 8006c5c:	08006ce9 	.word	0x08006ce9
 8006c60:	08006ce9 	.word	0x08006ce9
 8006c64:	08006ce9 	.word	0x08006ce9
 8006c68:	08006ce9 	.word	0x08006ce9
 8006c6c:	08006ce7 	.word	0x08006ce7
        case DWINPAGE_MAIN : {
            /* Show info */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006c76:	4619      	mov	r1, r3
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	440b      	add	r3, r1
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	334c      	adds	r3, #76	@ 0x4c
 8006c86:	681c      	ldr	r4, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006c8e:	4619      	mov	r1, r3
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	460b      	mov	r3, r1
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	334c      	adds	r3, #76	@ 0x4c
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7f9 fa5f 	bl	8000164 <strlen>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	4622      	mov	r2, r4
 8006cac:	f249 3150 	movw	r1, #37712	@ 0x9350
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 ff7b 	bl	8008bac <DWIN_SetText>
            DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	334b      	adds	r3, #75	@ 0x4b
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 ffeb 	bl	8008cb0 <DWIN_SetVariable_Icon>
            Screen_ShowData_Mainpage(screen_obj,curr_program);
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 ff78 	bl	8007bd4 <Screen_ShowData_Mainpage>
        } break;
 8006ce4:	e000      	b.n	8006ce8 <Navigation_Change_MainPage+0x148>
        case DWINPAGE_MAIN_FINISH: {

        } break;
 8006ce6:	bf00      	nop
        } break;
        case DWINPAGE_MAIN_GRAPH: {

        } break;
    }
}
 8006ce8:	bf00      	nop
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd90      	pop	{r4, r7, pc}

08006cf0 <Navigation_Change_CaseTest>:

void Navigation_Change_CaseTest(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08e      	sub	sp, #56	@ 0x38
 8006cf4:	af02      	add	r7, sp, #8
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006d00:	4619      	mov	r1, r3
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	440b      	add	r3, r1
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	334a      	adds	r3, #74	@ 0x4a
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	4619      	mov	r1, r3
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	460b      	mov	r3, r1
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	1a5b      	subs	r3, r3, r1
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	3394      	adds	r3, #148	@ 0x94
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006d2e:	4619      	mov	r1, r3
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	334a      	adds	r3, #74	@ 0x4a
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 8006d44:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	1a9b      	subs	r3, r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	440b      	add	r3, r1
 8006d54:	3395      	adds	r3, #149	@ 0x95
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    char ShowCase_String[30];
    // Change current case
    if (screen_event->data == DATA_PREV_CASE) {
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	789b      	ldrb	r3, [r3, #2]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d125      	bne.n	8006db0 <Navigation_Change_CaseTest+0xc0>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	3348      	adds	r3, #72	@ 0x48
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d044      	beq.n	8006e0a <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006d86:	461a      	mov	r2, r3
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	440b      	add	r3, r1
 8006d94:	3348      	adds	r3, #72	@ 0x48
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b2d8      	uxtb	r0, r3
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	440b      	add	r3, r1
 8006da8:	3348      	adds	r3, #72	@ 0x48
 8006daa:	4602      	mov	r2, r0
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	e02c      	b.n	8006e0a <Navigation_Change_CaseTest+0x11a>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	789b      	ldrb	r3, [r3, #2]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d128      	bne.n	8006e0a <Navigation_Change_CaseTest+0x11a>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < (num_case - 1)) {
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	3348      	adds	r3, #72	@ 0x48
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	da16      	bge.n	8006e0a <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006de2:	461a      	mov	r2, r3
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	3348      	adds	r3, #72	@ 0x48
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	3301      	adds	r3, #1
 8006df6:	b2d8      	uxtb	r0, r3
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	3348      	adds	r3, #72	@ 0x48
 8006e06:	4602      	mov	r2, r0
 8006e08:	701a      	strb	r2, [r3, #0]
        }
    }

    /* Show data */
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1,num_case);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006e10:	4619      	mov	r1, r3
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	440b      	add	r3, r1
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	3348      	adds	r3, #72	@ 0x48
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e28:	f107 000c 	add.w	r0, r7, #12
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	4a1a      	ldr	r2, [pc, #104]	@ (8006e9c <Navigation_Change_CaseTest+0x1ac>)
 8006e32:	211e      	movs	r1, #30
 8006e34:	f004 f954 	bl	800b0e0 <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 8006e38:	f107 030c 	add.w	r3, r7, #12
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7f9 f991 	bl	8000164 <strlen>
 8006e42:	4603      	mov	r3, r0
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f107 020c 	add.w	r2, r7, #12
 8006e4a:	f249 3180 	movw	r1, #37760	@ 0x9380
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 feac 	bl	8008bac <DWIN_SetText>
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_RESULT,_Screen.IC_Testerx[selectedProgram].data_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case],num_pin);
 8006e54:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8006e58:	4911      	ldr	r1, [pc, #68]	@ (8006ea0 <Navigation_Change_CaseTest+0x1b0>)
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	3354      	adds	r3, #84	@ 0x54
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006e6e:	4618      	mov	r0, r3
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	4603      	mov	r3, r0
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4403      	add	r3, r0
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	440b      	add	r3, r1
 8006e7c:	3348      	adds	r3, #72	@ 0x48
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006e8a:	f244 1150 	movw	r1, #16720	@ 0x4150
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 ff3b 	bl	8008d0a <DWIN_SetArray_Icon>
}
 8006e94:	bf00      	nop
 8006e96:	3730      	adds	r7, #48	@ 0x30
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	0800deec 	.word	0x0800deec
 8006ea0:	200004d0 	.word	0x200004d0

08006ea4 <ON_OFF_Button>:

void Navigation_Next_PrevPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {

}

void ON_OFF_Button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
    // do sth
    screen_obj->IC_Testerx[screen_obj->curr_device].state = !screen_obj->IC_Testerx[screen_obj->curr_device].state;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	334b      	adds	r3, #75	@ 0x4b
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bf14      	ite	ne
 8006eca:	2301      	movne	r3, #1
 8006ecc:	2300      	moveq	r3, #0
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f083 0301 	eor.w	r3, r3, #1
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	b2d8      	uxtb	r0, r3
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	334b      	adds	r3, #75	@ 0x4b
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	701a      	strb	r2, [r3, #0]
    // change icon
    // DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ON_OFF_Icon_1,ON_ICON);
    //    HAL_Delay(1000);
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006f00:	4619      	mov	r1, r3
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	334b      	adds	r3, #75	@ 0x4b
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 fec9 	bl	8008cb0 <DWIN_SetVariable_Icon>
    
    OS_task_post_event(AO_task_can_bus,SEND_DATA_CAN_BUS,(uint8_t *)0,0);
 8006f1e:	4b05      	ldr	r3, [pc, #20]	@ (8006f34 <ON_OFF_Button+0x90>)
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	2300      	movs	r3, #0
 8006f24:	2200      	movs	r2, #0
 8006f26:	2100      	movs	r1, #0
 8006f28:	f002 f86a 	bl	8009000 <OS_task_post_event>
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	0800e234 	.word	0x0800e234

08006f38 <select_running_program>:

void select_running_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
    uint8_t programID = screen_event->data; // Get new index program
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	789b      	ldrb	r3, [r3, #2]
 8006f46:	73fb      	strb	r3, [r7, #15]

    /* Show data correspond with new index program */
    Screen_ShowData_Mainpage(screen_obj,programID);
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fe41 	bl	8007bd4 <Screen_ShowData_Mainpage>
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <select_modify_program>:

void select_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006f5c:	b5b0      	push	{r4, r5, r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
    // Get the index modify program 
    uint8_t index_program = screen_event->data;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	789b      	ldrb	r3, [r3, #2]
 8006f6a:	75fb      	strb	r3, [r7, #23]
    screen_obj->modify_program_index = index_program;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	7dfa      	ldrb	r2, [r7, #23]
 8006f70:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 8006f74:	7dfa      	ldrb	r2, [r7, #23]
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	1a9b      	subs	r3, r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	440b      	add	r3, r1
 8006f82:	3388      	adds	r3, #136	@ 0x88
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7f9 f8ec 	bl	8000164 <strlen>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	3309      	adds	r3, #9
 8006f92:	75bb      	strb	r3, [r7, #22]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 8006f94:	7dfa      	ldrb	r2, [r7, #23]
 8006f96:	6879      	ldr	r1, [r7, #4]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	1a9b      	subs	r3, r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	3390      	adds	r3, #144	@ 0x90
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7f9 f8dc 	bl	8000164 <strlen>
 8006fac:	4603      	mov	r3, r0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	330f      	adds	r3, #15
 8006fb2:	757b      	strb	r3, [r7, #21]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8006fb4:	7dbb      	ldrb	r3, [r7, #22]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f002 fa31 	bl	8009420 <malloc>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	613b      	str	r3, [r7, #16]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 8006fc2:	7d7b      	ldrb	r3, [r7, #21]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f002 fa2a 	bl	8009420 <malloc>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	60fb      	str	r3, [r7, #12]

    strcpy(Text_Name_IC,"IC Name: ");
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	491f      	ldr	r1, [pc, #124]	@ (8007050 <select_modify_program+0xf4>)
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	cb03      	ldmia	r3!, {r0, r1}
 8006fda:	6010      	str	r0, [r2, #0]
 8006fdc:	6051      	str	r1, [r2, #4]
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 8006fe2:	7dfa      	ldrb	r2, [r7, #23]
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	1a9b      	subs	r3, r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	3388      	adds	r3, #136	@ 0x88
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6938      	ldr	r0, [r7, #16]
 8006ff8:	f004 f9aa 	bl	800b350 <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4a15      	ldr	r2, [pc, #84]	@ (8007054 <select_modify_program+0xf8>)
 8007000:	461c      	mov	r4, r3
 8007002:	4615      	mov	r5, r2
 8007004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007006:	6020      	str	r0, [r4, #0]
 8007008:	6061      	str	r1, [r4, #4]
 800700a:	60a2      	str	r2, [r4, #8]
 800700c:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);
 800700e:	7dfa      	ldrb	r2, [r7, #23]
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	1a9b      	subs	r3, r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	3390      	adds	r3, #144	@ 0x90
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4619      	mov	r1, r3
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f004 f994 	bl	800b350 <strcat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 8007028:	7dbb      	ldrb	r3, [r7, #22]
 800702a:	b29b      	uxth	r3, r3
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	f249 5120 	movw	r1, #38176	@ 0x9520
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f001 fdba 	bl	8008bac <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 8007038:	7d7b      	ldrb	r3, [r7, #21]
 800703a:	b29b      	uxth	r3, r3
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	f249 5140 	movw	r1, #38208	@ 0x9540
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fdb2 	bl	8008bac <DWIN_SetText>
}
 8007048:	bf00      	nop
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bdb0      	pop	{r4, r5, r7, pc}
 8007050:	0800def8 	.word	0x0800def8
 8007054:	0800df04 	.word	0x0800df04

08007058 <Navigation_num_keyboard>:

void Navigation_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
    //char TypeData_String[20] = {0};
    //char UnitData_String[20] = {0};
    // Switch screen keyboard will excute in screen

    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	889a      	ldrh	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	330e      	adds	r3, #14
 8007076:	2232      	movs	r2, #50	@ 0x32
 8007078:	2100      	movs	r1, #0
 800707a:	4618      	mov	r0, r3
 800707c:	f004 f960 	bl	800b340 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f103 020e 	add.w	r2, r3, #14
 8007086:	2332      	movs	r3, #50	@ 0x32
 8007088:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 fd8d 	bl	8008bac <DWIN_SetText>
    // DWIN_SetText((Dwin_t *)screen_obj,VP_ShowType_Keyboard)

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_NUM_KEYBOARD);
 8007092:	216d      	movs	r1, #109	@ 0x6d
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 fd62 	bl	8008b5e <DWIN_SetPage>
}
 800709a:	bf00      	nop
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <Navigation_full_keyboard>:

void Navigation_full_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	889a      	ldrh	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	330e      	adds	r3, #14
 80070c0:	2232      	movs	r2, #50	@ 0x32
 80070c2:	2100      	movs	r1, #0
 80070c4:	4618      	mov	r0, r3
 80070c6:	f004 f93b 	bl	800b340 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f103 020e 	add.w	r2, r3, #14
 80070d0:	2332      	movs	r3, #50	@ 0x32
 80070d2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 fd68 	bl	8008bac <DWIN_SetText>

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_FULL_KEYBOARD);
 80070dc:	2178      	movs	r1, #120	@ 0x78
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 fd3d 	bl	8008b5e <DWIN_SetPage>
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <Save_Information>:

void Save_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]

}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bc80      	pop	{r7}
 80070fe:	4770      	bx	lr

08007100 <Enter_password>:

void Enter_password(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007104:	b087      	sub	sp, #28
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
 800710c:	466b      	mov	r3, sp
 800710e:	461e      	mov	r6, r3
    /* Get the password input */
    uint8_t len = screen_obj->Screen_keyboard.Index_String + 1;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007116:	b2db      	uxtb	r3, r3
 8007118:	3301      	adds	r3, #1
 800711a:	75fb      	strb	r3, [r7, #23]
    char input_pass[len];
 800711c:	7df9      	ldrb	r1, [r7, #23]
 800711e:	460b      	mov	r3, r1
 8007120:	3b01      	subs	r3, #1
 8007122:	613b      	str	r3, [r7, #16]
 8007124:	b2cb      	uxtb	r3, r1
 8007126:	2200      	movs	r2, #0
 8007128:	4698      	mov	r8, r3
 800712a:	4691      	mov	r9, r2
 800712c:	f04f 0200 	mov.w	r2, #0
 8007130:	f04f 0300 	mov.w	r3, #0
 8007134:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007138:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800713c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007140:	b2cb      	uxtb	r3, r1
 8007142:	2200      	movs	r2, #0
 8007144:	461c      	mov	r4, r3
 8007146:	4615      	mov	r5, r2
 8007148:	f04f 0200 	mov.w	r2, #0
 800714c:	f04f 0300 	mov.w	r3, #0
 8007150:	00eb      	lsls	r3, r5, #3
 8007152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007156:	00e2      	lsls	r2, r4, #3
 8007158:	460b      	mov	r3, r1
 800715a:	3307      	adds	r3, #7
 800715c:	08db      	lsrs	r3, r3, #3
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	ebad 0d03 	sub.w	sp, sp, r3
 8007164:	466b      	mov	r3, sp
 8007166:	3300      	adds	r3, #0
 8007168:	60fb      	str	r3, [r7, #12]
    strcpy(input_pass,screen_obj->Screen_keyboard.String);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	330e      	adds	r3, #14
 800716e:	4619      	mov	r1, r3
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f004 f9b2 	bl	800b4da <strcpy>
    /* Check password */
    if (strcmp(input_pass,MACHINE_PASSWORD) == 0) { /* Correct password */
 8007176:	490e      	ldr	r1, [pc, #56]	@ (80071b0 <Enter_password+0xb0>)
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f7f8 ffe9 	bl	8000150 <strcmp>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d107      	bne.n	8007194 <Enter_password+0x94>
        /* Goto setting page */
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->page_setting);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 3137 	ldrb.w	r3, [r3, #311]	@ 0x137
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 fce6 	bl	8008b5e <DWIN_SetPage>
 8007192:	e006      	b.n	80071a2 <Enter_password+0xa2>
    } else {
        /* Show text */
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_Password,INCORRECT_PASSWORD_TEXT,strlen(INCORRECT_PASSWORD_TEXT));
 8007194:	2312      	movs	r3, #18
 8007196:	4a07      	ldr	r2, [pc, #28]	@ (80071b4 <Enter_password+0xb4>)
 8007198:	f249 5180 	movw	r1, #38272	@ 0x9580
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 fd05 	bl	8008bac <DWIN_SetText>
 80071a2:	46b5      	mov	sp, r6
    }
}
 80071a4:	bf00      	nop
 80071a6:	371c      	adds	r7, #28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071ae:	bf00      	nop
 80071b0:	0800df14 	.word	0x0800df14
 80071b4:	0800df1c 	.word	0x0800df1c

080071b8 <Enter_num_keyboard>:

void Enter_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
    uint16_t VP_show = screen_obj->Screen_keyboard.VP_Text;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	899b      	ldrh	r3, [r3, #12]
 80071c6:	81fb      	strh	r3, [r7, #14]
    
    /* Show text to VP */
    DWIN_SetText((Dwin_t *)screen_obj,VP_show,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f103 020e 	add.w	r2, r3, #14
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80071d4:	89f9      	ldrh	r1, [r7, #14]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fce8 	bl	8008bac <DWIN_SetText>

    /* Return page base on VP address */
    switch (VP_show) {
 80071dc:	89fb      	ldrh	r3, [r7, #14]
 80071de:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d032      	beq.n	800724c <Enter_num_keyboard+0x94>
 80071e6:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 80071ea:	4293      	cmp	r3, r2
 80071ec:	dc33      	bgt.n	8007256 <Enter_num_keyboard+0x9e>
 80071ee:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d02a      	beq.n	800724c <Enter_num_keyboard+0x94>
 80071f6:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 80071fa:	4293      	cmp	r3, r2
 80071fc:	dc2b      	bgt.n	8007256 <Enter_num_keyboard+0x9e>
 80071fe:	f249 5260 	movw	r2, #38240	@ 0x9560
 8007202:	4293      	cmp	r3, r2
 8007204:	d013      	beq.n	800722e <Enter_num_keyboard+0x76>
 8007206:	f249 5260 	movw	r2, #38240	@ 0x9560
 800720a:	4293      	cmp	r3, r2
 800720c:	dc23      	bgt.n	8007256 <Enter_num_keyboard+0x9e>
 800720e:	f249 5240 	movw	r2, #38208	@ 0x9540
 8007212:	4293      	cmp	r3, r2
 8007214:	d015      	beq.n	8007242 <Enter_num_keyboard+0x8a>
 8007216:	f249 5240 	movw	r2, #38208	@ 0x9540
 800721a:	4293      	cmp	r3, r2
 800721c:	dc1b      	bgt.n	8007256 <Enter_num_keyboard+0x9e>
 800721e:	f5b3 4f15 	cmp.w	r3, #38144	@ 0x9500
 8007222:	d00e      	beq.n	8007242 <Enter_num_keyboard+0x8a>
 8007224:	f249 5220 	movw	r2, #38176	@ 0x9520
 8007228:	4293      	cmp	r3, r2
 800722a:	d00a      	beq.n	8007242 <Enter_num_keyboard+0x8a>
        } break;
        case VP_Name_Wifi :
        case VP_Password_Wifi : {
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
        } break;
        default: break;
 800722c:	e013      	b.n	8007256 <Enter_num_keyboard+0x9e>
            DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password); /* Clear warning text if any */
 800722e:	f249 5180 	movw	r1, #38272	@ 0x9580
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fd2a 	bl	8008c8c <DWIN_ClearText>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 8007238:	216e      	movs	r1, #110	@ 0x6e
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fc8f 	bl	8008b5e <DWIN_SetPage>
        } break;
 8007240:	e00a      	b.n	8007258 <Enter_num_keyboard+0xa0>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 8007242:	216c      	movs	r1, #108	@ 0x6c
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 fc8a 	bl	8008b5e <DWIN_SetPage>
        } break;
 800724a:	e005      	b.n	8007258 <Enter_num_keyboard+0xa0>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 800724c:	2175      	movs	r1, #117	@ 0x75
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f001 fc85 	bl	8008b5e <DWIN_SetPage>
        } break;
 8007254:	e000      	b.n	8007258 <Enter_num_keyboard+0xa0>
        default: break;
 8007256:	bf00      	nop
    }
}
 8007258:	bf00      	nop
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <Keyboard>:

void Keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
    
    /* The other Functions button */
    if (screen_event->data == 0xF3) { // Delete button
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	789b      	ldrb	r3, [r3, #2]
 800726e:	2bf3      	cmp	r3, #243	@ 0xf3
 8007270:	d10e      	bne.n	8007290 <Keyboard+0x30>
        if (screen_obj->Screen_keyboard.Index_String != 0) {
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 8088 	beq.w	800738e <Keyboard+0x12e>
            --screen_obj->Screen_keyboard.Index_String;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800728e:	e07e      	b.n	800738e <Keyboard+0x12e>
        }
    } else if (screen_event->data == 0xF4) { // Caplock button
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	789b      	ldrb	r3, [r3, #2]
 8007294:	2bf4      	cmp	r3, #244	@ 0xf4
 8007296:	d11a      	bne.n	80072ce <Keyboard+0x6e>
        /* Toggle status Caplock keyboard */
        screen_obj->Screen_keyboard.Caplock = !screen_obj->Screen_keyboard.Caplock; 
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800729e:	2b00      	cmp	r3, #0
 80072a0:	bf14      	ite	ne
 80072a2:	2301      	movne	r3, #1
 80072a4:	2300      	moveq	r3, #0
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	f083 0301 	eor.w	r3, r3, #1
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_CAPLOCK,screen_obj->Screen_keyboard.Caplock);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072c0:	461a      	mov	r2, r3
 80072c2:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 fcf2 	bl	8008cb0 <DWIN_SetVariable_Icon>
 80072cc:	e05f      	b.n	800738e <Keyboard+0x12e>
    } else if (screen_event->data == 0xF2) { // Space button
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	789b      	ldrb	r3, [r3, #2]
 80072d2:	2bf2      	cmp	r3, #242	@ 0xf2
 80072d4:	d05b      	beq.n	800738e <Keyboard+0x12e>
        // screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = 32;
    } else if (screen_event->data == 0xF1) { // Enter button
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	789b      	ldrb	r3, [r3, #2]
 80072da:	2bf1      	cmp	r3, #241	@ 0xf1
 80072dc:	d118      	bne.n	8007310 <Keyboard+0xb0>
        // Check if the data is valid
        if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f960 	bl	80075a4 <Screen_CheckInput_Keyboard>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d151      	bne.n	800738e <Keyboard+0x12e>
            // Show data input to VP 
            DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	8999      	ldrh	r1, [r3, #12]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f103 020e 	add.w	r2, r3, #14
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 fc56 	bl	8008bac <DWIN_SetText>
            DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 fc28 	bl	8008b5e <DWIN_SetPage>
 800730e:	e03e      	b.n	800738e <Keyboard+0x12e>
        }
    }
    /* the data value is the character input -> add to string */
    else if (screen_event->data >= 0x41 && screen_event->data <= 0x5A) { // letter need check Caplock
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	789b      	ldrb	r3, [r3, #2]
 8007314:	2b40      	cmp	r3, #64	@ 0x40
 8007316:	d92c      	bls.n	8007372 <Keyboard+0x112>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	789b      	ldrb	r3, [r3, #2]
 800731c:	2b5a      	cmp	r3, #90	@ 0x5a
 800731e:	d828      	bhi.n	8007372 <Keyboard+0x112>
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007326:	f083 0301 	eor.w	r3, r3, #1
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d011      	beq.n	8007354 <Keyboard+0xf4>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data + 0x20;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	789a      	ldrb	r2, [r3, #2]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800733a:	1c59      	adds	r1, r3, #1
 800733c:	b288      	uxth	r0, r1
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	f8a1 0040 	strh.w	r0, [r1, #64]	@ 0x40
 8007344:	4619      	mov	r1, r3
 8007346:	f102 0320 	add.w	r3, r2, #32
 800734a:	b2da      	uxtb	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	440b      	add	r3, r1
 8007350:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8007352:	e01c      	b.n	800738e <Keyboard+0x12e>
        } else {
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	b291      	uxth	r1, r2
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 8007364:	4619      	mov	r1, r3
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	789a      	ldrb	r2, [r3, #2]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	440b      	add	r3, r1
 800736e:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8007370:	e00d      	b.n	800738e <Keyboard+0x12e>
        }
    } else {
        screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	b291      	uxth	r1, r2
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 8007382:	4619      	mov	r1, r3
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	789a      	ldrb	r2, [r3, #2]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	440b      	add	r3, r1
 800738c:	739a      	strb	r2, [r3, #14]
    }

    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f103 020e 	add.w	r2, r3, #14
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800739a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f001 fc04 	bl	8008bac <DWIN_SetText>
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <Index_VP>:
#pragma endregion CALLBACK FUNCTION VP ADRRESS 

#pragma region FUNCTION EXCUTE SCREEN

// binary search index of VP address
uint8_t Index_VP(uint16_t vp, VP_item* VP_array, uint8_t Size_array) {
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	4603      	mov	r3, r0
 80073b4:	6039      	str	r1, [r7, #0]
 80073b6:	80fb      	strh	r3, [r7, #6]
 80073b8:	4613      	mov	r3, r2
 80073ba:	717b      	strb	r3, [r7, #5]
    int left = 0;
 80073bc:	2300      	movs	r3, #0
 80073be:	617b      	str	r3, [r7, #20]
    int right = Size_array - 1;
 80073c0:	797b      	ldrb	r3, [r7, #5]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	613b      	str	r3, [r7, #16]
    int mid;

    while (left <= right) {
 80073c6:	e023      	b.n	8007410 <Index_VP+0x64>
        mid = (left + right) / 2;
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	4413      	add	r3, r2
 80073ce:	0fda      	lsrs	r2, r3, #31
 80073d0:	4413      	add	r3, r2
 80073d2:	105b      	asrs	r3, r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]
        if (VP_array[mid].VP_address == vp) {
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	4413      	add	r3, r2
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	88fa      	ldrh	r2, [r7, #6]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d105      	bne.n	80073f2 <Index_VP+0x46>
            return VP_array[mid].index;  // Found the vp
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	4413      	add	r3, r2
 80073ee:	789b      	ldrb	r3, [r3, #2]
 80073f0:	e013      	b.n	800741a <Index_VP+0x6e>
        } else if (VP_array[mid].VP_address > vp) {
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4413      	add	r3, r2
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	88fa      	ldrh	r2, [r7, #6]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d203      	bcs.n	800740a <Index_VP+0x5e>
            right = mid - 1;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3b01      	subs	r3, #1
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	e002      	b.n	8007410 <Index_VP+0x64>
        } else {
            left = mid + 1;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3301      	adds	r3, #1
 800740e:	617b      	str	r3, [r7, #20]
    while (left <= right) {
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	429a      	cmp	r2, r3
 8007416:	ddd7      	ble.n	80073c8 <Index_VP+0x1c>
        }
    }

    return 255;  // VP not found
 8007418:	23ff      	movs	r3, #255	@ 0xff
}
 800741a:	4618      	mov	r0, r3
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	bc80      	pop	{r7}
 8007422:	4770      	bx	lr

08007424 <Screen_init_handler_table>:

void Screen_init_handler_table(Screen_t *const obj_screen) {
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
                                                                a_handler_full_keyboard,
                                                                a_handler_save_sig,
                                                                a_handler_enter_sig };

    // Assign the callback function to handler table
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PAGE]         = Navigation_setting_page ;
 800742c:	4b2b      	ldr	r3, [pc, #172]	@ (80074dc <Screen_init_handler_table+0xb8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a2b      	ldr	r2, [pc, #172]	@ (80074e0 <Screen_init_handler_table+0xbc>)
 8007432:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_HOME]                 = Navigation_home_page;
 8007434:	4b29      	ldr	r3, [pc, #164]	@ (80074dc <Screen_init_handler_table+0xb8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3308      	adds	r3, #8
 800743a:	4a2a      	ldr	r2, [pc, #168]	@ (80074e4 <Screen_init_handler_table+0xc0>)
 800743c:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PROGRAM]      = Navigation_setting_program;
 800743e:	4b27      	ldr	r3, [pc, #156]	@ (80074dc <Screen_init_handler_table+0xb8>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3314      	adds	r3, #20
 8007444:	4a28      	ldr	r2, [pc, #160]	@ (80074e8 <Screen_init_handler_table+0xc4>)
 8007446:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_TIME]         = Navigation_setting_time;
 8007448:	4b24      	ldr	r3, [pc, #144]	@ (80074dc <Screen_init_handler_table+0xb8>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	330c      	adds	r3, #12
 800744e:	4a27      	ldr	r2, [pc, #156]	@ (80074ec <Screen_init_handler_table+0xc8>)
 8007450:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_WIFI]         = Navigation_setting_wifi;
 8007452:	4b22      	ldr	r3, [pc, #136]	@ (80074dc <Screen_init_handler_table+0xb8>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3310      	adds	r3, #16
 8007458:	4a25      	ldr	r2, [pc, #148]	@ (80074f0 <Screen_init_handler_table+0xcc>)
 800745a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_MODIFY_PROGRAM]       = Navigation_modify_program;
 800745c:	4b1f      	ldr	r3, [pc, #124]	@ (80074dc <Screen_init_handler_table+0xb8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3328      	adds	r3, #40	@ 0x28
 8007462:	4a24      	ldr	r2, [pc, #144]	@ (80074f4 <Screen_init_handler_table+0xd0>)
 8007464:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_MAINPAGE]      = Navigation_Change_MainPage;
 8007466:	4b1d      	ldr	r3, [pc, #116]	@ (80074dc <Screen_init_handler_table+0xb8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3318      	adds	r3, #24
 800746c:	4a22      	ldr	r2, [pc, #136]	@ (80074f8 <Screen_init_handler_table+0xd4>)
 800746e:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASEDATA]      = Navigation_Change_CaseTest;
 8007470:	4b1a      	ldr	r3, [pc, #104]	@ (80074dc <Screen_init_handler_table+0xb8>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	331c      	adds	r3, #28
 8007476:	4a21      	ldr	r2, [pc, #132]	@ (80074fc <Screen_init_handler_table+0xd8>)
 8007478:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SELECTION][ON_OFF_DEV]                       = ON_OFF_Button;
 800747a:	4b18      	ldr	r3, [pc, #96]	@ (80074dc <Screen_init_handler_table+0xb8>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	4a20      	ldr	r2, [pc, #128]	@ (8007500 <Screen_init_handler_table+0xdc>)
 8007480:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SELECT_PROGRAM]                   = select_running_program;
 8007482:	4b16      	ldr	r3, [pc, #88]	@ (80074dc <Screen_init_handler_table+0xb8>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	3304      	adds	r3, #4
 8007488:	4a1e      	ldr	r2, [pc, #120]	@ (8007504 <Screen_init_handler_table+0xe0>)
 800748a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SElECT_MODIFY_PROGRAM]            = select_modify_program;
 800748c:	4b13      	ldr	r3, [pc, #76]	@ (80074dc <Screen_init_handler_table+0xb8>)
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	3308      	adds	r3, #8
 8007492:	4a1d      	ldr	r2, [pc, #116]	@ (8007508 <Screen_init_handler_table+0xe4>)
 8007494:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]     = Navigation_num_keyboard;
 8007496:	4b11      	ldr	r3, [pc, #68]	@ (80074dc <Screen_init_handler_table+0xb8>)
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	4a1c      	ldr	r2, [pc, #112]	@ (800750c <Screen_init_handler_table+0xe8>)
 800749c:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]    = Navigation_full_keyboard;
 800749e:	4b0f      	ldr	r3, [pc, #60]	@ (80074dc <Screen_init_handler_table+0xb8>)
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007510 <Screen_init_handler_table+0xec>)
 80074a4:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SAVE][VALUE_SAVE_INFORMATION]                = Save_Information;
 80074a6:	4b0d      	ldr	r3, [pc, #52]	@ (80074dc <Screen_init_handler_table+0xb8>)
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	4a1a      	ldr	r2, [pc, #104]	@ (8007514 <Screen_init_handler_table+0xf0>)
 80074ac:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_ENTER][ENTER_PASSWORD]                       = Enter_password;
 80074ae:	4b0b      	ldr	r3, [pc, #44]	@ (80074dc <Screen_init_handler_table+0xb8>)
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	4a19      	ldr	r2, [pc, #100]	@ (8007518 <Screen_init_handler_table+0xf4>)
 80074b4:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_NUM_KEYBOARD]                   = Enter_num_keyboard;
 80074b6:	4b09      	ldr	r3, [pc, #36]	@ (80074dc <Screen_init_handler_table+0xb8>)
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	3304      	adds	r3, #4
 80074bc:	4a17      	ldr	r2, [pc, #92]	@ (800751c <Screen_init_handler_table+0xf8>)
 80074be:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD]                     = Keyboard;
 80074c0:	4b06      	ldr	r3, [pc, #24]	@ (80074dc <Screen_init_handler_table+0xb8>)
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	4a16      	ldr	r2, [pc, #88]	@ (8007520 <Screen_init_handler_table+0xfc>)
 80074c6:	601a      	str	r2, [r3, #0]

    // assign handler table to handler table of object
    obj_screen->p_handler_table = (void *)handler_function_table;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a04      	ldr	r2, [pc, #16]	@ (80074dc <Screen_init_handler_table+0xb8>)
 80074cc:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bc80      	pop	{r7}
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	20000028 	.word	0x20000028
 80074e0:	080069a1 	.word	0x080069a1
 80074e4:	080069bb 	.word	0x080069bb
 80074e8:	08006a09 	.word	0x08006a09
 80074ec:	08006a3d 	.word	0x08006a3d
 80074f0:	08006a57 	.word	0x08006a57
 80074f4:	08006ab3 	.word	0x08006ab3
 80074f8:	08006ba1 	.word	0x08006ba1
 80074fc:	08006cf1 	.word	0x08006cf1
 8007500:	08006ea5 	.word	0x08006ea5
 8007504:	08006f39 	.word	0x08006f39
 8007508:	08006f5d 	.word	0x08006f5d
 800750c:	08007059 	.word	0x08007059
 8007510:	080070a3 	.word	0x080070a3
 8007514:	080070ed 	.word	0x080070ed
 8007518:	08007101 	.word	0x08007101
 800751c:	080071b9 	.word	0x080071b9
 8007520:	08007261 	.word	0x08007261

08007524 <Screen_excute_RX_function>:

void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e) {
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
    // do sth ...


	handler_func **handler_function_table = (handler_func **) obj_screen->p_handler_table;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8007534:	60fb      	str	r3, [r7, #12]
    // excute the callback function
    if (screen_e->event == SIG_KEYBOARD) {  // ENVENT KEYBOARD
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b02      	cmp	r3, #2
 800753c:	d107      	bne.n	800754e <Screen_excute_RX_function+0x2a>
        handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD](obj_screen, screen_e);   
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3308      	adds	r3, #8
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	4798      	blx	r3
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
    } else {
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
    }  
}
 800754c:	e025      	b.n	800759a <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_NUM_KEYBOARD) {  // SWTICH TO NUMBER KEYBOARD
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b03      	cmp	r3, #3
 8007554:	d107      	bne.n	8007566 <Screen_excute_RX_function+0x42>
        handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	330c      	adds	r3, #12
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	4798      	blx	r3
}
 8007564:	e019      	b.n	800759a <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2b04      	cmp	r3, #4
 800756c:	d107      	bne.n	800757e <Screen_excute_RX_function+0x5a>
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3310      	adds	r3, #16
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	4798      	blx	r3
}
 800757c:	e00d      	b.n	800759a <Screen_excute_RX_function+0x76>
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	785b      	ldrb	r3, [r3, #1]
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
}
 800759a:	bf00      	nop
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <Screen_CheckInput_Keyboard>:

#pragma endregion FUNCTION EXCUTE SCREEN

#pragma region FUNCTION SCREEN 

Return_Status Screen_CheckInput_Keyboard(Screen_t *const obj_screen) {
 80075a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075a8:	b08d      	sub	sp, #52	@ 0x34
 80075aa:	af02      	add	r7, sp, #8
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	466b      	mov	r3, sp
 80075b0:	461e      	mov	r6, r3
    char string[obj_screen->Screen_keyboard.Index_String];
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 80075b8:	460b      	mov	r3, r1
 80075ba:	3b01      	subs	r3, #1
 80075bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80075be:	b28b      	uxth	r3, r1
 80075c0:	2200      	movs	r2, #0
 80075c2:	4698      	mov	r8, r3
 80075c4:	4691      	mov	r9, r2
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	f04f 0300 	mov.w	r3, #0
 80075ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075da:	b28b      	uxth	r3, r1
 80075dc:	2200      	movs	r2, #0
 80075de:	461c      	mov	r4, r3
 80075e0:	4615      	mov	r5, r2
 80075e2:	f04f 0200 	mov.w	r2, #0
 80075e6:	f04f 0300 	mov.w	r3, #0
 80075ea:	00eb      	lsls	r3, r5, #3
 80075ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075f0:	00e2      	lsls	r2, r4, #3
 80075f2:	460b      	mov	r3, r1
 80075f4:	3307      	adds	r3, #7
 80075f6:	08db      	lsrs	r3, r3, #3
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	ebad 0d03 	sub.w	sp, sp, r3
 80075fe:	ab02      	add	r3, sp, #8
 8007600:	3300      	adds	r3, #0
 8007602:	623b      	str	r3, [r7, #32]
    char warm_string[20] = {0};
 8007604:	f107 0308 	add.w	r3, r7, #8
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	609a      	str	r2, [r3, #8]
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	611a      	str	r2, [r3, #16]
    float data_compare;
    // copy string
    memcpy(string,obj_screen->Screen_keyboard.String,obj_screen->Screen_keyboard.Index_String);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f103 010e 	add.w	r1, r3, #14
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007620:	461a      	mov	r2, r3
 8007622:	6a38      	ldr	r0, [r7, #32]
 8007624:	f003 ff6f 	bl	800b506 <memcpy>
    /* compare data with limit */
    data_compare = atof(string);
 8007628:	6a38      	ldr	r0, [r7, #32]
 800762a:	f001 fef5 	bl	8009418 <atof>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	4610      	mov	r0, r2
 8007634:	4619      	mov	r1, r3
 8007636:	f7f9 fa51 	bl	8000adc <__aeabi_d2f>
 800763a:	4603      	mov	r3, r0
 800763c:	61fb      	str	r3, [r7, #28]
    if (data_compare > obj_screen->Screen_condition->max_value) {
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4619      	mov	r1, r3
 8007646:	69f8      	ldr	r0, [r7, #28]
 8007648:	f7f9 fb04 	bl	8000c54 <__aeabi_fcmpgt>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d019      	beq.n	8007686 <Screen_CheckInput_Keyboard+0xe2>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MAX: %.2f", obj_screen->Screen_condition->max_value);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4618      	mov	r0, r3
 800765a:	f7f8 feef 	bl	800043c <__aeabi_f2d>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	f107 0008 	add.w	r0, r7, #8
 8007666:	e9cd 2300 	strd	r2, r3, [sp]
 800766a:	4a1c      	ldr	r2, [pc, #112]	@ (80076dc <Screen_CheckInput_Keyboard+0x138>)
 800766c:	2114      	movs	r1, #20
 800766e:	f003 fd37 	bl	800b0e0 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 8007672:	f107 0208 	add.w	r2, r7, #8
 8007676:	2314      	movs	r3, #20
 8007678:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 fa95 	bl	8008bac <DWIN_SetText>
        return Status_ERROR;
 8007682:	2300      	movs	r3, #0
 8007684:	e024      	b.n	80076d0 <Screen_CheckInput_Keyboard+0x12c>
    } else if (data_compare < obj_screen->Screen_condition->min_value) {
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	4619      	mov	r1, r3
 800768e:	69f8      	ldr	r0, [r7, #28]
 8007690:	f7f9 fac2 	bl	8000c18 <__aeabi_fcmplt>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d019      	beq.n	80076ce <Screen_CheckInput_Keyboard+0x12a>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MIN: %.2f", obj_screen->Screen_condition->min_value);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7f8 fecb 	bl	800043c <__aeabi_f2d>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	f107 0008 	add.w	r0, r7, #8
 80076ae:	e9cd 2300 	strd	r2, r3, [sp]
 80076b2:	4a0b      	ldr	r2, [pc, #44]	@ (80076e0 <Screen_CheckInput_Keyboard+0x13c>)
 80076b4:	2114      	movs	r1, #20
 80076b6:	f003 fd13 	bl	800b0e0 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 80076ba:	f107 0208 	add.w	r2, r7, #8
 80076be:	2314      	movs	r3, #20
 80076c0:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 fa71 	bl	8008bac <DWIN_SetText>
        return Status_ERROR;
 80076ca:	2300      	movs	r3, #0
 80076cc:	e000      	b.n	80076d0 <Screen_CheckInput_Keyboard+0x12c>
    } 
    return Status_SUCCESS; 
 80076ce:	2301      	movs	r3, #1
 80076d0:	46b5      	mov	sp, r6
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	372c      	adds	r7, #44	@ 0x2c
 80076d6:	46bd      	mov	sp, r7
 80076d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076dc:	0800df30 	.word	0x0800df30
 80076e0:	0800df3c 	.word	0x0800df3c

080076e4 <Screen_GetIcon_Pin>:
 * @brief Function used to setup icon with data test
 * 
 * @param obj_screen : object screen
 * @param data_pin : array 2d data test
 */
void Screen_GetIcon_Pin(Screen_t *const screen_obj, char **data_pin) {
 80076e4:	b590      	push	{r4, r7, lr}
 80076e6:	b0a5      	sub	sp, #148	@ 0x94
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80076f4:	4619      	mov	r1, r3
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	334a      	adds	r3, #74	@ 0x4a
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	4619      	mov	r1, r3
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	460b      	mov	r3, r1
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	1a5b      	subs	r3, r3, r1
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	3395      	adds	r3, #149	@ 0x95
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    
    uint8_t map_array[128] = {0};
 800771c:	f107 030c 	add.w	r3, r7, #12
 8007720:	2280      	movs	r2, #128	@ 0x80
 8007722:	2100      	movs	r1, #0
 8007724:	4618      	mov	r0, r3
 8007726:	f003 fe0b 	bl	800b340 <memset>
    map_array['G'] = ICON_GND;
 800772a:	2302      	movs	r3, #2
 800772c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    map_array['V'] = ICON_VCC;
 8007730:	2303      	movs	r3, #3
 8007732:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = malloc(num_pin * sizeof(uint8_t));
 8007736:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8007740:	461c      	mov	r4, r3
 8007742:	4610      	mov	r0, r2
 8007744:	f001 fe6c 	bl	8009420 <malloc>
 8007748:	4603      	mov	r3, r0
 800774a:	4619      	mov	r1, r3
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	4623      	mov	r3, r4
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4423      	add	r3, r4
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	3350      	adds	r3, #80	@ 0x50
 800775a:	6019      	str	r1, [r3, #0]

    /* Convert data to icon pin config */
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 800775c:	2300      	movs	r3, #0
 800775e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8007762:	e03d      	b.n	80077e0 <Screen_GetIcon_Pin+0xfc>
        if (Pin_x >= 8) {
 8007764:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8007768:	2b07      	cmp	r3, #7
 800776a:	d90c      	bls.n	8007786 <Screen_GetIcon_Pin+0xa2>
            map_array['0'] = ICON_OUTPUT;
 800776c:	2301      	movs	r3, #1
 800776e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_OUTPUT;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_INPUT;
 8007778:	2300      	movs	r3, #0
 800777a:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_INPUT;
 800777e:	2300      	movs	r3, #0
 8007780:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8007784:	e00b      	b.n	800779e <Screen_GetIcon_Pin+0xba>
        } else {
            map_array['0'] = ICON_INPUT;
 8007786:	2300      	movs	r3, #0
 8007788:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_INPUT;
 800778c:	2300      	movs	r3, #0
 800778e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_OUTPUT;
 8007792:	2301      	movs	r3, #1
 8007794:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_OUTPUT;
 8007798:	2301      	movs	r3, #1
 800779a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        }
        screen_obj->IC_Testerx[screen_obj->curr_device].config_pin[Pin_x] = map_array[(uint8_t)(data_pin[0][Pin_x])];
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80077a6:	4413      	add	r3, r2
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80077b2:	4619      	mov	r1, r3
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	460b      	mov	r3, r1
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	440b      	add	r3, r1
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	3350      	adds	r3, #80	@ 0x50
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80077c8:	4413      	add	r3, r2
 80077ca:	f100 0290 	add.w	r2, r0, #144	@ 0x90
 80077ce:	443a      	add	r2, r7
 80077d0:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 80077d4:	701a      	strb	r2, [r3, #0]
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 80077d6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80077da:	3301      	adds	r3, #1
 80077dc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80077e0:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80077e4:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d3bb      	bcc.n	8007764 <Screen_GetIcon_Pin+0x80>
    }
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	3794      	adds	r7, #148	@ 0x94
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd90      	pop	{r4, r7, pc}

080077f6 <Screen_GetIcon_Result>:

void Screen_SetIcon_Pin(Screen_t *const obj_screen) {

}

void Screen_GetIcon_Result(Screen_t *const screen_obj, char **result) {
 80077f6:	b590      	push	{r4, r7, lr}
 80077f8:	b0a5      	sub	sp, #148	@ 0x94
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8007806:	4619      	mov	r1, r3
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	460b      	mov	r3, r1
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	440b      	add	r3, r1
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	334a      	adds	r3, #74	@ 0x4a
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	4619      	mov	r1, r3
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	1a5b      	subs	r3, r3, r1
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	3395      	adds	r3, #149	@ 0x95
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8007834:	4619      	mov	r1, r3
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	460b      	mov	r3, r1
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	440b      	add	r3, r1
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	334a      	adds	r3, #74	@ 0x4a
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	4619      	mov	r1, r3
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	00db      	lsls	r3, r3, #3
 800784e:	1a5b      	subs	r3, r3, r1
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	3394      	adds	r3, #148	@ 0x94
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    uint8_t map_array[128] = {0};
 800785c:	f107 0308 	add.w	r3, r7, #8
 8007860:	2280      	movs	r2, #128	@ 0x80
 8007862:	2100      	movs	r1, #0
 8007864:	4618      	mov	r0, r3
 8007866:	f003 fd6b 	bl	800b340 <memset>
    map_array['0'] = ICON_LOGIC_LOW;
 800786a:	2300      	movs	r3, #0
 800786c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    map_array['1'] = ICON_LOGIC_HIGH;
 8007870:	2301      	movs	r3, #1
 8007872:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    map_array['L'] = ICON_CLOCK_LOW;
 8007876:	2302      	movs	r3, #2
 8007878:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    map_array['H'] = ICON_CLOCK_HIGH;
 800787c:	2303      	movs	r3, #3
 800787e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    map_array['V'] = ICON_LOGIC_NONE;
 8007882:	2304      	movs	r3, #4
 8007884:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    map_array['G'] = ICON_LOGIC_NONE;
 8007888:	2304      	movs	r3, #4
 800788a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].data_result = malloc(num_case * sizeof(char *));
 800788e:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8007892:	009a      	lsls	r2, r3, #2
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 800789a:	461c      	mov	r4, r3
 800789c:	4610      	mov	r0, r2
 800789e:	f001 fdbf 	bl	8009420 <malloc>
 80078a2:	4603      	mov	r3, r0
 80078a4:	4619      	mov	r1, r3
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	4623      	mov	r3, r4
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4423      	add	r3, r4
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	3354      	adds	r3, #84	@ 0x54
 80078b4:	6019      	str	r1, [r3, #0]
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 80078b6:	2300      	movs	r3, #0
 80078b8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80078bc:	e01b      	b.n	80078f6 <Screen_GetIcon_Result+0x100>
        screen_obj->IC_Testerx[screen_obj->curr_device].data_result[Case_x] = malloc(num_pin * sizeof(char));
 80078be:	f897 108c 	ldrb.w	r1, [r7, #140]	@ 0x8c
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80078c8:	4618      	mov	r0, r3
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	4603      	mov	r3, r0
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4403      	add	r3, r0
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	3354      	adds	r3, #84	@ 0x54
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	18d4      	adds	r4, r2, r3
 80078e2:	4608      	mov	r0, r1
 80078e4:	f001 fd9c 	bl	8009420 <malloc>
 80078e8:	4603      	mov	r3, r0
 80078ea:	6023      	str	r3, [r4, #0]
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 80078ec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80078f0:	3301      	adds	r3, #1
 80078f2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80078f6:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80078fa:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80078fe:	429a      	cmp	r2, r3
 8007900:	d3dd      	bcc.n	80078be <Screen_GetIcon_Result+0xc8>
    }

    /* Convert data to icon pin config */
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 8007902:	2300      	movs	r3, #0
 8007904:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8007908:	e038      	b.n	800797c <Screen_GetIcon_Result+0x186>
        for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 800790a:	2300      	movs	r3, #0
 800790c:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8007910:	e029      	b.n	8007966 <Screen_GetIcon_Result+0x170>
        	screen_obj->IC_Testerx[screen_obj->curr_device].data_result[Case_x][Pin_x] = map_array[(uint8_t)(result[Case_x][Pin_x])];
 8007912:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	4413      	add	r3, r2
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8007922:	4413      	add	r3, r2
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	4618      	mov	r0, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 800792e:	4619      	mov	r1, r3
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	460b      	mov	r3, r1
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	440b      	add	r3, r1
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	3354      	adds	r3, #84	@ 0x54
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800794e:	4413      	add	r3, r2
 8007950:	f100 0290 	add.w	r2, r0, #144	@ 0x90
 8007954:	443a      	add	r2, r7
 8007956:	f812 2c88 	ldrb.w	r2, [r2, #-136]
 800795a:	701a      	strb	r2, [r3, #0]
        for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 800795c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8007960:	3301      	adds	r3, #1
 8007962:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8007966:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800796a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800796e:	429a      	cmp	r2, r3
 8007970:	d3cf      	bcc.n	8007912 <Screen_GetIcon_Result+0x11c>
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 8007972:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8007976:	3301      	adds	r3, #1
 8007978:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800797c:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 8007980:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8007984:	429a      	cmp	r2, r3
 8007986:	d3c0      	bcc.n	800790a <Screen_GetIcon_Result+0x114>
        }
    }
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	3794      	adds	r7, #148	@ 0x94
 800798e:	46bd      	mov	sp, r7
 8007990:	bd90      	pop	{r4, r7, pc}
	...

08007994 <Screen_Init_Variable>:

void Screen_Init_Variable(Screen_t *const obj_screen) {
 8007994:	b590      	push	{r4, r7, lr}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
    obj_screen->curr_device = DEVICE_1;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_IC = "74HC4051";
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a76      	ldr	r2, [pc, #472]	@ (8007b80 <Screen_Init_Variable+0x1ec>)
 80079a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC = "Description IC 74HC4051";
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a75      	ldr	r2, [pc, #468]	@ (8007b84 <Screen_Init_Variable+0x1f0>)
 80079b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    obj_screen->Program_Testx[PROGRAM_TEST1].num_IC = "5";
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a74      	ldr	r2, [pc, #464]	@ (8007b88 <Screen_Init_Variable+0x1f4>)
 80079b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    obj_screen->Program_Testx[PROGRAM_TEST2].Name_IC = "74HC4052";
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a73      	ldr	r2, [pc, #460]	@ (8007b8c <Screen_Init_Variable+0x1f8>)
 80079c0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC = "Description IC 74HC4052";
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a72      	ldr	r2, [pc, #456]	@ (8007b90 <Screen_Init_Variable+0x1fc>)
 80079c8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    obj_screen->Program_Testx[PROGRAM_TEST2].num_IC = "10";
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a71      	ldr	r2, [pc, #452]	@ (8007b94 <Screen_Init_Variable+0x200>)
 80079d0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

    obj_screen->Program_Testx[PROGRAM_TEST3].Name_IC = "74HC4053";
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a70      	ldr	r2, [pc, #448]	@ (8007b98 <Screen_Init_Variable+0x204>)
 80079d8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC = "Description IC 74HC4053";
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a6f      	ldr	r2, [pc, #444]	@ (8007b9c <Screen_Init_Variable+0x208>)
 80079e0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    obj_screen->Program_Testx[PROGRAM_TEST3].num_IC = "15";
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a6e      	ldr	r2, [pc, #440]	@ (8007ba0 <Screen_Init_Variable+0x20c>)
 80079e8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    obj_screen->Program_Testx[PROGRAM_TEST4].Name_IC = "74HC4054";
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a6d      	ldr	r2, [pc, #436]	@ (8007ba4 <Screen_Init_Variable+0x210>)
 80079f0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC = "Description IC 74HC4054";
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a6c      	ldr	r2, [pc, #432]	@ (8007ba8 <Screen_Init_Variable+0x214>)
 80079f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    obj_screen->Program_Testx[PROGRAM_TEST4].num_IC = "20";
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a6b      	ldr	r2, [pc, #428]	@ (8007bac <Screen_Init_Variable+0x218>)
 8007a00:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program = "Program 1";
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a6a      	ldr	r2, [pc, #424]	@ (8007bb0 <Screen_Init_Variable+0x21c>)
 8007a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program = "Program 2";
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a69      	ldr	r2, [pc, #420]	@ (8007bb4 <Screen_Init_Variable+0x220>)
 8007a10:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program = "Program 3";
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a68      	ldr	r2, [pc, #416]	@ (8007bb8 <Screen_Init_Variable+0x224>)
 8007a18:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program = "Program 4";
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a67      	ldr	r2, [pc, #412]	@ (8007bbc <Screen_Init_Variable+0x228>)
 8007a20:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

    obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester = "IC TESTER 1";
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a66      	ldr	r2, [pc, #408]	@ (8007bc0 <Screen_Init_Variable+0x22c>)
 8007a28:	64da      	str	r2, [r3, #76]	@ 0x4c
    obj_screen->IC_Testerx[DEVICE_2].NameIC_Tester = "IC TESTER 2";
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a65      	ldr	r2, [pc, #404]	@ (8007bc4 <Screen_Init_Variable+0x230>)
 8007a2e:	661a      	str	r2, [r3, #96]	@ 0x60
    obj_screen->IC_Testerx[DEVICE_3].NameIC_Tester = "IC TESTER 3";
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a65      	ldr	r2, [pc, #404]	@ (8007bc8 <Screen_Init_Variable+0x234>)
 8007a34:	675a      	str	r2, [r3, #116]	@ 0x74

    memcpy(obj_screen->Wifi_setting.Name_Wifi,"Wifi TEST 1",strlen("Wifi TEST 1"));
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	33f4      	adds	r3, #244	@ 0xf4
 8007a3a:	220b      	movs	r2, #11
 8007a3c:	4963      	ldr	r1, [pc, #396]	@ (8007bcc <Screen_Init_Variable+0x238>)
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f003 fd61 	bl	800b506 <memcpy>
    memcpy(obj_screen->Wifi_setting.Password_Wifi,"PASSword 1234",strlen("PASSword 1234"));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f503 7389 	add.w	r3, r3, #274	@ 0x112
 8007a4a:	220d      	movs	r2, #13
 8007a4c:	4960      	ldr	r1, [pc, #384]	@ (8007bd0 <Screen_Init_Variable+0x23c>)
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f003 fd59 	bl	800b506 <memcpy>

    obj_screen->IC_Testerx[DEVICE_1].curr_PageMain = DWINPAGE_MAIN;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2265      	movs	r2, #101	@ 0x65
 8007a58:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    obj_screen->IC_Testerx[DEVICE_2].curr_PageMain = DWINPAGE_MAIN;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2265      	movs	r2, #101	@ 0x65
 8007a60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    obj_screen->IC_Testerx[DEVICE_3].curr_PageMain = DWINPAGE_MAIN; 
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2265      	movs	r2, #101	@ 0x65
 8007a68:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71

    obj_screen->IC_Testerx[DEVICE_1].state = false;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    obj_screen->IC_Testerx[DEVICE_2].state = false;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
    obj_screen->IC_Testerx[DEVICE_3].state = false;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_1,obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7f8 fb67 	bl	8000164 <strlen>
 8007a96:	4603      	mov	r3, r0
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	f249 2125 	movw	r1, #37413	@ 0x9225
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 f883 	bl	8008bac <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_2,obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 40a0 	ldr.w	r4, [r3, #160]	@ 0xa0
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7f8 fb56 	bl	8000164 <strlen>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	4622      	mov	r2, r4
 8007abe:	f249 2150 	movw	r1, #37456	@ 0x9250
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 f872 	bl	8008bac <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_3,obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7f8 fb45 	bl	8000164 <strlen>
 8007ada:	4603      	mov	r3, r0
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	4622      	mov	r2, r4
 8007ae0:	f249 2175 	movw	r1, #37493	@ 0x9275
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 f861 	bl	8008bac <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_4,obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 40d8 	ldr.w	r4, [r3, #216]	@ 0xd8
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7f8 fb34 	bl	8000164 <strlen>
 8007afc:	4603      	mov	r3, r0
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	4622      	mov	r2, r4
 8007b02:	f44f 4113 	mov.w	r1, #37632	@ 0x9300
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f001 f850 	bl	8008bac <DWIN_SetText>

    DWIN_SetText((Dwin_t *)obj_screen,VP_Name_Tester,obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,strlen(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7f8 fb25 	bl	8000164 <strlen>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	4622      	mov	r2, r4
 8007b20:	f249 3150 	movw	r1, #37712	@ 0x9350
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 f841 	bl	8008bac <DWIN_SetText>

    obj_screen->Program_Testx[PROGRAM_TEST1].num_pin = 16;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2210      	movs	r2, #16
 8007b2e:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    obj_screen->Program_Testx[PROGRAM_TEST1].num_case = 8;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2208      	movs	r2, #8
 8007b36:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94

    /* Screen */
    obj_screen->Screen_keyboard.Caplock = false;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    obj_screen->Screen_keyboard.Index_String = 0;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    Screen_ShowData_Mainpage(obj_screen,0);
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f841 	bl	8007bd4 <Screen_ShowData_Mainpage>
    DWIN_SetVariable_Icon((Dwin_t *)obj_screen,VP_ICON_ON_OFF,obj_screen->IC_Testerx[obj_screen->curr_device].state);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8007b58:	4619      	mov	r1, r3
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	440b      	add	r3, r1
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	334b      	adds	r3, #75	@ 0x4b
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 f89d 	bl	8008cb0 <DWIN_SetVariable_Icon>
}
 8007b76:	bf00      	nop
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd90      	pop	{r4, r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	0800df48 	.word	0x0800df48
 8007b84:	0800df54 	.word	0x0800df54
 8007b88:	0800df6c 	.word	0x0800df6c
 8007b8c:	0800df70 	.word	0x0800df70
 8007b90:	0800df7c 	.word	0x0800df7c
 8007b94:	0800df94 	.word	0x0800df94
 8007b98:	0800df98 	.word	0x0800df98
 8007b9c:	0800dfa4 	.word	0x0800dfa4
 8007ba0:	0800dfbc 	.word	0x0800dfbc
 8007ba4:	0800dfc0 	.word	0x0800dfc0
 8007ba8:	0800dfcc 	.word	0x0800dfcc
 8007bac:	0800dfe4 	.word	0x0800dfe4
 8007bb0:	0800dfe8 	.word	0x0800dfe8
 8007bb4:	0800dff4 	.word	0x0800dff4
 8007bb8:	0800e000 	.word	0x0800e000
 8007bbc:	0800e00c 	.word	0x0800e00c
 8007bc0:	0800e018 	.word	0x0800e018
 8007bc4:	0800e024 	.word	0x0800e024
 8007bc8:	0800e030 	.word	0x0800e030
 8007bcc:	0800e03c 	.word	0x0800e03c
 8007bd0:	0800e048 	.word	0x0800e048

08007bd4 <Screen_ShowData_Mainpage>:

void Screen_ShowData_Mainpage(Screen_t *const screen_obj, uint8_t index_program) {
 8007bd4:	b5b0      	push	{r4, r5, r7, lr}
 8007bd6:	b088      	sub	sp, #32
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
    uint8_t a_select_program[MAX_PROGRAM_TEST];
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	4613      	mov	r3, r2
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	1a9b      	subs	r3, r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	3388      	adds	r3, #136	@ 0x88
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7f8 fab6 	bl	8000164 <strlen>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	3309      	adds	r3, #9
 8007bfe:	77fb      	strb	r3, [r7, #31]
    uint8_t size_Description_IC = strlen("IC Description: ") + strlen((char *)screen_obj->Program_Testx[index_program].Description_IC);
 8007c00:	78fa      	ldrb	r2, [r7, #3]
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	4613      	mov	r3, r2
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	1a9b      	subs	r3, r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	440b      	add	r3, r1
 8007c0e:	338c      	adds	r3, #140	@ 0x8c
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7f8 faa6 	bl	8000164 <strlen>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	3310      	adds	r3, #16
 8007c1e:	77bb      	strb	r3, [r7, #30]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 8007c20:	78fa      	ldrb	r2, [r7, #3]
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	4613      	mov	r3, r2
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	1a9b      	subs	r3, r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	440b      	add	r3, r1
 8007c2e:	3390      	adds	r3, #144	@ 0x90
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7f8 fa96 	bl	8000164 <strlen>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	330f      	adds	r3, #15
 8007c3e:	777b      	strb	r3, [r7, #29]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8007c40:	7ffb      	ldrb	r3, [r7, #31]
 8007c42:	3301      	adds	r3, #1
 8007c44:	4618      	mov	r0, r3
 8007c46:	f001 fbeb 	bl	8009420 <malloc>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	61bb      	str	r3, [r7, #24]
    char *Text_Description_IC = malloc(size_Description_IC + 1);
 8007c4e:	7fbb      	ldrb	r3, [r7, #30]
 8007c50:	3301      	adds	r3, #1
 8007c52:	4618      	mov	r0, r3
 8007c54:	f001 fbe4 	bl	8009420 <malloc>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	617b      	str	r3, [r7, #20]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 8007c5c:	7f7b      	ldrb	r3, [r7, #29]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 fbdd 	bl	8009420 <malloc>
 8007c66:	4603      	mov	r3, r0
 8007c68:	613b      	str	r3, [r7, #16]

    strcpy(Text_Name_IC,"IC Name: ");
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	4944      	ldr	r1, [pc, #272]	@ (8007d80 <Screen_ShowData_Mainpage+0x1ac>)
 8007c6e:	461a      	mov	r2, r3
 8007c70:	460b      	mov	r3, r1
 8007c72:	cb03      	ldmia	r3!, {r0, r1}
 8007c74:	6010      	str	r0, [r2, #0]
 8007c76:	6051      	str	r1, [r2, #4]
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 8007c7c:	78fa      	ldrb	r2, [r7, #3]
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	4613      	mov	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	3388      	adds	r3, #136	@ 0x88
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	69b8      	ldr	r0, [r7, #24]
 8007c92:	f003 fb5d 	bl	800b350 <strcat>
    strcpy(Text_Description_IC,"IC Description: ");
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	4a3a      	ldr	r2, [pc, #232]	@ (8007d84 <Screen_ShowData_Mainpage+0x1b0>)
 8007c9a:	461d      	mov	r5, r3
 8007c9c:	4614      	mov	r4, r2
 8007c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ca0:	6028      	str	r0, [r5, #0]
 8007ca2:	6069      	str	r1, [r5, #4]
 8007ca4:	60aa      	str	r2, [r5, #8]
 8007ca6:	60eb      	str	r3, [r5, #12]
 8007ca8:	7823      	ldrb	r3, [r4, #0]
 8007caa:	742b      	strb	r3, [r5, #16]
    strcat(Text_Description_IC,(char *)screen_obj->Program_Testx[index_program].Description_IC);
 8007cac:	78fa      	ldrb	r2, [r7, #3]
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	1a9b      	subs	r3, r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	338c      	adds	r3, #140	@ 0x8c
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6978      	ldr	r0, [r7, #20]
 8007cc2:	f003 fb45 	bl	800b350 <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	4a2f      	ldr	r2, [pc, #188]	@ (8007d88 <Screen_ShowData_Mainpage+0x1b4>)
 8007cca:	461c      	mov	r4, r3
 8007ccc:	4615      	mov	r5, r2
 8007cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cd0:	6020      	str	r0, [r4, #0]
 8007cd2:	6061      	str	r1, [r4, #4]
 8007cd4:	60a2      	str	r2, [r4, #8]
 8007cd6:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);
 8007cd8:	78fa      	ldrb	r2, [r7, #3]
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	1a9b      	subs	r3, r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	3390      	adds	r3, #144	@ 0x90
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6938      	ldr	r0, [r7, #16]
 8007cee:	f003 fb2f 	bl	800b350 <strcat>

    memset(a_select_program,1,MAX_PROGRAM_TEST);
 8007cf2:	f107 030c 	add.w	r3, r7, #12
 8007cf6:	2204      	movs	r2, #4
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f003 fb20 	bl	800b340 <memset>
    // Get the program selected
    a_select_program[index_program] = 0 ;
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	3320      	adds	r3, #32
 8007d04:	443b      	add	r3, r7
 8007d06:	2200      	movs	r2, #0
 8007d08:	f803 2c14 	strb.w	r2, [r3, #-20]
    screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index = index_program;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8007d12:	4619      	mov	r1, r3
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	334a      	adds	r3, #74	@ 0x4a
 8007d22:	78fa      	ldrb	r2, [r7, #3]
 8007d24:	701a      	strb	r2, [r3, #0]

    // Show data in screen
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_SELECT_PROGRAM,a_select_program,MAX_PROGRAM_TEST);
 8007d26:	f107 020c 	add.w	r2, r7, #12
 8007d2a:	2304      	movs	r3, #4
 8007d2c:	f44f 4182 	mov.w	r1, #16640	@ 0x4100
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 ffea 	bl	8008d0a <DWIN_SetArray_Icon>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_IC,Text_Name_IC,size_Name_IC);
 8007d36:	7ffb      	ldrb	r3, [r7, #31]
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	f44f 4111 	mov.w	r1, #37120	@ 0x9100
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 ff33 	bl	8008bac <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Description_IC,Text_Description_IC,size_Description_IC);
 8007d46:	7fbb      	ldrb	r3, [r7, #30]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	f249 1150 	movw	r1, #37200	@ 0x9150
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 ff2b 	bl	8008bac <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,Text_Num_IC,size_Num_IC);
 8007d56:	7f7b      	ldrb	r3, [r7, #29]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 ff23 	bl	8008bac <DWIN_SetText>
    
    /* free malloc */
    free(Text_Name_IC);
 8007d66:	69b8      	ldr	r0, [r7, #24]
 8007d68:	f001 fb62 	bl	8009430 <free>
    free(Text_Description_IC);
 8007d6c:	6978      	ldr	r0, [r7, #20]
 8007d6e:	f001 fb5f 	bl	8009430 <free>
    free(Text_Num_IC);
 8007d72:	6938      	ldr	r0, [r7, #16]
 8007d74:	f001 fb5c 	bl	8009430 <free>
}
 8007d78:	bf00      	nop
 8007d7a:	3720      	adds	r7, #32
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8007d80:	0800def8 	.word	0x0800def8
 8007d84:	0800e058 	.word	0x0800e058
 8007d88:	0800df04 	.word	0x0800df04

08007d8c <Screen_SetInfo_Pin>:

void Screen_SetInfo_Pin(Screen_t *const screen_obj, char **array_data) {
 8007d8c:	b590      	push	{r4, r7, lr}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
    // for (uint8_t pin_x = 0; pin_x < screen_obj->Program_Testx[PROGRAM_TEST1].num_pin; pin_x++) {
    //     if (screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x] != NULL) {
    //         free(screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x]);
    //     } 
    // }
    uint16_t Address_VP = VP_Name_Pin;
 8007d96:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 8007d9a:	81fb      	strh	r3, [r7, #14]
    screen_obj->Program_Testx[PROGRAM_TEST1].data_pin = malloc( screen_obj->Program_Testx[PROGRAM_TEST1].num_pin * sizeof(char *) );
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4618      	mov	r0, r3
 8007da6:	f001 fb3b 	bl	8009420 <malloc>
 8007daa:	4603      	mov	r3, r0
 8007dac:	461a      	mov	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    /* Get new data */
    for (uint8_t pin_x = 0; pin_x < screen_obj->Program_Testx[PROGRAM_TEST1].num_pin; pin_x++) {
 8007db4:	2300      	movs	r3, #0
 8007db6:	737b      	strb	r3, [r7, #13]
 8007db8:	e02d      	b.n	8007e16 <Screen_SetInfo_Pin+0x8a>
        screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x] = strdup(array_data[pin_x]);
 8007dba:	7b7b      	ldrb	r3, [r7, #13]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	6819      	ldr	r1, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007dca:	7b7b      	ldrb	r3, [r7, #13]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	18d4      	adds	r4, r2, r3
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	f003 facd 	bl	800b370 <strdup>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	6023      	str	r3, [r4, #0]
        DWIN_SetText((Dwin_t *)screen_obj,Address_VP,screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x],strlen(screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x]));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007de0:	7b7b      	ldrb	r3, [r7, #13]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	681c      	ldr	r4, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007dee:	7b7b      	ldrb	r3, [r7, #13]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7f8 f9b4 	bl	8000164 <strlen>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	89f9      	ldrh	r1, [r7, #14]
 8007e02:	4622      	mov	r2, r4
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fed1 	bl	8008bac <DWIN_SetText>
        Address_VP = Address_VP + 0x10;
 8007e0a:	89fb      	ldrh	r3, [r7, #14]
 8007e0c:	3310      	adds	r3, #16
 8007e0e:	81fb      	strh	r3, [r7, #14]
    for (uint8_t pin_x = 0; pin_x < screen_obj->Program_Testx[PROGRAM_TEST1].num_pin; pin_x++) {
 8007e10:	7b7b      	ldrb	r3, [r7, #13]
 8007e12:	3301      	adds	r3, #1
 8007e14:	737b      	strb	r3, [r7, #13]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8007e1c:	7b7a      	ldrb	r2, [r7, #13]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d3cb      	bcc.n	8007dba <Screen_SetInfo_Pin+0x2e>
    }
}
 8007e22:	bf00      	nop
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd90      	pop	{r4, r7, pc}

08007e2c <app_can_bus_init>:
static void can_bus_dispatch(app_can * const pOS_task, OS_event_t const * const pEvent);

static app_can can_bus_instance;
OS_task * const AO_task_can_bus = &can_bus_instance.task; 

void app_can_bus_init(CAN_HandleTypeDef *pCan) {
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
    can_bus_ctor(&can_bus_instance);
 8007e34:	4803      	ldr	r0, [pc, #12]	@ (8007e44 <app_can_bus_init+0x18>)
 8007e36:	f000 f807 	bl	8007e48 <can_bus_ctor>

    UNUSED(pCan);
}
 8007e3a:	bf00      	nop
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20000660 	.word	0x20000660

08007e48 <can_bus_ctor>:

void can_bus_ctor(app_can *pAO) {
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_can_bus,(OS_handler)&can_bus_init,(OS_handler)&can_bus_dispatch);
 8007e50:	4b07      	ldr	r3, [pc, #28]	@ (8007e70 <can_bus_ctor+0x28>)
 8007e52:	4a08      	ldr	r2, [pc, #32]	@ (8007e74 <can_bus_ctor+0x2c>)
 8007e54:	4908      	ldr	r1, [pc, #32]	@ (8007e78 <can_bus_ctor+0x30>)
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 f821 	bl	8008e9e <OS_task_init>

    OS_TimeEvt_init(&can_bus_instance.te,RECEIVE_DATA_CAN_BUS,&can_bus_instance.task);
 8007e5c:	4a04      	ldr	r2, [pc, #16]	@ (8007e70 <can_bus_ctor+0x28>)
 8007e5e:	2101      	movs	r1, #1
 8007e60:	4806      	ldr	r0, [pc, #24]	@ (8007e7c <can_bus_ctor+0x34>)
 8007e62:	f001 f8eb 	bl	800903c <OS_TimeEvt_init>
}
 8007e66:	bf00      	nop
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000660 	.word	0x20000660
 8007e74:	08007e9d 	.word	0x08007e9d
 8007e78:	08007e81 	.word	0x08007e81
 8007e7c:	2000067c 	.word	0x2000067c

08007e80 <can_bus_init>:

static void can_bus_init(app_can * const pOS_task, OS_event_t const * const pEvent) {
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
    OS_TimeEvt_Stop(&pOS_task->te);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	331c      	adds	r3, #28
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f001 f911 	bl	80090b6 <OS_TimeEvt_Stop>

    UNUSED(pEvent);
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <can_bus_dispatch>:

static void can_bus_dispatch(app_can * const pOS_task, OS_event_t const * const pEvent) {
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <can_bus_dispatch+0x18>
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d004      	beq.n	8007ebc <can_bus_dispatch+0x20>
            
        } break;
        case RECEIVE_DATA_CAN_BUS : {

        } break;
        default : break;
 8007eb2:	e004      	b.n	8007ebe <can_bus_dispatch+0x22>
            printf("Send data to device test");
 8007eb4:	4804      	ldr	r0, [pc, #16]	@ (8007ec8 <can_bus_dispatch+0x2c>)
 8007eb6:	f003 f8a3 	bl	800b000 <iprintf>
        } break;
 8007eba:	e000      	b.n	8007ebe <can_bus_dispatch+0x22>
        } break;
 8007ebc:	bf00      	nop
    }
}
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	0800e06c 	.word	0x0800e06c

08007ecc <eeprom_task_init>:

AT24Cxx_t eeprom_ob;
static write_param_t *write_buf[MAX_WRITE_EEPROM_BUF]; /* buffer store the data write */

/* I2C port using for eeprom */
void eeprom_task_init(I2C_HandleTypeDef* i2c_port, uint8_t dev_address) {
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	70fb      	strb	r3, [r7, #3]
//    eeprom_ob.i2c_port = i2c_port;
//    eeprom_ob.dev_address = dev_address;
	char text_program_1[] = "0";
 8007ed8:	2330      	movs	r3, #48	@ 0x30
 8007eda:	81bb      	strh	r3, [r7, #12]
    /* init eeprom */
        if (AT24Cxx_Init(&eeprom_ob,dev_address,i2c_port) == AT24Cxx_Init_OK) {
 8007edc:	78fb      	ldrb	r3, [r7, #3]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	4822      	ldr	r0, [pc, #136]	@ (8007f6c <eeprom_task_init+0xa0>)
 8007ee4:	f000 fdcc 	bl	8008a80 <AT24Cxx_Init>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d103      	bne.n	8007ef6 <eeprom_task_init+0x2a>
            /* init success */
            printf("Init eeprom success!!\n");
 8007eee:	4820      	ldr	r0, [pc, #128]	@ (8007f70 <eeprom_task_init+0xa4>)
 8007ef0:	f003 f8ee 	bl	800b0d0 <puts>
 8007ef4:	e002      	b.n	8007efc <eeprom_task_init+0x30>
        } else {
            printf("Init eeprom fail!!\n");
 8007ef6:	481f      	ldr	r0, [pc, #124]	@ (8007f74 <eeprom_task_init+0xa8>)
 8007ef8:	f003 f8ea 	bl	800b0d0 <puts>
        }

        AT24Cxx_write_buffer(&eeprom_ob,0x02,(uint8_t *)text_program_1,strlen(text_program_1));
 8007efc:	f107 030c 	add.w	r3, r7, #12
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7f8 f92f 	bl	8000164 <strlen>
 8007f06:	4603      	mov	r3, r0
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f107 020c 	add.w	r2, r7, #12
 8007f0e:	2102      	movs	r1, #2
 8007f10:	4816      	ldr	r0, [pc, #88]	@ (8007f6c <eeprom_task_init+0xa0>)
 8007f12:	f000 fdd7 	bl	8008ac4 <AT24Cxx_write_buffer>

    eeprom_instance.b_is_writing = false;
 8007f16:	4b18      	ldr	r3, [pc, #96]	@ (8007f78 <eeprom_task_init+0xac>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
    eeprom_instance.data_eeprom.mem_addr = 0x00;
 8007f1e:	4b16      	ldr	r3, [pc, #88]	@ (8007f78 <eeprom_task_init+0xac>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
    eeprom_instance.data_eeprom.data = (uint8_t *)0;
 8007f26:	4b14      	ldr	r3, [pc, #80]	@ (8007f78 <eeprom_task_init+0xac>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    eeprom_instance.data_eeprom.data_len = 0;
 8007f2e:	4b12      	ldr	r3, [pc, #72]	@ (8007f78 <eeprom_task_init+0xac>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc

    eeprom_instance.write_params_buf = write_buf;
 8007f36:	4b10      	ldr	r3, [pc, #64]	@ (8007f78 <eeprom_task_init+0xac>)
 8007f38:	4a10      	ldr	r2, [pc, #64]	@ (8007f7c <eeprom_task_init+0xb0>)
 8007f3a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    eeprom_instance.head_index = 0;
 8007f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f78 <eeprom_task_init+0xac>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    eeprom_instance.tail_index = 0;
 8007f46:	4b0c      	ldr	r3, [pc, #48]	@ (8007f78 <eeprom_task_init+0xac>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
    eeprom_instance.end = MAX_WRITE_EEPROM_BUF - 1;
 8007f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f78 <eeprom_task_init+0xac>)
 8007f50:	2209      	movs	r2, #9
 8007f52:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
    eeprom_instance.nUsed = 0;
 8007f56:	4b08      	ldr	r3, [pc, #32]	@ (8007f78 <eeprom_task_init+0xac>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6

    eeprom_ctor(&eeprom_instance);
 8007f5e:	4806      	ldr	r0, [pc, #24]	@ (8007f78 <eeprom_task_init+0xac>)
 8007f60:	f000 f80e 	bl	8007f80 <eeprom_ctor>
}
 8007f64:	bf00      	nop
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	200007ac 	.word	0x200007ac
 8007f70:	0800e088 	.word	0x0800e088
 8007f74:	0800e0a0 	.word	0x0800e0a0
 8007f78:	200006d0 	.word	0x200006d0
 8007f7c:	200007b4 	.word	0x200007b4

08007f80 <eeprom_ctor>:

void eeprom_ctor(app_eeprom *pAO) {
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
    /* init task */
    OS_task_init(AO_task_eeprom,(OS_handler)&eeprom_init,(OS_handler)&eeprom_dispatch);
 8007f88:	4b09      	ldr	r3, [pc, #36]	@ (8007fb0 <eeprom_ctor+0x30>)
 8007f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8007fb4 <eeprom_ctor+0x34>)
 8007f8c:	490a      	ldr	r1, [pc, #40]	@ (8007fb8 <eeprom_ctor+0x38>)
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 ff85 	bl	8008e9e <OS_task_init>

    /* init time */
    OS_TimeEvt_init(&eeprom_instance.time_wait,FINISH_WRITE,&eeprom_instance.task);
 8007f94:	4a06      	ldr	r2, [pc, #24]	@ (8007fb0 <eeprom_ctor+0x30>)
 8007f96:	2103      	movs	r1, #3
 8007f98:	4808      	ldr	r0, [pc, #32]	@ (8007fbc <eeprom_ctor+0x3c>)
 8007f9a:	f001 f84f 	bl	800903c <OS_TimeEvt_init>
    OS_TimeEvt_init(&eeprom_instance.time_check,CHECK_WRITE_BUF,&eeprom_instance.task);
 8007f9e:	4a04      	ldr	r2, [pc, #16]	@ (8007fb0 <eeprom_ctor+0x30>)
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	4807      	ldr	r0, [pc, #28]	@ (8007fc0 <eeprom_ctor+0x40>)
 8007fa4:	f001 f84a 	bl	800903c <OS_TimeEvt_init>
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	200006d0 	.word	0x200006d0
 8007fb4:	08008065 	.word	0x08008065
 8007fb8:	08007fc5 	.word	0x08007fc5
 8007fbc:	200006ec 	.word	0x200006ec
 8007fc0:	20000740 	.word	0x20000740

08007fc4 <eeprom_init>:

static void eeprom_init(app_eeprom * const pOS_task, OS_event_t const * const pEvent) {
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
    /* init time */
    OS_TimeEvt_Stop(&eeprom_instance.time_check); /* don't using time when init */
 8007fce:	4821      	ldr	r0, [pc, #132]	@ (8008054 <eeprom_init+0x90>)
 8007fd0:	f001 f871 	bl	80090b6 <OS_TimeEvt_Stop>
    OS_TimeEvt_Stop(&eeprom_instance.time_wait); 
 8007fd4:	4820      	ldr	r0, [pc, #128]	@ (8008058 <eeprom_init+0x94>)
 8007fd6:	f001 f86e 	bl	80090b6 <OS_TimeEvt_Stop>

    /* read data program run */
    eeprom_instance.data_eeprom.data = malloc(TOTAL_ALL_PROGRAM_TEST_LEN);
 8007fda:	20a8      	movs	r0, #168	@ 0xa8
 8007fdc:	f001 fa20 	bl	8009420 <malloc>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800805c <eeprom_init+0x98>)
 8007fe6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    eeprom_instance.data_eeprom.data_len = TOTAL_ALL_PROGRAM_TEST_LEN;
 8007fea:	4b1c      	ldr	r3, [pc, #112]	@ (800805c <eeprom_init+0x98>)
 8007fec:	22a8      	movs	r2, #168	@ 0xa8
 8007fee:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),
 8007ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800805c <eeprom_init+0x98>)
 8007ff4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8007ff8:	23a8      	movs	r3, #168	@ 0xa8
 8007ffa:	2113      	movs	r1, #19
 8007ffc:	4818      	ldr	r0, [pc, #96]	@ (8008060 <eeprom_init+0x9c>)
 8007ffe:	f000 fd89 	bl	8008b14 <AT24Cxx_read_buffer>
                        eeprom_instance.data_eeprom.data,TOTAL_ALL_PROGRAM_TEST_LEN);

    data_eeprom_t *data_eeprom_read = (data_eeprom_t *)malloc(sizeof(data_eeprom_t));
 8008002:	200c      	movs	r0, #12
 8008004:	f001 fa0c 	bl	8009420 <malloc>
 8008008:	4603      	mov	r3, r0
 800800a:	60fb      	str	r3, [r7, #12]
    data_eeprom_read->data_len = eeprom_instance.data_eeprom.data_len;
 800800c:	4b13      	ldr	r3, [pc, #76]	@ (800805c <eeprom_init+0x98>)
 800800e:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	811a      	strh	r2, [r3, #8]
    data_eeprom_read->data = (uint8_t *)malloc(eeprom_instance.data_eeprom.data_len);
 8008016:	4b11      	ldr	r3, [pc, #68]	@ (800805c <eeprom_init+0x98>)
 8008018:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 800801c:	4618      	mov	r0, r3
 800801e:	f001 f9ff 	bl	8009420 <malloc>
 8008022:	4603      	mov	r3, r0
 8008024:	461a      	mov	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	605a      	str	r2, [r3, #4]
    memcpy(data_eeprom_read->data,eeprom_instance.data_eeprom.data,eeprom_instance.data_eeprom.data_len);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	4a0b      	ldr	r2, [pc, #44]	@ (800805c <eeprom_init+0x98>)
 8008030:	f8d2 10c8 	ldr.w	r1, [r2, #200]	@ 0xc8
 8008034:	4a09      	ldr	r2, [pc, #36]	@ (800805c <eeprom_init+0x98>)
 8008036:	f8b2 20cc 	ldrh.w	r2, [r2, #204]	@ 0xcc
 800803a:	4618      	mov	r0, r3
 800803c:	f003 fa63 	bl	800b506 <memcpy>
    
    // OS_task_post_event(AO_BlinkyTest,READ_ALL_PROGRAM_TEST,(uint8_t *)&data_eeprom_read,sizeof(data_eeprom_t *));

    free(eeprom_instance.data_eeprom.data);
 8008040:	4b06      	ldr	r3, [pc, #24]	@ (800805c <eeprom_init+0x98>)
 8008042:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008046:	4618      	mov	r0, r3
 8008048:	f001 f9f2 	bl	8009430 <free>

}
 800804c:	bf00      	nop
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	20000740 	.word	0x20000740
 8008058:	200006ec 	.word	0x200006ec
 800805c:	200006d0 	.word	0x200006d0
 8008060:	200007ac 	.word	0x200007ac

08008064 <eeprom_dispatch>:

void eeprom_dispatch(app_eeprom * const pOS_task, OS_event_t const * const pEvent) {
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	2b05      	cmp	r3, #5
 8008074:	f200 8167 	bhi.w	8008346 <eeprom_dispatch+0x2e2>
 8008078:	a201      	add	r2, pc, #4	@ (adr r2, 8008080 <eeprom_dispatch+0x1c>)
 800807a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807e:	bf00      	nop
 8008080:	080081c3 	.word	0x080081c3
 8008084:	08008347 	.word	0x08008347
 8008088:	08008317 	.word	0x08008317
 800808c:	08008213 	.word	0x08008213
 8008090:	08008099 	.word	0x08008099
 8008094:	080080f1 	.word	0x080080f1
        case READ_EEPROM : {
            data_eeprom_t *data_read = (data_eeprom_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 8008098:	6838      	ldr	r0, [r7, #0]
 800809a:	f001 f9b2 	bl	8009402 <get_data_dynamic_event>
 800809e:	4603      	mov	r3, r0
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	60fb      	str	r3, [r7, #12]
            eeprom_instance.data_eeprom.data = malloc(data_read->data_len);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	891b      	ldrh	r3, [r3, #8]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f001 f9b9 	bl	8009420 <malloc>
 80080ae:	4603      	mov	r3, r0
 80080b0:	461a      	mov	r2, r3
 80080b2:	4ba9      	ldr	r3, [pc, #676]	@ (8008358 <eeprom_dispatch+0x2f4>)
 80080b4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            AT24Cxx_read_buffer(&eeprom_ob,data_read->mem_addr,
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8819      	ldrh	r1, [r3, #0]
 80080bc:	4ba6      	ldr	r3, [pc, #664]	@ (8008358 <eeprom_dispatch+0x2f4>)
 80080be:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80080c2:	4ba5      	ldr	r3, [pc, #660]	@ (8008358 <eeprom_dispatch+0x2f4>)
 80080c4:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 80080c8:	48a4      	ldr	r0, [pc, #656]	@ (800835c <eeprom_dispatch+0x2f8>)
 80080ca:	f000 fd23 	bl	8008b14 <AT24Cxx_read_buffer>
                                eeprom_instance.data_eeprom.data,eeprom_instance.data_eeprom.data_len);
            printf("Data read eeprom : %s\n",eeprom_instance.data_eeprom.data);
 80080ce:	4ba2      	ldr	r3, [pc, #648]	@ (8008358 <eeprom_dispatch+0x2f4>)
 80080d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80080d4:	4619      	mov	r1, r3
 80080d6:	48a2      	ldr	r0, [pc, #648]	@ (8008360 <eeprom_dispatch+0x2fc>)
 80080d8:	f002 ff92 	bl	800b000 <iprintf>
            free(eeprom_instance.data_eeprom.data);
 80080dc:	4b9e      	ldr	r3, [pc, #632]	@ (8008358 <eeprom_dispatch+0x2f4>)
 80080de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 f9a4 	bl	8009430 <free>
            free(data_read);
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f001 f9a1 	bl	8009430 <free>
            
        } break;
 80080ee:	e12f      	b.n	8008350 <eeprom_dispatch+0x2ec>
        case WRITE_EEPROM : {
            data_eeprom_t *data_receive = (data_eeprom_t *)(get_data_dynamic_event(pEvent));
 80080f0:	6838      	ldr	r0, [r7, #0]
 80080f2:	f001 f986 	bl	8009402 <get_data_dynamic_event>
 80080f6:	6178      	str	r0, [r7, #20]
            write_param_t *e_write = (write_param_t *)malloc(sizeof(write_param_t));
 80080f8:	2010      	movs	r0, #16
 80080fa:	f001 f991 	bl	8009420 <malloc>
 80080fe:	4603      	mov	r3, r0
 8008100:	613b      	str	r3, [r7, #16]
            // e_write->byte_first_page = AT24C256_PG_SIZE - data_receive->mem_addr % AT24C256_PG_SIZE;
            // e_write->page_write = (data_receive->data_len - e_write->byte_first_page) / AT24C256_PG_SIZE;
            // e_write->byte_remain = (data_receive->data_len - e_write->byte_first_page) % AT24C256_PG_SIZE;
            e_write->data_written = 0;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2200      	movs	r2, #0
 8008106:	815a      	strh	r2, [r3, #10]
            e_write->data_lastlen = 0;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	2200      	movs	r2, #0
 800810c:	819a      	strh	r2, [r3, #12]
            e_write->mem_addr = data_receive->mem_addr;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	881a      	ldrh	r2, [r3, #0]
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	801a      	strh	r2, [r3, #0]
            e_write->data_len = data_receive->data_len;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	891a      	ldrh	r2, [r3, #8]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	811a      	strh	r2, [r3, #8]
            e_write->data = (uint8_t *)malloc(data_receive->data_len);
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	891b      	ldrh	r3, [r3, #8]
 8008122:	4618      	mov	r0, r3
 8008124:	f001 f97c 	bl	8009420 <malloc>
 8008128:	4603      	mov	r3, r0
 800812a:	461a      	mov	r2, r3
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	605a      	str	r2, [r3, #4]
            memcpy(e_write->data,data_receive->data,data_receive->data_len);
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	6858      	ldr	r0, [r3, #4]
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	6859      	ldr	r1, [r3, #4]
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	891b      	ldrh	r3, [r3, #8]
 800813c:	461a      	mov	r2, r3
 800813e:	f003 f9e2 	bl	800b506 <memcpy>

            pOS_task->write_params_buf[pOS_task->head_index] = e_write; /* insert to buffer */
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index == 0) {
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800815c:	2b00      	cmp	r3, #0
 800815e:	d106      	bne.n	800816e <eeprom_dispatch+0x10a>
                pOS_task->head_index = pOS_task->end;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 20d7 	ldrb.w	r2, [r3, #215]	@ 0xd7
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
 800816c:	e007      	b.n	800817e <eeprom_dispatch+0x11a>
            } else {
                --pOS_task->head_index;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8008174:	3b01      	subs	r3, #1
 8008176:	b2da      	uxtb	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
            }
            ++pOS_task->nUsed;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 8008184:	3301      	adds	r3, #1
 8008186:	b2da      	uxtb	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6

            if (pOS_task->b_is_writing == false) { /* if the eeprom is free, writing doesn't need to wait */
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8008194:	f083 0301 	eor.w	r3, r3, #1
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 80d5 	beq.w	800834a <eeprom_dispatch+0x2e6>
                pOS_task->b_is_writing = true;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 f8d4 	bl	8008368 <write_buffer_with_task>
            }
        } break;
 80081c0:	e0c3      	b.n	800834a <eeprom_dispatch+0x2e6>
        case WAIT_WRITE_TIMEOUT : {
            /* wait ~10ms for eeprom write complete */
            pOS_task->write_params_buf[pOS_task->tail_index]->data_written += pOS_task->write_params_buf[pOS_task->tail_index]->data_lastlen;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	8959      	ldrh	r1, [r3, #10]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	899a      	ldrh	r2, [r3, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4403      	add	r3, r0
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	440a      	add	r2, r1
 80081fe:	b292      	uxth	r2, r2
 8008200:	815a      	strh	r2, [r3, #10]

            OS_TimeEvt_Set(&pOS_task->time_wait,11,0); /* run only 1 time */
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	331c      	adds	r3, #28
 8008206:	2200      	movs	r2, #0
 8008208:	210b      	movs	r1, #11
 800820a:	4618      	mov	r0, r3
 800820c:	f000 ff3c 	bl	8009088 <OS_TimeEvt_Set>
        } break;
 8008210:	e09e      	b.n	8008350 <eeprom_dispatch+0x2ec>
        case FINISH_WRITE : {
            if (pOS_task->write_params_buf[pOS_task->tail_index]->data_written < pOS_task->write_params_buf[pOS_task->tail_index]->data_len) {
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	895a      	ldrh	r2, [r3, #10]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	440b      	add	r3, r1
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	891b      	ldrh	r3, [r3, #8]
 800823a:	429a      	cmp	r2, r3
 800823c:	d20c      	bcs.n	8008258 <eeprom_dispatch+0x1f4>
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4618      	mov	r0, r3
 8008252:	f000 f889 	bl	8008368 <write_buffer_with_task>
                /* Check buf */
                if (pOS_task->nUsed > 0) {
                    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM_IN_BUF,(uint8_t *)0,0);
                }
            }
        } break; 
 8008256:	e07a      	b.n	800834e <eeprom_dispatch+0x2ea>
                printf("Write data to eeprom finish\n");
 8008258:	4842      	ldr	r0, [pc, #264]	@ (8008364 <eeprom_dispatch+0x300>)
 800825a:	f002 ff39 	bl	800b0d0 <puts>
                if (pOS_task->write_params_buf[pOS_task->tail_index]->data != NULL) {
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00c      	beq.n	8008290 <eeprom_dispatch+0x22c>
                    free(pOS_task->write_params_buf[pOS_task->tail_index]->data);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	4618      	mov	r0, r3
 800828c:	f001 f8d0 	bl	8009430 <free>
                if (pOS_task->write_params_buf[pOS_task->tail_index] != NULL) {
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00b      	beq.n	80082be <eeprom_dispatch+0x25a>
                    free(pOS_task->write_params_buf[pOS_task->tail_index]);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 f8b9 	bl	8009430 <free>
                if (pOS_task->tail_index == 0) {
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d106      	bne.n	80082d6 <eeprom_dispatch+0x272>
                    pOS_task->tail_index = pOS_task->end;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 20d7 	ldrb.w	r2, [r3, #215]	@ 0xd7
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
 80082d4:	e007      	b.n	80082e6 <eeprom_dispatch+0x282>
                    --pOS_task->tail_index;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80082dc:	3b01      	subs	r3, #1
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
                --pOS_task->nUsed;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
                pOS_task->b_is_writing = false;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                if (pOS_task->nUsed > 0) {
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 8008304:	2b00      	cmp	r3, #0
 8008306:	d022      	beq.n	800834e <eeprom_dispatch+0x2ea>
                    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM_IN_BUF,(uint8_t *)0,0);
 8008308:	4813      	ldr	r0, [pc, #76]	@ (8008358 <eeprom_dispatch+0x2f4>)
 800830a:	2300      	movs	r3, #0
 800830c:	2200      	movs	r2, #0
 800830e:	2102      	movs	r1, #2
 8008310:	f000 fe76 	bl	8009000 <OS_task_post_event>
        } break; 
 8008314:	e01b      	b.n	800834e <eeprom_dispatch+0x2ea>
        case WRITE_EEPROM_IN_BUF : {
            if (pOS_task->b_is_writing == false) { /* if the eeprom is free, writing doesn't need to wait */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 800831c:	f083 0301 	eor.w	r3, r3, #1
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00f      	beq.n	8008346 <eeprom_dispatch+0x2e2>
                pOS_task->b_is_writing = true;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4618      	mov	r0, r3
 8008342:	f000 f811 	bl	8008368 <write_buffer_with_task>
            }
        }
        default : break;
 8008346:	bf00      	nop
 8008348:	e002      	b.n	8008350 <eeprom_dispatch+0x2ec>
        } break;
 800834a:	bf00      	nop
 800834c:	e000      	b.n	8008350 <eeprom_dispatch+0x2ec>
        } break; 
 800834e:	bf00      	nop
    }
}
 8008350:	bf00      	nop
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	200006d0 	.word	0x200006d0
 800835c:	200007ac 	.word	0x200007ac
 8008360:	0800e0b4 	.word	0x0800e0b4
 8008364:	0800e0cc 	.word	0x0800e0cc

08008368 <write_buffer_with_task>:

static void write_buffer_with_task(write_param_t *pWrite_params) {
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
    uint16_t byte_remain = pWrite_params->data_len - pWrite_params->data_written;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	891a      	ldrh	r2, [r3, #8]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	895b      	ldrh	r3, [r3, #10]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	81bb      	strh	r3, [r7, #12]
    uint8_t written_in_page = (pWrite_params->mem_addr + pWrite_params->data_written) % AT24C256_PG_SIZE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	b2da      	uxtb	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	895b      	ldrh	r3, [r3, #10]
 8008386:	b2db      	uxtb	r3, r3
 8008388:	4413      	add	r3, r2
 800838a:	b2db      	uxtb	r3, r3
 800838c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008390:	72fb      	strb	r3, [r7, #11]
    uint8_t byte_in_page = AT24C256_PG_SIZE - written_in_page;
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8008398:	72bb      	strb	r3, [r7, #10]
    uint16_t addr_write = pWrite_params->mem_addr + pWrite_params->data_written;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	881a      	ldrh	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	895b      	ldrh	r3, [r3, #10]
 80083a2:	4413      	add	r3, r2
 80083a4:	813b      	strh	r3, [r7, #8]
    uint8_t len_write;
    if (byte_remain < byte_in_page) {
 80083a6:	7abb      	ldrb	r3, [r7, #10]
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	89ba      	ldrh	r2, [r7, #12]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d202      	bcs.n	80083b6 <write_buffer_with_task+0x4e>
        len_write = byte_remain;
 80083b0:	89bb      	ldrh	r3, [r7, #12]
 80083b2:	73fb      	strb	r3, [r7, #15]
 80083b4:	e001      	b.n	80083ba <write_buffer_with_task+0x52>
    } else {
        len_write = byte_in_page;
 80083b6:	7abb      	ldrb	r3, [r7, #10]
 80083b8:	73fb      	strb	r3, [r7, #15]
    }
    pWrite_params->data_lastlen = len_write;
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	b29a      	uxth	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	819a      	strh	r2, [r3, #12]
    AT24Cxx_write_buffer(&eeprom_ob,addr_write,pWrite_params->data + pWrite_params->data_written,len_write);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	8952      	ldrh	r2, [r2, #10]
 80083ca:	441a      	add	r2, r3
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	8939      	ldrh	r1, [r7, #8]
 80083d2:	4803      	ldr	r0, [pc, #12]	@ (80083e0 <write_buffer_with_task+0x78>)
 80083d4:	f000 fb76 	bl	8008ac4 <AT24Cxx_write_buffer>
}
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	200007ac 	.word	0x200007ac

080083e4 <I2C1_ER_IRQHandler>:
#include "../Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h" /* CMSIS STM32F1xx Device Peripheral Access Layer Header File */

void I2C1_ER_IRQHandler(void);
void RTC_IRQHandler(void);

void I2C1_ER_IRQHandler(void) { 
 80083e4:	b480      	push	{r7}
 80083e6:	af00      	add	r7, sp, #0
    // OS_task_activate(1);  
    // HAL_NVIC_ClearPendingIRQ(I2C1_ER_IRQn); // clear NVIC pending bit
}
 80083e8:	bf00      	nop
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bc80      	pop	{r7}
 80083ee:	4770      	bx	lr

080083f0 <RTC_IRQHandler>:
void RTC_IRQHandler(void) {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	af00      	add	r7, sp, #0
    OS_task_activate(1);  
 80083f4:	2001      	movs	r0, #1
 80083f6:	f000 fead 	bl	8009154 <OS_task_activate>
}
 80083fa:	bf00      	nop
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <BSP_init>:

/* hardware-specific support code run on a specific hardware platform */
void BSP_init(void) {
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
    /* init event pool */
    dynamic_event_pool_init();
 8008404:	f000 ff54 	bl	80092b0 <dynamic_event_pool_init>
    
    /* Set IRQ number for priority used in OS */
    OS_prio_setIRQ(1,RTC_IRQn);
 8008408:	2103      	movs	r1, #3
 800840a:	2001      	movs	r0, #1
 800840c:	f000 ff26 	bl	800925c <OS_prio_setIRQ>

    OS_priority_IRQ(RTC_IRQn,1);
 8008410:	2101      	movs	r1, #1
 8008412:	2003      	movs	r0, #3
 8008414:	f000 ff08 	bl	8009228 <OS_priority_IRQ>
    OS_Test_setIRQ(AO_BlinkyTest,RTC_IRQn);    
 8008418:	4b0c      	ldr	r3, [pc, #48]	@ (800844c <BSP_init+0x4c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2103      	movs	r1, #3
 800841e:	4618      	mov	r0, r3
 8008420:	f000 ff38 	bl	8009294 <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_taskPost,RTC_IRQn);
 8008424:	4b0a      	ldr	r3, [pc, #40]	@ (8008450 <BSP_init+0x50>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2103      	movs	r1, #3
 800842a:	4618      	mov	r0, r3
 800842c:	f000 ff32 	bl	8009294 <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_task_eeprom,RTC_IRQn);
 8008430:	4b08      	ldr	r3, [pc, #32]	@ (8008454 <BSP_init+0x54>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2103      	movs	r1, #3
 8008436:	4618      	mov	r0, r3
 8008438:	f000 ff2c 	bl	8009294 <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_task_uart_esp32,RTC_IRQn);
 800843c:	4b06      	ldr	r3, [pc, #24]	@ (8008458 <BSP_init+0x58>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2103      	movs	r1, #3
 8008442:	4618      	mov	r0, r3
 8008444:	f000 ff26 	bl	8009294 <OS_Test_setIRQ>
}
 8008448:	bf00      	nop
 800844a:	bd80      	pop	{r7, pc}
 800844c:	0800e244 	.word	0x0800e244
 8008450:	0800e23c 	.word	0x0800e23c
 8008454:	0800e238 	.word	0x0800e238
 8008458:	0800e240 	.word	0x0800e240

0800845c <TestOS_Work>:

/* ============================= function using for initialization task ============================= */ 

/* the value using for app test os */
OS_event_t const *TestOS_Work(void) {
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
    static TestOS_Evt workTest_blinky ;
    workTest_blinky.appEvt.sig = 0; /* unused */
 8008460:	4b08      	ldr	r3, [pc, #32]	@ (8008484 <TestOS_Work+0x28>)
 8008462:	2200      	movs	r2, #0
 8008464:	801a      	strh	r2, [r3, #0]
    workTest_blinky.ticks1 = 300; /* 500 ms */
 8008466:	4b07      	ldr	r3, [pc, #28]	@ (8008484 <TestOS_Work+0x28>)
 8008468:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800846c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    workTest_blinky.ticks2 = 500;
 8008470:	4b04      	ldr	r3, [pc, #16]	@ (8008484 <TestOS_Work+0x28>)
 8008472:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008476:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* return the OS_event_t type */
    return &workTest_blinky.appEvt;
 800847a:	4b02      	ldr	r3, [pc, #8]	@ (8008484 <TestOS_Work+0x28>)
}
 800847c:	4618      	mov	r0, r3
 800847e:	46bd      	mov	sp, r7
 8008480:	bc80      	pop	{r7}
 8008482:	4770      	bx	lr
 8008484:	200007dc 	.word	0x200007dc

08008488 <Post_task_init>:
static app_post Post_instance;
OS_task * const AO_taskPost = &Post_instance.task;

data_send_t data_send;

void Post_task_init(void) {
 8008488:	b5b0      	push	{r4, r5, r7, lr}
 800848a:	af00      	add	r7, sp, #0
    PostApp_ctor(&Post_instance);
 800848c:	480a      	ldr	r0, [pc, #40]	@ (80084b8 <Post_task_init+0x30>)
 800848e:	f000 f81b 	bl	80084c8 <PostApp_ctor>

    strcpy(data_send.string_post,(char *)"Hello task test: ");
 8008492:	4a0a      	ldr	r2, [pc, #40]	@ (80084bc <Post_task_init+0x34>)
 8008494:	4b0a      	ldr	r3, [pc, #40]	@ (80084c0 <Post_task_init+0x38>)
 8008496:	4614      	mov	r4, r2
 8008498:	461d      	mov	r5, r3
 800849a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800849c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800849e:	682b      	ldr	r3, [r5, #0]
 80084a0:	8023      	strh	r3, [r4, #0]
    data_send.string_len = strlen(data_send.string_post);
 80084a2:	4806      	ldr	r0, [pc, #24]	@ (80084bc <Post_task_init+0x34>)
 80084a4:	f7f7 fe5e 	bl	8000164 <strlen>
 80084a8:	4603      	mov	r3, r0
 80084aa:	4a06      	ldr	r2, [pc, #24]	@ (80084c4 <Post_task_init+0x3c>)
 80084ac:	6053      	str	r3, [r2, #4]
    data_send.data_post = 0;
 80084ae:	4b05      	ldr	r3, [pc, #20]	@ (80084c4 <Post_task_init+0x3c>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]
}
 80084b4:	bf00      	nop
 80084b6:	bdb0      	pop	{r4, r5, r7, pc}
 80084b8:	20000828 	.word	0x20000828
 80084bc:	200008a0 	.word	0x200008a0
 80084c0:	0800e0e8 	.word	0x0800e0e8
 80084c4:	20000898 	.word	0x20000898

080084c8 <PostApp_ctor>:

void PostApp_ctor(app_post *pAO) {
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
    /* init task */
    OS_task_init(AO_taskPost,(OS_handler)&PostApp_init,(OS_handler)&PostApp_dispatch);
 80084d0:	4b07      	ldr	r3, [pc, #28]	@ (80084f0 <PostApp_ctor+0x28>)
 80084d2:	4a08      	ldr	r2, [pc, #32]	@ (80084f4 <PostApp_ctor+0x2c>)
 80084d4:	4908      	ldr	r1, [pc, #32]	@ (80084f8 <PostApp_ctor+0x30>)
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fce1 	bl	8008e9e <OS_task_init>

    /* init time */
    OS_TimeEvt_init(&Post_instance.te,POST_DATA_TIMEOUT,&Post_instance.task);
 80084dc:	4a04      	ldr	r2, [pc, #16]	@ (80084f0 <PostApp_ctor+0x28>)
 80084de:	2102      	movs	r1, #2
 80084e0:	4806      	ldr	r0, [pc, #24]	@ (80084fc <PostApp_ctor+0x34>)
 80084e2:	f000 fdab 	bl	800903c <OS_TimeEvt_init>
}
 80084e6:	bf00      	nop
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20000828 	.word	0x20000828
 80084f4:	08008525 	.word	0x08008525
 80084f8:	08008501 	.word	0x08008501
 80084fc:	20000844 	.word	0x20000844

08008500 <PostApp_init>:

void PostApp_init(app_post * const pOS_task, OS_event_t const * const pEvent) {
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
    OS_TimeEvt_Set(&pOS_task->te,20,500);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	331c      	adds	r3, #28
 800850e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008512:	2114      	movs	r1, #20
 8008514:	4618      	mov	r0, r3
 8008516:	f000 fdb7 	bl	8009088 <OS_TimeEvt_Set>
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <PostApp_dispatch>:

void PostApp_dispatch(app_post * const pOS_task, OS_event_t const * const pEvent) {
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d10e      	bne.n	8008554 <PostApp_dispatch+0x30>
        case POST_DATA_TIMEOUT : {
            printf("Post data to test task!\n");
 8008536:	480a      	ldr	r0, [pc, #40]	@ (8008560 <PostApp_dispatch+0x3c>)
 8008538:	f002 fdca 	bl	800b0d0 <puts>
            // data_send_t *pdata_send = malloc(sizeof(data_send_t*));
            ++data_send.data_post;
 800853c:	4b09      	ldr	r3, [pc, #36]	@ (8008564 <PostApp_dispatch+0x40>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3301      	adds	r3, #1
 8008542:	4a08      	ldr	r2, [pc, #32]	@ (8008564 <PostApp_dispatch+0x40>)
 8008544:	6013      	str	r3, [r2, #0]
            // memcpy(pdata_send->string_post,data_send.string_post,data_send.string_len);
            // pdata_send->string_len = data_send.string_len;
            // pdata_send->data_post = data_send.data_post;
            OS_task_post_event(AO_BlinkyTest,PRINT_POST_DATA,(uint8_t *)&data_send,sizeof(data_send_t));
 8008546:	4b08      	ldr	r3, [pc, #32]	@ (8008568 <PostApp_dispatch+0x44>)
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	2348      	movs	r3, #72	@ 0x48
 800854c:	4a05      	ldr	r2, [pc, #20]	@ (8008564 <PostApp_dispatch+0x40>)
 800854e:	2103      	movs	r1, #3
 8008550:	f000 fd56 	bl	8009000 <OS_task_post_event>
        }
        default: break;
 8008554:	bf00      	nop
    }
}
 8008556:	bf00      	nop
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	0800e0fc 	.word	0x0800e0fc
 8008564:	20000898 	.word	0x20000898
 8008568:	0800e244 	.word	0x0800e244

0800856c <uart_esp32_task_init>:

static app_uart_esp32 uart_esp32_instance;
OS_task * const AO_task_uart_esp32 = &uart_esp32_instance.task;


void uart_esp32_task_init(UART_HandleTypeDef *pUart) {
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
    uart_esp32_instance.pUart = pUart;
 8008574:	4a04      	ldr	r2, [pc, #16]	@ (8008588 <uart_esp32_task_init+0x1c>)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	61d3      	str	r3, [r2, #28]
    
    uart_esp32_ctor(&uart_esp32_instance);
 800857a:	4803      	ldr	r0, [pc, #12]	@ (8008588 <uart_esp32_task_init+0x1c>)
 800857c:	f000 f806 	bl	800858c <uart_esp32_ctor>

}
 8008580:	bf00      	nop
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	200008e0 	.word	0x200008e0

0800858c <uart_esp32_ctor>:

void uart_esp32_ctor(app_uart_esp32 *pAO) {
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_uart_esp32,(OS_handler)&uart_esp32_init,(OS_handler)&uart_esp32_dispatch);
 8008594:	4b04      	ldr	r3, [pc, #16]	@ (80085a8 <uart_esp32_ctor+0x1c>)
 8008596:	4a05      	ldr	r2, [pc, #20]	@ (80085ac <uart_esp32_ctor+0x20>)
 8008598:	4905      	ldr	r1, [pc, #20]	@ (80085b0 <uart_esp32_ctor+0x24>)
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fc7f 	bl	8008e9e <OS_task_init>
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	200008e0 	.word	0x200008e0
 80085ac:	080085c9 	.word	0x080085c9
 80085b0:	080085b5 	.word	0x080085b5

080085b4 <uart_esp32_init>:

static void uart_esp32_init(app_uart_esp32 * const pOS_task, OS_event_t const * const pEvent) {
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
    UNUSED(pOS_task);
    UNUSED(pEvent);
}
 80085be:	bf00      	nop
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bc80      	pop	{r7}
 80085c6:	4770      	bx	lr

080085c8 <uart_esp32_dispatch>:

static void uart_esp32_dispatch(app_uart_esp32 * const pOS_task, OS_event_t const * const pEvent) {
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <uart_esp32_dispatch+0x18>
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d012      	beq.n	8008604 <uart_esp32_dispatch+0x3c>
        } break;
        case RECEIVE_DATA_ESP32 : {

        } break;

        default: break;
 80085de:	e012      	b.n	8008606 <uart_esp32_dispatch+0x3e>
            printf("Send data to esp32");
 80085e0:	480b      	ldr	r0, [pc, #44]	@ (8008610 <uart_esp32_dispatch+0x48>)
 80085e2:	f002 fd0d 	bl	800b000 <iprintf>
            uart_buf *data_send = (uart_buf *)get_data_dynamic_event(pEvent);
 80085e6:	6838      	ldr	r0, [r7, #0]
 80085e8:	f000 ff0b 	bl	8009402 <get_data_dynamic_event>
 80085ec:	60f8      	str	r0, [r7, #12]
            HAL_UART_Transmit(pOS_task->pUart,data_send->data,data_send->len,100);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	69d8      	ldr	r0, [r3, #28]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6819      	ldr	r1, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	2364      	movs	r3, #100	@ 0x64
 80085fe:	f7fd fac7 	bl	8005b90 <HAL_UART_Transmit>
        } break;
 8008602:	e000      	b.n	8008606 <uart_esp32_dispatch+0x3e>
        } break;
 8008604:	bf00      	nop
    }
}
 8008606:	bf00      	nop
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	0800e114 	.word	0x0800e114

08008614 <BlinkyTest_app_init>:
uint8_t num_ic = 1;
char uart_string[50];
uint32_t uart_num_test;

/* call in main file to initialization Active object of app using */
void BlinkyTest_app_init(void) {
 8008614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008616:	b083      	sub	sp, #12
 8008618:	af02      	add	r7, sp, #8
    BlinkyTest_ctor(&Blinky_instance);
 800861a:	4821      	ldr	r0, [pc, #132]	@ (80086a0 <BlinkyTest_app_init+0x8c>)
 800861c:	f000 f852 	bl	80086c4 <BlinkyTest_ctor>

    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%d",name_program,name_ic,num_ic);
 8008620:	4b20      	ldr	r3, [pc, #128]	@ (80086a4 <BlinkyTest_app_init+0x90>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	4b20      	ldr	r3, [pc, #128]	@ (80086a8 <BlinkyTest_app_init+0x94>)
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	4b20      	ldr	r3, [pc, #128]	@ (80086ac <BlinkyTest_app_init+0x98>)
 800862c:	4a20      	ldr	r2, [pc, #128]	@ (80086b0 <BlinkyTest_app_init+0x9c>)
 800862e:	212a      	movs	r1, #42	@ 0x2a
 8008630:	4820      	ldr	r0, [pc, #128]	@ (80086b4 <BlinkyTest_app_init+0xa0>)
 8008632:	f002 fd55 	bl	800b0e0 <sniprintf>
    data_write.data = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 8008636:	202a      	movs	r0, #42	@ 0x2a
 8008638:	f000 fef2 	bl	8009420 <malloc>
 800863c:	4603      	mov	r3, r0
 800863e:	461a      	mov	r2, r3
 8008640:	4b1d      	ldr	r3, [pc, #116]	@ (80086b8 <BlinkyTest_app_init+0xa4>)
 8008642:	605a      	str	r2, [r3, #4]
    memcpy(data_write.data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 8008644:	4b1c      	ldr	r3, [pc, #112]	@ (80086b8 <BlinkyTest_app_init+0xa4>)
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	4a1a      	ldr	r2, [pc, #104]	@ (80086b4 <BlinkyTest_app_init+0xa0>)
 800864a:	4614      	mov	r4, r2
 800864c:	469c      	mov	ip, r3
 800864e:	f104 0e20 	add.w	lr, r4, #32
 8008652:	4665      	mov	r5, ip
 8008654:	4626      	mov	r6, r4
 8008656:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008658:	6028      	str	r0, [r5, #0]
 800865a:	6069      	str	r1, [r5, #4]
 800865c:	60aa      	str	r2, [r5, #8]
 800865e:	60eb      	str	r3, [r5, #12]
 8008660:	3410      	adds	r4, #16
 8008662:	f10c 0c10 	add.w	ip, ip, #16
 8008666:	4574      	cmp	r4, lr
 8008668:	d1f3      	bne.n	8008652 <BlinkyTest_app_init+0x3e>
 800866a:	4662      	mov	r2, ip
 800866c:	4623      	mov	r3, r4
 800866e:	cb03      	ldmia	r3!, {r0, r1}
 8008670:	6010      	str	r0, [r2, #0]
 8008672:	6051      	str	r1, [r2, #4]
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	8113      	strh	r3, [r2, #8]
    data_write.data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 8008678:	4b0f      	ldr	r3, [pc, #60]	@ (80086b8 <BlinkyTest_app_init+0xa4>)
 800867a:	222a      	movs	r2, #42	@ 0x2a
 800867c:	811a      	strh	r2, [r3, #8]
    data_write.mem_addr = START_ADDR_PROGRAM_TEST_X(1);
 800867e:	4b0e      	ldr	r3, [pc, #56]	@ (80086b8 <BlinkyTest_app_init+0xa4>)
 8008680:	223d      	movs	r2, #61	@ 0x3d
 8008682:	801a      	strh	r2, [r3, #0]


    data_uart.data = malloc(50);
 8008684:	2032      	movs	r0, #50	@ 0x32
 8008686:	f000 fecb 	bl	8009420 <malloc>
 800868a:	4603      	mov	r3, r0
 800868c:	461a      	mov	r2, r3
 800868e:	4b0b      	ldr	r3, [pc, #44]	@ (80086bc <BlinkyTest_app_init+0xa8>)
 8008690:	601a      	str	r2, [r3, #0]
    uart_num_test = 0;
 8008692:	4b0b      	ldr	r3, [pc, #44]	@ (80086c0 <BlinkyTest_app_init+0xac>)
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]
}
 8008698:	bf00      	nop
 800869a:	3704      	adds	r7, #4
 800869c:	46bd      	mov	sp, r7
 800869e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a0:	20000908 	.word	0x20000908
 80086a4:	2000006c 	.word	0x2000006c
 80086a8:	20000058 	.word	0x20000058
 80086ac:	20000044 	.word	0x20000044
 80086b0:	0800e128 	.word	0x0800e128
 80086b4:	20000adc 	.word	0x20000adc
 80086b8:	20000ac8 	.word	0x20000ac8
 80086bc:	20000ad4 	.word	0x20000ad4
 80086c0:	20000b08 	.word	0x20000b08

080086c4 <BlinkyTest_ctor>:


void BlinkyTest_ctor(Test_Blinky_OS * const pAO) {
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
    /* Init task */
    OS_task_init(&pAO->task,(OS_handler)&BlinkyTest_init,(OS_handler)&BlinkyTest_Dispatch);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a17      	ldr	r2, [pc, #92]	@ (800872c <BlinkyTest_ctor+0x68>)
 80086d0:	4917      	ldr	r1, [pc, #92]	@ (8008730 <BlinkyTest_ctor+0x6c>)
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 fbe3 	bl	8008e9e <OS_task_init>

    /* init time os if using */
    OS_TimeEvt_init(&pAO->te1,TIMEOUT1_SIG,&pAO->task);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	331c      	adds	r3, #28
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	2100      	movs	r1, #0
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 fcab 	bl	800903c <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te2,TIMEOUT2_SIG,&pAO->task);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3370      	adds	r3, #112	@ 0x70
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	2101      	movs	r1, #1
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fca4 	bl	800903c <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te_eeprom_write,WRITE_PROGRAM_TEST,&pAO->task);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	33c4      	adds	r3, #196	@ 0xc4
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	2106      	movs	r1, #6
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 fc9d 	bl	800903c <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te_eeprom_read,READ_ONE_PROGRAM_TEST,&pAO->task);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	2105      	movs	r1, #5
 800870c:	4618      	mov	r0, r3
 800870e:	f000 fc95 	bl	800903c <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te_send_data,TEST_SEND_DATA_ESP32,&pAO->task);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	2107      	movs	r1, #7
 800871c:	4618      	mov	r0, r3
 800871e:	f000 fc8d 	bl	800903c <OS_TimeEvt_init>
}
 8008722:	bf00      	nop
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	080087b1 	.word	0x080087b1
 8008730:	08008735 	.word	0x08008735

08008734 <BlinkyTest_init>:

/* The init function of app task (optional) */
void BlinkyTest_init(Test_Blinky_OS * const pOS_task, OS_event_t const * const pEvent) {
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
    
    /* init time for generate event */
    OS_TimeEvt_Set(&pOS_task->te1,
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f103 001c 	add.w	r0, r3, #28
    1U,
    OS_EVT_DOWNCAST(TestOS_Evt,pEvent)->ticks1);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
    OS_TimeEvt_Set(&pOS_task->te1,
 800874a:	461a      	mov	r2, r3
 800874c:	2101      	movs	r1, #1
 800874e:	f000 fc9b 	bl	8009088 <OS_TimeEvt_Set>

    OS_TimeEvt_Set(&pOS_task->te2,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f103 0070 	add.w	r0, r3, #112	@ 0x70
    1U + (OS_EVT_DOWNCAST(TestOS_Evt,pEvent)->ticks2 / 4),
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
    OS_TimeEvt_Set(&pOS_task->te2,
 800875e:	089b      	lsrs	r3, r3, #2
 8008760:	b29b      	uxth	r3, r3
 8008762:	3301      	adds	r3, #1
 8008764:	b299      	uxth	r1, r3
    OS_EVT_DOWNCAST(TestOS_Evt,pEvent)->ticks2);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
    OS_TimeEvt_Set(&pOS_task->te2,
 800876c:	461a      	mov	r2, r3
 800876e:	f000 fc8b 	bl	8009088 <OS_TimeEvt_Set>

    OS_TimeEvt_Set(&pOS_task->te_eeprom_write,
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	33c4      	adds	r3, #196	@ 0xc4
 8008776:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800877a:	2105      	movs	r1, #5
 800877c:	4618      	mov	r0, r3
 800877e:	f000 fc83 	bl	8009088 <OS_TimeEvt_Set>
    5,
    2000);

    OS_TimeEvt_Set(&pOS_task->te_eeprom_read,
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8008788:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800878c:	2114      	movs	r1, #20
 800878e:	4618      	mov	r0, r3
 8008790:	f000 fc7a 	bl	8009088 <OS_TimeEvt_Set>
    20,
    2000);

    OS_TimeEvt_Set(&pOS_task->te_send_data,50,500);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800879a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800879e:	2132      	movs	r1, #50	@ 0x32
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fc71 	bl	8009088 <OS_TimeEvt_Set>
    /* if don't using this function */
    /*
    * UNSED(pOS_task);
    * UNSED(pEvent);
    */
}
 80087a6:	bf00      	nop
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <BlinkyTest_Dispatch>:

void BlinkyTest_Dispatch(Test_Blinky_OS *const pOS_task, OS_event_t const * const pEvent) {
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	b091      	sub	sp, #68	@ 0x44
 80087b6:	af02      	add	r7, sp, #8
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
    switch (pEvent->sig) {
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	2b07      	cmp	r3, #7
 80087c2:	f200 812d 	bhi.w	8008a20 <BlinkyTest_Dispatch+0x270>
 80087c6:	a201      	add	r2, pc, #4	@ (adr r2, 80087cc <BlinkyTest_Dispatch+0x1c>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087ed 	.word	0x080087ed
 80087d0:	08008801 	.word	0x08008801
 80087d4:	08008a21 	.word	0x08008a21
 80087d8:	08008815 	.word	0x08008815
 80087dc:	0800889f 	.word	0x0800889f
 80087e0:	080089b3 	.word	0x080089b3
 80087e4:	08008939 	.word	0x08008939
 80087e8:	080089e1 	.word	0x080089e1
        case TIMEOUT1_SIG : {
            /* Turn on led */
            HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 80087ec:	2200      	movs	r2, #0
 80087ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80087f2:	488e      	ldr	r0, [pc, #568]	@ (8008a2c <BlinkyTest_Dispatch+0x27c>)
 80087f4:	f7fa f90a 	bl	8002a0c <HAL_GPIO_WritePin>
            printf("Turn on led\n");
 80087f8:	488d      	ldr	r0, [pc, #564]	@ (8008a30 <BlinkyTest_Dispatch+0x280>)
 80087fa:	f002 fc69 	bl	800b0d0 <puts>
        } break;
 80087fe:	e110      	b.n	8008a22 <BlinkyTest_Dispatch+0x272>
        case TIMEOUT2_SIG : {
            /* Turn off led */
        	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 8008800:	2201      	movs	r2, #1
 8008802:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008806:	4889      	ldr	r0, [pc, #548]	@ (8008a2c <BlinkyTest_Dispatch+0x27c>)
 8008808:	f7fa f900 	bl	8002a0c <HAL_GPIO_WritePin>
            printf("Turn off led\n");
 800880c:	4889      	ldr	r0, [pc, #548]	@ (8008a34 <BlinkyTest_Dispatch+0x284>)
 800880e:	f002 fc5f 	bl	800b0d0 <puts>
        } break;
 8008812:	e106      	b.n	8008a22 <BlinkyTest_Dispatch+0x272>
        case PRINT_POST_DATA : {
 8008814:	466b      	mov	r3, sp
 8008816:	461c      	mov	r4, r3
            printf("Receive data post\n");
 8008818:	4887      	ldr	r0, [pc, #540]	@ (8008a38 <BlinkyTest_Dispatch+0x288>)
 800881a:	f002 fc59 	bl	800b0d0 <puts>
            data_send_t *data_receive = (data_send_t *)(get_data_dynamic_event(pEvent));
 800881e:	68b8      	ldr	r0, [r7, #8]
 8008820:	f000 fdef 	bl	8009402 <get_data_dynamic_event>
 8008824:	6278      	str	r0, [r7, #36]	@ 0x24
            uint32_t string_len = data_receive->string_len;
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	623b      	str	r3, [r7, #32]
            char print_string[string_len+1];
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	1c59      	adds	r1, r3, #1
 8008830:	460b      	mov	r3, r1
 8008832:	3b01      	subs	r3, #1
 8008834:	61fb      	str	r3, [r7, #28]
 8008836:	2300      	movs	r3, #0
 8008838:	6039      	str	r1, [r7, #0]
 800883a:	607b      	str	r3, [r7, #4]
 800883c:	f04f 0200 	mov.w	r2, #0
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	e9d7 5600 	ldrd	r5, r6, [r7]
 8008848:	4630      	mov	r0, r6
 800884a:	00c3      	lsls	r3, r0, #3
 800884c:	4628      	mov	r0, r5
 800884e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008852:	4628      	mov	r0, r5
 8008854:	00c2      	lsls	r2, r0, #3
 8008856:	2300      	movs	r3, #0
 8008858:	468a      	mov	sl, r1
 800885a:	469b      	mov	fp, r3
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	f04f 0300 	mov.w	r3, #0
 8008864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800886c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008870:	1dcb      	adds	r3, r1, #7
 8008872:	08db      	lsrs	r3, r3, #3
 8008874:	00db      	lsls	r3, r3, #3
 8008876:	ebad 0d03 	sub.w	sp, sp, r3
 800887a:	ab02      	add	r3, sp, #8
 800887c:	3300      	adds	r3, #0
 800887e:	61bb      	str	r3, [r7, #24]
            strcpy(print_string,(char *)data_receive->string_post);
 8008880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008882:	3308      	adds	r3, #8
 8008884:	4619      	mov	r1, r3
 8008886:	69b8      	ldr	r0, [r7, #24]
 8008888:	f002 fe27 	bl	800b4da <strcpy>
            printf("Data receive: %s %ld\n",print_string,data_receive->data_post);
 800888c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	461a      	mov	r2, r3
 8008892:	69b9      	ldr	r1, [r7, #24]
 8008894:	4869      	ldr	r0, [pc, #420]	@ (8008a3c <BlinkyTest_Dispatch+0x28c>)
 8008896:	f002 fbb3 	bl	800b000 <iprintf>
 800889a:	46a5      	mov	sp, r4
        } break;
 800889c:	e0c1      	b.n	8008a22 <BlinkyTest_Dispatch+0x272>
        case READ_ALL_PROGRAM_TEST : {
 800889e:	466b      	mov	r3, sp
 80088a0:	461e      	mov	r6, r3
            printf("Get the value of all program test\n");
 80088a2:	4867      	ldr	r0, [pc, #412]	@ (8008a40 <BlinkyTest_Dispatch+0x290>)
 80088a4:	f002 fc14 	bl	800b0d0 <puts>
            data_eeprom_t *data_eeprom_read = (data_eeprom_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 80088a8:	68b8      	ldr	r0, [r7, #8]
 80088aa:	f000 fdaa 	bl	8009402 <get_data_dynamic_event>
 80088ae:	4603      	mov	r3, r0
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	637b      	str	r3, [r7, #52]	@ 0x34
            uint16_t len = data_eeprom_read->data_len;
 80088b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088b6:	891b      	ldrh	r3, [r3, #8]
 80088b8:	867b      	strh	r3, [r7, #50]	@ 0x32
            uint8_t data_receive[len+1];
 80088ba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80088bc:	1c59      	adds	r1, r3, #1
 80088be:	1e4b      	subs	r3, r1, #1
 80088c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088c2:	460a      	mov	r2, r1
 80088c4:	2300      	movs	r3, #0
 80088c6:	4690      	mov	r8, r2
 80088c8:	4699      	mov	r9, r3
 80088ca:	f04f 0200 	mov.w	r2, #0
 80088ce:	f04f 0300 	mov.w	r3, #0
 80088d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088de:	460a      	mov	r2, r1
 80088e0:	2300      	movs	r3, #0
 80088e2:	4614      	mov	r4, r2
 80088e4:	461d      	mov	r5, r3
 80088e6:	f04f 0200 	mov.w	r2, #0
 80088ea:	f04f 0300 	mov.w	r3, #0
 80088ee:	00eb      	lsls	r3, r5, #3
 80088f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088f4:	00e2      	lsls	r2, r4, #3
 80088f6:	460b      	mov	r3, r1
 80088f8:	3307      	adds	r3, #7
 80088fa:	08db      	lsrs	r3, r3, #3
 80088fc:	00db      	lsls	r3, r3, #3
 80088fe:	ebad 0d03 	sub.w	sp, sp, r3
 8008902:	ab02      	add	r3, sp, #8
 8008904:	3300      	adds	r3, #0
 8008906:	62bb      	str	r3, [r7, #40]	@ 0x28
            memcpy(data_receive,data_eeprom_read->data,len);
 8008908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800890e:	4619      	mov	r1, r3
 8008910:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008912:	f002 fdf8 	bl	800b506 <memcpy>
            
            if (data_eeprom_read->data) {
 8008916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d004      	beq.n	8008928 <BlinkyTest_Dispatch+0x178>
                free(data_eeprom_read->data);
 800891e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	4618      	mov	r0, r3
 8008924:	f000 fd84 	bl	8009430 <free>
            }

            if (data_eeprom_read) {
 8008928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <BlinkyTest_Dispatch+0x184>
                free(data_eeprom_read);
 800892e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008930:	f000 fd7e 	bl	8009430 <free>
 8008934:	46b5      	mov	sp, r6
            }
        } break;
 8008936:	e074      	b.n	8008a22 <BlinkyTest_Dispatch+0x272>
        case WRITE_PROGRAM_TEST : {
            printf("Write data program test\n");
 8008938:	4842      	ldr	r0, [pc, #264]	@ (8008a44 <BlinkyTest_Dispatch+0x294>)
 800893a:	f002 fbc9 	bl	800b0d0 <puts>
            if (++num_ic > 99) num_ic = 1;
 800893e:	4b42      	ldr	r3, [pc, #264]	@ (8008a48 <BlinkyTest_Dispatch+0x298>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	3301      	adds	r3, #1
 8008944:	b2da      	uxtb	r2, r3
 8008946:	4b40      	ldr	r3, [pc, #256]	@ (8008a48 <BlinkyTest_Dispatch+0x298>)
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	4b3f      	ldr	r3, [pc, #252]	@ (8008a48 <BlinkyTest_Dispatch+0x298>)
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b63      	cmp	r3, #99	@ 0x63
 8008950:	d902      	bls.n	8008958 <BlinkyTest_Dispatch+0x1a8>
 8008952:	4b3d      	ldr	r3, [pc, #244]	@ (8008a48 <BlinkyTest_Dispatch+0x298>)
 8008954:	2201      	movs	r2, #1
 8008956:	701a      	strb	r2, [r3, #0]
            snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%d",name_program,name_ic,num_ic);
 8008958:	4b3b      	ldr	r3, [pc, #236]	@ (8008a48 <BlinkyTest_Dispatch+0x298>)
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	4b3b      	ldr	r3, [pc, #236]	@ (8008a4c <BlinkyTest_Dispatch+0x29c>)
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	4b3b      	ldr	r3, [pc, #236]	@ (8008a50 <BlinkyTest_Dispatch+0x2a0>)
 8008964:	4a3b      	ldr	r2, [pc, #236]	@ (8008a54 <BlinkyTest_Dispatch+0x2a4>)
 8008966:	212a      	movs	r1, #42	@ 0x2a
 8008968:	483b      	ldr	r0, [pc, #236]	@ (8008a58 <BlinkyTest_Dispatch+0x2a8>)
 800896a:	f002 fbb9 	bl	800b0e0 <sniprintf>
            memcpy(data_write.data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 800896e:	4b3b      	ldr	r3, [pc, #236]	@ (8008a5c <BlinkyTest_Dispatch+0x2ac>)
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	4a39      	ldr	r2, [pc, #228]	@ (8008a58 <BlinkyTest_Dispatch+0x2a8>)
 8008974:	4614      	mov	r4, r2
 8008976:	469c      	mov	ip, r3
 8008978:	f104 0e20 	add.w	lr, r4, #32
 800897c:	4665      	mov	r5, ip
 800897e:	4626      	mov	r6, r4
 8008980:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008982:	6028      	str	r0, [r5, #0]
 8008984:	6069      	str	r1, [r5, #4]
 8008986:	60aa      	str	r2, [r5, #8]
 8008988:	60eb      	str	r3, [r5, #12]
 800898a:	3410      	adds	r4, #16
 800898c:	f10c 0c10 	add.w	ip, ip, #16
 8008990:	4574      	cmp	r4, lr
 8008992:	d1f3      	bne.n	800897c <BlinkyTest_Dispatch+0x1cc>
 8008994:	4662      	mov	r2, ip
 8008996:	4623      	mov	r3, r4
 8008998:	cb03      	ldmia	r3!, {r0, r1}
 800899a:	6010      	str	r0, [r2, #0]
 800899c:	6051      	str	r1, [r2, #4]
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	8113      	strh	r3, [r2, #8]
            OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));
 80089a2:	4b2f      	ldr	r3, [pc, #188]	@ (8008a60 <BlinkyTest_Dispatch+0x2b0>)
 80089a4:	6818      	ldr	r0, [r3, #0]
 80089a6:	230c      	movs	r3, #12
 80089a8:	4a2c      	ldr	r2, [pc, #176]	@ (8008a5c <BlinkyTest_Dispatch+0x2ac>)
 80089aa:	2105      	movs	r1, #5
 80089ac:	f000 fb28 	bl	8009000 <OS_task_post_event>
        } break;
 80089b0:	e037      	b.n	8008a22 <BlinkyTest_Dispatch+0x272>
        case READ_ONE_PROGRAM_TEST : {
            printf("Read eeprom\n");
 80089b2:	482c      	ldr	r0, [pc, #176]	@ (8008a64 <BlinkyTest_Dispatch+0x2b4>)
 80089b4:	f002 fb8c 	bl	800b0d0 <puts>
            data_eeprom_t *data_read = (data_eeprom_t *)malloc(sizeof(data_eeprom_t));
 80089b8:	200c      	movs	r0, #12
 80089ba:	f000 fd31 	bl	8009420 <malloc>
 80089be:	4603      	mov	r3, r0
 80089c0:	617b      	str	r3, [r7, #20]
            data_read->data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	222a      	movs	r2, #42	@ 0x2a
 80089c6:	811a      	strh	r2, [r3, #8]
            data_read->mem_addr = START_ADDR_PROGRAM_TEST_X(1);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	223d      	movs	r2, #61	@ 0x3d
 80089cc:	801a      	strh	r2, [r3, #0]
            OS_task_post_event(AO_task_eeprom,READ_EEPROM,(uint8_t *)&data_read,sizeof(uint8_t *));
 80089ce:	4b24      	ldr	r3, [pc, #144]	@ (8008a60 <BlinkyTest_Dispatch+0x2b0>)
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	f107 0214 	add.w	r2, r7, #20
 80089d6:	2304      	movs	r3, #4
 80089d8:	2104      	movs	r1, #4
 80089da:	f000 fb11 	bl	8009000 <OS_task_post_event>

        } break;
 80089de:	e020      	b.n	8008a22 <BlinkyTest_Dispatch+0x272>
        case TEST_SEND_DATA_ESP32 : {
            printf("Test send data to esp32\n");
 80089e0:	4821      	ldr	r0, [pc, #132]	@ (8008a68 <BlinkyTest_Dispatch+0x2b8>)
 80089e2:	f002 fb75 	bl	800b0d0 <puts>
            uart_num_test++;
 80089e6:	4b21      	ldr	r3, [pc, #132]	@ (8008a6c <BlinkyTest_Dispatch+0x2bc>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3301      	adds	r3, #1
 80089ec:	4a1f      	ldr	r2, [pc, #124]	@ (8008a6c <BlinkyTest_Dispatch+0x2bc>)
 80089ee:	6013      	str	r3, [r2, #0]
            sprintf((char *)data_uart.data,"%s: %ld\n","The String Send to ESP32",uart_num_test);
 80089f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008a70 <BlinkyTest_Dispatch+0x2c0>)
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a6c <BlinkyTest_Dispatch+0x2bc>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a1e      	ldr	r2, [pc, #120]	@ (8008a74 <BlinkyTest_Dispatch+0x2c4>)
 80089fa:	491f      	ldr	r1, [pc, #124]	@ (8008a78 <BlinkyTest_Dispatch+0x2c8>)
 80089fc:	f002 fba6 	bl	800b14c <siprintf>
            data_uart.len = strlen((char *)data_uart.data);
 8008a00:	4b1b      	ldr	r3, [pc, #108]	@ (8008a70 <BlinkyTest_Dispatch+0x2c0>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7f7 fbad 	bl	8000164 <strlen>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	4a18      	ldr	r2, [pc, #96]	@ (8008a70 <BlinkyTest_Dispatch+0x2c0>)
 8008a0e:	6053      	str	r3, [r2, #4]
            OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_uart,sizeof(uart_buf));
 8008a10:	4b1a      	ldr	r3, [pc, #104]	@ (8008a7c <BlinkyTest_Dispatch+0x2cc>)
 8008a12:	6818      	ldr	r0, [r3, #0]
 8008a14:	2308      	movs	r3, #8
 8008a16:	4a16      	ldr	r2, [pc, #88]	@ (8008a70 <BlinkyTest_Dispatch+0x2c0>)
 8008a18:	2100      	movs	r1, #0
 8008a1a:	f000 faf1 	bl	8009000 <OS_task_post_event>
        } break;
 8008a1e:	e000      	b.n	8008a22 <BlinkyTest_Dispatch+0x272>
        default: break;
 8008a20:	bf00      	nop
    }
}
 8008a22:	bf00      	nop
 8008a24:	373c      	adds	r7, #60	@ 0x3c
 8008a26:	46bd      	mov	sp, r7
 8008a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2c:	40011000 	.word	0x40011000
 8008a30:	0800e134 	.word	0x0800e134
 8008a34:	0800e140 	.word	0x0800e140
 8008a38:	0800e150 	.word	0x0800e150
 8008a3c:	0800e164 	.word	0x0800e164
 8008a40:	0800e17c 	.word	0x0800e17c
 8008a44:	0800e1a0 	.word	0x0800e1a0
 8008a48:	2000006c 	.word	0x2000006c
 8008a4c:	20000058 	.word	0x20000058
 8008a50:	20000044 	.word	0x20000044
 8008a54:	0800e128 	.word	0x0800e128
 8008a58:	20000adc 	.word	0x20000adc
 8008a5c:	20000ac8 	.word	0x20000ac8
 8008a60:	0800e238 	.word	0x0800e238
 8008a64:	0800e1b8 	.word	0x0800e1b8
 8008a68:	0800e1c4 	.word	0x0800e1c4
 8008a6c:	20000b08 	.word	0x20000b08
 8008a70:	20000ad4 	.word	0x20000ad4
 8008a74:	0800e1dc 	.word	0x0800e1dc
 8008a78:	0800e1f8 	.word	0x0800e1f8
 8008a7c:	0800e240 	.word	0x0800e240

08008a80 <AT24Cxx_Init>:
#include <stdio.h>
#include <stdint.h>

/* Private function prototype */

AT24Cxx_Status AT24Cxx_Init(AT24Cxx_t *pDev, uint8_t dev_address, I2C_HandleTypeDef *dev_i2c) {
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	607a      	str	r2, [r7, #4]
 8008a8c:	72fb      	strb	r3, [r7, #11]
    pDev->i2c_port = dev_i2c;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	601a      	str	r2, [r3, #0]
    pDev->dev_address = dev_address << 1;
 8008a94:	7afb      	ldrb	r3, [r7, #11]
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	711a      	strb	r2, [r3, #4]
    /* Test communication */
    //uint8_t test_buf[1] = {0};
    if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 1, 100) == HAL_OK) {
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	791b      	ldrb	r3, [r3, #4]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	2364      	movs	r3, #100	@ 0x64
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f7fa fc3e 	bl	800332c <HAL_I2C_IsDeviceReady>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <AT24Cxx_Init+0x3a>
        return AT24Cxx_Init_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	e000      	b.n	8008abc <AT24Cxx_Init+0x3c>
    }
    return AT24Cxx_Init_Fail;
 8008aba:	2301      	movs	r3, #1
    HAL_Delay(1);
    
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <AT24Cxx_write_buffer>:
    } else {
        return AT24Cxx_Error_write;
    }
}

AT24Cxx_Status AT24Cxx_write_buffer(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t* data_buf, uint16_t buf_length) {
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	607a      	str	r2, [r7, #4]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	817b      	strh	r3, [r7, #10]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	813b      	strh	r3, [r7, #8]
    /* Check valid size buffer and address */
    if (mem_addr+buf_length < AT24C256_MAX_ADDR && buf_length < AT24C256_PG_SIZE) {
 8008ad8:	897a      	ldrh	r2, [r7, #10]
 8008ada:	893b      	ldrh	r3, [r7, #8]
 8008adc:	4413      	add	r3, r2
 8008ade:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	dc11      	bgt.n	8008b0a <AT24Cxx_write_buffer+0x46>
 8008ae6:	893b      	ldrh	r3, [r7, #8]
 8008ae8:	2b3f      	cmp	r3, #63	@ 0x3f
 8008aea:	d80e      	bhi.n	8008b0a <AT24Cxx_write_buffer+0x46>
        HAL_I2C_Mem_Write_IT(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_buf,buf_length);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	791b      	ldrb	r3, [r3, #4]
 8008af4:	4619      	mov	r1, r3
 8008af6:	897a      	ldrh	r2, [r7, #10]
 8008af8:	893b      	ldrh	r3, [r7, #8]
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	2310      	movs	r3, #16
 8008b02:	f7fa fb67 	bl	80031d4 <HAL_I2C_Mem_Write_IT>
        return AT24Cxx_OK;
 8008b06:	2302      	movs	r3, #2
 8008b08:	e000      	b.n	8008b0c <AT24Cxx_write_buffer+0x48>
    } else {
        return AT24Cxx_Error_write;
 8008b0a:	2303      	movs	r3, #3
    }
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <AT24Cxx_read_buffer>:
                    AT24C256_I2C_TIMOUT) != HAL_OK);
        }
    }
}

AT24Cxx_Status AT24Cxx_read_buffer(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t *data_ret, uint16_t buf_length) {
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af04      	add	r7, sp, #16
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	607a      	str	r2, [r7, #4]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	460b      	mov	r3, r1
 8008b22:	817b      	strh	r3, [r7, #10]
 8008b24:	4613      	mov	r3, r2
 8008b26:	813b      	strh	r3, [r7, #8]
    if (mem_addr < AT24C256_MAX_ADDR) {
 8008b28:	897b      	ldrh	r3, [r7, #10]
 8008b2a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d810      	bhi.n	8008b54 <AT24Cxx_read_buffer+0x40>
        HAL_I2C_Mem_Read(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_ret,buf_length,10);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6818      	ldr	r0, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	791b      	ldrb	r3, [r3, #4]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	897a      	ldrh	r2, [r7, #10]
 8008b3e:	230a      	movs	r3, #10
 8008b40:	9302      	str	r3, [sp, #8]
 8008b42:	893b      	ldrh	r3, [r7, #8]
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	2310      	movs	r3, #16
 8008b4c:	f7fa f8ce 	bl	8002cec <HAL_I2C_Mem_Read>
        return AT24Cxx_OK;
 8008b50:	2302      	movs	r3, #2
 8008b52:	e000      	b.n	8008b56 <AT24Cxx_read_buffer+0x42>
    } else {
        return AT24Cxx_Error_read;
 8008b54:	2304      	movs	r3, #4
    }
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <DWIN_SetPage>:
#include "DWIN_HMI.h"

void DWIN_SetPage(Dwin_t *pDwin, uint8_t page)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b086      	sub	sp, #24
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	460b      	mov	r3, r1
 8008b68:	70fb      	strb	r3, [r7, #3]
    uint8_t sendBuffer[10] = {CMD_HEAD1, CMD_HEAD2, 0x07, CMD_WRITE, 0x00, 0x84, 0x5A, 0x01, 0x00, page};
 8008b6a:	235a      	movs	r3, #90	@ 0x5a
 8008b6c:	733b      	strb	r3, [r7, #12]
 8008b6e:	23a5      	movs	r3, #165	@ 0xa5
 8008b70:	737b      	strb	r3, [r7, #13]
 8008b72:	2307      	movs	r3, #7
 8008b74:	73bb      	strb	r3, [r7, #14]
 8008b76:	2382      	movs	r3, #130	@ 0x82
 8008b78:	73fb      	strb	r3, [r7, #15]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	743b      	strb	r3, [r7, #16]
 8008b7e:	2384      	movs	r3, #132	@ 0x84
 8008b80:	747b      	strb	r3, [r7, #17]
 8008b82:	235a      	movs	r3, #90	@ 0x5a
 8008b84:	74bb      	strb	r3, [r7, #18]
 8008b86:	2301      	movs	r3, #1
 8008b88:	74fb      	strb	r3, [r7, #19]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	753b      	strb	r3, [r7, #20]
 8008b8e:	78fb      	ldrb	r3, [r7, #3]
 8008b90:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6818      	ldr	r0, [r3, #0]
 8008b96:	f107 010c 	add.w	r1, r7, #12
 8008b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008b9e:	220a      	movs	r2, #10
 8008ba0:	f7fc fff6 	bl	8005b90 <HAL_UART_Transmit>
}
 8008ba4:	bf00      	nop
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <DWIN_SetText>:

void DWIN_SetText(Dwin_t *pDwin, uint16_t VP_address, char *textData, uint16_t datalen) {
 8008bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb0:	b08a      	sub	sp, #40	@ 0x28
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	60f8      	str	r0, [r7, #12]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	460b      	mov	r3, r1
 8008bbc:	817b      	strh	r3, [r7, #10]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	813b      	strh	r3, [r7, #8]
 8008bc2:	466b      	mov	r3, sp
 8008bc4:	469a      	mov	sl, r3
    uint8_t ffEnding[2] = { 0xFF, 0xFF };
 8008bc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008bca:	83bb      	strh	r3, [r7, #28]
    uint8_t sendBuffer[8 + datalen];
 8008bcc:	893b      	ldrh	r3, [r7, #8]
 8008bce:	f103 0608 	add.w	r6, r3, #8
 8008bd2:	1e73      	subs	r3, r6, #1
 8008bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bd6:	4632      	mov	r2, r6
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4690      	mov	r8, r2
 8008bdc:	4699      	mov	r9, r3
 8008bde:	f04f 0200 	mov.w	r2, #0
 8008be2:	f04f 0300 	mov.w	r3, #0
 8008be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bf2:	4632      	mov	r2, r6
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4614      	mov	r4, r2
 8008bf8:	461d      	mov	r5, r3
 8008bfa:	f04f 0200 	mov.w	r2, #0
 8008bfe:	f04f 0300 	mov.w	r3, #0
 8008c02:	00eb      	lsls	r3, r5, #3
 8008c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c08:	00e2      	lsls	r2, r4, #3
 8008c0a:	4633      	mov	r3, r6
 8008c0c:	3307      	adds	r3, #7
 8008c0e:	08db      	lsrs	r3, r3, #3
 8008c10:	00db      	lsls	r3, r3, #3
 8008c12:	ebad 0d03 	sub.w	sp, sp, r3
 8008c16:	466b      	mov	r3, sp
 8008c18:	3300      	adds	r3, #0
 8008c1a:	623b      	str	r3, [r7, #32]

    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 8008c1c:	235a      	movs	r3, #90	@ 0x5a
 8008c1e:	753b      	strb	r3, [r7, #20]
 8008c20:	23a5      	movs	r3, #165	@ 0xa5
 8008c22:	757b      	strb	r3, [r7, #21]
 8008c24:	893b      	ldrh	r3, [r7, #8]
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	3305      	adds	r3, #5
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	75bb      	strb	r3, [r7, #22]
 8008c2e:	2382      	movs	r3, #130	@ 0x82
 8008c30:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 8008c32:	897b      	ldrh	r3, [r7, #10]
 8008c34:	0a1b      	lsrs	r3, r3, #8
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 8008c3a:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 8008c3c:	897b      	ldrh	r3, [r7, #10]
 8008c3e:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 8008c40:	767b      	strb	r3, [r7, #25]
    
    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	461a      	mov	r2, r3
 8008c46:	f107 0314 	add.w	r3, r7, #20
 8008c4a:	6818      	ldr	r0, [r3, #0]
 8008c4c:	6010      	str	r0, [r2, #0]
 8008c4e:	889b      	ldrh	r3, [r3, #4]
 8008c50:	8093      	strh	r3, [r2, #4]
    memcpy(sendBuffer + 6, textData, datalen);
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	3306      	adds	r3, #6
 8008c56:	893a      	ldrh	r2, [r7, #8]
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f002 fc53 	bl	800b506 <memcpy>
    memcpy(sendBuffer + (6 + datalen), ffEnding, sizeof(ffEnding));
 8008c60:	893b      	ldrh	r3, [r7, #8]
 8008c62:	3306      	adds	r3, #6
 8008c64:	461a      	mov	r2, r3
 8008c66:	6a3b      	ldr	r3, [r7, #32]
 8008c68:	4413      	add	r3, r2
 8008c6a:	8bba      	ldrh	r2, [r7, #28]
 8008c6c:	801a      	strh	r2, [r3, #0]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6818      	ldr	r0, [r3, #0]
 8008c72:	b2b2      	uxth	r2, r6
 8008c74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008c78:	6a39      	ldr	r1, [r7, #32]
 8008c7a:	f7fc ff89 	bl	8005b90 <HAL_UART_Transmit>
 8008c7e:	46d5      	mov	sp, sl
}
 8008c80:	bf00      	nop
 8008c82:	3728      	adds	r7, #40	@ 0x28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08008c8c <DWIN_ClearText>:

void DWIN_ClearText(Dwin_t *pDwin, uint16_t VP_address) {
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	460b      	mov	r3, r1
 8008c96:	807b      	strh	r3, [r7, #2]
    DWIN_SetText(pDwin,VP_address,(uint8_t *)"",strlen(""));
 8008c98:	8879      	ldrh	r1, [r7, #2]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	4a03      	ldr	r2, [pc, #12]	@ (8008cac <DWIN_ClearText+0x20>)
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff ff84 	bl	8008bac <DWIN_SetText>
}
 8008ca4:	bf00      	nop
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	0800e204 	.word	0x0800e204

08008cb0 <DWIN_SetVariable_Icon>:
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
}

void DWIN_SetVariable_Icon(Dwin_t *pDwin, uint16_t VP_address, uint16_t data ) {
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	807b      	strh	r3, [r7, #2]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	803b      	strh	r3, [r7, #0]
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8008cc0:	235a      	movs	r3, #90	@ 0x5a
 8008cc2:	723b      	strb	r3, [r7, #8]
 8008cc4:	23a5      	movs	r3, #165	@ 0xa5
 8008cc6:	727b      	strb	r3, [r7, #9]
 8008cc8:	2305      	movs	r3, #5
 8008cca:	72bb      	strb	r3, [r7, #10]
 8008ccc:	2382      	movs	r3, #130	@ 0x82
 8008cce:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 8008cd0:	887b      	ldrh	r3, [r7, #2]
 8008cd2:	0a1b      	lsrs	r3, r3, #8
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8008cd8:	733b      	strb	r3, [r7, #12]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 8008cda:	887b      	ldrh	r3, [r7, #2]
 8008cdc:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8008cde:	737b      	strb	r3, [r7, #13]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 8008ce0:	883b      	ldrh	r3, [r7, #0]
 8008ce2:	0a1b      	lsrs	r3, r3, #8
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8008ce8:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 8008cea:	883b      	ldrh	r3, [r7, #0]
 8008cec:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8008cee:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	f107 0108 	add.w	r1, r7, #8
 8008cf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	f7fc ff47 	bl	8005b90 <HAL_UART_Transmit>
}
 8008d02:	bf00      	nop
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <DWIN_SetArray_Icon>:

void DWIN_SetArray_Icon(Dwin_t *pDwin, uint16_t VP_address_begin, uint8_t *data_array, uint8_t data_length ) {
 8008d0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d0e:	b08b      	sub	sp, #44	@ 0x2c
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	607a      	str	r2, [r7, #4]
 8008d16:	461a      	mov	r2, r3
 8008d18:	460b      	mov	r3, r1
 8008d1a:	817b      	strh	r3, [r7, #10]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	727b      	strb	r3, [r7, #9]
 8008d20:	466b      	mov	r3, sp
 8008d22:	461e      	mov	r6, r3
    uint16_t Total_Data_Length = data_length * 2;
 8008d24:	7a7b      	ldrb	r3, [r7, #9]
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	005b      	lsls	r3, r3, #1
 8008d2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t sendBuffer[6 +Total_Data_Length];
 8008d2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d2e:	1d99      	adds	r1, r3, #6
 8008d30:	1e4b      	subs	r3, r1, #1
 8008d32:	623b      	str	r3, [r7, #32]
 8008d34:	460a      	mov	r2, r1
 8008d36:	2300      	movs	r3, #0
 8008d38:	4690      	mov	r8, r2
 8008d3a:	4699      	mov	r9, r3
 8008d3c:	f04f 0200 	mov.w	r2, #0
 8008d40:	f04f 0300 	mov.w	r3, #0
 8008d44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d50:	460a      	mov	r2, r1
 8008d52:	2300      	movs	r3, #0
 8008d54:	4614      	mov	r4, r2
 8008d56:	461d      	mov	r5, r3
 8008d58:	f04f 0200 	mov.w	r2, #0
 8008d5c:	f04f 0300 	mov.w	r3, #0
 8008d60:	00eb      	lsls	r3, r5, #3
 8008d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d66:	00e2      	lsls	r2, r4, #3
 8008d68:	460b      	mov	r3, r1
 8008d6a:	3307      	adds	r3, #7
 8008d6c:	08db      	lsrs	r3, r3, #3
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	ebad 0d03 	sub.w	sp, sp, r3
 8008d74:	466b      	mov	r3, sp
 8008d76:	3300      	adds	r3, #0
 8008d78:	61fb      	str	r3, [r7, #28]
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 8008d7a:	235a      	movs	r3, #90	@ 0x5a
 8008d7c:	753b      	strb	r3, [r7, #20]
 8008d7e:	23a5      	movs	r3, #165	@ 0xa5
 8008d80:	757b      	strb	r3, [r7, #21]
 8008d82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	3303      	adds	r3, #3
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	75bb      	strb	r3, [r7, #22]
 8008d8c:	2382      	movs	r3, #130	@ 0x82
 8008d8e:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 8008d90:	897b      	ldrh	r3, [r7, #10]
 8008d92:	0a1b      	lsrs	r3, r3, #8
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 8008d98:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 8008d9a:	897b      	ldrh	r3, [r7, #10]
 8008d9c:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 8008d9e:	767b      	strb	r3, [r7, #25]

    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	461a      	mov	r2, r3
 8008da4:	f107 0314 	add.w	r3, r7, #20
 8008da8:	6818      	ldr	r0, [r3, #0]
 8008daa:	6010      	str	r0, [r2, #0]
 8008dac:	889b      	ldrh	r3, [r3, #4]
 8008dae:	8093      	strh	r3, [r2, #4]
    /* Convert data array uint8_t to uint16_t */
    for (uint16_t i = 0; i < data_length; i++) {
 8008db0:	2300      	movs	r3, #0
 8008db2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008db4:	e012      	b.n	8008ddc <DWIN_SetArray_Icon+0xd2>
        sendBuffer[6 + (i * 2)] = 0x00;              // High byte 
 8008db6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008db8:	3303      	adds	r3, #3
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	69fa      	ldr	r2, [r7, #28]
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	54d0      	strb	r0, [r2, r3]
        sendBuffer[6 + (i * 2) + 1] = data_array[i]; // Low byte is data
 8008dc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	441a      	add	r2, r3
 8008dc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008dca:	3303      	adds	r3, #3
 8008dcc:	005b      	lsls	r3, r3, #1
 8008dce:	3301      	adds	r3, #1
 8008dd0:	7810      	ldrb	r0, [r2, #0]
 8008dd2:	69fa      	ldr	r2, [r7, #28]
 8008dd4:	54d0      	strb	r0, [r2, r3]
    for (uint16_t i = 0; i < data_length; i++) {
 8008dd6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008dd8:	3301      	adds	r3, #1
 8008dda:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008ddc:	7a7b      	ldrb	r3, [r7, #9]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d3e7      	bcc.n	8008db6 <DWIN_SetArray_Icon+0xac>
    }

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	b28a      	uxth	r2, r1
 8008dec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008df0:	69f9      	ldr	r1, [r7, #28]
 8008df2:	f7fc fecd 	bl	8005b90 <HAL_UART_Transmit>
 8008df6:	46b5      	mov	sp, r6
}
 8008df8:	bf00      	nop
 8008dfa:	372c      	adds	r7, #44	@ 0x2c
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008e02 <DWIN_SetCallback>:
    }
}

// Set DWIN callback function when receive data 
void DWIN_SetCallback(Dwin_t *pDwin, pListenDWIN dwin_callback)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
    pDwin->p_ListenDWIN_Callback = dwin_callback;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	609a      	str	r2, [r3, #8]
}
 8008e12:	bf00      	nop
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bc80      	pop	{r7}
 8008e1a:	4770      	bx	lr

08008e1c <DWIN_Listen>:

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
    uint16_t VPaddress;
    uint16_t lowByte;
    uint16_t highByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b5a      	cmp	r3, #90	@ 0x5a
 8008e2c:	d133      	bne.n	8008e96 <DWIN_Listen+0x7a>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	3301      	adds	r3, #1
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2ba5      	cmp	r3, #165	@ 0xa5
 8008e36:	d12e      	bne.n	8008e96 <DWIN_Listen+0x7a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	3303      	adds	r3, #3
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b83      	cmp	r3, #131	@ 0x83
 8008e40:	d129      	bne.n	8008e96 <DWIN_Listen+0x7a>
        {
            datalength = RX_Buffer[2];
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	789b      	ldrb	r3, [r3, #2]
 8008e46:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	3302      	adds	r3, #2
 8008e4c:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	3304      	adds	r3, #4
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	b21b      	sxth	r3, r3
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	b21a      	sxth	r2, r3
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	3305      	adds	r3, #5
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	b21b      	sxth	r3, r3
 8008e62:	4313      	orrs	r3, r2
 8008e64:	b21b      	sxth	r3, r3
 8008e66:	81bb      	strh	r3, [r7, #12]
            /* get return key value */
            lowByte = RX_Buffer[datalength];  
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	817b      	strh	r3, [r7, #10]
            highByte = RX_Buffer[datalength-1];
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
 8008e74:	3b01      	subs	r3, #1
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4413      	add	r3, r2
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	813b      	strh	r3, [r7, #8]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d007      	beq.n	8008e96 <DWIN_Listen+0x7a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lowByte,highByte);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	897a      	ldrh	r2, [r7, #10]
 8008e8c:	b2d1      	uxtb	r1, r2
 8008e8e:	893a      	ldrh	r2, [r7, #8]
 8008e90:	b2d2      	uxtb	r2, r2
 8008e92:	89b8      	ldrh	r0, [r7, #12]
 8008e94:	4798      	blx	r3
            }
        }
    }

    
}
 8008e96:	bf00      	nop
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <OS_task_init>:
/* Initialize object by assigning init and dispatch handler function */
void OS_task_init(
    OS_task * const pOS_task,
    OS_handler init,
    OS_handler dispatch) 
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b085      	sub	sp, #20
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	60b9      	str	r1, [r7, #8]
 8008ea8:	607a      	str	r2, [r7, #4]
    pOS_task->init = init;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	601a      	str	r2, [r3, #0]
    pOS_task->dispatch = dispatch;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	605a      	str	r2, [r3, #4]
}
 8008eb6:	bf00      	nop
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bc80      	pop	{r7}
 8008ebe:	4770      	bx	lr

08008ec0 <OS_task_create>:
    OS_task * const pOS_task,
    OS_taskPrio task_prio,
    OS_event_t const **pBuf ,
    OS_EQCt eqLen,
    OS_event_t const * const init_e)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	607a      	str	r2, [r7, #4]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	460b      	mov	r3, r1
 8008ece:	72fb      	strb	r3, [r7, #11]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	72bb      	strb	r3, [r7, #10]
    /* check parameter */
    if ( task_prio > 0  /* the priority must be greater than 0 */
 8008ed4:	7afb      	ldrb	r3, [r7, #11]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d020      	beq.n	8008f1c <OS_task_create+0x5c>
        && pBuf != (OS_event_t const **)0 /* The queue exists */
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01d      	beq.n	8008f1c <OS_task_create+0x5c>
        && eqLen > 0) { /* the length greater than 0 */
 8008ee0:	7abb      	ldrb	r3, [r7, #10]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d01a      	beq.n	8008f1c <OS_task_create+0x5c>
        pOS_task->qBuf = pBuf;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	609a      	str	r2, [r3, #8]
        pOS_task->end = eqLen - 1;
 8008eec:	7abb      	ldrb	r3, [r7, #10]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	731a      	strb	r2, [r3, #12]
        pOS_task->head = 0;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	735a      	strb	r2, [r3, #13]
        pOS_task->tail = 0;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	739a      	strb	r2, [r3, #14]
        pOS_task->nUsed = 0;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	73da      	strb	r2, [r3, #15]

        /* Set task priority */
        // OS_setTask_priority(pOS_task,task_prio);
        pOS_task->task_piro = task_prio - 1;
 8008f08:	7afb      	ldrb	r3, [r7, #11]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	741a      	strb	r2, [r3, #16]


        /* Initialize task with initialization event */
        (*pOS_task->init)(pOS_task,init_e);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69b9      	ldr	r1, [r7, #24]
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	4798      	blx	r3
    } 
}
 8008f1c:	bf00      	nop
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <OS_task_post>:
 * @brief Post the event to event queue of task 
 * 
 * @param pOS_task 
 * @param pEvent 
 */ 
void OS_task_post(OS_task *const pOS_task, OS_event_t const * const pEvent) {
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
    OS_ring_buf_tcb *pQueue = &pri_queue[pOS_task->task_piro];
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	7c1b      	ldrb	r3, [r3, #16]
 8008f32:	461a      	mov	r2, r3
 8008f34:	2358      	movs	r3, #88	@ 0x58
 8008f36:	fb02 f303 	mul.w	r3, r2, r3
 8008f3a:	4a30      	ldr	r2, [pc, #192]	@ (8008ffc <OS_task_post+0xd8>)
 8008f3c:	4413      	add	r3, r2
 8008f3e:	60fb      	str	r3, [r7, #12]

    /* Check over flow of queue */
    if (pri_queue[pOS_task->task_piro].nUsed >= OS_TASK_PER_PRI || pOS_task->nUsed > pOS_task->end ) { /* full queue */
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	7c1b      	ldrb	r3, [r3, #16]
 8008f44:	4619      	mov	r1, r3
 8008f46:	4a2d      	ldr	r2, [pc, #180]	@ (8008ffc <OS_task_post+0xd8>)
 8008f48:	2358      	movs	r3, #88	@ 0x58
 8008f4a:	fb01 f303 	mul.w	r3, r1, r3
 8008f4e:	4413      	add	r3, r2
 8008f50:	3303      	adds	r3, #3
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b09      	cmp	r3, #9
 8008f56:	d84d      	bhi.n	8008ff4 <OS_task_post+0xd0>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	7bda      	ldrb	r2, [r3, #15]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	7b1b      	ldrb	r3, [r3, #12]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d847      	bhi.n	8008ff4 <OS_task_post+0xd0>
        return;
    }

    /* insert tcb to queue */
    OS_PORT_CRIT_ENTRY();
 8008f64:	b672      	cpsid	i
    pQueue->buf_tcb[pQueue->head_index].pEvent = pEvent;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	4413      	add	r3, r2
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	609a      	str	r2, [r3, #8]
    pQueue->buf_tcb[pQueue->head_index].pOS_task = pOS_task;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	00db      	lsls	r3, r3, #3
 8008f7c:	4413      	add	r3, r2
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	605a      	str	r2, [r3, #4]

    if (pQueue->head_index == 0) {
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d103      	bne.n	8008f92 <OS_task_post+0x6e>
        pQueue->head_index = OS_TASK_PER_PRI - 1; /* wrap around to end of the buffer */
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2209      	movs	r2, #9
 8008f8e:	701a      	strb	r2, [r3, #0]
 8008f90:	e005      	b.n	8008f9e <OS_task_post+0x7a>
    } else {
        --pQueue->head_index;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	701a      	strb	r2, [r3, #0]
    }
    ++pQueue->nUsed; /* Increase number event used in queue */
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	78db      	ldrb	r3, [r3, #3]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	70da      	strb	r2, [r3, #3]

    pOS_task->qBuf[pOS_task->head] = pEvent; /* insert event to queue */
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	689a      	ldr	r2, [r3, #8]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	7b5b      	ldrb	r3, [r3, #13]
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	601a      	str	r2, [r3, #0]
    if (pOS_task->head == 0) { 
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	7b5b      	ldrb	r3, [r3, #13]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d104      	bne.n	8008fcc <OS_task_post+0xa8>
        pOS_task->head = pOS_task->end; /* wrap around to end of the buffer */
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	7b1a      	ldrb	r2, [r3, #12]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	735a      	strb	r2, [r3, #13]
 8008fca:	e005      	b.n	8008fd8 <OS_task_post+0xb4>
    } else {
        --pOS_task->head;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	7b5b      	ldrb	r3, [r3, #13]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	735a      	strb	r2, [r3, #13]
    }
    ++pOS_task->nUsed; /* Increase number event used in queue */
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	7bdb      	ldrb	r3, [r3, #15]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	73da      	strb	r2, [r3, #15]

    /* Post event -> make the interrupt */
    // OS_PORT_TASK_PEND();
    HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fe8:	b25b      	sxtb	r3, r3
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7f9 fabb 	bl	8002566 <HAL_NVIC_SetPendingIRQ>
    OS_PORT_CRIT_EXIT();
 8008ff0:	b662      	cpsie	i
 8008ff2:	e000      	b.n	8008ff6 <OS_task_post+0xd2>
        return;
 8008ff4:	bf00      	nop
}
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	20000b0c 	.word	0x20000b0c

08009000 <OS_task_post_event>:

void OS_task_post_event(OS_task *const pOS_task,uint8_t sig, uint8_t *data, uint32_t size) {
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	607a      	str	r2, [r7, #4]
 800900a:	603b      	str	r3, [r7, #0]
 800900c:	460b      	mov	r3, r1
 800900e:	72fb      	strb	r3, [r7, #11]
    OS_event_t *e = get_dynamic_event();
 8009010:	f000 f99c 	bl	800934c <get_dynamic_event>
 8009014:	6178      	str	r0, [r7, #20]
    set_sig_dynamic_event(e,sig);
 8009016:	7afb      	ldrb	r3, [r7, #11]
 8009018:	4619      	mov	r1, r3
 800901a:	6978      	ldr	r0, [r7, #20]
 800901c:	f000 f9e2 	bl	80093e4 <set_sig_dynamic_event>
    set_data_dynamic_event(e,data,size);
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	6978      	ldr	r0, [r7, #20]
 8009026:	f000 f9bb 	bl	80093a0 <set_data_dynamic_event>
    OS_task_post(pOS_task,e);
 800902a:	6979      	ldr	r1, [r7, #20]
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f7ff ff79 	bl	8008f24 <OS_task_post>
}
 8009032:	bf00      	nop
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
	...

0800903c <OS_TimeEvt_init>:

void OS_TimeEvt_init(
    OS_TimeEvt *pOS_Evt,
    uint16_t  sig,
    OS_task *task)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	460b      	mov	r3, r1
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	817b      	strh	r3, [r7, #10]
    pOS_Evt->Time_event.sig = sig;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	897a      	ldrh	r2, [r7, #10]
 800904e:	801a      	strh	r2, [r3, #0]
//    pOS_Evt->Time_event.data = 0;
    pOS_Evt->Time_event.len = 0;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	645a      	str	r2, [r3, #68]	@ 0x44
    pOS_Evt->task_post = task;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	64da      	str	r2, [r3, #76]	@ 0x4c
    pOS_Evt->Time_Ctr = 0;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = 0;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* add new node to head of liked list */
    pOS_Evt->next = timeEvt_head;
 800906c:	4b05      	ldr	r3, [pc, #20]	@ (8009084 <OS_TimeEvt_init+0x48>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	649a      	str	r2, [r3, #72]	@ 0x48
    timeEvt_head = pOS_Evt;
 8009074:	4a03      	ldr	r2, [pc, #12]	@ (8009084 <OS_TimeEvt_init+0x48>)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6013      	str	r3, [r2, #0]
} 
 800907a:	bf00      	nop
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	bc80      	pop	{r7}
 8009082:	4770      	bx	lr
 8009084:	20000c14 	.word	0x20000c14

08009088 <OS_TimeEvt_Set>:
 * 
 * @param pOS_Evt Timer for generating event when TIMEOUT 
 * @param count TIMEOUT value 
 * @param interval interval value for periodic time event
 */
void OS_TimeEvt_Set(OS_TimeEvt *pOS_Evt, uint16_t count, uint16_t interval) {
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	807b      	strh	r3, [r7, #2]
 8009094:	4613      	mov	r3, r2
 8009096:	803b      	strh	r3, [r7, #0]
    OS_PORT_CRIT_ENTRY();
 8009098:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = count;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	887a      	ldrh	r2, [r7, #2]
 800909e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = interval;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	883a      	ldrh	r2, [r7, #0]
 80090a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    OS_PORT_CRIT_EXIT();
 80090aa:	b662      	cpsie	i
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bc80      	pop	{r7}
 80090b4:	4770      	bx	lr

080090b6 <OS_TimeEvt_Stop>:

void OS_TimeEvt_Stop(OS_TimeEvt *pOS_Evt) {
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 80090be:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = 0;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = 0;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    OS_PORT_CRIT_EXIT();
 80090d0:	b662      	cpsie	i
}
 80090d2:	bf00      	nop
 80090d4:	370c      	adds	r7, #12
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bc80      	pop	{r7}
 80090da:	4770      	bx	lr

080090dc <OS_TimeEvt_tick>:

/**
 * @brief function in systemtick handler (1ms) to execute task time OS 
 * 
 */
void OS_TimeEvt_tick(void) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
    /* run for all the node time event */
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 80090e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009150 <OS_TimeEvt_tick+0x74>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	607b      	str	r3, [r7, #4]
 80090e8:	e029      	b.n	800913e <OS_TimeEvt_tick+0x62>
        OS_PORT_CRIT_ENTRY();
 80090ea:	b672      	cpsid	i
        if (node->Time_Ctr == 0) { /* down counter = 0  -> stop node */
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <OS_TimeEvt_tick+0x1e>
            OS_PORT_CRIT_EXIT();
 80090f6:	b662      	cpsie	i
 80090f8:	e01e      	b.n	8009138 <OS_TimeEvt_tick+0x5c>
        } else if (node->Time_Ctr == 1) { /* TIMEOUT */
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009100:	2b01      	cmp	r3, #1
 8009102:	d110      	bne.n	8009126 <OS_TimeEvt_tick+0x4a>
            node->Time_Ctr = node->Time_interval;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 8009110:	b662      	cpsie	i
            /* Post event */
            // OS_task_post(node->task_post,&node->Time_event);
            OS_task_post_event(node->task_post,node->Time_event.sig,(uint8_t *)0,0);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	b2d9      	uxtb	r1, r3
 800911c:	2300      	movs	r3, #0
 800911e:	2200      	movs	r2, #0
 8009120:	f7ff ff6e 	bl	8009000 <OS_task_post_event>
 8009124:	e008      	b.n	8009138 <OS_TimeEvt_tick+0x5c>
        } else { /* count down value */
            --node->Time_Ctr;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800912c:	3b01      	subs	r3, #1
 800912e:	b29a      	uxth	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 8009136:	b662      	cpsie	i
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800913c:	607b      	str	r3, [r7, #4]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1d2      	bne.n	80090ea <OS_TimeEvt_tick+0xe>
        }
    }
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20000c14 	.word	0x20000c14

08009154 <OS_task_activate>:
/**
 * @brief The task performs an action when it receives an event from the queue. Call in interrupt handler to get event and dispatch
 * 
 * @param pOS_task Task pointer
 */
void OS_task_activate(uint8_t prio_task) {
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	71fb      	strb	r3, [r7, #7]
    OS_ring_buf_tcb *pQueue = &pri_queue[prio_task - 1];
 800915e:	79fb      	ldrb	r3, [r7, #7]
 8009160:	3b01      	subs	r3, #1
 8009162:	2258      	movs	r2, #88	@ 0x58
 8009164:	fb02 f303 	mul.w	r3, r2, r3
 8009168:	4a2e      	ldr	r2, [pc, #184]	@ (8009224 <OS_task_activate+0xd0>)
 800916a:	4413      	add	r3, r2
 800916c:	617b      	str	r3, [r7, #20]
    
    if (pQueue->nUsed == 0) { /* don't have tcb */
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	78db      	ldrb	r3, [r3, #3]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d050      	beq.n	8009218 <OS_task_activate+0xc4>
        return;
    }
    
    uint8_t index = pQueue->tail_index;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	785b      	ldrb	r3, [r3, #1]
 800917a:	74fb      	strb	r3, [r7, #19]
    if (pQueue->tail_index == 0) {
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	785b      	ldrb	r3, [r3, #1]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d103      	bne.n	800918c <OS_task_activate+0x38>
        pQueue->tail_index = OS_TASK_PER_PRI - 1; /* wrap around */
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2209      	movs	r2, #9
 8009188:	705a      	strb	r2, [r3, #1]
 800918a:	e005      	b.n	8009198 <OS_task_activate+0x44>
    } else {
        --pQueue->tail_index;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	785b      	ldrb	r3, [r3, #1]
 8009190:	3b01      	subs	r3, #1
 8009192:	b2da      	uxtb	r2, r3
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	705a      	strb	r2, [r3, #1]
    }

    --pQueue->nUsed;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	78db      	ldrb	r3, [r3, #3]
 800919c:	3b01      	subs	r3, #1
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	70da      	strb	r2, [r3, #3]

    OS_task *pOS_task = pQueue->buf_tcb[index].pOS_task;
 80091a4:	7cfb      	ldrb	r3, [r7, #19]
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	00db      	lsls	r3, r3, #3
 80091aa:	4413      	add	r3, r2
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	60fb      	str	r3, [r7, #12]

    /* Check event in queue */
    if (pOS_task->nUsed == 0) { /* don't have event in queue */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	7bdb      	ldrb	r3, [r3, #15]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d031      	beq.n	800921c <OS_task_activate+0xc8>
        return;
    }

    OS_event_t const *e_receive = pQueue->buf_tcb[index].pEvent;
 80091b8:	7cfb      	ldrb	r3, [r7, #19]
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	00db      	lsls	r3, r3, #3
 80091be:	4413      	add	r3, r2
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	60bb      	str	r3, [r7, #8]
    if (pOS_task->tail == 0) {
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	7b9b      	ldrb	r3, [r3, #14]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d104      	bne.n	80091d6 <OS_task_activate+0x82>
        pOS_task->tail = pOS_task->end; /* wrap around */
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	7b1a      	ldrb	r2, [r3, #12]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	739a      	strb	r2, [r3, #14]
 80091d4:	e005      	b.n	80091e2 <OS_task_activate+0x8e>
    } else {
        --pOS_task->tail;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	7b9b      	ldrb	r3, [r3, #14]
 80091da:	3b01      	subs	r3, #1
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	739a      	strb	r2, [r3, #14]
    }
    OS_PORT_CRIT_ENTRY();
 80091e2:	b672      	cpsid	i
    if (--pOS_task->nUsed > 0) { /* check have any event in queue */
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	7bdb      	ldrb	r3, [r3, #15]
 80091e8:	3b01      	subs	r3, #1
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	73da      	strb	r2, [r3, #15]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	7bdb      	ldrb	r3, [r3, #15]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d005      	beq.n	8009204 <OS_task_activate+0xb0>
    	 HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091fc:	b25b      	sxtb	r3, r3
 80091fe:	4618      	mov	r0, r3
 8009200:	f7f9 f9b1 	bl	8002566 <HAL_NVIC_SetPendingIRQ>
    }
    OS_PORT_CRIT_EXIT();
 8009204:	b662      	cpsie	i

    /* Dispatch the received event to this task */
    (*pOS_task->dispatch)(pOS_task,e_receive);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	68b9      	ldr	r1, [r7, #8]
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	4798      	blx	r3

    free_dynamic_event(e_receive);
 8009210:	68b8      	ldr	r0, [r7, #8]
 8009212:	f000 f86f 	bl	80092f4 <free_dynamic_event>
 8009216:	e002      	b.n	800921e <OS_task_activate+0xca>
        return;
 8009218:	bf00      	nop
 800921a:	e000      	b.n	800921e <OS_task_activate+0xca>
        return;
 800921c:	bf00      	nop
}
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	20000b0c 	.word	0x20000b0c

08009228 <OS_priority_IRQ>:
 * @brief Set task priority 
 * 
 * @param pOS_task Task pointer 
 * @param prio task priority 
 */
void OS_priority_IRQ(uint8_t IRQ, OS_taskPrio prio) {
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	4603      	mov	r3, r0
 8009230:	460a      	mov	r2, r1
 8009232:	71fb      	strb	r3, [r7, #7]
 8009234:	4613      	mov	r3, r2
 8009236:	71bb      	strb	r3, [r7, #6]
    HAL_NVIC_SetPriority(IRQ,(15U - prio),0);
 8009238:	f997 0007 	ldrsb.w	r0, [r7, #7]
 800923c:	79bb      	ldrb	r3, [r7, #6]
 800923e:	f1c3 030f 	rsb	r3, r3, #15
 8009242:	2200      	movs	r2, #0
 8009244:	4619      	mov	r1, r3
 8009246:	f7f9 f958 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQ);
 800924a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800924e:	4618      	mov	r0, r3
 8009250:	f7f9 f96f 	bl	8002532 <HAL_NVIC_EnableIRQ>
}
 8009254:	bf00      	nop
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <OS_prio_setIRQ>:
 * @brief Set the number IRQ for specific priority
 * 
 * @param prio priority begin from 1 
 * @param num_irq IRQ number 
 */
void OS_prio_setIRQ(uint8_t prio, uint8_t num_irq) {
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	460a      	mov	r2, r1
 8009266:	71fb      	strb	r3, [r7, #7]
 8009268:	4613      	mov	r3, r2
 800926a:	71bb      	strb	r3, [r7, #6]
    if (prio < OS_PRI_MAX) {
 800926c:	79fb      	ldrb	r3, [r7, #7]
 800926e:	2b02      	cmp	r3, #2
 8009270:	d809      	bhi.n	8009286 <OS_prio_setIRQ+0x2a>
        pri_queue[prio - 1].nvic_irq = num_irq;
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	3b01      	subs	r3, #1
 8009276:	79ba      	ldrb	r2, [r7, #6]
 8009278:	4905      	ldr	r1, [pc, #20]	@ (8009290 <OS_prio_setIRQ+0x34>)
 800927a:	2058      	movs	r0, #88	@ 0x58
 800927c:	fb00 f303 	mul.w	r3, r0, r3
 8009280:	440b      	add	r3, r1
 8009282:	3354      	adds	r3, #84	@ 0x54
 8009284:	601a      	str	r2, [r3, #0]
    }
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	bc80      	pop	{r7}
 800928e:	4770      	bx	lr
 8009290:	20000b0c 	.word	0x20000b0c

08009294 <OS_Test_setIRQ>:

void OS_Test_setIRQ(OS_task * const pAO, uint8_t num_irq) {
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
    pAO->nvic_irq = num_irq;
 80092a0:	78fa      	ldrb	r2, [r7, #3]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	619a      	str	r2, [r3, #24]
}
 80092a6:	bf00      	nop
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bc80      	pop	{r7}
 80092ae:	4770      	bx	lr

080092b0 <dynamic_event_pool_init>:
static OS_event_t dynamic_event_pool[OS_EVT_POOL_SIZE];
static uint8_t dynamic_event_pool_free[OS_EVT_POOL_SIZE]; /* Store index in free */
static uint8_t dynamic_event_free_stack; /* point to the next index freen in pool */


void dynamic_event_pool_init(void) {
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 80092b6:	b672      	cpsid	i

    dynamic_event_free_stack = 0;
 80092b8:	4b0c      	ldr	r3, [pc, #48]	@ (80092ec <dynamic_event_pool_init+0x3c>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 80092be:	2300      	movs	r3, #0
 80092c0:	71fb      	strb	r3, [r7, #7]
 80092c2:	e006      	b.n	80092d2 <dynamic_event_pool_init+0x22>
        dynamic_event_pool_free[i] = i; /* Store the index free */
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	490a      	ldr	r1, [pc, #40]	@ (80092f0 <dynamic_event_pool_init+0x40>)
 80092c8:	79fa      	ldrb	r2, [r7, #7]
 80092ca:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	3301      	adds	r3, #1
 80092d0:	71fb      	strb	r3, [r7, #7]
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	2b09      	cmp	r3, #9
 80092d6:	d9f5      	bls.n	80092c4 <dynamic_event_pool_init+0x14>
    }
    dynamic_event_free_stack = OS_EVT_POOL_SIZE;
 80092d8:	4b04      	ldr	r3, [pc, #16]	@ (80092ec <dynamic_event_pool_init+0x3c>)
 80092da:	220a      	movs	r2, #10
 80092dc:	701a      	strb	r2, [r3, #0]
    
    OS_PORT_CRIT_EXIT();
 80092de:	b662      	cpsie	i
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bc80      	pop	{r7}
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	20000ef2 	.word	0x20000ef2
 80092f0:	20000ee8 	.word	0x20000ee8

080092f4 <free_dynamic_event>:


void free_dynamic_event(OS_event_t *e) {
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 80092fc:	b672      	cpsid	i

    uint8_t idx = e - dynamic_event_pool; /* Get index of event */
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a0e      	ldr	r2, [pc, #56]	@ (800933c <free_dynamic_event+0x48>)
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	10db      	asrs	r3, r3, #3
 8009306:	4a0e      	ldr	r2, [pc, #56]	@ (8009340 <free_dynamic_event+0x4c>)
 8009308:	fb02 f303 	mul.w	r3, r2, r3
 800930c:	73fb      	strb	r3, [r7, #15]
//    free(e->data); /* free allocated memory */
    if (idx > 0 && idx < OS_EVT_POOL_SIZE) {
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00c      	beq.n	800932e <free_dynamic_event+0x3a>
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	2b09      	cmp	r3, #9
 8009318:	d809      	bhi.n	800932e <free_dynamic_event+0x3a>
        dynamic_event_pool_free[dynamic_event_free_stack++] = idx; 
 800931a:	4b0a      	ldr	r3, [pc, #40]	@ (8009344 <free_dynamic_event+0x50>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	1c5a      	adds	r2, r3, #1
 8009320:	b2d1      	uxtb	r1, r2
 8009322:	4a08      	ldr	r2, [pc, #32]	@ (8009344 <free_dynamic_event+0x50>)
 8009324:	7011      	strb	r1, [r2, #0]
 8009326:	4619      	mov	r1, r3
 8009328:	4a07      	ldr	r2, [pc, #28]	@ (8009348 <free_dynamic_event+0x54>)
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	5453      	strb	r3, [r2, r1]
    }

    OS_PORT_CRIT_EXIT();
 800932e:	b662      	cpsie	i
}
 8009330:	bf00      	nop
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	bc80      	pop	{r7}
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	20000c18 	.word	0x20000c18
 8009340:	38e38e39 	.word	0x38e38e39
 8009344:	20000ef2 	.word	0x20000ef2
 8009348:	20000ee8 	.word	0x20000ee8

0800934c <get_dynamic_event>:

OS_event_t *get_dynamic_event(void) {
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 8009352:	b672      	cpsid	i
    
    if (dynamic_event_free_stack == 0) return NULL; /* full */
 8009354:	4b0f      	ldr	r3, [pc, #60]	@ (8009394 <get_dynamic_event+0x48>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d101      	bne.n	8009360 <get_dynamic_event+0x14>
 800935c:	2300      	movs	r3, #0
 800935e:	e013      	b.n	8009388 <get_dynamic_event+0x3c>
    uint8_t idx = dynamic_event_pool_free[--dynamic_event_free_stack]; /* Get index in free */
 8009360:	4b0c      	ldr	r3, [pc, #48]	@ (8009394 <get_dynamic_event+0x48>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	3b01      	subs	r3, #1
 8009366:	b2da      	uxtb	r2, r3
 8009368:	4b0a      	ldr	r3, [pc, #40]	@ (8009394 <get_dynamic_event+0x48>)
 800936a:	701a      	strb	r2, [r3, #0]
 800936c:	4b09      	ldr	r3, [pc, #36]	@ (8009394 <get_dynamic_event+0x48>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	461a      	mov	r2, r3
 8009372:	4b09      	ldr	r3, [pc, #36]	@ (8009398 <get_dynamic_event+0x4c>)
 8009374:	5c9b      	ldrb	r3, [r3, r2]
 8009376:	71fb      	strb	r3, [r7, #7]
    
    OS_PORT_CRIT_EXIT();
 8009378:	b662      	cpsie	i
    return &dynamic_event_pool[idx];
 800937a:	79fa      	ldrb	r2, [r7, #7]
 800937c:	4613      	mov	r3, r2
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	4413      	add	r3, r2
 8009382:	00db      	lsls	r3, r3, #3
 8009384:	4a05      	ldr	r2, [pc, #20]	@ (800939c <get_dynamic_event+0x50>)
 8009386:	4413      	add	r3, r2
}
 8009388:	4618      	mov	r0, r3
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	bc80      	pop	{r7}
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	20000ef2 	.word	0x20000ef2
 8009398:	20000ee8 	.word	0x20000ee8
 800939c:	20000c18 	.word	0x20000c18

080093a0 <set_data_dynamic_event>:

void set_data_dynamic_event(OS_event_t *e, uint8_t *data, uint32_t len) {
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
    if (len != 0) {
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00a      	beq.n	80093c8 <set_data_dynamic_event+0x28>
        e->len = len;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	645a      	str	r2, [r3, #68]	@ 0x44
        memcpy(e->data,data,len);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3302      	adds	r3, #2
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	68b9      	ldr	r1, [r7, #8]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f002 f8a0 	bl	800b506 <memcpy>
    } else {
        e->len = len;
        memset(e->data, 0, sizeof(e->data));
    }
}
 80093c6:	e009      	b.n	80093dc <set_data_dynamic_event+0x3c>
        e->len = len;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	645a      	str	r2, [r3, #68]	@ 0x44
        memset(e->data, 0, sizeof(e->data));
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	3302      	adds	r3, #2
 80093d2:	2240      	movs	r2, #64	@ 0x40
 80093d4:	2100      	movs	r1, #0
 80093d6:	4618      	mov	r0, r3
 80093d8:	f001 ffb2 	bl	800b340 <memset>
}
 80093dc:	bf00      	nop
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <set_sig_dynamic_event>:

void set_sig_dynamic_event(OS_event_t *e, uint8_t sig) {
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	70fb      	strb	r3, [r7, #3]
    e->sig = sig;
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	801a      	strh	r2, [r3, #0]
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bc80      	pop	{r7}
 8009400:	4770      	bx	lr

08009402 <get_data_dynamic_event>:

uint8_t *get_data_dynamic_event(OS_event_t * const e) {
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
    return (e->data);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	3302      	adds	r3, #2
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	bc80      	pop	{r7}
 8009416:	4770      	bx	lr

08009418 <atof>:
 8009418:	2100      	movs	r1, #0
 800941a:	f000 bebf 	b.w	800a19c <strtod>
	...

08009420 <malloc>:
 8009420:	4b02      	ldr	r3, [pc, #8]	@ (800942c <malloc+0xc>)
 8009422:	4601      	mov	r1, r0
 8009424:	6818      	ldr	r0, [r3, #0]
 8009426:	f000 b82d 	b.w	8009484 <_malloc_r>
 800942a:	bf00      	nop
 800942c:	200001e8 	.word	0x200001e8

08009430 <free>:
 8009430:	4b02      	ldr	r3, [pc, #8]	@ (800943c <free+0xc>)
 8009432:	4601      	mov	r1, r0
 8009434:	6818      	ldr	r0, [r3, #0]
 8009436:	f002 bedb 	b.w	800c1f0 <_free_r>
 800943a:	bf00      	nop
 800943c:	200001e8 	.word	0x200001e8

08009440 <sbrk_aligned>:
 8009440:	b570      	push	{r4, r5, r6, lr}
 8009442:	4e0f      	ldr	r6, [pc, #60]	@ (8009480 <sbrk_aligned+0x40>)
 8009444:	460c      	mov	r4, r1
 8009446:	6831      	ldr	r1, [r6, #0]
 8009448:	4605      	mov	r5, r0
 800944a:	b911      	cbnz	r1, 8009452 <sbrk_aligned+0x12>
 800944c:	f001 fff6 	bl	800b43c <_sbrk_r>
 8009450:	6030      	str	r0, [r6, #0]
 8009452:	4621      	mov	r1, r4
 8009454:	4628      	mov	r0, r5
 8009456:	f001 fff1 	bl	800b43c <_sbrk_r>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	d103      	bne.n	8009466 <sbrk_aligned+0x26>
 800945e:	f04f 34ff 	mov.w	r4, #4294967295
 8009462:	4620      	mov	r0, r4
 8009464:	bd70      	pop	{r4, r5, r6, pc}
 8009466:	1cc4      	adds	r4, r0, #3
 8009468:	f024 0403 	bic.w	r4, r4, #3
 800946c:	42a0      	cmp	r0, r4
 800946e:	d0f8      	beq.n	8009462 <sbrk_aligned+0x22>
 8009470:	1a21      	subs	r1, r4, r0
 8009472:	4628      	mov	r0, r5
 8009474:	f001 ffe2 	bl	800b43c <_sbrk_r>
 8009478:	3001      	adds	r0, #1
 800947a:	d1f2      	bne.n	8009462 <sbrk_aligned+0x22>
 800947c:	e7ef      	b.n	800945e <sbrk_aligned+0x1e>
 800947e:	bf00      	nop
 8009480:	20000ef4 	.word	0x20000ef4

08009484 <_malloc_r>:
 8009484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009488:	1ccd      	adds	r5, r1, #3
 800948a:	f025 0503 	bic.w	r5, r5, #3
 800948e:	3508      	adds	r5, #8
 8009490:	2d0c      	cmp	r5, #12
 8009492:	bf38      	it	cc
 8009494:	250c      	movcc	r5, #12
 8009496:	2d00      	cmp	r5, #0
 8009498:	4606      	mov	r6, r0
 800949a:	db01      	blt.n	80094a0 <_malloc_r+0x1c>
 800949c:	42a9      	cmp	r1, r5
 800949e:	d904      	bls.n	80094aa <_malloc_r+0x26>
 80094a0:	230c      	movs	r3, #12
 80094a2:	6033      	str	r3, [r6, #0]
 80094a4:	2000      	movs	r0, #0
 80094a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009580 <_malloc_r+0xfc>
 80094ae:	f000 f869 	bl	8009584 <__malloc_lock>
 80094b2:	f8d8 3000 	ldr.w	r3, [r8]
 80094b6:	461c      	mov	r4, r3
 80094b8:	bb44      	cbnz	r4, 800950c <_malloc_r+0x88>
 80094ba:	4629      	mov	r1, r5
 80094bc:	4630      	mov	r0, r6
 80094be:	f7ff ffbf 	bl	8009440 <sbrk_aligned>
 80094c2:	1c43      	adds	r3, r0, #1
 80094c4:	4604      	mov	r4, r0
 80094c6:	d158      	bne.n	800957a <_malloc_r+0xf6>
 80094c8:	f8d8 4000 	ldr.w	r4, [r8]
 80094cc:	4627      	mov	r7, r4
 80094ce:	2f00      	cmp	r7, #0
 80094d0:	d143      	bne.n	800955a <_malloc_r+0xd6>
 80094d2:	2c00      	cmp	r4, #0
 80094d4:	d04b      	beq.n	800956e <_malloc_r+0xea>
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	4639      	mov	r1, r7
 80094da:	4630      	mov	r0, r6
 80094dc:	eb04 0903 	add.w	r9, r4, r3
 80094e0:	f001 ffac 	bl	800b43c <_sbrk_r>
 80094e4:	4581      	cmp	r9, r0
 80094e6:	d142      	bne.n	800956e <_malloc_r+0xea>
 80094e8:	6821      	ldr	r1, [r4, #0]
 80094ea:	4630      	mov	r0, r6
 80094ec:	1a6d      	subs	r5, r5, r1
 80094ee:	4629      	mov	r1, r5
 80094f0:	f7ff ffa6 	bl	8009440 <sbrk_aligned>
 80094f4:	3001      	adds	r0, #1
 80094f6:	d03a      	beq.n	800956e <_malloc_r+0xea>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	442b      	add	r3, r5
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	bb62      	cbnz	r2, 8009560 <_malloc_r+0xdc>
 8009506:	f8c8 7000 	str.w	r7, [r8]
 800950a:	e00f      	b.n	800952c <_malloc_r+0xa8>
 800950c:	6822      	ldr	r2, [r4, #0]
 800950e:	1b52      	subs	r2, r2, r5
 8009510:	d420      	bmi.n	8009554 <_malloc_r+0xd0>
 8009512:	2a0b      	cmp	r2, #11
 8009514:	d917      	bls.n	8009546 <_malloc_r+0xc2>
 8009516:	1961      	adds	r1, r4, r5
 8009518:	42a3      	cmp	r3, r4
 800951a:	6025      	str	r5, [r4, #0]
 800951c:	bf18      	it	ne
 800951e:	6059      	strne	r1, [r3, #4]
 8009520:	6863      	ldr	r3, [r4, #4]
 8009522:	bf08      	it	eq
 8009524:	f8c8 1000 	streq.w	r1, [r8]
 8009528:	5162      	str	r2, [r4, r5]
 800952a:	604b      	str	r3, [r1, #4]
 800952c:	4630      	mov	r0, r6
 800952e:	f000 f82f 	bl	8009590 <__malloc_unlock>
 8009532:	f104 000b 	add.w	r0, r4, #11
 8009536:	1d23      	adds	r3, r4, #4
 8009538:	f020 0007 	bic.w	r0, r0, #7
 800953c:	1ac2      	subs	r2, r0, r3
 800953e:	bf1c      	itt	ne
 8009540:	1a1b      	subne	r3, r3, r0
 8009542:	50a3      	strne	r3, [r4, r2]
 8009544:	e7af      	b.n	80094a6 <_malloc_r+0x22>
 8009546:	6862      	ldr	r2, [r4, #4]
 8009548:	42a3      	cmp	r3, r4
 800954a:	bf0c      	ite	eq
 800954c:	f8c8 2000 	streq.w	r2, [r8]
 8009550:	605a      	strne	r2, [r3, #4]
 8009552:	e7eb      	b.n	800952c <_malloc_r+0xa8>
 8009554:	4623      	mov	r3, r4
 8009556:	6864      	ldr	r4, [r4, #4]
 8009558:	e7ae      	b.n	80094b8 <_malloc_r+0x34>
 800955a:	463c      	mov	r4, r7
 800955c:	687f      	ldr	r7, [r7, #4]
 800955e:	e7b6      	b.n	80094ce <_malloc_r+0x4a>
 8009560:	461a      	mov	r2, r3
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	42a3      	cmp	r3, r4
 8009566:	d1fb      	bne.n	8009560 <_malloc_r+0xdc>
 8009568:	2300      	movs	r3, #0
 800956a:	6053      	str	r3, [r2, #4]
 800956c:	e7de      	b.n	800952c <_malloc_r+0xa8>
 800956e:	230c      	movs	r3, #12
 8009570:	4630      	mov	r0, r6
 8009572:	6033      	str	r3, [r6, #0]
 8009574:	f000 f80c 	bl	8009590 <__malloc_unlock>
 8009578:	e794      	b.n	80094a4 <_malloc_r+0x20>
 800957a:	6005      	str	r5, [r0, #0]
 800957c:	e7d6      	b.n	800952c <_malloc_r+0xa8>
 800957e:	bf00      	nop
 8009580:	20000ef8 	.word	0x20000ef8

08009584 <__malloc_lock>:
 8009584:	4801      	ldr	r0, [pc, #4]	@ (800958c <__malloc_lock+0x8>)
 8009586:	f001 bfa6 	b.w	800b4d6 <__retarget_lock_acquire_recursive>
 800958a:	bf00      	nop
 800958c:	2000103c 	.word	0x2000103c

08009590 <__malloc_unlock>:
 8009590:	4801      	ldr	r0, [pc, #4]	@ (8009598 <__malloc_unlock+0x8>)
 8009592:	f001 bfa1 	b.w	800b4d8 <__retarget_lock_release_recursive>
 8009596:	bf00      	nop
 8009598:	2000103c 	.word	0x2000103c

0800959c <sulp>:
 800959c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a0:	460f      	mov	r7, r1
 80095a2:	4690      	mov	r8, r2
 80095a4:	f003 fd24 	bl	800cff0 <__ulp>
 80095a8:	4604      	mov	r4, r0
 80095aa:	460d      	mov	r5, r1
 80095ac:	f1b8 0f00 	cmp.w	r8, #0
 80095b0:	d011      	beq.n	80095d6 <sulp+0x3a>
 80095b2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80095b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	dd0b      	ble.n	80095d6 <sulp+0x3a>
 80095be:	2400      	movs	r4, #0
 80095c0:	051b      	lsls	r3, r3, #20
 80095c2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80095c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80095ca:	4622      	mov	r2, r4
 80095cc:	462b      	mov	r3, r5
 80095ce:	f7f6 ff8d 	bl	80004ec <__aeabi_dmul>
 80095d2:	4604      	mov	r4, r0
 80095d4:	460d      	mov	r5, r1
 80095d6:	4620      	mov	r0, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080095e0 <_strtod_l>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	b09f      	sub	sp, #124	@ 0x7c
 80095e6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80095e8:	2200      	movs	r2, #0
 80095ea:	460c      	mov	r4, r1
 80095ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80095ee:	f04f 0a00 	mov.w	sl, #0
 80095f2:	f04f 0b00 	mov.w	fp, #0
 80095f6:	460a      	mov	r2, r1
 80095f8:	9005      	str	r0, [sp, #20]
 80095fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80095fc:	7811      	ldrb	r1, [r2, #0]
 80095fe:	292b      	cmp	r1, #43	@ 0x2b
 8009600:	d048      	beq.n	8009694 <_strtod_l+0xb4>
 8009602:	d836      	bhi.n	8009672 <_strtod_l+0x92>
 8009604:	290d      	cmp	r1, #13
 8009606:	d830      	bhi.n	800966a <_strtod_l+0x8a>
 8009608:	2908      	cmp	r1, #8
 800960a:	d830      	bhi.n	800966e <_strtod_l+0x8e>
 800960c:	2900      	cmp	r1, #0
 800960e:	d039      	beq.n	8009684 <_strtod_l+0xa4>
 8009610:	2200      	movs	r2, #0
 8009612:	920e      	str	r2, [sp, #56]	@ 0x38
 8009614:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009616:	782a      	ldrb	r2, [r5, #0]
 8009618:	2a30      	cmp	r2, #48	@ 0x30
 800961a:	f040 80b0 	bne.w	800977e <_strtod_l+0x19e>
 800961e:	786a      	ldrb	r2, [r5, #1]
 8009620:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009624:	2a58      	cmp	r2, #88	@ 0x58
 8009626:	d16c      	bne.n	8009702 <_strtod_l+0x122>
 8009628:	9302      	str	r3, [sp, #8]
 800962a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800962c:	4a8f      	ldr	r2, [pc, #572]	@ (800986c <_strtod_l+0x28c>)
 800962e:	9301      	str	r3, [sp, #4]
 8009630:	ab1a      	add	r3, sp, #104	@ 0x68
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	9805      	ldr	r0, [sp, #20]
 8009636:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009638:	a919      	add	r1, sp, #100	@ 0x64
 800963a:	f002 fe89 	bl	800c350 <__gethex>
 800963e:	f010 060f 	ands.w	r6, r0, #15
 8009642:	4604      	mov	r4, r0
 8009644:	d005      	beq.n	8009652 <_strtod_l+0x72>
 8009646:	2e06      	cmp	r6, #6
 8009648:	d126      	bne.n	8009698 <_strtod_l+0xb8>
 800964a:	2300      	movs	r3, #0
 800964c:	3501      	adds	r5, #1
 800964e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009650:	930e      	str	r3, [sp, #56]	@ 0x38
 8009652:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009654:	2b00      	cmp	r3, #0
 8009656:	f040 8582 	bne.w	800a15e <_strtod_l+0xb7e>
 800965a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800965c:	b1bb      	cbz	r3, 800968e <_strtod_l+0xae>
 800965e:	4650      	mov	r0, sl
 8009660:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009664:	b01f      	add	sp, #124	@ 0x7c
 8009666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966a:	2920      	cmp	r1, #32
 800966c:	d1d0      	bne.n	8009610 <_strtod_l+0x30>
 800966e:	3201      	adds	r2, #1
 8009670:	e7c3      	b.n	80095fa <_strtod_l+0x1a>
 8009672:	292d      	cmp	r1, #45	@ 0x2d
 8009674:	d1cc      	bne.n	8009610 <_strtod_l+0x30>
 8009676:	2101      	movs	r1, #1
 8009678:	910e      	str	r1, [sp, #56]	@ 0x38
 800967a:	1c51      	adds	r1, r2, #1
 800967c:	9119      	str	r1, [sp, #100]	@ 0x64
 800967e:	7852      	ldrb	r2, [r2, #1]
 8009680:	2a00      	cmp	r2, #0
 8009682:	d1c7      	bne.n	8009614 <_strtod_l+0x34>
 8009684:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009686:	9419      	str	r4, [sp, #100]	@ 0x64
 8009688:	2b00      	cmp	r3, #0
 800968a:	f040 8566 	bne.w	800a15a <_strtod_l+0xb7a>
 800968e:	4650      	mov	r0, sl
 8009690:	4659      	mov	r1, fp
 8009692:	e7e7      	b.n	8009664 <_strtod_l+0x84>
 8009694:	2100      	movs	r1, #0
 8009696:	e7ef      	b.n	8009678 <_strtod_l+0x98>
 8009698:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800969a:	b13a      	cbz	r2, 80096ac <_strtod_l+0xcc>
 800969c:	2135      	movs	r1, #53	@ 0x35
 800969e:	a81c      	add	r0, sp, #112	@ 0x70
 80096a0:	f003 fd96 	bl	800d1d0 <__copybits>
 80096a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096a6:	9805      	ldr	r0, [sp, #20]
 80096a8:	f003 f976 	bl	800c998 <_Bfree>
 80096ac:	3e01      	subs	r6, #1
 80096ae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80096b0:	2e04      	cmp	r6, #4
 80096b2:	d806      	bhi.n	80096c2 <_strtod_l+0xe2>
 80096b4:	e8df f006 	tbb	[pc, r6]
 80096b8:	201d0314 	.word	0x201d0314
 80096bc:	14          	.byte	0x14
 80096bd:	00          	.byte	0x00
 80096be:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80096c2:	05e1      	lsls	r1, r4, #23
 80096c4:	bf48      	it	mi
 80096c6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80096ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80096ce:	0d1b      	lsrs	r3, r3, #20
 80096d0:	051b      	lsls	r3, r3, #20
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1bd      	bne.n	8009652 <_strtod_l+0x72>
 80096d6:	f001 fed3 	bl	800b480 <__errno>
 80096da:	2322      	movs	r3, #34	@ 0x22
 80096dc:	6003      	str	r3, [r0, #0]
 80096de:	e7b8      	b.n	8009652 <_strtod_l+0x72>
 80096e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80096e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80096e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80096ec:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80096f0:	e7e7      	b.n	80096c2 <_strtod_l+0xe2>
 80096f2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009870 <_strtod_l+0x290>
 80096f6:	e7e4      	b.n	80096c2 <_strtod_l+0xe2>
 80096f8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80096fc:	f04f 3aff 	mov.w	sl, #4294967295
 8009700:	e7df      	b.n	80096c2 <_strtod_l+0xe2>
 8009702:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009704:	1c5a      	adds	r2, r3, #1
 8009706:	9219      	str	r2, [sp, #100]	@ 0x64
 8009708:	785b      	ldrb	r3, [r3, #1]
 800970a:	2b30      	cmp	r3, #48	@ 0x30
 800970c:	d0f9      	beq.n	8009702 <_strtod_l+0x122>
 800970e:	2b00      	cmp	r3, #0
 8009710:	d09f      	beq.n	8009652 <_strtod_l+0x72>
 8009712:	2301      	movs	r3, #1
 8009714:	2700      	movs	r7, #0
 8009716:	220a      	movs	r2, #10
 8009718:	46b9      	mov	r9, r7
 800971a:	9308      	str	r3, [sp, #32]
 800971c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800971e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009720:	930c      	str	r3, [sp, #48]	@ 0x30
 8009722:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009724:	7805      	ldrb	r5, [r0, #0]
 8009726:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800972a:	b2d9      	uxtb	r1, r3
 800972c:	2909      	cmp	r1, #9
 800972e:	d928      	bls.n	8009782 <_strtod_l+0x1a2>
 8009730:	2201      	movs	r2, #1
 8009732:	4950      	ldr	r1, [pc, #320]	@ (8009874 <_strtod_l+0x294>)
 8009734:	f001 fe37 	bl	800b3a6 <strncmp>
 8009738:	2800      	cmp	r0, #0
 800973a:	d032      	beq.n	80097a2 <_strtod_l+0x1c2>
 800973c:	2000      	movs	r0, #0
 800973e:	462a      	mov	r2, r5
 8009740:	4603      	mov	r3, r0
 8009742:	464d      	mov	r5, r9
 8009744:	900a      	str	r0, [sp, #40]	@ 0x28
 8009746:	2a65      	cmp	r2, #101	@ 0x65
 8009748:	d001      	beq.n	800974e <_strtod_l+0x16e>
 800974a:	2a45      	cmp	r2, #69	@ 0x45
 800974c:	d114      	bne.n	8009778 <_strtod_l+0x198>
 800974e:	b91d      	cbnz	r5, 8009758 <_strtod_l+0x178>
 8009750:	9a08      	ldr	r2, [sp, #32]
 8009752:	4302      	orrs	r2, r0
 8009754:	d096      	beq.n	8009684 <_strtod_l+0xa4>
 8009756:	2500      	movs	r5, #0
 8009758:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800975a:	1c62      	adds	r2, r4, #1
 800975c:	9219      	str	r2, [sp, #100]	@ 0x64
 800975e:	7862      	ldrb	r2, [r4, #1]
 8009760:	2a2b      	cmp	r2, #43	@ 0x2b
 8009762:	d07a      	beq.n	800985a <_strtod_l+0x27a>
 8009764:	2a2d      	cmp	r2, #45	@ 0x2d
 8009766:	d07e      	beq.n	8009866 <_strtod_l+0x286>
 8009768:	f04f 0c00 	mov.w	ip, #0
 800976c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009770:	2909      	cmp	r1, #9
 8009772:	f240 8085 	bls.w	8009880 <_strtod_l+0x2a0>
 8009776:	9419      	str	r4, [sp, #100]	@ 0x64
 8009778:	f04f 0800 	mov.w	r8, #0
 800977c:	e0a5      	b.n	80098ca <_strtod_l+0x2ea>
 800977e:	2300      	movs	r3, #0
 8009780:	e7c8      	b.n	8009714 <_strtod_l+0x134>
 8009782:	f1b9 0f08 	cmp.w	r9, #8
 8009786:	bfd8      	it	le
 8009788:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800978a:	f100 0001 	add.w	r0, r0, #1
 800978e:	bfd6      	itet	le
 8009790:	fb02 3301 	mlale	r3, r2, r1, r3
 8009794:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009798:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800979a:	f109 0901 	add.w	r9, r9, #1
 800979e:	9019      	str	r0, [sp, #100]	@ 0x64
 80097a0:	e7bf      	b.n	8009722 <_strtod_l+0x142>
 80097a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80097a8:	785a      	ldrb	r2, [r3, #1]
 80097aa:	f1b9 0f00 	cmp.w	r9, #0
 80097ae:	d03b      	beq.n	8009828 <_strtod_l+0x248>
 80097b0:	464d      	mov	r5, r9
 80097b2:	900a      	str	r0, [sp, #40]	@ 0x28
 80097b4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80097b8:	2b09      	cmp	r3, #9
 80097ba:	d912      	bls.n	80097e2 <_strtod_l+0x202>
 80097bc:	2301      	movs	r3, #1
 80097be:	e7c2      	b.n	8009746 <_strtod_l+0x166>
 80097c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097c2:	3001      	adds	r0, #1
 80097c4:	1c5a      	adds	r2, r3, #1
 80097c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80097c8:	785a      	ldrb	r2, [r3, #1]
 80097ca:	2a30      	cmp	r2, #48	@ 0x30
 80097cc:	d0f8      	beq.n	80097c0 <_strtod_l+0x1e0>
 80097ce:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80097d2:	2b08      	cmp	r3, #8
 80097d4:	f200 84c8 	bhi.w	800a168 <_strtod_l+0xb88>
 80097d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80097da:	2000      	movs	r0, #0
 80097dc:	4605      	mov	r5, r0
 80097de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80097e2:	3a30      	subs	r2, #48	@ 0x30
 80097e4:	f100 0301 	add.w	r3, r0, #1
 80097e8:	d018      	beq.n	800981c <_strtod_l+0x23c>
 80097ea:	462e      	mov	r6, r5
 80097ec:	f04f 0e0a 	mov.w	lr, #10
 80097f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097f2:	4419      	add	r1, r3
 80097f4:	910a      	str	r1, [sp, #40]	@ 0x28
 80097f6:	1c71      	adds	r1, r6, #1
 80097f8:	eba1 0c05 	sub.w	ip, r1, r5
 80097fc:	4563      	cmp	r3, ip
 80097fe:	dc15      	bgt.n	800982c <_strtod_l+0x24c>
 8009800:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009804:	182b      	adds	r3, r5, r0
 8009806:	2b08      	cmp	r3, #8
 8009808:	f105 0501 	add.w	r5, r5, #1
 800980c:	4405      	add	r5, r0
 800980e:	dc1a      	bgt.n	8009846 <_strtod_l+0x266>
 8009810:	230a      	movs	r3, #10
 8009812:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009814:	fb03 2301 	mla	r3, r3, r1, r2
 8009818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800981a:	2300      	movs	r3, #0
 800981c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800981e:	4618      	mov	r0, r3
 8009820:	1c51      	adds	r1, r2, #1
 8009822:	9119      	str	r1, [sp, #100]	@ 0x64
 8009824:	7852      	ldrb	r2, [r2, #1]
 8009826:	e7c5      	b.n	80097b4 <_strtod_l+0x1d4>
 8009828:	4648      	mov	r0, r9
 800982a:	e7ce      	b.n	80097ca <_strtod_l+0x1ea>
 800982c:	2e08      	cmp	r6, #8
 800982e:	dc05      	bgt.n	800983c <_strtod_l+0x25c>
 8009830:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009832:	fb0e f606 	mul.w	r6, lr, r6
 8009836:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009838:	460e      	mov	r6, r1
 800983a:	e7dc      	b.n	80097f6 <_strtod_l+0x216>
 800983c:	2910      	cmp	r1, #16
 800983e:	bfd8      	it	le
 8009840:	fb0e f707 	mulle.w	r7, lr, r7
 8009844:	e7f8      	b.n	8009838 <_strtod_l+0x258>
 8009846:	2b0f      	cmp	r3, #15
 8009848:	bfdc      	itt	le
 800984a:	230a      	movle	r3, #10
 800984c:	fb03 2707 	mlale	r7, r3, r7, r2
 8009850:	e7e3      	b.n	800981a <_strtod_l+0x23a>
 8009852:	2300      	movs	r3, #0
 8009854:	930a      	str	r3, [sp, #40]	@ 0x28
 8009856:	2301      	movs	r3, #1
 8009858:	e77a      	b.n	8009750 <_strtod_l+0x170>
 800985a:	f04f 0c00 	mov.w	ip, #0
 800985e:	1ca2      	adds	r2, r4, #2
 8009860:	9219      	str	r2, [sp, #100]	@ 0x64
 8009862:	78a2      	ldrb	r2, [r4, #2]
 8009864:	e782      	b.n	800976c <_strtod_l+0x18c>
 8009866:	f04f 0c01 	mov.w	ip, #1
 800986a:	e7f8      	b.n	800985e <_strtod_l+0x27e>
 800986c:	0800e434 	.word	0x0800e434
 8009870:	7ff00000 	.word	0x7ff00000
 8009874:	0800e248 	.word	0x0800e248
 8009878:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800987a:	1c51      	adds	r1, r2, #1
 800987c:	9119      	str	r1, [sp, #100]	@ 0x64
 800987e:	7852      	ldrb	r2, [r2, #1]
 8009880:	2a30      	cmp	r2, #48	@ 0x30
 8009882:	d0f9      	beq.n	8009878 <_strtod_l+0x298>
 8009884:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009888:	2908      	cmp	r1, #8
 800988a:	f63f af75 	bhi.w	8009778 <_strtod_l+0x198>
 800988e:	f04f 080a 	mov.w	r8, #10
 8009892:	3a30      	subs	r2, #48	@ 0x30
 8009894:	9209      	str	r2, [sp, #36]	@ 0x24
 8009896:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009898:	920f      	str	r2, [sp, #60]	@ 0x3c
 800989a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800989c:	1c56      	adds	r6, r2, #1
 800989e:	9619      	str	r6, [sp, #100]	@ 0x64
 80098a0:	7852      	ldrb	r2, [r2, #1]
 80098a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80098a6:	f1be 0f09 	cmp.w	lr, #9
 80098aa:	d939      	bls.n	8009920 <_strtod_l+0x340>
 80098ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80098ae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80098b2:	1a76      	subs	r6, r6, r1
 80098b4:	2e08      	cmp	r6, #8
 80098b6:	dc03      	bgt.n	80098c0 <_strtod_l+0x2e0>
 80098b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098ba:	4588      	cmp	r8, r1
 80098bc:	bfa8      	it	ge
 80098be:	4688      	movge	r8, r1
 80098c0:	f1bc 0f00 	cmp.w	ip, #0
 80098c4:	d001      	beq.n	80098ca <_strtod_l+0x2ea>
 80098c6:	f1c8 0800 	rsb	r8, r8, #0
 80098ca:	2d00      	cmp	r5, #0
 80098cc:	d14e      	bne.n	800996c <_strtod_l+0x38c>
 80098ce:	9908      	ldr	r1, [sp, #32]
 80098d0:	4308      	orrs	r0, r1
 80098d2:	f47f aebe 	bne.w	8009652 <_strtod_l+0x72>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f47f aed4 	bne.w	8009684 <_strtod_l+0xa4>
 80098dc:	2a69      	cmp	r2, #105	@ 0x69
 80098de:	d028      	beq.n	8009932 <_strtod_l+0x352>
 80098e0:	dc25      	bgt.n	800992e <_strtod_l+0x34e>
 80098e2:	2a49      	cmp	r2, #73	@ 0x49
 80098e4:	d025      	beq.n	8009932 <_strtod_l+0x352>
 80098e6:	2a4e      	cmp	r2, #78	@ 0x4e
 80098e8:	f47f aecc 	bne.w	8009684 <_strtod_l+0xa4>
 80098ec:	4999      	ldr	r1, [pc, #612]	@ (8009b54 <_strtod_l+0x574>)
 80098ee:	a819      	add	r0, sp, #100	@ 0x64
 80098f0:	f002 ff50 	bl	800c794 <__match>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	f43f aec5 	beq.w	8009684 <_strtod_l+0xa4>
 80098fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	2b28      	cmp	r3, #40	@ 0x28
 8009900:	d12e      	bne.n	8009960 <_strtod_l+0x380>
 8009902:	4995      	ldr	r1, [pc, #596]	@ (8009b58 <_strtod_l+0x578>)
 8009904:	aa1c      	add	r2, sp, #112	@ 0x70
 8009906:	a819      	add	r0, sp, #100	@ 0x64
 8009908:	f002 ff58 	bl	800c7bc <__hexnan>
 800990c:	2805      	cmp	r0, #5
 800990e:	d127      	bne.n	8009960 <_strtod_l+0x380>
 8009910:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009912:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009916:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800991a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800991e:	e698      	b.n	8009652 <_strtod_l+0x72>
 8009920:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009922:	fb08 2101 	mla	r1, r8, r1, r2
 8009926:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800992a:	9209      	str	r2, [sp, #36]	@ 0x24
 800992c:	e7b5      	b.n	800989a <_strtod_l+0x2ba>
 800992e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009930:	e7da      	b.n	80098e8 <_strtod_l+0x308>
 8009932:	498a      	ldr	r1, [pc, #552]	@ (8009b5c <_strtod_l+0x57c>)
 8009934:	a819      	add	r0, sp, #100	@ 0x64
 8009936:	f002 ff2d 	bl	800c794 <__match>
 800993a:	2800      	cmp	r0, #0
 800993c:	f43f aea2 	beq.w	8009684 <_strtod_l+0xa4>
 8009940:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009942:	4987      	ldr	r1, [pc, #540]	@ (8009b60 <_strtod_l+0x580>)
 8009944:	3b01      	subs	r3, #1
 8009946:	a819      	add	r0, sp, #100	@ 0x64
 8009948:	9319      	str	r3, [sp, #100]	@ 0x64
 800994a:	f002 ff23 	bl	800c794 <__match>
 800994e:	b910      	cbnz	r0, 8009956 <_strtod_l+0x376>
 8009950:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009952:	3301      	adds	r3, #1
 8009954:	9319      	str	r3, [sp, #100]	@ 0x64
 8009956:	f04f 0a00 	mov.w	sl, #0
 800995a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8009b64 <_strtod_l+0x584>
 800995e:	e678      	b.n	8009652 <_strtod_l+0x72>
 8009960:	4881      	ldr	r0, [pc, #516]	@ (8009b68 <_strtod_l+0x588>)
 8009962:	f001 fddf 	bl	800b524 <nan>
 8009966:	4682      	mov	sl, r0
 8009968:	468b      	mov	fp, r1
 800996a:	e672      	b.n	8009652 <_strtod_l+0x72>
 800996c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800996e:	f1b9 0f00 	cmp.w	r9, #0
 8009972:	bf08      	it	eq
 8009974:	46a9      	moveq	r9, r5
 8009976:	eba8 0303 	sub.w	r3, r8, r3
 800997a:	2d10      	cmp	r5, #16
 800997c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800997e:	462c      	mov	r4, r5
 8009980:	9309      	str	r3, [sp, #36]	@ 0x24
 8009982:	bfa8      	it	ge
 8009984:	2410      	movge	r4, #16
 8009986:	f7f6 fd37 	bl	80003f8 <__aeabi_ui2d>
 800998a:	2d09      	cmp	r5, #9
 800998c:	4682      	mov	sl, r0
 800998e:	468b      	mov	fp, r1
 8009990:	dc11      	bgt.n	80099b6 <_strtod_l+0x3d6>
 8009992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009994:	2b00      	cmp	r3, #0
 8009996:	f43f ae5c 	beq.w	8009652 <_strtod_l+0x72>
 800999a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800999c:	dd76      	ble.n	8009a8c <_strtod_l+0x4ac>
 800999e:	2b16      	cmp	r3, #22
 80099a0:	dc5d      	bgt.n	8009a5e <_strtod_l+0x47e>
 80099a2:	4972      	ldr	r1, [pc, #456]	@ (8009b6c <_strtod_l+0x58c>)
 80099a4:	4652      	mov	r2, sl
 80099a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099aa:	465b      	mov	r3, fp
 80099ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099b0:	f7f6 fd9c 	bl	80004ec <__aeabi_dmul>
 80099b4:	e7d7      	b.n	8009966 <_strtod_l+0x386>
 80099b6:	4b6d      	ldr	r3, [pc, #436]	@ (8009b6c <_strtod_l+0x58c>)
 80099b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80099c0:	f7f6 fd94 	bl	80004ec <__aeabi_dmul>
 80099c4:	4682      	mov	sl, r0
 80099c6:	4638      	mov	r0, r7
 80099c8:	468b      	mov	fp, r1
 80099ca:	f7f6 fd15 	bl	80003f8 <__aeabi_ui2d>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4650      	mov	r0, sl
 80099d4:	4659      	mov	r1, fp
 80099d6:	f7f6 fbd3 	bl	8000180 <__adddf3>
 80099da:	2d0f      	cmp	r5, #15
 80099dc:	4682      	mov	sl, r0
 80099de:	468b      	mov	fp, r1
 80099e0:	ddd7      	ble.n	8009992 <_strtod_l+0x3b2>
 80099e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099e4:	1b2c      	subs	r4, r5, r4
 80099e6:	441c      	add	r4, r3
 80099e8:	2c00      	cmp	r4, #0
 80099ea:	f340 8093 	ble.w	8009b14 <_strtod_l+0x534>
 80099ee:	f014 030f 	ands.w	r3, r4, #15
 80099f2:	d00a      	beq.n	8009a0a <_strtod_l+0x42a>
 80099f4:	495d      	ldr	r1, [pc, #372]	@ (8009b6c <_strtod_l+0x58c>)
 80099f6:	4652      	mov	r2, sl
 80099f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a00:	465b      	mov	r3, fp
 8009a02:	f7f6 fd73 	bl	80004ec <__aeabi_dmul>
 8009a06:	4682      	mov	sl, r0
 8009a08:	468b      	mov	fp, r1
 8009a0a:	f034 040f 	bics.w	r4, r4, #15
 8009a0e:	d073      	beq.n	8009af8 <_strtod_l+0x518>
 8009a10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009a14:	dd49      	ble.n	8009aaa <_strtod_l+0x4ca>
 8009a16:	2400      	movs	r4, #0
 8009a18:	46a0      	mov	r8, r4
 8009a1a:	46a1      	mov	r9, r4
 8009a1c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009a1e:	2322      	movs	r3, #34	@ 0x22
 8009a20:	f04f 0a00 	mov.w	sl, #0
 8009a24:	9a05      	ldr	r2, [sp, #20]
 8009a26:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8009b64 <_strtod_l+0x584>
 8009a2a:	6013      	str	r3, [r2, #0]
 8009a2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f43f ae0f 	beq.w	8009652 <_strtod_l+0x72>
 8009a34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a36:	9805      	ldr	r0, [sp, #20]
 8009a38:	f002 ffae 	bl	800c998 <_Bfree>
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	9805      	ldr	r0, [sp, #20]
 8009a40:	f002 ffaa 	bl	800c998 <_Bfree>
 8009a44:	4641      	mov	r1, r8
 8009a46:	9805      	ldr	r0, [sp, #20]
 8009a48:	f002 ffa6 	bl	800c998 <_Bfree>
 8009a4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a4e:	9805      	ldr	r0, [sp, #20]
 8009a50:	f002 ffa2 	bl	800c998 <_Bfree>
 8009a54:	4621      	mov	r1, r4
 8009a56:	9805      	ldr	r0, [sp, #20]
 8009a58:	f002 ff9e 	bl	800c998 <_Bfree>
 8009a5c:	e5f9      	b.n	8009652 <_strtod_l+0x72>
 8009a5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009a64:	4293      	cmp	r3, r2
 8009a66:	dbbc      	blt.n	80099e2 <_strtod_l+0x402>
 8009a68:	4c40      	ldr	r4, [pc, #256]	@ (8009b6c <_strtod_l+0x58c>)
 8009a6a:	f1c5 050f 	rsb	r5, r5, #15
 8009a6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009a72:	4652      	mov	r2, sl
 8009a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a78:	465b      	mov	r3, fp
 8009a7a:	f7f6 fd37 	bl	80004ec <__aeabi_dmul>
 8009a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a80:	1b5d      	subs	r5, r3, r5
 8009a82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009a86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a8a:	e791      	b.n	80099b0 <_strtod_l+0x3d0>
 8009a8c:	3316      	adds	r3, #22
 8009a8e:	dba8      	blt.n	80099e2 <_strtod_l+0x402>
 8009a90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a92:	4650      	mov	r0, sl
 8009a94:	eba3 0808 	sub.w	r8, r3, r8
 8009a98:	4b34      	ldr	r3, [pc, #208]	@ (8009b6c <_strtod_l+0x58c>)
 8009a9a:	4659      	mov	r1, fp
 8009a9c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009aa0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009aa4:	f7f6 fe4c 	bl	8000740 <__aeabi_ddiv>
 8009aa8:	e75d      	b.n	8009966 <_strtod_l+0x386>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	4650      	mov	r0, sl
 8009aae:	4659      	mov	r1, fp
 8009ab0:	461e      	mov	r6, r3
 8009ab2:	4f2f      	ldr	r7, [pc, #188]	@ (8009b70 <_strtod_l+0x590>)
 8009ab4:	1124      	asrs	r4, r4, #4
 8009ab6:	2c01      	cmp	r4, #1
 8009ab8:	dc21      	bgt.n	8009afe <_strtod_l+0x51e>
 8009aba:	b10b      	cbz	r3, 8009ac0 <_strtod_l+0x4e0>
 8009abc:	4682      	mov	sl, r0
 8009abe:	468b      	mov	fp, r1
 8009ac0:	492b      	ldr	r1, [pc, #172]	@ (8009b70 <_strtod_l+0x590>)
 8009ac2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009ac6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009aca:	4652      	mov	r2, sl
 8009acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ad0:	465b      	mov	r3, fp
 8009ad2:	f7f6 fd0b 	bl	80004ec <__aeabi_dmul>
 8009ad6:	4b23      	ldr	r3, [pc, #140]	@ (8009b64 <_strtod_l+0x584>)
 8009ad8:	460a      	mov	r2, r1
 8009ada:	400b      	ands	r3, r1
 8009adc:	4925      	ldr	r1, [pc, #148]	@ (8009b74 <_strtod_l+0x594>)
 8009ade:	4682      	mov	sl, r0
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	d898      	bhi.n	8009a16 <_strtod_l+0x436>
 8009ae4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009ae8:	428b      	cmp	r3, r1
 8009aea:	bf86      	itte	hi
 8009aec:	f04f 3aff 	movhi.w	sl, #4294967295
 8009af0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8009b78 <_strtod_l+0x598>
 8009af4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009af8:	2300      	movs	r3, #0
 8009afa:	9308      	str	r3, [sp, #32]
 8009afc:	e076      	b.n	8009bec <_strtod_l+0x60c>
 8009afe:	07e2      	lsls	r2, r4, #31
 8009b00:	d504      	bpl.n	8009b0c <_strtod_l+0x52c>
 8009b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b06:	f7f6 fcf1 	bl	80004ec <__aeabi_dmul>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	3601      	adds	r6, #1
 8009b0e:	1064      	asrs	r4, r4, #1
 8009b10:	3708      	adds	r7, #8
 8009b12:	e7d0      	b.n	8009ab6 <_strtod_l+0x4d6>
 8009b14:	d0f0      	beq.n	8009af8 <_strtod_l+0x518>
 8009b16:	4264      	negs	r4, r4
 8009b18:	f014 020f 	ands.w	r2, r4, #15
 8009b1c:	d00a      	beq.n	8009b34 <_strtod_l+0x554>
 8009b1e:	4b13      	ldr	r3, [pc, #76]	@ (8009b6c <_strtod_l+0x58c>)
 8009b20:	4650      	mov	r0, sl
 8009b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b26:	4659      	mov	r1, fp
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	f7f6 fe08 	bl	8000740 <__aeabi_ddiv>
 8009b30:	4682      	mov	sl, r0
 8009b32:	468b      	mov	fp, r1
 8009b34:	1124      	asrs	r4, r4, #4
 8009b36:	d0df      	beq.n	8009af8 <_strtod_l+0x518>
 8009b38:	2c1f      	cmp	r4, #31
 8009b3a:	dd1f      	ble.n	8009b7c <_strtod_l+0x59c>
 8009b3c:	2400      	movs	r4, #0
 8009b3e:	46a0      	mov	r8, r4
 8009b40:	46a1      	mov	r9, r4
 8009b42:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009b44:	2322      	movs	r3, #34	@ 0x22
 8009b46:	9a05      	ldr	r2, [sp, #20]
 8009b48:	f04f 0a00 	mov.w	sl, #0
 8009b4c:	f04f 0b00 	mov.w	fp, #0
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	e76b      	b.n	8009a2c <_strtod_l+0x44c>
 8009b54:	0800e257 	.word	0x0800e257
 8009b58:	0800e420 	.word	0x0800e420
 8009b5c:	0800e24f 	.word	0x0800e24f
 8009b60:	0800e28e 	.word	0x0800e28e
 8009b64:	7ff00000 	.word	0x7ff00000
 8009b68:	0800e41d 	.word	0x0800e41d
 8009b6c:	0800e4a8 	.word	0x0800e4a8
 8009b70:	0800e480 	.word	0x0800e480
 8009b74:	7ca00000 	.word	0x7ca00000
 8009b78:	7fefffff 	.word	0x7fefffff
 8009b7c:	f014 0310 	ands.w	r3, r4, #16
 8009b80:	bf18      	it	ne
 8009b82:	236a      	movne	r3, #106	@ 0x6a
 8009b84:	4650      	mov	r0, sl
 8009b86:	9308      	str	r3, [sp, #32]
 8009b88:	4659      	mov	r1, fp
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	4e77      	ldr	r6, [pc, #476]	@ (8009d6c <_strtod_l+0x78c>)
 8009b8e:	07e7      	lsls	r7, r4, #31
 8009b90:	d504      	bpl.n	8009b9c <_strtod_l+0x5bc>
 8009b92:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b96:	f7f6 fca9 	bl	80004ec <__aeabi_dmul>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	1064      	asrs	r4, r4, #1
 8009b9e:	f106 0608 	add.w	r6, r6, #8
 8009ba2:	d1f4      	bne.n	8009b8e <_strtod_l+0x5ae>
 8009ba4:	b10b      	cbz	r3, 8009baa <_strtod_l+0x5ca>
 8009ba6:	4682      	mov	sl, r0
 8009ba8:	468b      	mov	fp, r1
 8009baa:	9b08      	ldr	r3, [sp, #32]
 8009bac:	b1b3      	cbz	r3, 8009bdc <_strtod_l+0x5fc>
 8009bae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009bb2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	4659      	mov	r1, fp
 8009bba:	dd0f      	ble.n	8009bdc <_strtod_l+0x5fc>
 8009bbc:	2b1f      	cmp	r3, #31
 8009bbe:	dd58      	ble.n	8009c72 <_strtod_l+0x692>
 8009bc0:	2b34      	cmp	r3, #52	@ 0x34
 8009bc2:	bfd8      	it	le
 8009bc4:	f04f 33ff 	movle.w	r3, #4294967295
 8009bc8:	f04f 0a00 	mov.w	sl, #0
 8009bcc:	bfcf      	iteee	gt
 8009bce:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009bd2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009bd6:	4093      	lslle	r3, r2
 8009bd8:	ea03 0b01 	andle.w	fp, r3, r1
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2300      	movs	r3, #0
 8009be0:	4650      	mov	r0, sl
 8009be2:	4659      	mov	r1, fp
 8009be4:	f7f6 feea 	bl	80009bc <__aeabi_dcmpeq>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d1a7      	bne.n	8009b3c <_strtod_l+0x55c>
 8009bec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bee:	464a      	mov	r2, r9
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009bf4:	462b      	mov	r3, r5
 8009bf6:	9805      	ldr	r0, [sp, #20]
 8009bf8:	f002 ff36 	bl	800ca68 <__s2b>
 8009bfc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	f43f af09 	beq.w	8009a16 <_strtod_l+0x436>
 8009c04:	2400      	movs	r4, #0
 8009c06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c0a:	2a00      	cmp	r2, #0
 8009c0c:	eba3 0308 	sub.w	r3, r3, r8
 8009c10:	bfa8      	it	ge
 8009c12:	2300      	movge	r3, #0
 8009c14:	46a0      	mov	r8, r4
 8009c16:	9312      	str	r3, [sp, #72]	@ 0x48
 8009c18:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009c1c:	9316      	str	r3, [sp, #88]	@ 0x58
 8009c1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c20:	9805      	ldr	r0, [sp, #20]
 8009c22:	6859      	ldr	r1, [r3, #4]
 8009c24:	f002 fe78 	bl	800c918 <_Balloc>
 8009c28:	4681      	mov	r9, r0
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f43f aef7 	beq.w	8009a1e <_strtod_l+0x43e>
 8009c30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c32:	300c      	adds	r0, #12
 8009c34:	691a      	ldr	r2, [r3, #16]
 8009c36:	f103 010c 	add.w	r1, r3, #12
 8009c3a:	3202      	adds	r2, #2
 8009c3c:	0092      	lsls	r2, r2, #2
 8009c3e:	f001 fc62 	bl	800b506 <memcpy>
 8009c42:	ab1c      	add	r3, sp, #112	@ 0x70
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	4652      	mov	r2, sl
 8009c4c:	465b      	mov	r3, fp
 8009c4e:	9805      	ldr	r0, [sp, #20]
 8009c50:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009c54:	f003 fa34 	bl	800d0c0 <__d2b>
 8009c58:	901a      	str	r0, [sp, #104]	@ 0x68
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	f43f aedf 	beq.w	8009a1e <_strtod_l+0x43e>
 8009c60:	2101      	movs	r1, #1
 8009c62:	9805      	ldr	r0, [sp, #20]
 8009c64:	f002 ff96 	bl	800cb94 <__i2b>
 8009c68:	4680      	mov	r8, r0
 8009c6a:	b948      	cbnz	r0, 8009c80 <_strtod_l+0x6a0>
 8009c6c:	f04f 0800 	mov.w	r8, #0
 8009c70:	e6d5      	b.n	8009a1e <_strtod_l+0x43e>
 8009c72:	f04f 32ff 	mov.w	r2, #4294967295
 8009c76:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7a:	ea03 0a0a 	and.w	sl, r3, sl
 8009c7e:	e7ad      	b.n	8009bdc <_strtod_l+0x5fc>
 8009c80:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009c82:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009c84:	2d00      	cmp	r5, #0
 8009c86:	bfab      	itete	ge
 8009c88:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009c8a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009c8c:	18ef      	addge	r7, r5, r3
 8009c8e:	1b5e      	sublt	r6, r3, r5
 8009c90:	9b08      	ldr	r3, [sp, #32]
 8009c92:	bfa8      	it	ge
 8009c94:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009c96:	eba5 0503 	sub.w	r5, r5, r3
 8009c9a:	4415      	add	r5, r2
 8009c9c:	4b34      	ldr	r3, [pc, #208]	@ (8009d70 <_strtod_l+0x790>)
 8009c9e:	f105 35ff 	add.w	r5, r5, #4294967295
 8009ca2:	bfb8      	it	lt
 8009ca4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009ca6:	429d      	cmp	r5, r3
 8009ca8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009cac:	da50      	bge.n	8009d50 <_strtod_l+0x770>
 8009cae:	1b5b      	subs	r3, r3, r5
 8009cb0:	2b1f      	cmp	r3, #31
 8009cb2:	f04f 0101 	mov.w	r1, #1
 8009cb6:	eba2 0203 	sub.w	r2, r2, r3
 8009cba:	dc3d      	bgt.n	8009d38 <_strtod_l+0x758>
 8009cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8009cc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cc6:	18bd      	adds	r5, r7, r2
 8009cc8:	9b08      	ldr	r3, [sp, #32]
 8009cca:	42af      	cmp	r7, r5
 8009ccc:	4416      	add	r6, r2
 8009cce:	441e      	add	r6, r3
 8009cd0:	463b      	mov	r3, r7
 8009cd2:	bfa8      	it	ge
 8009cd4:	462b      	movge	r3, r5
 8009cd6:	42b3      	cmp	r3, r6
 8009cd8:	bfa8      	it	ge
 8009cda:	4633      	movge	r3, r6
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	bfc2      	ittt	gt
 8009ce0:	1aed      	subgt	r5, r5, r3
 8009ce2:	1af6      	subgt	r6, r6, r3
 8009ce4:	1aff      	subgt	r7, r7, r3
 8009ce6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	dd16      	ble.n	8009d1a <_strtod_l+0x73a>
 8009cec:	4641      	mov	r1, r8
 8009cee:	461a      	mov	r2, r3
 8009cf0:	9805      	ldr	r0, [sp, #20]
 8009cf2:	f003 f807 	bl	800cd04 <__pow5mult>
 8009cf6:	4680      	mov	r8, r0
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d0b7      	beq.n	8009c6c <_strtod_l+0x68c>
 8009cfc:	4601      	mov	r1, r0
 8009cfe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d00:	9805      	ldr	r0, [sp, #20]
 8009d02:	f002 ff5d 	bl	800cbc0 <__multiply>
 8009d06:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	f43f ae88 	beq.w	8009a1e <_strtod_l+0x43e>
 8009d0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d10:	9805      	ldr	r0, [sp, #20]
 8009d12:	f002 fe41 	bl	800c998 <_Bfree>
 8009d16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d18:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d1a:	2d00      	cmp	r5, #0
 8009d1c:	dc1d      	bgt.n	8009d5a <_strtod_l+0x77a>
 8009d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	dd27      	ble.n	8009d74 <_strtod_l+0x794>
 8009d24:	4649      	mov	r1, r9
 8009d26:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009d28:	9805      	ldr	r0, [sp, #20]
 8009d2a:	f002 ffeb 	bl	800cd04 <__pow5mult>
 8009d2e:	4681      	mov	r9, r0
 8009d30:	bb00      	cbnz	r0, 8009d74 <_strtod_l+0x794>
 8009d32:	f04f 0900 	mov.w	r9, #0
 8009d36:	e672      	b.n	8009a1e <_strtod_l+0x43e>
 8009d38:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009d3c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009d40:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009d44:	35e2      	adds	r5, #226	@ 0xe2
 8009d46:	fa01 f305 	lsl.w	r3, r1, r5
 8009d4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d4c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009d4e:	e7ba      	b.n	8009cc6 <_strtod_l+0x6e6>
 8009d50:	2300      	movs	r3, #0
 8009d52:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d54:	2301      	movs	r3, #1
 8009d56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d58:	e7b5      	b.n	8009cc6 <_strtod_l+0x6e6>
 8009d5a:	462a      	mov	r2, r5
 8009d5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d5e:	9805      	ldr	r0, [sp, #20]
 8009d60:	f003 f82a 	bl	800cdb8 <__lshift>
 8009d64:	901a      	str	r0, [sp, #104]	@ 0x68
 8009d66:	2800      	cmp	r0, #0
 8009d68:	d1d9      	bne.n	8009d1e <_strtod_l+0x73e>
 8009d6a:	e658      	b.n	8009a1e <_strtod_l+0x43e>
 8009d6c:	0800e448 	.word	0x0800e448
 8009d70:	fffffc02 	.word	0xfffffc02
 8009d74:	2e00      	cmp	r6, #0
 8009d76:	dd07      	ble.n	8009d88 <_strtod_l+0x7a8>
 8009d78:	4649      	mov	r1, r9
 8009d7a:	4632      	mov	r2, r6
 8009d7c:	9805      	ldr	r0, [sp, #20]
 8009d7e:	f003 f81b 	bl	800cdb8 <__lshift>
 8009d82:	4681      	mov	r9, r0
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d0d4      	beq.n	8009d32 <_strtod_l+0x752>
 8009d88:	2f00      	cmp	r7, #0
 8009d8a:	dd08      	ble.n	8009d9e <_strtod_l+0x7be>
 8009d8c:	4641      	mov	r1, r8
 8009d8e:	463a      	mov	r2, r7
 8009d90:	9805      	ldr	r0, [sp, #20]
 8009d92:	f003 f811 	bl	800cdb8 <__lshift>
 8009d96:	4680      	mov	r8, r0
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	f43f ae40 	beq.w	8009a1e <_strtod_l+0x43e>
 8009d9e:	464a      	mov	r2, r9
 8009da0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009da2:	9805      	ldr	r0, [sp, #20]
 8009da4:	f003 f890 	bl	800cec8 <__mdiff>
 8009da8:	4604      	mov	r4, r0
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f43f ae37 	beq.w	8009a1e <_strtod_l+0x43e>
 8009db0:	68c3      	ldr	r3, [r0, #12]
 8009db2:	4641      	mov	r1, r8
 8009db4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009db6:	2300      	movs	r3, #0
 8009db8:	60c3      	str	r3, [r0, #12]
 8009dba:	f003 f869 	bl	800ce90 <__mcmp>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	da3d      	bge.n	8009e3e <_strtod_l+0x85e>
 8009dc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dc4:	ea53 030a 	orrs.w	r3, r3, sl
 8009dc8:	d163      	bne.n	8009e92 <_strtod_l+0x8b2>
 8009dca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d15f      	bne.n	8009e92 <_strtod_l+0x8b2>
 8009dd2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009dd6:	0d1b      	lsrs	r3, r3, #20
 8009dd8:	051b      	lsls	r3, r3, #20
 8009dda:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009dde:	d958      	bls.n	8009e92 <_strtod_l+0x8b2>
 8009de0:	6963      	ldr	r3, [r4, #20]
 8009de2:	b913      	cbnz	r3, 8009dea <_strtod_l+0x80a>
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	dd53      	ble.n	8009e92 <_strtod_l+0x8b2>
 8009dea:	4621      	mov	r1, r4
 8009dec:	2201      	movs	r2, #1
 8009dee:	9805      	ldr	r0, [sp, #20]
 8009df0:	f002 ffe2 	bl	800cdb8 <__lshift>
 8009df4:	4641      	mov	r1, r8
 8009df6:	4604      	mov	r4, r0
 8009df8:	f003 f84a 	bl	800ce90 <__mcmp>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	dd48      	ble.n	8009e92 <_strtod_l+0x8b2>
 8009e00:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e04:	9a08      	ldr	r2, [sp, #32]
 8009e06:	0d1b      	lsrs	r3, r3, #20
 8009e08:	051b      	lsls	r3, r3, #20
 8009e0a:	2a00      	cmp	r2, #0
 8009e0c:	d062      	beq.n	8009ed4 <_strtod_l+0x8f4>
 8009e0e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e12:	d85f      	bhi.n	8009ed4 <_strtod_l+0x8f4>
 8009e14:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009e18:	f67f ae94 	bls.w	8009b44 <_strtod_l+0x564>
 8009e1c:	4650      	mov	r0, sl
 8009e1e:	4659      	mov	r1, fp
 8009e20:	4ba3      	ldr	r3, [pc, #652]	@ (800a0b0 <_strtod_l+0xad0>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	f7f6 fb62 	bl	80004ec <__aeabi_dmul>
 8009e28:	4ba2      	ldr	r3, [pc, #648]	@ (800a0b4 <_strtod_l+0xad4>)
 8009e2a:	4682      	mov	sl, r0
 8009e2c:	400b      	ands	r3, r1
 8009e2e:	468b      	mov	fp, r1
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f47f adff 	bne.w	8009a34 <_strtod_l+0x454>
 8009e36:	2322      	movs	r3, #34	@ 0x22
 8009e38:	9a05      	ldr	r2, [sp, #20]
 8009e3a:	6013      	str	r3, [r2, #0]
 8009e3c:	e5fa      	b.n	8009a34 <_strtod_l+0x454>
 8009e3e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009e42:	d165      	bne.n	8009f10 <_strtod_l+0x930>
 8009e44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009e46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e4a:	b35a      	cbz	r2, 8009ea4 <_strtod_l+0x8c4>
 8009e4c:	4a9a      	ldr	r2, [pc, #616]	@ (800a0b8 <_strtod_l+0xad8>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d12b      	bne.n	8009eaa <_strtod_l+0x8ca>
 8009e52:	9b08      	ldr	r3, [sp, #32]
 8009e54:	4651      	mov	r1, sl
 8009e56:	b303      	cbz	r3, 8009e9a <_strtod_l+0x8ba>
 8009e58:	465a      	mov	r2, fp
 8009e5a:	4b96      	ldr	r3, [pc, #600]	@ (800a0b4 <_strtod_l+0xad4>)
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009e62:	f04f 32ff 	mov.w	r2, #4294967295
 8009e66:	d81b      	bhi.n	8009ea0 <_strtod_l+0x8c0>
 8009e68:	0d1b      	lsrs	r3, r3, #20
 8009e6a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e72:	4299      	cmp	r1, r3
 8009e74:	d119      	bne.n	8009eaa <_strtod_l+0x8ca>
 8009e76:	4b91      	ldr	r3, [pc, #580]	@ (800a0bc <_strtod_l+0xadc>)
 8009e78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d102      	bne.n	8009e84 <_strtod_l+0x8a4>
 8009e7e:	3101      	adds	r1, #1
 8009e80:	f43f adcd 	beq.w	8009a1e <_strtod_l+0x43e>
 8009e84:	f04f 0a00 	mov.w	sl, #0
 8009e88:	4b8a      	ldr	r3, [pc, #552]	@ (800a0b4 <_strtod_l+0xad4>)
 8009e8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e8c:	401a      	ands	r2, r3
 8009e8e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009e92:	9b08      	ldr	r3, [sp, #32]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1c1      	bne.n	8009e1c <_strtod_l+0x83c>
 8009e98:	e5cc      	b.n	8009a34 <_strtod_l+0x454>
 8009e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e9e:	e7e8      	b.n	8009e72 <_strtod_l+0x892>
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	e7e6      	b.n	8009e72 <_strtod_l+0x892>
 8009ea4:	ea53 030a 	orrs.w	r3, r3, sl
 8009ea8:	d0aa      	beq.n	8009e00 <_strtod_l+0x820>
 8009eaa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009eac:	b1db      	cbz	r3, 8009ee6 <_strtod_l+0x906>
 8009eae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009eb0:	4213      	tst	r3, r2
 8009eb2:	d0ee      	beq.n	8009e92 <_strtod_l+0x8b2>
 8009eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eb6:	4650      	mov	r0, sl
 8009eb8:	4659      	mov	r1, fp
 8009eba:	9a08      	ldr	r2, [sp, #32]
 8009ebc:	b1bb      	cbz	r3, 8009eee <_strtod_l+0x90e>
 8009ebe:	f7ff fb6d 	bl	800959c <sulp>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009eca:	f7f6 f959 	bl	8000180 <__adddf3>
 8009ece:	4682      	mov	sl, r0
 8009ed0:	468b      	mov	fp, r1
 8009ed2:	e7de      	b.n	8009e92 <_strtod_l+0x8b2>
 8009ed4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009ed8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009edc:	f04f 3aff 	mov.w	sl, #4294967295
 8009ee0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ee4:	e7d5      	b.n	8009e92 <_strtod_l+0x8b2>
 8009ee6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ee8:	ea13 0f0a 	tst.w	r3, sl
 8009eec:	e7e1      	b.n	8009eb2 <_strtod_l+0x8d2>
 8009eee:	f7ff fb55 	bl	800959c <sulp>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009efa:	f7f6 f93f 	bl	800017c <__aeabi_dsub>
 8009efe:	2200      	movs	r2, #0
 8009f00:	2300      	movs	r3, #0
 8009f02:	4682      	mov	sl, r0
 8009f04:	468b      	mov	fp, r1
 8009f06:	f7f6 fd59 	bl	80009bc <__aeabi_dcmpeq>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d0c1      	beq.n	8009e92 <_strtod_l+0x8b2>
 8009f0e:	e619      	b.n	8009b44 <_strtod_l+0x564>
 8009f10:	4641      	mov	r1, r8
 8009f12:	4620      	mov	r0, r4
 8009f14:	f003 f92c 	bl	800d170 <__ratio>
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f1e:	4606      	mov	r6, r0
 8009f20:	460f      	mov	r7, r1
 8009f22:	f7f6 fd5f 	bl	80009e4 <__aeabi_dcmple>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d06d      	beq.n	800a006 <_strtod_l+0xa26>
 8009f2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d178      	bne.n	800a022 <_strtod_l+0xa42>
 8009f30:	f1ba 0f00 	cmp.w	sl, #0
 8009f34:	d156      	bne.n	8009fe4 <_strtod_l+0xa04>
 8009f36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d158      	bne.n	8009ff2 <_strtod_l+0xa12>
 8009f40:	2200      	movs	r2, #0
 8009f42:	4630      	mov	r0, r6
 8009f44:	4639      	mov	r1, r7
 8009f46:	4b5e      	ldr	r3, [pc, #376]	@ (800a0c0 <_strtod_l+0xae0>)
 8009f48:	f7f6 fd42 	bl	80009d0 <__aeabi_dcmplt>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d157      	bne.n	800a000 <_strtod_l+0xa20>
 8009f50:	4630      	mov	r0, r6
 8009f52:	4639      	mov	r1, r7
 8009f54:	2200      	movs	r2, #0
 8009f56:	4b5b      	ldr	r3, [pc, #364]	@ (800a0c4 <_strtod_l+0xae4>)
 8009f58:	f7f6 fac8 	bl	80004ec <__aeabi_dmul>
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	460f      	mov	r7, r1
 8009f60:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009f64:	9606      	str	r6, [sp, #24]
 8009f66:	9307      	str	r3, [sp, #28]
 8009f68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f6c:	4d51      	ldr	r5, [pc, #324]	@ (800a0b4 <_strtod_l+0xad4>)
 8009f6e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f74:	401d      	ands	r5, r3
 8009f76:	4b54      	ldr	r3, [pc, #336]	@ (800a0c8 <_strtod_l+0xae8>)
 8009f78:	429d      	cmp	r5, r3
 8009f7a:	f040 80ab 	bne.w	800a0d4 <_strtod_l+0xaf4>
 8009f7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f80:	4650      	mov	r0, sl
 8009f82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009f86:	4659      	mov	r1, fp
 8009f88:	f003 f832 	bl	800cff0 <__ulp>
 8009f8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f90:	f7f6 faac 	bl	80004ec <__aeabi_dmul>
 8009f94:	4652      	mov	r2, sl
 8009f96:	465b      	mov	r3, fp
 8009f98:	f7f6 f8f2 	bl	8000180 <__adddf3>
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4945      	ldr	r1, [pc, #276]	@ (800a0b4 <_strtod_l+0xad4>)
 8009fa0:	4a4a      	ldr	r2, [pc, #296]	@ (800a0cc <_strtod_l+0xaec>)
 8009fa2:	4019      	ands	r1, r3
 8009fa4:	4291      	cmp	r1, r2
 8009fa6:	4682      	mov	sl, r0
 8009fa8:	d942      	bls.n	800a030 <_strtod_l+0xa50>
 8009faa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009fac:	4b43      	ldr	r3, [pc, #268]	@ (800a0bc <_strtod_l+0xadc>)
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d103      	bne.n	8009fba <_strtod_l+0x9da>
 8009fb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	f43f ad32 	beq.w	8009a1e <_strtod_l+0x43e>
 8009fba:	f04f 3aff 	mov.w	sl, #4294967295
 8009fbe:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800a0bc <_strtod_l+0xadc>
 8009fc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009fc4:	9805      	ldr	r0, [sp, #20]
 8009fc6:	f002 fce7 	bl	800c998 <_Bfree>
 8009fca:	4649      	mov	r1, r9
 8009fcc:	9805      	ldr	r0, [sp, #20]
 8009fce:	f002 fce3 	bl	800c998 <_Bfree>
 8009fd2:	4641      	mov	r1, r8
 8009fd4:	9805      	ldr	r0, [sp, #20]
 8009fd6:	f002 fcdf 	bl	800c998 <_Bfree>
 8009fda:	4621      	mov	r1, r4
 8009fdc:	9805      	ldr	r0, [sp, #20]
 8009fde:	f002 fcdb 	bl	800c998 <_Bfree>
 8009fe2:	e61c      	b.n	8009c1e <_strtod_l+0x63e>
 8009fe4:	f1ba 0f01 	cmp.w	sl, #1
 8009fe8:	d103      	bne.n	8009ff2 <_strtod_l+0xa12>
 8009fea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f43f ada9 	beq.w	8009b44 <_strtod_l+0x564>
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	4b36      	ldr	r3, [pc, #216]	@ (800a0d0 <_strtod_l+0xaf0>)
 8009ff6:	2600      	movs	r6, #0
 8009ff8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ffc:	4f30      	ldr	r7, [pc, #192]	@ (800a0c0 <_strtod_l+0xae0>)
 8009ffe:	e7b3      	b.n	8009f68 <_strtod_l+0x988>
 800a000:	2600      	movs	r6, #0
 800a002:	4f30      	ldr	r7, [pc, #192]	@ (800a0c4 <_strtod_l+0xae4>)
 800a004:	e7ac      	b.n	8009f60 <_strtod_l+0x980>
 800a006:	4630      	mov	r0, r6
 800a008:	4639      	mov	r1, r7
 800a00a:	4b2e      	ldr	r3, [pc, #184]	@ (800a0c4 <_strtod_l+0xae4>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	f7f6 fa6d 	bl	80004ec <__aeabi_dmul>
 800a012:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a014:	4606      	mov	r6, r0
 800a016:	460f      	mov	r7, r1
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d0a1      	beq.n	8009f60 <_strtod_l+0x980>
 800a01c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a020:	e7a2      	b.n	8009f68 <_strtod_l+0x988>
 800a022:	2200      	movs	r2, #0
 800a024:	4b26      	ldr	r3, [pc, #152]	@ (800a0c0 <_strtod_l+0xae0>)
 800a026:	4616      	mov	r6, r2
 800a028:	461f      	mov	r7, r3
 800a02a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a02e:	e79b      	b.n	8009f68 <_strtod_l+0x988>
 800a030:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a034:	9b08      	ldr	r3, [sp, #32]
 800a036:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1c1      	bne.n	8009fc2 <_strtod_l+0x9e2>
 800a03e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a042:	0d1b      	lsrs	r3, r3, #20
 800a044:	051b      	lsls	r3, r3, #20
 800a046:	429d      	cmp	r5, r3
 800a048:	d1bb      	bne.n	8009fc2 <_strtod_l+0x9e2>
 800a04a:	4630      	mov	r0, r6
 800a04c:	4639      	mov	r1, r7
 800a04e:	f7f6 fe0b 	bl	8000c68 <__aeabi_d2lz>
 800a052:	f7f6 fa1d 	bl	8000490 <__aeabi_l2d>
 800a056:	4602      	mov	r2, r0
 800a058:	460b      	mov	r3, r1
 800a05a:	4630      	mov	r0, r6
 800a05c:	4639      	mov	r1, r7
 800a05e:	f7f6 f88d 	bl	800017c <__aeabi_dsub>
 800a062:	460b      	mov	r3, r1
 800a064:	4602      	mov	r2, r0
 800a066:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a06a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a06e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a070:	ea46 060a 	orr.w	r6, r6, sl
 800a074:	431e      	orrs	r6, r3
 800a076:	d06a      	beq.n	800a14e <_strtod_l+0xb6e>
 800a078:	a309      	add	r3, pc, #36	@ (adr r3, 800a0a0 <_strtod_l+0xac0>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	f7f6 fca7 	bl	80009d0 <__aeabi_dcmplt>
 800a082:	2800      	cmp	r0, #0
 800a084:	f47f acd6 	bne.w	8009a34 <_strtod_l+0x454>
 800a088:	a307      	add	r3, pc, #28	@ (adr r3, 800a0a8 <_strtod_l+0xac8>)
 800a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a092:	f7f6 fcbb 	bl	8000a0c <__aeabi_dcmpgt>
 800a096:	2800      	cmp	r0, #0
 800a098:	d093      	beq.n	8009fc2 <_strtod_l+0x9e2>
 800a09a:	e4cb      	b.n	8009a34 <_strtod_l+0x454>
 800a09c:	f3af 8000 	nop.w
 800a0a0:	94a03595 	.word	0x94a03595
 800a0a4:	3fdfffff 	.word	0x3fdfffff
 800a0a8:	35afe535 	.word	0x35afe535
 800a0ac:	3fe00000 	.word	0x3fe00000
 800a0b0:	39500000 	.word	0x39500000
 800a0b4:	7ff00000 	.word	0x7ff00000
 800a0b8:	000fffff 	.word	0x000fffff
 800a0bc:	7fefffff 	.word	0x7fefffff
 800a0c0:	3ff00000 	.word	0x3ff00000
 800a0c4:	3fe00000 	.word	0x3fe00000
 800a0c8:	7fe00000 	.word	0x7fe00000
 800a0cc:	7c9fffff 	.word	0x7c9fffff
 800a0d0:	bff00000 	.word	0xbff00000
 800a0d4:	9b08      	ldr	r3, [sp, #32]
 800a0d6:	b323      	cbz	r3, 800a122 <_strtod_l+0xb42>
 800a0d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a0dc:	d821      	bhi.n	800a122 <_strtod_l+0xb42>
 800a0de:	a328      	add	r3, pc, #160	@ (adr r3, 800a180 <_strtod_l+0xba0>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	4639      	mov	r1, r7
 800a0e8:	f7f6 fc7c 	bl	80009e4 <__aeabi_dcmple>
 800a0ec:	b1a0      	cbz	r0, 800a118 <_strtod_l+0xb38>
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f7f6 fcd3 	bl	8000a9c <__aeabi_d2uiz>
 800a0f6:	2801      	cmp	r0, #1
 800a0f8:	bf38      	it	cc
 800a0fa:	2001      	movcc	r0, #1
 800a0fc:	f7f6 f97c 	bl	80003f8 <__aeabi_ui2d>
 800a100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a102:	4606      	mov	r6, r0
 800a104:	460f      	mov	r7, r1
 800a106:	b9fb      	cbnz	r3, 800a148 <_strtod_l+0xb68>
 800a108:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a10c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a10e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a110:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a114:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a118:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a11a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a11e:	1b5b      	subs	r3, r3, r5
 800a120:	9311      	str	r3, [sp, #68]	@ 0x44
 800a122:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a126:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a12a:	f002 ff61 	bl	800cff0 <__ulp>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	4650      	mov	r0, sl
 800a134:	4659      	mov	r1, fp
 800a136:	f7f6 f9d9 	bl	80004ec <__aeabi_dmul>
 800a13a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a13e:	f7f6 f81f 	bl	8000180 <__adddf3>
 800a142:	4682      	mov	sl, r0
 800a144:	468b      	mov	fp, r1
 800a146:	e775      	b.n	800a034 <_strtod_l+0xa54>
 800a148:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a14c:	e7e0      	b.n	800a110 <_strtod_l+0xb30>
 800a14e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a188 <_strtod_l+0xba8>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f7f6 fc3c 	bl	80009d0 <__aeabi_dcmplt>
 800a158:	e79d      	b.n	800a096 <_strtod_l+0xab6>
 800a15a:	2300      	movs	r3, #0
 800a15c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a15e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a160:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a162:	6013      	str	r3, [r2, #0]
 800a164:	f7ff ba79 	b.w	800965a <_strtod_l+0x7a>
 800a168:	2a65      	cmp	r2, #101	@ 0x65
 800a16a:	f43f ab72 	beq.w	8009852 <_strtod_l+0x272>
 800a16e:	2a45      	cmp	r2, #69	@ 0x45
 800a170:	f43f ab6f 	beq.w	8009852 <_strtod_l+0x272>
 800a174:	2301      	movs	r3, #1
 800a176:	f7ff bbaa 	b.w	80098ce <_strtod_l+0x2ee>
 800a17a:	bf00      	nop
 800a17c:	f3af 8000 	nop.w
 800a180:	ffc00000 	.word	0xffc00000
 800a184:	41dfffff 	.word	0x41dfffff
 800a188:	94a03595 	.word	0x94a03595
 800a18c:	3fcfffff 	.word	0x3fcfffff

0800a190 <_strtod_r>:
 800a190:	4b01      	ldr	r3, [pc, #4]	@ (800a198 <_strtod_r+0x8>)
 800a192:	f7ff ba25 	b.w	80095e0 <_strtod_l>
 800a196:	bf00      	nop
 800a198:	2000007c 	.word	0x2000007c

0800a19c <strtod>:
 800a19c:	460a      	mov	r2, r1
 800a19e:	4601      	mov	r1, r0
 800a1a0:	4802      	ldr	r0, [pc, #8]	@ (800a1ac <strtod+0x10>)
 800a1a2:	4b03      	ldr	r3, [pc, #12]	@ (800a1b0 <strtod+0x14>)
 800a1a4:	6800      	ldr	r0, [r0, #0]
 800a1a6:	f7ff ba1b 	b.w	80095e0 <_strtod_l>
 800a1aa:	bf00      	nop
 800a1ac:	200001e8 	.word	0x200001e8
 800a1b0:	2000007c 	.word	0x2000007c

0800a1b4 <__cvt>:
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ba:	461d      	mov	r5, r3
 800a1bc:	bfbb      	ittet	lt
 800a1be:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a1c2:	461d      	movlt	r5, r3
 800a1c4:	2300      	movge	r3, #0
 800a1c6:	232d      	movlt	r3, #45	@ 0x2d
 800a1c8:	b088      	sub	sp, #32
 800a1ca:	4614      	mov	r4, r2
 800a1cc:	bfb8      	it	lt
 800a1ce:	4614      	movlt	r4, r2
 800a1d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a1d2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a1d4:	7013      	strb	r3, [r2, #0]
 800a1d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a1d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a1dc:	f023 0820 	bic.w	r8, r3, #32
 800a1e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1e4:	d005      	beq.n	800a1f2 <__cvt+0x3e>
 800a1e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a1ea:	d100      	bne.n	800a1ee <__cvt+0x3a>
 800a1ec:	3601      	adds	r6, #1
 800a1ee:	2302      	movs	r3, #2
 800a1f0:	e000      	b.n	800a1f4 <__cvt+0x40>
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	aa07      	add	r2, sp, #28
 800a1f6:	9204      	str	r2, [sp, #16]
 800a1f8:	aa06      	add	r2, sp, #24
 800a1fa:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a1fe:	e9cd 3600 	strd	r3, r6, [sp]
 800a202:	4622      	mov	r2, r4
 800a204:	462b      	mov	r3, r5
 800a206:	f001 fa1f 	bl	800b648 <_dtoa_r>
 800a20a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a20e:	4607      	mov	r7, r0
 800a210:	d119      	bne.n	800a246 <__cvt+0x92>
 800a212:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a214:	07db      	lsls	r3, r3, #31
 800a216:	d50e      	bpl.n	800a236 <__cvt+0x82>
 800a218:	eb00 0906 	add.w	r9, r0, r6
 800a21c:	2200      	movs	r2, #0
 800a21e:	2300      	movs	r3, #0
 800a220:	4620      	mov	r0, r4
 800a222:	4629      	mov	r1, r5
 800a224:	f7f6 fbca 	bl	80009bc <__aeabi_dcmpeq>
 800a228:	b108      	cbz	r0, 800a22e <__cvt+0x7a>
 800a22a:	f8cd 901c 	str.w	r9, [sp, #28]
 800a22e:	2230      	movs	r2, #48	@ 0x30
 800a230:	9b07      	ldr	r3, [sp, #28]
 800a232:	454b      	cmp	r3, r9
 800a234:	d31e      	bcc.n	800a274 <__cvt+0xc0>
 800a236:	4638      	mov	r0, r7
 800a238:	9b07      	ldr	r3, [sp, #28]
 800a23a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a23c:	1bdb      	subs	r3, r3, r7
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	b008      	add	sp, #32
 800a242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a246:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a24a:	eb00 0906 	add.w	r9, r0, r6
 800a24e:	d1e5      	bne.n	800a21c <__cvt+0x68>
 800a250:	7803      	ldrb	r3, [r0, #0]
 800a252:	2b30      	cmp	r3, #48	@ 0x30
 800a254:	d10a      	bne.n	800a26c <__cvt+0xb8>
 800a256:	2200      	movs	r2, #0
 800a258:	2300      	movs	r3, #0
 800a25a:	4620      	mov	r0, r4
 800a25c:	4629      	mov	r1, r5
 800a25e:	f7f6 fbad 	bl	80009bc <__aeabi_dcmpeq>
 800a262:	b918      	cbnz	r0, 800a26c <__cvt+0xb8>
 800a264:	f1c6 0601 	rsb	r6, r6, #1
 800a268:	f8ca 6000 	str.w	r6, [sl]
 800a26c:	f8da 3000 	ldr.w	r3, [sl]
 800a270:	4499      	add	r9, r3
 800a272:	e7d3      	b.n	800a21c <__cvt+0x68>
 800a274:	1c59      	adds	r1, r3, #1
 800a276:	9107      	str	r1, [sp, #28]
 800a278:	701a      	strb	r2, [r3, #0]
 800a27a:	e7d9      	b.n	800a230 <__cvt+0x7c>

0800a27c <__exponent>:
 800a27c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a27e:	2900      	cmp	r1, #0
 800a280:	bfb6      	itet	lt
 800a282:	232d      	movlt	r3, #45	@ 0x2d
 800a284:	232b      	movge	r3, #43	@ 0x2b
 800a286:	4249      	neglt	r1, r1
 800a288:	2909      	cmp	r1, #9
 800a28a:	7002      	strb	r2, [r0, #0]
 800a28c:	7043      	strb	r3, [r0, #1]
 800a28e:	dd29      	ble.n	800a2e4 <__exponent+0x68>
 800a290:	f10d 0307 	add.w	r3, sp, #7
 800a294:	461d      	mov	r5, r3
 800a296:	270a      	movs	r7, #10
 800a298:	fbb1 f6f7 	udiv	r6, r1, r7
 800a29c:	461a      	mov	r2, r3
 800a29e:	fb07 1416 	mls	r4, r7, r6, r1
 800a2a2:	3430      	adds	r4, #48	@ 0x30
 800a2a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	2c63      	cmp	r4, #99	@ 0x63
 800a2ac:	4631      	mov	r1, r6
 800a2ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800a2b2:	dcf1      	bgt.n	800a298 <__exponent+0x1c>
 800a2b4:	3130      	adds	r1, #48	@ 0x30
 800a2b6:	1e94      	subs	r4, r2, #2
 800a2b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a2bc:	4623      	mov	r3, r4
 800a2be:	1c41      	adds	r1, r0, #1
 800a2c0:	42ab      	cmp	r3, r5
 800a2c2:	d30a      	bcc.n	800a2da <__exponent+0x5e>
 800a2c4:	f10d 0309 	add.w	r3, sp, #9
 800a2c8:	1a9b      	subs	r3, r3, r2
 800a2ca:	42ac      	cmp	r4, r5
 800a2cc:	bf88      	it	hi
 800a2ce:	2300      	movhi	r3, #0
 800a2d0:	3302      	adds	r3, #2
 800a2d2:	4403      	add	r3, r0
 800a2d4:	1a18      	subs	r0, r3, r0
 800a2d6:	b003      	add	sp, #12
 800a2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2da:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a2de:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a2e2:	e7ed      	b.n	800a2c0 <__exponent+0x44>
 800a2e4:	2330      	movs	r3, #48	@ 0x30
 800a2e6:	3130      	adds	r1, #48	@ 0x30
 800a2e8:	7083      	strb	r3, [r0, #2]
 800a2ea:	70c1      	strb	r1, [r0, #3]
 800a2ec:	1d03      	adds	r3, r0, #4
 800a2ee:	e7f1      	b.n	800a2d4 <__exponent+0x58>

0800a2f0 <_printf_float>:
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	b091      	sub	sp, #68	@ 0x44
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a2fc:	4616      	mov	r6, r2
 800a2fe:	461f      	mov	r7, r3
 800a300:	4605      	mov	r5, r0
 800a302:	f001 f863 	bl	800b3cc <_localeconv_r>
 800a306:	6803      	ldr	r3, [r0, #0]
 800a308:	4618      	mov	r0, r3
 800a30a:	9308      	str	r3, [sp, #32]
 800a30c:	f7f5 ff2a 	bl	8000164 <strlen>
 800a310:	2300      	movs	r3, #0
 800a312:	930e      	str	r3, [sp, #56]	@ 0x38
 800a314:	f8d8 3000 	ldr.w	r3, [r8]
 800a318:	9009      	str	r0, [sp, #36]	@ 0x24
 800a31a:	3307      	adds	r3, #7
 800a31c:	f023 0307 	bic.w	r3, r3, #7
 800a320:	f103 0208 	add.w	r2, r3, #8
 800a324:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a328:	f8d4 b000 	ldr.w	fp, [r4]
 800a32c:	f8c8 2000 	str.w	r2, [r8]
 800a330:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a334:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a33a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a33e:	f04f 32ff 	mov.w	r2, #4294967295
 800a342:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a346:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a34a:	4b9c      	ldr	r3, [pc, #624]	@ (800a5bc <_printf_float+0x2cc>)
 800a34c:	f7f6 fb68 	bl	8000a20 <__aeabi_dcmpun>
 800a350:	bb70      	cbnz	r0, 800a3b0 <_printf_float+0xc0>
 800a352:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a356:	f04f 32ff 	mov.w	r2, #4294967295
 800a35a:	4b98      	ldr	r3, [pc, #608]	@ (800a5bc <_printf_float+0x2cc>)
 800a35c:	f7f6 fb42 	bl	80009e4 <__aeabi_dcmple>
 800a360:	bb30      	cbnz	r0, 800a3b0 <_printf_float+0xc0>
 800a362:	2200      	movs	r2, #0
 800a364:	2300      	movs	r3, #0
 800a366:	4640      	mov	r0, r8
 800a368:	4649      	mov	r1, r9
 800a36a:	f7f6 fb31 	bl	80009d0 <__aeabi_dcmplt>
 800a36e:	b110      	cbz	r0, 800a376 <_printf_float+0x86>
 800a370:	232d      	movs	r3, #45	@ 0x2d
 800a372:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a376:	4a92      	ldr	r2, [pc, #584]	@ (800a5c0 <_printf_float+0x2d0>)
 800a378:	4b92      	ldr	r3, [pc, #584]	@ (800a5c4 <_printf_float+0x2d4>)
 800a37a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a37e:	bf8c      	ite	hi
 800a380:	4690      	movhi	r8, r2
 800a382:	4698      	movls	r8, r3
 800a384:	2303      	movs	r3, #3
 800a386:	f04f 0900 	mov.w	r9, #0
 800a38a:	6123      	str	r3, [r4, #16]
 800a38c:	f02b 0304 	bic.w	r3, fp, #4
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	4633      	mov	r3, r6
 800a394:	4621      	mov	r1, r4
 800a396:	4628      	mov	r0, r5
 800a398:	9700      	str	r7, [sp, #0]
 800a39a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a39c:	f000 f9d4 	bl	800a748 <_printf_common>
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	f040 8090 	bne.w	800a4c6 <_printf_float+0x1d6>
 800a3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3aa:	b011      	add	sp, #68	@ 0x44
 800a3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b0:	4642      	mov	r2, r8
 800a3b2:	464b      	mov	r3, r9
 800a3b4:	4640      	mov	r0, r8
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	f7f6 fb32 	bl	8000a20 <__aeabi_dcmpun>
 800a3bc:	b148      	cbz	r0, 800a3d2 <_printf_float+0xe2>
 800a3be:	464b      	mov	r3, r9
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	bfb8      	it	lt
 800a3c4:	232d      	movlt	r3, #45	@ 0x2d
 800a3c6:	4a80      	ldr	r2, [pc, #512]	@ (800a5c8 <_printf_float+0x2d8>)
 800a3c8:	bfb8      	it	lt
 800a3ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a3ce:	4b7f      	ldr	r3, [pc, #508]	@ (800a5cc <_printf_float+0x2dc>)
 800a3d0:	e7d3      	b.n	800a37a <_printf_float+0x8a>
 800a3d2:	6863      	ldr	r3, [r4, #4]
 800a3d4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a3d8:	1c5a      	adds	r2, r3, #1
 800a3da:	d13f      	bne.n	800a45c <_printf_float+0x16c>
 800a3dc:	2306      	movs	r3, #6
 800a3de:	6063      	str	r3, [r4, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a3e6:	6023      	str	r3, [r4, #0]
 800a3e8:	9206      	str	r2, [sp, #24]
 800a3ea:	aa0e      	add	r2, sp, #56	@ 0x38
 800a3ec:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a3f0:	aa0d      	add	r2, sp, #52	@ 0x34
 800a3f2:	9203      	str	r2, [sp, #12]
 800a3f4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a3f8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a3fc:	6863      	ldr	r3, [r4, #4]
 800a3fe:	4642      	mov	r2, r8
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	4628      	mov	r0, r5
 800a404:	464b      	mov	r3, r9
 800a406:	910a      	str	r1, [sp, #40]	@ 0x28
 800a408:	f7ff fed4 	bl	800a1b4 <__cvt>
 800a40c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a40e:	4680      	mov	r8, r0
 800a410:	2947      	cmp	r1, #71	@ 0x47
 800a412:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a414:	d128      	bne.n	800a468 <_printf_float+0x178>
 800a416:	1cc8      	adds	r0, r1, #3
 800a418:	db02      	blt.n	800a420 <_printf_float+0x130>
 800a41a:	6863      	ldr	r3, [r4, #4]
 800a41c:	4299      	cmp	r1, r3
 800a41e:	dd40      	ble.n	800a4a2 <_printf_float+0x1b2>
 800a420:	f1aa 0a02 	sub.w	sl, sl, #2
 800a424:	fa5f fa8a 	uxtb.w	sl, sl
 800a428:	4652      	mov	r2, sl
 800a42a:	3901      	subs	r1, #1
 800a42c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a430:	910d      	str	r1, [sp, #52]	@ 0x34
 800a432:	f7ff ff23 	bl	800a27c <__exponent>
 800a436:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a438:	4681      	mov	r9, r0
 800a43a:	1813      	adds	r3, r2, r0
 800a43c:	2a01      	cmp	r2, #1
 800a43e:	6123      	str	r3, [r4, #16]
 800a440:	dc02      	bgt.n	800a448 <_printf_float+0x158>
 800a442:	6822      	ldr	r2, [r4, #0]
 800a444:	07d2      	lsls	r2, r2, #31
 800a446:	d501      	bpl.n	800a44c <_printf_float+0x15c>
 800a448:	3301      	adds	r3, #1
 800a44a:	6123      	str	r3, [r4, #16]
 800a44c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a450:	2b00      	cmp	r3, #0
 800a452:	d09e      	beq.n	800a392 <_printf_float+0xa2>
 800a454:	232d      	movs	r3, #45	@ 0x2d
 800a456:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a45a:	e79a      	b.n	800a392 <_printf_float+0xa2>
 800a45c:	2947      	cmp	r1, #71	@ 0x47
 800a45e:	d1bf      	bne.n	800a3e0 <_printf_float+0xf0>
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1bd      	bne.n	800a3e0 <_printf_float+0xf0>
 800a464:	2301      	movs	r3, #1
 800a466:	e7ba      	b.n	800a3de <_printf_float+0xee>
 800a468:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a46c:	d9dc      	bls.n	800a428 <_printf_float+0x138>
 800a46e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a472:	d118      	bne.n	800a4a6 <_printf_float+0x1b6>
 800a474:	2900      	cmp	r1, #0
 800a476:	6863      	ldr	r3, [r4, #4]
 800a478:	dd0b      	ble.n	800a492 <_printf_float+0x1a2>
 800a47a:	6121      	str	r1, [r4, #16]
 800a47c:	b913      	cbnz	r3, 800a484 <_printf_float+0x194>
 800a47e:	6822      	ldr	r2, [r4, #0]
 800a480:	07d0      	lsls	r0, r2, #31
 800a482:	d502      	bpl.n	800a48a <_printf_float+0x19a>
 800a484:	3301      	adds	r3, #1
 800a486:	440b      	add	r3, r1
 800a488:	6123      	str	r3, [r4, #16]
 800a48a:	f04f 0900 	mov.w	r9, #0
 800a48e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a490:	e7dc      	b.n	800a44c <_printf_float+0x15c>
 800a492:	b913      	cbnz	r3, 800a49a <_printf_float+0x1aa>
 800a494:	6822      	ldr	r2, [r4, #0]
 800a496:	07d2      	lsls	r2, r2, #31
 800a498:	d501      	bpl.n	800a49e <_printf_float+0x1ae>
 800a49a:	3302      	adds	r3, #2
 800a49c:	e7f4      	b.n	800a488 <_printf_float+0x198>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e7f2      	b.n	800a488 <_printf_float+0x198>
 800a4a2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a4a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4a8:	4299      	cmp	r1, r3
 800a4aa:	db05      	blt.n	800a4b8 <_printf_float+0x1c8>
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	6121      	str	r1, [r4, #16]
 800a4b0:	07d8      	lsls	r0, r3, #31
 800a4b2:	d5ea      	bpl.n	800a48a <_printf_float+0x19a>
 800a4b4:	1c4b      	adds	r3, r1, #1
 800a4b6:	e7e7      	b.n	800a488 <_printf_float+0x198>
 800a4b8:	2900      	cmp	r1, #0
 800a4ba:	bfcc      	ite	gt
 800a4bc:	2201      	movgt	r2, #1
 800a4be:	f1c1 0202 	rsble	r2, r1, #2
 800a4c2:	4413      	add	r3, r2
 800a4c4:	e7e0      	b.n	800a488 <_printf_float+0x198>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	055a      	lsls	r2, r3, #21
 800a4ca:	d407      	bmi.n	800a4dc <_printf_float+0x1ec>
 800a4cc:	6923      	ldr	r3, [r4, #16]
 800a4ce:	4642      	mov	r2, r8
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b8      	blx	r7
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	d12b      	bne.n	800a532 <_printf_float+0x242>
 800a4da:	e764      	b.n	800a3a6 <_printf_float+0xb6>
 800a4dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a4e0:	f240 80dc 	bls.w	800a69c <_printf_float+0x3ac>
 800a4e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	f7f6 fa66 	bl	80009bc <__aeabi_dcmpeq>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d033      	beq.n	800a55c <_printf_float+0x26c>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	4a35      	ldr	r2, [pc, #212]	@ (800a5d0 <_printf_float+0x2e0>)
 800a4fc:	47b8      	blx	r7
 800a4fe:	3001      	adds	r0, #1
 800a500:	f43f af51 	beq.w	800a3a6 <_printf_float+0xb6>
 800a504:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a508:	4543      	cmp	r3, r8
 800a50a:	db02      	blt.n	800a512 <_printf_float+0x222>
 800a50c:	6823      	ldr	r3, [r4, #0]
 800a50e:	07d8      	lsls	r0, r3, #31
 800a510:	d50f      	bpl.n	800a532 <_printf_float+0x242>
 800a512:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a516:	4631      	mov	r1, r6
 800a518:	4628      	mov	r0, r5
 800a51a:	47b8      	blx	r7
 800a51c:	3001      	adds	r0, #1
 800a51e:	f43f af42 	beq.w	800a3a6 <_printf_float+0xb6>
 800a522:	f04f 0900 	mov.w	r9, #0
 800a526:	f108 38ff 	add.w	r8, r8, #4294967295
 800a52a:	f104 0a1a 	add.w	sl, r4, #26
 800a52e:	45c8      	cmp	r8, r9
 800a530:	dc09      	bgt.n	800a546 <_printf_float+0x256>
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	079b      	lsls	r3, r3, #30
 800a536:	f100 8102 	bmi.w	800a73e <_printf_float+0x44e>
 800a53a:	68e0      	ldr	r0, [r4, #12]
 800a53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a53e:	4298      	cmp	r0, r3
 800a540:	bfb8      	it	lt
 800a542:	4618      	movlt	r0, r3
 800a544:	e731      	b.n	800a3aa <_printf_float+0xba>
 800a546:	2301      	movs	r3, #1
 800a548:	4652      	mov	r2, sl
 800a54a:	4631      	mov	r1, r6
 800a54c:	4628      	mov	r0, r5
 800a54e:	47b8      	blx	r7
 800a550:	3001      	adds	r0, #1
 800a552:	f43f af28 	beq.w	800a3a6 <_printf_float+0xb6>
 800a556:	f109 0901 	add.w	r9, r9, #1
 800a55a:	e7e8      	b.n	800a52e <_printf_float+0x23e>
 800a55c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a55e:	2b00      	cmp	r3, #0
 800a560:	dc38      	bgt.n	800a5d4 <_printf_float+0x2e4>
 800a562:	2301      	movs	r3, #1
 800a564:	4631      	mov	r1, r6
 800a566:	4628      	mov	r0, r5
 800a568:	4a19      	ldr	r2, [pc, #100]	@ (800a5d0 <_printf_float+0x2e0>)
 800a56a:	47b8      	blx	r7
 800a56c:	3001      	adds	r0, #1
 800a56e:	f43f af1a 	beq.w	800a3a6 <_printf_float+0xb6>
 800a572:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a576:	ea59 0303 	orrs.w	r3, r9, r3
 800a57a:	d102      	bne.n	800a582 <_printf_float+0x292>
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	07d9      	lsls	r1, r3, #31
 800a580:	d5d7      	bpl.n	800a532 <_printf_float+0x242>
 800a582:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a586:	4631      	mov	r1, r6
 800a588:	4628      	mov	r0, r5
 800a58a:	47b8      	blx	r7
 800a58c:	3001      	adds	r0, #1
 800a58e:	f43f af0a 	beq.w	800a3a6 <_printf_float+0xb6>
 800a592:	f04f 0a00 	mov.w	sl, #0
 800a596:	f104 0b1a 	add.w	fp, r4, #26
 800a59a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a59c:	425b      	negs	r3, r3
 800a59e:	4553      	cmp	r3, sl
 800a5a0:	dc01      	bgt.n	800a5a6 <_printf_float+0x2b6>
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	e793      	b.n	800a4ce <_printf_float+0x1de>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	465a      	mov	r2, fp
 800a5aa:	4631      	mov	r1, r6
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	47b8      	blx	r7
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	f43f aef8 	beq.w	800a3a6 <_printf_float+0xb6>
 800a5b6:	f10a 0a01 	add.w	sl, sl, #1
 800a5ba:	e7ee      	b.n	800a59a <_printf_float+0x2aa>
 800a5bc:	7fefffff 	.word	0x7fefffff
 800a5c0:	0800e24e 	.word	0x0800e24e
 800a5c4:	0800e24a 	.word	0x0800e24a
 800a5c8:	0800e256 	.word	0x0800e256
 800a5cc:	0800e252 	.word	0x0800e252
 800a5d0:	0800e25a 	.word	0x0800e25a
 800a5d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5d6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a5da:	4553      	cmp	r3, sl
 800a5dc:	bfa8      	it	ge
 800a5de:	4653      	movge	r3, sl
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	4699      	mov	r9, r3
 800a5e4:	dc36      	bgt.n	800a654 <_printf_float+0x364>
 800a5e6:	f04f 0b00 	mov.w	fp, #0
 800a5ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5ee:	f104 021a 	add.w	r2, r4, #26
 800a5f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5f6:	eba3 0309 	sub.w	r3, r3, r9
 800a5fa:	455b      	cmp	r3, fp
 800a5fc:	dc31      	bgt.n	800a662 <_printf_float+0x372>
 800a5fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a600:	459a      	cmp	sl, r3
 800a602:	dc3a      	bgt.n	800a67a <_printf_float+0x38a>
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	07da      	lsls	r2, r3, #31
 800a608:	d437      	bmi.n	800a67a <_printf_float+0x38a>
 800a60a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a60c:	ebaa 0903 	sub.w	r9, sl, r3
 800a610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a612:	ebaa 0303 	sub.w	r3, sl, r3
 800a616:	4599      	cmp	r9, r3
 800a618:	bfa8      	it	ge
 800a61a:	4699      	movge	r9, r3
 800a61c:	f1b9 0f00 	cmp.w	r9, #0
 800a620:	dc33      	bgt.n	800a68a <_printf_float+0x39a>
 800a622:	f04f 0800 	mov.w	r8, #0
 800a626:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a62a:	f104 0b1a 	add.w	fp, r4, #26
 800a62e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a630:	ebaa 0303 	sub.w	r3, sl, r3
 800a634:	eba3 0309 	sub.w	r3, r3, r9
 800a638:	4543      	cmp	r3, r8
 800a63a:	f77f af7a 	ble.w	800a532 <_printf_float+0x242>
 800a63e:	2301      	movs	r3, #1
 800a640:	465a      	mov	r2, fp
 800a642:	4631      	mov	r1, r6
 800a644:	4628      	mov	r0, r5
 800a646:	47b8      	blx	r7
 800a648:	3001      	adds	r0, #1
 800a64a:	f43f aeac 	beq.w	800a3a6 <_printf_float+0xb6>
 800a64e:	f108 0801 	add.w	r8, r8, #1
 800a652:	e7ec      	b.n	800a62e <_printf_float+0x33e>
 800a654:	4642      	mov	r2, r8
 800a656:	4631      	mov	r1, r6
 800a658:	4628      	mov	r0, r5
 800a65a:	47b8      	blx	r7
 800a65c:	3001      	adds	r0, #1
 800a65e:	d1c2      	bne.n	800a5e6 <_printf_float+0x2f6>
 800a660:	e6a1      	b.n	800a3a6 <_printf_float+0xb6>
 800a662:	2301      	movs	r3, #1
 800a664:	4631      	mov	r1, r6
 800a666:	4628      	mov	r0, r5
 800a668:	920a      	str	r2, [sp, #40]	@ 0x28
 800a66a:	47b8      	blx	r7
 800a66c:	3001      	adds	r0, #1
 800a66e:	f43f ae9a 	beq.w	800a3a6 <_printf_float+0xb6>
 800a672:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a674:	f10b 0b01 	add.w	fp, fp, #1
 800a678:	e7bb      	b.n	800a5f2 <_printf_float+0x302>
 800a67a:	4631      	mov	r1, r6
 800a67c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a680:	4628      	mov	r0, r5
 800a682:	47b8      	blx	r7
 800a684:	3001      	adds	r0, #1
 800a686:	d1c0      	bne.n	800a60a <_printf_float+0x31a>
 800a688:	e68d      	b.n	800a3a6 <_printf_float+0xb6>
 800a68a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a68c:	464b      	mov	r3, r9
 800a68e:	4631      	mov	r1, r6
 800a690:	4628      	mov	r0, r5
 800a692:	4442      	add	r2, r8
 800a694:	47b8      	blx	r7
 800a696:	3001      	adds	r0, #1
 800a698:	d1c3      	bne.n	800a622 <_printf_float+0x332>
 800a69a:	e684      	b.n	800a3a6 <_printf_float+0xb6>
 800a69c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a6a0:	f1ba 0f01 	cmp.w	sl, #1
 800a6a4:	dc01      	bgt.n	800a6aa <_printf_float+0x3ba>
 800a6a6:	07db      	lsls	r3, r3, #31
 800a6a8:	d536      	bpl.n	800a718 <_printf_float+0x428>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	4642      	mov	r2, r8
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	47b8      	blx	r7
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	f43f ae76 	beq.w	800a3a6 <_printf_float+0xb6>
 800a6ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a6be:	4631      	mov	r1, r6
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	47b8      	blx	r7
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	f43f ae6e 	beq.w	800a3a6 <_printf_float+0xb6>
 800a6ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6d6:	f7f6 f971 	bl	80009bc <__aeabi_dcmpeq>
 800a6da:	b9c0      	cbnz	r0, 800a70e <_printf_float+0x41e>
 800a6dc:	4653      	mov	r3, sl
 800a6de:	f108 0201 	add.w	r2, r8, #1
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	47b8      	blx	r7
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	d10c      	bne.n	800a706 <_printf_float+0x416>
 800a6ec:	e65b      	b.n	800a3a6 <_printf_float+0xb6>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	465a      	mov	r2, fp
 800a6f2:	4631      	mov	r1, r6
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	47b8      	blx	r7
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	f43f ae54 	beq.w	800a3a6 <_printf_float+0xb6>
 800a6fe:	f108 0801 	add.w	r8, r8, #1
 800a702:	45d0      	cmp	r8, sl
 800a704:	dbf3      	blt.n	800a6ee <_printf_float+0x3fe>
 800a706:	464b      	mov	r3, r9
 800a708:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a70c:	e6e0      	b.n	800a4d0 <_printf_float+0x1e0>
 800a70e:	f04f 0800 	mov.w	r8, #0
 800a712:	f104 0b1a 	add.w	fp, r4, #26
 800a716:	e7f4      	b.n	800a702 <_printf_float+0x412>
 800a718:	2301      	movs	r3, #1
 800a71a:	4642      	mov	r2, r8
 800a71c:	e7e1      	b.n	800a6e2 <_printf_float+0x3f2>
 800a71e:	2301      	movs	r3, #1
 800a720:	464a      	mov	r2, r9
 800a722:	4631      	mov	r1, r6
 800a724:	4628      	mov	r0, r5
 800a726:	47b8      	blx	r7
 800a728:	3001      	adds	r0, #1
 800a72a:	f43f ae3c 	beq.w	800a3a6 <_printf_float+0xb6>
 800a72e:	f108 0801 	add.w	r8, r8, #1
 800a732:	68e3      	ldr	r3, [r4, #12]
 800a734:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a736:	1a5b      	subs	r3, r3, r1
 800a738:	4543      	cmp	r3, r8
 800a73a:	dcf0      	bgt.n	800a71e <_printf_float+0x42e>
 800a73c:	e6fd      	b.n	800a53a <_printf_float+0x24a>
 800a73e:	f04f 0800 	mov.w	r8, #0
 800a742:	f104 0919 	add.w	r9, r4, #25
 800a746:	e7f4      	b.n	800a732 <_printf_float+0x442>

0800a748 <_printf_common>:
 800a748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a74c:	4616      	mov	r6, r2
 800a74e:	4698      	mov	r8, r3
 800a750:	688a      	ldr	r2, [r1, #8]
 800a752:	690b      	ldr	r3, [r1, #16]
 800a754:	4607      	mov	r7, r0
 800a756:	4293      	cmp	r3, r2
 800a758:	bfb8      	it	lt
 800a75a:	4613      	movlt	r3, r2
 800a75c:	6033      	str	r3, [r6, #0]
 800a75e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a762:	460c      	mov	r4, r1
 800a764:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a768:	b10a      	cbz	r2, 800a76e <_printf_common+0x26>
 800a76a:	3301      	adds	r3, #1
 800a76c:	6033      	str	r3, [r6, #0]
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	0699      	lsls	r1, r3, #26
 800a772:	bf42      	ittt	mi
 800a774:	6833      	ldrmi	r3, [r6, #0]
 800a776:	3302      	addmi	r3, #2
 800a778:	6033      	strmi	r3, [r6, #0]
 800a77a:	6825      	ldr	r5, [r4, #0]
 800a77c:	f015 0506 	ands.w	r5, r5, #6
 800a780:	d106      	bne.n	800a790 <_printf_common+0x48>
 800a782:	f104 0a19 	add.w	sl, r4, #25
 800a786:	68e3      	ldr	r3, [r4, #12]
 800a788:	6832      	ldr	r2, [r6, #0]
 800a78a:	1a9b      	subs	r3, r3, r2
 800a78c:	42ab      	cmp	r3, r5
 800a78e:	dc2b      	bgt.n	800a7e8 <_printf_common+0xa0>
 800a790:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a794:	6822      	ldr	r2, [r4, #0]
 800a796:	3b00      	subs	r3, #0
 800a798:	bf18      	it	ne
 800a79a:	2301      	movne	r3, #1
 800a79c:	0692      	lsls	r2, r2, #26
 800a79e:	d430      	bmi.n	800a802 <_printf_common+0xba>
 800a7a0:	4641      	mov	r1, r8
 800a7a2:	4638      	mov	r0, r7
 800a7a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a7a8:	47c8      	blx	r9
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	d023      	beq.n	800a7f6 <_printf_common+0xae>
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	6922      	ldr	r2, [r4, #16]
 800a7b2:	f003 0306 	and.w	r3, r3, #6
 800a7b6:	2b04      	cmp	r3, #4
 800a7b8:	bf14      	ite	ne
 800a7ba:	2500      	movne	r5, #0
 800a7bc:	6833      	ldreq	r3, [r6, #0]
 800a7be:	f04f 0600 	mov.w	r6, #0
 800a7c2:	bf08      	it	eq
 800a7c4:	68e5      	ldreq	r5, [r4, #12]
 800a7c6:	f104 041a 	add.w	r4, r4, #26
 800a7ca:	bf08      	it	eq
 800a7cc:	1aed      	subeq	r5, r5, r3
 800a7ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a7d2:	bf08      	it	eq
 800a7d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	bfc4      	itt	gt
 800a7dc:	1a9b      	subgt	r3, r3, r2
 800a7de:	18ed      	addgt	r5, r5, r3
 800a7e0:	42b5      	cmp	r5, r6
 800a7e2:	d11a      	bne.n	800a81a <_printf_common+0xd2>
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	e008      	b.n	800a7fa <_printf_common+0xb2>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	4652      	mov	r2, sl
 800a7ec:	4641      	mov	r1, r8
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	47c8      	blx	r9
 800a7f2:	3001      	adds	r0, #1
 800a7f4:	d103      	bne.n	800a7fe <_printf_common+0xb6>
 800a7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7fe:	3501      	adds	r5, #1
 800a800:	e7c1      	b.n	800a786 <_printf_common+0x3e>
 800a802:	2030      	movs	r0, #48	@ 0x30
 800a804:	18e1      	adds	r1, r4, r3
 800a806:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a80a:	1c5a      	adds	r2, r3, #1
 800a80c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a810:	4422      	add	r2, r4
 800a812:	3302      	adds	r3, #2
 800a814:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a818:	e7c2      	b.n	800a7a0 <_printf_common+0x58>
 800a81a:	2301      	movs	r3, #1
 800a81c:	4622      	mov	r2, r4
 800a81e:	4641      	mov	r1, r8
 800a820:	4638      	mov	r0, r7
 800a822:	47c8      	blx	r9
 800a824:	3001      	adds	r0, #1
 800a826:	d0e6      	beq.n	800a7f6 <_printf_common+0xae>
 800a828:	3601      	adds	r6, #1
 800a82a:	e7d9      	b.n	800a7e0 <_printf_common+0x98>

0800a82c <_printf_i>:
 800a82c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a830:	7e0f      	ldrb	r7, [r1, #24]
 800a832:	4691      	mov	r9, r2
 800a834:	2f78      	cmp	r7, #120	@ 0x78
 800a836:	4680      	mov	r8, r0
 800a838:	460c      	mov	r4, r1
 800a83a:	469a      	mov	sl, r3
 800a83c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a83e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a842:	d807      	bhi.n	800a854 <_printf_i+0x28>
 800a844:	2f62      	cmp	r7, #98	@ 0x62
 800a846:	d80a      	bhi.n	800a85e <_printf_i+0x32>
 800a848:	2f00      	cmp	r7, #0
 800a84a:	f000 80d1 	beq.w	800a9f0 <_printf_i+0x1c4>
 800a84e:	2f58      	cmp	r7, #88	@ 0x58
 800a850:	f000 80b8 	beq.w	800a9c4 <_printf_i+0x198>
 800a854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a858:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a85c:	e03a      	b.n	800a8d4 <_printf_i+0xa8>
 800a85e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a862:	2b15      	cmp	r3, #21
 800a864:	d8f6      	bhi.n	800a854 <_printf_i+0x28>
 800a866:	a101      	add	r1, pc, #4	@ (adr r1, 800a86c <_printf_i+0x40>)
 800a868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a86c:	0800a8c5 	.word	0x0800a8c5
 800a870:	0800a8d9 	.word	0x0800a8d9
 800a874:	0800a855 	.word	0x0800a855
 800a878:	0800a855 	.word	0x0800a855
 800a87c:	0800a855 	.word	0x0800a855
 800a880:	0800a855 	.word	0x0800a855
 800a884:	0800a8d9 	.word	0x0800a8d9
 800a888:	0800a855 	.word	0x0800a855
 800a88c:	0800a855 	.word	0x0800a855
 800a890:	0800a855 	.word	0x0800a855
 800a894:	0800a855 	.word	0x0800a855
 800a898:	0800a9d7 	.word	0x0800a9d7
 800a89c:	0800a903 	.word	0x0800a903
 800a8a0:	0800a991 	.word	0x0800a991
 800a8a4:	0800a855 	.word	0x0800a855
 800a8a8:	0800a855 	.word	0x0800a855
 800a8ac:	0800a9f9 	.word	0x0800a9f9
 800a8b0:	0800a855 	.word	0x0800a855
 800a8b4:	0800a903 	.word	0x0800a903
 800a8b8:	0800a855 	.word	0x0800a855
 800a8bc:	0800a855 	.word	0x0800a855
 800a8c0:	0800a999 	.word	0x0800a999
 800a8c4:	6833      	ldr	r3, [r6, #0]
 800a8c6:	1d1a      	adds	r2, r3, #4
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	6032      	str	r2, [r6, #0]
 800a8cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e09c      	b.n	800aa12 <_printf_i+0x1e6>
 800a8d8:	6833      	ldr	r3, [r6, #0]
 800a8da:	6820      	ldr	r0, [r4, #0]
 800a8dc:	1d19      	adds	r1, r3, #4
 800a8de:	6031      	str	r1, [r6, #0]
 800a8e0:	0606      	lsls	r6, r0, #24
 800a8e2:	d501      	bpl.n	800a8e8 <_printf_i+0xbc>
 800a8e4:	681d      	ldr	r5, [r3, #0]
 800a8e6:	e003      	b.n	800a8f0 <_printf_i+0xc4>
 800a8e8:	0645      	lsls	r5, r0, #25
 800a8ea:	d5fb      	bpl.n	800a8e4 <_printf_i+0xb8>
 800a8ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	da03      	bge.n	800a8fc <_printf_i+0xd0>
 800a8f4:	232d      	movs	r3, #45	@ 0x2d
 800a8f6:	426d      	negs	r5, r5
 800a8f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8fc:	230a      	movs	r3, #10
 800a8fe:	4858      	ldr	r0, [pc, #352]	@ (800aa60 <_printf_i+0x234>)
 800a900:	e011      	b.n	800a926 <_printf_i+0xfa>
 800a902:	6821      	ldr	r1, [r4, #0]
 800a904:	6833      	ldr	r3, [r6, #0]
 800a906:	0608      	lsls	r0, r1, #24
 800a908:	f853 5b04 	ldr.w	r5, [r3], #4
 800a90c:	d402      	bmi.n	800a914 <_printf_i+0xe8>
 800a90e:	0649      	lsls	r1, r1, #25
 800a910:	bf48      	it	mi
 800a912:	b2ad      	uxthmi	r5, r5
 800a914:	2f6f      	cmp	r7, #111	@ 0x6f
 800a916:	6033      	str	r3, [r6, #0]
 800a918:	bf14      	ite	ne
 800a91a:	230a      	movne	r3, #10
 800a91c:	2308      	moveq	r3, #8
 800a91e:	4850      	ldr	r0, [pc, #320]	@ (800aa60 <_printf_i+0x234>)
 800a920:	2100      	movs	r1, #0
 800a922:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a926:	6866      	ldr	r6, [r4, #4]
 800a928:	2e00      	cmp	r6, #0
 800a92a:	60a6      	str	r6, [r4, #8]
 800a92c:	db05      	blt.n	800a93a <_printf_i+0x10e>
 800a92e:	6821      	ldr	r1, [r4, #0]
 800a930:	432e      	orrs	r6, r5
 800a932:	f021 0104 	bic.w	r1, r1, #4
 800a936:	6021      	str	r1, [r4, #0]
 800a938:	d04b      	beq.n	800a9d2 <_printf_i+0x1a6>
 800a93a:	4616      	mov	r6, r2
 800a93c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a940:	fb03 5711 	mls	r7, r3, r1, r5
 800a944:	5dc7      	ldrb	r7, [r0, r7]
 800a946:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a94a:	462f      	mov	r7, r5
 800a94c:	42bb      	cmp	r3, r7
 800a94e:	460d      	mov	r5, r1
 800a950:	d9f4      	bls.n	800a93c <_printf_i+0x110>
 800a952:	2b08      	cmp	r3, #8
 800a954:	d10b      	bne.n	800a96e <_printf_i+0x142>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	07df      	lsls	r7, r3, #31
 800a95a:	d508      	bpl.n	800a96e <_printf_i+0x142>
 800a95c:	6923      	ldr	r3, [r4, #16]
 800a95e:	6861      	ldr	r1, [r4, #4]
 800a960:	4299      	cmp	r1, r3
 800a962:	bfde      	ittt	le
 800a964:	2330      	movle	r3, #48	@ 0x30
 800a966:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a96a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a96e:	1b92      	subs	r2, r2, r6
 800a970:	6122      	str	r2, [r4, #16]
 800a972:	464b      	mov	r3, r9
 800a974:	4621      	mov	r1, r4
 800a976:	4640      	mov	r0, r8
 800a978:	f8cd a000 	str.w	sl, [sp]
 800a97c:	aa03      	add	r2, sp, #12
 800a97e:	f7ff fee3 	bl	800a748 <_printf_common>
 800a982:	3001      	adds	r0, #1
 800a984:	d14a      	bne.n	800aa1c <_printf_i+0x1f0>
 800a986:	f04f 30ff 	mov.w	r0, #4294967295
 800a98a:	b004      	add	sp, #16
 800a98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a990:	6823      	ldr	r3, [r4, #0]
 800a992:	f043 0320 	orr.w	r3, r3, #32
 800a996:	6023      	str	r3, [r4, #0]
 800a998:	2778      	movs	r7, #120	@ 0x78
 800a99a:	4832      	ldr	r0, [pc, #200]	@ (800aa64 <_printf_i+0x238>)
 800a99c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a9a0:	6823      	ldr	r3, [r4, #0]
 800a9a2:	6831      	ldr	r1, [r6, #0]
 800a9a4:	061f      	lsls	r7, r3, #24
 800a9a6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a9aa:	d402      	bmi.n	800a9b2 <_printf_i+0x186>
 800a9ac:	065f      	lsls	r7, r3, #25
 800a9ae:	bf48      	it	mi
 800a9b0:	b2ad      	uxthmi	r5, r5
 800a9b2:	6031      	str	r1, [r6, #0]
 800a9b4:	07d9      	lsls	r1, r3, #31
 800a9b6:	bf44      	itt	mi
 800a9b8:	f043 0320 	orrmi.w	r3, r3, #32
 800a9bc:	6023      	strmi	r3, [r4, #0]
 800a9be:	b11d      	cbz	r5, 800a9c8 <_printf_i+0x19c>
 800a9c0:	2310      	movs	r3, #16
 800a9c2:	e7ad      	b.n	800a920 <_printf_i+0xf4>
 800a9c4:	4826      	ldr	r0, [pc, #152]	@ (800aa60 <_printf_i+0x234>)
 800a9c6:	e7e9      	b.n	800a99c <_printf_i+0x170>
 800a9c8:	6823      	ldr	r3, [r4, #0]
 800a9ca:	f023 0320 	bic.w	r3, r3, #32
 800a9ce:	6023      	str	r3, [r4, #0]
 800a9d0:	e7f6      	b.n	800a9c0 <_printf_i+0x194>
 800a9d2:	4616      	mov	r6, r2
 800a9d4:	e7bd      	b.n	800a952 <_printf_i+0x126>
 800a9d6:	6833      	ldr	r3, [r6, #0]
 800a9d8:	6825      	ldr	r5, [r4, #0]
 800a9da:	1d18      	adds	r0, r3, #4
 800a9dc:	6961      	ldr	r1, [r4, #20]
 800a9de:	6030      	str	r0, [r6, #0]
 800a9e0:	062e      	lsls	r6, r5, #24
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	d501      	bpl.n	800a9ea <_printf_i+0x1be>
 800a9e6:	6019      	str	r1, [r3, #0]
 800a9e8:	e002      	b.n	800a9f0 <_printf_i+0x1c4>
 800a9ea:	0668      	lsls	r0, r5, #25
 800a9ec:	d5fb      	bpl.n	800a9e6 <_printf_i+0x1ba>
 800a9ee:	8019      	strh	r1, [r3, #0]
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4616      	mov	r6, r2
 800a9f4:	6123      	str	r3, [r4, #16]
 800a9f6:	e7bc      	b.n	800a972 <_printf_i+0x146>
 800a9f8:	6833      	ldr	r3, [r6, #0]
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	1d1a      	adds	r2, r3, #4
 800a9fe:	6032      	str	r2, [r6, #0]
 800aa00:	681e      	ldr	r6, [r3, #0]
 800aa02:	6862      	ldr	r2, [r4, #4]
 800aa04:	4630      	mov	r0, r6
 800aa06:	f000 fd70 	bl	800b4ea <memchr>
 800aa0a:	b108      	cbz	r0, 800aa10 <_printf_i+0x1e4>
 800aa0c:	1b80      	subs	r0, r0, r6
 800aa0e:	6060      	str	r0, [r4, #4]
 800aa10:	6863      	ldr	r3, [r4, #4]
 800aa12:	6123      	str	r3, [r4, #16]
 800aa14:	2300      	movs	r3, #0
 800aa16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa1a:	e7aa      	b.n	800a972 <_printf_i+0x146>
 800aa1c:	4632      	mov	r2, r6
 800aa1e:	4649      	mov	r1, r9
 800aa20:	4640      	mov	r0, r8
 800aa22:	6923      	ldr	r3, [r4, #16]
 800aa24:	47d0      	blx	sl
 800aa26:	3001      	adds	r0, #1
 800aa28:	d0ad      	beq.n	800a986 <_printf_i+0x15a>
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	079b      	lsls	r3, r3, #30
 800aa2e:	d413      	bmi.n	800aa58 <_printf_i+0x22c>
 800aa30:	68e0      	ldr	r0, [r4, #12]
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	4298      	cmp	r0, r3
 800aa36:	bfb8      	it	lt
 800aa38:	4618      	movlt	r0, r3
 800aa3a:	e7a6      	b.n	800a98a <_printf_i+0x15e>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	4632      	mov	r2, r6
 800aa40:	4649      	mov	r1, r9
 800aa42:	4640      	mov	r0, r8
 800aa44:	47d0      	blx	sl
 800aa46:	3001      	adds	r0, #1
 800aa48:	d09d      	beq.n	800a986 <_printf_i+0x15a>
 800aa4a:	3501      	adds	r5, #1
 800aa4c:	68e3      	ldr	r3, [r4, #12]
 800aa4e:	9903      	ldr	r1, [sp, #12]
 800aa50:	1a5b      	subs	r3, r3, r1
 800aa52:	42ab      	cmp	r3, r5
 800aa54:	dcf2      	bgt.n	800aa3c <_printf_i+0x210>
 800aa56:	e7eb      	b.n	800aa30 <_printf_i+0x204>
 800aa58:	2500      	movs	r5, #0
 800aa5a:	f104 0619 	add.w	r6, r4, #25
 800aa5e:	e7f5      	b.n	800aa4c <_printf_i+0x220>
 800aa60:	0800e25c 	.word	0x0800e25c
 800aa64:	0800e26d 	.word	0x0800e26d

0800aa68 <_scanf_float>:
 800aa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6c:	b087      	sub	sp, #28
 800aa6e:	9303      	str	r3, [sp, #12]
 800aa70:	688b      	ldr	r3, [r1, #8]
 800aa72:	4691      	mov	r9, r2
 800aa74:	1e5a      	subs	r2, r3, #1
 800aa76:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aa7a:	bf82      	ittt	hi
 800aa7c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aa80:	eb03 0b05 	addhi.w	fp, r3, r5
 800aa84:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aa88:	460a      	mov	r2, r1
 800aa8a:	f04f 0500 	mov.w	r5, #0
 800aa8e:	bf88      	it	hi
 800aa90:	608b      	strhi	r3, [r1, #8]
 800aa92:	680b      	ldr	r3, [r1, #0]
 800aa94:	4680      	mov	r8, r0
 800aa96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aa9a:	f842 3b1c 	str.w	r3, [r2], #28
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	bf98      	it	ls
 800aaa2:	f04f 0b00 	movls.w	fp, #0
 800aaa6:	4616      	mov	r6, r2
 800aaa8:	46aa      	mov	sl, r5
 800aaaa:	462f      	mov	r7, r5
 800aaac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aab0:	9201      	str	r2, [sp, #4]
 800aab2:	9502      	str	r5, [sp, #8]
 800aab4:	68a2      	ldr	r2, [r4, #8]
 800aab6:	b15a      	cbz	r2, 800aad0 <_scanf_float+0x68>
 800aab8:	f8d9 3000 	ldr.w	r3, [r9]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2b4e      	cmp	r3, #78	@ 0x4e
 800aac0:	d862      	bhi.n	800ab88 <_scanf_float+0x120>
 800aac2:	2b40      	cmp	r3, #64	@ 0x40
 800aac4:	d83a      	bhi.n	800ab3c <_scanf_float+0xd4>
 800aac6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800aaca:	b2c8      	uxtb	r0, r1
 800aacc:	280e      	cmp	r0, #14
 800aace:	d938      	bls.n	800ab42 <_scanf_float+0xda>
 800aad0:	b11f      	cbz	r7, 800aada <_scanf_float+0x72>
 800aad2:	6823      	ldr	r3, [r4, #0]
 800aad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aade:	f1ba 0f01 	cmp.w	sl, #1
 800aae2:	f200 8114 	bhi.w	800ad0e <_scanf_float+0x2a6>
 800aae6:	9b01      	ldr	r3, [sp, #4]
 800aae8:	429e      	cmp	r6, r3
 800aaea:	f200 8105 	bhi.w	800acf8 <_scanf_float+0x290>
 800aaee:	2001      	movs	r0, #1
 800aaf0:	b007      	add	sp, #28
 800aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800aafa:	2a0d      	cmp	r2, #13
 800aafc:	d8e8      	bhi.n	800aad0 <_scanf_float+0x68>
 800aafe:	a101      	add	r1, pc, #4	@ (adr r1, 800ab04 <_scanf_float+0x9c>)
 800ab00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ab04:	0800ac4d 	.word	0x0800ac4d
 800ab08:	0800aad1 	.word	0x0800aad1
 800ab0c:	0800aad1 	.word	0x0800aad1
 800ab10:	0800aad1 	.word	0x0800aad1
 800ab14:	0800aca9 	.word	0x0800aca9
 800ab18:	0800ac83 	.word	0x0800ac83
 800ab1c:	0800aad1 	.word	0x0800aad1
 800ab20:	0800aad1 	.word	0x0800aad1
 800ab24:	0800ac5b 	.word	0x0800ac5b
 800ab28:	0800aad1 	.word	0x0800aad1
 800ab2c:	0800aad1 	.word	0x0800aad1
 800ab30:	0800aad1 	.word	0x0800aad1
 800ab34:	0800aad1 	.word	0x0800aad1
 800ab38:	0800ac17 	.word	0x0800ac17
 800ab3c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ab40:	e7db      	b.n	800aafa <_scanf_float+0x92>
 800ab42:	290e      	cmp	r1, #14
 800ab44:	d8c4      	bhi.n	800aad0 <_scanf_float+0x68>
 800ab46:	a001      	add	r0, pc, #4	@ (adr r0, 800ab4c <_scanf_float+0xe4>)
 800ab48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ab4c:	0800ac07 	.word	0x0800ac07
 800ab50:	0800aad1 	.word	0x0800aad1
 800ab54:	0800ac07 	.word	0x0800ac07
 800ab58:	0800ac97 	.word	0x0800ac97
 800ab5c:	0800aad1 	.word	0x0800aad1
 800ab60:	0800aba9 	.word	0x0800aba9
 800ab64:	0800abed 	.word	0x0800abed
 800ab68:	0800abed 	.word	0x0800abed
 800ab6c:	0800abed 	.word	0x0800abed
 800ab70:	0800abed 	.word	0x0800abed
 800ab74:	0800abed 	.word	0x0800abed
 800ab78:	0800abed 	.word	0x0800abed
 800ab7c:	0800abed 	.word	0x0800abed
 800ab80:	0800abed 	.word	0x0800abed
 800ab84:	0800abed 	.word	0x0800abed
 800ab88:	2b6e      	cmp	r3, #110	@ 0x6e
 800ab8a:	d809      	bhi.n	800aba0 <_scanf_float+0x138>
 800ab8c:	2b60      	cmp	r3, #96	@ 0x60
 800ab8e:	d8b2      	bhi.n	800aaf6 <_scanf_float+0x8e>
 800ab90:	2b54      	cmp	r3, #84	@ 0x54
 800ab92:	d07b      	beq.n	800ac8c <_scanf_float+0x224>
 800ab94:	2b59      	cmp	r3, #89	@ 0x59
 800ab96:	d19b      	bne.n	800aad0 <_scanf_float+0x68>
 800ab98:	2d07      	cmp	r5, #7
 800ab9a:	d199      	bne.n	800aad0 <_scanf_float+0x68>
 800ab9c:	2508      	movs	r5, #8
 800ab9e:	e02f      	b.n	800ac00 <_scanf_float+0x198>
 800aba0:	2b74      	cmp	r3, #116	@ 0x74
 800aba2:	d073      	beq.n	800ac8c <_scanf_float+0x224>
 800aba4:	2b79      	cmp	r3, #121	@ 0x79
 800aba6:	e7f6      	b.n	800ab96 <_scanf_float+0x12e>
 800aba8:	6821      	ldr	r1, [r4, #0]
 800abaa:	05c8      	lsls	r0, r1, #23
 800abac:	d51e      	bpl.n	800abec <_scanf_float+0x184>
 800abae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800abb2:	6021      	str	r1, [r4, #0]
 800abb4:	3701      	adds	r7, #1
 800abb6:	f1bb 0f00 	cmp.w	fp, #0
 800abba:	d003      	beq.n	800abc4 <_scanf_float+0x15c>
 800abbc:	3201      	adds	r2, #1
 800abbe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800abc2:	60a2      	str	r2, [r4, #8]
 800abc4:	68a3      	ldr	r3, [r4, #8]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	60a3      	str	r3, [r4, #8]
 800abca:	6923      	ldr	r3, [r4, #16]
 800abcc:	3301      	adds	r3, #1
 800abce:	6123      	str	r3, [r4, #16]
 800abd0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f8c9 3004 	str.w	r3, [r9, #4]
 800abdc:	f340 8083 	ble.w	800ace6 <_scanf_float+0x27e>
 800abe0:	f8d9 3000 	ldr.w	r3, [r9]
 800abe4:	3301      	adds	r3, #1
 800abe6:	f8c9 3000 	str.w	r3, [r9]
 800abea:	e763      	b.n	800aab4 <_scanf_float+0x4c>
 800abec:	eb1a 0105 	adds.w	r1, sl, r5
 800abf0:	f47f af6e 	bne.w	800aad0 <_scanf_float+0x68>
 800abf4:	460d      	mov	r5, r1
 800abf6:	468a      	mov	sl, r1
 800abf8:	6822      	ldr	r2, [r4, #0]
 800abfa:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800abfe:	6022      	str	r2, [r4, #0]
 800ac00:	f806 3b01 	strb.w	r3, [r6], #1
 800ac04:	e7de      	b.n	800abc4 <_scanf_float+0x15c>
 800ac06:	6822      	ldr	r2, [r4, #0]
 800ac08:	0610      	lsls	r0, r2, #24
 800ac0a:	f57f af61 	bpl.w	800aad0 <_scanf_float+0x68>
 800ac0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ac12:	6022      	str	r2, [r4, #0]
 800ac14:	e7f4      	b.n	800ac00 <_scanf_float+0x198>
 800ac16:	f1ba 0f00 	cmp.w	sl, #0
 800ac1a:	d10c      	bne.n	800ac36 <_scanf_float+0x1ce>
 800ac1c:	b977      	cbnz	r7, 800ac3c <_scanf_float+0x1d4>
 800ac1e:	6822      	ldr	r2, [r4, #0]
 800ac20:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ac24:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ac28:	d108      	bne.n	800ac3c <_scanf_float+0x1d4>
 800ac2a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac2e:	f04f 0a01 	mov.w	sl, #1
 800ac32:	6022      	str	r2, [r4, #0]
 800ac34:	e7e4      	b.n	800ac00 <_scanf_float+0x198>
 800ac36:	f1ba 0f02 	cmp.w	sl, #2
 800ac3a:	d051      	beq.n	800ace0 <_scanf_float+0x278>
 800ac3c:	2d01      	cmp	r5, #1
 800ac3e:	d002      	beq.n	800ac46 <_scanf_float+0x1de>
 800ac40:	2d04      	cmp	r5, #4
 800ac42:	f47f af45 	bne.w	800aad0 <_scanf_float+0x68>
 800ac46:	3501      	adds	r5, #1
 800ac48:	b2ed      	uxtb	r5, r5
 800ac4a:	e7d9      	b.n	800ac00 <_scanf_float+0x198>
 800ac4c:	f1ba 0f01 	cmp.w	sl, #1
 800ac50:	f47f af3e 	bne.w	800aad0 <_scanf_float+0x68>
 800ac54:	f04f 0a02 	mov.w	sl, #2
 800ac58:	e7d2      	b.n	800ac00 <_scanf_float+0x198>
 800ac5a:	b975      	cbnz	r5, 800ac7a <_scanf_float+0x212>
 800ac5c:	2f00      	cmp	r7, #0
 800ac5e:	f47f af38 	bne.w	800aad2 <_scanf_float+0x6a>
 800ac62:	6822      	ldr	r2, [r4, #0]
 800ac64:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ac68:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ac6c:	f040 80ff 	bne.w	800ae6e <_scanf_float+0x406>
 800ac70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac74:	2501      	movs	r5, #1
 800ac76:	6022      	str	r2, [r4, #0]
 800ac78:	e7c2      	b.n	800ac00 <_scanf_float+0x198>
 800ac7a:	2d03      	cmp	r5, #3
 800ac7c:	d0e3      	beq.n	800ac46 <_scanf_float+0x1de>
 800ac7e:	2d05      	cmp	r5, #5
 800ac80:	e7df      	b.n	800ac42 <_scanf_float+0x1da>
 800ac82:	2d02      	cmp	r5, #2
 800ac84:	f47f af24 	bne.w	800aad0 <_scanf_float+0x68>
 800ac88:	2503      	movs	r5, #3
 800ac8a:	e7b9      	b.n	800ac00 <_scanf_float+0x198>
 800ac8c:	2d06      	cmp	r5, #6
 800ac8e:	f47f af1f 	bne.w	800aad0 <_scanf_float+0x68>
 800ac92:	2507      	movs	r5, #7
 800ac94:	e7b4      	b.n	800ac00 <_scanf_float+0x198>
 800ac96:	6822      	ldr	r2, [r4, #0]
 800ac98:	0591      	lsls	r1, r2, #22
 800ac9a:	f57f af19 	bpl.w	800aad0 <_scanf_float+0x68>
 800ac9e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800aca2:	6022      	str	r2, [r4, #0]
 800aca4:	9702      	str	r7, [sp, #8]
 800aca6:	e7ab      	b.n	800ac00 <_scanf_float+0x198>
 800aca8:	6822      	ldr	r2, [r4, #0]
 800acaa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800acae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800acb2:	d005      	beq.n	800acc0 <_scanf_float+0x258>
 800acb4:	0550      	lsls	r0, r2, #21
 800acb6:	f57f af0b 	bpl.w	800aad0 <_scanf_float+0x68>
 800acba:	2f00      	cmp	r7, #0
 800acbc:	f000 80d7 	beq.w	800ae6e <_scanf_float+0x406>
 800acc0:	0591      	lsls	r1, r2, #22
 800acc2:	bf58      	it	pl
 800acc4:	9902      	ldrpl	r1, [sp, #8]
 800acc6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800acca:	bf58      	it	pl
 800accc:	1a79      	subpl	r1, r7, r1
 800acce:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800acd2:	f04f 0700 	mov.w	r7, #0
 800acd6:	bf58      	it	pl
 800acd8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800acdc:	6022      	str	r2, [r4, #0]
 800acde:	e78f      	b.n	800ac00 <_scanf_float+0x198>
 800ace0:	f04f 0a03 	mov.w	sl, #3
 800ace4:	e78c      	b.n	800ac00 <_scanf_float+0x198>
 800ace6:	4649      	mov	r1, r9
 800ace8:	4640      	mov	r0, r8
 800acea:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800acee:	4798      	blx	r3
 800acf0:	2800      	cmp	r0, #0
 800acf2:	f43f aedf 	beq.w	800aab4 <_scanf_float+0x4c>
 800acf6:	e6eb      	b.n	800aad0 <_scanf_float+0x68>
 800acf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800acfc:	464a      	mov	r2, r9
 800acfe:	4640      	mov	r0, r8
 800ad00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad04:	4798      	blx	r3
 800ad06:	6923      	ldr	r3, [r4, #16]
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	6123      	str	r3, [r4, #16]
 800ad0c:	e6eb      	b.n	800aae6 <_scanf_float+0x7e>
 800ad0e:	1e6b      	subs	r3, r5, #1
 800ad10:	2b06      	cmp	r3, #6
 800ad12:	d824      	bhi.n	800ad5e <_scanf_float+0x2f6>
 800ad14:	2d02      	cmp	r5, #2
 800ad16:	d836      	bhi.n	800ad86 <_scanf_float+0x31e>
 800ad18:	9b01      	ldr	r3, [sp, #4]
 800ad1a:	429e      	cmp	r6, r3
 800ad1c:	f67f aee7 	bls.w	800aaee <_scanf_float+0x86>
 800ad20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad24:	464a      	mov	r2, r9
 800ad26:	4640      	mov	r0, r8
 800ad28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad2c:	4798      	blx	r3
 800ad2e:	6923      	ldr	r3, [r4, #16]
 800ad30:	3b01      	subs	r3, #1
 800ad32:	6123      	str	r3, [r4, #16]
 800ad34:	e7f0      	b.n	800ad18 <_scanf_float+0x2b0>
 800ad36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad3a:	464a      	mov	r2, r9
 800ad3c:	4640      	mov	r0, r8
 800ad3e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ad42:	4798      	blx	r3
 800ad44:	6923      	ldr	r3, [r4, #16]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	6123      	str	r3, [r4, #16]
 800ad4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad4e:	fa5f fa8a 	uxtb.w	sl, sl
 800ad52:	f1ba 0f02 	cmp.w	sl, #2
 800ad56:	d1ee      	bne.n	800ad36 <_scanf_float+0x2ce>
 800ad58:	3d03      	subs	r5, #3
 800ad5a:	b2ed      	uxtb	r5, r5
 800ad5c:	1b76      	subs	r6, r6, r5
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	05da      	lsls	r2, r3, #23
 800ad62:	d530      	bpl.n	800adc6 <_scanf_float+0x35e>
 800ad64:	055b      	lsls	r3, r3, #21
 800ad66:	d511      	bpl.n	800ad8c <_scanf_float+0x324>
 800ad68:	9b01      	ldr	r3, [sp, #4]
 800ad6a:	429e      	cmp	r6, r3
 800ad6c:	f67f aebf 	bls.w	800aaee <_scanf_float+0x86>
 800ad70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad74:	464a      	mov	r2, r9
 800ad76:	4640      	mov	r0, r8
 800ad78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad7c:	4798      	blx	r3
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	6123      	str	r3, [r4, #16]
 800ad84:	e7f0      	b.n	800ad68 <_scanf_float+0x300>
 800ad86:	46aa      	mov	sl, r5
 800ad88:	46b3      	mov	fp, r6
 800ad8a:	e7de      	b.n	800ad4a <_scanf_float+0x2e2>
 800ad8c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ad90:	6923      	ldr	r3, [r4, #16]
 800ad92:	2965      	cmp	r1, #101	@ 0x65
 800ad94:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad98:	f106 35ff 	add.w	r5, r6, #4294967295
 800ad9c:	6123      	str	r3, [r4, #16]
 800ad9e:	d00c      	beq.n	800adba <_scanf_float+0x352>
 800ada0:	2945      	cmp	r1, #69	@ 0x45
 800ada2:	d00a      	beq.n	800adba <_scanf_float+0x352>
 800ada4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ada8:	464a      	mov	r2, r9
 800adaa:	4640      	mov	r0, r8
 800adac:	4798      	blx	r3
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	1eb5      	subs	r5, r6, #2
 800adb8:	6123      	str	r3, [r4, #16]
 800adba:	464a      	mov	r2, r9
 800adbc:	4640      	mov	r0, r8
 800adbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800adc2:	4798      	blx	r3
 800adc4:	462e      	mov	r6, r5
 800adc6:	6822      	ldr	r2, [r4, #0]
 800adc8:	f012 0210 	ands.w	r2, r2, #16
 800adcc:	d001      	beq.n	800add2 <_scanf_float+0x36a>
 800adce:	2000      	movs	r0, #0
 800add0:	e68e      	b.n	800aaf0 <_scanf_float+0x88>
 800add2:	7032      	strb	r2, [r6, #0]
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800adda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adde:	d125      	bne.n	800ae2c <_scanf_float+0x3c4>
 800ade0:	9b02      	ldr	r3, [sp, #8]
 800ade2:	429f      	cmp	r7, r3
 800ade4:	d00a      	beq.n	800adfc <_scanf_float+0x394>
 800ade6:	1bda      	subs	r2, r3, r7
 800ade8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800adec:	429e      	cmp	r6, r3
 800adee:	bf28      	it	cs
 800adf0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800adf4:	4630      	mov	r0, r6
 800adf6:	491f      	ldr	r1, [pc, #124]	@ (800ae74 <_scanf_float+0x40c>)
 800adf8:	f000 f9a8 	bl	800b14c <siprintf>
 800adfc:	2200      	movs	r2, #0
 800adfe:	4640      	mov	r0, r8
 800ae00:	9901      	ldr	r1, [sp, #4]
 800ae02:	f7ff f9c5 	bl	800a190 <_strtod_r>
 800ae06:	9b03      	ldr	r3, [sp, #12]
 800ae08:	6825      	ldr	r5, [r4, #0]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f015 0f02 	tst.w	r5, #2
 800ae10:	4606      	mov	r6, r0
 800ae12:	460f      	mov	r7, r1
 800ae14:	f103 0204 	add.w	r2, r3, #4
 800ae18:	d015      	beq.n	800ae46 <_scanf_float+0x3de>
 800ae1a:	9903      	ldr	r1, [sp, #12]
 800ae1c:	600a      	str	r2, [r1, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	e9c3 6700 	strd	r6, r7, [r3]
 800ae24:	68e3      	ldr	r3, [r4, #12]
 800ae26:	3301      	adds	r3, #1
 800ae28:	60e3      	str	r3, [r4, #12]
 800ae2a:	e7d0      	b.n	800adce <_scanf_float+0x366>
 800ae2c:	9b04      	ldr	r3, [sp, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d0e4      	beq.n	800adfc <_scanf_float+0x394>
 800ae32:	9905      	ldr	r1, [sp, #20]
 800ae34:	230a      	movs	r3, #10
 800ae36:	4640      	mov	r0, r8
 800ae38:	3101      	adds	r1, #1
 800ae3a:	f002 fa87 	bl	800d34c <_strtol_r>
 800ae3e:	9b04      	ldr	r3, [sp, #16]
 800ae40:	9e05      	ldr	r6, [sp, #20]
 800ae42:	1ac2      	subs	r2, r0, r3
 800ae44:	e7d0      	b.n	800ade8 <_scanf_float+0x380>
 800ae46:	076d      	lsls	r5, r5, #29
 800ae48:	d4e7      	bmi.n	800ae1a <_scanf_float+0x3b2>
 800ae4a:	9d03      	ldr	r5, [sp, #12]
 800ae4c:	602a      	str	r2, [r5, #0]
 800ae4e:	681d      	ldr	r5, [r3, #0]
 800ae50:	4602      	mov	r2, r0
 800ae52:	460b      	mov	r3, r1
 800ae54:	f7f5 fde4 	bl	8000a20 <__aeabi_dcmpun>
 800ae58:	b120      	cbz	r0, 800ae64 <_scanf_float+0x3fc>
 800ae5a:	4807      	ldr	r0, [pc, #28]	@ (800ae78 <_scanf_float+0x410>)
 800ae5c:	f000 fb68 	bl	800b530 <nanf>
 800ae60:	6028      	str	r0, [r5, #0]
 800ae62:	e7df      	b.n	800ae24 <_scanf_float+0x3bc>
 800ae64:	4630      	mov	r0, r6
 800ae66:	4639      	mov	r1, r7
 800ae68:	f7f5 fe38 	bl	8000adc <__aeabi_d2f>
 800ae6c:	e7f8      	b.n	800ae60 <_scanf_float+0x3f8>
 800ae6e:	2700      	movs	r7, #0
 800ae70:	e633      	b.n	800aada <_scanf_float+0x72>
 800ae72:	bf00      	nop
 800ae74:	0800e27e 	.word	0x0800e27e
 800ae78:	0800e41d 	.word	0x0800e41d

0800ae7c <std>:
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	b510      	push	{r4, lr}
 800ae80:	4604      	mov	r4, r0
 800ae82:	e9c0 3300 	strd	r3, r3, [r0]
 800ae86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae8a:	6083      	str	r3, [r0, #8]
 800ae8c:	8181      	strh	r1, [r0, #12]
 800ae8e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae90:	81c2      	strh	r2, [r0, #14]
 800ae92:	6183      	str	r3, [r0, #24]
 800ae94:	4619      	mov	r1, r3
 800ae96:	2208      	movs	r2, #8
 800ae98:	305c      	adds	r0, #92	@ 0x5c
 800ae9a:	f000 fa51 	bl	800b340 <memset>
 800ae9e:	4b0d      	ldr	r3, [pc, #52]	@ (800aed4 <std+0x58>)
 800aea0:	6224      	str	r4, [r4, #32]
 800aea2:	6263      	str	r3, [r4, #36]	@ 0x24
 800aea4:	4b0c      	ldr	r3, [pc, #48]	@ (800aed8 <std+0x5c>)
 800aea6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aea8:	4b0c      	ldr	r3, [pc, #48]	@ (800aedc <std+0x60>)
 800aeaa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aeac:	4b0c      	ldr	r3, [pc, #48]	@ (800aee0 <std+0x64>)
 800aeae:	6323      	str	r3, [r4, #48]	@ 0x30
 800aeb0:	4b0c      	ldr	r3, [pc, #48]	@ (800aee4 <std+0x68>)
 800aeb2:	429c      	cmp	r4, r3
 800aeb4:	d006      	beq.n	800aec4 <std+0x48>
 800aeb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aeba:	4294      	cmp	r4, r2
 800aebc:	d002      	beq.n	800aec4 <std+0x48>
 800aebe:	33d0      	adds	r3, #208	@ 0xd0
 800aec0:	429c      	cmp	r4, r3
 800aec2:	d105      	bne.n	800aed0 <std+0x54>
 800aec4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aecc:	f000 bb02 	b.w	800b4d4 <__retarget_lock_init_recursive>
 800aed0:	bd10      	pop	{r4, pc}
 800aed2:	bf00      	nop
 800aed4:	0800b191 	.word	0x0800b191
 800aed8:	0800b1b3 	.word	0x0800b1b3
 800aedc:	0800b1eb 	.word	0x0800b1eb
 800aee0:	0800b20f 	.word	0x0800b20f
 800aee4:	20000efc 	.word	0x20000efc

0800aee8 <stdio_exit_handler>:
 800aee8:	4a02      	ldr	r2, [pc, #8]	@ (800aef4 <stdio_exit_handler+0xc>)
 800aeea:	4903      	ldr	r1, [pc, #12]	@ (800aef8 <stdio_exit_handler+0x10>)
 800aeec:	4803      	ldr	r0, [pc, #12]	@ (800aefc <stdio_exit_handler+0x14>)
 800aeee:	f000 b869 	b.w	800afc4 <_fwalk_sglue>
 800aef2:	bf00      	nop
 800aef4:	20000070 	.word	0x20000070
 800aef8:	0800d999 	.word	0x0800d999
 800aefc:	200001ec 	.word	0x200001ec

0800af00 <cleanup_stdio>:
 800af00:	6841      	ldr	r1, [r0, #4]
 800af02:	4b0c      	ldr	r3, [pc, #48]	@ (800af34 <cleanup_stdio+0x34>)
 800af04:	b510      	push	{r4, lr}
 800af06:	4299      	cmp	r1, r3
 800af08:	4604      	mov	r4, r0
 800af0a:	d001      	beq.n	800af10 <cleanup_stdio+0x10>
 800af0c:	f002 fd44 	bl	800d998 <_fflush_r>
 800af10:	68a1      	ldr	r1, [r4, #8]
 800af12:	4b09      	ldr	r3, [pc, #36]	@ (800af38 <cleanup_stdio+0x38>)
 800af14:	4299      	cmp	r1, r3
 800af16:	d002      	beq.n	800af1e <cleanup_stdio+0x1e>
 800af18:	4620      	mov	r0, r4
 800af1a:	f002 fd3d 	bl	800d998 <_fflush_r>
 800af1e:	68e1      	ldr	r1, [r4, #12]
 800af20:	4b06      	ldr	r3, [pc, #24]	@ (800af3c <cleanup_stdio+0x3c>)
 800af22:	4299      	cmp	r1, r3
 800af24:	d004      	beq.n	800af30 <cleanup_stdio+0x30>
 800af26:	4620      	mov	r0, r4
 800af28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af2c:	f002 bd34 	b.w	800d998 <_fflush_r>
 800af30:	bd10      	pop	{r4, pc}
 800af32:	bf00      	nop
 800af34:	20000efc 	.word	0x20000efc
 800af38:	20000f64 	.word	0x20000f64
 800af3c:	20000fcc 	.word	0x20000fcc

0800af40 <global_stdio_init.part.0>:
 800af40:	b510      	push	{r4, lr}
 800af42:	4b0b      	ldr	r3, [pc, #44]	@ (800af70 <global_stdio_init.part.0+0x30>)
 800af44:	4c0b      	ldr	r4, [pc, #44]	@ (800af74 <global_stdio_init.part.0+0x34>)
 800af46:	4a0c      	ldr	r2, [pc, #48]	@ (800af78 <global_stdio_init.part.0+0x38>)
 800af48:	4620      	mov	r0, r4
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	2104      	movs	r1, #4
 800af4e:	2200      	movs	r2, #0
 800af50:	f7ff ff94 	bl	800ae7c <std>
 800af54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af58:	2201      	movs	r2, #1
 800af5a:	2109      	movs	r1, #9
 800af5c:	f7ff ff8e 	bl	800ae7c <std>
 800af60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af64:	2202      	movs	r2, #2
 800af66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af6a:	2112      	movs	r1, #18
 800af6c:	f7ff bf86 	b.w	800ae7c <std>
 800af70:	20001034 	.word	0x20001034
 800af74:	20000efc 	.word	0x20000efc
 800af78:	0800aee9 	.word	0x0800aee9

0800af7c <__sfp_lock_acquire>:
 800af7c:	4801      	ldr	r0, [pc, #4]	@ (800af84 <__sfp_lock_acquire+0x8>)
 800af7e:	f000 baaa 	b.w	800b4d6 <__retarget_lock_acquire_recursive>
 800af82:	bf00      	nop
 800af84:	2000103d 	.word	0x2000103d

0800af88 <__sfp_lock_release>:
 800af88:	4801      	ldr	r0, [pc, #4]	@ (800af90 <__sfp_lock_release+0x8>)
 800af8a:	f000 baa5 	b.w	800b4d8 <__retarget_lock_release_recursive>
 800af8e:	bf00      	nop
 800af90:	2000103d 	.word	0x2000103d

0800af94 <__sinit>:
 800af94:	b510      	push	{r4, lr}
 800af96:	4604      	mov	r4, r0
 800af98:	f7ff fff0 	bl	800af7c <__sfp_lock_acquire>
 800af9c:	6a23      	ldr	r3, [r4, #32]
 800af9e:	b11b      	cbz	r3, 800afa8 <__sinit+0x14>
 800afa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa4:	f7ff bff0 	b.w	800af88 <__sfp_lock_release>
 800afa8:	4b04      	ldr	r3, [pc, #16]	@ (800afbc <__sinit+0x28>)
 800afaa:	6223      	str	r3, [r4, #32]
 800afac:	4b04      	ldr	r3, [pc, #16]	@ (800afc0 <__sinit+0x2c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1f5      	bne.n	800afa0 <__sinit+0xc>
 800afb4:	f7ff ffc4 	bl	800af40 <global_stdio_init.part.0>
 800afb8:	e7f2      	b.n	800afa0 <__sinit+0xc>
 800afba:	bf00      	nop
 800afbc:	0800af01 	.word	0x0800af01
 800afc0:	20001034 	.word	0x20001034

0800afc4 <_fwalk_sglue>:
 800afc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc8:	4607      	mov	r7, r0
 800afca:	4688      	mov	r8, r1
 800afcc:	4614      	mov	r4, r2
 800afce:	2600      	movs	r6, #0
 800afd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afd4:	f1b9 0901 	subs.w	r9, r9, #1
 800afd8:	d505      	bpl.n	800afe6 <_fwalk_sglue+0x22>
 800afda:	6824      	ldr	r4, [r4, #0]
 800afdc:	2c00      	cmp	r4, #0
 800afde:	d1f7      	bne.n	800afd0 <_fwalk_sglue+0xc>
 800afe0:	4630      	mov	r0, r6
 800afe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe6:	89ab      	ldrh	r3, [r5, #12]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d907      	bls.n	800affc <_fwalk_sglue+0x38>
 800afec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aff0:	3301      	adds	r3, #1
 800aff2:	d003      	beq.n	800affc <_fwalk_sglue+0x38>
 800aff4:	4629      	mov	r1, r5
 800aff6:	4638      	mov	r0, r7
 800aff8:	47c0      	blx	r8
 800affa:	4306      	orrs	r6, r0
 800affc:	3568      	adds	r5, #104	@ 0x68
 800affe:	e7e9      	b.n	800afd4 <_fwalk_sglue+0x10>

0800b000 <iprintf>:
 800b000:	b40f      	push	{r0, r1, r2, r3}
 800b002:	b507      	push	{r0, r1, r2, lr}
 800b004:	4906      	ldr	r1, [pc, #24]	@ (800b020 <iprintf+0x20>)
 800b006:	ab04      	add	r3, sp, #16
 800b008:	6808      	ldr	r0, [r1, #0]
 800b00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b00e:	6881      	ldr	r1, [r0, #8]
 800b010:	9301      	str	r3, [sp, #4]
 800b012:	f002 fb29 	bl	800d668 <_vfiprintf_r>
 800b016:	b003      	add	sp, #12
 800b018:	f85d eb04 	ldr.w	lr, [sp], #4
 800b01c:	b004      	add	sp, #16
 800b01e:	4770      	bx	lr
 800b020:	200001e8 	.word	0x200001e8

0800b024 <_puts_r>:
 800b024:	6a03      	ldr	r3, [r0, #32]
 800b026:	b570      	push	{r4, r5, r6, lr}
 800b028:	4605      	mov	r5, r0
 800b02a:	460e      	mov	r6, r1
 800b02c:	6884      	ldr	r4, [r0, #8]
 800b02e:	b90b      	cbnz	r3, 800b034 <_puts_r+0x10>
 800b030:	f7ff ffb0 	bl	800af94 <__sinit>
 800b034:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b036:	07db      	lsls	r3, r3, #31
 800b038:	d405      	bmi.n	800b046 <_puts_r+0x22>
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	0598      	lsls	r0, r3, #22
 800b03e:	d402      	bmi.n	800b046 <_puts_r+0x22>
 800b040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b042:	f000 fa48 	bl	800b4d6 <__retarget_lock_acquire_recursive>
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	0719      	lsls	r1, r3, #28
 800b04a:	d502      	bpl.n	800b052 <_puts_r+0x2e>
 800b04c:	6923      	ldr	r3, [r4, #16]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d135      	bne.n	800b0be <_puts_r+0x9a>
 800b052:	4621      	mov	r1, r4
 800b054:	4628      	mov	r0, r5
 800b056:	f000 f91d 	bl	800b294 <__swsetup_r>
 800b05a:	b380      	cbz	r0, 800b0be <_puts_r+0x9a>
 800b05c:	f04f 35ff 	mov.w	r5, #4294967295
 800b060:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b062:	07da      	lsls	r2, r3, #31
 800b064:	d405      	bmi.n	800b072 <_puts_r+0x4e>
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	059b      	lsls	r3, r3, #22
 800b06a:	d402      	bmi.n	800b072 <_puts_r+0x4e>
 800b06c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b06e:	f000 fa33 	bl	800b4d8 <__retarget_lock_release_recursive>
 800b072:	4628      	mov	r0, r5
 800b074:	bd70      	pop	{r4, r5, r6, pc}
 800b076:	2b00      	cmp	r3, #0
 800b078:	da04      	bge.n	800b084 <_puts_r+0x60>
 800b07a:	69a2      	ldr	r2, [r4, #24]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	dc17      	bgt.n	800b0b0 <_puts_r+0x8c>
 800b080:	290a      	cmp	r1, #10
 800b082:	d015      	beq.n	800b0b0 <_puts_r+0x8c>
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	6022      	str	r2, [r4, #0]
 800b08a:	7019      	strb	r1, [r3, #0]
 800b08c:	68a3      	ldr	r3, [r4, #8]
 800b08e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b092:	3b01      	subs	r3, #1
 800b094:	60a3      	str	r3, [r4, #8]
 800b096:	2900      	cmp	r1, #0
 800b098:	d1ed      	bne.n	800b076 <_puts_r+0x52>
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	da11      	bge.n	800b0c2 <_puts_r+0x9e>
 800b09e:	4622      	mov	r2, r4
 800b0a0:	210a      	movs	r1, #10
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f000 f8b7 	bl	800b216 <__swbuf_r>
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	d0d7      	beq.n	800b05c <_puts_r+0x38>
 800b0ac:	250a      	movs	r5, #10
 800b0ae:	e7d7      	b.n	800b060 <_puts_r+0x3c>
 800b0b0:	4622      	mov	r2, r4
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f000 f8af 	bl	800b216 <__swbuf_r>
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	d1e7      	bne.n	800b08c <_puts_r+0x68>
 800b0bc:	e7ce      	b.n	800b05c <_puts_r+0x38>
 800b0be:	3e01      	subs	r6, #1
 800b0c0:	e7e4      	b.n	800b08c <_puts_r+0x68>
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	1c5a      	adds	r2, r3, #1
 800b0c6:	6022      	str	r2, [r4, #0]
 800b0c8:	220a      	movs	r2, #10
 800b0ca:	701a      	strb	r2, [r3, #0]
 800b0cc:	e7ee      	b.n	800b0ac <_puts_r+0x88>
	...

0800b0d0 <puts>:
 800b0d0:	4b02      	ldr	r3, [pc, #8]	@ (800b0dc <puts+0xc>)
 800b0d2:	4601      	mov	r1, r0
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	f7ff bfa5 	b.w	800b024 <_puts_r>
 800b0da:	bf00      	nop
 800b0dc:	200001e8 	.word	0x200001e8

0800b0e0 <sniprintf>:
 800b0e0:	b40c      	push	{r2, r3}
 800b0e2:	b530      	push	{r4, r5, lr}
 800b0e4:	4b18      	ldr	r3, [pc, #96]	@ (800b148 <sniprintf+0x68>)
 800b0e6:	1e0c      	subs	r4, r1, #0
 800b0e8:	681d      	ldr	r5, [r3, #0]
 800b0ea:	b09d      	sub	sp, #116	@ 0x74
 800b0ec:	da08      	bge.n	800b100 <sniprintf+0x20>
 800b0ee:	238b      	movs	r3, #139	@ 0x8b
 800b0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f4:	602b      	str	r3, [r5, #0]
 800b0f6:	b01d      	add	sp, #116	@ 0x74
 800b0f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0fc:	b002      	add	sp, #8
 800b0fe:	4770      	bx	lr
 800b100:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b104:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b108:	f04f 0300 	mov.w	r3, #0
 800b10c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b10e:	bf0c      	ite	eq
 800b110:	4623      	moveq	r3, r4
 800b112:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b116:	9304      	str	r3, [sp, #16]
 800b118:	9307      	str	r3, [sp, #28]
 800b11a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b11e:	9002      	str	r0, [sp, #8]
 800b120:	9006      	str	r0, [sp, #24]
 800b122:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b126:	4628      	mov	r0, r5
 800b128:	ab21      	add	r3, sp, #132	@ 0x84
 800b12a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b12c:	a902      	add	r1, sp, #8
 800b12e:	9301      	str	r3, [sp, #4]
 800b130:	f002 f976 	bl	800d420 <_svfiprintf_r>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	bfbc      	itt	lt
 800b138:	238b      	movlt	r3, #139	@ 0x8b
 800b13a:	602b      	strlt	r3, [r5, #0]
 800b13c:	2c00      	cmp	r4, #0
 800b13e:	d0da      	beq.n	800b0f6 <sniprintf+0x16>
 800b140:	2200      	movs	r2, #0
 800b142:	9b02      	ldr	r3, [sp, #8]
 800b144:	701a      	strb	r2, [r3, #0]
 800b146:	e7d6      	b.n	800b0f6 <sniprintf+0x16>
 800b148:	200001e8 	.word	0x200001e8

0800b14c <siprintf>:
 800b14c:	b40e      	push	{r1, r2, r3}
 800b14e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b152:	b510      	push	{r4, lr}
 800b154:	2400      	movs	r4, #0
 800b156:	b09d      	sub	sp, #116	@ 0x74
 800b158:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b15a:	9002      	str	r0, [sp, #8]
 800b15c:	9006      	str	r0, [sp, #24]
 800b15e:	9107      	str	r1, [sp, #28]
 800b160:	9104      	str	r1, [sp, #16]
 800b162:	4809      	ldr	r0, [pc, #36]	@ (800b188 <siprintf+0x3c>)
 800b164:	4909      	ldr	r1, [pc, #36]	@ (800b18c <siprintf+0x40>)
 800b166:	f853 2b04 	ldr.w	r2, [r3], #4
 800b16a:	9105      	str	r1, [sp, #20]
 800b16c:	6800      	ldr	r0, [r0, #0]
 800b16e:	a902      	add	r1, sp, #8
 800b170:	9301      	str	r3, [sp, #4]
 800b172:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b174:	f002 f954 	bl	800d420 <_svfiprintf_r>
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	701c      	strb	r4, [r3, #0]
 800b17c:	b01d      	add	sp, #116	@ 0x74
 800b17e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b182:	b003      	add	sp, #12
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	200001e8 	.word	0x200001e8
 800b18c:	ffff0208 	.word	0xffff0208

0800b190 <__sread>:
 800b190:	b510      	push	{r4, lr}
 800b192:	460c      	mov	r4, r1
 800b194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b198:	f000 f93e 	bl	800b418 <_read_r>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	bfab      	itete	ge
 800b1a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b1a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b1a4:	181b      	addge	r3, r3, r0
 800b1a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b1aa:	bfac      	ite	ge
 800b1ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b1ae:	81a3      	strhlt	r3, [r4, #12]
 800b1b0:	bd10      	pop	{r4, pc}

0800b1b2 <__swrite>:
 800b1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1b6:	461f      	mov	r7, r3
 800b1b8:	898b      	ldrh	r3, [r1, #12]
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	05db      	lsls	r3, r3, #23
 800b1be:	460c      	mov	r4, r1
 800b1c0:	4616      	mov	r6, r2
 800b1c2:	d505      	bpl.n	800b1d0 <__swrite+0x1e>
 800b1c4:	2302      	movs	r3, #2
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1cc:	f000 f912 	bl	800b3f4 <_lseek_r>
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	4632      	mov	r2, r6
 800b1d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1d8:	81a3      	strh	r3, [r4, #12]
 800b1da:	4628      	mov	r0, r5
 800b1dc:	463b      	mov	r3, r7
 800b1de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e6:	f000 b939 	b.w	800b45c <_write_r>

0800b1ea <__sseek>:
 800b1ea:	b510      	push	{r4, lr}
 800b1ec:	460c      	mov	r4, r1
 800b1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f2:	f000 f8ff 	bl	800b3f4 <_lseek_r>
 800b1f6:	1c43      	adds	r3, r0, #1
 800b1f8:	89a3      	ldrh	r3, [r4, #12]
 800b1fa:	bf15      	itete	ne
 800b1fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b202:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b206:	81a3      	strheq	r3, [r4, #12]
 800b208:	bf18      	it	ne
 800b20a:	81a3      	strhne	r3, [r4, #12]
 800b20c:	bd10      	pop	{r4, pc}

0800b20e <__sclose>:
 800b20e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b212:	f000 b8df 	b.w	800b3d4 <_close_r>

0800b216 <__swbuf_r>:
 800b216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b218:	460e      	mov	r6, r1
 800b21a:	4614      	mov	r4, r2
 800b21c:	4605      	mov	r5, r0
 800b21e:	b118      	cbz	r0, 800b228 <__swbuf_r+0x12>
 800b220:	6a03      	ldr	r3, [r0, #32]
 800b222:	b90b      	cbnz	r3, 800b228 <__swbuf_r+0x12>
 800b224:	f7ff feb6 	bl	800af94 <__sinit>
 800b228:	69a3      	ldr	r3, [r4, #24]
 800b22a:	60a3      	str	r3, [r4, #8]
 800b22c:	89a3      	ldrh	r3, [r4, #12]
 800b22e:	071a      	lsls	r2, r3, #28
 800b230:	d501      	bpl.n	800b236 <__swbuf_r+0x20>
 800b232:	6923      	ldr	r3, [r4, #16]
 800b234:	b943      	cbnz	r3, 800b248 <__swbuf_r+0x32>
 800b236:	4621      	mov	r1, r4
 800b238:	4628      	mov	r0, r5
 800b23a:	f000 f82b 	bl	800b294 <__swsetup_r>
 800b23e:	b118      	cbz	r0, 800b248 <__swbuf_r+0x32>
 800b240:	f04f 37ff 	mov.w	r7, #4294967295
 800b244:	4638      	mov	r0, r7
 800b246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	6922      	ldr	r2, [r4, #16]
 800b24c:	b2f6      	uxtb	r6, r6
 800b24e:	1a98      	subs	r0, r3, r2
 800b250:	6963      	ldr	r3, [r4, #20]
 800b252:	4637      	mov	r7, r6
 800b254:	4283      	cmp	r3, r0
 800b256:	dc05      	bgt.n	800b264 <__swbuf_r+0x4e>
 800b258:	4621      	mov	r1, r4
 800b25a:	4628      	mov	r0, r5
 800b25c:	f002 fb9c 	bl	800d998 <_fflush_r>
 800b260:	2800      	cmp	r0, #0
 800b262:	d1ed      	bne.n	800b240 <__swbuf_r+0x2a>
 800b264:	68a3      	ldr	r3, [r4, #8]
 800b266:	3b01      	subs	r3, #1
 800b268:	60a3      	str	r3, [r4, #8]
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	1c5a      	adds	r2, r3, #1
 800b26e:	6022      	str	r2, [r4, #0]
 800b270:	701e      	strb	r6, [r3, #0]
 800b272:	6962      	ldr	r2, [r4, #20]
 800b274:	1c43      	adds	r3, r0, #1
 800b276:	429a      	cmp	r2, r3
 800b278:	d004      	beq.n	800b284 <__swbuf_r+0x6e>
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	07db      	lsls	r3, r3, #31
 800b27e:	d5e1      	bpl.n	800b244 <__swbuf_r+0x2e>
 800b280:	2e0a      	cmp	r6, #10
 800b282:	d1df      	bne.n	800b244 <__swbuf_r+0x2e>
 800b284:	4621      	mov	r1, r4
 800b286:	4628      	mov	r0, r5
 800b288:	f002 fb86 	bl	800d998 <_fflush_r>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d0d9      	beq.n	800b244 <__swbuf_r+0x2e>
 800b290:	e7d6      	b.n	800b240 <__swbuf_r+0x2a>
	...

0800b294 <__swsetup_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4b29      	ldr	r3, [pc, #164]	@ (800b33c <__swsetup_r+0xa8>)
 800b298:	4605      	mov	r5, r0
 800b29a:	6818      	ldr	r0, [r3, #0]
 800b29c:	460c      	mov	r4, r1
 800b29e:	b118      	cbz	r0, 800b2a8 <__swsetup_r+0x14>
 800b2a0:	6a03      	ldr	r3, [r0, #32]
 800b2a2:	b90b      	cbnz	r3, 800b2a8 <__swsetup_r+0x14>
 800b2a4:	f7ff fe76 	bl	800af94 <__sinit>
 800b2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ac:	0719      	lsls	r1, r3, #28
 800b2ae:	d422      	bmi.n	800b2f6 <__swsetup_r+0x62>
 800b2b0:	06da      	lsls	r2, r3, #27
 800b2b2:	d407      	bmi.n	800b2c4 <__swsetup_r+0x30>
 800b2b4:	2209      	movs	r2, #9
 800b2b6:	602a      	str	r2, [r5, #0]
 800b2b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c0:	81a3      	strh	r3, [r4, #12]
 800b2c2:	e033      	b.n	800b32c <__swsetup_r+0x98>
 800b2c4:	0758      	lsls	r0, r3, #29
 800b2c6:	d512      	bpl.n	800b2ee <__swsetup_r+0x5a>
 800b2c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2ca:	b141      	cbz	r1, 800b2de <__swsetup_r+0x4a>
 800b2cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2d0:	4299      	cmp	r1, r3
 800b2d2:	d002      	beq.n	800b2da <__swsetup_r+0x46>
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	f000 ff8b 	bl	800c1f0 <_free_r>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2de:	89a3      	ldrh	r3, [r4, #12]
 800b2e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b2e4:	81a3      	strh	r3, [r4, #12]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	6063      	str	r3, [r4, #4]
 800b2ea:	6923      	ldr	r3, [r4, #16]
 800b2ec:	6023      	str	r3, [r4, #0]
 800b2ee:	89a3      	ldrh	r3, [r4, #12]
 800b2f0:	f043 0308 	orr.w	r3, r3, #8
 800b2f4:	81a3      	strh	r3, [r4, #12]
 800b2f6:	6923      	ldr	r3, [r4, #16]
 800b2f8:	b94b      	cbnz	r3, 800b30e <__swsetup_r+0x7a>
 800b2fa:	89a3      	ldrh	r3, [r4, #12]
 800b2fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b304:	d003      	beq.n	800b30e <__swsetup_r+0x7a>
 800b306:	4621      	mov	r1, r4
 800b308:	4628      	mov	r0, r5
 800b30a:	f002 fb92 	bl	800da32 <__smakebuf_r>
 800b30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b312:	f013 0201 	ands.w	r2, r3, #1
 800b316:	d00a      	beq.n	800b32e <__swsetup_r+0x9a>
 800b318:	2200      	movs	r2, #0
 800b31a:	60a2      	str	r2, [r4, #8]
 800b31c:	6962      	ldr	r2, [r4, #20]
 800b31e:	4252      	negs	r2, r2
 800b320:	61a2      	str	r2, [r4, #24]
 800b322:	6922      	ldr	r2, [r4, #16]
 800b324:	b942      	cbnz	r2, 800b338 <__swsetup_r+0xa4>
 800b326:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b32a:	d1c5      	bne.n	800b2b8 <__swsetup_r+0x24>
 800b32c:	bd38      	pop	{r3, r4, r5, pc}
 800b32e:	0799      	lsls	r1, r3, #30
 800b330:	bf58      	it	pl
 800b332:	6962      	ldrpl	r2, [r4, #20]
 800b334:	60a2      	str	r2, [r4, #8]
 800b336:	e7f4      	b.n	800b322 <__swsetup_r+0x8e>
 800b338:	2000      	movs	r0, #0
 800b33a:	e7f7      	b.n	800b32c <__swsetup_r+0x98>
 800b33c:	200001e8 	.word	0x200001e8

0800b340 <memset>:
 800b340:	4603      	mov	r3, r0
 800b342:	4402      	add	r2, r0
 800b344:	4293      	cmp	r3, r2
 800b346:	d100      	bne.n	800b34a <memset+0xa>
 800b348:	4770      	bx	lr
 800b34a:	f803 1b01 	strb.w	r1, [r3], #1
 800b34e:	e7f9      	b.n	800b344 <memset+0x4>

0800b350 <strcat>:
 800b350:	4602      	mov	r2, r0
 800b352:	b510      	push	{r4, lr}
 800b354:	7814      	ldrb	r4, [r2, #0]
 800b356:	4613      	mov	r3, r2
 800b358:	3201      	adds	r2, #1
 800b35a:	2c00      	cmp	r4, #0
 800b35c:	d1fa      	bne.n	800b354 <strcat+0x4>
 800b35e:	3b01      	subs	r3, #1
 800b360:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b364:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b368:	2a00      	cmp	r2, #0
 800b36a:	d1f9      	bne.n	800b360 <strcat+0x10>
 800b36c:	bd10      	pop	{r4, pc}
	...

0800b370 <strdup>:
 800b370:	4b02      	ldr	r3, [pc, #8]	@ (800b37c <strdup+0xc>)
 800b372:	4601      	mov	r1, r0
 800b374:	6818      	ldr	r0, [r3, #0]
 800b376:	f000 b803 	b.w	800b380 <_strdup_r>
 800b37a:	bf00      	nop
 800b37c:	200001e8 	.word	0x200001e8

0800b380 <_strdup_r>:
 800b380:	b570      	push	{r4, r5, r6, lr}
 800b382:	4604      	mov	r4, r0
 800b384:	4608      	mov	r0, r1
 800b386:	460d      	mov	r5, r1
 800b388:	f7f4 feec 	bl	8000164 <strlen>
 800b38c:	1c46      	adds	r6, r0, #1
 800b38e:	4631      	mov	r1, r6
 800b390:	4620      	mov	r0, r4
 800b392:	f7fe f877 	bl	8009484 <_malloc_r>
 800b396:	4604      	mov	r4, r0
 800b398:	b118      	cbz	r0, 800b3a2 <_strdup_r+0x22>
 800b39a:	4632      	mov	r2, r6
 800b39c:	4629      	mov	r1, r5
 800b39e:	f000 f8b2 	bl	800b506 <memcpy>
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	bd70      	pop	{r4, r5, r6, pc}

0800b3a6 <strncmp>:
 800b3a6:	b510      	push	{r4, lr}
 800b3a8:	b16a      	cbz	r2, 800b3c6 <strncmp+0x20>
 800b3aa:	3901      	subs	r1, #1
 800b3ac:	1884      	adds	r4, r0, r2
 800b3ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d103      	bne.n	800b3c2 <strncmp+0x1c>
 800b3ba:	42a0      	cmp	r0, r4
 800b3bc:	d001      	beq.n	800b3c2 <strncmp+0x1c>
 800b3be:	2a00      	cmp	r2, #0
 800b3c0:	d1f5      	bne.n	800b3ae <strncmp+0x8>
 800b3c2:	1ad0      	subs	r0, r2, r3
 800b3c4:	bd10      	pop	{r4, pc}
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	e7fc      	b.n	800b3c4 <strncmp+0x1e>
	...

0800b3cc <_localeconv_r>:
 800b3cc:	4800      	ldr	r0, [pc, #0]	@ (800b3d0 <_localeconv_r+0x4>)
 800b3ce:	4770      	bx	lr
 800b3d0:	2000016c 	.word	0x2000016c

0800b3d4 <_close_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	4d05      	ldr	r5, [pc, #20]	@ (800b3f0 <_close_r+0x1c>)
 800b3da:	4604      	mov	r4, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	602b      	str	r3, [r5, #0]
 800b3e0:	f7f6 f90b 	bl	80015fa <_close>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d102      	bne.n	800b3ee <_close_r+0x1a>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	b103      	cbz	r3, 800b3ee <_close_r+0x1a>
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
 800b3f0:	20001038 	.word	0x20001038

0800b3f4 <_lseek_r>:
 800b3f4:	b538      	push	{r3, r4, r5, lr}
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	4608      	mov	r0, r1
 800b3fa:	4611      	mov	r1, r2
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	4d05      	ldr	r5, [pc, #20]	@ (800b414 <_lseek_r+0x20>)
 800b400:	602a      	str	r2, [r5, #0]
 800b402:	461a      	mov	r2, r3
 800b404:	f7f6 f91d 	bl	8001642 <_lseek>
 800b408:	1c43      	adds	r3, r0, #1
 800b40a:	d102      	bne.n	800b412 <_lseek_r+0x1e>
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	b103      	cbz	r3, 800b412 <_lseek_r+0x1e>
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	bd38      	pop	{r3, r4, r5, pc}
 800b414:	20001038 	.word	0x20001038

0800b418 <_read_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4604      	mov	r4, r0
 800b41c:	4608      	mov	r0, r1
 800b41e:	4611      	mov	r1, r2
 800b420:	2200      	movs	r2, #0
 800b422:	4d05      	ldr	r5, [pc, #20]	@ (800b438 <_read_r+0x20>)
 800b424:	602a      	str	r2, [r5, #0]
 800b426:	461a      	mov	r2, r3
 800b428:	f7f6 f8ca 	bl	80015c0 <_read>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d102      	bne.n	800b436 <_read_r+0x1e>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	b103      	cbz	r3, 800b436 <_read_r+0x1e>
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	20001038 	.word	0x20001038

0800b43c <_sbrk_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	2300      	movs	r3, #0
 800b440:	4d05      	ldr	r5, [pc, #20]	@ (800b458 <_sbrk_r+0x1c>)
 800b442:	4604      	mov	r4, r0
 800b444:	4608      	mov	r0, r1
 800b446:	602b      	str	r3, [r5, #0]
 800b448:	f7f6 f908 	bl	800165c <_sbrk>
 800b44c:	1c43      	adds	r3, r0, #1
 800b44e:	d102      	bne.n	800b456 <_sbrk_r+0x1a>
 800b450:	682b      	ldr	r3, [r5, #0]
 800b452:	b103      	cbz	r3, 800b456 <_sbrk_r+0x1a>
 800b454:	6023      	str	r3, [r4, #0]
 800b456:	bd38      	pop	{r3, r4, r5, pc}
 800b458:	20001038 	.word	0x20001038

0800b45c <_write_r>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	4604      	mov	r4, r0
 800b460:	4608      	mov	r0, r1
 800b462:	4611      	mov	r1, r2
 800b464:	2200      	movs	r2, #0
 800b466:	4d05      	ldr	r5, [pc, #20]	@ (800b47c <_write_r+0x20>)
 800b468:	602a      	str	r2, [r5, #0]
 800b46a:	461a      	mov	r2, r3
 800b46c:	f7f5 feae 	bl	80011cc <_write>
 800b470:	1c43      	adds	r3, r0, #1
 800b472:	d102      	bne.n	800b47a <_write_r+0x1e>
 800b474:	682b      	ldr	r3, [r5, #0]
 800b476:	b103      	cbz	r3, 800b47a <_write_r+0x1e>
 800b478:	6023      	str	r3, [r4, #0]
 800b47a:	bd38      	pop	{r3, r4, r5, pc}
 800b47c:	20001038 	.word	0x20001038

0800b480 <__errno>:
 800b480:	4b01      	ldr	r3, [pc, #4]	@ (800b488 <__errno+0x8>)
 800b482:	6818      	ldr	r0, [r3, #0]
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	200001e8 	.word	0x200001e8

0800b48c <__libc_init_array>:
 800b48c:	b570      	push	{r4, r5, r6, lr}
 800b48e:	2600      	movs	r6, #0
 800b490:	4d0c      	ldr	r5, [pc, #48]	@ (800b4c4 <__libc_init_array+0x38>)
 800b492:	4c0d      	ldr	r4, [pc, #52]	@ (800b4c8 <__libc_init_array+0x3c>)
 800b494:	1b64      	subs	r4, r4, r5
 800b496:	10a4      	asrs	r4, r4, #2
 800b498:	42a6      	cmp	r6, r4
 800b49a:	d109      	bne.n	800b4b0 <__libc_init_array+0x24>
 800b49c:	f002 fc08 	bl	800dcb0 <_init>
 800b4a0:	2600      	movs	r6, #0
 800b4a2:	4d0a      	ldr	r5, [pc, #40]	@ (800b4cc <__libc_init_array+0x40>)
 800b4a4:	4c0a      	ldr	r4, [pc, #40]	@ (800b4d0 <__libc_init_array+0x44>)
 800b4a6:	1b64      	subs	r4, r4, r5
 800b4a8:	10a4      	asrs	r4, r4, #2
 800b4aa:	42a6      	cmp	r6, r4
 800b4ac:	d105      	bne.n	800b4ba <__libc_init_array+0x2e>
 800b4ae:	bd70      	pop	{r4, r5, r6, pc}
 800b4b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4b4:	4798      	blx	r3
 800b4b6:	3601      	adds	r6, #1
 800b4b8:	e7ee      	b.n	800b498 <__libc_init_array+0xc>
 800b4ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4be:	4798      	blx	r3
 800b4c0:	3601      	adds	r6, #1
 800b4c2:	e7f2      	b.n	800b4aa <__libc_init_array+0x1e>
 800b4c4:	0800e67c 	.word	0x0800e67c
 800b4c8:	0800e67c 	.word	0x0800e67c
 800b4cc:	0800e67c 	.word	0x0800e67c
 800b4d0:	0800e680 	.word	0x0800e680

0800b4d4 <__retarget_lock_init_recursive>:
 800b4d4:	4770      	bx	lr

0800b4d6 <__retarget_lock_acquire_recursive>:
 800b4d6:	4770      	bx	lr

0800b4d8 <__retarget_lock_release_recursive>:
 800b4d8:	4770      	bx	lr

0800b4da <strcpy>:
 800b4da:	4603      	mov	r3, r0
 800b4dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4e0:	f803 2b01 	strb.w	r2, [r3], #1
 800b4e4:	2a00      	cmp	r2, #0
 800b4e6:	d1f9      	bne.n	800b4dc <strcpy+0x2>
 800b4e8:	4770      	bx	lr

0800b4ea <memchr>:
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	b510      	push	{r4, lr}
 800b4ee:	b2c9      	uxtb	r1, r1
 800b4f0:	4402      	add	r2, r0
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	d101      	bne.n	800b4fc <memchr+0x12>
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	e003      	b.n	800b504 <memchr+0x1a>
 800b4fc:	7804      	ldrb	r4, [r0, #0]
 800b4fe:	3301      	adds	r3, #1
 800b500:	428c      	cmp	r4, r1
 800b502:	d1f6      	bne.n	800b4f2 <memchr+0x8>
 800b504:	bd10      	pop	{r4, pc}

0800b506 <memcpy>:
 800b506:	440a      	add	r2, r1
 800b508:	4291      	cmp	r1, r2
 800b50a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b50e:	d100      	bne.n	800b512 <memcpy+0xc>
 800b510:	4770      	bx	lr
 800b512:	b510      	push	{r4, lr}
 800b514:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b518:	4291      	cmp	r1, r2
 800b51a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b51e:	d1f9      	bne.n	800b514 <memcpy+0xe>
 800b520:	bd10      	pop	{r4, pc}
	...

0800b524 <nan>:
 800b524:	2000      	movs	r0, #0
 800b526:	4901      	ldr	r1, [pc, #4]	@ (800b52c <nan+0x8>)
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	7ff80000 	.word	0x7ff80000

0800b530 <nanf>:
 800b530:	4800      	ldr	r0, [pc, #0]	@ (800b534 <nanf+0x4>)
 800b532:	4770      	bx	lr
 800b534:	7fc00000 	.word	0x7fc00000

0800b538 <quorem>:
 800b538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	6903      	ldr	r3, [r0, #16]
 800b53e:	690c      	ldr	r4, [r1, #16]
 800b540:	4607      	mov	r7, r0
 800b542:	42a3      	cmp	r3, r4
 800b544:	db7e      	blt.n	800b644 <quorem+0x10c>
 800b546:	3c01      	subs	r4, #1
 800b548:	00a3      	lsls	r3, r4, #2
 800b54a:	f100 0514 	add.w	r5, r0, #20
 800b54e:	f101 0814 	add.w	r8, r1, #20
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b558:	9301      	str	r3, [sp, #4]
 800b55a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b55e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b562:	3301      	adds	r3, #1
 800b564:	429a      	cmp	r2, r3
 800b566:	fbb2 f6f3 	udiv	r6, r2, r3
 800b56a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b56e:	d32e      	bcc.n	800b5ce <quorem+0x96>
 800b570:	f04f 0a00 	mov.w	sl, #0
 800b574:	46c4      	mov	ip, r8
 800b576:	46ae      	mov	lr, r5
 800b578:	46d3      	mov	fp, sl
 800b57a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b57e:	b298      	uxth	r0, r3
 800b580:	fb06 a000 	mla	r0, r6, r0, sl
 800b584:	0c1b      	lsrs	r3, r3, #16
 800b586:	0c02      	lsrs	r2, r0, #16
 800b588:	fb06 2303 	mla	r3, r6, r3, r2
 800b58c:	f8de 2000 	ldr.w	r2, [lr]
 800b590:	b280      	uxth	r0, r0
 800b592:	b292      	uxth	r2, r2
 800b594:	1a12      	subs	r2, r2, r0
 800b596:	445a      	add	r2, fp
 800b598:	f8de 0000 	ldr.w	r0, [lr]
 800b59c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b5a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b5aa:	b292      	uxth	r2, r2
 800b5ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b5b0:	45e1      	cmp	r9, ip
 800b5b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b5b6:	f84e 2b04 	str.w	r2, [lr], #4
 800b5ba:	d2de      	bcs.n	800b57a <quorem+0x42>
 800b5bc:	9b00      	ldr	r3, [sp, #0]
 800b5be:	58eb      	ldr	r3, [r5, r3]
 800b5c0:	b92b      	cbnz	r3, 800b5ce <quorem+0x96>
 800b5c2:	9b01      	ldr	r3, [sp, #4]
 800b5c4:	3b04      	subs	r3, #4
 800b5c6:	429d      	cmp	r5, r3
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	d32f      	bcc.n	800b62c <quorem+0xf4>
 800b5cc:	613c      	str	r4, [r7, #16]
 800b5ce:	4638      	mov	r0, r7
 800b5d0:	f001 fc5e 	bl	800ce90 <__mcmp>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	db25      	blt.n	800b624 <quorem+0xec>
 800b5d8:	4629      	mov	r1, r5
 800b5da:	2000      	movs	r0, #0
 800b5dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800b5e0:	f8d1 c000 	ldr.w	ip, [r1]
 800b5e4:	fa1f fe82 	uxth.w	lr, r2
 800b5e8:	fa1f f38c 	uxth.w	r3, ip
 800b5ec:	eba3 030e 	sub.w	r3, r3, lr
 800b5f0:	4403      	add	r3, r0
 800b5f2:	0c12      	lsrs	r2, r2, #16
 800b5f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b5f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b602:	45c1      	cmp	r9, r8
 800b604:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b608:	f841 3b04 	str.w	r3, [r1], #4
 800b60c:	d2e6      	bcs.n	800b5dc <quorem+0xa4>
 800b60e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b612:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b616:	b922      	cbnz	r2, 800b622 <quorem+0xea>
 800b618:	3b04      	subs	r3, #4
 800b61a:	429d      	cmp	r5, r3
 800b61c:	461a      	mov	r2, r3
 800b61e:	d30b      	bcc.n	800b638 <quorem+0x100>
 800b620:	613c      	str	r4, [r7, #16]
 800b622:	3601      	adds	r6, #1
 800b624:	4630      	mov	r0, r6
 800b626:	b003      	add	sp, #12
 800b628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62c:	6812      	ldr	r2, [r2, #0]
 800b62e:	3b04      	subs	r3, #4
 800b630:	2a00      	cmp	r2, #0
 800b632:	d1cb      	bne.n	800b5cc <quorem+0x94>
 800b634:	3c01      	subs	r4, #1
 800b636:	e7c6      	b.n	800b5c6 <quorem+0x8e>
 800b638:	6812      	ldr	r2, [r2, #0]
 800b63a:	3b04      	subs	r3, #4
 800b63c:	2a00      	cmp	r2, #0
 800b63e:	d1ef      	bne.n	800b620 <quorem+0xe8>
 800b640:	3c01      	subs	r4, #1
 800b642:	e7ea      	b.n	800b61a <quorem+0xe2>
 800b644:	2000      	movs	r0, #0
 800b646:	e7ee      	b.n	800b626 <quorem+0xee>

0800b648 <_dtoa_r>:
 800b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	4614      	mov	r4, r2
 800b64e:	461d      	mov	r5, r3
 800b650:	69c7      	ldr	r7, [r0, #28]
 800b652:	b097      	sub	sp, #92	@ 0x5c
 800b654:	4681      	mov	r9, r0
 800b656:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b65a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b65c:	b97f      	cbnz	r7, 800b67e <_dtoa_r+0x36>
 800b65e:	2010      	movs	r0, #16
 800b660:	f7fd fede 	bl	8009420 <malloc>
 800b664:	4602      	mov	r2, r0
 800b666:	f8c9 001c 	str.w	r0, [r9, #28]
 800b66a:	b920      	cbnz	r0, 800b676 <_dtoa_r+0x2e>
 800b66c:	21ef      	movs	r1, #239	@ 0xef
 800b66e:	4bac      	ldr	r3, [pc, #688]	@ (800b920 <_dtoa_r+0x2d8>)
 800b670:	48ac      	ldr	r0, [pc, #688]	@ (800b924 <_dtoa_r+0x2dc>)
 800b672:	f002 fa57 	bl	800db24 <__assert_func>
 800b676:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b67a:	6007      	str	r7, [r0, #0]
 800b67c:	60c7      	str	r7, [r0, #12]
 800b67e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b682:	6819      	ldr	r1, [r3, #0]
 800b684:	b159      	cbz	r1, 800b69e <_dtoa_r+0x56>
 800b686:	685a      	ldr	r2, [r3, #4]
 800b688:	2301      	movs	r3, #1
 800b68a:	4093      	lsls	r3, r2
 800b68c:	604a      	str	r2, [r1, #4]
 800b68e:	608b      	str	r3, [r1, #8]
 800b690:	4648      	mov	r0, r9
 800b692:	f001 f981 	bl	800c998 <_Bfree>
 800b696:	2200      	movs	r2, #0
 800b698:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	1e2b      	subs	r3, r5, #0
 800b6a0:	bfaf      	iteee	ge
 800b6a2:	2300      	movge	r3, #0
 800b6a4:	2201      	movlt	r2, #1
 800b6a6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b6aa:	9307      	strlt	r3, [sp, #28]
 800b6ac:	bfa8      	it	ge
 800b6ae:	6033      	strge	r3, [r6, #0]
 800b6b0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800b6b4:	4b9c      	ldr	r3, [pc, #624]	@ (800b928 <_dtoa_r+0x2e0>)
 800b6b6:	bfb8      	it	lt
 800b6b8:	6032      	strlt	r2, [r6, #0]
 800b6ba:	ea33 0308 	bics.w	r3, r3, r8
 800b6be:	d112      	bne.n	800b6e6 <_dtoa_r+0x9e>
 800b6c0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b6c4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b6cc:	4323      	orrs	r3, r4
 800b6ce:	f000 855e 	beq.w	800c18e <_dtoa_r+0xb46>
 800b6d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b6d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b92c <_dtoa_r+0x2e4>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f000 8560 	beq.w	800c19e <_dtoa_r+0xb56>
 800b6de:	f10a 0303 	add.w	r3, sl, #3
 800b6e2:	f000 bd5a 	b.w	800c19a <_dtoa_r+0xb52>
 800b6e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b6ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	f7f5 f961 	bl	80009bc <__aeabi_dcmpeq>
 800b6fa:	4607      	mov	r7, r0
 800b6fc:	b158      	cbz	r0, 800b716 <_dtoa_r+0xce>
 800b6fe:	2301      	movs	r3, #1
 800b700:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b702:	6013      	str	r3, [r2, #0]
 800b704:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b706:	b113      	cbz	r3, 800b70e <_dtoa_r+0xc6>
 800b708:	4b89      	ldr	r3, [pc, #548]	@ (800b930 <_dtoa_r+0x2e8>)
 800b70a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b70c:	6013      	str	r3, [r2, #0]
 800b70e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800b934 <_dtoa_r+0x2ec>
 800b712:	f000 bd44 	b.w	800c19e <_dtoa_r+0xb56>
 800b716:	ab14      	add	r3, sp, #80	@ 0x50
 800b718:	9301      	str	r3, [sp, #4]
 800b71a:	ab15      	add	r3, sp, #84	@ 0x54
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	4648      	mov	r0, r9
 800b720:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b724:	f001 fccc 	bl	800d0c0 <__d2b>
 800b728:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b72c:	9003      	str	r0, [sp, #12]
 800b72e:	2e00      	cmp	r6, #0
 800b730:	d078      	beq.n	800b824 <_dtoa_r+0x1dc>
 800b732:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b738:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b73c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b740:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b744:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b748:	9712      	str	r7, [sp, #72]	@ 0x48
 800b74a:	4619      	mov	r1, r3
 800b74c:	2200      	movs	r2, #0
 800b74e:	4b7a      	ldr	r3, [pc, #488]	@ (800b938 <_dtoa_r+0x2f0>)
 800b750:	f7f4 fd14 	bl	800017c <__aeabi_dsub>
 800b754:	a36c      	add	r3, pc, #432	@ (adr r3, 800b908 <_dtoa_r+0x2c0>)
 800b756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75a:	f7f4 fec7 	bl	80004ec <__aeabi_dmul>
 800b75e:	a36c      	add	r3, pc, #432	@ (adr r3, 800b910 <_dtoa_r+0x2c8>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f7f4 fd0c 	bl	8000180 <__adddf3>
 800b768:	4604      	mov	r4, r0
 800b76a:	4630      	mov	r0, r6
 800b76c:	460d      	mov	r5, r1
 800b76e:	f7f4 fe53 	bl	8000418 <__aeabi_i2d>
 800b772:	a369      	add	r3, pc, #420	@ (adr r3, 800b918 <_dtoa_r+0x2d0>)
 800b774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b778:	f7f4 feb8 	bl	80004ec <__aeabi_dmul>
 800b77c:	4602      	mov	r2, r0
 800b77e:	460b      	mov	r3, r1
 800b780:	4620      	mov	r0, r4
 800b782:	4629      	mov	r1, r5
 800b784:	f7f4 fcfc 	bl	8000180 <__adddf3>
 800b788:	4604      	mov	r4, r0
 800b78a:	460d      	mov	r5, r1
 800b78c:	f7f5 f95e 	bl	8000a4c <__aeabi_d2iz>
 800b790:	2200      	movs	r2, #0
 800b792:	4607      	mov	r7, r0
 800b794:	2300      	movs	r3, #0
 800b796:	4620      	mov	r0, r4
 800b798:	4629      	mov	r1, r5
 800b79a:	f7f5 f919 	bl	80009d0 <__aeabi_dcmplt>
 800b79e:	b140      	cbz	r0, 800b7b2 <_dtoa_r+0x16a>
 800b7a0:	4638      	mov	r0, r7
 800b7a2:	f7f4 fe39 	bl	8000418 <__aeabi_i2d>
 800b7a6:	4622      	mov	r2, r4
 800b7a8:	462b      	mov	r3, r5
 800b7aa:	f7f5 f907 	bl	80009bc <__aeabi_dcmpeq>
 800b7ae:	b900      	cbnz	r0, 800b7b2 <_dtoa_r+0x16a>
 800b7b0:	3f01      	subs	r7, #1
 800b7b2:	2f16      	cmp	r7, #22
 800b7b4:	d854      	bhi.n	800b860 <_dtoa_r+0x218>
 800b7b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7ba:	4b60      	ldr	r3, [pc, #384]	@ (800b93c <_dtoa_r+0x2f4>)
 800b7bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	f7f5 f904 	bl	80009d0 <__aeabi_dcmplt>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d04b      	beq.n	800b864 <_dtoa_r+0x21c>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	3f01      	subs	r7, #1
 800b7d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b7d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b7d4:	1b9b      	subs	r3, r3, r6
 800b7d6:	1e5a      	subs	r2, r3, #1
 800b7d8:	bf49      	itett	mi
 800b7da:	f1c3 0301 	rsbmi	r3, r3, #1
 800b7de:	2300      	movpl	r3, #0
 800b7e0:	9304      	strmi	r3, [sp, #16]
 800b7e2:	2300      	movmi	r3, #0
 800b7e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7e6:	bf54      	ite	pl
 800b7e8:	9304      	strpl	r3, [sp, #16]
 800b7ea:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b7ec:	2f00      	cmp	r7, #0
 800b7ee:	db3b      	blt.n	800b868 <_dtoa_r+0x220>
 800b7f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7f2:	970e      	str	r7, [sp, #56]	@ 0x38
 800b7f4:	443b      	add	r3, r7
 800b7f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b7fe:	2b09      	cmp	r3, #9
 800b800:	d865      	bhi.n	800b8ce <_dtoa_r+0x286>
 800b802:	2b05      	cmp	r3, #5
 800b804:	bfc4      	itt	gt
 800b806:	3b04      	subgt	r3, #4
 800b808:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b80a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b80c:	bfc8      	it	gt
 800b80e:	2400      	movgt	r4, #0
 800b810:	f1a3 0302 	sub.w	r3, r3, #2
 800b814:	bfd8      	it	le
 800b816:	2401      	movle	r4, #1
 800b818:	2b03      	cmp	r3, #3
 800b81a:	d864      	bhi.n	800b8e6 <_dtoa_r+0x29e>
 800b81c:	e8df f003 	tbb	[pc, r3]
 800b820:	2c385553 	.word	0x2c385553
 800b824:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b828:	441e      	add	r6, r3
 800b82a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b82e:	2b20      	cmp	r3, #32
 800b830:	bfc1      	itttt	gt
 800b832:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b836:	fa08 f803 	lslgt.w	r8, r8, r3
 800b83a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b83e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b842:	bfd6      	itet	le
 800b844:	f1c3 0320 	rsble	r3, r3, #32
 800b848:	ea48 0003 	orrgt.w	r0, r8, r3
 800b84c:	fa04 f003 	lslle.w	r0, r4, r3
 800b850:	f7f4 fdd2 	bl	80003f8 <__aeabi_ui2d>
 800b854:	2201      	movs	r2, #1
 800b856:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b85a:	3e01      	subs	r6, #1
 800b85c:	9212      	str	r2, [sp, #72]	@ 0x48
 800b85e:	e774      	b.n	800b74a <_dtoa_r+0x102>
 800b860:	2301      	movs	r3, #1
 800b862:	e7b5      	b.n	800b7d0 <_dtoa_r+0x188>
 800b864:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b866:	e7b4      	b.n	800b7d2 <_dtoa_r+0x18a>
 800b868:	9b04      	ldr	r3, [sp, #16]
 800b86a:	1bdb      	subs	r3, r3, r7
 800b86c:	9304      	str	r3, [sp, #16]
 800b86e:	427b      	negs	r3, r7
 800b870:	930a      	str	r3, [sp, #40]	@ 0x28
 800b872:	2300      	movs	r3, #0
 800b874:	930e      	str	r3, [sp, #56]	@ 0x38
 800b876:	e7c1      	b.n	800b7fc <_dtoa_r+0x1b4>
 800b878:	2301      	movs	r3, #1
 800b87a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b87c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b87e:	eb07 0b03 	add.w	fp, r7, r3
 800b882:	f10b 0301 	add.w	r3, fp, #1
 800b886:	2b01      	cmp	r3, #1
 800b888:	9308      	str	r3, [sp, #32]
 800b88a:	bfb8      	it	lt
 800b88c:	2301      	movlt	r3, #1
 800b88e:	e006      	b.n	800b89e <_dtoa_r+0x256>
 800b890:	2301      	movs	r3, #1
 800b892:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b894:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b896:	2b00      	cmp	r3, #0
 800b898:	dd28      	ble.n	800b8ec <_dtoa_r+0x2a4>
 800b89a:	469b      	mov	fp, r3
 800b89c:	9308      	str	r3, [sp, #32]
 800b89e:	2100      	movs	r1, #0
 800b8a0:	2204      	movs	r2, #4
 800b8a2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b8a6:	f102 0514 	add.w	r5, r2, #20
 800b8aa:	429d      	cmp	r5, r3
 800b8ac:	d926      	bls.n	800b8fc <_dtoa_r+0x2b4>
 800b8ae:	6041      	str	r1, [r0, #4]
 800b8b0:	4648      	mov	r0, r9
 800b8b2:	f001 f831 	bl	800c918 <_Balloc>
 800b8b6:	4682      	mov	sl, r0
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d143      	bne.n	800b944 <_dtoa_r+0x2fc>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	f240 11af 	movw	r1, #431	@ 0x1af
 800b8c2:	4b1f      	ldr	r3, [pc, #124]	@ (800b940 <_dtoa_r+0x2f8>)
 800b8c4:	e6d4      	b.n	800b670 <_dtoa_r+0x28>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e7e3      	b.n	800b892 <_dtoa_r+0x24a>
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	e7d5      	b.n	800b87a <_dtoa_r+0x232>
 800b8ce:	2401      	movs	r4, #1
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b8d4:	9320      	str	r3, [sp, #128]	@ 0x80
 800b8d6:	f04f 3bff 	mov.w	fp, #4294967295
 800b8da:	2200      	movs	r2, #0
 800b8dc:	2312      	movs	r3, #18
 800b8de:	f8cd b020 	str.w	fp, [sp, #32]
 800b8e2:	9221      	str	r2, [sp, #132]	@ 0x84
 800b8e4:	e7db      	b.n	800b89e <_dtoa_r+0x256>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8ea:	e7f4      	b.n	800b8d6 <_dtoa_r+0x28e>
 800b8ec:	f04f 0b01 	mov.w	fp, #1
 800b8f0:	465b      	mov	r3, fp
 800b8f2:	f8cd b020 	str.w	fp, [sp, #32]
 800b8f6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800b8fa:	e7d0      	b.n	800b89e <_dtoa_r+0x256>
 800b8fc:	3101      	adds	r1, #1
 800b8fe:	0052      	lsls	r2, r2, #1
 800b900:	e7d1      	b.n	800b8a6 <_dtoa_r+0x25e>
 800b902:	bf00      	nop
 800b904:	f3af 8000 	nop.w
 800b908:	636f4361 	.word	0x636f4361
 800b90c:	3fd287a7 	.word	0x3fd287a7
 800b910:	8b60c8b3 	.word	0x8b60c8b3
 800b914:	3fc68a28 	.word	0x3fc68a28
 800b918:	509f79fb 	.word	0x509f79fb
 800b91c:	3fd34413 	.word	0x3fd34413
 800b920:	0800e298 	.word	0x0800e298
 800b924:	0800e2af 	.word	0x0800e2af
 800b928:	7ff00000 	.word	0x7ff00000
 800b92c:	0800e294 	.word	0x0800e294
 800b930:	0800e25b 	.word	0x0800e25b
 800b934:	0800e25a 	.word	0x0800e25a
 800b938:	3ff80000 	.word	0x3ff80000
 800b93c:	0800e4a8 	.word	0x0800e4a8
 800b940:	0800e307 	.word	0x0800e307
 800b944:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b948:	6018      	str	r0, [r3, #0]
 800b94a:	9b08      	ldr	r3, [sp, #32]
 800b94c:	2b0e      	cmp	r3, #14
 800b94e:	f200 80a1 	bhi.w	800ba94 <_dtoa_r+0x44c>
 800b952:	2c00      	cmp	r4, #0
 800b954:	f000 809e 	beq.w	800ba94 <_dtoa_r+0x44c>
 800b958:	2f00      	cmp	r7, #0
 800b95a:	dd33      	ble.n	800b9c4 <_dtoa_r+0x37c>
 800b95c:	4b9c      	ldr	r3, [pc, #624]	@ (800bbd0 <_dtoa_r+0x588>)
 800b95e:	f007 020f 	and.w	r2, r7, #15
 800b962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b966:	05f8      	lsls	r0, r7, #23
 800b968:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b96c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800b970:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b974:	d516      	bpl.n	800b9a4 <_dtoa_r+0x35c>
 800b976:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b97a:	4b96      	ldr	r3, [pc, #600]	@ (800bbd4 <_dtoa_r+0x58c>)
 800b97c:	2603      	movs	r6, #3
 800b97e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b982:	f7f4 fedd 	bl	8000740 <__aeabi_ddiv>
 800b986:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b98a:	f004 040f 	and.w	r4, r4, #15
 800b98e:	4d91      	ldr	r5, [pc, #580]	@ (800bbd4 <_dtoa_r+0x58c>)
 800b990:	b954      	cbnz	r4, 800b9a8 <_dtoa_r+0x360>
 800b992:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b99a:	f7f4 fed1 	bl	8000740 <__aeabi_ddiv>
 800b99e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b9a2:	e028      	b.n	800b9f6 <_dtoa_r+0x3ae>
 800b9a4:	2602      	movs	r6, #2
 800b9a6:	e7f2      	b.n	800b98e <_dtoa_r+0x346>
 800b9a8:	07e1      	lsls	r1, r4, #31
 800b9aa:	d508      	bpl.n	800b9be <_dtoa_r+0x376>
 800b9ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b9b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9b4:	f7f4 fd9a 	bl	80004ec <__aeabi_dmul>
 800b9b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b9bc:	3601      	adds	r6, #1
 800b9be:	1064      	asrs	r4, r4, #1
 800b9c0:	3508      	adds	r5, #8
 800b9c2:	e7e5      	b.n	800b990 <_dtoa_r+0x348>
 800b9c4:	f000 80af 	beq.w	800bb26 <_dtoa_r+0x4de>
 800b9c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9cc:	427c      	negs	r4, r7
 800b9ce:	4b80      	ldr	r3, [pc, #512]	@ (800bbd0 <_dtoa_r+0x588>)
 800b9d0:	f004 020f 	and.w	r2, r4, #15
 800b9d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	f7f4 fd86 	bl	80004ec <__aeabi_dmul>
 800b9e0:	2602      	movs	r6, #2
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b9e8:	4d7a      	ldr	r5, [pc, #488]	@ (800bbd4 <_dtoa_r+0x58c>)
 800b9ea:	1124      	asrs	r4, r4, #4
 800b9ec:	2c00      	cmp	r4, #0
 800b9ee:	f040 808f 	bne.w	800bb10 <_dtoa_r+0x4c8>
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1d3      	bne.n	800b99e <_dtoa_r+0x356>
 800b9f6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800b9fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f000 8094 	beq.w	800bb2a <_dtoa_r+0x4e2>
 800ba02:	2200      	movs	r2, #0
 800ba04:	4620      	mov	r0, r4
 800ba06:	4629      	mov	r1, r5
 800ba08:	4b73      	ldr	r3, [pc, #460]	@ (800bbd8 <_dtoa_r+0x590>)
 800ba0a:	f7f4 ffe1 	bl	80009d0 <__aeabi_dcmplt>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	f000 808b 	beq.w	800bb2a <_dtoa_r+0x4e2>
 800ba14:	9b08      	ldr	r3, [sp, #32]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 8087 	beq.w	800bb2a <_dtoa_r+0x4e2>
 800ba1c:	f1bb 0f00 	cmp.w	fp, #0
 800ba20:	dd34      	ble.n	800ba8c <_dtoa_r+0x444>
 800ba22:	4620      	mov	r0, r4
 800ba24:	2200      	movs	r2, #0
 800ba26:	4629      	mov	r1, r5
 800ba28:	4b6c      	ldr	r3, [pc, #432]	@ (800bbdc <_dtoa_r+0x594>)
 800ba2a:	f7f4 fd5f 	bl	80004ec <__aeabi_dmul>
 800ba2e:	465c      	mov	r4, fp
 800ba30:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ba34:	f107 38ff 	add.w	r8, r7, #4294967295
 800ba38:	3601      	adds	r6, #1
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7f4 fcec 	bl	8000418 <__aeabi_i2d>
 800ba40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba44:	f7f4 fd52 	bl	80004ec <__aeabi_dmul>
 800ba48:	2200      	movs	r2, #0
 800ba4a:	4b65      	ldr	r3, [pc, #404]	@ (800bbe0 <_dtoa_r+0x598>)
 800ba4c:	f7f4 fb98 	bl	8000180 <__adddf3>
 800ba50:	4605      	mov	r5, r0
 800ba52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ba56:	2c00      	cmp	r4, #0
 800ba58:	d16a      	bne.n	800bb30 <_dtoa_r+0x4e8>
 800ba5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	4b60      	ldr	r3, [pc, #384]	@ (800bbe4 <_dtoa_r+0x59c>)
 800ba62:	f7f4 fb8b 	bl	800017c <__aeabi_dsub>
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ba6e:	462a      	mov	r2, r5
 800ba70:	4633      	mov	r3, r6
 800ba72:	f7f4 ffcb 	bl	8000a0c <__aeabi_dcmpgt>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	f040 8298 	bne.w	800bfac <_dtoa_r+0x964>
 800ba7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba80:	462a      	mov	r2, r5
 800ba82:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ba86:	f7f4 ffa3 	bl	80009d0 <__aeabi_dcmplt>
 800ba8a:	bb38      	cbnz	r0, 800badc <_dtoa_r+0x494>
 800ba8c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ba90:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ba94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f2c0 8157 	blt.w	800bd4a <_dtoa_r+0x702>
 800ba9c:	2f0e      	cmp	r7, #14
 800ba9e:	f300 8154 	bgt.w	800bd4a <_dtoa_r+0x702>
 800baa2:	4b4b      	ldr	r3, [pc, #300]	@ (800bbd0 <_dtoa_r+0x588>)
 800baa4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800baa8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800baac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bab0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f280 80e5 	bge.w	800bc82 <_dtoa_r+0x63a>
 800bab8:	9b08      	ldr	r3, [sp, #32]
 800baba:	2b00      	cmp	r3, #0
 800babc:	f300 80e1 	bgt.w	800bc82 <_dtoa_r+0x63a>
 800bac0:	d10c      	bne.n	800badc <_dtoa_r+0x494>
 800bac2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bac6:	2200      	movs	r2, #0
 800bac8:	4b46      	ldr	r3, [pc, #280]	@ (800bbe4 <_dtoa_r+0x59c>)
 800baca:	f7f4 fd0f 	bl	80004ec <__aeabi_dmul>
 800bace:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bad2:	f7f4 ff91 	bl	80009f8 <__aeabi_dcmpge>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	f000 8266 	beq.w	800bfa8 <_dtoa_r+0x960>
 800badc:	2400      	movs	r4, #0
 800bade:	4625      	mov	r5, r4
 800bae0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bae2:	4656      	mov	r6, sl
 800bae4:	ea6f 0803 	mvn.w	r8, r3
 800bae8:	2700      	movs	r7, #0
 800baea:	4621      	mov	r1, r4
 800baec:	4648      	mov	r0, r9
 800baee:	f000 ff53 	bl	800c998 <_Bfree>
 800baf2:	2d00      	cmp	r5, #0
 800baf4:	f000 80bd 	beq.w	800bc72 <_dtoa_r+0x62a>
 800baf8:	b12f      	cbz	r7, 800bb06 <_dtoa_r+0x4be>
 800bafa:	42af      	cmp	r7, r5
 800bafc:	d003      	beq.n	800bb06 <_dtoa_r+0x4be>
 800bafe:	4639      	mov	r1, r7
 800bb00:	4648      	mov	r0, r9
 800bb02:	f000 ff49 	bl	800c998 <_Bfree>
 800bb06:	4629      	mov	r1, r5
 800bb08:	4648      	mov	r0, r9
 800bb0a:	f000 ff45 	bl	800c998 <_Bfree>
 800bb0e:	e0b0      	b.n	800bc72 <_dtoa_r+0x62a>
 800bb10:	07e2      	lsls	r2, r4, #31
 800bb12:	d505      	bpl.n	800bb20 <_dtoa_r+0x4d8>
 800bb14:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb18:	f7f4 fce8 	bl	80004ec <__aeabi_dmul>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	3601      	adds	r6, #1
 800bb20:	1064      	asrs	r4, r4, #1
 800bb22:	3508      	adds	r5, #8
 800bb24:	e762      	b.n	800b9ec <_dtoa_r+0x3a4>
 800bb26:	2602      	movs	r6, #2
 800bb28:	e765      	b.n	800b9f6 <_dtoa_r+0x3ae>
 800bb2a:	46b8      	mov	r8, r7
 800bb2c:	9c08      	ldr	r4, [sp, #32]
 800bb2e:	e784      	b.n	800ba3a <_dtoa_r+0x3f2>
 800bb30:	4b27      	ldr	r3, [pc, #156]	@ (800bbd0 <_dtoa_r+0x588>)
 800bb32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb3c:	4454      	add	r4, sl
 800bb3e:	2900      	cmp	r1, #0
 800bb40:	d054      	beq.n	800bbec <_dtoa_r+0x5a4>
 800bb42:	2000      	movs	r0, #0
 800bb44:	4928      	ldr	r1, [pc, #160]	@ (800bbe8 <_dtoa_r+0x5a0>)
 800bb46:	f7f4 fdfb 	bl	8000740 <__aeabi_ddiv>
 800bb4a:	4633      	mov	r3, r6
 800bb4c:	462a      	mov	r2, r5
 800bb4e:	f7f4 fb15 	bl	800017c <__aeabi_dsub>
 800bb52:	4656      	mov	r6, sl
 800bb54:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb5c:	f7f4 ff76 	bl	8000a4c <__aeabi_d2iz>
 800bb60:	4605      	mov	r5, r0
 800bb62:	f7f4 fc59 	bl	8000418 <__aeabi_i2d>
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb6e:	f7f4 fb05 	bl	800017c <__aeabi_dsub>
 800bb72:	4602      	mov	r2, r0
 800bb74:	460b      	mov	r3, r1
 800bb76:	3530      	adds	r5, #48	@ 0x30
 800bb78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb80:	f806 5b01 	strb.w	r5, [r6], #1
 800bb84:	f7f4 ff24 	bl	80009d0 <__aeabi_dcmplt>
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	d172      	bne.n	800bc72 <_dtoa_r+0x62a>
 800bb8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb90:	2000      	movs	r0, #0
 800bb92:	4911      	ldr	r1, [pc, #68]	@ (800bbd8 <_dtoa_r+0x590>)
 800bb94:	f7f4 faf2 	bl	800017c <__aeabi_dsub>
 800bb98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb9c:	f7f4 ff18 	bl	80009d0 <__aeabi_dcmplt>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	f040 80b4 	bne.w	800bd0e <_dtoa_r+0x6c6>
 800bba6:	42a6      	cmp	r6, r4
 800bba8:	f43f af70 	beq.w	800ba8c <_dtoa_r+0x444>
 800bbac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	4b0a      	ldr	r3, [pc, #40]	@ (800bbdc <_dtoa_r+0x594>)
 800bbb4:	f7f4 fc9a 	bl	80004ec <__aeabi_dmul>
 800bbb8:	2200      	movs	r2, #0
 800bbba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bbbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbc2:	4b06      	ldr	r3, [pc, #24]	@ (800bbdc <_dtoa_r+0x594>)
 800bbc4:	f7f4 fc92 	bl	80004ec <__aeabi_dmul>
 800bbc8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bbcc:	e7c4      	b.n	800bb58 <_dtoa_r+0x510>
 800bbce:	bf00      	nop
 800bbd0:	0800e4a8 	.word	0x0800e4a8
 800bbd4:	0800e480 	.word	0x0800e480
 800bbd8:	3ff00000 	.word	0x3ff00000
 800bbdc:	40240000 	.word	0x40240000
 800bbe0:	401c0000 	.word	0x401c0000
 800bbe4:	40140000 	.word	0x40140000
 800bbe8:	3fe00000 	.word	0x3fe00000
 800bbec:	4631      	mov	r1, r6
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f7f4 fc7c 	bl	80004ec <__aeabi_dmul>
 800bbf4:	4656      	mov	r6, sl
 800bbf6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bbfa:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bbfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc00:	f7f4 ff24 	bl	8000a4c <__aeabi_d2iz>
 800bc04:	4605      	mov	r5, r0
 800bc06:	f7f4 fc07 	bl	8000418 <__aeabi_i2d>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc12:	f7f4 fab3 	bl	800017c <__aeabi_dsub>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	3530      	adds	r5, #48	@ 0x30
 800bc1c:	f806 5b01 	strb.w	r5, [r6], #1
 800bc20:	42a6      	cmp	r6, r4
 800bc22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bc26:	f04f 0200 	mov.w	r2, #0
 800bc2a:	d124      	bne.n	800bc76 <_dtoa_r+0x62e>
 800bc2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc30:	4bae      	ldr	r3, [pc, #696]	@ (800beec <_dtoa_r+0x8a4>)
 800bc32:	f7f4 faa5 	bl	8000180 <__adddf3>
 800bc36:	4602      	mov	r2, r0
 800bc38:	460b      	mov	r3, r1
 800bc3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc3e:	f7f4 fee5 	bl	8000a0c <__aeabi_dcmpgt>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d163      	bne.n	800bd0e <_dtoa_r+0x6c6>
 800bc46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	49a7      	ldr	r1, [pc, #668]	@ (800beec <_dtoa_r+0x8a4>)
 800bc4e:	f7f4 fa95 	bl	800017c <__aeabi_dsub>
 800bc52:	4602      	mov	r2, r0
 800bc54:	460b      	mov	r3, r1
 800bc56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc5a:	f7f4 feb9 	bl	80009d0 <__aeabi_dcmplt>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f43f af14 	beq.w	800ba8c <_dtoa_r+0x444>
 800bc64:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bc66:	1e73      	subs	r3, r6, #1
 800bc68:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc6e:	2b30      	cmp	r3, #48	@ 0x30
 800bc70:	d0f8      	beq.n	800bc64 <_dtoa_r+0x61c>
 800bc72:	4647      	mov	r7, r8
 800bc74:	e03b      	b.n	800bcee <_dtoa_r+0x6a6>
 800bc76:	4b9e      	ldr	r3, [pc, #632]	@ (800bef0 <_dtoa_r+0x8a8>)
 800bc78:	f7f4 fc38 	bl	80004ec <__aeabi_dmul>
 800bc7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc80:	e7bc      	b.n	800bbfc <_dtoa_r+0x5b4>
 800bc82:	4656      	mov	r6, sl
 800bc84:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800bc88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	4629      	mov	r1, r5
 800bc90:	f7f4 fd56 	bl	8000740 <__aeabi_ddiv>
 800bc94:	f7f4 feda 	bl	8000a4c <__aeabi_d2iz>
 800bc98:	4680      	mov	r8, r0
 800bc9a:	f7f4 fbbd 	bl	8000418 <__aeabi_i2d>
 800bc9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bca2:	f7f4 fc23 	bl	80004ec <__aeabi_dmul>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	4620      	mov	r0, r4
 800bcac:	4629      	mov	r1, r5
 800bcae:	f7f4 fa65 	bl	800017c <__aeabi_dsub>
 800bcb2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bcb6:	9d08      	ldr	r5, [sp, #32]
 800bcb8:	f806 4b01 	strb.w	r4, [r6], #1
 800bcbc:	eba6 040a 	sub.w	r4, r6, sl
 800bcc0:	42a5      	cmp	r5, r4
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	d133      	bne.n	800bd30 <_dtoa_r+0x6e8>
 800bcc8:	f7f4 fa5a 	bl	8000180 <__adddf3>
 800bccc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	460d      	mov	r5, r1
 800bcd4:	f7f4 fe9a 	bl	8000a0c <__aeabi_dcmpgt>
 800bcd8:	b9c0      	cbnz	r0, 800bd0c <_dtoa_r+0x6c4>
 800bcda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcde:	4620      	mov	r0, r4
 800bce0:	4629      	mov	r1, r5
 800bce2:	f7f4 fe6b 	bl	80009bc <__aeabi_dcmpeq>
 800bce6:	b110      	cbz	r0, 800bcee <_dtoa_r+0x6a6>
 800bce8:	f018 0f01 	tst.w	r8, #1
 800bcec:	d10e      	bne.n	800bd0c <_dtoa_r+0x6c4>
 800bcee:	4648      	mov	r0, r9
 800bcf0:	9903      	ldr	r1, [sp, #12]
 800bcf2:	f000 fe51 	bl	800c998 <_Bfree>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	7033      	strb	r3, [r6, #0]
 800bcfa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bcfc:	3701      	adds	r7, #1
 800bcfe:	601f      	str	r7, [r3, #0]
 800bd00:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f000 824b 	beq.w	800c19e <_dtoa_r+0xb56>
 800bd08:	601e      	str	r6, [r3, #0]
 800bd0a:	e248      	b.n	800c19e <_dtoa_r+0xb56>
 800bd0c:	46b8      	mov	r8, r7
 800bd0e:	4633      	mov	r3, r6
 800bd10:	461e      	mov	r6, r3
 800bd12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd16:	2a39      	cmp	r2, #57	@ 0x39
 800bd18:	d106      	bne.n	800bd28 <_dtoa_r+0x6e0>
 800bd1a:	459a      	cmp	sl, r3
 800bd1c:	d1f8      	bne.n	800bd10 <_dtoa_r+0x6c8>
 800bd1e:	2230      	movs	r2, #48	@ 0x30
 800bd20:	f108 0801 	add.w	r8, r8, #1
 800bd24:	f88a 2000 	strb.w	r2, [sl]
 800bd28:	781a      	ldrb	r2, [r3, #0]
 800bd2a:	3201      	adds	r2, #1
 800bd2c:	701a      	strb	r2, [r3, #0]
 800bd2e:	e7a0      	b.n	800bc72 <_dtoa_r+0x62a>
 800bd30:	2200      	movs	r2, #0
 800bd32:	4b6f      	ldr	r3, [pc, #444]	@ (800bef0 <_dtoa_r+0x8a8>)
 800bd34:	f7f4 fbda 	bl	80004ec <__aeabi_dmul>
 800bd38:	2200      	movs	r2, #0
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	460d      	mov	r5, r1
 800bd40:	f7f4 fe3c 	bl	80009bc <__aeabi_dcmpeq>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d09f      	beq.n	800bc88 <_dtoa_r+0x640>
 800bd48:	e7d1      	b.n	800bcee <_dtoa_r+0x6a6>
 800bd4a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd4c:	2a00      	cmp	r2, #0
 800bd4e:	f000 80ea 	beq.w	800bf26 <_dtoa_r+0x8de>
 800bd52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bd54:	2a01      	cmp	r2, #1
 800bd56:	f300 80cd 	bgt.w	800bef4 <_dtoa_r+0x8ac>
 800bd5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bd5c:	2a00      	cmp	r2, #0
 800bd5e:	f000 80c1 	beq.w	800bee4 <_dtoa_r+0x89c>
 800bd62:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bd66:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bd68:	9e04      	ldr	r6, [sp, #16]
 800bd6a:	9a04      	ldr	r2, [sp, #16]
 800bd6c:	2101      	movs	r1, #1
 800bd6e:	441a      	add	r2, r3
 800bd70:	9204      	str	r2, [sp, #16]
 800bd72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd74:	4648      	mov	r0, r9
 800bd76:	441a      	add	r2, r3
 800bd78:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd7a:	f000 ff0b 	bl	800cb94 <__i2b>
 800bd7e:	4605      	mov	r5, r0
 800bd80:	b166      	cbz	r6, 800bd9c <_dtoa_r+0x754>
 800bd82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	dd09      	ble.n	800bd9c <_dtoa_r+0x754>
 800bd88:	42b3      	cmp	r3, r6
 800bd8a:	bfa8      	it	ge
 800bd8c:	4633      	movge	r3, r6
 800bd8e:	9a04      	ldr	r2, [sp, #16]
 800bd90:	1af6      	subs	r6, r6, r3
 800bd92:	1ad2      	subs	r2, r2, r3
 800bd94:	9204      	str	r2, [sp, #16]
 800bd96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd9e:	b30b      	cbz	r3, 800bde4 <_dtoa_r+0x79c>
 800bda0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f000 80c6 	beq.w	800bf34 <_dtoa_r+0x8ec>
 800bda8:	2c00      	cmp	r4, #0
 800bdaa:	f000 80c0 	beq.w	800bf2e <_dtoa_r+0x8e6>
 800bdae:	4629      	mov	r1, r5
 800bdb0:	4622      	mov	r2, r4
 800bdb2:	4648      	mov	r0, r9
 800bdb4:	f000 ffa6 	bl	800cd04 <__pow5mult>
 800bdb8:	9a03      	ldr	r2, [sp, #12]
 800bdba:	4601      	mov	r1, r0
 800bdbc:	4605      	mov	r5, r0
 800bdbe:	4648      	mov	r0, r9
 800bdc0:	f000 fefe 	bl	800cbc0 <__multiply>
 800bdc4:	9903      	ldr	r1, [sp, #12]
 800bdc6:	4680      	mov	r8, r0
 800bdc8:	4648      	mov	r0, r9
 800bdca:	f000 fde5 	bl	800c998 <_Bfree>
 800bdce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdd0:	1b1b      	subs	r3, r3, r4
 800bdd2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdd4:	f000 80b1 	beq.w	800bf3a <_dtoa_r+0x8f2>
 800bdd8:	4641      	mov	r1, r8
 800bdda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bddc:	4648      	mov	r0, r9
 800bdde:	f000 ff91 	bl	800cd04 <__pow5mult>
 800bde2:	9003      	str	r0, [sp, #12]
 800bde4:	2101      	movs	r1, #1
 800bde6:	4648      	mov	r0, r9
 800bde8:	f000 fed4 	bl	800cb94 <__i2b>
 800bdec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdee:	4604      	mov	r4, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 81d8 	beq.w	800c1a6 <_dtoa_r+0xb5e>
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	4601      	mov	r1, r0
 800bdfa:	4648      	mov	r0, r9
 800bdfc:	f000 ff82 	bl	800cd04 <__pow5mult>
 800be00:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be02:	4604      	mov	r4, r0
 800be04:	2b01      	cmp	r3, #1
 800be06:	f300 809f 	bgt.w	800bf48 <_dtoa_r+0x900>
 800be0a:	9b06      	ldr	r3, [sp, #24]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f040 8097 	bne.w	800bf40 <_dtoa_r+0x8f8>
 800be12:	9b07      	ldr	r3, [sp, #28]
 800be14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f040 8093 	bne.w	800bf44 <_dtoa_r+0x8fc>
 800be1e:	9b07      	ldr	r3, [sp, #28]
 800be20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be24:	0d1b      	lsrs	r3, r3, #20
 800be26:	051b      	lsls	r3, r3, #20
 800be28:	b133      	cbz	r3, 800be38 <_dtoa_r+0x7f0>
 800be2a:	9b04      	ldr	r3, [sp, #16]
 800be2c:	3301      	adds	r3, #1
 800be2e:	9304      	str	r3, [sp, #16]
 800be30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be32:	3301      	adds	r3, #1
 800be34:	9309      	str	r3, [sp, #36]	@ 0x24
 800be36:	2301      	movs	r3, #1
 800be38:	930a      	str	r3, [sp, #40]	@ 0x28
 800be3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f000 81b8 	beq.w	800c1b2 <_dtoa_r+0xb6a>
 800be42:	6923      	ldr	r3, [r4, #16]
 800be44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be48:	6918      	ldr	r0, [r3, #16]
 800be4a:	f000 fe57 	bl	800cafc <__hi0bits>
 800be4e:	f1c0 0020 	rsb	r0, r0, #32
 800be52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be54:	4418      	add	r0, r3
 800be56:	f010 001f 	ands.w	r0, r0, #31
 800be5a:	f000 8082 	beq.w	800bf62 <_dtoa_r+0x91a>
 800be5e:	f1c0 0320 	rsb	r3, r0, #32
 800be62:	2b04      	cmp	r3, #4
 800be64:	dd73      	ble.n	800bf4e <_dtoa_r+0x906>
 800be66:	9b04      	ldr	r3, [sp, #16]
 800be68:	f1c0 001c 	rsb	r0, r0, #28
 800be6c:	4403      	add	r3, r0
 800be6e:	9304      	str	r3, [sp, #16]
 800be70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be72:	4406      	add	r6, r0
 800be74:	4403      	add	r3, r0
 800be76:	9309      	str	r3, [sp, #36]	@ 0x24
 800be78:	9b04      	ldr	r3, [sp, #16]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	dd05      	ble.n	800be8a <_dtoa_r+0x842>
 800be7e:	461a      	mov	r2, r3
 800be80:	4648      	mov	r0, r9
 800be82:	9903      	ldr	r1, [sp, #12]
 800be84:	f000 ff98 	bl	800cdb8 <__lshift>
 800be88:	9003      	str	r0, [sp, #12]
 800be8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	dd05      	ble.n	800be9c <_dtoa_r+0x854>
 800be90:	4621      	mov	r1, r4
 800be92:	461a      	mov	r2, r3
 800be94:	4648      	mov	r0, r9
 800be96:	f000 ff8f 	bl	800cdb8 <__lshift>
 800be9a:	4604      	mov	r4, r0
 800be9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d061      	beq.n	800bf66 <_dtoa_r+0x91e>
 800bea2:	4621      	mov	r1, r4
 800bea4:	9803      	ldr	r0, [sp, #12]
 800bea6:	f000 fff3 	bl	800ce90 <__mcmp>
 800beaa:	2800      	cmp	r0, #0
 800beac:	da5b      	bge.n	800bf66 <_dtoa_r+0x91e>
 800beae:	2300      	movs	r3, #0
 800beb0:	220a      	movs	r2, #10
 800beb2:	4648      	mov	r0, r9
 800beb4:	9903      	ldr	r1, [sp, #12]
 800beb6:	f000 fd91 	bl	800c9dc <__multadd>
 800beba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bebc:	f107 38ff 	add.w	r8, r7, #4294967295
 800bec0:	9003      	str	r0, [sp, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 8177 	beq.w	800c1b6 <_dtoa_r+0xb6e>
 800bec8:	4629      	mov	r1, r5
 800beca:	2300      	movs	r3, #0
 800becc:	220a      	movs	r2, #10
 800bece:	4648      	mov	r0, r9
 800bed0:	f000 fd84 	bl	800c9dc <__multadd>
 800bed4:	f1bb 0f00 	cmp.w	fp, #0
 800bed8:	4605      	mov	r5, r0
 800beda:	dc6f      	bgt.n	800bfbc <_dtoa_r+0x974>
 800bedc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bede:	2b02      	cmp	r3, #2
 800bee0:	dc49      	bgt.n	800bf76 <_dtoa_r+0x92e>
 800bee2:	e06b      	b.n	800bfbc <_dtoa_r+0x974>
 800bee4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bee6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800beea:	e73c      	b.n	800bd66 <_dtoa_r+0x71e>
 800beec:	3fe00000 	.word	0x3fe00000
 800bef0:	40240000 	.word	0x40240000
 800bef4:	9b08      	ldr	r3, [sp, #32]
 800bef6:	1e5c      	subs	r4, r3, #1
 800bef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800befa:	42a3      	cmp	r3, r4
 800befc:	db09      	blt.n	800bf12 <_dtoa_r+0x8ca>
 800befe:	1b1c      	subs	r4, r3, r4
 800bf00:	9b08      	ldr	r3, [sp, #32]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f6bf af30 	bge.w	800bd68 <_dtoa_r+0x720>
 800bf08:	9b04      	ldr	r3, [sp, #16]
 800bf0a:	9a08      	ldr	r2, [sp, #32]
 800bf0c:	1a9e      	subs	r6, r3, r2
 800bf0e:	2300      	movs	r3, #0
 800bf10:	e72b      	b.n	800bd6a <_dtoa_r+0x722>
 800bf12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf16:	1ae3      	subs	r3, r4, r3
 800bf18:	441a      	add	r2, r3
 800bf1a:	940a      	str	r4, [sp, #40]	@ 0x28
 800bf1c:	9e04      	ldr	r6, [sp, #16]
 800bf1e:	2400      	movs	r4, #0
 800bf20:	9b08      	ldr	r3, [sp, #32]
 800bf22:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf24:	e721      	b.n	800bd6a <_dtoa_r+0x722>
 800bf26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf28:	9e04      	ldr	r6, [sp, #16]
 800bf2a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bf2c:	e728      	b.n	800bd80 <_dtoa_r+0x738>
 800bf2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bf32:	e751      	b.n	800bdd8 <_dtoa_r+0x790>
 800bf34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf36:	9903      	ldr	r1, [sp, #12]
 800bf38:	e750      	b.n	800bddc <_dtoa_r+0x794>
 800bf3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf3e:	e751      	b.n	800bde4 <_dtoa_r+0x79c>
 800bf40:	2300      	movs	r3, #0
 800bf42:	e779      	b.n	800be38 <_dtoa_r+0x7f0>
 800bf44:	9b06      	ldr	r3, [sp, #24]
 800bf46:	e777      	b.n	800be38 <_dtoa_r+0x7f0>
 800bf48:	2300      	movs	r3, #0
 800bf4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf4c:	e779      	b.n	800be42 <_dtoa_r+0x7fa>
 800bf4e:	d093      	beq.n	800be78 <_dtoa_r+0x830>
 800bf50:	9a04      	ldr	r2, [sp, #16]
 800bf52:	331c      	adds	r3, #28
 800bf54:	441a      	add	r2, r3
 800bf56:	9204      	str	r2, [sp, #16]
 800bf58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf5a:	441e      	add	r6, r3
 800bf5c:	441a      	add	r2, r3
 800bf5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf60:	e78a      	b.n	800be78 <_dtoa_r+0x830>
 800bf62:	4603      	mov	r3, r0
 800bf64:	e7f4      	b.n	800bf50 <_dtoa_r+0x908>
 800bf66:	9b08      	ldr	r3, [sp, #32]
 800bf68:	46b8      	mov	r8, r7
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	dc20      	bgt.n	800bfb0 <_dtoa_r+0x968>
 800bf6e:	469b      	mov	fp, r3
 800bf70:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	dd1e      	ble.n	800bfb4 <_dtoa_r+0x96c>
 800bf76:	f1bb 0f00 	cmp.w	fp, #0
 800bf7a:	f47f adb1 	bne.w	800bae0 <_dtoa_r+0x498>
 800bf7e:	4621      	mov	r1, r4
 800bf80:	465b      	mov	r3, fp
 800bf82:	2205      	movs	r2, #5
 800bf84:	4648      	mov	r0, r9
 800bf86:	f000 fd29 	bl	800c9dc <__multadd>
 800bf8a:	4601      	mov	r1, r0
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	9803      	ldr	r0, [sp, #12]
 800bf90:	f000 ff7e 	bl	800ce90 <__mcmp>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	f77f ada3 	ble.w	800bae0 <_dtoa_r+0x498>
 800bf9a:	4656      	mov	r6, sl
 800bf9c:	2331      	movs	r3, #49	@ 0x31
 800bf9e:	f108 0801 	add.w	r8, r8, #1
 800bfa2:	f806 3b01 	strb.w	r3, [r6], #1
 800bfa6:	e59f      	b.n	800bae8 <_dtoa_r+0x4a0>
 800bfa8:	46b8      	mov	r8, r7
 800bfaa:	9c08      	ldr	r4, [sp, #32]
 800bfac:	4625      	mov	r5, r4
 800bfae:	e7f4      	b.n	800bf9a <_dtoa_r+0x952>
 800bfb0:	f8dd b020 	ldr.w	fp, [sp, #32]
 800bfb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f000 8101 	beq.w	800c1be <_dtoa_r+0xb76>
 800bfbc:	2e00      	cmp	r6, #0
 800bfbe:	dd05      	ble.n	800bfcc <_dtoa_r+0x984>
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	4632      	mov	r2, r6
 800bfc4:	4648      	mov	r0, r9
 800bfc6:	f000 fef7 	bl	800cdb8 <__lshift>
 800bfca:	4605      	mov	r5, r0
 800bfcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d05c      	beq.n	800c08c <_dtoa_r+0xa44>
 800bfd2:	4648      	mov	r0, r9
 800bfd4:	6869      	ldr	r1, [r5, #4]
 800bfd6:	f000 fc9f 	bl	800c918 <_Balloc>
 800bfda:	4606      	mov	r6, r0
 800bfdc:	b928      	cbnz	r0, 800bfea <_dtoa_r+0x9a2>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bfe4:	4b80      	ldr	r3, [pc, #512]	@ (800c1e8 <_dtoa_r+0xba0>)
 800bfe6:	f7ff bb43 	b.w	800b670 <_dtoa_r+0x28>
 800bfea:	692a      	ldr	r2, [r5, #16]
 800bfec:	f105 010c 	add.w	r1, r5, #12
 800bff0:	3202      	adds	r2, #2
 800bff2:	0092      	lsls	r2, r2, #2
 800bff4:	300c      	adds	r0, #12
 800bff6:	f7ff fa86 	bl	800b506 <memcpy>
 800bffa:	2201      	movs	r2, #1
 800bffc:	4631      	mov	r1, r6
 800bffe:	4648      	mov	r0, r9
 800c000:	f000 feda 	bl	800cdb8 <__lshift>
 800c004:	462f      	mov	r7, r5
 800c006:	4605      	mov	r5, r0
 800c008:	f10a 0301 	add.w	r3, sl, #1
 800c00c:	9304      	str	r3, [sp, #16]
 800c00e:	eb0a 030b 	add.w	r3, sl, fp
 800c012:	930a      	str	r3, [sp, #40]	@ 0x28
 800c014:	9b06      	ldr	r3, [sp, #24]
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c01c:	9b04      	ldr	r3, [sp, #16]
 800c01e:	4621      	mov	r1, r4
 800c020:	9803      	ldr	r0, [sp, #12]
 800c022:	f103 3bff 	add.w	fp, r3, #4294967295
 800c026:	f7ff fa87 	bl	800b538 <quorem>
 800c02a:	4603      	mov	r3, r0
 800c02c:	4639      	mov	r1, r7
 800c02e:	3330      	adds	r3, #48	@ 0x30
 800c030:	9006      	str	r0, [sp, #24]
 800c032:	9803      	ldr	r0, [sp, #12]
 800c034:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c036:	f000 ff2b 	bl	800ce90 <__mcmp>
 800c03a:	462a      	mov	r2, r5
 800c03c:	9008      	str	r0, [sp, #32]
 800c03e:	4621      	mov	r1, r4
 800c040:	4648      	mov	r0, r9
 800c042:	f000 ff41 	bl	800cec8 <__mdiff>
 800c046:	68c2      	ldr	r2, [r0, #12]
 800c048:	4606      	mov	r6, r0
 800c04a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c04c:	bb02      	cbnz	r2, 800c090 <_dtoa_r+0xa48>
 800c04e:	4601      	mov	r1, r0
 800c050:	9803      	ldr	r0, [sp, #12]
 800c052:	f000 ff1d 	bl	800ce90 <__mcmp>
 800c056:	4602      	mov	r2, r0
 800c058:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c05a:	4631      	mov	r1, r6
 800c05c:	4648      	mov	r0, r9
 800c05e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800c062:	f000 fc99 	bl	800c998 <_Bfree>
 800c066:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c068:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c06a:	9e04      	ldr	r6, [sp, #16]
 800c06c:	ea42 0103 	orr.w	r1, r2, r3
 800c070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c072:	4319      	orrs	r1, r3
 800c074:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c076:	d10d      	bne.n	800c094 <_dtoa_r+0xa4c>
 800c078:	2b39      	cmp	r3, #57	@ 0x39
 800c07a:	d027      	beq.n	800c0cc <_dtoa_r+0xa84>
 800c07c:	9a08      	ldr	r2, [sp, #32]
 800c07e:	2a00      	cmp	r2, #0
 800c080:	dd01      	ble.n	800c086 <_dtoa_r+0xa3e>
 800c082:	9b06      	ldr	r3, [sp, #24]
 800c084:	3331      	adds	r3, #49	@ 0x31
 800c086:	f88b 3000 	strb.w	r3, [fp]
 800c08a:	e52e      	b.n	800baea <_dtoa_r+0x4a2>
 800c08c:	4628      	mov	r0, r5
 800c08e:	e7b9      	b.n	800c004 <_dtoa_r+0x9bc>
 800c090:	2201      	movs	r2, #1
 800c092:	e7e2      	b.n	800c05a <_dtoa_r+0xa12>
 800c094:	9908      	ldr	r1, [sp, #32]
 800c096:	2900      	cmp	r1, #0
 800c098:	db04      	blt.n	800c0a4 <_dtoa_r+0xa5c>
 800c09a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800c09c:	4301      	orrs	r1, r0
 800c09e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0a0:	4301      	orrs	r1, r0
 800c0a2:	d120      	bne.n	800c0e6 <_dtoa_r+0xa9e>
 800c0a4:	2a00      	cmp	r2, #0
 800c0a6:	ddee      	ble.n	800c086 <_dtoa_r+0xa3e>
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	9903      	ldr	r1, [sp, #12]
 800c0ac:	4648      	mov	r0, r9
 800c0ae:	9304      	str	r3, [sp, #16]
 800c0b0:	f000 fe82 	bl	800cdb8 <__lshift>
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	9003      	str	r0, [sp, #12]
 800c0b8:	f000 feea 	bl	800ce90 <__mcmp>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	9b04      	ldr	r3, [sp, #16]
 800c0c0:	dc02      	bgt.n	800c0c8 <_dtoa_r+0xa80>
 800c0c2:	d1e0      	bne.n	800c086 <_dtoa_r+0xa3e>
 800c0c4:	07da      	lsls	r2, r3, #31
 800c0c6:	d5de      	bpl.n	800c086 <_dtoa_r+0xa3e>
 800c0c8:	2b39      	cmp	r3, #57	@ 0x39
 800c0ca:	d1da      	bne.n	800c082 <_dtoa_r+0xa3a>
 800c0cc:	2339      	movs	r3, #57	@ 0x39
 800c0ce:	f88b 3000 	strb.w	r3, [fp]
 800c0d2:	4633      	mov	r3, r6
 800c0d4:	461e      	mov	r6, r3
 800c0d6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	2a39      	cmp	r2, #57	@ 0x39
 800c0de:	d04e      	beq.n	800c17e <_dtoa_r+0xb36>
 800c0e0:	3201      	adds	r2, #1
 800c0e2:	701a      	strb	r2, [r3, #0]
 800c0e4:	e501      	b.n	800baea <_dtoa_r+0x4a2>
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	dd03      	ble.n	800c0f2 <_dtoa_r+0xaaa>
 800c0ea:	2b39      	cmp	r3, #57	@ 0x39
 800c0ec:	d0ee      	beq.n	800c0cc <_dtoa_r+0xa84>
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	e7c9      	b.n	800c086 <_dtoa_r+0xa3e>
 800c0f2:	9a04      	ldr	r2, [sp, #16]
 800c0f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c0fa:	428a      	cmp	r2, r1
 800c0fc:	d028      	beq.n	800c150 <_dtoa_r+0xb08>
 800c0fe:	2300      	movs	r3, #0
 800c100:	220a      	movs	r2, #10
 800c102:	9903      	ldr	r1, [sp, #12]
 800c104:	4648      	mov	r0, r9
 800c106:	f000 fc69 	bl	800c9dc <__multadd>
 800c10a:	42af      	cmp	r7, r5
 800c10c:	9003      	str	r0, [sp, #12]
 800c10e:	f04f 0300 	mov.w	r3, #0
 800c112:	f04f 020a 	mov.w	r2, #10
 800c116:	4639      	mov	r1, r7
 800c118:	4648      	mov	r0, r9
 800c11a:	d107      	bne.n	800c12c <_dtoa_r+0xae4>
 800c11c:	f000 fc5e 	bl	800c9dc <__multadd>
 800c120:	4607      	mov	r7, r0
 800c122:	4605      	mov	r5, r0
 800c124:	9b04      	ldr	r3, [sp, #16]
 800c126:	3301      	adds	r3, #1
 800c128:	9304      	str	r3, [sp, #16]
 800c12a:	e777      	b.n	800c01c <_dtoa_r+0x9d4>
 800c12c:	f000 fc56 	bl	800c9dc <__multadd>
 800c130:	4629      	mov	r1, r5
 800c132:	4607      	mov	r7, r0
 800c134:	2300      	movs	r3, #0
 800c136:	220a      	movs	r2, #10
 800c138:	4648      	mov	r0, r9
 800c13a:	f000 fc4f 	bl	800c9dc <__multadd>
 800c13e:	4605      	mov	r5, r0
 800c140:	e7f0      	b.n	800c124 <_dtoa_r+0xadc>
 800c142:	f1bb 0f00 	cmp.w	fp, #0
 800c146:	bfcc      	ite	gt
 800c148:	465e      	movgt	r6, fp
 800c14a:	2601      	movle	r6, #1
 800c14c:	2700      	movs	r7, #0
 800c14e:	4456      	add	r6, sl
 800c150:	2201      	movs	r2, #1
 800c152:	9903      	ldr	r1, [sp, #12]
 800c154:	4648      	mov	r0, r9
 800c156:	9304      	str	r3, [sp, #16]
 800c158:	f000 fe2e 	bl	800cdb8 <__lshift>
 800c15c:	4621      	mov	r1, r4
 800c15e:	9003      	str	r0, [sp, #12]
 800c160:	f000 fe96 	bl	800ce90 <__mcmp>
 800c164:	2800      	cmp	r0, #0
 800c166:	dcb4      	bgt.n	800c0d2 <_dtoa_r+0xa8a>
 800c168:	d102      	bne.n	800c170 <_dtoa_r+0xb28>
 800c16a:	9b04      	ldr	r3, [sp, #16]
 800c16c:	07db      	lsls	r3, r3, #31
 800c16e:	d4b0      	bmi.n	800c0d2 <_dtoa_r+0xa8a>
 800c170:	4633      	mov	r3, r6
 800c172:	461e      	mov	r6, r3
 800c174:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c178:	2a30      	cmp	r2, #48	@ 0x30
 800c17a:	d0fa      	beq.n	800c172 <_dtoa_r+0xb2a>
 800c17c:	e4b5      	b.n	800baea <_dtoa_r+0x4a2>
 800c17e:	459a      	cmp	sl, r3
 800c180:	d1a8      	bne.n	800c0d4 <_dtoa_r+0xa8c>
 800c182:	2331      	movs	r3, #49	@ 0x31
 800c184:	f108 0801 	add.w	r8, r8, #1
 800c188:	f88a 3000 	strb.w	r3, [sl]
 800c18c:	e4ad      	b.n	800baea <_dtoa_r+0x4a2>
 800c18e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c190:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c1ec <_dtoa_r+0xba4>
 800c194:	b11b      	cbz	r3, 800c19e <_dtoa_r+0xb56>
 800c196:	f10a 0308 	add.w	r3, sl, #8
 800c19a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c19c:	6013      	str	r3, [r2, #0]
 800c19e:	4650      	mov	r0, sl
 800c1a0:	b017      	add	sp, #92	@ 0x5c
 800c1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	f77f ae2e 	ble.w	800be0a <_dtoa_r+0x7c2>
 800c1ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1b2:	2001      	movs	r0, #1
 800c1b4:	e64d      	b.n	800be52 <_dtoa_r+0x80a>
 800c1b6:	f1bb 0f00 	cmp.w	fp, #0
 800c1ba:	f77f aed9 	ble.w	800bf70 <_dtoa_r+0x928>
 800c1be:	4656      	mov	r6, sl
 800c1c0:	4621      	mov	r1, r4
 800c1c2:	9803      	ldr	r0, [sp, #12]
 800c1c4:	f7ff f9b8 	bl	800b538 <quorem>
 800c1c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c1cc:	f806 3b01 	strb.w	r3, [r6], #1
 800c1d0:	eba6 020a 	sub.w	r2, r6, sl
 800c1d4:	4593      	cmp	fp, r2
 800c1d6:	ddb4      	ble.n	800c142 <_dtoa_r+0xafa>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	220a      	movs	r2, #10
 800c1dc:	4648      	mov	r0, r9
 800c1de:	9903      	ldr	r1, [sp, #12]
 800c1e0:	f000 fbfc 	bl	800c9dc <__multadd>
 800c1e4:	9003      	str	r0, [sp, #12]
 800c1e6:	e7eb      	b.n	800c1c0 <_dtoa_r+0xb78>
 800c1e8:	0800e307 	.word	0x0800e307
 800c1ec:	0800e28b 	.word	0x0800e28b

0800c1f0 <_free_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	2900      	cmp	r1, #0
 800c1f6:	d040      	beq.n	800c27a <_free_r+0x8a>
 800c1f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1fc:	1f0c      	subs	r4, r1, #4
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	bfb8      	it	lt
 800c202:	18e4      	addlt	r4, r4, r3
 800c204:	f7fd f9be 	bl	8009584 <__malloc_lock>
 800c208:	4a1c      	ldr	r2, [pc, #112]	@ (800c27c <_free_r+0x8c>)
 800c20a:	6813      	ldr	r3, [r2, #0]
 800c20c:	b933      	cbnz	r3, 800c21c <_free_r+0x2c>
 800c20e:	6063      	str	r3, [r4, #4]
 800c210:	6014      	str	r4, [r2, #0]
 800c212:	4628      	mov	r0, r5
 800c214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c218:	f7fd b9ba 	b.w	8009590 <__malloc_unlock>
 800c21c:	42a3      	cmp	r3, r4
 800c21e:	d908      	bls.n	800c232 <_free_r+0x42>
 800c220:	6820      	ldr	r0, [r4, #0]
 800c222:	1821      	adds	r1, r4, r0
 800c224:	428b      	cmp	r3, r1
 800c226:	bf01      	itttt	eq
 800c228:	6819      	ldreq	r1, [r3, #0]
 800c22a:	685b      	ldreq	r3, [r3, #4]
 800c22c:	1809      	addeq	r1, r1, r0
 800c22e:	6021      	streq	r1, [r4, #0]
 800c230:	e7ed      	b.n	800c20e <_free_r+0x1e>
 800c232:	461a      	mov	r2, r3
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	b10b      	cbz	r3, 800c23c <_free_r+0x4c>
 800c238:	42a3      	cmp	r3, r4
 800c23a:	d9fa      	bls.n	800c232 <_free_r+0x42>
 800c23c:	6811      	ldr	r1, [r2, #0]
 800c23e:	1850      	adds	r0, r2, r1
 800c240:	42a0      	cmp	r0, r4
 800c242:	d10b      	bne.n	800c25c <_free_r+0x6c>
 800c244:	6820      	ldr	r0, [r4, #0]
 800c246:	4401      	add	r1, r0
 800c248:	1850      	adds	r0, r2, r1
 800c24a:	4283      	cmp	r3, r0
 800c24c:	6011      	str	r1, [r2, #0]
 800c24e:	d1e0      	bne.n	800c212 <_free_r+0x22>
 800c250:	6818      	ldr	r0, [r3, #0]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	4408      	add	r0, r1
 800c256:	6010      	str	r0, [r2, #0]
 800c258:	6053      	str	r3, [r2, #4]
 800c25a:	e7da      	b.n	800c212 <_free_r+0x22>
 800c25c:	d902      	bls.n	800c264 <_free_r+0x74>
 800c25e:	230c      	movs	r3, #12
 800c260:	602b      	str	r3, [r5, #0]
 800c262:	e7d6      	b.n	800c212 <_free_r+0x22>
 800c264:	6820      	ldr	r0, [r4, #0]
 800c266:	1821      	adds	r1, r4, r0
 800c268:	428b      	cmp	r3, r1
 800c26a:	bf01      	itttt	eq
 800c26c:	6819      	ldreq	r1, [r3, #0]
 800c26e:	685b      	ldreq	r3, [r3, #4]
 800c270:	1809      	addeq	r1, r1, r0
 800c272:	6021      	streq	r1, [r4, #0]
 800c274:	6063      	str	r3, [r4, #4]
 800c276:	6054      	str	r4, [r2, #4]
 800c278:	e7cb      	b.n	800c212 <_free_r+0x22>
 800c27a:	bd38      	pop	{r3, r4, r5, pc}
 800c27c:	20000ef8 	.word	0x20000ef8

0800c280 <rshift>:
 800c280:	6903      	ldr	r3, [r0, #16]
 800c282:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c286:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c28a:	f100 0414 	add.w	r4, r0, #20
 800c28e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c292:	dd46      	ble.n	800c322 <rshift+0xa2>
 800c294:	f011 011f 	ands.w	r1, r1, #31
 800c298:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c29c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c2a0:	d10c      	bne.n	800c2bc <rshift+0x3c>
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	f100 0710 	add.w	r7, r0, #16
 800c2a8:	42b1      	cmp	r1, r6
 800c2aa:	d335      	bcc.n	800c318 <rshift+0x98>
 800c2ac:	1a9b      	subs	r3, r3, r2
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	1eea      	subs	r2, r5, #3
 800c2b2:	4296      	cmp	r6, r2
 800c2b4:	bf38      	it	cc
 800c2b6:	2300      	movcc	r3, #0
 800c2b8:	4423      	add	r3, r4
 800c2ba:	e015      	b.n	800c2e8 <rshift+0x68>
 800c2bc:	46a1      	mov	r9, r4
 800c2be:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c2c2:	f1c1 0820 	rsb	r8, r1, #32
 800c2c6:	40cf      	lsrs	r7, r1
 800c2c8:	f105 0e04 	add.w	lr, r5, #4
 800c2cc:	4576      	cmp	r6, lr
 800c2ce:	46f4      	mov	ip, lr
 800c2d0:	d816      	bhi.n	800c300 <rshift+0x80>
 800c2d2:	1a9a      	subs	r2, r3, r2
 800c2d4:	0092      	lsls	r2, r2, #2
 800c2d6:	3a04      	subs	r2, #4
 800c2d8:	3501      	adds	r5, #1
 800c2da:	42ae      	cmp	r6, r5
 800c2dc:	bf38      	it	cc
 800c2de:	2200      	movcc	r2, #0
 800c2e0:	18a3      	adds	r3, r4, r2
 800c2e2:	50a7      	str	r7, [r4, r2]
 800c2e4:	b107      	cbz	r7, 800c2e8 <rshift+0x68>
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	42a3      	cmp	r3, r4
 800c2ea:	eba3 0204 	sub.w	r2, r3, r4
 800c2ee:	bf08      	it	eq
 800c2f0:	2300      	moveq	r3, #0
 800c2f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c2f6:	6102      	str	r2, [r0, #16]
 800c2f8:	bf08      	it	eq
 800c2fa:	6143      	streq	r3, [r0, #20]
 800c2fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c300:	f8dc c000 	ldr.w	ip, [ip]
 800c304:	fa0c fc08 	lsl.w	ip, ip, r8
 800c308:	ea4c 0707 	orr.w	r7, ip, r7
 800c30c:	f849 7b04 	str.w	r7, [r9], #4
 800c310:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c314:	40cf      	lsrs	r7, r1
 800c316:	e7d9      	b.n	800c2cc <rshift+0x4c>
 800c318:	f851 cb04 	ldr.w	ip, [r1], #4
 800c31c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c320:	e7c2      	b.n	800c2a8 <rshift+0x28>
 800c322:	4623      	mov	r3, r4
 800c324:	e7e0      	b.n	800c2e8 <rshift+0x68>

0800c326 <__hexdig_fun>:
 800c326:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c32a:	2b09      	cmp	r3, #9
 800c32c:	d802      	bhi.n	800c334 <__hexdig_fun+0xe>
 800c32e:	3820      	subs	r0, #32
 800c330:	b2c0      	uxtb	r0, r0
 800c332:	4770      	bx	lr
 800c334:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c338:	2b05      	cmp	r3, #5
 800c33a:	d801      	bhi.n	800c340 <__hexdig_fun+0x1a>
 800c33c:	3847      	subs	r0, #71	@ 0x47
 800c33e:	e7f7      	b.n	800c330 <__hexdig_fun+0xa>
 800c340:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c344:	2b05      	cmp	r3, #5
 800c346:	d801      	bhi.n	800c34c <__hexdig_fun+0x26>
 800c348:	3827      	subs	r0, #39	@ 0x27
 800c34a:	e7f1      	b.n	800c330 <__hexdig_fun+0xa>
 800c34c:	2000      	movs	r0, #0
 800c34e:	4770      	bx	lr

0800c350 <__gethex>:
 800c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c354:	468a      	mov	sl, r1
 800c356:	4690      	mov	r8, r2
 800c358:	b085      	sub	sp, #20
 800c35a:	9302      	str	r3, [sp, #8]
 800c35c:	680b      	ldr	r3, [r1, #0]
 800c35e:	9001      	str	r0, [sp, #4]
 800c360:	1c9c      	adds	r4, r3, #2
 800c362:	46a1      	mov	r9, r4
 800c364:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c368:	2830      	cmp	r0, #48	@ 0x30
 800c36a:	d0fa      	beq.n	800c362 <__gethex+0x12>
 800c36c:	eba9 0303 	sub.w	r3, r9, r3
 800c370:	f1a3 0b02 	sub.w	fp, r3, #2
 800c374:	f7ff ffd7 	bl	800c326 <__hexdig_fun>
 800c378:	4605      	mov	r5, r0
 800c37a:	2800      	cmp	r0, #0
 800c37c:	d168      	bne.n	800c450 <__gethex+0x100>
 800c37e:	2201      	movs	r2, #1
 800c380:	4648      	mov	r0, r9
 800c382:	499f      	ldr	r1, [pc, #636]	@ (800c600 <__gethex+0x2b0>)
 800c384:	f7ff f80f 	bl	800b3a6 <strncmp>
 800c388:	4607      	mov	r7, r0
 800c38a:	2800      	cmp	r0, #0
 800c38c:	d167      	bne.n	800c45e <__gethex+0x10e>
 800c38e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c392:	4626      	mov	r6, r4
 800c394:	f7ff ffc7 	bl	800c326 <__hexdig_fun>
 800c398:	2800      	cmp	r0, #0
 800c39a:	d062      	beq.n	800c462 <__gethex+0x112>
 800c39c:	4623      	mov	r3, r4
 800c39e:	7818      	ldrb	r0, [r3, #0]
 800c3a0:	4699      	mov	r9, r3
 800c3a2:	2830      	cmp	r0, #48	@ 0x30
 800c3a4:	f103 0301 	add.w	r3, r3, #1
 800c3a8:	d0f9      	beq.n	800c39e <__gethex+0x4e>
 800c3aa:	f7ff ffbc 	bl	800c326 <__hexdig_fun>
 800c3ae:	fab0 f580 	clz	r5, r0
 800c3b2:	f04f 0b01 	mov.w	fp, #1
 800c3b6:	096d      	lsrs	r5, r5, #5
 800c3b8:	464a      	mov	r2, r9
 800c3ba:	4616      	mov	r6, r2
 800c3bc:	7830      	ldrb	r0, [r6, #0]
 800c3be:	3201      	adds	r2, #1
 800c3c0:	f7ff ffb1 	bl	800c326 <__hexdig_fun>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d1f8      	bne.n	800c3ba <__gethex+0x6a>
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	498c      	ldr	r1, [pc, #560]	@ (800c600 <__gethex+0x2b0>)
 800c3ce:	f7fe ffea 	bl	800b3a6 <strncmp>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	d13f      	bne.n	800c456 <__gethex+0x106>
 800c3d6:	b944      	cbnz	r4, 800c3ea <__gethex+0x9a>
 800c3d8:	1c74      	adds	r4, r6, #1
 800c3da:	4622      	mov	r2, r4
 800c3dc:	4616      	mov	r6, r2
 800c3de:	7830      	ldrb	r0, [r6, #0]
 800c3e0:	3201      	adds	r2, #1
 800c3e2:	f7ff ffa0 	bl	800c326 <__hexdig_fun>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d1f8      	bne.n	800c3dc <__gethex+0x8c>
 800c3ea:	1ba4      	subs	r4, r4, r6
 800c3ec:	00a7      	lsls	r7, r4, #2
 800c3ee:	7833      	ldrb	r3, [r6, #0]
 800c3f0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c3f4:	2b50      	cmp	r3, #80	@ 0x50
 800c3f6:	d13e      	bne.n	800c476 <__gethex+0x126>
 800c3f8:	7873      	ldrb	r3, [r6, #1]
 800c3fa:	2b2b      	cmp	r3, #43	@ 0x2b
 800c3fc:	d033      	beq.n	800c466 <__gethex+0x116>
 800c3fe:	2b2d      	cmp	r3, #45	@ 0x2d
 800c400:	d034      	beq.n	800c46c <__gethex+0x11c>
 800c402:	2400      	movs	r4, #0
 800c404:	1c71      	adds	r1, r6, #1
 800c406:	7808      	ldrb	r0, [r1, #0]
 800c408:	f7ff ff8d 	bl	800c326 <__hexdig_fun>
 800c40c:	1e43      	subs	r3, r0, #1
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	2b18      	cmp	r3, #24
 800c412:	d830      	bhi.n	800c476 <__gethex+0x126>
 800c414:	f1a0 0210 	sub.w	r2, r0, #16
 800c418:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c41c:	f7ff ff83 	bl	800c326 <__hexdig_fun>
 800c420:	f100 3cff 	add.w	ip, r0, #4294967295
 800c424:	fa5f fc8c 	uxtb.w	ip, ip
 800c428:	f1bc 0f18 	cmp.w	ip, #24
 800c42c:	f04f 030a 	mov.w	r3, #10
 800c430:	d91e      	bls.n	800c470 <__gethex+0x120>
 800c432:	b104      	cbz	r4, 800c436 <__gethex+0xe6>
 800c434:	4252      	negs	r2, r2
 800c436:	4417      	add	r7, r2
 800c438:	f8ca 1000 	str.w	r1, [sl]
 800c43c:	b1ed      	cbz	r5, 800c47a <__gethex+0x12a>
 800c43e:	f1bb 0f00 	cmp.w	fp, #0
 800c442:	bf0c      	ite	eq
 800c444:	2506      	moveq	r5, #6
 800c446:	2500      	movne	r5, #0
 800c448:	4628      	mov	r0, r5
 800c44a:	b005      	add	sp, #20
 800c44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c450:	2500      	movs	r5, #0
 800c452:	462c      	mov	r4, r5
 800c454:	e7b0      	b.n	800c3b8 <__gethex+0x68>
 800c456:	2c00      	cmp	r4, #0
 800c458:	d1c7      	bne.n	800c3ea <__gethex+0x9a>
 800c45a:	4627      	mov	r7, r4
 800c45c:	e7c7      	b.n	800c3ee <__gethex+0x9e>
 800c45e:	464e      	mov	r6, r9
 800c460:	462f      	mov	r7, r5
 800c462:	2501      	movs	r5, #1
 800c464:	e7c3      	b.n	800c3ee <__gethex+0x9e>
 800c466:	2400      	movs	r4, #0
 800c468:	1cb1      	adds	r1, r6, #2
 800c46a:	e7cc      	b.n	800c406 <__gethex+0xb6>
 800c46c:	2401      	movs	r4, #1
 800c46e:	e7fb      	b.n	800c468 <__gethex+0x118>
 800c470:	fb03 0002 	mla	r0, r3, r2, r0
 800c474:	e7ce      	b.n	800c414 <__gethex+0xc4>
 800c476:	4631      	mov	r1, r6
 800c478:	e7de      	b.n	800c438 <__gethex+0xe8>
 800c47a:	4629      	mov	r1, r5
 800c47c:	eba6 0309 	sub.w	r3, r6, r9
 800c480:	3b01      	subs	r3, #1
 800c482:	2b07      	cmp	r3, #7
 800c484:	dc0a      	bgt.n	800c49c <__gethex+0x14c>
 800c486:	9801      	ldr	r0, [sp, #4]
 800c488:	f000 fa46 	bl	800c918 <_Balloc>
 800c48c:	4604      	mov	r4, r0
 800c48e:	b940      	cbnz	r0, 800c4a2 <__gethex+0x152>
 800c490:	4602      	mov	r2, r0
 800c492:	21e4      	movs	r1, #228	@ 0xe4
 800c494:	4b5b      	ldr	r3, [pc, #364]	@ (800c604 <__gethex+0x2b4>)
 800c496:	485c      	ldr	r0, [pc, #368]	@ (800c608 <__gethex+0x2b8>)
 800c498:	f001 fb44 	bl	800db24 <__assert_func>
 800c49c:	3101      	adds	r1, #1
 800c49e:	105b      	asrs	r3, r3, #1
 800c4a0:	e7ef      	b.n	800c482 <__gethex+0x132>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	f100 0a14 	add.w	sl, r0, #20
 800c4a8:	4655      	mov	r5, sl
 800c4aa:	469b      	mov	fp, r3
 800c4ac:	45b1      	cmp	r9, r6
 800c4ae:	d337      	bcc.n	800c520 <__gethex+0x1d0>
 800c4b0:	f845 bb04 	str.w	fp, [r5], #4
 800c4b4:	eba5 050a 	sub.w	r5, r5, sl
 800c4b8:	10ad      	asrs	r5, r5, #2
 800c4ba:	6125      	str	r5, [r4, #16]
 800c4bc:	4658      	mov	r0, fp
 800c4be:	f000 fb1d 	bl	800cafc <__hi0bits>
 800c4c2:	016d      	lsls	r5, r5, #5
 800c4c4:	f8d8 6000 	ldr.w	r6, [r8]
 800c4c8:	1a2d      	subs	r5, r5, r0
 800c4ca:	42b5      	cmp	r5, r6
 800c4cc:	dd54      	ble.n	800c578 <__gethex+0x228>
 800c4ce:	1bad      	subs	r5, r5, r6
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f000 fe9f 	bl	800d216 <__any_on>
 800c4d8:	4681      	mov	r9, r0
 800c4da:	b178      	cbz	r0, 800c4fc <__gethex+0x1ac>
 800c4dc:	f04f 0901 	mov.w	r9, #1
 800c4e0:	1e6b      	subs	r3, r5, #1
 800c4e2:	1159      	asrs	r1, r3, #5
 800c4e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c4e8:	f003 021f 	and.w	r2, r3, #31
 800c4ec:	fa09 f202 	lsl.w	r2, r9, r2
 800c4f0:	420a      	tst	r2, r1
 800c4f2:	d003      	beq.n	800c4fc <__gethex+0x1ac>
 800c4f4:	454b      	cmp	r3, r9
 800c4f6:	dc36      	bgt.n	800c566 <__gethex+0x216>
 800c4f8:	f04f 0902 	mov.w	r9, #2
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	4620      	mov	r0, r4
 800c500:	f7ff febe 	bl	800c280 <rshift>
 800c504:	442f      	add	r7, r5
 800c506:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c50a:	42bb      	cmp	r3, r7
 800c50c:	da42      	bge.n	800c594 <__gethex+0x244>
 800c50e:	4621      	mov	r1, r4
 800c510:	9801      	ldr	r0, [sp, #4]
 800c512:	f000 fa41 	bl	800c998 <_Bfree>
 800c516:	2300      	movs	r3, #0
 800c518:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c51a:	25a3      	movs	r5, #163	@ 0xa3
 800c51c:	6013      	str	r3, [r2, #0]
 800c51e:	e793      	b.n	800c448 <__gethex+0xf8>
 800c520:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c524:	2a2e      	cmp	r2, #46	@ 0x2e
 800c526:	d012      	beq.n	800c54e <__gethex+0x1fe>
 800c528:	2b20      	cmp	r3, #32
 800c52a:	d104      	bne.n	800c536 <__gethex+0x1e6>
 800c52c:	f845 bb04 	str.w	fp, [r5], #4
 800c530:	f04f 0b00 	mov.w	fp, #0
 800c534:	465b      	mov	r3, fp
 800c536:	7830      	ldrb	r0, [r6, #0]
 800c538:	9303      	str	r3, [sp, #12]
 800c53a:	f7ff fef4 	bl	800c326 <__hexdig_fun>
 800c53e:	9b03      	ldr	r3, [sp, #12]
 800c540:	f000 000f 	and.w	r0, r0, #15
 800c544:	4098      	lsls	r0, r3
 800c546:	ea4b 0b00 	orr.w	fp, fp, r0
 800c54a:	3304      	adds	r3, #4
 800c54c:	e7ae      	b.n	800c4ac <__gethex+0x15c>
 800c54e:	45b1      	cmp	r9, r6
 800c550:	d8ea      	bhi.n	800c528 <__gethex+0x1d8>
 800c552:	2201      	movs	r2, #1
 800c554:	4630      	mov	r0, r6
 800c556:	492a      	ldr	r1, [pc, #168]	@ (800c600 <__gethex+0x2b0>)
 800c558:	9303      	str	r3, [sp, #12]
 800c55a:	f7fe ff24 	bl	800b3a6 <strncmp>
 800c55e:	9b03      	ldr	r3, [sp, #12]
 800c560:	2800      	cmp	r0, #0
 800c562:	d1e1      	bne.n	800c528 <__gethex+0x1d8>
 800c564:	e7a2      	b.n	800c4ac <__gethex+0x15c>
 800c566:	4620      	mov	r0, r4
 800c568:	1ea9      	subs	r1, r5, #2
 800c56a:	f000 fe54 	bl	800d216 <__any_on>
 800c56e:	2800      	cmp	r0, #0
 800c570:	d0c2      	beq.n	800c4f8 <__gethex+0x1a8>
 800c572:	f04f 0903 	mov.w	r9, #3
 800c576:	e7c1      	b.n	800c4fc <__gethex+0x1ac>
 800c578:	da09      	bge.n	800c58e <__gethex+0x23e>
 800c57a:	1b75      	subs	r5, r6, r5
 800c57c:	4621      	mov	r1, r4
 800c57e:	462a      	mov	r2, r5
 800c580:	9801      	ldr	r0, [sp, #4]
 800c582:	f000 fc19 	bl	800cdb8 <__lshift>
 800c586:	4604      	mov	r4, r0
 800c588:	1b7f      	subs	r7, r7, r5
 800c58a:	f100 0a14 	add.w	sl, r0, #20
 800c58e:	f04f 0900 	mov.w	r9, #0
 800c592:	e7b8      	b.n	800c506 <__gethex+0x1b6>
 800c594:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c598:	42bd      	cmp	r5, r7
 800c59a:	dd6f      	ble.n	800c67c <__gethex+0x32c>
 800c59c:	1bed      	subs	r5, r5, r7
 800c59e:	42ae      	cmp	r6, r5
 800c5a0:	dc34      	bgt.n	800c60c <__gethex+0x2bc>
 800c5a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	d022      	beq.n	800c5f0 <__gethex+0x2a0>
 800c5aa:	2b03      	cmp	r3, #3
 800c5ac:	d024      	beq.n	800c5f8 <__gethex+0x2a8>
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d115      	bne.n	800c5de <__gethex+0x28e>
 800c5b2:	42ae      	cmp	r6, r5
 800c5b4:	d113      	bne.n	800c5de <__gethex+0x28e>
 800c5b6:	2e01      	cmp	r6, #1
 800c5b8:	d10b      	bne.n	800c5d2 <__gethex+0x282>
 800c5ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c5be:	9a02      	ldr	r2, [sp, #8]
 800c5c0:	2562      	movs	r5, #98	@ 0x62
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	6123      	str	r3, [r4, #16]
 800c5c8:	f8ca 3000 	str.w	r3, [sl]
 800c5cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5ce:	601c      	str	r4, [r3, #0]
 800c5d0:	e73a      	b.n	800c448 <__gethex+0xf8>
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	1e71      	subs	r1, r6, #1
 800c5d6:	f000 fe1e 	bl	800d216 <__any_on>
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	d1ed      	bne.n	800c5ba <__gethex+0x26a>
 800c5de:	4621      	mov	r1, r4
 800c5e0:	9801      	ldr	r0, [sp, #4]
 800c5e2:	f000 f9d9 	bl	800c998 <_Bfree>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5ea:	2550      	movs	r5, #80	@ 0x50
 800c5ec:	6013      	str	r3, [r2, #0]
 800c5ee:	e72b      	b.n	800c448 <__gethex+0xf8>
 800c5f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1f3      	bne.n	800c5de <__gethex+0x28e>
 800c5f6:	e7e0      	b.n	800c5ba <__gethex+0x26a>
 800c5f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d1dd      	bne.n	800c5ba <__gethex+0x26a>
 800c5fe:	e7ee      	b.n	800c5de <__gethex+0x28e>
 800c600:	0800e248 	.word	0x0800e248
 800c604:	0800e307 	.word	0x0800e307
 800c608:	0800e318 	.word	0x0800e318
 800c60c:	1e6f      	subs	r7, r5, #1
 800c60e:	f1b9 0f00 	cmp.w	r9, #0
 800c612:	d130      	bne.n	800c676 <__gethex+0x326>
 800c614:	b127      	cbz	r7, 800c620 <__gethex+0x2d0>
 800c616:	4639      	mov	r1, r7
 800c618:	4620      	mov	r0, r4
 800c61a:	f000 fdfc 	bl	800d216 <__any_on>
 800c61e:	4681      	mov	r9, r0
 800c620:	2301      	movs	r3, #1
 800c622:	4629      	mov	r1, r5
 800c624:	1b76      	subs	r6, r6, r5
 800c626:	2502      	movs	r5, #2
 800c628:	117a      	asrs	r2, r7, #5
 800c62a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c62e:	f007 071f 	and.w	r7, r7, #31
 800c632:	40bb      	lsls	r3, r7
 800c634:	4213      	tst	r3, r2
 800c636:	4620      	mov	r0, r4
 800c638:	bf18      	it	ne
 800c63a:	f049 0902 	orrne.w	r9, r9, #2
 800c63e:	f7ff fe1f 	bl	800c280 <rshift>
 800c642:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c646:	f1b9 0f00 	cmp.w	r9, #0
 800c64a:	d047      	beq.n	800c6dc <__gethex+0x38c>
 800c64c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c650:	2b02      	cmp	r3, #2
 800c652:	d015      	beq.n	800c680 <__gethex+0x330>
 800c654:	2b03      	cmp	r3, #3
 800c656:	d017      	beq.n	800c688 <__gethex+0x338>
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d109      	bne.n	800c670 <__gethex+0x320>
 800c65c:	f019 0f02 	tst.w	r9, #2
 800c660:	d006      	beq.n	800c670 <__gethex+0x320>
 800c662:	f8da 3000 	ldr.w	r3, [sl]
 800c666:	ea49 0903 	orr.w	r9, r9, r3
 800c66a:	f019 0f01 	tst.w	r9, #1
 800c66e:	d10e      	bne.n	800c68e <__gethex+0x33e>
 800c670:	f045 0510 	orr.w	r5, r5, #16
 800c674:	e032      	b.n	800c6dc <__gethex+0x38c>
 800c676:	f04f 0901 	mov.w	r9, #1
 800c67a:	e7d1      	b.n	800c620 <__gethex+0x2d0>
 800c67c:	2501      	movs	r5, #1
 800c67e:	e7e2      	b.n	800c646 <__gethex+0x2f6>
 800c680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c682:	f1c3 0301 	rsb	r3, r3, #1
 800c686:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d0f0      	beq.n	800c670 <__gethex+0x320>
 800c68e:	f04f 0c00 	mov.w	ip, #0
 800c692:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c696:	f104 0314 	add.w	r3, r4, #20
 800c69a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c69e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c6ac:	d01b      	beq.n	800c6e6 <__gethex+0x396>
 800c6ae:	3201      	adds	r2, #1
 800c6b0:	6002      	str	r2, [r0, #0]
 800c6b2:	2d02      	cmp	r5, #2
 800c6b4:	f104 0314 	add.w	r3, r4, #20
 800c6b8:	d13c      	bne.n	800c734 <__gethex+0x3e4>
 800c6ba:	f8d8 2000 	ldr.w	r2, [r8]
 800c6be:	3a01      	subs	r2, #1
 800c6c0:	42b2      	cmp	r2, r6
 800c6c2:	d109      	bne.n	800c6d8 <__gethex+0x388>
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	1171      	asrs	r1, r6, #5
 800c6c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6cc:	f006 061f 	and.w	r6, r6, #31
 800c6d0:	fa02 f606 	lsl.w	r6, r2, r6
 800c6d4:	421e      	tst	r6, r3
 800c6d6:	d13a      	bne.n	800c74e <__gethex+0x3fe>
 800c6d8:	f045 0520 	orr.w	r5, r5, #32
 800c6dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6de:	601c      	str	r4, [r3, #0]
 800c6e0:	9b02      	ldr	r3, [sp, #8]
 800c6e2:	601f      	str	r7, [r3, #0]
 800c6e4:	e6b0      	b.n	800c448 <__gethex+0xf8>
 800c6e6:	4299      	cmp	r1, r3
 800c6e8:	f843 cc04 	str.w	ip, [r3, #-4]
 800c6ec:	d8d9      	bhi.n	800c6a2 <__gethex+0x352>
 800c6ee:	68a3      	ldr	r3, [r4, #8]
 800c6f0:	459b      	cmp	fp, r3
 800c6f2:	db17      	blt.n	800c724 <__gethex+0x3d4>
 800c6f4:	6861      	ldr	r1, [r4, #4]
 800c6f6:	9801      	ldr	r0, [sp, #4]
 800c6f8:	3101      	adds	r1, #1
 800c6fa:	f000 f90d 	bl	800c918 <_Balloc>
 800c6fe:	4681      	mov	r9, r0
 800c700:	b918      	cbnz	r0, 800c70a <__gethex+0x3ba>
 800c702:	4602      	mov	r2, r0
 800c704:	2184      	movs	r1, #132	@ 0x84
 800c706:	4b19      	ldr	r3, [pc, #100]	@ (800c76c <__gethex+0x41c>)
 800c708:	e6c5      	b.n	800c496 <__gethex+0x146>
 800c70a:	6922      	ldr	r2, [r4, #16]
 800c70c:	f104 010c 	add.w	r1, r4, #12
 800c710:	3202      	adds	r2, #2
 800c712:	0092      	lsls	r2, r2, #2
 800c714:	300c      	adds	r0, #12
 800c716:	f7fe fef6 	bl	800b506 <memcpy>
 800c71a:	4621      	mov	r1, r4
 800c71c:	9801      	ldr	r0, [sp, #4]
 800c71e:	f000 f93b 	bl	800c998 <_Bfree>
 800c722:	464c      	mov	r4, r9
 800c724:	6923      	ldr	r3, [r4, #16]
 800c726:	1c5a      	adds	r2, r3, #1
 800c728:	6122      	str	r2, [r4, #16]
 800c72a:	2201      	movs	r2, #1
 800c72c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c730:	615a      	str	r2, [r3, #20]
 800c732:	e7be      	b.n	800c6b2 <__gethex+0x362>
 800c734:	6922      	ldr	r2, [r4, #16]
 800c736:	455a      	cmp	r2, fp
 800c738:	dd0b      	ble.n	800c752 <__gethex+0x402>
 800c73a:	2101      	movs	r1, #1
 800c73c:	4620      	mov	r0, r4
 800c73e:	f7ff fd9f 	bl	800c280 <rshift>
 800c742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c746:	3701      	adds	r7, #1
 800c748:	42bb      	cmp	r3, r7
 800c74a:	f6ff aee0 	blt.w	800c50e <__gethex+0x1be>
 800c74e:	2501      	movs	r5, #1
 800c750:	e7c2      	b.n	800c6d8 <__gethex+0x388>
 800c752:	f016 061f 	ands.w	r6, r6, #31
 800c756:	d0fa      	beq.n	800c74e <__gethex+0x3fe>
 800c758:	4453      	add	r3, sl
 800c75a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c75e:	f000 f9cd 	bl	800cafc <__hi0bits>
 800c762:	f1c6 0620 	rsb	r6, r6, #32
 800c766:	42b0      	cmp	r0, r6
 800c768:	dbe7      	blt.n	800c73a <__gethex+0x3ea>
 800c76a:	e7f0      	b.n	800c74e <__gethex+0x3fe>
 800c76c:	0800e307 	.word	0x0800e307

0800c770 <L_shift>:
 800c770:	f1c2 0208 	rsb	r2, r2, #8
 800c774:	0092      	lsls	r2, r2, #2
 800c776:	b570      	push	{r4, r5, r6, lr}
 800c778:	f1c2 0620 	rsb	r6, r2, #32
 800c77c:	6843      	ldr	r3, [r0, #4]
 800c77e:	6804      	ldr	r4, [r0, #0]
 800c780:	fa03 f506 	lsl.w	r5, r3, r6
 800c784:	432c      	orrs	r4, r5
 800c786:	40d3      	lsrs	r3, r2
 800c788:	6004      	str	r4, [r0, #0]
 800c78a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c78e:	4288      	cmp	r0, r1
 800c790:	d3f4      	bcc.n	800c77c <L_shift+0xc>
 800c792:	bd70      	pop	{r4, r5, r6, pc}

0800c794 <__match>:
 800c794:	b530      	push	{r4, r5, lr}
 800c796:	6803      	ldr	r3, [r0, #0]
 800c798:	3301      	adds	r3, #1
 800c79a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c79e:	b914      	cbnz	r4, 800c7a6 <__match+0x12>
 800c7a0:	6003      	str	r3, [r0, #0]
 800c7a2:	2001      	movs	r0, #1
 800c7a4:	bd30      	pop	{r4, r5, pc}
 800c7a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7aa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c7ae:	2d19      	cmp	r5, #25
 800c7b0:	bf98      	it	ls
 800c7b2:	3220      	addls	r2, #32
 800c7b4:	42a2      	cmp	r2, r4
 800c7b6:	d0f0      	beq.n	800c79a <__match+0x6>
 800c7b8:	2000      	movs	r0, #0
 800c7ba:	e7f3      	b.n	800c7a4 <__match+0x10>

0800c7bc <__hexnan>:
 800c7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c0:	2500      	movs	r5, #0
 800c7c2:	680b      	ldr	r3, [r1, #0]
 800c7c4:	4682      	mov	sl, r0
 800c7c6:	115e      	asrs	r6, r3, #5
 800c7c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c7cc:	f013 031f 	ands.w	r3, r3, #31
 800c7d0:	bf18      	it	ne
 800c7d2:	3604      	addne	r6, #4
 800c7d4:	1f37      	subs	r7, r6, #4
 800c7d6:	4690      	mov	r8, r2
 800c7d8:	46b9      	mov	r9, r7
 800c7da:	463c      	mov	r4, r7
 800c7dc:	46ab      	mov	fp, r5
 800c7de:	b087      	sub	sp, #28
 800c7e0:	6801      	ldr	r1, [r0, #0]
 800c7e2:	9301      	str	r3, [sp, #4]
 800c7e4:	f846 5c04 	str.w	r5, [r6, #-4]
 800c7e8:	9502      	str	r5, [sp, #8]
 800c7ea:	784a      	ldrb	r2, [r1, #1]
 800c7ec:	1c4b      	adds	r3, r1, #1
 800c7ee:	9303      	str	r3, [sp, #12]
 800c7f0:	b342      	cbz	r2, 800c844 <__hexnan+0x88>
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	9105      	str	r1, [sp, #20]
 800c7f6:	9204      	str	r2, [sp, #16]
 800c7f8:	f7ff fd95 	bl	800c326 <__hexdig_fun>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d151      	bne.n	800c8a4 <__hexnan+0xe8>
 800c800:	9a04      	ldr	r2, [sp, #16]
 800c802:	9905      	ldr	r1, [sp, #20]
 800c804:	2a20      	cmp	r2, #32
 800c806:	d818      	bhi.n	800c83a <__hexnan+0x7e>
 800c808:	9b02      	ldr	r3, [sp, #8]
 800c80a:	459b      	cmp	fp, r3
 800c80c:	dd13      	ble.n	800c836 <__hexnan+0x7a>
 800c80e:	454c      	cmp	r4, r9
 800c810:	d206      	bcs.n	800c820 <__hexnan+0x64>
 800c812:	2d07      	cmp	r5, #7
 800c814:	dc04      	bgt.n	800c820 <__hexnan+0x64>
 800c816:	462a      	mov	r2, r5
 800c818:	4649      	mov	r1, r9
 800c81a:	4620      	mov	r0, r4
 800c81c:	f7ff ffa8 	bl	800c770 <L_shift>
 800c820:	4544      	cmp	r4, r8
 800c822:	d952      	bls.n	800c8ca <__hexnan+0x10e>
 800c824:	2300      	movs	r3, #0
 800c826:	f1a4 0904 	sub.w	r9, r4, #4
 800c82a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c82e:	461d      	mov	r5, r3
 800c830:	464c      	mov	r4, r9
 800c832:	f8cd b008 	str.w	fp, [sp, #8]
 800c836:	9903      	ldr	r1, [sp, #12]
 800c838:	e7d7      	b.n	800c7ea <__hexnan+0x2e>
 800c83a:	2a29      	cmp	r2, #41	@ 0x29
 800c83c:	d157      	bne.n	800c8ee <__hexnan+0x132>
 800c83e:	3102      	adds	r1, #2
 800c840:	f8ca 1000 	str.w	r1, [sl]
 800c844:	f1bb 0f00 	cmp.w	fp, #0
 800c848:	d051      	beq.n	800c8ee <__hexnan+0x132>
 800c84a:	454c      	cmp	r4, r9
 800c84c:	d206      	bcs.n	800c85c <__hexnan+0xa0>
 800c84e:	2d07      	cmp	r5, #7
 800c850:	dc04      	bgt.n	800c85c <__hexnan+0xa0>
 800c852:	462a      	mov	r2, r5
 800c854:	4649      	mov	r1, r9
 800c856:	4620      	mov	r0, r4
 800c858:	f7ff ff8a 	bl	800c770 <L_shift>
 800c85c:	4544      	cmp	r4, r8
 800c85e:	d936      	bls.n	800c8ce <__hexnan+0x112>
 800c860:	4623      	mov	r3, r4
 800c862:	f1a8 0204 	sub.w	r2, r8, #4
 800c866:	f853 1b04 	ldr.w	r1, [r3], #4
 800c86a:	429f      	cmp	r7, r3
 800c86c:	f842 1f04 	str.w	r1, [r2, #4]!
 800c870:	d2f9      	bcs.n	800c866 <__hexnan+0xaa>
 800c872:	1b3b      	subs	r3, r7, r4
 800c874:	f023 0303 	bic.w	r3, r3, #3
 800c878:	3304      	adds	r3, #4
 800c87a:	3401      	adds	r4, #1
 800c87c:	3e03      	subs	r6, #3
 800c87e:	42b4      	cmp	r4, r6
 800c880:	bf88      	it	hi
 800c882:	2304      	movhi	r3, #4
 800c884:	2200      	movs	r2, #0
 800c886:	4443      	add	r3, r8
 800c888:	f843 2b04 	str.w	r2, [r3], #4
 800c88c:	429f      	cmp	r7, r3
 800c88e:	d2fb      	bcs.n	800c888 <__hexnan+0xcc>
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	b91b      	cbnz	r3, 800c89c <__hexnan+0xe0>
 800c894:	4547      	cmp	r7, r8
 800c896:	d128      	bne.n	800c8ea <__hexnan+0x12e>
 800c898:	2301      	movs	r3, #1
 800c89a:	603b      	str	r3, [r7, #0]
 800c89c:	2005      	movs	r0, #5
 800c89e:	b007      	add	sp, #28
 800c8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a4:	3501      	adds	r5, #1
 800c8a6:	2d08      	cmp	r5, #8
 800c8a8:	f10b 0b01 	add.w	fp, fp, #1
 800c8ac:	dd06      	ble.n	800c8bc <__hexnan+0x100>
 800c8ae:	4544      	cmp	r4, r8
 800c8b0:	d9c1      	bls.n	800c836 <__hexnan+0x7a>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	2501      	movs	r5, #1
 800c8b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8ba:	3c04      	subs	r4, #4
 800c8bc:	6822      	ldr	r2, [r4, #0]
 800c8be:	f000 000f 	and.w	r0, r0, #15
 800c8c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c8c6:	6020      	str	r0, [r4, #0]
 800c8c8:	e7b5      	b.n	800c836 <__hexnan+0x7a>
 800c8ca:	2508      	movs	r5, #8
 800c8cc:	e7b3      	b.n	800c836 <__hexnan+0x7a>
 800c8ce:	9b01      	ldr	r3, [sp, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d0dd      	beq.n	800c890 <__hexnan+0xd4>
 800c8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d8:	f1c3 0320 	rsb	r3, r3, #32
 800c8dc:	40da      	lsrs	r2, r3
 800c8de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c8e2:	4013      	ands	r3, r2
 800c8e4:	f846 3c04 	str.w	r3, [r6, #-4]
 800c8e8:	e7d2      	b.n	800c890 <__hexnan+0xd4>
 800c8ea:	3f04      	subs	r7, #4
 800c8ec:	e7d0      	b.n	800c890 <__hexnan+0xd4>
 800c8ee:	2004      	movs	r0, #4
 800c8f0:	e7d5      	b.n	800c89e <__hexnan+0xe2>

0800c8f2 <__ascii_mbtowc>:
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	b901      	cbnz	r1, 800c8f8 <__ascii_mbtowc+0x6>
 800c8f6:	a901      	add	r1, sp, #4
 800c8f8:	b142      	cbz	r2, 800c90c <__ascii_mbtowc+0x1a>
 800c8fa:	b14b      	cbz	r3, 800c910 <__ascii_mbtowc+0x1e>
 800c8fc:	7813      	ldrb	r3, [r2, #0]
 800c8fe:	600b      	str	r3, [r1, #0]
 800c900:	7812      	ldrb	r2, [r2, #0]
 800c902:	1e10      	subs	r0, r2, #0
 800c904:	bf18      	it	ne
 800c906:	2001      	movne	r0, #1
 800c908:	b002      	add	sp, #8
 800c90a:	4770      	bx	lr
 800c90c:	4610      	mov	r0, r2
 800c90e:	e7fb      	b.n	800c908 <__ascii_mbtowc+0x16>
 800c910:	f06f 0001 	mvn.w	r0, #1
 800c914:	e7f8      	b.n	800c908 <__ascii_mbtowc+0x16>
	...

0800c918 <_Balloc>:
 800c918:	b570      	push	{r4, r5, r6, lr}
 800c91a:	69c6      	ldr	r6, [r0, #28]
 800c91c:	4604      	mov	r4, r0
 800c91e:	460d      	mov	r5, r1
 800c920:	b976      	cbnz	r6, 800c940 <_Balloc+0x28>
 800c922:	2010      	movs	r0, #16
 800c924:	f7fc fd7c 	bl	8009420 <malloc>
 800c928:	4602      	mov	r2, r0
 800c92a:	61e0      	str	r0, [r4, #28]
 800c92c:	b920      	cbnz	r0, 800c938 <_Balloc+0x20>
 800c92e:	216b      	movs	r1, #107	@ 0x6b
 800c930:	4b17      	ldr	r3, [pc, #92]	@ (800c990 <_Balloc+0x78>)
 800c932:	4818      	ldr	r0, [pc, #96]	@ (800c994 <_Balloc+0x7c>)
 800c934:	f001 f8f6 	bl	800db24 <__assert_func>
 800c938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c93c:	6006      	str	r6, [r0, #0]
 800c93e:	60c6      	str	r6, [r0, #12]
 800c940:	69e6      	ldr	r6, [r4, #28]
 800c942:	68f3      	ldr	r3, [r6, #12]
 800c944:	b183      	cbz	r3, 800c968 <_Balloc+0x50>
 800c946:	69e3      	ldr	r3, [r4, #28]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c94e:	b9b8      	cbnz	r0, 800c980 <_Balloc+0x68>
 800c950:	2101      	movs	r1, #1
 800c952:	fa01 f605 	lsl.w	r6, r1, r5
 800c956:	1d72      	adds	r2, r6, #5
 800c958:	4620      	mov	r0, r4
 800c95a:	0092      	lsls	r2, r2, #2
 800c95c:	f001 f900 	bl	800db60 <_calloc_r>
 800c960:	b160      	cbz	r0, 800c97c <_Balloc+0x64>
 800c962:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c966:	e00e      	b.n	800c986 <_Balloc+0x6e>
 800c968:	2221      	movs	r2, #33	@ 0x21
 800c96a:	2104      	movs	r1, #4
 800c96c:	4620      	mov	r0, r4
 800c96e:	f001 f8f7 	bl	800db60 <_calloc_r>
 800c972:	69e3      	ldr	r3, [r4, #28]
 800c974:	60f0      	str	r0, [r6, #12]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1e4      	bne.n	800c946 <_Balloc+0x2e>
 800c97c:	2000      	movs	r0, #0
 800c97e:	bd70      	pop	{r4, r5, r6, pc}
 800c980:	6802      	ldr	r2, [r0, #0]
 800c982:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c986:	2300      	movs	r3, #0
 800c988:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c98c:	e7f7      	b.n	800c97e <_Balloc+0x66>
 800c98e:	bf00      	nop
 800c990:	0800e298 	.word	0x0800e298
 800c994:	0800e378 	.word	0x0800e378

0800c998 <_Bfree>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	69c6      	ldr	r6, [r0, #28]
 800c99c:	4605      	mov	r5, r0
 800c99e:	460c      	mov	r4, r1
 800c9a0:	b976      	cbnz	r6, 800c9c0 <_Bfree+0x28>
 800c9a2:	2010      	movs	r0, #16
 800c9a4:	f7fc fd3c 	bl	8009420 <malloc>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	61e8      	str	r0, [r5, #28]
 800c9ac:	b920      	cbnz	r0, 800c9b8 <_Bfree+0x20>
 800c9ae:	218f      	movs	r1, #143	@ 0x8f
 800c9b0:	4b08      	ldr	r3, [pc, #32]	@ (800c9d4 <_Bfree+0x3c>)
 800c9b2:	4809      	ldr	r0, [pc, #36]	@ (800c9d8 <_Bfree+0x40>)
 800c9b4:	f001 f8b6 	bl	800db24 <__assert_func>
 800c9b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9bc:	6006      	str	r6, [r0, #0]
 800c9be:	60c6      	str	r6, [r0, #12]
 800c9c0:	b13c      	cbz	r4, 800c9d2 <_Bfree+0x3a>
 800c9c2:	69eb      	ldr	r3, [r5, #28]
 800c9c4:	6862      	ldr	r2, [r4, #4]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9cc:	6021      	str	r1, [r4, #0]
 800c9ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
 800c9d4:	0800e298 	.word	0x0800e298
 800c9d8:	0800e378 	.word	0x0800e378

0800c9dc <__multadd>:
 800c9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e0:	4607      	mov	r7, r0
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	461e      	mov	r6, r3
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	690d      	ldr	r5, [r1, #16]
 800c9ea:	f101 0c14 	add.w	ip, r1, #20
 800c9ee:	f8dc 3000 	ldr.w	r3, [ip]
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	b299      	uxth	r1, r3
 800c9f6:	fb02 6101 	mla	r1, r2, r1, r6
 800c9fa:	0c1e      	lsrs	r6, r3, #16
 800c9fc:	0c0b      	lsrs	r3, r1, #16
 800c9fe:	fb02 3306 	mla	r3, r2, r6, r3
 800ca02:	b289      	uxth	r1, r1
 800ca04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca08:	4285      	cmp	r5, r0
 800ca0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca0e:	f84c 1b04 	str.w	r1, [ip], #4
 800ca12:	dcec      	bgt.n	800c9ee <__multadd+0x12>
 800ca14:	b30e      	cbz	r6, 800ca5a <__multadd+0x7e>
 800ca16:	68a3      	ldr	r3, [r4, #8]
 800ca18:	42ab      	cmp	r3, r5
 800ca1a:	dc19      	bgt.n	800ca50 <__multadd+0x74>
 800ca1c:	6861      	ldr	r1, [r4, #4]
 800ca1e:	4638      	mov	r0, r7
 800ca20:	3101      	adds	r1, #1
 800ca22:	f7ff ff79 	bl	800c918 <_Balloc>
 800ca26:	4680      	mov	r8, r0
 800ca28:	b928      	cbnz	r0, 800ca36 <__multadd+0x5a>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	21ba      	movs	r1, #186	@ 0xba
 800ca2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ca60 <__multadd+0x84>)
 800ca30:	480c      	ldr	r0, [pc, #48]	@ (800ca64 <__multadd+0x88>)
 800ca32:	f001 f877 	bl	800db24 <__assert_func>
 800ca36:	6922      	ldr	r2, [r4, #16]
 800ca38:	f104 010c 	add.w	r1, r4, #12
 800ca3c:	3202      	adds	r2, #2
 800ca3e:	0092      	lsls	r2, r2, #2
 800ca40:	300c      	adds	r0, #12
 800ca42:	f7fe fd60 	bl	800b506 <memcpy>
 800ca46:	4621      	mov	r1, r4
 800ca48:	4638      	mov	r0, r7
 800ca4a:	f7ff ffa5 	bl	800c998 <_Bfree>
 800ca4e:	4644      	mov	r4, r8
 800ca50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca54:	3501      	adds	r5, #1
 800ca56:	615e      	str	r6, [r3, #20]
 800ca58:	6125      	str	r5, [r4, #16]
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca60:	0800e307 	.word	0x0800e307
 800ca64:	0800e378 	.word	0x0800e378

0800ca68 <__s2b>:
 800ca68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca6c:	4615      	mov	r5, r2
 800ca6e:	2209      	movs	r2, #9
 800ca70:	461f      	mov	r7, r3
 800ca72:	3308      	adds	r3, #8
 800ca74:	460c      	mov	r4, r1
 800ca76:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	2100      	movs	r1, #0
 800ca80:	429a      	cmp	r2, r3
 800ca82:	db09      	blt.n	800ca98 <__s2b+0x30>
 800ca84:	4630      	mov	r0, r6
 800ca86:	f7ff ff47 	bl	800c918 <_Balloc>
 800ca8a:	b940      	cbnz	r0, 800ca9e <__s2b+0x36>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	21d3      	movs	r1, #211	@ 0xd3
 800ca90:	4b18      	ldr	r3, [pc, #96]	@ (800caf4 <__s2b+0x8c>)
 800ca92:	4819      	ldr	r0, [pc, #100]	@ (800caf8 <__s2b+0x90>)
 800ca94:	f001 f846 	bl	800db24 <__assert_func>
 800ca98:	0052      	lsls	r2, r2, #1
 800ca9a:	3101      	adds	r1, #1
 800ca9c:	e7f0      	b.n	800ca80 <__s2b+0x18>
 800ca9e:	9b08      	ldr	r3, [sp, #32]
 800caa0:	2d09      	cmp	r5, #9
 800caa2:	6143      	str	r3, [r0, #20]
 800caa4:	f04f 0301 	mov.w	r3, #1
 800caa8:	6103      	str	r3, [r0, #16]
 800caaa:	dd16      	ble.n	800cada <__s2b+0x72>
 800caac:	f104 0909 	add.w	r9, r4, #9
 800cab0:	46c8      	mov	r8, r9
 800cab2:	442c      	add	r4, r5
 800cab4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cab8:	4601      	mov	r1, r0
 800caba:	220a      	movs	r2, #10
 800cabc:	4630      	mov	r0, r6
 800cabe:	3b30      	subs	r3, #48	@ 0x30
 800cac0:	f7ff ff8c 	bl	800c9dc <__multadd>
 800cac4:	45a0      	cmp	r8, r4
 800cac6:	d1f5      	bne.n	800cab4 <__s2b+0x4c>
 800cac8:	f1a5 0408 	sub.w	r4, r5, #8
 800cacc:	444c      	add	r4, r9
 800cace:	1b2d      	subs	r5, r5, r4
 800cad0:	1963      	adds	r3, r4, r5
 800cad2:	42bb      	cmp	r3, r7
 800cad4:	db04      	blt.n	800cae0 <__s2b+0x78>
 800cad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cada:	2509      	movs	r5, #9
 800cadc:	340a      	adds	r4, #10
 800cade:	e7f6      	b.n	800cace <__s2b+0x66>
 800cae0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cae4:	4601      	mov	r1, r0
 800cae6:	220a      	movs	r2, #10
 800cae8:	4630      	mov	r0, r6
 800caea:	3b30      	subs	r3, #48	@ 0x30
 800caec:	f7ff ff76 	bl	800c9dc <__multadd>
 800caf0:	e7ee      	b.n	800cad0 <__s2b+0x68>
 800caf2:	bf00      	nop
 800caf4:	0800e307 	.word	0x0800e307
 800caf8:	0800e378 	.word	0x0800e378

0800cafc <__hi0bits>:
 800cafc:	4603      	mov	r3, r0
 800cafe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cb02:	bf3a      	itte	cc
 800cb04:	0403      	lslcc	r3, r0, #16
 800cb06:	2010      	movcc	r0, #16
 800cb08:	2000      	movcs	r0, #0
 800cb0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb0e:	bf3c      	itt	cc
 800cb10:	021b      	lslcc	r3, r3, #8
 800cb12:	3008      	addcc	r0, #8
 800cb14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb18:	bf3c      	itt	cc
 800cb1a:	011b      	lslcc	r3, r3, #4
 800cb1c:	3004      	addcc	r0, #4
 800cb1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb22:	bf3c      	itt	cc
 800cb24:	009b      	lslcc	r3, r3, #2
 800cb26:	3002      	addcc	r0, #2
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	db05      	blt.n	800cb38 <__hi0bits+0x3c>
 800cb2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cb30:	f100 0001 	add.w	r0, r0, #1
 800cb34:	bf08      	it	eq
 800cb36:	2020      	moveq	r0, #32
 800cb38:	4770      	bx	lr

0800cb3a <__lo0bits>:
 800cb3a:	6803      	ldr	r3, [r0, #0]
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	f013 0007 	ands.w	r0, r3, #7
 800cb42:	d00b      	beq.n	800cb5c <__lo0bits+0x22>
 800cb44:	07d9      	lsls	r1, r3, #31
 800cb46:	d421      	bmi.n	800cb8c <__lo0bits+0x52>
 800cb48:	0798      	lsls	r0, r3, #30
 800cb4a:	bf49      	itett	mi
 800cb4c:	085b      	lsrmi	r3, r3, #1
 800cb4e:	089b      	lsrpl	r3, r3, #2
 800cb50:	2001      	movmi	r0, #1
 800cb52:	6013      	strmi	r3, [r2, #0]
 800cb54:	bf5c      	itt	pl
 800cb56:	2002      	movpl	r0, #2
 800cb58:	6013      	strpl	r3, [r2, #0]
 800cb5a:	4770      	bx	lr
 800cb5c:	b299      	uxth	r1, r3
 800cb5e:	b909      	cbnz	r1, 800cb64 <__lo0bits+0x2a>
 800cb60:	2010      	movs	r0, #16
 800cb62:	0c1b      	lsrs	r3, r3, #16
 800cb64:	b2d9      	uxtb	r1, r3
 800cb66:	b909      	cbnz	r1, 800cb6c <__lo0bits+0x32>
 800cb68:	3008      	adds	r0, #8
 800cb6a:	0a1b      	lsrs	r3, r3, #8
 800cb6c:	0719      	lsls	r1, r3, #28
 800cb6e:	bf04      	itt	eq
 800cb70:	091b      	lsreq	r3, r3, #4
 800cb72:	3004      	addeq	r0, #4
 800cb74:	0799      	lsls	r1, r3, #30
 800cb76:	bf04      	itt	eq
 800cb78:	089b      	lsreq	r3, r3, #2
 800cb7a:	3002      	addeq	r0, #2
 800cb7c:	07d9      	lsls	r1, r3, #31
 800cb7e:	d403      	bmi.n	800cb88 <__lo0bits+0x4e>
 800cb80:	085b      	lsrs	r3, r3, #1
 800cb82:	f100 0001 	add.w	r0, r0, #1
 800cb86:	d003      	beq.n	800cb90 <__lo0bits+0x56>
 800cb88:	6013      	str	r3, [r2, #0]
 800cb8a:	4770      	bx	lr
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	4770      	bx	lr
 800cb90:	2020      	movs	r0, #32
 800cb92:	4770      	bx	lr

0800cb94 <__i2b>:
 800cb94:	b510      	push	{r4, lr}
 800cb96:	460c      	mov	r4, r1
 800cb98:	2101      	movs	r1, #1
 800cb9a:	f7ff febd 	bl	800c918 <_Balloc>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	b928      	cbnz	r0, 800cbae <__i2b+0x1a>
 800cba2:	f240 1145 	movw	r1, #325	@ 0x145
 800cba6:	4b04      	ldr	r3, [pc, #16]	@ (800cbb8 <__i2b+0x24>)
 800cba8:	4804      	ldr	r0, [pc, #16]	@ (800cbbc <__i2b+0x28>)
 800cbaa:	f000 ffbb 	bl	800db24 <__assert_func>
 800cbae:	2301      	movs	r3, #1
 800cbb0:	6144      	str	r4, [r0, #20]
 800cbb2:	6103      	str	r3, [r0, #16]
 800cbb4:	bd10      	pop	{r4, pc}
 800cbb6:	bf00      	nop
 800cbb8:	0800e307 	.word	0x0800e307
 800cbbc:	0800e378 	.word	0x0800e378

0800cbc0 <__multiply>:
 800cbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc4:	4617      	mov	r7, r2
 800cbc6:	690a      	ldr	r2, [r1, #16]
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	4689      	mov	r9, r1
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	bfa2      	ittt	ge
 800cbd0:	463b      	movge	r3, r7
 800cbd2:	460f      	movge	r7, r1
 800cbd4:	4699      	movge	r9, r3
 800cbd6:	693d      	ldr	r5, [r7, #16]
 800cbd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	6879      	ldr	r1, [r7, #4]
 800cbe0:	eb05 060a 	add.w	r6, r5, sl
 800cbe4:	42b3      	cmp	r3, r6
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	bfb8      	it	lt
 800cbea:	3101      	addlt	r1, #1
 800cbec:	f7ff fe94 	bl	800c918 <_Balloc>
 800cbf0:	b930      	cbnz	r0, 800cc00 <__multiply+0x40>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cbf8:	4b40      	ldr	r3, [pc, #256]	@ (800ccfc <__multiply+0x13c>)
 800cbfa:	4841      	ldr	r0, [pc, #260]	@ (800cd00 <__multiply+0x140>)
 800cbfc:	f000 ff92 	bl	800db24 <__assert_func>
 800cc00:	f100 0414 	add.w	r4, r0, #20
 800cc04:	4623      	mov	r3, r4
 800cc06:	2200      	movs	r2, #0
 800cc08:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cc0c:	4573      	cmp	r3, lr
 800cc0e:	d320      	bcc.n	800cc52 <__multiply+0x92>
 800cc10:	f107 0814 	add.w	r8, r7, #20
 800cc14:	f109 0114 	add.w	r1, r9, #20
 800cc18:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cc1c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cc20:	9302      	str	r3, [sp, #8]
 800cc22:	1beb      	subs	r3, r5, r7
 800cc24:	3b15      	subs	r3, #21
 800cc26:	f023 0303 	bic.w	r3, r3, #3
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	3715      	adds	r7, #21
 800cc2e:	42bd      	cmp	r5, r7
 800cc30:	bf38      	it	cc
 800cc32:	2304      	movcc	r3, #4
 800cc34:	9301      	str	r3, [sp, #4]
 800cc36:	9b02      	ldr	r3, [sp, #8]
 800cc38:	9103      	str	r1, [sp, #12]
 800cc3a:	428b      	cmp	r3, r1
 800cc3c:	d80c      	bhi.n	800cc58 <__multiply+0x98>
 800cc3e:	2e00      	cmp	r6, #0
 800cc40:	dd03      	ble.n	800cc4a <__multiply+0x8a>
 800cc42:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d055      	beq.n	800ccf6 <__multiply+0x136>
 800cc4a:	6106      	str	r6, [r0, #16]
 800cc4c:	b005      	add	sp, #20
 800cc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc52:	f843 2b04 	str.w	r2, [r3], #4
 800cc56:	e7d9      	b.n	800cc0c <__multiply+0x4c>
 800cc58:	f8b1 a000 	ldrh.w	sl, [r1]
 800cc5c:	f1ba 0f00 	cmp.w	sl, #0
 800cc60:	d01f      	beq.n	800cca2 <__multiply+0xe2>
 800cc62:	46c4      	mov	ip, r8
 800cc64:	46a1      	mov	r9, r4
 800cc66:	2700      	movs	r7, #0
 800cc68:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cc6c:	f8d9 3000 	ldr.w	r3, [r9]
 800cc70:	fa1f fb82 	uxth.w	fp, r2
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	fb0a 330b 	mla	r3, sl, fp, r3
 800cc7a:	443b      	add	r3, r7
 800cc7c:	f8d9 7000 	ldr.w	r7, [r9]
 800cc80:	0c12      	lsrs	r2, r2, #16
 800cc82:	0c3f      	lsrs	r7, r7, #16
 800cc84:	fb0a 7202 	mla	r2, sl, r2, r7
 800cc88:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc92:	4565      	cmp	r5, ip
 800cc94:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cc98:	f849 3b04 	str.w	r3, [r9], #4
 800cc9c:	d8e4      	bhi.n	800cc68 <__multiply+0xa8>
 800cc9e:	9b01      	ldr	r3, [sp, #4]
 800cca0:	50e7      	str	r7, [r4, r3]
 800cca2:	9b03      	ldr	r3, [sp, #12]
 800cca4:	3104      	adds	r1, #4
 800cca6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ccaa:	f1b9 0f00 	cmp.w	r9, #0
 800ccae:	d020      	beq.n	800ccf2 <__multiply+0x132>
 800ccb0:	4647      	mov	r7, r8
 800ccb2:	46a4      	mov	ip, r4
 800ccb4:	f04f 0a00 	mov.w	sl, #0
 800ccb8:	6823      	ldr	r3, [r4, #0]
 800ccba:	f8b7 b000 	ldrh.w	fp, [r7]
 800ccbe:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	fb09 220b 	mla	r2, r9, fp, r2
 800ccc8:	4452      	add	r2, sl
 800ccca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccce:	f84c 3b04 	str.w	r3, [ip], #4
 800ccd2:	f857 3b04 	ldr.w	r3, [r7], #4
 800ccd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccda:	f8bc 3000 	ldrh.w	r3, [ip]
 800ccde:	42bd      	cmp	r5, r7
 800cce0:	fb09 330a 	mla	r3, r9, sl, r3
 800cce4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cce8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccec:	d8e5      	bhi.n	800ccba <__multiply+0xfa>
 800ccee:	9a01      	ldr	r2, [sp, #4]
 800ccf0:	50a3      	str	r3, [r4, r2]
 800ccf2:	3404      	adds	r4, #4
 800ccf4:	e79f      	b.n	800cc36 <__multiply+0x76>
 800ccf6:	3e01      	subs	r6, #1
 800ccf8:	e7a1      	b.n	800cc3e <__multiply+0x7e>
 800ccfa:	bf00      	nop
 800ccfc:	0800e307 	.word	0x0800e307
 800cd00:	0800e378 	.word	0x0800e378

0800cd04 <__pow5mult>:
 800cd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd08:	4615      	mov	r5, r2
 800cd0a:	f012 0203 	ands.w	r2, r2, #3
 800cd0e:	4607      	mov	r7, r0
 800cd10:	460e      	mov	r6, r1
 800cd12:	d007      	beq.n	800cd24 <__pow5mult+0x20>
 800cd14:	4c25      	ldr	r4, [pc, #148]	@ (800cdac <__pow5mult+0xa8>)
 800cd16:	3a01      	subs	r2, #1
 800cd18:	2300      	movs	r3, #0
 800cd1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd1e:	f7ff fe5d 	bl	800c9dc <__multadd>
 800cd22:	4606      	mov	r6, r0
 800cd24:	10ad      	asrs	r5, r5, #2
 800cd26:	d03d      	beq.n	800cda4 <__pow5mult+0xa0>
 800cd28:	69fc      	ldr	r4, [r7, #28]
 800cd2a:	b97c      	cbnz	r4, 800cd4c <__pow5mult+0x48>
 800cd2c:	2010      	movs	r0, #16
 800cd2e:	f7fc fb77 	bl	8009420 <malloc>
 800cd32:	4602      	mov	r2, r0
 800cd34:	61f8      	str	r0, [r7, #28]
 800cd36:	b928      	cbnz	r0, 800cd44 <__pow5mult+0x40>
 800cd38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cd3c:	4b1c      	ldr	r3, [pc, #112]	@ (800cdb0 <__pow5mult+0xac>)
 800cd3e:	481d      	ldr	r0, [pc, #116]	@ (800cdb4 <__pow5mult+0xb0>)
 800cd40:	f000 fef0 	bl	800db24 <__assert_func>
 800cd44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd48:	6004      	str	r4, [r0, #0]
 800cd4a:	60c4      	str	r4, [r0, #12]
 800cd4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cd50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd54:	b94c      	cbnz	r4, 800cd6a <__pow5mult+0x66>
 800cd56:	f240 2171 	movw	r1, #625	@ 0x271
 800cd5a:	4638      	mov	r0, r7
 800cd5c:	f7ff ff1a 	bl	800cb94 <__i2b>
 800cd60:	2300      	movs	r3, #0
 800cd62:	4604      	mov	r4, r0
 800cd64:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd68:	6003      	str	r3, [r0, #0]
 800cd6a:	f04f 0900 	mov.w	r9, #0
 800cd6e:	07eb      	lsls	r3, r5, #31
 800cd70:	d50a      	bpl.n	800cd88 <__pow5mult+0x84>
 800cd72:	4631      	mov	r1, r6
 800cd74:	4622      	mov	r2, r4
 800cd76:	4638      	mov	r0, r7
 800cd78:	f7ff ff22 	bl	800cbc0 <__multiply>
 800cd7c:	4680      	mov	r8, r0
 800cd7e:	4631      	mov	r1, r6
 800cd80:	4638      	mov	r0, r7
 800cd82:	f7ff fe09 	bl	800c998 <_Bfree>
 800cd86:	4646      	mov	r6, r8
 800cd88:	106d      	asrs	r5, r5, #1
 800cd8a:	d00b      	beq.n	800cda4 <__pow5mult+0xa0>
 800cd8c:	6820      	ldr	r0, [r4, #0]
 800cd8e:	b938      	cbnz	r0, 800cda0 <__pow5mult+0x9c>
 800cd90:	4622      	mov	r2, r4
 800cd92:	4621      	mov	r1, r4
 800cd94:	4638      	mov	r0, r7
 800cd96:	f7ff ff13 	bl	800cbc0 <__multiply>
 800cd9a:	6020      	str	r0, [r4, #0]
 800cd9c:	f8c0 9000 	str.w	r9, [r0]
 800cda0:	4604      	mov	r4, r0
 800cda2:	e7e4      	b.n	800cd6e <__pow5mult+0x6a>
 800cda4:	4630      	mov	r0, r6
 800cda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdaa:	bf00      	nop
 800cdac:	0800e470 	.word	0x0800e470
 800cdb0:	0800e298 	.word	0x0800e298
 800cdb4:	0800e378 	.word	0x0800e378

0800cdb8 <__lshift>:
 800cdb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdbc:	460c      	mov	r4, r1
 800cdbe:	4607      	mov	r7, r0
 800cdc0:	4691      	mov	r9, r2
 800cdc2:	6923      	ldr	r3, [r4, #16]
 800cdc4:	6849      	ldr	r1, [r1, #4]
 800cdc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cdca:	68a3      	ldr	r3, [r4, #8]
 800cdcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdd0:	f108 0601 	add.w	r6, r8, #1
 800cdd4:	42b3      	cmp	r3, r6
 800cdd6:	db0b      	blt.n	800cdf0 <__lshift+0x38>
 800cdd8:	4638      	mov	r0, r7
 800cdda:	f7ff fd9d 	bl	800c918 <_Balloc>
 800cdde:	4605      	mov	r5, r0
 800cde0:	b948      	cbnz	r0, 800cdf6 <__lshift+0x3e>
 800cde2:	4602      	mov	r2, r0
 800cde4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cde8:	4b27      	ldr	r3, [pc, #156]	@ (800ce88 <__lshift+0xd0>)
 800cdea:	4828      	ldr	r0, [pc, #160]	@ (800ce8c <__lshift+0xd4>)
 800cdec:	f000 fe9a 	bl	800db24 <__assert_func>
 800cdf0:	3101      	adds	r1, #1
 800cdf2:	005b      	lsls	r3, r3, #1
 800cdf4:	e7ee      	b.n	800cdd4 <__lshift+0x1c>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	f100 0114 	add.w	r1, r0, #20
 800cdfc:	f100 0210 	add.w	r2, r0, #16
 800ce00:	4618      	mov	r0, r3
 800ce02:	4553      	cmp	r3, sl
 800ce04:	db33      	blt.n	800ce6e <__lshift+0xb6>
 800ce06:	6920      	ldr	r0, [r4, #16]
 800ce08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce0c:	f104 0314 	add.w	r3, r4, #20
 800ce10:	f019 091f 	ands.w	r9, r9, #31
 800ce14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce1c:	d02b      	beq.n	800ce76 <__lshift+0xbe>
 800ce1e:	468a      	mov	sl, r1
 800ce20:	2200      	movs	r2, #0
 800ce22:	f1c9 0e20 	rsb	lr, r9, #32
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	fa00 f009 	lsl.w	r0, r0, r9
 800ce2c:	4310      	orrs	r0, r2
 800ce2e:	f84a 0b04 	str.w	r0, [sl], #4
 800ce32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce36:	459c      	cmp	ip, r3
 800ce38:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce3c:	d8f3      	bhi.n	800ce26 <__lshift+0x6e>
 800ce3e:	ebac 0304 	sub.w	r3, ip, r4
 800ce42:	3b15      	subs	r3, #21
 800ce44:	f023 0303 	bic.w	r3, r3, #3
 800ce48:	3304      	adds	r3, #4
 800ce4a:	f104 0015 	add.w	r0, r4, #21
 800ce4e:	4560      	cmp	r0, ip
 800ce50:	bf88      	it	hi
 800ce52:	2304      	movhi	r3, #4
 800ce54:	50ca      	str	r2, [r1, r3]
 800ce56:	b10a      	cbz	r2, 800ce5c <__lshift+0xa4>
 800ce58:	f108 0602 	add.w	r6, r8, #2
 800ce5c:	3e01      	subs	r6, #1
 800ce5e:	4638      	mov	r0, r7
 800ce60:	4621      	mov	r1, r4
 800ce62:	612e      	str	r6, [r5, #16]
 800ce64:	f7ff fd98 	bl	800c998 <_Bfree>
 800ce68:	4628      	mov	r0, r5
 800ce6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce72:	3301      	adds	r3, #1
 800ce74:	e7c5      	b.n	800ce02 <__lshift+0x4a>
 800ce76:	3904      	subs	r1, #4
 800ce78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce7c:	459c      	cmp	ip, r3
 800ce7e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce82:	d8f9      	bhi.n	800ce78 <__lshift+0xc0>
 800ce84:	e7ea      	b.n	800ce5c <__lshift+0xa4>
 800ce86:	bf00      	nop
 800ce88:	0800e307 	.word	0x0800e307
 800ce8c:	0800e378 	.word	0x0800e378

0800ce90 <__mcmp>:
 800ce90:	4603      	mov	r3, r0
 800ce92:	690a      	ldr	r2, [r1, #16]
 800ce94:	6900      	ldr	r0, [r0, #16]
 800ce96:	b530      	push	{r4, r5, lr}
 800ce98:	1a80      	subs	r0, r0, r2
 800ce9a:	d10e      	bne.n	800ceba <__mcmp+0x2a>
 800ce9c:	3314      	adds	r3, #20
 800ce9e:	3114      	adds	r1, #20
 800cea0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cea4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cea8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ceac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ceb0:	4295      	cmp	r5, r2
 800ceb2:	d003      	beq.n	800cebc <__mcmp+0x2c>
 800ceb4:	d205      	bcs.n	800cec2 <__mcmp+0x32>
 800ceb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ceba:	bd30      	pop	{r4, r5, pc}
 800cebc:	42a3      	cmp	r3, r4
 800cebe:	d3f3      	bcc.n	800cea8 <__mcmp+0x18>
 800cec0:	e7fb      	b.n	800ceba <__mcmp+0x2a>
 800cec2:	2001      	movs	r0, #1
 800cec4:	e7f9      	b.n	800ceba <__mcmp+0x2a>
	...

0800cec8 <__mdiff>:
 800cec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cecc:	4689      	mov	r9, r1
 800cece:	4606      	mov	r6, r0
 800ced0:	4611      	mov	r1, r2
 800ced2:	4648      	mov	r0, r9
 800ced4:	4614      	mov	r4, r2
 800ced6:	f7ff ffdb 	bl	800ce90 <__mcmp>
 800ceda:	1e05      	subs	r5, r0, #0
 800cedc:	d112      	bne.n	800cf04 <__mdiff+0x3c>
 800cede:	4629      	mov	r1, r5
 800cee0:	4630      	mov	r0, r6
 800cee2:	f7ff fd19 	bl	800c918 <_Balloc>
 800cee6:	4602      	mov	r2, r0
 800cee8:	b928      	cbnz	r0, 800cef6 <__mdiff+0x2e>
 800ceea:	f240 2137 	movw	r1, #567	@ 0x237
 800ceee:	4b3e      	ldr	r3, [pc, #248]	@ (800cfe8 <__mdiff+0x120>)
 800cef0:	483e      	ldr	r0, [pc, #248]	@ (800cfec <__mdiff+0x124>)
 800cef2:	f000 fe17 	bl	800db24 <__assert_func>
 800cef6:	2301      	movs	r3, #1
 800cef8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cefc:	4610      	mov	r0, r2
 800cefe:	b003      	add	sp, #12
 800cf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf04:	bfbc      	itt	lt
 800cf06:	464b      	movlt	r3, r9
 800cf08:	46a1      	movlt	r9, r4
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cf10:	bfba      	itte	lt
 800cf12:	461c      	movlt	r4, r3
 800cf14:	2501      	movlt	r5, #1
 800cf16:	2500      	movge	r5, #0
 800cf18:	f7ff fcfe 	bl	800c918 <_Balloc>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	b918      	cbnz	r0, 800cf28 <__mdiff+0x60>
 800cf20:	f240 2145 	movw	r1, #581	@ 0x245
 800cf24:	4b30      	ldr	r3, [pc, #192]	@ (800cfe8 <__mdiff+0x120>)
 800cf26:	e7e3      	b.n	800cef0 <__mdiff+0x28>
 800cf28:	f100 0b14 	add.w	fp, r0, #20
 800cf2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cf30:	f109 0310 	add.w	r3, r9, #16
 800cf34:	60c5      	str	r5, [r0, #12]
 800cf36:	f04f 0c00 	mov.w	ip, #0
 800cf3a:	f109 0514 	add.w	r5, r9, #20
 800cf3e:	46d9      	mov	r9, fp
 800cf40:	6926      	ldr	r6, [r4, #16]
 800cf42:	f104 0e14 	add.w	lr, r4, #20
 800cf46:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cf4a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cf4e:	9301      	str	r3, [sp, #4]
 800cf50:	9b01      	ldr	r3, [sp, #4]
 800cf52:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cf56:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cf5a:	b281      	uxth	r1, r0
 800cf5c:	9301      	str	r3, [sp, #4]
 800cf5e:	fa1f f38a 	uxth.w	r3, sl
 800cf62:	1a5b      	subs	r3, r3, r1
 800cf64:	0c00      	lsrs	r0, r0, #16
 800cf66:	4463      	add	r3, ip
 800cf68:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cf6c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cf76:	4576      	cmp	r6, lr
 800cf78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf7c:	f849 3b04 	str.w	r3, [r9], #4
 800cf80:	d8e6      	bhi.n	800cf50 <__mdiff+0x88>
 800cf82:	1b33      	subs	r3, r6, r4
 800cf84:	3b15      	subs	r3, #21
 800cf86:	f023 0303 	bic.w	r3, r3, #3
 800cf8a:	3415      	adds	r4, #21
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	42a6      	cmp	r6, r4
 800cf90:	bf38      	it	cc
 800cf92:	2304      	movcc	r3, #4
 800cf94:	441d      	add	r5, r3
 800cf96:	445b      	add	r3, fp
 800cf98:	461e      	mov	r6, r3
 800cf9a:	462c      	mov	r4, r5
 800cf9c:	4544      	cmp	r4, r8
 800cf9e:	d30e      	bcc.n	800cfbe <__mdiff+0xf6>
 800cfa0:	f108 0103 	add.w	r1, r8, #3
 800cfa4:	1b49      	subs	r1, r1, r5
 800cfa6:	f021 0103 	bic.w	r1, r1, #3
 800cfaa:	3d03      	subs	r5, #3
 800cfac:	45a8      	cmp	r8, r5
 800cfae:	bf38      	it	cc
 800cfb0:	2100      	movcc	r1, #0
 800cfb2:	440b      	add	r3, r1
 800cfb4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cfb8:	b199      	cbz	r1, 800cfe2 <__mdiff+0x11a>
 800cfba:	6117      	str	r7, [r2, #16]
 800cfbc:	e79e      	b.n	800cefc <__mdiff+0x34>
 800cfbe:	46e6      	mov	lr, ip
 800cfc0:	f854 1b04 	ldr.w	r1, [r4], #4
 800cfc4:	fa1f fc81 	uxth.w	ip, r1
 800cfc8:	44f4      	add	ip, lr
 800cfca:	0c08      	lsrs	r0, r1, #16
 800cfcc:	4471      	add	r1, lr
 800cfce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cfd2:	b289      	uxth	r1, r1
 800cfd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cfd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cfdc:	f846 1b04 	str.w	r1, [r6], #4
 800cfe0:	e7dc      	b.n	800cf9c <__mdiff+0xd4>
 800cfe2:	3f01      	subs	r7, #1
 800cfe4:	e7e6      	b.n	800cfb4 <__mdiff+0xec>
 800cfe6:	bf00      	nop
 800cfe8:	0800e307 	.word	0x0800e307
 800cfec:	0800e378 	.word	0x0800e378

0800cff0 <__ulp>:
 800cff0:	4b0e      	ldr	r3, [pc, #56]	@ (800d02c <__ulp+0x3c>)
 800cff2:	400b      	ands	r3, r1
 800cff4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	dc08      	bgt.n	800d00e <__ulp+0x1e>
 800cffc:	425b      	negs	r3, r3
 800cffe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d002:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d006:	da04      	bge.n	800d012 <__ulp+0x22>
 800d008:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d00c:	4113      	asrs	r3, r2
 800d00e:	2200      	movs	r2, #0
 800d010:	e008      	b.n	800d024 <__ulp+0x34>
 800d012:	f1a2 0314 	sub.w	r3, r2, #20
 800d016:	2b1e      	cmp	r3, #30
 800d018:	bfd6      	itet	le
 800d01a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d01e:	2201      	movgt	r2, #1
 800d020:	40da      	lsrle	r2, r3
 800d022:	2300      	movs	r3, #0
 800d024:	4619      	mov	r1, r3
 800d026:	4610      	mov	r0, r2
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	7ff00000 	.word	0x7ff00000

0800d030 <__b2d>:
 800d030:	6902      	ldr	r2, [r0, #16]
 800d032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d034:	f100 0614 	add.w	r6, r0, #20
 800d038:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d03c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d040:	4f1e      	ldr	r7, [pc, #120]	@ (800d0bc <__b2d+0x8c>)
 800d042:	4620      	mov	r0, r4
 800d044:	f7ff fd5a 	bl	800cafc <__hi0bits>
 800d048:	4603      	mov	r3, r0
 800d04a:	f1c0 0020 	rsb	r0, r0, #32
 800d04e:	2b0a      	cmp	r3, #10
 800d050:	f1a2 0504 	sub.w	r5, r2, #4
 800d054:	6008      	str	r0, [r1, #0]
 800d056:	dc12      	bgt.n	800d07e <__b2d+0x4e>
 800d058:	42ae      	cmp	r6, r5
 800d05a:	bf2c      	ite	cs
 800d05c:	2200      	movcs	r2, #0
 800d05e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d062:	f1c3 0c0b 	rsb	ip, r3, #11
 800d066:	3315      	adds	r3, #21
 800d068:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d06c:	fa04 f303 	lsl.w	r3, r4, r3
 800d070:	fa22 f20c 	lsr.w	r2, r2, ip
 800d074:	ea4e 0107 	orr.w	r1, lr, r7
 800d078:	431a      	orrs	r2, r3
 800d07a:	4610      	mov	r0, r2
 800d07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d07e:	42ae      	cmp	r6, r5
 800d080:	bf36      	itet	cc
 800d082:	f1a2 0508 	subcc.w	r5, r2, #8
 800d086:	2200      	movcs	r2, #0
 800d088:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d08c:	3b0b      	subs	r3, #11
 800d08e:	d012      	beq.n	800d0b6 <__b2d+0x86>
 800d090:	f1c3 0720 	rsb	r7, r3, #32
 800d094:	fa22 f107 	lsr.w	r1, r2, r7
 800d098:	409c      	lsls	r4, r3
 800d09a:	430c      	orrs	r4, r1
 800d09c:	42b5      	cmp	r5, r6
 800d09e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d0a2:	bf94      	ite	ls
 800d0a4:	2400      	movls	r4, #0
 800d0a6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d0aa:	409a      	lsls	r2, r3
 800d0ac:	40fc      	lsrs	r4, r7
 800d0ae:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d0b2:	4322      	orrs	r2, r4
 800d0b4:	e7e1      	b.n	800d07a <__b2d+0x4a>
 800d0b6:	ea44 0107 	orr.w	r1, r4, r7
 800d0ba:	e7de      	b.n	800d07a <__b2d+0x4a>
 800d0bc:	3ff00000 	.word	0x3ff00000

0800d0c0 <__d2b>:
 800d0c0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d0c4:	2101      	movs	r1, #1
 800d0c6:	4690      	mov	r8, r2
 800d0c8:	4699      	mov	r9, r3
 800d0ca:	9e08      	ldr	r6, [sp, #32]
 800d0cc:	f7ff fc24 	bl	800c918 <_Balloc>
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	b930      	cbnz	r0, 800d0e2 <__d2b+0x22>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	f240 310f 	movw	r1, #783	@ 0x30f
 800d0da:	4b23      	ldr	r3, [pc, #140]	@ (800d168 <__d2b+0xa8>)
 800d0dc:	4823      	ldr	r0, [pc, #140]	@ (800d16c <__d2b+0xac>)
 800d0de:	f000 fd21 	bl	800db24 <__assert_func>
 800d0e2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d0e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0ea:	b10d      	cbz	r5, 800d0f0 <__d2b+0x30>
 800d0ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0f0:	9301      	str	r3, [sp, #4]
 800d0f2:	f1b8 0300 	subs.w	r3, r8, #0
 800d0f6:	d024      	beq.n	800d142 <__d2b+0x82>
 800d0f8:	4668      	mov	r0, sp
 800d0fa:	9300      	str	r3, [sp, #0]
 800d0fc:	f7ff fd1d 	bl	800cb3a <__lo0bits>
 800d100:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d104:	b1d8      	cbz	r0, 800d13e <__d2b+0x7e>
 800d106:	f1c0 0320 	rsb	r3, r0, #32
 800d10a:	fa02 f303 	lsl.w	r3, r2, r3
 800d10e:	430b      	orrs	r3, r1
 800d110:	40c2      	lsrs	r2, r0
 800d112:	6163      	str	r3, [r4, #20]
 800d114:	9201      	str	r2, [sp, #4]
 800d116:	9b01      	ldr	r3, [sp, #4]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	bf0c      	ite	eq
 800d11c:	2201      	moveq	r2, #1
 800d11e:	2202      	movne	r2, #2
 800d120:	61a3      	str	r3, [r4, #24]
 800d122:	6122      	str	r2, [r4, #16]
 800d124:	b1ad      	cbz	r5, 800d152 <__d2b+0x92>
 800d126:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d12a:	4405      	add	r5, r0
 800d12c:	6035      	str	r5, [r6, #0]
 800d12e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d134:	6018      	str	r0, [r3, #0]
 800d136:	4620      	mov	r0, r4
 800d138:	b002      	add	sp, #8
 800d13a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d13e:	6161      	str	r1, [r4, #20]
 800d140:	e7e9      	b.n	800d116 <__d2b+0x56>
 800d142:	a801      	add	r0, sp, #4
 800d144:	f7ff fcf9 	bl	800cb3a <__lo0bits>
 800d148:	9b01      	ldr	r3, [sp, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	6163      	str	r3, [r4, #20]
 800d14e:	3020      	adds	r0, #32
 800d150:	e7e7      	b.n	800d122 <__d2b+0x62>
 800d152:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d156:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d15a:	6030      	str	r0, [r6, #0]
 800d15c:	6918      	ldr	r0, [r3, #16]
 800d15e:	f7ff fccd 	bl	800cafc <__hi0bits>
 800d162:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d166:	e7e4      	b.n	800d132 <__d2b+0x72>
 800d168:	0800e307 	.word	0x0800e307
 800d16c:	0800e378 	.word	0x0800e378

0800d170 <__ratio>:
 800d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d174:	b085      	sub	sp, #20
 800d176:	e9cd 1000 	strd	r1, r0, [sp]
 800d17a:	a902      	add	r1, sp, #8
 800d17c:	f7ff ff58 	bl	800d030 <__b2d>
 800d180:	468b      	mov	fp, r1
 800d182:	4606      	mov	r6, r0
 800d184:	460f      	mov	r7, r1
 800d186:	9800      	ldr	r0, [sp, #0]
 800d188:	a903      	add	r1, sp, #12
 800d18a:	f7ff ff51 	bl	800d030 <__b2d>
 800d18e:	460d      	mov	r5, r1
 800d190:	9b01      	ldr	r3, [sp, #4]
 800d192:	4689      	mov	r9, r1
 800d194:	6919      	ldr	r1, [r3, #16]
 800d196:	9b00      	ldr	r3, [sp, #0]
 800d198:	4604      	mov	r4, r0
 800d19a:	691b      	ldr	r3, [r3, #16]
 800d19c:	4630      	mov	r0, r6
 800d19e:	1ac9      	subs	r1, r1, r3
 800d1a0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d1a4:	1a9b      	subs	r3, r3, r2
 800d1a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	bfcd      	iteet	gt
 800d1ae:	463a      	movgt	r2, r7
 800d1b0:	462a      	movle	r2, r5
 800d1b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d1b6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d1ba:	bfd8      	it	le
 800d1bc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d1c0:	464b      	mov	r3, r9
 800d1c2:	4622      	mov	r2, r4
 800d1c4:	4659      	mov	r1, fp
 800d1c6:	f7f3 fabb 	bl	8000740 <__aeabi_ddiv>
 800d1ca:	b005      	add	sp, #20
 800d1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1d0 <__copybits>:
 800d1d0:	3901      	subs	r1, #1
 800d1d2:	b570      	push	{r4, r5, r6, lr}
 800d1d4:	1149      	asrs	r1, r1, #5
 800d1d6:	6914      	ldr	r4, [r2, #16]
 800d1d8:	3101      	adds	r1, #1
 800d1da:	f102 0314 	add.w	r3, r2, #20
 800d1de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d1e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1e6:	1f05      	subs	r5, r0, #4
 800d1e8:	42a3      	cmp	r3, r4
 800d1ea:	d30c      	bcc.n	800d206 <__copybits+0x36>
 800d1ec:	1aa3      	subs	r3, r4, r2
 800d1ee:	3b11      	subs	r3, #17
 800d1f0:	f023 0303 	bic.w	r3, r3, #3
 800d1f4:	3211      	adds	r2, #17
 800d1f6:	42a2      	cmp	r2, r4
 800d1f8:	bf88      	it	hi
 800d1fa:	2300      	movhi	r3, #0
 800d1fc:	4418      	add	r0, r3
 800d1fe:	2300      	movs	r3, #0
 800d200:	4288      	cmp	r0, r1
 800d202:	d305      	bcc.n	800d210 <__copybits+0x40>
 800d204:	bd70      	pop	{r4, r5, r6, pc}
 800d206:	f853 6b04 	ldr.w	r6, [r3], #4
 800d20a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d20e:	e7eb      	b.n	800d1e8 <__copybits+0x18>
 800d210:	f840 3b04 	str.w	r3, [r0], #4
 800d214:	e7f4      	b.n	800d200 <__copybits+0x30>

0800d216 <__any_on>:
 800d216:	f100 0214 	add.w	r2, r0, #20
 800d21a:	6900      	ldr	r0, [r0, #16]
 800d21c:	114b      	asrs	r3, r1, #5
 800d21e:	4298      	cmp	r0, r3
 800d220:	b510      	push	{r4, lr}
 800d222:	db11      	blt.n	800d248 <__any_on+0x32>
 800d224:	dd0a      	ble.n	800d23c <__any_on+0x26>
 800d226:	f011 011f 	ands.w	r1, r1, #31
 800d22a:	d007      	beq.n	800d23c <__any_on+0x26>
 800d22c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d230:	fa24 f001 	lsr.w	r0, r4, r1
 800d234:	fa00 f101 	lsl.w	r1, r0, r1
 800d238:	428c      	cmp	r4, r1
 800d23a:	d10b      	bne.n	800d254 <__any_on+0x3e>
 800d23c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d240:	4293      	cmp	r3, r2
 800d242:	d803      	bhi.n	800d24c <__any_on+0x36>
 800d244:	2000      	movs	r0, #0
 800d246:	bd10      	pop	{r4, pc}
 800d248:	4603      	mov	r3, r0
 800d24a:	e7f7      	b.n	800d23c <__any_on+0x26>
 800d24c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d250:	2900      	cmp	r1, #0
 800d252:	d0f5      	beq.n	800d240 <__any_on+0x2a>
 800d254:	2001      	movs	r0, #1
 800d256:	e7f6      	b.n	800d246 <__any_on+0x30>

0800d258 <_strtol_l.isra.0>:
 800d258:	2b24      	cmp	r3, #36	@ 0x24
 800d25a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d25e:	4686      	mov	lr, r0
 800d260:	4690      	mov	r8, r2
 800d262:	d801      	bhi.n	800d268 <_strtol_l.isra.0+0x10>
 800d264:	2b01      	cmp	r3, #1
 800d266:	d106      	bne.n	800d276 <_strtol_l.isra.0+0x1e>
 800d268:	f7fe f90a 	bl	800b480 <__errno>
 800d26c:	2316      	movs	r3, #22
 800d26e:	6003      	str	r3, [r0, #0]
 800d270:	2000      	movs	r0, #0
 800d272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d276:	460d      	mov	r5, r1
 800d278:	4833      	ldr	r0, [pc, #204]	@ (800d348 <_strtol_l.isra.0+0xf0>)
 800d27a:	462a      	mov	r2, r5
 800d27c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d280:	5d06      	ldrb	r6, [r0, r4]
 800d282:	f016 0608 	ands.w	r6, r6, #8
 800d286:	d1f8      	bne.n	800d27a <_strtol_l.isra.0+0x22>
 800d288:	2c2d      	cmp	r4, #45	@ 0x2d
 800d28a:	d110      	bne.n	800d2ae <_strtol_l.isra.0+0x56>
 800d28c:	2601      	movs	r6, #1
 800d28e:	782c      	ldrb	r4, [r5, #0]
 800d290:	1c95      	adds	r5, r2, #2
 800d292:	f033 0210 	bics.w	r2, r3, #16
 800d296:	d115      	bne.n	800d2c4 <_strtol_l.isra.0+0x6c>
 800d298:	2c30      	cmp	r4, #48	@ 0x30
 800d29a:	d10d      	bne.n	800d2b8 <_strtol_l.isra.0+0x60>
 800d29c:	782a      	ldrb	r2, [r5, #0]
 800d29e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d2a2:	2a58      	cmp	r2, #88	@ 0x58
 800d2a4:	d108      	bne.n	800d2b8 <_strtol_l.isra.0+0x60>
 800d2a6:	786c      	ldrb	r4, [r5, #1]
 800d2a8:	3502      	adds	r5, #2
 800d2aa:	2310      	movs	r3, #16
 800d2ac:	e00a      	b.n	800d2c4 <_strtol_l.isra.0+0x6c>
 800d2ae:	2c2b      	cmp	r4, #43	@ 0x2b
 800d2b0:	bf04      	itt	eq
 800d2b2:	782c      	ldrbeq	r4, [r5, #0]
 800d2b4:	1c95      	addeq	r5, r2, #2
 800d2b6:	e7ec      	b.n	800d292 <_strtol_l.isra.0+0x3a>
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1f6      	bne.n	800d2aa <_strtol_l.isra.0+0x52>
 800d2bc:	2c30      	cmp	r4, #48	@ 0x30
 800d2be:	bf14      	ite	ne
 800d2c0:	230a      	movne	r3, #10
 800d2c2:	2308      	moveq	r3, #8
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d2ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d2ce:	fbbc f9f3 	udiv	r9, ip, r3
 800d2d2:	4610      	mov	r0, r2
 800d2d4:	fb03 ca19 	mls	sl, r3, r9, ip
 800d2d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d2dc:	2f09      	cmp	r7, #9
 800d2de:	d80f      	bhi.n	800d300 <_strtol_l.isra.0+0xa8>
 800d2e0:	463c      	mov	r4, r7
 800d2e2:	42a3      	cmp	r3, r4
 800d2e4:	dd1b      	ble.n	800d31e <_strtol_l.isra.0+0xc6>
 800d2e6:	1c57      	adds	r7, r2, #1
 800d2e8:	d007      	beq.n	800d2fa <_strtol_l.isra.0+0xa2>
 800d2ea:	4581      	cmp	r9, r0
 800d2ec:	d314      	bcc.n	800d318 <_strtol_l.isra.0+0xc0>
 800d2ee:	d101      	bne.n	800d2f4 <_strtol_l.isra.0+0x9c>
 800d2f0:	45a2      	cmp	sl, r4
 800d2f2:	db11      	blt.n	800d318 <_strtol_l.isra.0+0xc0>
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	fb00 4003 	mla	r0, r0, r3, r4
 800d2fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2fe:	e7eb      	b.n	800d2d8 <_strtol_l.isra.0+0x80>
 800d300:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d304:	2f19      	cmp	r7, #25
 800d306:	d801      	bhi.n	800d30c <_strtol_l.isra.0+0xb4>
 800d308:	3c37      	subs	r4, #55	@ 0x37
 800d30a:	e7ea      	b.n	800d2e2 <_strtol_l.isra.0+0x8a>
 800d30c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d310:	2f19      	cmp	r7, #25
 800d312:	d804      	bhi.n	800d31e <_strtol_l.isra.0+0xc6>
 800d314:	3c57      	subs	r4, #87	@ 0x57
 800d316:	e7e4      	b.n	800d2e2 <_strtol_l.isra.0+0x8a>
 800d318:	f04f 32ff 	mov.w	r2, #4294967295
 800d31c:	e7ed      	b.n	800d2fa <_strtol_l.isra.0+0xa2>
 800d31e:	1c53      	adds	r3, r2, #1
 800d320:	d108      	bne.n	800d334 <_strtol_l.isra.0+0xdc>
 800d322:	2322      	movs	r3, #34	@ 0x22
 800d324:	4660      	mov	r0, ip
 800d326:	f8ce 3000 	str.w	r3, [lr]
 800d32a:	f1b8 0f00 	cmp.w	r8, #0
 800d32e:	d0a0      	beq.n	800d272 <_strtol_l.isra.0+0x1a>
 800d330:	1e69      	subs	r1, r5, #1
 800d332:	e006      	b.n	800d342 <_strtol_l.isra.0+0xea>
 800d334:	b106      	cbz	r6, 800d338 <_strtol_l.isra.0+0xe0>
 800d336:	4240      	negs	r0, r0
 800d338:	f1b8 0f00 	cmp.w	r8, #0
 800d33c:	d099      	beq.n	800d272 <_strtol_l.isra.0+0x1a>
 800d33e:	2a00      	cmp	r2, #0
 800d340:	d1f6      	bne.n	800d330 <_strtol_l.isra.0+0xd8>
 800d342:	f8c8 1000 	str.w	r1, [r8]
 800d346:	e794      	b.n	800d272 <_strtol_l.isra.0+0x1a>
 800d348:	0800e571 	.word	0x0800e571

0800d34c <_strtol_r>:
 800d34c:	f7ff bf84 	b.w	800d258 <_strtol_l.isra.0>

0800d350 <__ascii_wctomb>:
 800d350:	4603      	mov	r3, r0
 800d352:	4608      	mov	r0, r1
 800d354:	b141      	cbz	r1, 800d368 <__ascii_wctomb+0x18>
 800d356:	2aff      	cmp	r2, #255	@ 0xff
 800d358:	d904      	bls.n	800d364 <__ascii_wctomb+0x14>
 800d35a:	228a      	movs	r2, #138	@ 0x8a
 800d35c:	f04f 30ff 	mov.w	r0, #4294967295
 800d360:	601a      	str	r2, [r3, #0]
 800d362:	4770      	bx	lr
 800d364:	2001      	movs	r0, #1
 800d366:	700a      	strb	r2, [r1, #0]
 800d368:	4770      	bx	lr

0800d36a <__ssputs_r>:
 800d36a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d36e:	461f      	mov	r7, r3
 800d370:	688e      	ldr	r6, [r1, #8]
 800d372:	4682      	mov	sl, r0
 800d374:	42be      	cmp	r6, r7
 800d376:	460c      	mov	r4, r1
 800d378:	4690      	mov	r8, r2
 800d37a:	680b      	ldr	r3, [r1, #0]
 800d37c:	d82d      	bhi.n	800d3da <__ssputs_r+0x70>
 800d37e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d382:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d386:	d026      	beq.n	800d3d6 <__ssputs_r+0x6c>
 800d388:	6965      	ldr	r5, [r4, #20]
 800d38a:	6909      	ldr	r1, [r1, #16]
 800d38c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d390:	eba3 0901 	sub.w	r9, r3, r1
 800d394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d398:	1c7b      	adds	r3, r7, #1
 800d39a:	444b      	add	r3, r9
 800d39c:	106d      	asrs	r5, r5, #1
 800d39e:	429d      	cmp	r5, r3
 800d3a0:	bf38      	it	cc
 800d3a2:	461d      	movcc	r5, r3
 800d3a4:	0553      	lsls	r3, r2, #21
 800d3a6:	d527      	bpl.n	800d3f8 <__ssputs_r+0x8e>
 800d3a8:	4629      	mov	r1, r5
 800d3aa:	f7fc f86b 	bl	8009484 <_malloc_r>
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	b360      	cbz	r0, 800d40c <__ssputs_r+0xa2>
 800d3b2:	464a      	mov	r2, r9
 800d3b4:	6921      	ldr	r1, [r4, #16]
 800d3b6:	f7fe f8a6 	bl	800b506 <memcpy>
 800d3ba:	89a3      	ldrh	r3, [r4, #12]
 800d3bc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d3c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3c4:	81a3      	strh	r3, [r4, #12]
 800d3c6:	6126      	str	r6, [r4, #16]
 800d3c8:	444e      	add	r6, r9
 800d3ca:	6026      	str	r6, [r4, #0]
 800d3cc:	463e      	mov	r6, r7
 800d3ce:	6165      	str	r5, [r4, #20]
 800d3d0:	eba5 0509 	sub.w	r5, r5, r9
 800d3d4:	60a5      	str	r5, [r4, #8]
 800d3d6:	42be      	cmp	r6, r7
 800d3d8:	d900      	bls.n	800d3dc <__ssputs_r+0x72>
 800d3da:	463e      	mov	r6, r7
 800d3dc:	4632      	mov	r2, r6
 800d3de:	4641      	mov	r1, r8
 800d3e0:	6820      	ldr	r0, [r4, #0]
 800d3e2:	f000 fb62 	bl	800daaa <memmove>
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	68a3      	ldr	r3, [r4, #8]
 800d3ea:	1b9b      	subs	r3, r3, r6
 800d3ec:	60a3      	str	r3, [r4, #8]
 800d3ee:	6823      	ldr	r3, [r4, #0]
 800d3f0:	4433      	add	r3, r6
 800d3f2:	6023      	str	r3, [r4, #0]
 800d3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3f8:	462a      	mov	r2, r5
 800d3fa:	f000 fbc5 	bl	800db88 <_realloc_r>
 800d3fe:	4606      	mov	r6, r0
 800d400:	2800      	cmp	r0, #0
 800d402:	d1e0      	bne.n	800d3c6 <__ssputs_r+0x5c>
 800d404:	4650      	mov	r0, sl
 800d406:	6921      	ldr	r1, [r4, #16]
 800d408:	f7fe fef2 	bl	800c1f0 <_free_r>
 800d40c:	230c      	movs	r3, #12
 800d40e:	f8ca 3000 	str.w	r3, [sl]
 800d412:	89a3      	ldrh	r3, [r4, #12]
 800d414:	f04f 30ff 	mov.w	r0, #4294967295
 800d418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d41c:	81a3      	strh	r3, [r4, #12]
 800d41e:	e7e9      	b.n	800d3f4 <__ssputs_r+0x8a>

0800d420 <_svfiprintf_r>:
 800d420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d424:	4698      	mov	r8, r3
 800d426:	898b      	ldrh	r3, [r1, #12]
 800d428:	4607      	mov	r7, r0
 800d42a:	061b      	lsls	r3, r3, #24
 800d42c:	460d      	mov	r5, r1
 800d42e:	4614      	mov	r4, r2
 800d430:	b09d      	sub	sp, #116	@ 0x74
 800d432:	d510      	bpl.n	800d456 <_svfiprintf_r+0x36>
 800d434:	690b      	ldr	r3, [r1, #16]
 800d436:	b973      	cbnz	r3, 800d456 <_svfiprintf_r+0x36>
 800d438:	2140      	movs	r1, #64	@ 0x40
 800d43a:	f7fc f823 	bl	8009484 <_malloc_r>
 800d43e:	6028      	str	r0, [r5, #0]
 800d440:	6128      	str	r0, [r5, #16]
 800d442:	b930      	cbnz	r0, 800d452 <_svfiprintf_r+0x32>
 800d444:	230c      	movs	r3, #12
 800d446:	603b      	str	r3, [r7, #0]
 800d448:	f04f 30ff 	mov.w	r0, #4294967295
 800d44c:	b01d      	add	sp, #116	@ 0x74
 800d44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d452:	2340      	movs	r3, #64	@ 0x40
 800d454:	616b      	str	r3, [r5, #20]
 800d456:	2300      	movs	r3, #0
 800d458:	9309      	str	r3, [sp, #36]	@ 0x24
 800d45a:	2320      	movs	r3, #32
 800d45c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d460:	2330      	movs	r3, #48	@ 0x30
 800d462:	f04f 0901 	mov.w	r9, #1
 800d466:	f8cd 800c 	str.w	r8, [sp, #12]
 800d46a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d604 <_svfiprintf_r+0x1e4>
 800d46e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d472:	4623      	mov	r3, r4
 800d474:	469a      	mov	sl, r3
 800d476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d47a:	b10a      	cbz	r2, 800d480 <_svfiprintf_r+0x60>
 800d47c:	2a25      	cmp	r2, #37	@ 0x25
 800d47e:	d1f9      	bne.n	800d474 <_svfiprintf_r+0x54>
 800d480:	ebba 0b04 	subs.w	fp, sl, r4
 800d484:	d00b      	beq.n	800d49e <_svfiprintf_r+0x7e>
 800d486:	465b      	mov	r3, fp
 800d488:	4622      	mov	r2, r4
 800d48a:	4629      	mov	r1, r5
 800d48c:	4638      	mov	r0, r7
 800d48e:	f7ff ff6c 	bl	800d36a <__ssputs_r>
 800d492:	3001      	adds	r0, #1
 800d494:	f000 80a7 	beq.w	800d5e6 <_svfiprintf_r+0x1c6>
 800d498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d49a:	445a      	add	r2, fp
 800d49c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d49e:	f89a 3000 	ldrb.w	r3, [sl]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	f000 809f 	beq.w	800d5e6 <_svfiprintf_r+0x1c6>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4b2:	f10a 0a01 	add.w	sl, sl, #1
 800d4b6:	9304      	str	r3, [sp, #16]
 800d4b8:	9307      	str	r3, [sp, #28]
 800d4ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4be:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4c0:	4654      	mov	r4, sl
 800d4c2:	2205      	movs	r2, #5
 800d4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4c8:	484e      	ldr	r0, [pc, #312]	@ (800d604 <_svfiprintf_r+0x1e4>)
 800d4ca:	f7fe f80e 	bl	800b4ea <memchr>
 800d4ce:	9a04      	ldr	r2, [sp, #16]
 800d4d0:	b9d8      	cbnz	r0, 800d50a <_svfiprintf_r+0xea>
 800d4d2:	06d0      	lsls	r0, r2, #27
 800d4d4:	bf44      	itt	mi
 800d4d6:	2320      	movmi	r3, #32
 800d4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4dc:	0711      	lsls	r1, r2, #28
 800d4de:	bf44      	itt	mi
 800d4e0:	232b      	movmi	r3, #43	@ 0x2b
 800d4e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4ec:	d015      	beq.n	800d51a <_svfiprintf_r+0xfa>
 800d4ee:	4654      	mov	r4, sl
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	f04f 0c0a 	mov.w	ip, #10
 800d4f6:	9a07      	ldr	r2, [sp, #28]
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4fe:	3b30      	subs	r3, #48	@ 0x30
 800d500:	2b09      	cmp	r3, #9
 800d502:	d94b      	bls.n	800d59c <_svfiprintf_r+0x17c>
 800d504:	b1b0      	cbz	r0, 800d534 <_svfiprintf_r+0x114>
 800d506:	9207      	str	r2, [sp, #28]
 800d508:	e014      	b.n	800d534 <_svfiprintf_r+0x114>
 800d50a:	eba0 0308 	sub.w	r3, r0, r8
 800d50e:	fa09 f303 	lsl.w	r3, r9, r3
 800d512:	4313      	orrs	r3, r2
 800d514:	46a2      	mov	sl, r4
 800d516:	9304      	str	r3, [sp, #16]
 800d518:	e7d2      	b.n	800d4c0 <_svfiprintf_r+0xa0>
 800d51a:	9b03      	ldr	r3, [sp, #12]
 800d51c:	1d19      	adds	r1, r3, #4
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	9103      	str	r1, [sp, #12]
 800d522:	2b00      	cmp	r3, #0
 800d524:	bfbb      	ittet	lt
 800d526:	425b      	neglt	r3, r3
 800d528:	f042 0202 	orrlt.w	r2, r2, #2
 800d52c:	9307      	strge	r3, [sp, #28]
 800d52e:	9307      	strlt	r3, [sp, #28]
 800d530:	bfb8      	it	lt
 800d532:	9204      	strlt	r2, [sp, #16]
 800d534:	7823      	ldrb	r3, [r4, #0]
 800d536:	2b2e      	cmp	r3, #46	@ 0x2e
 800d538:	d10a      	bne.n	800d550 <_svfiprintf_r+0x130>
 800d53a:	7863      	ldrb	r3, [r4, #1]
 800d53c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d53e:	d132      	bne.n	800d5a6 <_svfiprintf_r+0x186>
 800d540:	9b03      	ldr	r3, [sp, #12]
 800d542:	3402      	adds	r4, #2
 800d544:	1d1a      	adds	r2, r3, #4
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	9203      	str	r2, [sp, #12]
 800d54a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d54e:	9305      	str	r3, [sp, #20]
 800d550:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d608 <_svfiprintf_r+0x1e8>
 800d554:	2203      	movs	r2, #3
 800d556:	4650      	mov	r0, sl
 800d558:	7821      	ldrb	r1, [r4, #0]
 800d55a:	f7fd ffc6 	bl	800b4ea <memchr>
 800d55e:	b138      	cbz	r0, 800d570 <_svfiprintf_r+0x150>
 800d560:	2240      	movs	r2, #64	@ 0x40
 800d562:	9b04      	ldr	r3, [sp, #16]
 800d564:	eba0 000a 	sub.w	r0, r0, sl
 800d568:	4082      	lsls	r2, r0
 800d56a:	4313      	orrs	r3, r2
 800d56c:	3401      	adds	r4, #1
 800d56e:	9304      	str	r3, [sp, #16]
 800d570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d574:	2206      	movs	r2, #6
 800d576:	4825      	ldr	r0, [pc, #148]	@ (800d60c <_svfiprintf_r+0x1ec>)
 800d578:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d57c:	f7fd ffb5 	bl	800b4ea <memchr>
 800d580:	2800      	cmp	r0, #0
 800d582:	d036      	beq.n	800d5f2 <_svfiprintf_r+0x1d2>
 800d584:	4b22      	ldr	r3, [pc, #136]	@ (800d610 <_svfiprintf_r+0x1f0>)
 800d586:	bb1b      	cbnz	r3, 800d5d0 <_svfiprintf_r+0x1b0>
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	3307      	adds	r3, #7
 800d58c:	f023 0307 	bic.w	r3, r3, #7
 800d590:	3308      	adds	r3, #8
 800d592:	9303      	str	r3, [sp, #12]
 800d594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d596:	4433      	add	r3, r6
 800d598:	9309      	str	r3, [sp, #36]	@ 0x24
 800d59a:	e76a      	b.n	800d472 <_svfiprintf_r+0x52>
 800d59c:	460c      	mov	r4, r1
 800d59e:	2001      	movs	r0, #1
 800d5a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5a4:	e7a8      	b.n	800d4f8 <_svfiprintf_r+0xd8>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	f04f 0c0a 	mov.w	ip, #10
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	3401      	adds	r4, #1
 800d5b0:	9305      	str	r3, [sp, #20]
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5b8:	3a30      	subs	r2, #48	@ 0x30
 800d5ba:	2a09      	cmp	r2, #9
 800d5bc:	d903      	bls.n	800d5c6 <_svfiprintf_r+0x1a6>
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d0c6      	beq.n	800d550 <_svfiprintf_r+0x130>
 800d5c2:	9105      	str	r1, [sp, #20]
 800d5c4:	e7c4      	b.n	800d550 <_svfiprintf_r+0x130>
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5ce:	e7f0      	b.n	800d5b2 <_svfiprintf_r+0x192>
 800d5d0:	ab03      	add	r3, sp, #12
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	462a      	mov	r2, r5
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	4b0e      	ldr	r3, [pc, #56]	@ (800d614 <_svfiprintf_r+0x1f4>)
 800d5da:	a904      	add	r1, sp, #16
 800d5dc:	f7fc fe88 	bl	800a2f0 <_printf_float>
 800d5e0:	1c42      	adds	r2, r0, #1
 800d5e2:	4606      	mov	r6, r0
 800d5e4:	d1d6      	bne.n	800d594 <_svfiprintf_r+0x174>
 800d5e6:	89ab      	ldrh	r3, [r5, #12]
 800d5e8:	065b      	lsls	r3, r3, #25
 800d5ea:	f53f af2d 	bmi.w	800d448 <_svfiprintf_r+0x28>
 800d5ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5f0:	e72c      	b.n	800d44c <_svfiprintf_r+0x2c>
 800d5f2:	ab03      	add	r3, sp, #12
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	462a      	mov	r2, r5
 800d5f8:	4638      	mov	r0, r7
 800d5fa:	4b06      	ldr	r3, [pc, #24]	@ (800d614 <_svfiprintf_r+0x1f4>)
 800d5fc:	a904      	add	r1, sp, #16
 800d5fe:	f7fd f915 	bl	800a82c <_printf_i>
 800d602:	e7ed      	b.n	800d5e0 <_svfiprintf_r+0x1c0>
 800d604:	0800e3d1 	.word	0x0800e3d1
 800d608:	0800e3d7 	.word	0x0800e3d7
 800d60c:	0800e3db 	.word	0x0800e3db
 800d610:	0800a2f1 	.word	0x0800a2f1
 800d614:	0800d36b 	.word	0x0800d36b

0800d618 <__sfputc_r>:
 800d618:	6893      	ldr	r3, [r2, #8]
 800d61a:	b410      	push	{r4}
 800d61c:	3b01      	subs	r3, #1
 800d61e:	2b00      	cmp	r3, #0
 800d620:	6093      	str	r3, [r2, #8]
 800d622:	da07      	bge.n	800d634 <__sfputc_r+0x1c>
 800d624:	6994      	ldr	r4, [r2, #24]
 800d626:	42a3      	cmp	r3, r4
 800d628:	db01      	blt.n	800d62e <__sfputc_r+0x16>
 800d62a:	290a      	cmp	r1, #10
 800d62c:	d102      	bne.n	800d634 <__sfputc_r+0x1c>
 800d62e:	bc10      	pop	{r4}
 800d630:	f7fd bdf1 	b.w	800b216 <__swbuf_r>
 800d634:	6813      	ldr	r3, [r2, #0]
 800d636:	1c58      	adds	r0, r3, #1
 800d638:	6010      	str	r0, [r2, #0]
 800d63a:	7019      	strb	r1, [r3, #0]
 800d63c:	4608      	mov	r0, r1
 800d63e:	bc10      	pop	{r4}
 800d640:	4770      	bx	lr

0800d642 <__sfputs_r>:
 800d642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d644:	4606      	mov	r6, r0
 800d646:	460f      	mov	r7, r1
 800d648:	4614      	mov	r4, r2
 800d64a:	18d5      	adds	r5, r2, r3
 800d64c:	42ac      	cmp	r4, r5
 800d64e:	d101      	bne.n	800d654 <__sfputs_r+0x12>
 800d650:	2000      	movs	r0, #0
 800d652:	e007      	b.n	800d664 <__sfputs_r+0x22>
 800d654:	463a      	mov	r2, r7
 800d656:	4630      	mov	r0, r6
 800d658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d65c:	f7ff ffdc 	bl	800d618 <__sfputc_r>
 800d660:	1c43      	adds	r3, r0, #1
 800d662:	d1f3      	bne.n	800d64c <__sfputs_r+0xa>
 800d664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d668 <_vfiprintf_r>:
 800d668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66c:	460d      	mov	r5, r1
 800d66e:	4614      	mov	r4, r2
 800d670:	4698      	mov	r8, r3
 800d672:	4606      	mov	r6, r0
 800d674:	b09d      	sub	sp, #116	@ 0x74
 800d676:	b118      	cbz	r0, 800d680 <_vfiprintf_r+0x18>
 800d678:	6a03      	ldr	r3, [r0, #32]
 800d67a:	b90b      	cbnz	r3, 800d680 <_vfiprintf_r+0x18>
 800d67c:	f7fd fc8a 	bl	800af94 <__sinit>
 800d680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d682:	07d9      	lsls	r1, r3, #31
 800d684:	d405      	bmi.n	800d692 <_vfiprintf_r+0x2a>
 800d686:	89ab      	ldrh	r3, [r5, #12]
 800d688:	059a      	lsls	r2, r3, #22
 800d68a:	d402      	bmi.n	800d692 <_vfiprintf_r+0x2a>
 800d68c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d68e:	f7fd ff22 	bl	800b4d6 <__retarget_lock_acquire_recursive>
 800d692:	89ab      	ldrh	r3, [r5, #12]
 800d694:	071b      	lsls	r3, r3, #28
 800d696:	d501      	bpl.n	800d69c <_vfiprintf_r+0x34>
 800d698:	692b      	ldr	r3, [r5, #16]
 800d69a:	b99b      	cbnz	r3, 800d6c4 <_vfiprintf_r+0x5c>
 800d69c:	4629      	mov	r1, r5
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f7fd fdf8 	bl	800b294 <__swsetup_r>
 800d6a4:	b170      	cbz	r0, 800d6c4 <_vfiprintf_r+0x5c>
 800d6a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6a8:	07dc      	lsls	r4, r3, #31
 800d6aa:	d504      	bpl.n	800d6b6 <_vfiprintf_r+0x4e>
 800d6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b0:	b01d      	add	sp, #116	@ 0x74
 800d6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b6:	89ab      	ldrh	r3, [r5, #12]
 800d6b8:	0598      	lsls	r0, r3, #22
 800d6ba:	d4f7      	bmi.n	800d6ac <_vfiprintf_r+0x44>
 800d6bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6be:	f7fd ff0b 	bl	800b4d8 <__retarget_lock_release_recursive>
 800d6c2:	e7f3      	b.n	800d6ac <_vfiprintf_r+0x44>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6c8:	2320      	movs	r3, #32
 800d6ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6ce:	2330      	movs	r3, #48	@ 0x30
 800d6d0:	f04f 0901 	mov.w	r9, #1
 800d6d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6d8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d884 <_vfiprintf_r+0x21c>
 800d6dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6e0:	4623      	mov	r3, r4
 800d6e2:	469a      	mov	sl, r3
 800d6e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6e8:	b10a      	cbz	r2, 800d6ee <_vfiprintf_r+0x86>
 800d6ea:	2a25      	cmp	r2, #37	@ 0x25
 800d6ec:	d1f9      	bne.n	800d6e2 <_vfiprintf_r+0x7a>
 800d6ee:	ebba 0b04 	subs.w	fp, sl, r4
 800d6f2:	d00b      	beq.n	800d70c <_vfiprintf_r+0xa4>
 800d6f4:	465b      	mov	r3, fp
 800d6f6:	4622      	mov	r2, r4
 800d6f8:	4629      	mov	r1, r5
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f7ff ffa1 	bl	800d642 <__sfputs_r>
 800d700:	3001      	adds	r0, #1
 800d702:	f000 80a7 	beq.w	800d854 <_vfiprintf_r+0x1ec>
 800d706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d708:	445a      	add	r2, fp
 800d70a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d70c:	f89a 3000 	ldrb.w	r3, [sl]
 800d710:	2b00      	cmp	r3, #0
 800d712:	f000 809f 	beq.w	800d854 <_vfiprintf_r+0x1ec>
 800d716:	2300      	movs	r3, #0
 800d718:	f04f 32ff 	mov.w	r2, #4294967295
 800d71c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d720:	f10a 0a01 	add.w	sl, sl, #1
 800d724:	9304      	str	r3, [sp, #16]
 800d726:	9307      	str	r3, [sp, #28]
 800d728:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d72c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d72e:	4654      	mov	r4, sl
 800d730:	2205      	movs	r2, #5
 800d732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d736:	4853      	ldr	r0, [pc, #332]	@ (800d884 <_vfiprintf_r+0x21c>)
 800d738:	f7fd fed7 	bl	800b4ea <memchr>
 800d73c:	9a04      	ldr	r2, [sp, #16]
 800d73e:	b9d8      	cbnz	r0, 800d778 <_vfiprintf_r+0x110>
 800d740:	06d1      	lsls	r1, r2, #27
 800d742:	bf44      	itt	mi
 800d744:	2320      	movmi	r3, #32
 800d746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d74a:	0713      	lsls	r3, r2, #28
 800d74c:	bf44      	itt	mi
 800d74e:	232b      	movmi	r3, #43	@ 0x2b
 800d750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d754:	f89a 3000 	ldrb.w	r3, [sl]
 800d758:	2b2a      	cmp	r3, #42	@ 0x2a
 800d75a:	d015      	beq.n	800d788 <_vfiprintf_r+0x120>
 800d75c:	4654      	mov	r4, sl
 800d75e:	2000      	movs	r0, #0
 800d760:	f04f 0c0a 	mov.w	ip, #10
 800d764:	9a07      	ldr	r2, [sp, #28]
 800d766:	4621      	mov	r1, r4
 800d768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d76c:	3b30      	subs	r3, #48	@ 0x30
 800d76e:	2b09      	cmp	r3, #9
 800d770:	d94b      	bls.n	800d80a <_vfiprintf_r+0x1a2>
 800d772:	b1b0      	cbz	r0, 800d7a2 <_vfiprintf_r+0x13a>
 800d774:	9207      	str	r2, [sp, #28]
 800d776:	e014      	b.n	800d7a2 <_vfiprintf_r+0x13a>
 800d778:	eba0 0308 	sub.w	r3, r0, r8
 800d77c:	fa09 f303 	lsl.w	r3, r9, r3
 800d780:	4313      	orrs	r3, r2
 800d782:	46a2      	mov	sl, r4
 800d784:	9304      	str	r3, [sp, #16]
 800d786:	e7d2      	b.n	800d72e <_vfiprintf_r+0xc6>
 800d788:	9b03      	ldr	r3, [sp, #12]
 800d78a:	1d19      	adds	r1, r3, #4
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	9103      	str	r1, [sp, #12]
 800d790:	2b00      	cmp	r3, #0
 800d792:	bfbb      	ittet	lt
 800d794:	425b      	neglt	r3, r3
 800d796:	f042 0202 	orrlt.w	r2, r2, #2
 800d79a:	9307      	strge	r3, [sp, #28]
 800d79c:	9307      	strlt	r3, [sp, #28]
 800d79e:	bfb8      	it	lt
 800d7a0:	9204      	strlt	r2, [sp, #16]
 800d7a2:	7823      	ldrb	r3, [r4, #0]
 800d7a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7a6:	d10a      	bne.n	800d7be <_vfiprintf_r+0x156>
 800d7a8:	7863      	ldrb	r3, [r4, #1]
 800d7aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7ac:	d132      	bne.n	800d814 <_vfiprintf_r+0x1ac>
 800d7ae:	9b03      	ldr	r3, [sp, #12]
 800d7b0:	3402      	adds	r4, #2
 800d7b2:	1d1a      	adds	r2, r3, #4
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	9203      	str	r2, [sp, #12]
 800d7b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7bc:	9305      	str	r3, [sp, #20]
 800d7be:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d888 <_vfiprintf_r+0x220>
 800d7c2:	2203      	movs	r2, #3
 800d7c4:	4650      	mov	r0, sl
 800d7c6:	7821      	ldrb	r1, [r4, #0]
 800d7c8:	f7fd fe8f 	bl	800b4ea <memchr>
 800d7cc:	b138      	cbz	r0, 800d7de <_vfiprintf_r+0x176>
 800d7ce:	2240      	movs	r2, #64	@ 0x40
 800d7d0:	9b04      	ldr	r3, [sp, #16]
 800d7d2:	eba0 000a 	sub.w	r0, r0, sl
 800d7d6:	4082      	lsls	r2, r0
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	3401      	adds	r4, #1
 800d7dc:	9304      	str	r3, [sp, #16]
 800d7de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7e2:	2206      	movs	r2, #6
 800d7e4:	4829      	ldr	r0, [pc, #164]	@ (800d88c <_vfiprintf_r+0x224>)
 800d7e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7ea:	f7fd fe7e 	bl	800b4ea <memchr>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	d03f      	beq.n	800d872 <_vfiprintf_r+0x20a>
 800d7f2:	4b27      	ldr	r3, [pc, #156]	@ (800d890 <_vfiprintf_r+0x228>)
 800d7f4:	bb1b      	cbnz	r3, 800d83e <_vfiprintf_r+0x1d6>
 800d7f6:	9b03      	ldr	r3, [sp, #12]
 800d7f8:	3307      	adds	r3, #7
 800d7fa:	f023 0307 	bic.w	r3, r3, #7
 800d7fe:	3308      	adds	r3, #8
 800d800:	9303      	str	r3, [sp, #12]
 800d802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d804:	443b      	add	r3, r7
 800d806:	9309      	str	r3, [sp, #36]	@ 0x24
 800d808:	e76a      	b.n	800d6e0 <_vfiprintf_r+0x78>
 800d80a:	460c      	mov	r4, r1
 800d80c:	2001      	movs	r0, #1
 800d80e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d812:	e7a8      	b.n	800d766 <_vfiprintf_r+0xfe>
 800d814:	2300      	movs	r3, #0
 800d816:	f04f 0c0a 	mov.w	ip, #10
 800d81a:	4619      	mov	r1, r3
 800d81c:	3401      	adds	r4, #1
 800d81e:	9305      	str	r3, [sp, #20]
 800d820:	4620      	mov	r0, r4
 800d822:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d826:	3a30      	subs	r2, #48	@ 0x30
 800d828:	2a09      	cmp	r2, #9
 800d82a:	d903      	bls.n	800d834 <_vfiprintf_r+0x1cc>
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d0c6      	beq.n	800d7be <_vfiprintf_r+0x156>
 800d830:	9105      	str	r1, [sp, #20]
 800d832:	e7c4      	b.n	800d7be <_vfiprintf_r+0x156>
 800d834:	4604      	mov	r4, r0
 800d836:	2301      	movs	r3, #1
 800d838:	fb0c 2101 	mla	r1, ip, r1, r2
 800d83c:	e7f0      	b.n	800d820 <_vfiprintf_r+0x1b8>
 800d83e:	ab03      	add	r3, sp, #12
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	462a      	mov	r2, r5
 800d844:	4630      	mov	r0, r6
 800d846:	4b13      	ldr	r3, [pc, #76]	@ (800d894 <_vfiprintf_r+0x22c>)
 800d848:	a904      	add	r1, sp, #16
 800d84a:	f7fc fd51 	bl	800a2f0 <_printf_float>
 800d84e:	4607      	mov	r7, r0
 800d850:	1c78      	adds	r0, r7, #1
 800d852:	d1d6      	bne.n	800d802 <_vfiprintf_r+0x19a>
 800d854:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d856:	07d9      	lsls	r1, r3, #31
 800d858:	d405      	bmi.n	800d866 <_vfiprintf_r+0x1fe>
 800d85a:	89ab      	ldrh	r3, [r5, #12]
 800d85c:	059a      	lsls	r2, r3, #22
 800d85e:	d402      	bmi.n	800d866 <_vfiprintf_r+0x1fe>
 800d860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d862:	f7fd fe39 	bl	800b4d8 <__retarget_lock_release_recursive>
 800d866:	89ab      	ldrh	r3, [r5, #12]
 800d868:	065b      	lsls	r3, r3, #25
 800d86a:	f53f af1f 	bmi.w	800d6ac <_vfiprintf_r+0x44>
 800d86e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d870:	e71e      	b.n	800d6b0 <_vfiprintf_r+0x48>
 800d872:	ab03      	add	r3, sp, #12
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	462a      	mov	r2, r5
 800d878:	4630      	mov	r0, r6
 800d87a:	4b06      	ldr	r3, [pc, #24]	@ (800d894 <_vfiprintf_r+0x22c>)
 800d87c:	a904      	add	r1, sp, #16
 800d87e:	f7fc ffd5 	bl	800a82c <_printf_i>
 800d882:	e7e4      	b.n	800d84e <_vfiprintf_r+0x1e6>
 800d884:	0800e3d1 	.word	0x0800e3d1
 800d888:	0800e3d7 	.word	0x0800e3d7
 800d88c:	0800e3db 	.word	0x0800e3db
 800d890:	0800a2f1 	.word	0x0800a2f1
 800d894:	0800d643 	.word	0x0800d643

0800d898 <__sflush_r>:
 800d898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89e:	0716      	lsls	r6, r2, #28
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	d454      	bmi.n	800d950 <__sflush_r+0xb8>
 800d8a6:	684b      	ldr	r3, [r1, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	dc02      	bgt.n	800d8b2 <__sflush_r+0x1a>
 800d8ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	dd48      	ble.n	800d944 <__sflush_r+0xac>
 800d8b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8b4:	2e00      	cmp	r6, #0
 800d8b6:	d045      	beq.n	800d944 <__sflush_r+0xac>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d8be:	682f      	ldr	r7, [r5, #0]
 800d8c0:	6a21      	ldr	r1, [r4, #32]
 800d8c2:	602b      	str	r3, [r5, #0]
 800d8c4:	d030      	beq.n	800d928 <__sflush_r+0x90>
 800d8c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8c8:	89a3      	ldrh	r3, [r4, #12]
 800d8ca:	0759      	lsls	r1, r3, #29
 800d8cc:	d505      	bpl.n	800d8da <__sflush_r+0x42>
 800d8ce:	6863      	ldr	r3, [r4, #4]
 800d8d0:	1ad2      	subs	r2, r2, r3
 800d8d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8d4:	b10b      	cbz	r3, 800d8da <__sflush_r+0x42>
 800d8d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8d8:	1ad2      	subs	r2, r2, r3
 800d8da:	2300      	movs	r3, #0
 800d8dc:	4628      	mov	r0, r5
 800d8de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8e0:	6a21      	ldr	r1, [r4, #32]
 800d8e2:	47b0      	blx	r6
 800d8e4:	1c43      	adds	r3, r0, #1
 800d8e6:	89a3      	ldrh	r3, [r4, #12]
 800d8e8:	d106      	bne.n	800d8f8 <__sflush_r+0x60>
 800d8ea:	6829      	ldr	r1, [r5, #0]
 800d8ec:	291d      	cmp	r1, #29
 800d8ee:	d82b      	bhi.n	800d948 <__sflush_r+0xb0>
 800d8f0:	4a28      	ldr	r2, [pc, #160]	@ (800d994 <__sflush_r+0xfc>)
 800d8f2:	40ca      	lsrs	r2, r1
 800d8f4:	07d6      	lsls	r6, r2, #31
 800d8f6:	d527      	bpl.n	800d948 <__sflush_r+0xb0>
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	6062      	str	r2, [r4, #4]
 800d8fc:	6922      	ldr	r2, [r4, #16]
 800d8fe:	04d9      	lsls	r1, r3, #19
 800d900:	6022      	str	r2, [r4, #0]
 800d902:	d504      	bpl.n	800d90e <__sflush_r+0x76>
 800d904:	1c42      	adds	r2, r0, #1
 800d906:	d101      	bne.n	800d90c <__sflush_r+0x74>
 800d908:	682b      	ldr	r3, [r5, #0]
 800d90a:	b903      	cbnz	r3, 800d90e <__sflush_r+0x76>
 800d90c:	6560      	str	r0, [r4, #84]	@ 0x54
 800d90e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d910:	602f      	str	r7, [r5, #0]
 800d912:	b1b9      	cbz	r1, 800d944 <__sflush_r+0xac>
 800d914:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d918:	4299      	cmp	r1, r3
 800d91a:	d002      	beq.n	800d922 <__sflush_r+0x8a>
 800d91c:	4628      	mov	r0, r5
 800d91e:	f7fe fc67 	bl	800c1f0 <_free_r>
 800d922:	2300      	movs	r3, #0
 800d924:	6363      	str	r3, [r4, #52]	@ 0x34
 800d926:	e00d      	b.n	800d944 <__sflush_r+0xac>
 800d928:	2301      	movs	r3, #1
 800d92a:	4628      	mov	r0, r5
 800d92c:	47b0      	blx	r6
 800d92e:	4602      	mov	r2, r0
 800d930:	1c50      	adds	r0, r2, #1
 800d932:	d1c9      	bne.n	800d8c8 <__sflush_r+0x30>
 800d934:	682b      	ldr	r3, [r5, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d0c6      	beq.n	800d8c8 <__sflush_r+0x30>
 800d93a:	2b1d      	cmp	r3, #29
 800d93c:	d001      	beq.n	800d942 <__sflush_r+0xaa>
 800d93e:	2b16      	cmp	r3, #22
 800d940:	d11d      	bne.n	800d97e <__sflush_r+0xe6>
 800d942:	602f      	str	r7, [r5, #0]
 800d944:	2000      	movs	r0, #0
 800d946:	e021      	b.n	800d98c <__sflush_r+0xf4>
 800d948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d94c:	b21b      	sxth	r3, r3
 800d94e:	e01a      	b.n	800d986 <__sflush_r+0xee>
 800d950:	690f      	ldr	r7, [r1, #16]
 800d952:	2f00      	cmp	r7, #0
 800d954:	d0f6      	beq.n	800d944 <__sflush_r+0xac>
 800d956:	0793      	lsls	r3, r2, #30
 800d958:	bf18      	it	ne
 800d95a:	2300      	movne	r3, #0
 800d95c:	680e      	ldr	r6, [r1, #0]
 800d95e:	bf08      	it	eq
 800d960:	694b      	ldreq	r3, [r1, #20]
 800d962:	1bf6      	subs	r6, r6, r7
 800d964:	600f      	str	r7, [r1, #0]
 800d966:	608b      	str	r3, [r1, #8]
 800d968:	2e00      	cmp	r6, #0
 800d96a:	ddeb      	ble.n	800d944 <__sflush_r+0xac>
 800d96c:	4633      	mov	r3, r6
 800d96e:	463a      	mov	r2, r7
 800d970:	4628      	mov	r0, r5
 800d972:	6a21      	ldr	r1, [r4, #32]
 800d974:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d978:	47e0      	blx	ip
 800d97a:	2800      	cmp	r0, #0
 800d97c:	dc07      	bgt.n	800d98e <__sflush_r+0xf6>
 800d97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d986:	f04f 30ff 	mov.w	r0, #4294967295
 800d98a:	81a3      	strh	r3, [r4, #12]
 800d98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d98e:	4407      	add	r7, r0
 800d990:	1a36      	subs	r6, r6, r0
 800d992:	e7e9      	b.n	800d968 <__sflush_r+0xd0>
 800d994:	20400001 	.word	0x20400001

0800d998 <_fflush_r>:
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	690b      	ldr	r3, [r1, #16]
 800d99c:	4605      	mov	r5, r0
 800d99e:	460c      	mov	r4, r1
 800d9a0:	b913      	cbnz	r3, 800d9a8 <_fflush_r+0x10>
 800d9a2:	2500      	movs	r5, #0
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	bd38      	pop	{r3, r4, r5, pc}
 800d9a8:	b118      	cbz	r0, 800d9b2 <_fflush_r+0x1a>
 800d9aa:	6a03      	ldr	r3, [r0, #32]
 800d9ac:	b90b      	cbnz	r3, 800d9b2 <_fflush_r+0x1a>
 800d9ae:	f7fd faf1 	bl	800af94 <__sinit>
 800d9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d0f3      	beq.n	800d9a2 <_fflush_r+0xa>
 800d9ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9bc:	07d0      	lsls	r0, r2, #31
 800d9be:	d404      	bmi.n	800d9ca <_fflush_r+0x32>
 800d9c0:	0599      	lsls	r1, r3, #22
 800d9c2:	d402      	bmi.n	800d9ca <_fflush_r+0x32>
 800d9c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9c6:	f7fd fd86 	bl	800b4d6 <__retarget_lock_acquire_recursive>
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	4621      	mov	r1, r4
 800d9ce:	f7ff ff63 	bl	800d898 <__sflush_r>
 800d9d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9d4:	4605      	mov	r5, r0
 800d9d6:	07da      	lsls	r2, r3, #31
 800d9d8:	d4e4      	bmi.n	800d9a4 <_fflush_r+0xc>
 800d9da:	89a3      	ldrh	r3, [r4, #12]
 800d9dc:	059b      	lsls	r3, r3, #22
 800d9de:	d4e1      	bmi.n	800d9a4 <_fflush_r+0xc>
 800d9e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9e2:	f7fd fd79 	bl	800b4d8 <__retarget_lock_release_recursive>
 800d9e6:	e7dd      	b.n	800d9a4 <_fflush_r+0xc>

0800d9e8 <__swhatbuf_r>:
 800d9e8:	b570      	push	{r4, r5, r6, lr}
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f0:	4615      	mov	r5, r2
 800d9f2:	2900      	cmp	r1, #0
 800d9f4:	461e      	mov	r6, r3
 800d9f6:	b096      	sub	sp, #88	@ 0x58
 800d9f8:	da0c      	bge.n	800da14 <__swhatbuf_r+0x2c>
 800d9fa:	89a3      	ldrh	r3, [r4, #12]
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da02:	bf14      	ite	ne
 800da04:	2340      	movne	r3, #64	@ 0x40
 800da06:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da0a:	2000      	movs	r0, #0
 800da0c:	6031      	str	r1, [r6, #0]
 800da0e:	602b      	str	r3, [r5, #0]
 800da10:	b016      	add	sp, #88	@ 0x58
 800da12:	bd70      	pop	{r4, r5, r6, pc}
 800da14:	466a      	mov	r2, sp
 800da16:	f000 f863 	bl	800dae0 <_fstat_r>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	dbed      	blt.n	800d9fa <__swhatbuf_r+0x12>
 800da1e:	9901      	ldr	r1, [sp, #4]
 800da20:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da24:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da28:	4259      	negs	r1, r3
 800da2a:	4159      	adcs	r1, r3
 800da2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da30:	e7eb      	b.n	800da0a <__swhatbuf_r+0x22>

0800da32 <__smakebuf_r>:
 800da32:	898b      	ldrh	r3, [r1, #12]
 800da34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da36:	079d      	lsls	r5, r3, #30
 800da38:	4606      	mov	r6, r0
 800da3a:	460c      	mov	r4, r1
 800da3c:	d507      	bpl.n	800da4e <__smakebuf_r+0x1c>
 800da3e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da42:	6023      	str	r3, [r4, #0]
 800da44:	6123      	str	r3, [r4, #16]
 800da46:	2301      	movs	r3, #1
 800da48:	6163      	str	r3, [r4, #20]
 800da4a:	b003      	add	sp, #12
 800da4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da4e:	466a      	mov	r2, sp
 800da50:	ab01      	add	r3, sp, #4
 800da52:	f7ff ffc9 	bl	800d9e8 <__swhatbuf_r>
 800da56:	9f00      	ldr	r7, [sp, #0]
 800da58:	4605      	mov	r5, r0
 800da5a:	4639      	mov	r1, r7
 800da5c:	4630      	mov	r0, r6
 800da5e:	f7fb fd11 	bl	8009484 <_malloc_r>
 800da62:	b948      	cbnz	r0, 800da78 <__smakebuf_r+0x46>
 800da64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da68:	059a      	lsls	r2, r3, #22
 800da6a:	d4ee      	bmi.n	800da4a <__smakebuf_r+0x18>
 800da6c:	f023 0303 	bic.w	r3, r3, #3
 800da70:	f043 0302 	orr.w	r3, r3, #2
 800da74:	81a3      	strh	r3, [r4, #12]
 800da76:	e7e2      	b.n	800da3e <__smakebuf_r+0xc>
 800da78:	89a3      	ldrh	r3, [r4, #12]
 800da7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da82:	81a3      	strh	r3, [r4, #12]
 800da84:	9b01      	ldr	r3, [sp, #4]
 800da86:	6020      	str	r0, [r4, #0]
 800da88:	b15b      	cbz	r3, 800daa2 <__smakebuf_r+0x70>
 800da8a:	4630      	mov	r0, r6
 800da8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da90:	f000 f838 	bl	800db04 <_isatty_r>
 800da94:	b128      	cbz	r0, 800daa2 <__smakebuf_r+0x70>
 800da96:	89a3      	ldrh	r3, [r4, #12]
 800da98:	f023 0303 	bic.w	r3, r3, #3
 800da9c:	f043 0301 	orr.w	r3, r3, #1
 800daa0:	81a3      	strh	r3, [r4, #12]
 800daa2:	89a3      	ldrh	r3, [r4, #12]
 800daa4:	431d      	orrs	r5, r3
 800daa6:	81a5      	strh	r5, [r4, #12]
 800daa8:	e7cf      	b.n	800da4a <__smakebuf_r+0x18>

0800daaa <memmove>:
 800daaa:	4288      	cmp	r0, r1
 800daac:	b510      	push	{r4, lr}
 800daae:	eb01 0402 	add.w	r4, r1, r2
 800dab2:	d902      	bls.n	800daba <memmove+0x10>
 800dab4:	4284      	cmp	r4, r0
 800dab6:	4623      	mov	r3, r4
 800dab8:	d807      	bhi.n	800daca <memmove+0x20>
 800daba:	1e43      	subs	r3, r0, #1
 800dabc:	42a1      	cmp	r1, r4
 800dabe:	d008      	beq.n	800dad2 <memmove+0x28>
 800dac0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dac4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dac8:	e7f8      	b.n	800dabc <memmove+0x12>
 800daca:	4601      	mov	r1, r0
 800dacc:	4402      	add	r2, r0
 800dace:	428a      	cmp	r2, r1
 800dad0:	d100      	bne.n	800dad4 <memmove+0x2a>
 800dad2:	bd10      	pop	{r4, pc}
 800dad4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dad8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dadc:	e7f7      	b.n	800dace <memmove+0x24>
	...

0800dae0 <_fstat_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	2300      	movs	r3, #0
 800dae4:	4d06      	ldr	r5, [pc, #24]	@ (800db00 <_fstat_r+0x20>)
 800dae6:	4604      	mov	r4, r0
 800dae8:	4608      	mov	r0, r1
 800daea:	4611      	mov	r1, r2
 800daec:	602b      	str	r3, [r5, #0]
 800daee:	f7f3 fd8f 	bl	8001610 <_fstat>
 800daf2:	1c43      	adds	r3, r0, #1
 800daf4:	d102      	bne.n	800dafc <_fstat_r+0x1c>
 800daf6:	682b      	ldr	r3, [r5, #0]
 800daf8:	b103      	cbz	r3, 800dafc <_fstat_r+0x1c>
 800dafa:	6023      	str	r3, [r4, #0]
 800dafc:	bd38      	pop	{r3, r4, r5, pc}
 800dafe:	bf00      	nop
 800db00:	20001038 	.word	0x20001038

0800db04 <_isatty_r>:
 800db04:	b538      	push	{r3, r4, r5, lr}
 800db06:	2300      	movs	r3, #0
 800db08:	4d05      	ldr	r5, [pc, #20]	@ (800db20 <_isatty_r+0x1c>)
 800db0a:	4604      	mov	r4, r0
 800db0c:	4608      	mov	r0, r1
 800db0e:	602b      	str	r3, [r5, #0]
 800db10:	f7f3 fd8d 	bl	800162e <_isatty>
 800db14:	1c43      	adds	r3, r0, #1
 800db16:	d102      	bne.n	800db1e <_isatty_r+0x1a>
 800db18:	682b      	ldr	r3, [r5, #0]
 800db1a:	b103      	cbz	r3, 800db1e <_isatty_r+0x1a>
 800db1c:	6023      	str	r3, [r4, #0]
 800db1e:	bd38      	pop	{r3, r4, r5, pc}
 800db20:	20001038 	.word	0x20001038

0800db24 <__assert_func>:
 800db24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db26:	4614      	mov	r4, r2
 800db28:	461a      	mov	r2, r3
 800db2a:	4b09      	ldr	r3, [pc, #36]	@ (800db50 <__assert_func+0x2c>)
 800db2c:	4605      	mov	r5, r0
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	68d8      	ldr	r0, [r3, #12]
 800db32:	b14c      	cbz	r4, 800db48 <__assert_func+0x24>
 800db34:	4b07      	ldr	r3, [pc, #28]	@ (800db54 <__assert_func+0x30>)
 800db36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db3a:	9100      	str	r1, [sp, #0]
 800db3c:	462b      	mov	r3, r5
 800db3e:	4906      	ldr	r1, [pc, #24]	@ (800db58 <__assert_func+0x34>)
 800db40:	f000 f850 	bl	800dbe4 <fiprintf>
 800db44:	f000 f860 	bl	800dc08 <abort>
 800db48:	4b04      	ldr	r3, [pc, #16]	@ (800db5c <__assert_func+0x38>)
 800db4a:	461c      	mov	r4, r3
 800db4c:	e7f3      	b.n	800db36 <__assert_func+0x12>
 800db4e:	bf00      	nop
 800db50:	200001e8 	.word	0x200001e8
 800db54:	0800e3e2 	.word	0x0800e3e2
 800db58:	0800e3ef 	.word	0x0800e3ef
 800db5c:	0800e41d 	.word	0x0800e41d

0800db60 <_calloc_r>:
 800db60:	b570      	push	{r4, r5, r6, lr}
 800db62:	fba1 5402 	umull	r5, r4, r1, r2
 800db66:	b934      	cbnz	r4, 800db76 <_calloc_r+0x16>
 800db68:	4629      	mov	r1, r5
 800db6a:	f7fb fc8b 	bl	8009484 <_malloc_r>
 800db6e:	4606      	mov	r6, r0
 800db70:	b928      	cbnz	r0, 800db7e <_calloc_r+0x1e>
 800db72:	4630      	mov	r0, r6
 800db74:	bd70      	pop	{r4, r5, r6, pc}
 800db76:	220c      	movs	r2, #12
 800db78:	2600      	movs	r6, #0
 800db7a:	6002      	str	r2, [r0, #0]
 800db7c:	e7f9      	b.n	800db72 <_calloc_r+0x12>
 800db7e:	462a      	mov	r2, r5
 800db80:	4621      	mov	r1, r4
 800db82:	f7fd fbdd 	bl	800b340 <memset>
 800db86:	e7f4      	b.n	800db72 <_calloc_r+0x12>

0800db88 <_realloc_r>:
 800db88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db8c:	4607      	mov	r7, r0
 800db8e:	4614      	mov	r4, r2
 800db90:	460d      	mov	r5, r1
 800db92:	b921      	cbnz	r1, 800db9e <_realloc_r+0x16>
 800db94:	4611      	mov	r1, r2
 800db96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db9a:	f7fb bc73 	b.w	8009484 <_malloc_r>
 800db9e:	b92a      	cbnz	r2, 800dbac <_realloc_r+0x24>
 800dba0:	f7fe fb26 	bl	800c1f0 <_free_r>
 800dba4:	4625      	mov	r5, r4
 800dba6:	4628      	mov	r0, r5
 800dba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbac:	f000 f833 	bl	800dc16 <_malloc_usable_size_r>
 800dbb0:	4284      	cmp	r4, r0
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	d802      	bhi.n	800dbbc <_realloc_r+0x34>
 800dbb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbba:	d8f4      	bhi.n	800dba6 <_realloc_r+0x1e>
 800dbbc:	4621      	mov	r1, r4
 800dbbe:	4638      	mov	r0, r7
 800dbc0:	f7fb fc60 	bl	8009484 <_malloc_r>
 800dbc4:	4680      	mov	r8, r0
 800dbc6:	b908      	cbnz	r0, 800dbcc <_realloc_r+0x44>
 800dbc8:	4645      	mov	r5, r8
 800dbca:	e7ec      	b.n	800dba6 <_realloc_r+0x1e>
 800dbcc:	42b4      	cmp	r4, r6
 800dbce:	4622      	mov	r2, r4
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	bf28      	it	cs
 800dbd4:	4632      	movcs	r2, r6
 800dbd6:	f7fd fc96 	bl	800b506 <memcpy>
 800dbda:	4629      	mov	r1, r5
 800dbdc:	4638      	mov	r0, r7
 800dbde:	f7fe fb07 	bl	800c1f0 <_free_r>
 800dbe2:	e7f1      	b.n	800dbc8 <_realloc_r+0x40>

0800dbe4 <fiprintf>:
 800dbe4:	b40e      	push	{r1, r2, r3}
 800dbe6:	b503      	push	{r0, r1, lr}
 800dbe8:	4601      	mov	r1, r0
 800dbea:	ab03      	add	r3, sp, #12
 800dbec:	4805      	ldr	r0, [pc, #20]	@ (800dc04 <fiprintf+0x20>)
 800dbee:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbf2:	6800      	ldr	r0, [r0, #0]
 800dbf4:	9301      	str	r3, [sp, #4]
 800dbf6:	f7ff fd37 	bl	800d668 <_vfiprintf_r>
 800dbfa:	b002      	add	sp, #8
 800dbfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc00:	b003      	add	sp, #12
 800dc02:	4770      	bx	lr
 800dc04:	200001e8 	.word	0x200001e8

0800dc08 <abort>:
 800dc08:	2006      	movs	r0, #6
 800dc0a:	b508      	push	{r3, lr}
 800dc0c:	f000 f834 	bl	800dc78 <raise>
 800dc10:	2001      	movs	r0, #1
 800dc12:	f7f3 fcca 	bl	80015aa <_exit>

0800dc16 <_malloc_usable_size_r>:
 800dc16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc1a:	1f18      	subs	r0, r3, #4
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	bfbc      	itt	lt
 800dc20:	580b      	ldrlt	r3, [r1, r0]
 800dc22:	18c0      	addlt	r0, r0, r3
 800dc24:	4770      	bx	lr

0800dc26 <_raise_r>:
 800dc26:	291f      	cmp	r1, #31
 800dc28:	b538      	push	{r3, r4, r5, lr}
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	d904      	bls.n	800dc3a <_raise_r+0x14>
 800dc30:	2316      	movs	r3, #22
 800dc32:	6003      	str	r3, [r0, #0]
 800dc34:	f04f 30ff 	mov.w	r0, #4294967295
 800dc38:	bd38      	pop	{r3, r4, r5, pc}
 800dc3a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc3c:	b112      	cbz	r2, 800dc44 <_raise_r+0x1e>
 800dc3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc42:	b94b      	cbnz	r3, 800dc58 <_raise_r+0x32>
 800dc44:	4628      	mov	r0, r5
 800dc46:	f000 f831 	bl	800dcac <_getpid_r>
 800dc4a:	4622      	mov	r2, r4
 800dc4c:	4601      	mov	r1, r0
 800dc4e:	4628      	mov	r0, r5
 800dc50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc54:	f000 b818 	b.w	800dc88 <_kill_r>
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d00a      	beq.n	800dc72 <_raise_r+0x4c>
 800dc5c:	1c59      	adds	r1, r3, #1
 800dc5e:	d103      	bne.n	800dc68 <_raise_r+0x42>
 800dc60:	2316      	movs	r3, #22
 800dc62:	6003      	str	r3, [r0, #0]
 800dc64:	2001      	movs	r0, #1
 800dc66:	e7e7      	b.n	800dc38 <_raise_r+0x12>
 800dc68:	2100      	movs	r1, #0
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc70:	4798      	blx	r3
 800dc72:	2000      	movs	r0, #0
 800dc74:	e7e0      	b.n	800dc38 <_raise_r+0x12>
	...

0800dc78 <raise>:
 800dc78:	4b02      	ldr	r3, [pc, #8]	@ (800dc84 <raise+0xc>)
 800dc7a:	4601      	mov	r1, r0
 800dc7c:	6818      	ldr	r0, [r3, #0]
 800dc7e:	f7ff bfd2 	b.w	800dc26 <_raise_r>
 800dc82:	bf00      	nop
 800dc84:	200001e8 	.word	0x200001e8

0800dc88 <_kill_r>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	4d06      	ldr	r5, [pc, #24]	@ (800dca8 <_kill_r+0x20>)
 800dc8e:	4604      	mov	r4, r0
 800dc90:	4608      	mov	r0, r1
 800dc92:	4611      	mov	r1, r2
 800dc94:	602b      	str	r3, [r5, #0]
 800dc96:	f7f3 fc78 	bl	800158a <_kill>
 800dc9a:	1c43      	adds	r3, r0, #1
 800dc9c:	d102      	bne.n	800dca4 <_kill_r+0x1c>
 800dc9e:	682b      	ldr	r3, [r5, #0]
 800dca0:	b103      	cbz	r3, 800dca4 <_kill_r+0x1c>
 800dca2:	6023      	str	r3, [r4, #0]
 800dca4:	bd38      	pop	{r3, r4, r5, pc}
 800dca6:	bf00      	nop
 800dca8:	20001038 	.word	0x20001038

0800dcac <_getpid_r>:
 800dcac:	f7f3 bc66 	b.w	800157c <_getpid>

0800dcb0 <_init>:
 800dcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcb2:	bf00      	nop
 800dcb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcb6:	bc08      	pop	{r3}
 800dcb8:	469e      	mov	lr, r3
 800dcba:	4770      	bx	lr

0800dcbc <_fini>:
 800dcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcbe:	bf00      	nop
 800dcc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcc2:	bc08      	pop	{r3}
 800dcc4:	469e      	mov	lr, r3
 800dcc6:	4770      	bx	lr
