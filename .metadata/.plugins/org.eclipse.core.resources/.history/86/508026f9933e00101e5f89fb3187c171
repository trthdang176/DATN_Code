/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "../../app/Screen.h"

#include "../../lib/AT24Cxx.h"
#include "../../lib/ADS1115.h"

#include "Control_IC.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan1;

I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint8_t test_Vcc_pin;

uint8_t dataRX[100];
uint8_t data_output[20] ={0};
char *data_test[] = {
  "$4053"                // NAME
  "Description"          // Description
  "16"                   // Num pin
  "16"                   // Num case
  "11L1100G0001011V",
  "11L1100G0011101V",
  "11L1100G0101110V",
  "11L1100G0110111V",
  "01L1100G1001111V",
  "11L1000G1011111V",
  "10L1100G1101111V",
  "11L0100G1111111V"
};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_I2C1_Init(void);
static void MX_CAN1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

struct __FILE
{
  int handle;
  /* Whatever you require here. If the only file you are using is */
  /* standard output using printf() for debugging, no file handling */
  /* is required. */
};
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;

uint8_t TxData[8];
uint8_t RxData[8];

uint32_t TxMailbox;

uint8_t ena = 0;
uint8_t RxCAn = 0;

float ADC_data[20] = {0};
float ADC_DUT1;
uint8_t channel_read_adc = 0;

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  MX_I2C1_Init();
  MX_CAN1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  // Init STM32
//  HAL_Delay(3000);
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
//  HAL_UART_Receive_IT(&huart2, dataRX, 1);
  HAL_TIM_Base_Start(&htim1);

  // Init custom code
//  Control_IC_begin();

 Latch_IC_begin();
  
  //  uint8_t IC_test_data[20] = {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
    // uint8_t IC_test_data[20] = {2,2,2,2,2,2,2,2,2,1,0,2,2,2,2,2,2,2,2,2};
  uint8_t IC_test_data_1[20] = {0,0,2,0,0,0,0,0,2,1,0,2,0,0,0,0,1,0,0,1};  // 0
  uint8_t IC_test_data_2[20] = {0,0,2,0,0,0,0,0,2,1,0,2,0,0,0,0,0,0,0,1};  // 0
  uint8_t IC_test_data[20] =   {2,2,2,2,2,2,2,2,2,1,0,2,2,2,2,2,2,2,2,2};
//  uint8_t IC_test_data[20];
//  memset(IC_test_data,1,sizeof(IC_test_data));
 WritePin_ICTest(IC_test_data);

  uint8_t data_Ron[20];
  memset(data_Ron,1,sizeof(data_Ron));
  WritePin_Ron(data_Ron);

  uint8_t data_Current[20];
  memset(data_Current,0,sizeof(data_Current));
  WritePin_CurrentLeakage(data_Current);
//  Control_Vcc_pin(0XFF); // disable all vcc in pin

  uint8_t data_read[20] = {0};

  ADS1115_t ADS1115;
  config_reg_t config_reg_ads;
  config_reg_ads.PGA = PGA_6_144;
  config_reg_ads.channel = DEFAULT_VALUE_CHANNEL;
  config_reg_ads.compareMode = DEFAULT_VALUE_COMP_MODE;
  config_reg_ads.DataRate = DEFAULT_VALUE_DATARATE;
  config_reg_ads.latchingMode = DEFAULT_VALUE_COMP_LAT;
  config_reg_ads.mode = DEFAULT_VALUE_MODE;
  config_reg_ads.polarityMode = DEFAULT_VALUE_COMP_POL;
  config_reg_ads.queueComparator = DEFAULT_VALUE_COMP_QUE;

  ADS1115.config = &config_reg_ads;

  ADS1115_Init(&ADS1115,&hi2c1,ADS1115_READ_ADC_ADDRESS);



  Screen_begin(&huart2);
//  AT24Cxx_t pAT24C256;
//  AT24Cxx_Init(&pAT24C256,0x50,&hi2c1);

  //  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); // D0
  //  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_SET); // D1

  // Control_Input_IC_Test(Latch_IC1,0x00); // 0000 1111
  // Control_Input_IC_Test(Latch_IC2,0x00); // 0000 1111
  // Control_Input_IC_Test(Latch_IC3,0x40); // 0000 1111

//  Control_Program_IC_Test(data_test[1],16);


  //  uint8_t sendBuffer[10] = {0x5A, 0xA5, 0x07, 0x83, 0x00, 0x84, 0x5A, 0x01, 0x00, 139};
  //  uint8_t sendBuffer[] = {
  //   0x5A, 0xA5, 0xFB, 0x82,  
  //   0x18, 0x00, 0x00, 0x02,
  //   0x00, 0x3B, 0x01, 0xED,

  //   // Clock 1
  //   0x00, 0x19, 0x00, 0xC8, 0x00, 0x3C, 0x00, 0xC8,
  //   // 0x00, 0x3C, 0x00, 0xAA,  0x00, 0x5F, 0x00, 0xAA,
  //   0x00, 0x3C, 0x00, 0xC8, 0x00, 0x5F, 0x00, 0xC8,

  //   // Clock 2
  //   0x00, 0x5F, 0x00, 0xC8,  0x00, 0x82, 0x00, 0xC8,
  //   0x00, 0x82, 0x00, 0xAA,  0x00, 0xA5, 0x00, 0xAA,

  //   // Clock 3
  //   0x00, 0xA5, 0x00, 0xC8,  0x00, 0xC8, 0x00, 0xC8,
  //   0x00, 0xC8, 0x00, 0xAA,  0x00, 0xEB, 0x00, 0xAA,

  //   // Clock 4
  //   0x00, 0xEB, 0x00, 0xC8,  0x01, 0x0E, 0x00, 0xC8,
  //   0x01, 0x0E, 0x00, 0xAA,  0x01, 0x31, 0x00, 0xAA,

  //   // Clock 5
  //   0x01, 0x31, 0x00, 0xC8,  0x01, 0x54, 0x00, 0xC8,
  //   0x01, 0x54, 0x00, 0xAA,  0x01, 0x77, 0x00, 0xAA,

  //   // Clock 6
  //   0x01, 0x77, 0x00, 0xC8,  0x01, 0x9A, 0x00, 0xC8,
  //   0x01, 0x9A, 0x00, 0xAA,  0x01, 0xBD, 0x00, 0xAA,

  //   // Clock 7
  //   0x01, 0xBD, 0x00, 0xC8,  0x01, 0xE0, 0x00, 0xC8,
  //   0x01, 0xE0, 0x00, 0xAA,  0x02, 0x03, 0x00, 0xAA,

  //   // Clock 8
  //   0x02, 0x03, 0x00, 0xC8,  0x02, 0x26, 0x00, 0xC8,
  //   0x02, 0x26, 0x00, 0xAA,  0x02, 0x49, 0x00, 0xAA,

  //   // Clock 9
  //   0x02, 0x49, 0x00, 0xC8,  0x02, 0x6C, 0x00, 0xC8,
  //   0x02, 0x6C, 0x00, 0xAA,  0x02, 0x8F, 0x00, 0xAA,

  //   // Clock 10
  //   0x02, 0x8F, 0x00, 0xC8,  0x02, 0xB2, 0x00, 0xC8,
  //   0x02, 0xB2, 0x00, 0xAA,  0x02, 0xD5, 0x00, 0xAA,

  //   // Clock 11
  //   0x02, 0xD5, 0x00, 0xC8,  0x02, 0xF8, 0x00, 0xC8,
  //   0x02, 0xF8, 0x00, 0xAA,  0x03, 0x1B, 0x00, 0xAA,

  //   // Clock 12
  //   0x03, 0x1B, 0x00, 0xC8,  0x03, 0x3E, 0x00, 0xC8,
  //   0x03, 0x3E, 0x00, 0xAA,  0x03, 0x61, 0x00, 0xAA,

  //   // Clock 13
  //   0x03, 0x61, 0x00, 0xC8,  0x03, 0x84, 0x00, 0xC8,
  //   0x03, 0x84, 0x00, 0xAA,  0x03, 0xA7, 0x00, 0xAA,

  //   // Clock 14
  //   0x03, 0xA7, 0x00, 0xC8,  0x03, 0xCA, 0x00, 0xC8,
  //   0x03, 0xCA, 0x00, 0xAA,  0x03, 0xED, 0x00, 0xAA,

  //   // Clock 15
  //   0x03, 0xED, 0x00, 0xC8,  0x04, 0x10, 0x00, 0xC8,
  //   0x04, 0x10, 0x00, 0xAA,  0x04, 0x33, 0x00, 0xAA,

  //   0xFF, 0x00};
  //  HAL_UART_Transmit(&huart2,sendBuffer,sizeof(sendBuffer),500);

  //  uint8_t sendBuffer_2[] = {0x5A, 0xA5, 0x05, 0x82, 0x18, 0xF7, 0x00, 0x02};            // SP offset 7 Low
  //  HAL_UART_Transmit(&huart2,sendBuffer_2,sizeof(sendBuffer_2),500);


    // Active the notification
//    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);

  /* start the CAN */
  HAL_CAN_Start(&hcan1);

   TxHeader.DLC = 2; // data length
   TxHeader.IDE = CAN_ID_STD;
   TxHeader.RTR = CAN_RTR_DATA;
//    //TxHeader.StdId = 0x407; // ID of sender
   TxHeader.StdId = 0x407; // ID of sender

    // Data Transmit
   TxData[6] = "hello\n";
//


//    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
//    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_9);
	  //  HAL_Delay(1000);
//    WritePin_ICTest(IC_test_data_1);
//    ReadPin_IC_test(data_read);
    // WritePin_ICTest(IC_test_data);
    // ReadPin_IC_test(data_read);
//    for (uint8_t i = 0; i < 20; i++) {
//      Read_ADC_IC_test(&ADS1115,i,ADC_data);
//      // ADC_DUT1 = ADS1115_single_getdata(&ADS1115, CHANNEL_AIN0_GND);
//    }
//    Read_ADC_IC_test(&ADS1115,channel_read_adc,ADC_data);
//	  Control_Output_IC_Test(Latch_IC4,data_output);
//	  Control_Output_IC_Test(Latch_IC5,data_output);
//	  Control_Output_IC_Test(Latch_IC6,data_output);
//	  HAL_Delay(10);
	  // printf("SWO Debug!!!\n");
    //    HAL_Delay(1000);
      HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	  HAL_Delay(1000);
	  // HAL_Delay(1000);

//	  for (int i = 0; i < sizeof(sendBuffer); i++) {
//	      HAL_UART_Transmit(&huart2, &sendBuffer[i], 1, 500);
//	  }
//	  HAL_UART_Transmit(&huart2,sendBuffer,sizeof(sendBuffer),500);

//	  HAL_Delay(3000);

//	  if (RxCAn == 1) {
//	  		  TxData[0] = RxData[0];
//	  		  TxData[1] = RxData[1] + 5;
//	  		  HAL_Delay(1000);
//	  		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
//	  	  }

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{

  /* USER CODE BEGIN CAN1_Init 0 */

  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 16;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = DISABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 168 -1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xFFFF - 1;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 460800;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB11 PB12
                           PB13 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PD0 PD1 PD2 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
	if( huart->Instance == huart2.Instance ) {

		// Call to callback function screen
		Screen_RX_data(dataRX);

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
	RxCAn = 1;
}


int _write(int file, char *ptr, int len) {
    for (int i = 0; i < len; i++) {
        ITM_SendChar(ptr[i]);
    }
    return len;
}

/**
 * delay polling in microsecond
 */
void delay_us(uint16_t delay_us) {
	__HAL_TIM_SET_COUNTER(&htim1,0); // reset time 1 to 0

	while(__HAL_TIM_GET_COUNTER(&htim1) < delay_us );
}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
