/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "stdbool.h"

#include "../../app/Screen.h"

#include "../../lib/AT24Cxx.h"
#include "../../lib/ADS1115.h"

#include "Control_IC.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan1;

I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

uint8_t Data_test_short_circuit[20] = {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2};

uint8_t dataRX[100];
uint8_t data_output[20] ={0};
  // "$4053"                // NAME
  // "Description"          // Description
  // "16"                   // Num pin
  // "8"                    // Num case
// char *data_test = {
//   "11L1100G0001011V\n"
//   "11L1100G0011101V\n"
//   "11L1100G0101110V\n"
//   "11L1100G0110111V\n"
//   "01L1100G1001111V\n"
//   "11L1000G1011111V\n"
//   "10L1100G1101111V\n"
//   "11L0100G1111111V\n"
// 		"end"
// };
char data_test[250];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_I2C1_Init(void);
static void MX_CAN1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

struct __FILE
{
  int handle;
  /* Whatever you require here. If the only file you are using is */
  /* standard output using printf() for debugging, no file handling */
  /* is required. */
};
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;

uint8_t TxData[8];
uint8_t RxData[8];

uint32_t TxMailbox;

uint8_t ena = 0;
uint8_t RxCAn = 0;

float ADC_data[20] = {0};
float ADC_DUT1;
uint8_t channel_read_adc = 0;

IsoTpLink CAN_iso;
static uint8_t can_iso_recv_buf[250];
static uint8_t can_iso_send_buf[250];

Control_IC_Test_t Control_IC_test;
bool flag_run_test;

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  MX_I2C1_Init();
  MX_CAN1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  // Init STM32
//  HAL_Delay(3000);
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART

  HAL_TIM_Base_Start(&htim1);

  // Init custom code
//  Control_IC_begin();

// Latch_IC_begin();
  
  //  uint8_t IC_test_data[20] = {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
    // uint8_t IC_test_data[20] = {2,2,2,2,2,2,2,2,2,1,0,2,2,2,2,2,2,2,2,2};
  uint8_t IC_test_data_1[20] = {0,0,2,0,0,0,0,0,2,1,0,2,0,0,0,0,1,0,0,1};  // 0
  uint8_t IC_test_data_2[20] = {0,0,2,0,0,0,0,0,2,1,0,2,0,0,0,0,0,0,0,1};  // 0
  uint8_t IC_test_data[20] =   {2,2,2,2,2,2,2,2,2,0,1,2,2,2,2,2,2,2,2,2};

//  uint8_t IC_test_data[20];
  memset(IC_test_data,2,sizeof(IC_test_data));
  WritePin_ICTest(IC_test_data);
  TurnOff_short_circuit();
  uint8_t data_Ron[20];
  memset(data_Ron,1,sizeof(data_Ron));
  WritePin_Ron(data_Ron);

  flag_run_test = false;
  //  uint8_t data_Current[20] = {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0};
//  memset(data_Current,1,sizeof(data_Current));
  //  WritePin_CurrentLeakage(data_Current);

  ADS1115_t ADS1115;
  config_reg_t config_reg_ads;
  config_reg_ads.PGA = PGA_6_144;
  config_reg_ads.channel = DEFAULT_VALUE_CHANNEL;
  config_reg_ads.compareMode = DEFAULT_VALUE_COMP_MODE;
  config_reg_ads.DataRate = DEFAULT_VALUE_DATARATE;
  config_reg_ads.latchingMode = DEFAULT_VALUE_COMP_LAT;
  config_reg_ads.mode = DEFAULT_VALUE_MODE;
  config_reg_ads.polarityMode = DEFAULT_VALUE_COMP_POL;
  config_reg_ads.queueComparator = DEFAULT_VALUE_COMP_QUE;

  ADS1115.config = &config_reg_ads;

  ADS1115_Init(&ADS1115,&hi2c1,ADS1115_READ_ADC_ADDRESS);


  // TurnOn_short_circuit();
  // for (uint8_t i = 0; i < 20; i++) {
  //   Read_ADC_IC_test(&ADS1115,i,ADC_data);
  // }
  // TurnOff_short_circuit();
  //   memset(IC_test_data,1,sizeof(IC_test_data));
  //   WritePin_ICTest(IC_test_data);
  // for (uint8_t i = 0; i < 20; i++) {
  //   Read_ADC_IC_test(&ADS1115,i,ADC_data);
  // }

//  Screen_begin(&huart2);

  uint8_t num_case = 8;
  uint8_t num_pin  = 16;
  uint8_t num_pin_control = 20;
  uint8_t (*data_control)[20] = malloc(num_case * sizeof(*data_control));

  char * ptr_data_test ;
  uint8_t count_case = 0;
  
  uint8_t buffer[20];
  uint8_t can_send_result_test[500];
  /* convert data test to data control IC test */
//  ptr_data_test = strtok(data_test,"\n");
//  while (ptr_data_test != NULL) {
//    convert_data_test(num_pin,ptr_data_test,data_control[count_case]);
//    memcpy(buffer,data_control[count_case],20);
//    count_case++;
//    // ptr_data_test = strchr(ptr_data_test,'\n');
//    ptr_data_test = strtok(NULL,"\n");
//    // ptr_data_test++;
//  }

  //  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); // D0
  //  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_SET); // D1

//  Control_Program_IC_Test(data_test[1],16);

  // Active the notification
  TxHeader.DLC = 6;
  TxHeader.StdId = 0x103;
  TxHeader.IDE = CAN_ID_STD;
  TxHeader.RTR = CAN_RTR_DATA;

  uint8_t data_tx[6] = {'H','E','L','L','O','3'};
  // HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data_tx, &TxMailbox);

  isotp_init_link(&CAN_iso, 0x471, can_iso_send_buf , sizeof(can_iso_send_buf)
		  	  	  	  	  	  	  	, can_iso_recv_buf, sizeof(can_iso_recv_buf));


  /* start the CAN */
  HAL_CAN_Start(&hcan1);

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);

  // uint32_t pre;
  // pre = 0; 
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//    if (HAL_GetTick() - pre > 2000) {
//      uint8_t send_data[200];
//      memcpy(send_data,data_test,140);
//      isotp_send(&CAN_iso, send_data, 140);
//      pre = HAL_GetTick();
//    }

      // HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data_tx, &TxMailbox);
	    // HAL_Delay(2000);
	  //  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_9);
	  //  HAL_Delay(1000);
//    WritePin_ICTest(IC_test_data_1);
//    ReadPin_IC_test(data_read);
    // WritePin_ICTest(IC_test_data);
    // ReadPin_IC_test(data_read);
//    for (uint8_t i = 0; i < 20; i++) {
//      Read_ADC_IC_test(&ADS1115,i,ADC_data);
//      // ADC_DUT1 = ADS1115_single_getdata(&ADS1115, CHANNEL_AIN0_GND);
//    }
//    Read_ADC_IC_test(&ADS1115,channel_read_adc,ADC_data);
//	  HAL_Delay(10);
    if (flag_run_test) {
      /* First test short circuit */
      switch (Control_IC_test.cur_case) {
        case TEST_SHORT_CIRCUIT : {
          /* setup float pin IC test, enable PULLUP,PULLDOWN */
          Control_IC_test.data_control_testing = &Data_test_short_circuit;
          WritePin_ICTest(Control_IC_test.data_control_testing);
          TurnOn_short_circuit();
          Control_IC_test.result_short_circuit = malloc(20 * sizeof(float));
          /* read the adc pin */
          for (uint8_t i = 0; i < 20; i++) {
            Read_ADC_IC_test(&ADS1115,i,Control_IC_test.result_short_circuit);
          }
          TurnOff_short_circuit();
          memcpy(ADC_data,Control_IC_test.result_short_circuit,20*4);
          Control_IC_test.cur_case = TEST_FUNCTION;
        }
        case TEST_FUNCTION : {
          /* convert data test to data control IC test */
          Control_IC_test.data_control_testing = malloc(num_case * num_pin_control);
          count_case = 0;
          ptr_data_test = strtok(data_test,"\n");
          while (ptr_data_test != NULL) {
            convert_data_test(num_pin,ptr_data_test,(Control_IC_test.data_control_testing + (num_pin_control * count_case)));
            memcpy(buffer,Control_IC_test.data_control_testing + (num_pin_control * count_case),20);
            count_case++;
            ptr_data_test = strtok(NULL,"\n"); /* go to next case test data */
          }
          /* control pin with data test */
          TurnOff_short_circuit();
          Control_IC_test.result_test_function = malloc(num_case * num_pin);
          count_case = 0;
          while (count_case < num_case) {
            WritePin_ICTest(Control_IC_test.data_control_testing + (num_pin_control * count_case));
//            memcpy(buffer,Control_IC_test.data_control_testing + (num_pin_control * count_case),20);
            HAL_Delay(10);
            ReadPin_IC_test(Control_IC_test.result_test_function + (num_pin * count_case),num_pin);
//              memcpy(buffer,Control_IC_test.result_test_function + (num_pin * count_case),num_pin);
            count_case++;
          }
          memcpy(can_send_result_test,Control_IC_test.result_test_function,num_pin * num_case);
          /* check result */
          Control_IC_test.result_case = malloc(num_case * sizeof(uint8_t));
          memset(Control_IC_test.result_case,1,num_case);
          count_case = 0;
          uint8_t data_convert;
          ptr_data_test = strtok(data_test,"\n");
          while (ptr_data_test != NULL) {
            // uint8_t *result_case = (uint8_t *)(Control_IC_test.result_test_function + (num_pin * count_case));
            // memcpy(buffer,result_case,num_pin);
            for (uint8_t pin = 0; pin < num_pin; pin++) {
              if (convert_data_compare(ptr_data_test[pin]) != can_send_result_test[pin + (count_case * num_pin)]) {
                Control_IC_test.result_case[count_case] = 0;
                break;
              }
            }
            count_case++;
            ptr_data_test = strtok(NULL,"\n");
          }
          memcpy(buffer,Control_IC_test.result_case,num_case);
          Control_IC_test.cur_case = FINISH_TEST;
        } break;
        case FINISH_TEST : {
          /* send data to master */
          uint8_t total_data_send_can[500];
          memcpy(total_data_send_can,Control_IC_test.result_test_function,num_case*num_pin);
          // total_data_send_can[num_case*num_pin] = '\n';
          memcpy(&total_data_send_can[num_case*num_pin+1],Control_IC_test.result_case,num_case);
          /* convert data to char type */
          for (uint16_t i = 0; i < ((num_case * num_pin) + num_case + 1); i++) {
            total_data_send_can[i] = '0' + total_data_send_can[i];
          }
          total_data_send_can[num_case*num_pin] = '\0';
          isotp_send(&CAN_iso,total_data_send_can,((num_case * num_pin) + num_case + 1));
        } break;
        default : break;
      }
    }

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{

  /* USER CODE BEGIN CAN1_Init 0 */

  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 4;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = DISABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
  canfilterconfig.FilterIdHigh = 0x131<<5;
  canfilterconfig.FilterIdLow = 0;
  canfilterconfig.FilterMaskIdHigh = 0x131<<5;
  canfilterconfig.FilterMaskIdLow = 0;
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
  canfilterconfig.SlaveStartFilterBank = 20;

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
  /* USER CODE END CAN1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 200000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 168 -1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xFFFF - 1;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  
  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 460800;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB11 PB12
                           PB13 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PD0 PD1 PD2 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
	if( huart->Instance == huart2.Instance ) {

		// Call to callback function screen
		Screen_RX_data(dataRX);

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
	uint8_t payload[200];
	uint16_t act_size = 0;
  isotp_on_can_message(&CAN_iso, RxData, RxHeader.DLC);
  isotp_poll(&CAN_iso);
  if (CAN_iso.receive_status == ISOTP_RECEIVE_STATUS_FULL) {
	  isotp_receive(&CAN_iso, payload, sizeof(payload), &act_size);
    /* Receive full data test */
    memcpy(data_test,payload,act_size);
    Control_IC_test.cur_case = TEST_SHORT_CIRCUIT;
    flag_run_test = true;
  }

}

//void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
//	  isotp_poll(&CAN_iso);
//}
//
//void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
//	  isotp_poll(&CAN_iso);
//}
//
//void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
//	  isotp_poll(&CAN_iso);
//}


int _write(int file, char *ptr, int len) {
    for (int i = 0; i < len; i++) {
        ITM_SendChar(ptr[i]);
    }
    return len;
}

/**
 * delay polling in microsecond
 */
void delay_us(uint16_t delay_us) {
	__HAL_TIM_SET_COUNTER(&htim1,0); // reset time 1 to 0

	while(__HAL_TIM_GET_COUNTER(&htim1) < delay_us );
}

/* FUNCTION USING IN CAN ISO TP */
int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t* data, const uint8_t size) {
  TxHeader.DLC = size;
  TxHeader.StdId = arbitration_id;
  TxHeader.IDE = CAN_ID_STD;
  TxHeader.RTR = CAN_RTR_DATA;

  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TxMailbox) == HAL_OK) {
	  //while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
	  return ISOTP_RET_OK;
  }

  return ISOTP_RET_ERROR;
}


uint32_t isotp_user_get_ms(void) {
	return HAL_GetTick();
}

void isotp_user_debug(const char* message, ...) {
  
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
