#include "Screen.h"

#include "../../app/app_main.h"
#include "../lib/Common.h"
#include "../lib/AT24Cxx.h"
#include "../lib/DS3231.h"

#define SIZE_LOOKUP_VP_SIG (sizeof(lookup_VP_SIG)/sizeof(VP_item))
#define SIZE_LOOKUP_VP_STRING (sizeof(lookup_VP_STRING)/sizeof(VP_String))

Screen_t _Screen;  // screen object

/* Private prototype function */
void Screen_init_handler_table(Screen_t *const obj_screen);
void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e);

void Screen_Init_Variable(Screen_t *const obj_screen);
void Screen_ShowData_Mainpage(Screen_t *const screen_obj, uint8_t index_program);
void Screen_SetInfo_Pin(Screen_t *const screen_obj);

void Screen_GetIcon_Pin(Screen_t *const screen_obj, char *data_pin);
void Screen_GetIcon_Result(Screen_t *const screen_obj, char *result);

Return_Status Screen_CheckInput_Keyboard(Screen_t *const obj_screen);

static void get_data_testing_ic(char *searchName,Program_Test_t *pdata_test);

/* Array store the VP address signal */
/* Note: The VP address must be increased to find the index */
VP_item lookup_VP_SIG[] = {
    {VP_Navigation_button,SIG_NAVIGATION},   // 5000
    {VP_Selection_button,SIG_SELECTION},     // 5100
    {VP_Num_Keyboard,SIG_NUM_KEYBOARD},      // 5300
    {VP_Full_Keyboard,SIG_FULL_KEYBOARD},    // 5380
    {VP_Save_button,SIG_SAVE},               // 5400
    {VP_Enter_button,SIG_ENTER},             // 5500
    {VP_Keyboard,SIG_KEYBOARD}               // FF00
};

/* The array store the VP address to check data input */
VP_item lookup_VP_check_datakeyboard[] = {
    {VP_Day,CONDITION_DAY},
    {VP_Month,CONDITION_MONTH},
    {VP_Year,CONDITION_YEAR},
    {VP_Minute,CONDITION_MINUTE},
    {VP_Hour,CONDITION_HOUR}
};

VP_String lookup_VP_STRING[] = {
    {VP_Num_IC_Test,"NUMBER OF IC","PSC"}
};

Screen_condition_t condition_array[MAX_CONDITION] = {
    [CONDITION_DAY]      = {.max_value = 31, .min_value = 1},
    [CONDITION_MONTH]    = {.max_value = 12, .min_value = 1},
    [CONDITION_YEAR]     = {.max_value = 99, .min_value = 1},
    [CONDITION_HOUR]     = {.max_value = 23, .min_value = 0},
    [CONDITION_MINUTE]   = {.max_value = 59, .min_value = 0}
};

void Screen_begin(UART_HandleTypeDef * UART_Screen) {
    // Init _DWIN UART
	_Screen.Screen_DWIN.pUart = UART_Screen;

    // add receive function callback
	Screen_init_handler_table(&_Screen);
    DWIN_SetCallback((Dwin_t *)&_Screen,(pListenDWIN)Screen_RX_Callback);

    Screen_Init_Variable(&_Screen);

    // Init screen keyboard     
    _Screen.Screen_keyboard.VP_Text = 0xFFFF;
    _Screen.Screen_keyboard.Index_String = 0;
    _Screen.Screen_keyboard.Caplock = 0;
    
    

    _Screen.pre_page = 106;
    _Screen.Ishome = true;

    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST1].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST1]));

//    char* data_pin[] = {
//    "VEE\n""INH\n" "Z\n" "Y\n" "X\n" "VSS\n" "B\n" "C\n"
//        "A\n" "VCC\n" "X0\n" "X1\n" "Y0\n" "Y1\n" "Z0\n" "Z1\n"
//    };

//    Screen_SetInfo_Pin(&_Screen,data_pin);

//    char *data_test[] = {
//        "11L1100G0001011V\n"
//        "11L1100G0011101V\n"
//        "11L1100G0101110V\n"
//        "11L1100G0110111V\n"
//        "01L1100G1001111V\n"
//        "11L1000G1011111V\n"
//        "10L1100G1101111V\n"
//        "11L0100G1111111V\n"
//    };

//    Screen_GetIcon_Pin(&_Screen,data_test);
//    DWIN_SetArray_Icon(&_Screen,VP_ICON_DIRECTION_PIN,_Screen.IC_Testerx[PROGRAM_TEST1].config_pin,16);
//    Screen_GetIcon_Result(&_Screen,data_test);
//    DWIN_SetArray_Icon(&_Screen,VP_ICON_RESULT,_Screen.IC_Testerx[PROGRAM_TEST1].data_result[0],16);
    // DWIN_SetVariable_Icon(&_Screen,0x4150,1);
    // DWIN_SetVariable_Icon(&_Screen,0x4151,1);
    // DWIN_SetVariable_Icon(&_Screen,0x4152,1);


    // uint8_t data_clock[] = {1,1,0,1,0,1};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1800,25,200,data_clock,sizeof(data_clock));
    // HAL_Delay(200);
    // uint8_t data_clock2[] = {1,0,1,0,1,0,1,0,1,0};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1000,114,144,data_clock2,sizeof(data_clock2));
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x11D0,2);
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x13D0,2);
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x15D0,2);
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x17D0,2);
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x19D0,2);
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1BD0,2);
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1DD0,2);

    // HAL_Delay(200);
    // uint8_t data_clock3[] = {0,1,0,1,0,1,0,1,0,1,1,1};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1800,25,200,data_clock3,sizeof(data_clock3));
    // uint8_t data[15] = {1,1,0,0,1,0,0,1,1,0,0,0,1,1,0};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1000,14,140,data,15);
    // DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x11D0,2);
    // uint8_t data_2[15] = {1,1,0,0,1,0,0,1,1,0,0,0,1,1,0};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1200,14,190,data,15);
    // DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x13D0,2);
    // uint8_t data_2[15] = {1,1,0,0,1,0,0,1,1,0,0,0,1,1,0};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1400,14,240,data,15);
    // DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x15D0,2);
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1600,14,290,data,15);
    // DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x17D0,2);
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1800,14,340,data,15);
    // DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x19D0,2);
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1A00,14,390,data,15);
    // DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1BD0,2);
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1C00,14,440,data,15);
    // DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1DD0,2);

    // uint8_t current = 0;

    // for(uint8_t i = 0; i < 8; i++) {
    //     uint16_t Address_show = 0x1000;
    //     uint16_t X_Coordinate = 14;
    //     uint16_t Y_Coordinate = 142;
    //     DWIN_Create_Basic_line((Dwin_t *)&_Screen,Address_show,X_Coordinate,Y_Coordinate,data,15);
    //     Address_show = Address_show + 0x200;
    //     Y_Coordinate = Y_Coordinate + 30;
    //     HAL_Delay(500);
    // }
    DWIN_SetPage((Dwin_t *)&_Screen,DWINPAGE_MAIN);  // Go to first page when start
}

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
}

void Screen_RX_Callback(uint16_t Vpaddress, uint8_t lowByte, uint8_t highByte) { 
    screen_event_t screen_event;
    // If the VP is FFFF -> skip
    if (Vpaddress != 0xFFFF) {
        screen_event.event = Index_VP(Vpaddress,lookup_VP_SIG,SIZE_LOOKUP_VP_SIG);
        screen_event.action = lowByte;
        screen_event.data = highByte;
        screen_event.keyvalue = (uint16_t)((highByte<<8) | (lowByte&0xFF));

        // call to respective function
        Screen_excute_RX_function(&_Screen,&screen_event);
    }
}


#pragma region CALLBACK FUNCTION VP ADRRESS 

void Navigation_setting_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
    screen_obj->Ishome = false;
}

void Navigation_home_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    uint8_t current_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    UNUSED(current_program);
    // Show data

    // Switch page
    screen_obj->Ishome = true;
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,PROGRAM_TEST1);
    // DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain);
}   

void Navigation_setting_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {

    // Switch page
    // DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
    /* Get the setting page */
    screen_obj->page_setting = DWINPAGE_SETTING_PROGRAM;
    // Switch page password 
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password,"",strlen(""));
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
}

void Navigation_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_TIME);
}

void Navigation_setting_wifi(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    /* show data */
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Wifi,screen_obj->Wifi_setting.Name_Wifi,strlen(screen_obj->Wifi_setting.Name_Wifi));
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password_Wifi,screen_obj->Wifi_setting.Password_Wifi,strlen(screen_obj->Wifi_setting.Password_Wifi));

    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
}

void Navigation_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_Program_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC));
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC));
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
}

void Navigation_detail_mainpage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    if (screen_obj->IC_Testerx[screen_obj->curr_device].isShort == '0') {
        /* change main page */
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN_DETAIL;
        // Switch page
        show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,(uint8_t)0);
    }
}

void Navigation_graph_mainpage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    /* change main page */
    screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN_PULSE;
    // Switch page
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,(uint8_t)0);
}

void Navigation_Change_MainPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    // Change current device
    if (screen_event->data == DATA_NEXT_MAINPAGE) {
        screen_obj->curr_device++;
        if (screen_obj->curr_device == MAX_DEVICE) {
            screen_obj->curr_device = DEVICE_1;
        }
    } else if (screen_event->data == DATA_PREV_MAINPAGE) {
        screen_obj->curr_device--;
        if (screen_obj->curr_device == 255 ) {
            screen_obj->curr_device = DEVICE_3;
        }
    }
    uint8_t curr_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;

    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,curr_program);
}

void Navigation_Change_CaseTest(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
    
    // Change current case
    if (screen_event->data == DATA_PREV_CASE) {
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < (num_case - 1)) {
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
        }
    }

    /* Show data */
    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1,num_case);
    DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
    // DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_RESULT,_Screen.IC_Testerx[selectedProgram].data_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case],num_pin);
    DWIN_SetArray_Icon(screen_obj,VP_ICON_RESULT,&(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case * num_pin]),num_pin);
}

void Navigation_Change_CasePulse(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;

    if (screen_event->data == DATA_PREV_CASE) {
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < 1) {
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
        }
    }

    char ShowCase_String[30];
    uint8_t index_data;
    uint16_t vp_pulse = 0x1000;
    uint8_t pins_to_show = num_pin - 2; 
    uint8_t skip_index1 = (num_pin / 2) - 1; // First skip index
    uint8_t skip_index2 = num_pin - 1;       // Second skip index
    uint16_t Address_VP = VP_Text_Pin_Pulse;

    char *data_copy = malloc(screen_obj->Program_Testx[PROGRAM_TEST1].data_pin_len + 1);
    memcpy(data_copy, screen_obj->Program_Testx[PROGRAM_TEST1].data_pin, screen_obj->Program_Testx[PROGRAM_TEST1].data_pin_len);
    data_copy[screen_obj->Program_Testx[PROGRAM_TEST1].data_pin_len] = '\0'; // Null terminate

    // First, collect all pin names into an array
    char pin_names[32][32]; // Adjust size as needed
    uint8_t total_pins = 0;
    char *temp_buf = strtok(data_copy, "\n");

    while (temp_buf != NULL && total_pins < 32) {
        strcpy(pin_names[total_pins], temp_buf);
        total_pins++;
        temp_buf = strtok(NULL, "\n");
    }

    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1, 
            (pins_to_show + 6) / 7); // Calculate total cases needed

    DWIN_SetText((Dwin_t *)screen_obj, VP_Show_CurrentCase, ShowCase_String, strlen(ShowCase_String));

    for (uint8_t i = 0; i < 7; i++) {
        uint8_t display_pin = (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case * 7) + i;
        
        if (display_pin < pins_to_show) {
            uint8_t actual_pin_index = display_pin;
            
            // Adjust for skipped indices
            if (actual_pin_index >= skip_index1) {
                actual_pin_index++; // Skip VCC
            }
            if (actual_pin_index >= skip_index2) {
                actual_pin_index++; // Skip GND
            }
            
            // Calculate data index
            index_data = num_case * actual_pin_index;
            
            // Create the line with actual data
            DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 114, 144 + (45 * i), 
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
                                num_case);
            
            // Set pin name
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, pin_names[actual_pin_index], 
                        strlen(pin_names[actual_pin_index]));
            
        } else {
            // Empty line
            DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, 
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[0]), 
                                0);
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, " ", 1);
        }
        
        vp_pulse += 0x200;
        Address_VP += 0x10;
    }

    free(data_copy);
}

void Navigation_Finish_Review(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    uint8_t curr_num_ic = ++screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic;
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t num_ic = atoi(screen_obj->Program_Testx[index_program].num_IC);
    screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
    /* show number of testing ic */
    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d / %d",curr_num_ic,num_ic);
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,ShowCase_String,strlen(ShowCase_String));
    if (curr_num_ic < num_ic) {
        /* switch page */
        show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,index_program); // check 
        
        /* send data to tester */
        uint8_t can_send_buf[500];
        memcpy(can_send_buf,screen_obj->Program_Testx[index_program].data_test,screen_obj->Program_Testx[index_program].data_test_len);
        isotp_send(&CAN_iso[screen_obj->curr_device],can_send_buf,screen_obj->Program_Testx[index_program].data_test_len);
    } else { /* testing enough number */ 
        compelte_testing(screen_obj);

        /* Send data to esp32 status device */
        // uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
        // data_send_esp32->data = (char *)malloc(50);
        // if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
        //     sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
        //     screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
        // } else {
        //     sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
        //     screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
        // }
        // data_send_esp32->len = strlen(data_send_esp32->data);
        // OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
    }   

    /* free array using in have new data test */
    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].config_pin != NULL) {
        free(screen_obj->IC_Testerx[screen_obj->curr_device].config_pin);
    }
    
    if (screen_obj->IC_Testerx[screen_obj->curr_device].icon_result != NULL) {
        free(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result) ;
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit != NULL) {
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit);
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case != NULL) {
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case);
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result != NULL) {
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
    }
    
}

void Navigation_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_INFORMATION);
}

void Navigation_Logging(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    /* show data */
    
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_LOGGING);
}

void Navigation_Next_PrevPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {

}

void ON_OFF_Button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    // do sth
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state == false) { // dang off -> bat dau 
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
    } else { // dang on -> off
        /* luu vao sd, gui cho esp32 len app */
        compelte_testing(screen_obj);
    }
    
    screen_obj->IC_Testerx[screen_obj->curr_device].state = !screen_obj->IC_Testerx[screen_obj->curr_device].state;
    // change icon
    // DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ON_OFF_Icon_1,ON_ICON);
    //    HAL_Delay(1000);
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
    /* Send data to esp32 status device */
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
    data_send_esp32->data = (char *)malloc(50);
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
        sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
        screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
    } else {
        sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
        screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
    }
    data_send_esp32->len = strlen(data_send_esp32->data);
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
    
    /* Send data test */
    // screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
        uint8_t can_send_buf[500];
        uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
        // uint8_t num_test_ic = screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic;
        // memcpy(can_send_buf,&num_test_ic,1);
        memcpy(can_send_buf,screen_obj->Program_Testx[index_program].data_test,screen_obj->Program_Testx[index_program].data_test_len);
        isotp_send(&CAN_iso[screen_obj->curr_device],can_send_buf,screen_obj->Program_Testx[index_program].data_test_len);
    }
    
}

void select_running_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    uint8_t programID = screen_event->data; // Get new index program

    /* Show data correspond with new index program */
    Screen_ShowData_Mainpage(screen_obj,programID);
}

void select_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    // Get the index modify program 
    uint8_t index_program = screen_event->data;
    screen_obj->modify_program_index = index_program;
    
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
    char *Text_Num_IC = malloc(size_Num_IC + 1);

    strcpy(Text_Name_IC,"IC Name: ");
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
    strcpy(Text_Num_IC,"Number of ICs: ");
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);

    free(Text_Name_IC);
    free(Text_Num_IC);
}

void Navigation_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
    // DWIN_SetText((Dwin_t *)screen_obj,VP_ShowType_Keyboard)

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_NUM_KEYBOARD);
}

void Navigation_full_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_FULL_KEYBOARD);
}

void Save_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    /* update value */
    if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp != NULL) {
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program != NULL) {
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program);
        }
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp));
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp)+1);
        free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp);
    }

    if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp != NULL) {
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC != NULL) {
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
        }
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp));
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp)+1);
        free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp);
    }

    if (screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp != NULL) {
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC != NULL) {
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
        } 
        screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp));
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp)+1);
        free(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp);
    }

    /* send to esp32 */
    char buffer_send[200];
    memset(buffer_send,0,200);
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
    data_send_esp32->data = (char *)malloc(strlen(buffer_send));
    memcpy(data_send_esp32->data,"p",screen_obj->modify_program_index + 1);
    memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send));
    data_send_esp32->len = strlen(buffer_send) + 1;
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));

    /* store data to eeprom */
    uint8_t string_data[TOTAL_ONE_PROGRAM_TEST_LEN] = {0};
    data_eeprom_t *data_write = malloc(sizeof(data_eeprom_t));
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
    ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
    ,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
    data_write->data = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
    memcpy(data_write->data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
    data_write->data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
    data_write->mem_addr = START_ADDR_PROGRAM_TEST_X(screen_obj->modify_program_index);
    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));

    // Show data in screen
    // DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_Program_Name,screen_obj->Program_Testx[PROGRAM_TEST1].Name_Program,strlen(screen_obj->Program_Testx[PROGRAM_TEST1].Name_Program));
    // DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC,strlen(screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC));
    // DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,screen_obj->Program_Testx[PROGRAM_TEST1].num_IC,strlen(screen_obj->Program_Testx[PROGRAM_TEST1].num_IC));
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
    char *Text_Num_IC = malloc(size_Num_IC + 1);

    strcpy(Text_Name_IC,"IC Name: ");
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
    strcpy(Text_Num_IC,"Number of ICs: ");
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
    DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x25 *screen_obj->modify_program_index),screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));

    free(Text_Name_IC);
    free(Text_Num_IC);
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
}

void Enter_password(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    /* Get the password input */
    uint8_t len = screen_obj->Screen_keyboard.Index_String + 1;
    char input_pass[len];
    strcpy(input_pass,screen_obj->Screen_keyboard.String);
    /* Check password */
    if (strcmp(input_pass,MACHINE_PASSWORD) == 0) { /* Correct password */
        /* show data page */
        switch (screen_obj->page_setting) {
            case DWINPAGE_SETTING_PROGRAM : {
                // Show data in screen
                uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC);
                uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[PROGRAM_TEST1].num_IC);

                char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
                char *Text_Num_IC = malloc(size_Num_IC + 1);

                strcpy(Text_Name_IC,"IC Name: ");
                strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC);
                strcpy(Text_Num_IC,"Number of ICs: ");
                strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[PROGRAM_TEST1].num_IC);

                // Show data in screen
                DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
                DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);

                free(Text_Name_IC);
                free(Text_Num_IC);
                // Switch page
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
            } break;

            default : break;
        }
        /* Goto setting page */
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->page_setting);
    } else {
        /* Show text */
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_Password,INCORRECT_PASSWORD_TEXT,strlen(INCORRECT_PASSWORD_TEXT));
    }
}

void Enter_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    uint16_t VP_show = screen_obj->Screen_keyboard.VP_Text;
    
    /* Show text to VP */
    DWIN_SetText((Dwin_t *)screen_obj,VP_show,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);

    /* Return page base on VP address */
    switch (VP_show) {
        case VP_Password : {
            DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password); /* Clear warning text if any */
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
        } break;
        case VP_Modify_Program_Name : {
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
        } break;
        case VP_Modify_IC_Name : {
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
        } break;
        case VP_Modify_IC_Num :{
            screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
        } break;
        case VP_Name_Wifi :
        case VP_Password_Wifi : {
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
        } break;
        default: break;
    }
}

void Keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
    
    /* The other Functions button */
    if (screen_event->data == 0xF3) { // Delete button
        if (screen_obj->Screen_keyboard.Index_String != 0) {
            --screen_obj->Screen_keyboard.Index_String;
        }
    } else if (screen_event->data == 0xF4) { // Caplock button
        /* Toggle status Caplock keyboard */
        screen_obj->Screen_keyboard.Caplock = !screen_obj->Screen_keyboard.Caplock; 
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_CAPLOCK,screen_obj->Screen_keyboard.Caplock);
    } else if (screen_event->data == 0xF2) { // Space button
        // screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = 32;
    } else if (screen_event->data == 0xF1) { // Enter button
        // Check if the data is valid
        if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
            // Show data input to VP 
            DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
            DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
        }
    }
    /* the data value is the character input -> add to string */
    else if (screen_event->data >= 0x41 && screen_event->data <= 0x5A) { // letter need check Caplock
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data + 0x20;
        } else {
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
        }
    } else {
        screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
    }

    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
}

#pragma endregion CALLBACK FUNCTION VP ADRRESS 

#pragma region FUNCTION EXCUTE SCREEN

// binary search index of VP address
uint8_t Index_VP(uint16_t vp, VP_item* VP_array, uint8_t Size_array) {
    int left = 0;
    int right = Size_array - 1;
    int mid;

    while (left <= right) {
        mid = (left + right) / 2;
        if (VP_array[mid].VP_address == vp) {
            return VP_array[mid].index;  // Found the vp
        } else if (VP_array[mid].VP_address > vp) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }

    return 255;  // VP not found
}

void Screen_init_handler_table(Screen_t *const obj_screen) {
    // table handler the callback function
    static handler_func a_handler_navigation_sig[MAX_VALUE_SIG_NAVIGATE] = {NULL};
    static handler_func a_handler_on_off_sig[MAX_VALUE_SIG_SELECTION] = {NULL};
    static handler_func a_handler_save_sig[MAX_VALUE_SAVE_INFORMATION] = {NULL};
    static handler_func a_handler_enter_sig[MAX_VALUE_SIG_ENTER] = {NULL};
    static handler_func a_handler_keyboard_sig[MAX_VALUE_KEYBOARD] = {NULL};
    static handler_func a_handler_num_keyboard[MAX_VALUE_NAVIGATION_KEYBOARD] = {NULL};
    static handler_func a_handler_full_keyboard[MAX_VALUE_NAVIGATION_KEYBOARD] = {NULL};

    static handler_func *handler_function_table[MAX_SIG_VP] = { a_handler_navigation_sig,
                                                                a_handler_on_off_sig ,
                                                                a_handler_keyboard_sig,
                                                                a_handler_num_keyboard,
                                                                a_handler_full_keyboard,
                                                                a_handler_save_sig,
                                                                a_handler_enter_sig };

    // Assign the callback function to handler table
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PAGE]         = Navigation_setting_page;
    handler_function_table[SIG_NAVIGATION][NAVIGATION_HOME]                 = Navigation_home_page;
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PROGRAM]      = Navigation_setting_program;
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_TIME]         = Navigation_setting_time;
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_WIFI]         = Navigation_setting_wifi;
    handler_function_table[SIG_NAVIGATION][NAVIGATION_MODIFY_PROGRAM]       = Navigation_modify_program;
    handler_function_table[SIG_NAVIGATION][NAVIGATION_DETAIL_MAINPAGE]      = Navigation_detail_mainpage;
    handler_function_table[SIG_NAVIGATION][NAVIGATION_GRAPH_MAINPAGE]       = Navigation_graph_mainpage;
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_MAINPAGE]      = Navigation_Change_MainPage;
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASEDATA]      = Navigation_Change_CaseTest;
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASE_PULSE]    = Navigation_Change_CasePulse;
    handler_function_table[SIG_NAVIGATION][NAVIGATION_FINISH_REVIEW]        = Navigation_Finish_Review;
    handler_function_table[SIG_NAVIGATION][NAVIGATION_INFORMATION]          = Navigation_Information;
    handler_function_table[SIG_NAVIGATION][NAVIGATION_LOGGING]              = Navigation_Logging;

    handler_function_table[SIG_SELECTION][ON_OFF_DEV]                       = ON_OFF_Button;
    handler_function_table[SIG_SELECTION][SELECT_PROGRAM]                   = select_running_program;
    handler_function_table[SIG_SELECTION][SElECT_MODIFY_PROGRAM]            = select_modify_program;

    handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]     = Navigation_num_keyboard;
    handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]    = Navigation_full_keyboard;

    handler_function_table[SIG_SAVE][VALUE_SAVE_INFORMATION]                = Save_Information;

    handler_function_table[SIG_ENTER][ENTER_PASSWORD]                       = Enter_password;
    handler_function_table[SIG_ENTER][ENTER_NUM_KEYBOARD]                   = Enter_num_keyboard;

    handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD]                     = Keyboard;

    // assign handler table to handler table of object
    obj_screen->p_handler_table = (void *)handler_function_table;
}

void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e) {
    // do sth ...
	handler_func **handler_function_table = (handler_func **) obj_screen->p_handler_table;
    // excute the callback function
    if (screen_e->event == SIG_KEYBOARD) {  // ENVENT KEYBOARD
        handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD](obj_screen, screen_e);   
    } else if (screen_e->event == SIG_NUM_KEYBOARD) {  // SWTICH TO NUMBER KEYBOARD
        handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
    } else {
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
    }  
}

#pragma endregion FUNCTION EXCUTE SCREEN

#pragma region FUNCTION SCREEN 

Return_Status Screen_CheckInput_Keyboard(Screen_t *const obj_screen) {
    char string[obj_screen->Screen_keyboard.Index_String];
    char warm_string[20] = {0};
    float data_compare;
    // copy string
    memcpy(string,obj_screen->Screen_keyboard.String,obj_screen->Screen_keyboard.Index_String);
    /* compare data with limit */
    data_compare = atof(string);
    if (data_compare > obj_screen->Screen_condition->max_value) {
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MAX: %.2f", obj_screen->Screen_condition->max_value);
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
        return Status_ERROR;
    } else if (data_compare < obj_screen->Screen_condition->min_value) {
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MIN: %.2f", obj_screen->Screen_condition->min_value);
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
        return Status_ERROR;
    } 
    return Status_SUCCESS; 
}

/**
 * @brief Function used to setup icon with data test
 * 
 * @param obj_screen : object screen
 * @param data_pin : array 2d data test
 */
void Screen_GetIcon_Pin(Screen_t *const screen_obj, char *data_pin) {
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
    
    uint8_t map_array[128] = {0};
    map_array['G'] = ICON_GND;
    map_array['V'] = ICON_VCC;
    /* Create the array icon data pin */
    // if (screen_obj->IC_Testerx[screen_obj->curr_device].config_pin != NULL) {
    //     free(screen_obj->IC_Testerx[screen_obj->curr_device].config_pin);
    // }

    screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = malloc(num_pin * sizeof(uint8_t));

    /* Convert data to icon pin config */
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
        if (Pin_x >= 8) {
            map_array['0'] = ICON_OUTPUT;
            map_array['1'] = ICON_OUTPUT;
            map_array['L'] = ICON_INPUT;
            map_array['H'] = ICON_INPUT;
        } else {
            map_array['0'] = ICON_INPUT;
            map_array['1'] = ICON_INPUT;
            map_array['L'] = ICON_OUTPUT;
            map_array['H'] = ICON_OUTPUT;
        }
        screen_obj->IC_Testerx[screen_obj->curr_device].config_pin[Pin_x] = map_array[(uint8_t)(data_pin[Pin_x])];
    }
}

void Screen_SetIcon_Pin(Screen_t *const obj_screen) {

}

void Screen_GetIcon_Result(Screen_t *const screen_obj, char *result) {
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
    uint8_t map_array[128] = {0};
    map_array['0'] = ICON_LOGIC_LOW;
    map_array['1'] = ICON_LOGIC_HIGH;
    map_array['L'] = ICON_CLOCK_LOW;
    map_array['H'] = ICON_CLOCK_HIGH;
    map_array['V'] = ICON_LOGIC_NONE;
    map_array['G'] = ICON_LOGIC_NONE;
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].icon_result = malloc(num_case * num_pin);

    /* Convert data to icon result */
    for (uint8_t i = 0; i < num_case * num_pin; i++) {
        screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[i] = map_array[result[i]];
    }
}

void Screen_Init_Variable(Screen_t *const obj_screen) {
    obj_screen->curr_device = DEVICE_1;

    memcpy(obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));
    memcpy(obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));
    memcpy(obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));
    memcpy(obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));

     obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC = "Description IC 74HC4051";
     obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC = "Description IC 74HC4052";
     obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC = "Description IC 74HC4053";
     obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC = "Description IC 74HC4054";

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);

    obj_screen->Program_Testx[PROGRAM_TEST1].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
    obj_screen->Program_Testx[PROGRAM_TEST2].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
    obj_screen->Program_Testx[PROGRAM_TEST3].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
    obj_screen->Program_Testx[PROGRAM_TEST4].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);

    uint8_t buffer[TOTAL_ONE_PROGRAM_TEST_LEN];
    for (uint8_t i = 0; i < 4; i++) {
        AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(i),&buffer,TOTAL_ONE_PROGRAM_TEST_LEN);
        sscanf((char *)buffer, "%[^,],%[^,],%[^,\n]",
        obj_screen->Program_Testx[i].Name_Program,
        obj_screen->Program_Testx[i].Name_IC,
        obj_screen->Program_Testx[i].num_IC);

        // char buffer_send[200];
        // memset(buffer_send,0,200);
        // sprintf(buffer_send,"%d,%s,%s,%s",1,obj_screen->Program_Testx[DEVICE_1].Name_Program
        //     ,obj_screen->Program_Testx[DEVICE_1].Name_IC,obj_screen->Program_Testx[DEVICE_1].num_IC);
        // uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
        // data_send_esp32->data = (char *)malloc(strlen(buffer_send));
        // memcpy(data_send_esp32->data,"p",1);
        // memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send));
        // data_send_esp32->len = strlen(buffer_send) + 1;
        // OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));

        HAL_Delay(100);
    }

    obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester = "IC TESTER 1";
    obj_screen->IC_Testerx[DEVICE_2].NameIC_Tester = "IC TESTER 2";
    obj_screen->IC_Testerx[DEVICE_3].NameIC_Tester = "IC TESTER 3";

    memcpy(obj_screen->Wifi_setting.Name_Wifi,"Wifi TEST 1",strlen("Wifi TEST 1"));
    memcpy(obj_screen->Wifi_setting.Password_Wifi,"PASSword 1234",strlen("PASSword 1234"));

    obj_screen->IC_Testerx[DEVICE_1].curr_PageMain = DWINPAGE_MAIN;
    obj_screen->IC_Testerx[DEVICE_2].curr_PageMain = DWINPAGE_MAIN;
    obj_screen->IC_Testerx[DEVICE_3].curr_PageMain = DWINPAGE_MAIN; 

    obj_screen->IC_Testerx[DEVICE_1].state = false;
    obj_screen->IC_Testerx[DEVICE_2].state = false;
    obj_screen->IC_Testerx[DEVICE_3].state = false;

    obj_screen->IC_Testerx[DEVICE_1].curr_num_ic = 0;

    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_1,obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program));
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_2,obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program));
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_3,obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program));
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_4,obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program));

    DWIN_SetText((Dwin_t *)obj_screen,VP_Name_Tester,obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,strlen(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester));

    obj_screen->Program_Testx[PROGRAM_TEST1].num_pin = 16;
    obj_screen->Program_Testx[PROGRAM_TEST1].num_case = 8;

    /* Screen */
    obj_screen->Screen_keyboard.Caplock = false;
    obj_screen->Screen_keyboard.Index_String = 0;

    Screen_ShowData_Mainpage(obj_screen,PROGRAM_TEST1);
    DWIN_SetVariable_Icon((Dwin_t *)obj_screen,VP_ICON_ON_OFF,obj_screen->IC_Testerx[obj_screen->curr_device].state);
}

void Screen_ShowData_Mainpage(Screen_t *const screen_obj, uint8_t index_program) {
    uint8_t a_select_program[MAX_PROGRAM_TEST];
    // uint8_t index_program = screen_obj.IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t num_ic = atoi(screen_obj->Program_Testx[index_program].num_IC);
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
    uint8_t size_Description_IC = strlen("IC Description: ") + strlen((char *)screen_obj->Program_Testx[index_program].Description_IC);
    // uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
    char *Text_Description_IC = malloc(size_Description_IC + 1);
    // char *Text_Num_IC = malloc(size_Num_IC + 1);

    strcpy(Text_Name_IC,"IC Name: ");
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
    strcpy(Text_Description_IC,"IC Description: ");
    strcat(Text_Description_IC,(char *)screen_obj->Program_Testx[index_program].Description_IC);
    // strcpy(Text_Num_IC,"Number of ICs: ");
    // strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);

    memset(a_select_program,1,MAX_PROGRAM_TEST);
    // Get the program selected
    a_select_program[index_program] = 0 ;
    screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index = index_program;

    // Show data in screen
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_SELECT_PROGRAM,a_select_program,MAX_PROGRAM_TEST);
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_IC,Text_Name_IC,size_Name_IC);
    DWIN_SetText((Dwin_t *)screen_obj,VP_Description_IC,Text_Description_IC,size_Description_IC);

    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"Number of ICs: %d / %ld",screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic,num_ic);
    uint8_t len = strlen(ShowCase_String);
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,ShowCase_String,strlen(ShowCase_String));

    // DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,Text_Num_IC,size_Num_IC);
    
    /* free malloc */
    free(Text_Name_IC);
    free(Text_Description_IC);
    // if (Text_Name_IC != NULL) {
    // }
    // if (Text_Description_IC != NULL) {
    // }
//    if (Text_Num_IC != NULL) {
//        free(Text_Num_IC);
//    }
}

void Screen_SetInfo_Pin(Screen_t *const screen_obj) {
    uint16_t Address_VP = VP_Name_Pin;
    char *data_copy = malloc(screen_obj->Program_Testx[screen_obj->curr_device].data_pin_len + 1);
    memcpy(data_copy,screen_obj->Program_Testx[screen_obj->curr_device].data_pin,screen_obj->Program_Testx[screen_obj->curr_device].data_pin_len);
    char *temp_buf = strtok(data_copy,"\n");
    uint8_t len;
    while (temp_buf != NULL) {
        len = strlen(temp_buf);
        DWIN_SetText((Dwin_t *)screen_obj,Address_VP,temp_buf,strlen(temp_buf));
        // sprintf(text_show,"%d",temp_buf);
        temp_buf = strtok(NULL,"\n");
        Address_VP = Address_VP + 0x10;
    }
    free(data_copy);
}

#pragma endregion FUNCTION SCREEN


static void get_data_testing_ic(char *searchName,Program_Test_t *pdata_test) {
    uint8_t num_direc_used = 0;
    uint8_t *temp_buf;
    direc_EEPROM_t direc_array[MAX_DIRECTORY_USED]; /* array store directory */
    direc_EEPROM_t *pDirectory = NULL;
    uint16_t mem_addr;
    uint16_t buf_length;
    /* get num directory used */
    temp_buf = (uint8_t *)malloc(MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,temp_buf,1);
    num_direc_used = temp_buf[0];
    /* read directory info */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC,temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
    memcpy(&direc_array[0],temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
    free(temp_buf);
    /* find info of search name ic */
    for (uint8_t i = 0; i < num_direc_used; i++) {
        if (memcmp(searchName,direc_array[i].nameIC,strlen(searchName)) == 0) {
            pDirectory = &direc_array[i];
            break;
        }
    }
    /* NOT FOUND NAME IC IN EEPROM */ 
    if (pDirectory == NULL) {
        printf("NOT FOUND NAME IC IN EEPROM\n");
        return;
    } 
    mem_addr = (uint16_t)((pDirectory->addr[0] << 8) | pDirectory->addr[1]);
    buf_length = (uint16_t)((pDirectory->length[0] << 8) | pDirectory->length[1]);
    temp_buf = (uint8_t *)malloc(buf_length);

    AT24Cxx_read_buffer(&eeprom_ob,mem_addr,temp_buf,buf_length);
    // Find the first pipe separator
    uint8_t *first_pipe = memchr(temp_buf, '|', buf_length);
    if (!first_pipe) return;
    
    // Extract pin count
    int pin_count_len = first_pipe - temp_buf;
    char* pin_count_str = malloc(pin_count_len + 1);
    strncpy(pin_count_str, temp_buf, pin_count_len);
    pin_count_str[pin_count_len] = '\0';
    pdata_test->num_pin = atoi(pin_count_str);
    free(pin_count_str);
    
    // Find the second pipe separator
    int remaining_len = buf_length - (first_pipe - temp_buf + 1);
    uint8_t *second_pipe = memchr(first_pipe + 1, '|', remaining_len);
    if (!second_pipe) return;
    
    // Extract test count
    int test_count_len = second_pipe - (first_pipe + 1);
    char* test_count_str = malloc(test_count_len + 1);
    strncpy(test_count_str, first_pipe + 1, test_count_len);
    test_count_str[test_count_len] = '\0';
    pdata_test->num_case= atoi(test_count_str);
    free(test_count_str);
    
    // Find the third pipe separator using memchr (searches through \0)
    remaining_len = buf_length - (second_pipe - temp_buf + 1);
    uint8_t *third_pipe = memchr(second_pipe + 1, '|', remaining_len);
    if (!third_pipe) return;
    
    // Extract pin data (between second and third pipe)
    int pin_data_len = third_pipe - (second_pipe + 1);
    pdata_test->data_pin = malloc(pin_data_len);
    memcpy(pdata_test->data_pin, second_pipe + 1, pin_data_len);
    pdata_test->data_pin_len = pin_data_len;
    
    // Extract test data (after third pipe)
    uint8_t *test_start = third_pipe + 1;
    int test_data_len = buf_length - (test_start - temp_buf);
    pdata_test->data_test = malloc(test_data_len);
    memcpy(pdata_test->data_test, test_start, test_data_len);
    pdata_test->data_test_len = test_data_len;

    free(temp_buf);
//    uint8_t array_buf[200];
//    memcpy(array_buf,pdata_test->data_pin,pin_data_len);
//    uint8_t array_buf2[200];
//    memcpy(array_buf2,pdata_test->data_test,test_data_len);
}

void show_main_page(Screen_t *const screen_obj, uint8_t PageMain, uint8_t curr_program) {
    
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
    switch (PageMain) {
        case DWINPAGE_MAIN : {
            /* Show info */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
            DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
            Screen_ShowData_Mainpage(screen_obj,curr_program);

            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN);
        } break;
        case DWINPAGE_MAIN_FINISH: {
            /* Show data */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
            show_text_short_circuit(screen_obj);
            show_text_function_test(screen_obj);
            /* change page if home page */
            if (screen_obj->Ishome) {
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_FINISH);
            }
        } break;
        case DWINPAGE_MAIN_DETAIL: {
            /* get data and show */
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case = 0;
            uint8_t case_show = screen_obj->IC_Testerx[screen_obj->curr_device].curr_case;
            char ShowCase_String[30];
            Screen_SetInfo_Pin(screen_obj);
            Screen_GetIcon_Pin(screen_obj,screen_obj->Program_Testx[index_program].data_test);
            DWIN_SetArray_Icon(screen_obj,VP_ICON_DIRECTION_PIN,(uint8_t *)(_Screen.IC_Testerx[screen_obj->curr_device].config_pin),num_pin);
            Screen_GetIcon_Result(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
            uint8_t buffer[500];
            memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_result,num_case*num_pin);
            DWIN_SetArray_Icon(screen_obj,VP_ICON_RESULT,&(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[case_show * num_pin]),num_pin);
            snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",case_show + 1,num_case);
            DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
            /* change page if home page */
            if (screen_obj->Ishome) {
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL);
            }
        } break;
        case DWINPAGE_MAIN_PULSE: {
            /* show data */
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case = 0;
            uint8_t case_show = screen_obj->IC_Testerx[screen_obj->curr_device].curr_case;
            char ShowCase_String[30];
            snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",case_show + 1,2);

            // if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
            //     free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
            // }
            screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = malloc(num_case * num_pin);
            transposeArray(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock,screen_obj->IC_Testerx[screen_obj->curr_device].data_result,num_pin,num_case);
            uint8_t buffer[500];
            memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_clock,num_case * num_pin);
            for (uint8_t i = 0; i < num_case * num_pin; i++) {
                screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[i] = screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[i] - '0';
            }

            uint16_t vp_pulse = 0x1000;
            for (uint8_t i = 0; i < 8; i++ ) {
                if (i != 7 ) {
                    DWIN_Create_Basic_line((Dwin_t *)screen_obj,vp_pulse,114,144 + (45 * i),&(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[num_case*i]),num_case);
                    vp_pulse += 0x200;
                }
            }
            
            /* change page if home page */
            if (screen_obj->Ishome) {
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_PULSE);
                DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
            }
        } break;
    }
}

void get_data_testing_finish(Screen_t *const screen_obj,uint8_t device, uint8_t *result_array) {
    uint8_t index_program = screen_obj->IC_Testerx[device].selected_Program_Index;
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
    /* get data test */
    uint8_t buffer[200];
    screen_obj->IC_Testerx[device].isShort = result_array[0];
    screen_obj->IC_Testerx[device].data_short_circuit = (char *)malloc(num_pin);
    strcpy(screen_obj->IC_Testerx[device].data_short_circuit,(char *)result_array + 2);
    memcpy(buffer,screen_obj->IC_Testerx[device].data_short_circuit,num_pin);
    screen_obj->IC_Testerx[device].data_result = (char *)malloc(num_case * num_pin);
    strcpy(screen_obj->IC_Testerx[device].data_result,(char *)result_array + (num_pin +3));
    memcpy(buffer,screen_obj->IC_Testerx[device].data_result,num_case * num_pin);
    screen_obj->IC_Testerx[device].data_result_case = (char *)malloc(num_case);
    strcpy(screen_obj->IC_Testerx[device].data_result_case,(char *)result_array + (num_pin + 5 + num_case * num_pin));
    memcpy(buffer,screen_obj->IC_Testerx[device].data_result_case,num_case);

    screen_obj->IC_Testerx[device].curr_PageMain = DWINPAGE_MAIN_FINISH;
    uint8_t *device_finish = malloc(sizeof(uint8_t));
    memcpy(device_finish,&device,sizeof(uint8_t));

    // screen_obj->IC_Testerx[device].data_short_circuit = (char *)malloc(num_pin);
    // memset(screen_obj->IC_Testerx[device].data_short_circuit,1,num_pin);

    /* get text result to store  */
    uint8_t result_buffer[60];
    memset(result_buffer,0,60);
    get_text_result(screen_obj,result_buffer,screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic);
    if (strlen(screen_obj->IC_Testerx[screen_obj->curr_device].result_text) > 1) {
        strcat(screen_obj->IC_Testerx[screen_obj->curr_device].result_text," | ");
    }
    strcat(screen_obj->IC_Testerx[screen_obj->curr_device].result_text,result_buffer);

    OS_task_post_event(AO_task_screen,DEIVCE_TEST_FINISH,(uint8_t *)&device_finish,sizeof(uint8_t *));


    // show_main_page(screen_obj,screen_obj->IC_Testerx[device].curr_PageMain,index_program);

//    uint8_t buffer[500];
//    memcpy(buffer,screen_obj->IC_Testerx[device].data_result,num_case * num_pin);
//    memcpy(buffer,screen_obj->IC_Testerx[device].data_result_case,num_case);

    
}

void show_text_short_circuit(Screen_t *screen_obj) {
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
//    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
    char short_text[150] = "Pin Short to GND/VDD: ";
    uint8_t buffer[50];
    memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit,num_pin);
    // uint8_t test_short[20] = {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'};
    uint8_t shortPin[num_pin]; /* array store pin short */
    uint8_t shortCount = 0;
    for (uint8_t i = 0; i < num_pin; i++) {
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit[i] == '0') {
            shortPin[shortCount] = i + 1;
            shortCount++;
        }
    }

    if (shortCount == 0) {
        strcat(short_text,"None");
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
    } else {
        char tempStr[50];
        for (int i = 0; i < shortCount; i++) {
            sprintf(tempStr, "Pin %d", shortPin[i]);
            strcat(short_text, tempStr);
            if (i < shortCount - 1) {
                strcat(short_text, ", ");
            }
        }
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
    }
}

void show_text_function_test(Screen_t *const screen_obj) {
   uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
   uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
   uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;

    char case_text[100] = "Self-test result: ";
    uint8_t buffer[50];
    memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit,num_pin);
    // uint8_t test_short[20] = {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'};
    uint8_t failedCase[num_case]; /* array store pin short */
    uint8_t failedCount = 0;
    for (uint8_t i = 0; i < num_case; i++) {
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '0') {
            failedCase[failedCount] = i + 1;
            failedCount++;
        }
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].isShort == '0') {
        if (failedCount == 0) {
            strcat(case_text,"Pass");
            DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Test_Function,case_text,strlen(case_text));
        } else {
            char tempStr[50];
            strcat(case_text, "Failed in ");
            for (int i = 0; i < failedCount; i++) {
                sprintf(tempStr, "Case %d", (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] - '0') + 1);
                strcat(case_text, tempStr);
                if (i < failedCount - 1) {
                    strcat(case_text, ", ");
                }
            }
            DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Test_Function,case_text,strlen(case_text));
        }
    } else {
        strcat(case_text,"N/A");
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Test_Function,case_text,strlen(case_text));
    }
}

/* create the string text result */
void get_text_result(Screen_t *const screen_obj, uint8_t *result_line, uint8_t cur_num_ic) {
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
    
    uint8_t has_errors = 0;

    for (uint8_t i = 0; i < num_pin; i++) {
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit[i] != '1') {
            has_errors = 1;
            break; // Found error, no need to check more
        }
    }

    if (!has_errors) {
        for (uint8_t i = 0; i < num_case; i++) {
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '0') {
                has_errors = 1;
                break; // Found error, no need to check more
            }
        }
    }

    if (has_errors) {
        sprintf((char *)result_line, "IC%d: Self-test result: failed", cur_num_ic + 1);
    } else {
        sprintf((char *)result_line, "IC%d: Self-test result: pass", cur_num_ic + 1);
    }    
}

/* using to store data when testing complete */
void compelte_testing(Screen_t *const screen_obj) {
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t data_time[7];
    DS3231_Read_time(&ds3231,data_time);

    /* Store data to sd card */
     char buffer[200];
    // memset(buffer,0,200);
    // sprintf(buffer,"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
    //     ,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,screen_obj->Program_Testx[index_program].Name_IC,screen_obj->Program_Testx[index_program].num_IC,
    //     screen_obj->IC_Testerx[screen_obj->curr_device].result_text);
    // DataLogging_t *data_store = (DataLogging_t *)malloc(sizeof(DataLogging_t));
    // data_store->String_logging = malloc(strlen(buffer)+1);
    // memcpy(data_store->String_logging,buffer,strlen(buffer)+1);
    // OS_task_post_event(AO_task_sd, STORE_DATA_TEST, (uint8_t *)&data_store, sizeof(DataLogging_t));

    /* Send data to esp32 */
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
    data_send_esp32->data = (char *)malloc(strlen(buffer));
    memcpy(data_send_esp32->data,"h",1);
    memcpy(data_send_esp32->data+1,buffer,strlen(buffer));
    data_send_esp32->len = strlen(buffer);
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));

    screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
    screen_obj->IC_Testerx[screen_obj->curr_device].state = false;
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
    /* switch page */
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,index_program); // check 

    /* free the array don't using */

}
