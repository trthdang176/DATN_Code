#include "app_sd.h"

#include "app_main.h"
#include "../Core/Inc/main.h"

/* sd lib */
#include "../FatFs/App/fatfs.h"
#include "../Core/Inc/fatfs_sd.h"

FATFS fs;
FIL fil;
FRESULT fresult;
char buffer[200];
UINT bw, br;

typedef struct {
    OS_task task;


} app_sd;


static void init_data_logging(void);
static void add_data(DataLogging_t *data);
void get_data_range_by_index(uint32_t start_index, uint32_t end_index);

void sd_ctor(app_sd *pAO);
static void sd_init(app_sd * const pOS_task, OS_event_t const * const pEvent);
static void sd_dispatch(app_sd * const pOS_task, OS_event_t const * const pEvent);

static app_sd sd_instance;
OS_task * const AO_task_sd = &sd_instance.task;

void sd_task_init(void) {
    init_data_logging();

    DataLogging_t samples[] = {
        {1625097600, "data history 1"},  // Record 0
        {1625097660, "data history 2"},  // Record 1
        {1625097720, "data history 3"},  // Record 2
        {1625097780, "data history 4"},  // Record 3
        {1625097840, "data history 5"}   // Record 4
    };

        for (int i = 0; i < 5; i++) {
        add_data(&samples[i]);
    }

    printf("\n=== Get records from index 1 to 3 ===\n");
    get_data_range_by_index(1, 3);

    sd_ctor(&sd_instance);
}

void sd_ctor(app_sd *pAO) {
    OS_task_init(AO_task_sd,(OS_handler)&sd_init,(OS_handler)&sd_dispatch);

}

static void sd_init(app_sd * const pOS_task, OS_event_t const * const pEvent) {
    UNUSED(pOS_task);
    UNUSED(pEvent);
}

static void sd_dispatch(app_sd * const pOS_task, OS_event_t const * const pEvent) {
    switch (pEvent->sig) {
        
    }
}


static void init_data_logging(void) {

    fresult = f_mount(&fs, "0:", 1);
	if (fresult != FR_OK){
        printf ("ERROR with code:%d!!! in mounting SD CARD...\n\n",fresult);
	}
	else{
        printf("SD CARD mounted successfully...\n\n");
    }

	fresult = f_open(&fil, "data.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
    if (f_size(&fil) == 0) {
        f_close(&fil);
        fresult = f_open(&fil, "data.txt", FA_WRITE);
        f_puts("Timestamp,Temperature,Humidity,Pressure\n", &fil);
        f_close(&fil);
        printf("Data file created\n");
    } else {
        f_close(&fil);
        printf("Data file exists\n");
    }

    fresult = f_open(&fil, "index.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
    f_close(&fil);
}

// Write data with index update
static void add_data(DataLogging_t *data) {
    fresult = f_open(&fil, "data.txt", FA_OPEN_EXISTING | FA_WRITE | FA_READ);
    if (fresult != FR_OK) {
        printf("Error: Cannot open data.txt\n");
        return;
    }
    
    uint32_t position = f_size(&fil);
    f_lseek(&fil, position);
    
    // Write data
    sprintf(buffer, "%s\n", data->String_logging);
    f_puts(buffer, &fil);
    f_close(&fil);
    
    // Add position to index file
    IndexEntry index_entry = {position};
    
    fresult = f_open(&fil, "index.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
    if (fresult != FR_OK) {
        printf("Error: Cannot open index.txt\n");
        return;
    }
    
    f_lseek(&fil, f_size(&fil));
    f_write(&fil, &index_entry, sizeof(IndexEntry), &bw);
    f_close(&fil);
}

uint32_t get_total_records() {
    fresult = f_open(&fil, "index.txt", FA_READ);
    if (fresult != FR_OK) return 0;
    
    uint32_t size = f_size(&fil);
    f_close(&fil);
    
    return size / sizeof(IndexEntry);
}

void read_record_by_index(uint32_t index, DataLogging_t* data) {
    // Read index entry to get file position
    fresult = f_open(&fil, "index.txt", FA_READ);
    if (fresult != FR_OK) {
        printf("Error: Cannot open index.txt\n");
        return;
    }
    
    f_lseek(&fil, index * sizeof(IndexEntry));
    
    IndexEntry idx;
    f_read(&fil, &idx, sizeof(IndexEntry), &br);
    f_close(&fil);
    
    // Read actual data using the file position
    fresult = f_open(&fil, "data.txt", FA_READ);
    if (fresult != FR_OK) {
        printf("Error: Cannot open data.txt\n");
        return;
    }
    
    f_lseek(&fil, idx.file_position);
    f_gets(buffer, sizeof(buffer), &fil);
    f_close(&fil);
    
    memcpy(data->String_logging,buffer,strlen(buffer));
}

void get_data_range_by_index(uint32_t start_index, uint32_t end_index) {
    uint32_t total = get_total_records();
    
    if (end_index >= total) end_index = total - 1;
    if (start_index > end_index) {
        printf("Invalid range\n");
        return;
    }
    
    sprintf(buffer, "Records from index %lu to %lu:\n", start_index, end_index);
    printf(buffer);
    
    for (uint32_t i = start_index; i <= end_index; i++) {
        DataLogging_t data;
        read_record_by_index(i, &data);
        
        sprintf(buffer, "Index %lu: %s\n",
                i, data.String_logging);
        printf(buffer);
    }
}
