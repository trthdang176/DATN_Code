/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "fatfs_sd.h"
#include "string.h"

#include "../../app/Screen.h"

#include "../../lib/AT24Cxx.h"
#include "../../lib/DS3231.h"
#include "../../os/os.h"

#include "../../app/app_main.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan;

I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;

uint8_t TxData[8];
uint8_t RxData[8];

uint32_t TxMailbox;

IsoTpLink CAN_iso[3];
static uint8_t can_iso_recv_buf[250];
static uint8_t can_iso_send_buf[250];

uint8_t dataRX[100];
uint8_t data_output[20] ={0};
char *data_test[] = {
  "$4053"                // NAME
  "Description"          // Description
  "16"                   // Num pin
  "16"                   // Num case
  "11L1100G0001011V",
  "11L1100G0011101V",
  "11L1100G0101110V",
  "11L1100G0110111V",
  "01L1100G1001111V",
  "11L1000G1011111V",
  "10L1100G1101111V",
  "11L0100G1111111V"
};

char data_send_test[] = {
  "11L1100G0001011V"
  "11L1100G0011101V"
  "11L1100G0101110V"
  "11L1100G0110111V"
  "01L1100G1001111V"
  "11L1000G1011111V"
  "10L1100G1101111V"
  "11L0100G1111111V"
		"master"
};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//FATFS fs;  // file system
//FIL fil;   // file
//FRESULT fresult;  // store the data
//char buffer[1024];
//
//UINT br, bw;
//
///* capacity related variable */
//FATFS *pfs;
//DWORD fre_clust;
//uint32_t total, free_space;
//
//int buf_size(char *buf) {
//	int i=0;
//	while(*buf++ != '\0') i++;
//	return i;
//}
//
//void buf_clear(void) {
//	for (int i =0; i < 1024; i++) {
//		buffer[i] = '\0';
//	}
//}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CAN_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_SPI1_Init();
  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */

//  	  fresult = f_mount(&fs, "0:", 1);
//	if (fresult != FR_OK){
//	  printf ("ERROR with code:%d!!! in mounting SD CARD...\n\n",fresult);
//	}
//	else{
//	printf("SD CARD mounted successfully...\n\n");
//	/*************** Card capacity details ********************/
//	/* Check free space */
//	f_getfree("", &fre_clust, &pfs);
//	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
//	printf("SD CARD Total Size: \t%lu\n",total);
//	buf_clear();
//	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
//	printf("SD CARD Free Space: \t%lu\n\n",free_space);
//	buf_clear(); }

//	fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
//			/* Writing text */
//	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
//	/* Close file */
//	fresult = f_close(&fil);
//	if (fresult == FR_OK)printf("File1.txt created and the data is written \n");
//	/* Open file to read */
//	fresult = f_open(&fil, "file1.txt", FA_READ);
//	/* Read string from the file */
//	f_gets(buffer, f_size(&fil), &fil);
//	printf("File1.txt is opened and it contains the data as shown below\n");
//	printf("%s\n",buffer);
//	/* Close file */
//	f_sync(&fil);
//	f_close(&fil);
//	buf_clear();

//	fresult = f_mount(NULL, "0:", 1);
//	if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");

//  HAL_Delay(3000);
//    AT24Cxx_t pEeprom;
//  AT24Cxx_Init(&pEeprom, 0x50, &hi2c1);
//  char *text_program_1 = "Program test2,74hc560,20";
//  AT24Cxx_write_buffer_bloking(&pEeprom,START_ADDR_PROGRAM_TEST_X(0),(uint8_t *)text_program_1,strlen(text_program_1));

  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART

  HAL_CAN_Start(&hcan);
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY);

  Screen_begin(&huart2);

    for (uint8_t i = 0; i < 5; i++) {
  	printf("SWO Debug!!!\n");
    }

  BSP_init();

  Post_task_init();
  static OS_event_t const *q_app_post[10];
  OS_task_create(AO_taskPost,
  1,
  q_app_post,
  ARRAY_ELEMENT(q_app_post),
  (OS_event_t *)0 );

  eeprom_task_init(&hi2c1,EEPROM_ADDRESS);
  static OS_event_t const *q_eeprom_event[10];
  OS_task_create( AO_task_eeprom,
  1,
  q_eeprom_event,
  ARRAY_ELEMENT(q_eeprom_event),
  (OS_event_t *)0 );
//
//  uart_esp32_task_init(&huart1);
//  static OS_event_t const *q_uart_esp32_event[10];
//  OS_task_create(AO_task_uart_esp32,
//  1,
//  q_uart_esp32_event,
//  ARRAY_ELEMENT(q_uart_esp32_event),
//  (OS_event_t *)0);
//
  BlinkyTest_app_init();
  static OS_event_t const *TestOS_blinky[10]; /* Event queue */
  OS_task_create(
  AO_BlinkyTest,
  1,
  TestOS_blinky,
  ARRAY_ELEMENT(TestOS_blinky),
  TestOS_Work()
  );

  // app_can_bus_init(&hcan);
  // static OS_event_t const *Can_app_event[10];
  // OS_task_create( AO_task_can_bus,
  // 1,
  // Can_app_event,
  // ARRAY_ELEMENT(Can_app_event),
  // (OS_event_t *)0);



  TxHeader.DLC = 5;
  TxHeader.StdId = 0x103;
  TxHeader.IDE = CAN_ID_STD;
  TxHeader.RTR = CAN_RTR_DATA;

  uint8_t data_tx[5] = {'H','E','L','L','O'};
//  HAL_CAN_AddTxMessage(&hcan,&TxHeader, data_tx, &TxMailbox);

  uint8_t data_time[7];
  DS3231_t ds3231;
  DS3231_Init(&ds3231,&hi2c1,ADDRESS_DS3231);
//  DS3231_Write_time(&ds3231,00,18,18,7,31,6,25);
  DS3231_Read_time(&ds3231, data_time);

  isotp_init_link(&CAN_iso[0], 0x131, can_iso_send_buf , sizeof(can_iso_send_buf)
		  	  	  	  	  	  	  	, can_iso_recv_buf, sizeof(can_iso_recv_buf));

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t pre;
  pre = 0;
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GetTick() - pre > 2000) {
	        uint8_t send_data[200];
	        memcpy(send_data,data_send_test,143);
	        isotp_send(&CAN_iso, send_data, 143);
	        pre = HAL_GetTick();
	      }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{

  /* USER CODE BEGIN CAN_Init 0 */

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 4;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
  canfilterconfig.FilterIdHigh = 0;
  canfilterconfig.FilterIdLow = 0;
  canfilterconfig.FilterMaskIdHigh = 0;
  canfilterconfig.FilterMaskIdLow = 0;
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
  canfilterconfig.SlaveStartFilterBank = 0;

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
  /* USER CODE END CAN_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 460800;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 460800;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin : TEST_PIN_Pin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(TEST_PIN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
	if( huart->Instance == huart2.Instance ) {

		// Call to callback function screen
		Screen_RX_data(dataRX);

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
	}
}

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
	if (hi2c->Instance == hi2c1.Instance) {

		
	}
  /* Transmit complete wait eeprom write */
  OS_task_post_event(AO_task_eeprom, WAIT_WRITE_TIMEOUT, (uint8_t *)0, 0);
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
	uint8_t payload[200];
  uint8_t act_size = 0;
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
  if (RxHeader.StdId == 0x471) {
    isotp_on_can_message(&CAN_iso[0], RxData, RxHeader.DLC);
    //printf("%x,%c,%c,%c,%c,%c,%c,%c\n",RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
    if (CAN_iso[0].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
      isotp_receive(&CAN_iso[0], payload, sizeof(payload), &act_size);
    }
  }
}

int _write(int file, char *ptr, int len) {
    for (int i = 0; i < len; i++) {
        ITM_SendChar(ptr[i]);
    }
    return len;
}

/* FUNCTION USING IN CAN ISO TP */
int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t* data, const uint8_t size) {
  TxHeader.DLC = size;
  TxHeader.StdId = arbitration_id;
  TxHeader.IDE = CAN_ID_STD;
  TxHeader.RTR = CAN_RTR_DATA;

  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox) == HAL_OK) {
	  return ISOTP_RET_OK;
  }
  return ISOTP_RET_ERROR;
}


uint32_t isotp_user_get_ms(void) {
	return HAL_GetTick();
}

void isotp_user_debug(const char* message, ...) {
  
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
