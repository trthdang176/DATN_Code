
master_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013948  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  08013ad8  08013ad8  00014ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080145b8  080145b8  000162f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080145b8  080145b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080145c0  080145c0  000162f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080145c0  080145c0  000155c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080145c4  080145c4  000155c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f8  20000000  080145c8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001810  200002f8  080148c0  000162f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b08  080148c0  00016b08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000162f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000203a7  00000000  00000000  00016328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000503c  00000000  00000000  000366cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0003b710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e3  00000000  00000000  0003cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d99  00000000  00000000  0003de0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023f1a  00000000  00000000  00060ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0614  00000000  00000000  00084abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001350d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007274  00000000  00000000  00135118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0013c38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f8 	.word	0x200002f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013ac0 	.word	0x08013ac0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002fc 	.word	0x200002fc
 80001cc:	08013ac0 	.word	0x08013ac0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	4802      	ldr	r0, [pc, #8]	@ (8000d28 <SELECT+0x14>)
 8000d1e:	f002 f885 	bl	8002e2c <HAL_GPIO_WritePin>
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	48000400 	.word	0x48000400

08000d2c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2101      	movs	r1, #1
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <DESELECT+0x14>)
 8000d36:	f002 f879 	bl	8002e2c <HAL_GPIO_WritePin>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	48000400 	.word	0x48000400

08000d44 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d4e:	bf00      	nop
 8000d50:	4808      	ldr	r0, [pc, #32]	@ (8000d74 <SPI_TxByte+0x30>)
 8000d52:	f004 ff85 	bl	8005c60 <HAL_SPI_GetState>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d1f9      	bne.n	8000d50 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000d5c:	1df9      	adds	r1, r7, #7
 8000d5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d62:	2201      	movs	r2, #1
 8000d64:	4803      	ldr	r0, [pc, #12]	@ (8000d74 <SPI_TxByte+0x30>)
 8000d66:	f004 fbe4 	bl	8005532 <HAL_SPI_Transmit>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000394 	.word	0x20000394

08000d78 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000d7e:	23ff      	movs	r3, #255	@ 0xff
 8000d80:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000d86:	bf00      	nop
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <SPI_RxByte+0x38>)
 8000d8a:	f004 ff69 	bl	8005c60 <HAL_SPI_GetState>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d1f9      	bne.n	8000d88 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000d94:	1dba      	adds	r2, r7, #6
 8000d96:	1df9      	adds	r1, r7, #7
 8000d98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	4803      	ldr	r0, [pc, #12]	@ (8000db0 <SPI_RxByte+0x38>)
 8000da2:	f004 fd3b 	bl	800581c <HAL_SPI_TransmitReceive>
  
  return data;
 8000da6:	79bb      	ldrb	r3, [r7, #6]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000394 	.word	0x20000394

08000db4 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000dbc:	f7ff ffdc 	bl	8000d78 <SPI_RxByte>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	701a      	strb	r2, [r3, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <SD_ReadyWait+0x34>)
 8000dd8:	2232      	movs	r2, #50	@ 0x32
 8000dda:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000ddc:	f7ff ffcc 	bl	8000d78 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000de0:	f7ff ffca 	bl	8000d78 <SPI_RxByte>
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	2bff      	cmp	r3, #255	@ 0xff
 8000dec:	d004      	beq.n	8000df8 <SD_ReadyWait+0x28>
 8000dee:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <SD_ReadyWait+0x34>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1f3      	bne.n	8000de0 <SD_ReadyWait+0x10>
  
  return res;
 8000df8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000cd1 	.word	0x20000cd1

08000e08 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000e0e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000e12:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000e14:	f7ff ff8a 	bl	8000d2c <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	e005      	b.n	8000e2a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000e1e:	20ff      	movs	r0, #255	@ 0xff
 8000e20:	f7ff ff90 	bl	8000d44 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	3301      	adds	r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	2b09      	cmp	r3, #9
 8000e2e:	ddf6      	ble.n	8000e1e <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000e30:	f7ff ff70 	bl	8000d14 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000e34:	2340      	movs	r3, #64	@ 0x40
 8000e36:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000e48:	2395      	movs	r3, #149	@ 0x95
 8000e4a:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	e009      	b.n	8000e66 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000e52:	1d3a      	adds	r2, r7, #4
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff72 	bl	8000d44 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3301      	adds	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	ddf2      	ble.n	8000e52 <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000e6c:	e002      	b.n	8000e74 <SD_PowerOn+0x6c>
  {
    Count--;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000e74:	f7ff ff80 	bl	8000d78 <SPI_RxByte>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d002      	beq.n	8000e84 <SD_PowerOn+0x7c>
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f4      	bne.n	8000e6e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000e84:	f7ff ff52 	bl	8000d2c <DESELECT>
  SPI_TxByte(0XFF);
 8000e88:	20ff      	movs	r0, #255	@ 0xff
 8000e8a:	f7ff ff5b 	bl	8000d44 <SPI_TxByte>
  
  PowerFlag = 1;
 8000e8e:	4b03      	ldr	r3, [pc, #12]	@ (8000e9c <SD_PowerOn+0x94>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]
}
 8000e94:	bf00      	nop
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000315 	.word	0x20000315

08000ea0 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <SD_PowerOff+0x14>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	20000315 	.word	0x20000315

08000eb8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	@ (8000ecc <SD_CheckPower+0x14>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000315 	.word	0x20000315

08000ed0 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <SD_RxDataBlock+0x68>)
 8000edc:	220a      	movs	r2, #10
 8000ede:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000ee0:	f7ff ff4a 	bl	8000d78 <SPI_RxByte>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	2bff      	cmp	r3, #255	@ 0xff
 8000eec:	d104      	bne.n	8000ef8 <SD_RxDataBlock+0x28>
 8000eee:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <SD_RxDataBlock+0x68>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1f3      	bne.n	8000ee0 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000efc:	d001      	beq.n	8000f02 <SD_RxDataBlock+0x32>
    return FALSE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e016      	b.n	8000f30 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff53 	bl	8000db4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff4d 	bl	8000db4 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	3b02      	subs	r3, #2
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1ed      	bne.n	8000f02 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000f26:	f7ff ff27 	bl	8000d78 <SPI_RxByte>
  SPI_RxByte();
 8000f2a:	f7ff ff25 	bl	8000d78 <SPI_RxByte>
  
  return TRUE;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000cd0 	.word	0x20000cd0

08000f3c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000f4c:	f7ff ff40 	bl	8000dd0 <SD_ReadyWait>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2bff      	cmp	r3, #255	@ 0xff
 8000f54:	d001      	beq.n	8000f5a <SD_TxDataBlock+0x1e>
    return FALSE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e040      	b.n	8000fdc <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fef1 	bl	8000d44 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	2bfd      	cmp	r3, #253	@ 0xfd
 8000f66:	d031      	beq.n	8000fcc <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fee5 	bl	8000d44 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fede 	bl	8000d44 <SPI_TxByte>
    } while (--wc);
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	73bb      	strb	r3, [r7, #14]
 8000f8e:	7bbb      	ldrb	r3, [r7, #14]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1eb      	bne.n	8000f6c <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000f94:	f7ff fef0 	bl	8000d78 <SPI_RxByte>
    SPI_RxByte();
 8000f98:	f7ff feee 	bl	8000d78 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000f9c:	e00b      	b.n	8000fb6 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000f9e:	f7ff feeb 	bl	8000d78 <SPI_RxByte>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	f003 031f 	and.w	r3, r3, #31
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	d006      	beq.n	8000fbe <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000fb0:	7b7b      	ldrb	r3, [r7, #13]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000fb6:	7b7b      	ldrb	r3, [r7, #13]
 8000fb8:	2b40      	cmp	r3, #64	@ 0x40
 8000fba:	d9f0      	bls.n	8000f9e <SD_TxDataBlock+0x62>
 8000fbc:	e000      	b.n	8000fc0 <SD_TxDataBlock+0x84>
        break;
 8000fbe:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000fc0:	bf00      	nop
 8000fc2:	f7ff fed9 	bl	8000d78 <SPI_RxByte>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0fa      	beq.n	8000fc2 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f003 031f 	and.w	r3, r3, #31
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	d101      	bne.n	8000fda <SD_TxDataBlock+0x9e>
    return TRUE;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000ff0:	f7ff feee 	bl	8000dd0 <SD_ReadyWait>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2bff      	cmp	r3, #255	@ 0xff
 8000ff8:	d001      	beq.n	8000ffe <SD_SendCmd+0x1a>
    return 0xFF;
 8000ffa:	23ff      	movs	r3, #255	@ 0xff
 8000ffc:	e040      	b.n	8001080 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fe9f 	bl	8000d44 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	0e1b      	lsrs	r3, r3, #24
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fe99 	bl	8000d44 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	0c1b      	lsrs	r3, r3, #16
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe93 	bl	8000d44 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fe8d 	bl	8000d44 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fe88 	bl	8000d44 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b40      	cmp	r3, #64	@ 0x40
 800103c:	d101      	bne.n	8001042 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800103e:	2395      	movs	r3, #149	@ 0x95
 8001040:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b48      	cmp	r3, #72	@ 0x48
 8001046:	d101      	bne.n	800104c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001048:	2387      	movs	r3, #135	@ 0x87
 800104a:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe78 	bl	8000d44 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b4c      	cmp	r3, #76	@ 0x4c
 8001058:	d101      	bne.n	800105e <SD_SendCmd+0x7a>
    SPI_RxByte();
 800105a:	f7ff fe8d 	bl	8000d78 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800105e:	230a      	movs	r3, #10
 8001060:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001062:	f7ff fe89 	bl	8000d78 <SPI_RxByte>
 8001066:	4603      	mov	r3, r0
 8001068:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800106a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800106e:	2b00      	cmp	r3, #0
 8001070:	da05      	bge.n	800107e <SD_SendCmd+0x9a>
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	3b01      	subs	r3, #1
 8001076:	73bb      	strb	r3, [r7, #14]
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f1      	bne.n	8001062 <SD_SendCmd+0x7e>
  
  return res;
 800107e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001098:	2301      	movs	r3, #1
 800109a:	e0d5      	b.n	8001248 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 800109c:	4b6c      	ldr	r3, [pc, #432]	@ (8001250 <SD_disk_initialize+0x1c8>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <SD_disk_initialize+0x2a>
    return Stat;        
 80010aa:	4b69      	ldr	r3, [pc, #420]	@ (8001250 <SD_disk_initialize+0x1c8>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	e0ca      	b.n	8001248 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 80010b2:	f7ff fea9 	bl	8000e08 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 80010b6:	f7ff fe2d 	bl	8000d14 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 80010be:	2100      	movs	r1, #0
 80010c0:	2040      	movs	r0, #64	@ 0x40
 80010c2:	f7ff ff8f 	bl	8000fe4 <SD_SendCmd>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f040 80a5 	bne.w	8001218 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80010ce:	4b61      	ldr	r3, [pc, #388]	@ (8001254 <SD_disk_initialize+0x1cc>)
 80010d0:	2264      	movs	r2, #100	@ 0x64
 80010d2:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80010d4:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80010d8:	2048      	movs	r0, #72	@ 0x48
 80010da:	f7ff ff83 	bl	8000fe4 <SD_SendCmd>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d158      	bne.n	8001196 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e00c      	b.n	8001104 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80010ea:	7bfc      	ldrb	r4, [r7, #15]
 80010ec:	f7ff fe44 	bl	8000d78 <SPI_RxByte>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	f104 0310 	add.w	r3, r4, #16
 80010f8:	443b      	add	r3, r7
 80010fa:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	3301      	adds	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b03      	cmp	r3, #3
 8001108:	d9ef      	bls.n	80010ea <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 800110a:	7abb      	ldrb	r3, [r7, #10]
 800110c:	2b01      	cmp	r3, #1
 800110e:	f040 8083 	bne.w	8001218 <SD_disk_initialize+0x190>
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	2baa      	cmp	r3, #170	@ 0xaa
 8001116:	d17f      	bne.n	8001218 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001118:	2100      	movs	r1, #0
 800111a:	2077      	movs	r0, #119	@ 0x77
 800111c:	f7ff ff62 	bl	8000fe4 <SD_SendCmd>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	d807      	bhi.n	8001136 <SD_disk_initialize+0xae>
 8001126:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800112a:	2069      	movs	r0, #105	@ 0x69
 800112c:	f7ff ff5a 	bl	8000fe4 <SD_SendCmd>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001136:	4b47      	ldr	r3, [pc, #284]	@ (8001254 <SD_disk_initialize+0x1cc>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1eb      	bne.n	8001118 <SD_disk_initialize+0x90>
 8001140:	e000      	b.n	8001144 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001142:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001144:	4b43      	ldr	r3, [pc, #268]	@ (8001254 <SD_disk_initialize+0x1cc>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d064      	beq.n	8001218 <SD_disk_initialize+0x190>
 800114e:	2100      	movs	r1, #0
 8001150:	207a      	movs	r0, #122	@ 0x7a
 8001152:	f7ff ff47 	bl	8000fe4 <SD_SendCmd>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d15d      	bne.n	8001218 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e00c      	b.n	800117c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001162:	7bfc      	ldrb	r4, [r7, #15]
 8001164:	f7ff fe08 	bl	8000d78 <SPI_RxByte>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	f104 0310 	add.w	r3, r4, #16
 8001170:	443b      	add	r3, r7
 8001172:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3301      	adds	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d9ef      	bls.n	8001162 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001182:	7a3b      	ldrb	r3, [r7, #8]
 8001184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SD_disk_initialize+0x108>
 800118c:	2306      	movs	r3, #6
 800118e:	e000      	b.n	8001192 <SD_disk_initialize+0x10a>
 8001190:	2302      	movs	r3, #2
 8001192:	73bb      	strb	r3, [r7, #14]
 8001194:	e040      	b.n	8001218 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001196:	2100      	movs	r1, #0
 8001198:	2077      	movs	r0, #119	@ 0x77
 800119a:	f7ff ff23 	bl	8000fe4 <SD_SendCmd>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d808      	bhi.n	80011b6 <SD_disk_initialize+0x12e>
 80011a4:	2100      	movs	r1, #0
 80011a6:	2069      	movs	r0, #105	@ 0x69
 80011a8:	f7ff ff1c 	bl	8000fe4 <SD_SendCmd>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d801      	bhi.n	80011b6 <SD_disk_initialize+0x12e>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e000      	b.n	80011b8 <SD_disk_initialize+0x130>
 80011b6:	2301      	movs	r3, #1
 80011b8:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d10e      	bne.n	80011de <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80011c0:	2100      	movs	r1, #0
 80011c2:	2077      	movs	r0, #119	@ 0x77
 80011c4:	f7ff ff0e 	bl	8000fe4 <SD_SendCmd>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d80e      	bhi.n	80011ec <SD_disk_initialize+0x164>
 80011ce:	2100      	movs	r1, #0
 80011d0:	2069      	movs	r0, #105	@ 0x69
 80011d2:	f7ff ff07 	bl	8000fe4 <SD_SendCmd>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d107      	bne.n	80011ec <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80011dc:	e00d      	b.n	80011fa <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80011de:	2100      	movs	r1, #0
 80011e0:	2041      	movs	r0, #65	@ 0x41
 80011e2:	f7ff feff 	bl	8000fe4 <SD_SendCmd>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80011ec:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <SD_disk_initialize+0x1cc>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1e1      	bne.n	80011ba <SD_disk_initialize+0x132>
 80011f6:	e000      	b.n	80011fa <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80011f8:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <SD_disk_initialize+0x1cc>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <SD_disk_initialize+0x18c>
 8001204:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001208:	2050      	movs	r0, #80	@ 0x50
 800120a:	f7ff feeb 	bl	8000fe4 <SD_SendCmd>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001218:	4a0f      	ldr	r2, [pc, #60]	@ (8001258 <SD_disk_initialize+0x1d0>)
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 800121e:	f7ff fd85 	bl	8000d2c <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001222:	f7ff fda9 	bl	8000d78 <SPI_RxByte>
  
  if (type) 
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <SD_disk_initialize+0x1c8>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f023 0301 	bic.w	r3, r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <SD_disk_initialize+0x1c8>)
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	e001      	b.n	8001242 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800123e:	f7ff fe2f 	bl	8000ea0 <SD_PowerOff>
  }
  
  return Stat;
 8001242:	4b03      	ldr	r3, [pc, #12]	@ (8001250 <SD_disk_initialize+0x1c8>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
}
 8001248:	4618      	mov	r0, r3
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	bd90      	pop	{r4, r7, pc}
 8001250:	20000000 	.word	0x20000000
 8001254:	20000cd0 	.word	0x20000cd0
 8001258:	20000314 	.word	0x20000314

0800125c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SD_disk_status+0x14>
    return STA_NOINIT; 
 800126c:	2301      	movs	r3, #1
 800126e:	e002      	b.n	8001276 <SD_disk_status+0x1a>
  
  return Stat;
 8001270:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <SD_disk_status+0x28>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000000 	.word	0x20000000

08001288 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <SD_disk_read+0x1c>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <SD_disk_read+0x20>
    return RES_PARERR;
 80012a4:	2304      	movs	r3, #4
 80012a6:	e051      	b.n	800134c <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 80012a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <SD_disk_read+0xcc>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SD_disk_read+0x32>
    return RES_NOTRDY;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e048      	b.n	800134c <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 80012ba:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <SD_disk_read+0xd0>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	025b      	lsls	r3, r3, #9
 80012ca:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80012cc:	f7ff fd22 	bl	8000d14 <SELECT>
  
  if (count == 1) 
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d111      	bne.n	80012fa <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	2051      	movs	r0, #81	@ 0x51
 80012da:	f7ff fe83 	bl	8000fe4 <SD_SendCmd>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d129      	bne.n	8001338 <SD_disk_read+0xb0>
 80012e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012e8:	68b8      	ldr	r0, [r7, #8]
 80012ea:	f7ff fdf1 	bl	8000ed0 <SD_RxDataBlock>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d021      	beq.n	8001338 <SD_disk_read+0xb0>
      count = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	e01e      	b.n	8001338 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	2052      	movs	r0, #82	@ 0x52
 80012fe:	f7ff fe71 	bl	8000fe4 <SD_SendCmd>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d117      	bne.n	8001338 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001308:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800130c:	68b8      	ldr	r0, [r7, #8]
 800130e:	f7ff fddf 	bl	8000ed0 <SD_RxDataBlock>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00a      	beq.n	800132e <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800131e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	3b01      	subs	r3, #1
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1ed      	bne.n	8001308 <SD_disk_read+0x80>
 800132c:	e000      	b.n	8001330 <SD_disk_read+0xa8>
          break;
 800132e:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001330:	2100      	movs	r1, #0
 8001332:	204c      	movs	r0, #76	@ 0x4c
 8001334:	f7ff fe56 	bl	8000fe4 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001338:	f7ff fcf8 	bl	8000d2c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800133c:	f7ff fd1c 	bl	8000d78 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	bf14      	ite	ne
 8001346:	2301      	movne	r3, #1
 8001348:	2300      	moveq	r3, #0
 800134a:	b2db      	uxtb	r3, r3
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000000 	.word	0x20000000
 8001358:	20000314 	.word	0x20000314

0800135c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	4603      	mov	r3, r0
 800136a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <SD_disk_write+0x1c>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <SD_disk_write+0x20>
    return RES_PARERR;
 8001378:	2304      	movs	r3, #4
 800137a:	e06b      	b.n	8001454 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 800137c:	4b37      	ldr	r3, [pc, #220]	@ (800145c <SD_disk_write+0x100>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SD_disk_write+0x32>
    return RES_NOTRDY;
 800138a:	2303      	movs	r3, #3
 800138c:	e062      	b.n	8001454 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 800138e:	4b33      	ldr	r3, [pc, #204]	@ (800145c <SD_disk_write+0x100>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SD_disk_write+0x44>
    return RES_WRPRT;
 800139c:	2302      	movs	r3, #2
 800139e:	e059      	b.n	8001454 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80013a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001460 <SD_disk_write+0x104>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	025b      	lsls	r3, r3, #9
 80013b0:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80013b2:	f7ff fcaf 	bl	8000d14 <SELECT>
  
  if (count == 1) 
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d110      	bne.n	80013de <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	2058      	movs	r0, #88	@ 0x58
 80013c0:	f7ff fe10 	bl	8000fe4 <SD_SendCmd>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d13a      	bne.n	8001440 <SD_disk_write+0xe4>
 80013ca:	21fe      	movs	r1, #254	@ 0xfe
 80013cc:	68b8      	ldr	r0, [r7, #8]
 80013ce:	f7ff fdb5 	bl	8000f3c <SD_TxDataBlock>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d033      	beq.n	8001440 <SD_disk_write+0xe4>
      count = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	e030      	b.n	8001440 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 80013de:	4b20      	ldr	r3, [pc, #128]	@ (8001460 <SD_disk_write+0x104>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80013ea:	2100      	movs	r1, #0
 80013ec:	2077      	movs	r0, #119	@ 0x77
 80013ee:	f7ff fdf9 	bl	8000fe4 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80013f2:	6839      	ldr	r1, [r7, #0]
 80013f4:	2057      	movs	r0, #87	@ 0x57
 80013f6:	f7ff fdf5 	bl	8000fe4 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	2059      	movs	r0, #89	@ 0x59
 80013fe:	f7ff fdf1 	bl	8000fe4 <SD_SendCmd>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d11b      	bne.n	8001440 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001408:	21fc      	movs	r1, #252	@ 0xfc
 800140a:	68b8      	ldr	r0, [r7, #8]
 800140c:	f7ff fd96 	bl	8000f3c <SD_TxDataBlock>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00a      	beq.n	800142c <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800141c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	3b01      	subs	r3, #1
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1ee      	bne.n	8001408 <SD_disk_write+0xac>
 800142a:	e000      	b.n	800142e <SD_disk_write+0xd2>
          break;
 800142c:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800142e:	21fd      	movs	r1, #253	@ 0xfd
 8001430:	2000      	movs	r0, #0
 8001432:	f7ff fd83 	bl	8000f3c <SD_TxDataBlock>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <SD_disk_write+0xe4>
      {        
        count = 1;
 800143c:	2301      	movs	r3, #1
 800143e:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001440:	f7ff fc74 	bl	8000d2c <DESELECT>
  SPI_RxByte();
 8001444:	f7ff fc98 	bl	8000d78 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	bf14      	ite	ne
 800144e:	2301      	movne	r3, #1
 8001450:	2300      	moveq	r3, #0
 8001452:	b2db      	uxtb	r3, r3
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000000 	.word	0x20000000
 8001460:	20000314 	.word	0x20000314

08001464 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b08b      	sub	sp, #44	@ 0x2c
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	603a      	str	r2, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	460b      	mov	r3, r1
 8001472:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800147e:	2304      	movs	r3, #4
 8001480:	e119      	b.n	80016b6 <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8001488:	79bb      	ldrb	r3, [r7, #6]
 800148a:	2b05      	cmp	r3, #5
 800148c:	d129      	bne.n	80014e2 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d017      	beq.n	80014c6 <SD_disk_ioctl+0x62>
 8001496:	2b02      	cmp	r3, #2
 8001498:	dc1f      	bgt.n	80014da <SD_disk_ioctl+0x76>
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <SD_disk_ioctl+0x40>
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d00b      	beq.n	80014ba <SD_disk_ioctl+0x56>
 80014a2:	e01a      	b.n	80014da <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80014a4:	f7ff fd08 	bl	8000eb8 <SD_CheckPower>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80014ae:	f7ff fcf7 	bl	8000ea0 <SD_PowerOff>
      res = RES_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014b8:	e0fb      	b.n	80016b2 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 80014ba:	f7ff fca5 	bl	8000e08 <SD_PowerOn>
      res = RES_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014c4:	e0f5      	b.n	80016b2 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	1c5c      	adds	r4, r3, #1
 80014ca:	f7ff fcf5 	bl	8000eb8 <SD_CheckPower>
 80014ce:	4603      	mov	r3, r0
 80014d0:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80014d2:	2300      	movs	r3, #0
 80014d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014d8:	e0eb      	b.n	80016b2 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 80014da:	2304      	movs	r3, #4
 80014dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80014e0:	e0e7      	b.n	80016b2 <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80014e2:	4b77      	ldr	r3, [pc, #476]	@ (80016c0 <SD_disk_ioctl+0x25c>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0e0      	b.n	80016b6 <SD_disk_ioctl+0x252>
    
    SELECT();
 80014f4:	f7ff fc0e 	bl	8000d14 <SELECT>
    
    switch (ctrl) 
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	2b0d      	cmp	r3, #13
 80014fc:	f200 80ca 	bhi.w	8001694 <SD_disk_ioctl+0x230>
 8001500:	a201      	add	r2, pc, #4	@ (adr r2, 8001508 <SD_disk_ioctl+0xa4>)
 8001502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001506:	bf00      	nop
 8001508:	080015ff 	.word	0x080015ff
 800150c:	08001541 	.word	0x08001541
 8001510:	080015ef 	.word	0x080015ef
 8001514:	08001695 	.word	0x08001695
 8001518:	08001695 	.word	0x08001695
 800151c:	08001695 	.word	0x08001695
 8001520:	08001695 	.word	0x08001695
 8001524:	08001695 	.word	0x08001695
 8001528:	08001695 	.word	0x08001695
 800152c:	08001695 	.word	0x08001695
 8001530:	08001695 	.word	0x08001695
 8001534:	08001611 	.word	0x08001611
 8001538:	08001635 	.word	0x08001635
 800153c:	08001659 	.word	0x08001659
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001540:	2100      	movs	r1, #0
 8001542:	2049      	movs	r0, #73	@ 0x49
 8001544:	f7ff fd4e 	bl	8000fe4 <SD_SendCmd>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 80a6 	bne.w	800169c <SD_disk_ioctl+0x238>
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2110      	movs	r1, #16
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fcba 	bl	8000ed0 <SD_RxDataBlock>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 809c 	beq.w	800169c <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 8001564:	7b3b      	ldrb	r3, [r7, #12]
 8001566:	099b      	lsrs	r3, r3, #6
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b01      	cmp	r3, #1
 800156c:	d10d      	bne.n	800158a <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800156e:	7d7b      	ldrb	r3, [r7, #21]
 8001570:	461a      	mov	r2, r3
 8001572:	7d3b      	ldrb	r3, [r7, #20]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	4413      	add	r3, r2
 800157a:	b29b      	uxth	r3, r3
 800157c:	3301      	adds	r3, #1
 800157e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001580:	8bfb      	ldrh	r3, [r7, #30]
 8001582:	029a      	lsls	r2, r3, #10
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e02d      	b.n	80015e6 <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800158a:	7c7b      	ldrb	r3, [r7, #17]
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	b2da      	uxtb	r2, r3
 8001592:	7dbb      	ldrb	r3, [r7, #22]
 8001594:	09db      	lsrs	r3, r3, #7
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4413      	add	r3, r2
 800159a:	b2da      	uxtb	r2, r3
 800159c:	7d7b      	ldrb	r3, [r7, #21]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f003 0306 	and.w	r3, r3, #6
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	3302      	adds	r3, #2
 80015ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80015b2:	7d3b      	ldrb	r3, [r7, #20]
 80015b4:	099b      	lsrs	r3, r3, #6
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	7cfb      	ldrb	r3, [r7, #19]
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	7cbb      	ldrb	r3, [r7, #18]
 80015c6:	029b      	lsls	r3, r3, #10
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3301      	adds	r3, #1
 80015d6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80015d8:	8bfa      	ldrh	r2, [r7, #30]
 80015da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015de:	3b09      	subs	r3, #9
 80015e0:	409a      	lsls	r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80015ec:	e056      	b.n	800169c <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80015fc:	e055      	b.n	80016aa <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80015fe:	f7ff fbe7 	bl	8000dd0 <SD_ReadyWait>
 8001602:	4603      	mov	r3, r0
 8001604:	2bff      	cmp	r3, #255	@ 0xff
 8001606:	d14b      	bne.n	80016a0 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800160e:	e047      	b.n	80016a0 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001610:	2100      	movs	r1, #0
 8001612:	2049      	movs	r0, #73	@ 0x49
 8001614:	f7ff fce6 	bl	8000fe4 <SD_SendCmd>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d142      	bne.n	80016a4 <SD_disk_ioctl+0x240>
 800161e:	2110      	movs	r1, #16
 8001620:	6a38      	ldr	r0, [r7, #32]
 8001622:	f7ff fc55 	bl	8000ed0 <SD_RxDataBlock>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d03b      	beq.n	80016a4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001632:	e037      	b.n	80016a4 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001634:	2100      	movs	r1, #0
 8001636:	204a      	movs	r0, #74	@ 0x4a
 8001638:	f7ff fcd4 	bl	8000fe4 <SD_SendCmd>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d132      	bne.n	80016a8 <SD_disk_ioctl+0x244>
 8001642:	2110      	movs	r1, #16
 8001644:	6a38      	ldr	r0, [r7, #32]
 8001646:	f7ff fc43 	bl	8000ed0 <SD_RxDataBlock>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d02b      	beq.n	80016a8 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001656:	e027      	b.n	80016a8 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001658:	2100      	movs	r1, #0
 800165a:	207a      	movs	r0, #122	@ 0x7a
 800165c:	f7ff fcc2 	bl	8000fe4 <SD_SendCmd>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d116      	bne.n	8001694 <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 8001666:	2300      	movs	r3, #0
 8001668:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800166c:	e00b      	b.n	8001686 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 800166e:	6a3c      	ldr	r4, [r7, #32]
 8001670:	1c63      	adds	r3, r4, #1
 8001672:	623b      	str	r3, [r7, #32]
 8001674:	f7ff fb80 	bl	8000d78 <SPI_RxByte>
 8001678:	4603      	mov	r3, r0
 800167a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800167c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001680:	3301      	adds	r3, #1
 8001682:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001686:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800168a:	2b03      	cmp	r3, #3
 800168c:	d9ef      	bls.n	800166e <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001694:	2304      	movs	r3, #4
 8001696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800169a:	e006      	b.n	80016aa <SD_disk_ioctl+0x246>
      break;
 800169c:	bf00      	nop
 800169e:	e004      	b.n	80016aa <SD_disk_ioctl+0x246>
      break;
 80016a0:	bf00      	nop
 80016a2:	e002      	b.n	80016aa <SD_disk_ioctl+0x246>
      break;
 80016a4:	bf00      	nop
 80016a6:	e000      	b.n	80016aa <SD_disk_ioctl+0x246>
      break;
 80016a8:	bf00      	nop
    }
    
    DESELECT();
 80016aa:	f7ff fb3f 	bl	8000d2c <DESELECT>
    SPI_RxByte();
 80016ae:	f7ff fb63 	bl	8000d78 <SPI_RxByte>
  }
  
  return res;
 80016b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	372c      	adds	r7, #44	@ 0x2c
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd90      	pop	{r4, r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000000 	.word	0x20000000

080016c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80016e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00b      	beq.n	8001704 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016ec:	e000      	b.n	80016f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80016f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f9      	beq.n	80016ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016fa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171a:	f000 fd93 	bl	8002244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171e:	f000 f889 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001722:	f000 f9f3 	bl	8001b0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001726:	f000 f9c1 	bl	8001aac <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800172a:	f005 fecd 	bl	80074c8 <MX_FATFS_Init>
  MX_CAN_Init();
 800172e:	f000 f8db 	bl	80018e8 <MX_CAN_Init>
  MX_I2C1_Init();
 8001732:	f000 f90d 	bl	8001950 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001736:	f000 f94b 	bl	80019d0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800173a:	f000 f987 	bl	8001a4c <MX_USART1_UART_Init>
//    AT24Cxx_t pEeprom;
//  AT24Cxx_Init(&pEeprom, 0x50, &hi2c1);
//  char *text_program_1 = "Program test2,74hc560,20";
//  AT24Cxx_write_buffer_bloking(&pEeprom,START_ADDR_PROGRAM_TEST_X(0),(uint8_t *)text_program_1,strlen(text_program_1));

  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 800173e:	2264      	movs	r2, #100	@ 0x64
 8001740:	4929      	ldr	r1, [pc, #164]	@ (80017e8 <main+0xd4>)
 8001742:	482a      	ldr	r0, [pc, #168]	@ (80017ec <main+0xd8>)
 8001744:	f005 fe70 	bl	8007428 <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRX_ESP32, sizeof(dataRX_ESP32)); // Enable interrupt UART
 8001748:	2250      	movs	r2, #80	@ 0x50
 800174a:	4929      	ldr	r1, [pc, #164]	@ (80017f0 <main+0xdc>)
 800174c:	4829      	ldr	r0, [pc, #164]	@ (80017f4 <main+0xe0>)
 800174e:	f005 fe6b 	bl	8007428 <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_CAN_Start(&hcan);
 8001752:	4829      	ldr	r0, [pc, #164]	@ (80017f8 <main+0xe4>)
 8001754:	f000 fefb 	bl	800254e <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_BUSOFF );
 8001758:	f240 4111 	movw	r1, #1041	@ 0x411
 800175c:	4826      	ldr	r0, [pc, #152]	@ (80017f8 <main+0xe4>)
 800175e:	f001 f80a 	bl	8002776 <HAL_CAN_ActivateNotification>

//    for (uint8_t i = 0; i < 5; i++) {
//  	printf("SWO Debug!!!\n");
//    }

  BSP_init();
 8001762:	f00b fcc5 	bl	800d0f0 <BSP_init>
//  1,
//  q_uart_esp32_event,
//  ARRAY_ELEMENT(q_uart_esp32_event),
//  (OS_event_t *)0);

  BlinkyTest_app_init();
 8001766:	f00b fe01 	bl	800d36c <BlinkyTest_app_init>
  static OS_event_t const *TestOS_blinky[10]; /* Event queue */
  OS_task_create(
 800176a:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <main+0xe8>)
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	2300      	movs	r3, #0
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	230a      	movs	r3, #10
 8001774:	4a22      	ldr	r2, [pc, #136]	@ (8001800 <main+0xec>)
 8001776:	2101      	movs	r1, #1
 8001778:	f00c fdff 	bl	800e37a <OS_task_create>
  1,
  TestOS_blinky,
  ARRAY_ELEMENT(TestOS_blinky),
  (OS_event_t *)0);

  screen_task_init();
 800177c:	f00b fcfa 	bl	800d174 <screen_task_init>
  static OS_event_t const *q_screen[10]; /* Event queue */
  OS_task_create(
 8001780:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <main+0xf0>)
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	2300      	movs	r3, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	230a      	movs	r3, #10
 800178a:	4a1f      	ldr	r2, [pc, #124]	@ (8001808 <main+0xf4>)
 800178c:	2101      	movs	r1, #1
 800178e:	f00c fdf4 	bl	800e37a <OS_task_create>
  1,
  q_screen,
  ARRAY_ELEMENT(q_screen),
  (OS_event_t *)0);

  ds3231_task_init(&hi2c1,ADDRESS_DS3231);
 8001792:	2168      	movs	r1, #104	@ 0x68
 8001794:	481d      	ldr	r0, [pc, #116]	@ (800180c <main+0xf8>)
 8001796:	f00b fcd9 	bl	800d14c <ds3231_task_init>
//  Can_app_event,
//  ARRAY_ELEMENT(Can_app_event),
//  (OS_event_t *)0);

//  HAL_Delay(4500);
  Screen_begin(&huart2);
 800179a:	4814      	ldr	r0, [pc, #80]	@ (80017ec <main+0xd8>)
 800179c:	f005 ff5c 	bl	8007658 <Screen_begin>
//  sprintf(string, "Time RTC: %d/%d/%d - %d:%d:%d\n",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]);
//  printf("%s",string);

//  isotp_init_link(&CAN_iso[0], 0x131, can_iso_send_buf , sizeof(can_iso_send_buf)
//		  	  	  	  	  	  	  	, can_iso_recv_buf, sizeof(can_iso_recv_buf));
     isotp_init_link(&CAN_iso[0], 0x131, can_iso_send_buf , sizeof(can_iso_send_buf)
 80017a0:	23fa      	movs	r3, #250	@ 0xfa
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <main+0xfc>)
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	23fa      	movs	r3, #250	@ 0xfa
 80017aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001814 <main+0x100>)
 80017ac:	f240 1131 	movw	r1, #305	@ 0x131
 80017b0:	4819      	ldr	r0, [pc, #100]	@ (8001818 <main+0x104>)
 80017b2:	f00c fda9 	bl	800e308 <isotp_init_link>
		   	  	  	  	  	  	  	, can_iso_recv_buf, sizeof(can_iso_recv_buf));

  isotp_init_link(&CAN_iso[1], 0x132, can_iso_send_buf1 , sizeof(can_iso_send_buf1)
 80017b6:	23fa      	movs	r3, #250	@ 0xfa
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	4b18      	ldr	r3, [pc, #96]	@ (800181c <main+0x108>)
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	23fa      	movs	r3, #250	@ 0xfa
 80017c0:	4a17      	ldr	r2, [pc, #92]	@ (8001820 <main+0x10c>)
 80017c2:	f44f 7199 	mov.w	r1, #306	@ 0x132
 80017c6:	4817      	ldr	r0, [pc, #92]	@ (8001824 <main+0x110>)
 80017c8:	f00c fd9e 	bl	800e308 <isotp_init_link>
		  	  	  	  	  	  	  	, can_iso_recv_buf1, sizeof(can_iso_recv_buf1));

  isotp_init_link(&CAN_iso[2], 0x134, can_iso_send_buf2 , sizeof(can_iso_send_buf2)
 80017cc:	23fa      	movs	r3, #250	@ 0xfa
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <main+0x114>)
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	23fa      	movs	r3, #250	@ 0xfa
 80017d6:	4a15      	ldr	r2, [pc, #84]	@ (800182c <main+0x118>)
 80017d8:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80017dc:	4814      	ldr	r0, [pc, #80]	@ (8001830 <main+0x11c>)
 80017de:	f00c fd93 	bl	800e308 <isotp_init_link>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint32_t pre;
//  pre = 0;
  	  while (1)
 80017e2:	bf00      	nop
 80017e4:	e7fd      	b.n	80017e2 <main+0xce>
 80017e6:	bf00      	nop
 80017e8:	20000bcc 	.word	0x20000bcc
 80017ec:	20000480 	.word	0x20000480
 80017f0:	20000c30 	.word	0x20000c30
 80017f4:	200003f8 	.word	0x200003f8
 80017f8:	20000318 	.word	0x20000318
 80017fc:	080140ec 	.word	0x080140ec
 8001800:	20000c80 	.word	0x20000c80
 8001804:	080140e0 	.word	0x080140e0
 8001808:	20000ca8 	.word	0x20000ca8
 800180c:	20000340 	.word	0x20000340
 8001810:	200005e4 	.word	0x200005e4
 8001814:	200006e0 	.word	0x200006e0
 8001818:	20000524 	.word	0x20000524
 800181c:	200007dc 	.word	0x200007dc
 8001820:	200008d8 	.word	0x200008d8
 8001824:	20000564 	.word	0x20000564
 8001828:	200009d4 	.word	0x200009d4
 800182c:	20000ad0 	.word	0x20000ad0
 8001830:	200005a4 	.word	0x200005a4

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b09c      	sub	sp, #112	@ 0x70
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800183e:	2228      	movs	r2, #40	@ 0x28
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f00f f8c0 	bl	80109c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001858:	463b      	mov	r3, r7
 800185a:	2234      	movs	r2, #52	@ 0x34
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f00f f8b2 	bl	80109c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001864:	2302      	movs	r3, #2
 8001866:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001868:	2301      	movs	r3, #1
 800186a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800186c:	2310      	movs	r3, #16
 800186e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001870:	2302      	movs	r3, #2
 8001872:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001874:	2300      	movs	r3, #0
 8001876:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001878:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800187c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001882:	4618      	mov	r0, r3
 8001884:	f002 f9fa 	bl	8003c7c <HAL_RCC_OscConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800188e:	f000 fa47 	bl	8001d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001892:	230f      	movs	r3, #15
 8001894:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001896:	2302      	movs	r3, #2
 8001898:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800189e:	2300      	movs	r3, #0
 80018a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018aa:	2101      	movs	r1, #1
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 f9f3 	bl	8004c98 <HAL_RCC_ClockConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80018b8:	f000 fa32 	bl	8001d20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80018bc:	2323      	movs	r3, #35	@ 0x23
 80018be:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018cc:	463b      	mov	r3, r7
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 fbf4 	bl	80050bc <HAL_RCCEx_PeriphCLKConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80018da:	f000 fa21 	bl	8001d20 <Error_Handler>
  }
}
 80018de:	bf00      	nop
 80018e0:	3770      	adds	r7, #112	@ 0x70
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80018ec:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_CAN_Init+0x60>)
 80018ee:	4a17      	ldr	r2, [pc, #92]	@ (800194c <MX_CAN_Init+0x64>)
 80018f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <MX_CAN_Init+0x60>)
 80018f4:	2210      	movs	r2, #16
 80018f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80018f8:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <MX_CAN_Init+0x60>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018fe:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <MX_CAN_Init+0x60>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001904:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <MX_CAN_Init+0x60>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800190a:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <MX_CAN_Init+0x60>)
 800190c:	2200      	movs	r2, #0
 800190e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001910:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <MX_CAN_Init+0x60>)
 8001912:	2200      	movs	r2, #0
 8001914:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001916:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <MX_CAN_Init+0x60>)
 8001918:	2200      	movs	r2, #0
 800191a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <MX_CAN_Init+0x60>)
 800191e:	2200      	movs	r2, #0
 8001920:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <MX_CAN_Init+0x60>)
 8001924:	2200      	movs	r2, #0
 8001926:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <MX_CAN_Init+0x60>)
 800192a:	2200      	movs	r2, #0
 800192c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <MX_CAN_Init+0x60>)
 8001930:	2200      	movs	r2, #0
 8001932:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	@ (8001948 <MX_CAN_Init+0x60>)
 8001936:	f000 fd0f 	bl	8002358 <HAL_CAN_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001940:	f000 f9ee 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000318 	.word	0x20000318
 800194c:	40006400 	.word	0x40006400

08001950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001956:	4a1c      	ldr	r2, [pc, #112]	@ (80019c8 <MX_I2C1_Init+0x78>)
 8001958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800195a:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800195c:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <MX_I2C1_Init+0x7c>)
 800195e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001966:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001968:	2201      	movs	r2, #1
 800196a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800197e:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001984:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800198a:	480e      	ldr	r0, [pc, #56]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800198c:	f001 fa66 	bl	8002e5c <HAL_I2C_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001996:	f000 f9c3 	bl	8001d20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800199a:	2100      	movs	r1, #0
 800199c:	4809      	ldr	r0, [pc, #36]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800199e:	f002 f8d5 	bl	8003b4c <HAL_I2CEx_ConfigAnalogFilter>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019a8:	f000 f9ba 	bl	8001d20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019ac:	2100      	movs	r1, #0
 80019ae:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <MX_I2C1_Init+0x74>)
 80019b0:	f002 f917 	bl	8003be2 <HAL_I2CEx_ConfigDigitalFilter>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019ba:	f000 f9b1 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000340 	.word	0x20000340
 80019c8:	40005400 	.word	0x40005400
 80019cc:	00201d2b 	.word	0x00201d2b

080019d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <MX_SPI1_Init+0x74>)
 80019d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a48 <MX_SPI1_Init+0x78>)
 80019d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019da:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <MX_SPI1_Init+0x74>)
 80019dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019e2:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <MX_SPI1_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80019e8:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <MX_SPI1_Init+0x74>)
 80019ea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80019ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f0:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <MX_SPI1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f6:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <MX_SPI1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <MX_SPI1_Init+0x74>)
 80019fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	@ (8001a44 <MX_SPI1_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <MX_SPI1_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <MX_SPI1_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <MX_SPI1_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <MX_SPI1_Init+0x74>)
 8001a1e:	2207      	movs	r2, #7
 8001a20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <MX_SPI1_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <MX_SPI1_Init+0x74>)
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <MX_SPI1_Init+0x74>)
 8001a30:	f003 fcd4 	bl	80053dc <HAL_SPI_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a3a:	f000 f971 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000394 	.word	0x20000394
 8001a48:	40013000 	.word	0x40013000

08001a4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a52:	4a15      	ldr	r2, [pc, #84]	@ (8001aa8 <MX_USART1_UART_Init+0x5c>)
 8001a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a58:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a72:	220c      	movs	r2, #12
 8001a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a90:	f004 fa58 	bl	8005f44 <HAL_UART_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a9a:	f000 f941 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200003f8 	.word	0x200003f8
 8001aa8:	40013800 	.word	0x40013800

08001aac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ab2:	4a15      	ldr	r2, [pc, #84]	@ (8001b08 <MX_USART2_UART_Init+0x5c>)
 8001ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ab8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae2:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aee:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001af0:	f004 fa28 	bl	8005f44 <HAL_UART_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001afa:	f000 f911 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000480 	.word	0x20000480
 8001b08:	40004400 	.word	0x40004400

08001b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
 8001b20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	4b22      	ldr	r3, [pc, #136]	@ (8001bac <MX_GPIO_Init+0xa0>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	4a21      	ldr	r2, [pc, #132]	@ (8001bac <MX_GPIO_Init+0xa0>)
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b2c:	6153      	str	r3, [r2, #20]
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bac <MX_GPIO_Init+0xa0>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <MX_GPIO_Init+0xa0>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001bac <MX_GPIO_Init+0xa0>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b44:	6153      	str	r3, [r2, #20]
 8001b46:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <MX_GPIO_Init+0xa0>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2102      	movs	r1, #2
 8001b56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b5a:	f001 f967 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2101      	movs	r1, #1
 8001b62:	4813      	ldr	r0, [pc, #76]	@ (8001bb0 <MX_GPIO_Init+0xa4>)
 8001b64:	f001 f962 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b82:	f000 ffd9 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b86:	2301      	movs	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4804      	ldr	r0, [pc, #16]	@ (8001bb0 <MX_GPIO_Init+0xa4>)
 8001b9e:	f000 ffcb 	bl	8002b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ba2:	bf00      	nop
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	48000400 	.word	0x48000400

08001bb4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <HAL_UARTEx_RxEventCallback+0xac>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d10d      	bne.n	8001be8 <HAL_UARTEx_RxEventCallback+0x34>
		// Call to callback function screen
		Screen_RX_data(dataRX);
 8001bcc:	4825      	ldr	r0, [pc, #148]	@ (8001c64 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001bce:	f005 fdc7 	bl	8007760 <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 8001bd2:	2264      	movs	r2, #100	@ 0x64
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4823      	ldr	r0, [pc, #140]	@ (8001c64 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001bd8:	f00e fef6 	bl	80109c8 <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8001bdc:	2264      	movs	r2, #100	@ 0x64
 8001bde:	4921      	ldr	r1, [pc, #132]	@ (8001c64 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001be0:	481f      	ldr	r0, [pc, #124]	@ (8001c60 <HAL_UARTEx_RxEventCallback+0xac>)
 8001be2:	f005 fc21 	bl	8007428 <HAL_UARTEx_ReceiveToIdle_IT>

    memset(dataRX_ESP32,0,sizeof(dataRX_ESP32));

		HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRX_ESP32, sizeof(dataRX_ESP32)); // Enable interrupt UART
	}
}
 8001be6:	e037      	b.n	8001c58 <HAL_UARTEx_RxEventCallback+0xa4>
	} else if (huart->Instance == huart1.Instance) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d131      	bne.n	8001c58 <HAL_UARTEx_RxEventCallback+0xa4>
    uart_esp32_t *RX_ESP32 = malloc(sizeof(uart_esp32_t));
 8001bf4:	2008      	movs	r0, #8
 8001bf6:	f00c fe89 	bl	800e90c <malloc>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	60fb      	str	r3, [r7, #12]
    RX_ESP32->data = malloc(strlen(dataRX_ESP32));
 8001bfe:	481b      	ldr	r0, [pc, #108]	@ (8001c6c <HAL_UARTEx_RxEventCallback+0xb8>)
 8001c00:	f7fe fb46 	bl	8000290 <strlen>
 8001c04:	4603      	mov	r3, r0
 8001c06:	68fc      	ldr	r4, [r7, #12]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f00c fe7f 	bl	800e90c <malloc>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6023      	str	r3, [r4, #0]
    memcpy(RX_ESP32->data,dataRX_ESP32,strlen(dataRX_ESP32));
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681c      	ldr	r4, [r3, #0]
 8001c16:	4815      	ldr	r0, [pc, #84]	@ (8001c6c <HAL_UARTEx_RxEventCallback+0xb8>)
 8001c18:	f7fe fb3a 	bl	8000290 <strlen>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4912      	ldr	r1, [pc, #72]	@ (8001c6c <HAL_UARTEx_RxEventCallback+0xb8>)
 8001c22:	4620      	mov	r0, r4
 8001c24:	f00f f80b 	bl	8010c3e <memcpy>
    RX_ESP32->len = strlen(dataRX_ESP32);
 8001c28:	68fc      	ldr	r4, [r7, #12]
 8001c2a:	4810      	ldr	r0, [pc, #64]	@ (8001c6c <HAL_UARTEx_RxEventCallback+0xb8>)
 8001c2c:	f7fe fb30 	bl	8000290 <strlen>
 8001c30:	4603      	mov	r3, r0
 8001c32:	6063      	str	r3, [r4, #4]
    OS_task_post_event(AO_task_uart_esp32,RECEIVE_DATA_ESP32,(uint8_t *)&RX_ESP32,sizeof(uart_esp32_t));
 8001c34:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	f107 020c 	add.w	r2, r7, #12
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	2101      	movs	r1, #1
 8001c40:	f00c fc3c 	bl	800e4bc <OS_task_post_event>
    memset(dataRX_ESP32,0,sizeof(dataRX_ESP32));
 8001c44:	2250      	movs	r2, #80	@ 0x50
 8001c46:	2100      	movs	r1, #0
 8001c48:	4808      	ldr	r0, [pc, #32]	@ (8001c6c <HAL_UARTEx_RxEventCallback+0xb8>)
 8001c4a:	f00e febd 	bl	80109c8 <memset>
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRX_ESP32, sizeof(dataRX_ESP32)); // Enable interrupt UART
 8001c4e:	2250      	movs	r2, #80	@ 0x50
 8001c50:	4906      	ldr	r1, [pc, #24]	@ (8001c6c <HAL_UARTEx_RxEventCallback+0xb8>)
 8001c52:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001c54:	f005 fbe8 	bl	8007428 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd90      	pop	{r4, r7, pc}
 8001c60:	20000480 	.word	0x20000480
 8001c64:	20000bcc 	.word	0x20000bcc
 8001c68:	200003f8 	.word	0x200003f8
 8001c6c:	20000c30 	.word	0x20000c30
 8001c70:	080140e8 	.word	0x080140e8

08001c74 <_write>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
	uint32_t lastError = HAL_CAN_GetError(hcan);
}

int _write(int file, char *ptr, int len) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e009      	b.n	8001c9a <_write+0x26>
        ITM_SendChar(ptr[i]);
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fd18 	bl	80016c4 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbf1      	blt.n	8001c86 <_write+0x12>
    }
    return len;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <isotp_user_send_can>:

/* FUNCTION USING IN CAN ISO TP */
int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t* data, const uint8_t size) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	71fb      	strb	r3, [r7, #7]
  TxHeader.DLC = size;
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <isotp_user_send_can+0x48>)
 8001cbe:	6113      	str	r3, [r2, #16]
  TxHeader.StdId = arbitration_id;
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf4 <isotp_user_send_can+0x48>)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6013      	str	r3, [r2, #0]
  TxHeader.IDE = CAN_ID_STD;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <isotp_user_send_can+0x48>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <isotp_user_send_can+0x48>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]

  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox) == HAL_OK) {
 8001cd2:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <isotp_user_send_can+0x4c>)
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	4907      	ldr	r1, [pc, #28]	@ (8001cf4 <isotp_user_send_can+0x48>)
 8001cd8:	4808      	ldr	r0, [pc, #32]	@ (8001cfc <isotp_user_send_can+0x50>)
 8001cda:	f000 fc7c 	bl	80025d6 <HAL_CAN_AddTxMessage>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <isotp_user_send_can+0x3c>
	  return ISOTP_RET_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e001      	b.n	8001cec <isotp_user_send_can+0x40>
  }
  return ISOTP_RET_ERROR;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000508 	.word	0x20000508
 8001cf8:	20000520 	.word	0x20000520
 8001cfc:	20000318 	.word	0x20000318

08001d00 <isotp_user_get_ms>:


uint32_t isotp_user_get_ms(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001d04:	f000 faf8 	bl	80022f8 <HAL_GetTick>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <isotp_user_debug>:

void isotp_user_debug(const char* message, ...) {
 8001d0e:	b40f      	push	{r0, r1, r2, r3}
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	b004      	add	sp, #16
 8001d1e:	4770      	bx	lr

08001d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d24:	b672      	cpsid	i
}
 8001d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <Error_Handler+0x8>

08001d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	4a0e      	ldr	r2, [pc, #56]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6193      	str	r3, [r2, #24]
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	4a08      	ldr	r2, [pc, #32]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d54:	61d3      	str	r3, [r2, #28]
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	@ 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a18      	ldr	r2, [pc, #96]	@ (8001df4 <HAL_CAN_MspInit+0x80>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d129      	bne.n	8001dea <HAL_CAN_MspInit+0x76>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d96:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <HAL_CAN_MspInit+0x84>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a17      	ldr	r2, [pc, #92]	@ (8001df8 <HAL_CAN_MspInit+0x84>)
 8001d9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <HAL_CAN_MspInit+0x84>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_CAN_MspInit+0x84>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	4a11      	ldr	r2, [pc, #68]	@ (8001df8 <HAL_CAN_MspInit+0x84>)
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db8:	6153      	str	r3, [r2, #20]
 8001dba:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <HAL_CAN_MspInit+0x84>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001dc6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001dd8:	2309      	movs	r3, #9
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001de6:	f000 fea7 	bl	8002b38 <HAL_GPIO_Init>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	@ 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40006400 	.word	0x40006400
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	@ 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <HAL_I2C_MspInit+0x7c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d127      	bne.n	8001e6e <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <HAL_I2C_MspInit+0x80>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	4a16      	ldr	r2, [pc, #88]	@ (8001e7c <HAL_I2C_MspInit+0x80>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e28:	6153      	str	r3, [r2, #20]
 8001e2a:	4b14      	ldr	r3, [pc, #80]	@ (8001e7c <HAL_I2C_MspInit+0x80>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e36:	23c0      	movs	r3, #192	@ 0xc0
 8001e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3a:	2312      	movs	r3, #18
 8001e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e46:	2304      	movs	r3, #4
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480b      	ldr	r0, [pc, #44]	@ (8001e80 <HAL_I2C_MspInit+0x84>)
 8001e52:	f000 fe71 	bl	8002b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	@ (8001e7c <HAL_I2C_MspInit+0x80>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a08      	ldr	r2, [pc, #32]	@ (8001e7c <HAL_I2C_MspInit+0x80>)
 8001e5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_I2C_MspInit+0x80>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e6e:	bf00      	nop
 8001e70:	3728      	adds	r7, #40	@ 0x28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40005400 	.word	0x40005400
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	48000400 	.word	0x48000400

08001e84 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	@ 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <HAL_SPI_MspInit+0x7c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d128      	bne.n	8001ef8 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ea6:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <HAL_SPI_MspInit+0x80>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	4a16      	ldr	r2, [pc, #88]	@ (8001f04 <HAL_SPI_MspInit+0x80>)
 8001eac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001eb0:	6193      	str	r3, [r2, #24]
 8001eb2:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <HAL_SPI_MspInit+0x80>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <HAL_SPI_MspInit+0x80>)
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	4a10      	ldr	r2, [pc, #64]	@ (8001f04 <HAL_SPI_MspInit+0x80>)
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec8:	6153      	str	r3, [r2, #20]
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <HAL_SPI_MspInit+0x80>)
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ed6:	23e0      	movs	r3, #224	@ 0xe0
 8001ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef4:	f000 fe20 	bl	8002b38 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	@ 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40013000 	.word	0x40013000
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	@ 0x30
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a33      	ldr	r2, [pc, #204]	@ (8001ff4 <HAL_UART_MspInit+0xec>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d12a      	bne.n	8001f80 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f2a:	4b33      	ldr	r3, [pc, #204]	@ (8001ff8 <HAL_UART_MspInit+0xf0>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	4a32      	ldr	r2, [pc, #200]	@ (8001ff8 <HAL_UART_MspInit+0xf0>)
 8001f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f34:	6193      	str	r3, [r2, #24]
 8001f36:	4b30      	ldr	r3, [pc, #192]	@ (8001ff8 <HAL_UART_MspInit+0xf0>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff8 <HAL_UART_MspInit+0xf0>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff8 <HAL_UART_MspInit+0xf0>)
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f4c:	6153      	str	r3, [r2, #20]
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff8 <HAL_UART_MspInit+0xf0>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f5a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f6c:	2307      	movs	r3, #7
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f7a:	f000 fddd 	bl	8002b38 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f7e:	e035      	b.n	8001fec <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1d      	ldr	r2, [pc, #116]	@ (8001ffc <HAL_UART_MspInit+0xf4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d130      	bne.n	8001fec <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <HAL_UART_MspInit+0xf0>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ff8 <HAL_UART_MspInit+0xf0>)
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f94:	61d3      	str	r3, [r2, #28]
 8001f96:	4b18      	ldr	r3, [pc, #96]	@ (8001ff8 <HAL_UART_MspInit+0xf0>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <HAL_UART_MspInit+0xf0>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	4a14      	ldr	r2, [pc, #80]	@ (8001ff8 <HAL_UART_MspInit+0xf0>)
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fac:	6153      	str	r3, [r2, #20]
 8001fae:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <HAL_UART_MspInit+0xf0>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fba:	230c      	movs	r3, #12
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fca:	2307      	movs	r3, #7
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd8:	f000 fdae 	bl	8002b38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2026      	movs	r0, #38	@ 0x26
 8001fe2:	f000 fce8 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fe6:	2026      	movs	r0, #38	@ 0x26
 8001fe8:	f000 fd01 	bl	80029ee <HAL_NVIC_EnableIRQ>
}
 8001fec:	bf00      	nop
 8001fee:	3730      	adds	r7, #48	@ 0x30
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40013800 	.word	0x40013800
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40004400 	.word	0x40004400

08002000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <NMI_Handler+0x4>

08002008 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <HardFault_Handler+0x4>

08002010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <MemManage_Handler+0x4>

08002018 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <BusFault_Handler+0x4>

08002020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <UsageFault_Handler+0x4>

08002028 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	af00      	add	r7, sp, #0
//  {
//    FatFsCnt = 0;
//    SDTimer_Handler();
//  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002056:	f000 f93b 	bl	80022d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  OS_TimeEvt_tick();
 800205a:	f00c fa8d 	bl	800e578 <OS_TimeEvt_tick>
//    for(uint8_t i = 0; i < 3; i++) {
//      isotp_poll(&CAN_iso[i]);
//    }
//  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <USART2_IRQHandler+0x10>)
 800206a:	f004 f843 	bl	80060f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000480 	.word	0x20000480

08002078 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return 1;
 800207c:	2301      	movs	r3, #1
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_kill>:

int _kill(int pid, int sig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002092:	f00e fd9f 	bl	8010bd4 <__errno>
 8002096:	4603      	mov	r3, r0
 8002098:	2216      	movs	r2, #22
 800209a:	601a      	str	r2, [r3, #0]
  return -1;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_exit>:

void _exit (int status)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ffe7 	bl	8002088 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ba:	bf00      	nop
 80020bc:	e7fd      	b.n	80020ba <_exit+0x12>

080020be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	e00a      	b.n	80020e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d0:	f3af 8000 	nop.w
 80020d4:	4601      	mov	r1, r0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	60ba      	str	r2, [r7, #8]
 80020dc:	b2ca      	uxtb	r2, r1
 80020de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	3301      	adds	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	dbf0      	blt.n	80020d0 <_read+0x12>
  }

  return len;
 80020ee:	687b      	ldr	r3, [r7, #4]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002120:	605a      	str	r2, [r3, #4]
  return 0;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_isatty>:

int _isatty(int file)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002138:	2301      	movs	r3, #1
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002146:	b480      	push	{r7}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002168:	4a14      	ldr	r2, [pc, #80]	@ (80021bc <_sbrk+0x5c>)
 800216a:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <_sbrk+0x60>)
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800217c:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <_sbrk+0x64>)
 800217e:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <_sbrk+0x68>)
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	429a      	cmp	r2, r3
 800218e:	d207      	bcs.n	80021a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002190:	f00e fd20 	bl	8010bd4 <__errno>
 8002194:	4603      	mov	r3, r0
 8002196:	220c      	movs	r2, #12
 8002198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	e009      	b.n	80021b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a0:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a6:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <_sbrk+0x64>)
 80021b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	2000a000 	.word	0x2000a000
 80021c0:	00000400 	.word	0x00000400
 80021c4:	20000cd4 	.word	0x20000cd4
 80021c8:	20001b08 	.word	0x20001b08

080021cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	@ (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002228 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80021f4:	f7ff ffea 	bl	80021cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021f8:	480c      	ldr	r0, [pc, #48]	@ (800222c <LoopForever+0x6>)
  ldr r1, =_edata
 80021fa:	490d      	ldr	r1, [pc, #52]	@ (8002230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <LoopForever+0xe>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002210:	4c0a      	ldr	r4, [pc, #40]	@ (800223c <LoopForever+0x16>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800221e:	f00e fcdf 	bl	8010be0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002222:	f7ff fa77 	bl	8001714 <main>

08002226 <LoopForever>:

LoopForever:
    b LoopForever
 8002226:	e7fe      	b.n	8002226 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002228:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8002234:	080145c8 	.word	0x080145c8
  ldr r2, =_sbss
 8002238:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 800223c:	20001b08 	.word	0x20001b08

08002240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC1_2_IRQHandler>
	...

08002244 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002248:	4b08      	ldr	r3, [pc, #32]	@ (800226c <HAL_Init+0x28>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a07      	ldr	r2, [pc, #28]	@ (800226c <HAL_Init+0x28>)
 800224e:	f043 0310 	orr.w	r3, r3, #16
 8002252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002254:	2003      	movs	r0, #3
 8002256:	f000 fba3 	bl	80029a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225a:	200f      	movs	r0, #15
 800225c:	f000 f808 	bl	8002270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002260:	f7ff fd64 	bl	8001d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40022000 	.word	0x40022000

08002270 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002278:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <HAL_InitTick+0x54>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <HAL_InitTick+0x58>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002286:	fbb3 f3f1 	udiv	r3, r3, r1
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fbbb 	bl	8002a0a <HAL_SYSTICK_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e00e      	b.n	80022bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0f      	cmp	r3, #15
 80022a2:	d80a      	bhi.n	80022ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a4:	2200      	movs	r2, #0
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f000 fb83 	bl	80029b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b0:	4a06      	ldr	r2, [pc, #24]	@ (80022cc <HAL_InitTick+0x5c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000004 	.word	0x20000004
 80022c8:	2000000c 	.word	0x2000000c
 80022cc:	20000008 	.word	0x20000008

080022d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_IncTick+0x20>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_IncTick+0x24>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <HAL_IncTick+0x24>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	20000cd8 	.word	0x20000cd8

080022f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80022fc:	4b03      	ldr	r3, [pc, #12]	@ (800230c <HAL_GetTick+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000cd8 	.word	0x20000cd8

08002310 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff ffee 	bl	80022f8 <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffde 	bl	80022f8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2000000c 	.word	0x2000000c

08002358 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e0ed      	b.n	8002546 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fcfc 	bl	8001d74 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238c:	f7ff ffb4 	bl	80022f8 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002392:	e012      	b.n	80023ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002394:	f7ff ffb0 	bl	80022f8 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b0a      	cmp	r3, #10
 80023a0:	d90b      	bls.n	80023ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2205      	movs	r2, #5
 80023b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0c5      	b.n	8002546 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0e5      	beq.n	8002394 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0202 	bic.w	r2, r2, #2
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d8:	f7ff ff8e 	bl	80022f8 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023de:	e012      	b.n	8002406 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023e0:	f7ff ff8a 	bl	80022f8 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b0a      	cmp	r3, #10
 80023ec:	d90b      	bls.n	8002406 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2205      	movs	r2, #5
 80023fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e09f      	b.n	8002546 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e5      	bne.n	80023e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7e1b      	ldrb	r3, [r3, #24]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d108      	bne.n	800242e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e007      	b.n	800243e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7e5b      	ldrb	r3, [r3, #25]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d108      	bne.n	8002458 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e007      	b.n	8002468 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002466:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7e9b      	ldrb	r3, [r3, #26]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d108      	bne.n	8002482 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0220 	orr.w	r2, r2, #32
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e007      	b.n	8002492 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0220 	bic.w	r2, r2, #32
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7edb      	ldrb	r3, [r3, #27]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0210 	bic.w	r2, r2, #16
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e007      	b.n	80024bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0210 	orr.w	r2, r2, #16
 80024ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7f1b      	ldrb	r3, [r3, #28]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d108      	bne.n	80024d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0208 	orr.w	r2, r2, #8
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e007      	b.n	80024e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0208 	bic.w	r2, r2, #8
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7f5b      	ldrb	r3, [r3, #29]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0204 	orr.w	r2, r2, #4
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e007      	b.n	8002510 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0204 	bic.w	r2, r2, #4
 800250e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	ea42 0103 	orr.w	r1, r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	1e5a      	subs	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d12e      	bne.n	80025c0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800257a:	f7ff febd 	bl	80022f8 <HAL_GetTick>
 800257e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002580:	e012      	b.n	80025a8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002582:	f7ff feb9 	bl	80022f8 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b0a      	cmp	r3, #10
 800258e:	d90b      	bls.n	80025a8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2205      	movs	r2, #5
 80025a0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e012      	b.n	80025ce <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1e5      	bne.n	8002582 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	e006      	b.n	80025ce <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
  }
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b089      	sub	sp, #36	@ 0x24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025f4:	7ffb      	ldrb	r3, [r7, #31]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d003      	beq.n	8002602 <HAL_CAN_AddTxMessage+0x2c>
 80025fa:	7ffb      	ldrb	r3, [r7, #31]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	f040 80ad 	bne.w	800275c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002612:	2b00      	cmp	r3, #0
 8002614:	d105      	bne.n	8002622 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8095 	beq.w	800274c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	0e1b      	lsrs	r3, r3, #24
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800262c:	2201      	movs	r2, #1
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	409a      	lsls	r2, r3
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002648:	68f9      	ldr	r1, [r7, #12]
 800264a:	6809      	ldr	r1, [r1, #0]
 800264c:	431a      	orrs	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3318      	adds	r3, #24
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	440b      	add	r3, r1
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e00f      	b.n	800267a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002664:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800266a:	68f9      	ldr	r1, [r7, #12]
 800266c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800266e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3318      	adds	r3, #24
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	440b      	add	r3, r1
 8002678:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3318      	adds	r3, #24
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	440b      	add	r3, r1
 800268a:	3304      	adds	r3, #4
 800268c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	7d1b      	ldrb	r3, [r3, #20]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d111      	bne.n	80026ba <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3318      	adds	r3, #24
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	6811      	ldr	r1, [r2, #0]
 80026aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3318      	adds	r3, #24
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	440b      	add	r3, r1
 80026b6:	3304      	adds	r3, #4
 80026b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3307      	adds	r3, #7
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	061a      	lsls	r2, r3, #24
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3306      	adds	r3, #6
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	041b      	lsls	r3, r3, #16
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3305      	adds	r3, #5
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	4313      	orrs	r3, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	3204      	adds	r2, #4
 80026da:	7812      	ldrb	r2, [r2, #0]
 80026dc:	4610      	mov	r0, r2
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	6811      	ldr	r1, [r2, #0]
 80026e2:	ea43 0200 	orr.w	r2, r3, r0
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	440b      	add	r3, r1
 80026ec:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80026f0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3303      	adds	r3, #3
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	061a      	lsls	r2, r3, #24
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3302      	adds	r3, #2
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	041b      	lsls	r3, r3, #16
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3301      	adds	r3, #1
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	4313      	orrs	r3, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	7812      	ldrb	r2, [r2, #0]
 8002712:	4610      	mov	r0, r2
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	6811      	ldr	r1, [r2, #0]
 8002718:	ea43 0200 	orr.w	r2, r3, r0
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	440b      	add	r3, r1
 8002722:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002726:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3318      	adds	r3, #24
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	4413      	add	r3, r2
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	6811      	ldr	r1, [r2, #0]
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3318      	adds	r3, #24
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	440b      	add	r3, r1
 8002746:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e00e      	b.n	800276a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e006      	b.n	800276a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3724      	adds	r7, #36	@ 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002776:	b480      	push	{r7}
 8002778:	b085      	sub	sp, #20
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002786:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d002      	beq.n	8002794 <HAL_CAN_ActivateNotification+0x1e>
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d109      	bne.n	80027a8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6959      	ldr	r1, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e006      	b.n	80027b6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
  }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <__NVIC_SetPriorityGrouping>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027e0:	4013      	ands	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f6:	4a04      	ldr	r2, [pc, #16]	@ (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	60d3      	str	r3, [r2, #12]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_GetPriorityGrouping>:
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002810:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <__NVIC_GetPriorityGrouping+0x18>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 0307 	and.w	r3, r3, #7
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_EnableIRQ>:
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	db0b      	blt.n	8002852 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4907      	ldr	r1, [pc, #28]	@ (8002860 <__NVIC_EnableIRQ+0x38>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2001      	movs	r0, #1
 800284a:	fa00 f202 	lsl.w	r2, r0, r2
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000e100 	.word	0xe000e100

08002864 <__NVIC_SetPendingIRQ>:
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	2b00      	cmp	r3, #0
 8002874:	db0c      	blt.n	8002890 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	4907      	ldr	r1, [pc, #28]	@ (800289c <__NVIC_SetPendingIRQ+0x38>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	2001      	movs	r0, #1
 8002886:	fa00 f202 	lsl.w	r2, r0, r2
 800288a:	3340      	adds	r3, #64	@ 0x40
 800288c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000e100 	.word	0xe000e100

080028a0 <__NVIC_SetPriority>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	6039      	str	r1, [r7, #0]
 80028aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	db0a      	blt.n	80028ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	490c      	ldr	r1, [pc, #48]	@ (80028ec <__NVIC_SetPriority+0x4c>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	0112      	lsls	r2, r2, #4
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	440b      	add	r3, r1
 80028c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80028c8:	e00a      	b.n	80028e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4908      	ldr	r1, [pc, #32]	@ (80028f0 <__NVIC_SetPriority+0x50>)
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	3b04      	subs	r3, #4
 80028d8:	0112      	lsls	r2, r2, #4
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	440b      	add	r3, r1
 80028de:	761a      	strb	r2, [r3, #24]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000e100 	.word	0xe000e100
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <NVIC_EncodePriority>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	@ 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f1c3 0307 	rsb	r3, r3, #7
 800290e:	2b04      	cmp	r3, #4
 8002910:	bf28      	it	cs
 8002912:	2304      	movcs	r3, #4
 8002914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3304      	adds	r3, #4
 800291a:	2b06      	cmp	r3, #6
 800291c:	d902      	bls.n	8002924 <NVIC_EncodePriority+0x30>
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3b03      	subs	r3, #3
 8002922:	e000      	b.n	8002926 <NVIC_EncodePriority+0x32>
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	f04f 32ff 	mov.w	r2, #4294967295
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	401a      	ands	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800293c:	f04f 31ff 	mov.w	r1, #4294967295
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43d9      	mvns	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	4313      	orrs	r3, r2
}
 800294e:	4618      	mov	r0, r3
 8002950:	3724      	adds	r7, #36	@ 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <SysTick_Config>:
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800296c:	d301      	bcc.n	8002972 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800296e:	2301      	movs	r3, #1
 8002970:	e00f      	b.n	8002992 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <SysTick_Config+0x40>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297a:	210f      	movs	r1, #15
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f7ff ff8e 	bl	80028a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <SysTick_Config+0x40>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298a:	4b04      	ldr	r3, [pc, #16]	@ (800299c <SysTick_Config+0x40>)
 800298c:	2207      	movs	r2, #7
 800298e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	e000e010 	.word	0xe000e010

080029a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff0b 	bl	80027c4 <__NVIC_SetPriorityGrouping>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c8:	f7ff ff20 	bl	800280c <__NVIC_GetPriorityGrouping>
 80029cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f7ff ff8e 	bl	80028f4 <NVIC_EncodePriority>
 80029d8:	4602      	mov	r2, r0
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff5d 	bl	80028a0 <__NVIC_SetPriority>
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff13 	bl	8002828 <__NVIC_EnableIRQ>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ffa2 	bl	800295c <SysTick_Config>
 8002a18:	4603      	mov	r3, r0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	71fb      	strb	r3, [r7, #7]
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff17 	bl	8002864 <__NVIC_SetPendingIRQ>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e02e      	b.n	8002aae <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d008      	beq.n	8002a6c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e020      	b.n	8002aae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 020e 	bic.w	r2, r2, #14
 8002a7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a94:	2101      	movs	r1, #1
 8002a96:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d005      	beq.n	8002adc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
 8002ada:	e027      	b.n	8002b2c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 020e 	bic.w	r2, r2, #14
 8002aea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b04:	2101      	movs	r1, #1
 8002b06:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
    }
  }
  return status;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b46:	e154      	b.n	8002df2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	4013      	ands	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8146 	beq.w	8002dec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d005      	beq.n	8002b78 <HAL_GPIO_Init+0x40>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d130      	bne.n	8002bda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bae:	2201      	movs	r2, #1
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	f003 0201 	and.w	r2, r3, #1
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d017      	beq.n	8002c16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d123      	bne.n	8002c6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	08da      	lsrs	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3208      	adds	r2, #8
 8002c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	220f      	movs	r2, #15
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	08da      	lsrs	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3208      	adds	r2, #8
 8002c64:	6939      	ldr	r1, [r7, #16]
 8002c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	2203      	movs	r2, #3
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0203 	and.w	r2, r3, #3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 80a0 	beq.w	8002dec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cac:	4b58      	ldr	r3, [pc, #352]	@ (8002e10 <HAL_GPIO_Init+0x2d8>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	4a57      	ldr	r2, [pc, #348]	@ (8002e10 <HAL_GPIO_Init+0x2d8>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6193      	str	r3, [r2, #24]
 8002cb8:	4b55      	ldr	r3, [pc, #340]	@ (8002e10 <HAL_GPIO_Init+0x2d8>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cc4:	4a53      	ldr	r2, [pc, #332]	@ (8002e14 <HAL_GPIO_Init+0x2dc>)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	089b      	lsrs	r3, r3, #2
 8002cca:	3302      	adds	r3, #2
 8002ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	220f      	movs	r2, #15
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cee:	d019      	beq.n	8002d24 <HAL_GPIO_Init+0x1ec>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a49      	ldr	r2, [pc, #292]	@ (8002e18 <HAL_GPIO_Init+0x2e0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d013      	beq.n	8002d20 <HAL_GPIO_Init+0x1e8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a48      	ldr	r2, [pc, #288]	@ (8002e1c <HAL_GPIO_Init+0x2e4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00d      	beq.n	8002d1c <HAL_GPIO_Init+0x1e4>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a47      	ldr	r2, [pc, #284]	@ (8002e20 <HAL_GPIO_Init+0x2e8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d007      	beq.n	8002d18 <HAL_GPIO_Init+0x1e0>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a46      	ldr	r2, [pc, #280]	@ (8002e24 <HAL_GPIO_Init+0x2ec>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d101      	bne.n	8002d14 <HAL_GPIO_Init+0x1dc>
 8002d10:	2304      	movs	r3, #4
 8002d12:	e008      	b.n	8002d26 <HAL_GPIO_Init+0x1ee>
 8002d14:	2305      	movs	r3, #5
 8002d16:	e006      	b.n	8002d26 <HAL_GPIO_Init+0x1ee>
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e004      	b.n	8002d26 <HAL_GPIO_Init+0x1ee>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e002      	b.n	8002d26 <HAL_GPIO_Init+0x1ee>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <HAL_GPIO_Init+0x1ee>
 8002d24:	2300      	movs	r3, #0
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	f002 0203 	and.w	r2, r2, #3
 8002d2c:	0092      	lsls	r2, r2, #2
 8002d2e:	4093      	lsls	r3, r2
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d36:	4937      	ldr	r1, [pc, #220]	@ (8002e14 <HAL_GPIO_Init+0x2dc>)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d44:	4b38      	ldr	r3, [pc, #224]	@ (8002e28 <HAL_GPIO_Init+0x2f0>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d68:	4a2f      	ldr	r2, [pc, #188]	@ (8002e28 <HAL_GPIO_Init+0x2f0>)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e28 <HAL_GPIO_Init+0x2f0>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d92:	4a25      	ldr	r2, [pc, #148]	@ (8002e28 <HAL_GPIO_Init+0x2f0>)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d98:	4b23      	ldr	r3, [pc, #140]	@ (8002e28 <HAL_GPIO_Init+0x2f0>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8002e28 <HAL_GPIO_Init+0x2f0>)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc2:	4b19      	ldr	r3, [pc, #100]	@ (8002e28 <HAL_GPIO_Init+0x2f0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002de6:	4a10      	ldr	r2, [pc, #64]	@ (8002e28 <HAL_GPIO_Init+0x2f0>)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	3301      	adds	r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f47f aea3 	bne.w	8002b48 <HAL_GPIO_Init+0x10>
  }
}
 8002e02:	bf00      	nop
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40010000 	.word	0x40010000
 8002e18:	48000400 	.word	0x48000400
 8002e1c:	48000800 	.word	0x48000800
 8002e20:	48000c00 	.word	0x48000c00
 8002e24:	48001000 	.word	0x48001000
 8002e28:	40010400 	.word	0x40010400

08002e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e3c:	787b      	ldrb	r3, [r7, #1]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e48:	e002      	b.n	8002e50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e08d      	b.n	8002f8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fe ffba 	bl	8001dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2224      	movs	r2, #36	@ 0x24
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002eac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ebc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	e006      	b.n	8002ee4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ee2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d108      	bne.n	8002efe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	e007      	b.n	8002f0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69d9      	ldr	r1, [r3, #28]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1a      	ldr	r2, [r3, #32]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	817b      	strh	r3, [r7, #10]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	813b      	strh	r3, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	f040 80f9 	bne.w	80031ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_I2C_Mem_Write+0x34>
 8002fc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0ed      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_Mem_Write+0x4e>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0e6      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fea:	f7ff f985 	bl	80022f8 <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2319      	movs	r3, #25
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fbaf 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0d1      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2221      	movs	r2, #33	@ 0x21
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2240      	movs	r2, #64	@ 0x40
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a3a      	ldr	r2, [r7, #32]
 8003026:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800302c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003034:	88f8      	ldrh	r0, [r7, #6]
 8003036:	893a      	ldrh	r2, [r7, #8]
 8003038:	8979      	ldrh	r1, [r7, #10]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	4603      	mov	r3, r0
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fabf 	bl	80035c8 <I2C_RequestMemoryWrite>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0a9      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2bff      	cmp	r3, #255	@ 0xff
 8003064:	d90e      	bls.n	8003084 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	22ff      	movs	r2, #255	@ 0xff
 800306a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003070:	b2da      	uxtb	r2, r3
 8003072:	8979      	ldrh	r1, [r7, #10]
 8003074:	2300      	movs	r3, #0
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fd33 	bl	8003ae8 <I2C_TransferConfig>
 8003082:	e00f      	b.n	80030a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003092:	b2da      	uxtb	r2, r3
 8003094:	8979      	ldrh	r1, [r7, #10]
 8003096:	2300      	movs	r3, #0
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fd22 	bl	8003ae8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 fbb2 	bl	8003812 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e07b      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d034      	beq.n	800315c <HAL_I2C_Mem_Write+0x1c8>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d130      	bne.n	800315c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003100:	2200      	movs	r2, #0
 8003102:	2180      	movs	r1, #128	@ 0x80
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fb2b 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e04d      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	2bff      	cmp	r3, #255	@ 0xff
 800311c:	d90e      	bls.n	800313c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	22ff      	movs	r2, #255	@ 0xff
 8003122:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003128:	b2da      	uxtb	r2, r3
 800312a:	8979      	ldrh	r1, [r7, #10]
 800312c:	2300      	movs	r3, #0
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fcd7 	bl	8003ae8 <I2C_TransferConfig>
 800313a:	e00f      	b.n	800315c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314a:	b2da      	uxtb	r2, r3
 800314c:	8979      	ldrh	r1, [r7, #10]
 800314e:	2300      	movs	r3, #0
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fcc6 	bl	8003ae8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d19e      	bne.n	80030a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fb98 	bl	80038a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e01a      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2220      	movs	r2, #32
 8003180:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <HAL_I2C_Mem_Write+0x224>)
 800318e:	400b      	ands	r3, r1
 8003190:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
  }
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	fe00e800 	.word	0xfe00e800

080031bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	4608      	mov	r0, r1
 80031c6:	4611      	mov	r1, r2
 80031c8:	461a      	mov	r2, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	817b      	strh	r3, [r7, #10]
 80031ce:	460b      	mov	r3, r1
 80031d0:	813b      	strh	r3, [r7, #8]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b20      	cmp	r3, #32
 80031e0:	f040 80fd 	bne.w	80033de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_I2C_Mem_Read+0x34>
 80031ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0f1      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_I2C_Mem_Read+0x4e>
 8003206:	2302      	movs	r3, #2
 8003208:	e0ea      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003212:	f7ff f871 	bl	80022f8 <HAL_GetTick>
 8003216:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2319      	movs	r3, #25
 800321e:	2201      	movs	r2, #1
 8003220:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fa9b 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0d5      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2222      	movs	r2, #34	@ 0x22
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2240      	movs	r2, #64	@ 0x40
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a3a      	ldr	r2, [r7, #32]
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003254:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800325c:	88f8      	ldrh	r0, [r7, #6]
 800325e:	893a      	ldrh	r2, [r7, #8]
 8003260:	8979      	ldrh	r1, [r7, #10]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	4603      	mov	r3, r0
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f9ff 	bl	8003670 <I2C_RequestMemoryRead>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0ad      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2bff      	cmp	r3, #255	@ 0xff
 800328c:	d90e      	bls.n	80032ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003298:	b2da      	uxtb	r2, r3
 800329a:	8979      	ldrh	r1, [r7, #10]
 800329c:	4b52      	ldr	r3, [pc, #328]	@ (80033e8 <HAL_I2C_Mem_Read+0x22c>)
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fc1f 	bl	8003ae8 <I2C_TransferConfig>
 80032aa:	e00f      	b.n	80032cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	8979      	ldrh	r1, [r7, #10]
 80032be:	4b4a      	ldr	r3, [pc, #296]	@ (80033e8 <HAL_I2C_Mem_Read+0x22c>)
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fc0e 	bl	8003ae8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d2:	2200      	movs	r2, #0
 80032d4:	2104      	movs	r1, #4
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fa42 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e07c      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d034      	beq.n	800338c <HAL_I2C_Mem_Read+0x1d0>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003326:	2b00      	cmp	r3, #0
 8003328:	d130      	bne.n	800338c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003330:	2200      	movs	r2, #0
 8003332:	2180      	movs	r1, #128	@ 0x80
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 fa13 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e04d      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	2bff      	cmp	r3, #255	@ 0xff
 800334c:	d90e      	bls.n	800336c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003358:	b2da      	uxtb	r2, r3
 800335a:	8979      	ldrh	r1, [r7, #10]
 800335c:	2300      	movs	r3, #0
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fbbf 	bl	8003ae8 <I2C_TransferConfig>
 800336a:	e00f      	b.n	800338c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337a:	b2da      	uxtb	r2, r3
 800337c:	8979      	ldrh	r1, [r7, #10]
 800337e:	2300      	movs	r3, #0
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fbae 	bl	8003ae8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d19a      	bne.n	80032cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 fa80 	bl	80038a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e01a      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2220      	movs	r2, #32
 80033b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <HAL_I2C_Mem_Read+0x230>)
 80033be:	400b      	ands	r3, r1
 80033c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	80002400 	.word	0x80002400
 80033ec:	fe00e800 	.word	0xfe00e800

080033f0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	@ 0x28
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	460b      	mov	r3, r1
 80033fe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b20      	cmp	r3, #32
 800340e:	f040 80d6 	bne.w	80035be <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800341c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003420:	d101      	bne.n	8003426 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003422:	2302      	movs	r3, #2
 8003424:	e0cc      	b.n	80035c0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_I2C_IsDeviceReady+0x44>
 8003430:	2302      	movs	r3, #2
 8003432:	e0c5      	b.n	80035c0 <HAL_I2C_IsDeviceReady+0x1d0>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2224      	movs	r2, #36	@ 0x24
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d107      	bne.n	8003462 <HAL_I2C_IsDeviceReady+0x72>
 8003452:	897b      	ldrh	r3, [r7, #10]
 8003454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003458:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800345c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003460:	e006      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x80>
 8003462:	897b      	ldrh	r3, [r7, #10]
 8003464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003468:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800346c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003476:	f7fe ff3f 	bl	80022f8 <HAL_GetTick>
 800347a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b20      	cmp	r3, #32
 8003488:	bf0c      	ite	eq
 800348a:	2301      	moveq	r3, #1
 800348c:	2300      	movne	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b10      	cmp	r3, #16
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80034a8:	e034      	b.n	8003514 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b0:	d01a      	beq.n	80034e8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034b2:	f7fe ff21 	bl	80022f8 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d302      	bcc.n	80034c8 <HAL_I2C_IsDeviceReady+0xd8>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10f      	bne.n	80034e8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e06b      	b.n	80035c0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	bf0c      	ite	eq
 80034f6:	2301      	moveq	r3, #1
 80034f8:	2300      	movne	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b10      	cmp	r3, #16
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003514:	7ffb      	ldrb	r3, [r7, #31]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <HAL_I2C_IsDeviceReady+0x130>
 800351a:	7fbb      	ldrb	r3, [r7, #30]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0c4      	beq.n	80034aa <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	2b10      	cmp	r3, #16
 800352c:	d01a      	beq.n	8003564 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2200      	movs	r2, #0
 8003536:	2120      	movs	r1, #32
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f911 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e03b      	b.n	80035c0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2220      	movs	r2, #32
 800354e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e02d      	b.n	80035c0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	2120      	movs	r1, #32
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f8f6 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e020      	b.n	80035c0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2210      	movs	r2, #16
 8003584:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2220      	movs	r2, #32
 800358c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	3301      	adds	r3, #1
 8003592:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	429a      	cmp	r2, r3
 800359a:	f63f af56 	bhi.w	800344a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
  }
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3720      	adds	r7, #32
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	4608      	mov	r0, r1
 80035d2:	4611      	mov	r1, r2
 80035d4:	461a      	mov	r2, r3
 80035d6:	4603      	mov	r3, r0
 80035d8:	817b      	strh	r3, [r7, #10]
 80035da:	460b      	mov	r3, r1
 80035dc:	813b      	strh	r3, [r7, #8]
 80035de:	4613      	mov	r3, r2
 80035e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	8979      	ldrh	r1, [r7, #10]
 80035e8:	4b20      	ldr	r3, [pc, #128]	@ (800366c <I2C_RequestMemoryWrite+0xa4>)
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 fa79 	bl	8003ae8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	69b9      	ldr	r1, [r7, #24]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f909 	bl	8003812 <I2C_WaitOnTXISFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e02c      	b.n	8003664 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d105      	bne.n	800361c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003610:	893b      	ldrh	r3, [r7, #8]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	629a      	str	r2, [r3, #40]	@ 0x28
 800361a:	e015      	b.n	8003648 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800361c:	893b      	ldrh	r3, [r7, #8]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	b29b      	uxth	r3, r3
 8003622:	b2da      	uxtb	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	69b9      	ldr	r1, [r7, #24]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f8ef 	bl	8003812 <I2C_WaitOnTXISFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e012      	b.n	8003664 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800363e:	893b      	ldrh	r3, [r7, #8]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2200      	movs	r2, #0
 8003650:	2180      	movs	r1, #128	@ 0x80
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f884 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	80002000 	.word	0x80002000

08003670 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af02      	add	r7, sp, #8
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	4608      	mov	r0, r1
 800367a:	4611      	mov	r1, r2
 800367c:	461a      	mov	r2, r3
 800367e:	4603      	mov	r3, r0
 8003680:	817b      	strh	r3, [r7, #10]
 8003682:	460b      	mov	r3, r1
 8003684:	813b      	strh	r3, [r7, #8]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	8979      	ldrh	r1, [r7, #10]
 8003690:	4b20      	ldr	r3, [pc, #128]	@ (8003714 <I2C_RequestMemoryRead+0xa4>)
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 fa26 	bl	8003ae8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	69b9      	ldr	r1, [r7, #24]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f8b6 	bl	8003812 <I2C_WaitOnTXISFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e02c      	b.n	800370a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d105      	bne.n	80036c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036b6:	893b      	ldrh	r3, [r7, #8]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	629a      	str	r2, [r3, #40]	@ 0x28
 80036c0:	e015      	b.n	80036ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036c2:	893b      	ldrh	r3, [r7, #8]
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	69b9      	ldr	r1, [r7, #24]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f89c 	bl	8003812 <I2C_WaitOnTXISFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e012      	b.n	800370a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036e4:	893b      	ldrh	r3, [r7, #8]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2140      	movs	r1, #64	@ 0x40
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f831 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	80002000 	.word	0x80002000

08003718 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d103      	bne.n	8003736 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2200      	movs	r2, #0
 8003734:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d007      	beq.n	8003754 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	619a      	str	r2, [r3, #24]
  }
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003770:	e03b      	b.n	80037ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	6839      	ldr	r1, [r7, #0]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f8d6 	bl	8003928 <I2C_IsErrorOccurred>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e041      	b.n	800380a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d02d      	beq.n	80037ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7fe fdb3 	bl	80022f8 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d122      	bne.n	80037ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4013      	ands	r3, r2
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d113      	bne.n	80037ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	f043 0220 	orr.w	r2, r3, #32
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e00f      	b.n	800380a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4013      	ands	r3, r2
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	429a      	cmp	r2, r3
 8003806:	d0b4      	beq.n	8003772 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800381e:	e033      	b.n	8003888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f87f 	bl	8003928 <I2C_IsErrorOccurred>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e031      	b.n	8003898 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383a:	d025      	beq.n	8003888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383c:	f7fe fd5c 	bl	80022f8 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	429a      	cmp	r2, r3
 800384a:	d302      	bcc.n	8003852 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d11a      	bne.n	8003888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b02      	cmp	r3, #2
 800385e:	d013      	beq.n	8003888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003864:	f043 0220 	orr.w	r2, r3, #32
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e007      	b.n	8003898 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d1c4      	bne.n	8003820 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ac:	e02f      	b.n	800390e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f838 	bl	8003928 <I2C_IsErrorOccurred>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e02d      	b.n	800391e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	f7fe fd19 	bl	80022f8 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d11a      	bne.n	800390e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d013      	beq.n	800390e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ea:	f043 0220 	orr.w	r2, r3, #32
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e007      	b.n	800391e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b20      	cmp	r3, #32
 800391a:	d1c8      	bne.n	80038ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	@ 0x28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d068      	beq.n	8003a26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2210      	movs	r2, #16
 800395a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800395c:	e049      	b.n	80039f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d045      	beq.n	80039f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003966:	f7fe fcc7 	bl	80022f8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <I2C_IsErrorOccurred+0x54>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d13a      	bne.n	80039f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003986:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800398e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800399a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800399e:	d121      	bne.n	80039e4 <I2C_IsErrorOccurred+0xbc>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039a6:	d01d      	beq.n	80039e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80039a8:	7cfb      	ldrb	r3, [r7, #19]
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d01a      	beq.n	80039e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039be:	f7fe fc9b 	bl	80022f8 <HAL_GetTick>
 80039c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039c4:	e00e      	b.n	80039e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039c6:	f7fe fc97 	bl	80022f8 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b19      	cmp	r3, #25
 80039d2:	d907      	bls.n	80039e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f043 0320 	orr.w	r3, r3, #32
 80039da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80039e2:	e006      	b.n	80039f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d1e9      	bne.n	80039c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d003      	beq.n	8003a08 <I2C_IsErrorOccurred+0xe0>
 8003a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0aa      	beq.n	800395e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d103      	bne.n	8003a18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2220      	movs	r2, #32
 8003a16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	f043 0304 	orr.w	r3, r3, #4
 8003a1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00b      	beq.n	8003a50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f043 0308 	orr.w	r3, r3, #8
 8003a60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00b      	beq.n	8003a94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01c      	beq.n	8003ad6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f7ff fe3b 	bl	8003718 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae4 <I2C_IsErrorOccurred+0x1bc>)
 8003aae:	400b      	ands	r3, r1
 8003ab0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3728      	adds	r7, #40	@ 0x28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	fe00e800 	.word	0xfe00e800

08003ae8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	817b      	strh	r3, [r7, #10]
 8003af6:	4613      	mov	r3, r2
 8003af8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b00:	7a7b      	ldrb	r3, [r7, #9]
 8003b02:	041b      	lsls	r3, r3, #16
 8003b04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	0d5b      	lsrs	r3, r3, #21
 8003b22:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003b26:	4b08      	ldr	r3, [pc, #32]	@ (8003b48 <I2C_TransferConfig+0x60>)
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	ea02 0103 	and.w	r1, r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	03ff63ff 	.word	0x03ff63ff

08003b4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d138      	bne.n	8003bd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e032      	b.n	8003bd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2224      	movs	r2, #36	@ 0x24
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0201 	bic.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6819      	ldr	r1, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b085      	sub	sp, #20
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d139      	bne.n	8003c6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e033      	b.n	8003c6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2224      	movs	r2, #36	@ 0x24
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	021b      	lsls	r3, r3, #8
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e000      	b.n	8003c6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
  }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c8c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f000 bff4 	b.w	8004c8a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 816d 	beq.w	8003f92 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003cb8:	4bb4      	ldr	r3, [pc, #720]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d00c      	beq.n	8003cde <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cc4:	4bb1      	ldr	r3, [pc, #708]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d157      	bne.n	8003d80 <HAL_RCC_OscConfig+0x104>
 8003cd0:	4bae      	ldr	r3, [pc, #696]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cdc:	d150      	bne.n	8003d80 <HAL_RCC_OscConfig+0x104>
 8003cde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ce2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cf2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cfe:	d802      	bhi.n	8003d06 <HAL_RCC_OscConfig+0x8a>
 8003d00:	4ba2      	ldr	r3, [pc, #648]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	e015      	b.n	8003d32 <HAL_RCC_OscConfig+0xb6>
 8003d06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d0a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003d1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d1e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003d22:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003d2e:	4b97      	ldr	r3, [pc, #604]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d36:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003d3a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003d3e:	fa92 f2a2 	rbit	r2, r2
 8003d42:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003d46:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003d4a:	fab2 f282 	clz	r2, r2
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	f042 0220 	orr.w	r2, r2, #32
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	f002 021f 	and.w	r2, r2, #31
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8114 	beq.w	8003f90 <HAL_RCC_OscConfig+0x314>
 8003d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f040 810b 	bne.w	8003f90 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f000 bf85 	b.w	8004c8a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d90:	d106      	bne.n	8003da0 <HAL_RCC_OscConfig+0x124>
 8003d92:	4b7e      	ldr	r3, [pc, #504]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a7d      	ldr	r2, [pc, #500]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e036      	b.n	8003e0e <HAL_RCC_OscConfig+0x192>
 8003da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10c      	bne.n	8003dca <HAL_RCC_OscConfig+0x14e>
 8003db0:	4b76      	ldr	r3, [pc, #472]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a75      	ldr	r2, [pc, #468]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b73      	ldr	r3, [pc, #460]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a72      	ldr	r2, [pc, #456]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	e021      	b.n	8003e0e <HAL_RCC_OscConfig+0x192>
 8003dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dda:	d10c      	bne.n	8003df6 <HAL_RCC_OscConfig+0x17a>
 8003ddc:	4b6b      	ldr	r3, [pc, #428]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a6a      	ldr	r2, [pc, #424]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003de2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	4b68      	ldr	r3, [pc, #416]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a67      	ldr	r2, [pc, #412]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003dee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	e00b      	b.n	8003e0e <HAL_RCC_OscConfig+0x192>
 8003df6:	4b65      	ldr	r3, [pc, #404]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a64      	ldr	r2, [pc, #400]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	4b62      	ldr	r3, [pc, #392]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a61      	ldr	r2, [pc, #388]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003e08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e0c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e0e:	4b5f      	ldr	r3, [pc, #380]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e12:	f023 020f 	bic.w	r2, r3, #15
 8003e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	495a      	ldr	r1, [pc, #360]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d054      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e38:	f7fe fa5e 	bl	80022f8 <HAL_GetTick>
 8003e3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e42:	f7fe fa59 	bl	80022f8 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	@ 0x64
 8003e50:	d902      	bls.n	8003e58 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	f000 bf19 	b.w	8004c8a <HAL_RCC_OscConfig+0x100e>
 8003e58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e5c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e60:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003e64:	fa93 f3a3 	rbit	r3, r3
 8003e68:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003e6c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e70:	fab3 f383 	clz	r3, r3
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e78:	d802      	bhi.n	8003e80 <HAL_RCC_OscConfig+0x204>
 8003e7a:	4b44      	ldr	r3, [pc, #272]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	e015      	b.n	8003eac <HAL_RCC_OscConfig+0x230>
 8003e80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e84:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003e8c:	fa93 f3a3 	rbit	r3, r3
 8003e90:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003e94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e98:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003e9c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003ea0:	fa93 f3a3 	rbit	r3, r3
 8003ea4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003ea8:	4b38      	ldr	r3, [pc, #224]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003eb0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003eb4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003eb8:	fa92 f2a2 	rbit	r2, r2
 8003ebc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003ec0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003ec4:	fab2 f282 	clz	r2, r2
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	f042 0220 	orr.w	r2, r2, #32
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	f002 021f 	and.w	r2, r2, #31
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0b0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1c6>
 8003ee0:	e057      	b.n	8003f92 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fe fa09 	bl	80022f8 <HAL_GetTick>
 8003ee6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eec:	f7fe fa04 	bl	80022f8 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b64      	cmp	r3, #100	@ 0x64
 8003efa:	d902      	bls.n	8003f02 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	f000 bec4 	b.w	8004c8a <HAL_RCC_OscConfig+0x100e>
 8003f02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f06:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003f0e:	fa93 f3a3 	rbit	r3, r3
 8003f12:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003f16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f22:	d802      	bhi.n	8003f2a <HAL_RCC_OscConfig+0x2ae>
 8003f24:	4b19      	ldr	r3, [pc, #100]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	e015      	b.n	8003f56 <HAL_RCC_OscConfig+0x2da>
 8003f2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f2e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003f3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f42:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003f46:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003f52:	4b0e      	ldr	r3, [pc, #56]	@ (8003f8c <HAL_RCC_OscConfig+0x310>)
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f5a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003f5e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003f62:	fa92 f2a2 	rbit	r2, r2
 8003f66:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003f6a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003f6e:	fab2 f282 	clz	r2, r2
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	f042 0220 	orr.w	r2, r2, #32
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	f002 021f 	and.w	r2, r2, #31
 8003f7e:	2101      	movs	r1, #1
 8003f80:	fa01 f202 	lsl.w	r2, r1, r2
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1b0      	bne.n	8003eec <HAL_RCC_OscConfig+0x270>
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_OscConfig+0x316>
 8003f8c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 816c 	beq.w	8004280 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fa8:	4bcc      	ldr	r3, [pc, #816]	@ (80042dc <HAL_RCC_OscConfig+0x660>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00b      	beq.n	8003fcc <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003fb4:	4bc9      	ldr	r3, [pc, #804]	@ (80042dc <HAL_RCC_OscConfig+0x660>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d16d      	bne.n	800409c <HAL_RCC_OscConfig+0x420>
 8003fc0:	4bc6      	ldr	r3, [pc, #792]	@ (80042dc <HAL_RCC_OscConfig+0x660>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d167      	bne.n	800409c <HAL_RCC_OscConfig+0x420>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003fde:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003fea:	d802      	bhi.n	8003ff2 <HAL_RCC_OscConfig+0x376>
 8003fec:	4bbb      	ldr	r3, [pc, #748]	@ (80042dc <HAL_RCC_OscConfig+0x660>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	e013      	b.n	800401a <HAL_RCC_OscConfig+0x39e>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004004:	2302      	movs	r3, #2
 8004006:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800400a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800400e:	fa93 f3a3 	rbit	r3, r3
 8004012:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004016:	4bb1      	ldr	r3, [pc, #708]	@ (80042dc <HAL_RCC_OscConfig+0x660>)
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	2202      	movs	r2, #2
 800401c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004020:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004024:	fa92 f2a2 	rbit	r2, r2
 8004028:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800402c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004030:	fab2 f282 	clz	r2, r2
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	f042 0220 	orr.w	r2, r2, #32
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	f002 021f 	and.w	r2, r2, #31
 8004040:	2101      	movs	r1, #1
 8004042:	fa01 f202 	lsl.w	r2, r1, r2
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCC_OscConfig+0x3e6>
 800404c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004050:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d002      	beq.n	8004062 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	f000 be14 	b.w	8004c8a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004062:	4b9e      	ldr	r3, [pc, #632]	@ (80042dc <HAL_RCC_OscConfig+0x660>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800406a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800406e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	21f8      	movs	r1, #248	@ 0xf8
 8004078:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004080:	fa91 f1a1 	rbit	r1, r1
 8004084:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004088:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800408c:	fab1 f181 	clz	r1, r1
 8004090:	b2c9      	uxtb	r1, r1
 8004092:	408b      	lsls	r3, r1
 8004094:	4991      	ldr	r1, [pc, #580]	@ (80042dc <HAL_RCC_OscConfig+0x660>)
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	e0f1      	b.n	8004280 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800409c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8083 	beq.w	80041b4 <HAL_RCC_OscConfig+0x538>
 80040ae:	2301      	movs	r3, #1
 80040b0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80040c0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c4:	fab3 f383 	clz	r3, r3
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040ce:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	461a      	mov	r2, r3
 80040d6:	2301      	movs	r3, #1
 80040d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040da:	f7fe f90d 	bl	80022f8 <HAL_GetTick>
 80040de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e4:	f7fe f908 	bl	80022f8 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d902      	bls.n	80040fa <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	f000 bdc8 	b.w	8004c8a <HAL_RCC_OscConfig+0x100e>
 80040fa:	2302      	movs	r3, #2
 80040fc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004104:	fa93 f3a3 	rbit	r3, r3
 8004108:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800410c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b3f      	cmp	r3, #63	@ 0x3f
 8004118:	d802      	bhi.n	8004120 <HAL_RCC_OscConfig+0x4a4>
 800411a:	4b70      	ldr	r3, [pc, #448]	@ (80042dc <HAL_RCC_OscConfig+0x660>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	e013      	b.n	8004148 <HAL_RCC_OscConfig+0x4cc>
 8004120:	2302      	movs	r3, #2
 8004122:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004132:	2302      	movs	r3, #2
 8004134:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004138:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800413c:	fa93 f3a3 	rbit	r3, r3
 8004140:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004144:	4b65      	ldr	r3, [pc, #404]	@ (80042dc <HAL_RCC_OscConfig+0x660>)
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	2202      	movs	r2, #2
 800414a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800414e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004152:	fa92 f2a2 	rbit	r2, r2
 8004156:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800415a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800415e:	fab2 f282 	clz	r2, r2
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	f042 0220 	orr.w	r2, r2, #32
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	f002 021f 	and.w	r2, r2, #31
 800416e:	2101      	movs	r1, #1
 8004170:	fa01 f202 	lsl.w	r2, r1, r2
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0b4      	beq.n	80040e4 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417a:	4b58      	ldr	r3, [pc, #352]	@ (80042dc <HAL_RCC_OscConfig+0x660>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004186:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	21f8      	movs	r1, #248	@ 0xf8
 8004190:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004194:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004198:	fa91 f1a1 	rbit	r1, r1
 800419c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80041a0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80041a4:	fab1 f181 	clz	r1, r1
 80041a8:	b2c9      	uxtb	r1, r1
 80041aa:	408b      	lsls	r3, r1
 80041ac:	494b      	ldr	r1, [pc, #300]	@ (80042dc <HAL_RCC_OscConfig+0x660>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
 80041b2:	e065      	b.n	8004280 <HAL_RCC_OscConfig+0x604>
 80041b4:	2301      	movs	r3, #1
 80041b6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80041c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	461a      	mov	r2, r3
 80041dc:	2300      	movs	r3, #0
 80041de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e0:	f7fe f88a 	bl	80022f8 <HAL_GetTick>
 80041e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e8:	e00a      	b.n	8004200 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ea:	f7fe f885 	bl	80022f8 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d902      	bls.n	8004200 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	f000 bd45 	b.w	8004c8a <HAL_RCC_OscConfig+0x100e>
 8004200:	2302      	movs	r3, #2
 8004202:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004212:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004216:	fab3 f383 	clz	r3, r3
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b3f      	cmp	r3, #63	@ 0x3f
 800421e:	d802      	bhi.n	8004226 <HAL_RCC_OscConfig+0x5aa>
 8004220:	4b2e      	ldr	r3, [pc, #184]	@ (80042dc <HAL_RCC_OscConfig+0x660>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	e013      	b.n	800424e <HAL_RCC_OscConfig+0x5d2>
 8004226:	2302      	movs	r3, #2
 8004228:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004230:	fa93 f3a3 	rbit	r3, r3
 8004234:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004238:	2302      	movs	r3, #2
 800423a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800423e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004242:	fa93 f3a3 	rbit	r3, r3
 8004246:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800424a:	4b24      	ldr	r3, [pc, #144]	@ (80042dc <HAL_RCC_OscConfig+0x660>)
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	2202      	movs	r2, #2
 8004250:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004254:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004258:	fa92 f2a2 	rbit	r2, r2
 800425c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004260:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004264:	fab2 f282 	clz	r2, r2
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	f042 0220 	orr.w	r2, r2, #32
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	f002 021f 	and.w	r2, r2, #31
 8004274:	2101      	movs	r1, #1
 8004276:	fa01 f202 	lsl.w	r2, r1, r2
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1b4      	bne.n	80041ea <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004284:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8115 	beq.w	80044c0 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d07e      	beq.n	80043a4 <HAL_RCC_OscConfig+0x728>
 80042a6:	2301      	movs	r3, #1
 80042a8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80042b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042bc:	fab3 f383 	clz	r3, r3
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <HAL_RCC_OscConfig+0x664>)
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	461a      	mov	r2, r3
 80042cc:	2301      	movs	r3, #1
 80042ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d0:	f7fe f812 	bl	80022f8 <HAL_GetTick>
 80042d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d8:	e00f      	b.n	80042fa <HAL_RCC_OscConfig+0x67e>
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000
 80042e0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042e4:	f7fe f808 	bl	80022f8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d902      	bls.n	80042fa <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	f000 bcc8 	b.w	8004c8a <HAL_RCC_OscConfig+0x100e>
 80042fa:	2302      	movs	r3, #2
 80042fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004304:	fa93 f3a3 	rbit	r3, r3
 8004308:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800430c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004310:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004314:	2202      	movs	r2, #2
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800431c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	fa93 f2a3 	rbit	r2, r3
 8004326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004338:	2202      	movs	r2, #2
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	fa93 f2a3 	rbit	r2, r3
 800434a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800434e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004352:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004354:	4bb0      	ldr	r3, [pc, #704]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 8004356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800435c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004360:	2102      	movs	r1, #2
 8004362:	6019      	str	r1, [r3, #0]
 8004364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004368:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	fa93 f1a3 	rbit	r1, r3
 8004372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004376:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800437a:	6019      	str	r1, [r3, #0]
  return result;
 800437c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004380:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	2101      	movs	r1, #1
 8004398:	fa01 f303 	lsl.w	r3, r1, r3
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0a0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x668>
 80043a2:	e08d      	b.n	80044c0 <HAL_RCC_OscConfig+0x844>
 80043a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80043ac:	2201      	movs	r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	fa93 f2a3 	rbit	r2, r3
 80043be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043c6:	601a      	str	r2, [r3, #0]
  return result;
 80043c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043cc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d2:	fab3 f383 	clz	r3, r3
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	4b90      	ldr	r3, [pc, #576]	@ (800461c <HAL_RCC_OscConfig+0x9a0>)
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	461a      	mov	r2, r3
 80043e2:	2300      	movs	r3, #0
 80043e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e6:	f7fd ff87 	bl	80022f8 <HAL_GetTick>
 80043ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f0:	f7fd ff82 	bl	80022f8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d902      	bls.n	8004406 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	f000 bc42 	b.w	8004c8a <HAL_RCC_OscConfig+0x100e>
 8004406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800440e:	2202      	movs	r2, #2
 8004410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004416:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	fa93 f2a3 	rbit	r2, r3
 8004420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004424:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800442e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004432:	2202      	movs	r2, #2
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	fa93 f2a3 	rbit	r2, r3
 8004444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004448:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004452:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004456:	2202      	movs	r2, #2
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800445e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	fa93 f2a3 	rbit	r2, r3
 8004468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004470:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004472:	4b69      	ldr	r3, [pc, #420]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 8004474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800447e:	2102      	movs	r1, #2
 8004480:	6019      	str	r1, [r3, #0]
 8004482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004486:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	fa93 f1a3 	rbit	r1, r3
 8004490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004494:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004498:	6019      	str	r1, [r3, #0]
  return result;
 800449a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800449e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	fab3 f383 	clz	r3, r3
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	2101      	movs	r1, #1
 80044b6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d197      	bne.n	80043f0 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 819e 	beq.w	8004812 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044dc:	4b4e      	ldr	r3, [pc, #312]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d116      	bne.n	8004516 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 80044ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	61d3      	str	r3, [r2, #28]
 80044f4:	4b48      	ldr	r3, [pc, #288]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80044fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004500:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800450e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004516:	4b42      	ldr	r3, [pc, #264]	@ (8004620 <HAL_RCC_OscConfig+0x9a4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d11a      	bne.n	8004558 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004522:	4b3f      	ldr	r3, [pc, #252]	@ (8004620 <HAL_RCC_OscConfig+0x9a4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a3e      	ldr	r2, [pc, #248]	@ (8004620 <HAL_RCC_OscConfig+0x9a4>)
 8004528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800452c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452e:	f7fd fee3 	bl	80022f8 <HAL_GetTick>
 8004532:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004536:	e009      	b.n	800454c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004538:	f7fd fede 	bl	80022f8 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b64      	cmp	r3, #100	@ 0x64
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e39e      	b.n	8004c8a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	4b34      	ldr	r3, [pc, #208]	@ (8004620 <HAL_RCC_OscConfig+0x9a4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ef      	beq.n	8004538 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800455c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x8fa>
 8004568:	4b2b      	ldr	r3, [pc, #172]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a2a      	ldr	r2, [pc, #168]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6213      	str	r3, [r2, #32]
 8004574:	e035      	b.n	80045e2 <HAL_RCC_OscConfig+0x966>
 8004576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800457a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x924>
 8004586:	4b24      	ldr	r3, [pc, #144]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	4a23      	ldr	r2, [pc, #140]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 800458c:	f023 0301 	bic.w	r3, r3, #1
 8004590:	6213      	str	r3, [r2, #32]
 8004592:	4b21      	ldr	r3, [pc, #132]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4a20      	ldr	r2, [pc, #128]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 8004598:	f023 0304 	bic.w	r3, r3, #4
 800459c:	6213      	str	r3, [r2, #32]
 800459e:	e020      	b.n	80045e2 <HAL_RCC_OscConfig+0x966>
 80045a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b05      	cmp	r3, #5
 80045ae:	d10c      	bne.n	80045ca <HAL_RCC_OscConfig+0x94e>
 80045b0:	4b19      	ldr	r3, [pc, #100]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	4a18      	ldr	r2, [pc, #96]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 80045b6:	f043 0304 	orr.w	r3, r3, #4
 80045ba:	6213      	str	r3, [r2, #32]
 80045bc:	4b16      	ldr	r3, [pc, #88]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4a15      	ldr	r2, [pc, #84]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6213      	str	r3, [r2, #32]
 80045c8:	e00b      	b.n	80045e2 <HAL_RCC_OscConfig+0x966>
 80045ca:	4b13      	ldr	r3, [pc, #76]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4a12      	ldr	r2, [pc, #72]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	6213      	str	r3, [r2, #32]
 80045d6:	4b10      	ldr	r3, [pc, #64]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	4a0f      	ldr	r2, [pc, #60]	@ (8004618 <HAL_RCC_OscConfig+0x99c>)
 80045dc:	f023 0304 	bic.w	r3, r3, #4
 80045e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8087 	beq.w	8004702 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f4:	f7fd fe80 	bl	80022f8 <HAL_GetTick>
 80045f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	e012      	b.n	8004624 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fd fe7b 	bl	80022f8 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d908      	bls.n	8004624 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e339      	b.n	8004c8a <HAL_RCC_OscConfig+0x100e>
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
 800461c:	10908120 	.word	0x10908120
 8004620:	40007000 	.word	0x40007000
 8004624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004628:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800462c:	2202      	movs	r2, #2
 800462e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004634:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	fa93 f2a3 	rbit	r2, r3
 800463e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004642:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800464c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004650:	2202      	movs	r2, #2
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004658:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	fa93 f2a3 	rbit	r2, r3
 8004662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004666:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800466a:	601a      	str	r2, [r3, #0]
  return result;
 800466c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004670:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004674:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d102      	bne.n	800468c <HAL_RCC_OscConfig+0xa10>
 8004686:	4b98      	ldr	r3, [pc, #608]	@ (80048e8 <HAL_RCC_OscConfig+0xc6c>)
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	e013      	b.n	80046b4 <HAL_RCC_OscConfig+0xa38>
 800468c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004690:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004694:	2202      	movs	r2, #2
 8004696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800469c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	fa93 f2a3 	rbit	r2, r3
 80046a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046aa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	4b8d      	ldr	r3, [pc, #564]	@ (80048e8 <HAL_RCC_OscConfig+0xc6c>)
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046b8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80046bc:	2102      	movs	r1, #2
 80046be:	6011      	str	r1, [r2, #0]
 80046c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046c4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	fa92 f1a2 	rbit	r1, r2
 80046ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046d2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80046d6:	6011      	str	r1, [r2, #0]
  return result;
 80046d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046dc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	fab2 f282 	clz	r2, r2
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	f002 021f 	and.w	r2, r2, #31
 80046f2:	2101      	movs	r1, #1
 80046f4:	fa01 f202 	lsl.w	r2, r1, r2
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f43f af7f 	beq.w	80045fe <HAL_RCC_OscConfig+0x982>
 8004700:	e07d      	b.n	80047fe <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004702:	f7fd fdf9 	bl	80022f8 <HAL_GetTick>
 8004706:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470a:	e00b      	b.n	8004724 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800470c:	f7fd fdf4 	bl	80022f8 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e2b2      	b.n	8004c8a <HAL_RCC_OscConfig+0x100e>
 8004724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004728:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800472c:	2202      	movs	r2, #2
 800472e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004734:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	fa93 f2a3 	rbit	r2, r3
 800473e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004742:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004750:	2202      	movs	r2, #2
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004758:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	fa93 f2a3 	rbit	r2, r3
 8004762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004766:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800476a:	601a      	str	r2, [r3, #0]
  return result;
 800476c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004770:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004774:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004776:	fab3 f383 	clz	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <HAL_RCC_OscConfig+0xb10>
 8004786:	4b58      	ldr	r3, [pc, #352]	@ (80048e8 <HAL_RCC_OscConfig+0xc6c>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	e013      	b.n	80047b4 <HAL_RCC_OscConfig+0xb38>
 800478c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004790:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004794:	2202      	movs	r2, #2
 8004796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800479c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	fa93 f2a3 	rbit	r2, r3
 80047a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047aa:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	4b4d      	ldr	r3, [pc, #308]	@ (80048e8 <HAL_RCC_OscConfig+0xc6c>)
 80047b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047b8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80047bc:	2102      	movs	r1, #2
 80047be:	6011      	str	r1, [r2, #0]
 80047c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047c4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	fa92 f1a2 	rbit	r1, r2
 80047ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047d2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80047d6:	6011      	str	r1, [r2, #0]
  return result;
 80047d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047dc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	fab2 f282 	clz	r2, r2
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	f002 021f 	and.w	r2, r2, #31
 80047f2:	2101      	movs	r1, #1
 80047f4:	fa01 f202 	lsl.w	r2, r1, r2
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d186      	bne.n	800470c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047fe:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004802:	2b01      	cmp	r3, #1
 8004804:	d105      	bne.n	8004812 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004806:	4b38      	ldr	r3, [pc, #224]	@ (80048e8 <HAL_RCC_OscConfig+0xc6c>)
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	4a37      	ldr	r2, [pc, #220]	@ (80048e8 <HAL_RCC_OscConfig+0xc6c>)
 800480c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004810:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004816:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 8232 	beq.w	8004c88 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004824:	4b30      	ldr	r3, [pc, #192]	@ (80048e8 <HAL_RCC_OscConfig+0xc6c>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 030c 	and.w	r3, r3, #12
 800482c:	2b08      	cmp	r3, #8
 800482e:	f000 8201 	beq.w	8004c34 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004836:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	2b02      	cmp	r3, #2
 8004840:	f040 8157 	bne.w	8004af2 <HAL_RCC_OscConfig+0xe76>
 8004844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004848:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800484c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004856:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	fa93 f2a3 	rbit	r2, r3
 8004860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004864:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004868:	601a      	str	r2, [r3, #0]
  return result;
 800486a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800486e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004872:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004874:	fab3 f383 	clz	r3, r3
 8004878:	b2db      	uxtb	r3, r3
 800487a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800487e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	461a      	mov	r2, r3
 8004886:	2300      	movs	r3, #0
 8004888:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488a:	f7fd fd35 	bl	80022f8 <HAL_GetTick>
 800488e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004892:	e009      	b.n	80048a8 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004894:	f7fd fd30 	bl	80022f8 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e1f0      	b.n	8004c8a <HAL_RCC_OscConfig+0x100e>
 80048a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80048b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	fa93 f2a3 	rbit	r2, r3
 80048c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80048cc:	601a      	str	r2, [r3, #0]
  return result;
 80048ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80048d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d8:	fab3 f383 	clz	r3, r3
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b3f      	cmp	r3, #63	@ 0x3f
 80048e0:	d804      	bhi.n	80048ec <HAL_RCC_OscConfig+0xc70>
 80048e2:	4b01      	ldr	r3, [pc, #4]	@ (80048e8 <HAL_RCC_OscConfig+0xc6c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	e029      	b.n	800493c <HAL_RCC_OscConfig+0xcc0>
 80048e8:	40021000 	.word	0x40021000
 80048ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80048f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048fe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	fa93 f2a3 	rbit	r2, r3
 8004908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800490c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004916:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800491a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004924:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	fa93 f2a3 	rbit	r2, r3
 800492e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004932:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	4bc3      	ldr	r3, [pc, #780]	@ (8004c48 <HAL_RCC_OscConfig+0xfcc>)
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004940:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004944:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004948:	6011      	str	r1, [r2, #0]
 800494a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800494e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	fa92 f1a2 	rbit	r1, r2
 8004958:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800495c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004960:	6011      	str	r1, [r2, #0]
  return result;
 8004962:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004966:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	fab2 f282 	clz	r2, r2
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	f042 0220 	orr.w	r2, r2, #32
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	f002 021f 	and.w	r2, r2, #31
 800497c:	2101      	movs	r1, #1
 800497e:	fa01 f202 	lsl.w	r2, r1, r2
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d185      	bne.n	8004894 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004988:	4baf      	ldr	r3, [pc, #700]	@ (8004c48 <HAL_RCC_OscConfig+0xfcc>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004994:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800499c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	430b      	orrs	r3, r1
 80049aa:	49a7      	ldr	r1, [pc, #668]	@ (8004c48 <HAL_RCC_OscConfig+0xfcc>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]
 80049b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80049b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	fa93 f2a3 	rbit	r2, r3
 80049cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80049d4:	601a      	str	r2, [r3, #0]
  return result;
 80049d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049da:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80049de:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049e0:	fab3 f383 	clz	r3, r3
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80049ea:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	461a      	mov	r2, r3
 80049f2:	2301      	movs	r3, #1
 80049f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f6:	f7fd fc7f 	bl	80022f8 <HAL_GetTick>
 80049fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049fe:	e009      	b.n	8004a14 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fd fc7a 	bl	80022f8 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e13a      	b.n	8004c8a <HAL_RCC_OscConfig+0x100e>
 8004a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a18:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004a1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a26:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	fa93 f2a3 	rbit	r2, r3
 8004a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a34:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a38:	601a      	str	r2, [r3, #0]
  return result;
 8004a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a3e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a44:	fab3 f383 	clz	r3, r3
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a4c:	d802      	bhi.n	8004a54 <HAL_RCC_OscConfig+0xdd8>
 8004a4e:	4b7e      	ldr	r3, [pc, #504]	@ (8004c48 <HAL_RCC_OscConfig+0xfcc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	e027      	b.n	8004aa4 <HAL_RCC_OscConfig+0xe28>
 8004a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a58:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004a5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a66:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	fa93 f2a3 	rbit	r2, r3
 8004a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a74:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a7e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004a82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a8c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	fa93 f2a3 	rbit	r2, r3
 8004a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a9a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	4b69      	ldr	r3, [pc, #420]	@ (8004c48 <HAL_RCC_OscConfig+0xfcc>)
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004aa8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004aac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004ab0:	6011      	str	r1, [r2, #0]
 8004ab2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ab6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	fa92 f1a2 	rbit	r1, r2
 8004ac0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ac4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004ac8:	6011      	str	r1, [r2, #0]
  return result;
 8004aca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ace:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	fab2 f282 	clz	r2, r2
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	f042 0220 	orr.w	r2, r2, #32
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	f002 021f 	and.w	r2, r2, #31
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d087      	beq.n	8004a00 <HAL_RCC_OscConfig+0xd84>
 8004af0:	e0ca      	b.n	8004c88 <HAL_RCC_OscConfig+0x100c>
 8004af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004afa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b04:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	fa93 f2a3 	rbit	r2, r3
 8004b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b12:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004b16:	601a      	str	r2, [r3, #0]
  return result;
 8004b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b1c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004b20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b22:	fab3 f383 	clz	r3, r3
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	461a      	mov	r2, r3
 8004b34:	2300      	movs	r3, #0
 8004b36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b38:	f7fd fbde 	bl	80022f8 <HAL_GetTick>
 8004b3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b40:	e009      	b.n	8004b56 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b42:	f7fd fbd9 	bl	80022f8 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e099      	b.n	8004c8a <HAL_RCC_OscConfig+0x100e>
 8004b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b5a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004b5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b68:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	fa93 f2a3 	rbit	r2, r3
 8004b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b76:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004b7a:	601a      	str	r2, [r3, #0]
  return result;
 8004b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b80:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004b84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b86:	fab3 f383 	clz	r3, r3
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004b8e:	d802      	bhi.n	8004b96 <HAL_RCC_OscConfig+0xf1a>
 8004b90:	4b2d      	ldr	r3, [pc, #180]	@ (8004c48 <HAL_RCC_OscConfig+0xfcc>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	e027      	b.n	8004be6 <HAL_RCC_OscConfig+0xf6a>
 8004b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b9a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004b9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	fa93 f2a3 	rbit	r2, r3
 8004bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004bc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	fa93 f2a3 	rbit	r2, r3
 8004bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bdc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	4b19      	ldr	r3, [pc, #100]	@ (8004c48 <HAL_RCC_OscConfig+0xfcc>)
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bea:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004bee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004bf2:	6011      	str	r1, [r2, #0]
 8004bf4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bf8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	fa92 f1a2 	rbit	r1, r2
 8004c02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c06:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004c0a:	6011      	str	r1, [r2, #0]
  return result;
 8004c0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c10:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	fab2 f282 	clz	r2, r2
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	f042 0220 	orr.w	r2, r2, #32
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	f002 021f 	and.w	r2, r2, #31
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d187      	bne.n	8004b42 <HAL_RCC_OscConfig+0xec6>
 8004c32:	e029      	b.n	8004c88 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d103      	bne.n	8004c4c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e020      	b.n	8004c8a <HAL_RCC_OscConfig+0x100e>
 8004c48:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c4c:	4b11      	ldr	r3, [pc, #68]	@ (8004c94 <HAL_RCC_OscConfig+0x1018>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c54:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004c58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d10b      	bne.n	8004c84 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c6c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004c70:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40021000 	.word	0x40021000

08004c98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b09e      	sub	sp, #120	@ 0x78
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e154      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b89      	ldr	r3, [pc, #548]	@ (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d910      	bls.n	8004ce0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b86      	ldr	r3, [pc, #536]	@ (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 0207 	bic.w	r2, r3, #7
 8004cc6:	4984      	ldr	r1, [pc, #528]	@ (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	4b82      	ldr	r3, [pc, #520]	@ (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e13c      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cec:	4b7b      	ldr	r3, [pc, #492]	@ (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	4978      	ldr	r1, [pc, #480]	@ (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80cd 	beq.w	8004ea6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d137      	bne.n	8004d84 <HAL_RCC_ClockConfig+0xec>
 8004d14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d18:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d1c:	fa93 f3a3 	rbit	r3, r3
 8004d20:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004d22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d24:	fab3 f383 	clz	r3, r3
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d2c:	d802      	bhi.n	8004d34 <HAL_RCC_ClockConfig+0x9c>
 8004d2e:	4b6b      	ldr	r3, [pc, #428]	@ (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	e00f      	b.n	8004d54 <HAL_RCC_ClockConfig+0xbc>
 8004d34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d3c:	fa93 f3a3 	rbit	r3, r3
 8004d40:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d46:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d4a:	fa93 f3a3 	rbit	r3, r3
 8004d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d50:	4b62      	ldr	r3, [pc, #392]	@ (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004d58:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d5c:	fa92 f2a2 	rbit	r2, r2
 8004d60:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004d62:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d64:	fab2 f282 	clz	r2, r2
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	f042 0220 	orr.w	r2, r2, #32
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	f002 021f 	and.w	r2, r2, #31
 8004d74:	2101      	movs	r1, #1
 8004d76:	fa01 f202 	lsl.w	r2, r1, r2
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d171      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0ea      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d137      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x164>
 8004d8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d90:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d94:	fa93 f3a3 	rbit	r3, r3
 8004d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9c:	fab3 f383 	clz	r3, r3
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b3f      	cmp	r3, #63	@ 0x3f
 8004da4:	d802      	bhi.n	8004dac <HAL_RCC_ClockConfig+0x114>
 8004da6:	4b4d      	ldr	r3, [pc, #308]	@ (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	e00f      	b.n	8004dcc <HAL_RCC_ClockConfig+0x134>
 8004dac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004db0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004db4:	fa93 f3a3 	rbit	r3, r3
 8004db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dc8:	4b44      	ldr	r3, [pc, #272]	@ (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dd0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004dd2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dd4:	fa92 f2a2 	rbit	r2, r2
 8004dd8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004dda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ddc:	fab2 f282 	clz	r2, r2
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	f042 0220 	orr.w	r2, r2, #32
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	f002 021f 	and.w	r2, r2, #31
 8004dec:	2101      	movs	r1, #1
 8004dee:	fa01 f202 	lsl.w	r2, r1, r2
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d135      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0ae      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2c2>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e02:	fa93 f3a3 	rbit	r3, r3
 8004e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0a:	fab3 f383 	clz	r3, r3
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e12:	d802      	bhi.n	8004e1a <HAL_RCC_ClockConfig+0x182>
 8004e14:	4b31      	ldr	r3, [pc, #196]	@ (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	e00d      	b.n	8004e36 <HAL_RCC_ClockConfig+0x19e>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e20:	fa93 f3a3 	rbit	r3, r3
 8004e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e26:	2302      	movs	r3, #2
 8004e28:	623b      	str	r3, [r7, #32]
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	fa93 f3a3 	rbit	r3, r3
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	4b2a      	ldr	r3, [pc, #168]	@ (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e36:	2202      	movs	r2, #2
 8004e38:	61ba      	str	r2, [r7, #24]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	fa92 f2a2 	rbit	r2, r2
 8004e40:	617a      	str	r2, [r7, #20]
  return result;
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	fab2 f282 	clz	r2, r2
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	f042 0220 	orr.w	r2, r2, #32
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	f002 021f 	and.w	r2, r2, #31
 8004e54:	2101      	movs	r1, #1
 8004e56:	fa01 f202 	lsl.w	r2, r1, r2
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e07a      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e64:	4b1d      	ldr	r3, [pc, #116]	@ (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f023 0203 	bic.w	r2, r3, #3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	491a      	ldr	r1, [pc, #104]	@ (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e76:	f7fd fa3f 	bl	80022f8 <HAL_GetTick>
 8004e7a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7c:	e00a      	b.n	8004e94 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e7e:	f7fd fa3b 	bl	80022f8 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e062      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e94:	4b11      	ldr	r3, [pc, #68]	@ (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 020c 	and.w	r2, r3, #12
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d1eb      	bne.n	8004e7e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d215      	bcs.n	8004ee0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb4:	4b08      	ldr	r3, [pc, #32]	@ (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 0207 	bic.w	r2, r3, #7
 8004ebc:	4906      	ldr	r1, [pc, #24]	@ (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec4:	4b04      	ldr	r3, [pc, #16]	@ (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d006      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e041      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2c2>
 8004ed6:	bf00      	nop
 8004ed8:	40022000 	.word	0x40022000
 8004edc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eec:	4b1d      	ldr	r3, [pc, #116]	@ (8004f64 <HAL_RCC_ClockConfig+0x2cc>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	491a      	ldr	r1, [pc, #104]	@ (8004f64 <HAL_RCC_ClockConfig+0x2cc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f0a:	4b16      	ldr	r3, [pc, #88]	@ (8004f64 <HAL_RCC_ClockConfig+0x2cc>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4912      	ldr	r1, [pc, #72]	@ (8004f64 <HAL_RCC_ClockConfig+0x2cc>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f1e:	f000 f829 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 8004f22:	4601      	mov	r1, r0
 8004f24:	4b0f      	ldr	r3, [pc, #60]	@ (8004f64 <HAL_RCC_ClockConfig+0x2cc>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f2c:	22f0      	movs	r2, #240	@ 0xf0
 8004f2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	fa92 f2a2 	rbit	r2, r2
 8004f36:	60fa      	str	r2, [r7, #12]
  return result;
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	fab2 f282 	clz	r2, r2
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	40d3      	lsrs	r3, r2
 8004f42:	4a09      	ldr	r2, [pc, #36]	@ (8004f68 <HAL_RCC_ClockConfig+0x2d0>)
 8004f44:	5cd3      	ldrb	r3, [r2, r3]
 8004f46:	fa21 f303 	lsr.w	r3, r1, r3
 8004f4a:	4a08      	ldr	r2, [pc, #32]	@ (8004f6c <HAL_RCC_ClockConfig+0x2d4>)
 8004f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f4e:	4b08      	ldr	r3, [pc, #32]	@ (8004f70 <HAL_RCC_ClockConfig+0x2d8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fd f98c 	bl	8002270 <HAL_InitTick>
  
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3778      	adds	r7, #120	@ 0x78
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40021000 	.word	0x40021000
 8004f68:	080140a0 	.word	0x080140a0
 8004f6c:	20000004 	.word	0x20000004
 8004f70:	20000008 	.word	0x20000008

08004f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	2300      	movs	r3, #0
 8004f88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d002      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x30>
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d003      	beq.n	8004faa <HAL_RCC_GetSysClockFreq+0x36>
 8004fa2:	e026      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fa4:	4b19      	ldr	r3, [pc, #100]	@ (800500c <HAL_RCC_GetSysClockFreq+0x98>)
 8004fa6:	613b      	str	r3, [r7, #16]
      break;
 8004fa8:	e026      	b.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	0c9b      	lsrs	r3, r3, #18
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	4a17      	ldr	r2, [pc, #92]	@ (8005010 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fb4:	5cd3      	ldrb	r3, [r2, r3]
 8004fb6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004fb8:	4b13      	ldr	r3, [pc, #76]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	4a14      	ldr	r2, [pc, #80]	@ (8005014 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004fc2:	5cd3      	ldrb	r3, [r2, r3]
 8004fc4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800500c <HAL_RCC_GetSysClockFreq+0x98>)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e004      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8005018 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	613b      	str	r3, [r7, #16]
      break;
 8004ff0:	e002      	b.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ff2:	4b06      	ldr	r3, [pc, #24]	@ (800500c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ff4:	613b      	str	r3, [r7, #16]
      break;
 8004ff6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ff8:	693b      	ldr	r3, [r7, #16]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000
 800500c:	007a1200 	.word	0x007a1200
 8005010:	080140b8 	.word	0x080140b8
 8005014:	080140c8 	.word	0x080140c8
 8005018:	003d0900 	.word	0x003d0900

0800501c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005020:	4b03      	ldr	r3, [pc, #12]	@ (8005030 <HAL_RCC_GetHCLKFreq+0x14>)
 8005022:	681b      	ldr	r3, [r3, #0]
}
 8005024:	4618      	mov	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000004 	.word	0x20000004

08005034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800503a:	f7ff ffef 	bl	800501c <HAL_RCC_GetHCLKFreq>
 800503e:	4601      	mov	r1, r0
 8005040:	4b0b      	ldr	r3, [pc, #44]	@ (8005070 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005048:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800504c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	fa92 f2a2 	rbit	r2, r2
 8005054:	603a      	str	r2, [r7, #0]
  return result;
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	fab2 f282 	clz	r2, r2
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	40d3      	lsrs	r3, r2
 8005060:	4a04      	ldr	r2, [pc, #16]	@ (8005074 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005062:	5cd3      	ldrb	r3, [r2, r3]
 8005064:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40021000 	.word	0x40021000
 8005074:	080140b0 	.word	0x080140b0

08005078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800507e:	f7ff ffcd 	bl	800501c <HAL_RCC_GetHCLKFreq>
 8005082:	4601      	mov	r1, r0
 8005084:	4b0b      	ldr	r3, [pc, #44]	@ (80050b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800508c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005090:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	fa92 f2a2 	rbit	r2, r2
 8005098:	603a      	str	r2, [r7, #0]
  return result;
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	fab2 f282 	clz	r2, r2
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	40d3      	lsrs	r3, r2
 80050a4:	4a04      	ldr	r2, [pc, #16]	@ (80050b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80050a6:	5cd3      	ldrb	r3, [r2, r3]
 80050a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40021000 	.word	0x40021000
 80050b8:	080140b0 	.word	0x080140b0

080050bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b092      	sub	sp, #72	@ 0x48
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 80d2 	beq.w	8005284 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e0:	4b4d      	ldr	r3, [pc, #308]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10e      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ec:	4b4a      	ldr	r3, [pc, #296]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	4a49      	ldr	r2, [pc, #292]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80050f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050f6:	61d3      	str	r3, [r2, #28]
 80050f8:	4b47      	ldr	r3, [pc, #284]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510a:	4b44      	ldr	r3, [pc, #272]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005112:	2b00      	cmp	r3, #0
 8005114:	d118      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005116:	4b41      	ldr	r3, [pc, #260]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a40      	ldr	r2, [pc, #256]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800511c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005120:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005122:	f7fd f8e9 	bl	80022f8 <HAL_GetTick>
 8005126:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005128:	e008      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800512a:	f7fd f8e5 	bl	80022f8 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b64      	cmp	r3, #100	@ 0x64
 8005136:	d901      	bls.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e149      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513c:	4b37      	ldr	r3, [pc, #220]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005148:	4b33      	ldr	r3, [pc, #204]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005150:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 8082 	beq.w	800525e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005162:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005164:	429a      	cmp	r2, r3
 8005166:	d07a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005168:	4b2b      	ldr	r3, [pc, #172]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005172:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005176:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517a:	fa93 f3a3 	rbit	r3, r3
 800517e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005182:	fab3 f383 	clz	r3, r3
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	4b25      	ldr	r3, [pc, #148]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	461a      	mov	r2, r3
 8005192:	2301      	movs	r3, #1
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800519a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519e:	fa93 f3a3 	rbit	r3, r3
 80051a2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80051a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	461a      	mov	r2, r3
 80051b6:	2300      	movs	r3, #0
 80051b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051ba:	4a17      	ldr	r2, [pc, #92]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80051bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d049      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ca:	f7fd f895 	bl	80022f8 <HAL_GetTick>
 80051ce:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d0:	e00a      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d2:	f7fd f891 	bl	80022f8 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e0f3      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80051e8:	2302      	movs	r3, #2
 80051ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ee:	fa93 f3a3 	rbit	r3, r3
 80051f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f4:	2302      	movs	r3, #2
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	fa93 f3a3 	rbit	r3, r3
 80051fe:	61fb      	str	r3, [r7, #28]
  return result;
 8005200:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005202:	fab3 f383 	clz	r3, r3
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d108      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005212:	4b01      	ldr	r3, [pc, #4]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	e00d      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8005218:	40021000 	.word	0x40021000
 800521c:	40007000 	.word	0x40007000
 8005220:	10908100 	.word	0x10908100
 8005224:	2302      	movs	r3, #2
 8005226:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	4b69      	ldr	r3, [pc, #420]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	2202      	movs	r2, #2
 8005236:	613a      	str	r2, [r7, #16]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	fa92 f2a2 	rbit	r2, r2
 800523e:	60fa      	str	r2, [r7, #12]
  return result;
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	fab2 f282 	clz	r2, r2
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	f002 021f 	and.w	r2, r2, #31
 8005252:	2101      	movs	r1, #1
 8005254:	fa01 f202 	lsl.w	r2, r1, r2
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0b9      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800525e:	4b5e      	ldr	r3, [pc, #376]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	495b      	ldr	r1, [pc, #364]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800526c:	4313      	orrs	r3, r2
 800526e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005270:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005274:	2b01      	cmp	r3, #1
 8005276:	d105      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005278:	4b57      	ldr	r3, [pc, #348]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	4a56      	ldr	r2, [pc, #344]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800527e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005282:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005290:	4b51      	ldr	r3, [pc, #324]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005294:	f023 0203 	bic.w	r2, r3, #3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	494e      	ldr	r1, [pc, #312]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d008      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052ae:	4b4a      	ldr	r3, [pc, #296]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	4947      	ldr	r1, [pc, #284]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052cc:	4b42      	ldr	r3, [pc, #264]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80052ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	493f      	ldr	r1, [pc, #252]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d008      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ea:	4b3b      	ldr	r3, [pc, #236]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ee:	f023 0210 	bic.w	r2, r3, #16
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	4938      	ldr	r1, [pc, #224]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005308:	4b33      	ldr	r3, [pc, #204]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005314:	4930      	ldr	r1, [pc, #192]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005316:	4313      	orrs	r3, r2
 8005318:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d008      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005326:	4b2c      	ldr	r3, [pc, #176]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532a:	f023 0220 	bic.w	r2, r3, #32
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	4929      	ldr	r1, [pc, #164]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005334:	4313      	orrs	r3, r2
 8005336:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005344:	4b24      	ldr	r3, [pc, #144]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005348:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	4921      	ldr	r1, [pc, #132]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005352:	4313      	orrs	r3, r2
 8005354:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005362:	4b1d      	ldr	r3, [pc, #116]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005366:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	491a      	ldr	r1, [pc, #104]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005370:	4313      	orrs	r3, r2
 8005372:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005380:	4b15      	ldr	r3, [pc, #84]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538c:	4912      	ldr	r1, [pc, #72]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800538e:	4313      	orrs	r3, r2
 8005390:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539a:	2b00      	cmp	r3, #0
 800539c:	d008      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800539e:	4b0e      	ldr	r3, [pc, #56]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053aa:	490b      	ldr	r1, [pc, #44]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80053bc:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80053be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c8:	4903      	ldr	r1, [pc, #12]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3748      	adds	r7, #72	@ 0x48
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40021000 	.word	0x40021000

080053dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e09d      	b.n	800552a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d108      	bne.n	8005408 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053fe:	d009      	beq.n	8005414 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	61da      	str	r2, [r3, #28]
 8005406:	e005      	b.n	8005414 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fc fd28 	bl	8001e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800544a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005454:	d902      	bls.n	800545c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e002      	b.n	8005462 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800545c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005460:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800546a:	d007      	beq.n	800547c <HAL_SPI_Init+0xa0>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005474:	d002      	beq.n	800547c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054be:	ea42 0103 	orr.w	r1, r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	0c1b      	lsrs	r3, r3, #16
 80054d8:	f003 0204 	and.w	r2, r3, #4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80054f8:	ea42 0103 	orr.w	r1, r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005518:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b088      	sub	sp, #32
 8005536:	af00      	add	r7, sp, #0
 8005538:	60f8      	str	r0, [r7, #12]
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	603b      	str	r3, [r7, #0]
 800553e:	4613      	mov	r3, r2
 8005540:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_SPI_Transmit+0x22>
 8005550:	2302      	movs	r3, #2
 8005552:	e15f      	b.n	8005814 <HAL_SPI_Transmit+0x2e2>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800555c:	f7fc fecc 	bl	80022f8 <HAL_GetTick>
 8005560:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b01      	cmp	r3, #1
 8005570:	d002      	beq.n	8005578 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005572:	2302      	movs	r3, #2
 8005574:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005576:	e148      	b.n	800580a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <HAL_SPI_Transmit+0x52>
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d102      	bne.n	800558a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005588:	e13f      	b.n	800580a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2203      	movs	r2, #3
 800558e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d4:	d10f      	bne.n	80055f6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005600:	2b40      	cmp	r3, #64	@ 0x40
 8005602:	d007      	beq.n	8005614 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800561c:	d94f      	bls.n	80056be <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_SPI_Transmit+0xfa>
 8005626:	8afb      	ldrh	r3, [r7, #22]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d142      	bne.n	80056b2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	881a      	ldrh	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	1c9a      	adds	r2, r3, #2
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005650:	e02f      	b.n	80056b2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b02      	cmp	r3, #2
 800565e:	d112      	bne.n	8005686 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005664:	881a      	ldrh	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	1c9a      	adds	r2, r3, #2
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005684:	e015      	b.n	80056b2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005686:	f7fc fe37 	bl	80022f8 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d803      	bhi.n	800569e <HAL_SPI_Transmit+0x16c>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569c:	d102      	bne.n	80056a4 <HAL_SPI_Transmit+0x172>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d106      	bne.n	80056b2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80056b0:	e0ab      	b.n	800580a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1ca      	bne.n	8005652 <HAL_SPI_Transmit+0x120>
 80056bc:	e080      	b.n	80057c0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_SPI_Transmit+0x19a>
 80056c6:	8afb      	ldrh	r3, [r7, #22]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d174      	bne.n	80057b6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d912      	bls.n	80056fc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056da:	881a      	ldrh	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e6:	1c9a      	adds	r2, r3, #2
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b02      	subs	r3, #2
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056fa:	e05c      	b.n	80057b6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005722:	e048      	b.n	80057b6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d12b      	bne.n	800578a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d912      	bls.n	8005762 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005740:	881a      	ldrh	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574c:	1c9a      	adds	r2, r3, #2
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b02      	subs	r3, #2
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005760:	e029      	b.n	80057b6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	7812      	ldrb	r2, [r2, #0]
 800576e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005788:	e015      	b.n	80057b6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800578a:	f7fc fdb5 	bl	80022f8 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d803      	bhi.n	80057a2 <HAL_SPI_Transmit+0x270>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d102      	bne.n	80057a8 <HAL_SPI_Transmit+0x276>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80057b4:	e029      	b.n	800580a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1b1      	bne.n	8005724 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 fb77 	bl	8005eb8 <SPI_EndRxTxTransaction>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057de:	2300      	movs	r3, #0
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	77fb      	strb	r3, [r7, #31]
 8005800:	e003      	b.n	800580a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005812:	7ffb      	ldrb	r3, [r7, #31]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3720      	adds	r7, #32
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	@ 0x28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800582a:	2301      	movs	r3, #1
 800582c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_SPI_TransmitReceive+0x26>
 800583e:	2302      	movs	r3, #2
 8005840:	e20a      	b.n	8005c58 <HAL_SPI_TransmitReceive+0x43c>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800584a:	f7fc fd55 	bl	80022f8 <HAL_GetTick>
 800584e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005856:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800585e:	887b      	ldrh	r3, [r7, #2]
 8005860:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005862:	887b      	ldrh	r3, [r7, #2]
 8005864:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005866:	7efb      	ldrb	r3, [r7, #27]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d00e      	beq.n	800588a <HAL_SPI_TransmitReceive+0x6e>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005872:	d106      	bne.n	8005882 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <HAL_SPI_TransmitReceive+0x66>
 800587c:	7efb      	ldrb	r3, [r7, #27]
 800587e:	2b04      	cmp	r3, #4
 8005880:	d003      	beq.n	800588a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005882:	2302      	movs	r3, #2
 8005884:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005888:	e1e0      	b.n	8005c4c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_SPI_TransmitReceive+0x80>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_SPI_TransmitReceive+0x80>
 8005896:	887b      	ldrh	r3, [r7, #2]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80058a2:	e1d3      	b.n	8005c4c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d003      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2205      	movs	r2, #5
 80058b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	887a      	ldrh	r2, [r7, #2]
 80058c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	887a      	ldrh	r2, [r7, #2]
 80058d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	887a      	ldrh	r2, [r7, #2]
 80058de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	887a      	ldrh	r2, [r7, #2]
 80058e4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058fa:	d802      	bhi.n	8005902 <HAL_SPI_TransmitReceive+0xe6>
 80058fc:	8a3b      	ldrh	r3, [r7, #16]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d908      	bls.n	8005914 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	e007      	b.n	8005924 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005922:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592e:	2b40      	cmp	r3, #64	@ 0x40
 8005930:	d007      	beq.n	8005942 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005940:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800594a:	f240 8081 	bls.w	8005a50 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_SPI_TransmitReceive+0x140>
 8005956:	8a7b      	ldrh	r3, [r7, #18]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d16d      	bne.n	8005a38 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005960:	881a      	ldrh	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596c:	1c9a      	adds	r2, r3, #2
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005980:	e05a      	b.n	8005a38 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b02      	cmp	r3, #2
 800598e:	d11b      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0x1ac>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d016      	beq.n	80059c8 <HAL_SPI_TransmitReceive+0x1ac>
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	2b01      	cmp	r3, #1
 800599e:	d113      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a4:	881a      	ldrh	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b0:	1c9a      	adds	r2, r3, #2
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d11c      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x1f4>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d016      	beq.n	8005a10 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ec:	b292      	uxth	r2, r2
 80059ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f4:	1c9a      	adds	r2, r3, #2
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a10:	f7fc fc72 	bl	80022f8 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d80b      	bhi.n	8005a38 <HAL_SPI_TransmitReceive+0x21c>
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a26:	d007      	beq.n	8005a38 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005a36:	e109      	b.n	8005c4c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d19f      	bne.n	8005982 <HAL_SPI_TransmitReceive+0x166>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d199      	bne.n	8005982 <HAL_SPI_TransmitReceive+0x166>
 8005a4e:	e0e3      	b.n	8005c18 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_SPI_TransmitReceive+0x244>
 8005a58:	8a7b      	ldrh	r3, [r7, #18]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	f040 80cf 	bne.w	8005bfe <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d912      	bls.n	8005a90 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6e:	881a      	ldrh	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7a:	1c9a      	adds	r2, r3, #2
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b02      	subs	r3, #2
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a8e:	e0b6      	b.n	8005bfe <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	7812      	ldrb	r2, [r2, #0]
 8005a9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ab6:	e0a2      	b.n	8005bfe <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d134      	bne.n	8005b30 <HAL_SPI_TransmitReceive+0x314>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d02f      	beq.n	8005b30 <HAL_SPI_TransmitReceive+0x314>
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d12c      	bne.n	8005b30 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d912      	bls.n	8005b06 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae4:	881a      	ldrh	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af0:	1c9a      	adds	r2, r3, #2
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b02      	subs	r3, #2
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b04:	e012      	b.n	8005b2c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	330c      	adds	r3, #12
 8005b10:	7812      	ldrb	r2, [r2, #0]
 8005b12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d148      	bne.n	8005bd0 <HAL_SPI_TransmitReceive+0x3b4>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d042      	beq.n	8005bd0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d923      	bls.n	8005b9e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b60:	b292      	uxth	r2, r2
 8005b62:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b68:	1c9a      	adds	r2, r3, #2
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3b02      	subs	r3, #2
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d81f      	bhi.n	8005bcc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b9a:	605a      	str	r2, [r3, #4]
 8005b9c:	e016      	b.n	8005bcc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f103 020c 	add.w	r2, r3, #12
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	7812      	ldrb	r2, [r2, #0]
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bd0:	f7fc fb92 	bl	80022f8 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d803      	bhi.n	8005be8 <HAL_SPI_TransmitReceive+0x3cc>
 8005be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be6:	d102      	bne.n	8005bee <HAL_SPI_TransmitReceive+0x3d2>
 8005be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d107      	bne.n	8005bfe <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005bfc:	e026      	b.n	8005c4c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f47f af57 	bne.w	8005ab8 <HAL_SPI_TransmitReceive+0x29c>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f47f af50 	bne.w	8005ab8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f94b 	bl	8005eb8 <SPI_EndRxTxTransaction>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d005      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c42:	e003      	b.n	8005c4c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005c54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3728      	adds	r7, #40	@ 0x28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c6e:	b2db      	uxtb	r3, r3
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c8c:	f7fc fb34 	bl	80022f8 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c94:	1a9b      	subs	r3, r3, r2
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	4413      	add	r3, r2
 8005c9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c9c:	f7fc fb2c 	bl	80022f8 <HAL_GetTick>
 8005ca0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ca2:	4b39      	ldr	r3, [pc, #228]	@ (8005d88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	015b      	lsls	r3, r3, #5
 8005ca8:	0d1b      	lsrs	r3, r3, #20
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	fb02 f303 	mul.w	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cb2:	e054      	b.n	8005d5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cba:	d050      	beq.n	8005d5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cbc:	f7fc fb1c 	bl	80022f8 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d902      	bls.n	8005cd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d13d      	bne.n	8005d4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ce0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cea:	d111      	bne.n	8005d10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cf4:	d004      	beq.n	8005d00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cfe:	d107      	bne.n	8005d10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d18:	d10f      	bne.n	8005d3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e017      	b.n	8005d7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4013      	ands	r3, r2
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	bf0c      	ite	eq
 8005d6e:	2301      	moveq	r3, #1
 8005d70:	2300      	movne	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d19b      	bne.n	8005cb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3720      	adds	r7, #32
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000004 	.word	0x20000004

08005d8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	@ 0x28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d9e:	f7fc faab 	bl	80022f8 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	4413      	add	r3, r2
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005dae:	f7fc faa3 	bl	80022f8 <HAL_GetTick>
 8005db2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	330c      	adds	r3, #12
 8005dba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8005eb4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	00da      	lsls	r2, r3, #3
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	0d1b      	lsrs	r3, r3, #20
 8005dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dce:	fb02 f303 	mul.w	r3, r2, r3
 8005dd2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005dd4:	e060      	b.n	8005e98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ddc:	d107      	bne.n	8005dee <SPI_WaitFifoStateUntilTimeout+0x62>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d104      	bne.n	8005dee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df4:	d050      	beq.n	8005e98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005df6:	f7fc fa7f 	bl	80022f8 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d902      	bls.n	8005e0c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d13d      	bne.n	8005e88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e24:	d111      	bne.n	8005e4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e2e:	d004      	beq.n	8005e3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e38:	d107      	bne.n	8005e4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e52:	d10f      	bne.n	8005e74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e010      	b.n	8005eaa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d196      	bne.n	8005dd6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3728      	adds	r7, #40	@ 0x28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000004 	.word	0x20000004

08005eb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff ff5b 	bl	8005d8c <SPI_WaitFifoStateUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ee0:	f043 0220 	orr.w	r2, r3, #32
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e027      	b.n	8005f3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2180      	movs	r1, #128	@ 0x80
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff fec0 	bl	8005c7c <SPI_WaitFlagStateUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f06:	f043 0220 	orr.w	r2, r3, #32
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e014      	b.n	8005f3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f7ff ff34 	bl	8005d8c <SPI_WaitFifoStateUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f2e:	f043 0220 	orr.w	r2, r3, #32
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e000      	b.n	8005f3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e040      	b.n	8005fd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7fb ffce 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2224      	movs	r2, #36	@ 0x24
 8005f70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0201 	bic.w	r2, r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fd8a 	bl	8006aa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fbb3 	bl	80066fc <UART_SetConfig>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e01b      	b.n	8005fd8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fe09 	bl	8006be8 <UART_CheckIdleState>
 8005fd6:	4603      	mov	r3, r0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08a      	sub	sp, #40	@ 0x28
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	4613      	mov	r3, r2
 8005fee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d177      	bne.n	80060e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_UART_Transmit+0x24>
 8005ffe:	88fb      	ldrh	r3, [r7, #6]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e070      	b.n	80060ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2221      	movs	r2, #33	@ 0x21
 8006014:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006016:	f7fc f96f 	bl	80022f8 <HAL_GetTick>
 800601a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	88fa      	ldrh	r2, [r7, #6]
 8006020:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	88fa      	ldrh	r2, [r7, #6]
 8006028:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006034:	d108      	bne.n	8006048 <HAL_UART_Transmit+0x68>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d104      	bne.n	8006048 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800603e:	2300      	movs	r3, #0
 8006040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	e003      	b.n	8006050 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800604c:	2300      	movs	r3, #0
 800604e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006050:	e02f      	b.n	80060b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2200      	movs	r2, #0
 800605a:	2180      	movs	r1, #128	@ 0x80
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 fe6b 	bl	8006d38 <UART_WaitOnFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d004      	beq.n	8006072 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e03b      	b.n	80060ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10b      	bne.n	8006090 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	881a      	ldrh	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006084:	b292      	uxth	r2, r2
 8006086:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	3302      	adds	r3, #2
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	e007      	b.n	80060a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	781a      	ldrb	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	3301      	adds	r3, #1
 800609e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1c9      	bne.n	8006052 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2200      	movs	r2, #0
 80060c6:	2140      	movs	r1, #64	@ 0x40
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fe35 	bl	8006d38 <UART_WaitOnFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d004      	beq.n	80060de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2220      	movs	r2, #32
 80060d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e005      	b.n	80060ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	e000      	b.n	80060ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80060e8:	2302      	movs	r3, #2
  }
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3720      	adds	r7, #32
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b0ba      	sub	sp, #232	@ 0xe8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800611a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800611e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006122:	4013      	ands	r3, r2
 8006124:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d115      	bne.n	800615c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00f      	beq.n	800615c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800613c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b00      	cmp	r3, #0
 8006146:	d009      	beq.n	800615c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 82ab 	beq.w	80066a8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4798      	blx	r3
      }
      return;
 800615a:	e2a5      	b.n	80066a8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800615c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 8117 	beq.w	8006394 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006172:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006176:	4b85      	ldr	r3, [pc, #532]	@ (800638c <HAL_UART_IRQHandler+0x298>)
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 810a 	beq.w	8006394 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d011      	beq.n	80061b0 <HAL_UART_IRQHandler+0xbc>
 800618c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00b      	beq.n	80061b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2201      	movs	r2, #1
 800619e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061a6:	f043 0201 	orr.w	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d011      	beq.n	80061e0 <HAL_UART_IRQHandler+0xec>
 80061bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00b      	beq.n	80061e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2202      	movs	r2, #2
 80061ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d6:	f043 0204 	orr.w	r2, r3, #4
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d011      	beq.n	8006210 <HAL_UART_IRQHandler+0x11c>
 80061ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00b      	beq.n	8006210 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2204      	movs	r2, #4
 80061fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006206:	f043 0202 	orr.w	r2, r3, #2
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d017      	beq.n	800624c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800621c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800622c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2208      	movs	r2, #8
 800623a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006242:	f043 0208 	orr.w	r2, r3, #8
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800624c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006254:	2b00      	cmp	r3, #0
 8006256:	d012      	beq.n	800627e <HAL_UART_IRQHandler+0x18a>
 8006258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800625c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00c      	beq.n	800627e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800626c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006274:	f043 0220 	orr.w	r2, r3, #32
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8211 	beq.w	80066ac <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800628a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00d      	beq.n	80062b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d007      	beq.n	80062b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c6:	2b40      	cmp	r3, #64	@ 0x40
 80062c8:	d005      	beq.n	80062d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d04f      	beq.n	8006376 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fe50 	bl	8006f7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e6:	2b40      	cmp	r3, #64	@ 0x40
 80062e8:	d141      	bne.n	800636e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3308      	adds	r3, #8
 80062f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006300:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006304:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3308      	adds	r3, #8
 8006312:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006316:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800631a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006322:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800632e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1d9      	bne.n	80062ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800633a:	2b00      	cmp	r3, #0
 800633c:	d013      	beq.n	8006366 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006342:	4a13      	ldr	r2, [pc, #76]	@ (8006390 <HAL_UART_IRQHandler+0x29c>)
 8006344:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800634a:	4618      	mov	r0, r3
 800634c:	f7fc fbb5 	bl	8002aba <HAL_DMA_Abort_IT>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d017      	beq.n	8006386 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800635a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006360:	4610      	mov	r0, r2
 8006362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006364:	e00f      	b.n	8006386 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f9be 	bl	80066e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800636c:	e00b      	b.n	8006386 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f9ba 	bl	80066e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006374:	e007      	b.n	8006386 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f9b6 	bl	80066e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006384:	e192      	b.n	80066ac <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006386:	bf00      	nop
    return;
 8006388:	e190      	b.n	80066ac <HAL_UART_IRQHandler+0x5b8>
 800638a:	bf00      	nop
 800638c:	04000120 	.word	0x04000120
 8006390:	08007045 	.word	0x08007045

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006398:	2b01      	cmp	r3, #1
 800639a:	f040 814b 	bne.w	8006634 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800639e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 8144 	beq.w	8006634 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b0:	f003 0310 	and.w	r3, r3, #16
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 813d 	beq.w	8006634 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2210      	movs	r2, #16
 80063c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063cc:	2b40      	cmp	r3, #64	@ 0x40
 80063ce:	f040 80b5 	bne.w	800653c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 8164 	beq.w	80066b0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80063ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063f2:	429a      	cmp	r2, r3
 80063f4:	f080 815c 	bcs.w	80066b0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	2b20      	cmp	r3, #32
 800640a:	f000 8086 	beq.w	800651a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006422:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006426:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800642a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006438:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800643c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006444:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006450:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1da      	bne.n	800640e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3308      	adds	r3, #8
 800645e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006462:	e853 3f00 	ldrex	r3, [r3]
 8006466:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006468:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3308      	adds	r3, #8
 8006478:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800647c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006480:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006484:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006488:	e841 2300 	strex	r3, r2, [r1]
 800648c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800648e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e1      	bne.n	8006458 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3308      	adds	r3, #8
 800649a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e3      	bne.n	8006494 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064ea:	f023 0310 	bic.w	r3, r3, #16
 80064ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064fe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006502:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800650a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e4      	bne.n	80064da <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006514:	4618      	mov	r0, r3
 8006516:	f7fc fa92 	bl	8002a3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2202      	movs	r2, #2
 800651e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800652c:	b29b      	uxth	r3, r3
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	b29b      	uxth	r3, r3
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fb fb3d 	bl	8001bb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800653a:	e0b9      	b.n	80066b0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006548:	b29b      	uxth	r3, r3
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80ab 	beq.w	80066b4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800655e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 80a6 	beq.w	80066b4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800657c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800658a:	647b      	str	r3, [r7, #68]	@ 0x44
 800658c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006590:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e4      	bne.n	8006568 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3308      	adds	r3, #8
 80065a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	623b      	str	r3, [r7, #32]
   return(result);
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	f023 0301 	bic.w	r3, r3, #1
 80065b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3308      	adds	r3, #8
 80065be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80065c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80065c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e3      	bne.n	800659e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0310 	bic.w	r3, r3, #16
 80065fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	69b9      	ldr	r1, [r7, #24]
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	617b      	str	r3, [r7, #20]
   return(result);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e4      	bne.n	80065ea <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006626:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7fb fac1 	bl	8001bb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006632:	e03f      	b.n	80066b4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006638:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00e      	beq.n	800665e <HAL_UART_IRQHandler+0x56a>
 8006640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006644:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d008      	beq.n	800665e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fedc 	bl	8007414 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800665c:	e02d      	b.n	80066ba <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800665e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00e      	beq.n	8006688 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800666a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800666e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006672:	2b00      	cmp	r3, #0
 8006674:	d008      	beq.n	8006688 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d01c      	beq.n	80066b8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	4798      	blx	r3
    }
    return;
 8006686:	e017      	b.n	80066b8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800668c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d012      	beq.n	80066ba <HAL_UART_IRQHandler+0x5c6>
 8006694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00c      	beq.n	80066ba <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fce5 	bl	8007070 <UART_EndTransmit_IT>
    return;
 80066a6:	e008      	b.n	80066ba <HAL_UART_IRQHandler+0x5c6>
      return;
 80066a8:	bf00      	nop
 80066aa:	e006      	b.n	80066ba <HAL_UART_IRQHandler+0x5c6>
    return;
 80066ac:	bf00      	nop
 80066ae:	e004      	b.n	80066ba <HAL_UART_IRQHandler+0x5c6>
      return;
 80066b0:	bf00      	nop
 80066b2:	e002      	b.n	80066ba <HAL_UART_IRQHandler+0x5c6>
      return;
 80066b4:	bf00      	nop
 80066b6:	e000      	b.n	80066ba <HAL_UART_IRQHandler+0x5c6>
    return;
 80066b8:	bf00      	nop
  }

}
 80066ba:	37e8      	adds	r7, #232	@ 0xe8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	4313      	orrs	r3, r2
 800671e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800672a:	f023 030c 	bic.w	r3, r3, #12
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6812      	ldr	r2, [r2, #0]
 8006732:	6979      	ldr	r1, [r7, #20]
 8006734:	430b      	orrs	r3, r1
 8006736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	430a      	orrs	r2, r1
 8006770:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4aa7      	ldr	r2, [pc, #668]	@ (8006a14 <UART_SetConfig+0x318>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d120      	bne.n	80067be <UART_SetConfig+0xc2>
 800677c:	4ba6      	ldr	r3, [pc, #664]	@ (8006a18 <UART_SetConfig+0x31c>)
 800677e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	2b03      	cmp	r3, #3
 8006786:	d817      	bhi.n	80067b8 <UART_SetConfig+0xbc>
 8006788:	a201      	add	r2, pc, #4	@ (adr r2, 8006790 <UART_SetConfig+0x94>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067a1 	.word	0x080067a1
 8006794:	080067ad 	.word	0x080067ad
 8006798:	080067b3 	.word	0x080067b3
 800679c:	080067a7 	.word	0x080067a7
 80067a0:	2301      	movs	r3, #1
 80067a2:	77fb      	strb	r3, [r7, #31]
 80067a4:	e0b5      	b.n	8006912 <UART_SetConfig+0x216>
 80067a6:	2302      	movs	r3, #2
 80067a8:	77fb      	strb	r3, [r7, #31]
 80067aa:	e0b2      	b.n	8006912 <UART_SetConfig+0x216>
 80067ac:	2304      	movs	r3, #4
 80067ae:	77fb      	strb	r3, [r7, #31]
 80067b0:	e0af      	b.n	8006912 <UART_SetConfig+0x216>
 80067b2:	2308      	movs	r3, #8
 80067b4:	77fb      	strb	r3, [r7, #31]
 80067b6:	e0ac      	b.n	8006912 <UART_SetConfig+0x216>
 80067b8:	2310      	movs	r3, #16
 80067ba:	77fb      	strb	r3, [r7, #31]
 80067bc:	e0a9      	b.n	8006912 <UART_SetConfig+0x216>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a96      	ldr	r2, [pc, #600]	@ (8006a1c <UART_SetConfig+0x320>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d124      	bne.n	8006812 <UART_SetConfig+0x116>
 80067c8:	4b93      	ldr	r3, [pc, #588]	@ (8006a18 <UART_SetConfig+0x31c>)
 80067ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067d4:	d011      	beq.n	80067fa <UART_SetConfig+0xfe>
 80067d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067da:	d817      	bhi.n	800680c <UART_SetConfig+0x110>
 80067dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067e0:	d011      	beq.n	8006806 <UART_SetConfig+0x10a>
 80067e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067e6:	d811      	bhi.n	800680c <UART_SetConfig+0x110>
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <UART_SetConfig+0xf8>
 80067ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067f0:	d006      	beq.n	8006800 <UART_SetConfig+0x104>
 80067f2:	e00b      	b.n	800680c <UART_SetConfig+0x110>
 80067f4:	2300      	movs	r3, #0
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	e08b      	b.n	8006912 <UART_SetConfig+0x216>
 80067fa:	2302      	movs	r3, #2
 80067fc:	77fb      	strb	r3, [r7, #31]
 80067fe:	e088      	b.n	8006912 <UART_SetConfig+0x216>
 8006800:	2304      	movs	r3, #4
 8006802:	77fb      	strb	r3, [r7, #31]
 8006804:	e085      	b.n	8006912 <UART_SetConfig+0x216>
 8006806:	2308      	movs	r3, #8
 8006808:	77fb      	strb	r3, [r7, #31]
 800680a:	e082      	b.n	8006912 <UART_SetConfig+0x216>
 800680c:	2310      	movs	r3, #16
 800680e:	77fb      	strb	r3, [r7, #31]
 8006810:	e07f      	b.n	8006912 <UART_SetConfig+0x216>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a82      	ldr	r2, [pc, #520]	@ (8006a20 <UART_SetConfig+0x324>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d124      	bne.n	8006866 <UART_SetConfig+0x16a>
 800681c:	4b7e      	ldr	r3, [pc, #504]	@ (8006a18 <UART_SetConfig+0x31c>)
 800681e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006820:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006824:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006828:	d011      	beq.n	800684e <UART_SetConfig+0x152>
 800682a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800682e:	d817      	bhi.n	8006860 <UART_SetConfig+0x164>
 8006830:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006834:	d011      	beq.n	800685a <UART_SetConfig+0x15e>
 8006836:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800683a:	d811      	bhi.n	8006860 <UART_SetConfig+0x164>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <UART_SetConfig+0x14c>
 8006840:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006844:	d006      	beq.n	8006854 <UART_SetConfig+0x158>
 8006846:	e00b      	b.n	8006860 <UART_SetConfig+0x164>
 8006848:	2300      	movs	r3, #0
 800684a:	77fb      	strb	r3, [r7, #31]
 800684c:	e061      	b.n	8006912 <UART_SetConfig+0x216>
 800684e:	2302      	movs	r3, #2
 8006850:	77fb      	strb	r3, [r7, #31]
 8006852:	e05e      	b.n	8006912 <UART_SetConfig+0x216>
 8006854:	2304      	movs	r3, #4
 8006856:	77fb      	strb	r3, [r7, #31]
 8006858:	e05b      	b.n	8006912 <UART_SetConfig+0x216>
 800685a:	2308      	movs	r3, #8
 800685c:	77fb      	strb	r3, [r7, #31]
 800685e:	e058      	b.n	8006912 <UART_SetConfig+0x216>
 8006860:	2310      	movs	r3, #16
 8006862:	77fb      	strb	r3, [r7, #31]
 8006864:	e055      	b.n	8006912 <UART_SetConfig+0x216>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a6e      	ldr	r2, [pc, #440]	@ (8006a24 <UART_SetConfig+0x328>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d124      	bne.n	80068ba <UART_SetConfig+0x1be>
 8006870:	4b69      	ldr	r3, [pc, #420]	@ (8006a18 <UART_SetConfig+0x31c>)
 8006872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006874:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006878:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800687c:	d011      	beq.n	80068a2 <UART_SetConfig+0x1a6>
 800687e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006882:	d817      	bhi.n	80068b4 <UART_SetConfig+0x1b8>
 8006884:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006888:	d011      	beq.n	80068ae <UART_SetConfig+0x1b2>
 800688a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800688e:	d811      	bhi.n	80068b4 <UART_SetConfig+0x1b8>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <UART_SetConfig+0x1a0>
 8006894:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006898:	d006      	beq.n	80068a8 <UART_SetConfig+0x1ac>
 800689a:	e00b      	b.n	80068b4 <UART_SetConfig+0x1b8>
 800689c:	2300      	movs	r3, #0
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e037      	b.n	8006912 <UART_SetConfig+0x216>
 80068a2:	2302      	movs	r3, #2
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e034      	b.n	8006912 <UART_SetConfig+0x216>
 80068a8:	2304      	movs	r3, #4
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e031      	b.n	8006912 <UART_SetConfig+0x216>
 80068ae:	2308      	movs	r3, #8
 80068b0:	77fb      	strb	r3, [r7, #31]
 80068b2:	e02e      	b.n	8006912 <UART_SetConfig+0x216>
 80068b4:	2310      	movs	r3, #16
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	e02b      	b.n	8006912 <UART_SetConfig+0x216>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a5a      	ldr	r2, [pc, #360]	@ (8006a28 <UART_SetConfig+0x32c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d124      	bne.n	800690e <UART_SetConfig+0x212>
 80068c4:	4b54      	ldr	r3, [pc, #336]	@ (8006a18 <UART_SetConfig+0x31c>)
 80068c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80068cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80068d0:	d011      	beq.n	80068f6 <UART_SetConfig+0x1fa>
 80068d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80068d6:	d817      	bhi.n	8006908 <UART_SetConfig+0x20c>
 80068d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068dc:	d011      	beq.n	8006902 <UART_SetConfig+0x206>
 80068de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068e2:	d811      	bhi.n	8006908 <UART_SetConfig+0x20c>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <UART_SetConfig+0x1f4>
 80068e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068ec:	d006      	beq.n	80068fc <UART_SetConfig+0x200>
 80068ee:	e00b      	b.n	8006908 <UART_SetConfig+0x20c>
 80068f0:	2300      	movs	r3, #0
 80068f2:	77fb      	strb	r3, [r7, #31]
 80068f4:	e00d      	b.n	8006912 <UART_SetConfig+0x216>
 80068f6:	2302      	movs	r3, #2
 80068f8:	77fb      	strb	r3, [r7, #31]
 80068fa:	e00a      	b.n	8006912 <UART_SetConfig+0x216>
 80068fc:	2304      	movs	r3, #4
 80068fe:	77fb      	strb	r3, [r7, #31]
 8006900:	e007      	b.n	8006912 <UART_SetConfig+0x216>
 8006902:	2308      	movs	r3, #8
 8006904:	77fb      	strb	r3, [r7, #31]
 8006906:	e004      	b.n	8006912 <UART_SetConfig+0x216>
 8006908:	2310      	movs	r3, #16
 800690a:	77fb      	strb	r3, [r7, #31]
 800690c:	e001      	b.n	8006912 <UART_SetConfig+0x216>
 800690e:	2310      	movs	r3, #16
 8006910:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800691a:	d15b      	bne.n	80069d4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800691c:	7ffb      	ldrb	r3, [r7, #31]
 800691e:	2b08      	cmp	r3, #8
 8006920:	d827      	bhi.n	8006972 <UART_SetConfig+0x276>
 8006922:	a201      	add	r2, pc, #4	@ (adr r2, 8006928 <UART_SetConfig+0x22c>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	0800694d 	.word	0x0800694d
 800692c:	08006955 	.word	0x08006955
 8006930:	0800695d 	.word	0x0800695d
 8006934:	08006973 	.word	0x08006973
 8006938:	08006963 	.word	0x08006963
 800693c:	08006973 	.word	0x08006973
 8006940:	08006973 	.word	0x08006973
 8006944:	08006973 	.word	0x08006973
 8006948:	0800696b 	.word	0x0800696b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800694c:	f7fe fb72 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 8006950:	61b8      	str	r0, [r7, #24]
        break;
 8006952:	e013      	b.n	800697c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006954:	f7fe fb90 	bl	8005078 <HAL_RCC_GetPCLK2Freq>
 8006958:	61b8      	str	r0, [r7, #24]
        break;
 800695a:	e00f      	b.n	800697c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800695c:	4b33      	ldr	r3, [pc, #204]	@ (8006a2c <UART_SetConfig+0x330>)
 800695e:	61bb      	str	r3, [r7, #24]
        break;
 8006960:	e00c      	b.n	800697c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006962:	f7fe fb07 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 8006966:	61b8      	str	r0, [r7, #24]
        break;
 8006968:	e008      	b.n	800697c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800696e:	61bb      	str	r3, [r7, #24]
        break;
 8006970:	e004      	b.n	800697c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	77bb      	strb	r3, [r7, #30]
        break;
 800697a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 8082 	beq.w	8006a88 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	005a      	lsls	r2, r3, #1
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	085b      	lsrs	r3, r3, #1
 800698e:	441a      	add	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	fbb2 f3f3 	udiv	r3, r2, r3
 8006998:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	2b0f      	cmp	r3, #15
 800699e:	d916      	bls.n	80069ce <UART_SetConfig+0x2d2>
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069a6:	d212      	bcs.n	80069ce <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f023 030f 	bic.w	r3, r3, #15
 80069b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	b29a      	uxth	r2, r3
 80069be:	89fb      	ldrh	r3, [r7, #14]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	89fa      	ldrh	r2, [r7, #14]
 80069ca:	60da      	str	r2, [r3, #12]
 80069cc:	e05c      	b.n	8006a88 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	77bb      	strb	r3, [r7, #30]
 80069d2:	e059      	b.n	8006a88 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069d4:	7ffb      	ldrb	r3, [r7, #31]
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	d835      	bhi.n	8006a46 <UART_SetConfig+0x34a>
 80069da:	a201      	add	r2, pc, #4	@ (adr r2, 80069e0 <UART_SetConfig+0x2e4>)
 80069dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e0:	08006a05 	.word	0x08006a05
 80069e4:	08006a0d 	.word	0x08006a0d
 80069e8:	08006a31 	.word	0x08006a31
 80069ec:	08006a47 	.word	0x08006a47
 80069f0:	08006a37 	.word	0x08006a37
 80069f4:	08006a47 	.word	0x08006a47
 80069f8:	08006a47 	.word	0x08006a47
 80069fc:	08006a47 	.word	0x08006a47
 8006a00:	08006a3f 	.word	0x08006a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a04:	f7fe fb16 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 8006a08:	61b8      	str	r0, [r7, #24]
        break;
 8006a0a:	e021      	b.n	8006a50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a0c:	f7fe fb34 	bl	8005078 <HAL_RCC_GetPCLK2Freq>
 8006a10:	61b8      	str	r0, [r7, #24]
        break;
 8006a12:	e01d      	b.n	8006a50 <UART_SetConfig+0x354>
 8006a14:	40013800 	.word	0x40013800
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	40004400 	.word	0x40004400
 8006a20:	40004800 	.word	0x40004800
 8006a24:	40004c00 	.word	0x40004c00
 8006a28:	40005000 	.word	0x40005000
 8006a2c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a30:	4b1b      	ldr	r3, [pc, #108]	@ (8006aa0 <UART_SetConfig+0x3a4>)
 8006a32:	61bb      	str	r3, [r7, #24]
        break;
 8006a34:	e00c      	b.n	8006a50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a36:	f7fe fa9d 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 8006a3a:	61b8      	str	r0, [r7, #24]
        break;
 8006a3c:	e008      	b.n	8006a50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a42:	61bb      	str	r3, [r7, #24]
        break;
 8006a44:	e004      	b.n	8006a50 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	77bb      	strb	r3, [r7, #30]
        break;
 8006a4e:	bf00      	nop
    }

    if (pclk != 0U)
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d018      	beq.n	8006a88 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	085a      	lsrs	r2, r3, #1
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	441a      	add	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	2b0f      	cmp	r3, #15
 8006a6e:	d909      	bls.n	8006a84 <UART_SetConfig+0x388>
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a76:	d205      	bcs.n	8006a84 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60da      	str	r2, [r3, #12]
 8006a82:	e001      	b.n	8006a88 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006a94:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3720      	adds	r7, #32
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	007a1200 	.word	0x007a1200

08006aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab0:	f003 0308 	and.w	r3, r3, #8
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00a      	beq.n	8006af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	f003 0310 	and.w	r3, r3, #16
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00a      	beq.n	8006b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01a      	beq.n	8006bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ba2:	d10a      	bne.n	8006bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	605a      	str	r2, [r3, #4]
  }
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b098      	sub	sp, #96	@ 0x60
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bf8:	f7fb fb7e 	bl	80022f8 <HAL_GetTick>
 8006bfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d12e      	bne.n	8006c6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c14:	2200      	movs	r2, #0
 8006c16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f88c 	bl	8006d38 <UART_WaitOnFlagUntilTimeout>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d021      	beq.n	8006c6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e6      	bne.n	8006c26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e062      	b.n	8006d30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d149      	bne.n	8006d0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c80:	2200      	movs	r2, #0
 8006c82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f856 	bl	8006d38 <UART_WaitOnFlagUntilTimeout>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d03c      	beq.n	8006d0c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	623b      	str	r3, [r7, #32]
   return(result);
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e6      	bne.n	8006c92 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3308      	adds	r3, #8
 8006cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0301 	bic.w	r3, r3, #1
 8006cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ce4:	61fa      	str	r2, [r7, #28]
 8006ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	69b9      	ldr	r1, [r7, #24]
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e5      	bne.n	8006cc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e011      	b.n	8006d30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3758      	adds	r7, #88	@ 0x58
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	4613      	mov	r3, r2
 8006d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d48:	e04f      	b.n	8006dea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d50:	d04b      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d52:	f7fb fad1 	bl	80022f8 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d302      	bcc.n	8006d68 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e04e      	b.n	8006e0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0304 	and.w	r3, r3, #4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d037      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b80      	cmp	r3, #128	@ 0x80
 8006d7e:	d034      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b40      	cmp	r3, #64	@ 0x40
 8006d84:	d031      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	f003 0308 	and.w	r3, r3, #8
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d110      	bne.n	8006db6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2208      	movs	r2, #8
 8006d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f8ed 	bl	8006f7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2208      	movs	r2, #8
 8006da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e029      	b.n	8006e0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dc4:	d111      	bne.n	8006dea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f8d3 	bl	8006f7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e00f      	b.n	8006e0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4013      	ands	r3, r2
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	bf0c      	ite	eq
 8006dfa:	2301      	moveq	r3, #1
 8006dfc:	2300      	movne	r3, #0
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d0a0      	beq.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b097      	sub	sp, #92	@ 0x5c
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	88fa      	ldrh	r2, [r7, #6]
 8006e2c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	88fa      	ldrh	r2, [r7, #6]
 8006e34:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e46:	d10e      	bne.n	8006e66 <UART_Start_Receive_IT+0x52>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d105      	bne.n	8006e5c <UART_Start_Receive_IT+0x48>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006e56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e5a:	e01a      	b.n	8006e92 <UART_Start_Receive_IT+0x7e>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	22ff      	movs	r2, #255	@ 0xff
 8006e60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e64:	e015      	b.n	8006e92 <UART_Start_Receive_IT+0x7e>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10d      	bne.n	8006e8a <UART_Start_Receive_IT+0x76>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d104      	bne.n	8006e80 <UART_Start_Receive_IT+0x6c>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	22ff      	movs	r2, #255	@ 0xff
 8006e7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e7e:	e008      	b.n	8006e92 <UART_Start_Receive_IT+0x7e>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	227f      	movs	r2, #127	@ 0x7f
 8006e84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e88:	e003      	b.n	8006e92 <UART_Start_Receive_IT+0x7e>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2222      	movs	r2, #34	@ 0x22
 8006e9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb4:	f043 0301 	orr.w	r3, r3, #1
 8006eb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ec2:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006ec4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ec8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ede:	d107      	bne.n	8006ef0 <UART_Start_Receive_IT+0xdc>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d103      	bne.n	8006ef0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4a22      	ldr	r2, [pc, #136]	@ (8006f74 <UART_Start_Receive_IT+0x160>)
 8006eec:	669a      	str	r2, [r3, #104]	@ 0x68
 8006eee:	e002      	b.n	8006ef6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a21      	ldr	r2, [pc, #132]	@ (8006f78 <UART_Start_Receive_IT+0x164>)
 8006ef4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d019      	beq.n	8006f32 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e6      	bne.n	8006efe <UART_Start_Receive_IT+0xea>
 8006f30:	e018      	b.n	8006f64 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f043 0320 	orr.w	r3, r3, #32
 8006f46:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f50:	623b      	str	r3, [r7, #32]
 8006f52:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	69f9      	ldr	r1, [r7, #28]
 8006f56:	6a3a      	ldr	r2, [r7, #32]
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e6      	bne.n	8006f32 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	375c      	adds	r7, #92	@ 0x5c
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	0800726d 	.word	0x0800726d
 8006f78:	080070c5 	.word	0x080070c5

08006f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b095      	sub	sp, #84	@ 0x54
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fa4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1e6      	bne.n	8006f84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3308      	adds	r3, #8
 8006fbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	f023 0301 	bic.w	r3, r3, #1
 8006fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3308      	adds	r3, #8
 8006fd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e5      	bne.n	8006fb6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d118      	bne.n	8007024 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f023 0310 	bic.w	r3, r3, #16
 8007006:	647b      	str	r3, [r7, #68]	@ 0x44
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	461a      	mov	r2, r3
 800700e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007010:	61bb      	str	r3, [r7, #24]
 8007012:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	6979      	ldr	r1, [r7, #20]
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	e841 2300 	strex	r3, r2, [r1]
 800701c:	613b      	str	r3, [r7, #16]
   return(result);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e6      	bne.n	8006ff2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007038:	bf00      	nop
 800703a:	3754      	adds	r7, #84	@ 0x54
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007050:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f7ff fb40 	bl	80066e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	60bb      	str	r3, [r7, #8]
   return(result);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800708c:	61fb      	str	r3, [r7, #28]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	61bb      	str	r3, [r7, #24]
 8007098:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	6979      	ldr	r1, [r7, #20]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	613b      	str	r3, [r7, #16]
   return(result);
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e6      	bne.n	8007078 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2220      	movs	r2, #32
 80070ae:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7ff fb02 	bl	80066c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070bc:	bf00      	nop
 80070be:	3720      	adds	r7, #32
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b09c      	sub	sp, #112	@ 0x70
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070dc:	2b22      	cmp	r3, #34	@ 0x22
 80070de:	f040 80b9 	bne.w	8007254 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80070e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80070f0:	b2d9      	uxtb	r1, r3
 80070f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070fc:	400a      	ands	r2, r1
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007112:	b29b      	uxth	r3, r3
 8007114:	3b01      	subs	r3, #1
 8007116:	b29a      	uxth	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	f040 809c 	bne.w	8007264 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800713a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800713c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007140:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800714a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800714c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007150:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e6      	bne.n	800712c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3308      	adds	r3, #8
 8007164:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800716e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007170:	f023 0301 	bic.w	r3, r3, #1
 8007174:	667b      	str	r3, [r7, #100]	@ 0x64
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3308      	adds	r3, #8
 800717c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800717e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007180:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800718c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e5      	bne.n	800715e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2220      	movs	r2, #32
 8007196:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d018      	beq.n	80071e6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	623b      	str	r3, [r7, #32]
   return(result);
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80071c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80071d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e6      	bne.n	80071b4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d12e      	bne.n	800724c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	e853 3f00 	ldrex	r3, [r3]
 8007200:	60fb      	str	r3, [r7, #12]
   return(result);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f023 0310 	bic.w	r3, r3, #16
 8007208:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007212:	61fb      	str	r3, [r7, #28]
 8007214:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	69b9      	ldr	r1, [r7, #24]
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	617b      	str	r3, [r7, #20]
   return(result);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e6      	bne.n	80071f4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	f003 0310 	and.w	r3, r3, #16
 8007230:	2b10      	cmp	r3, #16
 8007232:	d103      	bne.n	800723c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2210      	movs	r2, #16
 800723a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7fa fcb5 	bl	8001bb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800724a:	e00b      	b.n	8007264 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff fa41 	bl	80066d4 <HAL_UART_RxCpltCallback>
}
 8007252:	e007      	b.n	8007264 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0208 	orr.w	r2, r2, #8
 8007262:	619a      	str	r2, [r3, #24]
}
 8007264:	bf00      	nop
 8007266:	3770      	adds	r7, #112	@ 0x70
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b09c      	sub	sp, #112	@ 0x70
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800727a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007284:	2b22      	cmp	r3, #34	@ 0x22
 8007286:	f040 80b9 	bne.w	80073fc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007290:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007298:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800729a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800729e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80072a2:	4013      	ands	r3, r2
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ae:	1c9a      	adds	r2, r3, #2
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	3b01      	subs	r3, #1
 80072be:	b29a      	uxth	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f040 809c 	bne.w	800740c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80072e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80072f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80072f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e6      	bne.n	80072d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3308      	adds	r3, #8
 800730c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	f023 0301 	bic.w	r3, r3, #1
 800731c:	663b      	str	r3, [r7, #96]	@ 0x60
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3308      	adds	r3, #8
 8007324:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007326:	643a      	str	r2, [r7, #64]	@ 0x40
 8007328:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800732c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e5      	bne.n	8007306 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2220      	movs	r2, #32
 800733e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d018      	beq.n	800738e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	61fb      	str	r3, [r7, #28]
   return(result);
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007370:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800737a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800737c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e6      	bne.n	800735c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007392:	2b01      	cmp	r3, #1
 8007394:	d12e      	bne.n	80073f4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f023 0310 	bic.w	r3, r3, #16
 80073b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073ba:	61bb      	str	r3, [r7, #24]
 80073bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6979      	ldr	r1, [r7, #20]
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	613b      	str	r3, [r7, #16]
   return(result);
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e6      	bne.n	800739c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	f003 0310 	and.w	r3, r3, #16
 80073d8:	2b10      	cmp	r3, #16
 80073da:	d103      	bne.n	80073e4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2210      	movs	r2, #16
 80073e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7fa fbe1 	bl	8001bb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073f2:	e00b      	b.n	800740c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7ff f96d 	bl	80066d4 <HAL_UART_RxCpltCallback>
}
 80073fa:	e007      	b.n	800740c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0208 	orr.w	r2, r2, #8
 800740a:	619a      	str	r2, [r3, #24]
}
 800740c:	bf00      	nop
 800740e:	3770      	adds	r7, #112	@ 0x70
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08c      	sub	sp, #48	@ 0x30
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	4613      	mov	r3, r2
 8007434:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007442:	2b20      	cmp	r3, #32
 8007444:	d13b      	bne.n	80074be <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e034      	b.n	80074c0 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2201      	movs	r2, #1
 800745a:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8007462:	88fb      	ldrh	r3, [r7, #6]
 8007464:	461a      	mov	r2, r3
 8007466:	68b9      	ldr	r1, [r7, #8]
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff fcd3 	bl	8006e14 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007472:	2b01      	cmp	r3, #1
 8007474:	d11d      	bne.n	80074b2 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2210      	movs	r2, #16
 800747c:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	e853 3f00 	ldrex	r3, [r3]
 800748a:	617b      	str	r3, [r7, #20]
   return(result);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f043 0310 	orr.w	r3, r3, #16
 8007492:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	461a      	mov	r2, r3
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	627b      	str	r3, [r7, #36]	@ 0x24
 800749e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a0:	6a39      	ldr	r1, [r7, #32]
 80074a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074a4:	e841 2300 	strex	r3, r2, [r1]
 80074a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e6      	bne.n	800747e <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80074b0:	e002      	b.n	80074b8 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80074b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80074bc:	e000      	b.n	80074c0 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80074be:	2302      	movs	r3, #2
  }
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3730      	adds	r7, #48	@ 0x30
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80074cc:	4904      	ldr	r1, [pc, #16]	@ (80074e0 <MX_FATFS_Init+0x18>)
 80074ce:	4805      	ldr	r0, [pc, #20]	@ (80074e4 <MX_FATFS_Init+0x1c>)
 80074d0:	f000 f8b2 	bl	8007638 <FATFS_LinkDriver>
 80074d4:	4603      	mov	r3, r0
 80074d6:	461a      	mov	r2, r3
 80074d8:	4b03      	ldr	r3, [pc, #12]	@ (80074e8 <MX_FATFS_Init+0x20>)
 80074da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80074dc:	bf00      	nop
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20000ce0 	.word	0x20000ce0
 80074e4:	20000010 	.word	0x20000010
 80074e8:	20000cdc 	.word	0x20000cdc

080074ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	4603      	mov	r3, r0
 80074f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 80074f6:	79fb      	ldrb	r3, [r7, #7]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7f9 fdc5 	bl	8001088 <SD_disk_initialize>
 80074fe:	4603      	mov	r3, r0
 8007500:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	4603      	mov	r3, r0
 8007512:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	4618      	mov	r0, r3
 8007518:	f7f9 fea0 	bl	800125c <SD_disk_status>
 800751c:	4603      	mov	r3, r0
 800751e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	607a      	str	r2, [r7, #4]
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	4603      	mov	r3, r0
 8007536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8007538:	7bf8      	ldrb	r0, [r7, #15]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	f7f9 fea2 	bl	8001288 <SD_disk_read>
 8007544:	4603      	mov	r3, r0
 8007546:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	607a      	str	r2, [r7, #4]
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	4603      	mov	r3, r0
 800755e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8007560:	7bf8      	ldrb	r0, [r7, #15]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	68b9      	ldr	r1, [r7, #8]
 8007568:	f7f9 fef8 	bl	800135c <SD_disk_write>
 800756c:	4603      	mov	r3, r0
 800756e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	603a      	str	r2, [r7, #0]
 8007582:	71fb      	strb	r3, [r7, #7]
 8007584:	460b      	mov	r3, r1
 8007586:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	79b9      	ldrb	r1, [r7, #6]
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	f7f9 ff68 	bl	8001464 <SD_disk_ioctl>
 8007594:	4603      	mov	r3, r0
 8007596:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	4613      	mov	r3, r2
 80075ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80075ae:	2301      	movs	r3, #1
 80075b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80075b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075b8:	7a5b      	ldrb	r3, [r3, #9]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d831      	bhi.n	8007624 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80075c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075c2:	7a5b      	ldrb	r3, [r3, #9]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	461a      	mov	r2, r3
 80075c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075ca:	2100      	movs	r1, #0
 80075cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80075ce:	4b19      	ldr	r3, [pc, #100]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075d0:	7a5b      	ldrb	r3, [r3, #9]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	4a17      	ldr	r2, [pc, #92]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80075de:	4b15      	ldr	r3, [pc, #84]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075e0:	7a5b      	ldrb	r3, [r3, #9]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	4b13      	ldr	r3, [pc, #76]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075e8:	4413      	add	r3, r2
 80075ea:	79fa      	ldrb	r2, [r7, #7]
 80075ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80075ee:	4b11      	ldr	r3, [pc, #68]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075f0:	7a5b      	ldrb	r3, [r3, #9]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	b2d1      	uxtb	r1, r2
 80075f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007634 <FATFS_LinkDriverEx+0x94>)
 80075fa:	7251      	strb	r1, [r2, #9]
 80075fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80075fe:	7dbb      	ldrb	r3, [r7, #22]
 8007600:	3330      	adds	r3, #48	@ 0x30
 8007602:	b2da      	uxtb	r2, r3
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	3301      	adds	r3, #1
 800760c:	223a      	movs	r2, #58	@ 0x3a
 800760e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	3302      	adds	r3, #2
 8007614:	222f      	movs	r2, #47	@ 0x2f
 8007616:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	3303      	adds	r3, #3
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007624:	7dfb      	ldrb	r3, [r7, #23]
}
 8007626:	4618      	mov	r0, r3
 8007628:	371c      	adds	r7, #28
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20000ce4 	.word	0x20000ce4

08007638 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007642:	2200      	movs	r2, #0
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff ffaa 	bl	80075a0 <FATFS_LinkDriverEx>
 800764c:	4603      	mov	r3, r0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <Screen_begin>:
    [CONDITION_YEAR]     = {.String_Name = "YEAR", .String_Unit = "yr"},
    [CONDITION_HOUR]     = {.String_Name = "HOUR", .String_Unit = "h"},
    [CONDITION_MINUTE]   = {.String_Name = "MINUTE", .String_Unit = "min"}
};

void Screen_begin(UART_HandleTypeDef * UART_Screen) {
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
    // Init _DWIN UART
	_Screen.Screen_DWIN.pUart = UART_Screen;
 8007660:	4a38      	ldr	r2, [pc, #224]	@ (8007744 <Screen_begin+0xec>)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6013      	str	r3, [r2, #0]

    // add receive function callback
	Screen_init_handler_table(&_Screen);
 8007666:	4837      	ldr	r0, [pc, #220]	@ (8007744 <Screen_begin+0xec>)
 8007668:	f002 fc64 	bl	8009f34 <Screen_init_handler_table>
    DWIN_SetCallback((Dwin_t *)&_Screen,(pListenDWIN)Screen_RX_Callback);
 800766c:	4936      	ldr	r1, [pc, #216]	@ (8007748 <Screen_begin+0xf0>)
 800766e:	4835      	ldr	r0, [pc, #212]	@ (8007744 <Screen_begin+0xec>)
 8007670:	f006 fcd9 	bl	800e026 <DWIN_SetCallback>

    Screen_Init_Variable(&_Screen);
 8007674:	4833      	ldr	r0, [pc, #204]	@ (8007744 <Screen_begin+0xec>)
 8007676:	f002 ff37 	bl	800a4e8 <Screen_Init_Variable>

    // Init screen keyboard     
    _Screen.Screen_keyboard.VP_Text = 0xFFFF;
 800767a:	4b32      	ldr	r3, [pc, #200]	@ (8007744 <Screen_begin+0xec>)
 800767c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007680:	819a      	strh	r2, [r3, #12]
    _Screen.Screen_keyboard.Index_String = 0;
 8007682:	4b30      	ldr	r3, [pc, #192]	@ (8007744 <Screen_begin+0xec>)
 8007684:	2200      	movs	r2, #0
 8007686:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    _Screen.Screen_keyboard.Caplock = 0;
 800768a:	4b2e      	ldr	r3, [pc, #184]	@ (8007744 <Screen_begin+0xec>)
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    _Screen.pre_page = 106;
 8007692:	4b2c      	ldr	r3, [pc, #176]	@ (8007744 <Screen_begin+0xec>)
 8007694:	226a      	movs	r2, #106	@ 0x6a
 8007696:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    _Screen.Ishome = true;
 800769a:	4b2a      	ldr	r3, [pc, #168]	@ (8007744 <Screen_begin+0xec>)
 800769c:	2201      	movs	r2, #1
 800769e:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec

    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST1].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST1]));
 80076a2:	4b28      	ldr	r3, [pc, #160]	@ (8007744 <Screen_begin+0xec>)
 80076a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80076a8:	4928      	ldr	r1, [pc, #160]	@ (800774c <Screen_begin+0xf4>)
 80076aa:	4618      	mov	r0, r3
 80076ac:	f003 fa1c 	bl	800aae8 <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST2].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST2]));
 80076b0:	4b24      	ldr	r3, [pc, #144]	@ (8007744 <Screen_begin+0xec>)
 80076b2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 80076b6:	4926      	ldr	r1, [pc, #152]	@ (8007750 <Screen_begin+0xf8>)
 80076b8:	4618      	mov	r0, r3
 80076ba:	f003 fa15 	bl	800aae8 <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST3].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST3]));
 80076be:	4b21      	ldr	r3, [pc, #132]	@ (8007744 <Screen_begin+0xec>)
 80076c0:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 80076c4:	4923      	ldr	r1, [pc, #140]	@ (8007754 <Screen_begin+0xfc>)
 80076c6:	4618      	mov	r0, r3
 80076c8:	f003 fa0e 	bl	800aae8 <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST4].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST4]));
 80076cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007744 <Screen_begin+0xec>)
 80076ce:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80076d2:	4921      	ldr	r1, [pc, #132]	@ (8007758 <Screen_begin+0x100>)
 80076d4:	4618      	mov	r0, r3
 80076d6:	f003 fa07 	bl	800aae8 <get_data_testing_ic>

    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x11D0,2);
 80076da:	2202      	movs	r2, #2
 80076dc:	f241 11d0 	movw	r1, #4560	@ 0x11d0
 80076e0:	4818      	ldr	r0, [pc, #96]	@ (8007744 <Screen_begin+0xec>)
 80076e2:	f006 fb92 	bl	800de0a <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x13D0,2);
 80076e6:	2202      	movs	r2, #2
 80076e8:	f241 31d0 	movw	r1, #5072	@ 0x13d0
 80076ec:	4815      	ldr	r0, [pc, #84]	@ (8007744 <Screen_begin+0xec>)
 80076ee:	f006 fb8c 	bl	800de0a <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x15D0,2);
 80076f2:	2202      	movs	r2, #2
 80076f4:	f241 51d0 	movw	r1, #5584	@ 0x15d0
 80076f8:	4812      	ldr	r0, [pc, #72]	@ (8007744 <Screen_begin+0xec>)
 80076fa:	f006 fb86 	bl	800de0a <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x17D0,2);
 80076fe:	2202      	movs	r2, #2
 8007700:	f241 71d0 	movw	r1, #6096	@ 0x17d0
 8007704:	480f      	ldr	r0, [pc, #60]	@ (8007744 <Screen_begin+0xec>)
 8007706:	f006 fb80 	bl	800de0a <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x19D0,2);
 800770a:	2202      	movs	r2, #2
 800770c:	f641 11d0 	movw	r1, #6608	@ 0x19d0
 8007710:	480c      	ldr	r0, [pc, #48]	@ (8007744 <Screen_begin+0xec>)
 8007712:	f006 fb7a 	bl	800de0a <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1BD0,2);
 8007716:	2202      	movs	r2, #2
 8007718:	f641 31d0 	movw	r1, #7120	@ 0x1bd0
 800771c:	4809      	ldr	r0, [pc, #36]	@ (8007744 <Screen_begin+0xec>)
 800771e:	f006 fb74 	bl	800de0a <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1DD0,2);
 8007722:	2202      	movs	r2, #2
 8007724:	f641 51d0 	movw	r1, #7632	@ 0x1dd0
 8007728:	4806      	ldr	r0, [pc, #24]	@ (8007744 <Screen_begin+0xec>)
 800772a:	f006 fb6e 	bl	800de0a <DWIN_SetWidth_Basic_line>

    DWIN_SetPage((Dwin_t *)&_Screen,DWINPAGE_MAIN);  // Go to first page when start
 800772e:	2165      	movs	r1, #101	@ 0x65
 8007730:	4804      	ldr	r0, [pc, #16]	@ (8007744 <Screen_begin+0xec>)
 8007732:	f006 f807 	bl	800d744 <DWIN_SetPage>
    printf("Init screen done\n");
 8007736:	4809      	ldr	r0, [pc, #36]	@ (800775c <Screen_begin+0x104>)
 8007738:	f008 ffd0 	bl	80106dc <puts>
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000cf0 	.word	0x20000cf0
 8007748:	0800777d 	.word	0x0800777d
 800774c:	200010c8 	.word	0x200010c8
 8007750:	200010f8 	.word	0x200010f8
 8007754:	20001128 	.word	0x20001128
 8007758:	20001158 	.word	0x20001158
 800775c:	08013ad8 	.word	0x08013ad8

08007760 <Screen_RX_data>:

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 8007768:	6879      	ldr	r1, [r7, #4]
 800776a:	4803      	ldr	r0, [pc, #12]	@ (8007778 <Screen_RX_data+0x18>)
 800776c:	f006 fc69 	bl	800e042 <DWIN_Listen>
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	20000cf0 	.word	0x20000cf0

0800777c <Screen_RX_Callback>:

void Screen_RX_Callback(uint16_t Vpaddress, uint8_t lowByte, uint8_t highByte) { 
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	80fb      	strh	r3, [r7, #6]
 8007786:	460b      	mov	r3, r1
 8007788:	717b      	strb	r3, [r7, #5]
 800778a:	4613      	mov	r3, r2
 800778c:	713b      	strb	r3, [r7, #4]
    screen_event_t screen_event;
    // If the VP is FFFF -> skip
    if (Vpaddress != 0xFFFF) {
 800778e:	88fb      	ldrh	r3, [r7, #6]
 8007790:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007794:	4293      	cmp	r3, r2
 8007796:	d01b      	beq.n	80077d0 <Screen_RX_Callback+0x54>
        screen_event.event = Index_VP(Vpaddress,lookup_VP_SIG,SIZE_LOOKUP_VP_SIG);
 8007798:	88fb      	ldrh	r3, [r7, #6]
 800779a:	2207      	movs	r2, #7
 800779c:	490e      	ldr	r1, [pc, #56]	@ (80077d8 <Screen_RX_Callback+0x5c>)
 800779e:	4618      	mov	r0, r3
 80077a0:	f002 fb8b 	bl	8009eba <Index_VP>
 80077a4:	4603      	mov	r3, r0
 80077a6:	723b      	strb	r3, [r7, #8]
        screen_event.action = lowByte;
 80077a8:	797b      	ldrb	r3, [r7, #5]
 80077aa:	727b      	strb	r3, [r7, #9]
        screen_event.data = highByte;
 80077ac:	793b      	ldrb	r3, [r7, #4]
 80077ae:	72bb      	strb	r3, [r7, #10]
        screen_event.keyvalue = (uint16_t)((highByte<<8) | (lowByte&0xFF));
 80077b0:	793b      	ldrb	r3, [r7, #4]
 80077b2:	b21b      	sxth	r3, r3
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	b21a      	sxth	r2, r3
 80077b8:	797b      	ldrb	r3, [r7, #5]
 80077ba:	b21b      	sxth	r3, r3
 80077bc:	4313      	orrs	r3, r2
 80077be:	b21b      	sxth	r3, r3
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	81bb      	strh	r3, [r7, #12]

        // call to respective function
        Screen_excute_RX_function(&_Screen,&screen_event);
 80077c4:	f107 0308 	add.w	r3, r7, #8
 80077c8:	4619      	mov	r1, r3
 80077ca:	4804      	ldr	r0, [pc, #16]	@ (80077dc <Screen_RX_Callback+0x60>)
 80077cc:	f002 fc72 	bl	800a0b4 <Screen_excute_RX_function>
    }
}
 80077d0:	bf00      	nop
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20000024 	.word	0x20000024
 80077dc:	20000cf0 	.word	0x20000cf0

080077e0 <Navigation_setting_page>:


#pragma region CALLBACK FUNCTION VP ADRRESS 

void Navigation_setting_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
 80077ea:	2174      	movs	r1, #116	@ 0x74
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f005 ffa9 	bl	800d744 <DWIN_SetPage>
    
    DWIN_ClearText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard);
 80077f2:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f006 f83a 	bl	800d870 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password);
 80077fc:	f249 5180 	movw	r1, #38272	@ 0x9580
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f006 f835 	bl	800d870 <DWIN_ClearText>
    screen_obj->Ishome = false;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <Navigation_home_page>:

void Navigation_home_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
    uint8_t current_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007826:	4619      	mov	r1, r3
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800782e:	fb01 f303 	mul.w	r3, r1, r3
 8007832:	4413      	add	r3, r2
 8007834:	334b      	adds	r3, #75	@ 0x4b
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	73fb      	strb	r3, [r7, #15]
    UNUSED(current_program);
    // Show data

    // Switch page
    screen_obj->Ishome = true;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,PROGRAM_TEST1);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007848:	4619      	mov	r1, r3
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	4413      	add	r3, r2
 8007856:	3349      	adds	r3, #73	@ 0x49
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2200      	movs	r2, #0
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f004 fcea 	bl	800c238 <show_main_page>
    // DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain);
}   
 8007864:	bf00      	nop
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <Navigation_return>:

void Navigation_return(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
    if (screen_obj->Ishome) {
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 800787c:	2b00      	cmp	r3, #0
 800787e:	d010      	beq.n	80078a2 <Navigation_return+0x36>
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007886:	4619      	mov	r1, r3
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800788e:	fb01 f303 	mul.w	r3, r1, r3
 8007892:	4413      	add	r3, r2
 8007894:	3349      	adds	r3, #73	@ 0x49
 8007896:	2265      	movs	r2, #101	@ 0x65
 8007898:	701a      	strb	r2, [r3, #0]
        off_testing(screen_obj);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f003 ff9c 	bl	800b7d8 <off_testing>
        // show_main_page(screen_obj,DWINPAGE_MAIN,screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index);
    } else {
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page);
    }
}
 80078a0:	e006      	b.n	80078b0 <Navigation_return+0x44>
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f005 ff4a 	bl	800d744 <DWIN_SetPage>
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <Navigation_setting_program>:

void Navigation_setting_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]

    // Switch page
    // DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
    /* Get the setting page */
    screen_obj->page_setting = DWINPAGE_SETTING_PROGRAM;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	226b      	movs	r2, #107	@ 0x6b
 80078c6:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
    // Switch page password 
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password,"",strlen(""));
 80078ca:	2300      	movs	r3, #0
 80078cc:	4a09      	ldr	r2, [pc, #36]	@ (80078f4 <Navigation_setting_program+0x3c>)
 80078ce:	f249 5160 	movw	r1, #38240	@ 0x9560
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f005 ff5d 	bl	800d792 <DWIN_SetText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password);
 80078d8:	f249 5180 	movw	r1, #38272	@ 0x9580
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f005 ffc7 	bl	800d870 <DWIN_ClearText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 80078e2:	216e      	movs	r1, #110	@ 0x6e
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f005 ff2d 	bl	800d744 <DWIN_SetPage>
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	08013aec 	.word	0x08013aec

080078f8 <Navigation_setting_time>:

void Navigation_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
    
    screen_obj->pre_page = DWINPAGE_SETTING_TIME;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2276      	movs	r2, #118	@ 0x76
 8007906:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    /* clear text */
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Hour);
 800790a:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f005 ffae 	bl	800d870 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Minute);
 8007914:	f249 0110 	movw	r1, #36880	@ 0x9010
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f005 ffa9 	bl	800d870 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Day);
 800791e:	f249 0120 	movw	r1, #36896	@ 0x9020
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f005 ffa4 	bl	800d870 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Month);
 8007928:	f249 0130 	movw	r1, #36912	@ 0x9030
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f005 ff9f 	bl	800d870 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Year);
 8007932:	f249 0140 	movw	r1, #36928	@ 0x9040
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f005 ff9a 	bl	800d870 <DWIN_ClearText>
    memset(screen_obj->Time_setting.Day,0,3);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 8007942:	2203      	movs	r2, #3
 8007944:	2100      	movs	r1, #0
 8007946:	4618      	mov	r0, r3
 8007948:	f009 f83e 	bl	80109c8 <memset>
    memset(screen_obj->Time_setting.Minute,0,3);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f503 639c 	add.w	r3, r3, #1248	@ 0x4e0
 8007952:	2203      	movs	r2, #3
 8007954:	2100      	movs	r1, #0
 8007956:	4618      	mov	r0, r3
 8007958:	f009 f836 	bl	80109c8 <memset>
    memset(screen_obj->Time_setting.Month,0,3);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f203 43d7 	addw	r3, r3, #1239	@ 0x4d7
 8007962:	2203      	movs	r2, #3
 8007964:	2100      	movs	r1, #0
 8007966:	4618      	mov	r0, r3
 8007968:	f009 f82e 	bl	80109c8 <memset>
    memset(screen_obj->Time_setting.Year,0,3);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f203 43da 	addw	r3, r3, #1242	@ 0x4da
 8007972:	2203      	movs	r2, #3
 8007974:	2100      	movs	r1, #0
 8007976:	4618      	mov	r0, r3
 8007978:	f009 f826 	bl	80109c8 <memset>
    memset(screen_obj->Time_setting.Hour,0,3);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f203 43dd 	addw	r3, r3, #1245	@ 0x4dd
 8007982:	2203      	movs	r2, #3
 8007984:	2100      	movs	r1, #0
 8007986:	4618      	mov	r0, r3
 8007988:	f009 f81e 	bl	80109c8 <memset>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_setting_time);
 800798c:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f005 ff6d 	bl	800d870 <DWIN_ClearText>
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_TIME);
 8007996:	2176      	movs	r1, #118	@ 0x76
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f005 fed3 	bl	800d744 <DWIN_SetPage>
}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <Navigation_setting_wifi>:

void Navigation_setting_wifi(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80079a6:	b590      	push	{r4, r7, lr}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	6039      	str	r1, [r7, #0]
    screen_obj->pre_page = DWINPAGE_SETTING_WIFI;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2275      	movs	r2, #117	@ 0x75
 80079b4:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    /* show data */
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Wifi,screen_obj->Wifi_setting.Name_Wifi,strlen(screen_obj->Wifi_setting.Name_Wifi));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f503 6493 	add.w	r4, r3, #1176	@ 0x498
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f503 6393 	add.w	r3, r3, #1176	@ 0x498
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7f8 fc63 	bl	8000290 <strlen>
 80079ca:	4603      	mov	r3, r0
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	4622      	mov	r2, r4
 80079d0:	f249 51a0 	movw	r1, #38304	@ 0x95a0
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f005 fedc 	bl	800d792 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password_Wifi,screen_obj->Wifi_setting.Password_Wifi,strlen(screen_obj->Wifi_setting.Password_Wifi));
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f203 44b6 	addw	r4, r3, #1206	@ 0x4b6
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f203 43b6 	addw	r3, r3, #1206	@ 0x4b6
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7f8 fc52 	bl	8000290 <strlen>
 80079ec:	4603      	mov	r3, r0
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	4622      	mov	r2, r4
 80079f2:	f249 51d0 	movw	r1, #38352	@ 0x95d0
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f005 fecb 	bl	800d792 <DWIN_SetText>

    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 80079fc:	2175      	movs	r1, #117	@ 0x75
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f005 fea0 	bl	800d744 <DWIN_SetPage>
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd90      	pop	{r4, r7, pc}

08007a0c <Navigation_modify_program>:

void Navigation_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007a0c:	b590      	push	{r4, r7, lr}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
    screen_obj->pre_page = DWINPAGE_MODIFY_PROGRAM;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	226c      	movs	r2, #108	@ 0x6c
 8007a1a:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_Program_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8007a24:	4619      	mov	r1, r3
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	440b      	add	r3, r1
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8007a36:	681c      	ldr	r4, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8007a3e:	4619      	mov	r1, r3
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	460b      	mov	r3, r1
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	440b      	add	r3, r1
 8007a48:	011b      	lsls	r3, r3, #4
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7f8 fc1c 	bl	8000290 <strlen>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	f44f 4115 	mov.w	r1, #38144	@ 0x9500
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f005 fe95 	bl	800d792 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8007a6e:	4619      	mov	r1, r3
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	460b      	mov	r3, r1
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	440b      	add	r3, r1
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8007a80:	681c      	ldr	r4, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8007a88:	4619      	mov	r1, r3
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	440b      	add	r3, r1
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7f8 fbf7 	bl	8000290 <strlen>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	4622      	mov	r2, r4
 8007aa8:	f249 5120 	movw	r1, #38176	@ 0x9520
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f005 fe70 	bl	800d792 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8007ab8:	4619      	mov	r1, r3
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	440b      	add	r3, r1
 8007ac2:	011b      	lsls	r3, r3, #4
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8007aca:	681c      	ldr	r4, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	440b      	add	r3, r1
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7f8 fbd2 	bl	8000290 <strlen>
 8007aec:	4603      	mov	r3, r0
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	4622      	mov	r2, r4
 8007af2:	f249 5140 	movw	r1, #38208	@ 0x9540
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f005 fe4b 	bl	800d792 <DWIN_SetText>
    
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_modify_program);
 8007afc:	f24a 0150 	movw	r1, #41040	@ 0xa050
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f005 feb5 	bl	800d870 <DWIN_ClearText>
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 8007b06:	216c      	movs	r1, #108	@ 0x6c
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f005 fe1b 	bl	800d744 <DWIN_SetPage>
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd90      	pop	{r4, r7, pc}

08007b16 <Navigation_detail_mainpage>:

void Navigation_detail_mainpage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b082      	sub	sp, #8
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
    if (screen_obj->IC_Testerx[screen_obj->curr_device].isShort == '0') {
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007b26:	4619      	mov	r1, r3
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007b2e:	fb01 f303 	mul.w	r3, r1, r3
 8007b32:	4413      	add	r3, r2
 8007b34:	336c      	adds	r3, #108	@ 0x6c
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2b30      	cmp	r3, #48	@ 0x30
 8007b3a:	d11d      	bne.n	8007b78 <Navigation_detail_mainpage+0x62>
        /* change main page */
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN_DETAIL;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007b42:	4619      	mov	r1, r3
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007b4a:	fb01 f303 	mul.w	r3, r1, r3
 8007b4e:	4413      	add	r3, r2
 8007b50:	3349      	adds	r3, #73	@ 0x49
 8007b52:	2266      	movs	r2, #102	@ 0x66
 8007b54:	701a      	strb	r2, [r3, #0]
        // Switch page
        show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,(uint8_t)0);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007b64:	fb01 f303 	mul.w	r3, r1, r3
 8007b68:	4413      	add	r3, r2
 8007b6a:	3349      	adds	r3, #73	@ 0x49
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f004 fb60 	bl	800c238 <show_main_page>
    }
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <Navigation_graph_mainpage>:

void Navigation_graph_mainpage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
    /* change main page */
    screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN_PULSE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007b90:	4619      	mov	r1, r3
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007b98:	fb01 f303 	mul.w	r3, r1, r3
 8007b9c:	4413      	add	r3, r2
 8007b9e:	3349      	adds	r3, #73	@ 0x49
 8007ba0:	2267      	movs	r2, #103	@ 0x67
 8007ba2:	701a      	strb	r2, [r3, #0]
    // Switch page
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,(uint8_t)0);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007baa:	4619      	mov	r1, r3
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007bb2:	fb01 f303 	mul.w	r3, r1, r3
 8007bb6:	4413      	add	r3, r2
 8007bb8:	3349      	adds	r3, #73	@ 0x49
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f004 fb39 	bl	800c238 <show_main_page>
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <Navigation_Change_MainPage>:

void Navigation_Change_MainPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
    // Change current device
    if (screen_event->data == DATA_NEXT_MAINPAGE) {
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	789b      	ldrb	r3, [r3, #2]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d111      	bne.n	8007c04 <Navigation_Change_MainPage+0x36>
        screen_obj->curr_device++;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007be6:	3301      	adds	r3, #1
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
        if (screen_obj->curr_device == MAX_DEVICE) {
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d119      	bne.n	8007c2e <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
 8007c02:	e014      	b.n	8007c2e <Navigation_Change_MainPage+0x60>
        }
    } else if (screen_event->data == DATA_PREV_MAINPAGE) {
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	789b      	ldrb	r3, [r3, #2]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d110      	bne.n	8007c2e <Navigation_Change_MainPage+0x60>
        screen_obj->curr_device--;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
        if (screen_obj->curr_device == 255 ) {
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007c22:	2bff      	cmp	r3, #255	@ 0xff
 8007c24:	d103      	bne.n	8007c2e <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_3;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
        }
    }
    uint8_t curr_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007c34:	4619      	mov	r1, r3
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007c3c:	fb01 f303 	mul.w	r3, r1, r3
 8007c40:	4413      	add	r3, r2
 8007c42:	334b      	adds	r3, #75	@ 0x4b
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	73fb      	strb	r3, [r7, #15]

    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,curr_program);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007c4e:	4619      	mov	r1, r3
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007c56:	fb01 f303 	mul.w	r3, r1, r3
 8007c5a:	4413      	add	r3, r2
 8007c5c:	3349      	adds	r3, #73	@ 0x49
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	7bfa      	ldrb	r2, [r7, #15]
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f004 fae7 	bl	800c238 <show_main_page>
}
 8007c6a:	bf00      	nop
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <Navigation_Change_CaseTest>:

void Navigation_Change_CaseTest(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08e      	sub	sp, #56	@ 0x38
 8007c78:	af02      	add	r7, sp, #8
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007c84:	4619      	mov	r1, r3
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007c8c:	fb01 f303 	mul.w	r3, r1, r3
 8007c90:	4413      	add	r3, r2
 8007c92:	334b      	adds	r3, #75	@ 0x4b
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	4619      	mov	r1, r3
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	440b      	add	r3, r1
 8007ca0:	011b      	lsls	r3, r3, #4
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007cbc:	fb01 f303 	mul.w	r3, r1, r3
 8007cc0:	4413      	add	r3, r2
 8007cc2:	334b      	adds	r3, #75	@ 0x4b
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 8007cca:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	4413      	add	r3, r2
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	440b      	add	r3, r1
 8007cda:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    
    // Change current case
    if (screen_event->data == DATA_PREV_CASE) {
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	789b      	ldrb	r3, [r3, #2]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d124      	bne.n	8007d36 <Navigation_Change_CaseTest+0xc2>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007cfa:	fb01 f303 	mul.w	r3, r1, r3
 8007cfe:	4413      	add	r3, r2
 8007d00:	3348      	adds	r3, #72	@ 0x48
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d042      	beq.n	8007d8e <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8007d14:	fb03 f202 	mul.w	r2, r3, r2
 8007d18:	440a      	add	r2, r1
 8007d1a:	3248      	adds	r2, #72	@ 0x48
 8007d1c:	7812      	ldrb	r2, [r2, #0]
 8007d1e:	3a01      	subs	r2, #1
 8007d20:	b2d0      	uxtb	r0, r2
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8007d28:	fb01 f303 	mul.w	r3, r1, r3
 8007d2c:	4413      	add	r3, r2
 8007d2e:	3348      	adds	r3, #72	@ 0x48
 8007d30:	4602      	mov	r2, r0
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	e02b      	b.n	8007d8e <Navigation_Change_CaseTest+0x11a>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	789b      	ldrb	r3, [r3, #2]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d127      	bne.n	8007d8e <Navigation_Change_CaseTest+0x11a>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < (num_case - 1)) {
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007d44:	4619      	mov	r1, r3
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	4413      	add	r3, r2
 8007d52:	3348      	adds	r3, #72	@ 0x48
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	da15      	bge.n	8007d8e <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8007d6e:	fb03 f202 	mul.w	r2, r3, r2
 8007d72:	440a      	add	r2, r1
 8007d74:	3248      	adds	r2, #72	@ 0x48
 8007d76:	7812      	ldrb	r2, [r2, #0]
 8007d78:	3201      	adds	r2, #1
 8007d7a:	b2d0      	uxtb	r0, r2
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8007d82:	fb01 f303 	mul.w	r3, r1, r3
 8007d86:	4413      	add	r3, r2
 8007d88:	3348      	adds	r3, #72	@ 0x48
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	701a      	strb	r2, [r3, #0]
        }
    }

    /* Show data */
    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1,num_case);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007d94:	4619      	mov	r1, r3
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007d9c:	fb01 f303 	mul.w	r3, r1, r3
 8007da0:	4413      	add	r3, r2
 8007da2:	3348      	adds	r3, #72	@ 0x48
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007dac:	f107 000c 	add.w	r0, r7, #12
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	4613      	mov	r3, r2
 8007db4:	4a32      	ldr	r2, [pc, #200]	@ (8007e80 <Navigation_Change_CaseTest+0x20c>)
 8007db6:	211e      	movs	r1, #30
 8007db8:	f008 fc98 	bl	80106ec <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 8007dbc:	f107 030c 	add.w	r3, r7, #12
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7f8 fa65 	bl	8000290 <strlen>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f107 020c 	add.w	r2, r7, #12
 8007dce:	f249 3180 	movw	r1, #37760	@ 0x9380
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f005 fcdd 	bl	800d792 <DWIN_SetText>
    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case] == '0') {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007dde:	4619      	mov	r1, r3
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007de6:	fb01 f303 	mul.w	r3, r1, r3
 8007dea:	4413      	add	r3, r2
 8007dec:	3370      	adds	r3, #112	@ 0x70
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	f892 24e9 	ldrb.w	r2, [r2, #1257]	@ 0x4e9
 8007df6:	4610      	mov	r0, r2
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8007dfe:	fb00 f202 	mul.w	r2, r0, r2
 8007e02:	440a      	add	r2, r1
 8007e04:	3248      	adds	r2, #72	@ 0x48
 8007e06:	7812      	ldrb	r2, [r2, #0]
 8007e08:	4413      	add	r3, r2
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b30      	cmp	r3, #48	@ 0x30
 8007e0e:	d107      	bne.n	8007e20 <Navigation_Change_CaseTest+0x1ac>
        DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0xF800);
 8007e10:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8007e14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f005 fd3b 	bl	800d894 <DWIN_SetColorText>
 8007e1e:	e006      	b.n	8007e2e <Navigation_Change_CaseTest+0x1ba>
    } else {
        DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0x01ED);
 8007e20:	f240 12ed 	movw	r2, #493	@ 0x1ed
 8007e24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f005 fd33 	bl	800d894 <DWIN_SetColorText>
    }
    // DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_RESULT,_Screen.IC_Testerx[selectedProgram].data_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case],num_pin);
    DWIN_SetArray_Icon(screen_obj,VP_ICON_RESULT,&(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case * num_pin]),num_pin);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007e34:	4619      	mov	r1, r3
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007e3c:	fb01 f303 	mul.w	r3, r1, r3
 8007e40:	4413      	add	r3, r2
 8007e42:	3364      	adds	r3, #100	@ 0x64
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	f892 24e9 	ldrb.w	r2, [r2, #1257]	@ 0x4e9
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8007e54:	fb00 f202 	mul.w	r2, r0, r2
 8007e58:	440a      	add	r2, r1
 8007e5a:	3248      	adds	r2, #72	@ 0x48
 8007e5c:	7812      	ldrb	r2, [r2, #0]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007e64:	fb01 f202 	mul.w	r2, r1, r2
 8007e68:	441a      	add	r2, r3
 8007e6a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007e6e:	f244 1150 	movw	r1, #16720	@ 0x4150
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f005 fd6c 	bl	800d950 <DWIN_SetArray_Icon>
}
 8007e78:	bf00      	nop
 8007e7a:	3730      	adds	r7, #48	@ 0x30
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	08013af0 	.word	0x08013af0

08007e84 <Navigation_Change_CasePulse>:

void Navigation_Change_CasePulse(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
    if (screen_event->data == DATA_PREV_CASE) {
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	789b      	ldrb	r3, [r3, #2]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d124      	bne.n	8007ee0 <Navigation_Change_CasePulse+0x5c>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007ea4:	fb01 f303 	mul.w	r3, r1, r3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	3348      	adds	r3, #72	@ 0x48
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d03e      	beq.n	8007f30 <Navigation_Change_CasePulse+0xac>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8007ebe:	fb03 f202 	mul.w	r2, r3, r2
 8007ec2:	440a      	add	r2, r1
 8007ec4:	3248      	adds	r2, #72	@ 0x48
 8007ec6:	7812      	ldrb	r2, [r2, #0]
 8007ec8:	3a01      	subs	r2, #1
 8007eca:	b2d0      	uxtb	r0, r2
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8007ed2:	fb01 f303 	mul.w	r3, r1, r3
 8007ed6:	4413      	add	r3, r2
 8007ed8:	3348      	adds	r3, #72	@ 0x48
 8007eda:	4602      	mov	r2, r0
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e027      	b.n	8007f30 <Navigation_Change_CasePulse+0xac>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	789b      	ldrb	r3, [r3, #2]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d123      	bne.n	8007f30 <Navigation_Change_CasePulse+0xac>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < 1) {
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007eee:	4619      	mov	r1, r3
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007ef6:	fb01 f303 	mul.w	r3, r1, r3
 8007efa:	4413      	add	r3, r2
 8007efc:	3348      	adds	r3, #72	@ 0x48
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d115      	bne.n	8007f30 <Navigation_Change_CasePulse+0xac>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8007f10:	fb03 f202 	mul.w	r2, r3, r2
 8007f14:	440a      	add	r2, r1
 8007f16:	3248      	adds	r2, #72	@ 0x48
 8007f18:	7812      	ldrb	r2, [r2, #0]
 8007f1a:	3201      	adds	r2, #1
 8007f1c:	b2d0      	uxtb	r0, r2
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8007f24:	fb01 f303 	mul.w	r3, r1, r3
 8007f28:	4413      	add	r3, r2
 8007f2a:	3348      	adds	r3, #72	@ 0x48
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	701a      	strb	r2, [r3, #0]
        }
    }

    show_pulse(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_case);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007f36:	4619      	mov	r1, r3
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007f3e:	fb01 f303 	mul.w	r3, r1, r3
 8007f42:	4413      	add	r3, r2
 8007f44:	3348      	adds	r3, #72	@ 0x48
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f003 fd98 	bl	800ba80 <show_pulse>
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <Navigation_Finish_Review>:

void Navigation_Finish_Review(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8007f5e:	af02      	add	r7, sp, #8
 8007f60:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f64:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007f68:	6018      	str	r0, [r3, #0]
 8007f6a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f6e:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8007f72:	6019      	str	r1, [r3, #0]
    uint8_t curr_num_ic = ++screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic;
 8007f74:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f78:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007f82:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8007f86:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 8007f8a:	6811      	ldr	r1, [r2, #0]
 8007f8c:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8007f90:	fb03 f202 	mul.w	r2, r3, r2
 8007f94:	440a      	add	r2, r1
 8007f96:	324a      	adds	r2, #74	@ 0x4a
 8007f98:	7812      	ldrb	r2, [r2, #0]
 8007f9a:	3201      	adds	r2, #1
 8007f9c:	b2d0      	uxtb	r0, r2
 8007f9e:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8007fa2:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 8007fa6:	6811      	ldr	r1, [r2, #0]
 8007fa8:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8007fac:	fb03 f202 	mul.w	r2, r3, r2
 8007fb0:	440a      	add	r2, r1
 8007fb2:	324a      	adds	r2, #74	@ 0x4a
 8007fb4:	4601      	mov	r1, r0
 8007fb6:	7011      	strb	r1, [r2, #0]
 8007fb8:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8007fbc:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 8007fc0:	6812      	ldr	r2, [r2, #0]
 8007fc2:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8007fc6:	fb01 f303 	mul.w	r3, r1, r3
 8007fca:	4413      	add	r3, r2
 8007fcc:	334a      	adds	r3, #74	@ 0x4a
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8007fd4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007fd8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007fe8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007ff2:	fb01 f303 	mul.w	r3, r1, r3
 8007ff6:	4413      	add	r3, r2
 8007ff8:	334b      	adds	r3, #75	@ 0x4b
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	f887 3226 	strb.w	r3, [r7, #550]	@ 0x226
    uint8_t num_ic = atoi(screen_obj->Program_Testx[index_program].num_IC);
 8008000:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8008004:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008008:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800800c:	6819      	ldr	r1, [r3, #0]
 800800e:	4613      	mov	r3, r2
 8008010:	005b      	lsls	r3, r3, #1
 8008012:	4413      	add	r3, r2
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	440b      	add	r3, r1
 8008018:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4618      	mov	r0, r3
 8008020:	f006 fc6f 	bl	800e902 <atoi>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
    screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 800802a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800802e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008038:	4619      	mov	r1, r3
 800803a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800803e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008048:	fb01 f303 	mul.w	r3, r1, r3
 800804c:	4413      	add	r3, r2
 800804e:	3349      	adds	r3, #73	@ 0x49
 8008050:	2265      	movs	r2, #101	@ 0x65
 8008052:	701a      	strb	r2, [r3, #0]
    /* show number of testing ic */
    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d / %d",curr_num_ic,num_ic);
 8008054:	f897 2227 	ldrb.w	r2, [r7, #551]	@ 0x227
 8008058:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 800805c:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	4613      	mov	r3, r2
 8008064:	4ac2      	ldr	r2, [pc, #776]	@ (8008370 <Navigation_Finish_Review+0x418>)
 8008066:	211e      	movs	r1, #30
 8008068:	f008 fb40 	bl	80106ec <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,ShowCase_String,strlen(ShowCase_String));
 800806c:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8008070:	4618      	mov	r0, r3
 8008072:	f7f8 f90d 	bl	8000290 <strlen>
 8008076:	4603      	mov	r3, r0
 8008078:	b29b      	uxth	r3, r3
 800807a:	f507 7201 	add.w	r2, r7, #516	@ 0x204
 800807e:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 8008082:	f5a1 7009 	sub.w	r0, r1, #548	@ 0x224
 8008086:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 800808a:	6800      	ldr	r0, [r0, #0]
 800808c:	f005 fb81 	bl	800d792 <DWIN_SetText>
    if (curr_num_ic < num_ic) {
 8008090:	f897 2227 	ldrb.w	r2, [r7, #551]	@ 0x227
 8008094:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8008098:	429a      	cmp	r2, r3
 800809a:	f080 8249 	bcs.w	8008530 <Navigation_Finish_Review+0x5d8>
        /* switch page */
        show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,index_program); // check 
 800809e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80080a2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80080ac:	4619      	mov	r1, r3
 80080ae:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80080b2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80080bc:	fb01 f303 	mul.w	r3, r1, r3
 80080c0:	4413      	add	r3, r2
 80080c2:	3349      	adds	r3, #73	@ 0x49
 80080c4:	7819      	ldrb	r1, [r3, #0]
 80080c6:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 80080ca:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80080ce:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80080d2:	6818      	ldr	r0, [r3, #0]
 80080d4:	f004 f8b0 	bl	800c238 <show_main_page>

        /* free array using in have new data test */
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
 80080d8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80080dc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80080e6:	4619      	mov	r1, r3
 80080e8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80080ec:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80080f6:	fb01 f303 	mul.w	r3, r1, r3
 80080fa:	4413      	add	r3, r2
 80080fc:	3374      	adds	r3, #116	@ 0x74
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d02b      	beq.n	800815c <Navigation_Finish_Review+0x204>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
 8008104:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008108:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008112:	4619      	mov	r1, r3
 8008114:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008118:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008122:	fb01 f303 	mul.w	r3, r1, r3
 8008126:	4413      	add	r3, r2
 8008128:	3374      	adds	r3, #116	@ 0x74
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4618      	mov	r0, r3
 800812e:	f006 fbf5 	bl	800e91c <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = NULL;
 8008132:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008136:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008140:	4619      	mov	r1, r3
 8008142:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008146:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008150:	fb01 f303 	mul.w	r3, r1, r3
 8008154:	4413      	add	r3, r2
 8008156:	3374      	adds	r3, #116	@ 0x74
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].config_pin != NULL) {
 800815c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008160:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800816a:	4619      	mov	r1, r3
 800816c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008170:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800817a:	fb01 f303 	mul.w	r3, r1, r3
 800817e:	4413      	add	r3, r2
 8008180:	335c      	adds	r3, #92	@ 0x5c
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d02b      	beq.n	80081e0 <Navigation_Finish_Review+0x288>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].config_pin);
 8008188:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800818c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008196:	4619      	mov	r1, r3
 8008198:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800819c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80081a6:	fb01 f303 	mul.w	r3, r1, r3
 80081aa:	4413      	add	r3, r2
 80081ac:	335c      	adds	r3, #92	@ 0x5c
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f006 fbb3 	bl	800e91c <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = NULL;
 80081b6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80081ba:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80081c4:	4619      	mov	r1, r3
 80081c6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80081ca:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80081d4:	fb01 f303 	mul.w	r3, r1, r3
 80081d8:	4413      	add	r3, r2
 80081da:	335c      	adds	r3, #92	@ 0x5c
 80081dc:	2200      	movs	r2, #0
 80081de:	601a      	str	r2, [r3, #0]
        }
        
        if (screen_obj->IC_Testerx[screen_obj->curr_device].icon_result != NULL) {
 80081e0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80081e4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80081ee:	4619      	mov	r1, r3
 80081f0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80081f4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80081fe:	fb01 f303 	mul.w	r3, r1, r3
 8008202:	4413      	add	r3, r2
 8008204:	3364      	adds	r3, #100	@ 0x64
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d02b      	beq.n	8008264 <Navigation_Finish_Review+0x30c>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result) ;
 800820c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008210:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800821a:	4619      	mov	r1, r3
 800821c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008220:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800822a:	fb01 f303 	mul.w	r3, r1, r3
 800822e:	4413      	add	r3, r2
 8008230:	3364      	adds	r3, #100	@ 0x64
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4618      	mov	r0, r3
 8008236:	f006 fb71 	bl	800e91c <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].icon_result = NULL;
 800823a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800823e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008248:	4619      	mov	r1, r3
 800824a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800824e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008258:	fb01 f303 	mul.w	r3, r1, r3
 800825c:	4413      	add	r3, r2
 800825e:	3364      	adds	r3, #100	@ 0x64
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit != NULL) {
 8008264:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008268:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008272:	4619      	mov	r1, r3
 8008274:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008278:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008282:	fb01 f303 	mul.w	r3, r1, r3
 8008286:	4413      	add	r3, r2
 8008288:	3368      	adds	r3, #104	@ 0x68
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d02b      	beq.n	80082e8 <Navigation_Finish_Review+0x390>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit);
 8008290:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008294:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800829e:	4619      	mov	r1, r3
 80082a0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80082a4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80082ae:	fb01 f303 	mul.w	r3, r1, r3
 80082b2:	4413      	add	r3, r2
 80082b4:	3368      	adds	r3, #104	@ 0x68
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f006 fb2f 	bl	800e91c <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit = NULL;
 80082be:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80082c2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80082cc:	4619      	mov	r1, r3
 80082ce:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80082d2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80082dc:	fb01 f303 	mul.w	r3, r1, r3
 80082e0:	4413      	add	r3, r2
 80082e2:	3368      	adds	r3, #104	@ 0x68
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case != NULL) {
 80082e8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80082ec:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80082f6:	4619      	mov	r1, r3
 80082f8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80082fc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008306:	fb01 f303 	mul.w	r3, r1, r3
 800830a:	4413      	add	r3, r2
 800830c:	3370      	adds	r3, #112	@ 0x70
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d02f      	beq.n	8008374 <Navigation_Finish_Review+0x41c>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case);
 8008314:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008318:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008322:	4619      	mov	r1, r3
 8008324:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008328:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008332:	fb01 f303 	mul.w	r3, r1, r3
 8008336:	4413      	add	r3, r2
 8008338:	3370      	adds	r3, #112	@ 0x70
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4618      	mov	r0, r3
 800833e:	f006 faed 	bl	800e91c <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case = NULL;
 8008342:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008346:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008350:	4619      	mov	r1, r3
 8008352:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008356:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008360:	fb01 f303 	mul.w	r3, r1, r3
 8008364:	4413      	add	r3, r2
 8008366:	3370      	adds	r3, #112	@ 0x70
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	e002      	b.n	8008374 <Navigation_Finish_Review+0x41c>
 800836e:	bf00      	nop
 8008370:	08013afc 	.word	0x08013afc
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result != NULL) {
 8008374:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008378:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008382:	4619      	mov	r1, r3
 8008384:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008388:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008392:	fb01 f303 	mul.w	r3, r1, r3
 8008396:	4413      	add	r3, r2
 8008398:	3360      	adds	r3, #96	@ 0x60
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d02b      	beq.n	80083f8 <Navigation_Finish_Review+0x4a0>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 80083a0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80083a4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80083ae:	4619      	mov	r1, r3
 80083b0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80083b4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80083be:	fb01 f303 	mul.w	r3, r1, r3
 80083c2:	4413      	add	r3, r2
 80083c4:	3360      	adds	r3, #96	@ 0x60
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f006 faa7 	bl	800e91c <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_result = NULL;
 80083ce:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80083d2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80083dc:	4619      	mov	r1, r3
 80083de:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80083e2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80083ec:	fb01 f303 	mul.w	r3, r1, r3
 80083f0:	4413      	add	r3, r2
 80083f2:	3360      	adds	r3, #96	@ 0x60
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]
        }

        /* check error */
        managerTX_CAN_t *check_TX_CAN = malloc(sizeof(managerTX_CAN_t));
 80083f8:	2008      	movs	r0, #8
 80083fa:	f006 fa87 	bl	800e90c <malloc>
 80083fe:	4603      	mov	r3, r0
 8008400:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
        check_TX_CAN->ID = CAN_iso[screen_obj->curr_device].send_arbitration_id;
 8008404:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008408:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008412:	461a      	mov	r2, r3
 8008414:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8008418:	494b      	ldr	r1, [pc, #300]	@ (8008548 <Navigation_Finish_Review+0x5f0>)
 800841a:	0192      	lsls	r2, r2, #6
 800841c:	440a      	add	r2, r1
 800841e:	6812      	ldr	r2, [r2, #0]
 8008420:	601a      	str	r2, [r3, #0]
        check_TX_CAN->TX_Done = false;
 8008422:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8008426:	2200      	movs	r2, #0
 8008428:	711a      	strb	r2, [r3, #4]
        OS_task_post_event(AO_task_can_bus,START_TIMEOUT_TX,(uint8_t *)&check_TX_CAN,sizeof(managerTX_CAN_t));
 800842a:	4b48      	ldr	r3, [pc, #288]	@ (800854c <Navigation_Finish_Review+0x5f4>)
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8008432:	2308      	movs	r3, #8
 8008434:	2102      	movs	r1, #2
 8008436:	f006 f841 	bl	800e4bc <OS_task_post_event>

        /* send data to tester */
        uint8_t can_send_buf[500];
        can_send_buf[0] = screen_obj->Program_Testx[index_program].num_pin;
 800843a:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800843e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008442:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008446:	6819      	ldr	r1, [r3, #0]
 8008448:	4613      	mov	r3, r2
 800844a:	005b      	lsls	r3, r3, #1
 800844c:	4413      	add	r3, r2
 800844e:	011b      	lsls	r3, r3, #4
 8008450:	440b      	add	r3, r1
 8008452:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 8008456:	781a      	ldrb	r2, [r3, #0]
 8008458:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800845c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8008460:	701a      	strb	r2, [r3, #0]
        can_send_buf[1] = '\0';
 8008462:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008466:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800846a:	2200      	movs	r2, #0
 800846c:	705a      	strb	r2, [r3, #1]
        can_send_buf[2] = screen_obj->Program_Testx[index_program].num_case;
 800846e:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8008472:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008476:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800847a:	6819      	ldr	r1, [r3, #0]
 800847c:	4613      	mov	r3, r2
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	4413      	add	r3, r2
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	440b      	add	r3, r1
 8008486:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800848a:	781a      	ldrb	r2, [r3, #0]
 800848c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008490:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8008494:	709a      	strb	r2, [r3, #2]
        can_send_buf[3] = '\0';
 8008496:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800849a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800849e:	2200      	movs	r2, #0
 80084a0:	70da      	strb	r2, [r3, #3]
        memcpy(&can_send_buf[4],screen_obj->Program_Testx[index_program].data_test,screen_obj->Program_Testx[index_program].data_test_len);
 80084a2:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 80084a6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80084aa:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80084ae:	6819      	ldr	r1, [r3, #0]
 80084b0:	4613      	mov	r3, r2
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	4413      	add	r3, r2
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	440b      	add	r3, r1
 80084ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084be:	6818      	ldr	r0, [r3, #0]
 80084c0:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 80084c4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80084c8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80084cc:	6819      	ldr	r1, [r3, #0]
 80084ce:	4613      	mov	r3, r2
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	4413      	add	r3, r2
 80084d4:	011b      	lsls	r3, r3, #4
 80084d6:	440b      	add	r3, r1
 80084d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	f107 030c 	add.w	r3, r7, #12
 80084e4:	3304      	adds	r3, #4
 80084e6:	4601      	mov	r1, r0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f008 fba8 	bl	8010c3e <memcpy>
        isotp_send(&CAN_iso[screen_obj->curr_device],can_send_buf,screen_obj->Program_Testx[index_program].data_test_len + 4);
 80084ee:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80084f2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80084fc:	019b      	lsls	r3, r3, #6
 80084fe:	4a12      	ldr	r2, [pc, #72]	@ (8008548 <Navigation_Finish_Review+0x5f0>)
 8008500:	1898      	adds	r0, r3, r2
 8008502:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8008506:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800850a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800850e:	6819      	ldr	r1, [r3, #0]
 8008510:	4613      	mov	r3, r2
 8008512:	005b      	lsls	r3, r3, #1
 8008514:	4413      	add	r3, r2
 8008516:	011b      	lsls	r3, r3, #4
 8008518:	440b      	add	r3, r1
 800851a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	3304      	adds	r3, #4
 8008522:	b29a      	uxth	r2, r3
 8008524:	f107 030c 	add.w	r3, r7, #12
 8008528:	4619      	mov	r1, r3
 800852a:	f005 fe5f 	bl	800e1ec <isotp_send>
    } else { /* testing enough number */ 
        off_testing(screen_obj);

    }   
}
 800852e:	e006      	b.n	800853e <Navigation_Finish_Review+0x5e6>
        off_testing(screen_obj);
 8008530:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008534:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	f003 f94d 	bl	800b7d8 <off_testing>
}
 800853e:	bf00      	nop
 8008540:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	20000524 	.word	0x20000524
 800854c:	080140d8 	.word	0x080140d8

08008550 <Navigation_Information>:

void Navigation_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_INFORMATION);
 800855a:	216f      	movs	r1, #111	@ 0x6f
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f005 f8f1 	bl	800d744 <DWIN_SetPage>
}
 8008562:	bf00      	nop
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <Navigation_Logging>:

void Navigation_Logging(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
    /* show data */
    
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_LOGGING);
 8008574:	2170      	movs	r1, #112	@ 0x70
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f005 f8e4 	bl	800d744 <DWIN_SetPage>
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <ON_OFF_Button>:

void Navigation_Next_PrevPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {

}

void ON_OFF_Button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008584:	b5b0      	push	{r4, r5, r7, lr}
 8008586:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800858a:	af02      	add	r7, sp, #8
 800858c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008590:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008594:	6018      	str	r0, [r3, #0]
 8008596:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800859a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800859e:	6019      	str	r1, [r3, #0]
    // do sth
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state == false) { // dang off -> bat dau 
 80085a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80085a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80085ae:	4619      	mov	r1, r3
 80085b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80085b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80085be:	fb01 f303 	mul.w	r3, r1, r3
 80085c2:	4413      	add	r3, r2
 80085c4:	334c      	adds	r3, #76	@ 0x4c
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	f083 0301 	eor.w	r3, r3, #1
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f000 811f 	beq.w	8008812 <ON_OFF_Button+0x28e>
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
 80085d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80085d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80085e2:	4619      	mov	r1, r3
 80085e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80085e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80085f2:	fb01 f303 	mul.w	r3, r1, r3
 80085f6:	4413      	add	r3, r2
 80085f8:	334a      	adds	r3, #74	@ 0x4a
 80085fa:	2200      	movs	r2, #0
 80085fc:	701a      	strb	r2, [r3, #0]
        screen_obj->IC_Testerx[screen_obj->curr_device].state = true;
 80085fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008602:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800860c:	4619      	mov	r1, r3
 800860e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008612:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800861c:	fb01 f303 	mul.w	r3, r1, r3
 8008620:	4413      	add	r3, r2
 8008622:	334c      	adds	r3, #76	@ 0x4c
 8008624:	2201      	movs	r2, #1
 8008626:	701a      	strb	r2, [r3, #0]
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 8008628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800862c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008636:	4619      	mov	r1, r3
 8008638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800863c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008646:	fb01 f303 	mul.w	r3, r1, r3
 800864a:	4413      	add	r3, r2
 800864c:	334c      	adds	r3, #76	@ 0x4c
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	461a      	mov	r2, r3
 8008652:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008656:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800865a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800865e:	6818      	ldr	r0, [r3, #0]
 8008660:	f005 f949 	bl	800d8f6 <DWIN_SetVariable_Icon>
    
        /* Send data to esp32 status device */
        uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 8008664:	2008      	movs	r0, #8
 8008666:	f006 f951 	bl	800e90c <malloc>
 800866a:	4603      	mov	r3, r0
 800866c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
        data_send_esp32->data = (char *)malloc(50);
 8008670:	f8d7 4200 	ldr.w	r4, [r7, #512]	@ 0x200
 8008674:	2032      	movs	r0, #50	@ 0x32
 8008676:	f006 f949 	bl	800e90c <malloc>
 800867a:	4603      	mov	r3, r0
 800867c:	6023      	str	r3, [r4, #0]
        if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 800867e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008682:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800868c:	4619      	mov	r1, r3
 800868e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008692:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800869c:	fb01 f303 	mul.w	r3, r1, r3
 80086a0:	4413      	add	r3, r2
 80086a2:	334c      	adds	r3, #76	@ 0x4c
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d055      	beq.n	8008756 <ON_OFF_Button+0x1d2>
            sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 80086aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80086b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80086be:	1c59      	adds	r1, r3, #1
 80086c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80086c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80086ce:	461c      	mov	r4, r3
 80086d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80086d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80086de:	fb04 f303 	mul.w	r3, r4, r3
 80086e2:	4413      	add	r3, r2
 80086e4:	334b      	adds	r3, #75	@ 0x4b
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	461c      	mov	r4, r3
 80086ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80086ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	4623      	mov	r3, r4
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	4423      	add	r3, r4
 80086fa:	011b      	lsls	r3, r3, #4
 80086fc:	4413      	add	r3, r2
 80086fe:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8008702:	681c      	ldr	r4, [r3, #0]
            screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 8008704:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008708:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008712:	461d      	mov	r5, r3
 8008714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008718:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008722:	fb05 f303 	mul.w	r3, r5, r3
 8008726:	4413      	add	r3, r2
 8008728:	334b      	adds	r3, #75	@ 0x4b
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	461d      	mov	r5, r3
            sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800872e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008732:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	462b      	mov	r3, r5
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	442b      	add	r3, r5
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	4413      	add	r3, r2
 8008742:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	4623      	mov	r3, r4
 800874c:	460a      	mov	r2, r1
 800874e:	49a4      	ldr	r1, [pc, #656]	@ (80089e0 <ON_OFF_Button+0x45c>)
 8008750:	f008 f802 	bl	8010758 <siprintf>
 8008754:	e04a      	b.n	80087ec <ON_OFF_Button+0x268>
        } else {
            sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 8008756:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800875a:	6818      	ldr	r0, [r3, #0]
 800875c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008760:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800876a:	4619      	mov	r1, r3
 800876c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008770:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800877a:	fb01 f303 	mul.w	r3, r1, r3
 800877e:	4413      	add	r3, r2
 8008780:	334b      	adds	r3, #75	@ 0x4b
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	4619      	mov	r1, r3
 8008786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800878a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	460b      	mov	r3, r1
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	440b      	add	r3, r1
 8008796:	011b      	lsls	r3, r3, #4
 8008798:	4413      	add	r3, r2
 800879a:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800879e:	6819      	ldr	r1, [r3, #0]
            screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 80087a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80087a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80087ae:	461c      	mov	r4, r3
 80087b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80087b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80087be:	fb04 f303 	mul.w	r3, r4, r3
 80087c2:	4413      	add	r3, r2
 80087c4:	334b      	adds	r3, #75	@ 0x4b
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	461c      	mov	r4, r3
            sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 80087ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80087ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	4623      	mov	r3, r4
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	4423      	add	r3, r4
 80087da:	011b      	lsls	r3, r3, #4
 80087dc:	4413      	add	r3, r2
 80087de:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	460a      	mov	r2, r1
 80087e6:	497f      	ldr	r1, [pc, #508]	@ (80089e4 <ON_OFF_Button+0x460>)
 80087e8:	f007 ffb6 	bl	8010758 <siprintf>
        }
        data_send_esp32->len = strlen(data_send_esp32->data);
 80087ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f8d7 4200 	ldr.w	r4, [r7, #512]	@ 0x200
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7f7 fd4a 	bl	8000290 <strlen>
 80087fc:	4603      	mov	r3, r0
 80087fe:	6063      	str	r3, [r4, #4]
        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 8008800:	4b79      	ldr	r3, [pc, #484]	@ (80089e8 <ON_OFF_Button+0x464>)
 8008802:	6818      	ldr	r0, [r3, #0]
 8008804:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8008808:	2308      	movs	r3, #8
 800880a:	2100      	movs	r1, #0
 800880c:	f005 fe56 	bl	800e4bc <OS_task_post_event>
 8008810:	e01b      	b.n	800884a <ON_OFF_Button+0x2c6>
    } else { // dang on -> off
        /* luu vao sd, gui cho esp32 len app */
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 8008812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008816:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008820:	4619      	mov	r1, r3
 8008822:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008826:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008830:	fb01 f303 	mul.w	r3, r1, r3
 8008834:	4413      	add	r3, r2
 8008836:	3349      	adds	r3, #73	@ 0x49
 8008838:	2265      	movs	r2, #101	@ 0x65
 800883a:	701a      	strb	r2, [r3, #0]
        off_testing(screen_obj);
 800883c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008840:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008844:	6818      	ldr	r0, [r3, #0]
 8008846:	f002 ffc7 	bl	800b7d8 <off_testing>
    }
    
    /* Send data test */
    // screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 800884a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800884e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008858:	4619      	mov	r1, r3
 800885a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800885e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008868:	fb01 f303 	mul.w	r3, r1, r3
 800886c:	4413      	add	r3, r2
 800886e:	334c      	adds	r3, #76	@ 0x4c
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 80ae 	beq.w	80089d4 <ON_OFF_Button+0x450>
        uint8_t can_send_buf[500];
        uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8008878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800887c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008886:	4619      	mov	r1, r3
 8008888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800888c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8008896:	fb01 f303 	mul.w	r3, r1, r3
 800889a:	4413      	add	r3, r2
 800889c:	334b      	adds	r3, #75	@ 0x4b
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        // uint8_t num_test_ic = screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic;
        // memcpy(can_send_buf,&num_test_ic,1);
        can_send_buf[0] = screen_obj->Program_Testx[index_program].num_pin;
 80088a4:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 80088a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80088ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80088b0:	6819      	ldr	r1, [r3, #0]
 80088b2:	4613      	mov	r3, r2
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	4413      	add	r3, r2
 80088b8:	011b      	lsls	r3, r3, #4
 80088ba:	440b      	add	r3, r1
 80088bc:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 80088c0:	781a      	ldrb	r2, [r3, #0]
 80088c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80088c6:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80088ca:	701a      	strb	r2, [r3, #0]
        can_send_buf[1] = '\0';
 80088cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80088d0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80088d4:	2200      	movs	r2, #0
 80088d6:	705a      	strb	r2, [r3, #1]
        can_send_buf[2] = screen_obj->Program_Testx[index_program].num_case;
 80088d8:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 80088dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80088e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80088e4:	6819      	ldr	r1, [r3, #0]
 80088e6:	4613      	mov	r3, r2
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	4413      	add	r3, r2
 80088ec:	011b      	lsls	r3, r3, #4
 80088ee:	440b      	add	r3, r1
 80088f0:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 80088f4:	781a      	ldrb	r2, [r3, #0]
 80088f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80088fa:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80088fe:	709a      	strb	r2, [r3, #2]
        can_send_buf[3] = '\0';
 8008900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008904:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8008908:	2200      	movs	r2, #0
 800890a:	70da      	strb	r2, [r3, #3]
        memcpy(&can_send_buf[4],screen_obj->Program_Testx[index_program].data_test,screen_obj->Program_Testx[index_program].data_test_len);
 800890c:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 8008910:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008914:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008918:	6819      	ldr	r1, [r3, #0]
 800891a:	4613      	mov	r3, r2
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	4413      	add	r3, r2
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	440b      	add	r3, r1
 8008924:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008928:	6818      	ldr	r0, [r3, #0]
 800892a:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800892e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008932:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008936:	6819      	ldr	r1, [r3, #0]
 8008938:	4613      	mov	r3, r2
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	4413      	add	r3, r2
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	440b      	add	r3, r1
 8008942:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	461a      	mov	r2, r3
 800894a:	f107 0308 	add.w	r3, r7, #8
 800894e:	3304      	adds	r3, #4
 8008950:	4601      	mov	r1, r0
 8008952:	4618      	mov	r0, r3
 8008954:	f008 f973 	bl	8010c3e <memcpy>
        isotp_send(&CAN_iso[screen_obj->curr_device],can_send_buf,screen_obj->Program_Testx[index_program].data_test_len + 4);
 8008958:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800895c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8008966:	019b      	lsls	r3, r3, #6
 8008968:	4a20      	ldr	r2, [pc, #128]	@ (80089ec <ON_OFF_Button+0x468>)
 800896a:	1898      	adds	r0, r3, r2
 800896c:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 8008970:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008974:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008978:	6819      	ldr	r1, [r3, #0]
 800897a:	4613      	mov	r3, r2
 800897c:	005b      	lsls	r3, r3, #1
 800897e:	4413      	add	r3, r2
 8008980:	011b      	lsls	r3, r3, #4
 8008982:	440b      	add	r3, r1
 8008984:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	3304      	adds	r3, #4
 800898c:	b29a      	uxth	r2, r3
 800898e:	f107 0308 	add.w	r3, r7, #8
 8008992:	4619      	mov	r1, r3
 8008994:	f005 fc2a 	bl	800e1ec <isotp_send>

        /* check error */
        managerTX_CAN_t *check_TX_CAN = malloc(sizeof(managerTX_CAN_t));
 8008998:	2008      	movs	r0, #8
 800899a:	f005 ffb7 	bl	800e90c <malloc>
 800899e:	4603      	mov	r3, r0
 80089a0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
        check_TX_CAN->ID = (uint32_t)(0x471 + screen_obj->curr_device);
 80089a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80089a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80089b2:	f203 4271 	addw	r2, r3, #1137	@ 0x471
 80089b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80089ba:	601a      	str	r2, [r3, #0]
        check_TX_CAN->TX_Done = false;
 80089bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80089c0:	2200      	movs	r2, #0
 80089c2:	711a      	strb	r2, [r3, #4]
        OS_task_post_event(AO_task_can_bus,START_TIMEOUT_TX,(uint8_t *)&check_TX_CAN,sizeof(managerTX_CAN_t));
 80089c4:	4b0a      	ldr	r3, [pc, #40]	@ (80089f0 <ON_OFF_Button+0x46c>)
 80089c6:	6818      	ldr	r0, [r3, #0]
 80089c8:	f507 72fe 	add.w	r2, r7, #508	@ 0x1fc
 80089cc:	2308      	movs	r3, #8
 80089ce:	2102      	movs	r1, #2
 80089d0:	f005 fd74 	bl	800e4bc <OS_task_post_event>
    }
    
}
 80089d4:	bf00      	nop
 80089d6:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80089da:	46bd      	mov	sp, r7
 80089dc:	bdb0      	pop	{r4, r5, r7, pc}
 80089de:	bf00      	nop
 80089e0:	08013b04 	.word	0x08013b04
 80089e4:	08013b18 	.word	0x08013b18
 80089e8:	080140e8 	.word	0x080140e8
 80089ec:	20000524 	.word	0x20000524
 80089f0:	080140d8 	.word	0x080140d8

080089f4 <select_running_program>:

void select_running_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
    uint8_t programID = screen_event->data; // Get new index program
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	789b      	ldrb	r3, [r3, #2]
 8008a02:	73fb      	strb	r3, [r7, #15]

    /* Show data correspond with new index program */
    Screen_ShowData_Mainpage(screen_obj,programID);
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 ff27 	bl	800a85c <Screen_ShowData_Mainpage>
}
 8008a0e:	bf00      	nop
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <select_modify_program>:

void select_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008a18:	b5b0      	push	{r4, r5, r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
    // Get the index modify program 
    uint8_t index_program = screen_event->data;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	789b      	ldrb	r3, [r3, #2]
 8008a26:	75fb      	strb	r3, [r7, #23]
    screen_obj->modify_program_index = index_program;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	7dfa      	ldrb	r2, [r7, #23]
 8008a2c:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
    
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 8008a30:	7dfa      	ldrb	r2, [r7, #23]
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	4613      	mov	r3, r2
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	4413      	add	r3, r2
 8008a3a:	011b      	lsls	r3, r3, #4
 8008a3c:	440b      	add	r3, r1
 8008a3e:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7f7 fc23 	bl	8000290 <strlen>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	3309      	adds	r3, #9
 8008a50:	75bb      	strb	r3, [r7, #22]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 8008a52:	7dfa      	ldrb	r2, [r7, #23]
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	4613      	mov	r3, r2
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	4413      	add	r3, r2
 8008a5c:	011b      	lsls	r3, r3, #4
 8008a5e:	440b      	add	r3, r1
 8008a60:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7f7 fc12 	bl	8000290 <strlen>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	330f      	adds	r3, #15
 8008a72:	757b      	strb	r3, [r7, #21]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8008a74:	7dbb      	ldrb	r3, [r7, #22]
 8008a76:	3301      	adds	r3, #1
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f005 ff47 	bl	800e90c <malloc>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	613b      	str	r3, [r7, #16]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 8008a82:	7d7b      	ldrb	r3, [r7, #21]
 8008a84:	3301      	adds	r3, #1
 8008a86:	4618      	mov	r0, r3
 8008a88:	f005 ff40 	bl	800e90c <malloc>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	60fb      	str	r3, [r7, #12]

    strcpy(Text_Name_IC,"IC Name: ");
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	4925      	ldr	r1, [pc, #148]	@ (8008b28 <select_modify_program+0x110>)
 8008a94:	461a      	mov	r2, r3
 8008a96:	460b      	mov	r3, r1
 8008a98:	cb03      	ldmia	r3!, {r0, r1}
 8008a9a:	6010      	str	r0, [r2, #0]
 8008a9c:	6051      	str	r1, [r2, #4]
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	8113      	strh	r3, [r2, #8]
    strncat(Text_Name_IC,screen_obj->Program_Testx[index_program].Name_IC,size_Name_IC - strlen("IC Name: "));
 8008aa2:	7dfa      	ldrb	r2, [r7, #23]
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	4413      	add	r3, r2
 8008aac:	011b      	lsls	r3, r3, #4
 8008aae:	440b      	add	r3, r1
 8008ab0:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8008ab4:	6819      	ldr	r1, [r3, #0]
 8008ab6:	7dbb      	ldrb	r3, [r7, #22]
 8008ab8:	3b09      	subs	r3, #9
 8008aba:	461a      	mov	r2, r3
 8008abc:	6938      	ldr	r0, [r7, #16]
 8008abe:	f007 ff9a 	bl	80109f6 <strncat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4a19      	ldr	r2, [pc, #100]	@ (8008b2c <select_modify_program+0x114>)
 8008ac6:	461c      	mov	r4, r3
 8008ac8:	4615      	mov	r5, r2
 8008aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008acc:	6020      	str	r0, [r4, #0]
 8008ace:	6061      	str	r1, [r4, #4]
 8008ad0:	60a2      	str	r2, [r4, #8]
 8008ad2:	60e3      	str	r3, [r4, #12]
    strncat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC,size_Num_IC - strlen("Number of ICs: "));
 8008ad4:	7dfa      	ldrb	r2, [r7, #23]
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	4413      	add	r3, r2
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	440b      	add	r3, r1
 8008ae2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8008ae6:	6819      	ldr	r1, [r3, #0]
 8008ae8:	7d7b      	ldrb	r3, [r7, #21]
 8008aea:	3b0f      	subs	r3, #15
 8008aec:	461a      	mov	r2, r3
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f007 ff81 	bl	80109f6 <strncat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 8008af4:	7dbb      	ldrb	r3, [r7, #22]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	f249 5120 	movw	r1, #38176	@ 0x9520
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f004 fe47 	bl	800d792 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 8008b04:	7d7b      	ldrb	r3, [r7, #21]
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	f249 5140 	movw	r1, #38208	@ 0x9540
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f004 fe3f 	bl	800d792 <DWIN_SetText>

    free(Text_Name_IC);
 8008b14:	6938      	ldr	r0, [r7, #16]
 8008b16:	f005 ff01 	bl	800e91c <free>
    free(Text_Num_IC);
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f005 fefe 	bl	800e91c <free>
}
 8008b20:	bf00      	nop
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bdb0      	pop	{r4, r5, r7, pc}
 8008b28:	08013b24 	.word	0x08013b24
 8008b2c:	08013b30 	.word	0x08013b30

08008b30 <Navigation_num_keyboard>:

void Navigation_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008b30:	b590      	push	{r4, r7, lr}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	889a      	ldrh	r2, [r3, #4]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	819a      	strh	r2, [r3, #12]
    /* get index vp to show the info of keyboard */
    uint8_t index_condition;
    index_condition = Index_VP(screen_obj->Screen_keyboard.VP_Text,lookup_VP_condition,(sizeof(lookup_VP_condition)/ sizeof(lookup_VP_condition[0])));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	899b      	ldrh	r3, [r3, #12]
 8008b46:	2205      	movs	r2, #5
 8008b48:	492e      	ldr	r1, [pc, #184]	@ (8008c04 <Navigation_num_keyboard+0xd4>)
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f001 f9b5 	bl	8009eba <Index_VP>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73fb      	strb	r3, [r7, #15]
    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	330e      	adds	r3, #14
 8008b60:	2232      	movs	r2, #50	@ 0x32
 8008b62:	2100      	movs	r1, #0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f007 ff2f 	bl	80109c8 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f103 020e 	add.w	r2, r3, #14
 8008b70:	2332      	movs	r3, #50	@ 0x32
 8008b72:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f004 fe0b 	bl	800d792 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowType_Keyboard,text_numkeyboard[index_condition].String_Name,strlen(text_numkeyboard[index_condition].String_Name));
 8008b7c:	7bfa      	ldrb	r2, [r7, #15]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	4a20      	ldr	r2, [pc, #128]	@ (8008c08 <Navigation_num_keyboard+0xd8>)
 8008b88:	189c      	adds	r4, r3, r2
 8008b8a:	7bfa      	ldrb	r2, [r7, #15]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	011b      	lsls	r3, r3, #4
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	005b      	lsls	r3, r3, #1
 8008b94:	4a1c      	ldr	r2, [pc, #112]	@ (8008c08 <Navigation_num_keyboard+0xd8>)
 8008b96:	4413      	add	r3, r2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7f7 fb79 	bl	8000290 <strlen>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	f24f 0180 	movw	r1, #61568	@ 0xf080
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f004 fdf2 	bl	800d792 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowUnit_Keyboard,text_numkeyboard[index_condition].String_Unit,strlen(text_numkeyboard[index_condition].String_Unit));
 8008bae:	7bfa      	ldrb	r2, [r7, #15]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	011b      	lsls	r3, r3, #4
 8008bb4:	1a9b      	subs	r3, r3, r2
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	3308      	adds	r3, #8
 8008bba:	4a13      	ldr	r2, [pc, #76]	@ (8008c08 <Navigation_num_keyboard+0xd8>)
 8008bbc:	4413      	add	r3, r2
 8008bbe:	1ddc      	adds	r4, r3, #7
 8008bc0:	7bfa      	ldrb	r2, [r7, #15]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	011b      	lsls	r3, r3, #4
 8008bc6:	1a9b      	subs	r3, r3, r2
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	3308      	adds	r3, #8
 8008bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8008c08 <Navigation_num_keyboard+0xd8>)
 8008bce:	4413      	add	r3, r2
 8008bd0:	3307      	adds	r3, #7
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7f7 fb5c 	bl	8000290 <strlen>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	4622      	mov	r2, r4
 8008bde:	f24f 0150 	movw	r1, #61520	@ 0xf050
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f004 fdd5 	bl	800d792 <DWIN_SetText>
    /* clear text */
    DWIN_ClearText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard);
 8008be8:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f004 fe3f 	bl	800d870 <DWIN_ClearText>
    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_NUM_KEYBOARD);
 8008bf2:	216d      	movs	r1, #109	@ 0x6d
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f004 fda5 	bl	800d744 <DWIN_SetPage>
}
 8008bfa:	bf00      	nop
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd90      	pop	{r4, r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000040 	.word	0x20000040
 8008c08:	2000007c 	.word	0x2000007c

08008c0c <Navigation_full_keyboard>:

void Navigation_full_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	889a      	ldrh	r2, [r3, #4]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	330e      	adds	r3, #14
 8008c2a:	2232      	movs	r2, #50	@ 0x32
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f007 feca 	bl	80109c8 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f103 020e 	add.w	r2, r3, #14
 8008c3a:	2332      	movs	r3, #50	@ 0x32
 8008c3c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f004 fda6 	bl	800d792 <DWIN_SetText>
    /* clear text */
    DWIN_ClearText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard);
 8008c46:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f004 fe10 	bl	800d870 <DWIN_ClearText>
    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_FULL_KEYBOARD);
 8008c50:	2178      	movs	r1, #120	@ 0x78
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f004 fd76 	bl	800d744 <DWIN_SetPage>
}
 8008c58:	bf00      	nop
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <Save_Information>:

void Save_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c62:	b0c7      	sub	sp, #284	@ 0x11c
 8008c64:	af02      	add	r7, sp, #8
 8008c66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c6e:	6018      	str	r0, [r3, #0]
 8008c70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c74:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008c78:	6019      	str	r1, [r3, #0]
    /* update value */
    if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp != NULL) {
 8008c7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008c88:	4619      	mov	r1, r3
 8008c8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	460b      	mov	r3, r1
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	440b      	add	r3, r1
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 80d9 	beq.w	8008e5c <Save_Information+0x1fc>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program != NULL) {
 8008caa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008cb8:	4619      	mov	r1, r3
 8008cba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	440b      	add	r3, r1
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d02d      	beq.n	8008d34 <Save_Information+0xd4>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program);
 8008cd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cdc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	440b      	add	r3, r1
 8008cf8:	011b      	lsls	r3, r3, #4
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f005 fe0a 	bl	800e91c <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program = NULL;
 8008d08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008d16:	4619      	mov	r1, r3
 8008d18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	460b      	mov	r3, r1
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	440b      	add	r3, r1
 8008d28:	011b      	lsls	r3, r3, #4
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8008d30:	2200      	movs	r2, #0
 8008d32:	601a      	str	r2, [r3, #0]
        }
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp));
 8008d34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d38:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008d42:	4619      	mov	r1, r3
 8008d44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	440b      	add	r3, r1
 8008d54:	011b      	lsls	r3, r3, #4
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7f7 fa96 	bl	8000290 <strlen>
 8008d64:	4602      	mov	r2, r0
 8008d66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008d74:	461c      	mov	r4, r3
 8008d76:	4610      	mov	r0, r2
 8008d78:	f005 fdc8 	bl	800e90c <malloc>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	4619      	mov	r1, r3
 8008d80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	4623      	mov	r3, r4
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	4423      	add	r3, r4
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8008d98:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8008d9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008da8:	4619      	mov	r1, r3
 8008daa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	460b      	mov	r3, r1
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	440b      	add	r3, r1
 8008dba:	011b      	lsls	r3, r3, #4
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8008dc2:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp
 8008dc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dc8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dd8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	460b      	mov	r3, r1
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	440b      	add	r3, r1
 8008de4:	011b      	lsls	r3, r3, #4
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 8008dec:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp)+1);
 8008dee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008df2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	440b      	add	r3, r1
 8008e0e:	011b      	lsls	r3, r3, #4
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7f7 fa39 	bl	8000290 <strlen>
 8008e1e:	4603      	mov	r3, r0
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8008e20:	3301      	adds	r3, #1
 8008e22:	461a      	mov	r2, r3
 8008e24:	4629      	mov	r1, r5
 8008e26:	4620      	mov	r0, r4
 8008e28:	f007 ff09 	bl	8010c3e <memcpy>
        free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp);
 8008e2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e40:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	460b      	mov	r3, r1
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	440b      	add	r3, r1
 8008e4c:	011b      	lsls	r3, r3, #4
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f005 fd60 	bl	800e91c <free>
    }

    if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp != NULL) {
 8008e5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e70:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	460b      	mov	r3, r1
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	440b      	add	r3, r1
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f000 80ef 	beq.w	800906a <Save_Information+0x40a>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC != NULL) {
 8008e8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ea0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	440b      	add	r3, r1
 8008eac:	011b      	lsls	r3, r3, #4
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d02d      	beq.n	8008f16 <Save_Information+0x2b6>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 8008eba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ebe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008ec8:	4619      	mov	r1, r3
 8008eca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ece:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	440b      	add	r3, r1
 8008eda:	011b      	lsls	r3, r3, #4
 8008edc:	4413      	add	r3, r2
 8008ede:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f005 fd19 	bl	800e91c <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC = NULL;
 8008eea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008eee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008efe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	460b      	mov	r3, r1
 8008f06:	005b      	lsls	r3, r3, #1
 8008f08:	440b      	add	r3, r1
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]
        }
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp));
 8008f16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008f24:	4619      	mov	r1, r3
 8008f26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	460b      	mov	r3, r1
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	440b      	add	r3, r1
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7f7 f9a5 	bl	8000290 <strlen>
 8008f46:	4602      	mov	r2, r0
 8008f48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f4c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008f56:	461c      	mov	r4, r3
 8008f58:	4610      	mov	r0, r2
 8008f5a:	f005 fcd7 	bl	800e90c <malloc>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	4619      	mov	r1, r3
 8008f62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	4623      	mov	r3, r4
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	4423      	add	r3, r4
 8008f72:	011b      	lsls	r3, r3, #4
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8008f7a:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 8008f7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	460b      	mov	r3, r1
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	440b      	add	r3, r1
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8008fa4:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp
 8008fa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008faa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	440b      	add	r3, r1
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8008fce:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp)+1);
 8008fd0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fd4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8008fde:	4619      	mov	r1, r3
 8008fe0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fe4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	460b      	mov	r3, r1
 8008fec:	005b      	lsls	r3, r3, #1
 8008fee:	440b      	add	r3, r1
 8008ff0:	011b      	lsls	r3, r3, #4
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7f7 f948 	bl	8000290 <strlen>
 8009000:	4603      	mov	r3, r0
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 8009002:	3301      	adds	r3, #1
 8009004:	461a      	mov	r2, r3
 8009006:	4629      	mov	r1, r5
 8009008:	4620      	mov	r0, r4
 800900a:	f007 fe18 	bl	8010c3e <memcpy>

        free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp);
 800900e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009012:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800901c:	4619      	mov	r1, r3
 800901e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009022:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	460b      	mov	r3, r1
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	440b      	add	r3, r1
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	4413      	add	r3, r2
 8009032:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4618      	mov	r0, r3
 800903a:	f005 fc6f 	bl	800e91c <free>
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp = NULL;
 800903e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009042:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800904c:	4619      	mov	r1, r3
 800904e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009052:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	460b      	mov	r3, r1
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	440b      	add	r3, r1
 800905e:	011b      	lsls	r3, r3, #4
 8009060:	4413      	add	r3, r2
 8009062:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]
    }

    if (screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp != NULL) {
 800906a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800906e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009078:	4619      	mov	r1, r3
 800907a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800907e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	460b      	mov	r3, r1
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	440b      	add	r3, r1
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	4413      	add	r3, r2
 800908e:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 80ef 	beq.w	8009278 <Save_Information+0x618>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC != NULL) {
 800909a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800909e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 80090a8:	4619      	mov	r1, r3
 80090aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	460b      	mov	r3, r1
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	440b      	add	r3, r1
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	4413      	add	r3, r2
 80090be:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d02d      	beq.n	8009124 <Save_Information+0x4c4>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 80090c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 80090d6:	4619      	mov	r1, r3
 80090d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	460b      	mov	r3, r1
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	440b      	add	r3, r1
 80090e8:	011b      	lsls	r3, r3, #4
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f005 fc12 	bl	800e91c <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC = NULL;
 80090f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009106:	4619      	mov	r1, r3
 8009108:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800910c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	460b      	mov	r3, r1
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	440b      	add	r3, r1
 8009118:	011b      	lsls	r3, r3, #4
 800911a:	4413      	add	r3, r2
 800911c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
        } 
        screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp));
 8009124:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009128:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009132:	4619      	mov	r1, r3
 8009134:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009138:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	460b      	mov	r3, r1
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	440b      	add	r3, r1
 8009144:	011b      	lsls	r3, r3, #4
 8009146:	4413      	add	r3, r2
 8009148:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4618      	mov	r0, r3
 8009150:	f7f7 f89e 	bl	8000290 <strlen>
 8009154:	4602      	mov	r2, r0
 8009156:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800915a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009164:	461c      	mov	r4, r3
 8009166:	4610      	mov	r0, r2
 8009168:	f005 fbd0 	bl	800e90c <malloc>
 800916c:	4603      	mov	r3, r0
 800916e:	4619      	mov	r1, r3
 8009170:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009174:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	4623      	mov	r3, r4
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	4423      	add	r3, r4
 8009180:	011b      	lsls	r3, r3, #4
 8009182:	4413      	add	r3, r2
 8009184:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8009188:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC
 800918a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800918e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009198:	4619      	mov	r1, r3
 800919a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800919e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	460b      	mov	r3, r1
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	440b      	add	r3, r1
 80091aa:	011b      	lsls	r3, r3, #4
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80091b2:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp
 80091b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 80091c2:	4619      	mov	r1, r3
 80091c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	460b      	mov	r3, r1
 80091d0:	005b      	lsls	r3, r3, #1
 80091d2:	440b      	add	r3, r1
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 80091dc:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp)+1);
 80091de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 80091ec:	4619      	mov	r1, r3
 80091ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	460b      	mov	r3, r1
 80091fa:	005b      	lsls	r3, r3, #1
 80091fc:	440b      	add	r3, r1
 80091fe:	011b      	lsls	r3, r3, #4
 8009200:	4413      	add	r3, r2
 8009202:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4618      	mov	r0, r3
 800920a:	f7f7 f841 	bl	8000290 <strlen>
 800920e:	4603      	mov	r3, r0
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC
 8009210:	3301      	adds	r3, #1
 8009212:	461a      	mov	r2, r3
 8009214:	4629      	mov	r1, r5
 8009216:	4620      	mov	r0, r4
 8009218:	f007 fd11 	bl	8010c3e <memcpy>

        free(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp);
 800921c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009220:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800922a:	4619      	mov	r1, r3
 800922c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009230:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	460b      	mov	r3, r1
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	440b      	add	r3, r1
 800923c:	011b      	lsls	r3, r3, #4
 800923e:	4413      	add	r3, r2
 8009240:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4618      	mov	r0, r3
 8009248:	f005 fb68 	bl	800e91c <free>
        screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp = NULL;
 800924c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009250:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800925a:	4619      	mov	r1, r3
 800925c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009260:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	460b      	mov	r3, r1
 8009268:	005b      	lsls	r3, r3, #1
 800926a:	440b      	add	r3, r1
 800926c:	011b      	lsls	r3, r3, #4
 800926e:	4413      	add	r3, r2
 8009270:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 8009274:	2200      	movs	r2, #0
 8009276:	601a      	str	r2, [r3, #0]
    }

    /* get data for testing ic */
    if (get_data_testing_ic(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,&screen_obj->Program_Testx[screen_obj->modify_program_index]) == false) {
 8009278:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800927c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009286:	4619      	mov	r1, r3
 8009288:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800928c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	460b      	mov	r3, r1
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	440b      	add	r3, r1
 8009298:	011b      	lsls	r3, r3, #4
 800929a:	4413      	add	r3, r2
 800929c:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 80092a0:	6818      	ldr	r0, [r3, #0]
 80092a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 80092b0:	4619      	mov	r1, r3
 80092b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092b6:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80092ba:	460b      	mov	r3, r1
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	440b      	add	r3, r1
 80092c0:	011b      	lsls	r3, r3, #4
 80092c2:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 80092c6:	6812      	ldr	r2, [r2, #0]
 80092c8:	4413      	add	r3, r2
 80092ca:	4619      	mov	r1, r3
 80092cc:	f001 fc0c 	bl	800aae8 <get_data_testing_ic>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f083 0301 	eor.w	r3, r3, #1
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f040 825b 	bne.w	8009794 <Save_Information+0xb34>
        return;
    }

    /* send to esp32 */
    char buffer_send[200];
    memset(buffer_send,0,200);
 80092de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80092e2:	22c8      	movs	r2, #200	@ 0xc8
 80092e4:	2100      	movs	r1, #0
 80092e6:	4618      	mov	r0, r3
 80092e8:	f007 fb6e 	bl	80109c8 <memset>
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 80092ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 80092fa:	1c5c      	adds	r4, r3, #1
 80092fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009300:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800930a:	4619      	mov	r1, r3
 800930c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009310:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	460b      	mov	r3, r1
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	440b      	add	r3, r1
 800931c:	011b      	lsls	r3, r3, #4
 800931e:	4413      	add	r3, r2
 8009320:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8009324:	681d      	ldr	r5, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 8009326:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800932a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009334:	4619      	mov	r1, r3
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8009336:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800933a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	460b      	mov	r3, r1
 8009342:	005b      	lsls	r3, r3, #1
 8009344:	440b      	add	r3, r1
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	4413      	add	r3, r2
 800934a:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800934e:	681a      	ldr	r2, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 8009350:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009354:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800935e:	4618      	mov	r0, r3
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8009360:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009364:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009368:	6819      	ldr	r1, [r3, #0]
 800936a:	4603      	mov	r3, r0
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	4403      	add	r3, r0
 8009370:	011b      	lsls	r3, r3, #4
 8009372:	440b      	add	r3, r1
 8009374:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800937e:	9301      	str	r3, [sp, #4]
 8009380:	9200      	str	r2, [sp, #0]
 8009382:	462b      	mov	r3, r5
 8009384:	4622      	mov	r2, r4
 8009386:	49db      	ldr	r1, [pc, #876]	@ (80096f4 <Save_Information+0xa94>)
 8009388:	f007 f9e6 	bl	8010758 <siprintf>
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800938c:	2008      	movs	r0, #8
 800938e:	f005 fabd 	bl	800e90c <malloc>
 8009392:	4603      	mov	r3, r0
 8009394:	63bb      	str	r3, [r7, #56]	@ 0x38
    data_send_esp32->data = (char *)malloc(strlen(buffer_send));
 8009396:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800939a:	4618      	mov	r0, r3
 800939c:	f7f6 ff78 	bl	8000290 <strlen>
 80093a0:	4603      	mov	r3, r0
 80093a2:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80093a4:	4618      	mov	r0, r3
 80093a6:	f005 fab1 	bl	800e90c <malloc>
 80093aa:	4603      	mov	r3, r0
 80093ac:	6023      	str	r3, [r4, #0]
    memcpy(data_send_esp32->data,"p",screen_obj->modify_program_index + 1);
 80093ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 80093c0:	3301      	adds	r3, #1
 80093c2:	461a      	mov	r2, r3
 80093c4:	49cc      	ldr	r1, [pc, #816]	@ (80096f8 <Save_Information+0xa98>)
 80093c6:	f007 fc3a 	bl	8010c3e <memcpy>
    memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send));
 80093ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	1c5c      	adds	r4, r3, #1
 80093d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7f6 ff5b 	bl	8000290 <strlen>
 80093da:	4602      	mov	r2, r0
 80093dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80093e0:	4619      	mov	r1, r3
 80093e2:	4620      	mov	r0, r4
 80093e4:	f007 fc2b 	bl	8010c3e <memcpy>
    data_send_esp32->len = strlen(buffer_send) + 1;
 80093e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7f6 ff4f 	bl	8000290 <strlen>
 80093f2:	4602      	mov	r2, r0
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	3201      	adds	r2, #1
 80093f8:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 80093fa:	4bc0      	ldr	r3, [pc, #768]	@ (80096fc <Save_Information+0xa9c>)
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8009402:	2308      	movs	r3, #8
 8009404:	2100      	movs	r1, #0
 8009406:	f005 f859 	bl	800e4bc <OS_task_post_event>

    /* store data to eeprom */
    char string_data[TOTAL_ONE_PROGRAM_TEST_LEN] = {0};
 800940a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800940e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009412:	4618      	mov	r0, r3
 8009414:	232a      	movs	r3, #42	@ 0x2a
 8009416:	461a      	mov	r2, r3
 8009418:	2100      	movs	r1, #0
 800941a:	f007 fad5 	bl	80109c8 <memset>
    data_eeprom_t *data_write = malloc(sizeof(data_eeprom_t));
 800941e:	200c      	movs	r0, #12
 8009420:	f005 fa74 	bl	800e90c <malloc>
 8009424:	4603      	mov	r3, r0
 8009426:	461a      	mov	r2, r3
 8009428:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800942c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009430:	601a      	str	r2, [r3, #0]
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8009432:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009436:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009440:	4619      	mov	r1, r3
 8009442:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009446:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	460b      	mov	r3, r1
 800944e:	005b      	lsls	r3, r3, #1
 8009450:	440b      	add	r3, r1
 8009452:	011b      	lsls	r3, r3, #4
 8009454:	4413      	add	r3, r2
 8009456:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800945a:	681c      	ldr	r4, [r3, #0]
    ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 800945c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009460:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800946a:	4619      	mov	r1, r3
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800946c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009470:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	460b      	mov	r3, r1
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	440b      	add	r3, r1
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	4413      	add	r3, r2
 8009480:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8009484:	681a      	ldr	r2, [r3, #0]
    ,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 8009486:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800948a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009494:	4618      	mov	r0, r3
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8009496:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800949a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800949e:	6819      	ldr	r1, [r3, #0]
 80094a0:	4603      	mov	r3, r0
 80094a2:	005b      	lsls	r3, r3, #1
 80094a4:	4403      	add	r3, r0
 80094a6:	011b      	lsls	r3, r3, #4
 80094a8:	440b      	add	r3, r1
 80094aa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f107 000c 	add.w	r0, r7, #12
 80094b4:	9301      	str	r3, [sp, #4]
 80094b6:	9200      	str	r2, [sp, #0]
 80094b8:	4623      	mov	r3, r4
 80094ba:	4a91      	ldr	r2, [pc, #580]	@ (8009700 <Save_Information+0xaa0>)
 80094bc:	212a      	movs	r1, #42	@ 0x2a
 80094be:	f007 f915 	bl	80106ec <sniprintf>
    data_write->data = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 80094c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ca:	681c      	ldr	r4, [r3, #0]
 80094cc:	202a      	movs	r0, #42	@ 0x2a
 80094ce:	f005 fa1d 	bl	800e90c <malloc>
 80094d2:	4603      	mov	r3, r0
 80094d4:	6063      	str	r3, [r4, #4]
    memcpy(data_write->data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 80094d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094ea:	461c      	mov	r4, r3
 80094ec:	4694      	mov	ip, r2
 80094ee:	f104 0e20 	add.w	lr, r4, #32
 80094f2:	4665      	mov	r5, ip
 80094f4:	4626      	mov	r6, r4
 80094f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80094f8:	6028      	str	r0, [r5, #0]
 80094fa:	6069      	str	r1, [r5, #4]
 80094fc:	60aa      	str	r2, [r5, #8]
 80094fe:	60eb      	str	r3, [r5, #12]
 8009500:	3410      	adds	r4, #16
 8009502:	f10c 0c10 	add.w	ip, ip, #16
 8009506:	4574      	cmp	r4, lr
 8009508:	d1f3      	bne.n	80094f2 <Save_Information+0x892>
 800950a:	4662      	mov	r2, ip
 800950c:	4623      	mov	r3, r4
 800950e:	cb03      	ldmia	r3!, {r0, r1}
 8009510:	6010      	str	r0, [r2, #0]
 8009512:	6051      	str	r1, [r2, #4]
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	8113      	strh	r3, [r2, #8]
    data_write->data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 8009518:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800951c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	222a      	movs	r2, #42	@ 0x2a
 8009524:	811a      	strh	r2, [r3, #8]
    data_write->mem_addr = START_ADDR_PROGRAM_TEST_X(screen_obj->modify_program_index);
 8009526:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800952a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009534:	461a      	mov	r2, r3
 8009536:	0052      	lsls	r2, r2, #1
 8009538:	4413      	add	r3, r2
 800953a:	461a      	mov	r2, r3
 800953c:	00d2      	lsls	r2, r2, #3
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	005b      	lsls	r3, r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3243      	adds	r2, #67	@ 0x43
 8009550:	b292      	uxth	r2, r2
 8009552:	801a      	strh	r2, [r3, #0]
    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));
 8009554:	4b6b      	ldr	r3, [pc, #428]	@ (8009704 <Save_Information+0xaa4>)
 8009556:	6818      	ldr	r0, [r3, #0]
 8009558:	f107 0208 	add.w	r2, r7, #8
 800955c:	230c      	movs	r3, #12
 800955e:	2105      	movs	r1, #5
 8009560:	f004 ffac 	bl	800e4bc <OS_task_post_event>

    // Show data in screen
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 8009564:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009568:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009572:	4619      	mov	r1, r3
 8009574:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009578:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	460b      	mov	r3, r1
 8009580:	005b      	lsls	r3, r3, #1
 8009582:	440b      	add	r3, r1
 8009584:	011b      	lsls	r3, r3, #4
 8009586:	4413      	add	r3, r2
 8009588:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4618      	mov	r0, r3
 8009590:	f7f6 fe7e 	bl	8000290 <strlen>
 8009594:	4603      	mov	r3, r0
 8009596:	b2db      	uxtb	r3, r3
 8009598:	3309      	adds	r3, #9
 800959a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800959e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 80095ac:	4619      	mov	r1, r3
 80095ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	460b      	mov	r3, r1
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	440b      	add	r3, r1
 80095be:	011b      	lsls	r3, r3, #4
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7f6 fe61 	bl	8000290 <strlen>
 80095ce:	4603      	mov	r3, r0
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	330f      	adds	r3, #15
 80095d4:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 80095d8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80095dc:	3301      	adds	r3, #1
 80095de:	4618      	mov	r0, r3
 80095e0:	f005 f994 	bl	800e90c <malloc>
 80095e4:	4603      	mov	r3, r0
 80095e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 80095ea:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80095ee:	3301      	adds	r3, #1
 80095f0:	4618      	mov	r0, r3
 80095f2:	f005 f98b 	bl	800e90c <malloc>
 80095f6:	4603      	mov	r3, r0
 80095f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

    strcpy(Text_Name_IC,"IC Name: ");
 80095fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009600:	4941      	ldr	r1, [pc, #260]	@ (8009708 <Save_Information+0xaa8>)
 8009602:	461a      	mov	r2, r3
 8009604:	460b      	mov	r3, r1
 8009606:	cb03      	ldmia	r3!, {r0, r1}
 8009608:	6010      	str	r0, [r2, #0]
 800960a:	6051      	str	r1, [r2, #4]
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 8009610:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009614:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800961e:	4619      	mov	r1, r3
 8009620:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009624:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	460b      	mov	r3, r1
 800962c:	005b      	lsls	r3, r3, #1
 800962e:	440b      	add	r3, r1
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	4413      	add	r3, r2
 8009634:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4619      	mov	r1, r3
 800963c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8009640:	f007 f9ca 	bl	80109d8 <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 8009644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009648:	4a30      	ldr	r2, [pc, #192]	@ (800970c <Save_Information+0xaac>)
 800964a:	461c      	mov	r4, r3
 800964c:	4615      	mov	r5, r2
 800964e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009650:	6020      	str	r0, [r4, #0]
 8009652:	6061      	str	r1, [r4, #4]
 8009654:	60a2      	str	r2, [r4, #8]
 8009656:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 8009658:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800965c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009666:	4619      	mov	r1, r3
 8009668:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800966c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	460b      	mov	r3, r1
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	440b      	add	r3, r1
 8009678:	011b      	lsls	r3, r3, #4
 800967a:	4413      	add	r3, r2
 800967c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4619      	mov	r1, r3
 8009684:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8009688:	f007 f9a6 	bl	80109d8 <strcat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 800968c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8009690:	b29b      	uxth	r3, r3
 8009692:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009696:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 800969a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800969e:	f249 5120 	movw	r1, #38176	@ 0x9520
 80096a2:	6800      	ldr	r0, [r0, #0]
 80096a4:	f004 f875 	bl	800d792 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 80096a8:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80096b2:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 80096b6:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80096ba:	f249 5140 	movw	r1, #38208	@ 0x9540
 80096be:	6800      	ldr	r0, [r0, #0]
 80096c0:	f004 f867 	bl	800d792 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *screen_obj->modify_program_index),screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 80096c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 80096d2:	461a      	mov	r2, r3
 80096d4:	0092      	lsls	r2, r2, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f5a3 43db 	sub.w	r3, r3, #28032	@ 0x6d80
 80096e0:	3b58      	subs	r3, #88	@ 0x58
 80096e2:	b29c      	uxth	r4, r3
 80096e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 80096f2:	e00d      	b.n	8009710 <Save_Information+0xab0>
 80096f4:	08013b40 	.word	0x08013b40
 80096f8:	08013b4c 	.word	0x08013b4c
 80096fc:	080140e8 	.word	0x080140e8
 8009700:	08013b50 	.word	0x08013b50
 8009704:	080140dc 	.word	0x080140dc
 8009708:	08013b24 	.word	0x08013b24
 800970c:	08013b30 	.word	0x08013b30
 8009710:	4619      	mov	r1, r3
 8009712:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009716:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	460b      	mov	r3, r1
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	440b      	add	r3, r1
 8009722:	011b      	lsls	r3, r3, #4
 8009724:	4413      	add	r3, r2
 8009726:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800972a:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 800972c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009730:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800973a:	4619      	mov	r1, r3
 800973c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009740:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	460b      	mov	r3, r1
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	440b      	add	r3, r1
 800974c:	011b      	lsls	r3, r3, #4
 800974e:	4413      	add	r3, r2
 8009750:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4618      	mov	r0, r3
 8009758:	f7f6 fd9a 	bl	8000290 <strlen>
 800975c:	4603      	mov	r3, r0
    DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *screen_obj->modify_program_index),screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800975e:	b29b      	uxth	r3, r3
 8009760:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009764:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 8009768:	462a      	mov	r2, r5
 800976a:	4621      	mov	r1, r4
 800976c:	6800      	ldr	r0, [r0, #0]
 800976e:	f004 f810 	bl	800d792 <DWIN_SetText>

    free(Text_Name_IC);
 8009772:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8009776:	f005 f8d1 	bl	800e91c <free>
    free(Text_Num_IC);
 800977a:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 800977e:	f005 f8cd 	bl	800e91c <free>
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
 8009782:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009786:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800978a:	216b      	movs	r1, #107	@ 0x6b
 800978c:	6818      	ldr	r0, [r3, #0]
 800978e:	f003 ffd9 	bl	800d744 <DWIN_SetPage>
 8009792:	e000      	b.n	8009796 <Save_Information+0xb36>
        return;
 8009794:	bf00      	nop
}
 8009796:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800979a:	46bd      	mov	sp, r7
 800979c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800979e:	bf00      	nop

080097a0 <Enter_password>:

void Enter_password(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80097a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097a4:	b089      	sub	sp, #36	@ 0x24
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	6039      	str	r1, [r7, #0]
 80097ac:	466b      	mov	r3, sp
 80097ae:	461e      	mov	r6, r3
    /* Get the password input */
    uint8_t len = screen_obj->Screen_keyboard.Index_String + 1;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	3301      	adds	r3, #1
 80097ba:	77fb      	strb	r3, [r7, #31]
    char input_pass[len];
 80097bc:	7ff9      	ldrb	r1, [r7, #31]
 80097be:	460b      	mov	r3, r1
 80097c0:	3b01      	subs	r3, #1
 80097c2:	61bb      	str	r3, [r7, #24]
 80097c4:	b2cb      	uxtb	r3, r1
 80097c6:	2200      	movs	r2, #0
 80097c8:	4698      	mov	r8, r3
 80097ca:	4691      	mov	r9, r2
 80097cc:	f04f 0200 	mov.w	r2, #0
 80097d0:	f04f 0300 	mov.w	r3, #0
 80097d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80097d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80097dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80097e0:	b2cb      	uxtb	r3, r1
 80097e2:	2200      	movs	r2, #0
 80097e4:	461c      	mov	r4, r3
 80097e6:	4615      	mov	r5, r2
 80097e8:	f04f 0200 	mov.w	r2, #0
 80097ec:	f04f 0300 	mov.w	r3, #0
 80097f0:	00eb      	lsls	r3, r5, #3
 80097f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097f6:	00e2      	lsls	r2, r4, #3
 80097f8:	460b      	mov	r3, r1
 80097fa:	3307      	adds	r3, #7
 80097fc:	08db      	lsrs	r3, r3, #3
 80097fe:	00db      	lsls	r3, r3, #3
 8009800:	ebad 0d03 	sub.w	sp, sp, r3
 8009804:	466b      	mov	r3, sp
 8009806:	3300      	adds	r3, #0
 8009808:	617b      	str	r3, [r7, #20]
    strcpy(input_pass,screen_obj->Screen_keyboard.String);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	330e      	adds	r3, #14
 800980e:	4619      	mov	r1, r3
 8009810:	6978      	ldr	r0, [r7, #20]
 8009812:	f007 fa0c 	bl	8010c2e <strcpy>
    /* Check password */
    if (strcmp(input_pass,MACHINE_PASSWORD) == 0) { /* Correct password */
 8009816:	493f      	ldr	r1, [pc, #252]	@ (8009914 <Enter_password+0x174>)
 8009818:	6978      	ldr	r0, [r7, #20]
 800981a:	f7f6 fcd9 	bl	80001d0 <strcmp>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d16a      	bne.n	80098fa <Enter_password+0x15a>
        /* show data page */
        switch (screen_obj->page_setting) {
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 34eb 	ldrb.w	r3, [r3, #1259]	@ 0x4eb
 800982a:	2b6b      	cmp	r3, #107	@ 0x6b
 800982c:	d15c      	bne.n	80098e8 <Enter_password+0x148>
            case DWINPAGE_SETTING_PROGRAM : {
                // Show data in screen
                uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009834:	4618      	mov	r0, r3
 8009836:	f7f6 fd2b 	bl	8000290 <strlen>
 800983a:	4603      	mov	r3, r0
 800983c:	b2db      	uxtb	r3, r3
 800983e:	3309      	adds	r3, #9
 8009840:	74fb      	strb	r3, [r7, #19]
                uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[PROGRAM_TEST1].num_IC);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 8009848:	4618      	mov	r0, r3
 800984a:	f7f6 fd21 	bl	8000290 <strlen>
 800984e:	4603      	mov	r3, r0
 8009850:	b2db      	uxtb	r3, r3
 8009852:	330f      	adds	r3, #15
 8009854:	74bb      	strb	r3, [r7, #18]

                char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8009856:	7cfb      	ldrb	r3, [r7, #19]
 8009858:	3301      	adds	r3, #1
 800985a:	4618      	mov	r0, r3
 800985c:	f005 f856 	bl	800e90c <malloc>
 8009860:	4603      	mov	r3, r0
 8009862:	60fb      	str	r3, [r7, #12]
                char *Text_Num_IC = malloc(size_Num_IC + 1);
 8009864:	7cbb      	ldrb	r3, [r7, #18]
 8009866:	3301      	adds	r3, #1
 8009868:	4618      	mov	r0, r3
 800986a:	f005 f84f 	bl	800e90c <malloc>
 800986e:	4603      	mov	r3, r0
 8009870:	60bb      	str	r3, [r7, #8]

                strcpy(Text_Name_IC,"IC Name: ");
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4928      	ldr	r1, [pc, #160]	@ (8009918 <Enter_password+0x178>)
 8009876:	461a      	mov	r2, r3
 8009878:	460b      	mov	r3, r1
 800987a:	cb03      	ldmia	r3!, {r0, r1}
 800987c:	6010      	str	r0, [r2, #0]
 800987e:	6051      	str	r1, [r2, #4]
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	8113      	strh	r3, [r2, #8]
                strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800988a:	4619      	mov	r1, r3
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f007 f8a3 	bl	80109d8 <strcat>
                strcpy(Text_Num_IC,"Number of ICs: ");
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	4a21      	ldr	r2, [pc, #132]	@ (800991c <Enter_password+0x17c>)
 8009896:	461c      	mov	r4, r3
 8009898:	4615      	mov	r5, r2
 800989a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800989c:	6020      	str	r0, [r4, #0]
 800989e:	6061      	str	r1, [r4, #4]
 80098a0:	60a2      	str	r2, [r4, #8]
 80098a2:	60e3      	str	r3, [r4, #12]
                strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[PROGRAM_TEST1].num_IC);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 80098aa:	4619      	mov	r1, r3
 80098ac:	68b8      	ldr	r0, [r7, #8]
 80098ae:	f007 f893 	bl	80109d8 <strcat>

                // Show data in screen
                DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 80098b2:	7cfb      	ldrb	r3, [r7, #19]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	f249 5120 	movw	r1, #38176	@ 0x9520
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f003 ff68 	bl	800d792 <DWIN_SetText>
                DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 80098c2:	7cbb      	ldrb	r3, [r7, #18]
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	f249 5140 	movw	r1, #38208	@ 0x9540
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f003 ff60 	bl	800d792 <DWIN_SetText>

                free(Text_Name_IC);
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f005 f822 	bl	800e91c <free>
                free(Text_Num_IC);
 80098d8:	68b8      	ldr	r0, [r7, #8]
 80098da:	f005 f81f 	bl	800e91c <free>
                // Switch page
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
 80098de:	216b      	movs	r1, #107	@ 0x6b
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f003 ff2f 	bl	800d744 <DWIN_SetPage>
            } break;
 80098e6:	e000      	b.n	80098ea <Enter_password+0x14a>

            default : break;
 80098e8:	bf00      	nop
        }
        /* Goto setting page */
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->page_setting);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 34eb 	ldrb.w	r3, [r3, #1259]	@ 0x4eb
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f003 ff26 	bl	800d744 <DWIN_SetPage>
 80098f8:	e006      	b.n	8009908 <Enter_password+0x168>
    } else {
        /* Show text */
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_Password,INCORRECT_PASSWORD_TEXT,strlen(INCORRECT_PASSWORD_TEXT));
 80098fa:	2312      	movs	r3, #18
 80098fc:	4a08      	ldr	r2, [pc, #32]	@ (8009920 <Enter_password+0x180>)
 80098fe:	f249 5180 	movw	r1, #38272	@ 0x9580
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f003 ff45 	bl	800d792 <DWIN_SetText>
 8009908:	46b5      	mov	sp, r6
    }
}
 800990a:	bf00      	nop
 800990c:	3724      	adds	r7, #36	@ 0x24
 800990e:	46bd      	mov	sp, r7
 8009910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009914:	08013b5c 	.word	0x08013b5c
 8009918:	08013b24 	.word	0x08013b24
 800991c:	08013b30 	.word	0x08013b30
 8009920:	08013b64 	.word	0x08013b64

08009924 <Enter_num_keyboard>:

void Enter_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8009924:	b590      	push	{r4, r7, lr}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
    uint16_t VP_show = screen_obj->Screen_keyboard.VP_Text;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	899b      	ldrh	r3, [r3, #12]
 8009932:	81fb      	strh	r3, [r7, #14]
    
    /* Show text to VP */
    DWIN_SetText((Dwin_t *)screen_obj,VP_show,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f103 020e 	add.w	r2, r3, #14
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009940:	89f9      	ldrh	r1, [r7, #14]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f003 ff25 	bl	800d792 <DWIN_SetText>

    /* Return page base on VP address */
    switch (VP_show) {
 8009948:	89fb      	ldrh	r3, [r7, #14]
 800994a:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 800994e:	4293      	cmp	r3, r2
 8009950:	f000 8161 	beq.w	8009c16 <Enter_num_keyboard+0x2f2>
 8009954:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 8009958:	4293      	cmp	r3, r2
 800995a:	f300 8180 	bgt.w	8009c5e <Enter_num_keyboard+0x33a>
 800995e:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 8009962:	4293      	cmp	r3, r2
 8009964:	f000 8157 	beq.w	8009c16 <Enter_num_keyboard+0x2f2>
 8009968:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 800996c:	4293      	cmp	r3, r2
 800996e:	f300 8176 	bgt.w	8009c5e <Enter_num_keyboard+0x33a>
 8009972:	f249 5260 	movw	r2, #38240	@ 0x9560
 8009976:	4293      	cmp	r3, r2
 8009978:	d047      	beq.n	8009a0a <Enter_num_keyboard+0xe6>
 800997a:	f249 5260 	movw	r2, #38240	@ 0x9560
 800997e:	4293      	cmp	r3, r2
 8009980:	f300 816d 	bgt.w	8009c5e <Enter_num_keyboard+0x33a>
 8009984:	f249 5240 	movw	r2, #38208	@ 0x9540
 8009988:	4293      	cmp	r3, r2
 800998a:	f000 80f0 	beq.w	8009b6e <Enter_num_keyboard+0x24a>
 800998e:	f249 5240 	movw	r2, #38208	@ 0x9540
 8009992:	4293      	cmp	r3, r2
 8009994:	f300 8163 	bgt.w	8009c5e <Enter_num_keyboard+0x33a>
 8009998:	f249 5220 	movw	r2, #38176	@ 0x9520
 800999c:	4293      	cmp	r3, r2
 800999e:	f000 8092 	beq.w	8009ac6 <Enter_num_keyboard+0x1a2>
 80099a2:	f249 5220 	movw	r2, #38176	@ 0x9520
 80099a6:	4293      	cmp	r3, r2
 80099a8:	f300 8159 	bgt.w	8009c5e <Enter_num_keyboard+0x33a>
 80099ac:	f5b3 4f15 	cmp.w	r3, #38144	@ 0x9500
 80099b0:	d035      	beq.n	8009a1e <Enter_num_keyboard+0xfa>
 80099b2:	f5b3 4f15 	cmp.w	r3, #38144	@ 0x9500
 80099b6:	f300 8152 	bgt.w	8009c5e <Enter_num_keyboard+0x33a>
 80099ba:	f249 0240 	movw	r2, #36928	@ 0x9040
 80099be:	4293      	cmp	r3, r2
 80099c0:	f000 812e 	beq.w	8009c20 <Enter_num_keyboard+0x2fc>
 80099c4:	f249 0240 	movw	r2, #36928	@ 0x9040
 80099c8:	4293      	cmp	r3, r2
 80099ca:	f300 8148 	bgt.w	8009c5e <Enter_num_keyboard+0x33a>
 80099ce:	f249 0230 	movw	r2, #36912	@ 0x9030
 80099d2:	4293      	cmp	r3, r2
 80099d4:	f000 8124 	beq.w	8009c20 <Enter_num_keyboard+0x2fc>
 80099d8:	f249 0230 	movw	r2, #36912	@ 0x9030
 80099dc:	4293      	cmp	r3, r2
 80099de:	f300 813e 	bgt.w	8009c5e <Enter_num_keyboard+0x33a>
 80099e2:	f249 0220 	movw	r2, #36896	@ 0x9020
 80099e6:	4293      	cmp	r3, r2
 80099e8:	f000 811a 	beq.w	8009c20 <Enter_num_keyboard+0x2fc>
 80099ec:	f249 0220 	movw	r2, #36896	@ 0x9020
 80099f0:	4293      	cmp	r3, r2
 80099f2:	f300 8134 	bgt.w	8009c5e <Enter_num_keyboard+0x33a>
 80099f6:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 80099fa:	f000 8111 	beq.w	8009c20 <Enter_num_keyboard+0x2fc>
 80099fe:	f249 0210 	movw	r2, #36880	@ 0x9010
 8009a02:	4293      	cmp	r3, r2
 8009a04:	f000 810c 	beq.w	8009c20 <Enter_num_keyboard+0x2fc>
                DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
                DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
            } 
        } break;
        
        default: break;
 8009a08:	e129      	b.n	8009c5e <Enter_num_keyboard+0x33a>
            DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password); /* Clear warning text if any */
 8009a0a:	f249 5180 	movw	r1, #38272	@ 0x9580
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f003 ff2e 	bl	800d870 <DWIN_ClearText>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 8009a14:	216e      	movs	r1, #110	@ 0x6e
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f003 fe94 	bl	800d744 <DWIN_SetPage>
        } break;
 8009a1c:	e122      	b.n	8009c64 <Enter_num_keyboard+0x340>
            if (screen_obj->Screen_keyboard.Index_String == 0) {
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d107      	bne.n	8009a38 <Enter_num_keyboard+0x114>
                DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,"Please enter a value",strlen("Please enter a value"));
 8009a28:	2314      	movs	r3, #20
 8009a2a:	4a90      	ldr	r2, [pc, #576]	@ (8009c6c <Enter_num_keyboard+0x348>)
 8009a2c:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f003 feae 	bl	800d792 <DWIN_SetText>
                return;
 8009a36:	e115      	b.n	8009c64 <Enter_num_keyboard+0x340>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009a3e:	3301      	adds	r3, #1
 8009a40:	461a      	mov	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009a48:	461c      	mov	r4, r3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	f004 ff5e 	bl	800e90c <malloc>
 8009a50:	4603      	mov	r3, r0
 8009a52:	4619      	mov	r1, r3
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	4623      	mov	r3, r4
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	4423      	add	r3, r4
 8009a5c:	011b      	lsls	r3, r3, #4
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 8009a64:	6019      	str	r1, [r3, #0]
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	440b      	add	r3, r1
 8009a76:	011b      	lsls	r3, r3, #4
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 8009a7e:	6818      	ldr	r0, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009a86:	3301      	adds	r3, #1
 8009a88:	461a      	mov	r2, r3
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	f006 ff9c 	bl	80109c8 <memset>
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009a96:	4619      	mov	r1, r3
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	005b      	lsls	r3, r3, #1
 8009a9e:	440b      	add	r3, r1
 8009aa0:	011b      	lsls	r3, r3, #4
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f103 010e 	add.w	r1, r3, #14
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f007 f8c1 	bl	8010c3e <memcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 8009abc:	216c      	movs	r1, #108	@ 0x6c
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f003 fe40 	bl	800d744 <DWIN_SetPage>
        } break;
 8009ac4:	e0ce      	b.n	8009c64 <Enter_num_keyboard+0x340>
            if (screen_obj->Screen_keyboard.Index_String == 0) {
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d107      	bne.n	8009ae0 <Enter_num_keyboard+0x1bc>
                DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,"Please enter a value",strlen("Please enter a value"));
 8009ad0:	2314      	movs	r3, #20
 8009ad2:	4a66      	ldr	r2, [pc, #408]	@ (8009c6c <Enter_num_keyboard+0x348>)
 8009ad4:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f003 fe5a 	bl	800d792 <DWIN_SetText>
                return;
 8009ade:	e0c1      	b.n	8009c64 <Enter_num_keyboard+0x340>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	461a      	mov	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009af0:	461c      	mov	r4, r3
 8009af2:	4610      	mov	r0, r2
 8009af4:	f004 ff0a 	bl	800e90c <malloc>
 8009af8:	4603      	mov	r3, r0
 8009afa:	4619      	mov	r1, r3
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	4623      	mov	r3, r4
 8009b00:	005b      	lsls	r3, r3, #1
 8009b02:	4423      	add	r3, r4
 8009b04:	011b      	lsls	r3, r3, #4
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8009b0c:	6019      	str	r1, [r3, #0]
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009b14:	4619      	mov	r1, r3
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	440b      	add	r3, r1
 8009b1e:	011b      	lsls	r3, r3, #4
 8009b20:	4413      	add	r3, r2
 8009b22:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8009b26:	6818      	ldr	r0, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b2e:	3301      	adds	r3, #1
 8009b30:	461a      	mov	r2, r3
 8009b32:	2100      	movs	r1, #0
 8009b34:	f006 ff48 	bl	80109c8 <memset>
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009b3e:	4619      	mov	r1, r3
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	460b      	mov	r3, r1
 8009b44:	005b      	lsls	r3, r3, #1
 8009b46:	440b      	add	r3, r1
 8009b48:	011b      	lsls	r3, r3, #4
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8009b50:	6818      	ldr	r0, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f103 010e 	add.w	r1, r3, #14
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f007 f86d 	bl	8010c3e <memcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 8009b64:	216c      	movs	r1, #108	@ 0x6c
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f003 fdec 	bl	800d744 <DWIN_SetPage>
        } break;
 8009b6c:	e07a      	b.n	8009c64 <Enter_num_keyboard+0x340>
            if (screen_obj->Screen_keyboard.Index_String == 0) {
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d107      	bne.n	8009b88 <Enter_num_keyboard+0x264>
                DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,"Please enter a value",strlen("Please enter a value"));
 8009b78:	2314      	movs	r3, #20
 8009b7a:	4a3c      	ldr	r2, [pc, #240]	@ (8009c6c <Enter_num_keyboard+0x348>)
 8009b7c:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f003 fe06 	bl	800d792 <DWIN_SetText>
                return;
 8009b86:	e06d      	b.n	8009c64 <Enter_num_keyboard+0x340>
            screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b8e:	3301      	adds	r3, #1
 8009b90:	461a      	mov	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009b98:	461c      	mov	r4, r3
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	f004 feb6 	bl	800e90c <malloc>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	4623      	mov	r3, r4
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	4423      	add	r3, r4
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	4413      	add	r3, r2
 8009bb0:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 8009bb4:	6019      	str	r1, [r3, #0]
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	005b      	lsls	r3, r3, #1
 8009bc4:	440b      	add	r3, r1
 8009bc6:	011b      	lsls	r3, r3, #4
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 8009bce:	6818      	ldr	r0, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	461a      	mov	r2, r3
 8009bda:	2100      	movs	r1, #0
 8009bdc:	f006 fef4 	bl	80109c8 <memset>
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8009be6:	4619      	mov	r1, r3
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	460b      	mov	r3, r1
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	440b      	add	r3, r1
 8009bf0:	011b      	lsls	r3, r3, #4
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 8009bf8:	6818      	ldr	r0, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f103 010e 	add.w	r1, r3, #14
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009c06:	461a      	mov	r2, r3
 8009c08:	f007 f819 	bl	8010c3e <memcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 8009c0c:	216c      	movs	r1, #108	@ 0x6c
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f003 fd98 	bl	800d744 <DWIN_SetPage>
        } break;
 8009c14:	e026      	b.n	8009c64 <Enter_num_keyboard+0x340>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 8009c16:	2175      	movs	r1, #117	@ 0x75
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f003 fd93 	bl	800d744 <DWIN_SetPage>
        } break;
 8009c1e:	e021      	b.n	8009c64 <Enter_num_keyboard+0x340>
            if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fa87 	bl	800a134 <Screen_CheckInput_Keyboard>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d11a      	bne.n	8009c62 <Enter_num_keyboard+0x33e>
                get_input_keyboard((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	899b      	ldrh	r3, [r3, #12]
 8009c30:	4619      	mov	r1, r3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f002 fefc 	bl	800ca30 <get_input_keyboard>
                DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	8999      	ldrh	r1, [r3, #12]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f103 020e 	add.w	r2, r3, #14
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f003 fda2 	bl	800d792 <DWIN_SetText>
                DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f003 fd74 	bl	800d744 <DWIN_SetPage>
        } break;
 8009c5c:	e001      	b.n	8009c62 <Enter_num_keyboard+0x33e>
        default: break;
 8009c5e:	bf00      	nop
 8009c60:	e000      	b.n	8009c64 <Enter_num_keyboard+0x340>
        } break;
 8009c62:	bf00      	nop
    }
}
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd90      	pop	{r4, r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	08013b78 	.word	0x08013b78

08009c70 <Enter_setting_time>:

void Enter_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8009c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c74:	b086      	sub	sp, #24
 8009c76:	af04      	add	r7, sp, #16
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
    if (strlen(screen_obj->Time_setting.Day) == 0 ||
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d017      	beq.n	8009cb8 <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Month) == 0 || 
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f203 43d7 	addw	r3, r3, #1239	@ 0x4d7
 8009c8e:	781b      	ldrb	r3, [r3, #0]
    if (strlen(screen_obj->Time_setting.Day) == 0 ||
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d011      	beq.n	8009cb8 <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Year) == 0 || 
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f203 43da 	addw	r3, r3, #1242	@ 0x4da
 8009c9a:	781b      	ldrb	r3, [r3, #0]
    strlen(screen_obj->Time_setting.Month) == 0 || 
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00b      	beq.n	8009cb8 <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Hour) == 0 || 
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f203 43dd 	addw	r3, r3, #1245	@ 0x4dd
 8009ca6:	781b      	ldrb	r3, [r3, #0]
    strlen(screen_obj->Time_setting.Year) == 0 || 
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d005      	beq.n	8009cb8 <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Minute) == 0 ) {
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f503 639c 	add.w	r3, r3, #1248	@ 0x4e0
 8009cb2:	781b      	ldrb	r3, [r3, #0]
    strlen(screen_obj->Time_setting.Hour) == 0 || 
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d107      	bne.n	8009cc8 <Enter_setting_time+0x58>
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_setting_time,"Enter all times before saving",strlen("Enter all times before saving"));
 8009cb8:	231d      	movs	r3, #29
 8009cba:	4a1e      	ldr	r2, [pc, #120]	@ (8009d34 <Enter_setting_time+0xc4>)
 8009cbc:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f003 fd66 	bl	800d792 <DWIN_SetText>
        return;
 8009cc6:	e031      	b.n	8009d2c <Enter_setting_time+0xbc>
    } else {
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f503 639c 	add.w	r3, r3, #1248	@ 0x4e0
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f004 fe17 	bl	800e902 <atoi>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	b2de      	uxtb	r6, r3
        atoi(screen_obj->Time_setting.Hour),
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f203 43dd 	addw	r3, r3, #1245	@ 0x4dd
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f004 fe0f 	bl	800e902 <atoi>
 8009ce4:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009ce6:	fa5f f883 	uxtb.w	r8, r3
        atoi(screen_obj->Time_setting.Day),
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f004 fe06 	bl	800e902 <atoi>
 8009cf6:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009cf8:	b2dc      	uxtb	r4, r3
        atoi(screen_obj->Time_setting.Month),
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f203 43d7 	addw	r3, r3, #1239	@ 0x4d7
 8009d00:	4618      	mov	r0, r3
 8009d02:	f004 fdfe 	bl	800e902 <atoi>
 8009d06:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009d08:	b2dd      	uxtb	r5, r3
        atoi(screen_obj->Time_setting.Year));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f203 43da 	addw	r3, r3, #1242	@ 0x4da
 8009d10:	4618      	mov	r0, r3
 8009d12:	f004 fdf6 	bl	800e902 <atoi>
 8009d16:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	9302      	str	r3, [sp, #8]
 8009d1c:	9501      	str	r5, [sp, #4]
 8009d1e:	9400      	str	r4, [sp, #0]
 8009d20:	4643      	mov	r3, r8
 8009d22:	4632      	mov	r2, r6
 8009d24:	2100      	movs	r1, #0
 8009d26:	4804      	ldr	r0, [pc, #16]	@ (8009d38 <Enter_setting_time+0xc8>)
 8009d28:	f003 fc7c 	bl	800d624 <DS3231_Write_time>
    }
}
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d34:	08013b90 	.word	0x08013b90
 8009d38:	200013a8 	.word	0x200013a8

08009d3c <Enter_setting_wifi>:

void Enter_setting_wifi(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]

}
 8009d46:	bf00      	nop
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <Keyboard>:

void Keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b082      	sub	sp, #8
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
    
    /* The other Functions button */
    if (screen_event->data == 0xF3) { // Delete button
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	789b      	ldrb	r3, [r3, #2]
 8009d60:	2bf3      	cmp	r3, #243	@ 0xf3
 8009d62:	d116      	bne.n	8009d92 <Keyboard+0x40>
        if (screen_obj->Screen_keyboard.Index_String != 0) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 8096 	beq.w	8009e9c <Keyboard+0x14a>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String - 1] = 0;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d76:	3b01      	subs	r3, #1
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	739a      	strb	r2, [r3, #14]
            --screen_obj->Screen_keyboard.Index_String;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d86:	3b01      	subs	r3, #1
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8009d90:	e084      	b.n	8009e9c <Keyboard+0x14a>
        }
    } else if (screen_event->data == 0xF4) { // Caplock button
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	789b      	ldrb	r3, [r3, #2]
 8009d96:	2bf4      	cmp	r3, #244	@ 0xf4
 8009d98:	d11a      	bne.n	8009dd0 <Keyboard+0x7e>
        /* Toggle status Caplock keyboard */
        screen_obj->Screen_keyboard.Caplock = !screen_obj->Screen_keyboard.Caplock; 
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bf14      	ite	ne
 8009da4:	2301      	movne	r3, #1
 8009da6:	2300      	moveq	r3, #0
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	f083 0301 	eor.w	r3, r3, #1
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	b2da      	uxtb	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_CAPLOCK,screen_obj->Screen_keyboard.Caplock);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f003 fd94 	bl	800d8f6 <DWIN_SetVariable_Icon>
 8009dce:	e065      	b.n	8009e9c <Keyboard+0x14a>
    } else if (screen_event->data == 0xF2) { // Space button
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	789b      	ldrb	r3, [r3, #2]
 8009dd4:	2bf2      	cmp	r3, #242	@ 0xf2
 8009dd6:	d061      	beq.n	8009e9c <Keyboard+0x14a>
        // screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = 32;
    } else if (screen_event->data == 0xF1) { // Enter button
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	789b      	ldrb	r3, [r3, #2]
 8009ddc:	2bf1      	cmp	r3, #241	@ 0xf1
 8009dde:	d11e      	bne.n	8009e1e <Keyboard+0xcc>
        // Check if the data is valid
        if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f9a7 	bl	800a134 <Screen_CheckInput_Keyboard>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d157      	bne.n	8009e9c <Keyboard+0x14a>
            // get data
            get_input_keyboard((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	899b      	ldrh	r3, [r3, #12]
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f002 fe1c 	bl	800ca30 <get_input_keyboard>
            // Show data input to VP 
            DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	8999      	ldrh	r1, [r3, #12]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f103 020e 	add.w	r2, r3, #14
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f003 fcc2 	bl	800d792 <DWIN_SetText>
            DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 8009e14:	4619      	mov	r1, r3
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f003 fc94 	bl	800d744 <DWIN_SetPage>
 8009e1c:	e03e      	b.n	8009e9c <Keyboard+0x14a>
        } 
    }
    /* the data value is the character input -> add to string */
    else if (screen_event->data >= 0x41 && screen_event->data <= 0x5A) { // letter need check Caplock
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	789b      	ldrb	r3, [r3, #2]
 8009e22:	2b40      	cmp	r3, #64	@ 0x40
 8009e24:	d92c      	bls.n	8009e80 <Keyboard+0x12e>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	789b      	ldrb	r3, [r3, #2]
 8009e2a:	2b5a      	cmp	r3, #90	@ 0x5a
 8009e2c:	d828      	bhi.n	8009e80 <Keyboard+0x12e>
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e34:	f083 0301 	eor.w	r3, r3, #1
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d011      	beq.n	8009e62 <Keyboard+0x110>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data + 0x20;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	789a      	ldrb	r2, [r3, #2]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009e48:	1c59      	adds	r1, r3, #1
 8009e4a:	b288      	uxth	r0, r1
 8009e4c:	6879      	ldr	r1, [r7, #4]
 8009e4e:	f8a1 0040 	strh.w	r0, [r1, #64]	@ 0x40
 8009e52:	4619      	mov	r1, r3
 8009e54:	f102 0320 	add.w	r3, r2, #32
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	440b      	add	r3, r1
 8009e5e:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8009e60:	e01c      	b.n	8009e9c <Keyboard+0x14a>
        } else {
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009e68:	1c5a      	adds	r2, r3, #1
 8009e6a:	b291      	uxth	r1, r2
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 8009e72:	4619      	mov	r1, r3
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	789a      	ldrb	r2, [r3, #2]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	440b      	add	r3, r1
 8009e7c:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8009e7e:	e00d      	b.n	8009e9c <Keyboard+0x14a>
        }
    } else {
        screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009e86:	1c5a      	adds	r2, r3, #1
 8009e88:	b291      	uxth	r1, r2
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 8009e90:	4619      	mov	r1, r3
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	789a      	ldrb	r2, [r3, #2]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	440b      	add	r3, r1
 8009e9a:	739a      	strb	r2, [r3, #14]
    }

    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f103 020e 	add.w	r2, r3, #14
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009ea8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f003 fc70 	bl	800d792 <DWIN_SetText>
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <Index_VP>:
#pragma endregion CALLBACK FUNCTION VP ADRRESS 

#pragma region FUNCTION EXCUTE SCREEN

// binary search index of VP address
uint8_t Index_VP(uint16_t vp, VP_item* VP_array, uint8_t Size_array) {
 8009eba:	b480      	push	{r7}
 8009ebc:	b087      	sub	sp, #28
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	6039      	str	r1, [r7, #0]
 8009ec4:	80fb      	strh	r3, [r7, #6]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	717b      	strb	r3, [r7, #5]
    int left = 0;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	617b      	str	r3, [r7, #20]
    int right = Size_array - 1;
 8009ece:	797b      	ldrb	r3, [r7, #5]
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	613b      	str	r3, [r7, #16]
    int mid;

    while (left <= right) {
 8009ed4:	e023      	b.n	8009f1e <Index_VP+0x64>
        mid = (left + right) / 2;
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	4413      	add	r3, r2
 8009edc:	0fda      	lsrs	r2, r3, #31
 8009ede:	4413      	add	r3, r2
 8009ee0:	105b      	asrs	r3, r3, #1
 8009ee2:	60fb      	str	r3, [r7, #12]
        if (VP_array[mid].VP_address == vp) {
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	4413      	add	r3, r2
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	88fa      	ldrh	r2, [r7, #6]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d105      	bne.n	8009f00 <Index_VP+0x46>
            return VP_array[mid].index;  // Found the vp
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	683a      	ldr	r2, [r7, #0]
 8009efa:	4413      	add	r3, r2
 8009efc:	789b      	ldrb	r3, [r3, #2]
 8009efe:	e013      	b.n	8009f28 <Index_VP+0x6e>
        } else if (VP_array[mid].VP_address > vp) {
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	4413      	add	r3, r2
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	88fa      	ldrh	r2, [r7, #6]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d203      	bcs.n	8009f18 <Index_VP+0x5e>
            right = mid - 1;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3b01      	subs	r3, #1
 8009f14:	613b      	str	r3, [r7, #16]
 8009f16:	e002      	b.n	8009f1e <Index_VP+0x64>
        } else {
            left = mid + 1;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	617b      	str	r3, [r7, #20]
    while (left <= right) {
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	ddd7      	ble.n	8009ed6 <Index_VP+0x1c>
        }
    }

    return 255;  // VP not found
 8009f26:	23ff      	movs	r3, #255	@ 0xff
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	371c      	adds	r7, #28
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <Screen_init_handler_table>:

void Screen_init_handler_table(Screen_t *const obj_screen) {
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
                                                                a_handler_full_keyboard,
                                                                a_handler_save_sig,
                                                                a_handler_enter_sig };

    // Assign the callback function to handler table
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PAGE]         = Navigation_setting_page;
 8009f3c:	4b42      	ldr	r3, [pc, #264]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a42      	ldr	r2, [pc, #264]	@ (800a04c <Screen_init_handler_table+0x118>)
 8009f42:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_RETURN]               = Navigation_return;
 8009f44:	4b40      	ldr	r3, [pc, #256]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	4a41      	ldr	r2, [pc, #260]	@ (800a050 <Screen_init_handler_table+0x11c>)
 8009f4c:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_HOME]                 = Navigation_home_page;
 8009f4e:	4b3e      	ldr	r3, [pc, #248]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3308      	adds	r3, #8
 8009f54:	4a3f      	ldr	r2, [pc, #252]	@ (800a054 <Screen_init_handler_table+0x120>)
 8009f56:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PROGRAM]      = Navigation_setting_program;
 8009f58:	4b3b      	ldr	r3, [pc, #236]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3314      	adds	r3, #20
 8009f5e:	4a3e      	ldr	r2, [pc, #248]	@ (800a058 <Screen_init_handler_table+0x124>)
 8009f60:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_TIME]         = Navigation_setting_time;
 8009f62:	4b39      	ldr	r3, [pc, #228]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	330c      	adds	r3, #12
 8009f68:	4a3c      	ldr	r2, [pc, #240]	@ (800a05c <Screen_init_handler_table+0x128>)
 8009f6a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_WIFI]         = Navigation_setting_wifi;
 8009f6c:	4b36      	ldr	r3, [pc, #216]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3310      	adds	r3, #16
 8009f72:	4a3b      	ldr	r2, [pc, #236]	@ (800a060 <Screen_init_handler_table+0x12c>)
 8009f74:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_MODIFY_PROGRAM]       = Navigation_modify_program;
 8009f76:	4b34      	ldr	r3, [pc, #208]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3328      	adds	r3, #40	@ 0x28
 8009f7c:	4a39      	ldr	r2, [pc, #228]	@ (800a064 <Screen_init_handler_table+0x130>)
 8009f7e:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_DETAIL_MAINPAGE]      = Navigation_detail_mainpage;
 8009f80:	4b31      	ldr	r3, [pc, #196]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	332c      	adds	r3, #44	@ 0x2c
 8009f86:	4a38      	ldr	r2, [pc, #224]	@ (800a068 <Screen_init_handler_table+0x134>)
 8009f88:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_GRAPH_MAINPAGE]       = Navigation_graph_mainpage;
 8009f8a:	4b2f      	ldr	r3, [pc, #188]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3330      	adds	r3, #48	@ 0x30
 8009f90:	4a36      	ldr	r2, [pc, #216]	@ (800a06c <Screen_init_handler_table+0x138>)
 8009f92:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_MAINPAGE]      = Navigation_Change_MainPage;
 8009f94:	4b2c      	ldr	r3, [pc, #176]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3318      	adds	r3, #24
 8009f9a:	4a35      	ldr	r2, [pc, #212]	@ (800a070 <Screen_init_handler_table+0x13c>)
 8009f9c:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASEDATA]      = Navigation_Change_CaseTest;
 8009f9e:	4b2a      	ldr	r3, [pc, #168]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	331c      	adds	r3, #28
 8009fa4:	4a33      	ldr	r2, [pc, #204]	@ (800a074 <Screen_init_handler_table+0x140>)
 8009fa6:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASE_PULSE]    = Navigation_Change_CasePulse;
 8009fa8:	4b27      	ldr	r3, [pc, #156]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3334      	adds	r3, #52	@ 0x34
 8009fae:	4a32      	ldr	r2, [pc, #200]	@ (800a078 <Screen_init_handler_table+0x144>)
 8009fb0:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_FINISH_REVIEW]        = Navigation_Finish_Review;
 8009fb2:	4b25      	ldr	r3, [pc, #148]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3338      	adds	r3, #56	@ 0x38
 8009fb8:	4a30      	ldr	r2, [pc, #192]	@ (800a07c <Screen_init_handler_table+0x148>)
 8009fba:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_INFORMATION]          = Navigation_Information;
 8009fbc:	4b22      	ldr	r3, [pc, #136]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	3320      	adds	r3, #32
 8009fc2:	4a2f      	ldr	r2, [pc, #188]	@ (800a080 <Screen_init_handler_table+0x14c>)
 8009fc4:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_LOGGING]              = Navigation_Logging;
 8009fc6:	4b20      	ldr	r3, [pc, #128]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	3324      	adds	r3, #36	@ 0x24
 8009fcc:	4a2d      	ldr	r2, [pc, #180]	@ (800a084 <Screen_init_handler_table+0x150>)
 8009fce:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SELECTION][ON_OFF_DEV]                       = ON_OFF_Button;
 8009fd0:	4b1d      	ldr	r3, [pc, #116]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	4a2c      	ldr	r2, [pc, #176]	@ (800a088 <Screen_init_handler_table+0x154>)
 8009fd6:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SELECT_PROGRAM]                   = select_running_program;
 8009fd8:	4b1b      	ldr	r3, [pc, #108]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	3304      	adds	r3, #4
 8009fde:	4a2b      	ldr	r2, [pc, #172]	@ (800a08c <Screen_init_handler_table+0x158>)
 8009fe0:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SElECT_MODIFY_PROGRAM]            = select_modify_program;
 8009fe2:	4b19      	ldr	r3, [pc, #100]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	3308      	adds	r3, #8
 8009fe8:	4a29      	ldr	r2, [pc, #164]	@ (800a090 <Screen_init_handler_table+0x15c>)
 8009fea:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]     = Navigation_num_keyboard;
 8009fec:	4b16      	ldr	r3, [pc, #88]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	4a28      	ldr	r2, [pc, #160]	@ (800a094 <Screen_init_handler_table+0x160>)
 8009ff2:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]    = Navigation_full_keyboard;
 8009ff4:	4b14      	ldr	r3, [pc, #80]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	4a27      	ldr	r2, [pc, #156]	@ (800a098 <Screen_init_handler_table+0x164>)
 8009ffa:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SAVE][VALUE_SAVE_INFORMATION]                = Save_Information;
 8009ffc:	4b12      	ldr	r3, [pc, #72]	@ (800a048 <Screen_init_handler_table+0x114>)
 8009ffe:	695b      	ldr	r3, [r3, #20]
 800a000:	4a26      	ldr	r2, [pc, #152]	@ (800a09c <Screen_init_handler_table+0x168>)
 800a002:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_ENTER][ENTER_PASSWORD]                       = Enter_password;
 800a004:	4b10      	ldr	r3, [pc, #64]	@ (800a048 <Screen_init_handler_table+0x114>)
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	4a25      	ldr	r2, [pc, #148]	@ (800a0a0 <Screen_init_handler_table+0x16c>)
 800a00a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_NUM_KEYBOARD]                   = Enter_num_keyboard;
 800a00c:	4b0e      	ldr	r3, [pc, #56]	@ (800a048 <Screen_init_handler_table+0x114>)
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	3304      	adds	r3, #4
 800a012:	4a24      	ldr	r2, [pc, #144]	@ (800a0a4 <Screen_init_handler_table+0x170>)
 800a014:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_TIME]                           = Enter_setting_time;
 800a016:	4b0c      	ldr	r3, [pc, #48]	@ (800a048 <Screen_init_handler_table+0x114>)
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	330c      	adds	r3, #12
 800a01c:	4a22      	ldr	r2, [pc, #136]	@ (800a0a8 <Screen_init_handler_table+0x174>)
 800a01e:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_WIFI]                           = Enter_setting_wifi;
 800a020:	4b09      	ldr	r3, [pc, #36]	@ (800a048 <Screen_init_handler_table+0x114>)
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	3308      	adds	r3, #8
 800a026:	4a21      	ldr	r2, [pc, #132]	@ (800a0ac <Screen_init_handler_table+0x178>)
 800a028:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD]                     = Keyboard;
 800a02a:	4b07      	ldr	r3, [pc, #28]	@ (800a048 <Screen_init_handler_table+0x114>)
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	4a20      	ldr	r2, [pc, #128]	@ (800a0b0 <Screen_init_handler_table+0x17c>)
 800a030:	601a      	str	r2, [r3, #0]

    // assign handler table to handler table of object
    obj_screen->p_handler_table = (void *)handler_function_table;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a04      	ldr	r2, [pc, #16]	@ (800a048 <Screen_init_handler_table+0x114>)
 800a036:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
}
 800a03a:	bf00      	nop
 800a03c:	370c      	adds	r7, #12
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	20000114 	.word	0x20000114
 800a04c:	080077e1 	.word	0x080077e1
 800a050:	0800786d 	.word	0x0800786d
 800a054:	08007817 	.word	0x08007817
 800a058:	080078b9 	.word	0x080078b9
 800a05c:	080078f9 	.word	0x080078f9
 800a060:	080079a7 	.word	0x080079a7
 800a064:	08007a0d 	.word	0x08007a0d
 800a068:	08007b17 	.word	0x08007b17
 800a06c:	08007b81 	.word	0x08007b81
 800a070:	08007bcf 	.word	0x08007bcf
 800a074:	08007c75 	.word	0x08007c75
 800a078:	08007e85 	.word	0x08007e85
 800a07c:	08007f59 	.word	0x08007f59
 800a080:	08008551 	.word	0x08008551
 800a084:	0800856b 	.word	0x0800856b
 800a088:	08008585 	.word	0x08008585
 800a08c:	080089f5 	.word	0x080089f5
 800a090:	08008a19 	.word	0x08008a19
 800a094:	08008b31 	.word	0x08008b31
 800a098:	08008c0d 	.word	0x08008c0d
 800a09c:	08008c61 	.word	0x08008c61
 800a0a0:	080097a1 	.word	0x080097a1
 800a0a4:	08009925 	.word	0x08009925
 800a0a8:	08009c71 	.word	0x08009c71
 800a0ac:	08009d3d 	.word	0x08009d3d
 800a0b0:	08009d53 	.word	0x08009d53

0800a0b4 <Screen_excute_RX_function>:

void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e) {
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
    // do sth ...
	handler_func **handler_function_table = (handler_func **) obj_screen->p_handler_table;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 800a0c4:	60fb      	str	r3, [r7, #12]
    // excute the callback function
    if (screen_e->event == SIG_KEYBOARD) {  // ENVENT KEYBOARD
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d107      	bne.n	800a0de <Screen_excute_RX_function+0x2a>
        handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD](obj_screen, screen_e);   
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	4798      	blx	r3
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
    } else {
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
    }  
}
 800a0dc:	e025      	b.n	800a12a <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_NUM_KEYBOARD) {  // SWTICH TO NUMBER KEYBOARD
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	d107      	bne.n	800a0f6 <Screen_excute_RX_function+0x42>
        handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	330c      	adds	r3, #12
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	4798      	blx	r3
}
 800a0f4:	e019      	b.n	800a12a <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	2b04      	cmp	r3, #4
 800a0fc:	d107      	bne.n	800a10e <Screen_excute_RX_function+0x5a>
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3310      	adds	r3, #16
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	4798      	blx	r3
}
 800a10c:	e00d      	b.n	800a12a <Screen_excute_RX_function+0x76>
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	4413      	add	r3, r2
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	785b      	ldrb	r3, [r3, #1]
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4413      	add	r3, r2
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	4798      	blx	r3
}
 800a12a:	bf00      	nop
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
	...

0800a134 <Screen_CheckInput_Keyboard>:

#pragma endregion FUNCTION EXCUTE SCREEN

#pragma region FUNCTION SCREEN 

Return_Status Screen_CheckInput_Keyboard(Screen_t *const screen_obj) {
 800a134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a138:	b08f      	sub	sp, #60	@ 0x3c
 800a13a:	af02      	add	r7, sp, #8
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	466b      	mov	r3, sp
 800a140:	461e      	mov	r6, r3
    char string[screen_obj->Screen_keyboard.Index_String];
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800a148:	460b      	mov	r3, r1
 800a14a:	3b01      	subs	r3, #1
 800a14c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a14e:	b28b      	uxth	r3, r1
 800a150:	2200      	movs	r2, #0
 800a152:	4698      	mov	r8, r3
 800a154:	4691      	mov	r9, r2
 800a156:	f04f 0200 	mov.w	r2, #0
 800a15a:	f04f 0300 	mov.w	r3, #0
 800a15e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a16a:	b28b      	uxth	r3, r1
 800a16c:	2200      	movs	r2, #0
 800a16e:	461c      	mov	r4, r3
 800a170:	4615      	mov	r5, r2
 800a172:	f04f 0200 	mov.w	r2, #0
 800a176:	f04f 0300 	mov.w	r3, #0
 800a17a:	00eb      	lsls	r3, r5, #3
 800a17c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a180:	00e2      	lsls	r2, r4, #3
 800a182:	460b      	mov	r3, r1
 800a184:	3307      	adds	r3, #7
 800a186:	08db      	lsrs	r3, r3, #3
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	ebad 0d03 	sub.w	sp, sp, r3
 800a18e:	ab02      	add	r3, sp, #8
 800a190:	3300      	adds	r3, #0
 800a192:	62bb      	str	r3, [r7, #40]	@ 0x28
    char warm_string[20] = {0};
 800a194:	f107 030c 	add.w	r3, r7, #12
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	605a      	str	r2, [r3, #4]
 800a19e:	609a      	str	r2, [r3, #8]
 800a1a0:	60da      	str	r2, [r3, #12]
 800a1a2:	611a      	str	r2, [r3, #16]
    float data_compare;
    uint8_t index_condition;
    // copy string
    memcpy(string,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f103 010e 	add.w	r1, r3, #14
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1b4:	f006 fd43 	bl	8010c3e <memcpy>
    string[screen_obj->Screen_keyboard.Index_String] = '\0';
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a1be:	461a      	mov	r2, r3
 800a1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	5499      	strb	r1, [r3, r2]
    /* get index correspond with vp */
    index_condition = Index_VP(screen_obj->Screen_keyboard.VP_Text,lookup_VP_condition,(sizeof(lookup_VP_condition)/ sizeof(lookup_VP_condition[0])));
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	899b      	ldrh	r3, [r3, #12]
 800a1ca:	2205      	movs	r2, #5
 800a1cc:	4939      	ldr	r1, [pc, #228]	@ (800a2b4 <Screen_CheckInput_Keyboard+0x180>)
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7ff fe73 	bl	8009eba <Index_VP>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* compare data with limit */
    data_compare = atof(string);
 800a1da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1dc:	f004 fb8e 	bl	800e8fc <atof>
 800a1e0:	ec53 2b10 	vmov	r2, r3, d0
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	f7f6 fd0e 	bl	8000c08 <__aeabi_d2f>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	623b      	str	r3, [r7, #32]
    if (data_compare > screen_obj->Screen_condition[index_condition].max_value) {
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1f8:	00db      	lsls	r3, r3, #3
 800a1fa:	4413      	add	r3, r2
 800a1fc:	edd3 7a00 	vldr	s15, [r3]
 800a200:	ed97 7a08 	vldr	s14, [r7, #32]
 800a204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a20c:	dd1d      	ble.n	800a24a <Screen_CheckInput_Keyboard+0x116>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MAX: %.2f", screen_obj->Screen_condition[index_condition].max_value);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	4413      	add	r3, r2
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7f6 f9a3 	bl	8000568 <__aeabi_f2d>
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	f107 000c 	add.w	r0, r7, #12
 800a22a:	e9cd 2300 	strd	r2, r3, [sp]
 800a22e:	4a22      	ldr	r2, [pc, #136]	@ (800a2b8 <Screen_CheckInput_Keyboard+0x184>)
 800a230:	2114      	movs	r1, #20
 800a232:	f006 fa5b 	bl	80106ec <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 800a236:	f107 020c 	add.w	r2, r7, #12
 800a23a:	2314      	movs	r3, #20
 800a23c:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f003 faa6 	bl	800d792 <DWIN_SetText>
        return Status_ERROR;
 800a246:	2300      	movs	r3, #0
 800a248:	e02d      	b.n	800a2a6 <Screen_CheckInput_Keyboard+0x172>
    } else if (data_compare < screen_obj->Screen_condition[index_condition].min_value) {
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a24e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a252:	00db      	lsls	r3, r3, #3
 800a254:	4413      	add	r3, r2
 800a256:	edd3 7a01 	vldr	s15, [r3, #4]
 800a25a:	ed97 7a08 	vldr	s14, [r7, #32]
 800a25e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a266:	d51d      	bpl.n	800a2a4 <Screen_CheckInput_Keyboard+0x170>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MIN: %.2f", screen_obj->Screen_condition[index_condition].min_value);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a26c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a270:	00db      	lsls	r3, r3, #3
 800a272:	4413      	add	r3, r2
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	4618      	mov	r0, r3
 800a278:	f7f6 f976 	bl	8000568 <__aeabi_f2d>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	f107 000c 	add.w	r0, r7, #12
 800a284:	e9cd 2300 	strd	r2, r3, [sp]
 800a288:	4a0c      	ldr	r2, [pc, #48]	@ (800a2bc <Screen_CheckInput_Keyboard+0x188>)
 800a28a:	2114      	movs	r1, #20
 800a28c:	f006 fa2e 	bl	80106ec <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 800a290:	f107 020c 	add.w	r2, r7, #12
 800a294:	2314      	movs	r3, #20
 800a296:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f003 fa79 	bl	800d792 <DWIN_SetText>
        return Status_ERROR;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	e000      	b.n	800a2a6 <Screen_CheckInput_Keyboard+0x172>
    } 
    return Status_SUCCESS; 
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	46b5      	mov	sp, r6
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3734      	adds	r7, #52	@ 0x34
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2b2:	bf00      	nop
 800a2b4:	20000040 	.word	0x20000040
 800a2b8:	08013bb0 	.word	0x08013bb0
 800a2bc:	08013bbc 	.word	0x08013bbc

0800a2c0 <Screen_GetIcon_Pin>:
 * @brief Function used to setup icon with data test
 * 
 * @param obj_screen : object screen
 * @param data_pin : array 2d data test
 */
static void Screen_GetIcon_Pin(Screen_t *const screen_obj, char *data_pin) {
 800a2c0:	b590      	push	{r4, r7, lr}
 800a2c2:	b0a5      	sub	sp, #148	@ 0x94
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800a2d8:	fb01 f303 	mul.w	r3, r1, r3
 800a2dc:	4413      	add	r3, r2
 800a2de:	334b      	adds	r3, #75	@ 0x4b
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	440b      	add	r3, r1
 800a2ec:	011b      	lsls	r3, r3, #4
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    
    uint8_t map_array[128] = {0};
 800a2fa:	f107 030c 	add.w	r3, r7, #12
 800a2fe:	2280      	movs	r2, #128	@ 0x80
 800a300:	2100      	movs	r1, #0
 800a302:	4618      	mov	r0, r3
 800a304:	f006 fb60 	bl	80109c8 <memset>
    map_array['G'] = ICON_GND;
 800a308:	2302      	movs	r3, #2
 800a30a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    map_array['V'] = ICON_VCC;
 800a30e:	2303      	movs	r3, #3
 800a310:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = malloc(num_pin * sizeof(uint8_t));
 800a314:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800a31e:	461c      	mov	r4, r3
 800a320:	4610      	mov	r0, r2
 800a322:	f004 faf3 	bl	800e90c <malloc>
 800a326:	4603      	mov	r3, r0
 800a328:	4619      	mov	r1, r3
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800a330:	fb04 f303 	mul.w	r3, r4, r3
 800a334:	4413      	add	r3, r2
 800a336:	335c      	adds	r3, #92	@ 0x5c
 800a338:	6019      	str	r1, [r3, #0]

    /* Convert data to icon pin config */
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 800a33a:	2300      	movs	r3, #0
 800a33c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a340:	e03c      	b.n	800a3bc <Screen_GetIcon_Pin+0xfc>
        if (Pin_x >= 8) {
 800a342:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a346:	2b07      	cmp	r3, #7
 800a348:	d90c      	bls.n	800a364 <Screen_GetIcon_Pin+0xa4>
            map_array['0'] = ICON_OUTPUT;
 800a34a:	2301      	movs	r3, #1
 800a34c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_OUTPUT;
 800a350:	2301      	movs	r3, #1
 800a352:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_INPUT;
 800a356:	2300      	movs	r3, #0
 800a358:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_INPUT;
 800a35c:	2300      	movs	r3, #0
 800a35e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 800a362:	e00b      	b.n	800a37c <Screen_GetIcon_Pin+0xbc>
        } else {
            map_array['0'] = ICON_INPUT;
 800a364:	2300      	movs	r3, #0
 800a366:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_INPUT;
 800a36a:	2300      	movs	r3, #0
 800a36c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_OUTPUT;
 800a370:	2301      	movs	r3, #1
 800a372:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_OUTPUT;
 800a376:	2301      	movs	r3, #1
 800a378:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        }
        screen_obj->IC_Testerx[screen_obj->curr_device].config_pin[Pin_x] = map_array[(uint8_t)(data_pin[Pin_x])];
 800a37c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	4413      	add	r3, r2
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	4619      	mov	r1, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800a38e:	4618      	mov	r0, r3
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800a396:	fb00 f303 	mul.w	r3, r0, r3
 800a39a:	4413      	add	r3, r2
 800a39c:	335c      	adds	r3, #92	@ 0x5c
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f101 0290 	add.w	r2, r1, #144	@ 0x90
 800a3aa:	443a      	add	r2, r7
 800a3ac:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800a3b0:	701a      	strb	r2, [r3, #0]
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 800a3b2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a3bc:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800a3c0:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d3bc      	bcc.n	800a342 <Screen_GetIcon_Pin+0x82>
    }
}
 800a3c8:	bf00      	nop
 800a3ca:	bf00      	nop
 800a3cc:	3794      	adds	r7, #148	@ 0x94
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd90      	pop	{r4, r7, pc}

0800a3d2 <Screen_GetIcon_Result>:

static void Screen_GetIcon_Result(Screen_t *const screen_obj, char *result) {
 800a3d2:	b590      	push	{r4, r7, lr}
 800a3d4:	b0a5      	sub	sp, #148	@ 0x94
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6039      	str	r1, [r7, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800a3ea:	fb01 f303 	mul.w	r3, r1, r3
 800a3ee:	4413      	add	r3, r2
 800a3f0:	334b      	adds	r3, #75	@ 0x4b
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800a3f8:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800a3fc:	6879      	ldr	r1, [r7, #4]
 800a3fe:	4613      	mov	r3, r2
 800a400:	005b      	lsls	r3, r3, #1
 800a402:	4413      	add	r3, r2
 800a404:	011b      	lsls	r3, r3, #4
 800a406:	440b      	add	r3, r1
 800a408:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800a412:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	4613      	mov	r3, r2
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	4413      	add	r3, r2
 800a41e:	011b      	lsls	r3, r3, #4
 800a420:	440b      	add	r3, r1
 800a422:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
    uint8_t map_array[128] = {0};
 800a42c:	f107 030c 	add.w	r3, r7, #12
 800a430:	2280      	movs	r2, #128	@ 0x80
 800a432:	2100      	movs	r1, #0
 800a434:	4618      	mov	r0, r3
 800a436:	f006 fac7 	bl	80109c8 <memset>
    map_array['0'] = ICON_LOGIC_LOW;
 800a43a:	2300      	movs	r3, #0
 800a43c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    map_array['1'] = ICON_LOGIC_HIGH;
 800a440:	2301      	movs	r3, #1
 800a442:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    map_array['3'] = ICON_CLOCK_HIGH;
 800a446:	2303      	movs	r3, #3
 800a448:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    map_array['4'] = ICON_CLOCK_LOW;
 800a44c:	2302      	movs	r3, #2
 800a44e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].icon_result = malloc(num_case * num_pin);
 800a452:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800a456:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800a45a:	fb02 f303 	mul.w	r3, r2, r3
 800a45e:	461a      	mov	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800a466:	461c      	mov	r4, r3
 800a468:	4610      	mov	r0, r2
 800a46a:	f004 fa4f 	bl	800e90c <malloc>
 800a46e:	4603      	mov	r3, r0
 800a470:	4619      	mov	r1, r3
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800a478:	fb04 f303 	mul.w	r3, r4, r3
 800a47c:	4413      	add	r3, r2
 800a47e:	3364      	adds	r3, #100	@ 0x64
 800a480:	6019      	str	r1, [r3, #0]

    /* Convert data to icon result */
    for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800a482:	2300      	movs	r3, #0
 800a484:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a488:	e01f      	b.n	800a4ca <Screen_GetIcon_Result+0xf8>
        screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[i] = map_array[(uint8_t)result[i]];
 800a48a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	4413      	add	r3, r2
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	4619      	mov	r1, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800a49c:	4618      	mov	r0, r3
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800a4a4:	fb00 f303 	mul.w	r3, r0, r3
 800a4a8:	4413      	add	r3, r2
 800a4aa:	3364      	adds	r3, #100	@ 0x64
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f101 0290 	add.w	r2, r1, #144	@ 0x90
 800a4b8:	443a      	add	r2, r7
 800a4ba:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800a4be:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800a4c0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a4ca:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800a4ce:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800a4d2:	f897 108d 	ldrb.w	r1, [r7, #141]	@ 0x8d
 800a4d6:	fb01 f303 	mul.w	r3, r1, r3
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	dbd5      	blt.n	800a48a <Screen_GetIcon_Result+0xb8>
    }
}
 800a4de:	bf00      	nop
 800a4e0:	bf00      	nop
 800a4e2:	3794      	adds	r7, #148	@ 0x94
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd90      	pop	{r4, r7, pc}

0800a4e8 <Screen_Init_Variable>:

static void Screen_Init_Variable(Screen_t *const obj_screen) {
 800a4e8:	b5b0      	push	{r4, r5, r7, lr}
 800a4ea:	b0a0      	sub	sp, #128	@ 0x80
 800a4ec:	af02      	add	r7, sp, #8
 800a4ee:	6078      	str	r0, [r7, #4]
    obj_screen->curr_device = DEVICE_1;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
//    memcpy(obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));
//    memcpy(obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));
//    memcpy(obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));
//    memcpy(obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));

     obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC = "Description IC 74HC4051";
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4acd      	ldr	r2, [pc, #820]	@ (800a830 <Screen_Init_Variable+0x348>)
 800a4fc:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
     obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC = "Description IC 74HC4052";
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4acc      	ldr	r2, [pc, #816]	@ (800a834 <Screen_Init_Variable+0x34c>)
 800a504:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
     obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC = "Description IC 74HC4053";
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4acb      	ldr	r2, [pc, #812]	@ (800a838 <Screen_Init_Variable+0x350>)
 800a50c:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
     obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC = "Description IC 74HC4054";
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4aca      	ldr	r2, [pc, #808]	@ (800a83c <Screen_Init_Variable+0x354>)
 800a514:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800a518:	2014      	movs	r0, #20
 800a51a:	f004 f9f7 	bl	800e90c <malloc>
 800a51e:	4603      	mov	r3, r0
 800a520:	461a      	mov	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800a528:	2014      	movs	r0, #20
 800a52a:	f004 f9ef 	bl	800e90c <malloc>
 800a52e:	4603      	mov	r3, r0
 800a530:	461a      	mov	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800a538:	2014      	movs	r0, #20
 800a53a:	f004 f9e7 	bl	800e90c <malloc>
 800a53e:	4603      	mov	r3, r0
 800a540:	461a      	mov	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800a548:	2014      	movs	r0, #20
 800a54a:	f004 f9df 	bl	800e90c <malloc>
 800a54e:	4603      	mov	r3, r0
 800a550:	461a      	mov	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8c3 2468 	str.w	r2, [r3, #1128]	@ 0x468

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800a558:	2014      	movs	r0, #20
 800a55a:	f004 f9d7 	bl	800e90c <malloc>
 800a55e:	4603      	mov	r3, r0
 800a560:	461a      	mov	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800a568:	2014      	movs	r0, #20
 800a56a:	f004 f9cf 	bl	800e90c <malloc>
 800a56e:	4603      	mov	r3, r0
 800a570:	461a      	mov	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800a578:	2014      	movs	r0, #20
 800a57a:	f004 f9c7 	bl	800e90c <malloc>
 800a57e:	4603      	mov	r3, r0
 800a580:	461a      	mov	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800a588:	2014      	movs	r0, #20
 800a58a:	f004 f9bf 	bl	800e90c <malloc>
 800a58e:	4603      	mov	r3, r0
 800a590:	461a      	mov	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470

    obj_screen->Program_Testx[PROGRAM_TEST1].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800a598:	2002      	movs	r0, #2
 800a59a:	f004 f9b7 	bl	800e90c <malloc>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
    obj_screen->Program_Testx[PROGRAM_TEST2].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800a5a8:	2002      	movs	r0, #2
 800a5aa:	f004 f9af 	bl	800e90c <malloc>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    obj_screen->Program_Testx[PROGRAM_TEST3].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800a5b8:	2002      	movs	r0, #2
 800a5ba:	f004 f9a7 	bl	800e90c <malloc>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
    obj_screen->Program_Testx[PROGRAM_TEST4].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800a5c8:	2002      	movs	r0, #2
 800a5ca:	f004 f99f 	bl	800e90c <malloc>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8c3 2478 	str.w	r2, [r3, #1144]	@ 0x478

    uint8_t buffer[TOTAL_ONE_PROGRAM_TEST_LEN];
    for (uint8_t i = 0; i < 4; i++) {
 800a5d8:	2300      	movs	r3, #0
 800a5da:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800a5de:	e043      	b.n	800a668 <Screen_Init_Variable+0x180>
        AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(i),&buffer[0],TOTAL_ONE_PROGRAM_TEST_LEN);
 800a5e0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	0052      	lsls	r2, r2, #1
 800a5ea:	4413      	add	r3, r2
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	00d2      	lsls	r2, r2, #3
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	3343      	adds	r3, #67	@ 0x43
 800a5f8:	b299      	uxth	r1, r3
 800a5fa:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a5fe:	232a      	movs	r3, #42	@ 0x2a
 800a600:	488f      	ldr	r0, [pc, #572]	@ (800a840 <Screen_Init_Variable+0x358>)
 800a602:	f002 ff25 	bl	800d450 <AT24Cxx_read_buffer>
        sscanf((char *)buffer, "%[^,],%[^,],%[^,\n]",
 800a606:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800a60a:	6879      	ldr	r1, [r7, #4]
 800a60c:	4613      	mov	r3, r2
 800a60e:	005b      	lsls	r3, r3, #1
 800a610:	4413      	add	r3, r2
 800a612:	011b      	lsls	r3, r3, #4
 800a614:	440b      	add	r3, r1
 800a616:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800a61a:	681c      	ldr	r4, [r3, #0]
 800a61c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800a620:	6879      	ldr	r1, [r7, #4]
 800a622:	4613      	mov	r3, r2
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	4413      	add	r3, r2
 800a628:	011b      	lsls	r3, r3, #4
 800a62a:	440b      	add	r3, r1
 800a62c:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800a630:	681d      	ldr	r5, [r3, #0]
 800a632:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800a636:	6879      	ldr	r1, [r7, #4]
 800a638:	4613      	mov	r3, r2
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	4413      	add	r3, r2
 800a63e:	011b      	lsls	r3, r3, #4
 800a640:	440b      	add	r3, r1
 800a642:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	462b      	mov	r3, r5
 800a650:	4622      	mov	r2, r4
 800a652:	497c      	ldr	r1, [pc, #496]	@ (800a844 <Screen_Init_Variable+0x35c>)
 800a654:	f006 f8a2 	bl	801079c <siscanf>
        // memcpy(data_send_esp32->data,"p",1);
        // memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send));
        // data_send_esp32->len = strlen(buffer_send) + 1;
        // OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));

        HAL_Delay(100);
 800a658:	2064      	movs	r0, #100	@ 0x64
 800a65a:	f7f7 fe59 	bl	8002310 <HAL_Delay>
    for (uint8_t i = 0; i < 4; i++) {
 800a65e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a662:	3301      	adds	r3, #1
 800a664:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800a668:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a66c:	2b03      	cmp	r3, #3
 800a66e:	d9b7      	bls.n	800a5e0 <Screen_Init_Variable+0xf8>
    }

    memcpy(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,"IC TESTER 1",strlen("IC TESTER 1"));
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	334d      	adds	r3, #77	@ 0x4d
 800a674:	220b      	movs	r2, #11
 800a676:	4974      	ldr	r1, [pc, #464]	@ (800a848 <Screen_Init_Variable+0x360>)
 800a678:	4618      	mov	r0, r3
 800a67a:	f006 fae0 	bl	8010c3e <memcpy>
    memcpy(obj_screen->IC_Testerx[DEVICE_2].NameIC_Tester,"IC TESTER 2",strlen("IC TESTER 2"));
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f203 137d 	addw	r3, r3, #381	@ 0x17d
 800a684:	220b      	movs	r2, #11
 800a686:	4971      	ldr	r1, [pc, #452]	@ (800a84c <Screen_Init_Variable+0x364>)
 800a688:	4618      	mov	r0, r3
 800a68a:	f006 fad8 	bl	8010c3e <memcpy>
    memcpy(obj_screen->IC_Testerx[DEVICE_3].NameIC_Tester,"IC TESTER 3",strlen("IC TESTER 3"));
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f203 23ad 	addw	r3, r3, #685	@ 0x2ad
 800a694:	220b      	movs	r2, #11
 800a696:	496e      	ldr	r1, [pc, #440]	@ (800a850 <Screen_Init_Variable+0x368>)
 800a698:	4618      	mov	r0, r3
 800a69a:	f006 fad0 	bl	8010c3e <memcpy>

    char wifi_info[60] = {0};
 800a69e:	f107 0308 	add.w	r3, r7, #8
 800a6a2:	223c      	movs	r2, #60	@ 0x3c
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f006 f98e 	bl	80109c8 <memset>
    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_WIFI_INFO,&wifi_info[0],DATA_LEN_WIFI_INFO);
 800a6ac:	f107 0208 	add.w	r2, r7, #8
 800a6b0:	233c      	movs	r3, #60	@ 0x3c
 800a6b2:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800a6b6:	4862      	ldr	r0, [pc, #392]	@ (800a840 <Screen_Init_Variable+0x358>)
 800a6b8:	f002 feca 	bl	800d450 <AT24Cxx_read_buffer>
    char *pdata = strtok(wifi_info,",");
 800a6bc:	f107 0308 	add.w	r3, r7, #8
 800a6c0:	4964      	ldr	r1, [pc, #400]	@ (800a854 <Screen_Init_Variable+0x36c>)
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f006 f9d0 	bl	8010a68 <strtok>
 800a6c8:	6738      	str	r0, [r7, #112]	@ 0x70
    memcpy(obj_screen->Wifi_setting.Name_Wifi,pdata,strlen(pdata));
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f503 6493 	add.w	r4, r3, #1176	@ 0x498
 800a6d0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800a6d2:	f7f5 fddd 	bl	8000290 <strlen>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	461a      	mov	r2, r3
 800a6da:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f006 faae 	bl	8010c3e <memcpy>
    pdata = strtok(NULL,",");
 800a6e2:	495c      	ldr	r1, [pc, #368]	@ (800a854 <Screen_Init_Variable+0x36c>)
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	f006 f9bf 	bl	8010a68 <strtok>
 800a6ea:	6738      	str	r0, [r7, #112]	@ 0x70
    memcpy(obj_screen->Wifi_setting.Password_Wifi,pdata,strlen(pdata));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f203 44b6 	addw	r4, r3, #1206	@ 0x4b6
 800a6f2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800a6f4:	f7f5 fdcc 	bl	8000290 <strlen>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800a6fe:	4620      	mov	r0, r4
 800a700:	f006 fa9d 	bl	8010c3e <memcpy>
    // memcpy(obj_screen->Wifi_setting.Name_Wifi,"Wifi TEST 1",strlen("Wifi TEST 1"));
    // memcpy(obj_screen->Wifi_setting.Password_Wifi,"PASSword 1234",strlen("PASSword 1234"));


    obj_screen->IC_Testerx[DEVICE_1].curr_PageMain = DWINPAGE_MAIN;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2265      	movs	r2, #101	@ 0x65
 800a708:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    obj_screen->IC_Testerx[DEVICE_2].curr_PageMain = DWINPAGE_MAIN;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2265      	movs	r2, #101	@ 0x65
 800a710:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
    obj_screen->IC_Testerx[DEVICE_3].curr_PageMain = DWINPAGE_MAIN; 
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2265      	movs	r2, #101	@ 0x65
 800a718:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

    obj_screen->IC_Testerx[DEVICE_1].state = false;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    obj_screen->IC_Testerx[DEVICE_2].state = false;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
    obj_screen->IC_Testerx[DEVICE_3].state = false;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 22ac 	strb.w	r2, [r3, #684]	@ 0x2ac

    obj_screen->IC_Testerx[DEVICE_1].curr_num_ic = 0;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_1,obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program));
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 43d8 	ldr.w	r4, [r3, #984]	@ 0x3d8
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800a748:	4618      	mov	r0, r3
 800a74a:	f7f5 fda1 	bl	8000290 <strlen>
 800a74e:	4603      	mov	r3, r0
 800a750:	b29b      	uxth	r3, r3
 800a752:	4622      	mov	r2, r4
 800a754:	f249 2128 	movw	r1, #37416	@ 0x9228
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f003 f81a 	bl	800d792 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_2,obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 4408 	ldr.w	r4, [r3, #1032]	@ 0x408
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7f5 fd90 	bl	8000290 <strlen>
 800a770:	4603      	mov	r3, r0
 800a772:	b29b      	uxth	r3, r3
 800a774:	4622      	mov	r2, r4
 800a776:	f249 2150 	movw	r1, #37456	@ 0x9250
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f003 f809 	bl	800d792 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_3,obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program));
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 4438 	ldr.w	r4, [r3, #1080]	@ 0x438
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 3438 	ldr.w	r3, [r3, #1080]	@ 0x438
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f5 fd7f 	bl	8000290 <strlen>
 800a792:	4603      	mov	r3, r0
 800a794:	b29b      	uxth	r3, r3
 800a796:	4622      	mov	r2, r4
 800a798:	f249 2178 	movw	r1, #37496	@ 0x9278
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f002 fff8 	bl	800d792 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_4,obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program));
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 4468 	ldr.w	r4, [r3, #1128]	@ 0x468
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 3468 	ldr.w	r3, [r3, #1128]	@ 0x468
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7f5 fd6e 	bl	8000290 <strlen>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	f249 21a0 	movw	r1, #37536	@ 0x92a0
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f002 ffe7 	bl	800d792 <DWIN_SetText>

    DWIN_SetText((Dwin_t *)obj_screen,VP_Name_Tester,obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,strlen(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester));
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f103 044d 	add.w	r4, r3, #77	@ 0x4d
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	334d      	adds	r3, #77	@ 0x4d
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7f5 fd5e 	bl	8000290 <strlen>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	4622      	mov	r2, r4
 800a7da:	f249 3150 	movw	r1, #37712	@ 0x9350
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f002 ffd7 	bl	800d792 <DWIN_SetText>

    // obj_screen->Program_Testx[PROGRAM_TEST1].num_pin = 16;
    // obj_screen->Program_Testx[PROGRAM_TEST1].num_case = 8;

    /* Screen */
    obj_screen->Screen_keyboard.Caplock = false;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    obj_screen->Screen_keyboard.Index_String = 0;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    obj_screen->Screen_condition = &condition_array[0];
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a18      	ldr	r2, [pc, #96]	@ (800a858 <Screen_Init_Variable+0x370>)
 800a7f8:	645a      	str	r2, [r3, #68]	@ 0x44

    Screen_ShowData_Mainpage(obj_screen,PROGRAM_TEST1);
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f82d 	bl	800a85c <Screen_ShowData_Mainpage>
    DWIN_SetVariable_Icon((Dwin_t *)obj_screen,VP_ICON_ON_OFF,obj_screen->IC_Testerx[obj_screen->curr_device].state);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800a808:	4619      	mov	r1, r3
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800a810:	fb01 f303 	mul.w	r3, r1, r3
 800a814:	4413      	add	r3, r2
 800a816:	334c      	adds	r3, #76	@ 0x4c
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	461a      	mov	r2, r3
 800a81c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f003 f868 	bl	800d8f6 <DWIN_SetVariable_Icon>
}
 800a826:	bf00      	nop
 800a828:	3778      	adds	r7, #120	@ 0x78
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bdb0      	pop	{r4, r5, r7, pc}
 800a82e:	bf00      	nop
 800a830:	08013bc8 	.word	0x08013bc8
 800a834:	08013be0 	.word	0x08013be0
 800a838:	08013bf8 	.word	0x08013bf8
 800a83c:	08013c10 	.word	0x08013c10
 800a840:	200013a0 	.word	0x200013a0
 800a844:	08013c28 	.word	0x08013c28
 800a848:	08013c3c 	.word	0x08013c3c
 800a84c:	08013c48 	.word	0x08013c48
 800a850:	08013c54 	.word	0x08013c54
 800a854:	08013c60 	.word	0x08013c60
 800a858:	20000054 	.word	0x20000054

0800a85c <Screen_ShowData_Mainpage>:

static void Screen_ShowData_Mainpage(Screen_t *const screen_obj, uint8_t index_program) {
 800a85c:	b5b0      	push	{r4, r5, r7, lr}
 800a85e:	b090      	sub	sp, #64	@ 0x40
 800a860:	af02      	add	r7, sp, #8
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	70fb      	strb	r3, [r7, #3]
    uint8_t a_select_program[MAX_PROGRAM_TEST];
    // uint8_t index_program = screen_obj.IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t num_ic = atoi(screen_obj->Program_Testx[index_program].num_IC);
 800a868:	78fa      	ldrb	r2, [r7, #3]
 800a86a:	6879      	ldr	r1, [r7, #4]
 800a86c:	4613      	mov	r3, r2
 800a86e:	005b      	lsls	r3, r3, #1
 800a870:	4413      	add	r3, r2
 800a872:	011b      	lsls	r3, r3, #4
 800a874:	440b      	add	r3, r1
 800a876:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f004 f840 	bl	800e902 <atoi>
 800a882:	4603      	mov	r3, r0
 800a884:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 800a888:	78fa      	ldrb	r2, [r7, #3]
 800a88a:	6879      	ldr	r1, [r7, #4]
 800a88c:	4613      	mov	r3, r2
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	4413      	add	r3, r2
 800a892:	011b      	lsls	r3, r3, #4
 800a894:	440b      	add	r3, r1
 800a896:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7f5 fcf7 	bl	8000290 <strlen>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	3309      	adds	r3, #9
 800a8a8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t size_Description_IC = strlen("IC Description: ") + strlen((char *)screen_obj->Program_Testx[index_program].Description_IC);
 800a8ac:	78fa      	ldrb	r2, [r7, #3]
 800a8ae:	6879      	ldr	r1, [r7, #4]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	4413      	add	r3, r2
 800a8b6:	011b      	lsls	r3, r3, #4
 800a8b8:	440b      	add	r3, r1
 800a8ba:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7f5 fce5 	bl	8000290 <strlen>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	3310      	adds	r3, #16
 800a8cc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    // uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800a8d0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f004 f818 	bl	800e90c <malloc>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	633b      	str	r3, [r7, #48]	@ 0x30
    char *Text_Description_IC = malloc(size_Description_IC + 1);
 800a8e0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f004 f810 	bl	800e90c <malloc>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // char *Text_Num_IC = malloc(size_Num_IC + 1);

    strcpy(Text_Name_IC,"IC Name: ");
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f2:	4949      	ldr	r1, [pc, #292]	@ (800aa18 <Screen_ShowData_Mainpage+0x1bc>)
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	cb03      	ldmia	r3!, {r0, r1}
 800a8fa:	6010      	str	r0, [r2, #0]
 800a8fc:	6051      	str	r1, [r2, #4]
 800a8fe:	881b      	ldrh	r3, [r3, #0]
 800a900:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 800a902:	78fa      	ldrb	r2, [r7, #3]
 800a904:	6879      	ldr	r1, [r7, #4]
 800a906:	4613      	mov	r3, r2
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	4413      	add	r3, r2
 800a90c:	011b      	lsls	r3, r3, #4
 800a90e:	440b      	add	r3, r1
 800a910:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4619      	mov	r1, r3
 800a918:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a91a:	f006 f85d 	bl	80109d8 <strcat>
    strcpy(Text_Description_IC,"IC Description: ");
 800a91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a920:	4a3e      	ldr	r2, [pc, #248]	@ (800aa1c <Screen_ShowData_Mainpage+0x1c0>)
 800a922:	461d      	mov	r5, r3
 800a924:	4614      	mov	r4, r2
 800a926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a928:	6028      	str	r0, [r5, #0]
 800a92a:	6069      	str	r1, [r5, #4]
 800a92c:	60aa      	str	r2, [r5, #8]
 800a92e:	60eb      	str	r3, [r5, #12]
 800a930:	7823      	ldrb	r3, [r4, #0]
 800a932:	742b      	strb	r3, [r5, #16]
    strcat(Text_Description_IC,(char *)screen_obj->Program_Testx[index_program].Description_IC);
 800a934:	78fa      	ldrb	r2, [r7, #3]
 800a936:	6879      	ldr	r1, [r7, #4]
 800a938:	4613      	mov	r3, r2
 800a93a:	005b      	lsls	r3, r3, #1
 800a93c:	4413      	add	r3, r2
 800a93e:	011b      	lsls	r3, r3, #4
 800a940:	440b      	add	r3, r1
 800a942:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4619      	mov	r1, r3
 800a94a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a94c:	f006 f844 	bl	80109d8 <strcat>
    // strcpy(Text_Num_IC,"Number of ICs: ");
    // strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);

    memset(a_select_program,1,MAX_PROGRAM_TEST);
 800a950:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a954:	2204      	movs	r2, #4
 800a956:	2101      	movs	r1, #1
 800a958:	4618      	mov	r0, r3
 800a95a:	f006 f835 	bl	80109c8 <memset>
    // Get the program selected
    a_select_program[index_program] = 0 ;
 800a95e:	78fb      	ldrb	r3, [r7, #3]
 800a960:	3338      	adds	r3, #56	@ 0x38
 800a962:	443b      	add	r3, r7
 800a964:	2200      	movs	r2, #0
 800a966:	f803 2c10 	strb.w	r2, [r3, #-16]
    screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index = index_program;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800a970:	4619      	mov	r1, r3
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800a978:	fb01 f303 	mul.w	r3, r1, r3
 800a97c:	4413      	add	r3, r2
 800a97e:	334b      	adds	r3, #75	@ 0x4b
 800a980:	78fa      	ldrb	r2, [r7, #3]
 800a982:	701a      	strb	r2, [r3, #0]

    // Show data in screen
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_SELECT_PROGRAM,a_select_program,MAX_PROGRAM_TEST);
 800a984:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800a988:	2304      	movs	r3, #4
 800a98a:	f44f 4182 	mov.w	r1, #16640	@ 0x4100
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f002 ffde 	bl	800d950 <DWIN_SetArray_Icon>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_IC,Text_Name_IC,size_Name_IC);
 800a994:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a998:	b29b      	uxth	r3, r3
 800a99a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a99c:	f44f 4111 	mov.w	r1, #37120	@ 0x9100
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f002 fef6 	bl	800d792 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Description_IC,Text_Description_IC,size_Description_IC);
 800a9a6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9ae:	f249 1150 	movw	r1, #37200	@ 0x9150
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f002 feed 	bl	800d792 <DWIN_SetText>

    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"Number of ICs: %d / %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic,num_ic);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800a9be:	4619      	mov	r1, r3
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800a9c6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ca:	4413      	add	r3, r2
 800a9cc:	334a      	adds	r3, #74	@ 0x4a
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a9d6:	f107 0008 	add.w	r0, r7, #8
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	4613      	mov	r3, r2
 800a9de:	4a10      	ldr	r2, [pc, #64]	@ (800aa20 <Screen_ShowData_Mainpage+0x1c4>)
 800a9e0:	211e      	movs	r1, #30
 800a9e2:	f005 fe83 	bl	80106ec <sniprintf>
//    uint8_t len = strlen(ShowCase_String);
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,ShowCase_String,strlen(ShowCase_String));
 800a9e6:	f107 0308 	add.w	r3, r7, #8
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7f5 fc50 	bl	8000290 <strlen>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	f107 0208 	add.w	r2, r7, #8
 800a9f8:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f002 fec8 	bl	800d792 <DWIN_SetText>

    /* free malloc */
    free(Text_Name_IC);
 800aa02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa04:	f003 ff8a 	bl	800e91c <free>
    free(Text_Description_IC);
 800aa08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa0a:	f003 ff87 	bl	800e91c <free>

}
 800aa0e:	bf00      	nop
 800aa10:	3738      	adds	r7, #56	@ 0x38
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bdb0      	pop	{r4, r5, r7, pc}
 800aa16:	bf00      	nop
 800aa18:	08013b24 	.word	0x08013b24
 800aa1c:	08013c64 	.word	0x08013c64
 800aa20:	08013c78 	.word	0x08013c78

0800aa24 <Screen_SetInfo_Pin>:

static void Screen_SetInfo_Pin(Screen_t *const screen_obj) {
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800aa32:	4619      	mov	r1, r3
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800aa3a:	fb01 f303 	mul.w	r3, r1, r3
 800aa3e:	4413      	add	r3, r2
 800aa40:	334b      	adds	r3, #75	@ 0x4b
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	73fb      	strb	r3, [r7, #15]
    uint16_t Address_VP = VP_Name_Pin;
 800aa46:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 800aa4a:	82fb      	strh	r3, [r7, #22]
    char *data_copy = malloc(screen_obj->Program_Testx[index_program].data_pin_len + 1);
 800aa4c:	7bfa      	ldrb	r2, [r7, #15]
 800aa4e:	6879      	ldr	r1, [r7, #4]
 800aa50:	4613      	mov	r3, r2
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	4413      	add	r3, r2
 800aa56:	011b      	lsls	r3, r3, #4
 800aa58:	440b      	add	r3, r1
 800aa5a:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800aa5e:	881b      	ldrh	r3, [r3, #0]
 800aa60:	3301      	adds	r3, #1
 800aa62:	4618      	mov	r0, r3
 800aa64:	f003 ff52 	bl	800e90c <malloc>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	60bb      	str	r3, [r7, #8]
    memcpy(data_copy,screen_obj->Program_Testx[index_program].data_pin,screen_obj->Program_Testx[index_program].data_pin_len);
 800aa6c:	7bfa      	ldrb	r2, [r7, #15]
 800aa6e:	6879      	ldr	r1, [r7, #4]
 800aa70:	4613      	mov	r3, r2
 800aa72:	005b      	lsls	r3, r3, #1
 800aa74:	4413      	add	r3, r2
 800aa76:	011b      	lsls	r3, r3, #4
 800aa78:	440b      	add	r3, r1
 800aa7a:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800aa7e:	6818      	ldr	r0, [r3, #0]
 800aa80:	7bfa      	ldrb	r2, [r7, #15]
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	4613      	mov	r3, r2
 800aa86:	005b      	lsls	r3, r3, #1
 800aa88:	4413      	add	r3, r2
 800aa8a:	011b      	lsls	r3, r3, #4
 800aa8c:	440b      	add	r3, r1
 800aa8e:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800aa92:	881b      	ldrh	r3, [r3, #0]
 800aa94:	461a      	mov	r2, r3
 800aa96:	4601      	mov	r1, r0
 800aa98:	68b8      	ldr	r0, [r7, #8]
 800aa9a:	f006 f8d0 	bl	8010c3e <memcpy>
    char *temp_buf = strtok(data_copy,"\n");
 800aa9e:	4911      	ldr	r1, [pc, #68]	@ (800aae4 <Screen_SetInfo_Pin+0xc0>)
 800aaa0:	68b8      	ldr	r0, [r7, #8]
 800aaa2:	f005 ffe1 	bl	8010a68 <strtok>
 800aaa6:	6138      	str	r0, [r7, #16]
    while (temp_buf != NULL) {
 800aaa8:	e011      	b.n	800aace <Screen_SetInfo_Pin+0xaa>
        DWIN_SetText((Dwin_t *)screen_obj,Address_VP,temp_buf,strlen(temp_buf));
 800aaaa:	6938      	ldr	r0, [r7, #16]
 800aaac:	f7f5 fbf0 	bl	8000290 <strlen>
 800aab0:	4603      	mov	r3, r0
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	8af9      	ldrh	r1, [r7, #22]
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f002 fe6a 	bl	800d792 <DWIN_SetText>
        // sprintf(text_show,"%d",temp_buf);
        temp_buf = strtok(NULL,"\n");
 800aabe:	4909      	ldr	r1, [pc, #36]	@ (800aae4 <Screen_SetInfo_Pin+0xc0>)
 800aac0:	2000      	movs	r0, #0
 800aac2:	f005 ffd1 	bl	8010a68 <strtok>
 800aac6:	6138      	str	r0, [r7, #16]
        Address_VP = Address_VP + 0x10;
 800aac8:	8afb      	ldrh	r3, [r7, #22]
 800aaca:	3310      	adds	r3, #16
 800aacc:	82fb      	strh	r3, [r7, #22]
    while (temp_buf != NULL) {
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1ea      	bne.n	800aaaa <Screen_SetInfo_Pin+0x86>
    }
    free(data_copy);
 800aad4:	68b8      	ldr	r0, [r7, #8]
 800aad6:	f003 ff21 	bl	800e91c <free>
}
 800aada:	bf00      	nop
 800aadc:	3718      	adds	r7, #24
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	08013c90 	.word	0x08013c90

0800aae8 <get_data_testing_ic>:

#pragma endregion FUNCTION SCREEN


static bool get_data_testing_ic(char *searchName,Program_Test_t *pdata_test) {
 800aae8:	b590      	push	{r4, r7, lr}
 800aaea:	b0cf      	sub	sp, #316	@ 0x13c
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800aaf2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800aaf6:	6018      	str	r0, [r3, #0]
 800aaf8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800aafc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ab00:	6019      	str	r1, [r3, #0]
    uint8_t num_direc_used = 0;
 800ab02:	2300      	movs	r3, #0
 800ab04:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
    uint8_t *temp_buf = (uint8_t *)malloc(MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800ab08:	20f0      	movs	r0, #240	@ 0xf0
 800ab0a:	f003 feff 	bl	800e90c <malloc>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    memset(temp_buf,0,MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800ab14:	22f0      	movs	r2, #240	@ 0xf0
 800ab16:	2100      	movs	r1, #0
 800ab18:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800ab1c:	f005 ff54 	bl	80109c8 <memset>
    direc_EEPROM_t direc_array[MAX_DIRECTORY_USED]; /* array store directory */
    direc_EEPROM_t *pDirectory = NULL;
 800ab20:	2300      	movs	r3, #0
 800ab22:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    uint16_t mem_addr;
    uint16_t buf_length;
    /* get num directory used */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&temp_buf[0],1);
 800ab26:	2301      	movs	r3, #1
 800ab28:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800ab2c:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800ab30:	48d5      	ldr	r0, [pc, #852]	@ (800ae88 <get_data_testing_ic+0x3a0>)
 800ab32:	f002 fc8d 	bl	800d450 <AT24Cxx_read_buffer>
    num_direc_used = temp_buf[0];
 800ab36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
    /* read directory info */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC,temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800ab40:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	461a      	mov	r2, r3
 800ab48:	0052      	lsls	r2, r2, #1
 800ab4a:	4413      	add	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800ab54:	f240 2182 	movw	r1, #642	@ 0x282
 800ab58:	48cb      	ldr	r0, [pc, #812]	@ (800ae88 <get_data_testing_ic+0x3a0>)
 800ab5a:	f002 fc79 	bl	800d450 <AT24Cxx_read_buffer>
    memcpy(&direc_array[0],temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800ab5e:	f897 2132 	ldrb.w	r2, [r7, #306]	@ 0x132
 800ab62:	4613      	mov	r3, r2
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	4413      	add	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	f107 030c 	add.w	r3, r7, #12
 800ab70:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800ab74:	4618      	mov	r0, r3
 800ab76:	f006 f862 	bl	8010c3e <memcpy>
    free(temp_buf);
 800ab7a:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800ab7e:	f003 fecd 	bl	800e91c <free>
    /* find info of search name ic */
    for (uint8_t i = 0; i < num_direc_used; i++) {
 800ab82:	2300      	movs	r3, #0
 800ab84:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 800ab88:	e02c      	b.n	800abe4 <get_data_testing_ic+0xfc>
        if (memcmp(searchName,direc_array[i].nameIC,strlen(searchName)) == 0) {
 800ab8a:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 800ab8e:	f107 010c 	add.w	r1, r7, #12
 800ab92:	4613      	mov	r3, r2
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	4413      	add	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	18cc      	adds	r4, r1, r3
 800ab9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800aba0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800aba4:	6818      	ldr	r0, [r3, #0]
 800aba6:	f7f5 fb73 	bl	8000290 <strlen>
 800abaa:	4602      	mov	r2, r0
 800abac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800abb0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800abb4:	4621      	mov	r1, r4
 800abb6:	6818      	ldr	r0, [r3, #0]
 800abb8:	f005 fef6 	bl	80109a8 <memcmp>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10b      	bne.n	800abda <get_data_testing_ic+0xf2>
            pDirectory = &direc_array[i];
 800abc2:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 800abc6:	f107 010c 	add.w	r1, r7, #12
 800abca:	4613      	mov	r3, r2
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	4413      	add	r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	440b      	add	r3, r1
 800abd4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
            break;
 800abd8:	e00a      	b.n	800abf0 <get_data_testing_ic+0x108>
    for (uint8_t i = 0; i < num_direc_used; i++) {
 800abda:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800abde:	3301      	adds	r3, #1
 800abe0:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 800abe4:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 800abe8:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 800abec:	429a      	cmp	r2, r3
 800abee:	d3cc      	bcc.n	800ab8a <get_data_testing_ic+0xa2>
        }
    }
    /* NOT FOUND NAME IC IN EEPROM */ 
    if (pDirectory == NULL) {
 800abf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d108      	bne.n	800ac0a <get_data_testing_ic+0x122>
        // printf("NOT FOUND NAME IC IN EEPROM\n");
        DWIN_SetText((Dwin_t *)&_Screen,VP_Warning_modify_program,"No data found for this IC",strlen("No data found for this IC"));
 800abf8:	2319      	movs	r3, #25
 800abfa:	4aa4      	ldr	r2, [pc, #656]	@ (800ae8c <get_data_testing_ic+0x3a4>)
 800abfc:	f24a 0150 	movw	r1, #41040	@ 0xa050
 800ac00:	48a3      	ldr	r0, [pc, #652]	@ (800ae90 <get_data_testing_ic+0x3a8>)
 800ac02:	f002 fdc6 	bl	800d792 <DWIN_SetText>
        return false;
 800ac06:	2300      	movs	r3, #0
 800ac08:	e139      	b.n	800ae7e <get_data_testing_ic+0x396>
    } 
    mem_addr = (uint16_t)((pDirectory->addr[0] << 8) | pDirectory->addr[1]);
 800ac0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ac0e:	7a1b      	ldrb	r3, [r3, #8]
 800ac10:	b21b      	sxth	r3, r3
 800ac12:	021b      	lsls	r3, r3, #8
 800ac14:	b21a      	sxth	r2, r3
 800ac16:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ac1a:	7a5b      	ldrb	r3, [r3, #9]
 800ac1c:	b21b      	sxth	r3, r3
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	b21b      	sxth	r3, r3
 800ac22:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    buf_length = (uint16_t)((pDirectory->length[0] << 8) | pDirectory->length[1]);
 800ac26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ac2a:	7a9b      	ldrb	r3, [r3, #10]
 800ac2c:	b21b      	sxth	r3, r3
 800ac2e:	021b      	lsls	r3, r3, #8
 800ac30:	b21a      	sxth	r2, r3
 800ac32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ac36:	7adb      	ldrb	r3, [r3, #11]
 800ac38:	b21b      	sxth	r3, r3
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	b21b      	sxth	r3, r3
 800ac3e:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    temp_buf = (uint8_t *)malloc(buf_length);
 800ac42:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800ac46:	4618      	mov	r0, r3
 800ac48:	f003 fe60 	bl	800e90c <malloc>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    AT24Cxx_read_buffer(&eeprom_ob,mem_addr,temp_buf,buf_length);
 800ac52:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800ac56:	f8b7 112a 	ldrh.w	r1, [r7, #298]	@ 0x12a
 800ac5a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800ac5e:	488a      	ldr	r0, [pc, #552]	@ (800ae88 <get_data_testing_ic+0x3a0>)
 800ac60:	f002 fbf6 	bl	800d450 <AT24Cxx_read_buffer>
    // Find the first pipe separator
    uint8_t *first_pipe = memchr(temp_buf, '|', buf_length);
 800ac64:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800ac68:	461a      	mov	r2, r3
 800ac6a:	217c      	movs	r1, #124	@ 0x7c
 800ac6c:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800ac70:	f7f5 fabe 	bl	80001f0 <memchr>
 800ac74:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (!first_pipe) return false;
 800ac78:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d101      	bne.n	800ac84 <get_data_testing_ic+0x19c>
 800ac80:	2300      	movs	r3, #0
 800ac82:	e0fc      	b.n	800ae7e <get_data_testing_ic+0x396>
    
    // Extract pin count
    int pin_count_len = first_pipe - temp_buf;
 800ac84:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800ac88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    char* pin_count_str = malloc(pin_count_len + 1);
 800ac92:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ac96:	3301      	adds	r3, #1
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f003 fe37 	bl	800e90c <malloc>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    strncpy(pin_count_str, temp_buf, pin_count_len);
 800aca4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800aca8:	461a      	mov	r2, r3
 800acaa:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800acae:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800acb2:	f005 fec5 	bl	8010a40 <strncpy>
    pin_count_str[pin_count_len] = '\0';
 800acb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800acba:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800acbe:	4413      	add	r3, r2
 800acc0:	2200      	movs	r2, #0
 800acc2:	701a      	strb	r2, [r3, #0]
    pdata_test->num_pin = atoi(pin_count_str);
 800acc4:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800acc8:	f003 fe1b 	bl	800e902 <atoi>
 800accc:	4603      	mov	r3, r0
 800acce:	b2da      	uxtb	r2, r3
 800acd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800acd4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	775a      	strb	r2, [r3, #29]
    free(pin_count_str);
 800acdc:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800ace0:	f003 fe1c 	bl	800e91c <free>
    
    // Find the second pipe separator
    int remaining_len = buf_length - (first_pipe - temp_buf + 1);
 800ace4:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 800ace8:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800acec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800acf0:	1acb      	subs	r3, r1, r3
 800acf2:	3301      	adds	r3, #1
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    uint8_t *second_pipe = memchr(first_pipe + 1, '|', remaining_len);
 800acfa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800acfe:	3301      	adds	r3, #1
 800ad00:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800ad04:	217c      	movs	r1, #124	@ 0x7c
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7f5 fa72 	bl	80001f0 <memchr>
 800ad0c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (!second_pipe) return false;
 800ad10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d101      	bne.n	800ad1c <get_data_testing_ic+0x234>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	e0b0      	b.n	800ae7e <get_data_testing_ic+0x396>
    
    // Extract test count
    int test_count_len = second_pipe - (first_pipe + 1);
 800ad1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800ad20:	3301      	adds	r3, #1
 800ad22:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    char* test_count_str = malloc(test_count_len + 1);
 800ad2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ad30:	3301      	adds	r3, #1
 800ad32:	4618      	mov	r0, r3
 800ad34:	f003 fdea 	bl	800e90c <malloc>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    strncpy(test_count_str, first_pipe + 1, test_count_len);
 800ad3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800ad42:	3301      	adds	r3, #1
 800ad44:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800ad48:	4619      	mov	r1, r3
 800ad4a:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800ad4e:	f005 fe77 	bl	8010a40 <strncpy>
    test_count_str[test_count_len] = '\0';
 800ad52:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ad56:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800ad5a:	4413      	add	r3, r2
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	701a      	strb	r2, [r3, #0]
    pdata_test->num_case= atoi(test_count_str);
 800ad60:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800ad64:	f003 fdcd 	bl	800e902 <atoi>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ad70:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	771a      	strb	r2, [r3, #28]
    free(test_count_str);
 800ad78:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800ad7c:	f003 fdce 	bl	800e91c <free>
    
    // Find the third pipe separator using memchr (searches through \0)
    remaining_len = buf_length - (second_pipe - temp_buf + 1);
 800ad80:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 800ad84:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800ad88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ad8c:	1acb      	subs	r3, r1, r3
 800ad8e:	3301      	adds	r3, #1
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    uint8_t *third_pipe = memchr(second_pipe + 1, '|', remaining_len);
 800ad96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800ada0:	217c      	movs	r1, #124	@ 0x7c
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7f5 fa24 	bl	80001f0 <memchr>
 800ada8:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
    if (!third_pipe) return false;
 800adac:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <get_data_testing_ic+0x2d0>
 800adb4:	2300      	movs	r3, #0
 800adb6:	e062      	b.n	800ae7e <get_data_testing_ic+0x396>
    
    // Extract pin data (between second and third pipe)
    int pin_data_len = third_pipe - (second_pipe + 1);
 800adb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adbc:	3301      	adds	r3, #1
 800adbe:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    pdata_test->data_pin = malloc(pin_data_len);
 800adc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adcc:	4618      	mov	r0, r3
 800adce:	f003 fd9d 	bl	800e90c <malloc>
 800add2:	4603      	mov	r3, r0
 800add4:	461a      	mov	r2, r3
 800add6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800adda:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	621a      	str	r2, [r3, #32]
    memcpy(pdata_test->data_pin, second_pipe + 1, pin_data_len);
 800ade2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ade6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	6a18      	ldr	r0, [r3, #32]
 800adee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adf2:	3301      	adds	r3, #1
 800adf4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800adf8:	4619      	mov	r1, r3
 800adfa:	f005 ff20 	bl	8010c3e <memcpy>
    pdata_test->data_pin_len = pin_data_len;
 800adfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ae08:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	849a      	strh	r2, [r3, #36]	@ 0x24
    
    // Extract test data (after third pipe)
    uint8_t *test_start = third_pipe + 1;
 800ae10:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800ae14:	3301      	adds	r3, #1
 800ae16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    int test_data_len = buf_length - (test_start - temp_buf);
 800ae1a:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 800ae1e:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800ae22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ae26:	1acb      	subs	r3, r1, r3
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    pdata_test->data_test = malloc(test_data_len);
 800ae2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae32:	4618      	mov	r0, r3
 800ae34:	f003 fd6a 	bl	800e90c <malloc>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ae40:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	629a      	str	r2, [r3, #40]	@ 0x28
    memcpy(pdata_test->data_test, test_start, test_data_len);
 800ae48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ae4c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae54:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800ae58:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f005 feee 	bl	8010c3e <memcpy>
    pdata_test->data_test_len = test_data_len;
 800ae62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ae6c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	859a      	strh	r2, [r3, #44]	@ 0x2c

    free(temp_buf);
 800ae74:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800ae78:	f003 fd50 	bl	800e91c <free>
    return true;
 800ae7c:	2301      	movs	r3, #1
//    uint8_t array_buf[200];
//    memcpy(array_buf,pdata_test->data_pin,pin_data_len);
//    uint8_t array_buf2[200];
//    memcpy(array_buf2,pdata_test->data_test,test_data_len);
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd90      	pop	{r4, r7, pc}
 800ae88:	200013a0 	.word	0x200013a0
 800ae8c:	08013c94 	.word	0x08013c94
 800ae90:	20000cf0 	.word	0x20000cf0

0800ae94 <show_text_short_circuit>:

static void show_text_short_circuit(Screen_t *screen_obj) {
 800ae94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae98:	b0c9      	sub	sp, #292	@ 0x124
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aea0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800aea4:	6018      	str	r0, [r3, #0]
 800aea6:	466b      	mov	r3, sp
 800aea8:	461e      	mov	r6, r3
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800aeaa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aeae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800aeb8:	4619      	mov	r1, r3
 800aeba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aebe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800aec8:	fb01 f303 	mul.w	r3, r1, r3
 800aecc:	4413      	add	r3, r2
 800aece:	334b      	adds	r3, #75	@ 0x4b
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800aed6:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800aeda:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aede:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800aee2:	6819      	ldr	r1, [r3, #0]
 800aee4:	4613      	mov	r3, r2
 800aee6:	005b      	lsls	r3, r3, #1
 800aee8:	4413      	add	r3, r2
 800aeea:	011b      	lsls	r3, r3, #4
 800aeec:	440b      	add	r3, r1
 800aeee:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
//    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
    char short_text[150] = "Pin Short to GND/VDD: ";
 800aef8:	4b88      	ldr	r3, [pc, #544]	@ (800b11c <show_text_short_circuit+0x288>)
 800aefa:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800aefe:	461d      	mov	r5, r3
 800af00:	6828      	ldr	r0, [r5, #0]
 800af02:	6869      	ldr	r1, [r5, #4]
 800af04:	68aa      	ldr	r2, [r5, #8]
 800af06:	68eb      	ldr	r3, [r5, #12]
 800af08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af0a:	6928      	ldr	r0, [r5, #16]
 800af0c:	6020      	str	r0, [r4, #0]
 800af0e:	8aab      	ldrh	r3, [r5, #20]
 800af10:	7daa      	ldrb	r2, [r5, #22]
 800af12:	80a3      	strh	r3, [r4, #4]
 800af14:	4613      	mov	r3, r2
 800af16:	71a3      	strb	r3, [r4, #6]
 800af18:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800af1c:	227f      	movs	r2, #127	@ 0x7f
 800af1e:	2100      	movs	r1, #0
 800af20:	4618      	mov	r0, r3
 800af22:	f005 fd51 	bl	80109c8 <memset>
    uint8_t buffer[50];
    memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit,num_pin);
 800af26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800af2a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800af34:	4619      	mov	r1, r3
 800af36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800af3a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800af44:	fb01 f303 	mul.w	r3, r1, r3
 800af48:	4413      	add	r3, r2
 800af4a:	3368      	adds	r3, #104	@ 0x68
 800af4c:	6819      	ldr	r1, [r3, #0]
 800af4e:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800af52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800af56:	4618      	mov	r0, r3
 800af58:	f005 fe71 	bl	8010c3e <memcpy>
    // uint8_t test_short[20] = {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'};
    uint8_t shortPin[num_pin]; /* array store pin short */
 800af5c:	f897 1116 	ldrb.w	r1, [r7, #278]	@ 0x116
 800af60:	460b      	mov	r3, r1
 800af62:	3b01      	subs	r3, #1
 800af64:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800af68:	b2cb      	uxtb	r3, r1
 800af6a:	2200      	movs	r2, #0
 800af6c:	469a      	mov	sl, r3
 800af6e:	4693      	mov	fp, r2
 800af70:	f04f 0200 	mov.w	r2, #0
 800af74:	f04f 0300 	mov.w	r3, #0
 800af78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800af7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800af80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800af84:	b2cb      	uxtb	r3, r1
 800af86:	2200      	movs	r2, #0
 800af88:	4698      	mov	r8, r3
 800af8a:	4691      	mov	r9, r2
 800af8c:	f04f 0200 	mov.w	r2, #0
 800af90:	f04f 0300 	mov.w	r3, #0
 800af94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800afa0:	460b      	mov	r3, r1
 800afa2:	3307      	adds	r3, #7
 800afa4:	08db      	lsrs	r3, r3, #3
 800afa6:	00db      	lsls	r3, r3, #3
 800afa8:	ebad 0d03 	sub.w	sp, sp, r3
 800afac:	466b      	mov	r3, sp
 800afae:	3300      	adds	r3, #0
 800afb0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint8_t shortCount = 0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < num_pin; i++) {
 800afba:	2300      	movs	r3, #0
 800afbc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800afc0:	e02c      	b.n	800b01c <show_text_short_circuit+0x188>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit[i] == '0') {
 800afc2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800afc6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800afd0:	4619      	mov	r1, r3
 800afd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800afd6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800afe0:	fb01 f303 	mul.w	r3, r1, r3
 800afe4:	4413      	add	r3, r2
 800afe6:	3368      	adds	r3, #104	@ 0x68
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800afee:	4413      	add	r3, r2
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2b30      	cmp	r3, #48	@ 0x30
 800aff4:	d10d      	bne.n	800b012 <show_text_short_circuit+0x17e>
            shortPin[shortCount] = i + 1;
 800aff6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800affa:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800affe:	3201      	adds	r2, #1
 800b000:	b2d1      	uxtb	r1, r2
 800b002:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800b006:	54d1      	strb	r1, [r2, r3]
            shortCount++;
 800b008:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b00c:	3301      	adds	r3, #1
 800b00e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < num_pin; i++) {
 800b012:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800b016:	3301      	adds	r3, #1
 800b018:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800b01c:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800b020:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b024:	429a      	cmp	r2, r3
 800b026:	d3cc      	bcc.n	800afc2 <show_text_short_circuit+0x12e>
        }
    }

    if (shortCount == 0) {
 800b028:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d121      	bne.n	800b074 <show_text_short_circuit+0x1e0>
        strcat(short_text,"None");
 800b030:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b034:	4618      	mov	r0, r3
 800b036:	f7f5 f92b 	bl	8000290 <strlen>
 800b03a:	4603      	mov	r3, r0
 800b03c:	461a      	mov	r2, r3
 800b03e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b042:	4413      	add	r3, r2
 800b044:	4a36      	ldr	r2, [pc, #216]	@ (800b120 <show_text_short_circuit+0x28c>)
 800b046:	6810      	ldr	r0, [r2, #0]
 800b048:	6018      	str	r0, [r3, #0]
 800b04a:	7912      	ldrb	r2, [r2, #4]
 800b04c:	711a      	strb	r2, [r3, #4]
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
 800b04e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b052:	4618      	mov	r0, r3
 800b054:	f7f5 f91c 	bl	8000290 <strlen>
 800b058:	4603      	mov	r3, r0
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800b060:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800b064:	f5a1 708e 	sub.w	r0, r1, #284	@ 0x11c
 800b068:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 800b06c:	6800      	ldr	r0, [r0, #0]
 800b06e:	f002 fb90 	bl	800d792 <DWIN_SetText>
 800b072:	e04b      	b.n	800b10c <show_text_short_circuit+0x278>
    } else {
        char tempStr[50];
        for (int i = 0; i < shortCount; i++) {
 800b074:	2300      	movs	r3, #0
 800b076:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800b07a:	e02f      	b.n	800b0dc <show_text_short_circuit+0x248>
            sprintf(tempStr, "Pin %d", shortPin[i]);
 800b07c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800b080:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b084:	4413      	add	r3, r2
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	461a      	mov	r2, r3
 800b08a:	f107 030c 	add.w	r3, r7, #12
 800b08e:	4925      	ldr	r1, [pc, #148]	@ (800b124 <show_text_short_circuit+0x290>)
 800b090:	4618      	mov	r0, r3
 800b092:	f005 fb61 	bl	8010758 <siprintf>
            strcat(short_text, tempStr);
 800b096:	f107 020c 	add.w	r2, r7, #12
 800b09a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b09e:	4611      	mov	r1, r2
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f005 fc99 	bl	80109d8 <strcat>
            if (i < shortCount - 1) {
 800b0a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	da0e      	bge.n	800b0d2 <show_text_short_circuit+0x23e>
                strcat(short_text, ", ");
 800b0b4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7f5 f8e9 	bl	8000290 <strlen>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b0c6:	4413      	add	r3, r2
 800b0c8:	4a17      	ldr	r2, [pc, #92]	@ (800b128 <show_text_short_circuit+0x294>)
 800b0ca:	8811      	ldrh	r1, [r2, #0]
 800b0cc:	7892      	ldrb	r2, [r2, #2]
 800b0ce:	8019      	strh	r1, [r3, #0]
 800b0d0:	709a      	strb	r2, [r3, #2]
        for (int i = 0; i < shortCount; i++) {
 800b0d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800b0dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	dbc9      	blt.n	800b07c <show_text_short_circuit+0x1e8>
            }
        }
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
 800b0e8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7f5 f8cf 	bl	8000290 <strlen>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800b0fa:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800b0fe:	f5a1 708e 	sub.w	r0, r1, #284	@ 0x11c
 800b102:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 800b106:	6800      	ldr	r0, [r0, #0]
 800b108:	f002 fb43 	bl	800d792 <DWIN_SetText>
 800b10c:	46b5      	mov	sp, r6
    }
}
 800b10e:	bf00      	nop
 800b110:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800b114:	46bd      	mov	sp, r7
 800b116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11a:	bf00      	nop
 800b11c:	08013cc4 	.word	0x08013cc4
 800b120:	08013cb0 	.word	0x08013cb0
 800b124:	08013cb8 	.word	0x08013cb8
 800b128:	08013cc0 	.word	0x08013cc0

0800b12c <show_text_function_test>:

static void show_text_function_test(Screen_t *const screen_obj) {
 800b12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b130:	b0d9      	sub	sp, #356	@ 0x164
 800b132:	af00      	add	r7, sp, #0
 800b134:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b138:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b13c:	6018      	str	r0, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800b13e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b142:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b14c:	4619      	mov	r1, r3
 800b14e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b152:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b15c:	fb01 f303 	mul.w	r3, r1, r3
 800b160:	4413      	add	r3, r2
 800b162:	334b      	adds	r3, #75	@ 0x4b
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800b16a:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800b16e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b172:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b176:	6819      	ldr	r1, [r3, #0]
 800b178:	4613      	mov	r3, r2
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	4413      	add	r3, r2
 800b17e:	011b      	lsls	r3, r3, #4
 800b180:	440b      	add	r3, r1
 800b182:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800b18c:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800b190:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b194:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b198:	6819      	ldr	r1, [r3, #0]
 800b19a:	4613      	mov	r3, r2
 800b19c:	005b      	lsls	r3, r3, #1
 800b19e:	4413      	add	r3, r2
 800b1a0:	011b      	lsls	r3, r3, #4
 800b1a2:	440b      	add	r3, r1
 800b1a4:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	f887 3155 	strb.w	r3, [r7, #341]	@ 0x155

    char case_text[300] = "Self-test result: ";  
 800b1ae:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b1b2:	f5a3 76a0 	sub.w	r6, r3, #320	@ 0x140
 800b1b6:	4b9e      	ldr	r3, [pc, #632]	@ (800b430 <show_text_function_test+0x304>)
 800b1b8:	4634      	mov	r4, r6
 800b1ba:	461d      	mov	r5, r3
 800b1bc:	6828      	ldr	r0, [r5, #0]
 800b1be:	6869      	ldr	r1, [r5, #4]
 800b1c0:	68aa      	ldr	r2, [r5, #8]
 800b1c2:	68eb      	ldr	r3, [r5, #12]
 800b1c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1c6:	8a2b      	ldrh	r3, [r5, #16]
 800b1c8:	7caa      	ldrb	r2, [r5, #18]
 800b1ca:	8023      	strh	r3, [r4, #0]
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	70a3      	strb	r3, [r4, #2]
 800b1d0:	f106 0313 	add.w	r3, r6, #19
 800b1d4:	f240 1219 	movw	r2, #281	@ 0x119
 800b1d8:	2100      	movs	r1, #0
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f005 fbf4 	bl	80109c8 <memset>
    
    if (screen_obj->IC_Testerx[screen_obj->curr_device].isShort == '0') {
 800b1e0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b1e4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b1f4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b1fe:	fb01 f303 	mul.w	r3, r1, r3
 800b202:	4413      	add	r3, r2
 800b204:	336c      	adds	r3, #108	@ 0x6c
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b30      	cmp	r3, #48	@ 0x30
 800b20a:	f040 80e9 	bne.w	800b3e0 <show_text_function_test+0x2b4>
 800b20e:	466b      	mov	r3, sp
 800b210:	461d      	mov	r5, r3
        uint8_t failedCase[num_case]; 
 800b212:	f897 1155 	ldrb.w	r1, [r7, #341]	@ 0x155
 800b216:	460b      	mov	r3, r1
 800b218:	3b01      	subs	r3, #1
 800b21a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800b21e:	b2cb      	uxtb	r3, r1
 800b220:	2200      	movs	r2, #0
 800b222:	469a      	mov	sl, r3
 800b224:	4693      	mov	fp, r2
 800b226:	f04f 0200 	mov.w	r2, #0
 800b22a:	f04f 0300 	mov.w	r3, #0
 800b22e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b232:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b236:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b23a:	b2cb      	uxtb	r3, r1
 800b23c:	2200      	movs	r2, #0
 800b23e:	4698      	mov	r8, r3
 800b240:	4691      	mov	r9, r2
 800b242:	f04f 0200 	mov.w	r2, #0
 800b246:	f04f 0300 	mov.w	r3, #0
 800b24a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b24e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b256:	460b      	mov	r3, r1
 800b258:	3307      	adds	r3, #7
 800b25a:	08db      	lsrs	r3, r3, #3
 800b25c:	00db      	lsls	r3, r3, #3
 800b25e:	ebad 0d03 	sub.w	sp, sp, r3
 800b262:	466b      	mov	r3, sp
 800b264:	3300      	adds	r3, #0
 800b266:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
        uint8_t failedCount = 0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
        
        for (uint8_t i = 0; i < num_case; i++) {
 800b270:	2300      	movs	r3, #0
 800b272:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 800b276:	e032      	b.n	800b2de <show_text_function_test+0x1b2>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '0') {
 800b278:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b27c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b286:	4619      	mov	r1, r3
 800b288:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b28c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b296:	fb01 f303 	mul.w	r3, r1, r3
 800b29a:	4413      	add	r3, r2
 800b29c:	3370      	adds	r3, #112	@ 0x70
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800b2a4:	4413      	add	r3, r2
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	2b30      	cmp	r3, #48	@ 0x30
 800b2aa:	d113      	bne.n	800b2d4 <show_text_function_test+0x1a8>
                if (failedCount < num_case) { // Bounds check!
 800b2ac:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 800b2b0:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d20d      	bcs.n	800b2d4 <show_text_function_test+0x1a8>
                    failedCase[failedCount] = i + 1;
 800b2b8:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800b2bc:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 800b2c0:	3201      	adds	r2, #1
 800b2c2:	b2d1      	uxtb	r1, r2
 800b2c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800b2c8:	54d1      	strb	r1, [r2, r3]
                    failedCount++;
 800b2ca:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
        for (uint8_t i = 0; i < num_case; i++) {
 800b2d4:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800b2d8:	3301      	adds	r3, #1
 800b2da:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 800b2de:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 800b2e2:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d3c6      	bcc.n	800b278 <show_text_function_test+0x14c>
                }
            }
        }

        if (failedCount == 0) {
 800b2ea:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10f      	bne.n	800b312 <show_text_function_test+0x1e6>
            strncat(case_text, "Pass", sizeof(case_text) - strlen(case_text) - 1);
 800b2f2:	f107 0320 	add.w	r3, r7, #32
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7f4 ffca 	bl	8000290 <strlen>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800b302:	3301      	adds	r3, #1
 800b304:	f107 0020 	add.w	r0, r7, #32
 800b308:	461a      	mov	r2, r3
 800b30a:	494a      	ldr	r1, [pc, #296]	@ (800b434 <show_text_function_test+0x308>)
 800b30c:	f005 fb73 	bl	80109f6 <strncat>
 800b310:	e064      	b.n	800b3dc <show_text_function_test+0x2b0>
        } else {
            strncat(case_text, "Failed in ", sizeof(case_text) - strlen(case_text) - 1);
 800b312:	f107 0320 	add.w	r3, r7, #32
 800b316:	4618      	mov	r0, r3
 800b318:	f7f4 ffba 	bl	8000290 <strlen>
 800b31c:	4603      	mov	r3, r0
 800b31e:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800b322:	3301      	adds	r3, #1
 800b324:	f107 0020 	add.w	r0, r7, #32
 800b328:	461a      	mov	r2, r3
 800b32a:	4943      	ldr	r1, [pc, #268]	@ (800b438 <show_text_function_test+0x30c>)
 800b32c:	f005 fb63 	bl	80109f6 <strncat>
            
            for (int i = 0; i < failedCount; i++) {
 800b330:	2300      	movs	r3, #0
 800b332:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800b336:	e04b      	b.n	800b3d0 <show_text_function_test+0x2a4>
                char tempStr[20];
                snprintf(tempStr, sizeof(tempStr), "Case %d", failedCase[i]);
 800b338:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800b33c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800b340:	4413      	add	r3, r2
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	f107 000c 	add.w	r0, r7, #12
 800b348:	4a3c      	ldr	r2, [pc, #240]	@ (800b43c <show_text_function_test+0x310>)
 800b34a:	2114      	movs	r1, #20
 800b34c:	f005 f9ce 	bl	80106ec <sniprintf>
                
                // Check if we have enough space before concatenating
                if (strlen(case_text) + strlen(tempStr) + 3 < sizeof(case_text)) {
 800b350:	f107 0320 	add.w	r3, r7, #32
 800b354:	4618      	mov	r0, r3
 800b356:	f7f4 ff9b 	bl	8000290 <strlen>
 800b35a:	4604      	mov	r4, r0
 800b35c:	f107 030c 	add.w	r3, r7, #12
 800b360:	4618      	mov	r0, r3
 800b362:	f7f4 ff95 	bl	8000290 <strlen>
 800b366:	4603      	mov	r3, r0
 800b368:	4423      	add	r3, r4
 800b36a:	3303      	adds	r3, #3
 800b36c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800b370:	d226      	bcs.n	800b3c0 <show_text_function_test+0x294>
                    strncat(case_text, tempStr, sizeof(case_text) - strlen(case_text) - 1);
 800b372:	f107 0320 	add.w	r3, r7, #32
 800b376:	4618      	mov	r0, r3
 800b378:	f7f4 ff8a 	bl	8000290 <strlen>
 800b37c:	4603      	mov	r3, r0
 800b37e:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800b382:	3301      	adds	r3, #1
 800b384:	f107 010c 	add.w	r1, r7, #12
 800b388:	f107 0020 	add.w	r0, r7, #32
 800b38c:	461a      	mov	r2, r3
 800b38e:	f005 fb32 	bl	80109f6 <strncat>
                    if (i < failedCount - 1) {
 800b392:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800b396:	3b01      	subs	r3, #1
 800b398:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800b39c:	429a      	cmp	r2, r3
 800b39e:	da12      	bge.n	800b3c6 <show_text_function_test+0x29a>
                        strncat(case_text, ", ", sizeof(case_text) - strlen(case_text) - 1);
 800b3a0:	f107 0320 	add.w	r3, r7, #32
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7f4 ff73 	bl	8000290 <strlen>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	f107 0020 	add.w	r0, r7, #32
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	4921      	ldr	r1, [pc, #132]	@ (800b440 <show_text_function_test+0x314>)
 800b3ba:	f005 fb1c 	bl	80109f6 <strncat>
 800b3be:	e002      	b.n	800b3c6 <show_text_function_test+0x29a>
                    }
                } else {
                    /* out of space */
                    printf("over flow in show_text_function_test\n");
 800b3c0:	4820      	ldr	r0, [pc, #128]	@ (800b444 <show_text_function_test+0x318>)
 800b3c2:	f005 f98b 	bl	80106dc <puts>
            for (int i = 0; i < failedCount; i++) {
 800b3c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800b3d0:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800b3d4:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	dbad      	blt.n	800b338 <show_text_function_test+0x20c>
 800b3dc:	46ad      	mov	sp, r5
 800b3de:	e00e      	b.n	800b3fe <show_text_function_test+0x2d2>
                }
            }
        }
    } else {
        strncat(case_text, "N/A", sizeof(case_text) - strlen(case_text) - 1);
 800b3e0:	f107 0320 	add.w	r3, r7, #32
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7f4 ff53 	bl	8000290 <strlen>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	f107 0020 	add.w	r0, r7, #32
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	4913      	ldr	r1, [pc, #76]	@ (800b448 <show_text_function_test+0x31c>)
 800b3fa:	f005 fafc 	bl	80109f6 <strncat>
    }
    
    DWIN_SetText((Dwin_t *)screen_obj, VP_Text_Test_Function, case_text, strlen(case_text));
 800b3fe:	f107 0320 	add.w	r3, r7, #32
 800b402:	4618      	mov	r0, r3
 800b404:	f7f4 ff44 	bl	8000290 <strlen>
 800b408:	4603      	mov	r3, r0
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	f107 0220 	add.w	r2, r7, #32
 800b410:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800b414:	f5a1 70ae 	sub.w	r0, r1, #348	@ 0x15c
 800b418:	f44f 4117 	mov.w	r1, #38656	@ 0x9700
 800b41c:	6800      	ldr	r0, [r0, #0]
 800b41e:	f002 f9b8 	bl	800d792 <DWIN_SetText>
}
 800b422:	bf00      	nop
 800b424:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 800b428:	46bd      	mov	sp, r7
 800b42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42e:	bf00      	nop
 800b430:	08013d24 	.word	0x08013d24
 800b434:	08013cdc 	.word	0x08013cdc
 800b438:	08013ce4 	.word	0x08013ce4
 800b43c:	08013cf0 	.word	0x08013cf0
 800b440:	08013cc0 	.word	0x08013cc0
 800b444:	08013cf8 	.word	0x08013cf8
 800b448:	08013d20 	.word	0x08013d20

0800b44c <compelte_testing>:
        sprintf((char *)result_line, "IC%d: Self-test result: pass", cur_num_ic + 1);
    }    
}

/* using to store data when testing complete */
static void compelte_testing(Screen_t *const screen_obj) {
 800b44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b44e:	b0e1      	sub	sp, #388	@ 0x184
 800b450:	af0a      	add	r7, sp, #40	@ 0x28
 800b452:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b456:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b45a:	6018      	str	r0, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800b45c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b460:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b46a:	4619      	mov	r1, r3
 800b46c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b470:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b47a:	fb01 f303 	mul.w	r3, r1, r3
 800b47e:	4413      	add	r3, r2
 800b480:	334b      	adds	r3, #75	@ 0x4b
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    uint8_t data_time[7];
    DS3231_Read_time(&ds3231,data_time);
 800b488:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b48c:	4619      	mov	r1, r3
 800b48e:	48cc      	ldr	r0, [pc, #816]	@ (800b7c0 <compelte_testing+0x374>)
 800b490:	f002 f86a 	bl	800d568 <DS3231_Read_time>

    /* Store data to sd card */
    char buffer[300] = {0};
 800b494:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b498:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800b49c:	4618      	mov	r0, r3
 800b49e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	f005 fa8f 	bl	80109c8 <memset>
    // memset(buffer,0,300);
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800b4aa:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800b4ae:	469e      	mov	lr, r3
 800b4b0:	f897 314d 	ldrb.w	r3, [r7, #333]	@ 0x14d
 800b4b4:	461d      	mov	r5, r3
 800b4b6:	f897 314e 	ldrb.w	r3, [r7, #334]	@ 0x14e
 800b4ba:	461e      	mov	r6, r3
 800b4bc:	f897 314a 	ldrb.w	r3, [r7, #330]	@ 0x14a
 800b4c0:	60bb      	str	r3, [r7, #8]
 800b4c2:	f897 3149 	ldrb.w	r3, [r7, #329]	@ 0x149
 800b4c6:	607b      	str	r3, [r7, #4]
 800b4c8:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 800b4cc:	603b      	str	r3, [r7, #0]
        ,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,screen_obj->Program_Testx[index_program].Name_IC,screen_obj->Program_Testx[index_program].num_IC,
 800b4ce:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b4d2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b4dc:	4619      	mov	r1, r3
 800b4de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b4e2:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 800b4e6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b4ea:	fb01 f303 	mul.w	r3, r1, r3
 800b4ee:	3348      	adds	r3, #72	@ 0x48
 800b4f0:	6812      	ldr	r2, [r2, #0]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	1d59      	adds	r1, r3, #5
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800b4f6:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800b4fa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b4fe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b502:	6818      	ldr	r0, [r3, #0]
 800b504:	4613      	mov	r3, r2
 800b506:	005b      	lsls	r3, r3, #1
 800b508:	4413      	add	r3, r2
 800b50a:	011b      	lsls	r3, r3, #4
 800b50c:	4403      	add	r3, r0
 800b50e:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800b512:	6818      	ldr	r0, [r3, #0]
 800b514:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800b518:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b51c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b520:	681c      	ldr	r4, [r3, #0]
 800b522:	4613      	mov	r3, r2
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	4413      	add	r3, r2
 800b528:	011b      	lsls	r3, r3, #4
 800b52a:	4423      	add	r3, r4
 800b52c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800b530:	681b      	ldr	r3, [r3, #0]
        screen_obj->IC_Testerx[screen_obj->curr_device].result_text);
 800b532:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800b536:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800b53a:	6812      	ldr	r2, [r2, #0]
 800b53c:	f892 24e9 	ldrb.w	r2, [r2, #1257]	@ 0x4e9
 800b540:	4694      	mov	ip, r2
 800b542:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800b546:	f5a2 74a6 	sub.w	r4, r2, #332	@ 0x14c
 800b54a:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800b54e:	fb02 f20c 	mul.w	r2, r2, ip
 800b552:	3278      	adds	r2, #120	@ 0x78
 800b554:	6824      	ldr	r4, [r4, #0]
 800b556:	4422      	add	r2, r4
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800b558:	f107 041c 	add.w	r4, r7, #28
 800b55c:	9208      	str	r2, [sp, #32]
 800b55e:	9307      	str	r3, [sp, #28]
 800b560:	9006      	str	r0, [sp, #24]
 800b562:	9105      	str	r1, [sp, #20]
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	9204      	str	r2, [sp, #16]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	9203      	str	r2, [sp, #12]
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	9302      	str	r3, [sp, #8]
 800b570:	9601      	str	r6, [sp, #4]
 800b572:	9500      	str	r5, [sp, #0]
 800b574:	4673      	mov	r3, lr
 800b576:	4a93      	ldr	r2, [pc, #588]	@ (800b7c4 <compelte_testing+0x378>)
 800b578:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800b57c:	4620      	mov	r0, r4
 800b57e:	f005 f8b5 	bl	80106ec <sniprintf>
 800b582:	f8c7 0150 	str.w	r0, [r7, #336]	@ 0x150
    DataLogging_t *data_store = (DataLogging_t *)malloc(sizeof(DataLogging_t));
 800b586:	2008      	movs	r0, #8
 800b588:	f003 f9c0 	bl	800e90c <malloc>
 800b58c:	4603      	mov	r3, r0
 800b58e:	461a      	mov	r2, r3
 800b590:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b594:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b598:	601a      	str	r2, [r3, #0]
    data_store->String_logging = malloc(strlen(buffer)+1);
 800b59a:	f107 031c 	add.w	r3, r7, #28
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7f4 fe76 	bl	8000290 <strlen>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	1c5a      	adds	r2, r3, #1
 800b5a8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b5ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b5b0:	681c      	ldr	r4, [r3, #0]
 800b5b2:	4610      	mov	r0, r2
 800b5b4:	f003 f9aa 	bl	800e90c <malloc>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	6063      	str	r3, [r4, #4]
    memset(data_store->String_logging,0,strlen(buffer)+1);
 800b5bc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b5c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	685c      	ldr	r4, [r3, #4]
 800b5c8:	f107 031c 	add.w	r3, r7, #28
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7f4 fe5f 	bl	8000290 <strlen>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	2100      	movs	r1, #0
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f005 f9f4 	bl	80109c8 <memset>
    memcpy(data_store->String_logging,buffer,strlen(buffer));
 800b5e0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b5e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	685c      	ldr	r4, [r3, #4]
 800b5ec:	f107 031c 	add.w	r3, r7, #28
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7f4 fe4d 	bl	8000290 <strlen>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	f107 031c 	add.w	r3, r7, #28
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	4620      	mov	r0, r4
 800b600:	f005 fb1d 	bl	8010c3e <memcpy>
    memset(screen_obj->IC_Testerx[screen_obj->curr_device].result_text,0,sizeof(screen_obj->IC_Testerx[screen_obj->curr_device].result_text));
 800b604:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b608:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b612:	4619      	mov	r1, r3
 800b614:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b618:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 800b61c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b620:	fb01 f303 	mul.w	r3, r1, r3
 800b624:	3378      	adds	r3, #120	@ 0x78
 800b626:	6812      	ldr	r2, [r2, #0]
 800b628:	4413      	add	r3, r2
 800b62a:	22fa      	movs	r2, #250	@ 0xfa
 800b62c:	2100      	movs	r1, #0
 800b62e:	4618      	mov	r0, r3
 800b630:	f005 f9ca 	bl	80109c8 <memset>
    OS_task_post_event(AO_task_sd, STORE_DATA_TEST, (uint8_t *)&data_store, sizeof(DataLogging_t));
 800b634:	4b64      	ldr	r3, [pc, #400]	@ (800b7c8 <compelte_testing+0x37c>)
 800b636:	6818      	ldr	r0, [r3, #0]
 800b638:	f107 0218 	add.w	r2, r7, #24
 800b63c:	2308      	movs	r3, #8
 800b63e:	2100      	movs	r1, #0
 800b640:	f002 ff3c 	bl	800e4bc <OS_task_post_event>

    if (written >= sizeof(buffer)) {
 800b644:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b648:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800b64c:	d303      	bcc.n	800b656 <compelte_testing+0x20a>
        printf("ERROR: Buffer overflow in compelte_testing!\n");
 800b64e:	485f      	ldr	r0, [pc, #380]	@ (800b7cc <compelte_testing+0x380>)
 800b650:	f005 f844 	bl	80106dc <puts>
 800b654:	e0b0      	b.n	800b7b8 <compelte_testing+0x36c>
        return;
    }

    /* Send data to esp32 */
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800b656:	2008      	movs	r0, #8
 800b658:	f003 f958 	bl	800e90c <malloc>
 800b65c:	4603      	mov	r3, r0
 800b65e:	461a      	mov	r2, r3
 800b660:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b664:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800b668:	601a      	str	r2, [r3, #0]
    data_send_esp32->data = (char *)malloc(strlen(buffer));
 800b66a:	f107 031c 	add.w	r3, r7, #28
 800b66e:	4618      	mov	r0, r3
 800b670:	f7f4 fe0e 	bl	8000290 <strlen>
 800b674:	4602      	mov	r2, r0
 800b676:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b67a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800b67e:	681c      	ldr	r4, [r3, #0]
 800b680:	4610      	mov	r0, r2
 800b682:	f003 f943 	bl	800e90c <malloc>
 800b686:	4603      	mov	r3, r0
 800b688:	6023      	str	r3, [r4, #0]
    memcpy(data_send_esp32->data,"h",1);
 800b68a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b68e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2201      	movs	r2, #1
 800b698:	494d      	ldr	r1, [pc, #308]	@ (800b7d0 <compelte_testing+0x384>)
 800b69a:	4618      	mov	r0, r3
 800b69c:	f005 facf 	bl	8010c3e <memcpy>
    memcpy(data_send_esp32->data+1,buffer,strlen(buffer));
 800b6a0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b6a4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	1c5c      	adds	r4, r3, #1
 800b6ae:	f107 031c 	add.w	r3, r7, #28
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7f4 fdec 	bl	8000290 <strlen>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	f107 031c 	add.w	r3, r7, #28
 800b6be:	4619      	mov	r1, r3
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	f005 fabc 	bl	8010c3e <memcpy>
    data_send_esp32->len = strlen(buffer);
 800b6c6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b6ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800b6ce:	681c      	ldr	r4, [r3, #0]
 800b6d0:	f107 031c 	add.w	r3, r7, #28
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7f4 fddb 	bl	8000290 <strlen>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	6063      	str	r3, [r4, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800b6de:	4b3d      	ldr	r3, [pc, #244]	@ (800b7d4 <compelte_testing+0x388>)
 800b6e0:	6818      	ldr	r0, [r3, #0]
 800b6e2:	f107 0214 	add.w	r2, r7, #20
 800b6e6:	2308      	movs	r3, #8
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	f002 fee7 	bl	800e4bc <OS_task_post_event>

    screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
 800b6ee:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b6f2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b702:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b70c:	fb01 f303 	mul.w	r3, r1, r3
 800b710:	4413      	add	r3, r2
 800b712:	334a      	adds	r3, #74	@ 0x4a
 800b714:	2200      	movs	r2, #0
 800b716:	701a      	strb	r2, [r3, #0]
    screen_obj->IC_Testerx[screen_obj->curr_device].state = false;
 800b718:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b71c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b726:	4619      	mov	r1, r3
 800b728:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b72c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b736:	fb01 f303 	mul.w	r3, r1, r3
 800b73a:	4413      	add	r3, r2
 800b73c:	334c      	adds	r3, #76	@ 0x4c
 800b73e:	2200      	movs	r2, #0
 800b740:	701a      	strb	r2, [r3, #0]
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800b742:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b746:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b750:	4619      	mov	r1, r3
 800b752:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b756:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b760:	fb01 f303 	mul.w	r3, r1, r3
 800b764:	4413      	add	r3, r2
 800b766:	334c      	adds	r3, #76	@ 0x4c
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	461a      	mov	r2, r3
 800b76c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b770:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b774:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b778:	6818      	ldr	r0, [r3, #0]
 800b77a:	f002 f8bc 	bl	800d8f6 <DWIN_SetVariable_Icon>
    /* switch page */
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,index_program); // check 
 800b77e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b782:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b78c:	4619      	mov	r1, r3
 800b78e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b792:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b79c:	fb01 f303 	mul.w	r3, r1, r3
 800b7a0:	4413      	add	r3, r2
 800b7a2:	3349      	adds	r3, #73	@ 0x49
 800b7a4:	7819      	ldrb	r1, [r3, #0]
 800b7a6:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800b7aa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b7ae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800b7b2:	6818      	ldr	r0, [r3, #0]
 800b7b4:	f000 fd40 	bl	800c238 <show_main_page>

    /* free the array don't using */

}
 800b7b8:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7c0:	200013a8 	.word	0x200013a8
 800b7c4:	08013d78 	.word	0x08013d78
 800b7c8:	080140e4 	.word	0x080140e4
 800b7cc:	08013d98 	.word	0x08013d98
 800b7d0:	08013dc4 	.word	0x08013dc4
 800b7d4:	080140e8 	.word	0x080140e8

0800b7d8 <off_testing>:

static void off_testing(Screen_t *screen_obj) {
 800b7d8:	b5b0      	push	{r4, r5, r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	6078      	str	r0, [r7, #4]
    compelte_testing(screen_obj);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff fe33 	bl	800b44c <compelte_testing>

    /* free array using in have new data test */
    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b7f4:	fb01 f303 	mul.w	r3, r1, r3
 800b7f8:	4413      	add	r3, r2
 800b7fa:	3374      	adds	r3, #116	@ 0x74
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00e      	beq.n	800b820 <off_testing+0x48>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b808:	4619      	mov	r1, r3
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b810:	fb01 f303 	mul.w	r3, r1, r3
 800b814:	4413      	add	r3, r2
 800b816:	3374      	adds	r3, #116	@ 0x74
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f003 f87e 	bl	800e91c <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].config_pin != NULL) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b826:	4619      	mov	r1, r3
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b82e:	fb01 f303 	mul.w	r3, r1, r3
 800b832:	4413      	add	r3, r2
 800b834:	335c      	adds	r3, #92	@ 0x5c
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00e      	beq.n	800b85a <off_testing+0x82>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].config_pin);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b842:	4619      	mov	r1, r3
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b84a:	fb01 f303 	mul.w	r3, r1, r3
 800b84e:	4413      	add	r3, r2
 800b850:	335c      	adds	r3, #92	@ 0x5c
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4618      	mov	r0, r3
 800b856:	f003 f861 	bl	800e91c <free>
    }
    
    if (screen_obj->IC_Testerx[screen_obj->curr_device].icon_result != NULL) {
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b860:	4619      	mov	r1, r3
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b868:	fb01 f303 	mul.w	r3, r1, r3
 800b86c:	4413      	add	r3, r2
 800b86e:	3364      	adds	r3, #100	@ 0x64
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00e      	beq.n	800b894 <off_testing+0xbc>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result) ;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b87c:	4619      	mov	r1, r3
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b884:	fb01 f303 	mul.w	r3, r1, r3
 800b888:	4413      	add	r3, r2
 800b88a:	3364      	adds	r3, #100	@ 0x64
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4618      	mov	r0, r3
 800b890:	f003 f844 	bl	800e91c <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit != NULL) {
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b89a:	4619      	mov	r1, r3
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b8a2:	fb01 f303 	mul.w	r3, r1, r3
 800b8a6:	4413      	add	r3, r2
 800b8a8:	3368      	adds	r3, #104	@ 0x68
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00e      	beq.n	800b8ce <off_testing+0xf6>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b8be:	fb01 f303 	mul.w	r3, r1, r3
 800b8c2:	4413      	add	r3, r2
 800b8c4:	3368      	adds	r3, #104	@ 0x68
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f003 f827 	bl	800e91c <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case != NULL) {
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b8dc:	fb01 f303 	mul.w	r3, r1, r3
 800b8e0:	4413      	add	r3, r2
 800b8e2:	3370      	adds	r3, #112	@ 0x70
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00e      	beq.n	800b908 <off_testing+0x130>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b8f8:	fb01 f303 	mul.w	r3, r1, r3
 800b8fc:	4413      	add	r3, r2
 800b8fe:	3370      	adds	r3, #112	@ 0x70
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4618      	mov	r0, r3
 800b904:	f003 f80a 	bl	800e91c <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result != NULL) {
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b90e:	4619      	mov	r1, r3
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b916:	fb01 f303 	mul.w	r3, r1, r3
 800b91a:	4413      	add	r3, r2
 800b91c:	3360      	adds	r3, #96	@ 0x60
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00e      	beq.n	800b942 <off_testing+0x16a>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b92a:	4619      	mov	r1, r3
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b932:	fb01 f303 	mul.w	r3, r1, r3
 800b936:	4413      	add	r3, r2
 800b938:	3360      	adds	r3, #96	@ 0x60
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f002 ffed 	bl	800e91c <free>
    }

    /* Send data to esp32 status device */
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800b942:	2008      	movs	r0, #8
 800b944:	f002 ffe2 	bl	800e90c <malloc>
 800b948:	4603      	mov	r3, r0
 800b94a:	60fb      	str	r3, [r7, #12]
    data_send_esp32->data = (char *)malloc(50);
 800b94c:	68fc      	ldr	r4, [r7, #12]
 800b94e:	2032      	movs	r0, #50	@ 0x32
 800b950:	f002 ffdc 	bl	800e90c <malloc>
 800b954:	4603      	mov	r3, r0
 800b956:	6023      	str	r3, [r4, #0]
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b95e:	4619      	mov	r1, r3
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b966:	fb01 f303 	mul.w	r3, r1, r3
 800b96a:	4413      	add	r3, r2
 800b96c:	334c      	adds	r3, #76	@ 0x4c
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d038      	beq.n	800b9e6 <off_testing+0x20e>
        sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6818      	ldr	r0, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b97e:	1c59      	adds	r1, r3, #1
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b986:	461c      	mov	r4, r3
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b98e:	fb04 f303 	mul.w	r3, r4, r3
 800b992:	4413      	add	r3, r2
 800b994:	334b      	adds	r3, #75	@ 0x4b
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	461c      	mov	r4, r3
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	4623      	mov	r3, r4
 800b99e:	005b      	lsls	r3, r3, #1
 800b9a0:	4423      	add	r3, r4
 800b9a2:	011b      	lsls	r3, r3, #4
 800b9a4:	4413      	add	r3, r2
 800b9a6:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800b9aa:	681c      	ldr	r4, [r3, #0]
        screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b9b2:	461d      	mov	r5, r3
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b9ba:	fb05 f303 	mul.w	r3, r5, r3
 800b9be:	4413      	add	r3, r2
 800b9c0:	334b      	adds	r3, #75	@ 0x4b
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	461d      	mov	r5, r3
        sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	462b      	mov	r3, r5
 800b9ca:	005b      	lsls	r3, r3, #1
 800b9cc:	442b      	add	r3, r5
 800b9ce:	011b      	lsls	r3, r3, #4
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	4623      	mov	r3, r4
 800b9dc:	460a      	mov	r2, r1
 800b9de:	4925      	ldr	r1, [pc, #148]	@ (800ba74 <off_testing+0x29c>)
 800b9e0:	f004 feba 	bl	8010758 <siprintf>
 800b9e4:	e031      	b.n	800ba4a <off_testing+0x272>
    } else {
        sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6818      	ldr	r0, [r3, #0]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b9f8:	fb01 f303 	mul.w	r3, r1, r3
 800b9fc:	4413      	add	r3, r2
 800b9fe:	334b      	adds	r3, #75	@ 0x4b
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	4619      	mov	r1, r3
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	460b      	mov	r3, r1
 800ba08:	005b      	lsls	r3, r3, #1
 800ba0a:	440b      	add	r3, r1
 800ba0c:	011b      	lsls	r3, r3, #4
 800ba0e:	4413      	add	r3, r2
 800ba10:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800ba14:	6819      	ldr	r1, [r3, #0]
        screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ba1c:	461c      	mov	r4, r3
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ba24:	fb04 f303 	mul.w	r3, r4, r3
 800ba28:	4413      	add	r3, r2
 800ba2a:	334b      	adds	r3, #75	@ 0x4b
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	461c      	mov	r4, r3
        sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	4623      	mov	r3, r4
 800ba34:	005b      	lsls	r3, r3, #1
 800ba36:	4423      	add	r3, r4
 800ba38:	011b      	lsls	r3, r3, #4
 800ba3a:	4413      	add	r3, r2
 800ba3c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	460a      	mov	r2, r1
 800ba44:	490c      	ldr	r1, [pc, #48]	@ (800ba78 <off_testing+0x2a0>)
 800ba46:	f004 fe87 	bl	8010758 <siprintf>
    }
    data_send_esp32->len = strlen(data_send_esp32->data);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68fc      	ldr	r4, [r7, #12]
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7f4 fc1d 	bl	8000290 <strlen>
 800ba56:	4603      	mov	r3, r0
 800ba58:	6063      	str	r3, [r4, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800ba5a:	4b08      	ldr	r3, [pc, #32]	@ (800ba7c <off_testing+0x2a4>)
 800ba5c:	6818      	ldr	r0, [r3, #0]
 800ba5e:	f107 020c 	add.w	r2, r7, #12
 800ba62:	2308      	movs	r3, #8
 800ba64:	2100      	movs	r1, #0
 800ba66:	f002 fd29 	bl	800e4bc <OS_task_post_event>
}
 800ba6a:	bf00      	nop
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bdb0      	pop	{r4, r5, r7, pc}
 800ba72:	bf00      	nop
 800ba74:	08013b04 	.word	0x08013b04
 800ba78:	08013b18 	.word	0x08013b18
 800ba7c:	080140e8 	.word	0x080140e8

0800ba80 <show_pulse>:

static void show_pulse(Screen_t *screen_obj, uint8_t curr_case) {
 800ba80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba84:	b0d4      	sub	sp, #336	@ 0x150
 800ba86:	af04      	add	r7, sp, #16
 800ba88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ba8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ba90:	6018      	str	r0, [r3, #0]
 800ba92:	460a      	mov	r2, r1
 800ba94:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ba98:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800ba9c:	701a      	strb	r2, [r3, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 800ba9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800baa2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800baac:	4619      	mov	r1, r3
 800baae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bab2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800babc:	fb01 f303 	mul.w	r3, r1, r3
 800bac0:	4413      	add	r3, r2
 800bac2:	334b      	adds	r3, #75	@ 0x4b
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	4619      	mov	r1, r3
 800bac8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bacc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	460b      	mov	r3, r1
 800bad4:	005b      	lsls	r3, r3, #1
 800bad6:	440b      	add	r3, r1
 800bad8:	011b      	lsls	r3, r3, #4
 800bada:	4413      	add	r3, r2
 800badc:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800bae6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800baea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800baf4:	4619      	mov	r1, r3
 800baf6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bafa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bb04:	fb01 f303 	mul.w	r3, r1, r3
 800bb08:	4413      	add	r3, r2
 800bb0a:	334b      	adds	r3, #75	@ 0x4b
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 800bb12:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800bb16:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb1a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bb1e:	6819      	ldr	r1, [r3, #0]
 800bb20:	4613      	mov	r3, r2
 800bb22:	005b      	lsls	r3, r3, #1
 800bb24:	4413      	add	r3, r2
 800bb26:	011b      	lsls	r3, r3, #4
 800bb28:	440b      	add	r3, r1
 800bb2a:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800bb34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb38:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800bb42:	4619      	mov	r1, r3
 800bb44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bb52:	fb01 f303 	mul.w	r3, r1, r3
 800bb56:	4413      	add	r3, r2
 800bb58:	334b      	adds	r3, #75	@ 0x4b
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
    
    char ShowCase_String[15];
    uint8_t index_data;
    uint16_t vp_pulse = VP_Pulse_graph;
 800bb60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb64:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    uint8_t pins_to_show = num_pin - 2; 
 800bb68:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 800bb6c:	3b02      	subs	r3, #2
 800bb6e:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
    uint8_t skip_index1 = (num_pin / 2) - 1; // skip index
 800bb72:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 800bb76:	085b      	lsrs	r3, r3, #1
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    uint8_t skip_index2 = num_pin - 1;       // skip index
 800bb80:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 800bb84:	3b01      	subs	r3, #1
 800bb86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    uint16_t Address_VP = VP_Text_Pin_Pulse;
 800bb8a:	f249 7350 	movw	r3, #38736	@ 0x9750
 800bb8e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    uint16_t vp_vertical = VP_vertical_line;
 800bb92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bb96:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    uint16_t vp_icon_clock = VP_ICON_CLOCK;
 800bb9a:	f44f 4386 	mov.w	r3, #17152	@ 0x4300
 800bb9e:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138

    char *data_copy = malloc(screen_obj->Program_Testx[index_program].data_pin_len + 1);
 800bba2:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800bba6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bbaa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bbae:	6819      	ldr	r1, [r3, #0]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	005b      	lsls	r3, r3, #1
 800bbb4:	4413      	add	r3, r2
 800bbb6:	011b      	lsls	r3, r3, #4
 800bbb8:	440b      	add	r3, r1
 800bbba:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800bbbe:	881b      	ldrh	r3, [r3, #0]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f002 fea2 	bl	800e90c <malloc>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    memcpy(data_copy, screen_obj->Program_Testx[index_program].data_pin, screen_obj->Program_Testx[index_program].data_pin_len);
 800bbce:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800bbd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bbd6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bbda:	6819      	ldr	r1, [r3, #0]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	4413      	add	r3, r2
 800bbe2:	011b      	lsls	r3, r3, #4
 800bbe4:	440b      	add	r3, r1
 800bbe6:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800bbea:	6818      	ldr	r0, [r3, #0]
 800bbec:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800bbf0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bbf4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bbf8:	6819      	ldr	r1, [r3, #0]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	005b      	lsls	r3, r3, #1
 800bbfe:	4413      	add	r3, r2
 800bc00:	011b      	lsls	r3, r3, #4
 800bc02:	440b      	add	r3, r1
 800bc04:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	4601      	mov	r1, r0
 800bc0e:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800bc12:	f005 f814 	bl	8010c3e <memcpy>
    data_copy[screen_obj->Program_Testx[index_program].data_pin_len] = '\0'; 
 800bc16:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800bc1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bc1e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bc22:	6819      	ldr	r1, [r3, #0]
 800bc24:	4613      	mov	r3, r2
 800bc26:	005b      	lsls	r3, r3, #1
 800bc28:	4413      	add	r3, r2
 800bc2a:	011b      	lsls	r3, r3, #4
 800bc2c:	440b      	add	r3, r1
 800bc2e:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800bc32:	881b      	ldrh	r3, [r3, #0]
 800bc34:	461a      	mov	r2, r3
 800bc36:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800bc3a:	4413      	add	r3, r2
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	701a      	strb	r2, [r3, #0]

    char pin_names[18][10];
    uint8_t total_pins = 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    char *temp_buf = strtok(data_copy, "\n");
 800bc46:	49c1      	ldr	r1, [pc, #772]	@ (800bf4c <show_pulse+0x4cc>)
 800bc48:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800bc4c:	f004 ff0c 	bl	8010a68 <strtok>
 800bc50:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130

    while (temp_buf != NULL && total_pins < 18) {
 800bc54:	e018      	b.n	800bc88 <show_pulse+0x208>
        strcpy(pin_names[total_pins], temp_buf);
 800bc56:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800bc5a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800bc5e:	4613      	mov	r3, r2
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4413      	add	r3, r2
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	440b      	add	r3, r1
 800bc68:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f004 ffde 	bl	8010c2e <strcpy>
        total_pins++;
 800bc72:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800bc76:	3301      	adds	r3, #1
 800bc78:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        temp_buf = strtok(NULL, "\n");
 800bc7c:	49b3      	ldr	r1, [pc, #716]	@ (800bf4c <show_pulse+0x4cc>)
 800bc7e:	2000      	movs	r0, #0
 800bc80:	f004 fef2 	bl	8010a68 <strtok>
 800bc84:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
    while (temp_buf != NULL && total_pins < 18) {
 800bc88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d003      	beq.n	800bc98 <show_pulse+0x218>
 800bc90:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800bc94:	2b11      	cmp	r3, #17
 800bc96:	d9de      	bls.n	800bc56 <show_pulse+0x1d6>
    }

    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1, 
 800bc98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bc9c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800bca6:	4619      	mov	r1, r3
 800bca8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bcac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bcb6:	fb01 f303 	mul.w	r3, r1, r3
 800bcba:	4413      	add	r3, r2
 800bcbc:	3348      	adds	r3, #72	@ 0x48
 800bcbe:	781b      	ldrb	r3, [r3, #0]
    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
 800bcc0:	1c59      	adds	r1, r3, #1
            (pins_to_show + 6) / 7); // Calculate total cases needed
 800bcc2:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 800bcc6:	3306      	adds	r3, #6
    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
 800bcc8:	4aa1      	ldr	r2, [pc, #644]	@ (800bf50 <show_pulse+0x4d0>)
 800bcca:	fb82 0203 	smull	r0, r2, r2, r3
 800bcce:	441a      	add	r2, r3
 800bcd0:	1092      	asrs	r2, r2, #2
 800bcd2:	17db      	asrs	r3, r3, #31
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4a9d      	ldr	r2, [pc, #628]	@ (800bf54 <show_pulse+0x4d4>)
 800bce0:	210f      	movs	r1, #15
 800bce2:	f004 fd03 	bl	80106ec <sniprintf>

    DWIN_SetText((Dwin_t *)screen_obj, VP_Show_CurrentCase, ShowCase_String, strlen(ShowCase_String));
 800bce6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7f4 fad0 	bl	8000290 <strlen>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 800bcf8:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800bcfc:	f5a1 709e 	sub.w	r0, r1, #316	@ 0x13c
 800bd00:	f249 3180 	movw	r1, #37760	@ 0x9380
 800bd04:	6800      	ldr	r0, [r0, #0]
 800bd06:	f001 fd44 	bl	800d792 <DWIN_SetText>

    /* TURN OFF ALL CLOCK ICON */
    uint8_t clock_buf[49] = {0};
 800bd0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd0e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800bd12:	4618      	mov	r0, r3
 800bd14:	2331      	movs	r3, #49	@ 0x31
 800bd16:	461a      	mov	r2, r3
 800bd18:	2100      	movs	r1, #0
 800bd1a:	f004 fe55 	bl	80109c8 <memset>
    memset(clock_buf,ICON_CLOCK_NONE,sizeof(clock_buf));
 800bd1e:	f107 031c 	add.w	r3, r7, #28
 800bd22:	2231      	movs	r2, #49	@ 0x31
 800bd24:	2102      	movs	r1, #2
 800bd26:	4618      	mov	r0, r3
 800bd28:	f004 fe4e 	bl	80109c8 <memset>
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,vp_icon_clock,clock_buf,49);
 800bd2c:	f107 021c 	add.w	r2, r7, #28
 800bd30:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 800bd34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd38:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800bd3c:	2331      	movs	r3, #49	@ 0x31
 800bd3e:	6800      	ldr	r0, [r0, #0]
 800bd40:	f001 fe06 	bl	800d950 <DWIN_SetArray_Icon>

    for (uint8_t i = 0; i < 7; i++) {
 800bd44:	2300      	movs	r3, #0
 800bd46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
 800bd4a:	e1be      	b.n	800c0ca <show_pulse+0x64a>
        uint8_t display_pin = (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case * 7) + i;
 800bd4c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd50:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bd6a:	fb01 f303 	mul.w	r3, r1, r3
 800bd6e:	4413      	add	r3, r2
 800bd70:	3348      	adds	r3, #72	@ 0x48
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	461a      	mov	r2, r3
 800bd76:	00d2      	lsls	r2, r2, #3
 800bd78:	1ad3      	subs	r3, r2, r3
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800bd80:	4413      	add	r3, r2
 800bd82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        
        if (display_pin < pins_to_show) {
 800bd86:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800bd8a:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	f080 8136 	bcs.w	800c000 <show_pulse+0x580>
            uint8_t actual_pin_index = display_pin;
 800bd94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd98:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
            
            // Adjust for skipped indices
            if (actual_pin_index >= skip_index1) {
 800bd9c:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800bda0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d304      	bcc.n	800bdb2 <show_pulse+0x332>
                actual_pin_index++; // Skip VCC
 800bda8:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800bdac:	3301      	adds	r3, #1
 800bdae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
            }
            if (actual_pin_index >= skip_index2) {
 800bdb2:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800bdb6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d304      	bcc.n	800bdc8 <show_pulse+0x348>
                actual_pin_index++; // Skip GND
 800bdbe:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
            }
            
            // Calculate data index
            index_data = num_case * actual_pin_index;
 800bdc8:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 800bdcc:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800bdd0:	fb12 f303 	smulbb	r3, r2, r3
 800bdd4:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
            
            // Create the line with actual data
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data] == 3) { // UP CLOCK
 800bdd8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bddc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800bde6:	4619      	mov	r1, r3
 800bde8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bdec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bdf6:	fb01 f303 	mul.w	r3, r1, r3
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3374      	adds	r3, #116	@ 0x74
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 800be04:	4413      	add	r3, r2
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	2b03      	cmp	r3, #3
 800be0a:	d142      	bne.n	800be92 <show_pulse+0x412>
                /* don't show pulse graph */
                uint8_t up_clock[7] = {0};
 800be0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800be14:	461a      	mov	r2, r3
 800be16:	2300      	movs	r3, #0
 800be18:	6013      	str	r3, [r2, #0]
 800be1a:	f8c2 3003 	str.w	r3, [r2, #3]
                memset(up_clock,ICON_UP_CLOCK,sizeof(up_clock));
 800be1e:	f107 0314 	add.w	r3, r7, #20
 800be22:	2207      	movs	r2, #7
 800be24:	2101      	movs	r1, #1
 800be26:	4618      	mov	r0, r3
 800be28:	f004 fdce 	bl	80109c8 <memset>
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800be2c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be30:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800be3a:	4619      	mov	r1, r3
 800be3c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800be4a:	fb01 f303 	mul.w	r3, r1, r3
 800be4e:	4413      	add	r3, r2
 800be50:	3374      	adds	r3, #116	@ 0x74
 800be52:	681a      	ldr	r2, [r3, #0]
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800be54:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800be58:	4413      	add	r3, r2
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800be5a:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 800be5e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800be62:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800be66:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 800be6a:	9201      	str	r2, [sp, #4]
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	2300      	movs	r3, #0
 800be70:	2200      	movs	r2, #0
 800be72:	6800      	ldr	r0, [r0, #0]
 800be74:	f001 fde8 	bl	800da48 <DWIN_Create_Basic_line>
                                num_case);
                DWIN_SetArray_Icon((Dwin_t *)screen_obj,vp_icon_clock,up_clock,sizeof(up_clock));
 800be78:	f107 0214 	add.w	r2, r7, #20
 800be7c:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 800be80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be84:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800be88:	2307      	movs	r3, #7
 800be8a:	6800      	ldr	r0, [r0, #0]
 800be8c:	f001 fd60 	bl	800d950 <DWIN_SetArray_Icon>
 800be90:	e094      	b.n	800bfbc <show_pulse+0x53c>
            } else if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data] == 4) {
 800be92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be96:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800bea0:	4619      	mov	r1, r3
 800bea2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bea6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800beb0:	fb01 f303 	mul.w	r3, r1, r3
 800beb4:	4413      	add	r3, r2
 800beb6:	3374      	adds	r3, #116	@ 0x74
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 800bebe:	4413      	add	r3, r2
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	2b04      	cmp	r3, #4
 800bec4:	d148      	bne.n	800bf58 <show_pulse+0x4d8>
                uint8_t down_clock[7] = {0};
 800bec6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800beca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800bece:	461a      	mov	r2, r3
 800bed0:	2300      	movs	r3, #0
 800bed2:	6013      	str	r3, [r2, #0]
 800bed4:	f8c2 3003 	str.w	r3, [r2, #3]
                memset(down_clock,ICON_DOWN_CLOCK,sizeof(down_clock));
 800bed8:	f107 030c 	add.w	r3, r7, #12
 800bedc:	2207      	movs	r2, #7
 800bede:	2100      	movs	r1, #0
 800bee0:	4618      	mov	r0, r3
 800bee2:	f004 fd71 	bl	80109c8 <memset>
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800bee6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800beea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800bef4:	4619      	mov	r1, r3
 800bef6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800befa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bf04:	fb01 f303 	mul.w	r3, r1, r3
 800bf08:	4413      	add	r3, r2
 800bf0a:	3374      	adds	r3, #116	@ 0x74
 800bf0c:	681a      	ldr	r2, [r3, #0]
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800bf0e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800bf12:	4413      	add	r3, r2
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800bf14:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 800bf18:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800bf1c:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800bf20:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 800bf24:	9201      	str	r2, [sp, #4]
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	2300      	movs	r3, #0
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	6800      	ldr	r0, [r0, #0]
 800bf2e:	f001 fd8b 	bl	800da48 <DWIN_Create_Basic_line>
                                num_case);
                DWIN_SetArray_Icon((Dwin_t *)screen_obj,vp_icon_clock,down_clock,sizeof(down_clock));
 800bf32:	f107 020c 	add.w	r2, r7, #12
 800bf36:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 800bf3a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bf3e:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800bf42:	2307      	movs	r3, #7
 800bf44:	6800      	ldr	r0, [r0, #0]
 800bf46:	f001 fd03 	bl	800d950 <DWIN_SetArray_Icon>
 800bf4a:	e037      	b.n	800bfbc <show_pulse+0x53c>
 800bf4c:	08013c90 	.word	0x08013c90
 800bf50:	92492493 	.word	0x92492493
 800bf54:	08013af0 	.word	0x08013af0
            } else {
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 800bf58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	461a      	mov	r2, r3
 800bf60:	0052      	lsls	r2, r2, #1
 800bf62:	4413      	add	r3, r2
 800bf64:	461a      	mov	r2, r3
 800bf66:	0112      	lsls	r2, r2, #4
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	3390      	adds	r3, #144	@ 0x90
 800bf6e:	b29e      	uxth	r6, r3
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800bf70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bf74:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800bf7e:	4619      	mov	r1, r3
 800bf80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bf84:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bf8e:	fb01 f303 	mul.w	r3, r1, r3
 800bf92:	4413      	add	r3, r2
 800bf94:	3374      	adds	r3, #116	@ 0x74
 800bf96:	681a      	ldr	r2, [r3, #0]
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 800bf98:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800bf9c:	4413      	add	r3, r2
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 800bf9e:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 800bfa2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800bfa6:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800bfaa:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 800bfae:	9201      	str	r2, [sp, #4]
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	4633      	mov	r3, r6
 800bfb4:	2264      	movs	r2, #100	@ 0x64
 800bfb6:	6800      	ldr	r0, [r0, #0]
 800bfb8:	f001 fd46 	bl	800da48 <DWIN_Create_Basic_line>
                                num_case);
            }            
            // Set pin name
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, pin_names[actual_pin_index], 
 800bfbc:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800bfc0:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4413      	add	r3, r2
 800bfca:	005b      	lsls	r3, r3, #1
 800bfcc:	18ce      	adds	r6, r1, r3
                        strlen(pin_names[actual_pin_index]));
 800bfce:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800bfd2:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	005b      	lsls	r3, r3, #1
 800bfde:	440b      	add	r3, r1
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7f4 f955 	bl	8000290 <strlen>
 800bfe6:	4603      	mov	r3, r0
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, pin_names[actual_pin_index], 
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 800bfee:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800bff2:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800bff6:	4632      	mov	r2, r6
 800bff8:	6800      	ldr	r0, [r0, #0]
 800bffa:	f001 fbca 	bl	800d792 <DWIN_SetText>
 800bffe:	e04f      	b.n	800c0a0 <show_pulse+0x620>
            
        } else { /* don't using this */
 800c000:	466b      	mov	r3, sp
 800c002:	469a      	mov	sl, r3
            uint8_t low_buf[12 - num_case];
 800c004:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800c008:	f1c3 060c 	rsb	r6, r3, #12
 800c00c:	1e73      	subs	r3, r6, #1
 800c00e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800c012:	4632      	mov	r2, r6
 800c014:	2300      	movs	r3, #0
 800c016:	4614      	mov	r4, r2
 800c018:	461d      	mov	r5, r3
 800c01a:	f04f 0200 	mov.w	r2, #0
 800c01e:	f04f 0300 	mov.w	r3, #0
 800c022:	00eb      	lsls	r3, r5, #3
 800c024:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c028:	00e2      	lsls	r2, r4, #3
 800c02a:	4632      	mov	r2, r6
 800c02c:	2300      	movs	r3, #0
 800c02e:	4690      	mov	r8, r2
 800c030:	4699      	mov	r9, r3
 800c032:	f04f 0200 	mov.w	r2, #0
 800c036:	f04f 0300 	mov.w	r3, #0
 800c03a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c03e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c046:	4633      	mov	r3, r6
 800c048:	3307      	adds	r3, #7
 800c04a:	08db      	lsrs	r3, r3, #3
 800c04c:	00db      	lsls	r3, r3, #3
 800c04e:	ebad 0d03 	sub.w	sp, sp, r3
 800c052:	ab04      	add	r3, sp, #16
 800c054:	3300      	adds	r3, #0
 800c056:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            memset(low_buf,0,sizeof(low_buf));
 800c05a:	4633      	mov	r3, r6
 800c05c:	461a      	mov	r2, r3
 800c05e:	2100      	movs	r1, #0
 800c060:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800c064:	f004 fcb0 	bl	80109c8 <memset>
            DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800c068:	b2f3      	uxtb	r3, r6
 800c06a:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 800c06e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c072:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800c076:	9301      	str	r3, [sp, #4]
 800c078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	2300      	movs	r3, #0
 800c080:	2200      	movs	r2, #0
 800c082:	6800      	ldr	r0, [r0, #0]
 800c084:	f001 fce0 	bl	800da48 <DWIN_Create_Basic_line>
                                low_buf, 
                                sizeof(low_buf));
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, " ", 1);
 800c088:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 800c08c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c090:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800c094:	2301      	movs	r3, #1
 800c096:	4a67      	ldr	r2, [pc, #412]	@ (800c234 <show_pulse+0x7b4>)
 800c098:	6800      	ldr	r0, [r0, #0]
 800c09a:	f001 fb7a 	bl	800d792 <DWIN_SetText>
 800c09e:	46d5      	mov	sp, sl
        }
        
        vp_pulse += 0x200;
 800c0a0:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800c0a4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c0a8:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        
        Address_VP += 0x10;
 800c0ac:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800c0b0:	3310      	adds	r3, #16
 800c0b2:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
        vp_icon_clock += 0x07;
 800c0b6:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800c0ba:	3307      	adds	r3, #7
 800c0bc:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    for (uint8_t i = 0; i < 7; i++) {
 800c0c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
 800c0ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c0ce:	2b06      	cmp	r3, #6
 800c0d0:	f67f ae3c 	bls.w	800bd4c <show_pulse+0x2cc>
    }

    for (uint8_t i = 0; i < 14; i++) {
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
 800c0da:	e09c      	b.n	800c216 <show_pulse+0x796>
        if (i < num_case) {
 800c0dc:	f897 212d 	ldrb.w	r2, [r7, #301]	@ 0x12d
 800c0e0:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d279      	bcs.n	800c1dc <show_pulse+0x75c>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '1') {
 800c0e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c0ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c0fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c106:	fb01 f303 	mul.w	r3, r1, r3
 800c10a:	4413      	add	r3, r2
 800c10c:	3370      	adds	r3, #112	@ 0x70
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c114:	4413      	add	r3, r2
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	2b31      	cmp	r3, #49	@ 0x31
 800c11a:	d12f      	bne.n	800c17c <show_pulse+0x6fc>
                DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,100 + (50 * i),110,100 + (50 * i),415,0x01ED);
 800c11c:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c120:	b29b      	uxth	r3, r3
 800c122:	461a      	mov	r2, r3
 800c124:	0092      	lsls	r2, r2, #2
 800c126:	4413      	add	r3, r2
 800c128:	461a      	mov	r2, r3
 800c12a:	0091      	lsls	r1, r2, #2
 800c12c:	461a      	mov	r2, r3
 800c12e:	460b      	mov	r3, r1
 800c130:	4413      	add	r3, r2
 800c132:	005b      	lsls	r3, r3, #1
 800c134:	b29b      	uxth	r3, r3
 800c136:	3364      	adds	r3, #100	@ 0x64
 800c138:	b29a      	uxth	r2, r3
 800c13a:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c13e:	b29b      	uxth	r3, r3
 800c140:	4619      	mov	r1, r3
 800c142:	0089      	lsls	r1, r1, #2
 800c144:	440b      	add	r3, r1
 800c146:	4619      	mov	r1, r3
 800c148:	0088      	lsls	r0, r1, #2
 800c14a:	4619      	mov	r1, r3
 800c14c:	4603      	mov	r3, r0
 800c14e:	440b      	add	r3, r1
 800c150:	005b      	lsls	r3, r3, #1
 800c152:	b29b      	uxth	r3, r3
 800c154:	3364      	adds	r3, #100	@ 0x64
 800c156:	b29b      	uxth	r3, r3
 800c158:	f8b7 113a 	ldrh.w	r1, [r7, #314]	@ 0x13a
 800c15c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800c160:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 800c164:	f240 14ed 	movw	r4, #493	@ 0x1ed
 800c168:	9402      	str	r4, [sp, #8]
 800c16a:	f240 149f 	movw	r4, #415	@ 0x19f
 800c16e:	9401      	str	r4, [sp, #4]
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	236e      	movs	r3, #110	@ 0x6e
 800c174:	6800      	ldr	r0, [r0, #0]
 800c176:	f001 fe75 	bl	800de64 <DWIN_Create_Single_line>
 800c17a:	e041      	b.n	800c200 <show_pulse+0x780>
            } else {
                DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,100 + (50 * i),110,100 + (50 * i),415,0xF800);
 800c17c:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c180:	b29b      	uxth	r3, r3
 800c182:	461a      	mov	r2, r3
 800c184:	0092      	lsls	r2, r2, #2
 800c186:	4413      	add	r3, r2
 800c188:	461a      	mov	r2, r3
 800c18a:	0091      	lsls	r1, r2, #2
 800c18c:	461a      	mov	r2, r3
 800c18e:	460b      	mov	r3, r1
 800c190:	4413      	add	r3, r2
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	b29b      	uxth	r3, r3
 800c196:	3364      	adds	r3, #100	@ 0x64
 800c198:	b29a      	uxth	r2, r3
 800c19a:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	0089      	lsls	r1, r1, #2
 800c1a4:	440b      	add	r3, r1
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	0088      	lsls	r0, r1, #2
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	440b      	add	r3, r1
 800c1b0:	005b      	lsls	r3, r3, #1
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	3364      	adds	r3, #100	@ 0x64
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	f8b7 113a 	ldrh.w	r1, [r7, #314]	@ 0x13a
 800c1bc:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800c1c0:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 800c1c4:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 800c1c8:	9402      	str	r4, [sp, #8]
 800c1ca:	f240 149f 	movw	r4, #415	@ 0x19f
 800c1ce:	9401      	str	r4, [sp, #4]
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	236e      	movs	r3, #110	@ 0x6e
 800c1d4:	6800      	ldr	r0, [r0, #0]
 800c1d6:	f001 fe45 	bl	800de64 <DWIN_Create_Single_line>
 800c1da:	e011      	b.n	800c200 <show_pulse+0x780>
            }
        } else {
            DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,0,0,0,0,0xF800);
 800c1dc:	f8b7 113a 	ldrh.w	r1, [r7, #314]	@ 0x13a
 800c1e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c1e4:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800c1e8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800c1ec:	9302      	str	r3, [sp, #8]
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	6800      	ldr	r0, [r0, #0]
 800c1fc:	f001 fe32 	bl	800de64 <DWIN_Create_Single_line>
        }
        vp_vertical += 0x200;
 800c200:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800c204:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c208:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    for (uint8_t i = 0; i < 14; i++) {
 800c20c:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c210:	3301      	adds	r3, #1
 800c212:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
 800c216:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c21a:	2b0d      	cmp	r3, #13
 800c21c:	f67f af5e 	bls.w	800c0dc <show_pulse+0x65c>
    }

    free(data_copy);
 800c220:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800c224:	f002 fb7a 	bl	800e91c <free>
}
 800c228:	bf00      	nop
 800c22a:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800c22e:	46bd      	mov	sp, r7
 800c230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c234:	08013dc8 	.word	0x08013dc8

0800c238 <show_main_page>:

void show_main_page(Screen_t *const screen_obj, uint8_t PageMain, uint8_t curr_program) {
 800c238:	b590      	push	{r4, r7, lr}
 800c23a:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800c23e:	af02      	add	r7, sp, #8
 800c240:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c244:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c248:	6018      	str	r0, [r3, #0]
 800c24a:	4608      	mov	r0, r1
 800c24c:	4611      	mov	r1, r2
 800c24e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c252:	f2a3 233d 	subw	r3, r3, #573	@ 0x23d
 800c256:	4602      	mov	r2, r0
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c25e:	f2a3 233e 	subw	r3, r3, #574	@ 0x23e
 800c262:	460a      	mov	r2, r1
 800c264:	701a      	strb	r2, [r3, #0]
    
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800c266:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c26a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c274:	4619      	mov	r1, r3
 800c276:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c27a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c284:	fb01 f303 	mul.w	r3, r1, r3
 800c288:	4413      	add	r3, r2
 800c28a:	334b      	adds	r3, #75	@ 0x4b
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800c292:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800c296:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c29a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c29e:	6819      	ldr	r1, [r3, #0]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	005b      	lsls	r3, r3, #1
 800c2a4:	4413      	add	r3, r2
 800c2a6:	011b      	lsls	r3, r3, #4
 800c2a8:	440b      	add	r3, r1
 800c2aa:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800c2b4:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800c2b8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c2bc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c2c0:	6819      	ldr	r1, [r3, #0]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	005b      	lsls	r3, r3, #1
 800c2c6:	4413      	add	r3, r2
 800c2c8:	011b      	lsls	r3, r3, #4
 800c2ca:	440b      	add	r3, r1
 800c2cc:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
    switch (PageMain) {
 800c2d6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c2da:	f2a3 233d 	subw	r3, r3, #573	@ 0x23d
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	3b64      	subs	r3, #100	@ 0x64
 800c2e2:	2b03      	cmp	r3, #3
 800c2e4:	f200 839c 	bhi.w	800ca20 <show_main_page+0x7e8>
 800c2e8:	a201      	add	r2, pc, #4	@ (adr r2, 800c2f0 <show_main_page+0xb8>)
 800c2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ee:	bf00      	nop
 800c2f0:	0800c3d7 	.word	0x0800c3d7
 800c2f4:	0800c301 	.word	0x0800c301
 800c2f8:	0800c4c3 	.word	0x0800c4c3
 800c2fc:	0800c7b1 	.word	0x0800c7b1
        case DWINPAGE_MAIN : {
            /* Show info */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 800c300:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c304:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c30e:	4619      	mov	r1, r3
 800c310:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c314:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800c318:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c31c:	fb01 f303 	mul.w	r3, r1, r3
 800c320:	3348      	adds	r3, #72	@ 0x48
 800c322:	6812      	ldr	r2, [r2, #0]
 800c324:	4413      	add	r3, r2
 800c326:	1d5c      	adds	r4, r3, #5
 800c328:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c32c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c336:	4619      	mov	r1, r3
 800c338:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c33c:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800c340:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c344:	fb01 f303 	mul.w	r3, r1, r3
 800c348:	3348      	adds	r3, #72	@ 0x48
 800c34a:	6812      	ldr	r2, [r2, #0]
 800c34c:	4413      	add	r3, r2
 800c34e:	3305      	adds	r3, #5
 800c350:	4618      	mov	r0, r3
 800c352:	f7f3 ff9d 	bl	8000290 <strlen>
 800c356:	4603      	mov	r3, r0
 800c358:	b29b      	uxth	r3, r3
 800c35a:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800c35e:	f5a2 700f 	sub.w	r0, r2, #572	@ 0x23c
 800c362:	4622      	mov	r2, r4
 800c364:	f249 3150 	movw	r1, #37712	@ 0x9350
 800c368:	6800      	ldr	r0, [r0, #0]
 800c36a:	f001 fa12 	bl	800d792 <DWIN_SetText>
            DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800c36e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c372:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c37c:	4619      	mov	r1, r3
 800c37e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c382:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c38c:	fb01 f303 	mul.w	r3, r1, r3
 800c390:	4413      	add	r3, r2
 800c392:	334c      	adds	r3, #76	@ 0x4c
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	461a      	mov	r2, r3
 800c398:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c39c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c3a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c3a4:	6818      	ldr	r0, [r3, #0]
 800c3a6:	f001 faa6 	bl	800d8f6 <DWIN_SetVariable_Icon>
            Screen_ShowData_Mainpage(screen_obj,curr_program);
 800c3aa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c3ae:	f2a3 233e 	subw	r3, r3, #574	@ 0x23e
 800c3b2:	781a      	ldrb	r2, [r3, #0]
 800c3b4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c3b8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c3bc:	4611      	mov	r1, r2
 800c3be:	6818      	ldr	r0, [r3, #0]
 800c3c0:	f7fe fa4c 	bl	800a85c <Screen_ShowData_Mainpage>

            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN);
 800c3c4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c3c8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c3cc:	2165      	movs	r1, #101	@ 0x65
 800c3ce:	6818      	ldr	r0, [r3, #0]
 800c3d0:	f001 f9b8 	bl	800d744 <DWIN_SetPage>
        } break;
 800c3d4:	e324      	b.n	800ca20 <show_main_page+0x7e8>
        case DWINPAGE_MAIN_FINISH: {
            /* Show data */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 800c3d6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c3da:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c3ea:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800c3ee:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c3f2:	fb01 f303 	mul.w	r3, r1, r3
 800c3f6:	3348      	adds	r3, #72	@ 0x48
 800c3f8:	6812      	ldr	r2, [r2, #0]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	1d5c      	adds	r4, r3, #5
 800c3fe:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c402:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c40c:	4619      	mov	r1, r3
 800c40e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c412:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800c416:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c41a:	fb01 f303 	mul.w	r3, r1, r3
 800c41e:	3348      	adds	r3, #72	@ 0x48
 800c420:	6812      	ldr	r2, [r2, #0]
 800c422:	4413      	add	r3, r2
 800c424:	3305      	adds	r3, #5
 800c426:	4618      	mov	r0, r3
 800c428:	f7f3 ff32 	bl	8000290 <strlen>
 800c42c:	4603      	mov	r3, r0
 800c42e:	b29b      	uxth	r3, r3
 800c430:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800c434:	f5a2 700f 	sub.w	r0, r2, #572	@ 0x23c
 800c438:	4622      	mov	r2, r4
 800c43a:	f249 3150 	movw	r1, #37712	@ 0x9350
 800c43e:	6800      	ldr	r0, [r0, #0]
 800c440:	f001 f9a7 	bl	800d792 <DWIN_SetText>
            show_text_short_circuit(screen_obj);
 800c444:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c448:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c44c:	6818      	ldr	r0, [r3, #0]
 800c44e:	f7fe fd21 	bl	800ae94 <show_text_short_circuit>
            show_text_function_test(screen_obj);
 800c452:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c456:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c45a:	6818      	ldr	r0, [r3, #0]
 800c45c:	f7fe fe66 	bl	800b12c <show_text_function_test>
            /* change page if home page */
            if (screen_obj->Ishome) {
 800c460:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c464:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f000 82d1 	beq.w	800ca16 <show_main_page+0x7de>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800c474:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c478:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c482:	4619      	mov	r1, r3
 800c484:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c488:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c492:	fb01 f303 	mul.w	r3, r1, r3
 800c496:	4413      	add	r3, r2
 800c498:	334c      	adds	r3, #76	@ 0x4c
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	461a      	mov	r2, r3
 800c49e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c4a2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c4a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c4aa:	6818      	ldr	r0, [r3, #0]
 800c4ac:	f001 fa23 	bl	800d8f6 <DWIN_SetVariable_Icon>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_FINISH);
 800c4b0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c4b4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c4b8:	2164      	movs	r1, #100	@ 0x64
 800c4ba:	6818      	ldr	r0, [r3, #0]
 800c4bc:	f001 f942 	bl	800d744 <DWIN_SetPage>
            }
        } break;
 800c4c0:	e2a9      	b.n	800ca16 <show_main_page+0x7de>
        case DWINPAGE_MAIN_DETAIL: {
            /* get data and show */
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case = 0;
 800c4c2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c4c6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c4d6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c4e0:	fb01 f303 	mul.w	r3, r1, r3
 800c4e4:	4413      	add	r3, r2
 800c4e6:	3348      	adds	r3, #72	@ 0x48
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	701a      	strb	r2, [r3, #0]
            uint8_t case_show = screen_obj->IC_Testerx[screen_obj->curr_device].curr_case;
 800c4ec:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c4f0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c500:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c50a:	fb01 f303 	mul.w	r3, r1, r3
 800c50e:	4413      	add	r3, r2
 800c510:	3348      	adds	r3, #72	@ 0x48
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	f887 323a 	strb.w	r3, [r7, #570]	@ 0x23a
            char ShowCase_String[30];
            Screen_SetInfo_Pin(screen_obj);
 800c518:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c51c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c520:	6818      	ldr	r0, [r3, #0]
 800c522:	f7fe fa7f 	bl	800aa24 <Screen_SetInfo_Pin>
            Screen_GetIcon_Pin(screen_obj,screen_obj->Program_Testx[index_program].data_test);
 800c526:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800c52a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c52e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c532:	6819      	ldr	r1, [r3, #0]
 800c534:	4613      	mov	r3, r2
 800c536:	005b      	lsls	r3, r3, #1
 800c538:	4413      	add	r3, r2
 800c53a:	011b      	lsls	r3, r3, #4
 800c53c:	440b      	add	r3, r1
 800c53e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c548:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c54c:	4611      	mov	r1, r2
 800c54e:	6818      	ldr	r0, [r3, #0]
 800c550:	f7fd feb6 	bl	800a2c0 <Screen_GetIcon_Pin>
            DWIN_SetArray_Icon(screen_obj,VP_ICON_DIRECTION_PIN,(uint8_t *)(_Screen.IC_Testerx[screen_obj->curr_device].config_pin),num_pin);
 800c554:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c558:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c562:	4619      	mov	r1, r3
 800c564:	4a90      	ldr	r2, [pc, #576]	@ (800c7a8 <show_main_page+0x570>)
 800c566:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c56a:	fb01 f303 	mul.w	r3, r1, r3
 800c56e:	4413      	add	r3, r2
 800c570:	335c      	adds	r3, #92	@ 0x5c
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 800c578:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800c57c:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800c580:	f244 0150 	movw	r1, #16464	@ 0x4050
 800c584:	6800      	ldr	r0, [r0, #0]
 800c586:	f001 f9e3 	bl	800d950 <DWIN_SetArray_Icon>
            Screen_GetIcon_Result(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 800c58a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c58e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c598:	4619      	mov	r1, r3
 800c59a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c59e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c5a8:	fb01 f303 	mul.w	r3, r1, r3
 800c5ac:	4413      	add	r3, r2
 800c5ae:	3360      	adds	r3, #96	@ 0x60
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c5b6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c5ba:	4611      	mov	r1, r2
 800c5bc:	6818      	ldr	r0, [r3, #0]
 800c5be:	f7fd ff08 	bl	800a3d2 <Screen_GetIcon_Result>
            uint8_t buffer[500];
            memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_result,num_case*num_pin);
 800c5c2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c5c6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c5d6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c5e0:	fb01 f303 	mul.w	r3, r1, r3
 800c5e4:	4413      	add	r3, r2
 800c5e6:	3360      	adds	r3, #96	@ 0x60
 800c5e8:	6819      	ldr	r1, [r3, #0]
 800c5ea:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800c5ee:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800c5f2:	fb02 f303 	mul.w	r3, r2, r3
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	f107 0308 	add.w	r3, r7, #8
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f004 fb1e 	bl	8010c3e <memcpy>
            DWIN_SetArray_Icon(screen_obj,VP_ICON_RESULT,&(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[case_show * num_pin]),num_pin);
 800c602:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c606:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c610:	4619      	mov	r1, r3
 800c612:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c616:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c620:	fb01 f303 	mul.w	r3, r1, r3
 800c624:	4413      	add	r3, r2
 800c626:	3364      	adds	r3, #100	@ 0x64
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f897 223a 	ldrb.w	r2, [r7, #570]	@ 0x23a
 800c62e:	f897 123d 	ldrb.w	r1, [r7, #573]	@ 0x23d
 800c632:	fb01 f202 	mul.w	r2, r1, r2
 800c636:	441a      	add	r2, r3
 800c638:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 800c63c:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800c640:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800c644:	f244 1150 	movw	r1, #16720	@ 0x4150
 800c648:	6800      	ldr	r0, [r0, #0]
 800c64a:	f001 f981 	bl	800d950 <DWIN_SetArray_Icon>

            snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",case_show + 1,num_case);
 800c64e:	f897 323a 	ldrb.w	r3, [r7, #570]	@ 0x23a
 800c652:	1c5a      	adds	r2, r3, #1
 800c654:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800c658:	f507 7007 	add.w	r0, r7, #540	@ 0x21c
 800c65c:	9300      	str	r3, [sp, #0]
 800c65e:	4613      	mov	r3, r2
 800c660:	4a52      	ldr	r2, [pc, #328]	@ (800c7ac <show_main_page+0x574>)
 800c662:	211e      	movs	r1, #30
 800c664:	f004 f842 	bl	80106ec <sniprintf>
            DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 800c668:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7f3 fe0f 	bl	8000290 <strlen>
 800c672:	4603      	mov	r3, r0
 800c674:	b29b      	uxth	r3, r3
 800c676:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 800c67a:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800c67e:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800c682:	f249 3180 	movw	r1, #37760	@ 0x9380
 800c686:	6800      	ldr	r0, [r0, #0]
 800c688:	f001 f883 	bl	800d792 <DWIN_SetText>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case] == '0') {
 800c68c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c690:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c69a:	4619      	mov	r1, r3
 800c69c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c6a0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c6aa:	fb01 f303 	mul.w	r3, r1, r3
 800c6ae:	4413      	add	r3, r2
 800c6b0:	3370      	adds	r3, #112	@ 0x70
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800c6b8:	f5a2 720f 	sub.w	r2, r2, #572	@ 0x23c
 800c6bc:	6812      	ldr	r2, [r2, #0]
 800c6be:	f892 24e9 	ldrb.w	r2, [r2, #1257]	@ 0x4e9
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800c6c8:	f5a2 720f 	sub.w	r2, r2, #572	@ 0x23c
 800c6cc:	6811      	ldr	r1, [r2, #0]
 800c6ce:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800c6d2:	fb00 f202 	mul.w	r2, r0, r2
 800c6d6:	440a      	add	r2, r1
 800c6d8:	3248      	adds	r2, #72	@ 0x48
 800c6da:	7812      	ldrb	r2, [r2, #0]
 800c6dc:	4413      	add	r3, r2
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	2b30      	cmp	r3, #48	@ 0x30
 800c6e2:	d10b      	bne.n	800c6fc <show_main_page+0x4c4>
                DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0xF800);
 800c6e4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c6e8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c6ec:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800c6f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c6f4:	6818      	ldr	r0, [r3, #0]
 800c6f6:	f001 f8cd 	bl	800d894 <DWIN_SetColorText>
 800c6fa:	e00a      	b.n	800c712 <show_main_page+0x4da>
            } else {
                DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0x01ED);
 800c6fc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c700:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c704:	f240 12ed 	movw	r2, #493	@ 0x1ed
 800c708:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c70c:	6818      	ldr	r0, [r3, #0]
 800c70e:	f001 f8c1 	bl	800d894 <DWIN_SetColorText>
            }
            /* change page if home page */
            if (screen_obj->Ishome) {
 800c712:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c716:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 817a 	beq.w	800ca1a <show_main_page+0x7e2>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800c726:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c72a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c734:	4619      	mov	r1, r3
 800c736:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c73a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c744:	fb01 f303 	mul.w	r3, r1, r3
 800c748:	4413      	add	r3, r2
 800c74a:	334c      	adds	r3, #76	@ 0x4c
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c754:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c758:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c75c:	6818      	ldr	r0, [r3, #0]
 800c75e:	f001 f8ca 	bl	800d8f6 <DWIN_SetVariable_Icon>
                if (screen_obj->Program_Testx[index_program].num_pin == 14) {
 800c762:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800c766:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c76a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c76e:	6819      	ldr	r1, [r3, #0]
 800c770:	4613      	mov	r3, r2
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	4413      	add	r3, r2
 800c776:	011b      	lsls	r3, r3, #4
 800c778:	440b      	add	r3, r1
 800c77a:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	2b0e      	cmp	r3, #14
 800c782:	d108      	bne.n	800c796 <show_main_page+0x55e>
                    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL_14PIN);
 800c784:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c788:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c78c:	2168      	movs	r1, #104	@ 0x68
 800c78e:	6818      	ldr	r0, [r3, #0]
 800c790:	f000 ffd8 	bl	800d744 <DWIN_SetPage>
                } else {
                    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL);
                }
            }
        } break;
 800c794:	e141      	b.n	800ca1a <show_main_page+0x7e2>
                    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL);
 800c796:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c79a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c79e:	2166      	movs	r1, #102	@ 0x66
 800c7a0:	6818      	ldr	r0, [r3, #0]
 800c7a2:	f000 ffcf 	bl	800d744 <DWIN_SetPage>
        } break;
 800c7a6:	e138      	b.n	800ca1a <show_main_page+0x7e2>
 800c7a8:	20000cf0 	.word	0x20000cf0
 800c7ac:	08013af0 	.word	0x08013af0
        case DWINPAGE_MAIN_PULSE: {
            /* show data */
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case = 0;
 800c7b0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c7b4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c7be:	4619      	mov	r1, r3
 800c7c0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c7c4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c7ce:	fb01 f303 	mul.w	r3, r1, r3
 800c7d2:	4413      	add	r3, r2
 800c7d4:	3348      	adds	r3, #72	@ 0x48
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	701a      	strb	r2, [r3, #0]
            uint8_t case_show = screen_obj->IC_Testerx[screen_obj->curr_device].curr_case;
 800c7da:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c7de:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c7ee:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c7f8:	fb01 f303 	mul.w	r3, r1, r3
 800c7fc:	4413      	add	r3, r2
 800c7fe:	3348      	adds	r3, #72	@ 0x48
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
            char ShowCase_String[30];
            snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",case_show + 1,2);
 800c806:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 800c80a:	3301      	adds	r3, #1
 800c80c:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 800c810:	2202      	movs	r2, #2
 800c812:	9200      	str	r2, [sp, #0]
 800c814:	4a85      	ldr	r2, [pc, #532]	@ (800ca2c <show_main_page+0x7f4>)
 800c816:	211e      	movs	r1, #30
 800c818:	f003 ff68 	bl	80106ec <sniprintf>

            screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = malloc(num_case * num_pin);
 800c81c:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800c820:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800c824:	fb02 f303 	mul.w	r3, r2, r3
 800c828:	461a      	mov	r2, r3
 800c82a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c82e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c838:	461c      	mov	r4, r3
 800c83a:	4610      	mov	r0, r2
 800c83c:	f002 f866 	bl	800e90c <malloc>
 800c840:	4603      	mov	r3, r0
 800c842:	4619      	mov	r1, r3
 800c844:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c848:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c852:	fb04 f303 	mul.w	r3, r4, r3
 800c856:	4413      	add	r3, r2
 800c858:	3374      	adds	r3, #116	@ 0x74
 800c85a:	6019      	str	r1, [r3, #0]
            transposeArray(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock,screen_obj->IC_Testerx[screen_obj->curr_device].data_result,num_pin,num_case);
 800c85c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c860:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c86a:	4619      	mov	r1, r3
 800c86c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c870:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c87a:	fb01 f303 	mul.w	r3, r1, r3
 800c87e:	4413      	add	r3, r2
 800c880:	3374      	adds	r3, #116	@ 0x74
 800c882:	6818      	ldr	r0, [r3, #0]
 800c884:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c888:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c892:	4619      	mov	r1, r3
 800c894:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c898:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c8a2:	fb01 f303 	mul.w	r3, r1, r3
 800c8a6:	4413      	add	r3, r2
 800c8a8:	3360      	adds	r3, #96	@ 0x60
 800c8aa:	6819      	ldr	r1, [r3, #0]
 800c8ac:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800c8b0:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800c8b4:	f000 fdf6 	bl	800d4a4 <transposeArray>
            uint8_t buffer[500];
            memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_clock,num_case * num_pin);
 800c8b8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c8bc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c8cc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c8d6:	fb01 f303 	mul.w	r3, r1, r3
 800c8da:	4413      	add	r3, r2
 800c8dc:	3374      	adds	r3, #116	@ 0x74
 800c8de:	6819      	ldr	r1, [r3, #0]
 800c8e0:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800c8e4:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800c8e8:	fb02 f303 	mul.w	r3, r2, r3
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	f107 0308 	add.w	r3, r7, #8
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f004 f9a3 	bl	8010c3e <memcpy>
            for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 800c8fe:	e036      	b.n	800c96e <show_main_page+0x736>
                screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[i] = screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[i] - '0';
 800c900:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c904:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c90e:	4619      	mov	r1, r3
 800c910:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c914:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c91e:	fb01 f303 	mul.w	r3, r1, r3
 800c922:	4413      	add	r3, r2
 800c924:	3374      	adds	r3, #116	@ 0x74
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800c92c:	4413      	add	r3, r2
 800c92e:	781a      	ldrb	r2, [r3, #0]
 800c930:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c934:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c93e:	4618      	mov	r0, r3
 800c940:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c944:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c948:	6819      	ldr	r1, [r3, #0]
 800c94a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c94e:	fb00 f303 	mul.w	r3, r0, r3
 800c952:	440b      	add	r3, r1
 800c954:	3374      	adds	r3, #116	@ 0x74
 800c956:	6819      	ldr	r1, [r3, #0]
 800c958:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800c95c:	440b      	add	r3, r1
 800c95e:	3a30      	subs	r2, #48	@ 0x30
 800c960:	b2d2      	uxtb	r2, r2
 800c962:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800c964:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800c968:	3301      	adds	r3, #1
 800c96a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 800c96e:	f897 223f 	ldrb.w	r2, [r7, #575]	@ 0x23f
 800c972:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800c976:	f897 123d 	ldrb.w	r1, [r7, #573]	@ 0x23d
 800c97a:	fb01 f303 	mul.w	r3, r1, r3
 800c97e:	429a      	cmp	r2, r3
 800c980:	dbbe      	blt.n	800c900 <show_main_page+0x6c8>
            }

            /* show fist case in pusle page */
            show_pulse(screen_obj,0);
 800c982:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c986:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c98a:	2100      	movs	r1, #0
 800c98c:	6818      	ldr	r0, [r3, #0]
 800c98e:	f7ff f877 	bl	800ba80 <show_pulse>
            
            // /* change page if home page */
            if (screen_obj->Ishome) {
 800c992:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c996:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d03c      	beq.n	800ca1e <show_main_page+0x7e6>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800c9a4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c9a8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c9b8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c9c2:	fb01 f303 	mul.w	r3, r1, r3
 800c9c6:	4413      	add	r3, r2
 800c9c8:	334c      	adds	r3, #76	@ 0x4c
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c9d2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c9d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c9da:	6818      	ldr	r0, [r3, #0]
 800c9dc:	f000 ff8b 	bl	800d8f6 <DWIN_SetVariable_Icon>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_PULSE);
 800c9e0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c9e4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c9e8:	2167      	movs	r1, #103	@ 0x67
 800c9ea:	6818      	ldr	r0, [r3, #0]
 800c9ec:	f000 feaa 	bl	800d744 <DWIN_SetPage>
                DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 800c9f0:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7f3 fc4b 	bl	8000290 <strlen>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	f507 72fe 	add.w	r2, r7, #508	@ 0x1fc
 800ca02:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800ca06:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800ca0a:	f249 3180 	movw	r1, #37760	@ 0x9380
 800ca0e:	6800      	ldr	r0, [r0, #0]
 800ca10:	f000 febf 	bl	800d792 <DWIN_SetText>
            }
            // if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
            //     free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
            //     screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = NULL;
            // }
        } break;
 800ca14:	e003      	b.n	800ca1e <show_main_page+0x7e6>
        } break;
 800ca16:	bf00      	nop
 800ca18:	e002      	b.n	800ca20 <show_main_page+0x7e8>
        } break;
 800ca1a:	bf00      	nop
 800ca1c:	e000      	b.n	800ca20 <show_main_page+0x7e8>
        } break;
 800ca1e:	bf00      	nop
    }
}
 800ca20:	bf00      	nop
 800ca22:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd90      	pop	{r4, r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	08013af0 	.word	0x08013af0

0800ca30 <get_input_keyboard>:
    DWIN_SetText((Dwin_t *)screen_obj,VP_Warning,buffer,strlen(buffer));
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_WARNING);

}

void get_input_keyboard(Screen_t *const screen_obj,uint16_t VP_input) {
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	460b      	mov	r3, r1
 800ca3a:	807b      	strh	r3, [r7, #2]
    switch (VP_input) {
 800ca3c:	887b      	ldrh	r3, [r7, #2]
 800ca3e:	f249 0240 	movw	r2, #36928	@ 0x9040
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d05d      	beq.n	800cb02 <get_input_keyboard+0xd2>
 800ca46:	f249 0240 	movw	r2, #36928	@ 0x9040
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	dc69      	bgt.n	800cb22 <get_input_keyboard+0xf2>
 800ca4e:	f249 0230 	movw	r2, #36912	@ 0x9030
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d045      	beq.n	800cae2 <get_input_keyboard+0xb2>
 800ca56:	f249 0230 	movw	r2, #36912	@ 0x9030
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	dc61      	bgt.n	800cb22 <get_input_keyboard+0xf2>
 800ca5e:	f249 0220 	movw	r2, #36896	@ 0x9020
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d02d      	beq.n	800cac2 <get_input_keyboard+0x92>
 800ca66:	f249 0220 	movw	r2, #36896	@ 0x9020
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	dc59      	bgt.n	800cb22 <get_input_keyboard+0xf2>
 800ca6e:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 800ca72:	d004      	beq.n	800ca7e <get_input_keyboard+0x4e>
 800ca74:	f249 0210 	movw	r2, #36880	@ 0x9010
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d012      	beq.n	800caa2 <get_input_keyboard+0x72>
        case VP_Year   : {
            memset(screen_obj->Time_setting.Year,0,3);
            memcpy(screen_obj->Time_setting.Year,screen_obj->Screen_keyboard.String,2);
        }
    }
}   
 800ca7c:	e051      	b.n	800cb22 <get_input_keyboard+0xf2>
            memset(screen_obj->Time_setting.Hour,0,3);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f203 43dd 	addw	r3, r3, #1245	@ 0x4dd
 800ca84:	2203      	movs	r2, #3
 800ca86:	2100      	movs	r1, #0
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f003 ff9d 	bl	80109c8 <memset>
            memcpy(screen_obj->Time_setting.Hour,screen_obj->Screen_keyboard.String,2);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f203 43dd 	addw	r3, r3, #1245	@ 0x4dd
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	320e      	adds	r2, #14
 800ca98:	8812      	ldrh	r2, [r2, #0]
 800ca9a:	b292      	uxth	r2, r2
 800ca9c:	801a      	strh	r2, [r3, #0]
        } break;
 800ca9e:	bf00      	nop
}   
 800caa0:	e03f      	b.n	800cb22 <get_input_keyboard+0xf2>
            memset(screen_obj->Time_setting.Minute,0,3);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f503 639c 	add.w	r3, r3, #1248	@ 0x4e0
 800caa8:	2203      	movs	r2, #3
 800caaa:	2100      	movs	r1, #0
 800caac:	4618      	mov	r0, r3
 800caae:	f003 ff8b 	bl	80109c8 <memset>
            memcpy(screen_obj->Time_setting.Minute,screen_obj->Screen_keyboard.String,2);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f503 639c 	add.w	r3, r3, #1248	@ 0x4e0
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	320e      	adds	r2, #14
 800cabc:	8812      	ldrh	r2, [r2, #0]
 800cabe:	b292      	uxth	r2, r2
 800cac0:	801a      	strh	r2, [r3, #0]
            memset(screen_obj->Time_setting.Day,0,3);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 800cac8:	2203      	movs	r2, #3
 800caca:	2100      	movs	r1, #0
 800cacc:	4618      	mov	r0, r3
 800cace:	f003 ff7b 	bl	80109c8 <memset>
            memcpy(screen_obj->Time_setting.Day,screen_obj->Screen_keyboard.String,2);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	320e      	adds	r2, #14
 800cadc:	8812      	ldrh	r2, [r2, #0]
 800cade:	b292      	uxth	r2, r2
 800cae0:	801a      	strh	r2, [r3, #0]
            memset(screen_obj->Time_setting.Month,0,3);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f203 43d7 	addw	r3, r3, #1239	@ 0x4d7
 800cae8:	2203      	movs	r2, #3
 800caea:	2100      	movs	r1, #0
 800caec:	4618      	mov	r0, r3
 800caee:	f003 ff6b 	bl	80109c8 <memset>
            memcpy(screen_obj->Time_setting.Month,screen_obj->Screen_keyboard.String,2);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f203 43d7 	addw	r3, r3, #1239	@ 0x4d7
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	320e      	adds	r2, #14
 800cafc:	8812      	ldrh	r2, [r2, #0]
 800cafe:	b292      	uxth	r2, r2
 800cb00:	801a      	strh	r2, [r3, #0]
            memset(screen_obj->Time_setting.Year,0,3);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f203 43da 	addw	r3, r3, #1242	@ 0x4da
 800cb08:	2203      	movs	r2, #3
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f003 ff5b 	bl	80109c8 <memset>
            memcpy(screen_obj->Time_setting.Year,screen_obj->Screen_keyboard.String,2);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f203 43da 	addw	r3, r3, #1242	@ 0x4da
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	320e      	adds	r2, #14
 800cb1c:	8812      	ldrh	r2, [r2, #0]
 800cb1e:	b292      	uxth	r2, r2
 800cb20:	801a      	strh	r2, [r3, #0]
}   
 800cb22:	bf00      	nop
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
	...

0800cb2c <updata_data_program_from_app>:

void updata_data_program_from_app(Screen_t *const screen_obj,char *data,uint16_t len) {
 800cb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb30:	b098      	sub	sp, #96	@ 0x60
 800cb32:	af02      	add	r7, sp, #8
 800cb34:	60f8      	str	r0, [r7, #12]
 800cb36:	60b9      	str	r1, [r7, #8]
 800cb38:	4613      	mov	r3, r2
 800cb3a:	80fb      	strh	r3, [r7, #6]
 800cb3c:	466b      	mov	r3, sp
 800cb3e:	469a      	mov	sl, r3
    /* update value */
    char temp_buf[len];
 800cb40:	88f9      	ldrh	r1, [r7, #6]
 800cb42:	460b      	mov	r3, r1
 800cb44:	3b01      	subs	r3, #1
 800cb46:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb48:	b28b      	uxth	r3, r1
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	4698      	mov	r8, r3
 800cb4e:	4691      	mov	r9, r2
 800cb50:	f04f 0200 	mov.w	r2, #0
 800cb54:	f04f 0300 	mov.w	r3, #0
 800cb58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cb60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cb64:	b28b      	uxth	r3, r1
 800cb66:	2200      	movs	r2, #0
 800cb68:	461c      	mov	r4, r3
 800cb6a:	4615      	mov	r5, r2
 800cb6c:	f04f 0200 	mov.w	r2, #0
 800cb70:	f04f 0300 	mov.w	r3, #0
 800cb74:	00eb      	lsls	r3, r5, #3
 800cb76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cb7a:	00e2      	lsls	r2, r4, #3
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	3307      	adds	r3, #7
 800cb80:	08db      	lsrs	r3, r3, #3
 800cb82:	00db      	lsls	r3, r3, #3
 800cb84:	ebad 0d03 	sub.w	sp, sp, r3
 800cb88:	ab02      	add	r3, sp, #8
 800cb8a:	3300      	adds	r3, #0
 800cb8c:	653b      	str	r3, [r7, #80]	@ 0x50
    memset(temp_buf,0,len);
 800cb8e:	88fb      	ldrh	r3, [r7, #6]
 800cb90:	461a      	mov	r2, r3
 800cb92:	2100      	movs	r1, #0
 800cb94:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cb96:	f003 ff17 	bl	80109c8 <memset>
    memcpy(temp_buf,data,len);
 800cb9a:	88fb      	ldrh	r3, [r7, #6]
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	68b9      	ldr	r1, [r7, #8]
 800cba0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cba2:	f004 f84c 	bl	8010c3e <memcpy>
    uint8_t index_program;

    char *pdata = strtok(temp_buf,",");
 800cba6:	498e      	ldr	r1, [pc, #568]	@ (800cde0 <updata_data_program_from_app+0x2b4>)
 800cba8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cbaa:	f003 ff5d 	bl	8010a68 <strtok>
 800cbae:	64f8      	str	r0, [r7, #76]	@ 0x4c
    index_program = atoi(pdata) - 1;
 800cbb0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800cbb2:	f001 fea6 	bl	800e902 <atoi>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    if (screen_obj->Program_Testx[index_program].Name_Program != NULL) {
 800cbc0:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cbc4:	68f9      	ldr	r1, [r7, #12]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	005b      	lsls	r3, r3, #1
 800cbca:	4413      	add	r3, r2
 800cbcc:	011b      	lsls	r3, r3, #4
 800cbce:	440b      	add	r3, r1
 800cbd0:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d019      	beq.n	800cc0e <updata_data_program_from_app+0xe2>
        free(screen_obj->Program_Testx[index_program].Name_Program);
 800cbda:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cbde:	68f9      	ldr	r1, [r7, #12]
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	005b      	lsls	r3, r3, #1
 800cbe4:	4413      	add	r3, r2
 800cbe6:	011b      	lsls	r3, r3, #4
 800cbe8:	440b      	add	r3, r1
 800cbea:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f001 fe93 	bl	800e91c <free>
        screen_obj->Program_Testx[index_program].Name_Program = NULL;
 800cbf6:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cbfa:	68f9      	ldr	r1, [r7, #12]
 800cbfc:	4613      	mov	r3, r2
 800cbfe:	005b      	lsls	r3, r3, #1
 800cc00:	4413      	add	r3, r2
 800cc02:	011b      	lsls	r3, r3, #4
 800cc04:	440b      	add	r3, r1
 800cc06:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	601a      	str	r2, [r3, #0]
    }
    pdata = strtok(NULL,",");
 800cc0e:	4974      	ldr	r1, [pc, #464]	@ (800cde0 <updata_data_program_from_app+0x2b4>)
 800cc10:	2000      	movs	r0, #0
 800cc12:	f003 ff29 	bl	8010a68 <strtok>
 800cc16:	64f8      	str	r0, [r7, #76]	@ 0x4c
    screen_obj->Program_Testx[index_program].Name_Program = (char *)malloc(strlen(pdata) + 1);
 800cc18:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800cc1a:	f7f3 fb39 	bl	8000290 <strlen>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	3301      	adds	r3, #1
 800cc22:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 800cc26:	4618      	mov	r0, r3
 800cc28:	f001 fe70 	bl	800e90c <malloc>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	4619      	mov	r1, r3
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	4623      	mov	r3, r4
 800cc34:	005b      	lsls	r3, r3, #1
 800cc36:	4423      	add	r3, r4
 800cc38:	011b      	lsls	r3, r3, #4
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800cc40:	6019      	str	r1, [r3, #0]
    strcpy(screen_obj->Program_Testx[index_program].Name_Program, pdata);
 800cc42:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cc46:	68f9      	ldr	r1, [r7, #12]
 800cc48:	4613      	mov	r3, r2
 800cc4a:	005b      	lsls	r3, r3, #1
 800cc4c:	4413      	add	r3, r2
 800cc4e:	011b      	lsls	r3, r3, #4
 800cc50:	440b      	add	r3, r1
 800cc52:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f003 ffe7 	bl	8010c2e <strcpy>

    if (screen_obj->Program_Testx[index_program].Name_IC != NULL) {
 800cc60:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cc64:	68f9      	ldr	r1, [r7, #12]
 800cc66:	4613      	mov	r3, r2
 800cc68:	005b      	lsls	r3, r3, #1
 800cc6a:	4413      	add	r3, r2
 800cc6c:	011b      	lsls	r3, r3, #4
 800cc6e:	440b      	add	r3, r1
 800cc70:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d019      	beq.n	800ccae <updata_data_program_from_app+0x182>
        free(screen_obj->Program_Testx[index_program].Name_IC);
 800cc7a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cc7e:	68f9      	ldr	r1, [r7, #12]
 800cc80:	4613      	mov	r3, r2
 800cc82:	005b      	lsls	r3, r3, #1
 800cc84:	4413      	add	r3, r2
 800cc86:	011b      	lsls	r3, r3, #4
 800cc88:	440b      	add	r3, r1
 800cc8a:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4618      	mov	r0, r3
 800cc92:	f001 fe43 	bl	800e91c <free>
        screen_obj->Program_Testx[index_program].Name_IC = NULL;
 800cc96:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cc9a:	68f9      	ldr	r1, [r7, #12]
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	005b      	lsls	r3, r3, #1
 800cca0:	4413      	add	r3, r2
 800cca2:	011b      	lsls	r3, r3, #4
 800cca4:	440b      	add	r3, r1
 800cca6:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800ccaa:	2200      	movs	r2, #0
 800ccac:	601a      	str	r2, [r3, #0]
    }
    pdata = strtok(NULL,",");
 800ccae:	494c      	ldr	r1, [pc, #304]	@ (800cde0 <updata_data_program_from_app+0x2b4>)
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	f003 fed9 	bl	8010a68 <strtok>
 800ccb6:	64f8      	str	r0, [r7, #76]	@ 0x4c
    screen_obj->Program_Testx[index_program].Name_IC = (char *)malloc(strlen(pdata) + 1);
 800ccb8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ccba:	f7f3 fae9 	bl	8000290 <strlen>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f001 fe20 	bl	800e90c <malloc>
 800cccc:	4603      	mov	r3, r0
 800ccce:	4619      	mov	r1, r3
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	4623      	mov	r3, r4
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	4423      	add	r3, r4
 800ccd8:	011b      	lsls	r3, r3, #4
 800ccda:	4413      	add	r3, r2
 800ccdc:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800cce0:	6019      	str	r1, [r3, #0]
    strcpy(screen_obj->Program_Testx[index_program].Name_IC, pdata);
 800cce2:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cce6:	68f9      	ldr	r1, [r7, #12]
 800cce8:	4613      	mov	r3, r2
 800ccea:	005b      	lsls	r3, r3, #1
 800ccec:	4413      	add	r3, r2
 800ccee:	011b      	lsls	r3, r3, #4
 800ccf0:	440b      	add	r3, r1
 800ccf2:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f003 ff97 	bl	8010c2e <strcpy>

    if (screen_obj->Program_Testx[index_program].num_IC != NULL) {
 800cd00:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cd04:	68f9      	ldr	r1, [r7, #12]
 800cd06:	4613      	mov	r3, r2
 800cd08:	005b      	lsls	r3, r3, #1
 800cd0a:	4413      	add	r3, r2
 800cd0c:	011b      	lsls	r3, r3, #4
 800cd0e:	440b      	add	r3, r1
 800cd10:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d019      	beq.n	800cd4e <updata_data_program_from_app+0x222>
        free(screen_obj->Program_Testx[index_program].num_IC);
 800cd1a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cd1e:	68f9      	ldr	r1, [r7, #12]
 800cd20:	4613      	mov	r3, r2
 800cd22:	005b      	lsls	r3, r3, #1
 800cd24:	4413      	add	r3, r2
 800cd26:	011b      	lsls	r3, r3, #4
 800cd28:	440b      	add	r3, r1
 800cd2a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f001 fdf3 	bl	800e91c <free>
        screen_obj->Program_Testx[index_program].num_IC = NULL;
 800cd36:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cd3a:	68f9      	ldr	r1, [r7, #12]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	005b      	lsls	r3, r3, #1
 800cd40:	4413      	add	r3, r2
 800cd42:	011b      	lsls	r3, r3, #4
 800cd44:	440b      	add	r3, r1
 800cd46:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	601a      	str	r2, [r3, #0]
    }
    pdata = strtok(NULL,",");
 800cd4e:	4924      	ldr	r1, [pc, #144]	@ (800cde0 <updata_data_program_from_app+0x2b4>)
 800cd50:	2000      	movs	r0, #0
 800cd52:	f003 fe89 	bl	8010a68 <strtok>
 800cd56:	64f8      	str	r0, [r7, #76]	@ 0x4c
    screen_obj->Program_Testx[index_program].num_IC = (char *)malloc(strlen(pdata) + 1);
 800cd58:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800cd5a:	f7f3 fa99 	bl	8000290 <strlen>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	3301      	adds	r3, #1
 800cd62:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 800cd66:	4618      	mov	r0, r3
 800cd68:	f001 fdd0 	bl	800e90c <malloc>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	4619      	mov	r1, r3
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	4623      	mov	r3, r4
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	4423      	add	r3, r4
 800cd78:	011b      	lsls	r3, r3, #4
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cd80:	6019      	str	r1, [r3, #0]
    strcpy(screen_obj->Program_Testx[index_program].num_IC, pdata);
 800cd82:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cd86:	68f9      	ldr	r1, [r7, #12]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	005b      	lsls	r3, r3, #1
 800cd8c:	4413      	add	r3, r2
 800cd8e:	011b      	lsls	r3, r3, #4
 800cd90:	440b      	add	r3, r1
 800cd92:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f003 ff47 	bl	8010c2e <strcpy>

    /* get data for testing ic */
    if (get_data_testing_ic(screen_obj->Program_Testx[index_program].Name_IC,&screen_obj->Program_Testx[index_program]) == false) {
 800cda0:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cda4:	68f9      	ldr	r1, [r7, #12]
 800cda6:	4613      	mov	r3, r2
 800cda8:	005b      	lsls	r3, r3, #1
 800cdaa:	4413      	add	r3, r2
 800cdac:	011b      	lsls	r3, r3, #4
 800cdae:	440b      	add	r3, r1
 800cdb0:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800cdb4:	6818      	ldr	r0, [r3, #0]
 800cdb6:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cdba:	4613      	mov	r3, r2
 800cdbc:	005b      	lsls	r3, r3, #1
 800cdbe:	4413      	add	r3, r2
 800cdc0:	011b      	lsls	r3, r3, #4
 800cdc2:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	4413      	add	r3, r2
 800cdca:	4619      	mov	r1, r3
 800cdcc:	f7fd fe8c 	bl	800aae8 <get_data_testing_ic>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	f083 0301 	eor.w	r3, r3, #1
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d003      	beq.n	800cde4 <updata_data_program_from_app+0x2b8>
        return;
 800cddc:	46d5      	mov	sp, sl
 800cdde:	e164      	b.n	800d0aa <updata_data_program_from_app+0x57e>
 800cde0:	08013c60 	.word	0x08013c60
    }

    /* store data to eeprom */
    char string_data[TOTAL_ONE_PROGRAM_TEST_LEN] = {0};
 800cde4:	f107 0314 	add.w	r3, r7, #20
 800cde8:	222a      	movs	r2, #42	@ 0x2a
 800cdea:	2100      	movs	r1, #0
 800cdec:	4618      	mov	r0, r3
 800cdee:	f003 fdeb 	bl	80109c8 <memset>
    data_eeprom_t *data_write = malloc(sizeof(data_eeprom_t));
 800cdf2:	200c      	movs	r0, #12
 800cdf4:	f001 fd8a 	bl	800e90c <malloc>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	613b      	str	r3, [r7, #16]
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[index_program].Name_Program
 800cdfc:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800ce00:	68f9      	ldr	r1, [r7, #12]
 800ce02:	4613      	mov	r3, r2
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	4413      	add	r3, r2
 800ce08:	011b      	lsls	r3, r3, #4
 800ce0a:	440b      	add	r3, r1
 800ce0c:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800ce10:	681c      	ldr	r4, [r3, #0]
 800ce12:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800ce16:	68f9      	ldr	r1, [r7, #12]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	005b      	lsls	r3, r3, #1
 800ce1c:	4413      	add	r3, r2
 800ce1e:	011b      	lsls	r3, r3, #4
 800ce20:	440b      	add	r3, r1
 800ce22:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800ce26:	6819      	ldr	r1, [r3, #0]
 800ce28:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	4613      	mov	r3, r2
 800ce30:	005b      	lsls	r3, r3, #1
 800ce32:	4413      	add	r3, r2
 800ce34:	011b      	lsls	r3, r3, #4
 800ce36:	4403      	add	r3, r0
 800ce38:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f107 0014 	add.w	r0, r7, #20
 800ce42:	9301      	str	r3, [sp, #4]
 800ce44:	9100      	str	r1, [sp, #0]
 800ce46:	4623      	mov	r3, r4
 800ce48:	4a9a      	ldr	r2, [pc, #616]	@ (800d0b4 <updata_data_program_from_app+0x588>)
 800ce4a:	212a      	movs	r1, #42	@ 0x2a
 800ce4c:	f003 fc4e 	bl	80106ec <sniprintf>
    ,screen_obj->Program_Testx[index_program].Name_IC
    ,screen_obj->Program_Testx[index_program].num_IC);
    data_write->data = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 800ce50:	693c      	ldr	r4, [r7, #16]
 800ce52:	202a      	movs	r0, #42	@ 0x2a
 800ce54:	f001 fd5a 	bl	800e90c <malloc>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	6063      	str	r3, [r4, #4]
    memcpy(data_write->data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	f107 0414 	add.w	r4, r7, #20
 800ce64:	469c      	mov	ip, r3
 800ce66:	f104 0e20 	add.w	lr, r4, #32
 800ce6a:	4665      	mov	r5, ip
 800ce6c:	4626      	mov	r6, r4
 800ce6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ce70:	6028      	str	r0, [r5, #0]
 800ce72:	6069      	str	r1, [r5, #4]
 800ce74:	60aa      	str	r2, [r5, #8]
 800ce76:	60eb      	str	r3, [r5, #12]
 800ce78:	3410      	adds	r4, #16
 800ce7a:	f10c 0c10 	add.w	ip, ip, #16
 800ce7e:	4574      	cmp	r4, lr
 800ce80:	d1f3      	bne.n	800ce6a <updata_data_program_from_app+0x33e>
 800ce82:	4662      	mov	r2, ip
 800ce84:	4623      	mov	r3, r4
 800ce86:	cb03      	ldmia	r3!, {r0, r1}
 800ce88:	6010      	str	r0, [r2, #0]
 800ce8a:	6051      	str	r1, [r2, #4]
 800ce8c:	881b      	ldrh	r3, [r3, #0]
 800ce8e:	8113      	strh	r3, [r2, #8]
    data_write->data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	222a      	movs	r2, #42	@ 0x2a
 800ce94:	811a      	strh	r2, [r3, #8]
    data_write->mem_addr = START_ADDR_PROGRAM_TEST_X(index_program);
 800ce96:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	0052      	lsls	r2, r2, #1
 800cea0:	4413      	add	r3, r2
 800cea2:	461a      	mov	r2, r3
 800cea4:	00d2      	lsls	r2, r2, #3
 800cea6:	1ad3      	subs	r3, r2, r3
 800cea8:	005b      	lsls	r3, r3, #1
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	3243      	adds	r2, #67	@ 0x43
 800ceb0:	b292      	uxth	r2, r2
 800ceb2:	801a      	strh	r2, [r3, #0]
    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));
 800ceb4:	4b80      	ldr	r3, [pc, #512]	@ (800d0b8 <updata_data_program_from_app+0x58c>)
 800ceb6:	6818      	ldr	r0, [r3, #0]
 800ceb8:	f107 0210 	add.w	r2, r7, #16
 800cebc:	230c      	movs	r3, #12
 800cebe:	2105      	movs	r1, #5
 800cec0:	f001 fafc 	bl	800e4bc <OS_task_post_event>

    // Show data in screen
    if (screen_obj->Ishome) {
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d042      	beq.n	800cf54 <updata_data_program_from_app+0x428>
        if (index_program == screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index) {
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ced4:	4619      	mov	r1, r3
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800cedc:	fb01 f303 	mul.w	r3, r1, r3
 800cee0:	4413      	add	r3, r2
 800cee2:	334b      	adds	r3, #75	@ 0x4b
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d105      	bne.n	800cefa <updata_data_program_from_app+0x3ce>
            Screen_ShowData_Mainpage(screen_obj,index_program);
 800ceee:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800cef2:	4619      	mov	r1, r3
 800cef4:	68f8      	ldr	r0, [r7, #12]
 800cef6:	f7fd fcb1 	bl	800a85c <Screen_ShowData_Mainpage>
        }
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 800cefa:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	461a      	mov	r2, r3
 800cf02:	0092      	lsls	r2, r2, #2
 800cf04:	4413      	add	r3, r2
 800cf06:	00db      	lsls	r3, r3, #3
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	f5a3 43db 	sub.w	r3, r3, #28032	@ 0x6d80
 800cf0e:	3b58      	subs	r3, #88	@ 0x58
 800cf10:	b29c      	uxth	r4, r3
 800cf12:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cf16:	68f9      	ldr	r1, [r7, #12]
 800cf18:	4613      	mov	r3, r2
 800cf1a:	005b      	lsls	r3, r3, #1
 800cf1c:	4413      	add	r3, r2
 800cf1e:	011b      	lsls	r3, r3, #4
 800cf20:	440b      	add	r3, r1
 800cf22:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800cf26:	681d      	ldr	r5, [r3, #0]
            ,strlen(screen_obj->Program_Testx[index_program].Name_Program));
 800cf28:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cf2c:	68f9      	ldr	r1, [r7, #12]
 800cf2e:	4613      	mov	r3, r2
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	4413      	add	r3, r2
 800cf34:	011b      	lsls	r3, r3, #4
 800cf36:	440b      	add	r3, r1
 800cf38:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7f3 f9a6 	bl	8000290 <strlen>
 800cf44:	4603      	mov	r3, r0
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	462a      	mov	r2, r5
 800cf4a:	4621      	mov	r1, r4
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f000 fc20 	bl	800d792 <DWIN_SetText>
 800cf52:	e0a9      	b.n	800d0a8 <updata_data_program_from_app+0x57c>
    } else {
        uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 800cf54:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cf58:	68f9      	ldr	r1, [r7, #12]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	005b      	lsls	r3, r3, #1
 800cf5e:	4413      	add	r3, r2
 800cf60:	011b      	lsls	r3, r3, #4
 800cf62:	440b      	add	r3, r1
 800cf64:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7f3 f990 	bl	8000290 <strlen>
 800cf70:	4603      	mov	r3, r0
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	3309      	adds	r3, #9
 800cf76:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 800cf7a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cf7e:	68f9      	ldr	r1, [r7, #12]
 800cf80:	4613      	mov	r3, r2
 800cf82:	005b      	lsls	r3, r3, #1
 800cf84:	4413      	add	r3, r2
 800cf86:	011b      	lsls	r3, r3, #4
 800cf88:	440b      	add	r3, r1
 800cf8a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7f3 f97d 	bl	8000290 <strlen>
 800cf96:	4603      	mov	r3, r0
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	330f      	adds	r3, #15
 800cf9c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

        char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800cfa0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f001 fcb0 	bl	800e90c <malloc>
 800cfac:	4603      	mov	r3, r0
 800cfae:	647b      	str	r3, [r7, #68]	@ 0x44
        char *Text_Num_IC = malloc(size_Num_IC + 1);
 800cfb0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f001 fca8 	bl	800e90c <malloc>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	643b      	str	r3, [r7, #64]	@ 0x40

        strcpy(Text_Name_IC,"IC Name: ");
 800cfc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfc2:	493e      	ldr	r1, [pc, #248]	@ (800d0bc <updata_data_program_from_app+0x590>)
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	cb03      	ldmia	r3!, {r0, r1}
 800cfca:	6010      	str	r0, [r2, #0]
 800cfcc:	6051      	str	r1, [r2, #4]
 800cfce:	881b      	ldrh	r3, [r3, #0]
 800cfd0:	8113      	strh	r3, [r2, #8]
        strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 800cfd2:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800cfd6:	68f9      	ldr	r1, [r7, #12]
 800cfd8:	4613      	mov	r3, r2
 800cfda:	005b      	lsls	r3, r3, #1
 800cfdc:	4413      	add	r3, r2
 800cfde:	011b      	lsls	r3, r3, #4
 800cfe0:	440b      	add	r3, r1
 800cfe2:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4619      	mov	r1, r3
 800cfea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800cfec:	f003 fcf4 	bl	80109d8 <strcat>
        strcpy(Text_Num_IC,"Number of ICs: ");
 800cff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cff2:	4a33      	ldr	r2, [pc, #204]	@ (800d0c0 <updata_data_program_from_app+0x594>)
 800cff4:	461c      	mov	r4, r3
 800cff6:	4615      	mov	r5, r2
 800cff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cffa:	6020      	str	r0, [r4, #0]
 800cffc:	6061      	str	r1, [r4, #4]
 800cffe:	60a2      	str	r2, [r4, #8]
 800d000:	60e3      	str	r3, [r4, #12]
        strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);
 800d002:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d006:	68f9      	ldr	r1, [r7, #12]
 800d008:	4613      	mov	r3, r2
 800d00a:	005b      	lsls	r3, r3, #1
 800d00c:	4413      	add	r3, r2
 800d00e:	011b      	lsls	r3, r3, #4
 800d010:	440b      	add	r3, r1
 800d012:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4619      	mov	r1, r3
 800d01a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800d01c:	f003 fcdc 	bl	80109d8 <strcat>

        // Show data in screen
        DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 800d020:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800d024:	b29b      	uxth	r3, r3
 800d026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d028:	f249 5120 	movw	r1, #38176	@ 0x9520
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f000 fbb0 	bl	800d792 <DWIN_SetText>
        DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 800d032:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800d036:	b29b      	uxth	r3, r3
 800d038:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d03a:	f249 5140 	movw	r1, #38208	@ 0x9540
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f000 fba7 	bl	800d792 <DWIN_SetText>
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 800d044:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800d048:	b29b      	uxth	r3, r3
 800d04a:	461a      	mov	r2, r3
 800d04c:	0092      	lsls	r2, r2, #2
 800d04e:	4413      	add	r3, r2
 800d050:	00db      	lsls	r3, r3, #3
 800d052:	b29b      	uxth	r3, r3
 800d054:	f5a3 43db 	sub.w	r3, r3, #28032	@ 0x6d80
 800d058:	3b58      	subs	r3, #88	@ 0x58
 800d05a:	b29c      	uxth	r4, r3
 800d05c:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d060:	68f9      	ldr	r1, [r7, #12]
 800d062:	4613      	mov	r3, r2
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	4413      	add	r3, r2
 800d068:	011b      	lsls	r3, r3, #4
 800d06a:	440b      	add	r3, r1
 800d06c:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800d070:	681d      	ldr	r5, [r3, #0]
            ,strlen(screen_obj->Program_Testx[index_program].Name_Program));
 800d072:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d076:	68f9      	ldr	r1, [r7, #12]
 800d078:	4613      	mov	r3, r2
 800d07a:	005b      	lsls	r3, r3, #1
 800d07c:	4413      	add	r3, r2
 800d07e:	011b      	lsls	r3, r3, #4
 800d080:	440b      	add	r3, r1
 800d082:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4618      	mov	r0, r3
 800d08a:	f7f3 f901 	bl	8000290 <strlen>
 800d08e:	4603      	mov	r3, r0
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 800d090:	b29b      	uxth	r3, r3
 800d092:	462a      	mov	r2, r5
 800d094:	4621      	mov	r1, r4
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f000 fb7b 	bl	800d792 <DWIN_SetText>

        free(Text_Name_IC);
 800d09c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d09e:	f001 fc3d 	bl	800e91c <free>
        free(Text_Num_IC);
 800d0a2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800d0a4:	f001 fc3a 	bl	800e91c <free>
 800d0a8:	46d5      	mov	sp, sl
    }

}
 800d0aa:	3758      	adds	r7, #88	@ 0x58
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b2:	bf00      	nop
 800d0b4:	08013b50 	.word	0x08013b50
 800d0b8:	080140dc 	.word	0x080140dc
 800d0bc:	08013b24 	.word	0x08013b24
 800d0c0:	08013b30 	.word	0x08013b30

0800d0c4 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void);
void I2C2_EV_IRQHandler(void);
void RTC_WKUP_IRQHandler(void);

void I2C1_ER_IRQHandler(void) { 
 800d0c4:	b480      	push	{r7}
 800d0c6:	af00      	add	r7, sp, #0
    // OS_task_activate(1);  
    // HAL_NVIC_ClearPendingIRQ(I2C1_ER_IRQn); // clear NVIC pending bit
}
 800d0c8:	bf00      	nop
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void) {
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	af00      	add	r7, sp, #0
    OS_task_activate(1);  
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	f001 fa8a 	bl	800e5f0 <OS_task_activate>
}
 800d0dc:	bf00      	nop
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void) {
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	af00      	add	r7, sp, #0
    OS_task_activate(2);
 800d0e4:	2002      	movs	r0, #2
 800d0e6:	f001 fa83 	bl	800e5f0 <OS_task_activate>
}
 800d0ea:	bf00      	nop
 800d0ec:	bd80      	pop	{r7, pc}
	...

0800d0f0 <BSP_init>:

/* hardware-specific support code run on a specific hardware platform */
void BSP_init(void) {
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	af00      	add	r7, sp, #0
    /* init event pool */
    dynamic_event_pool_init();
 800d0f4:	f001 fb2e 	bl	800e754 <dynamic_event_pool_init>
    
    /* Set IRQ number for priority used in OS */
    OS_prio_setIRQ(1,RTC_WKUP_IRQn);
 800d0f8:	2103      	movs	r1, #3
 800d0fa:	2001      	movs	r0, #1
 800d0fc:	f001 fafc 	bl	800e6f8 <OS_prio_setIRQ>
    OS_prio_setIRQ(2,I2C2_EV_IRQn);
 800d100:	2121      	movs	r1, #33	@ 0x21
 800d102:	2002      	movs	r0, #2
 800d104:	f001 faf8 	bl	800e6f8 <OS_prio_setIRQ>

    OS_priority_IRQ(RTC_WKUP_IRQn,1);
 800d108:	2101      	movs	r1, #1
 800d10a:	2003      	movs	r0, #3
 800d10c:	f001 fada 	bl	800e6c4 <OS_priority_IRQ>
    OS_priority_IRQ(I2C2_EV_IRQn,2);
 800d110:	2102      	movs	r1, #2
 800d112:	2021      	movs	r0, #33	@ 0x21
 800d114:	f001 fad6 	bl	800e6c4 <OS_priority_IRQ>

    OS_Test_setIRQ(AO_BlinkyTest,RTC_WKUP_IRQn);
 800d118:	4b09      	ldr	r3, [pc, #36]	@ (800d140 <BSP_init+0x50>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2103      	movs	r1, #3
 800d11e:	4618      	mov	r0, r3
 800d120:	f001 fb08 	bl	800e734 <OS_Test_setIRQ>
//    OS_Test_setIRQ(AO_taskPost,RTC_IRQn);
    OS_Test_setIRQ(AO_task_eeprom,RTC_WKUP_IRQn);
 800d124:	4b07      	ldr	r3, [pc, #28]	@ (800d144 <BSP_init+0x54>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2103      	movs	r1, #3
 800d12a:	4618      	mov	r0, r3
 800d12c:	f001 fb02 	bl	800e734 <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_task_uart_esp32,I2C2_EV_IRQn);
 800d130:	4b05      	ldr	r3, [pc, #20]	@ (800d148 <BSP_init+0x58>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2121      	movs	r1, #33	@ 0x21
 800d136:	4618      	mov	r0, r3
 800d138:	f001 fafc 	bl	800e734 <OS_Test_setIRQ>
}
 800d13c:	bf00      	nop
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	080140ec 	.word	0x080140ec
 800d144:	080140dc 	.word	0x080140dc
 800d148:	080140e8 	.word	0x080140e8

0800d14c <ds3231_task_init>:
#include "app_main.h"
#include "../Core/Inc/main.h"

DS3231_t ds3231;

void ds3231_task_init(I2C_HandleTypeDef* i2c_port, uint8_t dev_address) {
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	460b      	mov	r3, r1
 800d156:	70fb      	strb	r3, [r7, #3]
    DS3231_Init(&ds3231,i2c_port,dev_address);
 800d158:	78fb      	ldrb	r3, [r7, #3]
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	461a      	mov	r2, r3
 800d15e:	6879      	ldr	r1, [r7, #4]
 800d160:	4803      	ldr	r0, [pc, #12]	@ (800d170 <ds3231_task_init+0x24>)
 800d162:	f000 f9d9 	bl	800d518 <DS3231_Init>
 800d166:	bf00      	nop
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	200013a8 	.word	0x200013a8

0800d174 <screen_task_init>:
static void screen_dispatch(app_screen * const pOS_task, OS_event_t const * const pEvent);

static app_screen screen_instance;
OS_task * const AO_task_screen = &screen_instance.task;

void screen_task_init(void) {
 800d174:	b580      	push	{r7, lr}
 800d176:	af00      	add	r7, sp, #0
    screen_ctor(&screen_instance);
 800d178:	4802      	ldr	r0, [pc, #8]	@ (800d184 <screen_task_init+0x10>)
 800d17a:	f000 f805 	bl	800d188 <screen_ctor>
}
 800d17e:	bf00      	nop
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	200013b0 	.word	0x200013b0

0800d188 <screen_ctor>:

void screen_ctor(app_screen *pAO) {
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_screen,(OS_handler)screen_init,(OS_handler)screen_dispatch);
 800d190:	4b08      	ldr	r3, [pc, #32]	@ (800d1b4 <screen_ctor+0x2c>)
 800d192:	4a09      	ldr	r2, [pc, #36]	@ (800d1b8 <screen_ctor+0x30>)
 800d194:	4909      	ldr	r1, [pc, #36]	@ (800d1bc <screen_ctor+0x34>)
 800d196:	4618      	mov	r0, r3
 800d198:	f001 f8dd 	bl	800e356 <OS_task_init>

    OS_TimeEvt_init(&pAO->te_rtc,UPDATE_RTC,&pAO->task);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	331c      	adds	r3, #28
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	2101      	movs	r1, #1
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f001 f9a7 	bl	800e4f8 <OS_TimeEvt_init>
}
 800d1aa:	bf00      	nop
 800d1ac:	3708      	adds	r7, #8
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	200013b0 	.word	0x200013b0
 800d1b8:	0800d1e5 	.word	0x0800d1e5
 800d1bc:	0800d1c1 	.word	0x0800d1c1

0800d1c0 <screen_init>:

static void screen_init(app_screen * const pOS_task, OS_event_t const * const pEvent) {
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
    OS_TimeEvt_Set(&pOS_task->te_rtc,100,1000);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	331c      	adds	r3, #28
 800d1ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d1d2:	2164      	movs	r1, #100	@ 0x64
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f001 f9b7 	bl	800e548 <OS_TimeEvt_Set>
    UNUSED(pEvent);
} 
 800d1da:	bf00      	nop
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
	...

0800d1e4 <screen_dispatch>:

static void screen_dispatch(app_screen * const pOS_task, OS_event_t const * const pEvent) {
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08e      	sub	sp, #56	@ 0x38
 800d1e8:	af02      	add	r7, sp, #8
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	881b      	ldrh	r3, [r3, #0]
 800d1f2:	2b03      	cmp	r3, #3
 800d1f4:	f200 80a7 	bhi.w	800d346 <screen_dispatch+0x162>
 800d1f8:	a201      	add	r2, pc, #4	@ (adr r2, 800d200 <screen_dispatch+0x1c>)
 800d1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1fe:	bf00      	nop
 800d200:	0800d211 	.word	0x0800d211
 800d204:	0800d239 	.word	0x0800d239
 800d208:	0800d2f1 	.word	0x0800d2f1
 800d20c:	0800d2b5 	.word	0x0800d2b5
        case DEIVCE_TEST_FINISH : {
            printf("Device test success!!\n");
 800d210:	484f      	ldr	r0, [pc, #316]	@ (800d350 <screen_dispatch+0x16c>)
 800d212:	f003 fa63 	bl	80106dc <puts>
            uint8_t *device_finish = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800d216:	6838      	ldr	r0, [r7, #0]
 800d218:	f001 fb46 	bl	800e8a8 <get_data_dynamic_event>
 800d21c:	4603      	mov	r3, r0
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	627b      	str	r3, [r7, #36]	@ 0x24
            show_main_page(&_Screen,DWINPAGE_MAIN_FINISH,*device_finish);
 800d222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	461a      	mov	r2, r3
 800d228:	2164      	movs	r1, #100	@ 0x64
 800d22a:	484a      	ldr	r0, [pc, #296]	@ (800d354 <screen_dispatch+0x170>)
 800d22c:	f7ff f804 	bl	800c238 <show_main_page>
            free(device_finish);
 800d230:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d232:	f001 fb73 	bl	800e91c <free>
        } break;
 800d236:	e087      	b.n	800d348 <screen_dispatch+0x164>
        case UPDATE_RTC : {
            // printf("Update RTC\n");
            uint8_t data_time[7];
            DS3231_Read_time(&ds3231, data_time);
 800d238:	f107 031c 	add.w	r3, r7, #28
 800d23c:	4619      	mov	r1, r3
 800d23e:	4846      	ldr	r0, [pc, #280]	@ (800d358 <screen_dispatch+0x174>)
 800d240:	f000 f992 	bl	800d568 <DS3231_Read_time>
            char string[20];
            sprintf(string, "%02d/%02d/20%02d", data_time[4], data_time[5], data_time[6] );
 800d244:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d248:	461a      	mov	r2, r3
 800d24a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d24e:	4619      	mov	r1, r3
 800d250:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d254:	f107 0008 	add.w	r0, r7, #8
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	460b      	mov	r3, r1
 800d25c:	493f      	ldr	r1, [pc, #252]	@ (800d35c <screen_dispatch+0x178>)
 800d25e:	f003 fa7b 	bl	8010758 <siprintf>
            DWIN_SetText(&_Screen,VP_Time_Day,string,strlen(string));
 800d262:	f107 0308 	add.w	r3, r7, #8
 800d266:	4618      	mov	r0, r3
 800d268:	f7f3 f812 	bl	8000290 <strlen>
 800d26c:	4603      	mov	r3, r0
 800d26e:	b29b      	uxth	r3, r3
 800d270:	f107 0208 	add.w	r2, r7, #8
 800d274:	f649 0120 	movw	r1, #38944	@ 0x9820
 800d278:	4836      	ldr	r0, [pc, #216]	@ (800d354 <screen_dispatch+0x170>)
 800d27a:	f000 fa8a 	bl	800d792 <DWIN_SetText>
            sprintf(string, "%02d:%02d:%02d", data_time[2], data_time[1], data_time[0] );
 800d27e:	7fbb      	ldrb	r3, [r7, #30]
 800d280:	461a      	mov	r2, r3
 800d282:	7f7b      	ldrb	r3, [r7, #29]
 800d284:	4619      	mov	r1, r3
 800d286:	7f3b      	ldrb	r3, [r7, #28]
 800d288:	f107 0008 	add.w	r0, r7, #8
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	460b      	mov	r3, r1
 800d290:	4933      	ldr	r1, [pc, #204]	@ (800d360 <screen_dispatch+0x17c>)
 800d292:	f003 fa61 	bl	8010758 <siprintf>
            DWIN_SetText(&_Screen,VP_Time_Hour,string,strlen(string));
 800d296:	f107 0308 	add.w	r3, r7, #8
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7f2 fff8 	bl	8000290 <strlen>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	f107 0208 	add.w	r2, r7, #8
 800d2a8:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 800d2ac:	4829      	ldr	r0, [pc, #164]	@ (800d354 <screen_dispatch+0x170>)
 800d2ae:	f000 fa70 	bl	800d792 <DWIN_SetText>
        } break;
 800d2b2:	e049      	b.n	800d348 <screen_dispatch+0x164>
        case UPDATA_PROGARM : {
            printf("updata program test\n");
 800d2b4:	482b      	ldr	r0, [pc, #172]	@ (800d364 <screen_dispatch+0x180>)
 800d2b6:	f003 fa11 	bl	80106dc <puts>
            Screen_data_t *data_program = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800d2ba:	6838      	ldr	r0, [r7, #0]
 800d2bc:	f001 faf4 	bl	800e8a8 <get_data_dynamic_event>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            updata_data_program_from_app(&_Screen,data_program->data,data_program->len);
 800d2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c8:	6819      	ldr	r1, [r3, #0]
 800d2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2cc:	889b      	ldrh	r3, [r3, #4]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	4820      	ldr	r0, [pc, #128]	@ (800d354 <screen_dispatch+0x170>)
 800d2d2:	f7ff fc2b 	bl	800cb2c <updata_data_program_from_app>
            if (data_program->data != NULL) free(data_program->data);
 800d2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d004      	beq.n	800d2e8 <screen_dispatch+0x104>
 800d2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f001 fb1a 	bl	800e91c <free>
            free(data_program);
 800d2e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2ea:	f001 fb17 	bl	800e91c <free>
        } break;
 800d2ee:	e02b      	b.n	800d348 <screen_dispatch+0x164>
        case UPDATE_WIFI_STATE : {
            printf("Update wifi status\n");
 800d2f0:	481d      	ldr	r0, [pc, #116]	@ (800d368 <screen_dispatch+0x184>)
 800d2f2:	f003 f9f3 	bl	80106dc <puts>
            Screen_data_t *data_wifi = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800d2f6:	6838      	ldr	r0, [r7, #0]
 800d2f8:	f001 fad6 	bl	800e8a8 <get_data_dynamic_event>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (data_wifi->data == '0') {
 800d302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2b30      	cmp	r3, #48	@ 0x30
 800d308:	d106      	bne.n	800d318 <screen_dispatch+0x134>
                DWIN_SetVariable_Icon(&_Screen,VP_ICON_WIFI,WIFI_OFF);
 800d30a:	2201      	movs	r2, #1
 800d30c:	f244 2150 	movw	r1, #16976	@ 0x4250
 800d310:	4810      	ldr	r0, [pc, #64]	@ (800d354 <screen_dispatch+0x170>)
 800d312:	f000 faf0 	bl	800d8f6 <DWIN_SetVariable_Icon>
 800d316:	e009      	b.n	800d32c <screen_dispatch+0x148>
            } else if (data_wifi->data == '1') {
 800d318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2b31      	cmp	r3, #49	@ 0x31
 800d31e:	d105      	bne.n	800d32c <screen_dispatch+0x148>
                DWIN_SetVariable_Icon(&_Screen,VP_ICON_WIFI,WIFI_ON);
 800d320:	2200      	movs	r2, #0
 800d322:	f244 2150 	movw	r1, #16976	@ 0x4250
 800d326:	480b      	ldr	r0, [pc, #44]	@ (800d354 <screen_dispatch+0x170>)
 800d328:	f000 fae5 	bl	800d8f6 <DWIN_SetVariable_Icon>
            }
            if (data_wifi->data != NULL) free(data_wifi->data);
 800d32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d004      	beq.n	800d33e <screen_dispatch+0x15a>
 800d334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4618      	mov	r0, r3
 800d33a:	f001 faef 	bl	800e91c <free>
            free(data_wifi);
 800d33e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d340:	f001 faec 	bl	800e91c <free>
        } break;
 800d344:	e000      	b.n	800d348 <screen_dispatch+0x164>
        default: break;
 800d346:	bf00      	nop
    }
}
 800d348:	bf00      	nop
 800d34a:	3730      	adds	r7, #48	@ 0x30
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	08013e1c 	.word	0x08013e1c
 800d354:	20000cf0 	.word	0x20000cf0
 800d358:	200013a8 	.word	0x200013a8
 800d35c:	08013e34 	.word	0x08013e34
 800d360:	08013e48 	.word	0x08013e48
 800d364:	08013e58 	.word	0x08013e58
 800d368:	08013e6c 	.word	0x08013e6c

0800d36c <BlinkyTest_app_init>:
uint8_t num_ic = 1;
char uart_string[50];
uint32_t uart_num_test;

/* call in main file to initialization Active object of app using */
void BlinkyTest_app_init(void) {
 800d36c:	b580      	push	{r7, lr}
 800d36e:	af00      	add	r7, sp, #0
    BlinkyTest_ctor(&Blinky_instance);
 800d370:	4802      	ldr	r0, [pc, #8]	@ (800d37c <BlinkyTest_app_init+0x10>)
 800d372:	f000 f805 	bl	800d380 <BlinkyTest_ctor>
//    data_write.mem_addr = START_ADDR_PROGRAM_TEST_X(1);


    // data_uart.data = malloc(50);
//    uart_num_test = 0;
}
 800d376:	bf00      	nop
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	20001510 	.word	0x20001510

0800d380 <BlinkyTest_ctor>:


void BlinkyTest_ctor(Test_Blinky_OS * const pAO) {
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
    /* Init task */
    OS_task_init(&pAO->task,(OS_handler)&BlinkyTest_init,(OS_handler)&BlinkyTest_Dispatch);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4a0b      	ldr	r2, [pc, #44]	@ (800d3b8 <BlinkyTest_ctor+0x38>)
 800d38c:	490b      	ldr	r1, [pc, #44]	@ (800d3bc <BlinkyTest_ctor+0x3c>)
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 ffe1 	bl	800e356 <OS_task_init>

    /* init time os if using */
    OS_TimeEvt_init(&pAO->te1,TIMEOUT1_SIG,&pAO->task);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	331c      	adds	r3, #28
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	2100      	movs	r1, #0
 800d39c:	4618      	mov	r0, r3
 800d39e:	f001 f8ab 	bl	800e4f8 <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te2,TIMEOUT2_SIG,&pAO->task);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	3370      	adds	r3, #112	@ 0x70
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	2101      	movs	r1, #1
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f001 f8a4 	bl	800e4f8 <OS_TimeEvt_init>
    // OS_TimeEvt_init(&pAO->te_eeprom_write,WRITE_PROGRAM_TEST,&pAO->task);
    // OS_TimeEvt_init(&pAO->te_eeprom_read,READ_ONE_PROGRAM_TEST,&pAO->task);
//    OS_TimeEvt_init(&pAO->te_send_data,TEST_SEND_DATA_ESP32,&pAO->task);
}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	0800d3f1 	.word	0x0800d3f1
 800d3bc:	0800d3c1 	.word	0x0800d3c1

0800d3c0 <BlinkyTest_init>:

/* The init function of app task (optional) */
void BlinkyTest_init(Test_Blinky_OS * const pOS_task, OS_event_t const * const pEvent) {
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
    
    /* init time for generate event */
    OS_TimeEvt_Set(&pOS_task->te1,
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	331c      	adds	r3, #28
 800d3ce:	22c8      	movs	r2, #200	@ 0xc8
 800d3d0:	2101      	movs	r1, #1
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f001 f8b8 	bl	800e548 <OS_TimeEvt_Set>
    1U,
    200);

    OS_TimeEvt_Set(&pOS_task->te2,
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	3370      	adds	r3, #112	@ 0x70
 800d3dc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d3e0:	2165      	movs	r1, #101	@ 0x65
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f001 f8b0 	bl	800e548 <OS_TimeEvt_Set>
    /* if don't using this function */
    /*
    * UNSED(pOS_task);
    * UNSED(pEvent);
    */
}
 800d3e8:	bf00      	nop
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <BlinkyTest_Dispatch>:

void BlinkyTest_Dispatch(Test_Blinky_OS *const pOS_task, OS_event_t const * const pEvent) {
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	881b      	ldrh	r3, [r3, #0]
 800d3fe:	2b07      	cmp	r3, #7
 800d400:	d820      	bhi.n	800d444 <BlinkyTest_Dispatch+0x54>
 800d402:	a201      	add	r2, pc, #4	@ (adr r2, 800d408 <BlinkyTest_Dispatch+0x18>)
 800d404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d408:	0800d429 	.word	0x0800d429
 800d40c:	0800d437 	.word	0x0800d437
 800d410:	0800d445 	.word	0x0800d445
 800d414:	0800d445 	.word	0x0800d445
 800d418:	0800d445 	.word	0x0800d445
 800d41c:	0800d445 	.word	0x0800d445
 800d420:	0800d445 	.word	0x0800d445
 800d424:	0800d445 	.word	0x0800d445
        case TIMEOUT1_SIG : {
            /* Turn on led */
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800d428:	2201      	movs	r2, #1
 800d42a:	2102      	movs	r1, #2
 800d42c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d430:	f7f5 fcfc 	bl	8002e2c <HAL_GPIO_WritePin>
            // printf("Turn on led\n");
        } break;
 800d434:	e007      	b.n	800d446 <BlinkyTest_Dispatch+0x56>
        case TIMEOUT2_SIG : {
            /* Turn off led */
        	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 800d436:	2200      	movs	r2, #0
 800d438:	2102      	movs	r1, #2
 800d43a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d43e:	f7f5 fcf5 	bl	8002e2c <HAL_GPIO_WritePin>
            // printf("Turn off led\n");
        } break;
 800d442:	e000      	b.n	800d446 <BlinkyTest_Dispatch+0x56>
            // uart_num_test++;
            // sprintf((char *)data_uart.data,"%s: %ld\n","The String Send to ESP32",uart_num_test);
            // data_uart.len = strlen((char *)data_uart.data);
            // OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_uart,sizeof(uart_buf));
        } break;
        default: break;
 800d444:	bf00      	nop
    }
}
 800d446:	bf00      	nop
 800d448:	3708      	adds	r7, #8
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop

0800d450 <AT24Cxx_read_buffer>:
        }
    }
    HAL_Delay(10);
}

AT24Cxx_Status AT24Cxx_read_buffer(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t *data_ret, uint16_t buf_length) {
 800d450:	b580      	push	{r7, lr}
 800d452:	b088      	sub	sp, #32
 800d454:	af04      	add	r7, sp, #16
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	607a      	str	r2, [r7, #4]
 800d45a:	461a      	mov	r2, r3
 800d45c:	460b      	mov	r3, r1
 800d45e:	817b      	strh	r3, [r7, #10]
 800d460:	4613      	mov	r3, r2
 800d462:	813b      	strh	r3, [r7, #8]
    if (mem_addr < AT24C256_MAX_ADDR) {
 800d464:	897b      	ldrh	r3, [r7, #10]
 800d466:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d815      	bhi.n	800d49a <AT24Cxx_read_buffer+0x4a>
        while (HAL_I2C_Mem_Read(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_ret,buf_length,1000) != HAL_OK);
 800d46e:	bf00      	nop
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6818      	ldr	r0, [r3, #0]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	791b      	ldrb	r3, [r3, #4]
 800d478:	4619      	mov	r1, r3
 800d47a:	897a      	ldrh	r2, [r7, #10]
 800d47c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d480:	9302      	str	r3, [sp, #8]
 800d482:	893b      	ldrh	r3, [r7, #8]
 800d484:	9301      	str	r3, [sp, #4]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	9300      	str	r3, [sp, #0]
 800d48a:	2302      	movs	r3, #2
 800d48c:	f7f5 fe96 	bl	80031bc <HAL_I2C_Mem_Read>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d1ec      	bne.n	800d470 <AT24Cxx_read_buffer+0x20>
        return AT24Cxx_OK;
 800d496:	2302      	movs	r3, #2
 800d498:	e000      	b.n	800d49c <AT24Cxx_read_buffer+0x4c>
    } else {
        return AT24Cxx_Error_read;
 800d49a:	2304      	movs	r3, #4
    }
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <transposeArray>:

float String2Float(uint8_t *data_string, uint16_t size) {
    
}

void transposeArray(char *Dest, char *Src, uint8_t col, uint8_t row) {
 800d4a4:	b480      	push	{r7}
 800d4a6:	b087      	sub	sp, #28
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	71fb      	strb	r3, [r7, #7]
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	71bb      	strb	r3, [r7, #6]
    for (int i = 0; i < col; i++) {
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	617b      	str	r3, [r7, #20]
 800d4be:	e020      	b.n	800d502 <transposeArray+0x5e>
        for (int j = 0; j < row; j++) {
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	613b      	str	r3, [r7, #16]
 800d4c4:	e016      	b.n	800d4f4 <transposeArray+0x50>
            Dest[i * row + j] = Src[j * col + i];
 800d4c6:	79fb      	ldrb	r3, [r7, #7]
 800d4c8:	693a      	ldr	r2, [r7, #16]
 800d4ca:	fb03 f202 	mul.w	r2, r3, r2
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	441a      	add	r2, r3
 800d4d8:	79bb      	ldrb	r3, [r7, #6]
 800d4da:	6979      	ldr	r1, [r7, #20]
 800d4dc:	fb03 f101 	mul.w	r1, r3, r1
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	440b      	add	r3, r1
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	440b      	add	r3, r1
 800d4ea:	7812      	ldrb	r2, [r2, #0]
 800d4ec:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < row; j++) {
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	613b      	str	r3, [r7, #16]
 800d4f4:	79bb      	ldrb	r3, [r7, #6]
 800d4f6:	693a      	ldr	r2, [r7, #16]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	dbe4      	blt.n	800d4c6 <transposeArray+0x22>
    for (int i = 0; i < col; i++) {
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	3301      	adds	r3, #1
 800d500:	617b      	str	r3, [r7, #20]
 800d502:	79fb      	ldrb	r3, [r7, #7]
 800d504:	697a      	ldr	r2, [r7, #20]
 800d506:	429a      	cmp	r2, r3
 800d508:	dbda      	blt.n	800d4c0 <transposeArray+0x1c>
        }
    }
}
 800d50a:	bf00      	nop
 800d50c:	bf00      	nop
 800d50e:	371c      	adds	r7, #28
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <DS3231_Init>:
#include "DS3231.h"

static uint8_t decToBcd(int val);
static int bcdToDec(uint8_t val);

DS3231_Status DS3231_Init(DS3231_t *pDS3231, I2C_HandleTypeDef *i2c, uint16_t dev_address) {
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	4613      	mov	r3, r2
 800d524:	80fb      	strh	r3, [r7, #6]
    pDS3231->i2c_port = i2c;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	68ba      	ldr	r2, [r7, #8]
 800d52a:	601a      	str	r2, [r3, #0]

    pDS3231->dev_address = dev_address << 1;
 800d52c:	88fb      	ldrh	r3, [r7, #6]
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	005b      	lsls	r3, r3, #1
 800d532:	b2da      	uxtb	r2, r3
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	711a      	strb	r2, [r3, #4]
    if (HAL_I2C_IsDeviceReady(pDS3231->i2c_port,pDS3231->dev_address,1,100) == HAL_OK) {
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	6818      	ldr	r0, [r3, #0]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	791b      	ldrb	r3, [r3, #4]
 800d540:	4619      	mov	r1, r3
 800d542:	2364      	movs	r3, #100	@ 0x64
 800d544:	2201      	movs	r2, #1
 800d546:	f7f5 ff53 	bl	80033f0 <HAL_I2C_IsDeviceReady>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d104      	bne.n	800d55a <DS3231_Init+0x42>
    	printf("Init DS3231 Success\n");
 800d550:	4804      	ldr	r0, [pc, #16]	@ (800d564 <DS3231_Init+0x4c>)
 800d552:	f003 f8c3 	bl	80106dc <puts>
      return DS3231_Init_OK;
 800d556:	2300      	movs	r3, #0
 800d558:	e000      	b.n	800d55c <DS3231_Init+0x44>
    }
    return DS3231_Fail;
 800d55a:	2301      	movs	r3, #1
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	08013e80 	.word	0x08013e80

0800d568 <DS3231_Read_time>:

DS3231_Status DS3231_Read_time(DS3231_t *pDS3231, uint8_t *data_read) {
 800d568:	b580      	push	{r7, lr}
 800d56a:	b088      	sub	sp, #32
 800d56c:	af04      	add	r7, sp, #16
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
    uint8_t get_time[7];
    if (HAL_I2C_Mem_Read(pDS3231->i2c_port, pDS3231->dev_address, 0x00, I2C_MEMADD_SIZE_8BIT, get_time, 7, 1000) != HAL_OK) {
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6818      	ldr	r0, [r3, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	791b      	ldrb	r3, [r3, #4]
 800d57a:	4619      	mov	r1, r3
 800d57c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d580:	9302      	str	r3, [sp, #8]
 800d582:	2307      	movs	r3, #7
 800d584:	9301      	str	r3, [sp, #4]
 800d586:	f107 0308 	add.w	r3, r7, #8
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	2301      	movs	r3, #1
 800d58e:	2200      	movs	r2, #0
 800d590:	f7f5 fe14 	bl	80031bc <HAL_I2C_Mem_Read>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <DS3231_Read_time+0x36>
      return DS3231_Fail;
 800d59a:	2301      	movs	r3, #1
 800d59c:	e03e      	b.n	800d61c <DS3231_Read_time+0xb4>
    }
	
  data_read[0] = bcdToDec(get_time[0]);
 800d59e:	7a3b      	ldrb	r3, [r7, #8]
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f000 f8b7 	bl	800d714 <bcdToDec>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	701a      	strb	r2, [r3, #0]
	data_read[1] = bcdToDec(get_time[1]);
 800d5ae:	7a7b      	ldrb	r3, [r7, #9]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f000 f8af 	bl	800d714 <bcdToDec>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	b2d2      	uxtb	r2, r2
 800d5be:	701a      	strb	r2, [r3, #0]
	data_read[2] = bcdToDec(get_time[2]);
 800d5c0:	7abb      	ldrb	r3, [r7, #10]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f000 f8a6 	bl	800d714 <bcdToDec>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	3302      	adds	r3, #2
 800d5ce:	b2d2      	uxtb	r2, r2
 800d5d0:	701a      	strb	r2, [r3, #0]
	data_read[3] = bcdToDec(get_time[3]);
 800d5d2:	7afb      	ldrb	r3, [r7, #11]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f000 f89d 	bl	800d714 <bcdToDec>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	3303      	adds	r3, #3
 800d5e0:	b2d2      	uxtb	r2, r2
 800d5e2:	701a      	strb	r2, [r3, #0]
	data_read[4] = bcdToDec(get_time[4]);
 800d5e4:	7b3b      	ldrb	r3, [r7, #12]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f000 f894 	bl	800d714 <bcdToDec>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	3304      	adds	r3, #4
 800d5f2:	b2d2      	uxtb	r2, r2
 800d5f4:	701a      	strb	r2, [r3, #0]
	data_read[5] = bcdToDec(get_time[5]);
 800d5f6:	7b7b      	ldrb	r3, [r7, #13]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f000 f88b 	bl	800d714 <bcdToDec>
 800d5fe:	4602      	mov	r2, r0
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	3305      	adds	r3, #5
 800d604:	b2d2      	uxtb	r2, r2
 800d606:	701a      	strb	r2, [r3, #0]
	data_read[6] = bcdToDec(get_time[6]);
 800d608:	7bbb      	ldrb	r3, [r7, #14]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f000 f882 	bl	800d714 <bcdToDec>
 800d610:	4602      	mov	r2, r0
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	3306      	adds	r3, #6
 800d616:	b2d2      	uxtb	r2, r2
 800d618:	701a      	strb	r2, [r3, #0]
  return DS3231_Write_OK;
 800d61a:	2302      	movs	r3, #2
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3710      	adds	r7, #16
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <DS3231_Write_time>:

DS3231_Status DS3231_Write_time(DS3231_t *pDS3231,uint8_t sec, uint8_t min, uint8_t hour, uint8_t day, uint8_t month, uint8_t year) {
 800d624:	b580      	push	{r7, lr}
 800d626:	b088      	sub	sp, #32
 800d628:	af04      	add	r7, sp, #16
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	4608      	mov	r0, r1
 800d62e:	4611      	mov	r1, r2
 800d630:	461a      	mov	r2, r3
 800d632:	4603      	mov	r3, r0
 800d634:	70fb      	strb	r3, [r7, #3]
 800d636:	460b      	mov	r3, r1
 800d638:	70bb      	strb	r3, [r7, #2]
 800d63a:	4613      	mov	r3, r2
 800d63c:	707b      	strb	r3, [r7, #1]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 800d63e:	78fb      	ldrb	r3, [r7, #3]
 800d640:	4618      	mov	r0, r3
 800d642:	f000 f841 	bl	800d6c8 <decToBcd>
 800d646:	4603      	mov	r3, r0
 800d648:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 800d64a:	78bb      	ldrb	r3, [r7, #2]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f000 f83b 	bl	800d6c8 <decToBcd>
 800d652:	4603      	mov	r3, r0
 800d654:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 800d656:	787b      	ldrb	r3, [r7, #1]
 800d658:	4618      	mov	r0, r3
 800d65a:	f000 f835 	bl	800d6c8 <decToBcd>
 800d65e:	4603      	mov	r3, r0
 800d660:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(7);
 800d662:	2007      	movs	r0, #7
 800d664:	f000 f830 	bl	800d6c8 <decToBcd>
 800d668:	4603      	mov	r3, r0
 800d66a:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(day);
 800d66c:	7e3b      	ldrb	r3, [r7, #24]
 800d66e:	4618      	mov	r0, r3
 800d670:	f000 f82a 	bl	800d6c8 <decToBcd>
 800d674:	4603      	mov	r3, r0
 800d676:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 800d678:	7f3b      	ldrb	r3, [r7, #28]
 800d67a:	4618      	mov	r0, r3
 800d67c:	f000 f824 	bl	800d6c8 <decToBcd>
 800d680:	4603      	mov	r3, r0
 800d682:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 800d684:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d688:	4618      	mov	r0, r3
 800d68a:	f000 f81d 	bl	800d6c8 <decToBcd>
 800d68e:	4603      	mov	r3, r0
 800d690:	73bb      	strb	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(pDS3231->i2c_port, pDS3231->dev_address, 0x00, I2C_MEMADD_SIZE_8BIT, set_time, 7, 1000) != HAL_OK) {
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6818      	ldr	r0, [r3, #0]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	791b      	ldrb	r3, [r3, #4]
 800d69a:	4619      	mov	r1, r3
 800d69c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d6a0:	9302      	str	r3, [sp, #8]
 800d6a2:	2307      	movs	r3, #7
 800d6a4:	9301      	str	r3, [sp, #4]
 800d6a6:	f107 0308 	add.w	r3, r7, #8
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f7f5 fc70 	bl	8002f94 <HAL_I2C_Mem_Write>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <DS3231_Write_time+0x9a>
    return DS3231_Fail;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	e000      	b.n	800d6c0 <DS3231_Write_time+0x9c>
  }
  return DS3231_Read_OK;
 800d6be:	2303      	movs	r3, #3
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <decToBcd>:

// Convert normal decimal numbers to binary coded decimal
static uint8_t decToBcd(int val)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4a0f      	ldr	r2, [pc, #60]	@ (800d710 <decToBcd+0x48>)
 800d6d4:	fb82 1203 	smull	r1, r2, r2, r3
 800d6d8:	1092      	asrs	r2, r2, #2
 800d6da:	17db      	asrs	r3, r3, #31
 800d6dc:	1ad3      	subs	r3, r2, r3
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	011b      	lsls	r3, r3, #4
 800d6e2:	b2d8      	uxtb	r0, r3
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	4b0a      	ldr	r3, [pc, #40]	@ (800d710 <decToBcd+0x48>)
 800d6e8:	fb83 1302 	smull	r1, r3, r3, r2
 800d6ec:	1099      	asrs	r1, r3, #2
 800d6ee:	17d3      	asrs	r3, r2, #31
 800d6f0:	1ac9      	subs	r1, r1, r3
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	440b      	add	r3, r1
 800d6f8:	005b      	lsls	r3, r3, #1
 800d6fa:	1ad1      	subs	r1, r2, r3
 800d6fc:	b2cb      	uxtb	r3, r1
 800d6fe:	4403      	add	r3, r0
 800d700:	b2db      	uxtb	r3, r3
}
 800d702:	4618      	mov	r0, r3
 800d704:	370c      	adds	r7, #12
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	66666667 	.word	0x66666667

0800d714 <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
static int bcdToDec(uint8_t val)
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	4603      	mov	r3, r0
 800d71c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800d71e:	79fb      	ldrb	r3, [r7, #7]
 800d720:	091b      	lsrs	r3, r3, #4
 800d722:	b2db      	uxtb	r3, r3
 800d724:	461a      	mov	r2, r3
 800d726:	4613      	mov	r3, r2
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	4413      	add	r3, r2
 800d72c:	005b      	lsls	r3, r3, #1
 800d72e:	461a      	mov	r2, r3
 800d730:	79fb      	ldrb	r3, [r7, #7]
 800d732:	f003 030f 	and.w	r3, r3, #15
 800d736:	4413      	add	r3, r2
}
 800d738:	4618      	mov	r0, r3
 800d73a:	370c      	adds	r7, #12
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <DWIN_SetPage>:
#include "DWIN_HMI.h"

void DWIN_SetPage(Dwin_t *pDwin, uint8_t page)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b086      	sub	sp, #24
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	70fb      	strb	r3, [r7, #3]
    uint8_t sendBuffer[10] = {CMD_HEAD1, CMD_HEAD2, 0x07, CMD_WRITE, 0x00, 0x84, 0x5A, 0x01, 0x00, page};
 800d750:	235a      	movs	r3, #90	@ 0x5a
 800d752:	733b      	strb	r3, [r7, #12]
 800d754:	23a5      	movs	r3, #165	@ 0xa5
 800d756:	737b      	strb	r3, [r7, #13]
 800d758:	2307      	movs	r3, #7
 800d75a:	73bb      	strb	r3, [r7, #14]
 800d75c:	2382      	movs	r3, #130	@ 0x82
 800d75e:	73fb      	strb	r3, [r7, #15]
 800d760:	2300      	movs	r3, #0
 800d762:	743b      	strb	r3, [r7, #16]
 800d764:	2384      	movs	r3, #132	@ 0x84
 800d766:	747b      	strb	r3, [r7, #17]
 800d768:	235a      	movs	r3, #90	@ 0x5a
 800d76a:	74bb      	strb	r3, [r7, #18]
 800d76c:	2301      	movs	r3, #1
 800d76e:	74fb      	strb	r3, [r7, #19]
 800d770:	2300      	movs	r3, #0
 800d772:	753b      	strb	r3, [r7, #20]
 800d774:	78fb      	ldrb	r3, [r7, #3]
 800d776:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6818      	ldr	r0, [r3, #0]
 800d77c:	f107 010c 	add.w	r1, r7, #12
 800d780:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d784:	220a      	movs	r2, #10
 800d786:	f7f8 fc2b 	bl	8005fe0 <HAL_UART_Transmit>
}
 800d78a:	bf00      	nop
 800d78c:	3718      	adds	r7, #24
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <DWIN_SetText>:

void DWIN_SetText(Dwin_t *pDwin, uint16_t VP_address, char *textData, uint16_t datalen) {
 800d792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d796:	b08a      	sub	sp, #40	@ 0x28
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	607a      	str	r2, [r7, #4]
 800d79e:	461a      	mov	r2, r3
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	817b      	strh	r3, [r7, #10]
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	813b      	strh	r3, [r7, #8]
 800d7a8:	466b      	mov	r3, sp
 800d7aa:	469a      	mov	sl, r3
    uint8_t ffEnding[2] = { 0xFF, 0xFF };
 800d7ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d7b0:	83bb      	strh	r3, [r7, #28]
    uint8_t sendBuffer[8 + datalen];
 800d7b2:	893b      	ldrh	r3, [r7, #8]
 800d7b4:	f103 0608 	add.w	r6, r3, #8
 800d7b8:	1e73      	subs	r3, r6, #1
 800d7ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7bc:	4632      	mov	r2, r6
 800d7be:	2300      	movs	r3, #0
 800d7c0:	4690      	mov	r8, r2
 800d7c2:	4699      	mov	r9, r3
 800d7c4:	f04f 0200 	mov.w	r2, #0
 800d7c8:	f04f 0300 	mov.w	r3, #0
 800d7cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d7d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d7d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d7d8:	4632      	mov	r2, r6
 800d7da:	2300      	movs	r3, #0
 800d7dc:	4614      	mov	r4, r2
 800d7de:	461d      	mov	r5, r3
 800d7e0:	f04f 0200 	mov.w	r2, #0
 800d7e4:	f04f 0300 	mov.w	r3, #0
 800d7e8:	00eb      	lsls	r3, r5, #3
 800d7ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d7ee:	00e2      	lsls	r2, r4, #3
 800d7f0:	4633      	mov	r3, r6
 800d7f2:	3307      	adds	r3, #7
 800d7f4:	08db      	lsrs	r3, r3, #3
 800d7f6:	00db      	lsls	r3, r3, #3
 800d7f8:	ebad 0d03 	sub.w	sp, sp, r3
 800d7fc:	466b      	mov	r3, sp
 800d7fe:	3300      	adds	r3, #0
 800d800:	623b      	str	r3, [r7, #32]

    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800d802:	235a      	movs	r3, #90	@ 0x5a
 800d804:	753b      	strb	r3, [r7, #20]
 800d806:	23a5      	movs	r3, #165	@ 0xa5
 800d808:	757b      	strb	r3, [r7, #21]
 800d80a:	893b      	ldrh	r3, [r7, #8]
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	3305      	adds	r3, #5
 800d810:	b2db      	uxtb	r3, r3
 800d812:	75bb      	strb	r3, [r7, #22]
 800d814:	2382      	movs	r3, #130	@ 0x82
 800d816:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 800d818:	897b      	ldrh	r3, [r7, #10]
 800d81a:	0a1b      	lsrs	r3, r3, #8
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800d820:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 800d822:	897b      	ldrh	r3, [r7, #10]
 800d824:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800d826:	767b      	strb	r3, [r7, #25]
    
    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	461a      	mov	r2, r3
 800d82c:	f107 0314 	add.w	r3, r7, #20
 800d830:	6818      	ldr	r0, [r3, #0]
 800d832:	6010      	str	r0, [r2, #0]
 800d834:	889b      	ldrh	r3, [r3, #4]
 800d836:	8093      	strh	r3, [r2, #4]
    memcpy(sendBuffer + 6, textData, datalen);
 800d838:	6a3b      	ldr	r3, [r7, #32]
 800d83a:	3306      	adds	r3, #6
 800d83c:	893a      	ldrh	r2, [r7, #8]
 800d83e:	6879      	ldr	r1, [r7, #4]
 800d840:	4618      	mov	r0, r3
 800d842:	f003 f9fc 	bl	8010c3e <memcpy>
    memcpy(sendBuffer + (6 + datalen), ffEnding, sizeof(ffEnding));
 800d846:	893b      	ldrh	r3, [r7, #8]
 800d848:	3306      	adds	r3, #6
 800d84a:	461a      	mov	r2, r3
 800d84c:	6a3b      	ldr	r3, [r7, #32]
 800d84e:	4413      	add	r3, r2
 800d850:	8bba      	ldrh	r2, [r7, #28]
 800d852:	801a      	strh	r2, [r3, #0]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	6818      	ldr	r0, [r3, #0]
 800d858:	b2b2      	uxth	r2, r6
 800d85a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d85e:	6a39      	ldr	r1, [r7, #32]
 800d860:	f7f8 fbbe 	bl	8005fe0 <HAL_UART_Transmit>
 800d864:	46d5      	mov	sp, sl
}
 800d866:	bf00      	nop
 800d868:	3728      	adds	r7, #40	@ 0x28
 800d86a:	46bd      	mov	sp, r7
 800d86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d870 <DWIN_ClearText>:

void DWIN_ClearText(Dwin_t *pDwin, uint16_t VP_address) {
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	460b      	mov	r3, r1
 800d87a:	807b      	strh	r3, [r7, #2]
    DWIN_SetText(pDwin,VP_address,(uint8_t *)"",strlen(""));
 800d87c:	8879      	ldrh	r1, [r7, #2]
 800d87e:	2300      	movs	r3, #0
 800d880:	4a03      	ldr	r2, [pc, #12]	@ (800d890 <DWIN_ClearText+0x20>)
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f7ff ff85 	bl	800d792 <DWIN_SetText>
}
 800d888:	bf00      	nop
 800d88a:	3708      	adds	r7, #8
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	08013e94 	.word	0x08013e94

0800d894 <DWIN_SetColorText>:

void DWIN_SetColorText(Dwin_t *pDwin, uint16_t SP_address, uint16_t color) {
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	460b      	mov	r3, r1
 800d89e:	807b      	strh	r3, [r7, #2]
 800d8a0:	4613      	mov	r3, r2
 800d8a2:	803b      	strh	r3, [r7, #0]
    SP_address = SP_address | 3; // offset color text
 800d8a4:	887b      	ldrh	r3, [r7, #2]
 800d8a6:	f043 0303 	orr.w	r3, r3, #3
 800d8aa:	807b      	strh	r3, [r7, #2]

    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800d8ac:	235a      	movs	r3, #90	@ 0x5a
 800d8ae:	723b      	strb	r3, [r7, #8]
 800d8b0:	23a5      	movs	r3, #165	@ 0xa5
 800d8b2:	727b      	strb	r3, [r7, #9]
 800d8b4:	2305      	movs	r3, #5
 800d8b6:	72bb      	strb	r3, [r7, #10]
 800d8b8:	2382      	movs	r3, #130	@ 0x82
 800d8ba:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((SP_address >> 8) & 0xFF), (uint8_t)((SP_address)&0xFF), 
 800d8bc:	887b      	ldrh	r3, [r7, #2]
 800d8be:	0a1b      	lsrs	r3, r3, #8
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800d8c4:	733b      	strb	r3, [r7, #12]
    (uint8_t)((SP_address >> 8) & 0xFF), (uint8_t)((SP_address)&0xFF), 
 800d8c6:	887b      	ldrh	r3, [r7, #2]
 800d8c8:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800d8ca:	737b      	strb	r3, [r7, #13]
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };
 800d8cc:	883b      	ldrh	r3, [r7, #0]
 800d8ce:	0a1b      	lsrs	r3, r3, #8
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800d8d4:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };
 800d8d6:	883b      	ldrh	r3, [r7, #0]
 800d8d8:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800d8da:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6818      	ldr	r0, [r3, #0]
 800d8e0:	f107 0108 	add.w	r1, r7, #8
 800d8e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d8e8:	2208      	movs	r2, #8
 800d8ea:	f7f8 fb79 	bl	8005fe0 <HAL_UART_Transmit>
}
 800d8ee:	bf00      	nop
 800d8f0:	3710      	adds	r7, #16
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <DWIN_SetVariable_Icon>:

void DWIN_SetVariable_Icon(Dwin_t *pDwin, uint16_t VP_address, uint16_t data ) {
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b084      	sub	sp, #16
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
 800d8fe:	460b      	mov	r3, r1
 800d900:	807b      	strh	r3, [r7, #2]
 800d902:	4613      	mov	r3, r2
 800d904:	803b      	strh	r3, [r7, #0]
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800d906:	235a      	movs	r3, #90	@ 0x5a
 800d908:	723b      	strb	r3, [r7, #8]
 800d90a:	23a5      	movs	r3, #165	@ 0xa5
 800d90c:	727b      	strb	r3, [r7, #9]
 800d90e:	2305      	movs	r3, #5
 800d910:	72bb      	strb	r3, [r7, #10]
 800d912:	2382      	movs	r3, #130	@ 0x82
 800d914:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 800d916:	887b      	ldrh	r3, [r7, #2]
 800d918:	0a1b      	lsrs	r3, r3, #8
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800d91e:	733b      	strb	r3, [r7, #12]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 800d920:	887b      	ldrh	r3, [r7, #2]
 800d922:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800d924:	737b      	strb	r3, [r7, #13]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 800d926:	883b      	ldrh	r3, [r7, #0]
 800d928:	0a1b      	lsrs	r3, r3, #8
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800d92e:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 800d930:	883b      	ldrh	r3, [r7, #0]
 800d932:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800d934:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6818      	ldr	r0, [r3, #0]
 800d93a:	f107 0108 	add.w	r1, r7, #8
 800d93e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d942:	2208      	movs	r2, #8
 800d944:	f7f8 fb4c 	bl	8005fe0 <HAL_UART_Transmit>
}
 800d948:	bf00      	nop
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <DWIN_SetArray_Icon>:

void DWIN_SetArray_Icon(Dwin_t *pDwin, uint16_t VP_address_begin, uint8_t *data_array, uint8_t data_length ) {
 800d950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d954:	b08b      	sub	sp, #44	@ 0x2c
 800d956:	af00      	add	r7, sp, #0
 800d958:	60f8      	str	r0, [r7, #12]
 800d95a:	607a      	str	r2, [r7, #4]
 800d95c:	461a      	mov	r2, r3
 800d95e:	460b      	mov	r3, r1
 800d960:	817b      	strh	r3, [r7, #10]
 800d962:	4613      	mov	r3, r2
 800d964:	727b      	strb	r3, [r7, #9]
 800d966:	466b      	mov	r3, sp
 800d968:	461e      	mov	r6, r3
    uint16_t Total_Data_Length = data_length * 2;
 800d96a:	7a7b      	ldrb	r3, [r7, #9]
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	005b      	lsls	r3, r3, #1
 800d970:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t sendBuffer[6 +Total_Data_Length];
 800d972:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d974:	1d99      	adds	r1, r3, #6
 800d976:	1e4b      	subs	r3, r1, #1
 800d978:	623b      	str	r3, [r7, #32]
 800d97a:	460a      	mov	r2, r1
 800d97c:	2300      	movs	r3, #0
 800d97e:	4690      	mov	r8, r2
 800d980:	4699      	mov	r9, r3
 800d982:	f04f 0200 	mov.w	r2, #0
 800d986:	f04f 0300 	mov.w	r3, #0
 800d98a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d98e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d996:	460a      	mov	r2, r1
 800d998:	2300      	movs	r3, #0
 800d99a:	4614      	mov	r4, r2
 800d99c:	461d      	mov	r5, r3
 800d99e:	f04f 0200 	mov.w	r2, #0
 800d9a2:	f04f 0300 	mov.w	r3, #0
 800d9a6:	00eb      	lsls	r3, r5, #3
 800d9a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d9ac:	00e2      	lsls	r2, r4, #3
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	3307      	adds	r3, #7
 800d9b2:	08db      	lsrs	r3, r3, #3
 800d9b4:	00db      	lsls	r3, r3, #3
 800d9b6:	ebad 0d03 	sub.w	sp, sp, r3
 800d9ba:	466b      	mov	r3, sp
 800d9bc:	3300      	adds	r3, #0
 800d9be:	61fb      	str	r3, [r7, #28]
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800d9c0:	235a      	movs	r3, #90	@ 0x5a
 800d9c2:	753b      	strb	r3, [r7, #20]
 800d9c4:	23a5      	movs	r3, #165	@ 0xa5
 800d9c6:	757b      	strb	r3, [r7, #21]
 800d9c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	3303      	adds	r3, #3
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	75bb      	strb	r3, [r7, #22]
 800d9d2:	2382      	movs	r3, #130	@ 0x82
 800d9d4:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 800d9d6:	897b      	ldrh	r3, [r7, #10]
 800d9d8:	0a1b      	lsrs	r3, r3, #8
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800d9de:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 800d9e0:	897b      	ldrh	r3, [r7, #10]
 800d9e2:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800d9e4:	767b      	strb	r3, [r7, #25]

    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	f107 0314 	add.w	r3, r7, #20
 800d9ee:	6818      	ldr	r0, [r3, #0]
 800d9f0:	6010      	str	r0, [r2, #0]
 800d9f2:	889b      	ldrh	r3, [r3, #4]
 800d9f4:	8093      	strh	r3, [r2, #4]
    /* Convert data array uint8_t to uint16_t */
    for (uint16_t i = 0; i < data_length; i++) {
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d9fa:	e012      	b.n	800da22 <DWIN_SetArray_Icon+0xd2>
        sendBuffer[6 + (i * 2)] = 0x00;              // High byte 
 800d9fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d9fe:	3303      	adds	r3, #3
 800da00:	005b      	lsls	r3, r3, #1
 800da02:	69fa      	ldr	r2, [r7, #28]
 800da04:	2000      	movs	r0, #0
 800da06:	54d0      	strb	r0, [r2, r3]
        sendBuffer[6 + (i * 2) + 1] = data_array[i]; // Low byte is data
 800da08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	441a      	add	r2, r3
 800da0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da10:	3303      	adds	r3, #3
 800da12:	005b      	lsls	r3, r3, #1
 800da14:	3301      	adds	r3, #1
 800da16:	7810      	ldrb	r0, [r2, #0]
 800da18:	69fa      	ldr	r2, [r7, #28]
 800da1a:	54d0      	strb	r0, [r2, r3]
    for (uint16_t i = 0; i < data_length; i++) {
 800da1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da1e:	3301      	adds	r3, #1
 800da20:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800da22:	7a7b      	ldrb	r3, [r7, #9]
 800da24:	b29b      	uxth	r3, r3
 800da26:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800da28:	429a      	cmp	r2, r3
 800da2a:	d3e7      	bcc.n	800d9fc <DWIN_SetArray_Icon+0xac>
    }

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6818      	ldr	r0, [r3, #0]
 800da30:	b28a      	uxth	r2, r1
 800da32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800da36:	69f9      	ldr	r1, [r7, #28]
 800da38:	f7f8 fad2 	bl	8005fe0 <HAL_UART_Transmit>
 800da3c:	46b5      	mov	sp, r6
}
 800da3e:	bf00      	nop
 800da40:	372c      	adds	r7, #44	@ 0x2c
 800da42:	46bd      	mov	sp, r7
 800da44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800da48 <DWIN_Create_Basic_line>:

void DWIN_Create_Basic_line(Dwin_t *pDwin, uint16_t VP_address, uint16_t x_base, uint16_t y_base, uint8_t *array_data, uint8_t size) {
 800da48:	b5b0      	push	{r4, r5, r7, lr}
 800da4a:	b0d0      	sub	sp, #320	@ 0x140
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800da52:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800da56:	6020      	str	r0, [r4, #0]
 800da58:	460c      	mov	r4, r1
 800da5a:	4610      	mov	r0, r2
 800da5c:	4619      	mov	r1, r3
 800da5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800da62:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800da66:	4622      	mov	r2, r4
 800da68:	801a      	strh	r2, [r3, #0]
 800da6a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800da6e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800da72:	4602      	mov	r2, r0
 800da74:	801a      	strh	r2, [r3, #0]
 800da76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800da7a:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800da7e:	460a      	mov	r2, r1
 800da80:	801a      	strh	r2, [r3, #0]
    uint8_t data_length = 11 + (16*size);
 800da82:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800da86:	011b      	lsls	r3, r3, #4
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	330b      	adds	r3, #11
 800da8c:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
    uint16_t num_connection = (size * 4) - 1;
 800da90:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800da94:	b29b      	uxth	r3, r3
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	b29b      	uxth	r3, r3
 800da9a:	3b01      	subs	r3, #1
 800da9c:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800daa0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800daa4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800daa8:	4618      	mov	r0, r3
 800daaa:	23ff      	movs	r3, #255	@ 0xff
 800daac:	461a      	mov	r2, r3
 800daae:	2100      	movs	r1, #0
 800dab0:	f002 ff8a 	bl	80109c8 <memset>
 800dab4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dab8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800dabc:	225a      	movs	r2, #90	@ 0x5a
 800dabe:	701a      	strb	r2, [r3, #0]
 800dac0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dac4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800dac8:	22a5      	movs	r2, #165	@ 0xa5
 800daca:	705a      	strb	r2, [r3, #1]
 800dacc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dad0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800dad4:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 800dad8:	709a      	strb	r2, [r3, #2]
 800dada:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dade:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800dae2:	2282      	movs	r2, #130	@ 0x82
 800dae4:	70da      	strb	r2, [r3, #3]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 800dae6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800daea:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800daee:	881b      	ldrh	r3, [r3, #0]
 800daf0:	0a1b      	lsrs	r3, r3, #8
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800daf6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dafa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800dafe:	711a      	strb	r2, [r3, #4]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 800db00:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800db04:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800db08:	881b      	ldrh	r3, [r3, #0]
 800db0a:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800db0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800db10:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800db14:	715a      	strb	r2, [r3, #5]
 800db16:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800db1a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800db1e:	2202      	movs	r2, #2
 800db20:	71da      	strb	r2, [r3, #7]
                            (uint8_t)((num_connection >> 8) & 0xFF), (uint8_t)(num_connection & 0xFF), 0x01, 0xED };
 800db22:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 800db26:	0a1b      	lsrs	r3, r3, #8
 800db28:	b29b      	uxth	r3, r3
 800db2a:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800db2c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800db30:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800db34:	721a      	strb	r2, [r3, #8]
                            (uint8_t)((num_connection >> 8) & 0xFF), (uint8_t)(num_connection & 0xFF), 0x01, 0xED };
 800db36:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 800db3a:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800db3c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800db40:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800db44:	725a      	strb	r2, [r3, #9]
 800db46:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800db4a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800db4e:	2201      	movs	r2, #1
 800db50:	729a      	strb	r2, [r3, #10]
 800db52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800db56:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800db5a:	22ed      	movs	r2, #237	@ 0xed
 800db5c:	72da      	strb	r2, [r3, #11]
    uint8_t End_bit[2] = {0xFF, 0x00};
 800db5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800db62:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800db66:	22ff      	movs	r2, #255	@ 0xff
 800db68:	801a      	strh	r2, [r3, #0]
    uint16_t x1,y1,x2,y2,x3,y3,x4,y4 = 0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    uint8_t index = 0;
 800db70:	2300      	movs	r3, #0
 800db72:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    

    // Create the send Buffer 
    for (uint8_t i = 0; i < size; i++) {
 800db76:	2300      	movs	r3, #0
 800db78:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 800db7c:	e120      	b.n	800ddc0 <DWIN_Create_Basic_line+0x378>
        y1 = y2 = y3 = y4 = y_base;
 800db7e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800db82:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800db86:	881b      	ldrh	r3, [r3, #0]
 800db88:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 800db8c:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800db90:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 800db94:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800db98:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
 800db9c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800dba0:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        x1 = x_base + (25 * index);
 800dba4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	461a      	mov	r2, r3
 800dbac:	0092      	lsls	r2, r2, #2
 800dbae:	4413      	add	r3, r2
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	0091      	lsls	r1, r2, #2
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	4413      	add	r3, r2
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dbc0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800dbc4:	881b      	ldrh	r3, [r3, #0]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
        ++index; 
 800dbcc:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        x2 = x_base + (25 * index);
 800dbd6:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	461a      	mov	r2, r3
 800dbde:	0092      	lsls	r2, r2, #2
 800dbe0:	4413      	add	r3, r2
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	0091      	lsls	r1, r2, #2
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	460b      	mov	r3, r1
 800dbea:	4413      	add	r3, r2
 800dbec:	b29a      	uxth	r2, r3
 800dbee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dbf2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800dbf6:	881b      	ldrh	r3, [r3, #0]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
        ++index;
 800dbfe:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800dc02:	3301      	adds	r3, #1
 800dc04:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        x3 = x2;
 800dc08:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800dc0c:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
        x4 = x_base + (25 * index);
 800dc10:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	461a      	mov	r2, r3
 800dc18:	0092      	lsls	r2, r2, #2
 800dc1a:	4413      	add	r3, r2
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	0091      	lsls	r1, r2, #2
 800dc20:	461a      	mov	r2, r3
 800dc22:	460b      	mov	r3, r1
 800dc24:	4413      	add	r3, r2
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dc2c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800dc30:	881b      	ldrh	r3, [r3, #0]
 800dc32:	4413      	add	r3, r2
 800dc34:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
        if (array_data[i]) { // HIGH CLOCK
 800dc38:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 800dc3c:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800dc40:	4413      	add	r3, r2
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d013      	beq.n	800dc70 <DWIN_Create_Basic_line+0x228>
            y1 = y2 = y3 = y4 = y_base - 30;  
 800dc48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dc4c:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	3b1e      	subs	r3, #30
 800dc54:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 800dc58:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800dc5c:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 800dc60:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800dc64:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
 800dc68:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800dc6c:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        }
        // Create clock buffer
        uint8_t Clock_Buffer[] = { (x1 >> 8) & 0xFF, (x1 & 0xFF), (y1 >> 8) & 0xFF, (y1 & 0xFF),
 800dc70:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800dc74:	0a1b      	lsrs	r3, r3, #8
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	b2da      	uxtb	r2, r3
 800dc7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dc7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dc82:	701a      	strb	r2, [r3, #0]
 800dc84:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800dc88:	b2da      	uxtb	r2, r3
 800dc8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dc8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dc92:	705a      	strb	r2, [r3, #1]
 800dc94:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800dc98:	0a1b      	lsrs	r3, r3, #8
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	b2da      	uxtb	r2, r3
 800dc9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dca2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dca6:	709a      	strb	r2, [r3, #2]
 800dca8:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800dcac:	b2da      	uxtb	r2, r3
 800dcae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dcb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dcb6:	70da      	strb	r2, [r3, #3]
 800dcb8:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800dcbc:	0a1b      	lsrs	r3, r3, #8
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	b2da      	uxtb	r2, r3
 800dcc2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dcc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dcca:	711a      	strb	r2, [r3, #4]
 800dccc:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dcd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dcda:	715a      	strb	r2, [r3, #5]
 800dcdc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800dce0:	0a1b      	lsrs	r3, r3, #8
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dcea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dcee:	719a      	strb	r2, [r3, #6]
 800dcf0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800dcf4:	b2da      	uxtb	r2, r3
 800dcf6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dcfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dcfe:	71da      	strb	r2, [r3, #7]
 800dd00:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 800dd04:	0a1b      	lsrs	r3, r3, #8
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	b2da      	uxtb	r2, r3
 800dd0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dd0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dd12:	721a      	strb	r2, [r3, #8]
 800dd14:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 800dd18:	b2da      	uxtb	r2, r3
 800dd1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dd1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dd22:	725a      	strb	r2, [r3, #9]
 800dd24:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800dd28:	0a1b      	lsrs	r3, r3, #8
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	b2da      	uxtb	r2, r3
 800dd2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dd32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dd36:	729a      	strb	r2, [r3, #10]
 800dd38:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800dd3c:	b2da      	uxtb	r2, r3
 800dd3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dd42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dd46:	72da      	strb	r2, [r3, #11]
 800dd48:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 800dd4c:	0a1b      	lsrs	r3, r3, #8
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	b2da      	uxtb	r2, r3
 800dd52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dd56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dd5a:	731a      	strb	r2, [r3, #12]
 800dd5c:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dd66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dd6a:	735a      	strb	r2, [r3, #13]
 800dd6c:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800dd70:	0a1b      	lsrs	r3, r3, #8
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	b2da      	uxtb	r2, r3
 800dd76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dd7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dd7e:	739a      	strb	r2, [r3, #14]
 800dd80:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800dd84:	b2da      	uxtb	r2, r3
 800dd86:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dd8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dd8e:	73da      	strb	r2, [r3, #15]
                        (x2 >> 8) & 0xFF, (x2 & 0xFF), (y2 >> 8) & 0xFF, (y2 & 0xFF), 
                        (x3 >> 8) & 0xFF, (x3 & 0xFF), (y3 >> 8) & 0xFF, (y3 & 0xFF), 
                        (x4 >> 8) & 0xFF, (x4 & 0xFF), (y4 >> 8) & 0xFF, (y4 & 0xFF), };

        // add to sendBuffer 
        memcpy(sendBuffer + (12 + 16 * i) ,Clock_Buffer,sizeof(Clock_Buffer));
 800dd90:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 800dd94:	011b      	lsls	r3, r3, #4
 800dd96:	330c      	adds	r3, #12
 800dd98:	461a      	mov	r2, r3
 800dd9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dd9e:	441a      	add	r2, r3
 800dda0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dda4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dda8:	4614      	mov	r4, r2
 800ddaa:	461d      	mov	r5, r3
 800ddac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddae:	6020      	str	r0, [r4, #0]
 800ddb0:	6061      	str	r1, [r4, #4]
 800ddb2:	60a2      	str	r2, [r4, #8]
 800ddb4:	60e3      	str	r3, [r4, #12]
    for (uint8_t i = 0; i < size; i++) {
 800ddb6:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 800ddba:	3301      	adds	r3, #1
 800ddbc:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 800ddc0:	f897 2136 	ldrb.w	r2, [r7, #310]	@ 0x136
 800ddc4:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	f4ff aed8 	bcc.w	800db7e <DWIN_Create_Basic_line+0x136>
    }
    // End bit 
    memcpy(sendBuffer + (data_length + 1),End_bit,2);
 800ddce:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800ddd8:	4413      	add	r3, r2
 800ddda:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800ddde:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800dde2:	8812      	ldrh	r2, [r2, #0]
 800dde4:	801a      	strh	r2, [r3, #0]


    // Send data
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800dde6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ddea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	6818      	ldr	r0, [r3, #0]
 800ddf2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ddf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ddfa:	22ff      	movs	r2, #255	@ 0xff
 800ddfc:	f7f8 f8f0 	bl	8005fe0 <HAL_UART_Transmit>
}
 800de00:	bf00      	nop
 800de02:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800de06:	46bd      	mov	sp, r7
 800de08:	bdb0      	pop	{r4, r5, r7, pc}

0800de0a <DWIN_SetWidth_Basic_line>:

void DWIN_SetWidth_Basic_line(Dwin_t *pDwin, uint16_t SP_Address, uint8_t width) {
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b084      	sub	sp, #16
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
 800de12:	460b      	mov	r3, r1
 800de14:	807b      	strh	r3, [r7, #2]
 800de16:	4613      	mov	r3, r2
 800de18:	707b      	strb	r3, [r7, #1]
    SP_Address = SP_Address | 7; // offset width line 
 800de1a:	887b      	ldrh	r3, [r7, #2]
 800de1c:	f043 0307 	orr.w	r3, r3, #7
 800de20:	807b      	strh	r3, [r7, #2]
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 800de22:	235a      	movs	r3, #90	@ 0x5a
 800de24:	723b      	strb	r3, [r7, #8]
 800de26:	23a5      	movs	r3, #165	@ 0xa5
 800de28:	727b      	strb	r3, [r7, #9]
 800de2a:	2305      	movs	r3, #5
 800de2c:	72bb      	strb	r3, [r7, #10]
 800de2e:	2382      	movs	r3, #130	@ 0x82
 800de30:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((SP_Address >> 8) & 0xFF), (uint8_t)(SP_Address & 0xFF),
 800de32:	887b      	ldrh	r3, [r7, #2]
 800de34:	0a1b      	lsrs	r3, r3, #8
 800de36:	b29b      	uxth	r3, r3
 800de38:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 800de3a:	733b      	strb	r3, [r7, #12]
    (uint8_t)((SP_Address >> 8) & 0xFF), (uint8_t)(SP_Address & 0xFF),
 800de3c:	887b      	ldrh	r3, [r7, #2]
 800de3e:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 800de40:	737b      	strb	r3, [r7, #13]
 800de42:	2300      	movs	r3, #0
 800de44:	73bb      	strb	r3, [r7, #14]
 800de46:	787b      	ldrb	r3, [r7, #1]
 800de48:	73fb      	strb	r3, [r7, #15]
    (uint8_t)(0x00), (uint8_t)(width & 0xFF) };
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),500);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6818      	ldr	r0, [r3, #0]
 800de4e:	f107 0108 	add.w	r1, r7, #8
 800de52:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800de56:	2208      	movs	r2, #8
 800de58:	f7f8 f8c2 	bl	8005fe0 <HAL_UART_Transmit>
}
 800de5c:	bf00      	nop
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <DWIN_Create_Single_line>:

void DWIN_Create_Single_line(Dwin_t *pDwin, uint16_t VP_address, uint16_t x_1, uint16_t y_1, uint16_t x_2, uint16_t y_2, uint16_t color) {
 800de64:	b590      	push	{r4, r7, lr}
 800de66:	b0c5      	sub	sp, #276	@ 0x114
 800de68:	af00      	add	r7, sp, #0
 800de6a:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800de6e:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800de72:	6020      	str	r0, [r4, #0]
 800de74:	460c      	mov	r4, r1
 800de76:	4610      	mov	r0, r2
 800de78:	4619      	mov	r1, r3
 800de7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800de7e:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800de82:	4622      	mov	r2, r4
 800de84:	801a      	strh	r2, [r3, #0]
 800de86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800de8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de8e:	4602      	mov	r2, r0
 800de90:	801a      	strh	r2, [r3, #0]
 800de92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800de96:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800de9a:	460a      	mov	r2, r1
 800de9c:	801a      	strh	r2, [r3, #0]
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800de9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dea2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800dea6:	4618      	mov	r0, r3
 800dea8:	23ff      	movs	r3, #255	@ 0xff
 800deaa:	461a      	mov	r2, r3
 800deac:	2100      	movs	r1, #0
 800deae:	f002 fd8b 	bl	80109c8 <memset>
 800deb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800deb6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800deba:	225a      	movs	r2, #90	@ 0x5a
 800debc:	701a      	strb	r2, [r3, #0]
 800debe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dec2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800dec6:	22a5      	movs	r2, #165	@ 0xa5
 800dec8:	705a      	strb	r2, [r3, #1]
 800deca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dece:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800ded2:	2213      	movs	r2, #19
 800ded4:	709a      	strb	r2, [r3, #2]
 800ded6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800deda:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800dede:	2282      	movs	r2, #130	@ 0x82
 800dee0:	70da      	strb	r2, [r3, #3]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 800dee2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dee6:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800deea:	881b      	ldrh	r3, [r3, #0]
 800deec:	0a1b      	lsrs	r3, r3, #8
 800deee:	b29b      	uxth	r3, r3
 800def0:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800def2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800def6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800defa:	711a      	strb	r2, [r3, #4]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 800defc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df00:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800df04:	881b      	ldrh	r3, [r3, #0]
 800df06:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800df08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df0c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800df10:	715a      	strb	r2, [r3, #5]
 800df12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df16:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800df1a:	2202      	movs	r2, #2
 800df1c:	71da      	strb	r2, [r3, #7]
 800df1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df22:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800df26:	2201      	movs	r2, #1
 800df28:	725a      	strb	r2, [r3, #9]
                            (uint8_t)((0x0001 >> 8) & 0xFF), (uint8_t)(0x0001 & 0xFF),
                            (uint8_t)((color >> 8) & 0xFF), (uint8_t)(color & 0xFF),
 800df2a:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800df2e:	0a1b      	lsrs	r3, r3, #8
 800df30:	b29b      	uxth	r3, r3
 800df32:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800df34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df38:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800df3c:	729a      	strb	r2, [r3, #10]
                            (uint8_t)((color >> 8) & 0xFF), (uint8_t)(color & 0xFF),
 800df3e:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800df42:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800df44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df48:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800df4c:	72da      	strb	r2, [r3, #11]
 800df4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df56:	881b      	ldrh	r3, [r3, #0]
 800df58:	0a1b      	lsrs	r3, r3, #8
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	b2da      	uxtb	r2, r3
 800df5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df62:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800df66:	731a      	strb	r2, [r3, #12]
 800df68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df70:	881b      	ldrh	r3, [r3, #0]
 800df72:	b2da      	uxtb	r2, r3
 800df74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df78:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800df7c:	735a      	strb	r2, [r3, #13]
 800df7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df82:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800df86:	881b      	ldrh	r3, [r3, #0]
 800df88:	0a1b      	lsrs	r3, r3, #8
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	b2da      	uxtb	r2, r3
 800df8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df92:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800df96:	739a      	strb	r2, [r3, #14]
 800df98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df9c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800dfa0:	881b      	ldrh	r3, [r3, #0]
 800dfa2:	b2da      	uxtb	r2, r3
 800dfa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dfa8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800dfac:	73da      	strb	r2, [r3, #15]
 800dfae:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 800dfb2:	0a1b      	lsrs	r3, r3, #8
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dfbc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800dfc0:	741a      	strb	r2, [r3, #16]
 800dfc2:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 800dfc6:	b2da      	uxtb	r2, r3
 800dfc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dfcc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800dfd0:	745a      	strb	r2, [r3, #17]
 800dfd2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 800dfd6:	0a1b      	lsrs	r3, r3, #8
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	b2da      	uxtb	r2, r3
 800dfdc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dfe0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800dfe4:	749a      	strb	r2, [r3, #18]
 800dfe6:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dff0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800dff4:	74da      	strb	r2, [r3, #19]
 800dff6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dffa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800dffe:	22ff      	movs	r2, #255	@ 0xff
 800e000:	751a      	strb	r2, [r3, #20]
                            (x_1 >> 8) & 0xFF, (x_1 & 0xFF), (y_1 >> 8) & 0xFF, (y_1 & 0xFF),
                            (x_2 >> 8) & 0xFF, (x_2 & 0xFF), (y_2 >> 8) & 0xFF, (y_2 & 0xFF), 0xFF, 0x00 };
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800e002:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	6818      	ldr	r0, [r3, #0]
 800e00e:	f107 0110 	add.w	r1, r7, #16
 800e012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e016:	22ff      	movs	r2, #255	@ 0xff
 800e018:	f7f7 ffe2 	bl	8005fe0 <HAL_UART_Transmit>
}
 800e01c:	bf00      	nop
 800e01e:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800e022:	46bd      	mov	sp, r7
 800e024:	bd90      	pop	{r4, r7, pc}

0800e026 <DWIN_SetCallback>:
    }
}

// Set DWIN callback function when receive data 
void DWIN_SetCallback(Dwin_t *pDwin, pListenDWIN dwin_callback)
{
 800e026:	b480      	push	{r7}
 800e028:	b083      	sub	sp, #12
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
 800e02e:	6039      	str	r1, [r7, #0]
    pDwin->p_ListenDWIN_Callback = dwin_callback;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	683a      	ldr	r2, [r7, #0]
 800e034:	609a      	str	r2, [r3, #8]
}
 800e036:	bf00      	nop
 800e038:	370c      	adds	r7, #12
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr

0800e042 <DWIN_Listen>:

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b084      	sub	sp, #16
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
 800e04a:	6039      	str	r1, [r7, #0]
    uint16_t VPaddress;
    uint16_t lowByte;
    uint16_t highByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	2b5a      	cmp	r3, #90	@ 0x5a
 800e052:	d133      	bne.n	800e0bc <DWIN_Listen+0x7a>
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	3301      	adds	r3, #1
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	2ba5      	cmp	r3, #165	@ 0xa5
 800e05c:	d12e      	bne.n	800e0bc <DWIN_Listen+0x7a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	3303      	adds	r3, #3
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	2b83      	cmp	r3, #131	@ 0x83
 800e066:	d129      	bne.n	800e0bc <DWIN_Listen+0x7a>
        {
            datalength = RX_Buffer[2];
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	789b      	ldrb	r3, [r3, #2]
 800e06c:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 800e06e:	7bfb      	ldrb	r3, [r7, #15]
 800e070:	3302      	adds	r3, #2
 800e072:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	3304      	adds	r3, #4
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	b21b      	sxth	r3, r3
 800e07c:	021b      	lsls	r3, r3, #8
 800e07e:	b21a      	sxth	r2, r3
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	3305      	adds	r3, #5
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	b21b      	sxth	r3, r3
 800e088:	4313      	orrs	r3, r2
 800e08a:	b21b      	sxth	r3, r3
 800e08c:	81bb      	strh	r3, [r7, #12]
            /* get return key value */
            lowByte = RX_Buffer[datalength];  
 800e08e:	7bfb      	ldrb	r3, [r7, #15]
 800e090:	683a      	ldr	r2, [r7, #0]
 800e092:	4413      	add	r3, r2
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	817b      	strh	r3, [r7, #10]
            highByte = RX_Buffer[datalength-1];
 800e098:	7bfb      	ldrb	r3, [r7, #15]
 800e09a:	3b01      	subs	r3, #1
 800e09c:	683a      	ldr	r2, [r7, #0]
 800e09e:	4413      	add	r3, r2
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	813b      	strh	r3, [r7, #8]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d007      	beq.n	800e0bc <DWIN_Listen+0x7a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lowByte,highByte);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	689b      	ldr	r3, [r3, #8]
 800e0b0:	897a      	ldrh	r2, [r7, #10]
 800e0b2:	b2d1      	uxtb	r1, r2
 800e0b4:	893a      	ldrh	r2, [r7, #8]
 800e0b6:	b2d2      	uxtb	r2, r2
 800e0b8:	89b8      	ldrh	r0, [r7, #12]
 800e0ba:	4798      	blx	r3
            }
        }
    }

    
}
 800e0bc:	bf00      	nop
 800e0be:	3710      	adds	r7, #16
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <isotp_send_single_frame>:
#endif

    return ret;
}

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b086      	sub	sp, #24
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	895b      	ldrh	r3, [r3, #10]
 800e0d2:	2b07      	cmp	r3, #7
 800e0d4:	d905      	bls.n	800e0e2 <isotp_send_single_frame+0x1e>
 800e0d6:	4b1d      	ldr	r3, [pc, #116]	@ (800e14c <isotp_send_single_frame+0x88>)
 800e0d8:	4a1d      	ldr	r2, [pc, #116]	@ (800e150 <isotp_send_single_frame+0x8c>)
 800e0da:	2142      	movs	r1, #66	@ 0x42
 800e0dc:	481d      	ldr	r0, [pc, #116]	@ (800e154 <isotp_send_single_frame+0x90>)
 800e0de:	f000 fbef 	bl	800e8c0 <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 800e0e2:	7b3b      	ldrb	r3, [r7, #12]
 800e0e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e0e8:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	895b      	ldrh	r3, [r3, #10]
 800e0ee:	f003 030f 	and.w	r3, r3, #15
 800e0f2:	b2da      	uxtb	r2, r3
 800e0f4:	7b3b      	ldrb	r3, [r7, #12]
 800e0f6:	f362 0303 	bfi	r3, r2, #0, #4
 800e0fa:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6859      	ldr	r1, [r3, #4]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	895b      	ldrh	r3, [r3, #10]
 800e104:	461a      	mov	r2, r3
 800e106:	f107 030c 	add.w	r3, r7, #12
 800e10a:	3301      	adds	r3, #1
 800e10c:	4618      	mov	r0, r3
 800e10e:	f002 fd96 	bl	8010c3e <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0, sizeof(message.as.single_frame.data) - link->send_size);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	895b      	ldrh	r3, [r3, #10]
 800e116:	461a      	mov	r2, r3
 800e118:	f107 030c 	add.w	r3, r7, #12
 800e11c:	3301      	adds	r3, #1
 800e11e:	1898      	adds	r0, r3, r2
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	895b      	ldrh	r3, [r3, #10]
 800e124:	f1c3 0307 	rsb	r3, r3, #7
 800e128:	461a      	mov	r2, r3
 800e12a:	2100      	movs	r1, #0
 800e12c:	f002 fc4c 	bl	80109c8 <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 800e130:	f107 030c 	add.w	r3, r7, #12
 800e134:	2208      	movs	r2, #8
 800e136:	4619      	mov	r1, r3
 800e138:	6838      	ldr	r0, [r7, #0]
 800e13a:	f7f3 fdb7 	bl	8001cac <isotp_user_send_can>
 800e13e:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 800e140:	697b      	ldr	r3, [r7, #20]
}
 800e142:	4618      	mov	r0, r3
 800e144:	3718      	adds	r7, #24
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	08013e98 	.word	0x08013e98
 800e150:	080140f0 	.word	0x080140f0
 800e154:	08013eb0 	.word	0x08013eb0

0800e158 <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 800e158:	b580      	push	{r7, lr}
 800e15a:	b086      	sub	sp, #24
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
    
    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	895b      	ldrh	r3, [r3, #10]
 800e166:	2b07      	cmp	r3, #7
 800e168:	d805      	bhi.n	800e176 <isotp_send_first_frame+0x1e>
 800e16a:	4b1d      	ldr	r3, [pc, #116]	@ (800e1e0 <isotp_send_first_frame+0x88>)
 800e16c:	4a1d      	ldr	r2, [pc, #116]	@ (800e1e4 <isotp_send_first_frame+0x8c>)
 800e16e:	215c      	movs	r1, #92	@ 0x5c
 800e170:	481d      	ldr	r0, [pc, #116]	@ (800e1e8 <isotp_send_first_frame+0x90>)
 800e172:	f000 fba5 	bl	800e8c0 <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 800e176:	7b3b      	ldrb	r3, [r7, #12]
 800e178:	2201      	movs	r2, #1
 800e17a:	f362 1307 	bfi	r3, r2, #4, #4
 800e17e:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	895b      	ldrh	r3, [r3, #10]
 800e184:	b2db      	uxtb	r3, r3
 800e186:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	895b      	ldrh	r3, [r3, #10]
 800e18c:	0a1b      	lsrs	r3, r3, #8
 800e18e:	b29b      	uxth	r3, r3
 800e190:	f003 030f 	and.w	r3, r3, #15
 800e194:	b2da      	uxtb	r2, r3
 800e196:	7b3b      	ldrb	r3, [r7, #12]
 800e198:	f362 0303 	bfi	r3, r2, #0, #4
 800e19c:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	685a      	ldr	r2, [r3, #4]
 800e1a2:	f107 030e 	add.w	r3, r7, #14
 800e1a6:	6811      	ldr	r1, [r2, #0]
 800e1a8:	6019      	str	r1, [r3, #0]
 800e1aa:	8892      	ldrh	r2, [r2, #4]
 800e1ac:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 800e1ae:	f107 030c 	add.w	r3, r7, #12
 800e1b2:	2208      	movs	r2, #8
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	6838      	ldr	r0, [r7, #0]
 800e1b8:	f7f3 fd78 	bl	8001cac <isotp_user_send_can>
 800e1bc:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d108      	bne.n	800e1d6 <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	899b      	ldrh	r3, [r3, #12]
 800e1c8:	3306      	adds	r3, #6
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 800e1d6:	697b      	ldr	r3, [r7, #20]
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3718      	adds	r7, #24
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	08013ec8 	.word	0x08013ec8
 800e1e4:	08014108 	.word	0x08014108
 800e1e8:	08013eb0 	.word	0x08013eb0

0800e1ec <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	6819      	ldr	r1, [r3, #0]
 800e1fe:	88fb      	ldrh	r3, [r7, #6]
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	f000 f806 	bl	800e214 <isotp_send_with_id>
 800e208:	4603      	mov	r3, r0
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3710      	adds	r7, #16
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
	...

0800e214 <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 800e214:	b580      	push	{r7, lr}
 800e216:	b0a6      	sub	sp, #152	@ 0x98
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
 800e220:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d105      	bne.n	800e234 <isotp_send_with_id+0x20>
        isotp_user_debug("Link is null!");
 800e228:	4833      	ldr	r0, [pc, #204]	@ (800e2f8 <isotp_send_with_id+0xe4>)
 800e22a:	f7f3 fd70 	bl	8001d0e <isotp_user_debug>
        return ISOTP_RET_ERROR;
 800e22e:	f04f 33ff 	mov.w	r3, #4294967295
 800e232:	e05d      	b.n	800e2f0 <isotp_send_with_id+0xdc>
    }

    if (size > link->send_buf_size) {
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	891b      	ldrh	r3, [r3, #8]
 800e238:	887a      	ldrh	r2, [r7, #2]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d90d      	bls.n	800e25a <isotp_send_with_id+0x46>
        isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
 800e23e:	482f      	ldr	r0, [pc, #188]	@ (800e2fc <isotp_send_with_id+0xe8>)
 800e240:	f7f3 fd65 	bl	8001d0e <isotp_user_debug>
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 800e244:	887a      	ldrh	r2, [r7, #2]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	891b      	ldrh	r3, [r3, #8]
 800e24a:	f107 0014 	add.w	r0, r7, #20
 800e24e:	492c      	ldr	r1, [pc, #176]	@ (800e300 <isotp_send_with_id+0xec>)
 800e250:	f002 fa82 	bl	8010758 <siprintf>
        return ISOTP_RET_OVERFLOW;
 800e254:	f06f 0302 	mvn.w	r3, #2
 800e258:	e04a      	b.n	800e2f0 <isotp_send_with_id+0xdc>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e260:	2b01      	cmp	r3, #1
 800e262:	d105      	bne.n	800e270 <isotp_send_with_id+0x5c>
        isotp_user_debug("Abort previous message, transmission in progress.\n");
 800e264:	4827      	ldr	r0, [pc, #156]	@ (800e304 <isotp_send_with_id+0xf0>)
 800e266:	f7f3 fd52 	bl	8001d0e <isotp_user_debug>
        return ISOTP_RET_INPROGRESS;
 800e26a:	f06f 0301 	mvn.w	r3, #1
 800e26e:	e03f      	b.n	800e2f0 <isotp_send_with_id+0xdc>
    }

    /* copy into local buffer */
    link->send_size = size;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	887a      	ldrh	r2, [r7, #2]
 800e274:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2200      	movs	r2, #0
 800e27a:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	887a      	ldrh	r2, [r7, #2]
 800e282:	6879      	ldr	r1, [r7, #4]
 800e284:	4618      	mov	r0, r3
 800e286:	f002 fcda 	bl	8010c3e <memcpy>

    if (link->send_size < 8) {
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	895b      	ldrh	r3, [r3, #10]
 800e28e:	2b07      	cmp	r3, #7
 800e290:	d806      	bhi.n	800e2a0 <isotp_send_with_id+0x8c>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 800e292:	68b9      	ldr	r1, [r7, #8]
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f7ff ff15 	bl	800e0c4 <isotp_send_single_frame>
 800e29a:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800e29e:	e025      	b.n	800e2ec <isotp_send_with_id+0xd8>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 800e2a0:	68b9      	ldr	r1, [r7, #8]
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f7ff ff58 	bl	800e158 <isotp_send_first_frame>
 800e2a8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 800e2ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d11b      	bne.n	800e2ec <isotp_send_with_id+0xd8>
            link->send_bs_remain = 0;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 800e2c6:	f7f3 fd1b 	bl	8001d00 <isotp_user_get_ms>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800e2d0:	f7f3 fd16 	bl	8001d00 <isotp_user_get_ms>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 800e2ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3798      	adds	r7, #152	@ 0x98
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	08013fcc 	.word	0x08013fcc
 800e2fc:	08013fdc 	.word	0x08013fdc
 800e300:	08014030 	.word	0x08014030
 800e304:	08014060 	.word	0x08014060

0800e308 <isotp_init_link>:
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;

    return ISOTP_RET_OK;
}

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	607a      	str	r2, [r7, #4]
 800e314:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 800e316:	2240      	movs	r2, #64	@ 0x40
 800e318:	2100      	movs	r1, #0
 800e31a:	68f8      	ldr	r0, [r7, #12]
 800e31c:	f002 fb54 	bl	80109c8 <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	2200      	movs	r2, #0
 800e324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2200      	movs	r2, #0
 800e32c:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	68ba      	ldr	r2, [r7, #8]
 800e334:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	887a      	ldrh	r2, [r7, #2]
 800e340:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	69ba      	ldr	r2, [r7, #24]
 800e346:	629a      	str	r2, [r3, #40]	@ 0x28
    link->receive_buf_size = recvbufsize;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	8bba      	ldrh	r2, [r7, #28]
 800e34c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    return;
 800e34e:	bf00      	nop
}
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <OS_task_init>:
/* Initialize object by assigning init and dispatch handler function */
void OS_task_init(
    OS_task * const pOS_task,
    OS_handler init,
    OS_handler dispatch) 
{
 800e356:	b480      	push	{r7}
 800e358:	b085      	sub	sp, #20
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	60f8      	str	r0, [r7, #12]
 800e35e:	60b9      	str	r1, [r7, #8]
 800e360:	607a      	str	r2, [r7, #4]
    pOS_task->init = init;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	68ba      	ldr	r2, [r7, #8]
 800e366:	601a      	str	r2, [r3, #0]
    pOS_task->dispatch = dispatch;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	605a      	str	r2, [r3, #4]
}
 800e36e:	bf00      	nop
 800e370:	3714      	adds	r7, #20
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr

0800e37a <OS_task_create>:
    OS_task * const pOS_task,
    OS_taskPrio task_prio,
    OS_event_t const **pBuf ,
    OS_EQCt eqLen,
    OS_event_t const * const init_e)
{
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b084      	sub	sp, #16
 800e37e:	af00      	add	r7, sp, #0
 800e380:	60f8      	str	r0, [r7, #12]
 800e382:	607a      	str	r2, [r7, #4]
 800e384:	461a      	mov	r2, r3
 800e386:	460b      	mov	r3, r1
 800e388:	72fb      	strb	r3, [r7, #11]
 800e38a:	4613      	mov	r3, r2
 800e38c:	72bb      	strb	r3, [r7, #10]
    /* check parameter */
    if ( task_prio > 0  /* the priority must be greater than 0 */
 800e38e:	7afb      	ldrb	r3, [r7, #11]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d020      	beq.n	800e3d6 <OS_task_create+0x5c>
        && pBuf != (OS_event_t const **)0 /* The queue exists */
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d01d      	beq.n	800e3d6 <OS_task_create+0x5c>
        && eqLen > 0) { /* the length greater than 0 */
 800e39a:	7abb      	ldrb	r3, [r7, #10]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d01a      	beq.n	800e3d6 <OS_task_create+0x5c>
        pOS_task->qBuf = pBuf;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	609a      	str	r2, [r3, #8]
        pOS_task->end = eqLen - 1;
 800e3a6:	7abb      	ldrb	r3, [r7, #10]
 800e3a8:	3b01      	subs	r3, #1
 800e3aa:	b2da      	uxtb	r2, r3
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	731a      	strb	r2, [r3, #12]
        pOS_task->head = 0;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	735a      	strb	r2, [r3, #13]
        pOS_task->tail = 0;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	739a      	strb	r2, [r3, #14]
        pOS_task->nUsed = 0;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	73da      	strb	r2, [r3, #15]

        /* Set task priority */
        // OS_setTask_priority(pOS_task,task_prio);
        pOS_task->task_piro = task_prio - 1;
 800e3c2:	7afb      	ldrb	r3, [r7, #11]
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	b2da      	uxtb	r2, r3
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	741a      	strb	r2, [r3, #16]


        /* Initialize task with initialization event */
        (*pOS_task->init)(pOS_task,init_e);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	69b9      	ldr	r1, [r7, #24]
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	4798      	blx	r3
    } 
}
 800e3d6:	bf00      	nop
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
	...

0800e3e0 <OS_task_post>:
 * @brief Post the event to event queue of task 
 * 
 * @param pOS_task 
 * @param pEvent 
 */ 
void OS_task_post(OS_task *const pOS_task, OS_event_t const * const pEvent) {
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
    OS_ring_buf_tcb *pQueue = &pri_queue[pOS_task->task_piro];
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	7c1b      	ldrb	r3, [r3, #16]
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	2358      	movs	r3, #88	@ 0x58
 800e3f2:	fb02 f303 	mul.w	r3, r2, r3
 800e3f6:	4a30      	ldr	r2, [pc, #192]	@ (800e4b8 <OS_task_post+0xd8>)
 800e3f8:	4413      	add	r3, r2
 800e3fa:	60fb      	str	r3, [r7, #12]

    /* Check over flow of queue */
    if (pri_queue[pOS_task->task_piro].nUsed >= OS_TASK_PER_PRI || pOS_task->nUsed > pOS_task->end ) { /* full queue */
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	7c1b      	ldrb	r3, [r3, #16]
 800e400:	4619      	mov	r1, r3
 800e402:	4a2d      	ldr	r2, [pc, #180]	@ (800e4b8 <OS_task_post+0xd8>)
 800e404:	2358      	movs	r3, #88	@ 0x58
 800e406:	fb01 f303 	mul.w	r3, r1, r3
 800e40a:	4413      	add	r3, r2
 800e40c:	3303      	adds	r3, #3
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	2b09      	cmp	r3, #9
 800e412:	d84d      	bhi.n	800e4b0 <OS_task_post+0xd0>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	7bda      	ldrb	r2, [r3, #15]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	7b1b      	ldrb	r3, [r3, #12]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d847      	bhi.n	800e4b0 <OS_task_post+0xd0>
        return;
    }

    /* insert tcb to queue */
    OS_PORT_CRIT_ENTRY();
 800e420:	b672      	cpsid	i
    pQueue->buf_tcb[pQueue->head_index].pEvent = pEvent;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	00db      	lsls	r3, r3, #3
 800e42a:	4413      	add	r3, r2
 800e42c:	683a      	ldr	r2, [r7, #0]
 800e42e:	609a      	str	r2, [r3, #8]
    pQueue->buf_tcb[pQueue->head_index].pOS_task = pOS_task;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	00db      	lsls	r3, r3, #3
 800e438:	4413      	add	r3, r2
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	605a      	str	r2, [r3, #4]

    if (pQueue->head_index == 0) {
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d103      	bne.n	800e44e <OS_task_post+0x6e>
        pQueue->head_index = OS_TASK_PER_PRI - 1; /* wrap around to end of the buffer */
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2209      	movs	r2, #9
 800e44a:	701a      	strb	r2, [r3, #0]
 800e44c:	e005      	b.n	800e45a <OS_task_post+0x7a>
    } else {
        --pQueue->head_index;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	3b01      	subs	r3, #1
 800e454:	b2da      	uxtb	r2, r3
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	701a      	strb	r2, [r3, #0]
    }
    ++pQueue->nUsed; /* Increase number event used in queue */
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	78db      	ldrb	r3, [r3, #3]
 800e45e:	3301      	adds	r3, #1
 800e460:	b2da      	uxtb	r2, r3
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	70da      	strb	r2, [r3, #3]

    pOS_task->qBuf[pOS_task->head] = pEvent; /* insert event to queue */
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	689a      	ldr	r2, [r3, #8]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	7b5b      	ldrb	r3, [r3, #13]
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4413      	add	r3, r2
 800e472:	683a      	ldr	r2, [r7, #0]
 800e474:	601a      	str	r2, [r3, #0]
    if (pOS_task->head == 0) { 
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	7b5b      	ldrb	r3, [r3, #13]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d104      	bne.n	800e488 <OS_task_post+0xa8>
        pOS_task->head = pOS_task->end; /* wrap around to end of the buffer */
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	7b1a      	ldrb	r2, [r3, #12]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	735a      	strb	r2, [r3, #13]
 800e486:	e005      	b.n	800e494 <OS_task_post+0xb4>
    } else {
        --pOS_task->head;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	7b5b      	ldrb	r3, [r3, #13]
 800e48c:	3b01      	subs	r3, #1
 800e48e:	b2da      	uxtb	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	735a      	strb	r2, [r3, #13]
    }
    ++pOS_task->nUsed; /* Increase number event used in queue */
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	7bdb      	ldrb	r3, [r3, #15]
 800e498:	3301      	adds	r3, #1
 800e49a:	b2da      	uxtb	r2, r3
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	73da      	strb	r2, [r3, #15]

    /* Post event -> make the interrupt */
    // OS_PORT_TASK_PEND();
    HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4a4:	b25b      	sxtb	r3, r3
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7f4 fabb 	bl	8002a22 <HAL_NVIC_SetPendingIRQ>
    OS_PORT_CRIT_EXIT();
 800e4ac:	b662      	cpsie	i
 800e4ae:	e000      	b.n	800e4b2 <OS_task_post+0xd2>
        return;
 800e4b0:	bf00      	nop
}
 800e4b2:	3710      	adds	r7, #16
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	200015d4 	.word	0x200015d4

0800e4bc <OS_task_post_event>:

void OS_task_post_event(OS_task *const pOS_task,uint8_t sig, uint8_t *data, uint32_t size) {
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b086      	sub	sp, #24
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	607a      	str	r2, [r7, #4]
 800e4c6:	603b      	str	r3, [r7, #0]
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	72fb      	strb	r3, [r7, #11]
    OS_event_t *e = get_dynamic_event();
 800e4cc:	f000 f990 	bl	800e7f0 <get_dynamic_event>
 800e4d0:	6178      	str	r0, [r7, #20]
    set_sig_dynamic_event(e,sig);
 800e4d2:	7afb      	ldrb	r3, [r7, #11]
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	6978      	ldr	r0, [r7, #20]
 800e4d8:	f000 f9d6 	bl	800e888 <set_sig_dynamic_event>
    set_data_dynamic_event(e,data,size);
 800e4dc:	683a      	ldr	r2, [r7, #0]
 800e4de:	6879      	ldr	r1, [r7, #4]
 800e4e0:	6978      	ldr	r0, [r7, #20]
 800e4e2:	f000 f9af 	bl	800e844 <set_data_dynamic_event>
    OS_task_post(pOS_task,e);
 800e4e6:	6979      	ldr	r1, [r7, #20]
 800e4e8:	68f8      	ldr	r0, [r7, #12]
 800e4ea:	f7ff ff79 	bl	800e3e0 <OS_task_post>
}
 800e4ee:	bf00      	nop
 800e4f0:	3718      	adds	r7, #24
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
	...

0800e4f8 <OS_TimeEvt_init>:

void OS_TimeEvt_init(
    OS_TimeEvt *pOS_Evt,
    uint16_t  sig,
    OS_task *task)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b085      	sub	sp, #20
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	460b      	mov	r3, r1
 800e502:	607a      	str	r2, [r7, #4]
 800e504:	817b      	strh	r3, [r7, #10]
    pOS_Evt->Time_event.sig = sig;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	897a      	ldrh	r2, [r7, #10]
 800e50a:	801a      	strh	r2, [r3, #0]
//    pOS_Evt->Time_event.data = 0;
    pOS_Evt->Time_event.len = 0;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2200      	movs	r2, #0
 800e510:	645a      	str	r2, [r3, #68]	@ 0x44
    pOS_Evt->task_post = task;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	64da      	str	r2, [r3, #76]	@ 0x4c
    pOS_Evt->Time_Ctr = 0;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2200      	movs	r2, #0
 800e51c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = 0;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2200      	movs	r2, #0
 800e524:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* add new node to head of liked list */
    pOS_Evt->next = timeEvt_head;
 800e528:	4b06      	ldr	r3, [pc, #24]	@ (800e544 <OS_TimeEvt_init+0x4c>)
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	649a      	str	r2, [r3, #72]	@ 0x48
    timeEvt_head = pOS_Evt;
 800e530:	4a04      	ldr	r2, [pc, #16]	@ (800e544 <OS_TimeEvt_init+0x4c>)
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6013      	str	r3, [r2, #0]
} 
 800e536:	bf00      	nop
 800e538:	3714      	adds	r7, #20
 800e53a:	46bd      	mov	sp, r7
 800e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e540:	4770      	bx	lr
 800e542:	bf00      	nop
 800e544:	200016dc 	.word	0x200016dc

0800e548 <OS_TimeEvt_Set>:
 * 
 * @param pOS_Evt Timer for generating event when TIMEOUT 
 * @param count TIMEOUT value 
 * @param interval interval value for periodic time event
 */
void OS_TimeEvt_Set(OS_TimeEvt *pOS_Evt, uint16_t count, uint16_t interval) {
 800e548:	b480      	push	{r7}
 800e54a:	b083      	sub	sp, #12
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	460b      	mov	r3, r1
 800e552:	807b      	strh	r3, [r7, #2]
 800e554:	4613      	mov	r3, r2
 800e556:	803b      	strh	r3, [r7, #0]
    OS_PORT_CRIT_ENTRY();
 800e558:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = count;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	887a      	ldrh	r2, [r7, #2]
 800e55e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = interval;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	883a      	ldrh	r2, [r7, #0]
 800e566:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    OS_PORT_CRIT_EXIT();
 800e56a:	b662      	cpsie	i
}
 800e56c:	bf00      	nop
 800e56e:	370c      	adds	r7, #12
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <OS_TimeEvt_tick>:

/**
 * @brief function in systemtick handler (1ms) to execute task time OS 
 * 
 */
void OS_TimeEvt_tick(void) {
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
    /* run for all the node time event */
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 800e57e:	4b1b      	ldr	r3, [pc, #108]	@ (800e5ec <OS_TimeEvt_tick+0x74>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	607b      	str	r3, [r7, #4]
 800e584:	e029      	b.n	800e5da <OS_TimeEvt_tick+0x62>
        OS_PORT_CRIT_ENTRY();
 800e586:	b672      	cpsid	i
        if (node->Time_Ctr == 0) { /* down counter = 0  -> stop node */
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d101      	bne.n	800e596 <OS_TimeEvt_tick+0x1e>
            OS_PORT_CRIT_EXIT();
 800e592:	b662      	cpsie	i
 800e594:	e01e      	b.n	800e5d4 <OS_TimeEvt_tick+0x5c>
        } else if (node->Time_Ctr == 1) { /* TIMEOUT */
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d110      	bne.n	800e5c2 <OS_TimeEvt_tick+0x4a>
            node->Time_Ctr = node->Time_interval;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 800e5ac:	b662      	cpsie	i
            /* Post event */
            // OS_task_post(node->task_post,&node->Time_event);
            OS_task_post_event(node->task_post,node->Time_event.sig,(uint8_t *)0,0);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	b2d9      	uxtb	r1, r3
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f7ff ff7e 	bl	800e4bc <OS_task_post_event>
 800e5c0:	e008      	b.n	800e5d4 <OS_TimeEvt_tick+0x5c>
        } else { /* count down value */
            --node->Time_Ctr;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e5c8:	3b01      	subs	r3, #1
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 800e5d2:	b662      	cpsie	i
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5d8:	607b      	str	r3, [r7, #4]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1d2      	bne.n	800e586 <OS_TimeEvt_tick+0xe>
        }
    }
}
 800e5e0:	bf00      	nop
 800e5e2:	bf00      	nop
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	200016dc 	.word	0x200016dc

0800e5f0 <OS_task_activate>:
/**
 * @brief The task performs an action when it receives an event from the queue. Call in interrupt handler to get event and dispatch
 * 
 * @param pOS_task Task pointer
 */
void OS_task_activate(uint8_t prio_task) {
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b086      	sub	sp, #24
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	71fb      	strb	r3, [r7, #7]
    OS_ring_buf_tcb *pQueue = &pri_queue[prio_task - 1];
 800e5fa:	79fb      	ldrb	r3, [r7, #7]
 800e5fc:	3b01      	subs	r3, #1
 800e5fe:	2258      	movs	r2, #88	@ 0x58
 800e600:	fb02 f303 	mul.w	r3, r2, r3
 800e604:	4a2e      	ldr	r2, [pc, #184]	@ (800e6c0 <OS_task_activate+0xd0>)
 800e606:	4413      	add	r3, r2
 800e608:	617b      	str	r3, [r7, #20]
    
    if (pQueue->nUsed == 0) { /* don't have tcb */
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	78db      	ldrb	r3, [r3, #3]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d050      	beq.n	800e6b4 <OS_task_activate+0xc4>
        return;
    }
    
    uint8_t index = pQueue->tail_index;
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	785b      	ldrb	r3, [r3, #1]
 800e616:	74fb      	strb	r3, [r7, #19]
    if (pQueue->tail_index == 0) {
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	785b      	ldrb	r3, [r3, #1]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d103      	bne.n	800e628 <OS_task_activate+0x38>
        pQueue->tail_index = OS_TASK_PER_PRI - 1; /* wrap around */
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	2209      	movs	r2, #9
 800e624:	705a      	strb	r2, [r3, #1]
 800e626:	e005      	b.n	800e634 <OS_task_activate+0x44>
    } else {
        --pQueue->tail_index;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	785b      	ldrb	r3, [r3, #1]
 800e62c:	3b01      	subs	r3, #1
 800e62e:	b2da      	uxtb	r2, r3
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	705a      	strb	r2, [r3, #1]
    }

    --pQueue->nUsed;
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	78db      	ldrb	r3, [r3, #3]
 800e638:	3b01      	subs	r3, #1
 800e63a:	b2da      	uxtb	r2, r3
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	70da      	strb	r2, [r3, #3]

    OS_task *pOS_task = pQueue->buf_tcb[index].pOS_task;
 800e640:	7cfb      	ldrb	r3, [r7, #19]
 800e642:	697a      	ldr	r2, [r7, #20]
 800e644:	00db      	lsls	r3, r3, #3
 800e646:	4413      	add	r3, r2
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	60fb      	str	r3, [r7, #12]

    /* Check event in queue */
    if (pOS_task->nUsed == 0) { /* don't have event in queue */
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	7bdb      	ldrb	r3, [r3, #15]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d031      	beq.n	800e6b8 <OS_task_activate+0xc8>
        return;
    }

    OS_event_t const *e_receive = pQueue->buf_tcb[index].pEvent;
 800e654:	7cfb      	ldrb	r3, [r7, #19]
 800e656:	697a      	ldr	r2, [r7, #20]
 800e658:	00db      	lsls	r3, r3, #3
 800e65a:	4413      	add	r3, r2
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	60bb      	str	r3, [r7, #8]
    if (pOS_task->tail == 0) {
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	7b9b      	ldrb	r3, [r3, #14]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d104      	bne.n	800e672 <OS_task_activate+0x82>
        pOS_task->tail = pOS_task->end; /* wrap around */
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	7b1a      	ldrb	r2, [r3, #12]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	739a      	strb	r2, [r3, #14]
 800e670:	e005      	b.n	800e67e <OS_task_activate+0x8e>
    } else {
        --pOS_task->tail;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	7b9b      	ldrb	r3, [r3, #14]
 800e676:	3b01      	subs	r3, #1
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	739a      	strb	r2, [r3, #14]
    }
    OS_PORT_CRIT_ENTRY();
 800e67e:	b672      	cpsid	i
    // --pOS_task->nUsed;
    if (--pOS_task->nUsed > 0) { /* check have any event in queue */
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	7bdb      	ldrb	r3, [r3, #15]
 800e684:	3b01      	subs	r3, #1
 800e686:	b2da      	uxtb	r2, r3
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	73da      	strb	r2, [r3, #15]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	7bdb      	ldrb	r3, [r3, #15]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d005      	beq.n	800e6a0 <OS_task_activate+0xb0>
        HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e698:	b25b      	sxtb	r3, r3
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7f4 f9c1 	bl	8002a22 <HAL_NVIC_SetPendingIRQ>
    }
    OS_PORT_CRIT_EXIT();
 800e6a0:	b662      	cpsie	i

    /* Dispatch the received event to this task */
    (*pOS_task->dispatch)(pOS_task,e_receive);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	68b9      	ldr	r1, [r7, #8]
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	4798      	blx	r3

    free_dynamic_event(e_receive);
 800e6ac:	68b8      	ldr	r0, [r7, #8]
 800e6ae:	f000 f873 	bl	800e798 <free_dynamic_event>
 800e6b2:	e002      	b.n	800e6ba <OS_task_activate+0xca>
        return;
 800e6b4:	bf00      	nop
 800e6b6:	e000      	b.n	800e6ba <OS_task_activate+0xca>
        return;
 800e6b8:	bf00      	nop
}
 800e6ba:	3718      	adds	r7, #24
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	200015d4 	.word	0x200015d4

0800e6c4 <OS_priority_IRQ>:
 * @brief Set task priority 
 * 
 * @param pOS_task Task pointer 
 * @param prio task priority 
 */
void OS_priority_IRQ(uint8_t IRQ, OS_taskPrio prio) {
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	460a      	mov	r2, r1
 800e6ce:	71fb      	strb	r3, [r7, #7]
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	71bb      	strb	r3, [r7, #6]
    HAL_NVIC_SetPriority(IRQ,(15U - prio),0);
 800e6d4:	f997 0007 	ldrsb.w	r0, [r7, #7]
 800e6d8:	79bb      	ldrb	r3, [r7, #6]
 800e6da:	f1c3 030f 	rsb	r3, r3, #15
 800e6de:	2200      	movs	r2, #0
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	f7f4 f968 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQ);
 800e6e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7f4 f97f 	bl	80029ee <HAL_NVIC_EnableIRQ>
}
 800e6f0:	bf00      	nop
 800e6f2:	3708      	adds	r7, #8
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <OS_prio_setIRQ>:
 * @brief Set the number IRQ for specific priority
 * 
 * @param prio priority begin from 1 
 * @param num_irq IRQ number 
 */
void OS_prio_setIRQ(uint8_t prio, uint8_t num_irq) {
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	4603      	mov	r3, r0
 800e700:	460a      	mov	r2, r1
 800e702:	71fb      	strb	r3, [r7, #7]
 800e704:	4613      	mov	r3, r2
 800e706:	71bb      	strb	r3, [r7, #6]
    if (prio < OS_PRI_MAX) {
 800e708:	79fb      	ldrb	r3, [r7, #7]
 800e70a:	2b02      	cmp	r3, #2
 800e70c:	d809      	bhi.n	800e722 <OS_prio_setIRQ+0x2a>
        pri_queue[prio - 1].nvic_irq = num_irq;
 800e70e:	79fb      	ldrb	r3, [r7, #7]
 800e710:	3b01      	subs	r3, #1
 800e712:	79ba      	ldrb	r2, [r7, #6]
 800e714:	4906      	ldr	r1, [pc, #24]	@ (800e730 <OS_prio_setIRQ+0x38>)
 800e716:	2058      	movs	r0, #88	@ 0x58
 800e718:	fb00 f303 	mul.w	r3, r0, r3
 800e71c:	440b      	add	r3, r1
 800e71e:	3354      	adds	r3, #84	@ 0x54
 800e720:	601a      	str	r2, [r3, #0]
    }
}
 800e722:	bf00      	nop
 800e724:	370c      	adds	r7, #12
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	200015d4 	.word	0x200015d4

0800e734 <OS_Test_setIRQ>:

void OS_Test_setIRQ(OS_task * const pAO, uint8_t num_irq) {
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	460b      	mov	r3, r1
 800e73e:	70fb      	strb	r3, [r7, #3]
    pAO->nvic_irq = num_irq;
 800e740:	78fa      	ldrb	r2, [r7, #3]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	619a      	str	r2, [r3, #24]
}
 800e746:	bf00      	nop
 800e748:	370c      	adds	r7, #12
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr
	...

0800e754 <dynamic_event_pool_init>:
static OS_event_t dynamic_event_pool[OS_EVT_POOL_SIZE];
static uint8_t dynamic_event_pool_free[OS_EVT_POOL_SIZE]; /* Store index in free */
static uint8_t dynamic_event_free_stack; /* point to the next index freen in pool */


void dynamic_event_pool_init(void) {
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 800e75a:	b672      	cpsid	i

    dynamic_event_free_stack = 0;
 800e75c:	4b0c      	ldr	r3, [pc, #48]	@ (800e790 <dynamic_event_pool_init+0x3c>)
 800e75e:	2200      	movs	r2, #0
 800e760:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 800e762:	2300      	movs	r3, #0
 800e764:	71fb      	strb	r3, [r7, #7]
 800e766:	e006      	b.n	800e776 <dynamic_event_pool_init+0x22>
        dynamic_event_pool_free[i] = i; /* Store the index free */
 800e768:	79fb      	ldrb	r3, [r7, #7]
 800e76a:	490a      	ldr	r1, [pc, #40]	@ (800e794 <dynamic_event_pool_init+0x40>)
 800e76c:	79fa      	ldrb	r2, [r7, #7]
 800e76e:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 800e770:	79fb      	ldrb	r3, [r7, #7]
 800e772:	3301      	adds	r3, #1
 800e774:	71fb      	strb	r3, [r7, #7]
 800e776:	79fb      	ldrb	r3, [r7, #7]
 800e778:	2b09      	cmp	r3, #9
 800e77a:	d9f5      	bls.n	800e768 <dynamic_event_pool_init+0x14>
    }
    dynamic_event_free_stack = OS_EVT_POOL_SIZE;
 800e77c:	4b04      	ldr	r3, [pc, #16]	@ (800e790 <dynamic_event_pool_init+0x3c>)
 800e77e:	220a      	movs	r2, #10
 800e780:	701a      	strb	r2, [r3, #0]
    
    OS_PORT_CRIT_EXIT();
 800e782:	b662      	cpsie	i
}
 800e784:	bf00      	nop
 800e786:	370c      	adds	r7, #12
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr
 800e790:	200019ba 	.word	0x200019ba
 800e794:	200019b0 	.word	0x200019b0

0800e798 <free_dynamic_event>:


void free_dynamic_event(OS_event_t *e) {
 800e798:	b480      	push	{r7}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 800e7a0:	b672      	cpsid	i

    uint8_t idx = e - dynamic_event_pool; /* Get index of event */
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	4a0e      	ldr	r2, [pc, #56]	@ (800e7e0 <free_dynamic_event+0x48>)
 800e7a6:	1a9b      	subs	r3, r3, r2
 800e7a8:	10db      	asrs	r3, r3, #3
 800e7aa:	4a0e      	ldr	r2, [pc, #56]	@ (800e7e4 <free_dynamic_event+0x4c>)
 800e7ac:	fb02 f303 	mul.w	r3, r2, r3
 800e7b0:	73fb      	strb	r3, [r7, #15]
//    free(e->data); /* free allocated memory */
    if (idx > 0 && idx < OS_EVT_POOL_SIZE) {
 800e7b2:	7bfb      	ldrb	r3, [r7, #15]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d00c      	beq.n	800e7d2 <free_dynamic_event+0x3a>
 800e7b8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ba:	2b09      	cmp	r3, #9
 800e7bc:	d809      	bhi.n	800e7d2 <free_dynamic_event+0x3a>
        dynamic_event_pool_free[dynamic_event_free_stack++] = idx; 
 800e7be:	4b0a      	ldr	r3, [pc, #40]	@ (800e7e8 <free_dynamic_event+0x50>)
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	1c5a      	adds	r2, r3, #1
 800e7c4:	b2d1      	uxtb	r1, r2
 800e7c6:	4a08      	ldr	r2, [pc, #32]	@ (800e7e8 <free_dynamic_event+0x50>)
 800e7c8:	7011      	strb	r1, [r2, #0]
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	4a07      	ldr	r2, [pc, #28]	@ (800e7ec <free_dynamic_event+0x54>)
 800e7ce:	7bfb      	ldrb	r3, [r7, #15]
 800e7d0:	5453      	strb	r3, [r2, r1]
    }

    OS_PORT_CRIT_EXIT();
 800e7d2:	b662      	cpsie	i
}
 800e7d4:	bf00      	nop
 800e7d6:	3714      	adds	r7, #20
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr
 800e7e0:	200016e0 	.word	0x200016e0
 800e7e4:	38e38e39 	.word	0x38e38e39
 800e7e8:	200019ba 	.word	0x200019ba
 800e7ec:	200019b0 	.word	0x200019b0

0800e7f0 <get_dynamic_event>:

OS_event_t *get_dynamic_event(void) {
 800e7f0:	b480      	push	{r7}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 800e7f6:	b672      	cpsid	i
    
    if (dynamic_event_free_stack == 0) return NULL; /* full */
 800e7f8:	4b0f      	ldr	r3, [pc, #60]	@ (800e838 <get_dynamic_event+0x48>)
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d101      	bne.n	800e804 <get_dynamic_event+0x14>
 800e800:	2300      	movs	r3, #0
 800e802:	e013      	b.n	800e82c <get_dynamic_event+0x3c>
    uint8_t idx = dynamic_event_pool_free[--dynamic_event_free_stack]; /* Get index in free */
 800e804:	4b0c      	ldr	r3, [pc, #48]	@ (800e838 <get_dynamic_event+0x48>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	3b01      	subs	r3, #1
 800e80a:	b2da      	uxtb	r2, r3
 800e80c:	4b0a      	ldr	r3, [pc, #40]	@ (800e838 <get_dynamic_event+0x48>)
 800e80e:	701a      	strb	r2, [r3, #0]
 800e810:	4b09      	ldr	r3, [pc, #36]	@ (800e838 <get_dynamic_event+0x48>)
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	461a      	mov	r2, r3
 800e816:	4b09      	ldr	r3, [pc, #36]	@ (800e83c <get_dynamic_event+0x4c>)
 800e818:	5c9b      	ldrb	r3, [r3, r2]
 800e81a:	71fb      	strb	r3, [r7, #7]
    
    OS_PORT_CRIT_EXIT();
 800e81c:	b662      	cpsie	i
    return &dynamic_event_pool[idx];
 800e81e:	79fa      	ldrb	r2, [r7, #7]
 800e820:	4613      	mov	r3, r2
 800e822:	00db      	lsls	r3, r3, #3
 800e824:	4413      	add	r3, r2
 800e826:	00db      	lsls	r3, r3, #3
 800e828:	4a05      	ldr	r2, [pc, #20]	@ (800e840 <get_dynamic_event+0x50>)
 800e82a:	4413      	add	r3, r2
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr
 800e838:	200019ba 	.word	0x200019ba
 800e83c:	200019b0 	.word	0x200019b0
 800e840:	200016e0 	.word	0x200016e0

0800e844 <set_data_dynamic_event>:

void set_data_dynamic_event(OS_event_t *e, uint8_t *data, uint32_t len) {
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
    if (len != 0) {
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d00a      	beq.n	800e86c <set_data_dynamic_event+0x28>
        e->len = len;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	645a      	str	r2, [r3, #68]	@ 0x44
        memcpy(e->data,data,len);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	3302      	adds	r3, #2
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	68b9      	ldr	r1, [r7, #8]
 800e864:	4618      	mov	r0, r3
 800e866:	f002 f9ea 	bl	8010c3e <memcpy>
    } else {
        e->len = len;
        memset(e->data, 0, sizeof(e->data));
    }
}
 800e86a:	e009      	b.n	800e880 <set_data_dynamic_event+0x3c>
        e->len = len;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	645a      	str	r2, [r3, #68]	@ 0x44
        memset(e->data, 0, sizeof(e->data));
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	3302      	adds	r3, #2
 800e876:	2240      	movs	r2, #64	@ 0x40
 800e878:	2100      	movs	r1, #0
 800e87a:	4618      	mov	r0, r3
 800e87c:	f002 f8a4 	bl	80109c8 <memset>
}
 800e880:	bf00      	nop
 800e882:	3710      	adds	r7, #16
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <set_sig_dynamic_event>:

void set_sig_dynamic_event(OS_event_t *e, uint8_t sig) {
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	460b      	mov	r3, r1
 800e892:	70fb      	strb	r3, [r7, #3]
    e->sig = sig;
 800e894:	78fb      	ldrb	r3, [r7, #3]
 800e896:	b29a      	uxth	r2, r3
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	801a      	strh	r2, [r3, #0]
}
 800e89c:	bf00      	nop
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <get_data_dynamic_event>:

uint8_t *get_data_dynamic_event(OS_event_t * const e) {
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
    return (e->data);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	3302      	adds	r3, #2
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <__assert_func>:
 800e8c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8c2:	4614      	mov	r4, r2
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	4b09      	ldr	r3, [pc, #36]	@ (800e8ec <__assert_func+0x2c>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4605      	mov	r5, r0
 800e8cc:	68d8      	ldr	r0, [r3, #12]
 800e8ce:	b14c      	cbz	r4, 800e8e4 <__assert_func+0x24>
 800e8d0:	4b07      	ldr	r3, [pc, #28]	@ (800e8f0 <__assert_func+0x30>)
 800e8d2:	9100      	str	r1, [sp, #0]
 800e8d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8d8:	4906      	ldr	r1, [pc, #24]	@ (800e8f4 <__assert_func+0x34>)
 800e8da:	462b      	mov	r3, r5
 800e8dc:	f001 fe78 	bl	80105d0 <fiprintf>
 800e8e0:	f002 f9cc 	bl	8010c7c <abort>
 800e8e4:	4b04      	ldr	r3, [pc, #16]	@ (800e8f8 <__assert_func+0x38>)
 800e8e6:	461c      	mov	r4, r3
 800e8e8:	e7f3      	b.n	800e8d2 <__assert_func+0x12>
 800e8ea:	bf00      	nop
 800e8ec:	200002a8 	.word	0x200002a8
 800e8f0:	0801411f 	.word	0x0801411f
 800e8f4:	0801412c 	.word	0x0801412c
 800e8f8:	0801415a 	.word	0x0801415a

0800e8fc <atof>:
 800e8fc:	2100      	movs	r1, #0
 800e8fe:	f000 becd 	b.w	800f69c <strtod>

0800e902 <atoi>:
 800e902:	220a      	movs	r2, #10
 800e904:	2100      	movs	r1, #0
 800e906:	f000 bf51 	b.w	800f7ac <strtol>
	...

0800e90c <malloc>:
 800e90c:	4b02      	ldr	r3, [pc, #8]	@ (800e918 <malloc+0xc>)
 800e90e:	4601      	mov	r1, r0
 800e910:	6818      	ldr	r0, [r3, #0]
 800e912:	f000 b82d 	b.w	800e970 <_malloc_r>
 800e916:	bf00      	nop
 800e918:	200002a8 	.word	0x200002a8

0800e91c <free>:
 800e91c:	4b02      	ldr	r3, [pc, #8]	@ (800e928 <free+0xc>)
 800e91e:	4601      	mov	r1, r0
 800e920:	6818      	ldr	r0, [r3, #0]
 800e922:	f003 b80d 	b.w	8011940 <_free_r>
 800e926:	bf00      	nop
 800e928:	200002a8 	.word	0x200002a8

0800e92c <sbrk_aligned>:
 800e92c:	b570      	push	{r4, r5, r6, lr}
 800e92e:	4e0f      	ldr	r6, [pc, #60]	@ (800e96c <sbrk_aligned+0x40>)
 800e930:	460c      	mov	r4, r1
 800e932:	6831      	ldr	r1, [r6, #0]
 800e934:	4605      	mov	r5, r0
 800e936:	b911      	cbnz	r1, 800e93e <sbrk_aligned+0x12>
 800e938:	f002 f92a 	bl	8010b90 <_sbrk_r>
 800e93c:	6030      	str	r0, [r6, #0]
 800e93e:	4621      	mov	r1, r4
 800e940:	4628      	mov	r0, r5
 800e942:	f002 f925 	bl	8010b90 <_sbrk_r>
 800e946:	1c43      	adds	r3, r0, #1
 800e948:	d103      	bne.n	800e952 <sbrk_aligned+0x26>
 800e94a:	f04f 34ff 	mov.w	r4, #4294967295
 800e94e:	4620      	mov	r0, r4
 800e950:	bd70      	pop	{r4, r5, r6, pc}
 800e952:	1cc4      	adds	r4, r0, #3
 800e954:	f024 0403 	bic.w	r4, r4, #3
 800e958:	42a0      	cmp	r0, r4
 800e95a:	d0f8      	beq.n	800e94e <sbrk_aligned+0x22>
 800e95c:	1a21      	subs	r1, r4, r0
 800e95e:	4628      	mov	r0, r5
 800e960:	f002 f916 	bl	8010b90 <_sbrk_r>
 800e964:	3001      	adds	r0, #1
 800e966:	d1f2      	bne.n	800e94e <sbrk_aligned+0x22>
 800e968:	e7ef      	b.n	800e94a <sbrk_aligned+0x1e>
 800e96a:	bf00      	nop
 800e96c:	200019bc 	.word	0x200019bc

0800e970 <_malloc_r>:
 800e970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e974:	1ccd      	adds	r5, r1, #3
 800e976:	f025 0503 	bic.w	r5, r5, #3
 800e97a:	3508      	adds	r5, #8
 800e97c:	2d0c      	cmp	r5, #12
 800e97e:	bf38      	it	cc
 800e980:	250c      	movcc	r5, #12
 800e982:	2d00      	cmp	r5, #0
 800e984:	4606      	mov	r6, r0
 800e986:	db01      	blt.n	800e98c <_malloc_r+0x1c>
 800e988:	42a9      	cmp	r1, r5
 800e98a:	d904      	bls.n	800e996 <_malloc_r+0x26>
 800e98c:	230c      	movs	r3, #12
 800e98e:	6033      	str	r3, [r6, #0]
 800e990:	2000      	movs	r0, #0
 800e992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ea6c <_malloc_r+0xfc>
 800e99a:	f000 f869 	bl	800ea70 <__malloc_lock>
 800e99e:	f8d8 3000 	ldr.w	r3, [r8]
 800e9a2:	461c      	mov	r4, r3
 800e9a4:	bb44      	cbnz	r4, 800e9f8 <_malloc_r+0x88>
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	f7ff ffbf 	bl	800e92c <sbrk_aligned>
 800e9ae:	1c43      	adds	r3, r0, #1
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	d158      	bne.n	800ea66 <_malloc_r+0xf6>
 800e9b4:	f8d8 4000 	ldr.w	r4, [r8]
 800e9b8:	4627      	mov	r7, r4
 800e9ba:	2f00      	cmp	r7, #0
 800e9bc:	d143      	bne.n	800ea46 <_malloc_r+0xd6>
 800e9be:	2c00      	cmp	r4, #0
 800e9c0:	d04b      	beq.n	800ea5a <_malloc_r+0xea>
 800e9c2:	6823      	ldr	r3, [r4, #0]
 800e9c4:	4639      	mov	r1, r7
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	eb04 0903 	add.w	r9, r4, r3
 800e9cc:	f002 f8e0 	bl	8010b90 <_sbrk_r>
 800e9d0:	4581      	cmp	r9, r0
 800e9d2:	d142      	bne.n	800ea5a <_malloc_r+0xea>
 800e9d4:	6821      	ldr	r1, [r4, #0]
 800e9d6:	1a6d      	subs	r5, r5, r1
 800e9d8:	4629      	mov	r1, r5
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f7ff ffa6 	bl	800e92c <sbrk_aligned>
 800e9e0:	3001      	adds	r0, #1
 800e9e2:	d03a      	beq.n	800ea5a <_malloc_r+0xea>
 800e9e4:	6823      	ldr	r3, [r4, #0]
 800e9e6:	442b      	add	r3, r5
 800e9e8:	6023      	str	r3, [r4, #0]
 800e9ea:	f8d8 3000 	ldr.w	r3, [r8]
 800e9ee:	685a      	ldr	r2, [r3, #4]
 800e9f0:	bb62      	cbnz	r2, 800ea4c <_malloc_r+0xdc>
 800e9f2:	f8c8 7000 	str.w	r7, [r8]
 800e9f6:	e00f      	b.n	800ea18 <_malloc_r+0xa8>
 800e9f8:	6822      	ldr	r2, [r4, #0]
 800e9fa:	1b52      	subs	r2, r2, r5
 800e9fc:	d420      	bmi.n	800ea40 <_malloc_r+0xd0>
 800e9fe:	2a0b      	cmp	r2, #11
 800ea00:	d917      	bls.n	800ea32 <_malloc_r+0xc2>
 800ea02:	1961      	adds	r1, r4, r5
 800ea04:	42a3      	cmp	r3, r4
 800ea06:	6025      	str	r5, [r4, #0]
 800ea08:	bf18      	it	ne
 800ea0a:	6059      	strne	r1, [r3, #4]
 800ea0c:	6863      	ldr	r3, [r4, #4]
 800ea0e:	bf08      	it	eq
 800ea10:	f8c8 1000 	streq.w	r1, [r8]
 800ea14:	5162      	str	r2, [r4, r5]
 800ea16:	604b      	str	r3, [r1, #4]
 800ea18:	4630      	mov	r0, r6
 800ea1a:	f000 f82f 	bl	800ea7c <__malloc_unlock>
 800ea1e:	f104 000b 	add.w	r0, r4, #11
 800ea22:	1d23      	adds	r3, r4, #4
 800ea24:	f020 0007 	bic.w	r0, r0, #7
 800ea28:	1ac2      	subs	r2, r0, r3
 800ea2a:	bf1c      	itt	ne
 800ea2c:	1a1b      	subne	r3, r3, r0
 800ea2e:	50a3      	strne	r3, [r4, r2]
 800ea30:	e7af      	b.n	800e992 <_malloc_r+0x22>
 800ea32:	6862      	ldr	r2, [r4, #4]
 800ea34:	42a3      	cmp	r3, r4
 800ea36:	bf0c      	ite	eq
 800ea38:	f8c8 2000 	streq.w	r2, [r8]
 800ea3c:	605a      	strne	r2, [r3, #4]
 800ea3e:	e7eb      	b.n	800ea18 <_malloc_r+0xa8>
 800ea40:	4623      	mov	r3, r4
 800ea42:	6864      	ldr	r4, [r4, #4]
 800ea44:	e7ae      	b.n	800e9a4 <_malloc_r+0x34>
 800ea46:	463c      	mov	r4, r7
 800ea48:	687f      	ldr	r7, [r7, #4]
 800ea4a:	e7b6      	b.n	800e9ba <_malloc_r+0x4a>
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	42a3      	cmp	r3, r4
 800ea52:	d1fb      	bne.n	800ea4c <_malloc_r+0xdc>
 800ea54:	2300      	movs	r3, #0
 800ea56:	6053      	str	r3, [r2, #4]
 800ea58:	e7de      	b.n	800ea18 <_malloc_r+0xa8>
 800ea5a:	230c      	movs	r3, #12
 800ea5c:	6033      	str	r3, [r6, #0]
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f000 f80c 	bl	800ea7c <__malloc_unlock>
 800ea64:	e794      	b.n	800e990 <_malloc_r+0x20>
 800ea66:	6005      	str	r5, [r0, #0]
 800ea68:	e7d6      	b.n	800ea18 <_malloc_r+0xa8>
 800ea6a:	bf00      	nop
 800ea6c:	200019c0 	.word	0x200019c0

0800ea70 <__malloc_lock>:
 800ea70:	4801      	ldr	r0, [pc, #4]	@ (800ea78 <__malloc_lock+0x8>)
 800ea72:	f002 b8da 	b.w	8010c2a <__retarget_lock_acquire_recursive>
 800ea76:	bf00      	nop
 800ea78:	20001b04 	.word	0x20001b04

0800ea7c <__malloc_unlock>:
 800ea7c:	4801      	ldr	r0, [pc, #4]	@ (800ea84 <__malloc_unlock+0x8>)
 800ea7e:	f002 b8d5 	b.w	8010c2c <__retarget_lock_release_recursive>
 800ea82:	bf00      	nop
 800ea84:	20001b04 	.word	0x20001b04

0800ea88 <sulp>:
 800ea88:	b570      	push	{r4, r5, r6, lr}
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	460d      	mov	r5, r1
 800ea8e:	ec45 4b10 	vmov	d0, r4, r5
 800ea92:	4616      	mov	r6, r2
 800ea94:	f003 fe56 	bl	8012744 <__ulp>
 800ea98:	ec51 0b10 	vmov	r0, r1, d0
 800ea9c:	b17e      	cbz	r6, 800eabe <sulp+0x36>
 800ea9e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eaa2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	dd09      	ble.n	800eabe <sulp+0x36>
 800eaaa:	051b      	lsls	r3, r3, #20
 800eaac:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800eab0:	2400      	movs	r4, #0
 800eab2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800eab6:	4622      	mov	r2, r4
 800eab8:	462b      	mov	r3, r5
 800eaba:	f7f1 fdad 	bl	8000618 <__aeabi_dmul>
 800eabe:	ec41 0b10 	vmov	d0, r0, r1
 800eac2:	bd70      	pop	{r4, r5, r6, pc}
 800eac4:	0000      	movs	r0, r0
	...

0800eac8 <_strtod_l>:
 800eac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eacc:	b09f      	sub	sp, #124	@ 0x7c
 800eace:	460c      	mov	r4, r1
 800ead0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ead2:	2200      	movs	r2, #0
 800ead4:	921a      	str	r2, [sp, #104]	@ 0x68
 800ead6:	9005      	str	r0, [sp, #20]
 800ead8:	f04f 0a00 	mov.w	sl, #0
 800eadc:	f04f 0b00 	mov.w	fp, #0
 800eae0:	460a      	mov	r2, r1
 800eae2:	9219      	str	r2, [sp, #100]	@ 0x64
 800eae4:	7811      	ldrb	r1, [r2, #0]
 800eae6:	292b      	cmp	r1, #43	@ 0x2b
 800eae8:	d04a      	beq.n	800eb80 <_strtod_l+0xb8>
 800eaea:	d838      	bhi.n	800eb5e <_strtod_l+0x96>
 800eaec:	290d      	cmp	r1, #13
 800eaee:	d832      	bhi.n	800eb56 <_strtod_l+0x8e>
 800eaf0:	2908      	cmp	r1, #8
 800eaf2:	d832      	bhi.n	800eb5a <_strtod_l+0x92>
 800eaf4:	2900      	cmp	r1, #0
 800eaf6:	d03b      	beq.n	800eb70 <_strtod_l+0xa8>
 800eaf8:	2200      	movs	r2, #0
 800eafa:	920e      	str	r2, [sp, #56]	@ 0x38
 800eafc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800eafe:	782a      	ldrb	r2, [r5, #0]
 800eb00:	2a30      	cmp	r2, #48	@ 0x30
 800eb02:	f040 80b2 	bne.w	800ec6a <_strtod_l+0x1a2>
 800eb06:	786a      	ldrb	r2, [r5, #1]
 800eb08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800eb0c:	2a58      	cmp	r2, #88	@ 0x58
 800eb0e:	d16e      	bne.n	800ebee <_strtod_l+0x126>
 800eb10:	9302      	str	r3, [sp, #8]
 800eb12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb14:	9301      	str	r3, [sp, #4]
 800eb16:	ab1a      	add	r3, sp, #104	@ 0x68
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	4a8f      	ldr	r2, [pc, #572]	@ (800ed58 <_strtod_l+0x290>)
 800eb1c:	9805      	ldr	r0, [sp, #20]
 800eb1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800eb20:	a919      	add	r1, sp, #100	@ 0x64
 800eb22:	f002 ffbf 	bl	8011aa4 <__gethex>
 800eb26:	f010 060f 	ands.w	r6, r0, #15
 800eb2a:	4604      	mov	r4, r0
 800eb2c:	d005      	beq.n	800eb3a <_strtod_l+0x72>
 800eb2e:	2e06      	cmp	r6, #6
 800eb30:	d128      	bne.n	800eb84 <_strtod_l+0xbc>
 800eb32:	3501      	adds	r5, #1
 800eb34:	2300      	movs	r3, #0
 800eb36:	9519      	str	r5, [sp, #100]	@ 0x64
 800eb38:	930e      	str	r3, [sp, #56]	@ 0x38
 800eb3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f040 858e 	bne.w	800f65e <_strtod_l+0xb96>
 800eb42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb44:	b1cb      	cbz	r3, 800eb7a <_strtod_l+0xb2>
 800eb46:	4652      	mov	r2, sl
 800eb48:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800eb4c:	ec43 2b10 	vmov	d0, r2, r3
 800eb50:	b01f      	add	sp, #124	@ 0x7c
 800eb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb56:	2920      	cmp	r1, #32
 800eb58:	d1ce      	bne.n	800eaf8 <_strtod_l+0x30>
 800eb5a:	3201      	adds	r2, #1
 800eb5c:	e7c1      	b.n	800eae2 <_strtod_l+0x1a>
 800eb5e:	292d      	cmp	r1, #45	@ 0x2d
 800eb60:	d1ca      	bne.n	800eaf8 <_strtod_l+0x30>
 800eb62:	2101      	movs	r1, #1
 800eb64:	910e      	str	r1, [sp, #56]	@ 0x38
 800eb66:	1c51      	adds	r1, r2, #1
 800eb68:	9119      	str	r1, [sp, #100]	@ 0x64
 800eb6a:	7852      	ldrb	r2, [r2, #1]
 800eb6c:	2a00      	cmp	r2, #0
 800eb6e:	d1c5      	bne.n	800eafc <_strtod_l+0x34>
 800eb70:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eb72:	9419      	str	r4, [sp, #100]	@ 0x64
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f040 8570 	bne.w	800f65a <_strtod_l+0xb92>
 800eb7a:	4652      	mov	r2, sl
 800eb7c:	465b      	mov	r3, fp
 800eb7e:	e7e5      	b.n	800eb4c <_strtod_l+0x84>
 800eb80:	2100      	movs	r1, #0
 800eb82:	e7ef      	b.n	800eb64 <_strtod_l+0x9c>
 800eb84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eb86:	b13a      	cbz	r2, 800eb98 <_strtod_l+0xd0>
 800eb88:	2135      	movs	r1, #53	@ 0x35
 800eb8a:	a81c      	add	r0, sp, #112	@ 0x70
 800eb8c:	f003 fed4 	bl	8012938 <__copybits>
 800eb90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb92:	9805      	ldr	r0, [sp, #20]
 800eb94:	f003 faaa 	bl	80120ec <_Bfree>
 800eb98:	3e01      	subs	r6, #1
 800eb9a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800eb9c:	2e04      	cmp	r6, #4
 800eb9e:	d806      	bhi.n	800ebae <_strtod_l+0xe6>
 800eba0:	e8df f006 	tbb	[pc, r6]
 800eba4:	201d0314 	.word	0x201d0314
 800eba8:	14          	.byte	0x14
 800eba9:	00          	.byte	0x00
 800ebaa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ebae:	05e1      	lsls	r1, r4, #23
 800ebb0:	bf48      	it	mi
 800ebb2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ebb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ebba:	0d1b      	lsrs	r3, r3, #20
 800ebbc:	051b      	lsls	r3, r3, #20
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d1bb      	bne.n	800eb3a <_strtod_l+0x72>
 800ebc2:	f002 f807 	bl	8010bd4 <__errno>
 800ebc6:	2322      	movs	r3, #34	@ 0x22
 800ebc8:	6003      	str	r3, [r0, #0]
 800ebca:	e7b6      	b.n	800eb3a <_strtod_l+0x72>
 800ebcc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ebd0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ebd4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ebd8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ebdc:	e7e7      	b.n	800ebae <_strtod_l+0xe6>
 800ebde:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ed60 <_strtod_l+0x298>
 800ebe2:	e7e4      	b.n	800ebae <_strtod_l+0xe6>
 800ebe4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ebe8:	f04f 3aff 	mov.w	sl, #4294967295
 800ebec:	e7df      	b.n	800ebae <_strtod_l+0xe6>
 800ebee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ebf0:	1c5a      	adds	r2, r3, #1
 800ebf2:	9219      	str	r2, [sp, #100]	@ 0x64
 800ebf4:	785b      	ldrb	r3, [r3, #1]
 800ebf6:	2b30      	cmp	r3, #48	@ 0x30
 800ebf8:	d0f9      	beq.n	800ebee <_strtod_l+0x126>
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d09d      	beq.n	800eb3a <_strtod_l+0x72>
 800ebfe:	2301      	movs	r3, #1
 800ec00:	2700      	movs	r7, #0
 800ec02:	9308      	str	r3, [sp, #32]
 800ec04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec06:	930c      	str	r3, [sp, #48]	@ 0x30
 800ec08:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ec0a:	46b9      	mov	r9, r7
 800ec0c:	220a      	movs	r2, #10
 800ec0e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ec10:	7805      	ldrb	r5, [r0, #0]
 800ec12:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ec16:	b2d9      	uxtb	r1, r3
 800ec18:	2909      	cmp	r1, #9
 800ec1a:	d928      	bls.n	800ec6e <_strtod_l+0x1a6>
 800ec1c:	494f      	ldr	r1, [pc, #316]	@ (800ed5c <_strtod_l+0x294>)
 800ec1e:	2201      	movs	r2, #1
 800ec20:	f001 fefc 	bl	8010a1c <strncmp>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	d032      	beq.n	800ec8e <_strtod_l+0x1c6>
 800ec28:	2000      	movs	r0, #0
 800ec2a:	462a      	mov	r2, r5
 800ec2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ec2e:	464d      	mov	r5, r9
 800ec30:	4603      	mov	r3, r0
 800ec32:	2a65      	cmp	r2, #101	@ 0x65
 800ec34:	d001      	beq.n	800ec3a <_strtod_l+0x172>
 800ec36:	2a45      	cmp	r2, #69	@ 0x45
 800ec38:	d114      	bne.n	800ec64 <_strtod_l+0x19c>
 800ec3a:	b91d      	cbnz	r5, 800ec44 <_strtod_l+0x17c>
 800ec3c:	9a08      	ldr	r2, [sp, #32]
 800ec3e:	4302      	orrs	r2, r0
 800ec40:	d096      	beq.n	800eb70 <_strtod_l+0xa8>
 800ec42:	2500      	movs	r5, #0
 800ec44:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ec46:	1c62      	adds	r2, r4, #1
 800ec48:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec4a:	7862      	ldrb	r2, [r4, #1]
 800ec4c:	2a2b      	cmp	r2, #43	@ 0x2b
 800ec4e:	d07a      	beq.n	800ed46 <_strtod_l+0x27e>
 800ec50:	2a2d      	cmp	r2, #45	@ 0x2d
 800ec52:	d07e      	beq.n	800ed52 <_strtod_l+0x28a>
 800ec54:	f04f 0c00 	mov.w	ip, #0
 800ec58:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ec5c:	2909      	cmp	r1, #9
 800ec5e:	f240 8085 	bls.w	800ed6c <_strtod_l+0x2a4>
 800ec62:	9419      	str	r4, [sp, #100]	@ 0x64
 800ec64:	f04f 0800 	mov.w	r8, #0
 800ec68:	e0a5      	b.n	800edb6 <_strtod_l+0x2ee>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	e7c8      	b.n	800ec00 <_strtod_l+0x138>
 800ec6e:	f1b9 0f08 	cmp.w	r9, #8
 800ec72:	bfd8      	it	le
 800ec74:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ec76:	f100 0001 	add.w	r0, r0, #1
 800ec7a:	bfda      	itte	le
 800ec7c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ec80:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ec82:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ec86:	f109 0901 	add.w	r9, r9, #1
 800ec8a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ec8c:	e7bf      	b.n	800ec0e <_strtod_l+0x146>
 800ec8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec90:	1c5a      	adds	r2, r3, #1
 800ec92:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec94:	785a      	ldrb	r2, [r3, #1]
 800ec96:	f1b9 0f00 	cmp.w	r9, #0
 800ec9a:	d03b      	beq.n	800ed14 <_strtod_l+0x24c>
 800ec9c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ec9e:	464d      	mov	r5, r9
 800eca0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800eca4:	2b09      	cmp	r3, #9
 800eca6:	d912      	bls.n	800ecce <_strtod_l+0x206>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e7c2      	b.n	800ec32 <_strtod_l+0x16a>
 800ecac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecae:	1c5a      	adds	r2, r3, #1
 800ecb0:	9219      	str	r2, [sp, #100]	@ 0x64
 800ecb2:	785a      	ldrb	r2, [r3, #1]
 800ecb4:	3001      	adds	r0, #1
 800ecb6:	2a30      	cmp	r2, #48	@ 0x30
 800ecb8:	d0f8      	beq.n	800ecac <_strtod_l+0x1e4>
 800ecba:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ecbe:	2b08      	cmp	r3, #8
 800ecc0:	f200 84d2 	bhi.w	800f668 <_strtod_l+0xba0>
 800ecc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecc6:	900a      	str	r0, [sp, #40]	@ 0x28
 800ecc8:	2000      	movs	r0, #0
 800ecca:	930c      	str	r3, [sp, #48]	@ 0x30
 800eccc:	4605      	mov	r5, r0
 800ecce:	3a30      	subs	r2, #48	@ 0x30
 800ecd0:	f100 0301 	add.w	r3, r0, #1
 800ecd4:	d018      	beq.n	800ed08 <_strtod_l+0x240>
 800ecd6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ecd8:	4419      	add	r1, r3
 800ecda:	910a      	str	r1, [sp, #40]	@ 0x28
 800ecdc:	462e      	mov	r6, r5
 800ecde:	f04f 0e0a 	mov.w	lr, #10
 800ece2:	1c71      	adds	r1, r6, #1
 800ece4:	eba1 0c05 	sub.w	ip, r1, r5
 800ece8:	4563      	cmp	r3, ip
 800ecea:	dc15      	bgt.n	800ed18 <_strtod_l+0x250>
 800ecec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ecf0:	182b      	adds	r3, r5, r0
 800ecf2:	2b08      	cmp	r3, #8
 800ecf4:	f105 0501 	add.w	r5, r5, #1
 800ecf8:	4405      	add	r5, r0
 800ecfa:	dc1a      	bgt.n	800ed32 <_strtod_l+0x26a>
 800ecfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ecfe:	230a      	movs	r3, #10
 800ed00:	fb03 2301 	mla	r3, r3, r1, r2
 800ed04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ed06:	2300      	movs	r3, #0
 800ed08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed0a:	1c51      	adds	r1, r2, #1
 800ed0c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ed0e:	7852      	ldrb	r2, [r2, #1]
 800ed10:	4618      	mov	r0, r3
 800ed12:	e7c5      	b.n	800eca0 <_strtod_l+0x1d8>
 800ed14:	4648      	mov	r0, r9
 800ed16:	e7ce      	b.n	800ecb6 <_strtod_l+0x1ee>
 800ed18:	2e08      	cmp	r6, #8
 800ed1a:	dc05      	bgt.n	800ed28 <_strtod_l+0x260>
 800ed1c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ed1e:	fb0e f606 	mul.w	r6, lr, r6
 800ed22:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ed24:	460e      	mov	r6, r1
 800ed26:	e7dc      	b.n	800ece2 <_strtod_l+0x21a>
 800ed28:	2910      	cmp	r1, #16
 800ed2a:	bfd8      	it	le
 800ed2c:	fb0e f707 	mulle.w	r7, lr, r7
 800ed30:	e7f8      	b.n	800ed24 <_strtod_l+0x25c>
 800ed32:	2b0f      	cmp	r3, #15
 800ed34:	bfdc      	itt	le
 800ed36:	230a      	movle	r3, #10
 800ed38:	fb03 2707 	mlale	r7, r3, r7, r2
 800ed3c:	e7e3      	b.n	800ed06 <_strtod_l+0x23e>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed42:	2301      	movs	r3, #1
 800ed44:	e77a      	b.n	800ec3c <_strtod_l+0x174>
 800ed46:	f04f 0c00 	mov.w	ip, #0
 800ed4a:	1ca2      	adds	r2, r4, #2
 800ed4c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed4e:	78a2      	ldrb	r2, [r4, #2]
 800ed50:	e782      	b.n	800ec58 <_strtod_l+0x190>
 800ed52:	f04f 0c01 	mov.w	ip, #1
 800ed56:	e7f8      	b.n	800ed4a <_strtod_l+0x282>
 800ed58:	0801437c 	.word	0x0801437c
 800ed5c:	0801415b 	.word	0x0801415b
 800ed60:	7ff00000 	.word	0x7ff00000
 800ed64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed66:	1c51      	adds	r1, r2, #1
 800ed68:	9119      	str	r1, [sp, #100]	@ 0x64
 800ed6a:	7852      	ldrb	r2, [r2, #1]
 800ed6c:	2a30      	cmp	r2, #48	@ 0x30
 800ed6e:	d0f9      	beq.n	800ed64 <_strtod_l+0x29c>
 800ed70:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ed74:	2908      	cmp	r1, #8
 800ed76:	f63f af75 	bhi.w	800ec64 <_strtod_l+0x19c>
 800ed7a:	3a30      	subs	r2, #48	@ 0x30
 800ed7c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed80:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ed82:	f04f 080a 	mov.w	r8, #10
 800ed86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed88:	1c56      	adds	r6, r2, #1
 800ed8a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ed8c:	7852      	ldrb	r2, [r2, #1]
 800ed8e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ed92:	f1be 0f09 	cmp.w	lr, #9
 800ed96:	d939      	bls.n	800ee0c <_strtod_l+0x344>
 800ed98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ed9a:	1a76      	subs	r6, r6, r1
 800ed9c:	2e08      	cmp	r6, #8
 800ed9e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800eda2:	dc03      	bgt.n	800edac <_strtod_l+0x2e4>
 800eda4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eda6:	4588      	cmp	r8, r1
 800eda8:	bfa8      	it	ge
 800edaa:	4688      	movge	r8, r1
 800edac:	f1bc 0f00 	cmp.w	ip, #0
 800edb0:	d001      	beq.n	800edb6 <_strtod_l+0x2ee>
 800edb2:	f1c8 0800 	rsb	r8, r8, #0
 800edb6:	2d00      	cmp	r5, #0
 800edb8:	d14e      	bne.n	800ee58 <_strtod_l+0x390>
 800edba:	9908      	ldr	r1, [sp, #32]
 800edbc:	4308      	orrs	r0, r1
 800edbe:	f47f aebc 	bne.w	800eb3a <_strtod_l+0x72>
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	f47f aed4 	bne.w	800eb70 <_strtod_l+0xa8>
 800edc8:	2a69      	cmp	r2, #105	@ 0x69
 800edca:	d028      	beq.n	800ee1e <_strtod_l+0x356>
 800edcc:	dc25      	bgt.n	800ee1a <_strtod_l+0x352>
 800edce:	2a49      	cmp	r2, #73	@ 0x49
 800edd0:	d025      	beq.n	800ee1e <_strtod_l+0x356>
 800edd2:	2a4e      	cmp	r2, #78	@ 0x4e
 800edd4:	f47f aecc 	bne.w	800eb70 <_strtod_l+0xa8>
 800edd8:	499a      	ldr	r1, [pc, #616]	@ (800f044 <_strtod_l+0x57c>)
 800edda:	a819      	add	r0, sp, #100	@ 0x64
 800eddc:	f003 f884 	bl	8011ee8 <__match>
 800ede0:	2800      	cmp	r0, #0
 800ede2:	f43f aec5 	beq.w	800eb70 <_strtod_l+0xa8>
 800ede6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	2b28      	cmp	r3, #40	@ 0x28
 800edec:	d12e      	bne.n	800ee4c <_strtod_l+0x384>
 800edee:	4996      	ldr	r1, [pc, #600]	@ (800f048 <_strtod_l+0x580>)
 800edf0:	aa1c      	add	r2, sp, #112	@ 0x70
 800edf2:	a819      	add	r0, sp, #100	@ 0x64
 800edf4:	f003 f88c 	bl	8011f10 <__hexnan>
 800edf8:	2805      	cmp	r0, #5
 800edfa:	d127      	bne.n	800ee4c <_strtod_l+0x384>
 800edfc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800edfe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ee02:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ee06:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ee0a:	e696      	b.n	800eb3a <_strtod_l+0x72>
 800ee0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ee0e:	fb08 2101 	mla	r1, r8, r1, r2
 800ee12:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ee16:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee18:	e7b5      	b.n	800ed86 <_strtod_l+0x2be>
 800ee1a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ee1c:	e7da      	b.n	800edd4 <_strtod_l+0x30c>
 800ee1e:	498b      	ldr	r1, [pc, #556]	@ (800f04c <_strtod_l+0x584>)
 800ee20:	a819      	add	r0, sp, #100	@ 0x64
 800ee22:	f003 f861 	bl	8011ee8 <__match>
 800ee26:	2800      	cmp	r0, #0
 800ee28:	f43f aea2 	beq.w	800eb70 <_strtod_l+0xa8>
 800ee2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee2e:	4988      	ldr	r1, [pc, #544]	@ (800f050 <_strtod_l+0x588>)
 800ee30:	3b01      	subs	r3, #1
 800ee32:	a819      	add	r0, sp, #100	@ 0x64
 800ee34:	9319      	str	r3, [sp, #100]	@ 0x64
 800ee36:	f003 f857 	bl	8011ee8 <__match>
 800ee3a:	b910      	cbnz	r0, 800ee42 <_strtod_l+0x37a>
 800ee3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee3e:	3301      	adds	r3, #1
 800ee40:	9319      	str	r3, [sp, #100]	@ 0x64
 800ee42:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f060 <_strtod_l+0x598>
 800ee46:	f04f 0a00 	mov.w	sl, #0
 800ee4a:	e676      	b.n	800eb3a <_strtod_l+0x72>
 800ee4c:	4881      	ldr	r0, [pc, #516]	@ (800f054 <_strtod_l+0x58c>)
 800ee4e:	f001 ff07 	bl	8010c60 <nan>
 800ee52:	ec5b ab10 	vmov	sl, fp, d0
 800ee56:	e670      	b.n	800eb3a <_strtod_l+0x72>
 800ee58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee5a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ee5c:	eba8 0303 	sub.w	r3, r8, r3
 800ee60:	f1b9 0f00 	cmp.w	r9, #0
 800ee64:	bf08      	it	eq
 800ee66:	46a9      	moveq	r9, r5
 800ee68:	2d10      	cmp	r5, #16
 800ee6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee6c:	462c      	mov	r4, r5
 800ee6e:	bfa8      	it	ge
 800ee70:	2410      	movge	r4, #16
 800ee72:	f7f1 fb57 	bl	8000524 <__aeabi_ui2d>
 800ee76:	2d09      	cmp	r5, #9
 800ee78:	4682      	mov	sl, r0
 800ee7a:	468b      	mov	fp, r1
 800ee7c:	dc13      	bgt.n	800eea6 <_strtod_l+0x3de>
 800ee7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f43f ae5a 	beq.w	800eb3a <_strtod_l+0x72>
 800ee86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee88:	dd78      	ble.n	800ef7c <_strtod_l+0x4b4>
 800ee8a:	2b16      	cmp	r3, #22
 800ee8c:	dc5f      	bgt.n	800ef4e <_strtod_l+0x486>
 800ee8e:	4972      	ldr	r1, [pc, #456]	@ (800f058 <_strtod_l+0x590>)
 800ee90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ee94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee98:	4652      	mov	r2, sl
 800ee9a:	465b      	mov	r3, fp
 800ee9c:	f7f1 fbbc 	bl	8000618 <__aeabi_dmul>
 800eea0:	4682      	mov	sl, r0
 800eea2:	468b      	mov	fp, r1
 800eea4:	e649      	b.n	800eb3a <_strtod_l+0x72>
 800eea6:	4b6c      	ldr	r3, [pc, #432]	@ (800f058 <_strtod_l+0x590>)
 800eea8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eeac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800eeb0:	f7f1 fbb2 	bl	8000618 <__aeabi_dmul>
 800eeb4:	4682      	mov	sl, r0
 800eeb6:	4638      	mov	r0, r7
 800eeb8:	468b      	mov	fp, r1
 800eeba:	f7f1 fb33 	bl	8000524 <__aeabi_ui2d>
 800eebe:	4602      	mov	r2, r0
 800eec0:	460b      	mov	r3, r1
 800eec2:	4650      	mov	r0, sl
 800eec4:	4659      	mov	r1, fp
 800eec6:	f7f1 f9f1 	bl	80002ac <__adddf3>
 800eeca:	2d0f      	cmp	r5, #15
 800eecc:	4682      	mov	sl, r0
 800eece:	468b      	mov	fp, r1
 800eed0:	ddd5      	ble.n	800ee7e <_strtod_l+0x3b6>
 800eed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eed4:	1b2c      	subs	r4, r5, r4
 800eed6:	441c      	add	r4, r3
 800eed8:	2c00      	cmp	r4, #0
 800eeda:	f340 8093 	ble.w	800f004 <_strtod_l+0x53c>
 800eede:	f014 030f 	ands.w	r3, r4, #15
 800eee2:	d00a      	beq.n	800eefa <_strtod_l+0x432>
 800eee4:	495c      	ldr	r1, [pc, #368]	@ (800f058 <_strtod_l+0x590>)
 800eee6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eeea:	4652      	mov	r2, sl
 800eeec:	465b      	mov	r3, fp
 800eeee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eef2:	f7f1 fb91 	bl	8000618 <__aeabi_dmul>
 800eef6:	4682      	mov	sl, r0
 800eef8:	468b      	mov	fp, r1
 800eefa:	f034 040f 	bics.w	r4, r4, #15
 800eefe:	d073      	beq.n	800efe8 <_strtod_l+0x520>
 800ef00:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ef04:	dd49      	ble.n	800ef9a <_strtod_l+0x4d2>
 800ef06:	2400      	movs	r4, #0
 800ef08:	46a0      	mov	r8, r4
 800ef0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ef0c:	46a1      	mov	r9, r4
 800ef0e:	9a05      	ldr	r2, [sp, #20]
 800ef10:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f060 <_strtod_l+0x598>
 800ef14:	2322      	movs	r3, #34	@ 0x22
 800ef16:	6013      	str	r3, [r2, #0]
 800ef18:	f04f 0a00 	mov.w	sl, #0
 800ef1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	f43f ae0b 	beq.w	800eb3a <_strtod_l+0x72>
 800ef24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef26:	9805      	ldr	r0, [sp, #20]
 800ef28:	f003 f8e0 	bl	80120ec <_Bfree>
 800ef2c:	9805      	ldr	r0, [sp, #20]
 800ef2e:	4649      	mov	r1, r9
 800ef30:	f003 f8dc 	bl	80120ec <_Bfree>
 800ef34:	9805      	ldr	r0, [sp, #20]
 800ef36:	4641      	mov	r1, r8
 800ef38:	f003 f8d8 	bl	80120ec <_Bfree>
 800ef3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ef3e:	9805      	ldr	r0, [sp, #20]
 800ef40:	f003 f8d4 	bl	80120ec <_Bfree>
 800ef44:	9805      	ldr	r0, [sp, #20]
 800ef46:	4621      	mov	r1, r4
 800ef48:	f003 f8d0 	bl	80120ec <_Bfree>
 800ef4c:	e5f5      	b.n	800eb3a <_strtod_l+0x72>
 800ef4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef50:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ef54:	4293      	cmp	r3, r2
 800ef56:	dbbc      	blt.n	800eed2 <_strtod_l+0x40a>
 800ef58:	4c3f      	ldr	r4, [pc, #252]	@ (800f058 <_strtod_l+0x590>)
 800ef5a:	f1c5 050f 	rsb	r5, r5, #15
 800ef5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ef62:	4652      	mov	r2, sl
 800ef64:	465b      	mov	r3, fp
 800ef66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef6a:	f7f1 fb55 	bl	8000618 <__aeabi_dmul>
 800ef6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef70:	1b5d      	subs	r5, r3, r5
 800ef72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ef76:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ef7a:	e78f      	b.n	800ee9c <_strtod_l+0x3d4>
 800ef7c:	3316      	adds	r3, #22
 800ef7e:	dba8      	blt.n	800eed2 <_strtod_l+0x40a>
 800ef80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef82:	eba3 0808 	sub.w	r8, r3, r8
 800ef86:	4b34      	ldr	r3, [pc, #208]	@ (800f058 <_strtod_l+0x590>)
 800ef88:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ef8c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ef90:	4650      	mov	r0, sl
 800ef92:	4659      	mov	r1, fp
 800ef94:	f7f1 fc6a 	bl	800086c <__aeabi_ddiv>
 800ef98:	e782      	b.n	800eea0 <_strtod_l+0x3d8>
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	4f2f      	ldr	r7, [pc, #188]	@ (800f05c <_strtod_l+0x594>)
 800ef9e:	1124      	asrs	r4, r4, #4
 800efa0:	4650      	mov	r0, sl
 800efa2:	4659      	mov	r1, fp
 800efa4:	461e      	mov	r6, r3
 800efa6:	2c01      	cmp	r4, #1
 800efa8:	dc21      	bgt.n	800efee <_strtod_l+0x526>
 800efaa:	b10b      	cbz	r3, 800efb0 <_strtod_l+0x4e8>
 800efac:	4682      	mov	sl, r0
 800efae:	468b      	mov	fp, r1
 800efb0:	492a      	ldr	r1, [pc, #168]	@ (800f05c <_strtod_l+0x594>)
 800efb2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800efb6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800efba:	4652      	mov	r2, sl
 800efbc:	465b      	mov	r3, fp
 800efbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efc2:	f7f1 fb29 	bl	8000618 <__aeabi_dmul>
 800efc6:	4b26      	ldr	r3, [pc, #152]	@ (800f060 <_strtod_l+0x598>)
 800efc8:	460a      	mov	r2, r1
 800efca:	400b      	ands	r3, r1
 800efcc:	4925      	ldr	r1, [pc, #148]	@ (800f064 <_strtod_l+0x59c>)
 800efce:	428b      	cmp	r3, r1
 800efd0:	4682      	mov	sl, r0
 800efd2:	d898      	bhi.n	800ef06 <_strtod_l+0x43e>
 800efd4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800efd8:	428b      	cmp	r3, r1
 800efda:	bf86      	itte	hi
 800efdc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f068 <_strtod_l+0x5a0>
 800efe0:	f04f 3aff 	movhi.w	sl, #4294967295
 800efe4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800efe8:	2300      	movs	r3, #0
 800efea:	9308      	str	r3, [sp, #32]
 800efec:	e076      	b.n	800f0dc <_strtod_l+0x614>
 800efee:	07e2      	lsls	r2, r4, #31
 800eff0:	d504      	bpl.n	800effc <_strtod_l+0x534>
 800eff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eff6:	f7f1 fb0f 	bl	8000618 <__aeabi_dmul>
 800effa:	2301      	movs	r3, #1
 800effc:	3601      	adds	r6, #1
 800effe:	1064      	asrs	r4, r4, #1
 800f000:	3708      	adds	r7, #8
 800f002:	e7d0      	b.n	800efa6 <_strtod_l+0x4de>
 800f004:	d0f0      	beq.n	800efe8 <_strtod_l+0x520>
 800f006:	4264      	negs	r4, r4
 800f008:	f014 020f 	ands.w	r2, r4, #15
 800f00c:	d00a      	beq.n	800f024 <_strtod_l+0x55c>
 800f00e:	4b12      	ldr	r3, [pc, #72]	@ (800f058 <_strtod_l+0x590>)
 800f010:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f014:	4650      	mov	r0, sl
 800f016:	4659      	mov	r1, fp
 800f018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f01c:	f7f1 fc26 	bl	800086c <__aeabi_ddiv>
 800f020:	4682      	mov	sl, r0
 800f022:	468b      	mov	fp, r1
 800f024:	1124      	asrs	r4, r4, #4
 800f026:	d0df      	beq.n	800efe8 <_strtod_l+0x520>
 800f028:	2c1f      	cmp	r4, #31
 800f02a:	dd1f      	ble.n	800f06c <_strtod_l+0x5a4>
 800f02c:	2400      	movs	r4, #0
 800f02e:	46a0      	mov	r8, r4
 800f030:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f032:	46a1      	mov	r9, r4
 800f034:	9a05      	ldr	r2, [sp, #20]
 800f036:	2322      	movs	r3, #34	@ 0x22
 800f038:	f04f 0a00 	mov.w	sl, #0
 800f03c:	f04f 0b00 	mov.w	fp, #0
 800f040:	6013      	str	r3, [r2, #0]
 800f042:	e76b      	b.n	800ef1c <_strtod_l+0x454>
 800f044:	0801416a 	.word	0x0801416a
 800f048:	08014368 	.word	0x08014368
 800f04c:	08014162 	.word	0x08014162
 800f050:	08014210 	.word	0x08014210
 800f054:	0801415a 	.word	0x0801415a
 800f058:	080144f0 	.word	0x080144f0
 800f05c:	080144c8 	.word	0x080144c8
 800f060:	7ff00000 	.word	0x7ff00000
 800f064:	7ca00000 	.word	0x7ca00000
 800f068:	7fefffff 	.word	0x7fefffff
 800f06c:	f014 0310 	ands.w	r3, r4, #16
 800f070:	bf18      	it	ne
 800f072:	236a      	movne	r3, #106	@ 0x6a
 800f074:	4ea9      	ldr	r6, [pc, #676]	@ (800f31c <_strtod_l+0x854>)
 800f076:	9308      	str	r3, [sp, #32]
 800f078:	4650      	mov	r0, sl
 800f07a:	4659      	mov	r1, fp
 800f07c:	2300      	movs	r3, #0
 800f07e:	07e7      	lsls	r7, r4, #31
 800f080:	d504      	bpl.n	800f08c <_strtod_l+0x5c4>
 800f082:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f086:	f7f1 fac7 	bl	8000618 <__aeabi_dmul>
 800f08a:	2301      	movs	r3, #1
 800f08c:	1064      	asrs	r4, r4, #1
 800f08e:	f106 0608 	add.w	r6, r6, #8
 800f092:	d1f4      	bne.n	800f07e <_strtod_l+0x5b6>
 800f094:	b10b      	cbz	r3, 800f09a <_strtod_l+0x5d2>
 800f096:	4682      	mov	sl, r0
 800f098:	468b      	mov	fp, r1
 800f09a:	9b08      	ldr	r3, [sp, #32]
 800f09c:	b1b3      	cbz	r3, 800f0cc <_strtod_l+0x604>
 800f09e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f0a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	4659      	mov	r1, fp
 800f0aa:	dd0f      	ble.n	800f0cc <_strtod_l+0x604>
 800f0ac:	2b1f      	cmp	r3, #31
 800f0ae:	dd56      	ble.n	800f15e <_strtod_l+0x696>
 800f0b0:	2b34      	cmp	r3, #52	@ 0x34
 800f0b2:	bfde      	ittt	le
 800f0b4:	f04f 33ff 	movle.w	r3, #4294967295
 800f0b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f0bc:	4093      	lslle	r3, r2
 800f0be:	f04f 0a00 	mov.w	sl, #0
 800f0c2:	bfcc      	ite	gt
 800f0c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f0c8:	ea03 0b01 	andle.w	fp, r3, r1
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	4650      	mov	r0, sl
 800f0d2:	4659      	mov	r1, fp
 800f0d4:	f7f1 fd08 	bl	8000ae8 <__aeabi_dcmpeq>
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d1a7      	bne.n	800f02c <_strtod_l+0x564>
 800f0dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0de:	9300      	str	r3, [sp, #0]
 800f0e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f0e2:	9805      	ldr	r0, [sp, #20]
 800f0e4:	462b      	mov	r3, r5
 800f0e6:	464a      	mov	r2, r9
 800f0e8:	f003 f868 	bl	80121bc <__s2b>
 800f0ec:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	f43f af09 	beq.w	800ef06 <_strtod_l+0x43e>
 800f0f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0f8:	2a00      	cmp	r2, #0
 800f0fa:	eba3 0308 	sub.w	r3, r3, r8
 800f0fe:	bfa8      	it	ge
 800f100:	2300      	movge	r3, #0
 800f102:	9312      	str	r3, [sp, #72]	@ 0x48
 800f104:	2400      	movs	r4, #0
 800f106:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f10a:	9316      	str	r3, [sp, #88]	@ 0x58
 800f10c:	46a0      	mov	r8, r4
 800f10e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f110:	9805      	ldr	r0, [sp, #20]
 800f112:	6859      	ldr	r1, [r3, #4]
 800f114:	f002 ffaa 	bl	801206c <_Balloc>
 800f118:	4681      	mov	r9, r0
 800f11a:	2800      	cmp	r0, #0
 800f11c:	f43f aef7 	beq.w	800ef0e <_strtod_l+0x446>
 800f120:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f122:	691a      	ldr	r2, [r3, #16]
 800f124:	3202      	adds	r2, #2
 800f126:	f103 010c 	add.w	r1, r3, #12
 800f12a:	0092      	lsls	r2, r2, #2
 800f12c:	300c      	adds	r0, #12
 800f12e:	f001 fd86 	bl	8010c3e <memcpy>
 800f132:	ec4b ab10 	vmov	d0, sl, fp
 800f136:	9805      	ldr	r0, [sp, #20]
 800f138:	aa1c      	add	r2, sp, #112	@ 0x70
 800f13a:	a91b      	add	r1, sp, #108	@ 0x6c
 800f13c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f140:	f003 fb70 	bl	8012824 <__d2b>
 800f144:	901a      	str	r0, [sp, #104]	@ 0x68
 800f146:	2800      	cmp	r0, #0
 800f148:	f43f aee1 	beq.w	800ef0e <_strtod_l+0x446>
 800f14c:	9805      	ldr	r0, [sp, #20]
 800f14e:	2101      	movs	r1, #1
 800f150:	f003 f8ca 	bl	80122e8 <__i2b>
 800f154:	4680      	mov	r8, r0
 800f156:	b948      	cbnz	r0, 800f16c <_strtod_l+0x6a4>
 800f158:	f04f 0800 	mov.w	r8, #0
 800f15c:	e6d7      	b.n	800ef0e <_strtod_l+0x446>
 800f15e:	f04f 32ff 	mov.w	r2, #4294967295
 800f162:	fa02 f303 	lsl.w	r3, r2, r3
 800f166:	ea03 0a0a 	and.w	sl, r3, sl
 800f16a:	e7af      	b.n	800f0cc <_strtod_l+0x604>
 800f16c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f16e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f170:	2d00      	cmp	r5, #0
 800f172:	bfab      	itete	ge
 800f174:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f176:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f178:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f17a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f17c:	bfac      	ite	ge
 800f17e:	18ef      	addge	r7, r5, r3
 800f180:	1b5e      	sublt	r6, r3, r5
 800f182:	9b08      	ldr	r3, [sp, #32]
 800f184:	1aed      	subs	r5, r5, r3
 800f186:	4415      	add	r5, r2
 800f188:	4b65      	ldr	r3, [pc, #404]	@ (800f320 <_strtod_l+0x858>)
 800f18a:	3d01      	subs	r5, #1
 800f18c:	429d      	cmp	r5, r3
 800f18e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f192:	da50      	bge.n	800f236 <_strtod_l+0x76e>
 800f194:	1b5b      	subs	r3, r3, r5
 800f196:	2b1f      	cmp	r3, #31
 800f198:	eba2 0203 	sub.w	r2, r2, r3
 800f19c:	f04f 0101 	mov.w	r1, #1
 800f1a0:	dc3d      	bgt.n	800f21e <_strtod_l+0x756>
 800f1a2:	fa01 f303 	lsl.w	r3, r1, r3
 800f1a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	9310      	str	r3, [sp, #64]	@ 0x40
 800f1ac:	18bd      	adds	r5, r7, r2
 800f1ae:	9b08      	ldr	r3, [sp, #32]
 800f1b0:	42af      	cmp	r7, r5
 800f1b2:	4416      	add	r6, r2
 800f1b4:	441e      	add	r6, r3
 800f1b6:	463b      	mov	r3, r7
 800f1b8:	bfa8      	it	ge
 800f1ba:	462b      	movge	r3, r5
 800f1bc:	42b3      	cmp	r3, r6
 800f1be:	bfa8      	it	ge
 800f1c0:	4633      	movge	r3, r6
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	bfc2      	ittt	gt
 800f1c6:	1aed      	subgt	r5, r5, r3
 800f1c8:	1af6      	subgt	r6, r6, r3
 800f1ca:	1aff      	subgt	r7, r7, r3
 800f1cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	dd16      	ble.n	800f200 <_strtod_l+0x738>
 800f1d2:	4641      	mov	r1, r8
 800f1d4:	9805      	ldr	r0, [sp, #20]
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	f003 f93e 	bl	8012458 <__pow5mult>
 800f1dc:	4680      	mov	r8, r0
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	d0ba      	beq.n	800f158 <_strtod_l+0x690>
 800f1e2:	4601      	mov	r1, r0
 800f1e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f1e6:	9805      	ldr	r0, [sp, #20]
 800f1e8:	f003 f894 	bl	8012314 <__multiply>
 800f1ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	f43f ae8d 	beq.w	800ef0e <_strtod_l+0x446>
 800f1f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f1f6:	9805      	ldr	r0, [sp, #20]
 800f1f8:	f002 ff78 	bl	80120ec <_Bfree>
 800f1fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1fe:	931a      	str	r3, [sp, #104]	@ 0x68
 800f200:	2d00      	cmp	r5, #0
 800f202:	dc1d      	bgt.n	800f240 <_strtod_l+0x778>
 800f204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f206:	2b00      	cmp	r3, #0
 800f208:	dd23      	ble.n	800f252 <_strtod_l+0x78a>
 800f20a:	4649      	mov	r1, r9
 800f20c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f20e:	9805      	ldr	r0, [sp, #20]
 800f210:	f003 f922 	bl	8012458 <__pow5mult>
 800f214:	4681      	mov	r9, r0
 800f216:	b9e0      	cbnz	r0, 800f252 <_strtod_l+0x78a>
 800f218:	f04f 0900 	mov.w	r9, #0
 800f21c:	e677      	b.n	800ef0e <_strtod_l+0x446>
 800f21e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f222:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f226:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f22a:	35e2      	adds	r5, #226	@ 0xe2
 800f22c:	fa01 f305 	lsl.w	r3, r1, r5
 800f230:	9310      	str	r3, [sp, #64]	@ 0x40
 800f232:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f234:	e7ba      	b.n	800f1ac <_strtod_l+0x6e4>
 800f236:	2300      	movs	r3, #0
 800f238:	9310      	str	r3, [sp, #64]	@ 0x40
 800f23a:	2301      	movs	r3, #1
 800f23c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f23e:	e7b5      	b.n	800f1ac <_strtod_l+0x6e4>
 800f240:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f242:	9805      	ldr	r0, [sp, #20]
 800f244:	462a      	mov	r2, r5
 800f246:	f003 f961 	bl	801250c <__lshift>
 800f24a:	901a      	str	r0, [sp, #104]	@ 0x68
 800f24c:	2800      	cmp	r0, #0
 800f24e:	d1d9      	bne.n	800f204 <_strtod_l+0x73c>
 800f250:	e65d      	b.n	800ef0e <_strtod_l+0x446>
 800f252:	2e00      	cmp	r6, #0
 800f254:	dd07      	ble.n	800f266 <_strtod_l+0x79e>
 800f256:	4649      	mov	r1, r9
 800f258:	9805      	ldr	r0, [sp, #20]
 800f25a:	4632      	mov	r2, r6
 800f25c:	f003 f956 	bl	801250c <__lshift>
 800f260:	4681      	mov	r9, r0
 800f262:	2800      	cmp	r0, #0
 800f264:	d0d8      	beq.n	800f218 <_strtod_l+0x750>
 800f266:	2f00      	cmp	r7, #0
 800f268:	dd08      	ble.n	800f27c <_strtod_l+0x7b4>
 800f26a:	4641      	mov	r1, r8
 800f26c:	9805      	ldr	r0, [sp, #20]
 800f26e:	463a      	mov	r2, r7
 800f270:	f003 f94c 	bl	801250c <__lshift>
 800f274:	4680      	mov	r8, r0
 800f276:	2800      	cmp	r0, #0
 800f278:	f43f ae49 	beq.w	800ef0e <_strtod_l+0x446>
 800f27c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f27e:	9805      	ldr	r0, [sp, #20]
 800f280:	464a      	mov	r2, r9
 800f282:	f003 f9cb 	bl	801261c <__mdiff>
 800f286:	4604      	mov	r4, r0
 800f288:	2800      	cmp	r0, #0
 800f28a:	f43f ae40 	beq.w	800ef0e <_strtod_l+0x446>
 800f28e:	68c3      	ldr	r3, [r0, #12]
 800f290:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f292:	2300      	movs	r3, #0
 800f294:	60c3      	str	r3, [r0, #12]
 800f296:	4641      	mov	r1, r8
 800f298:	f003 f9a4 	bl	80125e4 <__mcmp>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	da45      	bge.n	800f32c <_strtod_l+0x864>
 800f2a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2a2:	ea53 030a 	orrs.w	r3, r3, sl
 800f2a6:	d16b      	bne.n	800f380 <_strtod_l+0x8b8>
 800f2a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d167      	bne.n	800f380 <_strtod_l+0x8b8>
 800f2b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f2b4:	0d1b      	lsrs	r3, r3, #20
 800f2b6:	051b      	lsls	r3, r3, #20
 800f2b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f2bc:	d960      	bls.n	800f380 <_strtod_l+0x8b8>
 800f2be:	6963      	ldr	r3, [r4, #20]
 800f2c0:	b913      	cbnz	r3, 800f2c8 <_strtod_l+0x800>
 800f2c2:	6923      	ldr	r3, [r4, #16]
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	dd5b      	ble.n	800f380 <_strtod_l+0x8b8>
 800f2c8:	4621      	mov	r1, r4
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	9805      	ldr	r0, [sp, #20]
 800f2ce:	f003 f91d 	bl	801250c <__lshift>
 800f2d2:	4641      	mov	r1, r8
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	f003 f985 	bl	80125e4 <__mcmp>
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	dd50      	ble.n	800f380 <_strtod_l+0x8b8>
 800f2de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f2e2:	9a08      	ldr	r2, [sp, #32]
 800f2e4:	0d1b      	lsrs	r3, r3, #20
 800f2e6:	051b      	lsls	r3, r3, #20
 800f2e8:	2a00      	cmp	r2, #0
 800f2ea:	d06a      	beq.n	800f3c2 <_strtod_l+0x8fa>
 800f2ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f2f0:	d867      	bhi.n	800f3c2 <_strtod_l+0x8fa>
 800f2f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f2f6:	f67f ae9d 	bls.w	800f034 <_strtod_l+0x56c>
 800f2fa:	4b0a      	ldr	r3, [pc, #40]	@ (800f324 <_strtod_l+0x85c>)
 800f2fc:	4650      	mov	r0, sl
 800f2fe:	4659      	mov	r1, fp
 800f300:	2200      	movs	r2, #0
 800f302:	f7f1 f989 	bl	8000618 <__aeabi_dmul>
 800f306:	4b08      	ldr	r3, [pc, #32]	@ (800f328 <_strtod_l+0x860>)
 800f308:	400b      	ands	r3, r1
 800f30a:	4682      	mov	sl, r0
 800f30c:	468b      	mov	fp, r1
 800f30e:	2b00      	cmp	r3, #0
 800f310:	f47f ae08 	bne.w	800ef24 <_strtod_l+0x45c>
 800f314:	9a05      	ldr	r2, [sp, #20]
 800f316:	2322      	movs	r3, #34	@ 0x22
 800f318:	6013      	str	r3, [r2, #0]
 800f31a:	e603      	b.n	800ef24 <_strtod_l+0x45c>
 800f31c:	08014390 	.word	0x08014390
 800f320:	fffffc02 	.word	0xfffffc02
 800f324:	39500000 	.word	0x39500000
 800f328:	7ff00000 	.word	0x7ff00000
 800f32c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f330:	d165      	bne.n	800f3fe <_strtod_l+0x936>
 800f332:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f334:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f338:	b35a      	cbz	r2, 800f392 <_strtod_l+0x8ca>
 800f33a:	4a9f      	ldr	r2, [pc, #636]	@ (800f5b8 <_strtod_l+0xaf0>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d12b      	bne.n	800f398 <_strtod_l+0x8d0>
 800f340:	9b08      	ldr	r3, [sp, #32]
 800f342:	4651      	mov	r1, sl
 800f344:	b303      	cbz	r3, 800f388 <_strtod_l+0x8c0>
 800f346:	4b9d      	ldr	r3, [pc, #628]	@ (800f5bc <_strtod_l+0xaf4>)
 800f348:	465a      	mov	r2, fp
 800f34a:	4013      	ands	r3, r2
 800f34c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f350:	f04f 32ff 	mov.w	r2, #4294967295
 800f354:	d81b      	bhi.n	800f38e <_strtod_l+0x8c6>
 800f356:	0d1b      	lsrs	r3, r3, #20
 800f358:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f35c:	fa02 f303 	lsl.w	r3, r2, r3
 800f360:	4299      	cmp	r1, r3
 800f362:	d119      	bne.n	800f398 <_strtod_l+0x8d0>
 800f364:	4b96      	ldr	r3, [pc, #600]	@ (800f5c0 <_strtod_l+0xaf8>)
 800f366:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f368:	429a      	cmp	r2, r3
 800f36a:	d102      	bne.n	800f372 <_strtod_l+0x8aa>
 800f36c:	3101      	adds	r1, #1
 800f36e:	f43f adce 	beq.w	800ef0e <_strtod_l+0x446>
 800f372:	4b92      	ldr	r3, [pc, #584]	@ (800f5bc <_strtod_l+0xaf4>)
 800f374:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f376:	401a      	ands	r2, r3
 800f378:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f37c:	f04f 0a00 	mov.w	sl, #0
 800f380:	9b08      	ldr	r3, [sp, #32]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d1b9      	bne.n	800f2fa <_strtod_l+0x832>
 800f386:	e5cd      	b.n	800ef24 <_strtod_l+0x45c>
 800f388:	f04f 33ff 	mov.w	r3, #4294967295
 800f38c:	e7e8      	b.n	800f360 <_strtod_l+0x898>
 800f38e:	4613      	mov	r3, r2
 800f390:	e7e6      	b.n	800f360 <_strtod_l+0x898>
 800f392:	ea53 030a 	orrs.w	r3, r3, sl
 800f396:	d0a2      	beq.n	800f2de <_strtod_l+0x816>
 800f398:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f39a:	b1db      	cbz	r3, 800f3d4 <_strtod_l+0x90c>
 800f39c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f39e:	4213      	tst	r3, r2
 800f3a0:	d0ee      	beq.n	800f380 <_strtod_l+0x8b8>
 800f3a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3a4:	9a08      	ldr	r2, [sp, #32]
 800f3a6:	4650      	mov	r0, sl
 800f3a8:	4659      	mov	r1, fp
 800f3aa:	b1bb      	cbz	r3, 800f3dc <_strtod_l+0x914>
 800f3ac:	f7ff fb6c 	bl	800ea88 <sulp>
 800f3b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3b4:	ec53 2b10 	vmov	r2, r3, d0
 800f3b8:	f7f0 ff78 	bl	80002ac <__adddf3>
 800f3bc:	4682      	mov	sl, r0
 800f3be:	468b      	mov	fp, r1
 800f3c0:	e7de      	b.n	800f380 <_strtod_l+0x8b8>
 800f3c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f3c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f3ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f3ce:	f04f 3aff 	mov.w	sl, #4294967295
 800f3d2:	e7d5      	b.n	800f380 <_strtod_l+0x8b8>
 800f3d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f3d6:	ea13 0f0a 	tst.w	r3, sl
 800f3da:	e7e1      	b.n	800f3a0 <_strtod_l+0x8d8>
 800f3dc:	f7ff fb54 	bl	800ea88 <sulp>
 800f3e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3e4:	ec53 2b10 	vmov	r2, r3, d0
 800f3e8:	f7f0 ff5e 	bl	80002a8 <__aeabi_dsub>
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	4682      	mov	sl, r0
 800f3f2:	468b      	mov	fp, r1
 800f3f4:	f7f1 fb78 	bl	8000ae8 <__aeabi_dcmpeq>
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	d0c1      	beq.n	800f380 <_strtod_l+0x8b8>
 800f3fc:	e61a      	b.n	800f034 <_strtod_l+0x56c>
 800f3fe:	4641      	mov	r1, r8
 800f400:	4620      	mov	r0, r4
 800f402:	f003 fa67 	bl	80128d4 <__ratio>
 800f406:	ec57 6b10 	vmov	r6, r7, d0
 800f40a:	2200      	movs	r2, #0
 800f40c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f410:	4630      	mov	r0, r6
 800f412:	4639      	mov	r1, r7
 800f414:	f7f1 fb7c 	bl	8000b10 <__aeabi_dcmple>
 800f418:	2800      	cmp	r0, #0
 800f41a:	d06f      	beq.n	800f4fc <_strtod_l+0xa34>
 800f41c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d17a      	bne.n	800f518 <_strtod_l+0xa50>
 800f422:	f1ba 0f00 	cmp.w	sl, #0
 800f426:	d158      	bne.n	800f4da <_strtod_l+0xa12>
 800f428:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f42a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d15a      	bne.n	800f4e8 <_strtod_l+0xa20>
 800f432:	4b64      	ldr	r3, [pc, #400]	@ (800f5c4 <_strtod_l+0xafc>)
 800f434:	2200      	movs	r2, #0
 800f436:	4630      	mov	r0, r6
 800f438:	4639      	mov	r1, r7
 800f43a:	f7f1 fb5f 	bl	8000afc <__aeabi_dcmplt>
 800f43e:	2800      	cmp	r0, #0
 800f440:	d159      	bne.n	800f4f6 <_strtod_l+0xa2e>
 800f442:	4630      	mov	r0, r6
 800f444:	4639      	mov	r1, r7
 800f446:	4b60      	ldr	r3, [pc, #384]	@ (800f5c8 <_strtod_l+0xb00>)
 800f448:	2200      	movs	r2, #0
 800f44a:	f7f1 f8e5 	bl	8000618 <__aeabi_dmul>
 800f44e:	4606      	mov	r6, r0
 800f450:	460f      	mov	r7, r1
 800f452:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f456:	9606      	str	r6, [sp, #24]
 800f458:	9307      	str	r3, [sp, #28]
 800f45a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f45e:	4d57      	ldr	r5, [pc, #348]	@ (800f5bc <_strtod_l+0xaf4>)
 800f460:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f466:	401d      	ands	r5, r3
 800f468:	4b58      	ldr	r3, [pc, #352]	@ (800f5cc <_strtod_l+0xb04>)
 800f46a:	429d      	cmp	r5, r3
 800f46c:	f040 80b2 	bne.w	800f5d4 <_strtod_l+0xb0c>
 800f470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f472:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f476:	ec4b ab10 	vmov	d0, sl, fp
 800f47a:	f003 f963 	bl	8012744 <__ulp>
 800f47e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f482:	ec51 0b10 	vmov	r0, r1, d0
 800f486:	f7f1 f8c7 	bl	8000618 <__aeabi_dmul>
 800f48a:	4652      	mov	r2, sl
 800f48c:	465b      	mov	r3, fp
 800f48e:	f7f0 ff0d 	bl	80002ac <__adddf3>
 800f492:	460b      	mov	r3, r1
 800f494:	4949      	ldr	r1, [pc, #292]	@ (800f5bc <_strtod_l+0xaf4>)
 800f496:	4a4e      	ldr	r2, [pc, #312]	@ (800f5d0 <_strtod_l+0xb08>)
 800f498:	4019      	ands	r1, r3
 800f49a:	4291      	cmp	r1, r2
 800f49c:	4682      	mov	sl, r0
 800f49e:	d942      	bls.n	800f526 <_strtod_l+0xa5e>
 800f4a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f4a2:	4b47      	ldr	r3, [pc, #284]	@ (800f5c0 <_strtod_l+0xaf8>)
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d103      	bne.n	800f4b0 <_strtod_l+0x9e8>
 800f4a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	f43f ad2f 	beq.w	800ef0e <_strtod_l+0x446>
 800f4b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f5c0 <_strtod_l+0xaf8>
 800f4b4:	f04f 3aff 	mov.w	sl, #4294967295
 800f4b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f4ba:	9805      	ldr	r0, [sp, #20]
 800f4bc:	f002 fe16 	bl	80120ec <_Bfree>
 800f4c0:	9805      	ldr	r0, [sp, #20]
 800f4c2:	4649      	mov	r1, r9
 800f4c4:	f002 fe12 	bl	80120ec <_Bfree>
 800f4c8:	9805      	ldr	r0, [sp, #20]
 800f4ca:	4641      	mov	r1, r8
 800f4cc:	f002 fe0e 	bl	80120ec <_Bfree>
 800f4d0:	9805      	ldr	r0, [sp, #20]
 800f4d2:	4621      	mov	r1, r4
 800f4d4:	f002 fe0a 	bl	80120ec <_Bfree>
 800f4d8:	e619      	b.n	800f10e <_strtod_l+0x646>
 800f4da:	f1ba 0f01 	cmp.w	sl, #1
 800f4de:	d103      	bne.n	800f4e8 <_strtod_l+0xa20>
 800f4e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	f43f ada6 	beq.w	800f034 <_strtod_l+0x56c>
 800f4e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f598 <_strtod_l+0xad0>
 800f4ec:	4f35      	ldr	r7, [pc, #212]	@ (800f5c4 <_strtod_l+0xafc>)
 800f4ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f4f2:	2600      	movs	r6, #0
 800f4f4:	e7b1      	b.n	800f45a <_strtod_l+0x992>
 800f4f6:	4f34      	ldr	r7, [pc, #208]	@ (800f5c8 <_strtod_l+0xb00>)
 800f4f8:	2600      	movs	r6, #0
 800f4fa:	e7aa      	b.n	800f452 <_strtod_l+0x98a>
 800f4fc:	4b32      	ldr	r3, [pc, #200]	@ (800f5c8 <_strtod_l+0xb00>)
 800f4fe:	4630      	mov	r0, r6
 800f500:	4639      	mov	r1, r7
 800f502:	2200      	movs	r2, #0
 800f504:	f7f1 f888 	bl	8000618 <__aeabi_dmul>
 800f508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f50a:	4606      	mov	r6, r0
 800f50c:	460f      	mov	r7, r1
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d09f      	beq.n	800f452 <_strtod_l+0x98a>
 800f512:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f516:	e7a0      	b.n	800f45a <_strtod_l+0x992>
 800f518:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f5a0 <_strtod_l+0xad8>
 800f51c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f520:	ec57 6b17 	vmov	r6, r7, d7
 800f524:	e799      	b.n	800f45a <_strtod_l+0x992>
 800f526:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f52a:	9b08      	ldr	r3, [sp, #32]
 800f52c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f530:	2b00      	cmp	r3, #0
 800f532:	d1c1      	bne.n	800f4b8 <_strtod_l+0x9f0>
 800f534:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f538:	0d1b      	lsrs	r3, r3, #20
 800f53a:	051b      	lsls	r3, r3, #20
 800f53c:	429d      	cmp	r5, r3
 800f53e:	d1bb      	bne.n	800f4b8 <_strtod_l+0x9f0>
 800f540:	4630      	mov	r0, r6
 800f542:	4639      	mov	r1, r7
 800f544:	f7f1 fbb0 	bl	8000ca8 <__aeabi_d2lz>
 800f548:	f7f1 f838 	bl	80005bc <__aeabi_l2d>
 800f54c:	4602      	mov	r2, r0
 800f54e:	460b      	mov	r3, r1
 800f550:	4630      	mov	r0, r6
 800f552:	4639      	mov	r1, r7
 800f554:	f7f0 fea8 	bl	80002a8 <__aeabi_dsub>
 800f558:	460b      	mov	r3, r1
 800f55a:	4602      	mov	r2, r0
 800f55c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f560:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f566:	ea46 060a 	orr.w	r6, r6, sl
 800f56a:	431e      	orrs	r6, r3
 800f56c:	d06f      	beq.n	800f64e <_strtod_l+0xb86>
 800f56e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f5a8 <_strtod_l+0xae0>)
 800f570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f574:	f7f1 fac2 	bl	8000afc <__aeabi_dcmplt>
 800f578:	2800      	cmp	r0, #0
 800f57a:	f47f acd3 	bne.w	800ef24 <_strtod_l+0x45c>
 800f57e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f5b0 <_strtod_l+0xae8>)
 800f580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f584:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f588:	f7f1 fad6 	bl	8000b38 <__aeabi_dcmpgt>
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d093      	beq.n	800f4b8 <_strtod_l+0x9f0>
 800f590:	e4c8      	b.n	800ef24 <_strtod_l+0x45c>
 800f592:	bf00      	nop
 800f594:	f3af 8000 	nop.w
 800f598:	00000000 	.word	0x00000000
 800f59c:	bff00000 	.word	0xbff00000
 800f5a0:	00000000 	.word	0x00000000
 800f5a4:	3ff00000 	.word	0x3ff00000
 800f5a8:	94a03595 	.word	0x94a03595
 800f5ac:	3fdfffff 	.word	0x3fdfffff
 800f5b0:	35afe535 	.word	0x35afe535
 800f5b4:	3fe00000 	.word	0x3fe00000
 800f5b8:	000fffff 	.word	0x000fffff
 800f5bc:	7ff00000 	.word	0x7ff00000
 800f5c0:	7fefffff 	.word	0x7fefffff
 800f5c4:	3ff00000 	.word	0x3ff00000
 800f5c8:	3fe00000 	.word	0x3fe00000
 800f5cc:	7fe00000 	.word	0x7fe00000
 800f5d0:	7c9fffff 	.word	0x7c9fffff
 800f5d4:	9b08      	ldr	r3, [sp, #32]
 800f5d6:	b323      	cbz	r3, 800f622 <_strtod_l+0xb5a>
 800f5d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f5dc:	d821      	bhi.n	800f622 <_strtod_l+0xb5a>
 800f5de:	a328      	add	r3, pc, #160	@ (adr r3, 800f680 <_strtod_l+0xbb8>)
 800f5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e4:	4630      	mov	r0, r6
 800f5e6:	4639      	mov	r1, r7
 800f5e8:	f7f1 fa92 	bl	8000b10 <__aeabi_dcmple>
 800f5ec:	b1a0      	cbz	r0, 800f618 <_strtod_l+0xb50>
 800f5ee:	4639      	mov	r1, r7
 800f5f0:	4630      	mov	r0, r6
 800f5f2:	f7f1 fae9 	bl	8000bc8 <__aeabi_d2uiz>
 800f5f6:	2801      	cmp	r0, #1
 800f5f8:	bf38      	it	cc
 800f5fa:	2001      	movcc	r0, #1
 800f5fc:	f7f0 ff92 	bl	8000524 <__aeabi_ui2d>
 800f600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f602:	4606      	mov	r6, r0
 800f604:	460f      	mov	r7, r1
 800f606:	b9fb      	cbnz	r3, 800f648 <_strtod_l+0xb80>
 800f608:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f60c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f60e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f610:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f614:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f618:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f61a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f61e:	1b5b      	subs	r3, r3, r5
 800f620:	9311      	str	r3, [sp, #68]	@ 0x44
 800f622:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f626:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f62a:	f003 f88b 	bl	8012744 <__ulp>
 800f62e:	4650      	mov	r0, sl
 800f630:	ec53 2b10 	vmov	r2, r3, d0
 800f634:	4659      	mov	r1, fp
 800f636:	f7f0 ffef 	bl	8000618 <__aeabi_dmul>
 800f63a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f63e:	f7f0 fe35 	bl	80002ac <__adddf3>
 800f642:	4682      	mov	sl, r0
 800f644:	468b      	mov	fp, r1
 800f646:	e770      	b.n	800f52a <_strtod_l+0xa62>
 800f648:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f64c:	e7e0      	b.n	800f610 <_strtod_l+0xb48>
 800f64e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f688 <_strtod_l+0xbc0>)
 800f650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f654:	f7f1 fa52 	bl	8000afc <__aeabi_dcmplt>
 800f658:	e798      	b.n	800f58c <_strtod_l+0xac4>
 800f65a:	2300      	movs	r3, #0
 800f65c:	930e      	str	r3, [sp, #56]	@ 0x38
 800f65e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f660:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f662:	6013      	str	r3, [r2, #0]
 800f664:	f7ff ba6d 	b.w	800eb42 <_strtod_l+0x7a>
 800f668:	2a65      	cmp	r2, #101	@ 0x65
 800f66a:	f43f ab68 	beq.w	800ed3e <_strtod_l+0x276>
 800f66e:	2a45      	cmp	r2, #69	@ 0x45
 800f670:	f43f ab65 	beq.w	800ed3e <_strtod_l+0x276>
 800f674:	2301      	movs	r3, #1
 800f676:	f7ff bba0 	b.w	800edba <_strtod_l+0x2f2>
 800f67a:	bf00      	nop
 800f67c:	f3af 8000 	nop.w
 800f680:	ffc00000 	.word	0xffc00000
 800f684:	41dfffff 	.word	0x41dfffff
 800f688:	94a03595 	.word	0x94a03595
 800f68c:	3fcfffff 	.word	0x3fcfffff

0800f690 <_strtod_r>:
 800f690:	4b01      	ldr	r3, [pc, #4]	@ (800f698 <_strtod_r+0x8>)
 800f692:	f7ff ba19 	b.w	800eac8 <_strtod_l>
 800f696:	bf00      	nop
 800f698:	2000013c 	.word	0x2000013c

0800f69c <strtod>:
 800f69c:	460a      	mov	r2, r1
 800f69e:	4601      	mov	r1, r0
 800f6a0:	4802      	ldr	r0, [pc, #8]	@ (800f6ac <strtod+0x10>)
 800f6a2:	4b03      	ldr	r3, [pc, #12]	@ (800f6b0 <strtod+0x14>)
 800f6a4:	6800      	ldr	r0, [r0, #0]
 800f6a6:	f7ff ba0f 	b.w	800eac8 <_strtod_l>
 800f6aa:	bf00      	nop
 800f6ac:	200002a8 	.word	0x200002a8
 800f6b0:	2000013c 	.word	0x2000013c

0800f6b4 <_strtol_l.isra.0>:
 800f6b4:	2b24      	cmp	r3, #36	@ 0x24
 800f6b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6ba:	4686      	mov	lr, r0
 800f6bc:	4690      	mov	r8, r2
 800f6be:	d801      	bhi.n	800f6c4 <_strtol_l.isra.0+0x10>
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	d106      	bne.n	800f6d2 <_strtol_l.isra.0+0x1e>
 800f6c4:	f001 fa86 	bl	8010bd4 <__errno>
 800f6c8:	2316      	movs	r3, #22
 800f6ca:	6003      	str	r3, [r0, #0]
 800f6cc:	2000      	movs	r0, #0
 800f6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6d2:	4834      	ldr	r0, [pc, #208]	@ (800f7a4 <_strtol_l.isra.0+0xf0>)
 800f6d4:	460d      	mov	r5, r1
 800f6d6:	462a      	mov	r2, r5
 800f6d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f6dc:	5d06      	ldrb	r6, [r0, r4]
 800f6de:	f016 0608 	ands.w	r6, r6, #8
 800f6e2:	d1f8      	bne.n	800f6d6 <_strtol_l.isra.0+0x22>
 800f6e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800f6e6:	d110      	bne.n	800f70a <_strtol_l.isra.0+0x56>
 800f6e8:	782c      	ldrb	r4, [r5, #0]
 800f6ea:	2601      	movs	r6, #1
 800f6ec:	1c95      	adds	r5, r2, #2
 800f6ee:	f033 0210 	bics.w	r2, r3, #16
 800f6f2:	d115      	bne.n	800f720 <_strtol_l.isra.0+0x6c>
 800f6f4:	2c30      	cmp	r4, #48	@ 0x30
 800f6f6:	d10d      	bne.n	800f714 <_strtol_l.isra.0+0x60>
 800f6f8:	782a      	ldrb	r2, [r5, #0]
 800f6fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f6fe:	2a58      	cmp	r2, #88	@ 0x58
 800f700:	d108      	bne.n	800f714 <_strtol_l.isra.0+0x60>
 800f702:	786c      	ldrb	r4, [r5, #1]
 800f704:	3502      	adds	r5, #2
 800f706:	2310      	movs	r3, #16
 800f708:	e00a      	b.n	800f720 <_strtol_l.isra.0+0x6c>
 800f70a:	2c2b      	cmp	r4, #43	@ 0x2b
 800f70c:	bf04      	itt	eq
 800f70e:	782c      	ldrbeq	r4, [r5, #0]
 800f710:	1c95      	addeq	r5, r2, #2
 800f712:	e7ec      	b.n	800f6ee <_strtol_l.isra.0+0x3a>
 800f714:	2b00      	cmp	r3, #0
 800f716:	d1f6      	bne.n	800f706 <_strtol_l.isra.0+0x52>
 800f718:	2c30      	cmp	r4, #48	@ 0x30
 800f71a:	bf14      	ite	ne
 800f71c:	230a      	movne	r3, #10
 800f71e:	2308      	moveq	r3, #8
 800f720:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f724:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f728:	2200      	movs	r2, #0
 800f72a:	fbbc f9f3 	udiv	r9, ip, r3
 800f72e:	4610      	mov	r0, r2
 800f730:	fb03 ca19 	mls	sl, r3, r9, ip
 800f734:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f738:	2f09      	cmp	r7, #9
 800f73a:	d80f      	bhi.n	800f75c <_strtol_l.isra.0+0xa8>
 800f73c:	463c      	mov	r4, r7
 800f73e:	42a3      	cmp	r3, r4
 800f740:	dd1b      	ble.n	800f77a <_strtol_l.isra.0+0xc6>
 800f742:	1c57      	adds	r7, r2, #1
 800f744:	d007      	beq.n	800f756 <_strtol_l.isra.0+0xa2>
 800f746:	4581      	cmp	r9, r0
 800f748:	d314      	bcc.n	800f774 <_strtol_l.isra.0+0xc0>
 800f74a:	d101      	bne.n	800f750 <_strtol_l.isra.0+0x9c>
 800f74c:	45a2      	cmp	sl, r4
 800f74e:	db11      	blt.n	800f774 <_strtol_l.isra.0+0xc0>
 800f750:	fb00 4003 	mla	r0, r0, r3, r4
 800f754:	2201      	movs	r2, #1
 800f756:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f75a:	e7eb      	b.n	800f734 <_strtol_l.isra.0+0x80>
 800f75c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f760:	2f19      	cmp	r7, #25
 800f762:	d801      	bhi.n	800f768 <_strtol_l.isra.0+0xb4>
 800f764:	3c37      	subs	r4, #55	@ 0x37
 800f766:	e7ea      	b.n	800f73e <_strtol_l.isra.0+0x8a>
 800f768:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f76c:	2f19      	cmp	r7, #25
 800f76e:	d804      	bhi.n	800f77a <_strtol_l.isra.0+0xc6>
 800f770:	3c57      	subs	r4, #87	@ 0x57
 800f772:	e7e4      	b.n	800f73e <_strtol_l.isra.0+0x8a>
 800f774:	f04f 32ff 	mov.w	r2, #4294967295
 800f778:	e7ed      	b.n	800f756 <_strtol_l.isra.0+0xa2>
 800f77a:	1c53      	adds	r3, r2, #1
 800f77c:	d108      	bne.n	800f790 <_strtol_l.isra.0+0xdc>
 800f77e:	2322      	movs	r3, #34	@ 0x22
 800f780:	f8ce 3000 	str.w	r3, [lr]
 800f784:	4660      	mov	r0, ip
 800f786:	f1b8 0f00 	cmp.w	r8, #0
 800f78a:	d0a0      	beq.n	800f6ce <_strtol_l.isra.0+0x1a>
 800f78c:	1e69      	subs	r1, r5, #1
 800f78e:	e006      	b.n	800f79e <_strtol_l.isra.0+0xea>
 800f790:	b106      	cbz	r6, 800f794 <_strtol_l.isra.0+0xe0>
 800f792:	4240      	negs	r0, r0
 800f794:	f1b8 0f00 	cmp.w	r8, #0
 800f798:	d099      	beq.n	800f6ce <_strtol_l.isra.0+0x1a>
 800f79a:	2a00      	cmp	r2, #0
 800f79c:	d1f6      	bne.n	800f78c <_strtol_l.isra.0+0xd8>
 800f79e:	f8c8 1000 	str.w	r1, [r8]
 800f7a2:	e794      	b.n	800f6ce <_strtol_l.isra.0+0x1a>
 800f7a4:	080143b9 	.word	0x080143b9

0800f7a8 <_strtol_r>:
 800f7a8:	f7ff bf84 	b.w	800f6b4 <_strtol_l.isra.0>

0800f7ac <strtol>:
 800f7ac:	4613      	mov	r3, r2
 800f7ae:	460a      	mov	r2, r1
 800f7b0:	4601      	mov	r1, r0
 800f7b2:	4802      	ldr	r0, [pc, #8]	@ (800f7bc <strtol+0x10>)
 800f7b4:	6800      	ldr	r0, [r0, #0]
 800f7b6:	f7ff bf7d 	b.w	800f6b4 <_strtol_l.isra.0>
 800f7ba:	bf00      	nop
 800f7bc:	200002a8 	.word	0x200002a8

0800f7c0 <__cvt>:
 800f7c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7c4:	ec57 6b10 	vmov	r6, r7, d0
 800f7c8:	2f00      	cmp	r7, #0
 800f7ca:	460c      	mov	r4, r1
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	463b      	mov	r3, r7
 800f7d0:	bfbb      	ittet	lt
 800f7d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f7d6:	461f      	movlt	r7, r3
 800f7d8:	2300      	movge	r3, #0
 800f7da:	232d      	movlt	r3, #45	@ 0x2d
 800f7dc:	700b      	strb	r3, [r1, #0]
 800f7de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f7e0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f7e4:	4691      	mov	r9, r2
 800f7e6:	f023 0820 	bic.w	r8, r3, #32
 800f7ea:	bfbc      	itt	lt
 800f7ec:	4632      	movlt	r2, r6
 800f7ee:	4616      	movlt	r6, r2
 800f7f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f7f4:	d005      	beq.n	800f802 <__cvt+0x42>
 800f7f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f7fa:	d100      	bne.n	800f7fe <__cvt+0x3e>
 800f7fc:	3401      	adds	r4, #1
 800f7fe:	2102      	movs	r1, #2
 800f800:	e000      	b.n	800f804 <__cvt+0x44>
 800f802:	2103      	movs	r1, #3
 800f804:	ab03      	add	r3, sp, #12
 800f806:	9301      	str	r3, [sp, #4]
 800f808:	ab02      	add	r3, sp, #8
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	ec47 6b10 	vmov	d0, r6, r7
 800f810:	4653      	mov	r3, sl
 800f812:	4622      	mov	r2, r4
 800f814:	f001 fac4 	bl	8010da0 <_dtoa_r>
 800f818:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f81c:	4605      	mov	r5, r0
 800f81e:	d119      	bne.n	800f854 <__cvt+0x94>
 800f820:	f019 0f01 	tst.w	r9, #1
 800f824:	d00e      	beq.n	800f844 <__cvt+0x84>
 800f826:	eb00 0904 	add.w	r9, r0, r4
 800f82a:	2200      	movs	r2, #0
 800f82c:	2300      	movs	r3, #0
 800f82e:	4630      	mov	r0, r6
 800f830:	4639      	mov	r1, r7
 800f832:	f7f1 f959 	bl	8000ae8 <__aeabi_dcmpeq>
 800f836:	b108      	cbz	r0, 800f83c <__cvt+0x7c>
 800f838:	f8cd 900c 	str.w	r9, [sp, #12]
 800f83c:	2230      	movs	r2, #48	@ 0x30
 800f83e:	9b03      	ldr	r3, [sp, #12]
 800f840:	454b      	cmp	r3, r9
 800f842:	d31e      	bcc.n	800f882 <__cvt+0xc2>
 800f844:	9b03      	ldr	r3, [sp, #12]
 800f846:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f848:	1b5b      	subs	r3, r3, r5
 800f84a:	4628      	mov	r0, r5
 800f84c:	6013      	str	r3, [r2, #0]
 800f84e:	b004      	add	sp, #16
 800f850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f854:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f858:	eb00 0904 	add.w	r9, r0, r4
 800f85c:	d1e5      	bne.n	800f82a <__cvt+0x6a>
 800f85e:	7803      	ldrb	r3, [r0, #0]
 800f860:	2b30      	cmp	r3, #48	@ 0x30
 800f862:	d10a      	bne.n	800f87a <__cvt+0xba>
 800f864:	2200      	movs	r2, #0
 800f866:	2300      	movs	r3, #0
 800f868:	4630      	mov	r0, r6
 800f86a:	4639      	mov	r1, r7
 800f86c:	f7f1 f93c 	bl	8000ae8 <__aeabi_dcmpeq>
 800f870:	b918      	cbnz	r0, 800f87a <__cvt+0xba>
 800f872:	f1c4 0401 	rsb	r4, r4, #1
 800f876:	f8ca 4000 	str.w	r4, [sl]
 800f87a:	f8da 3000 	ldr.w	r3, [sl]
 800f87e:	4499      	add	r9, r3
 800f880:	e7d3      	b.n	800f82a <__cvt+0x6a>
 800f882:	1c59      	adds	r1, r3, #1
 800f884:	9103      	str	r1, [sp, #12]
 800f886:	701a      	strb	r2, [r3, #0]
 800f888:	e7d9      	b.n	800f83e <__cvt+0x7e>

0800f88a <__exponent>:
 800f88a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f88c:	2900      	cmp	r1, #0
 800f88e:	bfba      	itte	lt
 800f890:	4249      	neglt	r1, r1
 800f892:	232d      	movlt	r3, #45	@ 0x2d
 800f894:	232b      	movge	r3, #43	@ 0x2b
 800f896:	2909      	cmp	r1, #9
 800f898:	7002      	strb	r2, [r0, #0]
 800f89a:	7043      	strb	r3, [r0, #1]
 800f89c:	dd29      	ble.n	800f8f2 <__exponent+0x68>
 800f89e:	f10d 0307 	add.w	r3, sp, #7
 800f8a2:	461d      	mov	r5, r3
 800f8a4:	270a      	movs	r7, #10
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	fbb1 f6f7 	udiv	r6, r1, r7
 800f8ac:	fb07 1416 	mls	r4, r7, r6, r1
 800f8b0:	3430      	adds	r4, #48	@ 0x30
 800f8b2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f8b6:	460c      	mov	r4, r1
 800f8b8:	2c63      	cmp	r4, #99	@ 0x63
 800f8ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800f8be:	4631      	mov	r1, r6
 800f8c0:	dcf1      	bgt.n	800f8a6 <__exponent+0x1c>
 800f8c2:	3130      	adds	r1, #48	@ 0x30
 800f8c4:	1e94      	subs	r4, r2, #2
 800f8c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f8ca:	1c41      	adds	r1, r0, #1
 800f8cc:	4623      	mov	r3, r4
 800f8ce:	42ab      	cmp	r3, r5
 800f8d0:	d30a      	bcc.n	800f8e8 <__exponent+0x5e>
 800f8d2:	f10d 0309 	add.w	r3, sp, #9
 800f8d6:	1a9b      	subs	r3, r3, r2
 800f8d8:	42ac      	cmp	r4, r5
 800f8da:	bf88      	it	hi
 800f8dc:	2300      	movhi	r3, #0
 800f8de:	3302      	adds	r3, #2
 800f8e0:	4403      	add	r3, r0
 800f8e2:	1a18      	subs	r0, r3, r0
 800f8e4:	b003      	add	sp, #12
 800f8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8e8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f8ec:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f8f0:	e7ed      	b.n	800f8ce <__exponent+0x44>
 800f8f2:	2330      	movs	r3, #48	@ 0x30
 800f8f4:	3130      	adds	r1, #48	@ 0x30
 800f8f6:	7083      	strb	r3, [r0, #2]
 800f8f8:	70c1      	strb	r1, [r0, #3]
 800f8fa:	1d03      	adds	r3, r0, #4
 800f8fc:	e7f1      	b.n	800f8e2 <__exponent+0x58>
	...

0800f900 <_printf_float>:
 800f900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f904:	b08d      	sub	sp, #52	@ 0x34
 800f906:	460c      	mov	r4, r1
 800f908:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f90c:	4616      	mov	r6, r2
 800f90e:	461f      	mov	r7, r3
 800f910:	4605      	mov	r5, r0
 800f912:	f001 f905 	bl	8010b20 <_localeconv_r>
 800f916:	6803      	ldr	r3, [r0, #0]
 800f918:	9304      	str	r3, [sp, #16]
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7f0 fcb8 	bl	8000290 <strlen>
 800f920:	2300      	movs	r3, #0
 800f922:	930a      	str	r3, [sp, #40]	@ 0x28
 800f924:	f8d8 3000 	ldr.w	r3, [r8]
 800f928:	9005      	str	r0, [sp, #20]
 800f92a:	3307      	adds	r3, #7
 800f92c:	f023 0307 	bic.w	r3, r3, #7
 800f930:	f103 0208 	add.w	r2, r3, #8
 800f934:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f938:	f8d4 b000 	ldr.w	fp, [r4]
 800f93c:	f8c8 2000 	str.w	r2, [r8]
 800f940:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f944:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f948:	9307      	str	r3, [sp, #28]
 800f94a:	f8cd 8018 	str.w	r8, [sp, #24]
 800f94e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f956:	4b9c      	ldr	r3, [pc, #624]	@ (800fbc8 <_printf_float+0x2c8>)
 800f958:	f04f 32ff 	mov.w	r2, #4294967295
 800f95c:	f7f1 f8f6 	bl	8000b4c <__aeabi_dcmpun>
 800f960:	bb70      	cbnz	r0, 800f9c0 <_printf_float+0xc0>
 800f962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f966:	4b98      	ldr	r3, [pc, #608]	@ (800fbc8 <_printf_float+0x2c8>)
 800f968:	f04f 32ff 	mov.w	r2, #4294967295
 800f96c:	f7f1 f8d0 	bl	8000b10 <__aeabi_dcmple>
 800f970:	bb30      	cbnz	r0, 800f9c0 <_printf_float+0xc0>
 800f972:	2200      	movs	r2, #0
 800f974:	2300      	movs	r3, #0
 800f976:	4640      	mov	r0, r8
 800f978:	4649      	mov	r1, r9
 800f97a:	f7f1 f8bf 	bl	8000afc <__aeabi_dcmplt>
 800f97e:	b110      	cbz	r0, 800f986 <_printf_float+0x86>
 800f980:	232d      	movs	r3, #45	@ 0x2d
 800f982:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f986:	4a91      	ldr	r2, [pc, #580]	@ (800fbcc <_printf_float+0x2cc>)
 800f988:	4b91      	ldr	r3, [pc, #580]	@ (800fbd0 <_printf_float+0x2d0>)
 800f98a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f98e:	bf8c      	ite	hi
 800f990:	4690      	movhi	r8, r2
 800f992:	4698      	movls	r8, r3
 800f994:	2303      	movs	r3, #3
 800f996:	6123      	str	r3, [r4, #16]
 800f998:	f02b 0304 	bic.w	r3, fp, #4
 800f99c:	6023      	str	r3, [r4, #0]
 800f99e:	f04f 0900 	mov.w	r9, #0
 800f9a2:	9700      	str	r7, [sp, #0]
 800f9a4:	4633      	mov	r3, r6
 800f9a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f9a8:	4621      	mov	r1, r4
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	f000 f9d2 	bl	800fd54 <_printf_common>
 800f9b0:	3001      	adds	r0, #1
 800f9b2:	f040 808d 	bne.w	800fad0 <_printf_float+0x1d0>
 800f9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ba:	b00d      	add	sp, #52	@ 0x34
 800f9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9c0:	4642      	mov	r2, r8
 800f9c2:	464b      	mov	r3, r9
 800f9c4:	4640      	mov	r0, r8
 800f9c6:	4649      	mov	r1, r9
 800f9c8:	f7f1 f8c0 	bl	8000b4c <__aeabi_dcmpun>
 800f9cc:	b140      	cbz	r0, 800f9e0 <_printf_float+0xe0>
 800f9ce:	464b      	mov	r3, r9
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	bfbc      	itt	lt
 800f9d4:	232d      	movlt	r3, #45	@ 0x2d
 800f9d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f9da:	4a7e      	ldr	r2, [pc, #504]	@ (800fbd4 <_printf_float+0x2d4>)
 800f9dc:	4b7e      	ldr	r3, [pc, #504]	@ (800fbd8 <_printf_float+0x2d8>)
 800f9de:	e7d4      	b.n	800f98a <_printf_float+0x8a>
 800f9e0:	6863      	ldr	r3, [r4, #4]
 800f9e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f9e6:	9206      	str	r2, [sp, #24]
 800f9e8:	1c5a      	adds	r2, r3, #1
 800f9ea:	d13b      	bne.n	800fa64 <_printf_float+0x164>
 800f9ec:	2306      	movs	r3, #6
 800f9ee:	6063      	str	r3, [r4, #4]
 800f9f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	6022      	str	r2, [r4, #0]
 800f9f8:	9303      	str	r3, [sp, #12]
 800f9fa:	ab0a      	add	r3, sp, #40	@ 0x28
 800f9fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fa00:	ab09      	add	r3, sp, #36	@ 0x24
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	6861      	ldr	r1, [r4, #4]
 800fa06:	ec49 8b10 	vmov	d0, r8, r9
 800fa0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fa0e:	4628      	mov	r0, r5
 800fa10:	f7ff fed6 	bl	800f7c0 <__cvt>
 800fa14:	9b06      	ldr	r3, [sp, #24]
 800fa16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fa18:	2b47      	cmp	r3, #71	@ 0x47
 800fa1a:	4680      	mov	r8, r0
 800fa1c:	d129      	bne.n	800fa72 <_printf_float+0x172>
 800fa1e:	1cc8      	adds	r0, r1, #3
 800fa20:	db02      	blt.n	800fa28 <_printf_float+0x128>
 800fa22:	6863      	ldr	r3, [r4, #4]
 800fa24:	4299      	cmp	r1, r3
 800fa26:	dd41      	ble.n	800faac <_printf_float+0x1ac>
 800fa28:	f1aa 0a02 	sub.w	sl, sl, #2
 800fa2c:	fa5f fa8a 	uxtb.w	sl, sl
 800fa30:	3901      	subs	r1, #1
 800fa32:	4652      	mov	r2, sl
 800fa34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fa38:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa3a:	f7ff ff26 	bl	800f88a <__exponent>
 800fa3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa40:	1813      	adds	r3, r2, r0
 800fa42:	2a01      	cmp	r2, #1
 800fa44:	4681      	mov	r9, r0
 800fa46:	6123      	str	r3, [r4, #16]
 800fa48:	dc02      	bgt.n	800fa50 <_printf_float+0x150>
 800fa4a:	6822      	ldr	r2, [r4, #0]
 800fa4c:	07d2      	lsls	r2, r2, #31
 800fa4e:	d501      	bpl.n	800fa54 <_printf_float+0x154>
 800fa50:	3301      	adds	r3, #1
 800fa52:	6123      	str	r3, [r4, #16]
 800fa54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d0a2      	beq.n	800f9a2 <_printf_float+0xa2>
 800fa5c:	232d      	movs	r3, #45	@ 0x2d
 800fa5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa62:	e79e      	b.n	800f9a2 <_printf_float+0xa2>
 800fa64:	9a06      	ldr	r2, [sp, #24]
 800fa66:	2a47      	cmp	r2, #71	@ 0x47
 800fa68:	d1c2      	bne.n	800f9f0 <_printf_float+0xf0>
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d1c0      	bne.n	800f9f0 <_printf_float+0xf0>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	e7bd      	b.n	800f9ee <_printf_float+0xee>
 800fa72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fa76:	d9db      	bls.n	800fa30 <_printf_float+0x130>
 800fa78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fa7c:	d118      	bne.n	800fab0 <_printf_float+0x1b0>
 800fa7e:	2900      	cmp	r1, #0
 800fa80:	6863      	ldr	r3, [r4, #4]
 800fa82:	dd0b      	ble.n	800fa9c <_printf_float+0x19c>
 800fa84:	6121      	str	r1, [r4, #16]
 800fa86:	b913      	cbnz	r3, 800fa8e <_printf_float+0x18e>
 800fa88:	6822      	ldr	r2, [r4, #0]
 800fa8a:	07d0      	lsls	r0, r2, #31
 800fa8c:	d502      	bpl.n	800fa94 <_printf_float+0x194>
 800fa8e:	3301      	adds	r3, #1
 800fa90:	440b      	add	r3, r1
 800fa92:	6123      	str	r3, [r4, #16]
 800fa94:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fa96:	f04f 0900 	mov.w	r9, #0
 800fa9a:	e7db      	b.n	800fa54 <_printf_float+0x154>
 800fa9c:	b913      	cbnz	r3, 800faa4 <_printf_float+0x1a4>
 800fa9e:	6822      	ldr	r2, [r4, #0]
 800faa0:	07d2      	lsls	r2, r2, #31
 800faa2:	d501      	bpl.n	800faa8 <_printf_float+0x1a8>
 800faa4:	3302      	adds	r3, #2
 800faa6:	e7f4      	b.n	800fa92 <_printf_float+0x192>
 800faa8:	2301      	movs	r3, #1
 800faaa:	e7f2      	b.n	800fa92 <_printf_float+0x192>
 800faac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fab2:	4299      	cmp	r1, r3
 800fab4:	db05      	blt.n	800fac2 <_printf_float+0x1c2>
 800fab6:	6823      	ldr	r3, [r4, #0]
 800fab8:	6121      	str	r1, [r4, #16]
 800faba:	07d8      	lsls	r0, r3, #31
 800fabc:	d5ea      	bpl.n	800fa94 <_printf_float+0x194>
 800fabe:	1c4b      	adds	r3, r1, #1
 800fac0:	e7e7      	b.n	800fa92 <_printf_float+0x192>
 800fac2:	2900      	cmp	r1, #0
 800fac4:	bfd4      	ite	le
 800fac6:	f1c1 0202 	rsble	r2, r1, #2
 800faca:	2201      	movgt	r2, #1
 800facc:	4413      	add	r3, r2
 800face:	e7e0      	b.n	800fa92 <_printf_float+0x192>
 800fad0:	6823      	ldr	r3, [r4, #0]
 800fad2:	055a      	lsls	r2, r3, #21
 800fad4:	d407      	bmi.n	800fae6 <_printf_float+0x1e6>
 800fad6:	6923      	ldr	r3, [r4, #16]
 800fad8:	4642      	mov	r2, r8
 800fada:	4631      	mov	r1, r6
 800fadc:	4628      	mov	r0, r5
 800fade:	47b8      	blx	r7
 800fae0:	3001      	adds	r0, #1
 800fae2:	d12b      	bne.n	800fb3c <_printf_float+0x23c>
 800fae4:	e767      	b.n	800f9b6 <_printf_float+0xb6>
 800fae6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800faea:	f240 80dd 	bls.w	800fca8 <_printf_float+0x3a8>
 800faee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800faf2:	2200      	movs	r2, #0
 800faf4:	2300      	movs	r3, #0
 800faf6:	f7f0 fff7 	bl	8000ae8 <__aeabi_dcmpeq>
 800fafa:	2800      	cmp	r0, #0
 800fafc:	d033      	beq.n	800fb66 <_printf_float+0x266>
 800fafe:	4a37      	ldr	r2, [pc, #220]	@ (800fbdc <_printf_float+0x2dc>)
 800fb00:	2301      	movs	r3, #1
 800fb02:	4631      	mov	r1, r6
 800fb04:	4628      	mov	r0, r5
 800fb06:	47b8      	blx	r7
 800fb08:	3001      	adds	r0, #1
 800fb0a:	f43f af54 	beq.w	800f9b6 <_printf_float+0xb6>
 800fb0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fb12:	4543      	cmp	r3, r8
 800fb14:	db02      	blt.n	800fb1c <_printf_float+0x21c>
 800fb16:	6823      	ldr	r3, [r4, #0]
 800fb18:	07d8      	lsls	r0, r3, #31
 800fb1a:	d50f      	bpl.n	800fb3c <_printf_float+0x23c>
 800fb1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb20:	4631      	mov	r1, r6
 800fb22:	4628      	mov	r0, r5
 800fb24:	47b8      	blx	r7
 800fb26:	3001      	adds	r0, #1
 800fb28:	f43f af45 	beq.w	800f9b6 <_printf_float+0xb6>
 800fb2c:	f04f 0900 	mov.w	r9, #0
 800fb30:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb34:	f104 0a1a 	add.w	sl, r4, #26
 800fb38:	45c8      	cmp	r8, r9
 800fb3a:	dc09      	bgt.n	800fb50 <_printf_float+0x250>
 800fb3c:	6823      	ldr	r3, [r4, #0]
 800fb3e:	079b      	lsls	r3, r3, #30
 800fb40:	f100 8103 	bmi.w	800fd4a <_printf_float+0x44a>
 800fb44:	68e0      	ldr	r0, [r4, #12]
 800fb46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb48:	4298      	cmp	r0, r3
 800fb4a:	bfb8      	it	lt
 800fb4c:	4618      	movlt	r0, r3
 800fb4e:	e734      	b.n	800f9ba <_printf_float+0xba>
 800fb50:	2301      	movs	r3, #1
 800fb52:	4652      	mov	r2, sl
 800fb54:	4631      	mov	r1, r6
 800fb56:	4628      	mov	r0, r5
 800fb58:	47b8      	blx	r7
 800fb5a:	3001      	adds	r0, #1
 800fb5c:	f43f af2b 	beq.w	800f9b6 <_printf_float+0xb6>
 800fb60:	f109 0901 	add.w	r9, r9, #1
 800fb64:	e7e8      	b.n	800fb38 <_printf_float+0x238>
 800fb66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	dc39      	bgt.n	800fbe0 <_printf_float+0x2e0>
 800fb6c:	4a1b      	ldr	r2, [pc, #108]	@ (800fbdc <_printf_float+0x2dc>)
 800fb6e:	2301      	movs	r3, #1
 800fb70:	4631      	mov	r1, r6
 800fb72:	4628      	mov	r0, r5
 800fb74:	47b8      	blx	r7
 800fb76:	3001      	adds	r0, #1
 800fb78:	f43f af1d 	beq.w	800f9b6 <_printf_float+0xb6>
 800fb7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fb80:	ea59 0303 	orrs.w	r3, r9, r3
 800fb84:	d102      	bne.n	800fb8c <_printf_float+0x28c>
 800fb86:	6823      	ldr	r3, [r4, #0]
 800fb88:	07d9      	lsls	r1, r3, #31
 800fb8a:	d5d7      	bpl.n	800fb3c <_printf_float+0x23c>
 800fb8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb90:	4631      	mov	r1, r6
 800fb92:	4628      	mov	r0, r5
 800fb94:	47b8      	blx	r7
 800fb96:	3001      	adds	r0, #1
 800fb98:	f43f af0d 	beq.w	800f9b6 <_printf_float+0xb6>
 800fb9c:	f04f 0a00 	mov.w	sl, #0
 800fba0:	f104 0b1a 	add.w	fp, r4, #26
 800fba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fba6:	425b      	negs	r3, r3
 800fba8:	4553      	cmp	r3, sl
 800fbaa:	dc01      	bgt.n	800fbb0 <_printf_float+0x2b0>
 800fbac:	464b      	mov	r3, r9
 800fbae:	e793      	b.n	800fad8 <_printf_float+0x1d8>
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	465a      	mov	r2, fp
 800fbb4:	4631      	mov	r1, r6
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	47b8      	blx	r7
 800fbba:	3001      	adds	r0, #1
 800fbbc:	f43f aefb 	beq.w	800f9b6 <_printf_float+0xb6>
 800fbc0:	f10a 0a01 	add.w	sl, sl, #1
 800fbc4:	e7ee      	b.n	800fba4 <_printf_float+0x2a4>
 800fbc6:	bf00      	nop
 800fbc8:	7fefffff 	.word	0x7fefffff
 800fbcc:	08014161 	.word	0x08014161
 800fbd0:	0801415d 	.word	0x0801415d
 800fbd4:	08014169 	.word	0x08014169
 800fbd8:	08014165 	.word	0x08014165
 800fbdc:	08014363 	.word	0x08014363
 800fbe0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fbe2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fbe6:	4553      	cmp	r3, sl
 800fbe8:	bfa8      	it	ge
 800fbea:	4653      	movge	r3, sl
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	4699      	mov	r9, r3
 800fbf0:	dc36      	bgt.n	800fc60 <_printf_float+0x360>
 800fbf2:	f04f 0b00 	mov.w	fp, #0
 800fbf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbfa:	f104 021a 	add.w	r2, r4, #26
 800fbfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fc00:	9306      	str	r3, [sp, #24]
 800fc02:	eba3 0309 	sub.w	r3, r3, r9
 800fc06:	455b      	cmp	r3, fp
 800fc08:	dc31      	bgt.n	800fc6e <_printf_float+0x36e>
 800fc0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc0c:	459a      	cmp	sl, r3
 800fc0e:	dc3a      	bgt.n	800fc86 <_printf_float+0x386>
 800fc10:	6823      	ldr	r3, [r4, #0]
 800fc12:	07da      	lsls	r2, r3, #31
 800fc14:	d437      	bmi.n	800fc86 <_printf_float+0x386>
 800fc16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc18:	ebaa 0903 	sub.w	r9, sl, r3
 800fc1c:	9b06      	ldr	r3, [sp, #24]
 800fc1e:	ebaa 0303 	sub.w	r3, sl, r3
 800fc22:	4599      	cmp	r9, r3
 800fc24:	bfa8      	it	ge
 800fc26:	4699      	movge	r9, r3
 800fc28:	f1b9 0f00 	cmp.w	r9, #0
 800fc2c:	dc33      	bgt.n	800fc96 <_printf_float+0x396>
 800fc2e:	f04f 0800 	mov.w	r8, #0
 800fc32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc36:	f104 0b1a 	add.w	fp, r4, #26
 800fc3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc3c:	ebaa 0303 	sub.w	r3, sl, r3
 800fc40:	eba3 0309 	sub.w	r3, r3, r9
 800fc44:	4543      	cmp	r3, r8
 800fc46:	f77f af79 	ble.w	800fb3c <_printf_float+0x23c>
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	465a      	mov	r2, fp
 800fc4e:	4631      	mov	r1, r6
 800fc50:	4628      	mov	r0, r5
 800fc52:	47b8      	blx	r7
 800fc54:	3001      	adds	r0, #1
 800fc56:	f43f aeae 	beq.w	800f9b6 <_printf_float+0xb6>
 800fc5a:	f108 0801 	add.w	r8, r8, #1
 800fc5e:	e7ec      	b.n	800fc3a <_printf_float+0x33a>
 800fc60:	4642      	mov	r2, r8
 800fc62:	4631      	mov	r1, r6
 800fc64:	4628      	mov	r0, r5
 800fc66:	47b8      	blx	r7
 800fc68:	3001      	adds	r0, #1
 800fc6a:	d1c2      	bne.n	800fbf2 <_printf_float+0x2f2>
 800fc6c:	e6a3      	b.n	800f9b6 <_printf_float+0xb6>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	4631      	mov	r1, r6
 800fc72:	4628      	mov	r0, r5
 800fc74:	9206      	str	r2, [sp, #24]
 800fc76:	47b8      	blx	r7
 800fc78:	3001      	adds	r0, #1
 800fc7a:	f43f ae9c 	beq.w	800f9b6 <_printf_float+0xb6>
 800fc7e:	9a06      	ldr	r2, [sp, #24]
 800fc80:	f10b 0b01 	add.w	fp, fp, #1
 800fc84:	e7bb      	b.n	800fbfe <_printf_float+0x2fe>
 800fc86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc8a:	4631      	mov	r1, r6
 800fc8c:	4628      	mov	r0, r5
 800fc8e:	47b8      	blx	r7
 800fc90:	3001      	adds	r0, #1
 800fc92:	d1c0      	bne.n	800fc16 <_printf_float+0x316>
 800fc94:	e68f      	b.n	800f9b6 <_printf_float+0xb6>
 800fc96:	9a06      	ldr	r2, [sp, #24]
 800fc98:	464b      	mov	r3, r9
 800fc9a:	4442      	add	r2, r8
 800fc9c:	4631      	mov	r1, r6
 800fc9e:	4628      	mov	r0, r5
 800fca0:	47b8      	blx	r7
 800fca2:	3001      	adds	r0, #1
 800fca4:	d1c3      	bne.n	800fc2e <_printf_float+0x32e>
 800fca6:	e686      	b.n	800f9b6 <_printf_float+0xb6>
 800fca8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fcac:	f1ba 0f01 	cmp.w	sl, #1
 800fcb0:	dc01      	bgt.n	800fcb6 <_printf_float+0x3b6>
 800fcb2:	07db      	lsls	r3, r3, #31
 800fcb4:	d536      	bpl.n	800fd24 <_printf_float+0x424>
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	4642      	mov	r2, r8
 800fcba:	4631      	mov	r1, r6
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	47b8      	blx	r7
 800fcc0:	3001      	adds	r0, #1
 800fcc2:	f43f ae78 	beq.w	800f9b6 <_printf_float+0xb6>
 800fcc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcca:	4631      	mov	r1, r6
 800fccc:	4628      	mov	r0, r5
 800fcce:	47b8      	blx	r7
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	f43f ae70 	beq.w	800f9b6 <_printf_float+0xb6>
 800fcd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fcda:	2200      	movs	r2, #0
 800fcdc:	2300      	movs	r3, #0
 800fcde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fce2:	f7f0 ff01 	bl	8000ae8 <__aeabi_dcmpeq>
 800fce6:	b9c0      	cbnz	r0, 800fd1a <_printf_float+0x41a>
 800fce8:	4653      	mov	r3, sl
 800fcea:	f108 0201 	add.w	r2, r8, #1
 800fcee:	4631      	mov	r1, r6
 800fcf0:	4628      	mov	r0, r5
 800fcf2:	47b8      	blx	r7
 800fcf4:	3001      	adds	r0, #1
 800fcf6:	d10c      	bne.n	800fd12 <_printf_float+0x412>
 800fcf8:	e65d      	b.n	800f9b6 <_printf_float+0xb6>
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	465a      	mov	r2, fp
 800fcfe:	4631      	mov	r1, r6
 800fd00:	4628      	mov	r0, r5
 800fd02:	47b8      	blx	r7
 800fd04:	3001      	adds	r0, #1
 800fd06:	f43f ae56 	beq.w	800f9b6 <_printf_float+0xb6>
 800fd0a:	f108 0801 	add.w	r8, r8, #1
 800fd0e:	45d0      	cmp	r8, sl
 800fd10:	dbf3      	blt.n	800fcfa <_printf_float+0x3fa>
 800fd12:	464b      	mov	r3, r9
 800fd14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fd18:	e6df      	b.n	800fada <_printf_float+0x1da>
 800fd1a:	f04f 0800 	mov.w	r8, #0
 800fd1e:	f104 0b1a 	add.w	fp, r4, #26
 800fd22:	e7f4      	b.n	800fd0e <_printf_float+0x40e>
 800fd24:	2301      	movs	r3, #1
 800fd26:	4642      	mov	r2, r8
 800fd28:	e7e1      	b.n	800fcee <_printf_float+0x3ee>
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	464a      	mov	r2, r9
 800fd2e:	4631      	mov	r1, r6
 800fd30:	4628      	mov	r0, r5
 800fd32:	47b8      	blx	r7
 800fd34:	3001      	adds	r0, #1
 800fd36:	f43f ae3e 	beq.w	800f9b6 <_printf_float+0xb6>
 800fd3a:	f108 0801 	add.w	r8, r8, #1
 800fd3e:	68e3      	ldr	r3, [r4, #12]
 800fd40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fd42:	1a5b      	subs	r3, r3, r1
 800fd44:	4543      	cmp	r3, r8
 800fd46:	dcf0      	bgt.n	800fd2a <_printf_float+0x42a>
 800fd48:	e6fc      	b.n	800fb44 <_printf_float+0x244>
 800fd4a:	f04f 0800 	mov.w	r8, #0
 800fd4e:	f104 0919 	add.w	r9, r4, #25
 800fd52:	e7f4      	b.n	800fd3e <_printf_float+0x43e>

0800fd54 <_printf_common>:
 800fd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd58:	4616      	mov	r6, r2
 800fd5a:	4698      	mov	r8, r3
 800fd5c:	688a      	ldr	r2, [r1, #8]
 800fd5e:	690b      	ldr	r3, [r1, #16]
 800fd60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd64:	4293      	cmp	r3, r2
 800fd66:	bfb8      	it	lt
 800fd68:	4613      	movlt	r3, r2
 800fd6a:	6033      	str	r3, [r6, #0]
 800fd6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fd70:	4607      	mov	r7, r0
 800fd72:	460c      	mov	r4, r1
 800fd74:	b10a      	cbz	r2, 800fd7a <_printf_common+0x26>
 800fd76:	3301      	adds	r3, #1
 800fd78:	6033      	str	r3, [r6, #0]
 800fd7a:	6823      	ldr	r3, [r4, #0]
 800fd7c:	0699      	lsls	r1, r3, #26
 800fd7e:	bf42      	ittt	mi
 800fd80:	6833      	ldrmi	r3, [r6, #0]
 800fd82:	3302      	addmi	r3, #2
 800fd84:	6033      	strmi	r3, [r6, #0]
 800fd86:	6825      	ldr	r5, [r4, #0]
 800fd88:	f015 0506 	ands.w	r5, r5, #6
 800fd8c:	d106      	bne.n	800fd9c <_printf_common+0x48>
 800fd8e:	f104 0a19 	add.w	sl, r4, #25
 800fd92:	68e3      	ldr	r3, [r4, #12]
 800fd94:	6832      	ldr	r2, [r6, #0]
 800fd96:	1a9b      	subs	r3, r3, r2
 800fd98:	42ab      	cmp	r3, r5
 800fd9a:	dc26      	bgt.n	800fdea <_printf_common+0x96>
 800fd9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fda0:	6822      	ldr	r2, [r4, #0]
 800fda2:	3b00      	subs	r3, #0
 800fda4:	bf18      	it	ne
 800fda6:	2301      	movne	r3, #1
 800fda8:	0692      	lsls	r2, r2, #26
 800fdaa:	d42b      	bmi.n	800fe04 <_printf_common+0xb0>
 800fdac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fdb0:	4641      	mov	r1, r8
 800fdb2:	4638      	mov	r0, r7
 800fdb4:	47c8      	blx	r9
 800fdb6:	3001      	adds	r0, #1
 800fdb8:	d01e      	beq.n	800fdf8 <_printf_common+0xa4>
 800fdba:	6823      	ldr	r3, [r4, #0]
 800fdbc:	6922      	ldr	r2, [r4, #16]
 800fdbe:	f003 0306 	and.w	r3, r3, #6
 800fdc2:	2b04      	cmp	r3, #4
 800fdc4:	bf02      	ittt	eq
 800fdc6:	68e5      	ldreq	r5, [r4, #12]
 800fdc8:	6833      	ldreq	r3, [r6, #0]
 800fdca:	1aed      	subeq	r5, r5, r3
 800fdcc:	68a3      	ldr	r3, [r4, #8]
 800fdce:	bf0c      	ite	eq
 800fdd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fdd4:	2500      	movne	r5, #0
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	bfc4      	itt	gt
 800fdda:	1a9b      	subgt	r3, r3, r2
 800fddc:	18ed      	addgt	r5, r5, r3
 800fdde:	2600      	movs	r6, #0
 800fde0:	341a      	adds	r4, #26
 800fde2:	42b5      	cmp	r5, r6
 800fde4:	d11a      	bne.n	800fe1c <_printf_common+0xc8>
 800fde6:	2000      	movs	r0, #0
 800fde8:	e008      	b.n	800fdfc <_printf_common+0xa8>
 800fdea:	2301      	movs	r3, #1
 800fdec:	4652      	mov	r2, sl
 800fdee:	4641      	mov	r1, r8
 800fdf0:	4638      	mov	r0, r7
 800fdf2:	47c8      	blx	r9
 800fdf4:	3001      	adds	r0, #1
 800fdf6:	d103      	bne.n	800fe00 <_printf_common+0xac>
 800fdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800fdfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe00:	3501      	adds	r5, #1
 800fe02:	e7c6      	b.n	800fd92 <_printf_common+0x3e>
 800fe04:	18e1      	adds	r1, r4, r3
 800fe06:	1c5a      	adds	r2, r3, #1
 800fe08:	2030      	movs	r0, #48	@ 0x30
 800fe0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fe0e:	4422      	add	r2, r4
 800fe10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fe14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fe18:	3302      	adds	r3, #2
 800fe1a:	e7c7      	b.n	800fdac <_printf_common+0x58>
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	4622      	mov	r2, r4
 800fe20:	4641      	mov	r1, r8
 800fe22:	4638      	mov	r0, r7
 800fe24:	47c8      	blx	r9
 800fe26:	3001      	adds	r0, #1
 800fe28:	d0e6      	beq.n	800fdf8 <_printf_common+0xa4>
 800fe2a:	3601      	adds	r6, #1
 800fe2c:	e7d9      	b.n	800fde2 <_printf_common+0x8e>
	...

0800fe30 <_printf_i>:
 800fe30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe34:	7e0f      	ldrb	r7, [r1, #24]
 800fe36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fe38:	2f78      	cmp	r7, #120	@ 0x78
 800fe3a:	4691      	mov	r9, r2
 800fe3c:	4680      	mov	r8, r0
 800fe3e:	460c      	mov	r4, r1
 800fe40:	469a      	mov	sl, r3
 800fe42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fe46:	d807      	bhi.n	800fe58 <_printf_i+0x28>
 800fe48:	2f62      	cmp	r7, #98	@ 0x62
 800fe4a:	d80a      	bhi.n	800fe62 <_printf_i+0x32>
 800fe4c:	2f00      	cmp	r7, #0
 800fe4e:	f000 80d1 	beq.w	800fff4 <_printf_i+0x1c4>
 800fe52:	2f58      	cmp	r7, #88	@ 0x58
 800fe54:	f000 80b8 	beq.w	800ffc8 <_printf_i+0x198>
 800fe58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fe60:	e03a      	b.n	800fed8 <_printf_i+0xa8>
 800fe62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fe66:	2b15      	cmp	r3, #21
 800fe68:	d8f6      	bhi.n	800fe58 <_printf_i+0x28>
 800fe6a:	a101      	add	r1, pc, #4	@ (adr r1, 800fe70 <_printf_i+0x40>)
 800fe6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe70:	0800fec9 	.word	0x0800fec9
 800fe74:	0800fedd 	.word	0x0800fedd
 800fe78:	0800fe59 	.word	0x0800fe59
 800fe7c:	0800fe59 	.word	0x0800fe59
 800fe80:	0800fe59 	.word	0x0800fe59
 800fe84:	0800fe59 	.word	0x0800fe59
 800fe88:	0800fedd 	.word	0x0800fedd
 800fe8c:	0800fe59 	.word	0x0800fe59
 800fe90:	0800fe59 	.word	0x0800fe59
 800fe94:	0800fe59 	.word	0x0800fe59
 800fe98:	0800fe59 	.word	0x0800fe59
 800fe9c:	0800ffdb 	.word	0x0800ffdb
 800fea0:	0800ff07 	.word	0x0800ff07
 800fea4:	0800ff95 	.word	0x0800ff95
 800fea8:	0800fe59 	.word	0x0800fe59
 800feac:	0800fe59 	.word	0x0800fe59
 800feb0:	0800fffd 	.word	0x0800fffd
 800feb4:	0800fe59 	.word	0x0800fe59
 800feb8:	0800ff07 	.word	0x0800ff07
 800febc:	0800fe59 	.word	0x0800fe59
 800fec0:	0800fe59 	.word	0x0800fe59
 800fec4:	0800ff9d 	.word	0x0800ff9d
 800fec8:	6833      	ldr	r3, [r6, #0]
 800feca:	1d1a      	adds	r2, r3, #4
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	6032      	str	r2, [r6, #0]
 800fed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fed4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fed8:	2301      	movs	r3, #1
 800feda:	e09c      	b.n	8010016 <_printf_i+0x1e6>
 800fedc:	6833      	ldr	r3, [r6, #0]
 800fede:	6820      	ldr	r0, [r4, #0]
 800fee0:	1d19      	adds	r1, r3, #4
 800fee2:	6031      	str	r1, [r6, #0]
 800fee4:	0606      	lsls	r6, r0, #24
 800fee6:	d501      	bpl.n	800feec <_printf_i+0xbc>
 800fee8:	681d      	ldr	r5, [r3, #0]
 800feea:	e003      	b.n	800fef4 <_printf_i+0xc4>
 800feec:	0645      	lsls	r5, r0, #25
 800feee:	d5fb      	bpl.n	800fee8 <_printf_i+0xb8>
 800fef0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fef4:	2d00      	cmp	r5, #0
 800fef6:	da03      	bge.n	800ff00 <_printf_i+0xd0>
 800fef8:	232d      	movs	r3, #45	@ 0x2d
 800fefa:	426d      	negs	r5, r5
 800fefc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff00:	4858      	ldr	r0, [pc, #352]	@ (8010064 <_printf_i+0x234>)
 800ff02:	230a      	movs	r3, #10
 800ff04:	e011      	b.n	800ff2a <_printf_i+0xfa>
 800ff06:	6821      	ldr	r1, [r4, #0]
 800ff08:	6833      	ldr	r3, [r6, #0]
 800ff0a:	0608      	lsls	r0, r1, #24
 800ff0c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ff10:	d402      	bmi.n	800ff18 <_printf_i+0xe8>
 800ff12:	0649      	lsls	r1, r1, #25
 800ff14:	bf48      	it	mi
 800ff16:	b2ad      	uxthmi	r5, r5
 800ff18:	2f6f      	cmp	r7, #111	@ 0x6f
 800ff1a:	4852      	ldr	r0, [pc, #328]	@ (8010064 <_printf_i+0x234>)
 800ff1c:	6033      	str	r3, [r6, #0]
 800ff1e:	bf14      	ite	ne
 800ff20:	230a      	movne	r3, #10
 800ff22:	2308      	moveq	r3, #8
 800ff24:	2100      	movs	r1, #0
 800ff26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ff2a:	6866      	ldr	r6, [r4, #4]
 800ff2c:	60a6      	str	r6, [r4, #8]
 800ff2e:	2e00      	cmp	r6, #0
 800ff30:	db05      	blt.n	800ff3e <_printf_i+0x10e>
 800ff32:	6821      	ldr	r1, [r4, #0]
 800ff34:	432e      	orrs	r6, r5
 800ff36:	f021 0104 	bic.w	r1, r1, #4
 800ff3a:	6021      	str	r1, [r4, #0]
 800ff3c:	d04b      	beq.n	800ffd6 <_printf_i+0x1a6>
 800ff3e:	4616      	mov	r6, r2
 800ff40:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff44:	fb03 5711 	mls	r7, r3, r1, r5
 800ff48:	5dc7      	ldrb	r7, [r0, r7]
 800ff4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff4e:	462f      	mov	r7, r5
 800ff50:	42bb      	cmp	r3, r7
 800ff52:	460d      	mov	r5, r1
 800ff54:	d9f4      	bls.n	800ff40 <_printf_i+0x110>
 800ff56:	2b08      	cmp	r3, #8
 800ff58:	d10b      	bne.n	800ff72 <_printf_i+0x142>
 800ff5a:	6823      	ldr	r3, [r4, #0]
 800ff5c:	07df      	lsls	r7, r3, #31
 800ff5e:	d508      	bpl.n	800ff72 <_printf_i+0x142>
 800ff60:	6923      	ldr	r3, [r4, #16]
 800ff62:	6861      	ldr	r1, [r4, #4]
 800ff64:	4299      	cmp	r1, r3
 800ff66:	bfde      	ittt	le
 800ff68:	2330      	movle	r3, #48	@ 0x30
 800ff6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff72:	1b92      	subs	r2, r2, r6
 800ff74:	6122      	str	r2, [r4, #16]
 800ff76:	f8cd a000 	str.w	sl, [sp]
 800ff7a:	464b      	mov	r3, r9
 800ff7c:	aa03      	add	r2, sp, #12
 800ff7e:	4621      	mov	r1, r4
 800ff80:	4640      	mov	r0, r8
 800ff82:	f7ff fee7 	bl	800fd54 <_printf_common>
 800ff86:	3001      	adds	r0, #1
 800ff88:	d14a      	bne.n	8010020 <_printf_i+0x1f0>
 800ff8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff8e:	b004      	add	sp, #16
 800ff90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff94:	6823      	ldr	r3, [r4, #0]
 800ff96:	f043 0320 	orr.w	r3, r3, #32
 800ff9a:	6023      	str	r3, [r4, #0]
 800ff9c:	4832      	ldr	r0, [pc, #200]	@ (8010068 <_printf_i+0x238>)
 800ff9e:	2778      	movs	r7, #120	@ 0x78
 800ffa0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ffa4:	6823      	ldr	r3, [r4, #0]
 800ffa6:	6831      	ldr	r1, [r6, #0]
 800ffa8:	061f      	lsls	r7, r3, #24
 800ffaa:	f851 5b04 	ldr.w	r5, [r1], #4
 800ffae:	d402      	bmi.n	800ffb6 <_printf_i+0x186>
 800ffb0:	065f      	lsls	r7, r3, #25
 800ffb2:	bf48      	it	mi
 800ffb4:	b2ad      	uxthmi	r5, r5
 800ffb6:	6031      	str	r1, [r6, #0]
 800ffb8:	07d9      	lsls	r1, r3, #31
 800ffba:	bf44      	itt	mi
 800ffbc:	f043 0320 	orrmi.w	r3, r3, #32
 800ffc0:	6023      	strmi	r3, [r4, #0]
 800ffc2:	b11d      	cbz	r5, 800ffcc <_printf_i+0x19c>
 800ffc4:	2310      	movs	r3, #16
 800ffc6:	e7ad      	b.n	800ff24 <_printf_i+0xf4>
 800ffc8:	4826      	ldr	r0, [pc, #152]	@ (8010064 <_printf_i+0x234>)
 800ffca:	e7e9      	b.n	800ffa0 <_printf_i+0x170>
 800ffcc:	6823      	ldr	r3, [r4, #0]
 800ffce:	f023 0320 	bic.w	r3, r3, #32
 800ffd2:	6023      	str	r3, [r4, #0]
 800ffd4:	e7f6      	b.n	800ffc4 <_printf_i+0x194>
 800ffd6:	4616      	mov	r6, r2
 800ffd8:	e7bd      	b.n	800ff56 <_printf_i+0x126>
 800ffda:	6833      	ldr	r3, [r6, #0]
 800ffdc:	6825      	ldr	r5, [r4, #0]
 800ffde:	6961      	ldr	r1, [r4, #20]
 800ffe0:	1d18      	adds	r0, r3, #4
 800ffe2:	6030      	str	r0, [r6, #0]
 800ffe4:	062e      	lsls	r6, r5, #24
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	d501      	bpl.n	800ffee <_printf_i+0x1be>
 800ffea:	6019      	str	r1, [r3, #0]
 800ffec:	e002      	b.n	800fff4 <_printf_i+0x1c4>
 800ffee:	0668      	lsls	r0, r5, #25
 800fff0:	d5fb      	bpl.n	800ffea <_printf_i+0x1ba>
 800fff2:	8019      	strh	r1, [r3, #0]
 800fff4:	2300      	movs	r3, #0
 800fff6:	6123      	str	r3, [r4, #16]
 800fff8:	4616      	mov	r6, r2
 800fffa:	e7bc      	b.n	800ff76 <_printf_i+0x146>
 800fffc:	6833      	ldr	r3, [r6, #0]
 800fffe:	1d1a      	adds	r2, r3, #4
 8010000:	6032      	str	r2, [r6, #0]
 8010002:	681e      	ldr	r6, [r3, #0]
 8010004:	6862      	ldr	r2, [r4, #4]
 8010006:	2100      	movs	r1, #0
 8010008:	4630      	mov	r0, r6
 801000a:	f7f0 f8f1 	bl	80001f0 <memchr>
 801000e:	b108      	cbz	r0, 8010014 <_printf_i+0x1e4>
 8010010:	1b80      	subs	r0, r0, r6
 8010012:	6060      	str	r0, [r4, #4]
 8010014:	6863      	ldr	r3, [r4, #4]
 8010016:	6123      	str	r3, [r4, #16]
 8010018:	2300      	movs	r3, #0
 801001a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801001e:	e7aa      	b.n	800ff76 <_printf_i+0x146>
 8010020:	6923      	ldr	r3, [r4, #16]
 8010022:	4632      	mov	r2, r6
 8010024:	4649      	mov	r1, r9
 8010026:	4640      	mov	r0, r8
 8010028:	47d0      	blx	sl
 801002a:	3001      	adds	r0, #1
 801002c:	d0ad      	beq.n	800ff8a <_printf_i+0x15a>
 801002e:	6823      	ldr	r3, [r4, #0]
 8010030:	079b      	lsls	r3, r3, #30
 8010032:	d413      	bmi.n	801005c <_printf_i+0x22c>
 8010034:	68e0      	ldr	r0, [r4, #12]
 8010036:	9b03      	ldr	r3, [sp, #12]
 8010038:	4298      	cmp	r0, r3
 801003a:	bfb8      	it	lt
 801003c:	4618      	movlt	r0, r3
 801003e:	e7a6      	b.n	800ff8e <_printf_i+0x15e>
 8010040:	2301      	movs	r3, #1
 8010042:	4632      	mov	r2, r6
 8010044:	4649      	mov	r1, r9
 8010046:	4640      	mov	r0, r8
 8010048:	47d0      	blx	sl
 801004a:	3001      	adds	r0, #1
 801004c:	d09d      	beq.n	800ff8a <_printf_i+0x15a>
 801004e:	3501      	adds	r5, #1
 8010050:	68e3      	ldr	r3, [r4, #12]
 8010052:	9903      	ldr	r1, [sp, #12]
 8010054:	1a5b      	subs	r3, r3, r1
 8010056:	42ab      	cmp	r3, r5
 8010058:	dcf2      	bgt.n	8010040 <_printf_i+0x210>
 801005a:	e7eb      	b.n	8010034 <_printf_i+0x204>
 801005c:	2500      	movs	r5, #0
 801005e:	f104 0619 	add.w	r6, r4, #25
 8010062:	e7f5      	b.n	8010050 <_printf_i+0x220>
 8010064:	0801416d 	.word	0x0801416d
 8010068:	0801417e 	.word	0x0801417e

0801006c <_scanf_float>:
 801006c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010070:	b087      	sub	sp, #28
 8010072:	4691      	mov	r9, r2
 8010074:	9303      	str	r3, [sp, #12]
 8010076:	688b      	ldr	r3, [r1, #8]
 8010078:	1e5a      	subs	r2, r3, #1
 801007a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801007e:	bf81      	itttt	hi
 8010080:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010084:	eb03 0b05 	addhi.w	fp, r3, r5
 8010088:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801008c:	608b      	strhi	r3, [r1, #8]
 801008e:	680b      	ldr	r3, [r1, #0]
 8010090:	460a      	mov	r2, r1
 8010092:	f04f 0500 	mov.w	r5, #0
 8010096:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801009a:	f842 3b1c 	str.w	r3, [r2], #28
 801009e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80100a2:	4680      	mov	r8, r0
 80100a4:	460c      	mov	r4, r1
 80100a6:	bf98      	it	ls
 80100a8:	f04f 0b00 	movls.w	fp, #0
 80100ac:	9201      	str	r2, [sp, #4]
 80100ae:	4616      	mov	r6, r2
 80100b0:	46aa      	mov	sl, r5
 80100b2:	462f      	mov	r7, r5
 80100b4:	9502      	str	r5, [sp, #8]
 80100b6:	68a2      	ldr	r2, [r4, #8]
 80100b8:	b15a      	cbz	r2, 80100d2 <_scanf_float+0x66>
 80100ba:	f8d9 3000 	ldr.w	r3, [r9]
 80100be:	781b      	ldrb	r3, [r3, #0]
 80100c0:	2b4e      	cmp	r3, #78	@ 0x4e
 80100c2:	d863      	bhi.n	801018c <_scanf_float+0x120>
 80100c4:	2b40      	cmp	r3, #64	@ 0x40
 80100c6:	d83b      	bhi.n	8010140 <_scanf_float+0xd4>
 80100c8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80100cc:	b2c8      	uxtb	r0, r1
 80100ce:	280e      	cmp	r0, #14
 80100d0:	d939      	bls.n	8010146 <_scanf_float+0xda>
 80100d2:	b11f      	cbz	r7, 80100dc <_scanf_float+0x70>
 80100d4:	6823      	ldr	r3, [r4, #0]
 80100d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80100da:	6023      	str	r3, [r4, #0]
 80100dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80100e0:	f1ba 0f01 	cmp.w	sl, #1
 80100e4:	f200 8114 	bhi.w	8010310 <_scanf_float+0x2a4>
 80100e8:	9b01      	ldr	r3, [sp, #4]
 80100ea:	429e      	cmp	r6, r3
 80100ec:	f200 8105 	bhi.w	80102fa <_scanf_float+0x28e>
 80100f0:	2001      	movs	r0, #1
 80100f2:	b007      	add	sp, #28
 80100f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80100fc:	2a0d      	cmp	r2, #13
 80100fe:	d8e8      	bhi.n	80100d2 <_scanf_float+0x66>
 8010100:	a101      	add	r1, pc, #4	@ (adr r1, 8010108 <_scanf_float+0x9c>)
 8010102:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010106:	bf00      	nop
 8010108:	08010251 	.word	0x08010251
 801010c:	080100d3 	.word	0x080100d3
 8010110:	080100d3 	.word	0x080100d3
 8010114:	080100d3 	.word	0x080100d3
 8010118:	080102ad 	.word	0x080102ad
 801011c:	08010287 	.word	0x08010287
 8010120:	080100d3 	.word	0x080100d3
 8010124:	080100d3 	.word	0x080100d3
 8010128:	0801025f 	.word	0x0801025f
 801012c:	080100d3 	.word	0x080100d3
 8010130:	080100d3 	.word	0x080100d3
 8010134:	080100d3 	.word	0x080100d3
 8010138:	080100d3 	.word	0x080100d3
 801013c:	0801021b 	.word	0x0801021b
 8010140:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010144:	e7da      	b.n	80100fc <_scanf_float+0x90>
 8010146:	290e      	cmp	r1, #14
 8010148:	d8c3      	bhi.n	80100d2 <_scanf_float+0x66>
 801014a:	a001      	add	r0, pc, #4	@ (adr r0, 8010150 <_scanf_float+0xe4>)
 801014c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010150:	0801020b 	.word	0x0801020b
 8010154:	080100d3 	.word	0x080100d3
 8010158:	0801020b 	.word	0x0801020b
 801015c:	0801029b 	.word	0x0801029b
 8010160:	080100d3 	.word	0x080100d3
 8010164:	080101ad 	.word	0x080101ad
 8010168:	080101f1 	.word	0x080101f1
 801016c:	080101f1 	.word	0x080101f1
 8010170:	080101f1 	.word	0x080101f1
 8010174:	080101f1 	.word	0x080101f1
 8010178:	080101f1 	.word	0x080101f1
 801017c:	080101f1 	.word	0x080101f1
 8010180:	080101f1 	.word	0x080101f1
 8010184:	080101f1 	.word	0x080101f1
 8010188:	080101f1 	.word	0x080101f1
 801018c:	2b6e      	cmp	r3, #110	@ 0x6e
 801018e:	d809      	bhi.n	80101a4 <_scanf_float+0x138>
 8010190:	2b60      	cmp	r3, #96	@ 0x60
 8010192:	d8b1      	bhi.n	80100f8 <_scanf_float+0x8c>
 8010194:	2b54      	cmp	r3, #84	@ 0x54
 8010196:	d07b      	beq.n	8010290 <_scanf_float+0x224>
 8010198:	2b59      	cmp	r3, #89	@ 0x59
 801019a:	d19a      	bne.n	80100d2 <_scanf_float+0x66>
 801019c:	2d07      	cmp	r5, #7
 801019e:	d198      	bne.n	80100d2 <_scanf_float+0x66>
 80101a0:	2508      	movs	r5, #8
 80101a2:	e02f      	b.n	8010204 <_scanf_float+0x198>
 80101a4:	2b74      	cmp	r3, #116	@ 0x74
 80101a6:	d073      	beq.n	8010290 <_scanf_float+0x224>
 80101a8:	2b79      	cmp	r3, #121	@ 0x79
 80101aa:	e7f6      	b.n	801019a <_scanf_float+0x12e>
 80101ac:	6821      	ldr	r1, [r4, #0]
 80101ae:	05c8      	lsls	r0, r1, #23
 80101b0:	d51e      	bpl.n	80101f0 <_scanf_float+0x184>
 80101b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80101b6:	6021      	str	r1, [r4, #0]
 80101b8:	3701      	adds	r7, #1
 80101ba:	f1bb 0f00 	cmp.w	fp, #0
 80101be:	d003      	beq.n	80101c8 <_scanf_float+0x15c>
 80101c0:	3201      	adds	r2, #1
 80101c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80101c6:	60a2      	str	r2, [r4, #8]
 80101c8:	68a3      	ldr	r3, [r4, #8]
 80101ca:	3b01      	subs	r3, #1
 80101cc:	60a3      	str	r3, [r4, #8]
 80101ce:	6923      	ldr	r3, [r4, #16]
 80101d0:	3301      	adds	r3, #1
 80101d2:	6123      	str	r3, [r4, #16]
 80101d4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80101d8:	3b01      	subs	r3, #1
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f8c9 3004 	str.w	r3, [r9, #4]
 80101e0:	f340 8082 	ble.w	80102e8 <_scanf_float+0x27c>
 80101e4:	f8d9 3000 	ldr.w	r3, [r9]
 80101e8:	3301      	adds	r3, #1
 80101ea:	f8c9 3000 	str.w	r3, [r9]
 80101ee:	e762      	b.n	80100b6 <_scanf_float+0x4a>
 80101f0:	eb1a 0105 	adds.w	r1, sl, r5
 80101f4:	f47f af6d 	bne.w	80100d2 <_scanf_float+0x66>
 80101f8:	6822      	ldr	r2, [r4, #0]
 80101fa:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80101fe:	6022      	str	r2, [r4, #0]
 8010200:	460d      	mov	r5, r1
 8010202:	468a      	mov	sl, r1
 8010204:	f806 3b01 	strb.w	r3, [r6], #1
 8010208:	e7de      	b.n	80101c8 <_scanf_float+0x15c>
 801020a:	6822      	ldr	r2, [r4, #0]
 801020c:	0610      	lsls	r0, r2, #24
 801020e:	f57f af60 	bpl.w	80100d2 <_scanf_float+0x66>
 8010212:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010216:	6022      	str	r2, [r4, #0]
 8010218:	e7f4      	b.n	8010204 <_scanf_float+0x198>
 801021a:	f1ba 0f00 	cmp.w	sl, #0
 801021e:	d10c      	bne.n	801023a <_scanf_float+0x1ce>
 8010220:	b977      	cbnz	r7, 8010240 <_scanf_float+0x1d4>
 8010222:	6822      	ldr	r2, [r4, #0]
 8010224:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010228:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801022c:	d108      	bne.n	8010240 <_scanf_float+0x1d4>
 801022e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010232:	6022      	str	r2, [r4, #0]
 8010234:	f04f 0a01 	mov.w	sl, #1
 8010238:	e7e4      	b.n	8010204 <_scanf_float+0x198>
 801023a:	f1ba 0f02 	cmp.w	sl, #2
 801023e:	d050      	beq.n	80102e2 <_scanf_float+0x276>
 8010240:	2d01      	cmp	r5, #1
 8010242:	d002      	beq.n	801024a <_scanf_float+0x1de>
 8010244:	2d04      	cmp	r5, #4
 8010246:	f47f af44 	bne.w	80100d2 <_scanf_float+0x66>
 801024a:	3501      	adds	r5, #1
 801024c:	b2ed      	uxtb	r5, r5
 801024e:	e7d9      	b.n	8010204 <_scanf_float+0x198>
 8010250:	f1ba 0f01 	cmp.w	sl, #1
 8010254:	f47f af3d 	bne.w	80100d2 <_scanf_float+0x66>
 8010258:	f04f 0a02 	mov.w	sl, #2
 801025c:	e7d2      	b.n	8010204 <_scanf_float+0x198>
 801025e:	b975      	cbnz	r5, 801027e <_scanf_float+0x212>
 8010260:	2f00      	cmp	r7, #0
 8010262:	f47f af37 	bne.w	80100d4 <_scanf_float+0x68>
 8010266:	6822      	ldr	r2, [r4, #0]
 8010268:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801026c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010270:	f040 8103 	bne.w	801047a <_scanf_float+0x40e>
 8010274:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010278:	6022      	str	r2, [r4, #0]
 801027a:	2501      	movs	r5, #1
 801027c:	e7c2      	b.n	8010204 <_scanf_float+0x198>
 801027e:	2d03      	cmp	r5, #3
 8010280:	d0e3      	beq.n	801024a <_scanf_float+0x1de>
 8010282:	2d05      	cmp	r5, #5
 8010284:	e7df      	b.n	8010246 <_scanf_float+0x1da>
 8010286:	2d02      	cmp	r5, #2
 8010288:	f47f af23 	bne.w	80100d2 <_scanf_float+0x66>
 801028c:	2503      	movs	r5, #3
 801028e:	e7b9      	b.n	8010204 <_scanf_float+0x198>
 8010290:	2d06      	cmp	r5, #6
 8010292:	f47f af1e 	bne.w	80100d2 <_scanf_float+0x66>
 8010296:	2507      	movs	r5, #7
 8010298:	e7b4      	b.n	8010204 <_scanf_float+0x198>
 801029a:	6822      	ldr	r2, [r4, #0]
 801029c:	0591      	lsls	r1, r2, #22
 801029e:	f57f af18 	bpl.w	80100d2 <_scanf_float+0x66>
 80102a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80102a6:	6022      	str	r2, [r4, #0]
 80102a8:	9702      	str	r7, [sp, #8]
 80102aa:	e7ab      	b.n	8010204 <_scanf_float+0x198>
 80102ac:	6822      	ldr	r2, [r4, #0]
 80102ae:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80102b2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80102b6:	d005      	beq.n	80102c4 <_scanf_float+0x258>
 80102b8:	0550      	lsls	r0, r2, #21
 80102ba:	f57f af0a 	bpl.w	80100d2 <_scanf_float+0x66>
 80102be:	2f00      	cmp	r7, #0
 80102c0:	f000 80db 	beq.w	801047a <_scanf_float+0x40e>
 80102c4:	0591      	lsls	r1, r2, #22
 80102c6:	bf58      	it	pl
 80102c8:	9902      	ldrpl	r1, [sp, #8]
 80102ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80102ce:	bf58      	it	pl
 80102d0:	1a79      	subpl	r1, r7, r1
 80102d2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80102d6:	bf58      	it	pl
 80102d8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80102dc:	6022      	str	r2, [r4, #0]
 80102de:	2700      	movs	r7, #0
 80102e0:	e790      	b.n	8010204 <_scanf_float+0x198>
 80102e2:	f04f 0a03 	mov.w	sl, #3
 80102e6:	e78d      	b.n	8010204 <_scanf_float+0x198>
 80102e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80102ec:	4649      	mov	r1, r9
 80102ee:	4640      	mov	r0, r8
 80102f0:	4798      	blx	r3
 80102f2:	2800      	cmp	r0, #0
 80102f4:	f43f aedf 	beq.w	80100b6 <_scanf_float+0x4a>
 80102f8:	e6eb      	b.n	80100d2 <_scanf_float+0x66>
 80102fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80102fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010302:	464a      	mov	r2, r9
 8010304:	4640      	mov	r0, r8
 8010306:	4798      	blx	r3
 8010308:	6923      	ldr	r3, [r4, #16]
 801030a:	3b01      	subs	r3, #1
 801030c:	6123      	str	r3, [r4, #16]
 801030e:	e6eb      	b.n	80100e8 <_scanf_float+0x7c>
 8010310:	1e6b      	subs	r3, r5, #1
 8010312:	2b06      	cmp	r3, #6
 8010314:	d824      	bhi.n	8010360 <_scanf_float+0x2f4>
 8010316:	2d02      	cmp	r5, #2
 8010318:	d836      	bhi.n	8010388 <_scanf_float+0x31c>
 801031a:	9b01      	ldr	r3, [sp, #4]
 801031c:	429e      	cmp	r6, r3
 801031e:	f67f aee7 	bls.w	80100f0 <_scanf_float+0x84>
 8010322:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010326:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801032a:	464a      	mov	r2, r9
 801032c:	4640      	mov	r0, r8
 801032e:	4798      	blx	r3
 8010330:	6923      	ldr	r3, [r4, #16]
 8010332:	3b01      	subs	r3, #1
 8010334:	6123      	str	r3, [r4, #16]
 8010336:	e7f0      	b.n	801031a <_scanf_float+0x2ae>
 8010338:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801033c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010340:	464a      	mov	r2, r9
 8010342:	4640      	mov	r0, r8
 8010344:	4798      	blx	r3
 8010346:	6923      	ldr	r3, [r4, #16]
 8010348:	3b01      	subs	r3, #1
 801034a:	6123      	str	r3, [r4, #16]
 801034c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010350:	fa5f fa8a 	uxtb.w	sl, sl
 8010354:	f1ba 0f02 	cmp.w	sl, #2
 8010358:	d1ee      	bne.n	8010338 <_scanf_float+0x2cc>
 801035a:	3d03      	subs	r5, #3
 801035c:	b2ed      	uxtb	r5, r5
 801035e:	1b76      	subs	r6, r6, r5
 8010360:	6823      	ldr	r3, [r4, #0]
 8010362:	05da      	lsls	r2, r3, #23
 8010364:	d530      	bpl.n	80103c8 <_scanf_float+0x35c>
 8010366:	055b      	lsls	r3, r3, #21
 8010368:	d511      	bpl.n	801038e <_scanf_float+0x322>
 801036a:	9b01      	ldr	r3, [sp, #4]
 801036c:	429e      	cmp	r6, r3
 801036e:	f67f aebf 	bls.w	80100f0 <_scanf_float+0x84>
 8010372:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010376:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801037a:	464a      	mov	r2, r9
 801037c:	4640      	mov	r0, r8
 801037e:	4798      	blx	r3
 8010380:	6923      	ldr	r3, [r4, #16]
 8010382:	3b01      	subs	r3, #1
 8010384:	6123      	str	r3, [r4, #16]
 8010386:	e7f0      	b.n	801036a <_scanf_float+0x2fe>
 8010388:	46aa      	mov	sl, r5
 801038a:	46b3      	mov	fp, r6
 801038c:	e7de      	b.n	801034c <_scanf_float+0x2e0>
 801038e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010392:	6923      	ldr	r3, [r4, #16]
 8010394:	2965      	cmp	r1, #101	@ 0x65
 8010396:	f103 33ff 	add.w	r3, r3, #4294967295
 801039a:	f106 35ff 	add.w	r5, r6, #4294967295
 801039e:	6123      	str	r3, [r4, #16]
 80103a0:	d00c      	beq.n	80103bc <_scanf_float+0x350>
 80103a2:	2945      	cmp	r1, #69	@ 0x45
 80103a4:	d00a      	beq.n	80103bc <_scanf_float+0x350>
 80103a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80103aa:	464a      	mov	r2, r9
 80103ac:	4640      	mov	r0, r8
 80103ae:	4798      	blx	r3
 80103b0:	6923      	ldr	r3, [r4, #16]
 80103b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80103b6:	3b01      	subs	r3, #1
 80103b8:	1eb5      	subs	r5, r6, #2
 80103ba:	6123      	str	r3, [r4, #16]
 80103bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80103c0:	464a      	mov	r2, r9
 80103c2:	4640      	mov	r0, r8
 80103c4:	4798      	blx	r3
 80103c6:	462e      	mov	r6, r5
 80103c8:	6822      	ldr	r2, [r4, #0]
 80103ca:	f012 0210 	ands.w	r2, r2, #16
 80103ce:	d001      	beq.n	80103d4 <_scanf_float+0x368>
 80103d0:	2000      	movs	r0, #0
 80103d2:	e68e      	b.n	80100f2 <_scanf_float+0x86>
 80103d4:	7032      	strb	r2, [r6, #0]
 80103d6:	6823      	ldr	r3, [r4, #0]
 80103d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80103dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80103e0:	d125      	bne.n	801042e <_scanf_float+0x3c2>
 80103e2:	9b02      	ldr	r3, [sp, #8]
 80103e4:	429f      	cmp	r7, r3
 80103e6:	d00a      	beq.n	80103fe <_scanf_float+0x392>
 80103e8:	1bda      	subs	r2, r3, r7
 80103ea:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80103ee:	429e      	cmp	r6, r3
 80103f0:	bf28      	it	cs
 80103f2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80103f6:	4922      	ldr	r1, [pc, #136]	@ (8010480 <_scanf_float+0x414>)
 80103f8:	4630      	mov	r0, r6
 80103fa:	f000 f9ad 	bl	8010758 <siprintf>
 80103fe:	9901      	ldr	r1, [sp, #4]
 8010400:	2200      	movs	r2, #0
 8010402:	4640      	mov	r0, r8
 8010404:	f7ff f944 	bl	800f690 <_strtod_r>
 8010408:	9b03      	ldr	r3, [sp, #12]
 801040a:	6821      	ldr	r1, [r4, #0]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f011 0f02 	tst.w	r1, #2
 8010412:	ec57 6b10 	vmov	r6, r7, d0
 8010416:	f103 0204 	add.w	r2, r3, #4
 801041a:	d015      	beq.n	8010448 <_scanf_float+0x3dc>
 801041c:	9903      	ldr	r1, [sp, #12]
 801041e:	600a      	str	r2, [r1, #0]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	e9c3 6700 	strd	r6, r7, [r3]
 8010426:	68e3      	ldr	r3, [r4, #12]
 8010428:	3301      	adds	r3, #1
 801042a:	60e3      	str	r3, [r4, #12]
 801042c:	e7d0      	b.n	80103d0 <_scanf_float+0x364>
 801042e:	9b04      	ldr	r3, [sp, #16]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d0e4      	beq.n	80103fe <_scanf_float+0x392>
 8010434:	9905      	ldr	r1, [sp, #20]
 8010436:	230a      	movs	r3, #10
 8010438:	3101      	adds	r1, #1
 801043a:	4640      	mov	r0, r8
 801043c:	f7ff f9b4 	bl	800f7a8 <_strtol_r>
 8010440:	9b04      	ldr	r3, [sp, #16]
 8010442:	9e05      	ldr	r6, [sp, #20]
 8010444:	1ac2      	subs	r2, r0, r3
 8010446:	e7d0      	b.n	80103ea <_scanf_float+0x37e>
 8010448:	f011 0f04 	tst.w	r1, #4
 801044c:	9903      	ldr	r1, [sp, #12]
 801044e:	600a      	str	r2, [r1, #0]
 8010450:	d1e6      	bne.n	8010420 <_scanf_float+0x3b4>
 8010452:	681d      	ldr	r5, [r3, #0]
 8010454:	4632      	mov	r2, r6
 8010456:	463b      	mov	r3, r7
 8010458:	4630      	mov	r0, r6
 801045a:	4639      	mov	r1, r7
 801045c:	f7f0 fb76 	bl	8000b4c <__aeabi_dcmpun>
 8010460:	b128      	cbz	r0, 801046e <_scanf_float+0x402>
 8010462:	4808      	ldr	r0, [pc, #32]	@ (8010484 <_scanf_float+0x418>)
 8010464:	f000 fc04 	bl	8010c70 <nanf>
 8010468:	ed85 0a00 	vstr	s0, [r5]
 801046c:	e7db      	b.n	8010426 <_scanf_float+0x3ba>
 801046e:	4630      	mov	r0, r6
 8010470:	4639      	mov	r1, r7
 8010472:	f7f0 fbc9 	bl	8000c08 <__aeabi_d2f>
 8010476:	6028      	str	r0, [r5, #0]
 8010478:	e7d5      	b.n	8010426 <_scanf_float+0x3ba>
 801047a:	2700      	movs	r7, #0
 801047c:	e62e      	b.n	80100dc <_scanf_float+0x70>
 801047e:	bf00      	nop
 8010480:	0801418f 	.word	0x0801418f
 8010484:	0801415a 	.word	0x0801415a

08010488 <std>:
 8010488:	2300      	movs	r3, #0
 801048a:	b510      	push	{r4, lr}
 801048c:	4604      	mov	r4, r0
 801048e:	e9c0 3300 	strd	r3, r3, [r0]
 8010492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010496:	6083      	str	r3, [r0, #8]
 8010498:	8181      	strh	r1, [r0, #12]
 801049a:	6643      	str	r3, [r0, #100]	@ 0x64
 801049c:	81c2      	strh	r2, [r0, #14]
 801049e:	6183      	str	r3, [r0, #24]
 80104a0:	4619      	mov	r1, r3
 80104a2:	2208      	movs	r2, #8
 80104a4:	305c      	adds	r0, #92	@ 0x5c
 80104a6:	f000 fa8f 	bl	80109c8 <memset>
 80104aa:	4b0d      	ldr	r3, [pc, #52]	@ (80104e0 <std+0x58>)
 80104ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80104ae:	4b0d      	ldr	r3, [pc, #52]	@ (80104e4 <std+0x5c>)
 80104b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80104b2:	4b0d      	ldr	r3, [pc, #52]	@ (80104e8 <std+0x60>)
 80104b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80104b6:	4b0d      	ldr	r3, [pc, #52]	@ (80104ec <std+0x64>)
 80104b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80104ba:	4b0d      	ldr	r3, [pc, #52]	@ (80104f0 <std+0x68>)
 80104bc:	6224      	str	r4, [r4, #32]
 80104be:	429c      	cmp	r4, r3
 80104c0:	d006      	beq.n	80104d0 <std+0x48>
 80104c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80104c6:	4294      	cmp	r4, r2
 80104c8:	d002      	beq.n	80104d0 <std+0x48>
 80104ca:	33d0      	adds	r3, #208	@ 0xd0
 80104cc:	429c      	cmp	r4, r3
 80104ce:	d105      	bne.n	80104dc <std+0x54>
 80104d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80104d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104d8:	f000 bba6 	b.w	8010c28 <__retarget_lock_init_recursive>
 80104dc:	bd10      	pop	{r4, pc}
 80104de:	bf00      	nop
 80104e0:	080107f5 	.word	0x080107f5
 80104e4:	0801081b 	.word	0x0801081b
 80104e8:	08010853 	.word	0x08010853
 80104ec:	08010877 	.word	0x08010877
 80104f0:	200019c4 	.word	0x200019c4

080104f4 <stdio_exit_handler>:
 80104f4:	4a02      	ldr	r2, [pc, #8]	@ (8010500 <stdio_exit_handler+0xc>)
 80104f6:	4903      	ldr	r1, [pc, #12]	@ (8010504 <stdio_exit_handler+0x10>)
 80104f8:	4803      	ldr	r0, [pc, #12]	@ (8010508 <stdio_exit_handler+0x14>)
 80104fa:	f000 b87b 	b.w	80105f4 <_fwalk_sglue>
 80104fe:	bf00      	nop
 8010500:	20000130 	.word	0x20000130
 8010504:	08013651 	.word	0x08013651
 8010508:	200002ac 	.word	0x200002ac

0801050c <cleanup_stdio>:
 801050c:	6841      	ldr	r1, [r0, #4]
 801050e:	4b0c      	ldr	r3, [pc, #48]	@ (8010540 <cleanup_stdio+0x34>)
 8010510:	4299      	cmp	r1, r3
 8010512:	b510      	push	{r4, lr}
 8010514:	4604      	mov	r4, r0
 8010516:	d001      	beq.n	801051c <cleanup_stdio+0x10>
 8010518:	f003 f89a 	bl	8013650 <_fflush_r>
 801051c:	68a1      	ldr	r1, [r4, #8]
 801051e:	4b09      	ldr	r3, [pc, #36]	@ (8010544 <cleanup_stdio+0x38>)
 8010520:	4299      	cmp	r1, r3
 8010522:	d002      	beq.n	801052a <cleanup_stdio+0x1e>
 8010524:	4620      	mov	r0, r4
 8010526:	f003 f893 	bl	8013650 <_fflush_r>
 801052a:	68e1      	ldr	r1, [r4, #12]
 801052c:	4b06      	ldr	r3, [pc, #24]	@ (8010548 <cleanup_stdio+0x3c>)
 801052e:	4299      	cmp	r1, r3
 8010530:	d004      	beq.n	801053c <cleanup_stdio+0x30>
 8010532:	4620      	mov	r0, r4
 8010534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010538:	f003 b88a 	b.w	8013650 <_fflush_r>
 801053c:	bd10      	pop	{r4, pc}
 801053e:	bf00      	nop
 8010540:	200019c4 	.word	0x200019c4
 8010544:	20001a2c 	.word	0x20001a2c
 8010548:	20001a94 	.word	0x20001a94

0801054c <global_stdio_init.part.0>:
 801054c:	b510      	push	{r4, lr}
 801054e:	4b0b      	ldr	r3, [pc, #44]	@ (801057c <global_stdio_init.part.0+0x30>)
 8010550:	4c0b      	ldr	r4, [pc, #44]	@ (8010580 <global_stdio_init.part.0+0x34>)
 8010552:	4a0c      	ldr	r2, [pc, #48]	@ (8010584 <global_stdio_init.part.0+0x38>)
 8010554:	601a      	str	r2, [r3, #0]
 8010556:	4620      	mov	r0, r4
 8010558:	2200      	movs	r2, #0
 801055a:	2104      	movs	r1, #4
 801055c:	f7ff ff94 	bl	8010488 <std>
 8010560:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010564:	2201      	movs	r2, #1
 8010566:	2109      	movs	r1, #9
 8010568:	f7ff ff8e 	bl	8010488 <std>
 801056c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010570:	2202      	movs	r2, #2
 8010572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010576:	2112      	movs	r1, #18
 8010578:	f7ff bf86 	b.w	8010488 <std>
 801057c:	20001afc 	.word	0x20001afc
 8010580:	200019c4 	.word	0x200019c4
 8010584:	080104f5 	.word	0x080104f5

08010588 <__sfp_lock_acquire>:
 8010588:	4801      	ldr	r0, [pc, #4]	@ (8010590 <__sfp_lock_acquire+0x8>)
 801058a:	f000 bb4e 	b.w	8010c2a <__retarget_lock_acquire_recursive>
 801058e:	bf00      	nop
 8010590:	20001b05 	.word	0x20001b05

08010594 <__sfp_lock_release>:
 8010594:	4801      	ldr	r0, [pc, #4]	@ (801059c <__sfp_lock_release+0x8>)
 8010596:	f000 bb49 	b.w	8010c2c <__retarget_lock_release_recursive>
 801059a:	bf00      	nop
 801059c:	20001b05 	.word	0x20001b05

080105a0 <__sinit>:
 80105a0:	b510      	push	{r4, lr}
 80105a2:	4604      	mov	r4, r0
 80105a4:	f7ff fff0 	bl	8010588 <__sfp_lock_acquire>
 80105a8:	6a23      	ldr	r3, [r4, #32]
 80105aa:	b11b      	cbz	r3, 80105b4 <__sinit+0x14>
 80105ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105b0:	f7ff bff0 	b.w	8010594 <__sfp_lock_release>
 80105b4:	4b04      	ldr	r3, [pc, #16]	@ (80105c8 <__sinit+0x28>)
 80105b6:	6223      	str	r3, [r4, #32]
 80105b8:	4b04      	ldr	r3, [pc, #16]	@ (80105cc <__sinit+0x2c>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d1f5      	bne.n	80105ac <__sinit+0xc>
 80105c0:	f7ff ffc4 	bl	801054c <global_stdio_init.part.0>
 80105c4:	e7f2      	b.n	80105ac <__sinit+0xc>
 80105c6:	bf00      	nop
 80105c8:	0801050d 	.word	0x0801050d
 80105cc:	20001afc 	.word	0x20001afc

080105d0 <fiprintf>:
 80105d0:	b40e      	push	{r1, r2, r3}
 80105d2:	b503      	push	{r0, r1, lr}
 80105d4:	4601      	mov	r1, r0
 80105d6:	ab03      	add	r3, sp, #12
 80105d8:	4805      	ldr	r0, [pc, #20]	@ (80105f0 <fiprintf+0x20>)
 80105da:	f853 2b04 	ldr.w	r2, [r3], #4
 80105de:	6800      	ldr	r0, [r0, #0]
 80105e0:	9301      	str	r3, [sp, #4]
 80105e2:	f002 fd4b 	bl	801307c <_vfiprintf_r>
 80105e6:	b002      	add	sp, #8
 80105e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80105ec:	b003      	add	sp, #12
 80105ee:	4770      	bx	lr
 80105f0:	200002a8 	.word	0x200002a8

080105f4 <_fwalk_sglue>:
 80105f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105f8:	4607      	mov	r7, r0
 80105fa:	4688      	mov	r8, r1
 80105fc:	4614      	mov	r4, r2
 80105fe:	2600      	movs	r6, #0
 8010600:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010604:	f1b9 0901 	subs.w	r9, r9, #1
 8010608:	d505      	bpl.n	8010616 <_fwalk_sglue+0x22>
 801060a:	6824      	ldr	r4, [r4, #0]
 801060c:	2c00      	cmp	r4, #0
 801060e:	d1f7      	bne.n	8010600 <_fwalk_sglue+0xc>
 8010610:	4630      	mov	r0, r6
 8010612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010616:	89ab      	ldrh	r3, [r5, #12]
 8010618:	2b01      	cmp	r3, #1
 801061a:	d907      	bls.n	801062c <_fwalk_sglue+0x38>
 801061c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010620:	3301      	adds	r3, #1
 8010622:	d003      	beq.n	801062c <_fwalk_sglue+0x38>
 8010624:	4629      	mov	r1, r5
 8010626:	4638      	mov	r0, r7
 8010628:	47c0      	blx	r8
 801062a:	4306      	orrs	r6, r0
 801062c:	3568      	adds	r5, #104	@ 0x68
 801062e:	e7e9      	b.n	8010604 <_fwalk_sglue+0x10>

08010630 <_puts_r>:
 8010630:	6a03      	ldr	r3, [r0, #32]
 8010632:	b570      	push	{r4, r5, r6, lr}
 8010634:	6884      	ldr	r4, [r0, #8]
 8010636:	4605      	mov	r5, r0
 8010638:	460e      	mov	r6, r1
 801063a:	b90b      	cbnz	r3, 8010640 <_puts_r+0x10>
 801063c:	f7ff ffb0 	bl	80105a0 <__sinit>
 8010640:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010642:	07db      	lsls	r3, r3, #31
 8010644:	d405      	bmi.n	8010652 <_puts_r+0x22>
 8010646:	89a3      	ldrh	r3, [r4, #12]
 8010648:	0598      	lsls	r0, r3, #22
 801064a:	d402      	bmi.n	8010652 <_puts_r+0x22>
 801064c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801064e:	f000 faec 	bl	8010c2a <__retarget_lock_acquire_recursive>
 8010652:	89a3      	ldrh	r3, [r4, #12]
 8010654:	0719      	lsls	r1, r3, #28
 8010656:	d502      	bpl.n	801065e <_puts_r+0x2e>
 8010658:	6923      	ldr	r3, [r4, #16]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d135      	bne.n	80106ca <_puts_r+0x9a>
 801065e:	4621      	mov	r1, r4
 8010660:	4628      	mov	r0, r5
 8010662:	f000 f94b 	bl	80108fc <__swsetup_r>
 8010666:	b380      	cbz	r0, 80106ca <_puts_r+0x9a>
 8010668:	f04f 35ff 	mov.w	r5, #4294967295
 801066c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801066e:	07da      	lsls	r2, r3, #31
 8010670:	d405      	bmi.n	801067e <_puts_r+0x4e>
 8010672:	89a3      	ldrh	r3, [r4, #12]
 8010674:	059b      	lsls	r3, r3, #22
 8010676:	d402      	bmi.n	801067e <_puts_r+0x4e>
 8010678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801067a:	f000 fad7 	bl	8010c2c <__retarget_lock_release_recursive>
 801067e:	4628      	mov	r0, r5
 8010680:	bd70      	pop	{r4, r5, r6, pc}
 8010682:	2b00      	cmp	r3, #0
 8010684:	da04      	bge.n	8010690 <_puts_r+0x60>
 8010686:	69a2      	ldr	r2, [r4, #24]
 8010688:	429a      	cmp	r2, r3
 801068a:	dc17      	bgt.n	80106bc <_puts_r+0x8c>
 801068c:	290a      	cmp	r1, #10
 801068e:	d015      	beq.n	80106bc <_puts_r+0x8c>
 8010690:	6823      	ldr	r3, [r4, #0]
 8010692:	1c5a      	adds	r2, r3, #1
 8010694:	6022      	str	r2, [r4, #0]
 8010696:	7019      	strb	r1, [r3, #0]
 8010698:	68a3      	ldr	r3, [r4, #8]
 801069a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801069e:	3b01      	subs	r3, #1
 80106a0:	60a3      	str	r3, [r4, #8]
 80106a2:	2900      	cmp	r1, #0
 80106a4:	d1ed      	bne.n	8010682 <_puts_r+0x52>
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	da11      	bge.n	80106ce <_puts_r+0x9e>
 80106aa:	4622      	mov	r2, r4
 80106ac:	210a      	movs	r1, #10
 80106ae:	4628      	mov	r0, r5
 80106b0:	f000 f8e5 	bl	801087e <__swbuf_r>
 80106b4:	3001      	adds	r0, #1
 80106b6:	d0d7      	beq.n	8010668 <_puts_r+0x38>
 80106b8:	250a      	movs	r5, #10
 80106ba:	e7d7      	b.n	801066c <_puts_r+0x3c>
 80106bc:	4622      	mov	r2, r4
 80106be:	4628      	mov	r0, r5
 80106c0:	f000 f8dd 	bl	801087e <__swbuf_r>
 80106c4:	3001      	adds	r0, #1
 80106c6:	d1e7      	bne.n	8010698 <_puts_r+0x68>
 80106c8:	e7ce      	b.n	8010668 <_puts_r+0x38>
 80106ca:	3e01      	subs	r6, #1
 80106cc:	e7e4      	b.n	8010698 <_puts_r+0x68>
 80106ce:	6823      	ldr	r3, [r4, #0]
 80106d0:	1c5a      	adds	r2, r3, #1
 80106d2:	6022      	str	r2, [r4, #0]
 80106d4:	220a      	movs	r2, #10
 80106d6:	701a      	strb	r2, [r3, #0]
 80106d8:	e7ee      	b.n	80106b8 <_puts_r+0x88>
	...

080106dc <puts>:
 80106dc:	4b02      	ldr	r3, [pc, #8]	@ (80106e8 <puts+0xc>)
 80106de:	4601      	mov	r1, r0
 80106e0:	6818      	ldr	r0, [r3, #0]
 80106e2:	f7ff bfa5 	b.w	8010630 <_puts_r>
 80106e6:	bf00      	nop
 80106e8:	200002a8 	.word	0x200002a8

080106ec <sniprintf>:
 80106ec:	b40c      	push	{r2, r3}
 80106ee:	b530      	push	{r4, r5, lr}
 80106f0:	4b18      	ldr	r3, [pc, #96]	@ (8010754 <sniprintf+0x68>)
 80106f2:	1e0c      	subs	r4, r1, #0
 80106f4:	681d      	ldr	r5, [r3, #0]
 80106f6:	b09d      	sub	sp, #116	@ 0x74
 80106f8:	da08      	bge.n	801070c <sniprintf+0x20>
 80106fa:	238b      	movs	r3, #139	@ 0x8b
 80106fc:	602b      	str	r3, [r5, #0]
 80106fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010702:	b01d      	add	sp, #116	@ 0x74
 8010704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010708:	b002      	add	sp, #8
 801070a:	4770      	bx	lr
 801070c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010710:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010714:	f04f 0300 	mov.w	r3, #0
 8010718:	931b      	str	r3, [sp, #108]	@ 0x6c
 801071a:	bf14      	ite	ne
 801071c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010720:	4623      	moveq	r3, r4
 8010722:	9304      	str	r3, [sp, #16]
 8010724:	9307      	str	r3, [sp, #28]
 8010726:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801072a:	9002      	str	r0, [sp, #8]
 801072c:	9006      	str	r0, [sp, #24]
 801072e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010732:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010734:	ab21      	add	r3, sp, #132	@ 0x84
 8010736:	a902      	add	r1, sp, #8
 8010738:	4628      	mov	r0, r5
 801073a:	9301      	str	r3, [sp, #4]
 801073c:	f002 f9a8 	bl	8012a90 <_svfiprintf_r>
 8010740:	1c43      	adds	r3, r0, #1
 8010742:	bfbc      	itt	lt
 8010744:	238b      	movlt	r3, #139	@ 0x8b
 8010746:	602b      	strlt	r3, [r5, #0]
 8010748:	2c00      	cmp	r4, #0
 801074a:	d0da      	beq.n	8010702 <sniprintf+0x16>
 801074c:	9b02      	ldr	r3, [sp, #8]
 801074e:	2200      	movs	r2, #0
 8010750:	701a      	strb	r2, [r3, #0]
 8010752:	e7d6      	b.n	8010702 <sniprintf+0x16>
 8010754:	200002a8 	.word	0x200002a8

08010758 <siprintf>:
 8010758:	b40e      	push	{r1, r2, r3}
 801075a:	b510      	push	{r4, lr}
 801075c:	b09d      	sub	sp, #116	@ 0x74
 801075e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010760:	9002      	str	r0, [sp, #8]
 8010762:	9006      	str	r0, [sp, #24]
 8010764:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010768:	480a      	ldr	r0, [pc, #40]	@ (8010794 <siprintf+0x3c>)
 801076a:	9107      	str	r1, [sp, #28]
 801076c:	9104      	str	r1, [sp, #16]
 801076e:	490a      	ldr	r1, [pc, #40]	@ (8010798 <siprintf+0x40>)
 8010770:	f853 2b04 	ldr.w	r2, [r3], #4
 8010774:	9105      	str	r1, [sp, #20]
 8010776:	2400      	movs	r4, #0
 8010778:	a902      	add	r1, sp, #8
 801077a:	6800      	ldr	r0, [r0, #0]
 801077c:	9301      	str	r3, [sp, #4]
 801077e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010780:	f002 f986 	bl	8012a90 <_svfiprintf_r>
 8010784:	9b02      	ldr	r3, [sp, #8]
 8010786:	701c      	strb	r4, [r3, #0]
 8010788:	b01d      	add	sp, #116	@ 0x74
 801078a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801078e:	b003      	add	sp, #12
 8010790:	4770      	bx	lr
 8010792:	bf00      	nop
 8010794:	200002a8 	.word	0x200002a8
 8010798:	ffff0208 	.word	0xffff0208

0801079c <siscanf>:
 801079c:	b40e      	push	{r1, r2, r3}
 801079e:	b570      	push	{r4, r5, r6, lr}
 80107a0:	b09d      	sub	sp, #116	@ 0x74
 80107a2:	ac21      	add	r4, sp, #132	@ 0x84
 80107a4:	2500      	movs	r5, #0
 80107a6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80107aa:	f854 6b04 	ldr.w	r6, [r4], #4
 80107ae:	f8ad 2014 	strh.w	r2, [sp, #20]
 80107b2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80107b4:	9002      	str	r0, [sp, #8]
 80107b6:	9006      	str	r0, [sp, #24]
 80107b8:	f7ef fd6a 	bl	8000290 <strlen>
 80107bc:	4b0b      	ldr	r3, [pc, #44]	@ (80107ec <siscanf+0x50>)
 80107be:	9003      	str	r0, [sp, #12]
 80107c0:	9007      	str	r0, [sp, #28]
 80107c2:	480b      	ldr	r0, [pc, #44]	@ (80107f0 <siscanf+0x54>)
 80107c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80107c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80107ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80107ce:	4632      	mov	r2, r6
 80107d0:	4623      	mov	r3, r4
 80107d2:	a902      	add	r1, sp, #8
 80107d4:	6800      	ldr	r0, [r0, #0]
 80107d6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80107d8:	9514      	str	r5, [sp, #80]	@ 0x50
 80107da:	9401      	str	r4, [sp, #4]
 80107dc:	f002 faae 	bl	8012d3c <__ssvfiscanf_r>
 80107e0:	b01d      	add	sp, #116	@ 0x74
 80107e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107e6:	b003      	add	sp, #12
 80107e8:	4770      	bx	lr
 80107ea:	bf00      	nop
 80107ec:	08010817 	.word	0x08010817
 80107f0:	200002a8 	.word	0x200002a8

080107f4 <__sread>:
 80107f4:	b510      	push	{r4, lr}
 80107f6:	460c      	mov	r4, r1
 80107f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107fc:	f000 f9b6 	bl	8010b6c <_read_r>
 8010800:	2800      	cmp	r0, #0
 8010802:	bfab      	itete	ge
 8010804:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010806:	89a3      	ldrhlt	r3, [r4, #12]
 8010808:	181b      	addge	r3, r3, r0
 801080a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801080e:	bfac      	ite	ge
 8010810:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010812:	81a3      	strhlt	r3, [r4, #12]
 8010814:	bd10      	pop	{r4, pc}

08010816 <__seofread>:
 8010816:	2000      	movs	r0, #0
 8010818:	4770      	bx	lr

0801081a <__swrite>:
 801081a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801081e:	461f      	mov	r7, r3
 8010820:	898b      	ldrh	r3, [r1, #12]
 8010822:	05db      	lsls	r3, r3, #23
 8010824:	4605      	mov	r5, r0
 8010826:	460c      	mov	r4, r1
 8010828:	4616      	mov	r6, r2
 801082a:	d505      	bpl.n	8010838 <__swrite+0x1e>
 801082c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010830:	2302      	movs	r3, #2
 8010832:	2200      	movs	r2, #0
 8010834:	f000 f988 	bl	8010b48 <_lseek_r>
 8010838:	89a3      	ldrh	r3, [r4, #12]
 801083a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801083e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010842:	81a3      	strh	r3, [r4, #12]
 8010844:	4632      	mov	r2, r6
 8010846:	463b      	mov	r3, r7
 8010848:	4628      	mov	r0, r5
 801084a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801084e:	f000 b9af 	b.w	8010bb0 <_write_r>

08010852 <__sseek>:
 8010852:	b510      	push	{r4, lr}
 8010854:	460c      	mov	r4, r1
 8010856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801085a:	f000 f975 	bl	8010b48 <_lseek_r>
 801085e:	1c43      	adds	r3, r0, #1
 8010860:	89a3      	ldrh	r3, [r4, #12]
 8010862:	bf15      	itete	ne
 8010864:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010866:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801086a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801086e:	81a3      	strheq	r3, [r4, #12]
 8010870:	bf18      	it	ne
 8010872:	81a3      	strhne	r3, [r4, #12]
 8010874:	bd10      	pop	{r4, pc}

08010876 <__sclose>:
 8010876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801087a:	f000 b955 	b.w	8010b28 <_close_r>

0801087e <__swbuf_r>:
 801087e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010880:	460e      	mov	r6, r1
 8010882:	4614      	mov	r4, r2
 8010884:	4605      	mov	r5, r0
 8010886:	b118      	cbz	r0, 8010890 <__swbuf_r+0x12>
 8010888:	6a03      	ldr	r3, [r0, #32]
 801088a:	b90b      	cbnz	r3, 8010890 <__swbuf_r+0x12>
 801088c:	f7ff fe88 	bl	80105a0 <__sinit>
 8010890:	69a3      	ldr	r3, [r4, #24]
 8010892:	60a3      	str	r3, [r4, #8]
 8010894:	89a3      	ldrh	r3, [r4, #12]
 8010896:	071a      	lsls	r2, r3, #28
 8010898:	d501      	bpl.n	801089e <__swbuf_r+0x20>
 801089a:	6923      	ldr	r3, [r4, #16]
 801089c:	b943      	cbnz	r3, 80108b0 <__swbuf_r+0x32>
 801089e:	4621      	mov	r1, r4
 80108a0:	4628      	mov	r0, r5
 80108a2:	f000 f82b 	bl	80108fc <__swsetup_r>
 80108a6:	b118      	cbz	r0, 80108b0 <__swbuf_r+0x32>
 80108a8:	f04f 37ff 	mov.w	r7, #4294967295
 80108ac:	4638      	mov	r0, r7
 80108ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108b0:	6823      	ldr	r3, [r4, #0]
 80108b2:	6922      	ldr	r2, [r4, #16]
 80108b4:	1a98      	subs	r0, r3, r2
 80108b6:	6963      	ldr	r3, [r4, #20]
 80108b8:	b2f6      	uxtb	r6, r6
 80108ba:	4283      	cmp	r3, r0
 80108bc:	4637      	mov	r7, r6
 80108be:	dc05      	bgt.n	80108cc <__swbuf_r+0x4e>
 80108c0:	4621      	mov	r1, r4
 80108c2:	4628      	mov	r0, r5
 80108c4:	f002 fec4 	bl	8013650 <_fflush_r>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	d1ed      	bne.n	80108a8 <__swbuf_r+0x2a>
 80108cc:	68a3      	ldr	r3, [r4, #8]
 80108ce:	3b01      	subs	r3, #1
 80108d0:	60a3      	str	r3, [r4, #8]
 80108d2:	6823      	ldr	r3, [r4, #0]
 80108d4:	1c5a      	adds	r2, r3, #1
 80108d6:	6022      	str	r2, [r4, #0]
 80108d8:	701e      	strb	r6, [r3, #0]
 80108da:	6962      	ldr	r2, [r4, #20]
 80108dc:	1c43      	adds	r3, r0, #1
 80108de:	429a      	cmp	r2, r3
 80108e0:	d004      	beq.n	80108ec <__swbuf_r+0x6e>
 80108e2:	89a3      	ldrh	r3, [r4, #12]
 80108e4:	07db      	lsls	r3, r3, #31
 80108e6:	d5e1      	bpl.n	80108ac <__swbuf_r+0x2e>
 80108e8:	2e0a      	cmp	r6, #10
 80108ea:	d1df      	bne.n	80108ac <__swbuf_r+0x2e>
 80108ec:	4621      	mov	r1, r4
 80108ee:	4628      	mov	r0, r5
 80108f0:	f002 feae 	bl	8013650 <_fflush_r>
 80108f4:	2800      	cmp	r0, #0
 80108f6:	d0d9      	beq.n	80108ac <__swbuf_r+0x2e>
 80108f8:	e7d6      	b.n	80108a8 <__swbuf_r+0x2a>
	...

080108fc <__swsetup_r>:
 80108fc:	b538      	push	{r3, r4, r5, lr}
 80108fe:	4b29      	ldr	r3, [pc, #164]	@ (80109a4 <__swsetup_r+0xa8>)
 8010900:	4605      	mov	r5, r0
 8010902:	6818      	ldr	r0, [r3, #0]
 8010904:	460c      	mov	r4, r1
 8010906:	b118      	cbz	r0, 8010910 <__swsetup_r+0x14>
 8010908:	6a03      	ldr	r3, [r0, #32]
 801090a:	b90b      	cbnz	r3, 8010910 <__swsetup_r+0x14>
 801090c:	f7ff fe48 	bl	80105a0 <__sinit>
 8010910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010914:	0719      	lsls	r1, r3, #28
 8010916:	d422      	bmi.n	801095e <__swsetup_r+0x62>
 8010918:	06da      	lsls	r2, r3, #27
 801091a:	d407      	bmi.n	801092c <__swsetup_r+0x30>
 801091c:	2209      	movs	r2, #9
 801091e:	602a      	str	r2, [r5, #0]
 8010920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010924:	81a3      	strh	r3, [r4, #12]
 8010926:	f04f 30ff 	mov.w	r0, #4294967295
 801092a:	e033      	b.n	8010994 <__swsetup_r+0x98>
 801092c:	0758      	lsls	r0, r3, #29
 801092e:	d512      	bpl.n	8010956 <__swsetup_r+0x5a>
 8010930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010932:	b141      	cbz	r1, 8010946 <__swsetup_r+0x4a>
 8010934:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010938:	4299      	cmp	r1, r3
 801093a:	d002      	beq.n	8010942 <__swsetup_r+0x46>
 801093c:	4628      	mov	r0, r5
 801093e:	f000 ffff 	bl	8011940 <_free_r>
 8010942:	2300      	movs	r3, #0
 8010944:	6363      	str	r3, [r4, #52]	@ 0x34
 8010946:	89a3      	ldrh	r3, [r4, #12]
 8010948:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801094c:	81a3      	strh	r3, [r4, #12]
 801094e:	2300      	movs	r3, #0
 8010950:	6063      	str	r3, [r4, #4]
 8010952:	6923      	ldr	r3, [r4, #16]
 8010954:	6023      	str	r3, [r4, #0]
 8010956:	89a3      	ldrh	r3, [r4, #12]
 8010958:	f043 0308 	orr.w	r3, r3, #8
 801095c:	81a3      	strh	r3, [r4, #12]
 801095e:	6923      	ldr	r3, [r4, #16]
 8010960:	b94b      	cbnz	r3, 8010976 <__swsetup_r+0x7a>
 8010962:	89a3      	ldrh	r3, [r4, #12]
 8010964:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801096c:	d003      	beq.n	8010976 <__swsetup_r+0x7a>
 801096e:	4621      	mov	r1, r4
 8010970:	4628      	mov	r0, r5
 8010972:	f002 febb 	bl	80136ec <__smakebuf_r>
 8010976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801097a:	f013 0201 	ands.w	r2, r3, #1
 801097e:	d00a      	beq.n	8010996 <__swsetup_r+0x9a>
 8010980:	2200      	movs	r2, #0
 8010982:	60a2      	str	r2, [r4, #8]
 8010984:	6962      	ldr	r2, [r4, #20]
 8010986:	4252      	negs	r2, r2
 8010988:	61a2      	str	r2, [r4, #24]
 801098a:	6922      	ldr	r2, [r4, #16]
 801098c:	b942      	cbnz	r2, 80109a0 <__swsetup_r+0xa4>
 801098e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010992:	d1c5      	bne.n	8010920 <__swsetup_r+0x24>
 8010994:	bd38      	pop	{r3, r4, r5, pc}
 8010996:	0799      	lsls	r1, r3, #30
 8010998:	bf58      	it	pl
 801099a:	6962      	ldrpl	r2, [r4, #20]
 801099c:	60a2      	str	r2, [r4, #8]
 801099e:	e7f4      	b.n	801098a <__swsetup_r+0x8e>
 80109a0:	2000      	movs	r0, #0
 80109a2:	e7f7      	b.n	8010994 <__swsetup_r+0x98>
 80109a4:	200002a8 	.word	0x200002a8

080109a8 <memcmp>:
 80109a8:	b510      	push	{r4, lr}
 80109aa:	3901      	subs	r1, #1
 80109ac:	4402      	add	r2, r0
 80109ae:	4290      	cmp	r0, r2
 80109b0:	d101      	bne.n	80109b6 <memcmp+0xe>
 80109b2:	2000      	movs	r0, #0
 80109b4:	e005      	b.n	80109c2 <memcmp+0x1a>
 80109b6:	7803      	ldrb	r3, [r0, #0]
 80109b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80109bc:	42a3      	cmp	r3, r4
 80109be:	d001      	beq.n	80109c4 <memcmp+0x1c>
 80109c0:	1b18      	subs	r0, r3, r4
 80109c2:	bd10      	pop	{r4, pc}
 80109c4:	3001      	adds	r0, #1
 80109c6:	e7f2      	b.n	80109ae <memcmp+0x6>

080109c8 <memset>:
 80109c8:	4402      	add	r2, r0
 80109ca:	4603      	mov	r3, r0
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d100      	bne.n	80109d2 <memset+0xa>
 80109d0:	4770      	bx	lr
 80109d2:	f803 1b01 	strb.w	r1, [r3], #1
 80109d6:	e7f9      	b.n	80109cc <memset+0x4>

080109d8 <strcat>:
 80109d8:	b510      	push	{r4, lr}
 80109da:	4602      	mov	r2, r0
 80109dc:	7814      	ldrb	r4, [r2, #0]
 80109de:	4613      	mov	r3, r2
 80109e0:	3201      	adds	r2, #1
 80109e2:	2c00      	cmp	r4, #0
 80109e4:	d1fa      	bne.n	80109dc <strcat+0x4>
 80109e6:	3b01      	subs	r3, #1
 80109e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80109f0:	2a00      	cmp	r2, #0
 80109f2:	d1f9      	bne.n	80109e8 <strcat+0x10>
 80109f4:	bd10      	pop	{r4, pc}

080109f6 <strncat>:
 80109f6:	b530      	push	{r4, r5, lr}
 80109f8:	4604      	mov	r4, r0
 80109fa:	7825      	ldrb	r5, [r4, #0]
 80109fc:	4623      	mov	r3, r4
 80109fe:	3401      	adds	r4, #1
 8010a00:	2d00      	cmp	r5, #0
 8010a02:	d1fa      	bne.n	80109fa <strncat+0x4>
 8010a04:	3a01      	subs	r2, #1
 8010a06:	d304      	bcc.n	8010a12 <strncat+0x1c>
 8010a08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a0c:	f803 4b01 	strb.w	r4, [r3], #1
 8010a10:	b904      	cbnz	r4, 8010a14 <strncat+0x1e>
 8010a12:	bd30      	pop	{r4, r5, pc}
 8010a14:	2a00      	cmp	r2, #0
 8010a16:	d1f5      	bne.n	8010a04 <strncat+0xe>
 8010a18:	701a      	strb	r2, [r3, #0]
 8010a1a:	e7f3      	b.n	8010a04 <strncat+0xe>

08010a1c <strncmp>:
 8010a1c:	b510      	push	{r4, lr}
 8010a1e:	b16a      	cbz	r2, 8010a3c <strncmp+0x20>
 8010a20:	3901      	subs	r1, #1
 8010a22:	1884      	adds	r4, r0, r2
 8010a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d103      	bne.n	8010a38 <strncmp+0x1c>
 8010a30:	42a0      	cmp	r0, r4
 8010a32:	d001      	beq.n	8010a38 <strncmp+0x1c>
 8010a34:	2a00      	cmp	r2, #0
 8010a36:	d1f5      	bne.n	8010a24 <strncmp+0x8>
 8010a38:	1ad0      	subs	r0, r2, r3
 8010a3a:	bd10      	pop	{r4, pc}
 8010a3c:	4610      	mov	r0, r2
 8010a3e:	e7fc      	b.n	8010a3a <strncmp+0x1e>

08010a40 <strncpy>:
 8010a40:	b510      	push	{r4, lr}
 8010a42:	3901      	subs	r1, #1
 8010a44:	4603      	mov	r3, r0
 8010a46:	b132      	cbz	r2, 8010a56 <strncpy+0x16>
 8010a48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010a4c:	f803 4b01 	strb.w	r4, [r3], #1
 8010a50:	3a01      	subs	r2, #1
 8010a52:	2c00      	cmp	r4, #0
 8010a54:	d1f7      	bne.n	8010a46 <strncpy+0x6>
 8010a56:	441a      	add	r2, r3
 8010a58:	2100      	movs	r1, #0
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d100      	bne.n	8010a60 <strncpy+0x20>
 8010a5e:	bd10      	pop	{r4, pc}
 8010a60:	f803 1b01 	strb.w	r1, [r3], #1
 8010a64:	e7f9      	b.n	8010a5a <strncpy+0x1a>
	...

08010a68 <strtok>:
 8010a68:	4b16      	ldr	r3, [pc, #88]	@ (8010ac4 <strtok+0x5c>)
 8010a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a6e:	681f      	ldr	r7, [r3, #0]
 8010a70:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8010a72:	4605      	mov	r5, r0
 8010a74:	460e      	mov	r6, r1
 8010a76:	b9ec      	cbnz	r4, 8010ab4 <strtok+0x4c>
 8010a78:	2050      	movs	r0, #80	@ 0x50
 8010a7a:	f7fd ff47 	bl	800e90c <malloc>
 8010a7e:	4602      	mov	r2, r0
 8010a80:	6478      	str	r0, [r7, #68]	@ 0x44
 8010a82:	b920      	cbnz	r0, 8010a8e <strtok+0x26>
 8010a84:	4b10      	ldr	r3, [pc, #64]	@ (8010ac8 <strtok+0x60>)
 8010a86:	4811      	ldr	r0, [pc, #68]	@ (8010acc <strtok+0x64>)
 8010a88:	215b      	movs	r1, #91	@ 0x5b
 8010a8a:	f7fd ff19 	bl	800e8c0 <__assert_func>
 8010a8e:	e9c0 4400 	strd	r4, r4, [r0]
 8010a92:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010a96:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010a9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8010a9e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8010aa2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8010aa6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8010aaa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8010aae:	6184      	str	r4, [r0, #24]
 8010ab0:	7704      	strb	r4, [r0, #28]
 8010ab2:	6244      	str	r4, [r0, #36]	@ 0x24
 8010ab4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010ab6:	4631      	mov	r1, r6
 8010ab8:	4628      	mov	r0, r5
 8010aba:	2301      	movs	r3, #1
 8010abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ac0:	f000 b806 	b.w	8010ad0 <__strtok_r>
 8010ac4:	200002a8 	.word	0x200002a8
 8010ac8:	08014194 	.word	0x08014194
 8010acc:	080141ab 	.word	0x080141ab

08010ad0 <__strtok_r>:
 8010ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	b908      	cbnz	r0, 8010ada <__strtok_r+0xa>
 8010ad6:	6814      	ldr	r4, [r2, #0]
 8010ad8:	b144      	cbz	r4, 8010aec <__strtok_r+0x1c>
 8010ada:	4620      	mov	r0, r4
 8010adc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010ae0:	460f      	mov	r7, r1
 8010ae2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010ae6:	b91e      	cbnz	r6, 8010af0 <__strtok_r+0x20>
 8010ae8:	b965      	cbnz	r5, 8010b04 <__strtok_r+0x34>
 8010aea:	6015      	str	r5, [r2, #0]
 8010aec:	2000      	movs	r0, #0
 8010aee:	e005      	b.n	8010afc <__strtok_r+0x2c>
 8010af0:	42b5      	cmp	r5, r6
 8010af2:	d1f6      	bne.n	8010ae2 <__strtok_r+0x12>
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d1f0      	bne.n	8010ada <__strtok_r+0xa>
 8010af8:	6014      	str	r4, [r2, #0]
 8010afa:	7003      	strb	r3, [r0, #0]
 8010afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010afe:	461c      	mov	r4, r3
 8010b00:	e00c      	b.n	8010b1c <__strtok_r+0x4c>
 8010b02:	b91d      	cbnz	r5, 8010b0c <__strtok_r+0x3c>
 8010b04:	4627      	mov	r7, r4
 8010b06:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010b0a:	460e      	mov	r6, r1
 8010b0c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010b10:	42ab      	cmp	r3, r5
 8010b12:	d1f6      	bne.n	8010b02 <__strtok_r+0x32>
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d0f2      	beq.n	8010afe <__strtok_r+0x2e>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	703b      	strb	r3, [r7, #0]
 8010b1c:	6014      	str	r4, [r2, #0]
 8010b1e:	e7ed      	b.n	8010afc <__strtok_r+0x2c>

08010b20 <_localeconv_r>:
 8010b20:	4800      	ldr	r0, [pc, #0]	@ (8010b24 <_localeconv_r+0x4>)
 8010b22:	4770      	bx	lr
 8010b24:	2000022c 	.word	0x2000022c

08010b28 <_close_r>:
 8010b28:	b538      	push	{r3, r4, r5, lr}
 8010b2a:	4d06      	ldr	r5, [pc, #24]	@ (8010b44 <_close_r+0x1c>)
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	4604      	mov	r4, r0
 8010b30:	4608      	mov	r0, r1
 8010b32:	602b      	str	r3, [r5, #0]
 8010b34:	f7f1 fae0 	bl	80020f8 <_close>
 8010b38:	1c43      	adds	r3, r0, #1
 8010b3a:	d102      	bne.n	8010b42 <_close_r+0x1a>
 8010b3c:	682b      	ldr	r3, [r5, #0]
 8010b3e:	b103      	cbz	r3, 8010b42 <_close_r+0x1a>
 8010b40:	6023      	str	r3, [r4, #0]
 8010b42:	bd38      	pop	{r3, r4, r5, pc}
 8010b44:	20001b00 	.word	0x20001b00

08010b48 <_lseek_r>:
 8010b48:	b538      	push	{r3, r4, r5, lr}
 8010b4a:	4d07      	ldr	r5, [pc, #28]	@ (8010b68 <_lseek_r+0x20>)
 8010b4c:	4604      	mov	r4, r0
 8010b4e:	4608      	mov	r0, r1
 8010b50:	4611      	mov	r1, r2
 8010b52:	2200      	movs	r2, #0
 8010b54:	602a      	str	r2, [r5, #0]
 8010b56:	461a      	mov	r2, r3
 8010b58:	f7f1 faf5 	bl	8002146 <_lseek>
 8010b5c:	1c43      	adds	r3, r0, #1
 8010b5e:	d102      	bne.n	8010b66 <_lseek_r+0x1e>
 8010b60:	682b      	ldr	r3, [r5, #0]
 8010b62:	b103      	cbz	r3, 8010b66 <_lseek_r+0x1e>
 8010b64:	6023      	str	r3, [r4, #0]
 8010b66:	bd38      	pop	{r3, r4, r5, pc}
 8010b68:	20001b00 	.word	0x20001b00

08010b6c <_read_r>:
 8010b6c:	b538      	push	{r3, r4, r5, lr}
 8010b6e:	4d07      	ldr	r5, [pc, #28]	@ (8010b8c <_read_r+0x20>)
 8010b70:	4604      	mov	r4, r0
 8010b72:	4608      	mov	r0, r1
 8010b74:	4611      	mov	r1, r2
 8010b76:	2200      	movs	r2, #0
 8010b78:	602a      	str	r2, [r5, #0]
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	f7f1 fa9f 	bl	80020be <_read>
 8010b80:	1c43      	adds	r3, r0, #1
 8010b82:	d102      	bne.n	8010b8a <_read_r+0x1e>
 8010b84:	682b      	ldr	r3, [r5, #0]
 8010b86:	b103      	cbz	r3, 8010b8a <_read_r+0x1e>
 8010b88:	6023      	str	r3, [r4, #0]
 8010b8a:	bd38      	pop	{r3, r4, r5, pc}
 8010b8c:	20001b00 	.word	0x20001b00

08010b90 <_sbrk_r>:
 8010b90:	b538      	push	{r3, r4, r5, lr}
 8010b92:	4d06      	ldr	r5, [pc, #24]	@ (8010bac <_sbrk_r+0x1c>)
 8010b94:	2300      	movs	r3, #0
 8010b96:	4604      	mov	r4, r0
 8010b98:	4608      	mov	r0, r1
 8010b9a:	602b      	str	r3, [r5, #0]
 8010b9c:	f7f1 fae0 	bl	8002160 <_sbrk>
 8010ba0:	1c43      	adds	r3, r0, #1
 8010ba2:	d102      	bne.n	8010baa <_sbrk_r+0x1a>
 8010ba4:	682b      	ldr	r3, [r5, #0]
 8010ba6:	b103      	cbz	r3, 8010baa <_sbrk_r+0x1a>
 8010ba8:	6023      	str	r3, [r4, #0]
 8010baa:	bd38      	pop	{r3, r4, r5, pc}
 8010bac:	20001b00 	.word	0x20001b00

08010bb0 <_write_r>:
 8010bb0:	b538      	push	{r3, r4, r5, lr}
 8010bb2:	4d07      	ldr	r5, [pc, #28]	@ (8010bd0 <_write_r+0x20>)
 8010bb4:	4604      	mov	r4, r0
 8010bb6:	4608      	mov	r0, r1
 8010bb8:	4611      	mov	r1, r2
 8010bba:	2200      	movs	r2, #0
 8010bbc:	602a      	str	r2, [r5, #0]
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	f7f1 f858 	bl	8001c74 <_write>
 8010bc4:	1c43      	adds	r3, r0, #1
 8010bc6:	d102      	bne.n	8010bce <_write_r+0x1e>
 8010bc8:	682b      	ldr	r3, [r5, #0]
 8010bca:	b103      	cbz	r3, 8010bce <_write_r+0x1e>
 8010bcc:	6023      	str	r3, [r4, #0]
 8010bce:	bd38      	pop	{r3, r4, r5, pc}
 8010bd0:	20001b00 	.word	0x20001b00

08010bd4 <__errno>:
 8010bd4:	4b01      	ldr	r3, [pc, #4]	@ (8010bdc <__errno+0x8>)
 8010bd6:	6818      	ldr	r0, [r3, #0]
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	200002a8 	.word	0x200002a8

08010be0 <__libc_init_array>:
 8010be0:	b570      	push	{r4, r5, r6, lr}
 8010be2:	4d0d      	ldr	r5, [pc, #52]	@ (8010c18 <__libc_init_array+0x38>)
 8010be4:	4c0d      	ldr	r4, [pc, #52]	@ (8010c1c <__libc_init_array+0x3c>)
 8010be6:	1b64      	subs	r4, r4, r5
 8010be8:	10a4      	asrs	r4, r4, #2
 8010bea:	2600      	movs	r6, #0
 8010bec:	42a6      	cmp	r6, r4
 8010bee:	d109      	bne.n	8010c04 <__libc_init_array+0x24>
 8010bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8010c20 <__libc_init_array+0x40>)
 8010bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8010c24 <__libc_init_array+0x44>)
 8010bf4:	f002 ff64 	bl	8013ac0 <_init>
 8010bf8:	1b64      	subs	r4, r4, r5
 8010bfa:	10a4      	asrs	r4, r4, #2
 8010bfc:	2600      	movs	r6, #0
 8010bfe:	42a6      	cmp	r6, r4
 8010c00:	d105      	bne.n	8010c0e <__libc_init_array+0x2e>
 8010c02:	bd70      	pop	{r4, r5, r6, pc}
 8010c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c08:	4798      	blx	r3
 8010c0a:	3601      	adds	r6, #1
 8010c0c:	e7ee      	b.n	8010bec <__libc_init_array+0xc>
 8010c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c12:	4798      	blx	r3
 8010c14:	3601      	adds	r6, #1
 8010c16:	e7f2      	b.n	8010bfe <__libc_init_array+0x1e>
 8010c18:	080145c0 	.word	0x080145c0
 8010c1c:	080145c0 	.word	0x080145c0
 8010c20:	080145c0 	.word	0x080145c0
 8010c24:	080145c4 	.word	0x080145c4

08010c28 <__retarget_lock_init_recursive>:
 8010c28:	4770      	bx	lr

08010c2a <__retarget_lock_acquire_recursive>:
 8010c2a:	4770      	bx	lr

08010c2c <__retarget_lock_release_recursive>:
 8010c2c:	4770      	bx	lr

08010c2e <strcpy>:
 8010c2e:	4603      	mov	r3, r0
 8010c30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c34:	f803 2b01 	strb.w	r2, [r3], #1
 8010c38:	2a00      	cmp	r2, #0
 8010c3a:	d1f9      	bne.n	8010c30 <strcpy+0x2>
 8010c3c:	4770      	bx	lr

08010c3e <memcpy>:
 8010c3e:	440a      	add	r2, r1
 8010c40:	4291      	cmp	r1, r2
 8010c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c46:	d100      	bne.n	8010c4a <memcpy+0xc>
 8010c48:	4770      	bx	lr
 8010c4a:	b510      	push	{r4, lr}
 8010c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c54:	4291      	cmp	r1, r2
 8010c56:	d1f9      	bne.n	8010c4c <memcpy+0xe>
 8010c58:	bd10      	pop	{r4, pc}
 8010c5a:	0000      	movs	r0, r0
 8010c5c:	0000      	movs	r0, r0
	...

08010c60 <nan>:
 8010c60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010c68 <nan+0x8>
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop
 8010c68:	00000000 	.word	0x00000000
 8010c6c:	7ff80000 	.word	0x7ff80000

08010c70 <nanf>:
 8010c70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010c78 <nanf+0x8>
 8010c74:	4770      	bx	lr
 8010c76:	bf00      	nop
 8010c78:	7fc00000 	.word	0x7fc00000

08010c7c <abort>:
 8010c7c:	b508      	push	{r3, lr}
 8010c7e:	2006      	movs	r0, #6
 8010c80:	f002 fe26 	bl	80138d0 <raise>
 8010c84:	2001      	movs	r0, #1
 8010c86:	f7f1 fa0f 	bl	80020a8 <_exit>

08010c8a <quorem>:
 8010c8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c8e:	6903      	ldr	r3, [r0, #16]
 8010c90:	690c      	ldr	r4, [r1, #16]
 8010c92:	42a3      	cmp	r3, r4
 8010c94:	4607      	mov	r7, r0
 8010c96:	db7e      	blt.n	8010d96 <quorem+0x10c>
 8010c98:	3c01      	subs	r4, #1
 8010c9a:	f101 0814 	add.w	r8, r1, #20
 8010c9e:	00a3      	lsls	r3, r4, #2
 8010ca0:	f100 0514 	add.w	r5, r0, #20
 8010ca4:	9300      	str	r3, [sp, #0]
 8010ca6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010caa:	9301      	str	r3, [sp, #4]
 8010cac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010cb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010cbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8010cc0:	d32e      	bcc.n	8010d20 <quorem+0x96>
 8010cc2:	f04f 0a00 	mov.w	sl, #0
 8010cc6:	46c4      	mov	ip, r8
 8010cc8:	46ae      	mov	lr, r5
 8010cca:	46d3      	mov	fp, sl
 8010ccc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010cd0:	b298      	uxth	r0, r3
 8010cd2:	fb06 a000 	mla	r0, r6, r0, sl
 8010cd6:	0c02      	lsrs	r2, r0, #16
 8010cd8:	0c1b      	lsrs	r3, r3, #16
 8010cda:	fb06 2303 	mla	r3, r6, r3, r2
 8010cde:	f8de 2000 	ldr.w	r2, [lr]
 8010ce2:	b280      	uxth	r0, r0
 8010ce4:	b292      	uxth	r2, r2
 8010ce6:	1a12      	subs	r2, r2, r0
 8010ce8:	445a      	add	r2, fp
 8010cea:	f8de 0000 	ldr.w	r0, [lr]
 8010cee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010cf8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010cfc:	b292      	uxth	r2, r2
 8010cfe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010d02:	45e1      	cmp	r9, ip
 8010d04:	f84e 2b04 	str.w	r2, [lr], #4
 8010d08:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010d0c:	d2de      	bcs.n	8010ccc <quorem+0x42>
 8010d0e:	9b00      	ldr	r3, [sp, #0]
 8010d10:	58eb      	ldr	r3, [r5, r3]
 8010d12:	b92b      	cbnz	r3, 8010d20 <quorem+0x96>
 8010d14:	9b01      	ldr	r3, [sp, #4]
 8010d16:	3b04      	subs	r3, #4
 8010d18:	429d      	cmp	r5, r3
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	d32f      	bcc.n	8010d7e <quorem+0xf4>
 8010d1e:	613c      	str	r4, [r7, #16]
 8010d20:	4638      	mov	r0, r7
 8010d22:	f001 fc5f 	bl	80125e4 <__mcmp>
 8010d26:	2800      	cmp	r0, #0
 8010d28:	db25      	blt.n	8010d76 <quorem+0xec>
 8010d2a:	4629      	mov	r1, r5
 8010d2c:	2000      	movs	r0, #0
 8010d2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8010d32:	f8d1 c000 	ldr.w	ip, [r1]
 8010d36:	fa1f fe82 	uxth.w	lr, r2
 8010d3a:	fa1f f38c 	uxth.w	r3, ip
 8010d3e:	eba3 030e 	sub.w	r3, r3, lr
 8010d42:	4403      	add	r3, r0
 8010d44:	0c12      	lsrs	r2, r2, #16
 8010d46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010d4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010d4e:	b29b      	uxth	r3, r3
 8010d50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d54:	45c1      	cmp	r9, r8
 8010d56:	f841 3b04 	str.w	r3, [r1], #4
 8010d5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010d5e:	d2e6      	bcs.n	8010d2e <quorem+0xa4>
 8010d60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d68:	b922      	cbnz	r2, 8010d74 <quorem+0xea>
 8010d6a:	3b04      	subs	r3, #4
 8010d6c:	429d      	cmp	r5, r3
 8010d6e:	461a      	mov	r2, r3
 8010d70:	d30b      	bcc.n	8010d8a <quorem+0x100>
 8010d72:	613c      	str	r4, [r7, #16]
 8010d74:	3601      	adds	r6, #1
 8010d76:	4630      	mov	r0, r6
 8010d78:	b003      	add	sp, #12
 8010d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d7e:	6812      	ldr	r2, [r2, #0]
 8010d80:	3b04      	subs	r3, #4
 8010d82:	2a00      	cmp	r2, #0
 8010d84:	d1cb      	bne.n	8010d1e <quorem+0x94>
 8010d86:	3c01      	subs	r4, #1
 8010d88:	e7c6      	b.n	8010d18 <quorem+0x8e>
 8010d8a:	6812      	ldr	r2, [r2, #0]
 8010d8c:	3b04      	subs	r3, #4
 8010d8e:	2a00      	cmp	r2, #0
 8010d90:	d1ef      	bne.n	8010d72 <quorem+0xe8>
 8010d92:	3c01      	subs	r4, #1
 8010d94:	e7ea      	b.n	8010d6c <quorem+0xe2>
 8010d96:	2000      	movs	r0, #0
 8010d98:	e7ee      	b.n	8010d78 <quorem+0xee>
 8010d9a:	0000      	movs	r0, r0
 8010d9c:	0000      	movs	r0, r0
	...

08010da0 <_dtoa_r>:
 8010da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da4:	69c7      	ldr	r7, [r0, #28]
 8010da6:	b097      	sub	sp, #92	@ 0x5c
 8010da8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010dac:	ec55 4b10 	vmov	r4, r5, d0
 8010db0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010db2:	9107      	str	r1, [sp, #28]
 8010db4:	4681      	mov	r9, r0
 8010db6:	920c      	str	r2, [sp, #48]	@ 0x30
 8010db8:	9311      	str	r3, [sp, #68]	@ 0x44
 8010dba:	b97f      	cbnz	r7, 8010ddc <_dtoa_r+0x3c>
 8010dbc:	2010      	movs	r0, #16
 8010dbe:	f7fd fda5 	bl	800e90c <malloc>
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	f8c9 001c 	str.w	r0, [r9, #28]
 8010dc8:	b920      	cbnz	r0, 8010dd4 <_dtoa_r+0x34>
 8010dca:	4ba9      	ldr	r3, [pc, #676]	@ (8011070 <_dtoa_r+0x2d0>)
 8010dcc:	21ef      	movs	r1, #239	@ 0xef
 8010dce:	48a9      	ldr	r0, [pc, #676]	@ (8011074 <_dtoa_r+0x2d4>)
 8010dd0:	f7fd fd76 	bl	800e8c0 <__assert_func>
 8010dd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010dd8:	6007      	str	r7, [r0, #0]
 8010dda:	60c7      	str	r7, [r0, #12]
 8010ddc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010de0:	6819      	ldr	r1, [r3, #0]
 8010de2:	b159      	cbz	r1, 8010dfc <_dtoa_r+0x5c>
 8010de4:	685a      	ldr	r2, [r3, #4]
 8010de6:	604a      	str	r2, [r1, #4]
 8010de8:	2301      	movs	r3, #1
 8010dea:	4093      	lsls	r3, r2
 8010dec:	608b      	str	r3, [r1, #8]
 8010dee:	4648      	mov	r0, r9
 8010df0:	f001 f97c 	bl	80120ec <_Bfree>
 8010df4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	601a      	str	r2, [r3, #0]
 8010dfc:	1e2b      	subs	r3, r5, #0
 8010dfe:	bfb9      	ittee	lt
 8010e00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010e04:	9305      	strlt	r3, [sp, #20]
 8010e06:	2300      	movge	r3, #0
 8010e08:	6033      	strge	r3, [r6, #0]
 8010e0a:	9f05      	ldr	r7, [sp, #20]
 8010e0c:	4b9a      	ldr	r3, [pc, #616]	@ (8011078 <_dtoa_r+0x2d8>)
 8010e0e:	bfbc      	itt	lt
 8010e10:	2201      	movlt	r2, #1
 8010e12:	6032      	strlt	r2, [r6, #0]
 8010e14:	43bb      	bics	r3, r7
 8010e16:	d112      	bne.n	8010e3e <_dtoa_r+0x9e>
 8010e18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010e1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010e1e:	6013      	str	r3, [r2, #0]
 8010e20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010e24:	4323      	orrs	r3, r4
 8010e26:	f000 855a 	beq.w	80118de <_dtoa_r+0xb3e>
 8010e2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010e2c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801108c <_dtoa_r+0x2ec>
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	f000 855c 	beq.w	80118ee <_dtoa_r+0xb4e>
 8010e36:	f10a 0303 	add.w	r3, sl, #3
 8010e3a:	f000 bd56 	b.w	80118ea <_dtoa_r+0xb4a>
 8010e3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010e42:	2200      	movs	r2, #0
 8010e44:	ec51 0b17 	vmov	r0, r1, d7
 8010e48:	2300      	movs	r3, #0
 8010e4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010e4e:	f7ef fe4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e52:	4680      	mov	r8, r0
 8010e54:	b158      	cbz	r0, 8010e6e <_dtoa_r+0xce>
 8010e56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010e58:	2301      	movs	r3, #1
 8010e5a:	6013      	str	r3, [r2, #0]
 8010e5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010e5e:	b113      	cbz	r3, 8010e66 <_dtoa_r+0xc6>
 8010e60:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010e62:	4b86      	ldr	r3, [pc, #536]	@ (801107c <_dtoa_r+0x2dc>)
 8010e64:	6013      	str	r3, [r2, #0]
 8010e66:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8011090 <_dtoa_r+0x2f0>
 8010e6a:	f000 bd40 	b.w	80118ee <_dtoa_r+0xb4e>
 8010e6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8010e72:	aa14      	add	r2, sp, #80	@ 0x50
 8010e74:	a915      	add	r1, sp, #84	@ 0x54
 8010e76:	4648      	mov	r0, r9
 8010e78:	f001 fcd4 	bl	8012824 <__d2b>
 8010e7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010e80:	9002      	str	r0, [sp, #8]
 8010e82:	2e00      	cmp	r6, #0
 8010e84:	d078      	beq.n	8010f78 <_dtoa_r+0x1d8>
 8010e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e88:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010e94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010e98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010e9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	4b76      	ldr	r3, [pc, #472]	@ (8011080 <_dtoa_r+0x2e0>)
 8010ea6:	f7ef f9ff 	bl	80002a8 <__aeabi_dsub>
 8010eaa:	a36b      	add	r3, pc, #428	@ (adr r3, 8011058 <_dtoa_r+0x2b8>)
 8010eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb0:	f7ef fbb2 	bl	8000618 <__aeabi_dmul>
 8010eb4:	a36a      	add	r3, pc, #424	@ (adr r3, 8011060 <_dtoa_r+0x2c0>)
 8010eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eba:	f7ef f9f7 	bl	80002ac <__adddf3>
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	460d      	mov	r5, r1
 8010ec4:	f7ef fb3e 	bl	8000544 <__aeabi_i2d>
 8010ec8:	a367      	add	r3, pc, #412	@ (adr r3, 8011068 <_dtoa_r+0x2c8>)
 8010eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ece:	f7ef fba3 	bl	8000618 <__aeabi_dmul>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	460b      	mov	r3, r1
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	4629      	mov	r1, r5
 8010eda:	f7ef f9e7 	bl	80002ac <__adddf3>
 8010ede:	4604      	mov	r4, r0
 8010ee0:	460d      	mov	r5, r1
 8010ee2:	f7ef fe49 	bl	8000b78 <__aeabi_d2iz>
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	4607      	mov	r7, r0
 8010eea:	2300      	movs	r3, #0
 8010eec:	4620      	mov	r0, r4
 8010eee:	4629      	mov	r1, r5
 8010ef0:	f7ef fe04 	bl	8000afc <__aeabi_dcmplt>
 8010ef4:	b140      	cbz	r0, 8010f08 <_dtoa_r+0x168>
 8010ef6:	4638      	mov	r0, r7
 8010ef8:	f7ef fb24 	bl	8000544 <__aeabi_i2d>
 8010efc:	4622      	mov	r2, r4
 8010efe:	462b      	mov	r3, r5
 8010f00:	f7ef fdf2 	bl	8000ae8 <__aeabi_dcmpeq>
 8010f04:	b900      	cbnz	r0, 8010f08 <_dtoa_r+0x168>
 8010f06:	3f01      	subs	r7, #1
 8010f08:	2f16      	cmp	r7, #22
 8010f0a:	d852      	bhi.n	8010fb2 <_dtoa_r+0x212>
 8010f0c:	4b5d      	ldr	r3, [pc, #372]	@ (8011084 <_dtoa_r+0x2e4>)
 8010f0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010f1a:	f7ef fdef 	bl	8000afc <__aeabi_dcmplt>
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	d049      	beq.n	8010fb6 <_dtoa_r+0x216>
 8010f22:	3f01      	subs	r7, #1
 8010f24:	2300      	movs	r3, #0
 8010f26:	9310      	str	r3, [sp, #64]	@ 0x40
 8010f28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010f2a:	1b9b      	subs	r3, r3, r6
 8010f2c:	1e5a      	subs	r2, r3, #1
 8010f2e:	bf45      	ittet	mi
 8010f30:	f1c3 0301 	rsbmi	r3, r3, #1
 8010f34:	9300      	strmi	r3, [sp, #0]
 8010f36:	2300      	movpl	r3, #0
 8010f38:	2300      	movmi	r3, #0
 8010f3a:	9206      	str	r2, [sp, #24]
 8010f3c:	bf54      	ite	pl
 8010f3e:	9300      	strpl	r3, [sp, #0]
 8010f40:	9306      	strmi	r3, [sp, #24]
 8010f42:	2f00      	cmp	r7, #0
 8010f44:	db39      	blt.n	8010fba <_dtoa_r+0x21a>
 8010f46:	9b06      	ldr	r3, [sp, #24]
 8010f48:	970d      	str	r7, [sp, #52]	@ 0x34
 8010f4a:	443b      	add	r3, r7
 8010f4c:	9306      	str	r3, [sp, #24]
 8010f4e:	2300      	movs	r3, #0
 8010f50:	9308      	str	r3, [sp, #32]
 8010f52:	9b07      	ldr	r3, [sp, #28]
 8010f54:	2b09      	cmp	r3, #9
 8010f56:	d863      	bhi.n	8011020 <_dtoa_r+0x280>
 8010f58:	2b05      	cmp	r3, #5
 8010f5a:	bfc4      	itt	gt
 8010f5c:	3b04      	subgt	r3, #4
 8010f5e:	9307      	strgt	r3, [sp, #28]
 8010f60:	9b07      	ldr	r3, [sp, #28]
 8010f62:	f1a3 0302 	sub.w	r3, r3, #2
 8010f66:	bfcc      	ite	gt
 8010f68:	2400      	movgt	r4, #0
 8010f6a:	2401      	movle	r4, #1
 8010f6c:	2b03      	cmp	r3, #3
 8010f6e:	d863      	bhi.n	8011038 <_dtoa_r+0x298>
 8010f70:	e8df f003 	tbb	[pc, r3]
 8010f74:	2b375452 	.word	0x2b375452
 8010f78:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010f7c:	441e      	add	r6, r3
 8010f7e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010f82:	2b20      	cmp	r3, #32
 8010f84:	bfc1      	itttt	gt
 8010f86:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010f8a:	409f      	lslgt	r7, r3
 8010f8c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010f90:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010f94:	bfd6      	itet	le
 8010f96:	f1c3 0320 	rsble	r3, r3, #32
 8010f9a:	ea47 0003 	orrgt.w	r0, r7, r3
 8010f9e:	fa04 f003 	lslle.w	r0, r4, r3
 8010fa2:	f7ef fabf 	bl	8000524 <__aeabi_ui2d>
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010fac:	3e01      	subs	r6, #1
 8010fae:	9212      	str	r2, [sp, #72]	@ 0x48
 8010fb0:	e776      	b.n	8010ea0 <_dtoa_r+0x100>
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	e7b7      	b.n	8010f26 <_dtoa_r+0x186>
 8010fb6:	9010      	str	r0, [sp, #64]	@ 0x40
 8010fb8:	e7b6      	b.n	8010f28 <_dtoa_r+0x188>
 8010fba:	9b00      	ldr	r3, [sp, #0]
 8010fbc:	1bdb      	subs	r3, r3, r7
 8010fbe:	9300      	str	r3, [sp, #0]
 8010fc0:	427b      	negs	r3, r7
 8010fc2:	9308      	str	r3, [sp, #32]
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	930d      	str	r3, [sp, #52]	@ 0x34
 8010fc8:	e7c3      	b.n	8010f52 <_dtoa_r+0x1b2>
 8010fca:	2301      	movs	r3, #1
 8010fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010fd0:	eb07 0b03 	add.w	fp, r7, r3
 8010fd4:	f10b 0301 	add.w	r3, fp, #1
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	9303      	str	r3, [sp, #12]
 8010fdc:	bfb8      	it	lt
 8010fde:	2301      	movlt	r3, #1
 8010fe0:	e006      	b.n	8010ff0 <_dtoa_r+0x250>
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fe6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	dd28      	ble.n	801103e <_dtoa_r+0x29e>
 8010fec:	469b      	mov	fp, r3
 8010fee:	9303      	str	r3, [sp, #12]
 8010ff0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8010ff4:	2100      	movs	r1, #0
 8010ff6:	2204      	movs	r2, #4
 8010ff8:	f102 0514 	add.w	r5, r2, #20
 8010ffc:	429d      	cmp	r5, r3
 8010ffe:	d926      	bls.n	801104e <_dtoa_r+0x2ae>
 8011000:	6041      	str	r1, [r0, #4]
 8011002:	4648      	mov	r0, r9
 8011004:	f001 f832 	bl	801206c <_Balloc>
 8011008:	4682      	mov	sl, r0
 801100a:	2800      	cmp	r0, #0
 801100c:	d142      	bne.n	8011094 <_dtoa_r+0x2f4>
 801100e:	4b1e      	ldr	r3, [pc, #120]	@ (8011088 <_dtoa_r+0x2e8>)
 8011010:	4602      	mov	r2, r0
 8011012:	f240 11af 	movw	r1, #431	@ 0x1af
 8011016:	e6da      	b.n	8010dce <_dtoa_r+0x2e>
 8011018:	2300      	movs	r3, #0
 801101a:	e7e3      	b.n	8010fe4 <_dtoa_r+0x244>
 801101c:	2300      	movs	r3, #0
 801101e:	e7d5      	b.n	8010fcc <_dtoa_r+0x22c>
 8011020:	2401      	movs	r4, #1
 8011022:	2300      	movs	r3, #0
 8011024:	9307      	str	r3, [sp, #28]
 8011026:	9409      	str	r4, [sp, #36]	@ 0x24
 8011028:	f04f 3bff 	mov.w	fp, #4294967295
 801102c:	2200      	movs	r2, #0
 801102e:	f8cd b00c 	str.w	fp, [sp, #12]
 8011032:	2312      	movs	r3, #18
 8011034:	920c      	str	r2, [sp, #48]	@ 0x30
 8011036:	e7db      	b.n	8010ff0 <_dtoa_r+0x250>
 8011038:	2301      	movs	r3, #1
 801103a:	9309      	str	r3, [sp, #36]	@ 0x24
 801103c:	e7f4      	b.n	8011028 <_dtoa_r+0x288>
 801103e:	f04f 0b01 	mov.w	fp, #1
 8011042:	f8cd b00c 	str.w	fp, [sp, #12]
 8011046:	465b      	mov	r3, fp
 8011048:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801104c:	e7d0      	b.n	8010ff0 <_dtoa_r+0x250>
 801104e:	3101      	adds	r1, #1
 8011050:	0052      	lsls	r2, r2, #1
 8011052:	e7d1      	b.n	8010ff8 <_dtoa_r+0x258>
 8011054:	f3af 8000 	nop.w
 8011058:	636f4361 	.word	0x636f4361
 801105c:	3fd287a7 	.word	0x3fd287a7
 8011060:	8b60c8b3 	.word	0x8b60c8b3
 8011064:	3fc68a28 	.word	0x3fc68a28
 8011068:	509f79fb 	.word	0x509f79fb
 801106c:	3fd34413 	.word	0x3fd34413
 8011070:	08014194 	.word	0x08014194
 8011074:	0801421a 	.word	0x0801421a
 8011078:	7ff00000 	.word	0x7ff00000
 801107c:	08014364 	.word	0x08014364
 8011080:	3ff80000 	.word	0x3ff80000
 8011084:	080144f0 	.word	0x080144f0
 8011088:	08014272 	.word	0x08014272
 801108c:	08014216 	.word	0x08014216
 8011090:	08014363 	.word	0x08014363
 8011094:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011098:	6018      	str	r0, [r3, #0]
 801109a:	9b03      	ldr	r3, [sp, #12]
 801109c:	2b0e      	cmp	r3, #14
 801109e:	f200 80a1 	bhi.w	80111e4 <_dtoa_r+0x444>
 80110a2:	2c00      	cmp	r4, #0
 80110a4:	f000 809e 	beq.w	80111e4 <_dtoa_r+0x444>
 80110a8:	2f00      	cmp	r7, #0
 80110aa:	dd33      	ble.n	8011114 <_dtoa_r+0x374>
 80110ac:	4b9c      	ldr	r3, [pc, #624]	@ (8011320 <_dtoa_r+0x580>)
 80110ae:	f007 020f 	and.w	r2, r7, #15
 80110b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110b6:	ed93 7b00 	vldr	d7, [r3]
 80110ba:	05f8      	lsls	r0, r7, #23
 80110bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80110c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80110c4:	d516      	bpl.n	80110f4 <_dtoa_r+0x354>
 80110c6:	4b97      	ldr	r3, [pc, #604]	@ (8011324 <_dtoa_r+0x584>)
 80110c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80110cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80110d0:	f7ef fbcc 	bl	800086c <__aeabi_ddiv>
 80110d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80110d8:	f004 040f 	and.w	r4, r4, #15
 80110dc:	2603      	movs	r6, #3
 80110de:	4d91      	ldr	r5, [pc, #580]	@ (8011324 <_dtoa_r+0x584>)
 80110e0:	b954      	cbnz	r4, 80110f8 <_dtoa_r+0x358>
 80110e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80110e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80110ea:	f7ef fbbf 	bl	800086c <__aeabi_ddiv>
 80110ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80110f2:	e028      	b.n	8011146 <_dtoa_r+0x3a6>
 80110f4:	2602      	movs	r6, #2
 80110f6:	e7f2      	b.n	80110de <_dtoa_r+0x33e>
 80110f8:	07e1      	lsls	r1, r4, #31
 80110fa:	d508      	bpl.n	801110e <_dtoa_r+0x36e>
 80110fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011100:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011104:	f7ef fa88 	bl	8000618 <__aeabi_dmul>
 8011108:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801110c:	3601      	adds	r6, #1
 801110e:	1064      	asrs	r4, r4, #1
 8011110:	3508      	adds	r5, #8
 8011112:	e7e5      	b.n	80110e0 <_dtoa_r+0x340>
 8011114:	f000 80af 	beq.w	8011276 <_dtoa_r+0x4d6>
 8011118:	427c      	negs	r4, r7
 801111a:	4b81      	ldr	r3, [pc, #516]	@ (8011320 <_dtoa_r+0x580>)
 801111c:	4d81      	ldr	r5, [pc, #516]	@ (8011324 <_dtoa_r+0x584>)
 801111e:	f004 020f 	and.w	r2, r4, #15
 8011122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801112e:	f7ef fa73 	bl	8000618 <__aeabi_dmul>
 8011132:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011136:	1124      	asrs	r4, r4, #4
 8011138:	2300      	movs	r3, #0
 801113a:	2602      	movs	r6, #2
 801113c:	2c00      	cmp	r4, #0
 801113e:	f040 808f 	bne.w	8011260 <_dtoa_r+0x4c0>
 8011142:	2b00      	cmp	r3, #0
 8011144:	d1d3      	bne.n	80110ee <_dtoa_r+0x34e>
 8011146:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011148:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801114c:	2b00      	cmp	r3, #0
 801114e:	f000 8094 	beq.w	801127a <_dtoa_r+0x4da>
 8011152:	4b75      	ldr	r3, [pc, #468]	@ (8011328 <_dtoa_r+0x588>)
 8011154:	2200      	movs	r2, #0
 8011156:	4620      	mov	r0, r4
 8011158:	4629      	mov	r1, r5
 801115a:	f7ef fccf 	bl	8000afc <__aeabi_dcmplt>
 801115e:	2800      	cmp	r0, #0
 8011160:	f000 808b 	beq.w	801127a <_dtoa_r+0x4da>
 8011164:	9b03      	ldr	r3, [sp, #12]
 8011166:	2b00      	cmp	r3, #0
 8011168:	f000 8087 	beq.w	801127a <_dtoa_r+0x4da>
 801116c:	f1bb 0f00 	cmp.w	fp, #0
 8011170:	dd34      	ble.n	80111dc <_dtoa_r+0x43c>
 8011172:	4620      	mov	r0, r4
 8011174:	4b6d      	ldr	r3, [pc, #436]	@ (801132c <_dtoa_r+0x58c>)
 8011176:	2200      	movs	r2, #0
 8011178:	4629      	mov	r1, r5
 801117a:	f7ef fa4d 	bl	8000618 <__aeabi_dmul>
 801117e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011182:	f107 38ff 	add.w	r8, r7, #4294967295
 8011186:	3601      	adds	r6, #1
 8011188:	465c      	mov	r4, fp
 801118a:	4630      	mov	r0, r6
 801118c:	f7ef f9da 	bl	8000544 <__aeabi_i2d>
 8011190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011194:	f7ef fa40 	bl	8000618 <__aeabi_dmul>
 8011198:	4b65      	ldr	r3, [pc, #404]	@ (8011330 <_dtoa_r+0x590>)
 801119a:	2200      	movs	r2, #0
 801119c:	f7ef f886 	bl	80002ac <__adddf3>
 80111a0:	4605      	mov	r5, r0
 80111a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80111a6:	2c00      	cmp	r4, #0
 80111a8:	d16a      	bne.n	8011280 <_dtoa_r+0x4e0>
 80111aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111ae:	4b61      	ldr	r3, [pc, #388]	@ (8011334 <_dtoa_r+0x594>)
 80111b0:	2200      	movs	r2, #0
 80111b2:	f7ef f879 	bl	80002a8 <__aeabi_dsub>
 80111b6:	4602      	mov	r2, r0
 80111b8:	460b      	mov	r3, r1
 80111ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80111be:	462a      	mov	r2, r5
 80111c0:	4633      	mov	r3, r6
 80111c2:	f7ef fcb9 	bl	8000b38 <__aeabi_dcmpgt>
 80111c6:	2800      	cmp	r0, #0
 80111c8:	f040 8298 	bne.w	80116fc <_dtoa_r+0x95c>
 80111cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111d0:	462a      	mov	r2, r5
 80111d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80111d6:	f7ef fc91 	bl	8000afc <__aeabi_dcmplt>
 80111da:	bb38      	cbnz	r0, 801122c <_dtoa_r+0x48c>
 80111dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80111e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80111e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	f2c0 8157 	blt.w	801149a <_dtoa_r+0x6fa>
 80111ec:	2f0e      	cmp	r7, #14
 80111ee:	f300 8154 	bgt.w	801149a <_dtoa_r+0x6fa>
 80111f2:	4b4b      	ldr	r3, [pc, #300]	@ (8011320 <_dtoa_r+0x580>)
 80111f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80111f8:	ed93 7b00 	vldr	d7, [r3]
 80111fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111fe:	2b00      	cmp	r3, #0
 8011200:	ed8d 7b00 	vstr	d7, [sp]
 8011204:	f280 80e5 	bge.w	80113d2 <_dtoa_r+0x632>
 8011208:	9b03      	ldr	r3, [sp, #12]
 801120a:	2b00      	cmp	r3, #0
 801120c:	f300 80e1 	bgt.w	80113d2 <_dtoa_r+0x632>
 8011210:	d10c      	bne.n	801122c <_dtoa_r+0x48c>
 8011212:	4b48      	ldr	r3, [pc, #288]	@ (8011334 <_dtoa_r+0x594>)
 8011214:	2200      	movs	r2, #0
 8011216:	ec51 0b17 	vmov	r0, r1, d7
 801121a:	f7ef f9fd 	bl	8000618 <__aeabi_dmul>
 801121e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011222:	f7ef fc7f 	bl	8000b24 <__aeabi_dcmpge>
 8011226:	2800      	cmp	r0, #0
 8011228:	f000 8266 	beq.w	80116f8 <_dtoa_r+0x958>
 801122c:	2400      	movs	r4, #0
 801122e:	4625      	mov	r5, r4
 8011230:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011232:	4656      	mov	r6, sl
 8011234:	ea6f 0803 	mvn.w	r8, r3
 8011238:	2700      	movs	r7, #0
 801123a:	4621      	mov	r1, r4
 801123c:	4648      	mov	r0, r9
 801123e:	f000 ff55 	bl	80120ec <_Bfree>
 8011242:	2d00      	cmp	r5, #0
 8011244:	f000 80bd 	beq.w	80113c2 <_dtoa_r+0x622>
 8011248:	b12f      	cbz	r7, 8011256 <_dtoa_r+0x4b6>
 801124a:	42af      	cmp	r7, r5
 801124c:	d003      	beq.n	8011256 <_dtoa_r+0x4b6>
 801124e:	4639      	mov	r1, r7
 8011250:	4648      	mov	r0, r9
 8011252:	f000 ff4b 	bl	80120ec <_Bfree>
 8011256:	4629      	mov	r1, r5
 8011258:	4648      	mov	r0, r9
 801125a:	f000 ff47 	bl	80120ec <_Bfree>
 801125e:	e0b0      	b.n	80113c2 <_dtoa_r+0x622>
 8011260:	07e2      	lsls	r2, r4, #31
 8011262:	d505      	bpl.n	8011270 <_dtoa_r+0x4d0>
 8011264:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011268:	f7ef f9d6 	bl	8000618 <__aeabi_dmul>
 801126c:	3601      	adds	r6, #1
 801126e:	2301      	movs	r3, #1
 8011270:	1064      	asrs	r4, r4, #1
 8011272:	3508      	adds	r5, #8
 8011274:	e762      	b.n	801113c <_dtoa_r+0x39c>
 8011276:	2602      	movs	r6, #2
 8011278:	e765      	b.n	8011146 <_dtoa_r+0x3a6>
 801127a:	9c03      	ldr	r4, [sp, #12]
 801127c:	46b8      	mov	r8, r7
 801127e:	e784      	b.n	801118a <_dtoa_r+0x3ea>
 8011280:	4b27      	ldr	r3, [pc, #156]	@ (8011320 <_dtoa_r+0x580>)
 8011282:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011284:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011288:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801128c:	4454      	add	r4, sl
 801128e:	2900      	cmp	r1, #0
 8011290:	d054      	beq.n	801133c <_dtoa_r+0x59c>
 8011292:	4929      	ldr	r1, [pc, #164]	@ (8011338 <_dtoa_r+0x598>)
 8011294:	2000      	movs	r0, #0
 8011296:	f7ef fae9 	bl	800086c <__aeabi_ddiv>
 801129a:	4633      	mov	r3, r6
 801129c:	462a      	mov	r2, r5
 801129e:	f7ef f803 	bl	80002a8 <__aeabi_dsub>
 80112a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80112a6:	4656      	mov	r6, sl
 80112a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80112ac:	f7ef fc64 	bl	8000b78 <__aeabi_d2iz>
 80112b0:	4605      	mov	r5, r0
 80112b2:	f7ef f947 	bl	8000544 <__aeabi_i2d>
 80112b6:	4602      	mov	r2, r0
 80112b8:	460b      	mov	r3, r1
 80112ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80112be:	f7ee fff3 	bl	80002a8 <__aeabi_dsub>
 80112c2:	3530      	adds	r5, #48	@ 0x30
 80112c4:	4602      	mov	r2, r0
 80112c6:	460b      	mov	r3, r1
 80112c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80112cc:	f806 5b01 	strb.w	r5, [r6], #1
 80112d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80112d4:	f7ef fc12 	bl	8000afc <__aeabi_dcmplt>
 80112d8:	2800      	cmp	r0, #0
 80112da:	d172      	bne.n	80113c2 <_dtoa_r+0x622>
 80112dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112e0:	4911      	ldr	r1, [pc, #68]	@ (8011328 <_dtoa_r+0x588>)
 80112e2:	2000      	movs	r0, #0
 80112e4:	f7ee ffe0 	bl	80002a8 <__aeabi_dsub>
 80112e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80112ec:	f7ef fc06 	bl	8000afc <__aeabi_dcmplt>
 80112f0:	2800      	cmp	r0, #0
 80112f2:	f040 80b4 	bne.w	801145e <_dtoa_r+0x6be>
 80112f6:	42a6      	cmp	r6, r4
 80112f8:	f43f af70 	beq.w	80111dc <_dtoa_r+0x43c>
 80112fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011300:	4b0a      	ldr	r3, [pc, #40]	@ (801132c <_dtoa_r+0x58c>)
 8011302:	2200      	movs	r2, #0
 8011304:	f7ef f988 	bl	8000618 <__aeabi_dmul>
 8011308:	4b08      	ldr	r3, [pc, #32]	@ (801132c <_dtoa_r+0x58c>)
 801130a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801130e:	2200      	movs	r2, #0
 8011310:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011314:	f7ef f980 	bl	8000618 <__aeabi_dmul>
 8011318:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801131c:	e7c4      	b.n	80112a8 <_dtoa_r+0x508>
 801131e:	bf00      	nop
 8011320:	080144f0 	.word	0x080144f0
 8011324:	080144c8 	.word	0x080144c8
 8011328:	3ff00000 	.word	0x3ff00000
 801132c:	40240000 	.word	0x40240000
 8011330:	401c0000 	.word	0x401c0000
 8011334:	40140000 	.word	0x40140000
 8011338:	3fe00000 	.word	0x3fe00000
 801133c:	4631      	mov	r1, r6
 801133e:	4628      	mov	r0, r5
 8011340:	f7ef f96a 	bl	8000618 <__aeabi_dmul>
 8011344:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011348:	9413      	str	r4, [sp, #76]	@ 0x4c
 801134a:	4656      	mov	r6, sl
 801134c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011350:	f7ef fc12 	bl	8000b78 <__aeabi_d2iz>
 8011354:	4605      	mov	r5, r0
 8011356:	f7ef f8f5 	bl	8000544 <__aeabi_i2d>
 801135a:	4602      	mov	r2, r0
 801135c:	460b      	mov	r3, r1
 801135e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011362:	f7ee ffa1 	bl	80002a8 <__aeabi_dsub>
 8011366:	3530      	adds	r5, #48	@ 0x30
 8011368:	f806 5b01 	strb.w	r5, [r6], #1
 801136c:	4602      	mov	r2, r0
 801136e:	460b      	mov	r3, r1
 8011370:	42a6      	cmp	r6, r4
 8011372:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011376:	f04f 0200 	mov.w	r2, #0
 801137a:	d124      	bne.n	80113c6 <_dtoa_r+0x626>
 801137c:	4baf      	ldr	r3, [pc, #700]	@ (801163c <_dtoa_r+0x89c>)
 801137e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011382:	f7ee ff93 	bl	80002ac <__adddf3>
 8011386:	4602      	mov	r2, r0
 8011388:	460b      	mov	r3, r1
 801138a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801138e:	f7ef fbd3 	bl	8000b38 <__aeabi_dcmpgt>
 8011392:	2800      	cmp	r0, #0
 8011394:	d163      	bne.n	801145e <_dtoa_r+0x6be>
 8011396:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801139a:	49a8      	ldr	r1, [pc, #672]	@ (801163c <_dtoa_r+0x89c>)
 801139c:	2000      	movs	r0, #0
 801139e:	f7ee ff83 	bl	80002a8 <__aeabi_dsub>
 80113a2:	4602      	mov	r2, r0
 80113a4:	460b      	mov	r3, r1
 80113a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80113aa:	f7ef fba7 	bl	8000afc <__aeabi_dcmplt>
 80113ae:	2800      	cmp	r0, #0
 80113b0:	f43f af14 	beq.w	80111dc <_dtoa_r+0x43c>
 80113b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80113b6:	1e73      	subs	r3, r6, #1
 80113b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80113ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80113be:	2b30      	cmp	r3, #48	@ 0x30
 80113c0:	d0f8      	beq.n	80113b4 <_dtoa_r+0x614>
 80113c2:	4647      	mov	r7, r8
 80113c4:	e03b      	b.n	801143e <_dtoa_r+0x69e>
 80113c6:	4b9e      	ldr	r3, [pc, #632]	@ (8011640 <_dtoa_r+0x8a0>)
 80113c8:	f7ef f926 	bl	8000618 <__aeabi_dmul>
 80113cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80113d0:	e7bc      	b.n	801134c <_dtoa_r+0x5ac>
 80113d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80113d6:	4656      	mov	r6, sl
 80113d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113dc:	4620      	mov	r0, r4
 80113de:	4629      	mov	r1, r5
 80113e0:	f7ef fa44 	bl	800086c <__aeabi_ddiv>
 80113e4:	f7ef fbc8 	bl	8000b78 <__aeabi_d2iz>
 80113e8:	4680      	mov	r8, r0
 80113ea:	f7ef f8ab 	bl	8000544 <__aeabi_i2d>
 80113ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113f2:	f7ef f911 	bl	8000618 <__aeabi_dmul>
 80113f6:	4602      	mov	r2, r0
 80113f8:	460b      	mov	r3, r1
 80113fa:	4620      	mov	r0, r4
 80113fc:	4629      	mov	r1, r5
 80113fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011402:	f7ee ff51 	bl	80002a8 <__aeabi_dsub>
 8011406:	f806 4b01 	strb.w	r4, [r6], #1
 801140a:	9d03      	ldr	r5, [sp, #12]
 801140c:	eba6 040a 	sub.w	r4, r6, sl
 8011410:	42a5      	cmp	r5, r4
 8011412:	4602      	mov	r2, r0
 8011414:	460b      	mov	r3, r1
 8011416:	d133      	bne.n	8011480 <_dtoa_r+0x6e0>
 8011418:	f7ee ff48 	bl	80002ac <__adddf3>
 801141c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011420:	4604      	mov	r4, r0
 8011422:	460d      	mov	r5, r1
 8011424:	f7ef fb88 	bl	8000b38 <__aeabi_dcmpgt>
 8011428:	b9c0      	cbnz	r0, 801145c <_dtoa_r+0x6bc>
 801142a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801142e:	4620      	mov	r0, r4
 8011430:	4629      	mov	r1, r5
 8011432:	f7ef fb59 	bl	8000ae8 <__aeabi_dcmpeq>
 8011436:	b110      	cbz	r0, 801143e <_dtoa_r+0x69e>
 8011438:	f018 0f01 	tst.w	r8, #1
 801143c:	d10e      	bne.n	801145c <_dtoa_r+0x6bc>
 801143e:	9902      	ldr	r1, [sp, #8]
 8011440:	4648      	mov	r0, r9
 8011442:	f000 fe53 	bl	80120ec <_Bfree>
 8011446:	2300      	movs	r3, #0
 8011448:	7033      	strb	r3, [r6, #0]
 801144a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801144c:	3701      	adds	r7, #1
 801144e:	601f      	str	r7, [r3, #0]
 8011450:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011452:	2b00      	cmp	r3, #0
 8011454:	f000 824b 	beq.w	80118ee <_dtoa_r+0xb4e>
 8011458:	601e      	str	r6, [r3, #0]
 801145a:	e248      	b.n	80118ee <_dtoa_r+0xb4e>
 801145c:	46b8      	mov	r8, r7
 801145e:	4633      	mov	r3, r6
 8011460:	461e      	mov	r6, r3
 8011462:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011466:	2a39      	cmp	r2, #57	@ 0x39
 8011468:	d106      	bne.n	8011478 <_dtoa_r+0x6d8>
 801146a:	459a      	cmp	sl, r3
 801146c:	d1f8      	bne.n	8011460 <_dtoa_r+0x6c0>
 801146e:	2230      	movs	r2, #48	@ 0x30
 8011470:	f108 0801 	add.w	r8, r8, #1
 8011474:	f88a 2000 	strb.w	r2, [sl]
 8011478:	781a      	ldrb	r2, [r3, #0]
 801147a:	3201      	adds	r2, #1
 801147c:	701a      	strb	r2, [r3, #0]
 801147e:	e7a0      	b.n	80113c2 <_dtoa_r+0x622>
 8011480:	4b6f      	ldr	r3, [pc, #444]	@ (8011640 <_dtoa_r+0x8a0>)
 8011482:	2200      	movs	r2, #0
 8011484:	f7ef f8c8 	bl	8000618 <__aeabi_dmul>
 8011488:	2200      	movs	r2, #0
 801148a:	2300      	movs	r3, #0
 801148c:	4604      	mov	r4, r0
 801148e:	460d      	mov	r5, r1
 8011490:	f7ef fb2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8011494:	2800      	cmp	r0, #0
 8011496:	d09f      	beq.n	80113d8 <_dtoa_r+0x638>
 8011498:	e7d1      	b.n	801143e <_dtoa_r+0x69e>
 801149a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801149c:	2a00      	cmp	r2, #0
 801149e:	f000 80ea 	beq.w	8011676 <_dtoa_r+0x8d6>
 80114a2:	9a07      	ldr	r2, [sp, #28]
 80114a4:	2a01      	cmp	r2, #1
 80114a6:	f300 80cd 	bgt.w	8011644 <_dtoa_r+0x8a4>
 80114aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80114ac:	2a00      	cmp	r2, #0
 80114ae:	f000 80c1 	beq.w	8011634 <_dtoa_r+0x894>
 80114b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80114b6:	9c08      	ldr	r4, [sp, #32]
 80114b8:	9e00      	ldr	r6, [sp, #0]
 80114ba:	9a00      	ldr	r2, [sp, #0]
 80114bc:	441a      	add	r2, r3
 80114be:	9200      	str	r2, [sp, #0]
 80114c0:	9a06      	ldr	r2, [sp, #24]
 80114c2:	2101      	movs	r1, #1
 80114c4:	441a      	add	r2, r3
 80114c6:	4648      	mov	r0, r9
 80114c8:	9206      	str	r2, [sp, #24]
 80114ca:	f000 ff0d 	bl	80122e8 <__i2b>
 80114ce:	4605      	mov	r5, r0
 80114d0:	b166      	cbz	r6, 80114ec <_dtoa_r+0x74c>
 80114d2:	9b06      	ldr	r3, [sp, #24]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	dd09      	ble.n	80114ec <_dtoa_r+0x74c>
 80114d8:	42b3      	cmp	r3, r6
 80114da:	9a00      	ldr	r2, [sp, #0]
 80114dc:	bfa8      	it	ge
 80114de:	4633      	movge	r3, r6
 80114e0:	1ad2      	subs	r2, r2, r3
 80114e2:	9200      	str	r2, [sp, #0]
 80114e4:	9a06      	ldr	r2, [sp, #24]
 80114e6:	1af6      	subs	r6, r6, r3
 80114e8:	1ad3      	subs	r3, r2, r3
 80114ea:	9306      	str	r3, [sp, #24]
 80114ec:	9b08      	ldr	r3, [sp, #32]
 80114ee:	b30b      	cbz	r3, 8011534 <_dtoa_r+0x794>
 80114f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	f000 80c6 	beq.w	8011684 <_dtoa_r+0x8e4>
 80114f8:	2c00      	cmp	r4, #0
 80114fa:	f000 80c0 	beq.w	801167e <_dtoa_r+0x8de>
 80114fe:	4629      	mov	r1, r5
 8011500:	4622      	mov	r2, r4
 8011502:	4648      	mov	r0, r9
 8011504:	f000 ffa8 	bl	8012458 <__pow5mult>
 8011508:	9a02      	ldr	r2, [sp, #8]
 801150a:	4601      	mov	r1, r0
 801150c:	4605      	mov	r5, r0
 801150e:	4648      	mov	r0, r9
 8011510:	f000 ff00 	bl	8012314 <__multiply>
 8011514:	9902      	ldr	r1, [sp, #8]
 8011516:	4680      	mov	r8, r0
 8011518:	4648      	mov	r0, r9
 801151a:	f000 fde7 	bl	80120ec <_Bfree>
 801151e:	9b08      	ldr	r3, [sp, #32]
 8011520:	1b1b      	subs	r3, r3, r4
 8011522:	9308      	str	r3, [sp, #32]
 8011524:	f000 80b1 	beq.w	801168a <_dtoa_r+0x8ea>
 8011528:	9a08      	ldr	r2, [sp, #32]
 801152a:	4641      	mov	r1, r8
 801152c:	4648      	mov	r0, r9
 801152e:	f000 ff93 	bl	8012458 <__pow5mult>
 8011532:	9002      	str	r0, [sp, #8]
 8011534:	2101      	movs	r1, #1
 8011536:	4648      	mov	r0, r9
 8011538:	f000 fed6 	bl	80122e8 <__i2b>
 801153c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801153e:	4604      	mov	r4, r0
 8011540:	2b00      	cmp	r3, #0
 8011542:	f000 81d8 	beq.w	80118f6 <_dtoa_r+0xb56>
 8011546:	461a      	mov	r2, r3
 8011548:	4601      	mov	r1, r0
 801154a:	4648      	mov	r0, r9
 801154c:	f000 ff84 	bl	8012458 <__pow5mult>
 8011550:	9b07      	ldr	r3, [sp, #28]
 8011552:	2b01      	cmp	r3, #1
 8011554:	4604      	mov	r4, r0
 8011556:	f300 809f 	bgt.w	8011698 <_dtoa_r+0x8f8>
 801155a:	9b04      	ldr	r3, [sp, #16]
 801155c:	2b00      	cmp	r3, #0
 801155e:	f040 8097 	bne.w	8011690 <_dtoa_r+0x8f0>
 8011562:	9b05      	ldr	r3, [sp, #20]
 8011564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011568:	2b00      	cmp	r3, #0
 801156a:	f040 8093 	bne.w	8011694 <_dtoa_r+0x8f4>
 801156e:	9b05      	ldr	r3, [sp, #20]
 8011570:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011574:	0d1b      	lsrs	r3, r3, #20
 8011576:	051b      	lsls	r3, r3, #20
 8011578:	b133      	cbz	r3, 8011588 <_dtoa_r+0x7e8>
 801157a:	9b00      	ldr	r3, [sp, #0]
 801157c:	3301      	adds	r3, #1
 801157e:	9300      	str	r3, [sp, #0]
 8011580:	9b06      	ldr	r3, [sp, #24]
 8011582:	3301      	adds	r3, #1
 8011584:	9306      	str	r3, [sp, #24]
 8011586:	2301      	movs	r3, #1
 8011588:	9308      	str	r3, [sp, #32]
 801158a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801158c:	2b00      	cmp	r3, #0
 801158e:	f000 81b8 	beq.w	8011902 <_dtoa_r+0xb62>
 8011592:	6923      	ldr	r3, [r4, #16]
 8011594:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011598:	6918      	ldr	r0, [r3, #16]
 801159a:	f000 fe59 	bl	8012250 <__hi0bits>
 801159e:	f1c0 0020 	rsb	r0, r0, #32
 80115a2:	9b06      	ldr	r3, [sp, #24]
 80115a4:	4418      	add	r0, r3
 80115a6:	f010 001f 	ands.w	r0, r0, #31
 80115aa:	f000 8082 	beq.w	80116b2 <_dtoa_r+0x912>
 80115ae:	f1c0 0320 	rsb	r3, r0, #32
 80115b2:	2b04      	cmp	r3, #4
 80115b4:	dd73      	ble.n	801169e <_dtoa_r+0x8fe>
 80115b6:	9b00      	ldr	r3, [sp, #0]
 80115b8:	f1c0 001c 	rsb	r0, r0, #28
 80115bc:	4403      	add	r3, r0
 80115be:	9300      	str	r3, [sp, #0]
 80115c0:	9b06      	ldr	r3, [sp, #24]
 80115c2:	4403      	add	r3, r0
 80115c4:	4406      	add	r6, r0
 80115c6:	9306      	str	r3, [sp, #24]
 80115c8:	9b00      	ldr	r3, [sp, #0]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	dd05      	ble.n	80115da <_dtoa_r+0x83a>
 80115ce:	9902      	ldr	r1, [sp, #8]
 80115d0:	461a      	mov	r2, r3
 80115d2:	4648      	mov	r0, r9
 80115d4:	f000 ff9a 	bl	801250c <__lshift>
 80115d8:	9002      	str	r0, [sp, #8]
 80115da:	9b06      	ldr	r3, [sp, #24]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	dd05      	ble.n	80115ec <_dtoa_r+0x84c>
 80115e0:	4621      	mov	r1, r4
 80115e2:	461a      	mov	r2, r3
 80115e4:	4648      	mov	r0, r9
 80115e6:	f000 ff91 	bl	801250c <__lshift>
 80115ea:	4604      	mov	r4, r0
 80115ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d061      	beq.n	80116b6 <_dtoa_r+0x916>
 80115f2:	9802      	ldr	r0, [sp, #8]
 80115f4:	4621      	mov	r1, r4
 80115f6:	f000 fff5 	bl	80125e4 <__mcmp>
 80115fa:	2800      	cmp	r0, #0
 80115fc:	da5b      	bge.n	80116b6 <_dtoa_r+0x916>
 80115fe:	2300      	movs	r3, #0
 8011600:	9902      	ldr	r1, [sp, #8]
 8011602:	220a      	movs	r2, #10
 8011604:	4648      	mov	r0, r9
 8011606:	f000 fd93 	bl	8012130 <__multadd>
 801160a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801160c:	9002      	str	r0, [sp, #8]
 801160e:	f107 38ff 	add.w	r8, r7, #4294967295
 8011612:	2b00      	cmp	r3, #0
 8011614:	f000 8177 	beq.w	8011906 <_dtoa_r+0xb66>
 8011618:	4629      	mov	r1, r5
 801161a:	2300      	movs	r3, #0
 801161c:	220a      	movs	r2, #10
 801161e:	4648      	mov	r0, r9
 8011620:	f000 fd86 	bl	8012130 <__multadd>
 8011624:	f1bb 0f00 	cmp.w	fp, #0
 8011628:	4605      	mov	r5, r0
 801162a:	dc6f      	bgt.n	801170c <_dtoa_r+0x96c>
 801162c:	9b07      	ldr	r3, [sp, #28]
 801162e:	2b02      	cmp	r3, #2
 8011630:	dc49      	bgt.n	80116c6 <_dtoa_r+0x926>
 8011632:	e06b      	b.n	801170c <_dtoa_r+0x96c>
 8011634:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011636:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801163a:	e73c      	b.n	80114b6 <_dtoa_r+0x716>
 801163c:	3fe00000 	.word	0x3fe00000
 8011640:	40240000 	.word	0x40240000
 8011644:	9b03      	ldr	r3, [sp, #12]
 8011646:	1e5c      	subs	r4, r3, #1
 8011648:	9b08      	ldr	r3, [sp, #32]
 801164a:	42a3      	cmp	r3, r4
 801164c:	db09      	blt.n	8011662 <_dtoa_r+0x8c2>
 801164e:	1b1c      	subs	r4, r3, r4
 8011650:	9b03      	ldr	r3, [sp, #12]
 8011652:	2b00      	cmp	r3, #0
 8011654:	f6bf af30 	bge.w	80114b8 <_dtoa_r+0x718>
 8011658:	9b00      	ldr	r3, [sp, #0]
 801165a:	9a03      	ldr	r2, [sp, #12]
 801165c:	1a9e      	subs	r6, r3, r2
 801165e:	2300      	movs	r3, #0
 8011660:	e72b      	b.n	80114ba <_dtoa_r+0x71a>
 8011662:	9b08      	ldr	r3, [sp, #32]
 8011664:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011666:	9408      	str	r4, [sp, #32]
 8011668:	1ae3      	subs	r3, r4, r3
 801166a:	441a      	add	r2, r3
 801166c:	9e00      	ldr	r6, [sp, #0]
 801166e:	9b03      	ldr	r3, [sp, #12]
 8011670:	920d      	str	r2, [sp, #52]	@ 0x34
 8011672:	2400      	movs	r4, #0
 8011674:	e721      	b.n	80114ba <_dtoa_r+0x71a>
 8011676:	9c08      	ldr	r4, [sp, #32]
 8011678:	9e00      	ldr	r6, [sp, #0]
 801167a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801167c:	e728      	b.n	80114d0 <_dtoa_r+0x730>
 801167e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011682:	e751      	b.n	8011528 <_dtoa_r+0x788>
 8011684:	9a08      	ldr	r2, [sp, #32]
 8011686:	9902      	ldr	r1, [sp, #8]
 8011688:	e750      	b.n	801152c <_dtoa_r+0x78c>
 801168a:	f8cd 8008 	str.w	r8, [sp, #8]
 801168e:	e751      	b.n	8011534 <_dtoa_r+0x794>
 8011690:	2300      	movs	r3, #0
 8011692:	e779      	b.n	8011588 <_dtoa_r+0x7e8>
 8011694:	9b04      	ldr	r3, [sp, #16]
 8011696:	e777      	b.n	8011588 <_dtoa_r+0x7e8>
 8011698:	2300      	movs	r3, #0
 801169a:	9308      	str	r3, [sp, #32]
 801169c:	e779      	b.n	8011592 <_dtoa_r+0x7f2>
 801169e:	d093      	beq.n	80115c8 <_dtoa_r+0x828>
 80116a0:	9a00      	ldr	r2, [sp, #0]
 80116a2:	331c      	adds	r3, #28
 80116a4:	441a      	add	r2, r3
 80116a6:	9200      	str	r2, [sp, #0]
 80116a8:	9a06      	ldr	r2, [sp, #24]
 80116aa:	441a      	add	r2, r3
 80116ac:	441e      	add	r6, r3
 80116ae:	9206      	str	r2, [sp, #24]
 80116b0:	e78a      	b.n	80115c8 <_dtoa_r+0x828>
 80116b2:	4603      	mov	r3, r0
 80116b4:	e7f4      	b.n	80116a0 <_dtoa_r+0x900>
 80116b6:	9b03      	ldr	r3, [sp, #12]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	46b8      	mov	r8, r7
 80116bc:	dc20      	bgt.n	8011700 <_dtoa_r+0x960>
 80116be:	469b      	mov	fp, r3
 80116c0:	9b07      	ldr	r3, [sp, #28]
 80116c2:	2b02      	cmp	r3, #2
 80116c4:	dd1e      	ble.n	8011704 <_dtoa_r+0x964>
 80116c6:	f1bb 0f00 	cmp.w	fp, #0
 80116ca:	f47f adb1 	bne.w	8011230 <_dtoa_r+0x490>
 80116ce:	4621      	mov	r1, r4
 80116d0:	465b      	mov	r3, fp
 80116d2:	2205      	movs	r2, #5
 80116d4:	4648      	mov	r0, r9
 80116d6:	f000 fd2b 	bl	8012130 <__multadd>
 80116da:	4601      	mov	r1, r0
 80116dc:	4604      	mov	r4, r0
 80116de:	9802      	ldr	r0, [sp, #8]
 80116e0:	f000 ff80 	bl	80125e4 <__mcmp>
 80116e4:	2800      	cmp	r0, #0
 80116e6:	f77f ada3 	ble.w	8011230 <_dtoa_r+0x490>
 80116ea:	4656      	mov	r6, sl
 80116ec:	2331      	movs	r3, #49	@ 0x31
 80116ee:	f806 3b01 	strb.w	r3, [r6], #1
 80116f2:	f108 0801 	add.w	r8, r8, #1
 80116f6:	e59f      	b.n	8011238 <_dtoa_r+0x498>
 80116f8:	9c03      	ldr	r4, [sp, #12]
 80116fa:	46b8      	mov	r8, r7
 80116fc:	4625      	mov	r5, r4
 80116fe:	e7f4      	b.n	80116ea <_dtoa_r+0x94a>
 8011700:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8011704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011706:	2b00      	cmp	r3, #0
 8011708:	f000 8101 	beq.w	801190e <_dtoa_r+0xb6e>
 801170c:	2e00      	cmp	r6, #0
 801170e:	dd05      	ble.n	801171c <_dtoa_r+0x97c>
 8011710:	4629      	mov	r1, r5
 8011712:	4632      	mov	r2, r6
 8011714:	4648      	mov	r0, r9
 8011716:	f000 fef9 	bl	801250c <__lshift>
 801171a:	4605      	mov	r5, r0
 801171c:	9b08      	ldr	r3, [sp, #32]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d05c      	beq.n	80117dc <_dtoa_r+0xa3c>
 8011722:	6869      	ldr	r1, [r5, #4]
 8011724:	4648      	mov	r0, r9
 8011726:	f000 fca1 	bl	801206c <_Balloc>
 801172a:	4606      	mov	r6, r0
 801172c:	b928      	cbnz	r0, 801173a <_dtoa_r+0x99a>
 801172e:	4b82      	ldr	r3, [pc, #520]	@ (8011938 <_dtoa_r+0xb98>)
 8011730:	4602      	mov	r2, r0
 8011732:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011736:	f7ff bb4a 	b.w	8010dce <_dtoa_r+0x2e>
 801173a:	692a      	ldr	r2, [r5, #16]
 801173c:	3202      	adds	r2, #2
 801173e:	0092      	lsls	r2, r2, #2
 8011740:	f105 010c 	add.w	r1, r5, #12
 8011744:	300c      	adds	r0, #12
 8011746:	f7ff fa7a 	bl	8010c3e <memcpy>
 801174a:	2201      	movs	r2, #1
 801174c:	4631      	mov	r1, r6
 801174e:	4648      	mov	r0, r9
 8011750:	f000 fedc 	bl	801250c <__lshift>
 8011754:	f10a 0301 	add.w	r3, sl, #1
 8011758:	9300      	str	r3, [sp, #0]
 801175a:	eb0a 030b 	add.w	r3, sl, fp
 801175e:	9308      	str	r3, [sp, #32]
 8011760:	9b04      	ldr	r3, [sp, #16]
 8011762:	f003 0301 	and.w	r3, r3, #1
 8011766:	462f      	mov	r7, r5
 8011768:	9306      	str	r3, [sp, #24]
 801176a:	4605      	mov	r5, r0
 801176c:	9b00      	ldr	r3, [sp, #0]
 801176e:	9802      	ldr	r0, [sp, #8]
 8011770:	4621      	mov	r1, r4
 8011772:	f103 3bff 	add.w	fp, r3, #4294967295
 8011776:	f7ff fa88 	bl	8010c8a <quorem>
 801177a:	4603      	mov	r3, r0
 801177c:	3330      	adds	r3, #48	@ 0x30
 801177e:	9003      	str	r0, [sp, #12]
 8011780:	4639      	mov	r1, r7
 8011782:	9802      	ldr	r0, [sp, #8]
 8011784:	9309      	str	r3, [sp, #36]	@ 0x24
 8011786:	f000 ff2d 	bl	80125e4 <__mcmp>
 801178a:	462a      	mov	r2, r5
 801178c:	9004      	str	r0, [sp, #16]
 801178e:	4621      	mov	r1, r4
 8011790:	4648      	mov	r0, r9
 8011792:	f000 ff43 	bl	801261c <__mdiff>
 8011796:	68c2      	ldr	r2, [r0, #12]
 8011798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801179a:	4606      	mov	r6, r0
 801179c:	bb02      	cbnz	r2, 80117e0 <_dtoa_r+0xa40>
 801179e:	4601      	mov	r1, r0
 80117a0:	9802      	ldr	r0, [sp, #8]
 80117a2:	f000 ff1f 	bl	80125e4 <__mcmp>
 80117a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117a8:	4602      	mov	r2, r0
 80117aa:	4631      	mov	r1, r6
 80117ac:	4648      	mov	r0, r9
 80117ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80117b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80117b2:	f000 fc9b 	bl	80120ec <_Bfree>
 80117b6:	9b07      	ldr	r3, [sp, #28]
 80117b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80117ba:	9e00      	ldr	r6, [sp, #0]
 80117bc:	ea42 0103 	orr.w	r1, r2, r3
 80117c0:	9b06      	ldr	r3, [sp, #24]
 80117c2:	4319      	orrs	r1, r3
 80117c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117c6:	d10d      	bne.n	80117e4 <_dtoa_r+0xa44>
 80117c8:	2b39      	cmp	r3, #57	@ 0x39
 80117ca:	d027      	beq.n	801181c <_dtoa_r+0xa7c>
 80117cc:	9a04      	ldr	r2, [sp, #16]
 80117ce:	2a00      	cmp	r2, #0
 80117d0:	dd01      	ble.n	80117d6 <_dtoa_r+0xa36>
 80117d2:	9b03      	ldr	r3, [sp, #12]
 80117d4:	3331      	adds	r3, #49	@ 0x31
 80117d6:	f88b 3000 	strb.w	r3, [fp]
 80117da:	e52e      	b.n	801123a <_dtoa_r+0x49a>
 80117dc:	4628      	mov	r0, r5
 80117de:	e7b9      	b.n	8011754 <_dtoa_r+0x9b4>
 80117e0:	2201      	movs	r2, #1
 80117e2:	e7e2      	b.n	80117aa <_dtoa_r+0xa0a>
 80117e4:	9904      	ldr	r1, [sp, #16]
 80117e6:	2900      	cmp	r1, #0
 80117e8:	db04      	blt.n	80117f4 <_dtoa_r+0xa54>
 80117ea:	9807      	ldr	r0, [sp, #28]
 80117ec:	4301      	orrs	r1, r0
 80117ee:	9806      	ldr	r0, [sp, #24]
 80117f0:	4301      	orrs	r1, r0
 80117f2:	d120      	bne.n	8011836 <_dtoa_r+0xa96>
 80117f4:	2a00      	cmp	r2, #0
 80117f6:	ddee      	ble.n	80117d6 <_dtoa_r+0xa36>
 80117f8:	9902      	ldr	r1, [sp, #8]
 80117fa:	9300      	str	r3, [sp, #0]
 80117fc:	2201      	movs	r2, #1
 80117fe:	4648      	mov	r0, r9
 8011800:	f000 fe84 	bl	801250c <__lshift>
 8011804:	4621      	mov	r1, r4
 8011806:	9002      	str	r0, [sp, #8]
 8011808:	f000 feec 	bl	80125e4 <__mcmp>
 801180c:	2800      	cmp	r0, #0
 801180e:	9b00      	ldr	r3, [sp, #0]
 8011810:	dc02      	bgt.n	8011818 <_dtoa_r+0xa78>
 8011812:	d1e0      	bne.n	80117d6 <_dtoa_r+0xa36>
 8011814:	07da      	lsls	r2, r3, #31
 8011816:	d5de      	bpl.n	80117d6 <_dtoa_r+0xa36>
 8011818:	2b39      	cmp	r3, #57	@ 0x39
 801181a:	d1da      	bne.n	80117d2 <_dtoa_r+0xa32>
 801181c:	2339      	movs	r3, #57	@ 0x39
 801181e:	f88b 3000 	strb.w	r3, [fp]
 8011822:	4633      	mov	r3, r6
 8011824:	461e      	mov	r6, r3
 8011826:	3b01      	subs	r3, #1
 8011828:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801182c:	2a39      	cmp	r2, #57	@ 0x39
 801182e:	d04e      	beq.n	80118ce <_dtoa_r+0xb2e>
 8011830:	3201      	adds	r2, #1
 8011832:	701a      	strb	r2, [r3, #0]
 8011834:	e501      	b.n	801123a <_dtoa_r+0x49a>
 8011836:	2a00      	cmp	r2, #0
 8011838:	dd03      	ble.n	8011842 <_dtoa_r+0xaa2>
 801183a:	2b39      	cmp	r3, #57	@ 0x39
 801183c:	d0ee      	beq.n	801181c <_dtoa_r+0xa7c>
 801183e:	3301      	adds	r3, #1
 8011840:	e7c9      	b.n	80117d6 <_dtoa_r+0xa36>
 8011842:	9a00      	ldr	r2, [sp, #0]
 8011844:	9908      	ldr	r1, [sp, #32]
 8011846:	f802 3c01 	strb.w	r3, [r2, #-1]
 801184a:	428a      	cmp	r2, r1
 801184c:	d028      	beq.n	80118a0 <_dtoa_r+0xb00>
 801184e:	9902      	ldr	r1, [sp, #8]
 8011850:	2300      	movs	r3, #0
 8011852:	220a      	movs	r2, #10
 8011854:	4648      	mov	r0, r9
 8011856:	f000 fc6b 	bl	8012130 <__multadd>
 801185a:	42af      	cmp	r7, r5
 801185c:	9002      	str	r0, [sp, #8]
 801185e:	f04f 0300 	mov.w	r3, #0
 8011862:	f04f 020a 	mov.w	r2, #10
 8011866:	4639      	mov	r1, r7
 8011868:	4648      	mov	r0, r9
 801186a:	d107      	bne.n	801187c <_dtoa_r+0xadc>
 801186c:	f000 fc60 	bl	8012130 <__multadd>
 8011870:	4607      	mov	r7, r0
 8011872:	4605      	mov	r5, r0
 8011874:	9b00      	ldr	r3, [sp, #0]
 8011876:	3301      	adds	r3, #1
 8011878:	9300      	str	r3, [sp, #0]
 801187a:	e777      	b.n	801176c <_dtoa_r+0x9cc>
 801187c:	f000 fc58 	bl	8012130 <__multadd>
 8011880:	4629      	mov	r1, r5
 8011882:	4607      	mov	r7, r0
 8011884:	2300      	movs	r3, #0
 8011886:	220a      	movs	r2, #10
 8011888:	4648      	mov	r0, r9
 801188a:	f000 fc51 	bl	8012130 <__multadd>
 801188e:	4605      	mov	r5, r0
 8011890:	e7f0      	b.n	8011874 <_dtoa_r+0xad4>
 8011892:	f1bb 0f00 	cmp.w	fp, #0
 8011896:	bfcc      	ite	gt
 8011898:	465e      	movgt	r6, fp
 801189a:	2601      	movle	r6, #1
 801189c:	4456      	add	r6, sl
 801189e:	2700      	movs	r7, #0
 80118a0:	9902      	ldr	r1, [sp, #8]
 80118a2:	9300      	str	r3, [sp, #0]
 80118a4:	2201      	movs	r2, #1
 80118a6:	4648      	mov	r0, r9
 80118a8:	f000 fe30 	bl	801250c <__lshift>
 80118ac:	4621      	mov	r1, r4
 80118ae:	9002      	str	r0, [sp, #8]
 80118b0:	f000 fe98 	bl	80125e4 <__mcmp>
 80118b4:	2800      	cmp	r0, #0
 80118b6:	dcb4      	bgt.n	8011822 <_dtoa_r+0xa82>
 80118b8:	d102      	bne.n	80118c0 <_dtoa_r+0xb20>
 80118ba:	9b00      	ldr	r3, [sp, #0]
 80118bc:	07db      	lsls	r3, r3, #31
 80118be:	d4b0      	bmi.n	8011822 <_dtoa_r+0xa82>
 80118c0:	4633      	mov	r3, r6
 80118c2:	461e      	mov	r6, r3
 80118c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80118c8:	2a30      	cmp	r2, #48	@ 0x30
 80118ca:	d0fa      	beq.n	80118c2 <_dtoa_r+0xb22>
 80118cc:	e4b5      	b.n	801123a <_dtoa_r+0x49a>
 80118ce:	459a      	cmp	sl, r3
 80118d0:	d1a8      	bne.n	8011824 <_dtoa_r+0xa84>
 80118d2:	2331      	movs	r3, #49	@ 0x31
 80118d4:	f108 0801 	add.w	r8, r8, #1
 80118d8:	f88a 3000 	strb.w	r3, [sl]
 80118dc:	e4ad      	b.n	801123a <_dtoa_r+0x49a>
 80118de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80118e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801193c <_dtoa_r+0xb9c>
 80118e4:	b11b      	cbz	r3, 80118ee <_dtoa_r+0xb4e>
 80118e6:	f10a 0308 	add.w	r3, sl, #8
 80118ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80118ec:	6013      	str	r3, [r2, #0]
 80118ee:	4650      	mov	r0, sl
 80118f0:	b017      	add	sp, #92	@ 0x5c
 80118f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118f6:	9b07      	ldr	r3, [sp, #28]
 80118f8:	2b01      	cmp	r3, #1
 80118fa:	f77f ae2e 	ble.w	801155a <_dtoa_r+0x7ba>
 80118fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011900:	9308      	str	r3, [sp, #32]
 8011902:	2001      	movs	r0, #1
 8011904:	e64d      	b.n	80115a2 <_dtoa_r+0x802>
 8011906:	f1bb 0f00 	cmp.w	fp, #0
 801190a:	f77f aed9 	ble.w	80116c0 <_dtoa_r+0x920>
 801190e:	4656      	mov	r6, sl
 8011910:	9802      	ldr	r0, [sp, #8]
 8011912:	4621      	mov	r1, r4
 8011914:	f7ff f9b9 	bl	8010c8a <quorem>
 8011918:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801191c:	f806 3b01 	strb.w	r3, [r6], #1
 8011920:	eba6 020a 	sub.w	r2, r6, sl
 8011924:	4593      	cmp	fp, r2
 8011926:	ddb4      	ble.n	8011892 <_dtoa_r+0xaf2>
 8011928:	9902      	ldr	r1, [sp, #8]
 801192a:	2300      	movs	r3, #0
 801192c:	220a      	movs	r2, #10
 801192e:	4648      	mov	r0, r9
 8011930:	f000 fbfe 	bl	8012130 <__multadd>
 8011934:	9002      	str	r0, [sp, #8]
 8011936:	e7eb      	b.n	8011910 <_dtoa_r+0xb70>
 8011938:	08014272 	.word	0x08014272
 801193c:	0801420d 	.word	0x0801420d

08011940 <_free_r>:
 8011940:	b538      	push	{r3, r4, r5, lr}
 8011942:	4605      	mov	r5, r0
 8011944:	2900      	cmp	r1, #0
 8011946:	d041      	beq.n	80119cc <_free_r+0x8c>
 8011948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801194c:	1f0c      	subs	r4, r1, #4
 801194e:	2b00      	cmp	r3, #0
 8011950:	bfb8      	it	lt
 8011952:	18e4      	addlt	r4, r4, r3
 8011954:	f7fd f88c 	bl	800ea70 <__malloc_lock>
 8011958:	4a1d      	ldr	r2, [pc, #116]	@ (80119d0 <_free_r+0x90>)
 801195a:	6813      	ldr	r3, [r2, #0]
 801195c:	b933      	cbnz	r3, 801196c <_free_r+0x2c>
 801195e:	6063      	str	r3, [r4, #4]
 8011960:	6014      	str	r4, [r2, #0]
 8011962:	4628      	mov	r0, r5
 8011964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011968:	f7fd b888 	b.w	800ea7c <__malloc_unlock>
 801196c:	42a3      	cmp	r3, r4
 801196e:	d908      	bls.n	8011982 <_free_r+0x42>
 8011970:	6820      	ldr	r0, [r4, #0]
 8011972:	1821      	adds	r1, r4, r0
 8011974:	428b      	cmp	r3, r1
 8011976:	bf01      	itttt	eq
 8011978:	6819      	ldreq	r1, [r3, #0]
 801197a:	685b      	ldreq	r3, [r3, #4]
 801197c:	1809      	addeq	r1, r1, r0
 801197e:	6021      	streq	r1, [r4, #0]
 8011980:	e7ed      	b.n	801195e <_free_r+0x1e>
 8011982:	461a      	mov	r2, r3
 8011984:	685b      	ldr	r3, [r3, #4]
 8011986:	b10b      	cbz	r3, 801198c <_free_r+0x4c>
 8011988:	42a3      	cmp	r3, r4
 801198a:	d9fa      	bls.n	8011982 <_free_r+0x42>
 801198c:	6811      	ldr	r1, [r2, #0]
 801198e:	1850      	adds	r0, r2, r1
 8011990:	42a0      	cmp	r0, r4
 8011992:	d10b      	bne.n	80119ac <_free_r+0x6c>
 8011994:	6820      	ldr	r0, [r4, #0]
 8011996:	4401      	add	r1, r0
 8011998:	1850      	adds	r0, r2, r1
 801199a:	4283      	cmp	r3, r0
 801199c:	6011      	str	r1, [r2, #0]
 801199e:	d1e0      	bne.n	8011962 <_free_r+0x22>
 80119a0:	6818      	ldr	r0, [r3, #0]
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	6053      	str	r3, [r2, #4]
 80119a6:	4408      	add	r0, r1
 80119a8:	6010      	str	r0, [r2, #0]
 80119aa:	e7da      	b.n	8011962 <_free_r+0x22>
 80119ac:	d902      	bls.n	80119b4 <_free_r+0x74>
 80119ae:	230c      	movs	r3, #12
 80119b0:	602b      	str	r3, [r5, #0]
 80119b2:	e7d6      	b.n	8011962 <_free_r+0x22>
 80119b4:	6820      	ldr	r0, [r4, #0]
 80119b6:	1821      	adds	r1, r4, r0
 80119b8:	428b      	cmp	r3, r1
 80119ba:	bf04      	itt	eq
 80119bc:	6819      	ldreq	r1, [r3, #0]
 80119be:	685b      	ldreq	r3, [r3, #4]
 80119c0:	6063      	str	r3, [r4, #4]
 80119c2:	bf04      	itt	eq
 80119c4:	1809      	addeq	r1, r1, r0
 80119c6:	6021      	streq	r1, [r4, #0]
 80119c8:	6054      	str	r4, [r2, #4]
 80119ca:	e7ca      	b.n	8011962 <_free_r+0x22>
 80119cc:	bd38      	pop	{r3, r4, r5, pc}
 80119ce:	bf00      	nop
 80119d0:	200019c0 	.word	0x200019c0

080119d4 <rshift>:
 80119d4:	6903      	ldr	r3, [r0, #16]
 80119d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80119da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80119e2:	f100 0414 	add.w	r4, r0, #20
 80119e6:	dd45      	ble.n	8011a74 <rshift+0xa0>
 80119e8:	f011 011f 	ands.w	r1, r1, #31
 80119ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80119f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80119f4:	d10c      	bne.n	8011a10 <rshift+0x3c>
 80119f6:	f100 0710 	add.w	r7, r0, #16
 80119fa:	4629      	mov	r1, r5
 80119fc:	42b1      	cmp	r1, r6
 80119fe:	d334      	bcc.n	8011a6a <rshift+0x96>
 8011a00:	1a9b      	subs	r3, r3, r2
 8011a02:	009b      	lsls	r3, r3, #2
 8011a04:	1eea      	subs	r2, r5, #3
 8011a06:	4296      	cmp	r6, r2
 8011a08:	bf38      	it	cc
 8011a0a:	2300      	movcc	r3, #0
 8011a0c:	4423      	add	r3, r4
 8011a0e:	e015      	b.n	8011a3c <rshift+0x68>
 8011a10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011a14:	f1c1 0820 	rsb	r8, r1, #32
 8011a18:	40cf      	lsrs	r7, r1
 8011a1a:	f105 0e04 	add.w	lr, r5, #4
 8011a1e:	46a1      	mov	r9, r4
 8011a20:	4576      	cmp	r6, lr
 8011a22:	46f4      	mov	ip, lr
 8011a24:	d815      	bhi.n	8011a52 <rshift+0x7e>
 8011a26:	1a9a      	subs	r2, r3, r2
 8011a28:	0092      	lsls	r2, r2, #2
 8011a2a:	3a04      	subs	r2, #4
 8011a2c:	3501      	adds	r5, #1
 8011a2e:	42ae      	cmp	r6, r5
 8011a30:	bf38      	it	cc
 8011a32:	2200      	movcc	r2, #0
 8011a34:	18a3      	adds	r3, r4, r2
 8011a36:	50a7      	str	r7, [r4, r2]
 8011a38:	b107      	cbz	r7, 8011a3c <rshift+0x68>
 8011a3a:	3304      	adds	r3, #4
 8011a3c:	1b1a      	subs	r2, r3, r4
 8011a3e:	42a3      	cmp	r3, r4
 8011a40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011a44:	bf08      	it	eq
 8011a46:	2300      	moveq	r3, #0
 8011a48:	6102      	str	r2, [r0, #16]
 8011a4a:	bf08      	it	eq
 8011a4c:	6143      	streq	r3, [r0, #20]
 8011a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a52:	f8dc c000 	ldr.w	ip, [ip]
 8011a56:	fa0c fc08 	lsl.w	ip, ip, r8
 8011a5a:	ea4c 0707 	orr.w	r7, ip, r7
 8011a5e:	f849 7b04 	str.w	r7, [r9], #4
 8011a62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011a66:	40cf      	lsrs	r7, r1
 8011a68:	e7da      	b.n	8011a20 <rshift+0x4c>
 8011a6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8011a6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011a72:	e7c3      	b.n	80119fc <rshift+0x28>
 8011a74:	4623      	mov	r3, r4
 8011a76:	e7e1      	b.n	8011a3c <rshift+0x68>

08011a78 <__hexdig_fun>:
 8011a78:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011a7c:	2b09      	cmp	r3, #9
 8011a7e:	d802      	bhi.n	8011a86 <__hexdig_fun+0xe>
 8011a80:	3820      	subs	r0, #32
 8011a82:	b2c0      	uxtb	r0, r0
 8011a84:	4770      	bx	lr
 8011a86:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011a8a:	2b05      	cmp	r3, #5
 8011a8c:	d801      	bhi.n	8011a92 <__hexdig_fun+0x1a>
 8011a8e:	3847      	subs	r0, #71	@ 0x47
 8011a90:	e7f7      	b.n	8011a82 <__hexdig_fun+0xa>
 8011a92:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011a96:	2b05      	cmp	r3, #5
 8011a98:	d801      	bhi.n	8011a9e <__hexdig_fun+0x26>
 8011a9a:	3827      	subs	r0, #39	@ 0x27
 8011a9c:	e7f1      	b.n	8011a82 <__hexdig_fun+0xa>
 8011a9e:	2000      	movs	r0, #0
 8011aa0:	4770      	bx	lr
	...

08011aa4 <__gethex>:
 8011aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa8:	b085      	sub	sp, #20
 8011aaa:	468a      	mov	sl, r1
 8011aac:	9302      	str	r3, [sp, #8]
 8011aae:	680b      	ldr	r3, [r1, #0]
 8011ab0:	9001      	str	r0, [sp, #4]
 8011ab2:	4690      	mov	r8, r2
 8011ab4:	1c9c      	adds	r4, r3, #2
 8011ab6:	46a1      	mov	r9, r4
 8011ab8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011abc:	2830      	cmp	r0, #48	@ 0x30
 8011abe:	d0fa      	beq.n	8011ab6 <__gethex+0x12>
 8011ac0:	eba9 0303 	sub.w	r3, r9, r3
 8011ac4:	f1a3 0b02 	sub.w	fp, r3, #2
 8011ac8:	f7ff ffd6 	bl	8011a78 <__hexdig_fun>
 8011acc:	4605      	mov	r5, r0
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	d168      	bne.n	8011ba4 <__gethex+0x100>
 8011ad2:	49a0      	ldr	r1, [pc, #640]	@ (8011d54 <__gethex+0x2b0>)
 8011ad4:	2201      	movs	r2, #1
 8011ad6:	4648      	mov	r0, r9
 8011ad8:	f7fe ffa0 	bl	8010a1c <strncmp>
 8011adc:	4607      	mov	r7, r0
 8011ade:	2800      	cmp	r0, #0
 8011ae0:	d167      	bne.n	8011bb2 <__gethex+0x10e>
 8011ae2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011ae6:	4626      	mov	r6, r4
 8011ae8:	f7ff ffc6 	bl	8011a78 <__hexdig_fun>
 8011aec:	2800      	cmp	r0, #0
 8011aee:	d062      	beq.n	8011bb6 <__gethex+0x112>
 8011af0:	4623      	mov	r3, r4
 8011af2:	7818      	ldrb	r0, [r3, #0]
 8011af4:	2830      	cmp	r0, #48	@ 0x30
 8011af6:	4699      	mov	r9, r3
 8011af8:	f103 0301 	add.w	r3, r3, #1
 8011afc:	d0f9      	beq.n	8011af2 <__gethex+0x4e>
 8011afe:	f7ff ffbb 	bl	8011a78 <__hexdig_fun>
 8011b02:	fab0 f580 	clz	r5, r0
 8011b06:	096d      	lsrs	r5, r5, #5
 8011b08:	f04f 0b01 	mov.w	fp, #1
 8011b0c:	464a      	mov	r2, r9
 8011b0e:	4616      	mov	r6, r2
 8011b10:	3201      	adds	r2, #1
 8011b12:	7830      	ldrb	r0, [r6, #0]
 8011b14:	f7ff ffb0 	bl	8011a78 <__hexdig_fun>
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	d1f8      	bne.n	8011b0e <__gethex+0x6a>
 8011b1c:	498d      	ldr	r1, [pc, #564]	@ (8011d54 <__gethex+0x2b0>)
 8011b1e:	2201      	movs	r2, #1
 8011b20:	4630      	mov	r0, r6
 8011b22:	f7fe ff7b 	bl	8010a1c <strncmp>
 8011b26:	2800      	cmp	r0, #0
 8011b28:	d13f      	bne.n	8011baa <__gethex+0x106>
 8011b2a:	b944      	cbnz	r4, 8011b3e <__gethex+0x9a>
 8011b2c:	1c74      	adds	r4, r6, #1
 8011b2e:	4622      	mov	r2, r4
 8011b30:	4616      	mov	r6, r2
 8011b32:	3201      	adds	r2, #1
 8011b34:	7830      	ldrb	r0, [r6, #0]
 8011b36:	f7ff ff9f 	bl	8011a78 <__hexdig_fun>
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	d1f8      	bne.n	8011b30 <__gethex+0x8c>
 8011b3e:	1ba4      	subs	r4, r4, r6
 8011b40:	00a7      	lsls	r7, r4, #2
 8011b42:	7833      	ldrb	r3, [r6, #0]
 8011b44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011b48:	2b50      	cmp	r3, #80	@ 0x50
 8011b4a:	d13e      	bne.n	8011bca <__gethex+0x126>
 8011b4c:	7873      	ldrb	r3, [r6, #1]
 8011b4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8011b50:	d033      	beq.n	8011bba <__gethex+0x116>
 8011b52:	2b2d      	cmp	r3, #45	@ 0x2d
 8011b54:	d034      	beq.n	8011bc0 <__gethex+0x11c>
 8011b56:	1c71      	adds	r1, r6, #1
 8011b58:	2400      	movs	r4, #0
 8011b5a:	7808      	ldrb	r0, [r1, #0]
 8011b5c:	f7ff ff8c 	bl	8011a78 <__hexdig_fun>
 8011b60:	1e43      	subs	r3, r0, #1
 8011b62:	b2db      	uxtb	r3, r3
 8011b64:	2b18      	cmp	r3, #24
 8011b66:	d830      	bhi.n	8011bca <__gethex+0x126>
 8011b68:	f1a0 0210 	sub.w	r2, r0, #16
 8011b6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011b70:	f7ff ff82 	bl	8011a78 <__hexdig_fun>
 8011b74:	f100 3cff 	add.w	ip, r0, #4294967295
 8011b78:	fa5f fc8c 	uxtb.w	ip, ip
 8011b7c:	f1bc 0f18 	cmp.w	ip, #24
 8011b80:	f04f 030a 	mov.w	r3, #10
 8011b84:	d91e      	bls.n	8011bc4 <__gethex+0x120>
 8011b86:	b104      	cbz	r4, 8011b8a <__gethex+0xe6>
 8011b88:	4252      	negs	r2, r2
 8011b8a:	4417      	add	r7, r2
 8011b8c:	f8ca 1000 	str.w	r1, [sl]
 8011b90:	b1ed      	cbz	r5, 8011bce <__gethex+0x12a>
 8011b92:	f1bb 0f00 	cmp.w	fp, #0
 8011b96:	bf0c      	ite	eq
 8011b98:	2506      	moveq	r5, #6
 8011b9a:	2500      	movne	r5, #0
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	b005      	add	sp, #20
 8011ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba4:	2500      	movs	r5, #0
 8011ba6:	462c      	mov	r4, r5
 8011ba8:	e7b0      	b.n	8011b0c <__gethex+0x68>
 8011baa:	2c00      	cmp	r4, #0
 8011bac:	d1c7      	bne.n	8011b3e <__gethex+0x9a>
 8011bae:	4627      	mov	r7, r4
 8011bb0:	e7c7      	b.n	8011b42 <__gethex+0x9e>
 8011bb2:	464e      	mov	r6, r9
 8011bb4:	462f      	mov	r7, r5
 8011bb6:	2501      	movs	r5, #1
 8011bb8:	e7c3      	b.n	8011b42 <__gethex+0x9e>
 8011bba:	2400      	movs	r4, #0
 8011bbc:	1cb1      	adds	r1, r6, #2
 8011bbe:	e7cc      	b.n	8011b5a <__gethex+0xb6>
 8011bc0:	2401      	movs	r4, #1
 8011bc2:	e7fb      	b.n	8011bbc <__gethex+0x118>
 8011bc4:	fb03 0002 	mla	r0, r3, r2, r0
 8011bc8:	e7ce      	b.n	8011b68 <__gethex+0xc4>
 8011bca:	4631      	mov	r1, r6
 8011bcc:	e7de      	b.n	8011b8c <__gethex+0xe8>
 8011bce:	eba6 0309 	sub.w	r3, r6, r9
 8011bd2:	3b01      	subs	r3, #1
 8011bd4:	4629      	mov	r1, r5
 8011bd6:	2b07      	cmp	r3, #7
 8011bd8:	dc0a      	bgt.n	8011bf0 <__gethex+0x14c>
 8011bda:	9801      	ldr	r0, [sp, #4]
 8011bdc:	f000 fa46 	bl	801206c <_Balloc>
 8011be0:	4604      	mov	r4, r0
 8011be2:	b940      	cbnz	r0, 8011bf6 <__gethex+0x152>
 8011be4:	4b5c      	ldr	r3, [pc, #368]	@ (8011d58 <__gethex+0x2b4>)
 8011be6:	4602      	mov	r2, r0
 8011be8:	21e4      	movs	r1, #228	@ 0xe4
 8011bea:	485c      	ldr	r0, [pc, #368]	@ (8011d5c <__gethex+0x2b8>)
 8011bec:	f7fc fe68 	bl	800e8c0 <__assert_func>
 8011bf0:	3101      	adds	r1, #1
 8011bf2:	105b      	asrs	r3, r3, #1
 8011bf4:	e7ef      	b.n	8011bd6 <__gethex+0x132>
 8011bf6:	f100 0a14 	add.w	sl, r0, #20
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	4655      	mov	r5, sl
 8011bfe:	469b      	mov	fp, r3
 8011c00:	45b1      	cmp	r9, r6
 8011c02:	d337      	bcc.n	8011c74 <__gethex+0x1d0>
 8011c04:	f845 bb04 	str.w	fp, [r5], #4
 8011c08:	eba5 050a 	sub.w	r5, r5, sl
 8011c0c:	10ad      	asrs	r5, r5, #2
 8011c0e:	6125      	str	r5, [r4, #16]
 8011c10:	4658      	mov	r0, fp
 8011c12:	f000 fb1d 	bl	8012250 <__hi0bits>
 8011c16:	016d      	lsls	r5, r5, #5
 8011c18:	f8d8 6000 	ldr.w	r6, [r8]
 8011c1c:	1a2d      	subs	r5, r5, r0
 8011c1e:	42b5      	cmp	r5, r6
 8011c20:	dd54      	ble.n	8011ccc <__gethex+0x228>
 8011c22:	1bad      	subs	r5, r5, r6
 8011c24:	4629      	mov	r1, r5
 8011c26:	4620      	mov	r0, r4
 8011c28:	f000 fea9 	bl	801297e <__any_on>
 8011c2c:	4681      	mov	r9, r0
 8011c2e:	b178      	cbz	r0, 8011c50 <__gethex+0x1ac>
 8011c30:	1e6b      	subs	r3, r5, #1
 8011c32:	1159      	asrs	r1, r3, #5
 8011c34:	f003 021f 	and.w	r2, r3, #31
 8011c38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011c3c:	f04f 0901 	mov.w	r9, #1
 8011c40:	fa09 f202 	lsl.w	r2, r9, r2
 8011c44:	420a      	tst	r2, r1
 8011c46:	d003      	beq.n	8011c50 <__gethex+0x1ac>
 8011c48:	454b      	cmp	r3, r9
 8011c4a:	dc36      	bgt.n	8011cba <__gethex+0x216>
 8011c4c:	f04f 0902 	mov.w	r9, #2
 8011c50:	4629      	mov	r1, r5
 8011c52:	4620      	mov	r0, r4
 8011c54:	f7ff febe 	bl	80119d4 <rshift>
 8011c58:	442f      	add	r7, r5
 8011c5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011c5e:	42bb      	cmp	r3, r7
 8011c60:	da42      	bge.n	8011ce8 <__gethex+0x244>
 8011c62:	9801      	ldr	r0, [sp, #4]
 8011c64:	4621      	mov	r1, r4
 8011c66:	f000 fa41 	bl	80120ec <_Bfree>
 8011c6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	6013      	str	r3, [r2, #0]
 8011c70:	25a3      	movs	r5, #163	@ 0xa3
 8011c72:	e793      	b.n	8011b9c <__gethex+0xf8>
 8011c74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011c78:	2a2e      	cmp	r2, #46	@ 0x2e
 8011c7a:	d012      	beq.n	8011ca2 <__gethex+0x1fe>
 8011c7c:	2b20      	cmp	r3, #32
 8011c7e:	d104      	bne.n	8011c8a <__gethex+0x1e6>
 8011c80:	f845 bb04 	str.w	fp, [r5], #4
 8011c84:	f04f 0b00 	mov.w	fp, #0
 8011c88:	465b      	mov	r3, fp
 8011c8a:	7830      	ldrb	r0, [r6, #0]
 8011c8c:	9303      	str	r3, [sp, #12]
 8011c8e:	f7ff fef3 	bl	8011a78 <__hexdig_fun>
 8011c92:	9b03      	ldr	r3, [sp, #12]
 8011c94:	f000 000f 	and.w	r0, r0, #15
 8011c98:	4098      	lsls	r0, r3
 8011c9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8011c9e:	3304      	adds	r3, #4
 8011ca0:	e7ae      	b.n	8011c00 <__gethex+0x15c>
 8011ca2:	45b1      	cmp	r9, r6
 8011ca4:	d8ea      	bhi.n	8011c7c <__gethex+0x1d8>
 8011ca6:	492b      	ldr	r1, [pc, #172]	@ (8011d54 <__gethex+0x2b0>)
 8011ca8:	9303      	str	r3, [sp, #12]
 8011caa:	2201      	movs	r2, #1
 8011cac:	4630      	mov	r0, r6
 8011cae:	f7fe feb5 	bl	8010a1c <strncmp>
 8011cb2:	9b03      	ldr	r3, [sp, #12]
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d1e1      	bne.n	8011c7c <__gethex+0x1d8>
 8011cb8:	e7a2      	b.n	8011c00 <__gethex+0x15c>
 8011cba:	1ea9      	subs	r1, r5, #2
 8011cbc:	4620      	mov	r0, r4
 8011cbe:	f000 fe5e 	bl	801297e <__any_on>
 8011cc2:	2800      	cmp	r0, #0
 8011cc4:	d0c2      	beq.n	8011c4c <__gethex+0x1a8>
 8011cc6:	f04f 0903 	mov.w	r9, #3
 8011cca:	e7c1      	b.n	8011c50 <__gethex+0x1ac>
 8011ccc:	da09      	bge.n	8011ce2 <__gethex+0x23e>
 8011cce:	1b75      	subs	r5, r6, r5
 8011cd0:	4621      	mov	r1, r4
 8011cd2:	9801      	ldr	r0, [sp, #4]
 8011cd4:	462a      	mov	r2, r5
 8011cd6:	f000 fc19 	bl	801250c <__lshift>
 8011cda:	1b7f      	subs	r7, r7, r5
 8011cdc:	4604      	mov	r4, r0
 8011cde:	f100 0a14 	add.w	sl, r0, #20
 8011ce2:	f04f 0900 	mov.w	r9, #0
 8011ce6:	e7b8      	b.n	8011c5a <__gethex+0x1b6>
 8011ce8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011cec:	42bd      	cmp	r5, r7
 8011cee:	dd6f      	ble.n	8011dd0 <__gethex+0x32c>
 8011cf0:	1bed      	subs	r5, r5, r7
 8011cf2:	42ae      	cmp	r6, r5
 8011cf4:	dc34      	bgt.n	8011d60 <__gethex+0x2bc>
 8011cf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011cfa:	2b02      	cmp	r3, #2
 8011cfc:	d022      	beq.n	8011d44 <__gethex+0x2a0>
 8011cfe:	2b03      	cmp	r3, #3
 8011d00:	d024      	beq.n	8011d4c <__gethex+0x2a8>
 8011d02:	2b01      	cmp	r3, #1
 8011d04:	d115      	bne.n	8011d32 <__gethex+0x28e>
 8011d06:	42ae      	cmp	r6, r5
 8011d08:	d113      	bne.n	8011d32 <__gethex+0x28e>
 8011d0a:	2e01      	cmp	r6, #1
 8011d0c:	d10b      	bne.n	8011d26 <__gethex+0x282>
 8011d0e:	9a02      	ldr	r2, [sp, #8]
 8011d10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011d14:	6013      	str	r3, [r2, #0]
 8011d16:	2301      	movs	r3, #1
 8011d18:	6123      	str	r3, [r4, #16]
 8011d1a:	f8ca 3000 	str.w	r3, [sl]
 8011d1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d20:	2562      	movs	r5, #98	@ 0x62
 8011d22:	601c      	str	r4, [r3, #0]
 8011d24:	e73a      	b.n	8011b9c <__gethex+0xf8>
 8011d26:	1e71      	subs	r1, r6, #1
 8011d28:	4620      	mov	r0, r4
 8011d2a:	f000 fe28 	bl	801297e <__any_on>
 8011d2e:	2800      	cmp	r0, #0
 8011d30:	d1ed      	bne.n	8011d0e <__gethex+0x26a>
 8011d32:	9801      	ldr	r0, [sp, #4]
 8011d34:	4621      	mov	r1, r4
 8011d36:	f000 f9d9 	bl	80120ec <_Bfree>
 8011d3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	6013      	str	r3, [r2, #0]
 8011d40:	2550      	movs	r5, #80	@ 0x50
 8011d42:	e72b      	b.n	8011b9c <__gethex+0xf8>
 8011d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d1f3      	bne.n	8011d32 <__gethex+0x28e>
 8011d4a:	e7e0      	b.n	8011d0e <__gethex+0x26a>
 8011d4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d1dd      	bne.n	8011d0e <__gethex+0x26a>
 8011d52:	e7ee      	b.n	8011d32 <__gethex+0x28e>
 8011d54:	0801415b 	.word	0x0801415b
 8011d58:	08014272 	.word	0x08014272
 8011d5c:	08014283 	.word	0x08014283
 8011d60:	1e6f      	subs	r7, r5, #1
 8011d62:	f1b9 0f00 	cmp.w	r9, #0
 8011d66:	d130      	bne.n	8011dca <__gethex+0x326>
 8011d68:	b127      	cbz	r7, 8011d74 <__gethex+0x2d0>
 8011d6a:	4639      	mov	r1, r7
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	f000 fe06 	bl	801297e <__any_on>
 8011d72:	4681      	mov	r9, r0
 8011d74:	117a      	asrs	r2, r7, #5
 8011d76:	2301      	movs	r3, #1
 8011d78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011d7c:	f007 071f 	and.w	r7, r7, #31
 8011d80:	40bb      	lsls	r3, r7
 8011d82:	4213      	tst	r3, r2
 8011d84:	4629      	mov	r1, r5
 8011d86:	4620      	mov	r0, r4
 8011d88:	bf18      	it	ne
 8011d8a:	f049 0902 	orrne.w	r9, r9, #2
 8011d8e:	f7ff fe21 	bl	80119d4 <rshift>
 8011d92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011d96:	1b76      	subs	r6, r6, r5
 8011d98:	2502      	movs	r5, #2
 8011d9a:	f1b9 0f00 	cmp.w	r9, #0
 8011d9e:	d047      	beq.n	8011e30 <__gethex+0x38c>
 8011da0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011da4:	2b02      	cmp	r3, #2
 8011da6:	d015      	beq.n	8011dd4 <__gethex+0x330>
 8011da8:	2b03      	cmp	r3, #3
 8011daa:	d017      	beq.n	8011ddc <__gethex+0x338>
 8011dac:	2b01      	cmp	r3, #1
 8011dae:	d109      	bne.n	8011dc4 <__gethex+0x320>
 8011db0:	f019 0f02 	tst.w	r9, #2
 8011db4:	d006      	beq.n	8011dc4 <__gethex+0x320>
 8011db6:	f8da 3000 	ldr.w	r3, [sl]
 8011dba:	ea49 0903 	orr.w	r9, r9, r3
 8011dbe:	f019 0f01 	tst.w	r9, #1
 8011dc2:	d10e      	bne.n	8011de2 <__gethex+0x33e>
 8011dc4:	f045 0510 	orr.w	r5, r5, #16
 8011dc8:	e032      	b.n	8011e30 <__gethex+0x38c>
 8011dca:	f04f 0901 	mov.w	r9, #1
 8011dce:	e7d1      	b.n	8011d74 <__gethex+0x2d0>
 8011dd0:	2501      	movs	r5, #1
 8011dd2:	e7e2      	b.n	8011d9a <__gethex+0x2f6>
 8011dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011dd6:	f1c3 0301 	rsb	r3, r3, #1
 8011dda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d0f0      	beq.n	8011dc4 <__gethex+0x320>
 8011de2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011de6:	f104 0314 	add.w	r3, r4, #20
 8011dea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011dee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011df2:	f04f 0c00 	mov.w	ip, #0
 8011df6:	4618      	mov	r0, r3
 8011df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dfc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011e00:	d01b      	beq.n	8011e3a <__gethex+0x396>
 8011e02:	3201      	adds	r2, #1
 8011e04:	6002      	str	r2, [r0, #0]
 8011e06:	2d02      	cmp	r5, #2
 8011e08:	f104 0314 	add.w	r3, r4, #20
 8011e0c:	d13c      	bne.n	8011e88 <__gethex+0x3e4>
 8011e0e:	f8d8 2000 	ldr.w	r2, [r8]
 8011e12:	3a01      	subs	r2, #1
 8011e14:	42b2      	cmp	r2, r6
 8011e16:	d109      	bne.n	8011e2c <__gethex+0x388>
 8011e18:	1171      	asrs	r1, r6, #5
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e20:	f006 061f 	and.w	r6, r6, #31
 8011e24:	fa02 f606 	lsl.w	r6, r2, r6
 8011e28:	421e      	tst	r6, r3
 8011e2a:	d13a      	bne.n	8011ea2 <__gethex+0x3fe>
 8011e2c:	f045 0520 	orr.w	r5, r5, #32
 8011e30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e32:	601c      	str	r4, [r3, #0]
 8011e34:	9b02      	ldr	r3, [sp, #8]
 8011e36:	601f      	str	r7, [r3, #0]
 8011e38:	e6b0      	b.n	8011b9c <__gethex+0xf8>
 8011e3a:	4299      	cmp	r1, r3
 8011e3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011e40:	d8d9      	bhi.n	8011df6 <__gethex+0x352>
 8011e42:	68a3      	ldr	r3, [r4, #8]
 8011e44:	459b      	cmp	fp, r3
 8011e46:	db17      	blt.n	8011e78 <__gethex+0x3d4>
 8011e48:	6861      	ldr	r1, [r4, #4]
 8011e4a:	9801      	ldr	r0, [sp, #4]
 8011e4c:	3101      	adds	r1, #1
 8011e4e:	f000 f90d 	bl	801206c <_Balloc>
 8011e52:	4681      	mov	r9, r0
 8011e54:	b918      	cbnz	r0, 8011e5e <__gethex+0x3ba>
 8011e56:	4b1a      	ldr	r3, [pc, #104]	@ (8011ec0 <__gethex+0x41c>)
 8011e58:	4602      	mov	r2, r0
 8011e5a:	2184      	movs	r1, #132	@ 0x84
 8011e5c:	e6c5      	b.n	8011bea <__gethex+0x146>
 8011e5e:	6922      	ldr	r2, [r4, #16]
 8011e60:	3202      	adds	r2, #2
 8011e62:	f104 010c 	add.w	r1, r4, #12
 8011e66:	0092      	lsls	r2, r2, #2
 8011e68:	300c      	adds	r0, #12
 8011e6a:	f7fe fee8 	bl	8010c3e <memcpy>
 8011e6e:	4621      	mov	r1, r4
 8011e70:	9801      	ldr	r0, [sp, #4]
 8011e72:	f000 f93b 	bl	80120ec <_Bfree>
 8011e76:	464c      	mov	r4, r9
 8011e78:	6923      	ldr	r3, [r4, #16]
 8011e7a:	1c5a      	adds	r2, r3, #1
 8011e7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011e80:	6122      	str	r2, [r4, #16]
 8011e82:	2201      	movs	r2, #1
 8011e84:	615a      	str	r2, [r3, #20]
 8011e86:	e7be      	b.n	8011e06 <__gethex+0x362>
 8011e88:	6922      	ldr	r2, [r4, #16]
 8011e8a:	455a      	cmp	r2, fp
 8011e8c:	dd0b      	ble.n	8011ea6 <__gethex+0x402>
 8011e8e:	2101      	movs	r1, #1
 8011e90:	4620      	mov	r0, r4
 8011e92:	f7ff fd9f 	bl	80119d4 <rshift>
 8011e96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011e9a:	3701      	adds	r7, #1
 8011e9c:	42bb      	cmp	r3, r7
 8011e9e:	f6ff aee0 	blt.w	8011c62 <__gethex+0x1be>
 8011ea2:	2501      	movs	r5, #1
 8011ea4:	e7c2      	b.n	8011e2c <__gethex+0x388>
 8011ea6:	f016 061f 	ands.w	r6, r6, #31
 8011eaa:	d0fa      	beq.n	8011ea2 <__gethex+0x3fe>
 8011eac:	4453      	add	r3, sl
 8011eae:	f1c6 0620 	rsb	r6, r6, #32
 8011eb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011eb6:	f000 f9cb 	bl	8012250 <__hi0bits>
 8011eba:	42b0      	cmp	r0, r6
 8011ebc:	dbe7      	blt.n	8011e8e <__gethex+0x3ea>
 8011ebe:	e7f0      	b.n	8011ea2 <__gethex+0x3fe>
 8011ec0:	08014272 	.word	0x08014272

08011ec4 <L_shift>:
 8011ec4:	f1c2 0208 	rsb	r2, r2, #8
 8011ec8:	0092      	lsls	r2, r2, #2
 8011eca:	b570      	push	{r4, r5, r6, lr}
 8011ecc:	f1c2 0620 	rsb	r6, r2, #32
 8011ed0:	6843      	ldr	r3, [r0, #4]
 8011ed2:	6804      	ldr	r4, [r0, #0]
 8011ed4:	fa03 f506 	lsl.w	r5, r3, r6
 8011ed8:	432c      	orrs	r4, r5
 8011eda:	40d3      	lsrs	r3, r2
 8011edc:	6004      	str	r4, [r0, #0]
 8011ede:	f840 3f04 	str.w	r3, [r0, #4]!
 8011ee2:	4288      	cmp	r0, r1
 8011ee4:	d3f4      	bcc.n	8011ed0 <L_shift+0xc>
 8011ee6:	bd70      	pop	{r4, r5, r6, pc}

08011ee8 <__match>:
 8011ee8:	b530      	push	{r4, r5, lr}
 8011eea:	6803      	ldr	r3, [r0, #0]
 8011eec:	3301      	adds	r3, #1
 8011eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ef2:	b914      	cbnz	r4, 8011efa <__match+0x12>
 8011ef4:	6003      	str	r3, [r0, #0]
 8011ef6:	2001      	movs	r0, #1
 8011ef8:	bd30      	pop	{r4, r5, pc}
 8011efa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011efe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011f02:	2d19      	cmp	r5, #25
 8011f04:	bf98      	it	ls
 8011f06:	3220      	addls	r2, #32
 8011f08:	42a2      	cmp	r2, r4
 8011f0a:	d0f0      	beq.n	8011eee <__match+0x6>
 8011f0c:	2000      	movs	r0, #0
 8011f0e:	e7f3      	b.n	8011ef8 <__match+0x10>

08011f10 <__hexnan>:
 8011f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f14:	680b      	ldr	r3, [r1, #0]
 8011f16:	6801      	ldr	r1, [r0, #0]
 8011f18:	115e      	asrs	r6, r3, #5
 8011f1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011f1e:	f013 031f 	ands.w	r3, r3, #31
 8011f22:	b087      	sub	sp, #28
 8011f24:	bf18      	it	ne
 8011f26:	3604      	addne	r6, #4
 8011f28:	2500      	movs	r5, #0
 8011f2a:	1f37      	subs	r7, r6, #4
 8011f2c:	4682      	mov	sl, r0
 8011f2e:	4690      	mov	r8, r2
 8011f30:	9301      	str	r3, [sp, #4]
 8011f32:	f846 5c04 	str.w	r5, [r6, #-4]
 8011f36:	46b9      	mov	r9, r7
 8011f38:	463c      	mov	r4, r7
 8011f3a:	9502      	str	r5, [sp, #8]
 8011f3c:	46ab      	mov	fp, r5
 8011f3e:	784a      	ldrb	r2, [r1, #1]
 8011f40:	1c4b      	adds	r3, r1, #1
 8011f42:	9303      	str	r3, [sp, #12]
 8011f44:	b342      	cbz	r2, 8011f98 <__hexnan+0x88>
 8011f46:	4610      	mov	r0, r2
 8011f48:	9105      	str	r1, [sp, #20]
 8011f4a:	9204      	str	r2, [sp, #16]
 8011f4c:	f7ff fd94 	bl	8011a78 <__hexdig_fun>
 8011f50:	2800      	cmp	r0, #0
 8011f52:	d151      	bne.n	8011ff8 <__hexnan+0xe8>
 8011f54:	9a04      	ldr	r2, [sp, #16]
 8011f56:	9905      	ldr	r1, [sp, #20]
 8011f58:	2a20      	cmp	r2, #32
 8011f5a:	d818      	bhi.n	8011f8e <__hexnan+0x7e>
 8011f5c:	9b02      	ldr	r3, [sp, #8]
 8011f5e:	459b      	cmp	fp, r3
 8011f60:	dd13      	ble.n	8011f8a <__hexnan+0x7a>
 8011f62:	454c      	cmp	r4, r9
 8011f64:	d206      	bcs.n	8011f74 <__hexnan+0x64>
 8011f66:	2d07      	cmp	r5, #7
 8011f68:	dc04      	bgt.n	8011f74 <__hexnan+0x64>
 8011f6a:	462a      	mov	r2, r5
 8011f6c:	4649      	mov	r1, r9
 8011f6e:	4620      	mov	r0, r4
 8011f70:	f7ff ffa8 	bl	8011ec4 <L_shift>
 8011f74:	4544      	cmp	r4, r8
 8011f76:	d952      	bls.n	801201e <__hexnan+0x10e>
 8011f78:	2300      	movs	r3, #0
 8011f7a:	f1a4 0904 	sub.w	r9, r4, #4
 8011f7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f82:	f8cd b008 	str.w	fp, [sp, #8]
 8011f86:	464c      	mov	r4, r9
 8011f88:	461d      	mov	r5, r3
 8011f8a:	9903      	ldr	r1, [sp, #12]
 8011f8c:	e7d7      	b.n	8011f3e <__hexnan+0x2e>
 8011f8e:	2a29      	cmp	r2, #41	@ 0x29
 8011f90:	d157      	bne.n	8012042 <__hexnan+0x132>
 8011f92:	3102      	adds	r1, #2
 8011f94:	f8ca 1000 	str.w	r1, [sl]
 8011f98:	f1bb 0f00 	cmp.w	fp, #0
 8011f9c:	d051      	beq.n	8012042 <__hexnan+0x132>
 8011f9e:	454c      	cmp	r4, r9
 8011fa0:	d206      	bcs.n	8011fb0 <__hexnan+0xa0>
 8011fa2:	2d07      	cmp	r5, #7
 8011fa4:	dc04      	bgt.n	8011fb0 <__hexnan+0xa0>
 8011fa6:	462a      	mov	r2, r5
 8011fa8:	4649      	mov	r1, r9
 8011faa:	4620      	mov	r0, r4
 8011fac:	f7ff ff8a 	bl	8011ec4 <L_shift>
 8011fb0:	4544      	cmp	r4, r8
 8011fb2:	d936      	bls.n	8012022 <__hexnan+0x112>
 8011fb4:	f1a8 0204 	sub.w	r2, r8, #4
 8011fb8:	4623      	mov	r3, r4
 8011fba:	f853 1b04 	ldr.w	r1, [r3], #4
 8011fbe:	f842 1f04 	str.w	r1, [r2, #4]!
 8011fc2:	429f      	cmp	r7, r3
 8011fc4:	d2f9      	bcs.n	8011fba <__hexnan+0xaa>
 8011fc6:	1b3b      	subs	r3, r7, r4
 8011fc8:	f023 0303 	bic.w	r3, r3, #3
 8011fcc:	3304      	adds	r3, #4
 8011fce:	3401      	adds	r4, #1
 8011fd0:	3e03      	subs	r6, #3
 8011fd2:	42b4      	cmp	r4, r6
 8011fd4:	bf88      	it	hi
 8011fd6:	2304      	movhi	r3, #4
 8011fd8:	4443      	add	r3, r8
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f843 2b04 	str.w	r2, [r3], #4
 8011fe0:	429f      	cmp	r7, r3
 8011fe2:	d2fb      	bcs.n	8011fdc <__hexnan+0xcc>
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	b91b      	cbnz	r3, 8011ff0 <__hexnan+0xe0>
 8011fe8:	4547      	cmp	r7, r8
 8011fea:	d128      	bne.n	801203e <__hexnan+0x12e>
 8011fec:	2301      	movs	r3, #1
 8011fee:	603b      	str	r3, [r7, #0]
 8011ff0:	2005      	movs	r0, #5
 8011ff2:	b007      	add	sp, #28
 8011ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ff8:	3501      	adds	r5, #1
 8011ffa:	2d08      	cmp	r5, #8
 8011ffc:	f10b 0b01 	add.w	fp, fp, #1
 8012000:	dd06      	ble.n	8012010 <__hexnan+0x100>
 8012002:	4544      	cmp	r4, r8
 8012004:	d9c1      	bls.n	8011f8a <__hexnan+0x7a>
 8012006:	2300      	movs	r3, #0
 8012008:	f844 3c04 	str.w	r3, [r4, #-4]
 801200c:	2501      	movs	r5, #1
 801200e:	3c04      	subs	r4, #4
 8012010:	6822      	ldr	r2, [r4, #0]
 8012012:	f000 000f 	and.w	r0, r0, #15
 8012016:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801201a:	6020      	str	r0, [r4, #0]
 801201c:	e7b5      	b.n	8011f8a <__hexnan+0x7a>
 801201e:	2508      	movs	r5, #8
 8012020:	e7b3      	b.n	8011f8a <__hexnan+0x7a>
 8012022:	9b01      	ldr	r3, [sp, #4]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d0dd      	beq.n	8011fe4 <__hexnan+0xd4>
 8012028:	f1c3 0320 	rsb	r3, r3, #32
 801202c:	f04f 32ff 	mov.w	r2, #4294967295
 8012030:	40da      	lsrs	r2, r3
 8012032:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012036:	4013      	ands	r3, r2
 8012038:	f846 3c04 	str.w	r3, [r6, #-4]
 801203c:	e7d2      	b.n	8011fe4 <__hexnan+0xd4>
 801203e:	3f04      	subs	r7, #4
 8012040:	e7d0      	b.n	8011fe4 <__hexnan+0xd4>
 8012042:	2004      	movs	r0, #4
 8012044:	e7d5      	b.n	8011ff2 <__hexnan+0xe2>

08012046 <__ascii_mbtowc>:
 8012046:	b082      	sub	sp, #8
 8012048:	b901      	cbnz	r1, 801204c <__ascii_mbtowc+0x6>
 801204a:	a901      	add	r1, sp, #4
 801204c:	b142      	cbz	r2, 8012060 <__ascii_mbtowc+0x1a>
 801204e:	b14b      	cbz	r3, 8012064 <__ascii_mbtowc+0x1e>
 8012050:	7813      	ldrb	r3, [r2, #0]
 8012052:	600b      	str	r3, [r1, #0]
 8012054:	7812      	ldrb	r2, [r2, #0]
 8012056:	1e10      	subs	r0, r2, #0
 8012058:	bf18      	it	ne
 801205a:	2001      	movne	r0, #1
 801205c:	b002      	add	sp, #8
 801205e:	4770      	bx	lr
 8012060:	4610      	mov	r0, r2
 8012062:	e7fb      	b.n	801205c <__ascii_mbtowc+0x16>
 8012064:	f06f 0001 	mvn.w	r0, #1
 8012068:	e7f8      	b.n	801205c <__ascii_mbtowc+0x16>
	...

0801206c <_Balloc>:
 801206c:	b570      	push	{r4, r5, r6, lr}
 801206e:	69c6      	ldr	r6, [r0, #28]
 8012070:	4604      	mov	r4, r0
 8012072:	460d      	mov	r5, r1
 8012074:	b976      	cbnz	r6, 8012094 <_Balloc+0x28>
 8012076:	2010      	movs	r0, #16
 8012078:	f7fc fc48 	bl	800e90c <malloc>
 801207c:	4602      	mov	r2, r0
 801207e:	61e0      	str	r0, [r4, #28]
 8012080:	b920      	cbnz	r0, 801208c <_Balloc+0x20>
 8012082:	4b18      	ldr	r3, [pc, #96]	@ (80120e4 <_Balloc+0x78>)
 8012084:	4818      	ldr	r0, [pc, #96]	@ (80120e8 <_Balloc+0x7c>)
 8012086:	216b      	movs	r1, #107	@ 0x6b
 8012088:	f7fc fc1a 	bl	800e8c0 <__assert_func>
 801208c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012090:	6006      	str	r6, [r0, #0]
 8012092:	60c6      	str	r6, [r0, #12]
 8012094:	69e6      	ldr	r6, [r4, #28]
 8012096:	68f3      	ldr	r3, [r6, #12]
 8012098:	b183      	cbz	r3, 80120bc <_Balloc+0x50>
 801209a:	69e3      	ldr	r3, [r4, #28]
 801209c:	68db      	ldr	r3, [r3, #12]
 801209e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80120a2:	b9b8      	cbnz	r0, 80120d4 <_Balloc+0x68>
 80120a4:	2101      	movs	r1, #1
 80120a6:	fa01 f605 	lsl.w	r6, r1, r5
 80120aa:	1d72      	adds	r2, r6, #5
 80120ac:	0092      	lsls	r2, r2, #2
 80120ae:	4620      	mov	r0, r4
 80120b0:	f001 fc4c 	bl	801394c <_calloc_r>
 80120b4:	b160      	cbz	r0, 80120d0 <_Balloc+0x64>
 80120b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80120ba:	e00e      	b.n	80120da <_Balloc+0x6e>
 80120bc:	2221      	movs	r2, #33	@ 0x21
 80120be:	2104      	movs	r1, #4
 80120c0:	4620      	mov	r0, r4
 80120c2:	f001 fc43 	bl	801394c <_calloc_r>
 80120c6:	69e3      	ldr	r3, [r4, #28]
 80120c8:	60f0      	str	r0, [r6, #12]
 80120ca:	68db      	ldr	r3, [r3, #12]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d1e4      	bne.n	801209a <_Balloc+0x2e>
 80120d0:	2000      	movs	r0, #0
 80120d2:	bd70      	pop	{r4, r5, r6, pc}
 80120d4:	6802      	ldr	r2, [r0, #0]
 80120d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80120da:	2300      	movs	r3, #0
 80120dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80120e0:	e7f7      	b.n	80120d2 <_Balloc+0x66>
 80120e2:	bf00      	nop
 80120e4:	08014194 	.word	0x08014194
 80120e8:	080142e3 	.word	0x080142e3

080120ec <_Bfree>:
 80120ec:	b570      	push	{r4, r5, r6, lr}
 80120ee:	69c6      	ldr	r6, [r0, #28]
 80120f0:	4605      	mov	r5, r0
 80120f2:	460c      	mov	r4, r1
 80120f4:	b976      	cbnz	r6, 8012114 <_Bfree+0x28>
 80120f6:	2010      	movs	r0, #16
 80120f8:	f7fc fc08 	bl	800e90c <malloc>
 80120fc:	4602      	mov	r2, r0
 80120fe:	61e8      	str	r0, [r5, #28]
 8012100:	b920      	cbnz	r0, 801210c <_Bfree+0x20>
 8012102:	4b09      	ldr	r3, [pc, #36]	@ (8012128 <_Bfree+0x3c>)
 8012104:	4809      	ldr	r0, [pc, #36]	@ (801212c <_Bfree+0x40>)
 8012106:	218f      	movs	r1, #143	@ 0x8f
 8012108:	f7fc fbda 	bl	800e8c0 <__assert_func>
 801210c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012110:	6006      	str	r6, [r0, #0]
 8012112:	60c6      	str	r6, [r0, #12]
 8012114:	b13c      	cbz	r4, 8012126 <_Bfree+0x3a>
 8012116:	69eb      	ldr	r3, [r5, #28]
 8012118:	6862      	ldr	r2, [r4, #4]
 801211a:	68db      	ldr	r3, [r3, #12]
 801211c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012120:	6021      	str	r1, [r4, #0]
 8012122:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012126:	bd70      	pop	{r4, r5, r6, pc}
 8012128:	08014194 	.word	0x08014194
 801212c:	080142e3 	.word	0x080142e3

08012130 <__multadd>:
 8012130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012134:	690d      	ldr	r5, [r1, #16]
 8012136:	4607      	mov	r7, r0
 8012138:	460c      	mov	r4, r1
 801213a:	461e      	mov	r6, r3
 801213c:	f101 0c14 	add.w	ip, r1, #20
 8012140:	2000      	movs	r0, #0
 8012142:	f8dc 3000 	ldr.w	r3, [ip]
 8012146:	b299      	uxth	r1, r3
 8012148:	fb02 6101 	mla	r1, r2, r1, r6
 801214c:	0c1e      	lsrs	r6, r3, #16
 801214e:	0c0b      	lsrs	r3, r1, #16
 8012150:	fb02 3306 	mla	r3, r2, r6, r3
 8012154:	b289      	uxth	r1, r1
 8012156:	3001      	adds	r0, #1
 8012158:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801215c:	4285      	cmp	r5, r0
 801215e:	f84c 1b04 	str.w	r1, [ip], #4
 8012162:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012166:	dcec      	bgt.n	8012142 <__multadd+0x12>
 8012168:	b30e      	cbz	r6, 80121ae <__multadd+0x7e>
 801216a:	68a3      	ldr	r3, [r4, #8]
 801216c:	42ab      	cmp	r3, r5
 801216e:	dc19      	bgt.n	80121a4 <__multadd+0x74>
 8012170:	6861      	ldr	r1, [r4, #4]
 8012172:	4638      	mov	r0, r7
 8012174:	3101      	adds	r1, #1
 8012176:	f7ff ff79 	bl	801206c <_Balloc>
 801217a:	4680      	mov	r8, r0
 801217c:	b928      	cbnz	r0, 801218a <__multadd+0x5a>
 801217e:	4602      	mov	r2, r0
 8012180:	4b0c      	ldr	r3, [pc, #48]	@ (80121b4 <__multadd+0x84>)
 8012182:	480d      	ldr	r0, [pc, #52]	@ (80121b8 <__multadd+0x88>)
 8012184:	21ba      	movs	r1, #186	@ 0xba
 8012186:	f7fc fb9b 	bl	800e8c0 <__assert_func>
 801218a:	6922      	ldr	r2, [r4, #16]
 801218c:	3202      	adds	r2, #2
 801218e:	f104 010c 	add.w	r1, r4, #12
 8012192:	0092      	lsls	r2, r2, #2
 8012194:	300c      	adds	r0, #12
 8012196:	f7fe fd52 	bl	8010c3e <memcpy>
 801219a:	4621      	mov	r1, r4
 801219c:	4638      	mov	r0, r7
 801219e:	f7ff ffa5 	bl	80120ec <_Bfree>
 80121a2:	4644      	mov	r4, r8
 80121a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80121a8:	3501      	adds	r5, #1
 80121aa:	615e      	str	r6, [r3, #20]
 80121ac:	6125      	str	r5, [r4, #16]
 80121ae:	4620      	mov	r0, r4
 80121b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121b4:	08014272 	.word	0x08014272
 80121b8:	080142e3 	.word	0x080142e3

080121bc <__s2b>:
 80121bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121c0:	460c      	mov	r4, r1
 80121c2:	4615      	mov	r5, r2
 80121c4:	461f      	mov	r7, r3
 80121c6:	2209      	movs	r2, #9
 80121c8:	3308      	adds	r3, #8
 80121ca:	4606      	mov	r6, r0
 80121cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80121d0:	2100      	movs	r1, #0
 80121d2:	2201      	movs	r2, #1
 80121d4:	429a      	cmp	r2, r3
 80121d6:	db09      	blt.n	80121ec <__s2b+0x30>
 80121d8:	4630      	mov	r0, r6
 80121da:	f7ff ff47 	bl	801206c <_Balloc>
 80121de:	b940      	cbnz	r0, 80121f2 <__s2b+0x36>
 80121e0:	4602      	mov	r2, r0
 80121e2:	4b19      	ldr	r3, [pc, #100]	@ (8012248 <__s2b+0x8c>)
 80121e4:	4819      	ldr	r0, [pc, #100]	@ (801224c <__s2b+0x90>)
 80121e6:	21d3      	movs	r1, #211	@ 0xd3
 80121e8:	f7fc fb6a 	bl	800e8c0 <__assert_func>
 80121ec:	0052      	lsls	r2, r2, #1
 80121ee:	3101      	adds	r1, #1
 80121f0:	e7f0      	b.n	80121d4 <__s2b+0x18>
 80121f2:	9b08      	ldr	r3, [sp, #32]
 80121f4:	6143      	str	r3, [r0, #20]
 80121f6:	2d09      	cmp	r5, #9
 80121f8:	f04f 0301 	mov.w	r3, #1
 80121fc:	6103      	str	r3, [r0, #16]
 80121fe:	dd16      	ble.n	801222e <__s2b+0x72>
 8012200:	f104 0909 	add.w	r9, r4, #9
 8012204:	46c8      	mov	r8, r9
 8012206:	442c      	add	r4, r5
 8012208:	f818 3b01 	ldrb.w	r3, [r8], #1
 801220c:	4601      	mov	r1, r0
 801220e:	3b30      	subs	r3, #48	@ 0x30
 8012210:	220a      	movs	r2, #10
 8012212:	4630      	mov	r0, r6
 8012214:	f7ff ff8c 	bl	8012130 <__multadd>
 8012218:	45a0      	cmp	r8, r4
 801221a:	d1f5      	bne.n	8012208 <__s2b+0x4c>
 801221c:	f1a5 0408 	sub.w	r4, r5, #8
 8012220:	444c      	add	r4, r9
 8012222:	1b2d      	subs	r5, r5, r4
 8012224:	1963      	adds	r3, r4, r5
 8012226:	42bb      	cmp	r3, r7
 8012228:	db04      	blt.n	8012234 <__s2b+0x78>
 801222a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801222e:	340a      	adds	r4, #10
 8012230:	2509      	movs	r5, #9
 8012232:	e7f6      	b.n	8012222 <__s2b+0x66>
 8012234:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012238:	4601      	mov	r1, r0
 801223a:	3b30      	subs	r3, #48	@ 0x30
 801223c:	220a      	movs	r2, #10
 801223e:	4630      	mov	r0, r6
 8012240:	f7ff ff76 	bl	8012130 <__multadd>
 8012244:	e7ee      	b.n	8012224 <__s2b+0x68>
 8012246:	bf00      	nop
 8012248:	08014272 	.word	0x08014272
 801224c:	080142e3 	.word	0x080142e3

08012250 <__hi0bits>:
 8012250:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012254:	4603      	mov	r3, r0
 8012256:	bf36      	itet	cc
 8012258:	0403      	lslcc	r3, r0, #16
 801225a:	2000      	movcs	r0, #0
 801225c:	2010      	movcc	r0, #16
 801225e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012262:	bf3c      	itt	cc
 8012264:	021b      	lslcc	r3, r3, #8
 8012266:	3008      	addcc	r0, #8
 8012268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801226c:	bf3c      	itt	cc
 801226e:	011b      	lslcc	r3, r3, #4
 8012270:	3004      	addcc	r0, #4
 8012272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012276:	bf3c      	itt	cc
 8012278:	009b      	lslcc	r3, r3, #2
 801227a:	3002      	addcc	r0, #2
 801227c:	2b00      	cmp	r3, #0
 801227e:	db05      	blt.n	801228c <__hi0bits+0x3c>
 8012280:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012284:	f100 0001 	add.w	r0, r0, #1
 8012288:	bf08      	it	eq
 801228a:	2020      	moveq	r0, #32
 801228c:	4770      	bx	lr

0801228e <__lo0bits>:
 801228e:	6803      	ldr	r3, [r0, #0]
 8012290:	4602      	mov	r2, r0
 8012292:	f013 0007 	ands.w	r0, r3, #7
 8012296:	d00b      	beq.n	80122b0 <__lo0bits+0x22>
 8012298:	07d9      	lsls	r1, r3, #31
 801229a:	d421      	bmi.n	80122e0 <__lo0bits+0x52>
 801229c:	0798      	lsls	r0, r3, #30
 801229e:	bf49      	itett	mi
 80122a0:	085b      	lsrmi	r3, r3, #1
 80122a2:	089b      	lsrpl	r3, r3, #2
 80122a4:	2001      	movmi	r0, #1
 80122a6:	6013      	strmi	r3, [r2, #0]
 80122a8:	bf5c      	itt	pl
 80122aa:	6013      	strpl	r3, [r2, #0]
 80122ac:	2002      	movpl	r0, #2
 80122ae:	4770      	bx	lr
 80122b0:	b299      	uxth	r1, r3
 80122b2:	b909      	cbnz	r1, 80122b8 <__lo0bits+0x2a>
 80122b4:	0c1b      	lsrs	r3, r3, #16
 80122b6:	2010      	movs	r0, #16
 80122b8:	b2d9      	uxtb	r1, r3
 80122ba:	b909      	cbnz	r1, 80122c0 <__lo0bits+0x32>
 80122bc:	3008      	adds	r0, #8
 80122be:	0a1b      	lsrs	r3, r3, #8
 80122c0:	0719      	lsls	r1, r3, #28
 80122c2:	bf04      	itt	eq
 80122c4:	091b      	lsreq	r3, r3, #4
 80122c6:	3004      	addeq	r0, #4
 80122c8:	0799      	lsls	r1, r3, #30
 80122ca:	bf04      	itt	eq
 80122cc:	089b      	lsreq	r3, r3, #2
 80122ce:	3002      	addeq	r0, #2
 80122d0:	07d9      	lsls	r1, r3, #31
 80122d2:	d403      	bmi.n	80122dc <__lo0bits+0x4e>
 80122d4:	085b      	lsrs	r3, r3, #1
 80122d6:	f100 0001 	add.w	r0, r0, #1
 80122da:	d003      	beq.n	80122e4 <__lo0bits+0x56>
 80122dc:	6013      	str	r3, [r2, #0]
 80122de:	4770      	bx	lr
 80122e0:	2000      	movs	r0, #0
 80122e2:	4770      	bx	lr
 80122e4:	2020      	movs	r0, #32
 80122e6:	4770      	bx	lr

080122e8 <__i2b>:
 80122e8:	b510      	push	{r4, lr}
 80122ea:	460c      	mov	r4, r1
 80122ec:	2101      	movs	r1, #1
 80122ee:	f7ff febd 	bl	801206c <_Balloc>
 80122f2:	4602      	mov	r2, r0
 80122f4:	b928      	cbnz	r0, 8012302 <__i2b+0x1a>
 80122f6:	4b05      	ldr	r3, [pc, #20]	@ (801230c <__i2b+0x24>)
 80122f8:	4805      	ldr	r0, [pc, #20]	@ (8012310 <__i2b+0x28>)
 80122fa:	f240 1145 	movw	r1, #325	@ 0x145
 80122fe:	f7fc fadf 	bl	800e8c0 <__assert_func>
 8012302:	2301      	movs	r3, #1
 8012304:	6144      	str	r4, [r0, #20]
 8012306:	6103      	str	r3, [r0, #16]
 8012308:	bd10      	pop	{r4, pc}
 801230a:	bf00      	nop
 801230c:	08014272 	.word	0x08014272
 8012310:	080142e3 	.word	0x080142e3

08012314 <__multiply>:
 8012314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012318:	4617      	mov	r7, r2
 801231a:	690a      	ldr	r2, [r1, #16]
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	429a      	cmp	r2, r3
 8012320:	bfa8      	it	ge
 8012322:	463b      	movge	r3, r7
 8012324:	4689      	mov	r9, r1
 8012326:	bfa4      	itt	ge
 8012328:	460f      	movge	r7, r1
 801232a:	4699      	movge	r9, r3
 801232c:	693d      	ldr	r5, [r7, #16]
 801232e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	6879      	ldr	r1, [r7, #4]
 8012336:	eb05 060a 	add.w	r6, r5, sl
 801233a:	42b3      	cmp	r3, r6
 801233c:	b085      	sub	sp, #20
 801233e:	bfb8      	it	lt
 8012340:	3101      	addlt	r1, #1
 8012342:	f7ff fe93 	bl	801206c <_Balloc>
 8012346:	b930      	cbnz	r0, 8012356 <__multiply+0x42>
 8012348:	4602      	mov	r2, r0
 801234a:	4b41      	ldr	r3, [pc, #260]	@ (8012450 <__multiply+0x13c>)
 801234c:	4841      	ldr	r0, [pc, #260]	@ (8012454 <__multiply+0x140>)
 801234e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012352:	f7fc fab5 	bl	800e8c0 <__assert_func>
 8012356:	f100 0414 	add.w	r4, r0, #20
 801235a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801235e:	4623      	mov	r3, r4
 8012360:	2200      	movs	r2, #0
 8012362:	4573      	cmp	r3, lr
 8012364:	d320      	bcc.n	80123a8 <__multiply+0x94>
 8012366:	f107 0814 	add.w	r8, r7, #20
 801236a:	f109 0114 	add.w	r1, r9, #20
 801236e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8012372:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8012376:	9302      	str	r3, [sp, #8]
 8012378:	1beb      	subs	r3, r5, r7
 801237a:	3b15      	subs	r3, #21
 801237c:	f023 0303 	bic.w	r3, r3, #3
 8012380:	3304      	adds	r3, #4
 8012382:	3715      	adds	r7, #21
 8012384:	42bd      	cmp	r5, r7
 8012386:	bf38      	it	cc
 8012388:	2304      	movcc	r3, #4
 801238a:	9301      	str	r3, [sp, #4]
 801238c:	9b02      	ldr	r3, [sp, #8]
 801238e:	9103      	str	r1, [sp, #12]
 8012390:	428b      	cmp	r3, r1
 8012392:	d80c      	bhi.n	80123ae <__multiply+0x9a>
 8012394:	2e00      	cmp	r6, #0
 8012396:	dd03      	ble.n	80123a0 <__multiply+0x8c>
 8012398:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801239c:	2b00      	cmp	r3, #0
 801239e:	d055      	beq.n	801244c <__multiply+0x138>
 80123a0:	6106      	str	r6, [r0, #16]
 80123a2:	b005      	add	sp, #20
 80123a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a8:	f843 2b04 	str.w	r2, [r3], #4
 80123ac:	e7d9      	b.n	8012362 <__multiply+0x4e>
 80123ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80123b2:	f1ba 0f00 	cmp.w	sl, #0
 80123b6:	d01f      	beq.n	80123f8 <__multiply+0xe4>
 80123b8:	46c4      	mov	ip, r8
 80123ba:	46a1      	mov	r9, r4
 80123bc:	2700      	movs	r7, #0
 80123be:	f85c 2b04 	ldr.w	r2, [ip], #4
 80123c2:	f8d9 3000 	ldr.w	r3, [r9]
 80123c6:	fa1f fb82 	uxth.w	fp, r2
 80123ca:	b29b      	uxth	r3, r3
 80123cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80123d0:	443b      	add	r3, r7
 80123d2:	f8d9 7000 	ldr.w	r7, [r9]
 80123d6:	0c12      	lsrs	r2, r2, #16
 80123d8:	0c3f      	lsrs	r7, r7, #16
 80123da:	fb0a 7202 	mla	r2, sl, r2, r7
 80123de:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80123e2:	b29b      	uxth	r3, r3
 80123e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123e8:	4565      	cmp	r5, ip
 80123ea:	f849 3b04 	str.w	r3, [r9], #4
 80123ee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80123f2:	d8e4      	bhi.n	80123be <__multiply+0xaa>
 80123f4:	9b01      	ldr	r3, [sp, #4]
 80123f6:	50e7      	str	r7, [r4, r3]
 80123f8:	9b03      	ldr	r3, [sp, #12]
 80123fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80123fe:	3104      	adds	r1, #4
 8012400:	f1b9 0f00 	cmp.w	r9, #0
 8012404:	d020      	beq.n	8012448 <__multiply+0x134>
 8012406:	6823      	ldr	r3, [r4, #0]
 8012408:	4647      	mov	r7, r8
 801240a:	46a4      	mov	ip, r4
 801240c:	f04f 0a00 	mov.w	sl, #0
 8012410:	f8b7 b000 	ldrh.w	fp, [r7]
 8012414:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012418:	fb09 220b 	mla	r2, r9, fp, r2
 801241c:	4452      	add	r2, sl
 801241e:	b29b      	uxth	r3, r3
 8012420:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012424:	f84c 3b04 	str.w	r3, [ip], #4
 8012428:	f857 3b04 	ldr.w	r3, [r7], #4
 801242c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012430:	f8bc 3000 	ldrh.w	r3, [ip]
 8012434:	fb09 330a 	mla	r3, r9, sl, r3
 8012438:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801243c:	42bd      	cmp	r5, r7
 801243e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012442:	d8e5      	bhi.n	8012410 <__multiply+0xfc>
 8012444:	9a01      	ldr	r2, [sp, #4]
 8012446:	50a3      	str	r3, [r4, r2]
 8012448:	3404      	adds	r4, #4
 801244a:	e79f      	b.n	801238c <__multiply+0x78>
 801244c:	3e01      	subs	r6, #1
 801244e:	e7a1      	b.n	8012394 <__multiply+0x80>
 8012450:	08014272 	.word	0x08014272
 8012454:	080142e3 	.word	0x080142e3

08012458 <__pow5mult>:
 8012458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801245c:	4615      	mov	r5, r2
 801245e:	f012 0203 	ands.w	r2, r2, #3
 8012462:	4607      	mov	r7, r0
 8012464:	460e      	mov	r6, r1
 8012466:	d007      	beq.n	8012478 <__pow5mult+0x20>
 8012468:	4c25      	ldr	r4, [pc, #148]	@ (8012500 <__pow5mult+0xa8>)
 801246a:	3a01      	subs	r2, #1
 801246c:	2300      	movs	r3, #0
 801246e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012472:	f7ff fe5d 	bl	8012130 <__multadd>
 8012476:	4606      	mov	r6, r0
 8012478:	10ad      	asrs	r5, r5, #2
 801247a:	d03d      	beq.n	80124f8 <__pow5mult+0xa0>
 801247c:	69fc      	ldr	r4, [r7, #28]
 801247e:	b97c      	cbnz	r4, 80124a0 <__pow5mult+0x48>
 8012480:	2010      	movs	r0, #16
 8012482:	f7fc fa43 	bl	800e90c <malloc>
 8012486:	4602      	mov	r2, r0
 8012488:	61f8      	str	r0, [r7, #28]
 801248a:	b928      	cbnz	r0, 8012498 <__pow5mult+0x40>
 801248c:	4b1d      	ldr	r3, [pc, #116]	@ (8012504 <__pow5mult+0xac>)
 801248e:	481e      	ldr	r0, [pc, #120]	@ (8012508 <__pow5mult+0xb0>)
 8012490:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012494:	f7fc fa14 	bl	800e8c0 <__assert_func>
 8012498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801249c:	6004      	str	r4, [r0, #0]
 801249e:	60c4      	str	r4, [r0, #12]
 80124a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80124a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124a8:	b94c      	cbnz	r4, 80124be <__pow5mult+0x66>
 80124aa:	f240 2171 	movw	r1, #625	@ 0x271
 80124ae:	4638      	mov	r0, r7
 80124b0:	f7ff ff1a 	bl	80122e8 <__i2b>
 80124b4:	2300      	movs	r3, #0
 80124b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80124ba:	4604      	mov	r4, r0
 80124bc:	6003      	str	r3, [r0, #0]
 80124be:	f04f 0900 	mov.w	r9, #0
 80124c2:	07eb      	lsls	r3, r5, #31
 80124c4:	d50a      	bpl.n	80124dc <__pow5mult+0x84>
 80124c6:	4631      	mov	r1, r6
 80124c8:	4622      	mov	r2, r4
 80124ca:	4638      	mov	r0, r7
 80124cc:	f7ff ff22 	bl	8012314 <__multiply>
 80124d0:	4631      	mov	r1, r6
 80124d2:	4680      	mov	r8, r0
 80124d4:	4638      	mov	r0, r7
 80124d6:	f7ff fe09 	bl	80120ec <_Bfree>
 80124da:	4646      	mov	r6, r8
 80124dc:	106d      	asrs	r5, r5, #1
 80124de:	d00b      	beq.n	80124f8 <__pow5mult+0xa0>
 80124e0:	6820      	ldr	r0, [r4, #0]
 80124e2:	b938      	cbnz	r0, 80124f4 <__pow5mult+0x9c>
 80124e4:	4622      	mov	r2, r4
 80124e6:	4621      	mov	r1, r4
 80124e8:	4638      	mov	r0, r7
 80124ea:	f7ff ff13 	bl	8012314 <__multiply>
 80124ee:	6020      	str	r0, [r4, #0]
 80124f0:	f8c0 9000 	str.w	r9, [r0]
 80124f4:	4604      	mov	r4, r0
 80124f6:	e7e4      	b.n	80124c2 <__pow5mult+0x6a>
 80124f8:	4630      	mov	r0, r6
 80124fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124fe:	bf00      	nop
 8012500:	080144bc 	.word	0x080144bc
 8012504:	08014194 	.word	0x08014194
 8012508:	080142e3 	.word	0x080142e3

0801250c <__lshift>:
 801250c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012510:	460c      	mov	r4, r1
 8012512:	6849      	ldr	r1, [r1, #4]
 8012514:	6923      	ldr	r3, [r4, #16]
 8012516:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801251a:	68a3      	ldr	r3, [r4, #8]
 801251c:	4607      	mov	r7, r0
 801251e:	4691      	mov	r9, r2
 8012520:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012524:	f108 0601 	add.w	r6, r8, #1
 8012528:	42b3      	cmp	r3, r6
 801252a:	db0b      	blt.n	8012544 <__lshift+0x38>
 801252c:	4638      	mov	r0, r7
 801252e:	f7ff fd9d 	bl	801206c <_Balloc>
 8012532:	4605      	mov	r5, r0
 8012534:	b948      	cbnz	r0, 801254a <__lshift+0x3e>
 8012536:	4602      	mov	r2, r0
 8012538:	4b28      	ldr	r3, [pc, #160]	@ (80125dc <__lshift+0xd0>)
 801253a:	4829      	ldr	r0, [pc, #164]	@ (80125e0 <__lshift+0xd4>)
 801253c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012540:	f7fc f9be 	bl	800e8c0 <__assert_func>
 8012544:	3101      	adds	r1, #1
 8012546:	005b      	lsls	r3, r3, #1
 8012548:	e7ee      	b.n	8012528 <__lshift+0x1c>
 801254a:	2300      	movs	r3, #0
 801254c:	f100 0114 	add.w	r1, r0, #20
 8012550:	f100 0210 	add.w	r2, r0, #16
 8012554:	4618      	mov	r0, r3
 8012556:	4553      	cmp	r3, sl
 8012558:	db33      	blt.n	80125c2 <__lshift+0xb6>
 801255a:	6920      	ldr	r0, [r4, #16]
 801255c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012560:	f104 0314 	add.w	r3, r4, #20
 8012564:	f019 091f 	ands.w	r9, r9, #31
 8012568:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801256c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012570:	d02b      	beq.n	80125ca <__lshift+0xbe>
 8012572:	f1c9 0e20 	rsb	lr, r9, #32
 8012576:	468a      	mov	sl, r1
 8012578:	2200      	movs	r2, #0
 801257a:	6818      	ldr	r0, [r3, #0]
 801257c:	fa00 f009 	lsl.w	r0, r0, r9
 8012580:	4310      	orrs	r0, r2
 8012582:	f84a 0b04 	str.w	r0, [sl], #4
 8012586:	f853 2b04 	ldr.w	r2, [r3], #4
 801258a:	459c      	cmp	ip, r3
 801258c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012590:	d8f3      	bhi.n	801257a <__lshift+0x6e>
 8012592:	ebac 0304 	sub.w	r3, ip, r4
 8012596:	3b15      	subs	r3, #21
 8012598:	f023 0303 	bic.w	r3, r3, #3
 801259c:	3304      	adds	r3, #4
 801259e:	f104 0015 	add.w	r0, r4, #21
 80125a2:	4560      	cmp	r0, ip
 80125a4:	bf88      	it	hi
 80125a6:	2304      	movhi	r3, #4
 80125a8:	50ca      	str	r2, [r1, r3]
 80125aa:	b10a      	cbz	r2, 80125b0 <__lshift+0xa4>
 80125ac:	f108 0602 	add.w	r6, r8, #2
 80125b0:	3e01      	subs	r6, #1
 80125b2:	4638      	mov	r0, r7
 80125b4:	612e      	str	r6, [r5, #16]
 80125b6:	4621      	mov	r1, r4
 80125b8:	f7ff fd98 	bl	80120ec <_Bfree>
 80125bc:	4628      	mov	r0, r5
 80125be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80125c6:	3301      	adds	r3, #1
 80125c8:	e7c5      	b.n	8012556 <__lshift+0x4a>
 80125ca:	3904      	subs	r1, #4
 80125cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80125d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80125d4:	459c      	cmp	ip, r3
 80125d6:	d8f9      	bhi.n	80125cc <__lshift+0xc0>
 80125d8:	e7ea      	b.n	80125b0 <__lshift+0xa4>
 80125da:	bf00      	nop
 80125dc:	08014272 	.word	0x08014272
 80125e0:	080142e3 	.word	0x080142e3

080125e4 <__mcmp>:
 80125e4:	690a      	ldr	r2, [r1, #16]
 80125e6:	4603      	mov	r3, r0
 80125e8:	6900      	ldr	r0, [r0, #16]
 80125ea:	1a80      	subs	r0, r0, r2
 80125ec:	b530      	push	{r4, r5, lr}
 80125ee:	d10e      	bne.n	801260e <__mcmp+0x2a>
 80125f0:	3314      	adds	r3, #20
 80125f2:	3114      	adds	r1, #20
 80125f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80125f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80125fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012600:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012604:	4295      	cmp	r5, r2
 8012606:	d003      	beq.n	8012610 <__mcmp+0x2c>
 8012608:	d205      	bcs.n	8012616 <__mcmp+0x32>
 801260a:	f04f 30ff 	mov.w	r0, #4294967295
 801260e:	bd30      	pop	{r4, r5, pc}
 8012610:	42a3      	cmp	r3, r4
 8012612:	d3f3      	bcc.n	80125fc <__mcmp+0x18>
 8012614:	e7fb      	b.n	801260e <__mcmp+0x2a>
 8012616:	2001      	movs	r0, #1
 8012618:	e7f9      	b.n	801260e <__mcmp+0x2a>
	...

0801261c <__mdiff>:
 801261c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012620:	4689      	mov	r9, r1
 8012622:	4606      	mov	r6, r0
 8012624:	4611      	mov	r1, r2
 8012626:	4648      	mov	r0, r9
 8012628:	4614      	mov	r4, r2
 801262a:	f7ff ffdb 	bl	80125e4 <__mcmp>
 801262e:	1e05      	subs	r5, r0, #0
 8012630:	d112      	bne.n	8012658 <__mdiff+0x3c>
 8012632:	4629      	mov	r1, r5
 8012634:	4630      	mov	r0, r6
 8012636:	f7ff fd19 	bl	801206c <_Balloc>
 801263a:	4602      	mov	r2, r0
 801263c:	b928      	cbnz	r0, 801264a <__mdiff+0x2e>
 801263e:	4b3f      	ldr	r3, [pc, #252]	@ (801273c <__mdiff+0x120>)
 8012640:	f240 2137 	movw	r1, #567	@ 0x237
 8012644:	483e      	ldr	r0, [pc, #248]	@ (8012740 <__mdiff+0x124>)
 8012646:	f7fc f93b 	bl	800e8c0 <__assert_func>
 801264a:	2301      	movs	r3, #1
 801264c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012650:	4610      	mov	r0, r2
 8012652:	b003      	add	sp, #12
 8012654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012658:	bfbc      	itt	lt
 801265a:	464b      	movlt	r3, r9
 801265c:	46a1      	movlt	r9, r4
 801265e:	4630      	mov	r0, r6
 8012660:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012664:	bfba      	itte	lt
 8012666:	461c      	movlt	r4, r3
 8012668:	2501      	movlt	r5, #1
 801266a:	2500      	movge	r5, #0
 801266c:	f7ff fcfe 	bl	801206c <_Balloc>
 8012670:	4602      	mov	r2, r0
 8012672:	b918      	cbnz	r0, 801267c <__mdiff+0x60>
 8012674:	4b31      	ldr	r3, [pc, #196]	@ (801273c <__mdiff+0x120>)
 8012676:	f240 2145 	movw	r1, #581	@ 0x245
 801267a:	e7e3      	b.n	8012644 <__mdiff+0x28>
 801267c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012680:	6926      	ldr	r6, [r4, #16]
 8012682:	60c5      	str	r5, [r0, #12]
 8012684:	f109 0310 	add.w	r3, r9, #16
 8012688:	f109 0514 	add.w	r5, r9, #20
 801268c:	f104 0e14 	add.w	lr, r4, #20
 8012690:	f100 0b14 	add.w	fp, r0, #20
 8012694:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012698:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801269c:	9301      	str	r3, [sp, #4]
 801269e:	46d9      	mov	r9, fp
 80126a0:	f04f 0c00 	mov.w	ip, #0
 80126a4:	9b01      	ldr	r3, [sp, #4]
 80126a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80126aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80126ae:	9301      	str	r3, [sp, #4]
 80126b0:	fa1f f38a 	uxth.w	r3, sl
 80126b4:	4619      	mov	r1, r3
 80126b6:	b283      	uxth	r3, r0
 80126b8:	1acb      	subs	r3, r1, r3
 80126ba:	0c00      	lsrs	r0, r0, #16
 80126bc:	4463      	add	r3, ip
 80126be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80126c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80126cc:	4576      	cmp	r6, lr
 80126ce:	f849 3b04 	str.w	r3, [r9], #4
 80126d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80126d6:	d8e5      	bhi.n	80126a4 <__mdiff+0x88>
 80126d8:	1b33      	subs	r3, r6, r4
 80126da:	3b15      	subs	r3, #21
 80126dc:	f023 0303 	bic.w	r3, r3, #3
 80126e0:	3415      	adds	r4, #21
 80126e2:	3304      	adds	r3, #4
 80126e4:	42a6      	cmp	r6, r4
 80126e6:	bf38      	it	cc
 80126e8:	2304      	movcc	r3, #4
 80126ea:	441d      	add	r5, r3
 80126ec:	445b      	add	r3, fp
 80126ee:	461e      	mov	r6, r3
 80126f0:	462c      	mov	r4, r5
 80126f2:	4544      	cmp	r4, r8
 80126f4:	d30e      	bcc.n	8012714 <__mdiff+0xf8>
 80126f6:	f108 0103 	add.w	r1, r8, #3
 80126fa:	1b49      	subs	r1, r1, r5
 80126fc:	f021 0103 	bic.w	r1, r1, #3
 8012700:	3d03      	subs	r5, #3
 8012702:	45a8      	cmp	r8, r5
 8012704:	bf38      	it	cc
 8012706:	2100      	movcc	r1, #0
 8012708:	440b      	add	r3, r1
 801270a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801270e:	b191      	cbz	r1, 8012736 <__mdiff+0x11a>
 8012710:	6117      	str	r7, [r2, #16]
 8012712:	e79d      	b.n	8012650 <__mdiff+0x34>
 8012714:	f854 1b04 	ldr.w	r1, [r4], #4
 8012718:	46e6      	mov	lr, ip
 801271a:	0c08      	lsrs	r0, r1, #16
 801271c:	fa1c fc81 	uxtah	ip, ip, r1
 8012720:	4471      	add	r1, lr
 8012722:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012726:	b289      	uxth	r1, r1
 8012728:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801272c:	f846 1b04 	str.w	r1, [r6], #4
 8012730:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012734:	e7dd      	b.n	80126f2 <__mdiff+0xd6>
 8012736:	3f01      	subs	r7, #1
 8012738:	e7e7      	b.n	801270a <__mdiff+0xee>
 801273a:	bf00      	nop
 801273c:	08014272 	.word	0x08014272
 8012740:	080142e3 	.word	0x080142e3

08012744 <__ulp>:
 8012744:	b082      	sub	sp, #8
 8012746:	ed8d 0b00 	vstr	d0, [sp]
 801274a:	9a01      	ldr	r2, [sp, #4]
 801274c:	4b0f      	ldr	r3, [pc, #60]	@ (801278c <__ulp+0x48>)
 801274e:	4013      	ands	r3, r2
 8012750:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012754:	2b00      	cmp	r3, #0
 8012756:	dc08      	bgt.n	801276a <__ulp+0x26>
 8012758:	425b      	negs	r3, r3
 801275a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801275e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012762:	da04      	bge.n	801276e <__ulp+0x2a>
 8012764:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012768:	4113      	asrs	r3, r2
 801276a:	2200      	movs	r2, #0
 801276c:	e008      	b.n	8012780 <__ulp+0x3c>
 801276e:	f1a2 0314 	sub.w	r3, r2, #20
 8012772:	2b1e      	cmp	r3, #30
 8012774:	bfda      	itte	le
 8012776:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801277a:	40da      	lsrle	r2, r3
 801277c:	2201      	movgt	r2, #1
 801277e:	2300      	movs	r3, #0
 8012780:	4619      	mov	r1, r3
 8012782:	4610      	mov	r0, r2
 8012784:	ec41 0b10 	vmov	d0, r0, r1
 8012788:	b002      	add	sp, #8
 801278a:	4770      	bx	lr
 801278c:	7ff00000 	.word	0x7ff00000

08012790 <__b2d>:
 8012790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012794:	6906      	ldr	r6, [r0, #16]
 8012796:	f100 0814 	add.w	r8, r0, #20
 801279a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801279e:	1f37      	subs	r7, r6, #4
 80127a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80127a4:	4610      	mov	r0, r2
 80127a6:	f7ff fd53 	bl	8012250 <__hi0bits>
 80127aa:	f1c0 0320 	rsb	r3, r0, #32
 80127ae:	280a      	cmp	r0, #10
 80127b0:	600b      	str	r3, [r1, #0]
 80127b2:	491b      	ldr	r1, [pc, #108]	@ (8012820 <__b2d+0x90>)
 80127b4:	dc15      	bgt.n	80127e2 <__b2d+0x52>
 80127b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80127ba:	fa22 f30c 	lsr.w	r3, r2, ip
 80127be:	45b8      	cmp	r8, r7
 80127c0:	ea43 0501 	orr.w	r5, r3, r1
 80127c4:	bf34      	ite	cc
 80127c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80127ca:	2300      	movcs	r3, #0
 80127cc:	3015      	adds	r0, #21
 80127ce:	fa02 f000 	lsl.w	r0, r2, r0
 80127d2:	fa23 f30c 	lsr.w	r3, r3, ip
 80127d6:	4303      	orrs	r3, r0
 80127d8:	461c      	mov	r4, r3
 80127da:	ec45 4b10 	vmov	d0, r4, r5
 80127de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127e2:	45b8      	cmp	r8, r7
 80127e4:	bf3a      	itte	cc
 80127e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80127ea:	f1a6 0708 	subcc.w	r7, r6, #8
 80127ee:	2300      	movcs	r3, #0
 80127f0:	380b      	subs	r0, #11
 80127f2:	d012      	beq.n	801281a <__b2d+0x8a>
 80127f4:	f1c0 0120 	rsb	r1, r0, #32
 80127f8:	fa23 f401 	lsr.w	r4, r3, r1
 80127fc:	4082      	lsls	r2, r0
 80127fe:	4322      	orrs	r2, r4
 8012800:	4547      	cmp	r7, r8
 8012802:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012806:	bf8c      	ite	hi
 8012808:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801280c:	2200      	movls	r2, #0
 801280e:	4083      	lsls	r3, r0
 8012810:	40ca      	lsrs	r2, r1
 8012812:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012816:	4313      	orrs	r3, r2
 8012818:	e7de      	b.n	80127d8 <__b2d+0x48>
 801281a:	ea42 0501 	orr.w	r5, r2, r1
 801281e:	e7db      	b.n	80127d8 <__b2d+0x48>
 8012820:	3ff00000 	.word	0x3ff00000

08012824 <__d2b>:
 8012824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012828:	460f      	mov	r7, r1
 801282a:	2101      	movs	r1, #1
 801282c:	ec59 8b10 	vmov	r8, r9, d0
 8012830:	4616      	mov	r6, r2
 8012832:	f7ff fc1b 	bl	801206c <_Balloc>
 8012836:	4604      	mov	r4, r0
 8012838:	b930      	cbnz	r0, 8012848 <__d2b+0x24>
 801283a:	4602      	mov	r2, r0
 801283c:	4b23      	ldr	r3, [pc, #140]	@ (80128cc <__d2b+0xa8>)
 801283e:	4824      	ldr	r0, [pc, #144]	@ (80128d0 <__d2b+0xac>)
 8012840:	f240 310f 	movw	r1, #783	@ 0x30f
 8012844:	f7fc f83c 	bl	800e8c0 <__assert_func>
 8012848:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801284c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012850:	b10d      	cbz	r5, 8012856 <__d2b+0x32>
 8012852:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012856:	9301      	str	r3, [sp, #4]
 8012858:	f1b8 0300 	subs.w	r3, r8, #0
 801285c:	d023      	beq.n	80128a6 <__d2b+0x82>
 801285e:	4668      	mov	r0, sp
 8012860:	9300      	str	r3, [sp, #0]
 8012862:	f7ff fd14 	bl	801228e <__lo0bits>
 8012866:	e9dd 1200 	ldrd	r1, r2, [sp]
 801286a:	b1d0      	cbz	r0, 80128a2 <__d2b+0x7e>
 801286c:	f1c0 0320 	rsb	r3, r0, #32
 8012870:	fa02 f303 	lsl.w	r3, r2, r3
 8012874:	430b      	orrs	r3, r1
 8012876:	40c2      	lsrs	r2, r0
 8012878:	6163      	str	r3, [r4, #20]
 801287a:	9201      	str	r2, [sp, #4]
 801287c:	9b01      	ldr	r3, [sp, #4]
 801287e:	61a3      	str	r3, [r4, #24]
 8012880:	2b00      	cmp	r3, #0
 8012882:	bf0c      	ite	eq
 8012884:	2201      	moveq	r2, #1
 8012886:	2202      	movne	r2, #2
 8012888:	6122      	str	r2, [r4, #16]
 801288a:	b1a5      	cbz	r5, 80128b6 <__d2b+0x92>
 801288c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012890:	4405      	add	r5, r0
 8012892:	603d      	str	r5, [r7, #0]
 8012894:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012898:	6030      	str	r0, [r6, #0]
 801289a:	4620      	mov	r0, r4
 801289c:	b003      	add	sp, #12
 801289e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128a2:	6161      	str	r1, [r4, #20]
 80128a4:	e7ea      	b.n	801287c <__d2b+0x58>
 80128a6:	a801      	add	r0, sp, #4
 80128a8:	f7ff fcf1 	bl	801228e <__lo0bits>
 80128ac:	9b01      	ldr	r3, [sp, #4]
 80128ae:	6163      	str	r3, [r4, #20]
 80128b0:	3020      	adds	r0, #32
 80128b2:	2201      	movs	r2, #1
 80128b4:	e7e8      	b.n	8012888 <__d2b+0x64>
 80128b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80128be:	6038      	str	r0, [r7, #0]
 80128c0:	6918      	ldr	r0, [r3, #16]
 80128c2:	f7ff fcc5 	bl	8012250 <__hi0bits>
 80128c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128ca:	e7e5      	b.n	8012898 <__d2b+0x74>
 80128cc:	08014272 	.word	0x08014272
 80128d0:	080142e3 	.word	0x080142e3

080128d4 <__ratio>:
 80128d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128d8:	b085      	sub	sp, #20
 80128da:	e9cd 1000 	strd	r1, r0, [sp]
 80128de:	a902      	add	r1, sp, #8
 80128e0:	f7ff ff56 	bl	8012790 <__b2d>
 80128e4:	9800      	ldr	r0, [sp, #0]
 80128e6:	a903      	add	r1, sp, #12
 80128e8:	ec55 4b10 	vmov	r4, r5, d0
 80128ec:	f7ff ff50 	bl	8012790 <__b2d>
 80128f0:	9b01      	ldr	r3, [sp, #4]
 80128f2:	6919      	ldr	r1, [r3, #16]
 80128f4:	9b00      	ldr	r3, [sp, #0]
 80128f6:	691b      	ldr	r3, [r3, #16]
 80128f8:	1ac9      	subs	r1, r1, r3
 80128fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80128fe:	1a9b      	subs	r3, r3, r2
 8012900:	ec5b ab10 	vmov	sl, fp, d0
 8012904:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012908:	2b00      	cmp	r3, #0
 801290a:	bfce      	itee	gt
 801290c:	462a      	movgt	r2, r5
 801290e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012912:	465a      	movle	r2, fp
 8012914:	462f      	mov	r7, r5
 8012916:	46d9      	mov	r9, fp
 8012918:	bfcc      	ite	gt
 801291a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801291e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012922:	464b      	mov	r3, r9
 8012924:	4652      	mov	r2, sl
 8012926:	4620      	mov	r0, r4
 8012928:	4639      	mov	r1, r7
 801292a:	f7ed ff9f 	bl	800086c <__aeabi_ddiv>
 801292e:	ec41 0b10 	vmov	d0, r0, r1
 8012932:	b005      	add	sp, #20
 8012934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012938 <__copybits>:
 8012938:	3901      	subs	r1, #1
 801293a:	b570      	push	{r4, r5, r6, lr}
 801293c:	1149      	asrs	r1, r1, #5
 801293e:	6914      	ldr	r4, [r2, #16]
 8012940:	3101      	adds	r1, #1
 8012942:	f102 0314 	add.w	r3, r2, #20
 8012946:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801294a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801294e:	1f05      	subs	r5, r0, #4
 8012950:	42a3      	cmp	r3, r4
 8012952:	d30c      	bcc.n	801296e <__copybits+0x36>
 8012954:	1aa3      	subs	r3, r4, r2
 8012956:	3b11      	subs	r3, #17
 8012958:	f023 0303 	bic.w	r3, r3, #3
 801295c:	3211      	adds	r2, #17
 801295e:	42a2      	cmp	r2, r4
 8012960:	bf88      	it	hi
 8012962:	2300      	movhi	r3, #0
 8012964:	4418      	add	r0, r3
 8012966:	2300      	movs	r3, #0
 8012968:	4288      	cmp	r0, r1
 801296a:	d305      	bcc.n	8012978 <__copybits+0x40>
 801296c:	bd70      	pop	{r4, r5, r6, pc}
 801296e:	f853 6b04 	ldr.w	r6, [r3], #4
 8012972:	f845 6f04 	str.w	r6, [r5, #4]!
 8012976:	e7eb      	b.n	8012950 <__copybits+0x18>
 8012978:	f840 3b04 	str.w	r3, [r0], #4
 801297c:	e7f4      	b.n	8012968 <__copybits+0x30>

0801297e <__any_on>:
 801297e:	f100 0214 	add.w	r2, r0, #20
 8012982:	6900      	ldr	r0, [r0, #16]
 8012984:	114b      	asrs	r3, r1, #5
 8012986:	4298      	cmp	r0, r3
 8012988:	b510      	push	{r4, lr}
 801298a:	db11      	blt.n	80129b0 <__any_on+0x32>
 801298c:	dd0a      	ble.n	80129a4 <__any_on+0x26>
 801298e:	f011 011f 	ands.w	r1, r1, #31
 8012992:	d007      	beq.n	80129a4 <__any_on+0x26>
 8012994:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012998:	fa24 f001 	lsr.w	r0, r4, r1
 801299c:	fa00 f101 	lsl.w	r1, r0, r1
 80129a0:	428c      	cmp	r4, r1
 80129a2:	d10b      	bne.n	80129bc <__any_on+0x3e>
 80129a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80129a8:	4293      	cmp	r3, r2
 80129aa:	d803      	bhi.n	80129b4 <__any_on+0x36>
 80129ac:	2000      	movs	r0, #0
 80129ae:	bd10      	pop	{r4, pc}
 80129b0:	4603      	mov	r3, r0
 80129b2:	e7f7      	b.n	80129a4 <__any_on+0x26>
 80129b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80129b8:	2900      	cmp	r1, #0
 80129ba:	d0f5      	beq.n	80129a8 <__any_on+0x2a>
 80129bc:	2001      	movs	r0, #1
 80129be:	e7f6      	b.n	80129ae <__any_on+0x30>

080129c0 <__ascii_wctomb>:
 80129c0:	4603      	mov	r3, r0
 80129c2:	4608      	mov	r0, r1
 80129c4:	b141      	cbz	r1, 80129d8 <__ascii_wctomb+0x18>
 80129c6:	2aff      	cmp	r2, #255	@ 0xff
 80129c8:	d904      	bls.n	80129d4 <__ascii_wctomb+0x14>
 80129ca:	228a      	movs	r2, #138	@ 0x8a
 80129cc:	601a      	str	r2, [r3, #0]
 80129ce:	f04f 30ff 	mov.w	r0, #4294967295
 80129d2:	4770      	bx	lr
 80129d4:	700a      	strb	r2, [r1, #0]
 80129d6:	2001      	movs	r0, #1
 80129d8:	4770      	bx	lr

080129da <__ssputs_r>:
 80129da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129de:	688e      	ldr	r6, [r1, #8]
 80129e0:	461f      	mov	r7, r3
 80129e2:	42be      	cmp	r6, r7
 80129e4:	680b      	ldr	r3, [r1, #0]
 80129e6:	4682      	mov	sl, r0
 80129e8:	460c      	mov	r4, r1
 80129ea:	4690      	mov	r8, r2
 80129ec:	d82d      	bhi.n	8012a4a <__ssputs_r+0x70>
 80129ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80129f2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80129f6:	d026      	beq.n	8012a46 <__ssputs_r+0x6c>
 80129f8:	6965      	ldr	r5, [r4, #20]
 80129fa:	6909      	ldr	r1, [r1, #16]
 80129fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a00:	eba3 0901 	sub.w	r9, r3, r1
 8012a04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012a08:	1c7b      	adds	r3, r7, #1
 8012a0a:	444b      	add	r3, r9
 8012a0c:	106d      	asrs	r5, r5, #1
 8012a0e:	429d      	cmp	r5, r3
 8012a10:	bf38      	it	cc
 8012a12:	461d      	movcc	r5, r3
 8012a14:	0553      	lsls	r3, r2, #21
 8012a16:	d527      	bpl.n	8012a68 <__ssputs_r+0x8e>
 8012a18:	4629      	mov	r1, r5
 8012a1a:	f7fb ffa9 	bl	800e970 <_malloc_r>
 8012a1e:	4606      	mov	r6, r0
 8012a20:	b360      	cbz	r0, 8012a7c <__ssputs_r+0xa2>
 8012a22:	6921      	ldr	r1, [r4, #16]
 8012a24:	464a      	mov	r2, r9
 8012a26:	f7fe f90a 	bl	8010c3e <memcpy>
 8012a2a:	89a3      	ldrh	r3, [r4, #12]
 8012a2c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a34:	81a3      	strh	r3, [r4, #12]
 8012a36:	6126      	str	r6, [r4, #16]
 8012a38:	6165      	str	r5, [r4, #20]
 8012a3a:	444e      	add	r6, r9
 8012a3c:	eba5 0509 	sub.w	r5, r5, r9
 8012a40:	6026      	str	r6, [r4, #0]
 8012a42:	60a5      	str	r5, [r4, #8]
 8012a44:	463e      	mov	r6, r7
 8012a46:	42be      	cmp	r6, r7
 8012a48:	d900      	bls.n	8012a4c <__ssputs_r+0x72>
 8012a4a:	463e      	mov	r6, r7
 8012a4c:	6820      	ldr	r0, [r4, #0]
 8012a4e:	4632      	mov	r2, r6
 8012a50:	4641      	mov	r1, r8
 8012a52:	f000 fefa 	bl	801384a <memmove>
 8012a56:	68a3      	ldr	r3, [r4, #8]
 8012a58:	1b9b      	subs	r3, r3, r6
 8012a5a:	60a3      	str	r3, [r4, #8]
 8012a5c:	6823      	ldr	r3, [r4, #0]
 8012a5e:	4433      	add	r3, r6
 8012a60:	6023      	str	r3, [r4, #0]
 8012a62:	2000      	movs	r0, #0
 8012a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a68:	462a      	mov	r2, r5
 8012a6a:	f000 ff83 	bl	8013974 <_realloc_r>
 8012a6e:	4606      	mov	r6, r0
 8012a70:	2800      	cmp	r0, #0
 8012a72:	d1e0      	bne.n	8012a36 <__ssputs_r+0x5c>
 8012a74:	6921      	ldr	r1, [r4, #16]
 8012a76:	4650      	mov	r0, sl
 8012a78:	f7fe ff62 	bl	8011940 <_free_r>
 8012a7c:	230c      	movs	r3, #12
 8012a7e:	f8ca 3000 	str.w	r3, [sl]
 8012a82:	89a3      	ldrh	r3, [r4, #12]
 8012a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a88:	81a3      	strh	r3, [r4, #12]
 8012a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8012a8e:	e7e9      	b.n	8012a64 <__ssputs_r+0x8a>

08012a90 <_svfiprintf_r>:
 8012a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a94:	4698      	mov	r8, r3
 8012a96:	898b      	ldrh	r3, [r1, #12]
 8012a98:	061b      	lsls	r3, r3, #24
 8012a9a:	b09d      	sub	sp, #116	@ 0x74
 8012a9c:	4607      	mov	r7, r0
 8012a9e:	460d      	mov	r5, r1
 8012aa0:	4614      	mov	r4, r2
 8012aa2:	d510      	bpl.n	8012ac6 <_svfiprintf_r+0x36>
 8012aa4:	690b      	ldr	r3, [r1, #16]
 8012aa6:	b973      	cbnz	r3, 8012ac6 <_svfiprintf_r+0x36>
 8012aa8:	2140      	movs	r1, #64	@ 0x40
 8012aaa:	f7fb ff61 	bl	800e970 <_malloc_r>
 8012aae:	6028      	str	r0, [r5, #0]
 8012ab0:	6128      	str	r0, [r5, #16]
 8012ab2:	b930      	cbnz	r0, 8012ac2 <_svfiprintf_r+0x32>
 8012ab4:	230c      	movs	r3, #12
 8012ab6:	603b      	str	r3, [r7, #0]
 8012ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8012abc:	b01d      	add	sp, #116	@ 0x74
 8012abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ac2:	2340      	movs	r3, #64	@ 0x40
 8012ac4:	616b      	str	r3, [r5, #20]
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8012aca:	2320      	movs	r3, #32
 8012acc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012ad0:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ad4:	2330      	movs	r3, #48	@ 0x30
 8012ad6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012c74 <_svfiprintf_r+0x1e4>
 8012ada:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012ade:	f04f 0901 	mov.w	r9, #1
 8012ae2:	4623      	mov	r3, r4
 8012ae4:	469a      	mov	sl, r3
 8012ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012aea:	b10a      	cbz	r2, 8012af0 <_svfiprintf_r+0x60>
 8012aec:	2a25      	cmp	r2, #37	@ 0x25
 8012aee:	d1f9      	bne.n	8012ae4 <_svfiprintf_r+0x54>
 8012af0:	ebba 0b04 	subs.w	fp, sl, r4
 8012af4:	d00b      	beq.n	8012b0e <_svfiprintf_r+0x7e>
 8012af6:	465b      	mov	r3, fp
 8012af8:	4622      	mov	r2, r4
 8012afa:	4629      	mov	r1, r5
 8012afc:	4638      	mov	r0, r7
 8012afe:	f7ff ff6c 	bl	80129da <__ssputs_r>
 8012b02:	3001      	adds	r0, #1
 8012b04:	f000 80a7 	beq.w	8012c56 <_svfiprintf_r+0x1c6>
 8012b08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b0a:	445a      	add	r2, fp
 8012b0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	f000 809f 	beq.w	8012c56 <_svfiprintf_r+0x1c6>
 8012b18:	2300      	movs	r3, #0
 8012b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b22:	f10a 0a01 	add.w	sl, sl, #1
 8012b26:	9304      	str	r3, [sp, #16]
 8012b28:	9307      	str	r3, [sp, #28]
 8012b2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012b2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012b30:	4654      	mov	r4, sl
 8012b32:	2205      	movs	r2, #5
 8012b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b38:	484e      	ldr	r0, [pc, #312]	@ (8012c74 <_svfiprintf_r+0x1e4>)
 8012b3a:	f7ed fb59 	bl	80001f0 <memchr>
 8012b3e:	9a04      	ldr	r2, [sp, #16]
 8012b40:	b9d8      	cbnz	r0, 8012b7a <_svfiprintf_r+0xea>
 8012b42:	06d0      	lsls	r0, r2, #27
 8012b44:	bf44      	itt	mi
 8012b46:	2320      	movmi	r3, #32
 8012b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012b4c:	0711      	lsls	r1, r2, #28
 8012b4e:	bf44      	itt	mi
 8012b50:	232b      	movmi	r3, #43	@ 0x2b
 8012b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012b56:	f89a 3000 	ldrb.w	r3, [sl]
 8012b5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012b5c:	d015      	beq.n	8012b8a <_svfiprintf_r+0xfa>
 8012b5e:	9a07      	ldr	r2, [sp, #28]
 8012b60:	4654      	mov	r4, sl
 8012b62:	2000      	movs	r0, #0
 8012b64:	f04f 0c0a 	mov.w	ip, #10
 8012b68:	4621      	mov	r1, r4
 8012b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b6e:	3b30      	subs	r3, #48	@ 0x30
 8012b70:	2b09      	cmp	r3, #9
 8012b72:	d94b      	bls.n	8012c0c <_svfiprintf_r+0x17c>
 8012b74:	b1b0      	cbz	r0, 8012ba4 <_svfiprintf_r+0x114>
 8012b76:	9207      	str	r2, [sp, #28]
 8012b78:	e014      	b.n	8012ba4 <_svfiprintf_r+0x114>
 8012b7a:	eba0 0308 	sub.w	r3, r0, r8
 8012b7e:	fa09 f303 	lsl.w	r3, r9, r3
 8012b82:	4313      	orrs	r3, r2
 8012b84:	9304      	str	r3, [sp, #16]
 8012b86:	46a2      	mov	sl, r4
 8012b88:	e7d2      	b.n	8012b30 <_svfiprintf_r+0xa0>
 8012b8a:	9b03      	ldr	r3, [sp, #12]
 8012b8c:	1d19      	adds	r1, r3, #4
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	9103      	str	r1, [sp, #12]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	bfbb      	ittet	lt
 8012b96:	425b      	neglt	r3, r3
 8012b98:	f042 0202 	orrlt.w	r2, r2, #2
 8012b9c:	9307      	strge	r3, [sp, #28]
 8012b9e:	9307      	strlt	r3, [sp, #28]
 8012ba0:	bfb8      	it	lt
 8012ba2:	9204      	strlt	r2, [sp, #16]
 8012ba4:	7823      	ldrb	r3, [r4, #0]
 8012ba6:	2b2e      	cmp	r3, #46	@ 0x2e
 8012ba8:	d10a      	bne.n	8012bc0 <_svfiprintf_r+0x130>
 8012baa:	7863      	ldrb	r3, [r4, #1]
 8012bac:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bae:	d132      	bne.n	8012c16 <_svfiprintf_r+0x186>
 8012bb0:	9b03      	ldr	r3, [sp, #12]
 8012bb2:	1d1a      	adds	r2, r3, #4
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	9203      	str	r2, [sp, #12]
 8012bb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012bbc:	3402      	adds	r4, #2
 8012bbe:	9305      	str	r3, [sp, #20]
 8012bc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012c84 <_svfiprintf_r+0x1f4>
 8012bc4:	7821      	ldrb	r1, [r4, #0]
 8012bc6:	2203      	movs	r2, #3
 8012bc8:	4650      	mov	r0, sl
 8012bca:	f7ed fb11 	bl	80001f0 <memchr>
 8012bce:	b138      	cbz	r0, 8012be0 <_svfiprintf_r+0x150>
 8012bd0:	9b04      	ldr	r3, [sp, #16]
 8012bd2:	eba0 000a 	sub.w	r0, r0, sl
 8012bd6:	2240      	movs	r2, #64	@ 0x40
 8012bd8:	4082      	lsls	r2, r0
 8012bda:	4313      	orrs	r3, r2
 8012bdc:	3401      	adds	r4, #1
 8012bde:	9304      	str	r3, [sp, #16]
 8012be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012be4:	4824      	ldr	r0, [pc, #144]	@ (8012c78 <_svfiprintf_r+0x1e8>)
 8012be6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012bea:	2206      	movs	r2, #6
 8012bec:	f7ed fb00 	bl	80001f0 <memchr>
 8012bf0:	2800      	cmp	r0, #0
 8012bf2:	d036      	beq.n	8012c62 <_svfiprintf_r+0x1d2>
 8012bf4:	4b21      	ldr	r3, [pc, #132]	@ (8012c7c <_svfiprintf_r+0x1ec>)
 8012bf6:	bb1b      	cbnz	r3, 8012c40 <_svfiprintf_r+0x1b0>
 8012bf8:	9b03      	ldr	r3, [sp, #12]
 8012bfa:	3307      	adds	r3, #7
 8012bfc:	f023 0307 	bic.w	r3, r3, #7
 8012c00:	3308      	adds	r3, #8
 8012c02:	9303      	str	r3, [sp, #12]
 8012c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c06:	4433      	add	r3, r6
 8012c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c0a:	e76a      	b.n	8012ae2 <_svfiprintf_r+0x52>
 8012c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c10:	460c      	mov	r4, r1
 8012c12:	2001      	movs	r0, #1
 8012c14:	e7a8      	b.n	8012b68 <_svfiprintf_r+0xd8>
 8012c16:	2300      	movs	r3, #0
 8012c18:	3401      	adds	r4, #1
 8012c1a:	9305      	str	r3, [sp, #20]
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	f04f 0c0a 	mov.w	ip, #10
 8012c22:	4620      	mov	r0, r4
 8012c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c28:	3a30      	subs	r2, #48	@ 0x30
 8012c2a:	2a09      	cmp	r2, #9
 8012c2c:	d903      	bls.n	8012c36 <_svfiprintf_r+0x1a6>
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d0c6      	beq.n	8012bc0 <_svfiprintf_r+0x130>
 8012c32:	9105      	str	r1, [sp, #20]
 8012c34:	e7c4      	b.n	8012bc0 <_svfiprintf_r+0x130>
 8012c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	e7f0      	b.n	8012c22 <_svfiprintf_r+0x192>
 8012c40:	ab03      	add	r3, sp, #12
 8012c42:	9300      	str	r3, [sp, #0]
 8012c44:	462a      	mov	r2, r5
 8012c46:	4b0e      	ldr	r3, [pc, #56]	@ (8012c80 <_svfiprintf_r+0x1f0>)
 8012c48:	a904      	add	r1, sp, #16
 8012c4a:	4638      	mov	r0, r7
 8012c4c:	f7fc fe58 	bl	800f900 <_printf_float>
 8012c50:	1c42      	adds	r2, r0, #1
 8012c52:	4606      	mov	r6, r0
 8012c54:	d1d6      	bne.n	8012c04 <_svfiprintf_r+0x174>
 8012c56:	89ab      	ldrh	r3, [r5, #12]
 8012c58:	065b      	lsls	r3, r3, #25
 8012c5a:	f53f af2d 	bmi.w	8012ab8 <_svfiprintf_r+0x28>
 8012c5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c60:	e72c      	b.n	8012abc <_svfiprintf_r+0x2c>
 8012c62:	ab03      	add	r3, sp, #12
 8012c64:	9300      	str	r3, [sp, #0]
 8012c66:	462a      	mov	r2, r5
 8012c68:	4b05      	ldr	r3, [pc, #20]	@ (8012c80 <_svfiprintf_r+0x1f0>)
 8012c6a:	a904      	add	r1, sp, #16
 8012c6c:	4638      	mov	r0, r7
 8012c6e:	f7fd f8df 	bl	800fe30 <_printf_i>
 8012c72:	e7ed      	b.n	8012c50 <_svfiprintf_r+0x1c0>
 8012c74:	0801433c 	.word	0x0801433c
 8012c78:	08014346 	.word	0x08014346
 8012c7c:	0800f901 	.word	0x0800f901
 8012c80:	080129db 	.word	0x080129db
 8012c84:	08014342 	.word	0x08014342

08012c88 <_sungetc_r>:
 8012c88:	b538      	push	{r3, r4, r5, lr}
 8012c8a:	1c4b      	adds	r3, r1, #1
 8012c8c:	4614      	mov	r4, r2
 8012c8e:	d103      	bne.n	8012c98 <_sungetc_r+0x10>
 8012c90:	f04f 35ff 	mov.w	r5, #4294967295
 8012c94:	4628      	mov	r0, r5
 8012c96:	bd38      	pop	{r3, r4, r5, pc}
 8012c98:	8993      	ldrh	r3, [r2, #12]
 8012c9a:	f023 0320 	bic.w	r3, r3, #32
 8012c9e:	8193      	strh	r3, [r2, #12]
 8012ca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012ca2:	6852      	ldr	r2, [r2, #4]
 8012ca4:	b2cd      	uxtb	r5, r1
 8012ca6:	b18b      	cbz	r3, 8012ccc <_sungetc_r+0x44>
 8012ca8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012caa:	4293      	cmp	r3, r2
 8012cac:	dd08      	ble.n	8012cc0 <_sungetc_r+0x38>
 8012cae:	6823      	ldr	r3, [r4, #0]
 8012cb0:	1e5a      	subs	r2, r3, #1
 8012cb2:	6022      	str	r2, [r4, #0]
 8012cb4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012cb8:	6863      	ldr	r3, [r4, #4]
 8012cba:	3301      	adds	r3, #1
 8012cbc:	6063      	str	r3, [r4, #4]
 8012cbe:	e7e9      	b.n	8012c94 <_sungetc_r+0xc>
 8012cc0:	4621      	mov	r1, r4
 8012cc2:	f000 fd88 	bl	80137d6 <__submore>
 8012cc6:	2800      	cmp	r0, #0
 8012cc8:	d0f1      	beq.n	8012cae <_sungetc_r+0x26>
 8012cca:	e7e1      	b.n	8012c90 <_sungetc_r+0x8>
 8012ccc:	6921      	ldr	r1, [r4, #16]
 8012cce:	6823      	ldr	r3, [r4, #0]
 8012cd0:	b151      	cbz	r1, 8012ce8 <_sungetc_r+0x60>
 8012cd2:	4299      	cmp	r1, r3
 8012cd4:	d208      	bcs.n	8012ce8 <_sungetc_r+0x60>
 8012cd6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012cda:	42a9      	cmp	r1, r5
 8012cdc:	d104      	bne.n	8012ce8 <_sungetc_r+0x60>
 8012cde:	3b01      	subs	r3, #1
 8012ce0:	3201      	adds	r2, #1
 8012ce2:	6023      	str	r3, [r4, #0]
 8012ce4:	6062      	str	r2, [r4, #4]
 8012ce6:	e7d5      	b.n	8012c94 <_sungetc_r+0xc>
 8012ce8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8012cec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012cf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8012cf2:	2303      	movs	r3, #3
 8012cf4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012cf6:	4623      	mov	r3, r4
 8012cf8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012cfc:	6023      	str	r3, [r4, #0]
 8012cfe:	2301      	movs	r3, #1
 8012d00:	e7dc      	b.n	8012cbc <_sungetc_r+0x34>

08012d02 <__ssrefill_r>:
 8012d02:	b510      	push	{r4, lr}
 8012d04:	460c      	mov	r4, r1
 8012d06:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012d08:	b169      	cbz	r1, 8012d26 <__ssrefill_r+0x24>
 8012d0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012d0e:	4299      	cmp	r1, r3
 8012d10:	d001      	beq.n	8012d16 <__ssrefill_r+0x14>
 8012d12:	f7fe fe15 	bl	8011940 <_free_r>
 8012d16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012d18:	6063      	str	r3, [r4, #4]
 8012d1a:	2000      	movs	r0, #0
 8012d1c:	6360      	str	r0, [r4, #52]	@ 0x34
 8012d1e:	b113      	cbz	r3, 8012d26 <__ssrefill_r+0x24>
 8012d20:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012d22:	6023      	str	r3, [r4, #0]
 8012d24:	bd10      	pop	{r4, pc}
 8012d26:	6923      	ldr	r3, [r4, #16]
 8012d28:	6023      	str	r3, [r4, #0]
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	6063      	str	r3, [r4, #4]
 8012d2e:	89a3      	ldrh	r3, [r4, #12]
 8012d30:	f043 0320 	orr.w	r3, r3, #32
 8012d34:	81a3      	strh	r3, [r4, #12]
 8012d36:	f04f 30ff 	mov.w	r0, #4294967295
 8012d3a:	e7f3      	b.n	8012d24 <__ssrefill_r+0x22>

08012d3c <__ssvfiscanf_r>:
 8012d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d40:	460c      	mov	r4, r1
 8012d42:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8012d46:	2100      	movs	r1, #0
 8012d48:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012d4c:	49a6      	ldr	r1, [pc, #664]	@ (8012fe8 <__ssvfiscanf_r+0x2ac>)
 8012d4e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012d50:	f10d 0804 	add.w	r8, sp, #4
 8012d54:	49a5      	ldr	r1, [pc, #660]	@ (8012fec <__ssvfiscanf_r+0x2b0>)
 8012d56:	4fa6      	ldr	r7, [pc, #664]	@ (8012ff0 <__ssvfiscanf_r+0x2b4>)
 8012d58:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012d5c:	4606      	mov	r6, r0
 8012d5e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012d60:	9300      	str	r3, [sp, #0]
 8012d62:	f892 9000 	ldrb.w	r9, [r2]
 8012d66:	f1b9 0f00 	cmp.w	r9, #0
 8012d6a:	f000 8158 	beq.w	801301e <__ssvfiscanf_r+0x2e2>
 8012d6e:	f817 3009 	ldrb.w	r3, [r7, r9]
 8012d72:	f013 0308 	ands.w	r3, r3, #8
 8012d76:	f102 0501 	add.w	r5, r2, #1
 8012d7a:	d019      	beq.n	8012db0 <__ssvfiscanf_r+0x74>
 8012d7c:	6863      	ldr	r3, [r4, #4]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	dd0f      	ble.n	8012da2 <__ssvfiscanf_r+0x66>
 8012d82:	6823      	ldr	r3, [r4, #0]
 8012d84:	781a      	ldrb	r2, [r3, #0]
 8012d86:	5cba      	ldrb	r2, [r7, r2]
 8012d88:	0712      	lsls	r2, r2, #28
 8012d8a:	d401      	bmi.n	8012d90 <__ssvfiscanf_r+0x54>
 8012d8c:	462a      	mov	r2, r5
 8012d8e:	e7e8      	b.n	8012d62 <__ssvfiscanf_r+0x26>
 8012d90:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012d92:	3201      	adds	r2, #1
 8012d94:	9245      	str	r2, [sp, #276]	@ 0x114
 8012d96:	6862      	ldr	r2, [r4, #4]
 8012d98:	3301      	adds	r3, #1
 8012d9a:	3a01      	subs	r2, #1
 8012d9c:	6062      	str	r2, [r4, #4]
 8012d9e:	6023      	str	r3, [r4, #0]
 8012da0:	e7ec      	b.n	8012d7c <__ssvfiscanf_r+0x40>
 8012da2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012da4:	4621      	mov	r1, r4
 8012da6:	4630      	mov	r0, r6
 8012da8:	4798      	blx	r3
 8012daa:	2800      	cmp	r0, #0
 8012dac:	d0e9      	beq.n	8012d82 <__ssvfiscanf_r+0x46>
 8012dae:	e7ed      	b.n	8012d8c <__ssvfiscanf_r+0x50>
 8012db0:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8012db4:	f040 8085 	bne.w	8012ec2 <__ssvfiscanf_r+0x186>
 8012db8:	9341      	str	r3, [sp, #260]	@ 0x104
 8012dba:	9343      	str	r3, [sp, #268]	@ 0x10c
 8012dbc:	7853      	ldrb	r3, [r2, #1]
 8012dbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8012dc0:	bf02      	ittt	eq
 8012dc2:	2310      	moveq	r3, #16
 8012dc4:	1c95      	addeq	r5, r2, #2
 8012dc6:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012dc8:	220a      	movs	r2, #10
 8012dca:	46aa      	mov	sl, r5
 8012dcc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012dd0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012dd4:	2b09      	cmp	r3, #9
 8012dd6:	d91e      	bls.n	8012e16 <__ssvfiscanf_r+0xda>
 8012dd8:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8012ff4 <__ssvfiscanf_r+0x2b8>
 8012ddc:	2203      	movs	r2, #3
 8012dde:	4658      	mov	r0, fp
 8012de0:	f7ed fa06 	bl	80001f0 <memchr>
 8012de4:	b138      	cbz	r0, 8012df6 <__ssvfiscanf_r+0xba>
 8012de6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012de8:	eba0 000b 	sub.w	r0, r0, fp
 8012dec:	2301      	movs	r3, #1
 8012dee:	4083      	lsls	r3, r0
 8012df0:	4313      	orrs	r3, r2
 8012df2:	9341      	str	r3, [sp, #260]	@ 0x104
 8012df4:	4655      	mov	r5, sl
 8012df6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012dfa:	2b78      	cmp	r3, #120	@ 0x78
 8012dfc:	d806      	bhi.n	8012e0c <__ssvfiscanf_r+0xd0>
 8012dfe:	2b57      	cmp	r3, #87	@ 0x57
 8012e00:	d810      	bhi.n	8012e24 <__ssvfiscanf_r+0xe8>
 8012e02:	2b25      	cmp	r3, #37	@ 0x25
 8012e04:	d05d      	beq.n	8012ec2 <__ssvfiscanf_r+0x186>
 8012e06:	d857      	bhi.n	8012eb8 <__ssvfiscanf_r+0x17c>
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d075      	beq.n	8012ef8 <__ssvfiscanf_r+0x1bc>
 8012e0c:	2303      	movs	r3, #3
 8012e0e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012e10:	230a      	movs	r3, #10
 8012e12:	9342      	str	r3, [sp, #264]	@ 0x108
 8012e14:	e088      	b.n	8012f28 <__ssvfiscanf_r+0x1ec>
 8012e16:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012e18:	fb02 1103 	mla	r1, r2, r3, r1
 8012e1c:	3930      	subs	r1, #48	@ 0x30
 8012e1e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012e20:	4655      	mov	r5, sl
 8012e22:	e7d2      	b.n	8012dca <__ssvfiscanf_r+0x8e>
 8012e24:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012e28:	2a20      	cmp	r2, #32
 8012e2a:	d8ef      	bhi.n	8012e0c <__ssvfiscanf_r+0xd0>
 8012e2c:	a101      	add	r1, pc, #4	@ (adr r1, 8012e34 <__ssvfiscanf_r+0xf8>)
 8012e2e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012e32:	bf00      	nop
 8012e34:	08012f07 	.word	0x08012f07
 8012e38:	08012e0d 	.word	0x08012e0d
 8012e3c:	08012e0d 	.word	0x08012e0d
 8012e40:	08012f61 	.word	0x08012f61
 8012e44:	08012e0d 	.word	0x08012e0d
 8012e48:	08012e0d 	.word	0x08012e0d
 8012e4c:	08012e0d 	.word	0x08012e0d
 8012e50:	08012e0d 	.word	0x08012e0d
 8012e54:	08012e0d 	.word	0x08012e0d
 8012e58:	08012e0d 	.word	0x08012e0d
 8012e5c:	08012e0d 	.word	0x08012e0d
 8012e60:	08012f77 	.word	0x08012f77
 8012e64:	08012f5d 	.word	0x08012f5d
 8012e68:	08012ebf 	.word	0x08012ebf
 8012e6c:	08012ebf 	.word	0x08012ebf
 8012e70:	08012ebf 	.word	0x08012ebf
 8012e74:	08012e0d 	.word	0x08012e0d
 8012e78:	08012f19 	.word	0x08012f19
 8012e7c:	08012e0d 	.word	0x08012e0d
 8012e80:	08012e0d 	.word	0x08012e0d
 8012e84:	08012e0d 	.word	0x08012e0d
 8012e88:	08012e0d 	.word	0x08012e0d
 8012e8c:	08012f87 	.word	0x08012f87
 8012e90:	08012f21 	.word	0x08012f21
 8012e94:	08012eff 	.word	0x08012eff
 8012e98:	08012e0d 	.word	0x08012e0d
 8012e9c:	08012e0d 	.word	0x08012e0d
 8012ea0:	08012f83 	.word	0x08012f83
 8012ea4:	08012e0d 	.word	0x08012e0d
 8012ea8:	08012f5d 	.word	0x08012f5d
 8012eac:	08012e0d 	.word	0x08012e0d
 8012eb0:	08012e0d 	.word	0x08012e0d
 8012eb4:	08012f07 	.word	0x08012f07
 8012eb8:	3b45      	subs	r3, #69	@ 0x45
 8012eba:	2b02      	cmp	r3, #2
 8012ebc:	d8a6      	bhi.n	8012e0c <__ssvfiscanf_r+0xd0>
 8012ebe:	2305      	movs	r3, #5
 8012ec0:	e031      	b.n	8012f26 <__ssvfiscanf_r+0x1ea>
 8012ec2:	6863      	ldr	r3, [r4, #4]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	dd0d      	ble.n	8012ee4 <__ssvfiscanf_r+0x1a8>
 8012ec8:	6823      	ldr	r3, [r4, #0]
 8012eca:	781a      	ldrb	r2, [r3, #0]
 8012ecc:	454a      	cmp	r2, r9
 8012ece:	f040 80a6 	bne.w	801301e <__ssvfiscanf_r+0x2e2>
 8012ed2:	3301      	adds	r3, #1
 8012ed4:	6862      	ldr	r2, [r4, #4]
 8012ed6:	6023      	str	r3, [r4, #0]
 8012ed8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012eda:	3a01      	subs	r2, #1
 8012edc:	3301      	adds	r3, #1
 8012ede:	6062      	str	r2, [r4, #4]
 8012ee0:	9345      	str	r3, [sp, #276]	@ 0x114
 8012ee2:	e753      	b.n	8012d8c <__ssvfiscanf_r+0x50>
 8012ee4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012ee6:	4621      	mov	r1, r4
 8012ee8:	4630      	mov	r0, r6
 8012eea:	4798      	blx	r3
 8012eec:	2800      	cmp	r0, #0
 8012eee:	d0eb      	beq.n	8012ec8 <__ssvfiscanf_r+0x18c>
 8012ef0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012ef2:	2800      	cmp	r0, #0
 8012ef4:	f040 808b 	bne.w	801300e <__ssvfiscanf_r+0x2d2>
 8012ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8012efc:	e08b      	b.n	8013016 <__ssvfiscanf_r+0x2da>
 8012efe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012f00:	f042 0220 	orr.w	r2, r2, #32
 8012f04:	9241      	str	r2, [sp, #260]	@ 0x104
 8012f06:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012f0c:	9241      	str	r2, [sp, #260]	@ 0x104
 8012f0e:	2210      	movs	r2, #16
 8012f10:	2b6e      	cmp	r3, #110	@ 0x6e
 8012f12:	9242      	str	r2, [sp, #264]	@ 0x108
 8012f14:	d902      	bls.n	8012f1c <__ssvfiscanf_r+0x1e0>
 8012f16:	e005      	b.n	8012f24 <__ssvfiscanf_r+0x1e8>
 8012f18:	2300      	movs	r3, #0
 8012f1a:	9342      	str	r3, [sp, #264]	@ 0x108
 8012f1c:	2303      	movs	r3, #3
 8012f1e:	e002      	b.n	8012f26 <__ssvfiscanf_r+0x1ea>
 8012f20:	2308      	movs	r3, #8
 8012f22:	9342      	str	r3, [sp, #264]	@ 0x108
 8012f24:	2304      	movs	r3, #4
 8012f26:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012f28:	6863      	ldr	r3, [r4, #4]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	dd39      	ble.n	8012fa2 <__ssvfiscanf_r+0x266>
 8012f2e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012f30:	0659      	lsls	r1, r3, #25
 8012f32:	d404      	bmi.n	8012f3e <__ssvfiscanf_r+0x202>
 8012f34:	6823      	ldr	r3, [r4, #0]
 8012f36:	781a      	ldrb	r2, [r3, #0]
 8012f38:	5cba      	ldrb	r2, [r7, r2]
 8012f3a:	0712      	lsls	r2, r2, #28
 8012f3c:	d438      	bmi.n	8012fb0 <__ssvfiscanf_r+0x274>
 8012f3e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012f40:	2b02      	cmp	r3, #2
 8012f42:	dc47      	bgt.n	8012fd4 <__ssvfiscanf_r+0x298>
 8012f44:	466b      	mov	r3, sp
 8012f46:	4622      	mov	r2, r4
 8012f48:	a941      	add	r1, sp, #260	@ 0x104
 8012f4a:	4630      	mov	r0, r6
 8012f4c:	f000 f9ae 	bl	80132ac <_scanf_chars>
 8012f50:	2801      	cmp	r0, #1
 8012f52:	d064      	beq.n	801301e <__ssvfiscanf_r+0x2e2>
 8012f54:	2802      	cmp	r0, #2
 8012f56:	f47f af19 	bne.w	8012d8c <__ssvfiscanf_r+0x50>
 8012f5a:	e7c9      	b.n	8012ef0 <__ssvfiscanf_r+0x1b4>
 8012f5c:	220a      	movs	r2, #10
 8012f5e:	e7d7      	b.n	8012f10 <__ssvfiscanf_r+0x1d4>
 8012f60:	4629      	mov	r1, r5
 8012f62:	4640      	mov	r0, r8
 8012f64:	f000 fbfe 	bl	8013764 <__sccl>
 8012f68:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f6e:	9341      	str	r3, [sp, #260]	@ 0x104
 8012f70:	4605      	mov	r5, r0
 8012f72:	2301      	movs	r3, #1
 8012f74:	e7d7      	b.n	8012f26 <__ssvfiscanf_r+0x1ea>
 8012f76:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f7c:	9341      	str	r3, [sp, #260]	@ 0x104
 8012f7e:	2300      	movs	r3, #0
 8012f80:	e7d1      	b.n	8012f26 <__ssvfiscanf_r+0x1ea>
 8012f82:	2302      	movs	r3, #2
 8012f84:	e7cf      	b.n	8012f26 <__ssvfiscanf_r+0x1ea>
 8012f86:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8012f88:	06c3      	lsls	r3, r0, #27
 8012f8a:	f53f aeff 	bmi.w	8012d8c <__ssvfiscanf_r+0x50>
 8012f8e:	9b00      	ldr	r3, [sp, #0]
 8012f90:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012f92:	1d19      	adds	r1, r3, #4
 8012f94:	9100      	str	r1, [sp, #0]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	07c0      	lsls	r0, r0, #31
 8012f9a:	bf4c      	ite	mi
 8012f9c:	801a      	strhmi	r2, [r3, #0]
 8012f9e:	601a      	strpl	r2, [r3, #0]
 8012fa0:	e6f4      	b.n	8012d8c <__ssvfiscanf_r+0x50>
 8012fa2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012fa4:	4621      	mov	r1, r4
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	4798      	blx	r3
 8012faa:	2800      	cmp	r0, #0
 8012fac:	d0bf      	beq.n	8012f2e <__ssvfiscanf_r+0x1f2>
 8012fae:	e79f      	b.n	8012ef0 <__ssvfiscanf_r+0x1b4>
 8012fb0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012fb2:	3201      	adds	r2, #1
 8012fb4:	9245      	str	r2, [sp, #276]	@ 0x114
 8012fb6:	6862      	ldr	r2, [r4, #4]
 8012fb8:	3a01      	subs	r2, #1
 8012fba:	2a00      	cmp	r2, #0
 8012fbc:	6062      	str	r2, [r4, #4]
 8012fbe:	dd02      	ble.n	8012fc6 <__ssvfiscanf_r+0x28a>
 8012fc0:	3301      	adds	r3, #1
 8012fc2:	6023      	str	r3, [r4, #0]
 8012fc4:	e7b6      	b.n	8012f34 <__ssvfiscanf_r+0x1f8>
 8012fc6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012fc8:	4621      	mov	r1, r4
 8012fca:	4630      	mov	r0, r6
 8012fcc:	4798      	blx	r3
 8012fce:	2800      	cmp	r0, #0
 8012fd0:	d0b0      	beq.n	8012f34 <__ssvfiscanf_r+0x1f8>
 8012fd2:	e78d      	b.n	8012ef0 <__ssvfiscanf_r+0x1b4>
 8012fd4:	2b04      	cmp	r3, #4
 8012fd6:	dc0f      	bgt.n	8012ff8 <__ssvfiscanf_r+0x2bc>
 8012fd8:	466b      	mov	r3, sp
 8012fda:	4622      	mov	r2, r4
 8012fdc:	a941      	add	r1, sp, #260	@ 0x104
 8012fde:	4630      	mov	r0, r6
 8012fe0:	f000 f9be 	bl	8013360 <_scanf_i>
 8012fe4:	e7b4      	b.n	8012f50 <__ssvfiscanf_r+0x214>
 8012fe6:	bf00      	nop
 8012fe8:	08012c89 	.word	0x08012c89
 8012fec:	08012d03 	.word	0x08012d03
 8012ff0:	080143b9 	.word	0x080143b9
 8012ff4:	08014342 	.word	0x08014342
 8012ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8013024 <__ssvfiscanf_r+0x2e8>)
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	f43f aec6 	beq.w	8012d8c <__ssvfiscanf_r+0x50>
 8013000:	466b      	mov	r3, sp
 8013002:	4622      	mov	r2, r4
 8013004:	a941      	add	r1, sp, #260	@ 0x104
 8013006:	4630      	mov	r0, r6
 8013008:	f7fd f830 	bl	801006c <_scanf_float>
 801300c:	e7a0      	b.n	8012f50 <__ssvfiscanf_r+0x214>
 801300e:	89a3      	ldrh	r3, [r4, #12]
 8013010:	065b      	lsls	r3, r3, #25
 8013012:	f53f af71 	bmi.w	8012ef8 <__ssvfiscanf_r+0x1bc>
 8013016:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801301a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801301e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8013020:	e7f9      	b.n	8013016 <__ssvfiscanf_r+0x2da>
 8013022:	bf00      	nop
 8013024:	0801006d 	.word	0x0801006d

08013028 <__sfputc_r>:
 8013028:	6893      	ldr	r3, [r2, #8]
 801302a:	3b01      	subs	r3, #1
 801302c:	2b00      	cmp	r3, #0
 801302e:	b410      	push	{r4}
 8013030:	6093      	str	r3, [r2, #8]
 8013032:	da08      	bge.n	8013046 <__sfputc_r+0x1e>
 8013034:	6994      	ldr	r4, [r2, #24]
 8013036:	42a3      	cmp	r3, r4
 8013038:	db01      	blt.n	801303e <__sfputc_r+0x16>
 801303a:	290a      	cmp	r1, #10
 801303c:	d103      	bne.n	8013046 <__sfputc_r+0x1e>
 801303e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013042:	f7fd bc1c 	b.w	801087e <__swbuf_r>
 8013046:	6813      	ldr	r3, [r2, #0]
 8013048:	1c58      	adds	r0, r3, #1
 801304a:	6010      	str	r0, [r2, #0]
 801304c:	7019      	strb	r1, [r3, #0]
 801304e:	4608      	mov	r0, r1
 8013050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013054:	4770      	bx	lr

08013056 <__sfputs_r>:
 8013056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013058:	4606      	mov	r6, r0
 801305a:	460f      	mov	r7, r1
 801305c:	4614      	mov	r4, r2
 801305e:	18d5      	adds	r5, r2, r3
 8013060:	42ac      	cmp	r4, r5
 8013062:	d101      	bne.n	8013068 <__sfputs_r+0x12>
 8013064:	2000      	movs	r0, #0
 8013066:	e007      	b.n	8013078 <__sfputs_r+0x22>
 8013068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801306c:	463a      	mov	r2, r7
 801306e:	4630      	mov	r0, r6
 8013070:	f7ff ffda 	bl	8013028 <__sfputc_r>
 8013074:	1c43      	adds	r3, r0, #1
 8013076:	d1f3      	bne.n	8013060 <__sfputs_r+0xa>
 8013078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801307c <_vfiprintf_r>:
 801307c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013080:	460d      	mov	r5, r1
 8013082:	b09d      	sub	sp, #116	@ 0x74
 8013084:	4614      	mov	r4, r2
 8013086:	4698      	mov	r8, r3
 8013088:	4606      	mov	r6, r0
 801308a:	b118      	cbz	r0, 8013094 <_vfiprintf_r+0x18>
 801308c:	6a03      	ldr	r3, [r0, #32]
 801308e:	b90b      	cbnz	r3, 8013094 <_vfiprintf_r+0x18>
 8013090:	f7fd fa86 	bl	80105a0 <__sinit>
 8013094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013096:	07d9      	lsls	r1, r3, #31
 8013098:	d405      	bmi.n	80130a6 <_vfiprintf_r+0x2a>
 801309a:	89ab      	ldrh	r3, [r5, #12]
 801309c:	059a      	lsls	r2, r3, #22
 801309e:	d402      	bmi.n	80130a6 <_vfiprintf_r+0x2a>
 80130a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130a2:	f7fd fdc2 	bl	8010c2a <__retarget_lock_acquire_recursive>
 80130a6:	89ab      	ldrh	r3, [r5, #12]
 80130a8:	071b      	lsls	r3, r3, #28
 80130aa:	d501      	bpl.n	80130b0 <_vfiprintf_r+0x34>
 80130ac:	692b      	ldr	r3, [r5, #16]
 80130ae:	b99b      	cbnz	r3, 80130d8 <_vfiprintf_r+0x5c>
 80130b0:	4629      	mov	r1, r5
 80130b2:	4630      	mov	r0, r6
 80130b4:	f7fd fc22 	bl	80108fc <__swsetup_r>
 80130b8:	b170      	cbz	r0, 80130d8 <_vfiprintf_r+0x5c>
 80130ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80130bc:	07dc      	lsls	r4, r3, #31
 80130be:	d504      	bpl.n	80130ca <_vfiprintf_r+0x4e>
 80130c0:	f04f 30ff 	mov.w	r0, #4294967295
 80130c4:	b01d      	add	sp, #116	@ 0x74
 80130c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ca:	89ab      	ldrh	r3, [r5, #12]
 80130cc:	0598      	lsls	r0, r3, #22
 80130ce:	d4f7      	bmi.n	80130c0 <_vfiprintf_r+0x44>
 80130d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130d2:	f7fd fdab 	bl	8010c2c <__retarget_lock_release_recursive>
 80130d6:	e7f3      	b.n	80130c0 <_vfiprintf_r+0x44>
 80130d8:	2300      	movs	r3, #0
 80130da:	9309      	str	r3, [sp, #36]	@ 0x24
 80130dc:	2320      	movs	r3, #32
 80130de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80130e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80130e6:	2330      	movs	r3, #48	@ 0x30
 80130e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013298 <_vfiprintf_r+0x21c>
 80130ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80130f0:	f04f 0901 	mov.w	r9, #1
 80130f4:	4623      	mov	r3, r4
 80130f6:	469a      	mov	sl, r3
 80130f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130fc:	b10a      	cbz	r2, 8013102 <_vfiprintf_r+0x86>
 80130fe:	2a25      	cmp	r2, #37	@ 0x25
 8013100:	d1f9      	bne.n	80130f6 <_vfiprintf_r+0x7a>
 8013102:	ebba 0b04 	subs.w	fp, sl, r4
 8013106:	d00b      	beq.n	8013120 <_vfiprintf_r+0xa4>
 8013108:	465b      	mov	r3, fp
 801310a:	4622      	mov	r2, r4
 801310c:	4629      	mov	r1, r5
 801310e:	4630      	mov	r0, r6
 8013110:	f7ff ffa1 	bl	8013056 <__sfputs_r>
 8013114:	3001      	adds	r0, #1
 8013116:	f000 80a7 	beq.w	8013268 <_vfiprintf_r+0x1ec>
 801311a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801311c:	445a      	add	r2, fp
 801311e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013120:	f89a 3000 	ldrb.w	r3, [sl]
 8013124:	2b00      	cmp	r3, #0
 8013126:	f000 809f 	beq.w	8013268 <_vfiprintf_r+0x1ec>
 801312a:	2300      	movs	r3, #0
 801312c:	f04f 32ff 	mov.w	r2, #4294967295
 8013130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013134:	f10a 0a01 	add.w	sl, sl, #1
 8013138:	9304      	str	r3, [sp, #16]
 801313a:	9307      	str	r3, [sp, #28]
 801313c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013140:	931a      	str	r3, [sp, #104]	@ 0x68
 8013142:	4654      	mov	r4, sl
 8013144:	2205      	movs	r2, #5
 8013146:	f814 1b01 	ldrb.w	r1, [r4], #1
 801314a:	4853      	ldr	r0, [pc, #332]	@ (8013298 <_vfiprintf_r+0x21c>)
 801314c:	f7ed f850 	bl	80001f0 <memchr>
 8013150:	9a04      	ldr	r2, [sp, #16]
 8013152:	b9d8      	cbnz	r0, 801318c <_vfiprintf_r+0x110>
 8013154:	06d1      	lsls	r1, r2, #27
 8013156:	bf44      	itt	mi
 8013158:	2320      	movmi	r3, #32
 801315a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801315e:	0713      	lsls	r3, r2, #28
 8013160:	bf44      	itt	mi
 8013162:	232b      	movmi	r3, #43	@ 0x2b
 8013164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013168:	f89a 3000 	ldrb.w	r3, [sl]
 801316c:	2b2a      	cmp	r3, #42	@ 0x2a
 801316e:	d015      	beq.n	801319c <_vfiprintf_r+0x120>
 8013170:	9a07      	ldr	r2, [sp, #28]
 8013172:	4654      	mov	r4, sl
 8013174:	2000      	movs	r0, #0
 8013176:	f04f 0c0a 	mov.w	ip, #10
 801317a:	4621      	mov	r1, r4
 801317c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013180:	3b30      	subs	r3, #48	@ 0x30
 8013182:	2b09      	cmp	r3, #9
 8013184:	d94b      	bls.n	801321e <_vfiprintf_r+0x1a2>
 8013186:	b1b0      	cbz	r0, 80131b6 <_vfiprintf_r+0x13a>
 8013188:	9207      	str	r2, [sp, #28]
 801318a:	e014      	b.n	80131b6 <_vfiprintf_r+0x13a>
 801318c:	eba0 0308 	sub.w	r3, r0, r8
 8013190:	fa09 f303 	lsl.w	r3, r9, r3
 8013194:	4313      	orrs	r3, r2
 8013196:	9304      	str	r3, [sp, #16]
 8013198:	46a2      	mov	sl, r4
 801319a:	e7d2      	b.n	8013142 <_vfiprintf_r+0xc6>
 801319c:	9b03      	ldr	r3, [sp, #12]
 801319e:	1d19      	adds	r1, r3, #4
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	9103      	str	r1, [sp, #12]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	bfbb      	ittet	lt
 80131a8:	425b      	neglt	r3, r3
 80131aa:	f042 0202 	orrlt.w	r2, r2, #2
 80131ae:	9307      	strge	r3, [sp, #28]
 80131b0:	9307      	strlt	r3, [sp, #28]
 80131b2:	bfb8      	it	lt
 80131b4:	9204      	strlt	r2, [sp, #16]
 80131b6:	7823      	ldrb	r3, [r4, #0]
 80131b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80131ba:	d10a      	bne.n	80131d2 <_vfiprintf_r+0x156>
 80131bc:	7863      	ldrb	r3, [r4, #1]
 80131be:	2b2a      	cmp	r3, #42	@ 0x2a
 80131c0:	d132      	bne.n	8013228 <_vfiprintf_r+0x1ac>
 80131c2:	9b03      	ldr	r3, [sp, #12]
 80131c4:	1d1a      	adds	r2, r3, #4
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	9203      	str	r2, [sp, #12]
 80131ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80131ce:	3402      	adds	r4, #2
 80131d0:	9305      	str	r3, [sp, #20]
 80131d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80132a8 <_vfiprintf_r+0x22c>
 80131d6:	7821      	ldrb	r1, [r4, #0]
 80131d8:	2203      	movs	r2, #3
 80131da:	4650      	mov	r0, sl
 80131dc:	f7ed f808 	bl	80001f0 <memchr>
 80131e0:	b138      	cbz	r0, 80131f2 <_vfiprintf_r+0x176>
 80131e2:	9b04      	ldr	r3, [sp, #16]
 80131e4:	eba0 000a 	sub.w	r0, r0, sl
 80131e8:	2240      	movs	r2, #64	@ 0x40
 80131ea:	4082      	lsls	r2, r0
 80131ec:	4313      	orrs	r3, r2
 80131ee:	3401      	adds	r4, #1
 80131f0:	9304      	str	r3, [sp, #16]
 80131f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131f6:	4829      	ldr	r0, [pc, #164]	@ (801329c <_vfiprintf_r+0x220>)
 80131f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80131fc:	2206      	movs	r2, #6
 80131fe:	f7ec fff7 	bl	80001f0 <memchr>
 8013202:	2800      	cmp	r0, #0
 8013204:	d03f      	beq.n	8013286 <_vfiprintf_r+0x20a>
 8013206:	4b26      	ldr	r3, [pc, #152]	@ (80132a0 <_vfiprintf_r+0x224>)
 8013208:	bb1b      	cbnz	r3, 8013252 <_vfiprintf_r+0x1d6>
 801320a:	9b03      	ldr	r3, [sp, #12]
 801320c:	3307      	adds	r3, #7
 801320e:	f023 0307 	bic.w	r3, r3, #7
 8013212:	3308      	adds	r3, #8
 8013214:	9303      	str	r3, [sp, #12]
 8013216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013218:	443b      	add	r3, r7
 801321a:	9309      	str	r3, [sp, #36]	@ 0x24
 801321c:	e76a      	b.n	80130f4 <_vfiprintf_r+0x78>
 801321e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013222:	460c      	mov	r4, r1
 8013224:	2001      	movs	r0, #1
 8013226:	e7a8      	b.n	801317a <_vfiprintf_r+0xfe>
 8013228:	2300      	movs	r3, #0
 801322a:	3401      	adds	r4, #1
 801322c:	9305      	str	r3, [sp, #20]
 801322e:	4619      	mov	r1, r3
 8013230:	f04f 0c0a 	mov.w	ip, #10
 8013234:	4620      	mov	r0, r4
 8013236:	f810 2b01 	ldrb.w	r2, [r0], #1
 801323a:	3a30      	subs	r2, #48	@ 0x30
 801323c:	2a09      	cmp	r2, #9
 801323e:	d903      	bls.n	8013248 <_vfiprintf_r+0x1cc>
 8013240:	2b00      	cmp	r3, #0
 8013242:	d0c6      	beq.n	80131d2 <_vfiprintf_r+0x156>
 8013244:	9105      	str	r1, [sp, #20]
 8013246:	e7c4      	b.n	80131d2 <_vfiprintf_r+0x156>
 8013248:	fb0c 2101 	mla	r1, ip, r1, r2
 801324c:	4604      	mov	r4, r0
 801324e:	2301      	movs	r3, #1
 8013250:	e7f0      	b.n	8013234 <_vfiprintf_r+0x1b8>
 8013252:	ab03      	add	r3, sp, #12
 8013254:	9300      	str	r3, [sp, #0]
 8013256:	462a      	mov	r2, r5
 8013258:	4b12      	ldr	r3, [pc, #72]	@ (80132a4 <_vfiprintf_r+0x228>)
 801325a:	a904      	add	r1, sp, #16
 801325c:	4630      	mov	r0, r6
 801325e:	f7fc fb4f 	bl	800f900 <_printf_float>
 8013262:	4607      	mov	r7, r0
 8013264:	1c78      	adds	r0, r7, #1
 8013266:	d1d6      	bne.n	8013216 <_vfiprintf_r+0x19a>
 8013268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801326a:	07d9      	lsls	r1, r3, #31
 801326c:	d405      	bmi.n	801327a <_vfiprintf_r+0x1fe>
 801326e:	89ab      	ldrh	r3, [r5, #12]
 8013270:	059a      	lsls	r2, r3, #22
 8013272:	d402      	bmi.n	801327a <_vfiprintf_r+0x1fe>
 8013274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013276:	f7fd fcd9 	bl	8010c2c <__retarget_lock_release_recursive>
 801327a:	89ab      	ldrh	r3, [r5, #12]
 801327c:	065b      	lsls	r3, r3, #25
 801327e:	f53f af1f 	bmi.w	80130c0 <_vfiprintf_r+0x44>
 8013282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013284:	e71e      	b.n	80130c4 <_vfiprintf_r+0x48>
 8013286:	ab03      	add	r3, sp, #12
 8013288:	9300      	str	r3, [sp, #0]
 801328a:	462a      	mov	r2, r5
 801328c:	4b05      	ldr	r3, [pc, #20]	@ (80132a4 <_vfiprintf_r+0x228>)
 801328e:	a904      	add	r1, sp, #16
 8013290:	4630      	mov	r0, r6
 8013292:	f7fc fdcd 	bl	800fe30 <_printf_i>
 8013296:	e7e4      	b.n	8013262 <_vfiprintf_r+0x1e6>
 8013298:	0801433c 	.word	0x0801433c
 801329c:	08014346 	.word	0x08014346
 80132a0:	0800f901 	.word	0x0800f901
 80132a4:	08013057 	.word	0x08013057
 80132a8:	08014342 	.word	0x08014342

080132ac <_scanf_chars>:
 80132ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132b0:	4615      	mov	r5, r2
 80132b2:	688a      	ldr	r2, [r1, #8]
 80132b4:	4680      	mov	r8, r0
 80132b6:	460c      	mov	r4, r1
 80132b8:	b932      	cbnz	r2, 80132c8 <_scanf_chars+0x1c>
 80132ba:	698a      	ldr	r2, [r1, #24]
 80132bc:	2a00      	cmp	r2, #0
 80132be:	bf14      	ite	ne
 80132c0:	f04f 32ff 	movne.w	r2, #4294967295
 80132c4:	2201      	moveq	r2, #1
 80132c6:	608a      	str	r2, [r1, #8]
 80132c8:	6822      	ldr	r2, [r4, #0]
 80132ca:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801335c <_scanf_chars+0xb0>
 80132ce:	06d1      	lsls	r1, r2, #27
 80132d0:	bf5f      	itttt	pl
 80132d2:	681a      	ldrpl	r2, [r3, #0]
 80132d4:	1d11      	addpl	r1, r2, #4
 80132d6:	6019      	strpl	r1, [r3, #0]
 80132d8:	6816      	ldrpl	r6, [r2, #0]
 80132da:	2700      	movs	r7, #0
 80132dc:	69a0      	ldr	r0, [r4, #24]
 80132de:	b188      	cbz	r0, 8013304 <_scanf_chars+0x58>
 80132e0:	2801      	cmp	r0, #1
 80132e2:	d107      	bne.n	80132f4 <_scanf_chars+0x48>
 80132e4:	682b      	ldr	r3, [r5, #0]
 80132e6:	781a      	ldrb	r2, [r3, #0]
 80132e8:	6963      	ldr	r3, [r4, #20]
 80132ea:	5c9b      	ldrb	r3, [r3, r2]
 80132ec:	b953      	cbnz	r3, 8013304 <_scanf_chars+0x58>
 80132ee:	2f00      	cmp	r7, #0
 80132f0:	d031      	beq.n	8013356 <_scanf_chars+0xaa>
 80132f2:	e022      	b.n	801333a <_scanf_chars+0x8e>
 80132f4:	2802      	cmp	r0, #2
 80132f6:	d120      	bne.n	801333a <_scanf_chars+0x8e>
 80132f8:	682b      	ldr	r3, [r5, #0]
 80132fa:	781b      	ldrb	r3, [r3, #0]
 80132fc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013300:	071b      	lsls	r3, r3, #28
 8013302:	d41a      	bmi.n	801333a <_scanf_chars+0x8e>
 8013304:	6823      	ldr	r3, [r4, #0]
 8013306:	06da      	lsls	r2, r3, #27
 8013308:	bf5e      	ittt	pl
 801330a:	682b      	ldrpl	r3, [r5, #0]
 801330c:	781b      	ldrbpl	r3, [r3, #0]
 801330e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013312:	682a      	ldr	r2, [r5, #0]
 8013314:	686b      	ldr	r3, [r5, #4]
 8013316:	3201      	adds	r2, #1
 8013318:	602a      	str	r2, [r5, #0]
 801331a:	68a2      	ldr	r2, [r4, #8]
 801331c:	3b01      	subs	r3, #1
 801331e:	3a01      	subs	r2, #1
 8013320:	606b      	str	r3, [r5, #4]
 8013322:	3701      	adds	r7, #1
 8013324:	60a2      	str	r2, [r4, #8]
 8013326:	b142      	cbz	r2, 801333a <_scanf_chars+0x8e>
 8013328:	2b00      	cmp	r3, #0
 801332a:	dcd7      	bgt.n	80132dc <_scanf_chars+0x30>
 801332c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013330:	4629      	mov	r1, r5
 8013332:	4640      	mov	r0, r8
 8013334:	4798      	blx	r3
 8013336:	2800      	cmp	r0, #0
 8013338:	d0d0      	beq.n	80132dc <_scanf_chars+0x30>
 801333a:	6823      	ldr	r3, [r4, #0]
 801333c:	f013 0310 	ands.w	r3, r3, #16
 8013340:	d105      	bne.n	801334e <_scanf_chars+0xa2>
 8013342:	68e2      	ldr	r2, [r4, #12]
 8013344:	3201      	adds	r2, #1
 8013346:	60e2      	str	r2, [r4, #12]
 8013348:	69a2      	ldr	r2, [r4, #24]
 801334a:	b102      	cbz	r2, 801334e <_scanf_chars+0xa2>
 801334c:	7033      	strb	r3, [r6, #0]
 801334e:	6923      	ldr	r3, [r4, #16]
 8013350:	443b      	add	r3, r7
 8013352:	6123      	str	r3, [r4, #16]
 8013354:	2000      	movs	r0, #0
 8013356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801335a:	bf00      	nop
 801335c:	080143b9 	.word	0x080143b9

08013360 <_scanf_i>:
 8013360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013364:	4698      	mov	r8, r3
 8013366:	4b74      	ldr	r3, [pc, #464]	@ (8013538 <_scanf_i+0x1d8>)
 8013368:	460c      	mov	r4, r1
 801336a:	4682      	mov	sl, r0
 801336c:	4616      	mov	r6, r2
 801336e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013372:	b087      	sub	sp, #28
 8013374:	ab03      	add	r3, sp, #12
 8013376:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801337a:	4b70      	ldr	r3, [pc, #448]	@ (801353c <_scanf_i+0x1dc>)
 801337c:	69a1      	ldr	r1, [r4, #24]
 801337e:	4a70      	ldr	r2, [pc, #448]	@ (8013540 <_scanf_i+0x1e0>)
 8013380:	2903      	cmp	r1, #3
 8013382:	bf08      	it	eq
 8013384:	461a      	moveq	r2, r3
 8013386:	68a3      	ldr	r3, [r4, #8]
 8013388:	9201      	str	r2, [sp, #4]
 801338a:	1e5a      	subs	r2, r3, #1
 801338c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013390:	bf88      	it	hi
 8013392:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013396:	4627      	mov	r7, r4
 8013398:	bf82      	ittt	hi
 801339a:	eb03 0905 	addhi.w	r9, r3, r5
 801339e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80133a2:	60a3      	strhi	r3, [r4, #8]
 80133a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80133a8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80133ac:	bf98      	it	ls
 80133ae:	f04f 0900 	movls.w	r9, #0
 80133b2:	6023      	str	r3, [r4, #0]
 80133b4:	463d      	mov	r5, r7
 80133b6:	f04f 0b00 	mov.w	fp, #0
 80133ba:	6831      	ldr	r1, [r6, #0]
 80133bc:	ab03      	add	r3, sp, #12
 80133be:	7809      	ldrb	r1, [r1, #0]
 80133c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80133c4:	2202      	movs	r2, #2
 80133c6:	f7ec ff13 	bl	80001f0 <memchr>
 80133ca:	b328      	cbz	r0, 8013418 <_scanf_i+0xb8>
 80133cc:	f1bb 0f01 	cmp.w	fp, #1
 80133d0:	d159      	bne.n	8013486 <_scanf_i+0x126>
 80133d2:	6862      	ldr	r2, [r4, #4]
 80133d4:	b92a      	cbnz	r2, 80133e2 <_scanf_i+0x82>
 80133d6:	6822      	ldr	r2, [r4, #0]
 80133d8:	2108      	movs	r1, #8
 80133da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80133de:	6061      	str	r1, [r4, #4]
 80133e0:	6022      	str	r2, [r4, #0]
 80133e2:	6822      	ldr	r2, [r4, #0]
 80133e4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80133e8:	6022      	str	r2, [r4, #0]
 80133ea:	68a2      	ldr	r2, [r4, #8]
 80133ec:	1e51      	subs	r1, r2, #1
 80133ee:	60a1      	str	r1, [r4, #8]
 80133f0:	b192      	cbz	r2, 8013418 <_scanf_i+0xb8>
 80133f2:	6832      	ldr	r2, [r6, #0]
 80133f4:	1c51      	adds	r1, r2, #1
 80133f6:	6031      	str	r1, [r6, #0]
 80133f8:	7812      	ldrb	r2, [r2, #0]
 80133fa:	f805 2b01 	strb.w	r2, [r5], #1
 80133fe:	6872      	ldr	r2, [r6, #4]
 8013400:	3a01      	subs	r2, #1
 8013402:	2a00      	cmp	r2, #0
 8013404:	6072      	str	r2, [r6, #4]
 8013406:	dc07      	bgt.n	8013418 <_scanf_i+0xb8>
 8013408:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801340c:	4631      	mov	r1, r6
 801340e:	4650      	mov	r0, sl
 8013410:	4790      	blx	r2
 8013412:	2800      	cmp	r0, #0
 8013414:	f040 8085 	bne.w	8013522 <_scanf_i+0x1c2>
 8013418:	f10b 0b01 	add.w	fp, fp, #1
 801341c:	f1bb 0f03 	cmp.w	fp, #3
 8013420:	d1cb      	bne.n	80133ba <_scanf_i+0x5a>
 8013422:	6863      	ldr	r3, [r4, #4]
 8013424:	b90b      	cbnz	r3, 801342a <_scanf_i+0xca>
 8013426:	230a      	movs	r3, #10
 8013428:	6063      	str	r3, [r4, #4]
 801342a:	6863      	ldr	r3, [r4, #4]
 801342c:	4945      	ldr	r1, [pc, #276]	@ (8013544 <_scanf_i+0x1e4>)
 801342e:	6960      	ldr	r0, [r4, #20]
 8013430:	1ac9      	subs	r1, r1, r3
 8013432:	f000 f997 	bl	8013764 <__sccl>
 8013436:	f04f 0b00 	mov.w	fp, #0
 801343a:	68a3      	ldr	r3, [r4, #8]
 801343c:	6822      	ldr	r2, [r4, #0]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d03d      	beq.n	80134be <_scanf_i+0x15e>
 8013442:	6831      	ldr	r1, [r6, #0]
 8013444:	6960      	ldr	r0, [r4, #20]
 8013446:	f891 c000 	ldrb.w	ip, [r1]
 801344a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801344e:	2800      	cmp	r0, #0
 8013450:	d035      	beq.n	80134be <_scanf_i+0x15e>
 8013452:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8013456:	d124      	bne.n	80134a2 <_scanf_i+0x142>
 8013458:	0510      	lsls	r0, r2, #20
 801345a:	d522      	bpl.n	80134a2 <_scanf_i+0x142>
 801345c:	f10b 0b01 	add.w	fp, fp, #1
 8013460:	f1b9 0f00 	cmp.w	r9, #0
 8013464:	d003      	beq.n	801346e <_scanf_i+0x10e>
 8013466:	3301      	adds	r3, #1
 8013468:	f109 39ff 	add.w	r9, r9, #4294967295
 801346c:	60a3      	str	r3, [r4, #8]
 801346e:	6873      	ldr	r3, [r6, #4]
 8013470:	3b01      	subs	r3, #1
 8013472:	2b00      	cmp	r3, #0
 8013474:	6073      	str	r3, [r6, #4]
 8013476:	dd1b      	ble.n	80134b0 <_scanf_i+0x150>
 8013478:	6833      	ldr	r3, [r6, #0]
 801347a:	3301      	adds	r3, #1
 801347c:	6033      	str	r3, [r6, #0]
 801347e:	68a3      	ldr	r3, [r4, #8]
 8013480:	3b01      	subs	r3, #1
 8013482:	60a3      	str	r3, [r4, #8]
 8013484:	e7d9      	b.n	801343a <_scanf_i+0xda>
 8013486:	f1bb 0f02 	cmp.w	fp, #2
 801348a:	d1ae      	bne.n	80133ea <_scanf_i+0x8a>
 801348c:	6822      	ldr	r2, [r4, #0]
 801348e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8013492:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8013496:	d1c4      	bne.n	8013422 <_scanf_i+0xc2>
 8013498:	2110      	movs	r1, #16
 801349a:	6061      	str	r1, [r4, #4]
 801349c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80134a0:	e7a2      	b.n	80133e8 <_scanf_i+0x88>
 80134a2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80134a6:	6022      	str	r2, [r4, #0]
 80134a8:	780b      	ldrb	r3, [r1, #0]
 80134aa:	f805 3b01 	strb.w	r3, [r5], #1
 80134ae:	e7de      	b.n	801346e <_scanf_i+0x10e>
 80134b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80134b4:	4631      	mov	r1, r6
 80134b6:	4650      	mov	r0, sl
 80134b8:	4798      	blx	r3
 80134ba:	2800      	cmp	r0, #0
 80134bc:	d0df      	beq.n	801347e <_scanf_i+0x11e>
 80134be:	6823      	ldr	r3, [r4, #0]
 80134c0:	05d9      	lsls	r1, r3, #23
 80134c2:	d50d      	bpl.n	80134e0 <_scanf_i+0x180>
 80134c4:	42bd      	cmp	r5, r7
 80134c6:	d909      	bls.n	80134dc <_scanf_i+0x17c>
 80134c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80134cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80134d0:	4632      	mov	r2, r6
 80134d2:	4650      	mov	r0, sl
 80134d4:	4798      	blx	r3
 80134d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80134da:	464d      	mov	r5, r9
 80134dc:	42bd      	cmp	r5, r7
 80134de:	d028      	beq.n	8013532 <_scanf_i+0x1d2>
 80134e0:	6822      	ldr	r2, [r4, #0]
 80134e2:	f012 0210 	ands.w	r2, r2, #16
 80134e6:	d113      	bne.n	8013510 <_scanf_i+0x1b0>
 80134e8:	702a      	strb	r2, [r5, #0]
 80134ea:	6863      	ldr	r3, [r4, #4]
 80134ec:	9e01      	ldr	r6, [sp, #4]
 80134ee:	4639      	mov	r1, r7
 80134f0:	4650      	mov	r0, sl
 80134f2:	47b0      	blx	r6
 80134f4:	f8d8 3000 	ldr.w	r3, [r8]
 80134f8:	6821      	ldr	r1, [r4, #0]
 80134fa:	1d1a      	adds	r2, r3, #4
 80134fc:	f8c8 2000 	str.w	r2, [r8]
 8013500:	f011 0f20 	tst.w	r1, #32
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	d00f      	beq.n	8013528 <_scanf_i+0x1c8>
 8013508:	6018      	str	r0, [r3, #0]
 801350a:	68e3      	ldr	r3, [r4, #12]
 801350c:	3301      	adds	r3, #1
 801350e:	60e3      	str	r3, [r4, #12]
 8013510:	6923      	ldr	r3, [r4, #16]
 8013512:	1bed      	subs	r5, r5, r7
 8013514:	445d      	add	r5, fp
 8013516:	442b      	add	r3, r5
 8013518:	6123      	str	r3, [r4, #16]
 801351a:	2000      	movs	r0, #0
 801351c:	b007      	add	sp, #28
 801351e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013522:	f04f 0b00 	mov.w	fp, #0
 8013526:	e7ca      	b.n	80134be <_scanf_i+0x15e>
 8013528:	07ca      	lsls	r2, r1, #31
 801352a:	bf4c      	ite	mi
 801352c:	8018      	strhmi	r0, [r3, #0]
 801352e:	6018      	strpl	r0, [r3, #0]
 8013530:	e7eb      	b.n	801350a <_scanf_i+0x1aa>
 8013532:	2001      	movs	r0, #1
 8013534:	e7f2      	b.n	801351c <_scanf_i+0x1bc>
 8013536:	bf00      	nop
 8013538:	08014094 	.word	0x08014094
 801353c:	0800f7a9 	.word	0x0800f7a9
 8013540:	08013aad 	.word	0x08013aad
 8013544:	0801435d 	.word	0x0801435d

08013548 <__sflush_r>:
 8013548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801354c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013550:	0716      	lsls	r6, r2, #28
 8013552:	4605      	mov	r5, r0
 8013554:	460c      	mov	r4, r1
 8013556:	d454      	bmi.n	8013602 <__sflush_r+0xba>
 8013558:	684b      	ldr	r3, [r1, #4]
 801355a:	2b00      	cmp	r3, #0
 801355c:	dc02      	bgt.n	8013564 <__sflush_r+0x1c>
 801355e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013560:	2b00      	cmp	r3, #0
 8013562:	dd48      	ble.n	80135f6 <__sflush_r+0xae>
 8013564:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013566:	2e00      	cmp	r6, #0
 8013568:	d045      	beq.n	80135f6 <__sflush_r+0xae>
 801356a:	2300      	movs	r3, #0
 801356c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013570:	682f      	ldr	r7, [r5, #0]
 8013572:	6a21      	ldr	r1, [r4, #32]
 8013574:	602b      	str	r3, [r5, #0]
 8013576:	d030      	beq.n	80135da <__sflush_r+0x92>
 8013578:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801357a:	89a3      	ldrh	r3, [r4, #12]
 801357c:	0759      	lsls	r1, r3, #29
 801357e:	d505      	bpl.n	801358c <__sflush_r+0x44>
 8013580:	6863      	ldr	r3, [r4, #4]
 8013582:	1ad2      	subs	r2, r2, r3
 8013584:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013586:	b10b      	cbz	r3, 801358c <__sflush_r+0x44>
 8013588:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801358a:	1ad2      	subs	r2, r2, r3
 801358c:	2300      	movs	r3, #0
 801358e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013590:	6a21      	ldr	r1, [r4, #32]
 8013592:	4628      	mov	r0, r5
 8013594:	47b0      	blx	r6
 8013596:	1c43      	adds	r3, r0, #1
 8013598:	89a3      	ldrh	r3, [r4, #12]
 801359a:	d106      	bne.n	80135aa <__sflush_r+0x62>
 801359c:	6829      	ldr	r1, [r5, #0]
 801359e:	291d      	cmp	r1, #29
 80135a0:	d82b      	bhi.n	80135fa <__sflush_r+0xb2>
 80135a2:	4a2a      	ldr	r2, [pc, #168]	@ (801364c <__sflush_r+0x104>)
 80135a4:	40ca      	lsrs	r2, r1
 80135a6:	07d6      	lsls	r6, r2, #31
 80135a8:	d527      	bpl.n	80135fa <__sflush_r+0xb2>
 80135aa:	2200      	movs	r2, #0
 80135ac:	6062      	str	r2, [r4, #4]
 80135ae:	04d9      	lsls	r1, r3, #19
 80135b0:	6922      	ldr	r2, [r4, #16]
 80135b2:	6022      	str	r2, [r4, #0]
 80135b4:	d504      	bpl.n	80135c0 <__sflush_r+0x78>
 80135b6:	1c42      	adds	r2, r0, #1
 80135b8:	d101      	bne.n	80135be <__sflush_r+0x76>
 80135ba:	682b      	ldr	r3, [r5, #0]
 80135bc:	b903      	cbnz	r3, 80135c0 <__sflush_r+0x78>
 80135be:	6560      	str	r0, [r4, #84]	@ 0x54
 80135c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80135c2:	602f      	str	r7, [r5, #0]
 80135c4:	b1b9      	cbz	r1, 80135f6 <__sflush_r+0xae>
 80135c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80135ca:	4299      	cmp	r1, r3
 80135cc:	d002      	beq.n	80135d4 <__sflush_r+0x8c>
 80135ce:	4628      	mov	r0, r5
 80135d0:	f7fe f9b6 	bl	8011940 <_free_r>
 80135d4:	2300      	movs	r3, #0
 80135d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80135d8:	e00d      	b.n	80135f6 <__sflush_r+0xae>
 80135da:	2301      	movs	r3, #1
 80135dc:	4628      	mov	r0, r5
 80135de:	47b0      	blx	r6
 80135e0:	4602      	mov	r2, r0
 80135e2:	1c50      	adds	r0, r2, #1
 80135e4:	d1c9      	bne.n	801357a <__sflush_r+0x32>
 80135e6:	682b      	ldr	r3, [r5, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d0c6      	beq.n	801357a <__sflush_r+0x32>
 80135ec:	2b1d      	cmp	r3, #29
 80135ee:	d001      	beq.n	80135f4 <__sflush_r+0xac>
 80135f0:	2b16      	cmp	r3, #22
 80135f2:	d11e      	bne.n	8013632 <__sflush_r+0xea>
 80135f4:	602f      	str	r7, [r5, #0]
 80135f6:	2000      	movs	r0, #0
 80135f8:	e022      	b.n	8013640 <__sflush_r+0xf8>
 80135fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80135fe:	b21b      	sxth	r3, r3
 8013600:	e01b      	b.n	801363a <__sflush_r+0xf2>
 8013602:	690f      	ldr	r7, [r1, #16]
 8013604:	2f00      	cmp	r7, #0
 8013606:	d0f6      	beq.n	80135f6 <__sflush_r+0xae>
 8013608:	0793      	lsls	r3, r2, #30
 801360a:	680e      	ldr	r6, [r1, #0]
 801360c:	bf08      	it	eq
 801360e:	694b      	ldreq	r3, [r1, #20]
 8013610:	600f      	str	r7, [r1, #0]
 8013612:	bf18      	it	ne
 8013614:	2300      	movne	r3, #0
 8013616:	eba6 0807 	sub.w	r8, r6, r7
 801361a:	608b      	str	r3, [r1, #8]
 801361c:	f1b8 0f00 	cmp.w	r8, #0
 8013620:	dde9      	ble.n	80135f6 <__sflush_r+0xae>
 8013622:	6a21      	ldr	r1, [r4, #32]
 8013624:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013626:	4643      	mov	r3, r8
 8013628:	463a      	mov	r2, r7
 801362a:	4628      	mov	r0, r5
 801362c:	47b0      	blx	r6
 801362e:	2800      	cmp	r0, #0
 8013630:	dc08      	bgt.n	8013644 <__sflush_r+0xfc>
 8013632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801363a:	81a3      	strh	r3, [r4, #12]
 801363c:	f04f 30ff 	mov.w	r0, #4294967295
 8013640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013644:	4407      	add	r7, r0
 8013646:	eba8 0800 	sub.w	r8, r8, r0
 801364a:	e7e7      	b.n	801361c <__sflush_r+0xd4>
 801364c:	20400001 	.word	0x20400001

08013650 <_fflush_r>:
 8013650:	b538      	push	{r3, r4, r5, lr}
 8013652:	690b      	ldr	r3, [r1, #16]
 8013654:	4605      	mov	r5, r0
 8013656:	460c      	mov	r4, r1
 8013658:	b913      	cbnz	r3, 8013660 <_fflush_r+0x10>
 801365a:	2500      	movs	r5, #0
 801365c:	4628      	mov	r0, r5
 801365e:	bd38      	pop	{r3, r4, r5, pc}
 8013660:	b118      	cbz	r0, 801366a <_fflush_r+0x1a>
 8013662:	6a03      	ldr	r3, [r0, #32]
 8013664:	b90b      	cbnz	r3, 801366a <_fflush_r+0x1a>
 8013666:	f7fc ff9b 	bl	80105a0 <__sinit>
 801366a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d0f3      	beq.n	801365a <_fflush_r+0xa>
 8013672:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013674:	07d0      	lsls	r0, r2, #31
 8013676:	d404      	bmi.n	8013682 <_fflush_r+0x32>
 8013678:	0599      	lsls	r1, r3, #22
 801367a:	d402      	bmi.n	8013682 <_fflush_r+0x32>
 801367c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801367e:	f7fd fad4 	bl	8010c2a <__retarget_lock_acquire_recursive>
 8013682:	4628      	mov	r0, r5
 8013684:	4621      	mov	r1, r4
 8013686:	f7ff ff5f 	bl	8013548 <__sflush_r>
 801368a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801368c:	07da      	lsls	r2, r3, #31
 801368e:	4605      	mov	r5, r0
 8013690:	d4e4      	bmi.n	801365c <_fflush_r+0xc>
 8013692:	89a3      	ldrh	r3, [r4, #12]
 8013694:	059b      	lsls	r3, r3, #22
 8013696:	d4e1      	bmi.n	801365c <_fflush_r+0xc>
 8013698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801369a:	f7fd fac7 	bl	8010c2c <__retarget_lock_release_recursive>
 801369e:	e7dd      	b.n	801365c <_fflush_r+0xc>

080136a0 <__swhatbuf_r>:
 80136a0:	b570      	push	{r4, r5, r6, lr}
 80136a2:	460c      	mov	r4, r1
 80136a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136a8:	2900      	cmp	r1, #0
 80136aa:	b096      	sub	sp, #88	@ 0x58
 80136ac:	4615      	mov	r5, r2
 80136ae:	461e      	mov	r6, r3
 80136b0:	da0d      	bge.n	80136ce <__swhatbuf_r+0x2e>
 80136b2:	89a3      	ldrh	r3, [r4, #12]
 80136b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80136b8:	f04f 0100 	mov.w	r1, #0
 80136bc:	bf14      	ite	ne
 80136be:	2340      	movne	r3, #64	@ 0x40
 80136c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80136c4:	2000      	movs	r0, #0
 80136c6:	6031      	str	r1, [r6, #0]
 80136c8:	602b      	str	r3, [r5, #0]
 80136ca:	b016      	add	sp, #88	@ 0x58
 80136cc:	bd70      	pop	{r4, r5, r6, pc}
 80136ce:	466a      	mov	r2, sp
 80136d0:	f000 f906 	bl	80138e0 <_fstat_r>
 80136d4:	2800      	cmp	r0, #0
 80136d6:	dbec      	blt.n	80136b2 <__swhatbuf_r+0x12>
 80136d8:	9901      	ldr	r1, [sp, #4]
 80136da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80136de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80136e2:	4259      	negs	r1, r3
 80136e4:	4159      	adcs	r1, r3
 80136e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80136ea:	e7eb      	b.n	80136c4 <__swhatbuf_r+0x24>

080136ec <__smakebuf_r>:
 80136ec:	898b      	ldrh	r3, [r1, #12]
 80136ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80136f0:	079d      	lsls	r5, r3, #30
 80136f2:	4606      	mov	r6, r0
 80136f4:	460c      	mov	r4, r1
 80136f6:	d507      	bpl.n	8013708 <__smakebuf_r+0x1c>
 80136f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80136fc:	6023      	str	r3, [r4, #0]
 80136fe:	6123      	str	r3, [r4, #16]
 8013700:	2301      	movs	r3, #1
 8013702:	6163      	str	r3, [r4, #20]
 8013704:	b003      	add	sp, #12
 8013706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013708:	ab01      	add	r3, sp, #4
 801370a:	466a      	mov	r2, sp
 801370c:	f7ff ffc8 	bl	80136a0 <__swhatbuf_r>
 8013710:	9f00      	ldr	r7, [sp, #0]
 8013712:	4605      	mov	r5, r0
 8013714:	4639      	mov	r1, r7
 8013716:	4630      	mov	r0, r6
 8013718:	f7fb f92a 	bl	800e970 <_malloc_r>
 801371c:	b948      	cbnz	r0, 8013732 <__smakebuf_r+0x46>
 801371e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013722:	059a      	lsls	r2, r3, #22
 8013724:	d4ee      	bmi.n	8013704 <__smakebuf_r+0x18>
 8013726:	f023 0303 	bic.w	r3, r3, #3
 801372a:	f043 0302 	orr.w	r3, r3, #2
 801372e:	81a3      	strh	r3, [r4, #12]
 8013730:	e7e2      	b.n	80136f8 <__smakebuf_r+0xc>
 8013732:	89a3      	ldrh	r3, [r4, #12]
 8013734:	6020      	str	r0, [r4, #0]
 8013736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801373a:	81a3      	strh	r3, [r4, #12]
 801373c:	9b01      	ldr	r3, [sp, #4]
 801373e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013742:	b15b      	cbz	r3, 801375c <__smakebuf_r+0x70>
 8013744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013748:	4630      	mov	r0, r6
 801374a:	f000 f8db 	bl	8013904 <_isatty_r>
 801374e:	b128      	cbz	r0, 801375c <__smakebuf_r+0x70>
 8013750:	89a3      	ldrh	r3, [r4, #12]
 8013752:	f023 0303 	bic.w	r3, r3, #3
 8013756:	f043 0301 	orr.w	r3, r3, #1
 801375a:	81a3      	strh	r3, [r4, #12]
 801375c:	89a3      	ldrh	r3, [r4, #12]
 801375e:	431d      	orrs	r5, r3
 8013760:	81a5      	strh	r5, [r4, #12]
 8013762:	e7cf      	b.n	8013704 <__smakebuf_r+0x18>

08013764 <__sccl>:
 8013764:	b570      	push	{r4, r5, r6, lr}
 8013766:	780b      	ldrb	r3, [r1, #0]
 8013768:	4604      	mov	r4, r0
 801376a:	2b5e      	cmp	r3, #94	@ 0x5e
 801376c:	bf0b      	itete	eq
 801376e:	784b      	ldrbeq	r3, [r1, #1]
 8013770:	1c4a      	addne	r2, r1, #1
 8013772:	1c8a      	addeq	r2, r1, #2
 8013774:	2100      	movne	r1, #0
 8013776:	bf08      	it	eq
 8013778:	2101      	moveq	r1, #1
 801377a:	3801      	subs	r0, #1
 801377c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8013780:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013784:	42a8      	cmp	r0, r5
 8013786:	d1fb      	bne.n	8013780 <__sccl+0x1c>
 8013788:	b90b      	cbnz	r3, 801378e <__sccl+0x2a>
 801378a:	1e50      	subs	r0, r2, #1
 801378c:	bd70      	pop	{r4, r5, r6, pc}
 801378e:	f081 0101 	eor.w	r1, r1, #1
 8013792:	54e1      	strb	r1, [r4, r3]
 8013794:	4610      	mov	r0, r2
 8013796:	4602      	mov	r2, r0
 8013798:	f812 5b01 	ldrb.w	r5, [r2], #1
 801379c:	2d2d      	cmp	r5, #45	@ 0x2d
 801379e:	d005      	beq.n	80137ac <__sccl+0x48>
 80137a0:	2d5d      	cmp	r5, #93	@ 0x5d
 80137a2:	d016      	beq.n	80137d2 <__sccl+0x6e>
 80137a4:	2d00      	cmp	r5, #0
 80137a6:	d0f1      	beq.n	801378c <__sccl+0x28>
 80137a8:	462b      	mov	r3, r5
 80137aa:	e7f2      	b.n	8013792 <__sccl+0x2e>
 80137ac:	7846      	ldrb	r6, [r0, #1]
 80137ae:	2e5d      	cmp	r6, #93	@ 0x5d
 80137b0:	d0fa      	beq.n	80137a8 <__sccl+0x44>
 80137b2:	42b3      	cmp	r3, r6
 80137b4:	dcf8      	bgt.n	80137a8 <__sccl+0x44>
 80137b6:	3002      	adds	r0, #2
 80137b8:	461a      	mov	r2, r3
 80137ba:	3201      	adds	r2, #1
 80137bc:	4296      	cmp	r6, r2
 80137be:	54a1      	strb	r1, [r4, r2]
 80137c0:	dcfb      	bgt.n	80137ba <__sccl+0x56>
 80137c2:	1af2      	subs	r2, r6, r3
 80137c4:	3a01      	subs	r2, #1
 80137c6:	1c5d      	adds	r5, r3, #1
 80137c8:	42b3      	cmp	r3, r6
 80137ca:	bfa8      	it	ge
 80137cc:	2200      	movge	r2, #0
 80137ce:	18ab      	adds	r3, r5, r2
 80137d0:	e7e1      	b.n	8013796 <__sccl+0x32>
 80137d2:	4610      	mov	r0, r2
 80137d4:	e7da      	b.n	801378c <__sccl+0x28>

080137d6 <__submore>:
 80137d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137da:	460c      	mov	r4, r1
 80137dc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80137de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80137e2:	4299      	cmp	r1, r3
 80137e4:	d11d      	bne.n	8013822 <__submore+0x4c>
 80137e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80137ea:	f7fb f8c1 	bl	800e970 <_malloc_r>
 80137ee:	b918      	cbnz	r0, 80137f8 <__submore+0x22>
 80137f0:	f04f 30ff 	mov.w	r0, #4294967295
 80137f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80137fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80137fe:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8013802:	6360      	str	r0, [r4, #52]	@ 0x34
 8013804:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8013808:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801380c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8013810:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013814:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8013818:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801381c:	6020      	str	r0, [r4, #0]
 801381e:	2000      	movs	r0, #0
 8013820:	e7e8      	b.n	80137f4 <__submore+0x1e>
 8013822:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8013824:	0077      	lsls	r7, r6, #1
 8013826:	463a      	mov	r2, r7
 8013828:	f000 f8a4 	bl	8013974 <_realloc_r>
 801382c:	4605      	mov	r5, r0
 801382e:	2800      	cmp	r0, #0
 8013830:	d0de      	beq.n	80137f0 <__submore+0x1a>
 8013832:	eb00 0806 	add.w	r8, r0, r6
 8013836:	4601      	mov	r1, r0
 8013838:	4632      	mov	r2, r6
 801383a:	4640      	mov	r0, r8
 801383c:	f7fd f9ff 	bl	8010c3e <memcpy>
 8013840:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8013844:	f8c4 8000 	str.w	r8, [r4]
 8013848:	e7e9      	b.n	801381e <__submore+0x48>

0801384a <memmove>:
 801384a:	4288      	cmp	r0, r1
 801384c:	b510      	push	{r4, lr}
 801384e:	eb01 0402 	add.w	r4, r1, r2
 8013852:	d902      	bls.n	801385a <memmove+0x10>
 8013854:	4284      	cmp	r4, r0
 8013856:	4623      	mov	r3, r4
 8013858:	d807      	bhi.n	801386a <memmove+0x20>
 801385a:	1e43      	subs	r3, r0, #1
 801385c:	42a1      	cmp	r1, r4
 801385e:	d008      	beq.n	8013872 <memmove+0x28>
 8013860:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013864:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013868:	e7f8      	b.n	801385c <memmove+0x12>
 801386a:	4402      	add	r2, r0
 801386c:	4601      	mov	r1, r0
 801386e:	428a      	cmp	r2, r1
 8013870:	d100      	bne.n	8013874 <memmove+0x2a>
 8013872:	bd10      	pop	{r4, pc}
 8013874:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013878:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801387c:	e7f7      	b.n	801386e <memmove+0x24>

0801387e <_raise_r>:
 801387e:	291f      	cmp	r1, #31
 8013880:	b538      	push	{r3, r4, r5, lr}
 8013882:	4605      	mov	r5, r0
 8013884:	460c      	mov	r4, r1
 8013886:	d904      	bls.n	8013892 <_raise_r+0x14>
 8013888:	2316      	movs	r3, #22
 801388a:	6003      	str	r3, [r0, #0]
 801388c:	f04f 30ff 	mov.w	r0, #4294967295
 8013890:	bd38      	pop	{r3, r4, r5, pc}
 8013892:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013894:	b112      	cbz	r2, 801389c <_raise_r+0x1e>
 8013896:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801389a:	b94b      	cbnz	r3, 80138b0 <_raise_r+0x32>
 801389c:	4628      	mov	r0, r5
 801389e:	f000 f853 	bl	8013948 <_getpid_r>
 80138a2:	4622      	mov	r2, r4
 80138a4:	4601      	mov	r1, r0
 80138a6:	4628      	mov	r0, r5
 80138a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138ac:	f000 b83a 	b.w	8013924 <_kill_r>
 80138b0:	2b01      	cmp	r3, #1
 80138b2:	d00a      	beq.n	80138ca <_raise_r+0x4c>
 80138b4:	1c59      	adds	r1, r3, #1
 80138b6:	d103      	bne.n	80138c0 <_raise_r+0x42>
 80138b8:	2316      	movs	r3, #22
 80138ba:	6003      	str	r3, [r0, #0]
 80138bc:	2001      	movs	r0, #1
 80138be:	e7e7      	b.n	8013890 <_raise_r+0x12>
 80138c0:	2100      	movs	r1, #0
 80138c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80138c6:	4620      	mov	r0, r4
 80138c8:	4798      	blx	r3
 80138ca:	2000      	movs	r0, #0
 80138cc:	e7e0      	b.n	8013890 <_raise_r+0x12>
	...

080138d0 <raise>:
 80138d0:	4b02      	ldr	r3, [pc, #8]	@ (80138dc <raise+0xc>)
 80138d2:	4601      	mov	r1, r0
 80138d4:	6818      	ldr	r0, [r3, #0]
 80138d6:	f7ff bfd2 	b.w	801387e <_raise_r>
 80138da:	bf00      	nop
 80138dc:	200002a8 	.word	0x200002a8

080138e0 <_fstat_r>:
 80138e0:	b538      	push	{r3, r4, r5, lr}
 80138e2:	4d07      	ldr	r5, [pc, #28]	@ (8013900 <_fstat_r+0x20>)
 80138e4:	2300      	movs	r3, #0
 80138e6:	4604      	mov	r4, r0
 80138e8:	4608      	mov	r0, r1
 80138ea:	4611      	mov	r1, r2
 80138ec:	602b      	str	r3, [r5, #0]
 80138ee:	f7ee fc0f 	bl	8002110 <_fstat>
 80138f2:	1c43      	adds	r3, r0, #1
 80138f4:	d102      	bne.n	80138fc <_fstat_r+0x1c>
 80138f6:	682b      	ldr	r3, [r5, #0]
 80138f8:	b103      	cbz	r3, 80138fc <_fstat_r+0x1c>
 80138fa:	6023      	str	r3, [r4, #0]
 80138fc:	bd38      	pop	{r3, r4, r5, pc}
 80138fe:	bf00      	nop
 8013900:	20001b00 	.word	0x20001b00

08013904 <_isatty_r>:
 8013904:	b538      	push	{r3, r4, r5, lr}
 8013906:	4d06      	ldr	r5, [pc, #24]	@ (8013920 <_isatty_r+0x1c>)
 8013908:	2300      	movs	r3, #0
 801390a:	4604      	mov	r4, r0
 801390c:	4608      	mov	r0, r1
 801390e:	602b      	str	r3, [r5, #0]
 8013910:	f7ee fc0e 	bl	8002130 <_isatty>
 8013914:	1c43      	adds	r3, r0, #1
 8013916:	d102      	bne.n	801391e <_isatty_r+0x1a>
 8013918:	682b      	ldr	r3, [r5, #0]
 801391a:	b103      	cbz	r3, 801391e <_isatty_r+0x1a>
 801391c:	6023      	str	r3, [r4, #0]
 801391e:	bd38      	pop	{r3, r4, r5, pc}
 8013920:	20001b00 	.word	0x20001b00

08013924 <_kill_r>:
 8013924:	b538      	push	{r3, r4, r5, lr}
 8013926:	4d07      	ldr	r5, [pc, #28]	@ (8013944 <_kill_r+0x20>)
 8013928:	2300      	movs	r3, #0
 801392a:	4604      	mov	r4, r0
 801392c:	4608      	mov	r0, r1
 801392e:	4611      	mov	r1, r2
 8013930:	602b      	str	r3, [r5, #0]
 8013932:	f7ee fba9 	bl	8002088 <_kill>
 8013936:	1c43      	adds	r3, r0, #1
 8013938:	d102      	bne.n	8013940 <_kill_r+0x1c>
 801393a:	682b      	ldr	r3, [r5, #0]
 801393c:	b103      	cbz	r3, 8013940 <_kill_r+0x1c>
 801393e:	6023      	str	r3, [r4, #0]
 8013940:	bd38      	pop	{r3, r4, r5, pc}
 8013942:	bf00      	nop
 8013944:	20001b00 	.word	0x20001b00

08013948 <_getpid_r>:
 8013948:	f7ee bb96 	b.w	8002078 <_getpid>

0801394c <_calloc_r>:
 801394c:	b570      	push	{r4, r5, r6, lr}
 801394e:	fba1 5402 	umull	r5, r4, r1, r2
 8013952:	b934      	cbnz	r4, 8013962 <_calloc_r+0x16>
 8013954:	4629      	mov	r1, r5
 8013956:	f7fb f80b 	bl	800e970 <_malloc_r>
 801395a:	4606      	mov	r6, r0
 801395c:	b928      	cbnz	r0, 801396a <_calloc_r+0x1e>
 801395e:	4630      	mov	r0, r6
 8013960:	bd70      	pop	{r4, r5, r6, pc}
 8013962:	220c      	movs	r2, #12
 8013964:	6002      	str	r2, [r0, #0]
 8013966:	2600      	movs	r6, #0
 8013968:	e7f9      	b.n	801395e <_calloc_r+0x12>
 801396a:	462a      	mov	r2, r5
 801396c:	4621      	mov	r1, r4
 801396e:	f7fd f82b 	bl	80109c8 <memset>
 8013972:	e7f4      	b.n	801395e <_calloc_r+0x12>

08013974 <_realloc_r>:
 8013974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013978:	4607      	mov	r7, r0
 801397a:	4614      	mov	r4, r2
 801397c:	460d      	mov	r5, r1
 801397e:	b921      	cbnz	r1, 801398a <_realloc_r+0x16>
 8013980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013984:	4611      	mov	r1, r2
 8013986:	f7fa bff3 	b.w	800e970 <_malloc_r>
 801398a:	b92a      	cbnz	r2, 8013998 <_realloc_r+0x24>
 801398c:	f7fd ffd8 	bl	8011940 <_free_r>
 8013990:	4625      	mov	r5, r4
 8013992:	4628      	mov	r0, r5
 8013994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013998:	f000 f88a 	bl	8013ab0 <_malloc_usable_size_r>
 801399c:	4284      	cmp	r4, r0
 801399e:	4606      	mov	r6, r0
 80139a0:	d802      	bhi.n	80139a8 <_realloc_r+0x34>
 80139a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80139a6:	d8f4      	bhi.n	8013992 <_realloc_r+0x1e>
 80139a8:	4621      	mov	r1, r4
 80139aa:	4638      	mov	r0, r7
 80139ac:	f7fa ffe0 	bl	800e970 <_malloc_r>
 80139b0:	4680      	mov	r8, r0
 80139b2:	b908      	cbnz	r0, 80139b8 <_realloc_r+0x44>
 80139b4:	4645      	mov	r5, r8
 80139b6:	e7ec      	b.n	8013992 <_realloc_r+0x1e>
 80139b8:	42b4      	cmp	r4, r6
 80139ba:	4622      	mov	r2, r4
 80139bc:	4629      	mov	r1, r5
 80139be:	bf28      	it	cs
 80139c0:	4632      	movcs	r2, r6
 80139c2:	f7fd f93c 	bl	8010c3e <memcpy>
 80139c6:	4629      	mov	r1, r5
 80139c8:	4638      	mov	r0, r7
 80139ca:	f7fd ffb9 	bl	8011940 <_free_r>
 80139ce:	e7f1      	b.n	80139b4 <_realloc_r+0x40>

080139d0 <_strtoul_l.isra.0>:
 80139d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80139d4:	4e34      	ldr	r6, [pc, #208]	@ (8013aa8 <_strtoul_l.isra.0+0xd8>)
 80139d6:	4686      	mov	lr, r0
 80139d8:	460d      	mov	r5, r1
 80139da:	4628      	mov	r0, r5
 80139dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80139e0:	5d37      	ldrb	r7, [r6, r4]
 80139e2:	f017 0708 	ands.w	r7, r7, #8
 80139e6:	d1f8      	bne.n	80139da <_strtoul_l.isra.0+0xa>
 80139e8:	2c2d      	cmp	r4, #45	@ 0x2d
 80139ea:	d110      	bne.n	8013a0e <_strtoul_l.isra.0+0x3e>
 80139ec:	782c      	ldrb	r4, [r5, #0]
 80139ee:	2701      	movs	r7, #1
 80139f0:	1c85      	adds	r5, r0, #2
 80139f2:	f033 0010 	bics.w	r0, r3, #16
 80139f6:	d115      	bne.n	8013a24 <_strtoul_l.isra.0+0x54>
 80139f8:	2c30      	cmp	r4, #48	@ 0x30
 80139fa:	d10d      	bne.n	8013a18 <_strtoul_l.isra.0+0x48>
 80139fc:	7828      	ldrb	r0, [r5, #0]
 80139fe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8013a02:	2858      	cmp	r0, #88	@ 0x58
 8013a04:	d108      	bne.n	8013a18 <_strtoul_l.isra.0+0x48>
 8013a06:	786c      	ldrb	r4, [r5, #1]
 8013a08:	3502      	adds	r5, #2
 8013a0a:	2310      	movs	r3, #16
 8013a0c:	e00a      	b.n	8013a24 <_strtoul_l.isra.0+0x54>
 8013a0e:	2c2b      	cmp	r4, #43	@ 0x2b
 8013a10:	bf04      	itt	eq
 8013a12:	782c      	ldrbeq	r4, [r5, #0]
 8013a14:	1c85      	addeq	r5, r0, #2
 8013a16:	e7ec      	b.n	80139f2 <_strtoul_l.isra.0+0x22>
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d1f6      	bne.n	8013a0a <_strtoul_l.isra.0+0x3a>
 8013a1c:	2c30      	cmp	r4, #48	@ 0x30
 8013a1e:	bf14      	ite	ne
 8013a20:	230a      	movne	r3, #10
 8013a22:	2308      	moveq	r3, #8
 8013a24:	f04f 38ff 	mov.w	r8, #4294967295
 8013a28:	2600      	movs	r6, #0
 8013a2a:	fbb8 f8f3 	udiv	r8, r8, r3
 8013a2e:	fb03 f908 	mul.w	r9, r3, r8
 8013a32:	ea6f 0909 	mvn.w	r9, r9
 8013a36:	4630      	mov	r0, r6
 8013a38:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8013a3c:	f1bc 0f09 	cmp.w	ip, #9
 8013a40:	d810      	bhi.n	8013a64 <_strtoul_l.isra.0+0x94>
 8013a42:	4664      	mov	r4, ip
 8013a44:	42a3      	cmp	r3, r4
 8013a46:	dd1e      	ble.n	8013a86 <_strtoul_l.isra.0+0xb6>
 8013a48:	f1b6 3fff 	cmp.w	r6, #4294967295
 8013a4c:	d007      	beq.n	8013a5e <_strtoul_l.isra.0+0x8e>
 8013a4e:	4580      	cmp	r8, r0
 8013a50:	d316      	bcc.n	8013a80 <_strtoul_l.isra.0+0xb0>
 8013a52:	d101      	bne.n	8013a58 <_strtoul_l.isra.0+0x88>
 8013a54:	45a1      	cmp	r9, r4
 8013a56:	db13      	blt.n	8013a80 <_strtoul_l.isra.0+0xb0>
 8013a58:	fb00 4003 	mla	r0, r0, r3, r4
 8013a5c:	2601      	movs	r6, #1
 8013a5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a62:	e7e9      	b.n	8013a38 <_strtoul_l.isra.0+0x68>
 8013a64:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8013a68:	f1bc 0f19 	cmp.w	ip, #25
 8013a6c:	d801      	bhi.n	8013a72 <_strtoul_l.isra.0+0xa2>
 8013a6e:	3c37      	subs	r4, #55	@ 0x37
 8013a70:	e7e8      	b.n	8013a44 <_strtoul_l.isra.0+0x74>
 8013a72:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8013a76:	f1bc 0f19 	cmp.w	ip, #25
 8013a7a:	d804      	bhi.n	8013a86 <_strtoul_l.isra.0+0xb6>
 8013a7c:	3c57      	subs	r4, #87	@ 0x57
 8013a7e:	e7e1      	b.n	8013a44 <_strtoul_l.isra.0+0x74>
 8013a80:	f04f 36ff 	mov.w	r6, #4294967295
 8013a84:	e7eb      	b.n	8013a5e <_strtoul_l.isra.0+0x8e>
 8013a86:	1c73      	adds	r3, r6, #1
 8013a88:	d106      	bne.n	8013a98 <_strtoul_l.isra.0+0xc8>
 8013a8a:	2322      	movs	r3, #34	@ 0x22
 8013a8c:	f8ce 3000 	str.w	r3, [lr]
 8013a90:	4630      	mov	r0, r6
 8013a92:	b932      	cbnz	r2, 8013aa2 <_strtoul_l.isra.0+0xd2>
 8013a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a98:	b107      	cbz	r7, 8013a9c <_strtoul_l.isra.0+0xcc>
 8013a9a:	4240      	negs	r0, r0
 8013a9c:	2a00      	cmp	r2, #0
 8013a9e:	d0f9      	beq.n	8013a94 <_strtoul_l.isra.0+0xc4>
 8013aa0:	b106      	cbz	r6, 8013aa4 <_strtoul_l.isra.0+0xd4>
 8013aa2:	1e69      	subs	r1, r5, #1
 8013aa4:	6011      	str	r1, [r2, #0]
 8013aa6:	e7f5      	b.n	8013a94 <_strtoul_l.isra.0+0xc4>
 8013aa8:	080143b9 	.word	0x080143b9

08013aac <_strtoul_r>:
 8013aac:	f7ff bf90 	b.w	80139d0 <_strtoul_l.isra.0>

08013ab0 <_malloc_usable_size_r>:
 8013ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ab4:	1f18      	subs	r0, r3, #4
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	bfbc      	itt	lt
 8013aba:	580b      	ldrlt	r3, [r1, r0]
 8013abc:	18c0      	addlt	r0, r0, r3
 8013abe:	4770      	bx	lr

08013ac0 <_init>:
 8013ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ac2:	bf00      	nop
 8013ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ac6:	bc08      	pop	{r3}
 8013ac8:	469e      	mov	lr, r3
 8013aca:	4770      	bx	lr

08013acc <_fini>:
 8013acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ace:	bf00      	nop
 8013ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ad2:	bc08      	pop	{r3}
 8013ad4:	469e      	mov	lr, r3
 8013ad6:	4770      	bx	lr
