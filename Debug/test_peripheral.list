
test_peripheral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2c0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  0800b3d0  0800b3d0  0000c3d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb5c  0800bb5c  0000d20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bb5c  0800bb5c  0000cb5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb64  0800bb64  0000d20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb64  0800bb64  0000cb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb68  0800bb68  0000cb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800bb6c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  2000020c  0800bd78  0000d20c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  0800bd78  0000d840  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8d8  00000000  00000000  0000d235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000297c  00000000  00000000  0001bb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  0001e490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a11  00000000  00000000  0001f1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193a4  00000000  00000000  0001fbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001156d  00000000  00000000  00038f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008805e  00000000  00000000  0004a4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2528  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c98  00000000  00000000  000d256c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000d7204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b3b8 	.word	0x0800b3b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	0800b3b8 	.word	0x0800b3b8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gesf2>:
 8000b7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b80:	e006      	b.n	8000b90 <__cmpsf2+0x4>
 8000b82:	bf00      	nop

08000b84 <__lesf2>:
 8000b84:	f04f 0c01 	mov.w	ip, #1
 8000b88:	e002      	b.n	8000b90 <__cmpsf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__cmpsf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba6:	d011      	beq.n	8000bcc <__cmpsf2+0x40>
 8000ba8:	b001      	add	sp, #4
 8000baa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bae:	bf18      	it	ne
 8000bb0:	ea90 0f01 	teqne	r0, r1
 8000bb4:	bf58      	it	pl
 8000bb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bba:	bf88      	it	hi
 8000bbc:	17c8      	asrhi	r0, r1, #31
 8000bbe:	bf38      	it	cc
 8000bc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc4:	bf18      	it	ne
 8000bc6:	f040 0001 	orrne.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	d102      	bne.n	8000bd8 <__cmpsf2+0x4c>
 8000bd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bd6:	d105      	bne.n	8000be4 <__cmpsf2+0x58>
 8000bd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bdc:	d1e4      	bne.n	8000ba8 <__cmpsf2+0x1c>
 8000bde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000be2:	d0e1      	beq.n	8000ba8 <__cmpsf2+0x1c>
 8000be4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_cfrcmple>:
 8000bec:	4684      	mov	ip, r0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	4661      	mov	r1, ip
 8000bf2:	e7ff      	b.n	8000bf4 <__aeabi_cfcmpeq>

08000bf4 <__aeabi_cfcmpeq>:
 8000bf4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bf6:	f7ff ffc9 	bl	8000b8c <__cmpsf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	bf48      	it	mi
 8000bfe:	f110 0f00 	cmnmi.w	r0, #0
 8000c02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c04 <__aeabi_fcmpeq>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff fff4 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2001      	moveq	r0, #1
 8000c10:	2000      	movne	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmplt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffea 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmple>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffe0 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpge>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffd2 	bl	8000bec <__aeabi_cfrcmple>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_fcmpgt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffc8 	bl	8000bec <__aeabi_cfrcmple>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff fead 	bl	80009d0 <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc23 	bl	80004ec <__aeabi_dmul>
 8000ca6:	f7ff fef9 	bl	8000a9c <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fba4 	bl	80003f8 <__aeabi_ui2d>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb4:	f7ff fc1a 	bl	80004ec <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fa5c 	bl	800017c <__aeabi_dsub>
 8000cc4:	f7ff feea 	bl	8000a9c <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cdc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ce0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d013      	beq.n	8000d14 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cf0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000cf4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00b      	beq.n	8000d14 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000cfc:	e000      	b.n	8000d00 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000cfe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d00:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f9      	beq.n	8000cfe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d0a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f000 fb59 	bl	80013dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 f837 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f000 f8d3 	bl	8000ed8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d32:	f000 f8a7 	bl	8000e84 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d36:	f000 f877 	bl	8000e28 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

//  HAL_Delay(3000);
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8000d3a:	2264      	movs	r2, #100	@ 0x64
 8000d3c:	4911      	ldr	r1, [pc, #68]	@ (8000d84 <main+0x64>)
 8000d3e:	4812      	ldr	r0, [pc, #72]	@ (8000d88 <main+0x68>)
 8000d40:	f003 f955 	bl	8003fee <HAL_UARTEx_ReceiveToIdle_IT>

  Screen_begin(&huart2);
 8000d44:	4810      	ldr	r0, [pc, #64]	@ (8000d88 <main+0x68>)
 8000d46:	f003 ff17 	bl	8004b78 <Screen_begin>
//    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
//    HAL_Delay(200);
//	printf("SWO Debug!!!\n");
//  }
  
  BSP_init();
 8000d4a:	f005 f973 	bl	8006034 <BSP_init>
  BlinkyTest_app_init();
 8000d4e:	f005 fa03 	bl	8006158 <BlinkyTest_app_init>
  static OS_event_t const *TestOS_blinky[10]; /* Event queue */
  OS_task_create(
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <main+0x6c>)
 8000d54:	681c      	ldr	r4, [r3, #0]
 8000d56:	f005 f98b 	bl	8006070 <TestOS_Work>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	230a      	movs	r3, #10
 8000d60:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <main+0x70>)
 8000d62:	2101      	movs	r1, #1
 8000d64:	4620      	mov	r0, r4
 8000d66:	f005 fc39 	bl	80065dc <OS_task_create>
    TestOS_blinky,
    ARRAY_ELEMENT(TestOS_blinky),
    TestOS_Work()
  );

  Post_task_init();
 8000d6a:	f005 f995 	bl	8006098 <Post_task_init>
  static OS_event_t const *q_app_post[10];
  OS_task_create(AO_taskPost,
 8000d6e:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <main+0x74>)
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	2300      	movs	r3, #0
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	230a      	movs	r3, #10
 8000d78:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <main+0x78>)
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	f005 fc2e 	bl	80065dc <OS_task_create>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <main+0x60>
 8000d84:	200002c4 	.word	0x200002c4
 8000d88:	2000027c 	.word	0x2000027c
 8000d8c:	0800b72c 	.word	0x0800b72c
 8000d90:	20000328 	.word	0x20000328
 8000d94:	0800b728 	.word	0x0800b728
 8000d98:	20000350 	.word	0x20000350

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b090      	sub	sp, #64	@ 0x40
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 0318 	add.w	r3, r7, #24
 8000da6:	2228      	movs	r2, #40	@ 0x28
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f007 fe4c 	bl	8008a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dda:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	f107 0318 	add.w	r3, r7, #24
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fc17 	bl	8003618 <HAL_RCC_OscConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000df0:	f000 f908 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	230f      	movs	r3, #15
 8000df6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 fe84 	bl	8003b1c <HAL_RCC_ClockConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e1a:	f000 f8f3 	bl	8001004 <Error_Handler>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3740      	adds	r7, #64	@ 0x40
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e2e:	4a13      	ldr	r2, [pc, #76]	@ (8000e7c <MX_I2C1_Init+0x54>)
 8000e30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 300000;
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e34:	4a12      	ldr	r2, [pc, #72]	@ (8000e80 <MX_I2C1_Init+0x58>)
 8000e36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e52:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e58:	4b07      	ldr	r3, [pc, #28]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e64:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <MX_I2C1_Init+0x50>)
 8000e66:	f000 feb1 	bl	8001bcc <HAL_I2C_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e70:	f000 f8c8 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000228 	.word	0x20000228
 8000e7c:	40005400 	.word	0x40005400
 8000e80:	000493e0 	.word	0x000493e0

08000e84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e88:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	@ (8000ed4 <MX_USART2_UART_Init+0x50>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8000e8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000e90:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000e94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	f002 ffbc 	bl	8003e38 <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ec6:	f000 f89d 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000027c 	.word	0x2000027c
 8000ed4:	40004400 	.word	0x40004400

08000ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eec:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a23      	ldr	r2, [pc, #140]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f04:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a1d      	ldr	r2, [pc, #116]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000f0a:	f043 0320 	orr.w	r3, r3, #32
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0320 	and.w	r3, r3, #32
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a17      	ldr	r2, [pc, #92]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a11      	ldr	r2, [pc, #68]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f52:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000f54:	f000 fe22 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000f72:	f000 fc8f 	bl	8001894 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40011000 	.word	0x40011000

08000f88 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d10c      	bne.n	8000fba <HAL_UARTEx_RxEventCallback+0x32>

		// Call to callback function screen
		Screen_RX_data(dataRX);
 8000fa0:	4809      	ldr	r0, [pc, #36]	@ (8000fc8 <HAL_UARTEx_RxEventCallback+0x40>)
 8000fa2:	f003 fe65 	bl	8004c70 <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 8000fa6:	2264      	movs	r2, #100	@ 0x64
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <HAL_UARTEx_RxEventCallback+0x40>)
 8000fac:	f007 fd4c 	bl	8008a48 <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8000fb0:	2264      	movs	r2, #100	@ 0x64
 8000fb2:	4905      	ldr	r1, [pc, #20]	@ (8000fc8 <HAL_UARTEx_RxEventCallback+0x40>)
 8000fb4:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000fb6:	f003 f81a 	bl	8003fee <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000027c 	.word	0x2000027c
 8000fc8:	200002c4 	.word	0x200002c4

08000fcc <_write>:
// 	if( RxHeader.DLC == 2 ) {
// 		datacheck = 1;
// 	}
// }

int _write(int file, char *ptr, int len) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	e009      	b.n	8000ff2 <_write+0x26>
        ITM_SendChar(ptr[i]);
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fe74 	bl	8000cd4 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	dbf1      	blt.n	8000fde <_write+0x12>
    }
    return len;
 8000ffa:	687b      	ldr	r3, [r7, #4]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <Error_Handler+0x8>

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <HAL_MspInit+0x5c>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4a14      	ldr	r2, [pc, #80]	@ (800106c <HAL_MspInit+0x5c>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6193      	str	r3, [r2, #24]
 8001022:	4b12      	ldr	r3, [pc, #72]	@ (800106c <HAL_MspInit+0x5c>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <HAL_MspInit+0x5c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4a0e      	ldr	r2, [pc, #56]	@ (800106c <HAL_MspInit+0x5c>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001038:	61d3      	str	r3, [r2, #28]
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <HAL_MspInit+0x5c>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_MspInit+0x60>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <HAL_MspInit+0x60>)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000
 8001070:	40010000 	.word	0x40010000

08001074 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a19      	ldr	r2, [pc, #100]	@ (80010f4 <HAL_I2C_MspInit+0x80>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d12b      	bne.n	80010ec <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <HAL_I2C_MspInit+0x84>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <HAL_I2C_MspInit+0x84>)
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_I2C_MspInit+0x84>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ac:	23c0      	movs	r3, #192	@ 0xc0
 80010ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b0:	2312      	movs	r3, #18
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	480f      	ldr	r0, [pc, #60]	@ (80010fc <HAL_I2C_MspInit+0x88>)
 80010c0:	f000 fbe8 	bl	8001894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <HAL_I2C_MspInit+0x84>)
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	4a0b      	ldr	r2, [pc, #44]	@ (80010f8 <HAL_I2C_MspInit+0x84>)
 80010ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ce:	61d3      	str	r3, [r2, #28]
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <HAL_I2C_MspInit+0x84>)
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	201f      	movs	r0, #31
 80010e2:	f000 fad2 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010e6:	201f      	movs	r0, #31
 80010e8:	f000 faeb 	bl	80016c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40005400 	.word	0x40005400
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010c00 	.word	0x40010c00

08001100 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a1f      	ldr	r2, [pc, #124]	@ (8001198 <HAL_UART_MspInit+0x98>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d137      	bne.n	8001190 <HAL_UART_MspInit+0x90>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001120:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <HAL_UART_MspInit+0x9c>)
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	4a1d      	ldr	r2, [pc, #116]	@ (800119c <HAL_UART_MspInit+0x9c>)
 8001126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800112a:	61d3      	str	r3, [r2, #28]
 800112c:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <HAL_UART_MspInit+0x9c>)
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b18      	ldr	r3, [pc, #96]	@ (800119c <HAL_UART_MspInit+0x9c>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a17      	ldr	r2, [pc, #92]	@ (800119c <HAL_UART_MspInit+0x9c>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <HAL_UART_MspInit+0x9c>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001150:	2304      	movs	r3, #4
 8001152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	480f      	ldr	r0, [pc, #60]	@ (80011a0 <HAL_UART_MspInit+0xa0>)
 8001164:	f000 fb96 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001168:	2308      	movs	r3, #8
 800116a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4619      	mov	r1, r3
 800117a:	4809      	ldr	r0, [pc, #36]	@ (80011a0 <HAL_UART_MspInit+0xa0>)
 800117c:	f000 fb8a 	bl	8001894 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2026      	movs	r0, #38	@ 0x26
 8001186:	f000 fa80 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800118a:	2026      	movs	r0, #38	@ 0x26
 800118c:	f000 fa99 	bl	80016c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40004400 	.word	0x40004400
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010800 	.word	0x40010800

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <NMI_Handler+0x4>

080011ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <MemManage_Handler+0x4>

080011bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <UsageFault_Handler+0x4>

080011cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f4:	f000 f938 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  OS_TimeEvt_tick();
 80011f8:	f005 faec 	bl	80067d4 <OS_TimeEvt_tick>
  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001204:	4802      	ldr	r0, [pc, #8]	@ (8001210 <I2C1_EV_IRQHandler+0x10>)
 8001206:	f000 fe39 	bl	8001e7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000228 	.word	0x20000228

08001214 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001218:	4802      	ldr	r0, [pc, #8]	@ (8001224 <USART2_IRQHandler+0x10>)
 800121a:	f002 ff45 	bl	80040a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000027c 	.word	0x2000027c

08001228 <HAL_I2C_MemTxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) { 
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == hi2c1.Instance) {
    
  }
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  return 1;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <_kill>:

int _kill(int pid, int sig)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001252:	f007 fc99 	bl	8008b88 <__errno>
 8001256:	4603      	mov	r3, r0
 8001258:	2216      	movs	r2, #22
 800125a:	601a      	str	r2, [r3, #0]
  return -1;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_exit>:

void _exit (int status)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ffe7 	bl	8001248 <_kill>
  while (1) {}    /* Make sure we hang here */
 800127a:	bf00      	nop
 800127c:	e7fd      	b.n	800127a <_exit+0x12>

0800127e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e00a      	b.n	80012a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001290:	f3af 8000 	nop.w
 8001294:	4601      	mov	r1, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	60ba      	str	r2, [r7, #8]
 800129c:	b2ca      	uxtb	r2, r1
 800129e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dbf0      	blt.n	8001290 <_read+0x12>
  }

  return len;
 80012ae:	687b      	ldr	r3, [r7, #4]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012de:	605a      	str	r2, [r3, #4]
  return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <_isatty>:

int _isatty(int file)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	@ (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f007 fc1e 	bl	8008b88 <__errno>
 800134c:	4603      	mov	r3, r0
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <_sbrk+0x64>)
 8001368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20005000 	.word	0x20005000
 8001378:	00000400 	.word	0x00000400
 800137c:	20000378 	.word	0x20000378
 8001380:	20000840 	.word	0x20000840

08001384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8001390:	f7ff fff8 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001394:	480b      	ldr	r0, [pc, #44]	@ (80013c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001396:	490c      	ldr	r1, [pc, #48]	@ (80013c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001398:	4a0c      	ldr	r2, [pc, #48]	@ (80013cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a09      	ldr	r2, [pc, #36]	@ (80013d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013ac:	4c09      	ldr	r4, [pc, #36]	@ (80013d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ba:	f007 fbeb 	bl	8008b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013be:	f7ff fcaf 	bl	8000d20 <main>
  bx lr
 80013c2:	4770      	bx	lr
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80013cc:	0800bb6c 	.word	0x0800bb6c
  ldr r2, =_sbss
 80013d0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80013d4:	20000840 	.word	0x20000840

080013d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC1_2_IRQHandler>
	...

080013dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <HAL_Init+0x28>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a07      	ldr	r2, [pc, #28]	@ (8001404 <HAL_Init+0x28>)
 80013e6:	f043 0310 	orr.w	r3, r3, #16
 80013ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 f941 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f2:	200f      	movs	r0, #15
 80013f4:	f000 f808 	bl	8001408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f8:	f7ff fe0a 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40022000 	.word	0x40022000

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_InitTick+0x54>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <HAL_InitTick+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f959 	bl	80016de <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f000 f921 	bl	800168a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	@ (8001464 <HAL_InitTick+0x5c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000000 	.word	0x20000000
 8001460:	20000008 	.word	0x20000008
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <HAL_IncTick+0x1c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_IncTick+0x20>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a03      	ldr	r2, [pc, #12]	@ (8001488 <HAL_IncTick+0x20>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	20000008 	.word	0x20000008
 8001488:	2000037c 	.word	0x2000037c

0800148c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b02      	ldr	r3, [pc, #8]	@ (800149c <HAL_GetTick+0x10>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	2000037c 	.word	0x2000037c

080014a0 <__NVIC_SetPriorityGrouping>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4906      	ldr	r1, [pc, #24]	@ (8001538 <__NVIC_EnableIRQ+0x34>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPendingIRQ>:
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0c      	blt.n	8001568 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	@ (8001574 <__NVIC_SetPendingIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	3340      	adds	r3, #64	@ 0x40
 8001564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	@ (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	@ (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	@ 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	@ 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <SysTick_Config>:
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001640:	d301      	bcc.n	8001646 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001642:	2301      	movs	r3, #1
 8001644:	e00f      	b.n	8001666 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001646:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <SysTick_Config+0x40>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164e:	210f      	movs	r1, #15
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f7ff ff90 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <SysTick_Config+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165e:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <SysTick_Config+0x40>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff0f 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff24 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff90 	bl	80015cc <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5f 	bl	8001578 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff17 	bl	8001504 <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa2 	bl	8001630 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff19 	bl	800153c <__NVIC_SetPendingIRQ>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d008      	beq.n	800173c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2204      	movs	r2, #4
 800172e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e020      	b.n	800177e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 020e 	bic.w	r2, r2, #14
 800174a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001764:	2101      	movs	r1, #1
 8001766:	fa01 f202 	lsl.w	r2, r1, r2
 800176a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800177c:	7bfb      	ldrb	r3, [r7, #15]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d005      	beq.n	80017ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2204      	movs	r2, #4
 80017a4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e051      	b.n	8001850 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 020e 	bic.w	r2, r2, #14
 80017ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a22      	ldr	r2, [pc, #136]	@ (800185c <HAL_DMA_Abort_IT+0xd4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d029      	beq.n	800182a <HAL_DMA_Abort_IT+0xa2>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a21      	ldr	r2, [pc, #132]	@ (8001860 <HAL_DMA_Abort_IT+0xd8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d022      	beq.n	8001826 <HAL_DMA_Abort_IT+0x9e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001864 <HAL_DMA_Abort_IT+0xdc>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d01a      	beq.n	8001820 <HAL_DMA_Abort_IT+0x98>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001868 <HAL_DMA_Abort_IT+0xe0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d012      	beq.n	800181a <HAL_DMA_Abort_IT+0x92>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1c      	ldr	r2, [pc, #112]	@ (800186c <HAL_DMA_Abort_IT+0xe4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00a      	beq.n	8001814 <HAL_DMA_Abort_IT+0x8c>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1b      	ldr	r2, [pc, #108]	@ (8001870 <HAL_DMA_Abort_IT+0xe8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d102      	bne.n	800180e <HAL_DMA_Abort_IT+0x86>
 8001808:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800180c:	e00e      	b.n	800182c <HAL_DMA_Abort_IT+0xa4>
 800180e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001812:	e00b      	b.n	800182c <HAL_DMA_Abort_IT+0xa4>
 8001814:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001818:	e008      	b.n	800182c <HAL_DMA_Abort_IT+0xa4>
 800181a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800181e:	e005      	b.n	800182c <HAL_DMA_Abort_IT+0xa4>
 8001820:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001824:	e002      	b.n	800182c <HAL_DMA_Abort_IT+0xa4>
 8001826:	2310      	movs	r3, #16
 8001828:	e000      	b.n	800182c <HAL_DMA_Abort_IT+0xa4>
 800182a:	2301      	movs	r3, #1
 800182c:	4a11      	ldr	r2, [pc, #68]	@ (8001874 <HAL_DMA_Abort_IT+0xec>)
 800182e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	4798      	blx	r3
    } 
  }
  return status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40020008 	.word	0x40020008
 8001860:	4002001c 	.word	0x4002001c
 8001864:	40020030 	.word	0x40020030
 8001868:	40020044 	.word	0x40020044
 800186c:	40020058 	.word	0x40020058
 8001870:	4002006c 	.word	0x4002006c
 8001874:	40020000 	.word	0x40020000

08001878 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001886:	b2db      	uxtb	r3, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
	...

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b08b      	sub	sp, #44	@ 0x2c
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a6:	e169      	b.n	8001b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a8:	2201      	movs	r2, #1
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8158 	bne.w	8001b76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a9a      	ldr	r2, [pc, #616]	@ (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d05e      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018d0:	4a98      	ldr	r2, [pc, #608]	@ (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d875      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018d6:	4a98      	ldr	r2, [pc, #608]	@ (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d058      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018dc:	4a96      	ldr	r2, [pc, #600]	@ (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d86f      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018e2:	4a96      	ldr	r2, [pc, #600]	@ (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d052      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018e8:	4a94      	ldr	r2, [pc, #592]	@ (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d869      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018ee:	4a94      	ldr	r2, [pc, #592]	@ (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d04c      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018f4:	4a92      	ldr	r2, [pc, #584]	@ (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d863      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018fa:	4a92      	ldr	r2, [pc, #584]	@ (8001b44 <HAL_GPIO_Init+0x2b0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d046      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 8001900:	4a90      	ldr	r2, [pc, #576]	@ (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d85d      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 8001906:	2b12      	cmp	r3, #18
 8001908:	d82a      	bhi.n	8001960 <HAL_GPIO_Init+0xcc>
 800190a:	2b12      	cmp	r3, #18
 800190c:	d859      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 800190e:	a201      	add	r2, pc, #4	@ (adr r2, 8001914 <HAL_GPIO_Init+0x80>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	0800198f 	.word	0x0800198f
 8001918:	08001969 	.word	0x08001969
 800191c:	0800197b 	.word	0x0800197b
 8001920:	080019bd 	.word	0x080019bd
 8001924:	080019c3 	.word	0x080019c3
 8001928:	080019c3 	.word	0x080019c3
 800192c:	080019c3 	.word	0x080019c3
 8001930:	080019c3 	.word	0x080019c3
 8001934:	080019c3 	.word	0x080019c3
 8001938:	080019c3 	.word	0x080019c3
 800193c:	080019c3 	.word	0x080019c3
 8001940:	080019c3 	.word	0x080019c3
 8001944:	080019c3 	.word	0x080019c3
 8001948:	080019c3 	.word	0x080019c3
 800194c:	080019c3 	.word	0x080019c3
 8001950:	080019c3 	.word	0x080019c3
 8001954:	080019c3 	.word	0x080019c3
 8001958:	08001971 	.word	0x08001971
 800195c:	08001985 	.word	0x08001985
 8001960:	4a79      	ldr	r2, [pc, #484]	@ (8001b48 <HAL_GPIO_Init+0x2b4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001966:	e02c      	b.n	80019c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e029      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	3304      	adds	r3, #4
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e024      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	3308      	adds	r3, #8
 8001980:	623b      	str	r3, [r7, #32]
          break;
 8001982:	e01f      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	330c      	adds	r3, #12
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	e01a      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001996:	2304      	movs	r3, #4
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e013      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	611a      	str	r2, [r3, #16]
          break;
 80019ae:	e009      	b.n	80019c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b0:	2308      	movs	r3, #8
 80019b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	615a      	str	r2, [r3, #20]
          break;
 80019ba:	e003      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
          break;
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          break;
 80019c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2bff      	cmp	r3, #255	@ 0xff
 80019c8:	d801      	bhi.n	80019ce <HAL_GPIO_Init+0x13a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	e001      	b.n	80019d2 <HAL_GPIO_Init+0x13e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3304      	adds	r3, #4
 80019d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2bff      	cmp	r3, #255	@ 0xff
 80019d8:	d802      	bhi.n	80019e0 <HAL_GPIO_Init+0x14c>
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	e002      	b.n	80019e6 <HAL_GPIO_Init+0x152>
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	3b08      	subs	r3, #8
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	210f      	movs	r1, #15
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	401a      	ands	r2, r3
 80019f8:	6a39      	ldr	r1, [r7, #32]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	431a      	orrs	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80b1 	beq.w	8001b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a14:	4b4d      	ldr	r3, [pc, #308]	@ (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	@ (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b4a      	ldr	r3, [pc, #296]	@ (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a2c:	4a48      	ldr	r2, [pc, #288]	@ (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a40      	ldr	r2, [pc, #256]	@ (8001b54 <HAL_GPIO_Init+0x2c0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d013      	beq.n	8001a80 <HAL_GPIO_Init+0x1ec>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b58 <HAL_GPIO_Init+0x2c4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00d      	beq.n	8001a7c <HAL_GPIO_Init+0x1e8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3e      	ldr	r2, [pc, #248]	@ (8001b5c <HAL_GPIO_Init+0x2c8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d007      	beq.n	8001a78 <HAL_GPIO_Init+0x1e4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b60 <HAL_GPIO_Init+0x2cc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_GPIO_Init+0x1e0>
 8001a70:	2303      	movs	r3, #3
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a74:	2304      	movs	r3, #4
 8001a76:	e004      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a80:	2300      	movs	r3, #0
 8001a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a84:	f002 0203 	and.w	r2, r2, #3
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a92:	492f      	ldr	r1, [pc, #188]	@ (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aac:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	492c      	ldr	r1, [pc, #176]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aba:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4928      	ldr	r1, [pc, #160]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	4922      	ldr	r1, [pc, #136]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60cb      	str	r3, [r1, #12]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	491e      	ldr	r1, [pc, #120]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	4918      	ldr	r1, [pc, #96]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b0a:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4914      	ldr	r1, [pc, #80]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d021      	beq.n	8001b68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	490e      	ldr	r1, [pc, #56]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e021      	b.n	8001b76 <HAL_GPIO_Init+0x2e2>
 8001b32:	bf00      	nop
 8001b34:	10320000 	.word	0x10320000
 8001b38:	10310000 	.word	0x10310000
 8001b3c:	10220000 	.word	0x10220000
 8001b40:	10210000 	.word	0x10210000
 8001b44:	10120000 	.word	0x10120000
 8001b48:	10110000 	.word	0x10110000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40010800 	.word	0x40010800
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40011400 	.word	0x40011400
 8001b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4909      	ldr	r1, [pc, #36]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	3301      	adds	r3, #1
 8001b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f47f ae8e 	bne.w	80018a8 <HAL_GPIO_Init+0x14>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	372c      	adds	r7, #44	@ 0x2c
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	611a      	str	r2, [r3, #16]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e12b      	b.n	8001e36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fa3e 	bl	8001074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2224      	movs	r2, #36	@ 0x24
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0201 	bic.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c30:	f002 f8bc 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8001c34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4a81      	ldr	r2, [pc, #516]	@ (8001e40 <HAL_I2C_Init+0x274>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d807      	bhi.n	8001c50 <HAL_I2C_Init+0x84>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4a80      	ldr	r2, [pc, #512]	@ (8001e44 <HAL_I2C_Init+0x278>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	bf94      	ite	ls
 8001c48:	2301      	movls	r3, #1
 8001c4a:	2300      	movhi	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	e006      	b.n	8001c5e <HAL_I2C_Init+0x92>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4a7d      	ldr	r2, [pc, #500]	@ (8001e48 <HAL_I2C_Init+0x27c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	bf94      	ite	ls
 8001c58:	2301      	movls	r3, #1
 8001c5a:	2300      	movhi	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0e7      	b.n	8001e36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4a78      	ldr	r2, [pc, #480]	@ (8001e4c <HAL_I2C_Init+0x280>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0c9b      	lsrs	r3, r3, #18
 8001c70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a6a      	ldr	r2, [pc, #424]	@ (8001e40 <HAL_I2C_Init+0x274>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d802      	bhi.n	8001ca0 <HAL_I2C_Init+0xd4>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	e009      	b.n	8001cb4 <HAL_I2C_Init+0xe8>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	4a69      	ldr	r2, [pc, #420]	@ (8001e50 <HAL_I2C_Init+0x284>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	099b      	lsrs	r3, r3, #6
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	495c      	ldr	r1, [pc, #368]	@ (8001e40 <HAL_I2C_Init+0x274>)
 8001cd0:	428b      	cmp	r3, r1
 8001cd2:	d819      	bhi.n	8001d08 <HAL_I2C_Init+0x13c>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1e59      	subs	r1, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce2:	1c59      	adds	r1, r3, #1
 8001ce4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ce8:	400b      	ands	r3, r1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00a      	beq.n	8001d04 <HAL_I2C_Init+0x138>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1e59      	subs	r1, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d02:	e051      	b.n	8001da8 <HAL_I2C_Init+0x1dc>
 8001d04:	2304      	movs	r3, #4
 8001d06:	e04f      	b.n	8001da8 <HAL_I2C_Init+0x1dc>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d111      	bne.n	8001d34 <HAL_I2C_Init+0x168>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1e58      	subs	r0, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	440b      	add	r3, r1
 8001d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	e012      	b.n	8001d5a <HAL_I2C_Init+0x18e>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1e58      	subs	r0, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	0099      	lsls	r1, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_I2C_Init+0x196>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e022      	b.n	8001da8 <HAL_I2C_Init+0x1dc>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10e      	bne.n	8001d88 <HAL_I2C_Init+0x1bc>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1e58      	subs	r0, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6859      	ldr	r1, [r3, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	440b      	add	r3, r1
 8001d78:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d86:	e00f      	b.n	8001da8 <HAL_I2C_Init+0x1dc>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1e58      	subs	r0, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	0099      	lsls	r1, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	6809      	ldr	r1, [r1, #0]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001dd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6911      	ldr	r1, [r2, #16]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68d2      	ldr	r2, [r2, #12]
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	430b      	orrs	r3, r1
 8001dea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	000186a0 	.word	0x000186a0
 8001e44:	001e847f 	.word	0x001e847f
 8001e48:	003d08ff 	.word	0x003d08ff
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	10624dd3 	.word	0x10624dd3

08001e54 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e66:	2b80      	cmp	r3, #128	@ 0x80
 8001e68:	d103      	bne.n	8001e72 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
  }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e94:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d003      	beq.n	8001eb4 <HAL_I2C_EV_IRQHandler+0x38>
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	2b40      	cmp	r3, #64	@ 0x40
 8001eb0:	f040 80c1 	bne.w	8002036 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10d      	bne.n	8001eea <HAL_I2C_EV_IRQHandler+0x6e>
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001ed4:	d003      	beq.n	8001ede <HAL_I2C_EV_IRQHandler+0x62>
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001edc:	d101      	bne.n	8001ee2 <HAL_I2C_EV_IRQHandler+0x66>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_I2C_EV_IRQHandler+0x68>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	f000 8132 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00c      	beq.n	8001f0e <HAL_I2C_EV_IRQHandler+0x92>
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	0a5b      	lsrs	r3, r3, #9
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f001 fb6f 	bl	80035e4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fce1 	bl	80028ce <I2C_Master_SB>
 8001f0c:	e092      	b.n	8002034 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <HAL_I2C_EV_IRQHandler+0xb2>
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	0a5b      	lsrs	r3, r3, #9
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fd56 	bl	80029d8 <I2C_Master_ADD10>
 8001f2c:	e082      	b.n	8002034 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	085b      	lsrs	r3, r3, #1
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_I2C_EV_IRQHandler+0xd2>
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	0a5b      	lsrs	r3, r3, #9
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fd6f 	bl	8002a2a <I2C_Master_ADDR>
 8001f4c:	e072      	b.n	8002034 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d03b      	beq.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f68:	f000 80f3 	beq.w	8002152 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	09db      	lsrs	r3, r3, #7
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00f      	beq.n	8001f98 <HAL_I2C_EV_IRQHandler+0x11c>
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	0a9b      	lsrs	r3, r3, #10
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d009      	beq.n	8001f98 <HAL_I2C_EV_IRQHandler+0x11c>
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d103      	bne.n	8001f98 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f939 	bl	8002208 <I2C_MasterTransmit_TXE>
 8001f96:	e04d      	b.n	8002034 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80d6 	beq.w	8002152 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	0a5b      	lsrs	r3, r3, #9
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80cf 	beq.w	8002152 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001fb4:	7bbb      	ldrb	r3, [r7, #14]
 8001fb6:	2b21      	cmp	r3, #33	@ 0x21
 8001fb8:	d103      	bne.n	8001fc2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f9c0 	bl	8002340 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fc0:	e0c7      	b.n	8002152 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b40      	cmp	r3, #64	@ 0x40
 8001fc6:	f040 80c4 	bne.w	8002152 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fa2e 	bl	800242c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fd0:	e0bf      	b.n	8002152 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fe0:	f000 80b7 	beq.w	8002152 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	099b      	lsrs	r3, r3, #6
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00f      	beq.n	8002010 <HAL_I2C_EV_IRQHandler+0x194>
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	0a9b      	lsrs	r3, r3, #10
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d009      	beq.n	8002010 <HAL_I2C_EV_IRQHandler+0x194>
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 faa7 	bl	800255c <I2C_MasterReceive_RXNE>
 800200e:	e011      	b.n	8002034 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 809a 	beq.w	8002152 <HAL_I2C_EV_IRQHandler+0x2d6>
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	0a5b      	lsrs	r3, r3, #9
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8093 	beq.w	8002152 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fb5d 	bl	80026ec <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002032:	e08e      	b.n	8002152 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002034:	e08d      	b.n	8002152 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d004      	beq.n	8002048 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e007      	b.n	8002058 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	085b      	lsrs	r3, r3, #1
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d012      	beq.n	800208a <HAL_I2C_EV_IRQHandler+0x20e>
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	0a5b      	lsrs	r3, r3, #9
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00c      	beq.n	800208a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002080:	69b9      	ldr	r1, [r7, #24]
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 ff28 	bl	8002ed8 <I2C_Slave_ADDR>
 8002088:	e066      	b.n	8002158 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_I2C_EV_IRQHandler+0x22e>
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	0a5b      	lsrs	r3, r3, #9
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 ff62 	bl	8002f6c <I2C_Slave_STOPF>
 80020a8:	e056      	b.n	8002158 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020aa:	7bbb      	ldrb	r3, [r7, #14]
 80020ac:	2b21      	cmp	r3, #33	@ 0x21
 80020ae:	d002      	beq.n	80020b6 <HAL_I2C_EV_IRQHandler+0x23a>
 80020b0:	7bbb      	ldrb	r3, [r7, #14]
 80020b2:	2b29      	cmp	r3, #41	@ 0x29
 80020b4:	d125      	bne.n	8002102 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	09db      	lsrs	r3, r3, #7
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00f      	beq.n	80020e2 <HAL_I2C_EV_IRQHandler+0x266>
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	0a9b      	lsrs	r3, r3, #10
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_I2C_EV_IRQHandler+0x266>
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fe40 	bl	8002d60 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020e0:	e039      	b.n	8002156 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d033      	beq.n	8002156 <HAL_I2C_EV_IRQHandler+0x2da>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	0a5b      	lsrs	r3, r3, #9
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d02d      	beq.n	8002156 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fe6d 	bl	8002dda <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002100:	e029      	b.n	8002156 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	099b      	lsrs	r3, r3, #6
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00f      	beq.n	800212e <HAL_I2C_EV_IRQHandler+0x2b2>
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	0a9b      	lsrs	r3, r3, #10
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_I2C_EV_IRQHandler+0x2b2>
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fe77 	bl	8002e1a <I2C_SlaveReceive_RXNE>
 800212c:	e014      	b.n	8002158 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00e      	beq.n	8002158 <HAL_I2C_EV_IRQHandler+0x2dc>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	0a5b      	lsrs	r3, r3, #9
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fea5 	bl	8002e96 <I2C_SlaveReceive_BTF>
 800214c:	e004      	b.n	8002158 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800214e:	bf00      	nop
 8002150:	e002      	b.n	8002158 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002152:	bf00      	nop
 8002154:	e000      	b.n	8002158 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002156:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr

080021a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	70fb      	strb	r3, [r7, #3]
 80021b2:	4613      	mov	r3, r2
 80021b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002216:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800221e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222a:	2b00      	cmp	r3, #0
 800222c:	d150      	bne.n	80022d0 <I2C_MasterTransmit_TXE+0xc8>
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	2b21      	cmp	r3, #33	@ 0x21
 8002232:	d14d      	bne.n	80022d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b08      	cmp	r3, #8
 8002238:	d01d      	beq.n	8002276 <I2C_MasterTransmit_TXE+0x6e>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b20      	cmp	r3, #32
 800223e:	d01a      	beq.n	8002276 <I2C_MasterTransmit_TXE+0x6e>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002246:	d016      	beq.n	8002276 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002256:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2211      	movs	r2, #17
 800225c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ff75 	bl	800215e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002274:	e060      	b.n	8002338 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002284:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002294:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b40      	cmp	r3, #64	@ 0x40
 80022ae:	d107      	bne.n	80022c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7fe ffb5 	bl	8001228 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022be:	e03b      	b.n	8002338 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff48 	bl	800215e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022ce:	e033      	b.n	8002338 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b21      	cmp	r3, #33	@ 0x21
 80022d4:	d005      	beq.n	80022e2 <I2C_MasterTransmit_TXE+0xda>
 80022d6:	7bbb      	ldrb	r3, [r7, #14]
 80022d8:	2b40      	cmp	r3, #64	@ 0x40
 80022da:	d12d      	bne.n	8002338 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	2b22      	cmp	r3, #34	@ 0x22
 80022e0:	d12a      	bne.n	8002338 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d108      	bne.n	80022fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80022fc:	e01c      	b.n	8002338 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b40      	cmp	r3, #64	@ 0x40
 8002308:	d103      	bne.n	8002312 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f88e 	bl	800242c <I2C_MemoryTransmit_TXE_BTF>
}
 8002310:	e012      	b.n	8002338 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002336:	e7ff      	b.n	8002338 <I2C_MasterTransmit_TXE+0x130>
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b21      	cmp	r3, #33	@ 0x21
 8002358:	d164      	bne.n	8002424 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d012      	beq.n	800238a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002388:	e04c      	b.n	8002424 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d01d      	beq.n	80023cc <I2C_MasterTransmit_BTF+0x8c>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b20      	cmp	r3, #32
 8002394:	d01a      	beq.n	80023cc <I2C_MasterTransmit_BTF+0x8c>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800239c:	d016      	beq.n	80023cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2211      	movs	r2, #17
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff feca 	bl	800215e <HAL_I2C_MasterTxCpltCallback>
}
 80023ca:	e02b      	b.n	8002424 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b40      	cmp	r3, #64	@ 0x40
 8002404:	d107      	bne.n	8002416 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe ff0a 	bl	8001228 <HAL_I2C_MemTxCpltCallback>
}
 8002414:	e006      	b.n	8002424 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff fe9d 	bl	800215e <HAL_I2C_MasterTxCpltCallback>
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800243a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002440:	2b00      	cmp	r3, #0
 8002442:	d11d      	bne.n	8002480 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002448:	2b01      	cmp	r3, #1
 800244a:	d10b      	bne.n	8002464 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002450:	b2da      	uxtb	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800245c:	1c9a      	adds	r2, r3, #2
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002462:	e077      	b.n	8002554 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002468:	b29b      	uxth	r3, r3
 800246a:	121b      	asrs	r3, r3, #8
 800246c:	b2da      	uxtb	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800247e:	e069      	b.n	8002554 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002484:	2b01      	cmp	r3, #1
 8002486:	d10b      	bne.n	80024a0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800248c:	b2da      	uxtb	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800249e:	e059      	b.n	8002554 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d152      	bne.n	800254e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b22      	cmp	r3, #34	@ 0x22
 80024ac:	d10d      	bne.n	80024ca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024bc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80024c8:	e044      	b.n	8002554 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d015      	beq.n	8002500 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b21      	cmp	r3, #33	@ 0x21
 80024d8:	d112      	bne.n	8002500 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	781a      	ldrb	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80024fe:	e029      	b.n	8002554 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d124      	bne.n	8002554 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	2b21      	cmp	r3, #33	@ 0x21
 800250e:	d121      	bne.n	8002554 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800251e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800252e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fe6e 	bl	8001228 <HAL_I2C_MemTxCpltCallback>
}
 800254c:	e002      	b.n	8002554 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff fc80 	bl	8001e54 <I2C_Flush_DR>
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b22      	cmp	r3, #34	@ 0x22
 800256e:	f040 80b9 	bne.w	80026e4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002576:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d921      	bls.n	80025ca <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	f040 8096 	bne.w	80026e4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80025c8:	e08c      	b.n	80026e4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d07f      	beq.n	80026d2 <I2C_MasterReceive_RXNE+0x176>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d002      	beq.n	80025de <I2C_MasterReceive_RXNE+0x82>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d179      	bne.n	80026d2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 ffce 	bl	8003580 <I2C_WaitOnSTOPRequestThroughIT>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d14c      	bne.n	8002684 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025f8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002608:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b40      	cmp	r3, #64	@ 0x40
 8002642:	d10a      	bne.n	800265a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fdbd 	bl	80021d2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002658:	e044      	b.n	80026e4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d002      	beq.n	800266e <I2C_MasterReceive_RXNE+0x112>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b20      	cmp	r3, #32
 800266c:	d103      	bne.n	8002676 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30
 8002674:	e002      	b.n	800267c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2212      	movs	r2, #18
 800267a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fd77 	bl	8002170 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002682:	e02f      	b.n	80026e4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002692:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fd8a 	bl	80021e4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026d0:	e008      	b.n	80026e4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e0:	605a      	str	r2, [r3, #4]
}
 80026e2:	e7ff      	b.n	80026e4 <I2C_MasterReceive_RXNE+0x188>
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2b04      	cmp	r3, #4
 8002702:	d11b      	bne.n	800273c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002712:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800273a:	e0c4      	b.n	80028c6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b03      	cmp	r3, #3
 8002744:	d129      	bne.n	800279a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002754:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b04      	cmp	r3, #4
 800275a:	d00a      	beq.n	8002772 <I2C_MasterReceive_BTF+0x86>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d007      	beq.n	8002772 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002770:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002798:	e095      	b.n	80028c6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d17d      	bne.n	80028a0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d002      	beq.n	80027b0 <I2C_MasterReceive_BTF+0xc4>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d108      	bne.n	80027c2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e016      	b.n	80027f0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d002      	beq.n	80027ce <I2C_MasterReceive_BTF+0xe2>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d108      	bne.n	80027e0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e007      	b.n	80027f0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800284a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b40      	cmp	r3, #64	@ 0x40
 800285e:	d10a      	bne.n	8002876 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fcaf 	bl	80021d2 <HAL_I2C_MemRxCpltCallback>
}
 8002874:	e027      	b.n	80028c6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d002      	beq.n	800288a <I2C_MasterReceive_BTF+0x19e>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b20      	cmp	r3, #32
 8002888:	d103      	bne.n	8002892 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002890:	e002      	b.n	8002898 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2212      	movs	r2, #18
 8002896:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff fc69 	bl	8002170 <HAL_I2C_MasterRxCpltCallback>
}
 800289e:	e012      	b.n	80028c6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b40      	cmp	r3, #64	@ 0x40
 80028e0:	d117      	bne.n	8002912 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80028fc:	e067      	b.n	80029ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	b2da      	uxtb	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	611a      	str	r2, [r3, #16]
}
 8002910:	e05d      	b.n	80029ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800291a:	d133      	bne.n	8002984 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b21      	cmp	r3, #33	@ 0x21
 8002926:	d109      	bne.n	800293c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002938:	611a      	str	r2, [r3, #16]
 800293a:	e008      	b.n	800294e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	b2da      	uxtb	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <I2C_Master_SB+0x92>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295c:	2b00      	cmp	r3, #0
 800295e:	d108      	bne.n	8002972 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002964:	2b00      	cmp	r3, #0
 8002966:	d032      	beq.n	80029ce <I2C_Master_SB+0x100>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296e:	2b00      	cmp	r3, #0
 8002970:	d02d      	beq.n	80029ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002980:	605a      	str	r2, [r3, #4]
}
 8002982:	e024      	b.n	80029ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10e      	bne.n	80029aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002990:	b29b      	uxth	r3, r3
 8002992:	11db      	asrs	r3, r3, #7
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f003 0306 	and.w	r3, r3, #6
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f063 030f 	orn	r3, r3, #15
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	611a      	str	r2, [r3, #16]
}
 80029a8:	e011      	b.n	80029ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d10d      	bne.n	80029ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	11db      	asrs	r3, r3, #7
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f003 0306 	and.w	r3, r3, #6
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f063 030e 	orn	r3, r3, #14
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	611a      	str	r2, [r3, #16]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <I2C_Master_ADD10+0x26>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d108      	bne.n	8002a10 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00c      	beq.n	8002a20 <I2C_Master_ADD10+0x48>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a1e:	605a      	str	r2, [r3, #4]
  }
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b091      	sub	sp, #68	@ 0x44
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a38:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b22      	cmp	r3, #34	@ 0x22
 8002a52:	f040 8174 	bne.w	8002d3e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10f      	bne.n	8002a7e <I2C_Master_ADDR+0x54>
 8002a5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a62:	2b40      	cmp	r3, #64	@ 0x40
 8002a64:	d10b      	bne.n	8002a7e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a66:	2300      	movs	r3, #0
 8002a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7c:	e16b      	b.n	8002d56 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11d      	bne.n	8002ac2 <I2C_Master_ADDR+0x98>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002a8e:	d118      	bne.n	8002ac2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a90:	2300      	movs	r3, #0
 8002a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ab4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ac0:	e149      	b.n	8002d56 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d113      	bne.n	8002af4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002acc:	2300      	movs	r3, #0
 8002ace:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e120      	b.n	8002d36 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	f040 808a 	bne.w	8002c14 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b02:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b06:	d137      	bne.n	8002b78 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b16:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b26:	d113      	bne.n	8002b50 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b36:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b38:	2300      	movs	r3, #0
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	e0f2      	b.n	8002d36 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b50:	2300      	movs	r3, #0
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	623b      	str	r3, [r7, #32]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	623b      	str	r3, [r7, #32]
 8002b64:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	e0de      	b.n	8002d36 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d02e      	beq.n	8002bdc <I2C_Master_ADDR+0x1b2>
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d02b      	beq.n	8002bdc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b86:	2b12      	cmp	r3, #18
 8002b88:	d102      	bne.n	8002b90 <I2C_Master_ADDR+0x166>
 8002b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d125      	bne.n	8002bdc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d00e      	beq.n	8002bb4 <I2C_Master_ADDR+0x18a>
 8002b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d00b      	beq.n	8002bb4 <I2C_Master_ADDR+0x18a>
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	d008      	beq.n	8002bb4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e007      	b.n	8002bc4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bc2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	61fb      	str	r3, [r7, #28]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	e0ac      	b.n	8002d36 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bec:	2300      	movs	r3, #0
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	61bb      	str	r3, [r7, #24]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e090      	b.n	8002d36 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d158      	bne.n	8002cd0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d021      	beq.n	8002c68 <I2C_Master_ADDR+0x23e>
 8002c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d01e      	beq.n	8002c68 <I2C_Master_ADDR+0x23e>
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d01b      	beq.n	8002c68 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c3e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e012      	b.n	8002c8e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c76:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c9c:	d14b      	bne.n	8002d36 <I2C_Master_ADDR+0x30c>
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ca4:	d00b      	beq.n	8002cbe <I2C_Master_ADDR+0x294>
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d008      	beq.n	8002cbe <I2C_Master_ADDR+0x294>
 8002cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d005      	beq.n	8002cbe <I2C_Master_ADDR+0x294>
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	d002      	beq.n	8002cbe <I2C_Master_ADDR+0x294>
 8002cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d13b      	bne.n	8002d36 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	e032      	b.n	8002d36 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cde:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cee:	d117      	bne.n	8002d20 <I2C_Master_ADDR+0x2f6>
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cf6:	d00b      	beq.n	8002d10 <I2C_Master_ADDR+0x2e6>
 8002cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d008      	beq.n	8002d10 <I2C_Master_ADDR+0x2e6>
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d005      	beq.n	8002d10 <I2C_Master_ADDR+0x2e6>
 8002d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d002      	beq.n	8002d10 <I2C_Master_ADDR+0x2e6>
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d107      	bne.n	8002d20 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d1e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002d3c:	e00b      	b.n	8002d56 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
}
 8002d54:	e7ff      	b.n	8002d56 <I2C_Master_ADDR+0x32c>
 8002d56:	bf00      	nop
 8002d58:	3744      	adds	r7, #68	@ 0x44
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d02b      	beq.n	8002dd2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	781a      	ldrb	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d114      	bne.n	8002dd2 <I2C_SlaveTransmit_TXE+0x72>
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b29      	cmp	r3, #41	@ 0x29
 8002dac:	d111      	bne.n	8002dd2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dbc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2221      	movs	r2, #33	@ 0x21
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2228      	movs	r2, #40	@ 0x28
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff f9d8 	bl	8002182 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d011      	beq.n	8002e10 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	781a      	ldrb	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e28:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d02c      	beq.n	8002e8e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d114      	bne.n	8002e8e <I2C_SlaveReceive_RXNE+0x74>
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e68:	d111      	bne.n	8002e8e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2222      	movs	r2, #34	@ 0x22
 8002e7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2228      	movs	r2, #40	@ 0x28
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff f983 	bl	8002194 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d012      	beq.n	8002ece <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ef2:	2b28      	cmp	r3, #40	@ 0x28
 8002ef4:	d127      	bne.n	8002f46 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f04:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	09db      	lsrs	r3, r3, #7
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d103      	bne.n	8002f2a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	81bb      	strh	r3, [r7, #12]
 8002f28:	e002      	b.n	8002f30 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002f38:	89ba      	ldrh	r2, [r7, #12]
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff f931 	bl	80021a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f44:	e00e      	b.n	8002f64 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f7a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f8a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fc8:	d172      	bne.n	80030b0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	2b22      	cmp	r3, #34	@ 0x22
 8002fce:	d002      	beq.n	8002fd6 <I2C_Slave_STOPF+0x6a>
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fd4:	d135      	bne.n	8003042 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	f043 0204 	orr.w	r2, r3, #4
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003008:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fc32 	bl	8001878 <HAL_DMA_GetState>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	d049      	beq.n	80030ae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301e:	4a69      	ldr	r2, [pc, #420]	@ (80031c4 <I2C_Slave_STOPF+0x258>)
 8003020:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fbae 	bl	8001788 <HAL_DMA_Abort_IT>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d03d      	beq.n	80030ae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800303c:	4610      	mov	r0, r2
 800303e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003040:	e035      	b.n	80030ae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	f043 0204 	orr.w	r2, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003074:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fbfc 	bl	8001878 <HAL_DMA_GetState>
 8003080:	4603      	mov	r3, r0
 8003082:	2b01      	cmp	r3, #1
 8003084:	d014      	beq.n	80030b0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308a:	4a4e      	ldr	r2, [pc, #312]	@ (80031c4 <I2C_Slave_STOPF+0x258>)
 800308c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fb78 	bl	8001788 <HAL_DMA_Abort_IT>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030a8:	4610      	mov	r0, r2
 80030aa:	4798      	blx	r3
 80030ac:	e000      	b.n	80030b0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030ae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d03e      	beq.n	8003138 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d112      	bne.n	80030ee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f8:	2b40      	cmp	r3, #64	@ 0x40
 80030fa:	d112      	bne.n	8003122 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	f043 0204 	orr.w	r2, r3, #4
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f843 	bl	80031cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003146:	e039      	b.n	80031bc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b2a      	cmp	r3, #42	@ 0x2a
 800314c:	d109      	bne.n	8003162 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2228      	movs	r2, #40	@ 0x28
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff f819 	bl	8002194 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b28      	cmp	r3, #40	@ 0x28
 800316c:	d111      	bne.n	8003192 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a15      	ldr	r2, [pc, #84]	@ (80031c8 <I2C_Slave_STOPF+0x25c>)
 8003172:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff f818 	bl	80021c0 <HAL_I2C_ListenCpltCallback>
}
 8003190:	e014      	b.n	80031bc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	2b22      	cmp	r3, #34	@ 0x22
 8003198:	d002      	beq.n	80031a0 <I2C_Slave_STOPF+0x234>
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b22      	cmp	r3, #34	@ 0x22
 800319e:	d10d      	bne.n	80031bc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fe ffec 	bl	8002194 <HAL_I2C_SlaveRxCpltCallback>
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	08003431 	.word	0x08003431
 80031c8:	ffff0000 	.word	0xffff0000

080031cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031e4:	7bbb      	ldrb	r3, [r7, #14]
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d002      	beq.n	80031f0 <I2C_ITError+0x24>
 80031ea:	7bbb      	ldrb	r3, [r7, #14]
 80031ec:	2b40      	cmp	r3, #64	@ 0x40
 80031ee:	d10a      	bne.n	8003206 <I2C_ITError+0x3a>
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b22      	cmp	r3, #34	@ 0x22
 80031f4:	d107      	bne.n	8003206 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003204:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800320c:	2b28      	cmp	r3, #40	@ 0x28
 800320e:	d107      	bne.n	8003220 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2228      	movs	r2, #40	@ 0x28
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800321e:	e015      	b.n	800324c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800322a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800322e:	d00a      	beq.n	8003246 <I2C_ITError+0x7a>
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b60      	cmp	r3, #96	@ 0x60
 8003234:	d007      	beq.n	8003246 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003256:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800325a:	d162      	bne.n	8003322 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800326a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003270:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d020      	beq.n	80032bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327e:	4a6a      	ldr	r2, [pc, #424]	@ (8003428 <I2C_ITError+0x25c>)
 8003280:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe fa7e 	bl	8001788 <HAL_DMA_Abort_IT>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8089 	beq.w	80033a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032b6:	4610      	mov	r0, r2
 80032b8:	4798      	blx	r3
 80032ba:	e074      	b.n	80033a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	4a59      	ldr	r2, [pc, #356]	@ (8003428 <I2C_ITError+0x25c>)
 80032c2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fa5d 	bl	8001788 <HAL_DMA_Abort_IT>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d068      	beq.n	80033a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032de:	2b40      	cmp	r3, #64	@ 0x40
 80032e0:	d10b      	bne.n	80032fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800331c:	4610      	mov	r0, r2
 800331e:	4798      	blx	r3
 8003320:	e041      	b.n	80033a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b60      	cmp	r3, #96	@ 0x60
 800332c:	d125      	bne.n	800337a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003346:	2b40      	cmp	r3, #64	@ 0x40
 8003348:	d10b      	bne.n	8003362 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe ff3f 	bl	80021f6 <HAL_I2C_AbortCpltCallback>
 8003378:	e015      	b.n	80033a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003384:	2b40      	cmp	r3, #64	@ 0x40
 8003386:	d10b      	bne.n	80033a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7fe ff1f 	bl	80021e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10e      	bne.n	80033d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d104      	bne.n	80033d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d113      	bne.n	8003420 <I2C_ITError+0x254>
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b28      	cmp	r3, #40	@ 0x28
 80033fc:	d110      	bne.n	8003420 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a0a      	ldr	r2, [pc, #40]	@ (800342c <I2C_ITError+0x260>)
 8003402:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fe fed0 	bl	80021c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	08003431 	.word	0x08003431
 800342c:	ffff0000 	.word	0xffff0000

08003430 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003448:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800344a:	4b4b      	ldr	r3, [pc, #300]	@ (8003578 <I2C_DMAAbort+0x148>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	08db      	lsrs	r3, r3, #3
 8003450:	4a4a      	ldr	r2, [pc, #296]	@ (800357c <I2C_DMAAbort+0x14c>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	0a1a      	lsrs	r2, r3, #8
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00da      	lsls	r2, r3, #3
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	f043 0220 	orr.w	r2, r3, #32
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003476:	e00a      	b.n	800348e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3b01      	subs	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800348c:	d0ea      	beq.n	8003464 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349a:	2200      	movs	r2, #0
 800349c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034aa:	2200      	movs	r2, #0
 80034ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2200      	movs	r2, #0
 80034c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d0:	2200      	movs	r2, #0
 80034d2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	2200      	movs	r2, #0
 80034e2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b60      	cmp	r3, #96	@ 0x60
 80034fe:	d10e      	bne.n	800351e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2200      	movs	r2, #0
 8003514:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003516:	6978      	ldr	r0, [r7, #20]
 8003518:	f7fe fe6d 	bl	80021f6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800351c:	e027      	b.n	800356e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003524:	2b28      	cmp	r3, #40	@ 0x28
 8003526:	d117      	bne.n	8003558 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003546:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2200      	movs	r2, #0
 800354c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2228      	movs	r2, #40	@ 0x28
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003556:	e007      	b.n	8003568 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003568:	6978      	ldr	r0, [r7, #20]
 800356a:	f7fe fe3b 	bl	80021e4 <HAL_I2C_ErrorCallback>
}
 800356e:	bf00      	nop
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000000 	.word	0x20000000
 800357c:	14f8b589 	.word	0x14f8b589

08003580 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800358c:	4b13      	ldr	r3, [pc, #76]	@ (80035dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	08db      	lsrs	r3, r3, #3
 8003592:	4a13      	ldr	r2, [pc, #76]	@ (80035e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003594:	fba2 2303 	umull	r2, r3, r2, r3
 8003598:	0a1a      	lsrs	r2, r3, #8
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d107      	bne.n	80035be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	f043 0220 	orr.w	r2, r3, #32
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e008      	b.n	80035d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035cc:	d0e9      	beq.n	80035a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000000 	.word	0x20000000
 80035e0:	14f8b589 	.word	0x14f8b589

080035e4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80035f4:	d103      	bne.n	80035fe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80035fc:	e007      	b.n	800360e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003602:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003606:	d102      	bne.n	800360e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2208      	movs	r2, #8
 800360c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e272      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8087 	beq.w	8003746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003638:	4b92      	ldr	r3, [pc, #584]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b04      	cmp	r3, #4
 8003642:	d00c      	beq.n	800365e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003644:	4b8f      	ldr	r3, [pc, #572]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b08      	cmp	r3, #8
 800364e:	d112      	bne.n	8003676 <HAL_RCC_OscConfig+0x5e>
 8003650:	4b8c      	ldr	r3, [pc, #560]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800365c:	d10b      	bne.n	8003676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365e:	4b89      	ldr	r3, [pc, #548]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d06c      	beq.n	8003744 <HAL_RCC_OscConfig+0x12c>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d168      	bne.n	8003744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e24c      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800367e:	d106      	bne.n	800368e <HAL_RCC_OscConfig+0x76>
 8003680:	4b80      	ldr	r3, [pc, #512]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a7f      	ldr	r2, [pc, #508]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	e02e      	b.n	80036ec <HAL_RCC_OscConfig+0xd4>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x98>
 8003696:	4b7b      	ldr	r3, [pc, #492]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7a      	ldr	r2, [pc, #488]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 800369c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	4b78      	ldr	r3, [pc, #480]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a77      	ldr	r2, [pc, #476]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 80036a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e01d      	b.n	80036ec <HAL_RCC_OscConfig+0xd4>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCC_OscConfig+0xbc>
 80036ba:	4b72      	ldr	r3, [pc, #456]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a71      	ldr	r2, [pc, #452]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 80036c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e00b      	b.n	80036ec <HAL_RCC_OscConfig+0xd4>
 80036d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 80036da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	4b68      	ldr	r3, [pc, #416]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a67      	ldr	r2, [pc, #412]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d013      	beq.n	800371c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fd feca 	bl	800148c <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fd fec6 	bl	800148c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	@ 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e200      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	4b5d      	ldr	r3, [pc, #372]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0xe4>
 800371a:	e014      	b.n	8003746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fd feb6 	bl	800148c <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fd feb2 	bl	800148c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	@ 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e1ec      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003736:	4b53      	ldr	r3, [pc, #332]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x10c>
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d063      	beq.n	800381a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003752:	4b4c      	ldr	r3, [pc, #304]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800375e:	4b49      	ldr	r3, [pc, #292]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b08      	cmp	r3, #8
 8003768:	d11c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x18c>
 800376a:	4b46      	ldr	r3, [pc, #280]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d116      	bne.n	80037a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003776:	4b43      	ldr	r3, [pc, #268]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_RCC_OscConfig+0x176>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d001      	beq.n	800378e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e1c0      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378e:	4b3d      	ldr	r3, [pc, #244]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4939      	ldr	r1, [pc, #228]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a2:	e03a      	b.n	800381a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d020      	beq.n	80037ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ac:	4b36      	ldr	r3, [pc, #216]	@ (8003888 <HAL_RCC_OscConfig+0x270>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fd fe6b 	bl	800148c <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ba:	f7fd fe67 	bl	800148c <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e1a1      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4927      	ldr	r1, [pc, #156]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	600b      	str	r3, [r1, #0]
 80037ec:	e015      	b.n	800381a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ee:	4b26      	ldr	r3, [pc, #152]	@ (8003888 <HAL_RCC_OscConfig+0x270>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fd fe4a 	bl	800148c <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fc:	f7fd fe46 	bl	800148c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e180      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380e:	4b1d      	ldr	r3, [pc, #116]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d03a      	beq.n	800389c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d019      	beq.n	8003862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382e:	4b17      	ldr	r3, [pc, #92]	@ (800388c <HAL_RCC_OscConfig+0x274>)
 8003830:	2201      	movs	r2, #1
 8003832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003834:	f7fd fe2a 	bl	800148c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800383c:	f7fd fe26 	bl	800148c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e160      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384e:	4b0d      	ldr	r3, [pc, #52]	@ (8003884 <HAL_RCC_OscConfig+0x26c>)
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800385a:	2001      	movs	r0, #1
 800385c:	f000 face 	bl	8003dfc <RCC_Delay>
 8003860:	e01c      	b.n	800389c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003862:	4b0a      	ldr	r3, [pc, #40]	@ (800388c <HAL_RCC_OscConfig+0x274>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003868:	f7fd fe10 	bl	800148c <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386e:	e00f      	b.n	8003890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003870:	f7fd fe0c 	bl	800148c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d908      	bls.n	8003890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e146      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	42420000 	.word	0x42420000
 800388c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003890:	4b92      	ldr	r3, [pc, #584]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e9      	bne.n	8003870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80a6 	beq.w	80039f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038aa:	2300      	movs	r3, #0
 80038ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ae:	4b8b      	ldr	r3, [pc, #556]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10d      	bne.n	80038d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ba:	4b88      	ldr	r3, [pc, #544]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	4a87      	ldr	r2, [pc, #540]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c4:	61d3      	str	r3, [r2, #28]
 80038c6:	4b85      	ldr	r3, [pc, #532]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d2:	2301      	movs	r3, #1
 80038d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d6:	4b82      	ldr	r3, [pc, #520]	@ (8003ae0 <HAL_RCC_OscConfig+0x4c8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d118      	bne.n	8003914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ae0 <HAL_RCC_OscConfig+0x4c8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ae0 <HAL_RCC_OscConfig+0x4c8>)
 80038e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ee:	f7fd fdcd 	bl	800148c <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f6:	f7fd fdc9 	bl	800148c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b64      	cmp	r3, #100	@ 0x64
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e103      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	4b75      	ldr	r3, [pc, #468]	@ (8003ae0 <HAL_RCC_OscConfig+0x4c8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x312>
 800391c:	4b6f      	ldr	r3, [pc, #444]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	4a6e      	ldr	r2, [pc, #440]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6213      	str	r3, [r2, #32]
 8003928:	e02d      	b.n	8003986 <HAL_RCC_OscConfig+0x36e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x334>
 8003932:	4b6a      	ldr	r3, [pc, #424]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	4a69      	ldr	r2, [pc, #420]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	6213      	str	r3, [r2, #32]
 800393e:	4b67      	ldr	r3, [pc, #412]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4a66      	ldr	r2, [pc, #408]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003944:	f023 0304 	bic.w	r3, r3, #4
 8003948:	6213      	str	r3, [r2, #32]
 800394a:	e01c      	b.n	8003986 <HAL_RCC_OscConfig+0x36e>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2b05      	cmp	r3, #5
 8003952:	d10c      	bne.n	800396e <HAL_RCC_OscConfig+0x356>
 8003954:	4b61      	ldr	r3, [pc, #388]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	4a60      	ldr	r2, [pc, #384]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 800395a:	f043 0304 	orr.w	r3, r3, #4
 800395e:	6213      	str	r3, [r2, #32]
 8003960:	4b5e      	ldr	r3, [pc, #376]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	4a5d      	ldr	r2, [pc, #372]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6213      	str	r3, [r2, #32]
 800396c:	e00b      	b.n	8003986 <HAL_RCC_OscConfig+0x36e>
 800396e:	4b5b      	ldr	r3, [pc, #364]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	4a5a      	ldr	r2, [pc, #360]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	6213      	str	r3, [r2, #32]
 800397a:	4b58      	ldr	r3, [pc, #352]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	4a57      	ldr	r2, [pc, #348]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003980:	f023 0304 	bic.w	r3, r3, #4
 8003984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d015      	beq.n	80039ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398e:	f7fd fd7d 	bl	800148c <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003996:	f7fd fd79 	bl	800148c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e0b1      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ac:	4b4b      	ldr	r3, [pc, #300]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ee      	beq.n	8003996 <HAL_RCC_OscConfig+0x37e>
 80039b8:	e014      	b.n	80039e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ba:	f7fd fd67 	bl	800148c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fd fd63 	bl	800148c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e09b      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d8:	4b40      	ldr	r3, [pc, #256]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1ee      	bne.n	80039c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d105      	bne.n	80039f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ea:	4b3c      	ldr	r3, [pc, #240]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	4a3b      	ldr	r2, [pc, #236]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 8087 	beq.w	8003b0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a00:	4b36      	ldr	r3, [pc, #216]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d061      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d146      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a14:	4b33      	ldr	r3, [pc, #204]	@ (8003ae4 <HAL_RCC_OscConfig+0x4cc>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1a:	f7fd fd37 	bl	800148c <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fd fd33 	bl	800148c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e06d      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a34:	4b29      	ldr	r3, [pc, #164]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f0      	bne.n	8003a22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a48:	d108      	bne.n	8003a5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a4a:	4b24      	ldr	r3, [pc, #144]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	4921      	ldr	r1, [pc, #132]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a19      	ldr	r1, [r3, #32]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	491b      	ldr	r1, [pc, #108]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae4 <HAL_RCC_OscConfig+0x4cc>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7a:	f7fd fd07 	bl	800148c <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a82:	f7fd fd03 	bl	800148c <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e03d      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a94:	4b11      	ldr	r3, [pc, #68]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x46a>
 8003aa0:	e035      	b.n	8003b0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa2:	4b10      	ldr	r3, [pc, #64]	@ (8003ae4 <HAL_RCC_OscConfig+0x4cc>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fcf0 	bl	800148c <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fd fcec 	bl	800148c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e026      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac2:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x498>
 8003ace:	e01e      	b.n	8003b0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d107      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e019      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40007000 	.word	0x40007000
 8003ae4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <HAL_RCC_OscConfig+0x500>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d106      	bne.n	8003b0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d001      	beq.n	8003b0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40021000 	.word	0x40021000

08003b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0d0      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b30:	4b6a      	ldr	r3, [pc, #424]	@ (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d910      	bls.n	8003b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b67      	ldr	r3, [pc, #412]	@ (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 0207 	bic.w	r2, r3, #7
 8003b46:	4965      	ldr	r1, [pc, #404]	@ (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b63      	ldr	r3, [pc, #396]	@ (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0b8      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d020      	beq.n	8003bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b78:	4b59      	ldr	r3, [pc, #356]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a58      	ldr	r2, [pc, #352]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b90:	4b53      	ldr	r3, [pc, #332]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4a52      	ldr	r2, [pc, #328]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b9c:	4b50      	ldr	r3, [pc, #320]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	494d      	ldr	r1, [pc, #308]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d040      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc2:	4b47      	ldr	r3, [pc, #284]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d115      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e07f      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bda:	4b41      	ldr	r3, [pc, #260]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e073      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bea:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e06b      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfa:	4b39      	ldr	r3, [pc, #228]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f023 0203 	bic.w	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4936      	ldr	r1, [pc, #216]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c0c:	f7fd fc3e 	bl	800148c <HAL_GetTick>
 8003c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c14:	f7fd fc3a 	bl	800148c <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e053      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 020c 	and.w	r2, r3, #12
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d1eb      	bne.n	8003c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b27      	ldr	r3, [pc, #156]	@ (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d210      	bcs.n	8003c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b24      	ldr	r3, [pc, #144]	@ (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 0207 	bic.w	r2, r3, #7
 8003c52:	4922      	ldr	r1, [pc, #136]	@ (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b20      	ldr	r3, [pc, #128]	@ (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e032      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c78:	4b19      	ldr	r3, [pc, #100]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4916      	ldr	r1, [pc, #88]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d009      	beq.n	8003caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c96:	4b12      	ldr	r3, [pc, #72]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	490e      	ldr	r1, [pc, #56]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003caa:	f000 f821 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	490a      	ldr	r1, [pc, #40]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cbc:	5ccb      	ldrb	r3, [r1, r3]
 8003cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc2:	4a09      	ldr	r2, [pc, #36]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8003cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cc6:	4b09      	ldr	r3, [pc, #36]	@ (8003cec <HAL_RCC_ClockConfig+0x1d0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd fb9c 	bl	8001408 <HAL_InitTick>

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40022000 	.word	0x40022000
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	0800b6fc 	.word	0x0800b6fc
 8003ce8:	20000000 	.word	0x20000000
 8003cec:	20000004 	.word	0x20000004

08003cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	2300      	movs	r3, #0
 8003d04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d002      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x30>
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCC_GetSysClockFreq+0x36>
 8003d1e:	e027      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d20:	4b19      	ldr	r3, [pc, #100]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d22:	613b      	str	r3, [r7, #16]
      break;
 8003d24:	e027      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	0c9b      	lsrs	r3, r3, #18
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	4a17      	ldr	r2, [pc, #92]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d30:	5cd3      	ldrb	r3, [r2, r3]
 8003d32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d010      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d3e:	4b11      	ldr	r3, [pc, #68]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	0c5b      	lsrs	r3, r3, #17
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	4a11      	ldr	r2, [pc, #68]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d4a:	5cd3      	ldrb	r3, [r2, r3]
 8003d4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a0d      	ldr	r2, [pc, #52]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d52:	fb03 f202 	mul.w	r2, r3, r2
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	e004      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a0c      	ldr	r2, [pc, #48]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d64:	fb02 f303 	mul.w	r3, r2, r3
 8003d68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	613b      	str	r3, [r7, #16]
      break;
 8003d6e:	e002      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d70:	4b05      	ldr	r3, [pc, #20]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d72:	613b      	str	r3, [r7, #16]
      break;
 8003d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d76:	693b      	ldr	r3, [r7, #16]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40021000 	.word	0x40021000
 8003d88:	007a1200 	.word	0x007a1200
 8003d8c:	0800b714 	.word	0x0800b714
 8003d90:	0800b724 	.word	0x0800b724
 8003d94:	003d0900 	.word	0x003d0900

08003d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d9c:	4b02      	ldr	r3, [pc, #8]	@ (8003da8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr
 8003da8:	20000000 	.word	0x20000000

08003dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003db0:	f7ff fff2 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4903      	ldr	r1, [pc, #12]	@ (8003dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	0800b70c 	.word	0x0800b70c

08003dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dd8:	f7ff ffde 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	0adb      	lsrs	r3, r3, #11
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4903      	ldr	r1, [pc, #12]	@ (8003df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	0800b70c 	.word	0x0800b70c

08003dfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e04:	4b0a      	ldr	r3, [pc, #40]	@ (8003e30 <RCC_Delay+0x34>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a0a      	ldr	r2, [pc, #40]	@ (8003e34 <RCC_Delay+0x38>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	0a5b      	lsrs	r3, r3, #9
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e18:	bf00      	nop
  }
  while (Delay --);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1e5a      	subs	r2, r3, #1
 8003e1e:	60fa      	str	r2, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1f9      	bne.n	8003e18 <RCC_Delay+0x1c>
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr
 8003e30:	20000000 	.word	0x20000000
 8003e34:	10624dd3 	.word	0x10624dd3

08003e38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e042      	b.n	8003ed0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd f94e 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2224      	movs	r2, #36	@ 0x24
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fded 	bl	8004a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003eb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	@ 0x28
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	d175      	bne.n	8003fe4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_UART_Transmit+0x2c>
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e06e      	b.n	8003fe6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2221      	movs	r2, #33	@ 0x21
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f16:	f7fd fab9 	bl	800148c <HAL_GetTick>
 8003f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	88fa      	ldrh	r2, [r7, #6]
 8003f26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f30:	d108      	bne.n	8003f44 <HAL_UART_Transmit+0x6c>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d104      	bne.n	8003f44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	e003      	b.n	8003f4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f4c:	e02e      	b.n	8003fac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2200      	movs	r2, #0
 8003f56:	2180      	movs	r1, #128	@ 0x80
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fb52 	bl	8004602 <UART_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e03a      	b.n	8003fe6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10b      	bne.n	8003f8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	3302      	adds	r3, #2
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	e007      	b.n	8003f9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	781a      	ldrb	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1cb      	bne.n	8003f4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2140      	movs	r1, #64	@ 0x40
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fb1e 	bl	8004602 <UART_WaitOnFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e006      	b.n	8003fe6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e000      	b.n	8003fe6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fe4:	2302      	movs	r3, #2
  }
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3720      	adds	r7, #32
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b08c      	sub	sp, #48	@ 0x30
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b20      	cmp	r3, #32
 8004006:	d14a      	bne.n	800409e <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e043      	b.n	80040a0 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	461a      	mov	r2, r3
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fb42 	bl	80046b4 <UART_Start_Receive_IT>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004036:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800403a:	2b00      	cmp	r3, #0
 800403c:	d12c      	bne.n	8004098 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004042:	2b01      	cmp	r3, #1
 8004044:	d125      	bne.n	8004092 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	617b      	str	r3, [r7, #20]
   return(result);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f043 0310 	orr.w	r3, r3, #16
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800407c:	627a      	str	r2, [r7, #36]	@ 0x24
 800407e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6a39      	ldr	r1, [r7, #32]
 8004082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	61fb      	str	r3, [r7, #28]
   return(result);
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e5      	bne.n	800405c <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004090:	e002      	b.n	8004098 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004098:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800409c:	e000      	b.n	80040a0 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800409e:	2302      	movs	r3, #2
  }
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3730      	adds	r7, #48	@ 0x30
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b0ba      	sub	sp, #232	@ 0xe8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80040e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_UART_IRQHandler+0x66>
 80040fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fbea 	bl	80048e0 <UART_Receive_IT>
      return;
 800410c:	e25b      	b.n	80045c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800410e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 80de 	beq.w	80042d4 <HAL_UART_IRQHandler+0x22c>
 8004118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d106      	bne.n	8004132 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004128:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80d1 	beq.w	80042d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00b      	beq.n	8004156 <HAL_UART_IRQHandler+0xae>
 800413e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414e:	f043 0201 	orr.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00b      	beq.n	800417a <HAL_UART_IRQHandler+0xd2>
 8004162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004172:	f043 0202 	orr.w	r2, r3, #2
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <HAL_UART_IRQHandler+0xf6>
 8004186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004196:	f043 0204 	orr.w	r2, r3, #4
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800419e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d011      	beq.n	80041ce <HAL_UART_IRQHandler+0x126>
 80041aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c6:	f043 0208 	orr.w	r2, r3, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 81f2 	beq.w	80045bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_UART_IRQHandler+0x14e>
 80041e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fb75 	bl	80048e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	bf14      	ite	ne
 8004204:	2301      	movne	r3, #1
 8004206:	2300      	moveq	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d103      	bne.n	8004222 <HAL_UART_IRQHandler+0x17a>
 800421a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800421e:	2b00      	cmp	r3, #0
 8004220:	d04f      	beq.n	80042c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fa7f 	bl	8004726 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d041      	beq.n	80042ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3314      	adds	r3, #20
 800423c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800424c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004254:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3314      	adds	r3, #20
 800425e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004262:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004266:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800426e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800427a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1d9      	bne.n	8004236 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d013      	beq.n	80042b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428e:	4a7e      	ldr	r2, [pc, #504]	@ (8004488 <HAL_UART_IRQHandler+0x3e0>)
 8004290:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd fa76 	bl	8001788 <HAL_DMA_Abort_IT>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042ac:	4610      	mov	r0, r2
 80042ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b0:	e00e      	b.n	80042d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f99c 	bl	80045f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b8:	e00a      	b.n	80042d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f998 	bl	80045f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c0:	e006      	b.n	80042d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f994 	bl	80045f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80042ce:	e175      	b.n	80045bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d0:	bf00      	nop
    return;
 80042d2:	e173      	b.n	80045bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d8:	2b01      	cmp	r3, #1
 80042da:	f040 814f 	bne.w	800457c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 8148 	beq.w	800457c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8141 	beq.w	800457c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80b6 	beq.w	800448c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800432c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8145 	beq.w	80045c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800433a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800433e:	429a      	cmp	r2, r3
 8004340:	f080 813e 	bcs.w	80045c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800434a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b20      	cmp	r3, #32
 8004354:	f000 8088 	beq.w	8004468 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800436e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004372:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004376:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	330c      	adds	r3, #12
 8004380:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004384:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004388:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004390:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800439c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1d9      	bne.n	8004358 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3314      	adds	r3, #20
 80043aa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043ae:	e853 3f00 	ldrex	r3, [r3]
 80043b2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3314      	adds	r3, #20
 80043c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043c8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80043d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e1      	bne.n	80043a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3314      	adds	r3, #20
 8004400:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004404:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004406:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800440a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e3      	bne.n	80043e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	330c      	adds	r3, #12
 800442c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004438:	f023 0310 	bic.w	r3, r3, #16
 800443c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800444a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800444c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004450:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004458:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e3      	bne.n	8004426 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004462:	4618      	mov	r0, r3
 8004464:	f7fd f955 	bl	8001712 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004476:	b29b      	uxth	r3, r3
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	b29b      	uxth	r3, r3
 800447c:	4619      	mov	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fc fd82 	bl	8000f88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004484:	e09c      	b.n	80045c0 <HAL_UART_IRQHandler+0x518>
 8004486:	bf00      	nop
 8004488:	080047eb 	.word	0x080047eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004494:	b29b      	uxth	r3, r3
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 808e 	beq.w	80045c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8089 	beq.w	80045c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80044d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80044d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e3      	bne.n	80044b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3314      	adds	r3, #20
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	623b      	str	r3, [r7, #32]
   return(result);
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3314      	adds	r3, #20
 800450a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800450e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004510:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800451c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e3      	bne.n	80044ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0310 	bic.w	r3, r3, #16
 8004546:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	330c      	adds	r3, #12
 8004550:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004554:	61fa      	str	r2, [r7, #28]
 8004556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	69b9      	ldr	r1, [r7, #24]
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	617b      	str	r3, [r7, #20]
   return(result);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e3      	bne.n	8004530 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800456e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004572:	4619      	mov	r1, r3
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7fc fd07 	bl	8000f88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800457a:	e023      	b.n	80045c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800457c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004584:	2b00      	cmp	r3, #0
 8004586:	d009      	beq.n	800459c <HAL_UART_IRQHandler+0x4f4>
 8004588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800458c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f93c 	bl	8004812 <UART_Transmit_IT>
    return;
 800459a:	e014      	b.n	80045c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800459c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00e      	beq.n	80045c6 <HAL_UART_IRQHandler+0x51e>
 80045a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f97b 	bl	80048b0 <UART_EndTransmit_IT>
    return;
 80045ba:	e004      	b.n	80045c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80045bc:	bf00      	nop
 80045be:	e002      	b.n	80045c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80045c0:	bf00      	nop
 80045c2:	e000      	b.n	80045c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80045c4:	bf00      	nop
  }
}
 80045c6:	37e8      	adds	r7, #232	@ 0xe8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	4770      	bx	lr

080045de <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr

080045f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	4613      	mov	r3, r2
 8004610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004612:	e03b      	b.n	800468c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d037      	beq.n	800468c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461c:	f7fc ff36 	bl	800148c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	6a3a      	ldr	r2, [r7, #32]
 8004628:	429a      	cmp	r2, r3
 800462a:	d302      	bcc.n	8004632 <UART_WaitOnFlagUntilTimeout+0x30>
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e03a      	b.n	80046ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d023      	beq.n	800468c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b80      	cmp	r3, #128	@ 0x80
 8004648:	d020      	beq.n	800468c <UART_WaitOnFlagUntilTimeout+0x8a>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b40      	cmp	r3, #64	@ 0x40
 800464e:	d01d      	beq.n	800468c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b08      	cmp	r3, #8
 800465c:	d116      	bne.n	800468c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f856 	bl	8004726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2208      	movs	r2, #8
 800467e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e00f      	b.n	80046ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4013      	ands	r3, r2
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	429a      	cmp	r2, r3
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d0b4      	beq.n	8004614 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	4613      	mov	r3, r2
 80046c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	88fa      	ldrh	r2, [r7, #6]
 80046cc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	88fa      	ldrh	r2, [r7, #6]
 80046d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2222      	movs	r2, #34	@ 0x22
 80046de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d007      	beq.n	80046fa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0201 	orr.w	r2, r2, #1
 8004708:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0220 	orr.w	r2, r2, #32
 8004718:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr

08004726 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004726:	b480      	push	{r7}
 8004728:	b095      	sub	sp, #84	@ 0x54
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004740:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800474e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004750:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004754:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800475c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e5      	bne.n	800472e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	61fb      	str	r3, [r7, #28]
   return(result);
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	f023 0301 	bic.w	r3, r3, #1
 8004778:	64bb      	str	r3, [r7, #72]	@ 0x48
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3314      	adds	r3, #20
 8004780:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004782:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004784:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e5      	bne.n	8004762 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479a:	2b01      	cmp	r3, #1
 800479c:	d119      	bne.n	80047d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	330c      	adds	r3, #12
 80047a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f023 0310 	bic.w	r3, r3, #16
 80047b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	330c      	adds	r3, #12
 80047bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047be:	61ba      	str	r2, [r7, #24]
 80047c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6979      	ldr	r1, [r7, #20]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	613b      	str	r3, [r7, #16]
   return(result);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e5      	bne.n	800479e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047e0:	bf00      	nop
 80047e2:	3754      	adds	r7, #84	@ 0x54
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr

080047ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff fef3 	bl	80045f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800480a:	bf00      	nop
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b21      	cmp	r3, #33	@ 0x21
 8004824:	d13e      	bne.n	80048a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800482e:	d114      	bne.n	800485a <UART_Transmit_IT+0x48>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d110      	bne.n	800485a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800484c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	1c9a      	adds	r2, r3, #2
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	621a      	str	r2, [r3, #32]
 8004858:	e008      	b.n	800486c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	1c59      	adds	r1, r3, #1
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6211      	str	r1, [r2, #32]
 8004864:	781a      	ldrb	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29b      	uxth	r3, r3
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	4619      	mov	r1, r3
 800487a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10f      	bne.n	80048a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800488e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800489e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr

080048b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff fe7b 	bl	80045cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08c      	sub	sp, #48	@ 0x30
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b22      	cmp	r3, #34	@ 0x22
 80048f2:	f040 80ae 	bne.w	8004a52 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048fe:	d117      	bne.n	8004930 <UART_Receive_IT+0x50>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d113      	bne.n	8004930 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004908:	2300      	movs	r3, #0
 800490a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491e:	b29a      	uxth	r2, r3
 8004920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004922:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004928:	1c9a      	adds	r2, r3, #2
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	629a      	str	r2, [r3, #40]	@ 0x28
 800492e:	e026      	b.n	800497e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004934:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004942:	d007      	beq.n	8004954 <UART_Receive_IT+0x74>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <UART_Receive_IT+0x82>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	b2da      	uxtb	r2, r3
 800495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	e008      	b.n	8004974 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800496e:	b2da      	uxtb	r2, r3
 8004970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004972:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29b      	uxth	r3, r3
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	4619      	mov	r1, r3
 800498c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800498e:	2b00      	cmp	r3, #0
 8004990:	d15d      	bne.n	8004a4e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0220 	bic.w	r2, r2, #32
 80049a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d135      	bne.n	8004a44 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	613b      	str	r3, [r7, #16]
   return(result);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f023 0310 	bic.w	r3, r3, #16
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049fe:	623a      	str	r2, [r7, #32]
 8004a00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	69f9      	ldr	r1, [r7, #28]
 8004a04:	6a3a      	ldr	r2, [r7, #32]
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e5      	bne.n	80049de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d10a      	bne.n	8004a36 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fc faa3 	bl	8000f88 <HAL_UARTEx_RxEventCallback>
 8004a42:	e002      	b.n	8004a4a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff fdca 	bl	80045de <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e002      	b.n	8004a54 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e000      	b.n	8004a54 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
  }
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3730      	adds	r7, #48	@ 0x30
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a96:	f023 030c 	bic.w	r3, r3, #12
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	68b9      	ldr	r1, [r7, #8]
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a2c      	ldr	r2, [pc, #176]	@ (8004b70 <UART_SetConfig+0x114>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d103      	bne.n	8004acc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ac4:	f7ff f986 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	e002      	b.n	8004ad2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004acc:	f7ff f96e 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8004ad0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009a      	lsls	r2, r3, #2
 8004adc:	441a      	add	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae8:	4a22      	ldr	r2, [pc, #136]	@ (8004b74 <UART_SetConfig+0x118>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	0119      	lsls	r1, r3, #4
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	009a      	lsls	r2, r3, #2
 8004afc:	441a      	add	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b08:	4b1a      	ldr	r3, [pc, #104]	@ (8004b74 <UART_SetConfig+0x118>)
 8004b0a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	2064      	movs	r0, #100	@ 0x64
 8004b12:	fb00 f303 	mul.w	r3, r0, r3
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	3332      	adds	r3, #50	@ 0x32
 8004b1c:	4a15      	ldr	r2, [pc, #84]	@ (8004b74 <UART_SetConfig+0x118>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b28:	4419      	add	r1, r3
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009a      	lsls	r2, r3, #2
 8004b34:	441a      	add	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b40:	4b0c      	ldr	r3, [pc, #48]	@ (8004b74 <UART_SetConfig+0x118>)
 8004b42:	fba3 0302 	umull	r0, r3, r3, r2
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	2064      	movs	r0, #100	@ 0x64
 8004b4a:	fb00 f303 	mul.w	r3, r0, r3
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	3332      	adds	r3, #50	@ 0x32
 8004b54:	4a07      	ldr	r2, [pc, #28]	@ (8004b74 <UART_SetConfig+0x118>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	f003 020f 	and.w	r2, r3, #15
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	440a      	add	r2, r1
 8004b66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40013800 	.word	0x40013800
 8004b74:	51eb851f 	.word	0x51eb851f

08004b78 <Screen_begin>:
    [CONDITION_YEAR]     = {.max_value = 99, .min_value = 1},
    [CONDITION_HOUR]     = {.max_value = 23, .min_value = 0},
    [CONDITION_MINUTE]   = {.max_value = 59, .min_value = 0}
};

void Screen_begin(UART_HandleTypeDef * UART_Screen) {
 8004b78:	b5b0      	push	{r4, r5, r7, lr}
 8004b7a:	b09e      	sub	sp, #120	@ 0x78
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
    // Init _DWIN UART
	_Screen.Screen_DWIN.pUart = UART_Screen;
 8004b80:	4a36      	ldr	r2, [pc, #216]	@ (8004c5c <Screen_begin+0xe4>)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6013      	str	r3, [r2, #0]

    // add receive function callback
	Screen_init_handler_table(&_Screen);
 8004b86:	4835      	ldr	r0, [pc, #212]	@ (8004c5c <Screen_begin+0xe4>)
 8004b88:	f000 fd88 	bl	800569c <Screen_init_handler_table>
    DWIN_SetCallback((Dwin_t *)&_Screen,(pListenDWIN)Screen_RX_Callback);
 8004b8c:	4934      	ldr	r1, [pc, #208]	@ (8004c60 <Screen_begin+0xe8>)
 8004b8e:	4833      	ldr	r0, [pc, #204]	@ (8004c5c <Screen_begin+0xe4>)
 8004b90:	f001 fcbd 	bl	800650e <DWIN_SetCallback>

    Screen_Init_Variable(&_Screen);
 8004b94:	4831      	ldr	r0, [pc, #196]	@ (8004c5c <Screen_begin+0xe4>)
 8004b96:	f001 f831 	bl	8005bfc <Screen_Init_Variable>

    // Init screen keyboard     
    _Screen.Screen_keyboard.VP_Text = 0xFFFF;
 8004b9a:	4b30      	ldr	r3, [pc, #192]	@ (8004c5c <Screen_begin+0xe4>)
 8004b9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ba0:	819a      	strh	r2, [r3, #12]
    _Screen.Screen_keyboard.Index_String = 0;
 8004ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8004c5c <Screen_begin+0xe4>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    _Screen.Screen_keyboard.Caplock = 0;
 8004baa:	4b2c      	ldr	r3, [pc, #176]	@ (8004c5c <Screen_begin+0xe4>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    DWIN_SetPage((Dwin_t *)&_Screen,DWINPAGE_MAIN);  // Go to first page when start
 8004bb2:	2165      	movs	r1, #101	@ 0x65
 8004bb4:	4829      	ldr	r0, [pc, #164]	@ (8004c5c <Screen_begin+0xe4>)
 8004bb6:	f001 fb59 	bl	800626c <DWIN_SetPage>
    // DWIN_SetText((Dwin_t *)&_Screen,0x7000,(uint8_t *)"Dang tt", strlen("Dangtt"));
    // DWIN_SetText((Dwin_t *)&_Screen,0x7010,(uint8_t *)"Dangtt1762003", sizeof("Dangtt1762003"));

    _Screen.pre_page = 106;
 8004bba:	4b28      	ldr	r3, [pc, #160]	@ (8004c5c <Screen_begin+0xe4>)
 8004bbc:	226a      	movs	r2, #106	@ 0x6a
 8004bbe:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8

    char* data_pin[] = {
 8004bc2:	4b28      	ldr	r3, [pc, #160]	@ (8004c64 <Screen_begin+0xec>)
 8004bc4:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8004bc8:	461d      	mov	r5, r3
 8004bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bd6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    "VEE", "INH", "Z", "Y", "X", "VSS", "B", "C",
        "A", "VCC", "X0", "X1", "Y0", "Y1", "Z0", "Z1"
    };

    Screen_SetInfo_Pin(&_Screen,data_pin);
 8004bde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004be2:	4619      	mov	r1, r3
 8004be4:	481d      	ldr	r0, [pc, #116]	@ (8004c5c <Screen_begin+0xe4>)
 8004be6:	f001 f9cd 	bl	8005f84 <Screen_SetInfo_Pin>

    char *data_test[] = {
 8004bea:	4b1f      	ldr	r3, [pc, #124]	@ (8004c68 <Screen_begin+0xf0>)
 8004bec:	f107 0418 	add.w	r4, r7, #24
 8004bf0:	461d      	mov	r5, r3
 8004bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bf6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        "11L1000G1011111V",
        "10L1100G1101111V",
        "11L0100G1111111V"
    };

    Screen_GetIcon_Pin(&_Screen,data_test);
 8004bfe:	f107 0318 	add.w	r3, r7, #24
 8004c02:	4619      	mov	r1, r3
 8004c04:	4815      	ldr	r0, [pc, #84]	@ (8004c5c <Screen_begin+0xe4>)
 8004c06:	f000 fea1 	bl	800594c <Screen_GetIcon_Pin>
    DWIN_SetArray_Icon(&_Screen,VP_ICON_DIRECTION_PIN,_Screen.IC_Testerx[PROGRAM_TEST1].config_pin,16);
 8004c0a:	4b14      	ldr	r3, [pc, #80]	@ (8004c5c <Screen_begin+0xe4>)
 8004c0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c0e:	2310      	movs	r3, #16
 8004c10:	f244 0150 	movw	r1, #16464	@ 0x4050
 8004c14:	4811      	ldr	r0, [pc, #68]	@ (8004c5c <Screen_begin+0xe4>)
 8004c16:	f001 fbfe 	bl	8006416 <DWIN_SetArray_Icon>
    Screen_GetIcon_Result(&_Screen,data_test);
 8004c1a:	f107 0318 	add.w	r3, r7, #24
 8004c1e:	4619      	mov	r1, r3
 8004c20:	480e      	ldr	r0, [pc, #56]	@ (8004c5c <Screen_begin+0xe4>)
 8004c22:	f000 ff1c 	bl	8005a5e <Screen_GetIcon_Result>
    DWIN_SetArray_Icon(&_Screen,VP_ICON_RESULT,_Screen.IC_Testerx[PROGRAM_TEST1].data_result[0],16);
 8004c26:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <Screen_begin+0xe4>)
 8004c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	f244 1150 	movw	r1, #16720	@ 0x4150
 8004c32:	480a      	ldr	r0, [pc, #40]	@ (8004c5c <Screen_begin+0xe4>)
 8004c34:	f001 fbef 	bl	8006416 <DWIN_SetArray_Icon>
    // uint8_t data_clock2[] = {1,0,1,0,1,0,1,0,1,0};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1800,25,200,data_clock2,sizeof(data_clock2));
    // HAL_Delay(200);
    // uint8_t data_clock3[] = {0,1,0,1,0,1,0,1,0,1,1,1};
    // DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1800,25,200,data_clock3,sizeof(data_clock3));
    uint8_t data[15] = {1,1,0,0,1,0,0,1,1,0,0,0,1,1,0};
 8004c38:	4b0c      	ldr	r3, [pc, #48]	@ (8004c6c <Screen_begin+0xf4>)
 8004c3a:	f107 0408 	add.w	r4, r7, #8
 8004c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c40:	c407      	stmia	r4!, {r0, r1, r2}
 8004c42:	8023      	strh	r3, [r4, #0]
 8004c44:	3402      	adds	r4, #2
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	7023      	strb	r3, [r4, #0]
    //     Address_show = Address_show + 0x200;
    //     Y_Coordinate = Y_Coordinate + 30;
    //     HAL_Delay(500);
    // }

    _Screen.Status_Dev_1 = false;
 8004c4a:	4b04      	ldr	r3, [pc, #16]	@ (8004c5c <Screen_begin+0xe4>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
}
 8004c52:	bf00      	nop
 8004c54:	3778      	adds	r7, #120	@ 0x78
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bdb0      	pop	{r4, r5, r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000380 	.word	0x20000380
 8004c60:	08004c8d 	.word	0x08004c8d
 8004c64:	0800b424 	.word	0x0800b424
 8004c68:	0800b504 	.word	0x0800b504
 8004c6c:	0800b524 	.word	0x0800b524

08004c70 <Screen_RX_data>:

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4803      	ldr	r0, [pc, #12]	@ (8004c88 <Screen_RX_data+0x18>)
 8004c7c:	f001 fc54 	bl	8006528 <DWIN_Listen>
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20000380 	.word	0x20000380

08004c8c <Screen_RX_Callback>:

void Screen_RX_Callback(uint16_t Vpaddress, uint8_t lowByte, uint8_t highByte) { 
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	80fb      	strh	r3, [r7, #6]
 8004c96:	460b      	mov	r3, r1
 8004c98:	717b      	strb	r3, [r7, #5]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	713b      	strb	r3, [r7, #4]
    screen_event_t screen_event;
    // If the VP is FFFF -> skip
    if (Vpaddress != 0xFFFF) {
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d01b      	beq.n	8004ce0 <Screen_RX_Callback+0x54>
        screen_event.event = Index_VP(Vpaddress,lookup_VP_SIG,SIZE_LOOKUP_VP_SIG);
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	2207      	movs	r2, #7
 8004cac:	490e      	ldr	r1, [pc, #56]	@ (8004ce8 <Screen_RX_Callback+0x5c>)
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fcb7 	bl	8005622 <Index_VP>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	723b      	strb	r3, [r7, #8]
        screen_event.action = lowByte;
 8004cb8:	797b      	ldrb	r3, [r7, #5]
 8004cba:	727b      	strb	r3, [r7, #9]
        screen_event.data = highByte;
 8004cbc:	793b      	ldrb	r3, [r7, #4]
 8004cbe:	72bb      	strb	r3, [r7, #10]
        screen_event.keyvalue = (uint16_t)((highByte<<8) | lowByte&0xFF);
 8004cc0:	793b      	ldrb	r3, [r7, #4]
 8004cc2:	b21b      	sxth	r3, r3
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	b21a      	sxth	r2, r3
 8004cc8:	797b      	ldrb	r3, [r7, #5]
 8004cca:	b21b      	sxth	r3, r3
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	b21b      	sxth	r3, r3
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	81bb      	strh	r3, [r7, #12]

        // call to respective function
        Screen_excute_RX_function(&_Screen,&screen_event);
 8004cd4:	f107 0308 	add.w	r3, r7, #8
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4804      	ldr	r0, [pc, #16]	@ (8004cec <Screen_RX_Callback+0x60>)
 8004cdc:	f000 fd56 	bl	800578c <Screen_excute_RX_function>
    }
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	2000000c 	.word	0x2000000c
 8004cec:	20000380 	.word	0x20000380

08004cf0 <Navigation_setting_page>:


#pragma region CALLBACK FUNCTION VP ADRRESS 

void Navigation_setting_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
 8004cfa:	2174      	movs	r1, #116	@ 0x74
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f001 fab5 	bl	800626c <DWIN_SetPage>
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <Navigation_home_page>:

void Navigation_home_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6039      	str	r1, [r7, #0]
    uint8_t current_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	334a      	adds	r3, #74	@ 0x4a
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	73fb      	strb	r3, [r7, #15]
    UNUSED(current_program);
    // Show data

    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8004d34:	4619      	mov	r1, r3
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	3349      	adds	r3, #73	@ 0x49
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	4619      	mov	r1, r3
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f001 fa8f 	bl	800626c <DWIN_SetPage>
}   
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <Navigation_setting_program>:

void Navigation_setting_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]

    // Switch page
    // DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
    /* Get the setting page */
    screen_obj->page_setting = DWINPAGE_SETTING_PROGRAM;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	226b      	movs	r2, #107	@ 0x6b
 8004d66:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb
    // Switch page password 
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password,"",strlen(""));
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	4a06      	ldr	r2, [pc, #24]	@ (8004d88 <Navigation_setting_program+0x30>)
 8004d6e:	f249 5160 	movw	r1, #38240	@ 0x9560
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f001 faa1 	bl	80062ba <DWIN_SetText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 8004d78:	216e      	movs	r1, #110	@ 0x6e
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f001 fa76 	bl	800626c <DWIN_SetPage>
}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	0800b534 	.word	0x0800b534

08004d8c <Navigation_setting_time>:

void Navigation_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_TIME);
 8004d96:	2176      	movs	r1, #118	@ 0x76
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f001 fa67 	bl	800626c <DWIN_SetPage>
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <Navigation_modify_program>:

void Navigation_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8004da6:	b590      	push	{r4, r7, lr}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_Program_Name,(uint8_t *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8004db6:	4619      	mov	r1, r3
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	1a5b      	subs	r3, r3, r1
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3384      	adds	r3, #132	@ 0x84
 8004dc6:	681c      	ldr	r4, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8004dce:	4619      	mov	r1, r3
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	1a5b      	subs	r3, r3, r1
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	3384      	adds	r3, #132	@ 0x84
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fb f9bf 	bl	8000164 <strlen>
 8004de6:	4603      	mov	r3, r0
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	4622      	mov	r2, r4
 8004dec:	f44f 4115 	mov.w	r1, #38144	@ 0x9500
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f001 fa62 	bl	80062ba <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,(uint8_t *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	1a5b      	subs	r3, r3, r1
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	3388      	adds	r3, #136	@ 0x88
 8004e0c:	681c      	ldr	r4, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8004e14:	4619      	mov	r1, r3
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	1a5b      	subs	r3, r3, r1
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	3388      	adds	r3, #136	@ 0x88
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fb f99c 	bl	8000164 <strlen>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	4622      	mov	r2, r4
 8004e32:	f249 5120 	movw	r1, #38176	@ 0x9520
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f001 fa3f 	bl	80062ba <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,(uint8_t *)screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC));    
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8004e42:	4619      	mov	r1, r3
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	460b      	mov	r3, r1
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	1a5b      	subs	r3, r3, r1
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	3390      	adds	r3, #144	@ 0x90
 8004e52:	681c      	ldr	r4, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	1a5b      	subs	r3, r3, r1
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	3390      	adds	r3, #144	@ 0x90
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fb f979 	bl	8000164 <strlen>
 8004e72:	4603      	mov	r3, r0
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	4622      	mov	r2, r4
 8004e78:	f249 5140 	movw	r1, #38208	@ 0x9540
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f001 fa1c 	bl	80062ba <DWIN_SetText>
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 8004e82:	216c      	movs	r1, #108	@ 0x6c
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f001 f9f1 	bl	800626c <DWIN_SetPage>
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd90      	pop	{r4, r7, pc}
	...

08004e94 <Navigation_Change_MainPage>:

void Navigation_Change_MainPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8004e94:	b590      	push	{r4, r7, lr}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
    // Change current device
    if (screen_event->data == DATA_NEXT_MAINPAGE) {
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	789b      	ldrb	r3, [r3, #2]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d111      	bne.n	8004eca <Navigation_Change_MainPage+0x36>
        screen_obj->curr_device++;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8004eac:	3301      	adds	r3, #1
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        if (screen_obj->curr_device == MAX_DEVICE) {
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d119      	bne.n	8004ef4 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_1;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
 8004ec8:	e014      	b.n	8004ef4 <Navigation_Change_MainPage+0x60>
        }
    } else if (screen_event->data == DATA_PREV_MAINPAGE) {
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	789b      	ldrb	r3, [r3, #2]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d110      	bne.n	8004ef4 <Navigation_Change_MainPage+0x60>
        screen_obj->curr_device--;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        if (screen_obj->curr_device == 255 ) {
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8004ee8:	2bff      	cmp	r3, #255	@ 0xff
 8004eea:	d103      	bne.n	8004ef4 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_3;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        }
    }
    uint8_t curr_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8004efa:	4619      	mov	r1, r3
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	460b      	mov	r3, r1
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	334a      	adds	r3, #74	@ 0x4a
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	73fb      	strb	r3, [r7, #15]
    /* Show data with correspond device index */
    switch (screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain) {
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8004f14:	4619      	mov	r1, r3
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	3349      	adds	r3, #73	@ 0x49
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	3b64      	subs	r3, #100	@ 0x64
 8004f28:	2b0b      	cmp	r3, #11
 8004f2a:	d845      	bhi.n	8004fb8 <Navigation_Change_MainPage+0x124>
 8004f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f34 <Navigation_Change_MainPage+0xa0>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004fb7 	.word	0x08004fb7
 8004f38:	08004f65 	.word	0x08004f65
 8004f3c:	08004fb7 	.word	0x08004fb7
 8004f40:	08004fb9 	.word	0x08004fb9
 8004f44:	08004fb9 	.word	0x08004fb9
 8004f48:	08004fb9 	.word	0x08004fb9
 8004f4c:	08004fb9 	.word	0x08004fb9
 8004f50:	08004fb9 	.word	0x08004fb9
 8004f54:	08004fb9 	.word	0x08004fb9
 8004f58:	08004fb9 	.word	0x08004fb9
 8004f5c:	08004fb9 	.word	0x08004fb9
 8004f60:	08004fb7 	.word	0x08004fb7
        case DWINPAGE_MAIN : {
            /* Show info */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	334c      	adds	r3, #76	@ 0x4c
 8004f7a:	681c      	ldr	r4, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8004f82:	4619      	mov	r1, r3
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	460b      	mov	r3, r1
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	334c      	adds	r3, #76	@ 0x4c
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fb f8e5 	bl	8000164 <strlen>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	f249 3150 	movw	r1, #37712	@ 0x9350
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f001 f988 	bl	80062ba <DWIN_SetText>
            Screen_ShowData_Mainpage(screen_obj,curr_program);
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 ff14 	bl	8005ddc <Screen_ShowData_Mainpage>
        } break;
 8004fb4:	e000      	b.n	8004fb8 <Navigation_Change_MainPage+0x124>
        case DWINPAGE_MAIN_FINISH: {

        } break;
 8004fb6:	bf00      	nop
        } break;
        case DWINPAGE_MAIN_GRAPH: {

        } break;
    }
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd90      	pop	{r4, r7, pc}

08004fc0 <Navigation_Change_CaseTest>:

void Navigation_Change_CaseTest(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08e      	sub	sp, #56	@ 0x38
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	334a      	adds	r3, #74	@ 0x4a
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	1a5b      	subs	r3, r3, r1
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	3394      	adds	r3, #148	@ 0x94
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8004ffe:	4619      	mov	r1, r3
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	460b      	mov	r3, r1
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	334a      	adds	r3, #74	@ 0x4a
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 8005014:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	1a9b      	subs	r3, r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	3395      	adds	r3, #149	@ 0x95
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    char ShowCase_String[30];
    // Change current case
    if (screen_event->data == DATA_PREV_CASE) {
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	789b      	ldrb	r3, [r3, #2]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d125      	bne.n	8005080 <Navigation_Change_CaseTest+0xc0>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 800503a:	4619      	mov	r1, r3
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	3348      	adds	r3, #72	@ 0x48
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d044      	beq.n	80050da <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8005056:	461a      	mov	r2, r3
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	3348      	adds	r3, #72	@ 0x48
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	3b01      	subs	r3, #1
 800506a:	b2d8      	uxtb	r0, r3
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	3348      	adds	r3, #72	@ 0x48
 800507a:	4602      	mov	r2, r0
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	e02c      	b.n	80050da <Navigation_Change_CaseTest+0x11a>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	789b      	ldrb	r3, [r3, #2]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d128      	bne.n	80050da <Navigation_Change_CaseTest+0x11a>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < (num_case - 1)) {
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 800508e:	4619      	mov	r1, r3
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	3348      	adds	r3, #72	@ 0x48
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80050a6:	3b01      	subs	r3, #1
 80050a8:	429a      	cmp	r2, r3
 80050aa:	da16      	bge.n	80050da <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 80050b2:	461a      	mov	r2, r3
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	3348      	adds	r3, #72	@ 0x48
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	b2d8      	uxtb	r0, r3
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	3348      	adds	r3, #72	@ 0x48
 80050d6:	4602      	mov	r2, r0
 80050d8:	701a      	strb	r2, [r3, #0]
        }
    }

    /* Show data */
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1,num_case);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 80050e0:	4619      	mov	r1, r3
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	3348      	adds	r3, #72	@ 0x48
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80050f8:	f107 000c 	add.w	r0, r7, #12
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	4613      	mov	r3, r2
 8005100:	4a1a      	ldr	r2, [pc, #104]	@ (800516c <Navigation_Change_CaseTest+0x1ac>)
 8005102:	211e      	movs	r1, #30
 8005104:	f003 fb70 	bl	80087e8 <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 8005108:	f107 030c 	add.w	r3, r7, #12
 800510c:	4618      	mov	r0, r3
 800510e:	f7fb f829 	bl	8000164 <strlen>
 8005112:	4603      	mov	r3, r0
 8005114:	b29b      	uxth	r3, r3
 8005116:	f107 020c 	add.w	r2, r7, #12
 800511a:	f249 3180 	movw	r1, #37760	@ 0x9380
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f001 f8cb 	bl	80062ba <DWIN_SetText>
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_RESULT,_Screen.IC_Testerx[selectedProgram].data_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case],num_pin);
 8005124:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005128:	4911      	ldr	r1, [pc, #68]	@ (8005170 <Navigation_Change_CaseTest+0x1b0>)
 800512a:	4613      	mov	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	3354      	adds	r3, #84	@ 0x54
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 800513e:	4618      	mov	r0, r3
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4603      	mov	r3, r0
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4403      	add	r3, r0
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	3348      	adds	r3, #72	@ 0x48
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800515a:	f244 1150 	movw	r1, #16720	@ 0x4150
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f001 f959 	bl	8006416 <DWIN_SetArray_Icon>
}
 8005164:	bf00      	nop
 8005166:	3730      	adds	r7, #48	@ 0x30
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	0800b538 	.word	0x0800b538
 8005170:	20000380 	.word	0x20000380

08005174 <ON_OFF_Button>:

void Navigation_Next_PrevPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {

}

void ON_OFF_Button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
    // do sth
    screen_obj->Status_Dev_1 = !screen_obj->Status_Dev_1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf14      	ite	ne
 8005188:	2301      	movne	r3, #1
 800518a:	2300      	moveq	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f083 0301 	eor.w	r3, r3, #1
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	b2da      	uxtb	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
    // change icon
    // DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ON_OFF_Icon_1,ON_ICON);
    //    HAL_Delay(1000);
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ON_OFF_Icon_1,screen_obj->Status_Dev_1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80051a6:	461a      	mov	r2, r3
 80051a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f001 f905 	bl	80063bc <DWIN_SetVariable_Icon>

}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <select_running_program>:

void select_running_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	6039      	str	r1, [r7, #0]
    uint8_t programID = screen_event->data; // Get new index program
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	789b      	ldrb	r3, [r3, #2]
 80051c8:	73fb      	strb	r3, [r7, #15]

    /* Show data correspond with new index program */
    Screen_ShowData_Mainpage(screen_obj,programID);
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	4619      	mov	r1, r3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fe04 	bl	8005ddc <Screen_ShowData_Mainpage>
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <select_modify_program>:

void select_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80051dc:	b5b0      	push	{r4, r5, r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
    // Get the index modify program 
    uint8_t index_program = screen_event->data;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	789b      	ldrb	r3, [r3, #2]
 80051ea:	75fb      	strb	r3, [r7, #23]
    screen_obj->modify_program_index = index_program;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	7dfa      	ldrb	r2, [r7, #23]
 80051f0:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
    
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 80051f4:	7dfa      	ldrb	r2, [r7, #23]
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	3388      	adds	r3, #136	@ 0x88
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fa ffac 	bl	8000164 <strlen>
 800520c:	4603      	mov	r3, r0
 800520e:	b2db      	uxtb	r3, r3
 8005210:	3309      	adds	r3, #9
 8005212:	75bb      	strb	r3, [r7, #22]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 8005214:	7dfa      	ldrb	r2, [r7, #23]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	1a9b      	subs	r3, r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	3390      	adds	r3, #144	@ 0x90
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fa ff9c 	bl	8000164 <strlen>
 800522c:	4603      	mov	r3, r0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	330f      	adds	r3, #15
 8005232:	757b      	strb	r3, [r7, #21]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8005234:	7dbb      	ldrb	r3, [r7, #22]
 8005236:	3301      	adds	r3, #1
 8005238:	4618      	mov	r0, r3
 800523a:	f001 fc73 	bl	8006b24 <malloc>
 800523e:	4603      	mov	r3, r0
 8005240:	613b      	str	r3, [r7, #16]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 8005242:	7d7b      	ldrb	r3, [r7, #21]
 8005244:	3301      	adds	r3, #1
 8005246:	4618      	mov	r0, r3
 8005248:	f001 fc6c 	bl	8006b24 <malloc>
 800524c:	4603      	mov	r3, r0
 800524e:	60fb      	str	r3, [r7, #12]

    strcpy(Text_Name_IC,"IC Name: ");
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	491f      	ldr	r1, [pc, #124]	@ (80052d0 <select_modify_program+0xf4>)
 8005254:	461a      	mov	r2, r3
 8005256:	460b      	mov	r3, r1
 8005258:	cb03      	ldmia	r3!, {r0, r1}
 800525a:	6010      	str	r0, [r2, #0]
 800525c:	6051      	str	r1, [r2, #4]
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 8005262:	7dfa      	ldrb	r2, [r7, #23]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	3388      	adds	r3, #136	@ 0x88
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4619      	mov	r1, r3
 8005276:	6938      	ldr	r0, [r7, #16]
 8005278:	f003 fbee 	bl	8008a58 <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4a15      	ldr	r2, [pc, #84]	@ (80052d4 <select_modify_program+0xf8>)
 8005280:	461c      	mov	r4, r3
 8005282:	4615      	mov	r5, r2
 8005284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005286:	6020      	str	r0, [r4, #0]
 8005288:	6061      	str	r1, [r4, #4]
 800528a:	60a2      	str	r2, [r4, #8]
 800528c:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);
 800528e:	7dfa      	ldrb	r2, [r7, #23]
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	3390      	adds	r3, #144	@ 0x90
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4619      	mov	r1, r3
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f003 fbd8 	bl	8008a58 <strcat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,(uint8_t *)Text_Name_IC,size_Name_IC);
 80052a8:	7dbb      	ldrb	r3, [r7, #22]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	f249 5120 	movw	r1, #38176	@ 0x9520
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f001 f801 	bl	80062ba <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,(uint8_t *)Text_Num_IC,size_Num_IC);
 80052b8:	7d7b      	ldrb	r3, [r7, #21]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	f249 5140 	movw	r1, #38208	@ 0x9540
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fff9 	bl	80062ba <DWIN_SetText>
}
 80052c8:	bf00      	nop
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bdb0      	pop	{r4, r5, r7, pc}
 80052d0:	0800b544 	.word	0x0800b544
 80052d4:	0800b550 	.word	0x0800b550

080052d8 <Navigation_num_keyboard>:

void Navigation_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	@ 0x30
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
    char TypeData_String[20] = {0};
 80052e2:	f107 031c 	add.w	r3, r7, #28
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	605a      	str	r2, [r3, #4]
 80052ec:	609a      	str	r2, [r3, #8]
 80052ee:	60da      	str	r2, [r3, #12]
 80052f0:	611a      	str	r2, [r3, #16]
    char UnitData_String[20] = {0};
 80052f2:	f107 0308 	add.w	r3, r7, #8
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	605a      	str	r2, [r3, #4]
 80052fc:	609a      	str	r2, [r3, #8]
 80052fe:	60da      	str	r2, [r3, #12]
 8005300:	611a      	str	r2, [r3, #16]
    // Switch screen keyboard will excute in screen

    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	889a      	ldrh	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	330e      	adds	r3, #14
 8005316:	2232      	movs	r2, #50	@ 0x32
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f003 fb94 	bl	8008a48 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f103 020e 	add.w	r2, r3, #14
 8005326:	2332      	movs	r3, #50	@ 0x32
 8005328:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 ffc4 	bl	80062ba <DWIN_SetText>
    // DWIN_SetText((Dwin_t *)screen_obj,VP_ShowType_Keyboard)

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_NUM_KEYBOARD);
 8005332:	216d      	movs	r1, #109	@ 0x6d
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 ff99 	bl	800626c <DWIN_SetPage>
}
 800533a:	bf00      	nop
 800533c:	3730      	adds	r7, #48	@ 0x30
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <Navigation_full_keyboard>:

void Navigation_full_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	889a      	ldrh	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	330e      	adds	r3, #14
 8005360:	2232      	movs	r2, #50	@ 0x32
 8005362:	2100      	movs	r1, #0
 8005364:	4618      	mov	r0, r3
 8005366:	f003 fb6f 	bl	8008a48 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f103 020e 	add.w	r2, r3, #14
 8005370:	2332      	movs	r3, #50	@ 0x32
 8005372:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 ff9f 	bl	80062ba <DWIN_SetText>

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_FULL_KEYBOARD);
 800537c:	2178      	movs	r1, #120	@ 0x78
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 ff74 	bl	800626c <DWIN_SetPage>
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <Save_Information>:

void Save_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]

}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <Enter_password>:

void Enter_password(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80053a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053a4:	b087      	sub	sp, #28
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
 80053ac:	466b      	mov	r3, sp
 80053ae:	461e      	mov	r6, r3
    /* Get the password input */
    uint8_t len = screen_obj->Screen_keyboard.Index_String + 1;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	3301      	adds	r3, #1
 80053ba:	75fb      	strb	r3, [r7, #23]
    char input_pass[len];
 80053bc:	7df9      	ldrb	r1, [r7, #23]
 80053be:	460b      	mov	r3, r1
 80053c0:	3b01      	subs	r3, #1
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	b2cb      	uxtb	r3, r1
 80053c6:	2200      	movs	r2, #0
 80053c8:	4698      	mov	r8, r3
 80053ca:	4691      	mov	r9, r2
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053e0:	b2cb      	uxtb	r3, r1
 80053e2:	2200      	movs	r2, #0
 80053e4:	461c      	mov	r4, r3
 80053e6:	4615      	mov	r5, r2
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	00eb      	lsls	r3, r5, #3
 80053f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053f6:	00e2      	lsls	r2, r4, #3
 80053f8:	460b      	mov	r3, r1
 80053fa:	3307      	adds	r3, #7
 80053fc:	08db      	lsrs	r3, r3, #3
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	ebad 0d03 	sub.w	sp, sp, r3
 8005404:	466b      	mov	r3, sp
 8005406:	3300      	adds	r3, #0
 8005408:	60fb      	str	r3, [r7, #12]
    strcpy(input_pass,screen_obj->Screen_keyboard.String);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	330e      	adds	r3, #14
 800540e:	4619      	mov	r1, r3
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f003 fbe6 	bl	8008be2 <strcpy>
    /* Check password */
    if (strcmp(input_pass,MACHINE_PASSWORD) == 0) { /* Correct password */
 8005416:	490e      	ldr	r1, [pc, #56]	@ (8005450 <Enter_password+0xb0>)
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f7fa fe99 	bl	8000150 <strcmp>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d107      	bne.n	8005434 <Enter_password+0x94>
        /* Goto setting page */
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->page_setting);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 ff1d 	bl	800626c <DWIN_SetPage>
 8005432:	e006      	b.n	8005442 <Enter_password+0xa2>
    } else {
        /* Show text */
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_Password,INCORRECT_PASSWORD_TEXT,strlen(INCORRECT_PASSWORD_TEXT));
 8005434:	2312      	movs	r3, #18
 8005436:	4a07      	ldr	r2, [pc, #28]	@ (8005454 <Enter_password+0xb4>)
 8005438:	f249 5180 	movw	r1, #38272	@ 0x9580
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 ff3c 	bl	80062ba <DWIN_SetText>
 8005442:	46b5      	mov	sp, r6
    }
}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800544e:	bf00      	nop
 8005450:	0800b560 	.word	0x0800b560
 8005454:	0800b568 	.word	0x0800b568

08005458 <Enter_num_keyboard>:

void Enter_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
    uint16_t VP_show = screen_obj->Screen_keyboard.VP_Text;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	899b      	ldrh	r3, [r3, #12]
 8005466:	81fb      	strh	r3, [r7, #14]
    
    /* Show text to VP */
    DWIN_SetText((Dwin_t *)screen_obj,VP_show,(uint8_t *)screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f103 020e 	add.w	r2, r3, #14
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005474:	89f9      	ldrh	r1, [r7, #14]
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 ff1f 	bl	80062ba <DWIN_SetText>

    /* Return page base on VP address */
    switch (VP_show) {
 800547c:	89fb      	ldrh	r3, [r7, #14]
 800547e:	f249 5260 	movw	r2, #38240	@ 0x9560
 8005482:	4293      	cmp	r3, r2
 8005484:	d013      	beq.n	80054ae <Enter_num_keyboard+0x56>
 8005486:	f249 5260 	movw	r2, #38240	@ 0x9560
 800548a:	4293      	cmp	r3, r2
 800548c:	dc1e      	bgt.n	80054cc <Enter_num_keyboard+0x74>
 800548e:	f249 5240 	movw	r2, #38208	@ 0x9540
 8005492:	4293      	cmp	r3, r2
 8005494:	d015      	beq.n	80054c2 <Enter_num_keyboard+0x6a>
 8005496:	f249 5240 	movw	r2, #38208	@ 0x9540
 800549a:	4293      	cmp	r3, r2
 800549c:	dc16      	bgt.n	80054cc <Enter_num_keyboard+0x74>
 800549e:	f5b3 4f15 	cmp.w	r3, #38144	@ 0x9500
 80054a2:	d00e      	beq.n	80054c2 <Enter_num_keyboard+0x6a>
 80054a4:	f249 5220 	movw	r2, #38176	@ 0x9520
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00a      	beq.n	80054c2 <Enter_num_keyboard+0x6a>
        case VP_Modify_Program_Name : 
        case VP_Modify_IC_Name      : 
        case VP_Modify_IC_Num       :{
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
        } break;
        default: break;
 80054ac:	e00e      	b.n	80054cc <Enter_num_keyboard+0x74>
            DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password); /* Clear warning text if any */
 80054ae:	f249 5180 	movw	r1, #38272	@ 0x9580
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 ff70 	bl	8006398 <DWIN_ClearText>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 80054b8:	216e      	movs	r1, #110	@ 0x6e
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fed6 	bl	800626c <DWIN_SetPage>
        } break;
 80054c0:	e005      	b.n	80054ce <Enter_num_keyboard+0x76>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 80054c2:	216c      	movs	r1, #108	@ 0x6c
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fed1 	bl	800626c <DWIN_SetPage>
        } break;
 80054ca:	e000      	b.n	80054ce <Enter_num_keyboard+0x76>
        default: break;
 80054cc:	bf00      	nop
    }
}
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <Keyboard>:

void Keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
    
    /* The other Functions button */
    if (screen_event->data == 0xF3) { // Delete button
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	789b      	ldrb	r3, [r3, #2]
 80054e4:	2bf3      	cmp	r3, #243	@ 0xf3
 80054e6:	d10e      	bne.n	8005506 <Keyboard+0x30>
        if (screen_obj->Screen_keyboard.Index_String != 0) {
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 8088 	beq.w	8005604 <Keyboard+0x12e>
            --screen_obj->Screen_keyboard.Index_String;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8005504:	e07e      	b.n	8005604 <Keyboard+0x12e>
        }
    } else if (screen_event->data == 0xF4) { // Caplock button
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	789b      	ldrb	r3, [r3, #2]
 800550a:	2bf4      	cmp	r3, #244	@ 0xf4
 800550c:	d11a      	bne.n	8005544 <Keyboard+0x6e>
        /* Toggle status Caplock keyboard */
        screen_obj->Screen_keyboard.Caplock = !screen_obj->Screen_keyboard.Caplock; 
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005514:	2b00      	cmp	r3, #0
 8005516:	bf14      	ite	ne
 8005518:	2301      	movne	r3, #1
 800551a:	2300      	moveq	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f083 0301 	eor.w	r3, r3, #1
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	b2da      	uxtb	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_CAPLOCK,screen_obj->Screen_keyboard.Caplock);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005536:	461a      	mov	r2, r3
 8005538:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 ff3d 	bl	80063bc <DWIN_SetVariable_Icon>
 8005542:	e05f      	b.n	8005604 <Keyboard+0x12e>
    } else if (screen_event->data == 0xF2) { // Space button
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	789b      	ldrb	r3, [r3, #2]
 8005548:	2bf2      	cmp	r3, #242	@ 0xf2
 800554a:	d05b      	beq.n	8005604 <Keyboard+0x12e>
        // screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = 32;
    } else if (screen_event->data == 0xF1) { // Enter button
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	789b      	ldrb	r3, [r3, #2]
 8005550:	2bf1      	cmp	r3, #241	@ 0xf1
 8005552:	d118      	bne.n	8005586 <Keyboard+0xb0>
        // Check if the data is valid
        if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f959 	bl	800580c <Screen_CheckInput_Keyboard>
 800555a:	4603      	mov	r3, r0
 800555c:	2b01      	cmp	r3, #1
 800555e:	d151      	bne.n	8005604 <Keyboard+0x12e>
            // Show data input to VP 
            DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,(uint8_t *)screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8999      	ldrh	r1, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f103 020e 	add.w	r2, r3, #14
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fea2 	bl	80062ba <DWIN_SetText>
            DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 800557c:	4619      	mov	r1, r3
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fe74 	bl	800626c <DWIN_SetPage>
 8005584:	e03e      	b.n	8005604 <Keyboard+0x12e>
        }
    }
    /* the data value is the character input -> add to string */
    else if (screen_event->data >= 0x41 && screen_event->data <= 0x5A) { // letter need check Caplock
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	789b      	ldrb	r3, [r3, #2]
 800558a:	2b40      	cmp	r3, #64	@ 0x40
 800558c:	d92c      	bls.n	80055e8 <Keyboard+0x112>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	789b      	ldrb	r3, [r3, #2]
 8005592:	2b5a      	cmp	r3, #90	@ 0x5a
 8005594:	d828      	bhi.n	80055e8 <Keyboard+0x112>
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800559c:	f083 0301 	eor.w	r3, r3, #1
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d011      	beq.n	80055ca <Keyboard+0xf4>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data + 0x20;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	789a      	ldrb	r2, [r3, #2]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80055b0:	1c59      	adds	r1, r3, #1
 80055b2:	b288      	uxth	r0, r1
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	f8a1 0040 	strh.w	r0, [r1, #64]	@ 0x40
 80055ba:	4619      	mov	r1, r3
 80055bc:	f102 0320 	add.w	r3, r2, #32
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	440b      	add	r3, r1
 80055c6:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 80055c8:	e01c      	b.n	8005604 <Keyboard+0x12e>
        } else {
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	b291      	uxth	r1, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 80055da:	4619      	mov	r1, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	789a      	ldrb	r2, [r3, #2]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	440b      	add	r3, r1
 80055e4:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 80055e6:	e00d      	b.n	8005604 <Keyboard+0x12e>
        }
    } else {
        screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	b291      	uxth	r1, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 80055f8:	4619      	mov	r1, r3
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	789a      	ldrb	r2, [r3, #2]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	440b      	add	r3, r1
 8005602:	739a      	strb	r2, [r3, #14]
    }

    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f103 020e 	add.w	r2, r3, #14
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005610:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fe50 	bl	80062ba <DWIN_SetText>
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <Index_VP>:
#pragma endregion CALLBACK FUNCTION VP ADRRESS 

#pragma region FUNCTION EXCUTE SCREEN

// binary search index of VP address
uint8_t Index_VP(uint16_t vp, VP_item* VP_array, uint8_t Size_array) {
 8005622:	b480      	push	{r7}
 8005624:	b087      	sub	sp, #28
 8005626:	af00      	add	r7, sp, #0
 8005628:	4603      	mov	r3, r0
 800562a:	6039      	str	r1, [r7, #0]
 800562c:	80fb      	strh	r3, [r7, #6]
 800562e:	4613      	mov	r3, r2
 8005630:	717b      	strb	r3, [r7, #5]
    int left = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
    int right = Size_array - 1;
 8005636:	797b      	ldrb	r3, [r7, #5]
 8005638:	3b01      	subs	r3, #1
 800563a:	613b      	str	r3, [r7, #16]
    int mid;

    while (left <= right) {
 800563c:	e023      	b.n	8005686 <Index_VP+0x64>
        mid = (left + right) / 2;
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	0fda      	lsrs	r2, r3, #31
 8005646:	4413      	add	r3, r2
 8005648:	105b      	asrs	r3, r3, #1
 800564a:	60fb      	str	r3, [r7, #12]
        if (VP_array[mid].VP_address == vp) {
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	4413      	add	r3, r2
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	88fa      	ldrh	r2, [r7, #6]
 8005658:	429a      	cmp	r2, r3
 800565a:	d105      	bne.n	8005668 <Index_VP+0x46>
            return VP_array[mid].index;  // Found the vp
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	4413      	add	r3, r2
 8005664:	789b      	ldrb	r3, [r3, #2]
 8005666:	e013      	b.n	8005690 <Index_VP+0x6e>
        } else if (VP_array[mid].VP_address > vp) {
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	429a      	cmp	r2, r3
 8005676:	d203      	bcs.n	8005680 <Index_VP+0x5e>
            right = mid - 1;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3b01      	subs	r3, #1
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	e002      	b.n	8005686 <Index_VP+0x64>
        } else {
            left = mid + 1;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3301      	adds	r3, #1
 8005684:	617b      	str	r3, [r7, #20]
    while (left <= right) {
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	429a      	cmp	r2, r3
 800568c:	ddd7      	ble.n	800563e <Index_VP+0x1c>
        }
    }

    return 255;  // VP not found
 800568e:	23ff      	movs	r3, #255	@ 0xff
}
 8005690:	4618      	mov	r0, r3
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr
	...

0800569c <Screen_init_handler_table>:

void Screen_init_handler_table(Screen_t *const obj_screen) {
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
                                                                a_handler_full_keyboard,
                                                                a_handler_save_sig,
                                                                a_handler_enter_sig };

    // Assign the callback function to handler table
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PAGE]         = Navigation_setting_page ;
 80056a4:	4b28      	ldr	r3, [pc, #160]	@ (8005748 <Screen_init_handler_table+0xac>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a28      	ldr	r2, [pc, #160]	@ (800574c <Screen_init_handler_table+0xb0>)
 80056aa:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_HOME]                 = Navigation_home_page;
 80056ac:	4b26      	ldr	r3, [pc, #152]	@ (8005748 <Screen_init_handler_table+0xac>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3308      	adds	r3, #8
 80056b2:	4a27      	ldr	r2, [pc, #156]	@ (8005750 <Screen_init_handler_table+0xb4>)
 80056b4:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PROGRAM]      = Navigation_setting_program;
 80056b6:	4b24      	ldr	r3, [pc, #144]	@ (8005748 <Screen_init_handler_table+0xac>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3314      	adds	r3, #20
 80056bc:	4a25      	ldr	r2, [pc, #148]	@ (8005754 <Screen_init_handler_table+0xb8>)
 80056be:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_TIME]         = Navigation_setting_time;
 80056c0:	4b21      	ldr	r3, [pc, #132]	@ (8005748 <Screen_init_handler_table+0xac>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	4a24      	ldr	r2, [pc, #144]	@ (8005758 <Screen_init_handler_table+0xbc>)
 80056c8:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_MODIFY_PROGRAM]       = Navigation_modify_program;
 80056ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005748 <Screen_init_handler_table+0xac>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3328      	adds	r3, #40	@ 0x28
 80056d0:	4a22      	ldr	r2, [pc, #136]	@ (800575c <Screen_init_handler_table+0xc0>)
 80056d2:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_MAINPAGE]      = Navigation_Change_MainPage;
 80056d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005748 <Screen_init_handler_table+0xac>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3318      	adds	r3, #24
 80056da:	4a21      	ldr	r2, [pc, #132]	@ (8005760 <Screen_init_handler_table+0xc4>)
 80056dc:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASEDATA]      = Navigation_Change_CaseTest;
 80056de:	4b1a      	ldr	r3, [pc, #104]	@ (8005748 <Screen_init_handler_table+0xac>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	331c      	adds	r3, #28
 80056e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005764 <Screen_init_handler_table+0xc8>)
 80056e6:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SELECTION][ON_OFF_DEV]                       = ON_OFF_Button;
 80056e8:	4b17      	ldr	r3, [pc, #92]	@ (8005748 <Screen_init_handler_table+0xac>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005768 <Screen_init_handler_table+0xcc>)
 80056ee:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SELECT_PROGRAM]                   = select_running_program;
 80056f0:	4b15      	ldr	r3, [pc, #84]	@ (8005748 <Screen_init_handler_table+0xac>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4a1d      	ldr	r2, [pc, #116]	@ (800576c <Screen_init_handler_table+0xd0>)
 80056f8:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SElECT_MODIFY_PROGRAM]            = select_modify_program;
 80056fa:	4b13      	ldr	r3, [pc, #76]	@ (8005748 <Screen_init_handler_table+0xac>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	3308      	adds	r3, #8
 8005700:	4a1b      	ldr	r2, [pc, #108]	@ (8005770 <Screen_init_handler_table+0xd4>)
 8005702:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]     = Navigation_num_keyboard;
 8005704:	4b10      	ldr	r3, [pc, #64]	@ (8005748 <Screen_init_handler_table+0xac>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4a1a      	ldr	r2, [pc, #104]	@ (8005774 <Screen_init_handler_table+0xd8>)
 800570a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]    = Navigation_full_keyboard;
 800570c:	4b0e      	ldr	r3, [pc, #56]	@ (8005748 <Screen_init_handler_table+0xac>)
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	4a19      	ldr	r2, [pc, #100]	@ (8005778 <Screen_init_handler_table+0xdc>)
 8005712:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SAVE][VALUE_SAVE_INFORMATION]                = Save_Information;
 8005714:	4b0c      	ldr	r3, [pc, #48]	@ (8005748 <Screen_init_handler_table+0xac>)
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	4a18      	ldr	r2, [pc, #96]	@ (800577c <Screen_init_handler_table+0xe0>)
 800571a:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_ENTER][ENTER_PASSWORD]                       = Enter_password;
 800571c:	4b0a      	ldr	r3, [pc, #40]	@ (8005748 <Screen_init_handler_table+0xac>)
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	4a17      	ldr	r2, [pc, #92]	@ (8005780 <Screen_init_handler_table+0xe4>)
 8005722:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_NUM_KEYBOARD]                   = Enter_num_keyboard;
 8005724:	4b08      	ldr	r3, [pc, #32]	@ (8005748 <Screen_init_handler_table+0xac>)
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	3304      	adds	r3, #4
 800572a:	4a16      	ldr	r2, [pc, #88]	@ (8005784 <Screen_init_handler_table+0xe8>)
 800572c:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD]                     = Keyboard;
 800572e:	4b06      	ldr	r3, [pc, #24]	@ (8005748 <Screen_init_handler_table+0xac>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	4a15      	ldr	r2, [pc, #84]	@ (8005788 <Screen_init_handler_table+0xec>)
 8005734:	601a      	str	r2, [r3, #0]

    // assign handler table to handler table of object
    obj_screen->p_handler_table = (void *)handler_function_table;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a03      	ldr	r2, [pc, #12]	@ (8005748 <Screen_init_handler_table+0xac>)
 800573a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr
 8005748:	20000028 	.word	0x20000028
 800574c:	08004cf1 	.word	0x08004cf1
 8005750:	08004d0b 	.word	0x08004d0b
 8005754:	08004d59 	.word	0x08004d59
 8005758:	08004d8d 	.word	0x08004d8d
 800575c:	08004da7 	.word	0x08004da7
 8005760:	08004e95 	.word	0x08004e95
 8005764:	08004fc1 	.word	0x08004fc1
 8005768:	08005175 	.word	0x08005175
 800576c:	080051bb 	.word	0x080051bb
 8005770:	080051dd 	.word	0x080051dd
 8005774:	080052d9 	.word	0x080052d9
 8005778:	08005343 	.word	0x08005343
 800577c:	0800538d 	.word	0x0800538d
 8005780:	080053a1 	.word	0x080053a1
 8005784:	08005459 	.word	0x08005459
 8005788:	080054d7 	.word	0x080054d7

0800578c <Screen_excute_RX_function>:

void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
    // do sth ...


	handler_func **handler_function_table = (handler_func **) obj_screen->p_handler_table;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800579c:	60fb      	str	r3, [r7, #12]
    // excute the callback function
    if (screen_e->event == SIG_KEYBOARD) {  // ENVENT KEYBOARD
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d107      	bne.n	80057b6 <Screen_excute_RX_function+0x2a>
        handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD](obj_screen, screen_e);   
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3308      	adds	r3, #8
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	4798      	blx	r3
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
    } else {
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
    }  
}
 80057b4:	e025      	b.n	8005802 <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_NUM_KEYBOARD) {  // SWTICH TO NUMBER KEYBOARD
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d107      	bne.n	80057ce <Screen_excute_RX_function+0x42>
        handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	330c      	adds	r3, #12
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
}
 80057cc:	e019      	b.n	8005802 <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d107      	bne.n	80057e6 <Screen_excute_RX_function+0x5a>
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3310      	adds	r3, #16
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	4798      	blx	r3
}
 80057e4:	e00d      	b.n	8005802 <Screen_excute_RX_function+0x76>
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
}
 8005802:	bf00      	nop
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <Screen_CheckInput_Keyboard>:

#pragma endregion FUNCTION EXCUTE SCREEN

#pragma region FUNCTION SCREEN 

Return_Status Screen_CheckInput_Keyboard(Screen_t *const obj_screen) {
 800580c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005810:	b08d      	sub	sp, #52	@ 0x34
 8005812:	af02      	add	r7, sp, #8
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	466b      	mov	r3, sp
 8005818:	461e      	mov	r6, r3
    char string[obj_screen->Screen_keyboard.Index_String];
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 8005820:	460b      	mov	r3, r1
 8005822:	3b01      	subs	r3, #1
 8005824:	627b      	str	r3, [r7, #36]	@ 0x24
 8005826:	b28b      	uxth	r3, r1
 8005828:	2200      	movs	r2, #0
 800582a:	4698      	mov	r8, r3
 800582c:	4691      	mov	r9, r2
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800583a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800583e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005842:	b28b      	uxth	r3, r1
 8005844:	2200      	movs	r2, #0
 8005846:	461c      	mov	r4, r3
 8005848:	4615      	mov	r5, r2
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	00eb      	lsls	r3, r5, #3
 8005854:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005858:	00e2      	lsls	r2, r4, #3
 800585a:	460b      	mov	r3, r1
 800585c:	3307      	adds	r3, #7
 800585e:	08db      	lsrs	r3, r3, #3
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	ebad 0d03 	sub.w	sp, sp, r3
 8005866:	ab02      	add	r3, sp, #8
 8005868:	3300      	adds	r3, #0
 800586a:	623b      	str	r3, [r7, #32]
    char warm_string[20] = {0};
 800586c:	f107 0308 	add.w	r3, r7, #8
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	605a      	str	r2, [r3, #4]
 8005876:	609a      	str	r2, [r3, #8]
 8005878:	60da      	str	r2, [r3, #12]
 800587a:	611a      	str	r2, [r3, #16]
    float data_compare;
    // copy string
    memcpy(string,obj_screen->Screen_keyboard.String,obj_screen->Screen_keyboard.Index_String);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f103 010e 	add.w	r1, r3, #14
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005888:	461a      	mov	r2, r3
 800588a:	6a38      	ldr	r0, [r7, #32]
 800588c:	f003 f9bf 	bl	8008c0e <memcpy>
    /* compare data with limit */
    data_compare = atof(string);
 8005890:	6a38      	ldr	r0, [r7, #32]
 8005892:	f001 f943 	bl	8006b1c <atof>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4610      	mov	r0, r2
 800589c:	4619      	mov	r1, r3
 800589e:	f7fb f91d 	bl	8000adc <__aeabi_d2f>
 80058a2:	4603      	mov	r3, r0
 80058a4:	61fb      	str	r3, [r7, #28]
    if (data_compare > obj_screen->Screen_condition->max_value) {
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4619      	mov	r1, r3
 80058ae:	69f8      	ldr	r0, [r7, #28]
 80058b0:	f7fb f9d0 	bl	8000c54 <__aeabi_fcmpgt>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d019      	beq.n	80058ee <Screen_CheckInput_Keyboard+0xe2>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MAX: %.2f", obj_screen->Screen_condition->max_value);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fa fdbb 	bl	800043c <__aeabi_f2d>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	f107 0008 	add.w	r0, r7, #8
 80058ce:	e9cd 2300 	strd	r2, r3, [sp]
 80058d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005944 <Screen_CheckInput_Keyboard+0x138>)
 80058d4:	2114      	movs	r1, #20
 80058d6:	f002 ff87 	bl	80087e8 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,(uint8_t *)warm_string,sizeof(warm_string));
 80058da:	f107 0208 	add.w	r2, r7, #8
 80058de:	2314      	movs	r3, #20
 80058e0:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fce8 	bl	80062ba <DWIN_SetText>
        return Status_ERROR;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e024      	b.n	8005938 <Screen_CheckInput_Keyboard+0x12c>
    } else if (data_compare < obj_screen->Screen_condition->min_value) {
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	4619      	mov	r1, r3
 80058f6:	69f8      	ldr	r0, [r7, #28]
 80058f8:	f7fb f98e 	bl	8000c18 <__aeabi_fcmplt>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d019      	beq.n	8005936 <Screen_CheckInput_Keyboard+0x12a>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MIN: %.2f", obj_screen->Screen_condition->min_value);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4618      	mov	r0, r3
 800590a:	f7fa fd97 	bl	800043c <__aeabi_f2d>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	f107 0008 	add.w	r0, r7, #8
 8005916:	e9cd 2300 	strd	r2, r3, [sp]
 800591a:	4a0b      	ldr	r2, [pc, #44]	@ (8005948 <Screen_CheckInput_Keyboard+0x13c>)
 800591c:	2114      	movs	r1, #20
 800591e:	f002 ff63 	bl	80087e8 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,(uint8_t *)warm_string,sizeof(warm_string));
 8005922:	f107 0208 	add.w	r2, r7, #8
 8005926:	2314      	movs	r3, #20
 8005928:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fcc4 	bl	80062ba <DWIN_SetText>
        return Status_ERROR;
 8005932:	2300      	movs	r3, #0
 8005934:	e000      	b.n	8005938 <Screen_CheckInput_Keyboard+0x12c>
    } 
    return Status_SUCCESS; 
 8005936:	2301      	movs	r3, #1
 8005938:	46b5      	mov	sp, r6
}
 800593a:	4618      	mov	r0, r3
 800593c:	372c      	adds	r7, #44	@ 0x2c
 800593e:	46bd      	mov	sp, r7
 8005940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005944:	0800b57c 	.word	0x0800b57c
 8005948:	0800b588 	.word	0x0800b588

0800594c <Screen_GetIcon_Pin>:
 * @brief Function used to setup icon with data test
 * 
 * @param obj_screen : object screen
 * @param data_pin : array 2d data test
 */
void Screen_GetIcon_Pin(Screen_t *const screen_obj, char **data_pin) {
 800594c:	b590      	push	{r4, r7, lr}
 800594e:	b0a5      	sub	sp, #148	@ 0x94
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 800595c:	4619      	mov	r1, r3
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	334a      	adds	r3, #74	@ 0x4a
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	4619      	mov	r1, r3
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	460b      	mov	r3, r1
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	1a5b      	subs	r3, r3, r1
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	3395      	adds	r3, #149	@ 0x95
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    
    uint8_t map_array[128] = {0};
 8005984:	f107 030c 	add.w	r3, r7, #12
 8005988:	2280      	movs	r2, #128	@ 0x80
 800598a:	2100      	movs	r1, #0
 800598c:	4618      	mov	r0, r3
 800598e:	f003 f85b 	bl	8008a48 <memset>
    map_array['G'] = ICON_GND;
 8005992:	2302      	movs	r3, #2
 8005994:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    map_array['V'] = ICON_VCC;
 8005998:	2303      	movs	r3, #3
 800599a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = malloc(num_pin * sizeof(uint8_t));
 800599e:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 80059a8:	461c      	mov	r4, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f001 f8ba 	bl	8006b24 <malloc>
 80059b0:	4603      	mov	r3, r0
 80059b2:	4619      	mov	r1, r3
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	4623      	mov	r3, r4
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4423      	add	r3, r4
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	3350      	adds	r3, #80	@ 0x50
 80059c2:	6019      	str	r1, [r3, #0]

    /* Convert data to icon pin config */
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 80059c4:	2300      	movs	r3, #0
 80059c6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80059ca:	e03d      	b.n	8005a48 <Screen_GetIcon_Pin+0xfc>
        if (Pin_x >= 8) {
 80059cc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80059d0:	2b07      	cmp	r3, #7
 80059d2:	d90c      	bls.n	80059ee <Screen_GetIcon_Pin+0xa2>
            map_array['0'] = ICON_OUTPUT;
 80059d4:	2301      	movs	r3, #1
 80059d6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_OUTPUT;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_INPUT;
 80059e0:	2300      	movs	r3, #0
 80059e2:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_INPUT;
 80059e6:	2300      	movs	r3, #0
 80059e8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80059ec:	e00b      	b.n	8005a06 <Screen_GetIcon_Pin+0xba>
        } else {
            map_array['0'] = ICON_INPUT;
 80059ee:	2300      	movs	r3, #0
 80059f0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_INPUT;
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_OUTPUT;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_OUTPUT;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        }
        screen_obj->IC_Testerx[screen_obj->curr_device].config_pin[Pin_x] = map_array[(uint8_t)(data_pin[0][Pin_x])];
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005a0e:	4413      	add	r3, r2
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	440b      	add	r3, r1
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	3350      	adds	r3, #80	@ 0x50
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005a30:	4413      	add	r3, r2
 8005a32:	f100 0290 	add.w	r2, r0, #144	@ 0x90
 8005a36:	443a      	add	r2, r7
 8005a38:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8005a3c:	701a      	strb	r2, [r3, #0]
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 8005a3e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005a42:	3301      	adds	r3, #1
 8005a44:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8005a48:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8005a4c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d3bb      	bcc.n	80059cc <Screen_GetIcon_Pin+0x80>
    }
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	3794      	adds	r7, #148	@ 0x94
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd90      	pop	{r4, r7, pc}

08005a5e <Screen_GetIcon_Result>:

void Screen_SetIcon_Pin(Screen_t *const obj_screen) {

}

void Screen_GetIcon_Result(Screen_t *const screen_obj, char **result) {
 8005a5e:	b590      	push	{r4, r7, lr}
 8005a60:	b0a5      	sub	sp, #148	@ 0x94
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8005a6e:	4619      	mov	r1, r3
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	460b      	mov	r3, r1
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	334a      	adds	r3, #74	@ 0x4a
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	4619      	mov	r1, r3
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	1a5b      	subs	r3, r3, r1
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3395      	adds	r3, #149	@ 0x95
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	334a      	adds	r3, #74	@ 0x4a
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	1a5b      	subs	r3, r3, r1
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	3394      	adds	r3, #148	@ 0x94
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    uint8_t map_array[128] = {0};
 8005ac4:	f107 0308 	add.w	r3, r7, #8
 8005ac8:	2280      	movs	r2, #128	@ 0x80
 8005aca:	2100      	movs	r1, #0
 8005acc:	4618      	mov	r0, r3
 8005ace:	f002 ffbb 	bl	8008a48 <memset>
    map_array['0'] = ICON_LOGIC_LOW;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    map_array['1'] = ICON_LOGIC_HIGH;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    map_array['L'] = ICON_CLOCK_LOW;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    map_array['H'] = ICON_CLOCK_HIGH;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    map_array['V'] = ICON_LOGIC_NONE;
 8005aea:	2304      	movs	r3, #4
 8005aec:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    map_array['G'] = ICON_LOGIC_NONE;
 8005af0:	2304      	movs	r3, #4
 8005af2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].data_result = malloc(num_case * sizeof(char *));
 8005af6:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8005afa:	009a      	lsls	r2, r3, #2
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8005b02:	461c      	mov	r4, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f001 f80d 	bl	8006b24 <malloc>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	4623      	mov	r3, r4
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4423      	add	r3, r4
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	3354      	adds	r3, #84	@ 0x54
 8005b1c:	6019      	str	r1, [r3, #0]
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8005b24:	e01b      	b.n	8005b5e <Screen_GetIcon_Result+0x100>
        screen_obj->IC_Testerx[screen_obj->curr_device].data_result[Case_x] = malloc(num_pin * sizeof(char));
 8005b26:	f897 108c 	ldrb.w	r1, [r7, #140]	@ 0x8c
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8005b30:	4618      	mov	r0, r3
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	4603      	mov	r3, r0
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4403      	add	r3, r0
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	3354      	adds	r3, #84	@ 0x54
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	18d4      	adds	r4, r2, r3
 8005b4a:	4608      	mov	r0, r1
 8005b4c:	f000 ffea 	bl	8006b24 <malloc>
 8005b50:	4603      	mov	r3, r0
 8005b52:	6023      	str	r3, [r4, #0]
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 8005b54:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005b58:	3301      	adds	r3, #1
 8005b5a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8005b5e:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8005b62:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d3dd      	bcc.n	8005b26 <Screen_GetIcon_Result+0xc8>
    }

    /* Convert data to icon pin config */
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8005b70:	e038      	b.n	8005be4 <Screen_GetIcon_Result+0x186>
        for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 8005b72:	2300      	movs	r3, #0
 8005b74:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8005b78:	e029      	b.n	8005bce <Screen_GetIcon_Result+0x170>
        	screen_obj->IC_Testerx[screen_obj->curr_device].data_result[Case_x][Pin_x] = map_array[(uint8_t)(result[Case_x][Pin_x])];
 8005b7a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	4413      	add	r3, r2
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8005b8a:	4413      	add	r3, r2
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8005b96:	4619      	mov	r1, r3
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3354      	adds	r3, #84	@ 0x54
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f100 0290 	add.w	r2, r0, #144	@ 0x90
 8005bbc:	443a      	add	r2, r7
 8005bbe:	f812 2c88 	ldrb.w	r2, [r2, #-136]
 8005bc2:	701a      	strb	r2, [r3, #0]
        for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 8005bc4:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8005bc8:	3301      	adds	r3, #1
 8005bca:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8005bce:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8005bd2:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d3cf      	bcc.n	8005b7a <Screen_GetIcon_Result+0x11c>
    for (uint8_t Case_x = 0; Case_x < num_case; Case_x++) {
 8005bda:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8005bde:	3301      	adds	r3, #1
 8005be0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8005be4:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 8005be8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d3c0      	bcc.n	8005b72 <Screen_GetIcon_Result+0x114>
        }
    }
}
 8005bf0:	bf00      	nop
 8005bf2:	bf00      	nop
 8005bf4:	3794      	adds	r7, #148	@ 0x94
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd90      	pop	{r4, r7, pc}
	...

08005bfc <Screen_Init_Variable>:

void Screen_Init_Variable(Screen_t *const obj_screen) {
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
    obj_screen->curr_device = DEVICE_1;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_IC = "74HC4051";
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a5f      	ldr	r2, [pc, #380]	@ (8005d8c <Screen_Init_Variable+0x190>)
 8005c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC = "Description IC 74HC4051";
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a5e      	ldr	r2, [pc, #376]	@ (8005d90 <Screen_Init_Variable+0x194>)
 8005c18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    obj_screen->Program_Testx[PROGRAM_TEST1].num_IC = "5";
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a5d      	ldr	r2, [pc, #372]	@ (8005d94 <Screen_Init_Variable+0x198>)
 8005c20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    obj_screen->Program_Testx[PROGRAM_TEST2].Name_IC = "74HC4052";
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a5c      	ldr	r2, [pc, #368]	@ (8005d98 <Screen_Init_Variable+0x19c>)
 8005c28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC = "Description IC 74HC4052";
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8005d9c <Screen_Init_Variable+0x1a0>)
 8005c30:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    obj_screen->Program_Testx[PROGRAM_TEST2].num_IC = "10";
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a5a      	ldr	r2, [pc, #360]	@ (8005da0 <Screen_Init_Variable+0x1a4>)
 8005c38:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

    obj_screen->Program_Testx[PROGRAM_TEST3].Name_IC = "74HC4053";
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a59      	ldr	r2, [pc, #356]	@ (8005da4 <Screen_Init_Variable+0x1a8>)
 8005c40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC = "Description IC 74HC4053";
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a58      	ldr	r2, [pc, #352]	@ (8005da8 <Screen_Init_Variable+0x1ac>)
 8005c48:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    obj_screen->Program_Testx[PROGRAM_TEST3].num_IC = "15";
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a57      	ldr	r2, [pc, #348]	@ (8005dac <Screen_Init_Variable+0x1b0>)
 8005c50:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    obj_screen->Program_Testx[PROGRAM_TEST4].Name_IC = "74HC4054";
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a56      	ldr	r2, [pc, #344]	@ (8005db0 <Screen_Init_Variable+0x1b4>)
 8005c58:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC = "Description IC 74HC4054";
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a55      	ldr	r2, [pc, #340]	@ (8005db4 <Screen_Init_Variable+0x1b8>)
 8005c60:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    obj_screen->Program_Testx[PROGRAM_TEST4].num_IC = "20";
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a54      	ldr	r2, [pc, #336]	@ (8005db8 <Screen_Init_Variable+0x1bc>)
 8005c68:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program = "Program 1";
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a53      	ldr	r2, [pc, #332]	@ (8005dbc <Screen_Init_Variable+0x1c0>)
 8005c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program = "Program 2";
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a52      	ldr	r2, [pc, #328]	@ (8005dc0 <Screen_Init_Variable+0x1c4>)
 8005c78:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program = "Program 3";
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a51      	ldr	r2, [pc, #324]	@ (8005dc4 <Screen_Init_Variable+0x1c8>)
 8005c80:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program = "Program 4";
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a50      	ldr	r2, [pc, #320]	@ (8005dc8 <Screen_Init_Variable+0x1cc>)
 8005c88:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

    obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester = "IC TESTER 1";
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a4f      	ldr	r2, [pc, #316]	@ (8005dcc <Screen_Init_Variable+0x1d0>)
 8005c90:	64da      	str	r2, [r3, #76]	@ 0x4c
    obj_screen->IC_Testerx[DEVICE_2].NameIC_Tester = "IC TESTER 2";
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a4e      	ldr	r2, [pc, #312]	@ (8005dd0 <Screen_Init_Variable+0x1d4>)
 8005c96:	661a      	str	r2, [r3, #96]	@ 0x60
    obj_screen->IC_Testerx[DEVICE_3].NameIC_Tester = "IC TESTER 3";
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a4e      	ldr	r2, [pc, #312]	@ (8005dd4 <Screen_Init_Variable+0x1d8>)
 8005c9c:	675a      	str	r2, [r3, #116]	@ 0x74

    obj_screen->IC_Testerx[DEVICE_1].curr_PageMain = DWINPAGE_MAIN;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2265      	movs	r2, #101	@ 0x65
 8005ca2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    obj_screen->IC_Testerx[DEVICE_2].curr_PageMain = DWINPAGE_MAIN;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2265      	movs	r2, #101	@ 0x65
 8005caa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    obj_screen->IC_Testerx[DEVICE_3].curr_PageMain = DWINPAGE_MAIN; 
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2265      	movs	r2, #101	@ 0x65
 8005cb2:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71

    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_1,(uint8_t *)obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fa fa4e 	bl	8000164 <strlen>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	4622      	mov	r2, r4
 8005cce:	f249 2125 	movw	r1, #37413	@ 0x9225
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 faf1 	bl	80062ba <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_2,(uint8_t *)obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 40a0 	ldr.w	r4, [r3, #160]	@ 0xa0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fa fa3d 	bl	8000164 <strlen>
 8005cea:	4603      	mov	r3, r0
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	4622      	mov	r2, r4
 8005cf0:	f249 2150 	movw	r1, #37456	@ 0x9250
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fae0 	bl	80062ba <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_3,(uint8_t *)obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fa fa2c 	bl	8000164 <strlen>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	4622      	mov	r2, r4
 8005d12:	f249 2175 	movw	r1, #37493	@ 0x9275
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 facf 	bl	80062ba <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_4,(uint8_t *)obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 40d8 	ldr.w	r4, [r3, #216]	@ 0xd8
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fa fa1b 	bl	8000164 <strlen>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	4622      	mov	r2, r4
 8005d34:	f44f 4113 	mov.w	r1, #37632	@ 0x9300
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fabe 	bl	80062ba <DWIN_SetText>

    DWIN_SetText((Dwin_t *)obj_screen,VP_Name_Tester,(uint8_t *)obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,strlen(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fa fa0c 	bl	8000164 <strlen>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	4622      	mov	r2, r4
 8005d52:	f249 3150 	movw	r1, #37712	@ 0x9350
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 faaf 	bl	80062ba <DWIN_SetText>

    obj_screen->Program_Testx[PROGRAM_TEST1].num_pin = 16;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2210      	movs	r2, #16
 8005d60:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    obj_screen->Program_Testx[PROGRAM_TEST1].num_case = 8;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2208      	movs	r2, #8
 8005d68:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94

    /* Screen */
    obj_screen->Screen_keyboard.Caplock = false;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    obj_screen->Screen_keyboard.Index_String = 0;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    Screen_ShowData_Mainpage(&_Screen,0);
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4816      	ldr	r0, [pc, #88]	@ (8005dd8 <Screen_Init_Variable+0x1dc>)
 8005d80:	f000 f82c 	bl	8005ddc <Screen_ShowData_Mainpage>
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd90      	pop	{r4, r7, pc}
 8005d8c:	0800b594 	.word	0x0800b594
 8005d90:	0800b5a0 	.word	0x0800b5a0
 8005d94:	0800b5b8 	.word	0x0800b5b8
 8005d98:	0800b5bc 	.word	0x0800b5bc
 8005d9c:	0800b5c8 	.word	0x0800b5c8
 8005da0:	0800b5e0 	.word	0x0800b5e0
 8005da4:	0800b5e4 	.word	0x0800b5e4
 8005da8:	0800b5f0 	.word	0x0800b5f0
 8005dac:	0800b608 	.word	0x0800b608
 8005db0:	0800b60c 	.word	0x0800b60c
 8005db4:	0800b618 	.word	0x0800b618
 8005db8:	0800b630 	.word	0x0800b630
 8005dbc:	0800b634 	.word	0x0800b634
 8005dc0:	0800b640 	.word	0x0800b640
 8005dc4:	0800b64c 	.word	0x0800b64c
 8005dc8:	0800b658 	.word	0x0800b658
 8005dcc:	0800b664 	.word	0x0800b664
 8005dd0:	0800b670 	.word	0x0800b670
 8005dd4:	0800b67c 	.word	0x0800b67c
 8005dd8:	20000380 	.word	0x20000380

08005ddc <Screen_ShowData_Mainpage>:

void Screen_ShowData_Mainpage(Screen_t *const screen_obj, uint8_t index_program) {
 8005ddc:	b5b0      	push	{r4, r5, r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	70fb      	strb	r3, [r7, #3]
    uint8_t a_select_program[MAX_PROGRAM_TEST];
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	4613      	mov	r3, r2
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	1a9b      	subs	r3, r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	3388      	adds	r3, #136	@ 0x88
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fa f9b2 	bl	8000164 <strlen>
 8005e00:	4603      	mov	r3, r0
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	3309      	adds	r3, #9
 8005e06:	77fb      	strb	r3, [r7, #31]
    uint8_t size_Description_IC = strlen("IC Description: ") + strlen((char *)screen_obj->Program_Testx[index_program].Description_IC);
 8005e08:	78fa      	ldrb	r2, [r7, #3]
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	338c      	adds	r3, #140	@ 0x8c
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fa f9a2 	bl	8000164 <strlen>
 8005e20:	4603      	mov	r3, r0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	3310      	adds	r3, #16
 8005e26:	77bb      	strb	r3, [r7, #30]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 8005e28:	78fa      	ldrb	r2, [r7, #3]
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	1a9b      	subs	r3, r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	440b      	add	r3, r1
 8005e36:	3390      	adds	r3, #144	@ 0x90
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fa f992 	bl	8000164 <strlen>
 8005e40:	4603      	mov	r3, r0
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	330f      	adds	r3, #15
 8005e46:	777b      	strb	r3, [r7, #29]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8005e48:	7ffb      	ldrb	r3, [r7, #31]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fe69 	bl	8006b24 <malloc>
 8005e52:	4603      	mov	r3, r0
 8005e54:	61bb      	str	r3, [r7, #24]
    char *Text_Description_IC = malloc(size_Description_IC + 1);
 8005e56:	7fbb      	ldrb	r3, [r7, #30]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fe62 	bl	8006b24 <malloc>
 8005e60:	4603      	mov	r3, r0
 8005e62:	617b      	str	r3, [r7, #20]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 8005e64:	7f7b      	ldrb	r3, [r7, #29]
 8005e66:	3301      	adds	r3, #1
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fe5b 	bl	8006b24 <malloc>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	613b      	str	r3, [r7, #16]

    strcpy(Text_Name_IC,"IC Name: ");
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	4940      	ldr	r1, [pc, #256]	@ (8005f78 <Screen_ShowData_Mainpage+0x19c>)
 8005e76:	461a      	mov	r2, r3
 8005e78:	460b      	mov	r3, r1
 8005e7a:	cb03      	ldmia	r3!, {r0, r1}
 8005e7c:	6010      	str	r0, [r2, #0]
 8005e7e:	6051      	str	r1, [r2, #4]
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 8005e84:	78fa      	ldrb	r2, [r7, #3]
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	1a9b      	subs	r3, r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	3388      	adds	r3, #136	@ 0x88
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4619      	mov	r1, r3
 8005e98:	69b8      	ldr	r0, [r7, #24]
 8005e9a:	f002 fddd 	bl	8008a58 <strcat>
    strcpy(Text_Description_IC,"IC Description: ");
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	4a36      	ldr	r2, [pc, #216]	@ (8005f7c <Screen_ShowData_Mainpage+0x1a0>)
 8005ea2:	461d      	mov	r5, r3
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ea8:	6028      	str	r0, [r5, #0]
 8005eaa:	6069      	str	r1, [r5, #4]
 8005eac:	60aa      	str	r2, [r5, #8]
 8005eae:	60eb      	str	r3, [r5, #12]
 8005eb0:	7823      	ldrb	r3, [r4, #0]
 8005eb2:	742b      	strb	r3, [r5, #16]
    strcat(Text_Description_IC,(char *)screen_obj->Program_Testx[index_program].Description_IC);
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	338c      	adds	r3, #140	@ 0x8c
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6978      	ldr	r0, [r7, #20]
 8005eca:	f002 fdc5 	bl	8008a58 <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8005f80 <Screen_ShowData_Mainpage+0x1a4>)
 8005ed2:	461c      	mov	r4, r3
 8005ed4:	4615      	mov	r5, r2
 8005ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ed8:	6020      	str	r0, [r4, #0]
 8005eda:	6061      	str	r1, [r4, #4]
 8005edc:	60a2      	str	r2, [r4, #8]
 8005ede:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);
 8005ee0:	78fa      	ldrb	r2, [r7, #3]
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	1a9b      	subs	r3, r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	3390      	adds	r3, #144	@ 0x90
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6938      	ldr	r0, [r7, #16]
 8005ef6:	f002 fdaf 	bl	8008a58 <strcat>

    memset(a_select_program,1,MAX_PROGRAM_TEST);
 8005efa:	f107 030c 	add.w	r3, r7, #12
 8005efe:	2204      	movs	r2, #4
 8005f00:	2101      	movs	r1, #1
 8005f02:	4618      	mov	r0, r3
 8005f04:	f002 fda0 	bl	8008a48 <memset>
    // Get the program selected
    a_select_program[index_program] = 0 ;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	3320      	adds	r3, #32
 8005f0c:	443b      	add	r3, r7
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f803 2c14 	strb.w	r2, [r3, #-20]
    screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index = index_program;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	334a      	adds	r3, #74	@ 0x4a
 8005f2a:	78fa      	ldrb	r2, [r7, #3]
 8005f2c:	701a      	strb	r2, [r3, #0]

    // Show data in screen
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_SELECT_PROGRAM,a_select_program,MAX_PROGRAM_TEST);
 8005f2e:	f107 020c 	add.w	r2, r7, #12
 8005f32:	2304      	movs	r3, #4
 8005f34:	f44f 4182 	mov.w	r1, #16640	@ 0x4100
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fa6c 	bl	8006416 <DWIN_SetArray_Icon>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_IC,(uint8_t *)Text_Name_IC,size_Name_IC);
 8005f3e:	7ffb      	ldrb	r3, [r7, #31]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	f44f 4111 	mov.w	r1, #37120	@ 0x9100
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f9b6 	bl	80062ba <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Description_IC,(uint8_t *)Text_Description_IC,size_Description_IC);
 8005f4e:	7fbb      	ldrb	r3, [r7, #30]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	f249 1150 	movw	r1, #37200	@ 0x9150
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f9ae 	bl	80062ba <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,(uint8_t *)Text_Num_IC,size_Num_IC);
 8005f5e:	7f7b      	ldrb	r3, [r7, #29]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f9a6 	bl	80062ba <DWIN_SetText>
}
 8005f6e:	bf00      	nop
 8005f70:	3720      	adds	r7, #32
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bdb0      	pop	{r4, r5, r7, pc}
 8005f76:	bf00      	nop
 8005f78:	0800b544 	.word	0x0800b544
 8005f7c:	0800b688 	.word	0x0800b688
 8005f80:	0800b550 	.word	0x0800b550

08005f84 <Screen_SetInfo_Pin>:

void Screen_SetInfo_Pin(Screen_t *const screen_obj, char **array_data) {
 8005f84:	b590      	push	{r4, r7, lr}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
    // for (uint8_t pin_x = 0; pin_x < screen_obj->Program_Testx[PROGRAM_TEST1].num_pin; pin_x++) {
    //     if (screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x] != NULL) {
    //         free(screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x]);
    //     } 
    // }
    uint16_t Address_VP = VP_Name_Pin;
 8005f8e:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 8005f92:	81fb      	strh	r3, [r7, #14]
    screen_obj->Program_Testx[PROGRAM_TEST1].data_pin = malloc( screen_obj->Program_Testx[PROGRAM_TEST1].num_pin * sizeof(char *) );
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fdc1 	bl	8006b24 <malloc>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    /* Get new data */
    for (uint8_t pin_x = 0; pin_x < screen_obj->Program_Testx[PROGRAM_TEST1].num_pin; pin_x++) {
 8005fac:	2300      	movs	r3, #0
 8005fae:	737b      	strb	r3, [r7, #13]
 8005fb0:	e02d      	b.n	800600e <Screen_SetInfo_Pin+0x8a>
        screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x] = strdup(array_data[pin_x]);
 8005fb2:	7b7b      	ldrb	r3, [r7, #13]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	4413      	add	r3, r2
 8005fba:	6819      	ldr	r1, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005fc2:	7b7b      	ldrb	r3, [r7, #13]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	18d4      	adds	r4, r2, r3
 8005fc8:	4608      	mov	r0, r1
 8005fca:	f002 fd55 	bl	8008a78 <strdup>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	6023      	str	r3, [r4, #0]
        DWIN_SetText((Dwin_t *)screen_obj,Address_VP,screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x],strlen(screen_obj->Program_Testx[PROGRAM_TEST1].data_pin[pin_x]));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005fd8:	7b7b      	ldrb	r3, [r7, #13]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	681c      	ldr	r4, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005fe6:	7b7b      	ldrb	r3, [r7, #13]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fa f8b8 	bl	8000164 <strlen>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	89f9      	ldrh	r1, [r7, #14]
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f95c 	bl	80062ba <DWIN_SetText>
        Address_VP = Address_VP + 0x10;
 8006002:	89fb      	ldrh	r3, [r7, #14]
 8006004:	3310      	adds	r3, #16
 8006006:	81fb      	strh	r3, [r7, #14]
    for (uint8_t pin_x = 0; pin_x < screen_obj->Program_Testx[PROGRAM_TEST1].num_pin; pin_x++) {
 8006008:	7b7b      	ldrb	r3, [r7, #13]
 800600a:	3301      	adds	r3, #1
 800600c:	737b      	strb	r3, [r7, #13]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8006014:	7b7a      	ldrb	r2, [r7, #13]
 8006016:	429a      	cmp	r2, r3
 8006018:	d3cb      	bcc.n	8005fb2 <Screen_SetInfo_Pin+0x2e>
    }
}
 800601a:	bf00      	nop
 800601c:	bf00      	nop
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	bd90      	pop	{r4, r7, pc}

08006024 <I2C1_ER_IRQHandler>:
#include "test_os.h"
#include "../Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h" /* CMSIS STM32F1xx Device Peripheral Access Layer Header File */

void I2C1_ER_IRQHandler(void);

void I2C1_ER_IRQHandler(void) { 
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
    OS_task_activate(1);  
 8006028:	2001      	movs	r0, #1
 800602a:	f000 fc09 	bl	8006840 <OS_task_activate>
    // HAL_NVIC_ClearPendingIRQ(I2C1_ER_IRQn); // clear NVIC pending bit
    
}
 800602e:	bf00      	nop
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <BSP_init>:

/* hardware-specific support code run on a specific hardware platform */
void BSP_init(void) {
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
    /* init event pool */
    dynamic_event_pool_init();
 8006038:	f000 fcb0 	bl	800699c <dynamic_event_pool_init>
    
    /* Set IRQ number for priority used in OS */
    OS_prio_setIRQ(1,I2C1_ER_IRQn);
 800603c:	2120      	movs	r1, #32
 800603e:	2001      	movs	r0, #1
 8006040:	f000 fc82 	bl	8006948 <OS_prio_setIRQ>

    OS_priority_IRQ(I2C1_ER_IRQn,1);
 8006044:	2101      	movs	r1, #1
 8006046:	2020      	movs	r0, #32
 8006048:	f000 fc64 	bl	8006914 <OS_priority_IRQ>
    OS_Test_setIRQ(AO_BlinkyTest,I2C1_ER_IRQn);    
 800604c:	4b06      	ldr	r3, [pc, #24]	@ (8006068 <BSP_init+0x34>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2120      	movs	r1, #32
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fc94 	bl	8006980 <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_taskPost,I2C1_ER_IRQn);
 8006058:	4b04      	ldr	r3, [pc, #16]	@ (800606c <BSP_init+0x38>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2120      	movs	r1, #32
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fc8e 	bl	8006980 <OS_Test_setIRQ>
}
 8006064:	bf00      	nop
 8006066:	bd80      	pop	{r7, pc}
 8006068:	0800b72c 	.word	0x0800b72c
 800606c:	0800b728 	.word	0x0800b728

08006070 <TestOS_Work>:

/* ============================= function using for initialization task ============================= */ 

/* the value using for app test os */
OS_event_t const *TestOS_Work(void) {
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
    static TestOS_Evt workTest_blinky ;
    workTest_blinky.appEvt.sig = 0; /* unused */
 8006074:	4b07      	ldr	r3, [pc, #28]	@ (8006094 <TestOS_Work+0x24>)
 8006076:	2200      	movs	r2, #0
 8006078:	801a      	strh	r2, [r3, #0]
    workTest_blinky.ticks1 = 300; /* 500 ms */
 800607a:	4b06      	ldr	r3, [pc, #24]	@ (8006094 <TestOS_Work+0x24>)
 800607c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006080:	819a      	strh	r2, [r3, #12]
    workTest_blinky.ticks2 = 500;
 8006082:	4b04      	ldr	r3, [pc, #16]	@ (8006094 <TestOS_Work+0x24>)
 8006084:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006088:	81da      	strh	r2, [r3, #14]

    /* return the OS_event_t type */
    return &workTest_blinky.appEvt;
 800608a:	4b02      	ldr	r3, [pc, #8]	@ (8006094 <TestOS_Work+0x24>)
}
 800608c:	4618      	mov	r0, r3
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr
 8006094:	200004d0 	.word	0x200004d0

08006098 <Post_task_init>:
static app_post Post_instance;
OS_task * const AO_taskPost = &Post_instance.task;

static data_send_t data_send;

void Post_task_init(void) {
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
    PostApp_ctor(&Post_instance);
 800609c:	4803      	ldr	r0, [pc, #12]	@ (80060ac <Post_task_init+0x14>)
 800609e:	f000 f809 	bl	80060b4 <PostApp_ctor>

    data_send.data_post = 0;
 80060a2:	4b03      	ldr	r3, [pc, #12]	@ (80060b0 <Post_task_init+0x18>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]
}
 80060a8:	bf00      	nop
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	200004e0 	.word	0x200004e0
 80060b0:	20000514 	.word	0x20000514

080060b4 <PostApp_ctor>:

void PostApp_ctor(app_post *pAO) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
    /* init task */
    OS_task_init(AO_taskPost,(OS_handler)&PostApp_init,(OS_handler)&PostApp_dispatch);
 80060bc:	4b07      	ldr	r3, [pc, #28]	@ (80060dc <PostApp_ctor+0x28>)
 80060be:	4a08      	ldr	r2, [pc, #32]	@ (80060e0 <PostApp_ctor+0x2c>)
 80060c0:	4908      	ldr	r1, [pc, #32]	@ (80060e4 <PostApp_ctor+0x30>)
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fa79 	bl	80065ba <OS_task_init>

    /* init time */
    OS_TimeEvt_init(&Post_instance.te,POST_DATA_TIMEOUT,&Post_instance.task);
 80060c8:	4a04      	ldr	r2, [pc, #16]	@ (80060dc <PostApp_ctor+0x28>)
 80060ca:	2102      	movs	r1, #2
 80060cc:	4806      	ldr	r0, [pc, #24]	@ (80060e8 <PostApp_ctor+0x34>)
 80060ce:	f000 fb43 	bl	8006758 <OS_TimeEvt_init>
}
 80060d2:	bf00      	nop
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	200004e0 	.word	0x200004e0
 80060e0:	08006111 	.word	0x08006111
 80060e4:	080060ed 	.word	0x080060ed
 80060e8:	200004fc 	.word	0x200004fc

080060ec <PostApp_init>:

void PostApp_init(app_post * const pOS_task, OS_event_t const * const pEvent) {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
    OS_TimeEvt_Set(&pOS_task->te,20,500);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	331c      	adds	r3, #28
 80060fa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80060fe:	2114      	movs	r1, #20
 8006100:	4618      	mov	r0, r3
 8006102:	f000 fb51 	bl	80067a8 <OS_TimeEvt_Set>
}
 8006106:	bf00      	nop
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <PostApp_dispatch>:

void PostApp_dispatch(app_post * const pOS_task, OS_event_t const * const pEvent) {
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d10e      	bne.n	8006140 <PostApp_dispatch+0x30>
        case POST_DATA_TIMEOUT : {
            printf("Post data to test task!\n");
 8006122:	480a      	ldr	r0, [pc, #40]	@ (800614c <PostApp_dispatch+0x3c>)
 8006124:	f002 fb58 	bl	80087d8 <puts>
            // data_send.string_post = "Hello task test: ";
            ++data_send.data_post;
 8006128:	4b09      	ldr	r3, [pc, #36]	@ (8006150 <PostApp_dispatch+0x40>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3301      	adds	r3, #1
 800612e:	4a08      	ldr	r2, [pc, #32]	@ (8006150 <PostApp_dispatch+0x40>)
 8006130:	6013      	str	r3, [r2, #0]
            OS_task_post_event(AO_BlinkyTest,PRINT_POST_DATA,(uint8_t *)&data_send,sizeof(data_send_t *));
 8006132:	4b08      	ldr	r3, [pc, #32]	@ (8006154 <PostApp_dispatch+0x44>)
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	2304      	movs	r3, #4
 8006138:	4a05      	ldr	r2, [pc, #20]	@ (8006150 <PostApp_dispatch+0x40>)
 800613a:	2103      	movs	r1, #3
 800613c:	f000 faee 	bl	800671c <OS_task_post_event>
        }

        default: break;
 8006140:	bf00      	nop
    }
}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	0800b69c 	.word	0x0800b69c
 8006150:	20000514 	.word	0x20000514
 8006154:	0800b72c 	.word	0x0800b72c

08006158 <BlinkyTest_app_init>:

static Test_Blinky_OS Blinky_instance; /* the app instance */
OS_task * const AO_BlinkyTest = &Blinky_instance.task; /* AO task pointer */

/* call in main file to initialization Active object of app using */
void BlinkyTest_app_init(void) {
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
    BlinkyTest_ctor(&Blinky_instance);
 800615c:	4802      	ldr	r0, [pc, #8]	@ (8006168 <BlinkyTest_app_init+0x10>)
 800615e:	f000 f805 	bl	800616c <BlinkyTest_ctor>
}
 8006162:	bf00      	nop
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000518 	.word	0x20000518

0800616c <BlinkyTest_ctor>:


void BlinkyTest_ctor(Test_Blinky_OS * const pAO) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
    /* Init task */
    OS_task_init(&pAO->task,(OS_handler *)&BlinkyTest_init,(OS_handler *)&BlinkyTest_Dispatch);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a0b      	ldr	r2, [pc, #44]	@ (80061a4 <BlinkyTest_ctor+0x38>)
 8006178:	490b      	ldr	r1, [pc, #44]	@ (80061a8 <BlinkyTest_ctor+0x3c>)
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fa1d 	bl	80065ba <OS_task_init>

    /* init time os if using */
    OS_TimeEvt_init(&pAO->te1,TIMEOUT1_SIG,&pAO->task);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	331c      	adds	r3, #28
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	2100      	movs	r1, #0
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fae5 	bl	8006758 <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te2,TIMEOUT2_SIG,&pAO->task);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3334      	adds	r3, #52	@ 0x34
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	2101      	movs	r1, #1
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fade 	bl	8006758 <OS_TimeEvt_init>
}
 800619c:	bf00      	nop
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	080061ed 	.word	0x080061ed
 80061a8:	080061ad 	.word	0x080061ad

080061ac <BlinkyTest_init>:

/* The init function of app task (optional) */
void BlinkyTest_init(Test_Blinky_OS * const pOS_task, OS_event_t const * const pEvent) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
    
    /* init time for generate event */
    OS_TimeEvt_Set(&pOS_task->te1,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f103 001c 	add.w	r0, r3, #28
    1U,
    OS_EVT_DOWNCAST(TestOS_Evt,pEvent)->ticks1);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	899b      	ldrh	r3, [r3, #12]
    OS_TimeEvt_Set(&pOS_task->te1,
 80061c0:	461a      	mov	r2, r3
 80061c2:	2101      	movs	r1, #1
 80061c4:	f000 faf0 	bl	80067a8 <OS_TimeEvt_Set>

    OS_TimeEvt_Set(&pOS_task->te2,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f103 0034 	add.w	r0, r3, #52	@ 0x34
    1U + (OS_EVT_DOWNCAST(TestOS_Evt,pEvent)->ticks2 / 4),
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	89db      	ldrh	r3, [r3, #14]
    OS_TimeEvt_Set(&pOS_task->te2,
 80061d2:	089b      	lsrs	r3, r3, #2
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3301      	adds	r3, #1
 80061d8:	b299      	uxth	r1, r3
    OS_EVT_DOWNCAST(TestOS_Evt,pEvent)->ticks2);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	89db      	ldrh	r3, [r3, #14]
    OS_TimeEvt_Set(&pOS_task->te2,
 80061de:	461a      	mov	r2, r3
 80061e0:	f000 fae2 	bl	80067a8 <OS_TimeEvt_Set>
    /* if don't using this function */
    /*
    * UNSED(pOS_task);
    * UNSED(pEvent);
    */
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <BlinkyTest_Dispatch>:

void BlinkyTest_Dispatch(Test_Blinky_OS *const pOS_task, OS_event_t const * const pEvent) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d01a      	beq.n	8006234 <BlinkyTest_Dispatch+0x48>
 80061fe:	2b03      	cmp	r3, #3
 8006200:	dc25      	bgt.n	800624e <BlinkyTest_Dispatch+0x62>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <BlinkyTest_Dispatch+0x20>
 8006206:	2b01      	cmp	r3, #1
 8006208:	d00a      	beq.n	8006220 <BlinkyTest_Dispatch+0x34>
        case PRINT_POST_DATA : {
            printf("Receive data post\n");
            data_send_t *data_receive = (data_send_t *)(get_data_dynamic_event(pEvent));
             printf("Data receive: %ld\n",data_receive->data_post);
        }
        default: break;
 800620a:	e020      	b.n	800624e <BlinkyTest_Dispatch+0x62>
            HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 800620c:	2200      	movs	r2, #0
 800620e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006212:	4811      	ldr	r0, [pc, #68]	@ (8006258 <BlinkyTest_Dispatch+0x6c>)
 8006214:	f7fb fcc2 	bl	8001b9c <HAL_GPIO_WritePin>
            printf("Turn on led\n");
 8006218:	4810      	ldr	r0, [pc, #64]	@ (800625c <BlinkyTest_Dispatch+0x70>)
 800621a:	f002 fadd 	bl	80087d8 <puts>
        } break;
 800621e:	e017      	b.n	8006250 <BlinkyTest_Dispatch+0x64>
        	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 8006220:	2201      	movs	r2, #1
 8006222:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006226:	480c      	ldr	r0, [pc, #48]	@ (8006258 <BlinkyTest_Dispatch+0x6c>)
 8006228:	f7fb fcb8 	bl	8001b9c <HAL_GPIO_WritePin>
            printf("Turn off led\n");
 800622c:	480c      	ldr	r0, [pc, #48]	@ (8006260 <BlinkyTest_Dispatch+0x74>)
 800622e:	f002 fad3 	bl	80087d8 <puts>
        } break;
 8006232:	e00d      	b.n	8006250 <BlinkyTest_Dispatch+0x64>
            printf("Receive data post\n");
 8006234:	480b      	ldr	r0, [pc, #44]	@ (8006264 <BlinkyTest_Dispatch+0x78>)
 8006236:	f002 facf 	bl	80087d8 <puts>
            data_send_t *data_receive = (data_send_t *)(get_data_dynamic_event(pEvent));
 800623a:	6838      	ldr	r0, [r7, #0]
 800623c:	f000 fc63 	bl	8006b06 <get_data_dynamic_event>
 8006240:	60f8      	str	r0, [r7, #12]
             printf("Data receive: %ld\n",data_receive->data_post);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4619      	mov	r1, r3
 8006248:	4807      	ldr	r0, [pc, #28]	@ (8006268 <BlinkyTest_Dispatch+0x7c>)
 800624a:	f002 fa5d 	bl	8008708 <iprintf>
        default: break;
 800624e:	bf00      	nop
    }
}
 8006250:	bf00      	nop
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40011000 	.word	0x40011000
 800625c:	0800b6b4 	.word	0x0800b6b4
 8006260:	0800b6c0 	.word	0x0800b6c0
 8006264:	0800b6d0 	.word	0x0800b6d0
 8006268:	0800b6e4 	.word	0x0800b6e4

0800626c <DWIN_SetPage>:
#include "DWIN_HMI.h"

void DWIN_SetPage(Dwin_t *pDwin, uint8_t page)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
    uint8_t sendBuffer[10] = {CMD_HEAD1, CMD_HEAD2, 0x07, CMD_WRITE, 0x00, 0x84, 0x5A, 0x01, 0x00, page};
 8006278:	235a      	movs	r3, #90	@ 0x5a
 800627a:	733b      	strb	r3, [r7, #12]
 800627c:	23a5      	movs	r3, #165	@ 0xa5
 800627e:	737b      	strb	r3, [r7, #13]
 8006280:	2307      	movs	r3, #7
 8006282:	73bb      	strb	r3, [r7, #14]
 8006284:	2382      	movs	r3, #130	@ 0x82
 8006286:	73fb      	strb	r3, [r7, #15]
 8006288:	2300      	movs	r3, #0
 800628a:	743b      	strb	r3, [r7, #16]
 800628c:	2384      	movs	r3, #132	@ 0x84
 800628e:	747b      	strb	r3, [r7, #17]
 8006290:	235a      	movs	r3, #90	@ 0x5a
 8006292:	74bb      	strb	r3, [r7, #18]
 8006294:	2301      	movs	r3, #1
 8006296:	74fb      	strb	r3, [r7, #19]
 8006298:	2300      	movs	r3, #0
 800629a:	753b      	strb	r3, [r7, #20]
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	f107 010c 	add.w	r1, r7, #12
 80062a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80062ac:	220a      	movs	r2, #10
 80062ae:	f7fd fe13 	bl	8003ed8 <HAL_UART_Transmit>
}
 80062b2:	bf00      	nop
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <DWIN_SetText>:

void DWIN_SetText(Dwin_t *pDwin, uint16_t VP_address, uint8_t *textData, uint16_t datalen) {
 80062ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062be:	b08a      	sub	sp, #40	@ 0x28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	607a      	str	r2, [r7, #4]
 80062c6:	461a      	mov	r2, r3
 80062c8:	460b      	mov	r3, r1
 80062ca:	817b      	strh	r3, [r7, #10]
 80062cc:	4613      	mov	r3, r2
 80062ce:	813b      	strh	r3, [r7, #8]
 80062d0:	466b      	mov	r3, sp
 80062d2:	469a      	mov	sl, r3
    uint8_t ffEnding[2] = { 0xFF, 0xFF };
 80062d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80062d8:	83bb      	strh	r3, [r7, #28]
    uint8_t sendBuffer[8 + datalen];
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	f103 0608 	add.w	r6, r3, #8
 80062e0:	1e73      	subs	r3, r6, #1
 80062e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80062e4:	4632      	mov	r2, r6
 80062e6:	2300      	movs	r3, #0
 80062e8:	4690      	mov	r8, r2
 80062ea:	4699      	mov	r9, r3
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	f04f 0300 	mov.w	r3, #0
 80062f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006300:	4632      	mov	r2, r6
 8006302:	2300      	movs	r3, #0
 8006304:	4614      	mov	r4, r2
 8006306:	461d      	mov	r5, r3
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	f04f 0300 	mov.w	r3, #0
 8006310:	00eb      	lsls	r3, r5, #3
 8006312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006316:	00e2      	lsls	r2, r4, #3
 8006318:	4633      	mov	r3, r6
 800631a:	3307      	adds	r3, #7
 800631c:	08db      	lsrs	r3, r3, #3
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	ebad 0d03 	sub.w	sp, sp, r3
 8006324:	466b      	mov	r3, sp
 8006326:	3300      	adds	r3, #0
 8006328:	623b      	str	r3, [r7, #32]

    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800632a:	235a      	movs	r3, #90	@ 0x5a
 800632c:	753b      	strb	r3, [r7, #20]
 800632e:	23a5      	movs	r3, #165	@ 0xa5
 8006330:	757b      	strb	r3, [r7, #21]
 8006332:	893b      	ldrh	r3, [r7, #8]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	3305      	adds	r3, #5
 8006338:	b2db      	uxtb	r3, r3
 800633a:	75bb      	strb	r3, [r7, #22]
 800633c:	2382      	movs	r3, #130	@ 0x82
 800633e:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 8006340:	897b      	ldrh	r3, [r7, #10]
 8006342:	0a1b      	lsrs	r3, r3, #8
 8006344:	b29b      	uxth	r3, r3
 8006346:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 8006348:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 800634a:	897b      	ldrh	r3, [r7, #10]
 800634c:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800634e:	767b      	strb	r3, [r7, #25]
    
    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	461a      	mov	r2, r3
 8006354:	f107 0314 	add.w	r3, r7, #20
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	6010      	str	r0, [r2, #0]
 800635c:	889b      	ldrh	r3, [r3, #4]
 800635e:	8093      	strh	r3, [r2, #4]
    memcpy(sendBuffer + 6, textData, datalen);
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	3306      	adds	r3, #6
 8006364:	893a      	ldrh	r2, [r7, #8]
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4618      	mov	r0, r3
 800636a:	f002 fc50 	bl	8008c0e <memcpy>
    memcpy(sendBuffer + (6 + datalen), ffEnding, sizeof(ffEnding));
 800636e:	893b      	ldrh	r3, [r7, #8]
 8006370:	3306      	adds	r3, #6
 8006372:	461a      	mov	r2, r3
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	4413      	add	r3, r2
 8006378:	8bba      	ldrh	r2, [r7, #28]
 800637a:	801a      	strh	r2, [r3, #0]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	b2b2      	uxth	r2, r6
 8006382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006386:	6a39      	ldr	r1, [r7, #32]
 8006388:	f7fd fda6 	bl	8003ed8 <HAL_UART_Transmit>
 800638c:	46d5      	mov	sp, sl
}
 800638e:	bf00      	nop
 8006390:	3728      	adds	r7, #40	@ 0x28
 8006392:	46bd      	mov	sp, r7
 8006394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006398 <DWIN_ClearText>:

void DWIN_ClearText(Dwin_t *pDwin, uint16_t VP_address) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	807b      	strh	r3, [r7, #2]
    DWIN_SetText(pDwin,VP_address,"",strlen(""));
 80063a4:	8879      	ldrh	r1, [r7, #2]
 80063a6:	2300      	movs	r3, #0
 80063a8:	4a03      	ldr	r2, [pc, #12]	@ (80063b8 <DWIN_ClearText+0x20>)
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff ff85 	bl	80062ba <DWIN_SetText>
}
 80063b0:	bf00      	nop
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	0800b6f8 	.word	0x0800b6f8

080063bc <DWIN_SetVariable_Icon>:
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
}

void DWIN_SetVariable_Icon(Dwin_t *pDwin, uint16_t VP_address, uint16_t data ) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	807b      	strh	r3, [r7, #2]
 80063c8:	4613      	mov	r3, r2
 80063ca:	803b      	strh	r3, [r7, #0]
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80063cc:	235a      	movs	r3, #90	@ 0x5a
 80063ce:	723b      	strb	r3, [r7, #8]
 80063d0:	23a5      	movs	r3, #165	@ 0xa5
 80063d2:	727b      	strb	r3, [r7, #9]
 80063d4:	2305      	movs	r3, #5
 80063d6:	72bb      	strb	r3, [r7, #10]
 80063d8:	2382      	movs	r3, #130	@ 0x82
 80063da:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 80063dc:	887b      	ldrh	r3, [r7, #2]
 80063de:	0a1b      	lsrs	r3, r3, #8
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80063e4:	733b      	strb	r3, [r7, #12]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 80063e6:	887b      	ldrh	r3, [r7, #2]
 80063e8:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80063ea:	737b      	strb	r3, [r7, #13]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 80063ec:	883b      	ldrh	r3, [r7, #0]
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80063f4:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 80063f6:	883b      	ldrh	r3, [r7, #0]
 80063f8:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80063fa:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6818      	ldr	r0, [r3, #0]
 8006400:	f107 0108 	add.w	r1, r7, #8
 8006404:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006408:	2208      	movs	r2, #8
 800640a:	f7fd fd65 	bl	8003ed8 <HAL_UART_Transmit>
}
 800640e:	bf00      	nop
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <DWIN_SetArray_Icon>:

void DWIN_SetArray_Icon(Dwin_t *pDwin, uint16_t VP_address_begin, uint8_t *data_array, uint8_t data_length ) {
 8006416:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800641a:	b08b      	sub	sp, #44	@ 0x2c
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	607a      	str	r2, [r7, #4]
 8006422:	461a      	mov	r2, r3
 8006424:	460b      	mov	r3, r1
 8006426:	817b      	strh	r3, [r7, #10]
 8006428:	4613      	mov	r3, r2
 800642a:	727b      	strb	r3, [r7, #9]
 800642c:	466b      	mov	r3, sp
 800642e:	461e      	mov	r6, r3
    uint16_t Total_Data_Length = data_length * 2;
 8006430:	7a7b      	ldrb	r3, [r7, #9]
 8006432:	b29b      	uxth	r3, r3
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t sendBuffer[6 +Total_Data_Length];
 8006438:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800643a:	1d99      	adds	r1, r3, #6
 800643c:	1e4b      	subs	r3, r1, #1
 800643e:	623b      	str	r3, [r7, #32]
 8006440:	460a      	mov	r2, r1
 8006442:	2300      	movs	r3, #0
 8006444:	4690      	mov	r8, r2
 8006446:	4699      	mov	r9, r3
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006454:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006458:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800645c:	460a      	mov	r2, r1
 800645e:	2300      	movs	r3, #0
 8006460:	4614      	mov	r4, r2
 8006462:	461d      	mov	r5, r3
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	00eb      	lsls	r3, r5, #3
 800646e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006472:	00e2      	lsls	r2, r4, #3
 8006474:	460b      	mov	r3, r1
 8006476:	3307      	adds	r3, #7
 8006478:	08db      	lsrs	r3, r3, #3
 800647a:	00db      	lsls	r3, r3, #3
 800647c:	ebad 0d03 	sub.w	sp, sp, r3
 8006480:	466b      	mov	r3, sp
 8006482:	3300      	adds	r3, #0
 8006484:	61fb      	str	r3, [r7, #28]
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 8006486:	235a      	movs	r3, #90	@ 0x5a
 8006488:	753b      	strb	r3, [r7, #20]
 800648a:	23a5      	movs	r3, #165	@ 0xa5
 800648c:	757b      	strb	r3, [r7, #21]
 800648e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006490:	b2db      	uxtb	r3, r3
 8006492:	3303      	adds	r3, #3
 8006494:	b2db      	uxtb	r3, r3
 8006496:	75bb      	strb	r3, [r7, #22]
 8006498:	2382      	movs	r3, #130	@ 0x82
 800649a:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 800649c:	897b      	ldrh	r3, [r7, #10]
 800649e:	0a1b      	lsrs	r3, r3, #8
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 80064a4:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 80064a6:	897b      	ldrh	r3, [r7, #10]
 80064a8:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 80064aa:	767b      	strb	r3, [r7, #25]

    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f107 0314 	add.w	r3, r7, #20
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	6010      	str	r0, [r2, #0]
 80064b8:	889b      	ldrh	r3, [r3, #4]
 80064ba:	8093      	strh	r3, [r2, #4]
    /* Convert data array uint8_t to uint16_t */
    for (uint16_t i = 0; i < data_length; i++) {
 80064bc:	2300      	movs	r3, #0
 80064be:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80064c0:	e012      	b.n	80064e8 <DWIN_SetArray_Icon+0xd2>
        sendBuffer[6 + (i * 2)] = 0x00;              // High byte 
 80064c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064c4:	3303      	adds	r3, #3
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	2000      	movs	r0, #0
 80064cc:	54d0      	strb	r0, [r2, r3]
        sendBuffer[6 + (i * 2) + 1] = data_array[i]; // Low byte is data
 80064ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	441a      	add	r2, r3
 80064d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064d6:	3303      	adds	r3, #3
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	3301      	adds	r3, #1
 80064dc:	7810      	ldrb	r0, [r2, #0]
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	54d0      	strb	r0, [r2, r3]
    for (uint16_t i = 0; i < data_length; i++) {
 80064e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064e4:	3301      	adds	r3, #1
 80064e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80064e8:	7a7b      	ldrb	r3, [r7, #9]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d3e7      	bcc.n	80064c2 <DWIN_SetArray_Icon+0xac>
    }

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	b28a      	uxth	r2, r1
 80064f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80064fc:	69f9      	ldr	r1, [r7, #28]
 80064fe:	f7fd fceb 	bl	8003ed8 <HAL_UART_Transmit>
 8006502:	46b5      	mov	sp, r6
}
 8006504:	bf00      	nop
 8006506:	372c      	adds	r7, #44	@ 0x2c
 8006508:	46bd      	mov	sp, r7
 800650a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800650e <DWIN_SetCallback>:
    }
}

// Set DWIN callback function when receive data 
void DWIN_SetCallback(Dwin_t *pDwin, pListenDWIN dwin_callback)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
    pDwin->p_ListenDWIN_Callback = dwin_callback;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	609a      	str	r2, [r3, #8]
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr

08006528 <DWIN_Listen>:

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
    uint8_t message_ASCII;
    uint16_t VPaddress;
    uint16_t lastByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b5a      	cmp	r3, #90	@ 0x5a
 8006538:	d13b      	bne.n	80065b2 <DWIN_Listen+0x8a>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	3301      	adds	r3, #1
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2ba5      	cmp	r3, #165	@ 0xa5
 8006542:	d136      	bne.n	80065b2 <DWIN_Listen+0x8a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	3303      	adds	r3, #3
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b83      	cmp	r3, #131	@ 0x83
 800654c:	d131      	bne.n	80065b2 <DWIN_Listen+0x8a>
        {
            datalength = RX_Buffer[2];
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	789b      	ldrb	r3, [r3, #2]
 8006552:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	3302      	adds	r3, #2
 8006558:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	3304      	adds	r3, #4
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	b21b      	sxth	r3, r3
 8006562:	021b      	lsls	r3, r3, #8
 8006564:	b21a      	sxth	r2, r3
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	3305      	adds	r3, #5
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	b21b      	sxth	r3, r3
 800656e:	4313      	orrs	r3, r2
 8006570:	b21b      	sxth	r3, r3
 8006572:	81bb      	strh	r3, [r7, #12]
            // get return key value
            lastByte = (uint16_t)(RX_Buffer[datalength-1] << 8 | RX_Buffer[datalength]);
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	3b01      	subs	r3, #1
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	4413      	add	r3, r2
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	b21b      	sxth	r3, r3
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	b21a      	sxth	r2, r3
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	440b      	add	r3, r1
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	b21b      	sxth	r3, r3
 800658e:	4313      	orrs	r3, r2
 8006590:	b21b      	sxth	r3, r3
 8006592:	817b      	strh	r3, [r7, #10]
            // Get message ASCII
            message_ASCII = RX_Buffer[datalength];
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	4413      	add	r3, r2
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	727b      	strb	r3, [r7, #9]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <DWIN_Listen+0x8a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lastByte,message_ASCII);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	7a7a      	ldrb	r2, [r7, #9]
 80065ac:	8979      	ldrh	r1, [r7, #10]
 80065ae:	89b8      	ldrh	r0, [r7, #12]
 80065b0:	4798      	blx	r3
            }
        }
    }

    
}
 80065b2:	bf00      	nop
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <OS_task_init>:
/* Initialize object by assigning init and dispatch handler function */
void OS_task_init(
    OS_task * const pOS_task,
    OS_handler init,
    OS_handler dispatch) 
{
 80065ba:	b480      	push	{r7}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
    pOS_task->init = init;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	601a      	str	r2, [r3, #0]
    pOS_task->dispatch = dispatch;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	605a      	str	r2, [r3, #4]
}
 80065d2:	bf00      	nop
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bc80      	pop	{r7}
 80065da:	4770      	bx	lr

080065dc <OS_task_create>:
    OS_task * const pOS_task,
    OS_taskPrio task_prio,
    OS_event_t const **pBuf ,
    OS_EQCt eqLen,
    OS_event_t const * const init_e)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	607a      	str	r2, [r7, #4]
 80065e6:	461a      	mov	r2, r3
 80065e8:	460b      	mov	r3, r1
 80065ea:	72fb      	strb	r3, [r7, #11]
 80065ec:	4613      	mov	r3, r2
 80065ee:	72bb      	strb	r3, [r7, #10]
    /* check parameter */
    if ( task_prio > 0  /* the priority must be greater than 0 */
 80065f0:	7afb      	ldrb	r3, [r7, #11]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d020      	beq.n	8006638 <OS_task_create+0x5c>
        && pBuf != (OS_event_t const **)0 /* The queue exists */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01d      	beq.n	8006638 <OS_task_create+0x5c>
        && eqLen > 0) { /* the length greater than 0 */
 80065fc:	7abb      	ldrb	r3, [r7, #10]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d01a      	beq.n	8006638 <OS_task_create+0x5c>
        pOS_task->qBuf = pBuf;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]
        pOS_task->end = eqLen - 1;
 8006608:	7abb      	ldrb	r3, [r7, #10]
 800660a:	3b01      	subs	r3, #1
 800660c:	b2da      	uxtb	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	731a      	strb	r2, [r3, #12]
        pOS_task->head = 0;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	735a      	strb	r2, [r3, #13]
        pOS_task->tail = 0;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	739a      	strb	r2, [r3, #14]
        pOS_task->nUsed = 0;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	73da      	strb	r2, [r3, #15]

        /* Set task priority */
        // OS_setTask_priority(pOS_task,task_prio);
        pOS_task->task_piro = task_prio - 1;
 8006624:	7afb      	ldrb	r3, [r7, #11]
 8006626:	3b01      	subs	r3, #1
 8006628:	b2da      	uxtb	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	741a      	strb	r2, [r3, #16]


        /* Initialize task with initialization event */
        (*pOS_task->init)(pOS_task,init_e);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69b9      	ldr	r1, [r7, #24]
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	4798      	blx	r3
    } 
}
 8006638:	bf00      	nop
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <OS_task_post>:
 * @brief Post the event to event queue of task 
 * 
 * @param pOS_task 
 * @param pEvent 
 */ 
void OS_task_post(OS_task *const pOS_task, OS_event_t const * const pEvent) {
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
    OS_ring_buf_tcb *pQueue = &pri_queue[pOS_task->task_piro];
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	7c1b      	ldrb	r3, [r3, #16]
 800664e:	461a      	mov	r2, r3
 8006650:	2358      	movs	r3, #88	@ 0x58
 8006652:	fb02 f303 	mul.w	r3, r2, r3
 8006656:	4a30      	ldr	r2, [pc, #192]	@ (8006718 <OS_task_post+0xd8>)
 8006658:	4413      	add	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]

    /* Check over flow of queue */
    if (pri_queue[pOS_task->task_piro].nUsed >= OS_TASK_PER_PRI || pOS_task->nUsed > pOS_task->end ) { /* full queue */
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	7c1b      	ldrb	r3, [r3, #16]
 8006660:	4619      	mov	r1, r3
 8006662:	4a2d      	ldr	r2, [pc, #180]	@ (8006718 <OS_task_post+0xd8>)
 8006664:	2358      	movs	r3, #88	@ 0x58
 8006666:	fb01 f303 	mul.w	r3, r1, r3
 800666a:	4413      	add	r3, r2
 800666c:	3303      	adds	r3, #3
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b09      	cmp	r3, #9
 8006672:	d84d      	bhi.n	8006710 <OS_task_post+0xd0>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	7bda      	ldrb	r2, [r3, #15]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	7b1b      	ldrb	r3, [r3, #12]
 800667c:	429a      	cmp	r2, r3
 800667e:	d847      	bhi.n	8006710 <OS_task_post+0xd0>
        return;
    }

    /* insert tcb to queue */
    OS_PORT_CRIT_ENTRY();
 8006680:	b672      	cpsid	i
    pQueue->buf_tcb[pQueue->head_index].pEvent = pEvent;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	4413      	add	r3, r2
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	609a      	str	r2, [r3, #8]
    pQueue->buf_tcb[pQueue->head_index].pOS_task = pOS_task;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	4413      	add	r3, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	605a      	str	r2, [r3, #4]

    if (pQueue->head_index == 0) {
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d103      	bne.n	80066ae <OS_task_post+0x6e>
        pQueue->head_index = OS_TASK_PER_PRI - 1; /* wrap around to end of the buffer */
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2209      	movs	r2, #9
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	e005      	b.n	80066ba <OS_task_post+0x7a>
    } else {
        --pQueue->head_index;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	701a      	strb	r2, [r3, #0]
    }
    ++pQueue->nUsed; /* Increase number event used in queue */
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	78db      	ldrb	r3, [r3, #3]
 80066be:	3301      	adds	r3, #1
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	70da      	strb	r2, [r3, #3]

    pOS_task->qBuf[pOS_task->head] = pEvent; /* insert event to queue */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	7b5b      	ldrb	r3, [r3, #13]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	601a      	str	r2, [r3, #0]
    if (pOS_task->head == 0) { 
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	7b5b      	ldrb	r3, [r3, #13]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <OS_task_post+0xa8>
        pOS_task->head = pOS_task->end; /* wrap around to end of the buffer */
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7b1a      	ldrb	r2, [r3, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	735a      	strb	r2, [r3, #13]
 80066e6:	e005      	b.n	80066f4 <OS_task_post+0xb4>
    } else {
        --pOS_task->head;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	7b5b      	ldrb	r3, [r3, #13]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	735a      	strb	r2, [r3, #13]
    }
    ++pOS_task->nUsed; /* Increase number event used in queue */
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7bdb      	ldrb	r3, [r3, #15]
 80066f8:	3301      	adds	r3, #1
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	73da      	strb	r2, [r3, #15]

    /* Post event -> make the interrupt */
    // OS_PORT_TASK_PEND();
    HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006704:	b25b      	sxtb	r3, r3
 8006706:	4618      	mov	r0, r3
 8006708:	f7fa fff5 	bl	80016f6 <HAL_NVIC_SetPendingIRQ>
    OS_PORT_CRIT_EXIT();
 800670c:	b662      	cpsie	i
 800670e:	e000      	b.n	8006712 <OS_task_post+0xd2>
        return;
 8006710:	bf00      	nop
}
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20000564 	.word	0x20000564

0800671c <OS_task_post_event>:

void OS_task_post_event(OS_task *const pOS_task,uint8_t sig, uint8_t *data, uint32_t size) {
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	607a      	str	r2, [r7, #4]
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	460b      	mov	r3, r1
 800672a:	72fb      	strb	r3, [r7, #11]
    OS_event_t *e = get_dynamic_event();
 800672c:	f000 f988 	bl	8006a40 <get_dynamic_event>
 8006730:	6178      	str	r0, [r7, #20]
    set_sig_dynamic_event(e,sig);
 8006732:	7afb      	ldrb	r3, [r7, #11]
 8006734:	4619      	mov	r1, r3
 8006736:	6978      	ldr	r0, [r7, #20]
 8006738:	f000 f9d6 	bl	8006ae8 <set_sig_dynamic_event>
    set_data_dynamic_event(e,data,size);
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	6978      	ldr	r0, [r7, #20]
 8006742:	f000 f9a7 	bl	8006a94 <set_data_dynamic_event>
    OS_task_post(pOS_task,e);
 8006746:	6979      	ldr	r1, [r7, #20]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff ff79 	bl	8006640 <OS_task_post>
}
 800674e:	bf00      	nop
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <OS_TimeEvt_init>:

void OS_TimeEvt_init(
    OS_TimeEvt *pOS_Evt,
    uint16_t  sig,
    OS_task *task)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	460b      	mov	r3, r1
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	817b      	strh	r3, [r7, #10]
    pOS_Evt->Time_event.sig = sig;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	897a      	ldrh	r2, [r7, #10]
 800676a:	801a      	strh	r2, [r3, #0]
    pOS_Evt->Time_event.data = (uint8_t)0;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	605a      	str	r2, [r3, #4]
    pOS_Evt->Time_event.len = 0;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	609a      	str	r2, [r3, #8]
    pOS_Evt->task_post = task;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	611a      	str	r2, [r3, #16]
    pOS_Evt->Time_Ctr = 0;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	829a      	strh	r2, [r3, #20]
    pOS_Evt->Time_interval = 0;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	82da      	strh	r2, [r3, #22]

    /* add new node to head of liked list */
    pOS_Evt->next = timeEvt_head;
 800678a:	4b06      	ldr	r3, [pc, #24]	@ (80067a4 <OS_TimeEvt_init+0x4c>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	60da      	str	r2, [r3, #12]
    timeEvt_head = pOS_Evt;
 8006792:	4a04      	ldr	r2, [pc, #16]	@ (80067a4 <OS_TimeEvt_init+0x4c>)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6013      	str	r3, [r2, #0]
} 
 8006798:	bf00      	nop
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	2000066c 	.word	0x2000066c

080067a8 <OS_TimeEvt_Set>:
 * 
 * @param pOS_Evt Timer for generating event when TIMEOUT 
 * @param count TIMEOUT value 
 * @param interval interval value for periodic time event
 */
void OS_TimeEvt_Set(OS_TimeEvt *pOS_Evt, uint16_t count, uint16_t interval) {
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	807b      	strh	r3, [r7, #2]
 80067b4:	4613      	mov	r3, r2
 80067b6:	803b      	strh	r3, [r7, #0]
    OS_PORT_CRIT_ENTRY();
 80067b8:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = count;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	887a      	ldrh	r2, [r7, #2]
 80067be:	829a      	strh	r2, [r3, #20]
    pOS_Evt->Time_interval = interval;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	883a      	ldrh	r2, [r7, #0]
 80067c4:	82da      	strh	r2, [r3, #22]
    OS_PORT_CRIT_EXIT();
 80067c6:	b662      	cpsie	i
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr
	...

080067d4 <OS_TimeEvt_tick>:

/**
 * @brief function in systemtick handler (1ms) to execute task time OS 
 * 
 */
void OS_TimeEvt_tick(void) {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
    /* run for all the node time event */
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 80067da:	4b18      	ldr	r3, [pc, #96]	@ (800683c <OS_TimeEvt_tick+0x68>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	607b      	str	r3, [r7, #4]
 80067e0:	e023      	b.n	800682a <OS_TimeEvt_tick+0x56>
        OS_PORT_CRIT_ENTRY();
 80067e2:	b672      	cpsid	i
        if (node->Time_Ctr == 0) { /* down counter = 0  -> stop node */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	8a9b      	ldrh	r3, [r3, #20]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <OS_TimeEvt_tick+0x1c>
            OS_PORT_CRIT_EXIT();
 80067ec:	b662      	cpsie	i
 80067ee:	e019      	b.n	8006824 <OS_TimeEvt_tick+0x50>
        } else if (node->Time_Ctr == 1) { /* TIMEOUT */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	8a9b      	ldrh	r3, [r3, #20]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d10e      	bne.n	8006816 <OS_TimeEvt_tick+0x42>
            node->Time_Ctr = node->Time_interval;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	8ada      	ldrh	r2, [r3, #22]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	829a      	strh	r2, [r3, #20]
            OS_PORT_CRIT_EXIT();
 8006800:	b662      	cpsie	i
            /* Post event */
            // OS_task_post(node->task_post,&node->Time_event);
            OS_task_post_event(node->task_post,node->Time_event.sig,(uint8_t *)0,0);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6918      	ldr	r0, [r3, #16]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b2d9      	uxtb	r1, r3
 800680c:	2300      	movs	r3, #0
 800680e:	2200      	movs	r2, #0
 8006810:	f7ff ff84 	bl	800671c <OS_task_post_event>
 8006814:	e006      	b.n	8006824 <OS_TimeEvt_tick+0x50>
        } else { /* count down value */
            --node->Time_Ctr;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	8a9b      	ldrh	r3, [r3, #20]
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	829a      	strh	r2, [r3, #20]
            OS_PORT_CRIT_EXIT();
 8006822:	b662      	cpsie	i
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1d8      	bne.n	80067e2 <OS_TimeEvt_tick+0xe>
        }
    }
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	2000066c 	.word	0x2000066c

08006840 <OS_task_activate>:
/**
 * @brief The task performs an action when it receives an event from the queue. Call in interrupt handler to get event and dispatch
 * 
 * @param pOS_task Task pointer
 */
void OS_task_activate(uint8_t prio_task) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	71fb      	strb	r3, [r7, #7]
    OS_ring_buf_tcb *pQueue = &pri_queue[prio_task - 1];
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	3b01      	subs	r3, #1
 800684e:	2258      	movs	r2, #88	@ 0x58
 8006850:	fb02 f303 	mul.w	r3, r2, r3
 8006854:	4a2e      	ldr	r2, [pc, #184]	@ (8006910 <OS_task_activate+0xd0>)
 8006856:	4413      	add	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
    
    if (pQueue->nUsed == 0) { /* don't have tcb */
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	78db      	ldrb	r3, [r3, #3]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d050      	beq.n	8006904 <OS_task_activate+0xc4>
        return;
    }
    
    uint8_t index = pQueue->tail_index;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	785b      	ldrb	r3, [r3, #1]
 8006866:	74fb      	strb	r3, [r7, #19]
    if (pQueue->tail_index == 0) {
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d103      	bne.n	8006878 <OS_task_activate+0x38>
        pQueue->tail_index = OS_TASK_PER_PRI - 1; /* wrap around */
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2209      	movs	r2, #9
 8006874:	705a      	strb	r2, [r3, #1]
 8006876:	e005      	b.n	8006884 <OS_task_activate+0x44>
    } else {
        --pQueue->tail_index;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	3b01      	subs	r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	705a      	strb	r2, [r3, #1]
    }

    --pQueue->nUsed;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	78db      	ldrb	r3, [r3, #3]
 8006888:	3b01      	subs	r3, #1
 800688a:	b2da      	uxtb	r2, r3
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	70da      	strb	r2, [r3, #3]

    OS_task *pOS_task = pQueue->buf_tcb[index].pOS_task;
 8006890:	7cfb      	ldrb	r3, [r7, #19]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	4413      	add	r3, r2
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	60fb      	str	r3, [r7, #12]

    /* Check event in queue */
    if (pOS_task->nUsed == 0) { /* don't have event in queue */
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	7bdb      	ldrb	r3, [r3, #15]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d031      	beq.n	8006908 <OS_task_activate+0xc8>
        return;
    }

    OS_event_t const *e_receive = pQueue->buf_tcb[index].pEvent;
 80068a4:	7cfb      	ldrb	r3, [r7, #19]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	4413      	add	r3, r2
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	60bb      	str	r3, [r7, #8]
    if (pOS_task->tail == 0) {
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	7b9b      	ldrb	r3, [r3, #14]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d104      	bne.n	80068c2 <OS_task_activate+0x82>
        pOS_task->tail = pOS_task->end; /* wrap around */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	7b1a      	ldrb	r2, [r3, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	739a      	strb	r2, [r3, #14]
 80068c0:	e005      	b.n	80068ce <OS_task_activate+0x8e>
    } else {
        --pOS_task->tail;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	7b9b      	ldrb	r3, [r3, #14]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	739a      	strb	r2, [r3, #14]
    }
    OS_PORT_CRIT_ENTRY();
 80068ce:	b672      	cpsid	i
    if (--pOS_task->nUsed > 0) { /* check have any event in queue */
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	7bdb      	ldrb	r3, [r3, #15]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	73da      	strb	r2, [r3, #15]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	7bdb      	ldrb	r3, [r3, #15]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <OS_task_activate+0xb0>
    	 HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e8:	b25b      	sxtb	r3, r3
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fa ff03 	bl	80016f6 <HAL_NVIC_SetPendingIRQ>
    }
    OS_PORT_CRIT_EXIT();
 80068f0:	b662      	cpsie	i

    /* Dispatch the received event to this task */
    (*pOS_task->dispatch)(pOS_task,e_receive);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	4798      	blx	r3

    free_dynamic_event(e_receive);
 80068fc:	68b8      	ldr	r0, [r7, #8]
 80068fe:	f000 f86f 	bl	80069e0 <free_dynamic_event>
 8006902:	e002      	b.n	800690a <OS_task_activate+0xca>
        return;
 8006904:	bf00      	nop
 8006906:	e000      	b.n	800690a <OS_task_activate+0xca>
        return;
 8006908:	bf00      	nop
}
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	20000564 	.word	0x20000564

08006914 <OS_priority_IRQ>:
 * @brief Set task priority 
 * 
 * @param pOS_task Task pointer 
 * @param prio task priority 
 */
void OS_priority_IRQ(uint8_t IRQ, OS_taskPrio prio) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	460a      	mov	r2, r1
 800691e:	71fb      	strb	r3, [r7, #7]
 8006920:	4613      	mov	r3, r2
 8006922:	71bb      	strb	r3, [r7, #6]
    HAL_NVIC_SetPriority(IRQ,(15U - prio),0);
 8006924:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8006928:	79bb      	ldrb	r3, [r7, #6]
 800692a:	f1c3 030f 	rsb	r3, r3, #15
 800692e:	2200      	movs	r2, #0
 8006930:	4619      	mov	r1, r3
 8006932:	f7fa feaa 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQ);
 8006936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693a:	4618      	mov	r0, r3
 800693c:	f7fa fec1 	bl	80016c2 <HAL_NVIC_EnableIRQ>
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <OS_prio_setIRQ>:
 * @brief Set the number IRQ for specific priority
 * 
 * @param prio priority begin from 1 
 * @param num_irq IRQ number 
 */
void OS_prio_setIRQ(uint8_t prio, uint8_t num_irq) {
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	4603      	mov	r3, r0
 8006950:	460a      	mov	r2, r1
 8006952:	71fb      	strb	r3, [r7, #7]
 8006954:	4613      	mov	r3, r2
 8006956:	71bb      	strb	r3, [r7, #6]
    if (prio < OS_PRI_MAX) {
 8006958:	79fb      	ldrb	r3, [r7, #7]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d809      	bhi.n	8006972 <OS_prio_setIRQ+0x2a>
        pri_queue[prio - 1].nvic_irq = num_irq;
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	3b01      	subs	r3, #1
 8006962:	79ba      	ldrb	r2, [r7, #6]
 8006964:	4905      	ldr	r1, [pc, #20]	@ (800697c <OS_prio_setIRQ+0x34>)
 8006966:	2058      	movs	r0, #88	@ 0x58
 8006968:	fb00 f303 	mul.w	r3, r0, r3
 800696c:	440b      	add	r3, r1
 800696e:	3354      	adds	r3, #84	@ 0x54
 8006970:	601a      	str	r2, [r3, #0]
    }
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr
 800697c:	20000564 	.word	0x20000564

08006980 <OS_Test_setIRQ>:

void OS_Test_setIRQ(OS_task * const pAO, uint8_t num_irq) {
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	70fb      	strb	r3, [r7, #3]
    pAO->nvic_irq = num_irq;
 800698c:	78fa      	ldrb	r2, [r7, #3]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	619a      	str	r2, [r3, #24]
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr

0800699c <dynamic_event_pool_init>:
static OS_event_t dynamic_event_pool[OS_EVT_POOL_SIZE];
static uint8_t dynamic_event_pool_free[OS_EVT_POOL_SIZE]; /* Store index in free */
static uint8_t dynamic_event_free_stack; /* point to the next index freen in pool */


void dynamic_event_pool_init(void) {
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 80069a2:	b672      	cpsid	i

    dynamic_event_free_stack = 0;
 80069a4:	4b0c      	ldr	r3, [pc, #48]	@ (80069d8 <dynamic_event_pool_init+0x3c>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 80069aa:	2300      	movs	r3, #0
 80069ac:	71fb      	strb	r3, [r7, #7]
 80069ae:	e006      	b.n	80069be <dynamic_event_pool_init+0x22>
        dynamic_event_pool_free[i] = i; /* Store the index free */
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	490a      	ldr	r1, [pc, #40]	@ (80069dc <dynamic_event_pool_init+0x40>)
 80069b4:	79fa      	ldrb	r2, [r7, #7]
 80069b6:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	3301      	adds	r3, #1
 80069bc:	71fb      	strb	r3, [r7, #7]
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	2b09      	cmp	r3, #9
 80069c2:	d9f5      	bls.n	80069b0 <dynamic_event_pool_init+0x14>
    }
    dynamic_event_free_stack = OS_EVT_POOL_SIZE;
 80069c4:	4b04      	ldr	r3, [pc, #16]	@ (80069d8 <dynamic_event_pool_init+0x3c>)
 80069c6:	220a      	movs	r2, #10
 80069c8:	701a      	strb	r2, [r3, #0]
    
    OS_PORT_CRIT_EXIT();
 80069ca:	b662      	cpsie	i
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	200006f2 	.word	0x200006f2
 80069dc:	200006e8 	.word	0x200006e8

080069e0 <free_dynamic_event>:


void free_dynamic_event(OS_event_t *e) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 80069e8:	b672      	cpsid	i

    uint8_t idx = e - dynamic_event_pool; /* Get index of event */
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a10      	ldr	r2, [pc, #64]	@ (8006a30 <free_dynamic_event+0x50>)
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	109b      	asrs	r3, r3, #2
 80069f2:	4a10      	ldr	r2, [pc, #64]	@ (8006a34 <free_dynamic_event+0x54>)
 80069f4:	fb02 f303 	mul.w	r3, r2, r3
 80069f8:	73fb      	strb	r3, [r7, #15]
    free(e->data); /* free allocated memory */
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 f898 	bl	8006b34 <free>
    if (idx > 0 && idx < OS_EVT_POOL_SIZE) {
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00c      	beq.n	8006a24 <free_dynamic_event+0x44>
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	2b09      	cmp	r3, #9
 8006a0e:	d809      	bhi.n	8006a24 <free_dynamic_event+0x44>
        dynamic_event_pool_free[dynamic_event_free_stack++] = idx; 
 8006a10:	4b09      	ldr	r3, [pc, #36]	@ (8006a38 <free_dynamic_event+0x58>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	b2d1      	uxtb	r1, r2
 8006a18:	4a07      	ldr	r2, [pc, #28]	@ (8006a38 <free_dynamic_event+0x58>)
 8006a1a:	7011      	strb	r1, [r2, #0]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4a07      	ldr	r2, [pc, #28]	@ (8006a3c <free_dynamic_event+0x5c>)
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	5453      	strb	r3, [r2, r1]
    }

    OS_PORT_CRIT_EXIT();
 8006a24:	b662      	cpsie	i
}
 8006a26:	bf00      	nop
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20000670 	.word	0x20000670
 8006a34:	aaaaaaab 	.word	0xaaaaaaab
 8006a38:	200006f2 	.word	0x200006f2
 8006a3c:	200006e8 	.word	0x200006e8

08006a40 <get_dynamic_event>:

OS_event_t *get_dynamic_event(void) {
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 8006a46:	b672      	cpsid	i
    
    if (dynamic_event_free_stack == 0) return NULL; /* full */
 8006a48:	4b0f      	ldr	r3, [pc, #60]	@ (8006a88 <get_dynamic_event+0x48>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <get_dynamic_event+0x14>
 8006a50:	2300      	movs	r3, #0
 8006a52:	e013      	b.n	8006a7c <get_dynamic_event+0x3c>
    uint8_t idx = dynamic_event_pool_free[--dynamic_event_free_stack]; /* Get index in free */
 8006a54:	4b0c      	ldr	r3, [pc, #48]	@ (8006a88 <get_dynamic_event+0x48>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a88 <get_dynamic_event+0x48>)
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	4b09      	ldr	r3, [pc, #36]	@ (8006a88 <get_dynamic_event+0x48>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	4b09      	ldr	r3, [pc, #36]	@ (8006a8c <get_dynamic_event+0x4c>)
 8006a68:	5c9b      	ldrb	r3, [r3, r2]
 8006a6a:	71fb      	strb	r3, [r7, #7]
    
    OS_PORT_CRIT_EXIT();
 8006a6c:	b662      	cpsie	i
    return &dynamic_event_pool[idx];
 8006a6e:	79fa      	ldrb	r2, [r7, #7]
 8006a70:	4613      	mov	r3, r2
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4a05      	ldr	r2, [pc, #20]	@ (8006a90 <get_dynamic_event+0x50>)
 8006a7a:	4413      	add	r3, r2
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	200006f2 	.word	0x200006f2
 8006a8c:	200006e8 	.word	0x200006e8
 8006a90:	20000670 	.word	0x20000670

08006a94 <set_data_dynamic_event>:

void set_data_dynamic_event(OS_event_t *e, uint8_t *data, uint32_t len) {
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
    if (len != 0) {
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d015      	beq.n	8006ad2 <set_data_dynamic_event+0x3e>
        e->len = len;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	609a      	str	r2, [r3, #8]
        e->data = malloc(len);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f839 	bl	8006b24 <malloc>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	605a      	str	r2, [r3, #4]
        if (e->data == NULL) return;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00e      	beq.n	8006ae0 <set_data_dynamic_event+0x4c>
        memcpy(e->data,data,len);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f002 f89f 	bl	8008c0e <memcpy>
 8006ad0:	e007      	b.n	8006ae2 <set_data_dynamic_event+0x4e>
    } else {
        e->len = len;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	609a      	str	r2, [r3, #8]
        e->data = (uint8_t *)0;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	605a      	str	r2, [r3, #4]
 8006ade:	e000      	b.n	8006ae2 <set_data_dynamic_event+0x4e>
        if (e->data == NULL) return;
 8006ae0:	bf00      	nop
    }
}
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <set_sig_dynamic_event>:

void set_sig_dynamic_event(OS_event_t *e, uint8_t sig) {
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
    e->sig = sig;
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	801a      	strh	r2, [r3, #0]
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr

08006b06 <get_data_dynamic_event>:

uint8_t *get_data_dynamic_event(OS_event_t *e) {
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
    return (e->data);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr

08006b1c <atof>:
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	f000 bec1 	b.w	80078a4 <strtod>
	...

08006b24 <malloc>:
 8006b24:	4b02      	ldr	r3, [pc, #8]	@ (8006b30 <malloc+0xc>)
 8006b26:	4601      	mov	r1, r0
 8006b28:	6818      	ldr	r0, [r3, #0]
 8006b2a:	f000 b82d 	b.w	8006b88 <_malloc_r>
 8006b2e:	bf00      	nop
 8006b30:	200001bc 	.word	0x200001bc

08006b34 <free>:
 8006b34:	4b02      	ldr	r3, [pc, #8]	@ (8006b40 <free+0xc>)
 8006b36:	4601      	mov	r1, r0
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	f002 bedd 	b.w	80098f8 <_free_r>
 8006b3e:	bf00      	nop
 8006b40:	200001bc 	.word	0x200001bc

08006b44 <sbrk_aligned>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	4e0f      	ldr	r6, [pc, #60]	@ (8006b84 <sbrk_aligned+0x40>)
 8006b48:	460c      	mov	r4, r1
 8006b4a:	6831      	ldr	r1, [r6, #0]
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	b911      	cbnz	r1, 8006b56 <sbrk_aligned+0x12>
 8006b50:	f001 fff8 	bl	8008b44 <_sbrk_r>
 8006b54:	6030      	str	r0, [r6, #0]
 8006b56:	4621      	mov	r1, r4
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f001 fff3 	bl	8008b44 <_sbrk_r>
 8006b5e:	1c43      	adds	r3, r0, #1
 8006b60:	d103      	bne.n	8006b6a <sbrk_aligned+0x26>
 8006b62:	f04f 34ff 	mov.w	r4, #4294967295
 8006b66:	4620      	mov	r0, r4
 8006b68:	bd70      	pop	{r4, r5, r6, pc}
 8006b6a:	1cc4      	adds	r4, r0, #3
 8006b6c:	f024 0403 	bic.w	r4, r4, #3
 8006b70:	42a0      	cmp	r0, r4
 8006b72:	d0f8      	beq.n	8006b66 <sbrk_aligned+0x22>
 8006b74:	1a21      	subs	r1, r4, r0
 8006b76:	4628      	mov	r0, r5
 8006b78:	f001 ffe4 	bl	8008b44 <_sbrk_r>
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d1f2      	bne.n	8006b66 <sbrk_aligned+0x22>
 8006b80:	e7ef      	b.n	8006b62 <sbrk_aligned+0x1e>
 8006b82:	bf00      	nop
 8006b84:	200006f4 	.word	0x200006f4

08006b88 <_malloc_r>:
 8006b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b8c:	1ccd      	adds	r5, r1, #3
 8006b8e:	f025 0503 	bic.w	r5, r5, #3
 8006b92:	3508      	adds	r5, #8
 8006b94:	2d0c      	cmp	r5, #12
 8006b96:	bf38      	it	cc
 8006b98:	250c      	movcc	r5, #12
 8006b9a:	2d00      	cmp	r5, #0
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	db01      	blt.n	8006ba4 <_malloc_r+0x1c>
 8006ba0:	42a9      	cmp	r1, r5
 8006ba2:	d904      	bls.n	8006bae <_malloc_r+0x26>
 8006ba4:	230c      	movs	r3, #12
 8006ba6:	6033      	str	r3, [r6, #0]
 8006ba8:	2000      	movs	r0, #0
 8006baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c84 <_malloc_r+0xfc>
 8006bb2:	f000 f869 	bl	8006c88 <__malloc_lock>
 8006bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8006bba:	461c      	mov	r4, r3
 8006bbc:	bb44      	cbnz	r4, 8006c10 <_malloc_r+0x88>
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f7ff ffbf 	bl	8006b44 <sbrk_aligned>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	4604      	mov	r4, r0
 8006bca:	d158      	bne.n	8006c7e <_malloc_r+0xf6>
 8006bcc:	f8d8 4000 	ldr.w	r4, [r8]
 8006bd0:	4627      	mov	r7, r4
 8006bd2:	2f00      	cmp	r7, #0
 8006bd4:	d143      	bne.n	8006c5e <_malloc_r+0xd6>
 8006bd6:	2c00      	cmp	r4, #0
 8006bd8:	d04b      	beq.n	8006c72 <_malloc_r+0xea>
 8006bda:	6823      	ldr	r3, [r4, #0]
 8006bdc:	4639      	mov	r1, r7
 8006bde:	4630      	mov	r0, r6
 8006be0:	eb04 0903 	add.w	r9, r4, r3
 8006be4:	f001 ffae 	bl	8008b44 <_sbrk_r>
 8006be8:	4581      	cmp	r9, r0
 8006bea:	d142      	bne.n	8006c72 <_malloc_r+0xea>
 8006bec:	6821      	ldr	r1, [r4, #0]
 8006bee:	4630      	mov	r0, r6
 8006bf0:	1a6d      	subs	r5, r5, r1
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	f7ff ffa6 	bl	8006b44 <sbrk_aligned>
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d03a      	beq.n	8006c72 <_malloc_r+0xea>
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	442b      	add	r3, r5
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	f8d8 3000 	ldr.w	r3, [r8]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	bb62      	cbnz	r2, 8006c64 <_malloc_r+0xdc>
 8006c0a:	f8c8 7000 	str.w	r7, [r8]
 8006c0e:	e00f      	b.n	8006c30 <_malloc_r+0xa8>
 8006c10:	6822      	ldr	r2, [r4, #0]
 8006c12:	1b52      	subs	r2, r2, r5
 8006c14:	d420      	bmi.n	8006c58 <_malloc_r+0xd0>
 8006c16:	2a0b      	cmp	r2, #11
 8006c18:	d917      	bls.n	8006c4a <_malloc_r+0xc2>
 8006c1a:	1961      	adds	r1, r4, r5
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	6025      	str	r5, [r4, #0]
 8006c20:	bf18      	it	ne
 8006c22:	6059      	strne	r1, [r3, #4]
 8006c24:	6863      	ldr	r3, [r4, #4]
 8006c26:	bf08      	it	eq
 8006c28:	f8c8 1000 	streq.w	r1, [r8]
 8006c2c:	5162      	str	r2, [r4, r5]
 8006c2e:	604b      	str	r3, [r1, #4]
 8006c30:	4630      	mov	r0, r6
 8006c32:	f000 f82f 	bl	8006c94 <__malloc_unlock>
 8006c36:	f104 000b 	add.w	r0, r4, #11
 8006c3a:	1d23      	adds	r3, r4, #4
 8006c3c:	f020 0007 	bic.w	r0, r0, #7
 8006c40:	1ac2      	subs	r2, r0, r3
 8006c42:	bf1c      	itt	ne
 8006c44:	1a1b      	subne	r3, r3, r0
 8006c46:	50a3      	strne	r3, [r4, r2]
 8006c48:	e7af      	b.n	8006baa <_malloc_r+0x22>
 8006c4a:	6862      	ldr	r2, [r4, #4]
 8006c4c:	42a3      	cmp	r3, r4
 8006c4e:	bf0c      	ite	eq
 8006c50:	f8c8 2000 	streq.w	r2, [r8]
 8006c54:	605a      	strne	r2, [r3, #4]
 8006c56:	e7eb      	b.n	8006c30 <_malloc_r+0xa8>
 8006c58:	4623      	mov	r3, r4
 8006c5a:	6864      	ldr	r4, [r4, #4]
 8006c5c:	e7ae      	b.n	8006bbc <_malloc_r+0x34>
 8006c5e:	463c      	mov	r4, r7
 8006c60:	687f      	ldr	r7, [r7, #4]
 8006c62:	e7b6      	b.n	8006bd2 <_malloc_r+0x4a>
 8006c64:	461a      	mov	r2, r3
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	42a3      	cmp	r3, r4
 8006c6a:	d1fb      	bne.n	8006c64 <_malloc_r+0xdc>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	6053      	str	r3, [r2, #4]
 8006c70:	e7de      	b.n	8006c30 <_malloc_r+0xa8>
 8006c72:	230c      	movs	r3, #12
 8006c74:	4630      	mov	r0, r6
 8006c76:	6033      	str	r3, [r6, #0]
 8006c78:	f000 f80c 	bl	8006c94 <__malloc_unlock>
 8006c7c:	e794      	b.n	8006ba8 <_malloc_r+0x20>
 8006c7e:	6005      	str	r5, [r0, #0]
 8006c80:	e7d6      	b.n	8006c30 <_malloc_r+0xa8>
 8006c82:	bf00      	nop
 8006c84:	200006f8 	.word	0x200006f8

08006c88 <__malloc_lock>:
 8006c88:	4801      	ldr	r0, [pc, #4]	@ (8006c90 <__malloc_lock+0x8>)
 8006c8a:	f001 bfa8 	b.w	8008bde <__retarget_lock_acquire_recursive>
 8006c8e:	bf00      	nop
 8006c90:	2000083c 	.word	0x2000083c

08006c94 <__malloc_unlock>:
 8006c94:	4801      	ldr	r0, [pc, #4]	@ (8006c9c <__malloc_unlock+0x8>)
 8006c96:	f001 bfa3 	b.w	8008be0 <__retarget_lock_release_recursive>
 8006c9a:	bf00      	nop
 8006c9c:	2000083c 	.word	0x2000083c

08006ca0 <sulp>:
 8006ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca4:	460f      	mov	r7, r1
 8006ca6:	4690      	mov	r8, r2
 8006ca8:	f003 fd26 	bl	800a6f8 <__ulp>
 8006cac:	4604      	mov	r4, r0
 8006cae:	460d      	mov	r5, r1
 8006cb0:	f1b8 0f00 	cmp.w	r8, #0
 8006cb4:	d011      	beq.n	8006cda <sulp+0x3a>
 8006cb6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006cba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dd0b      	ble.n	8006cda <sulp+0x3a>
 8006cc2:	2400      	movs	r4, #0
 8006cc4:	051b      	lsls	r3, r3, #20
 8006cc6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006cca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006cce:	4622      	mov	r2, r4
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	f7f9 fc0b 	bl	80004ec <__aeabi_dmul>
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	460d      	mov	r5, r1
 8006cda:	4620      	mov	r0, r4
 8006cdc:	4629      	mov	r1, r5
 8006cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ce2:	0000      	movs	r0, r0
 8006ce4:	0000      	movs	r0, r0
	...

08006ce8 <_strtod_l>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	b09f      	sub	sp, #124	@ 0x7c
 8006cee:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	921a      	str	r2, [sp, #104]	@ 0x68
 8006cf6:	f04f 0a00 	mov.w	sl, #0
 8006cfa:	f04f 0b00 	mov.w	fp, #0
 8006cfe:	460a      	mov	r2, r1
 8006d00:	9005      	str	r0, [sp, #20]
 8006d02:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d04:	7811      	ldrb	r1, [r2, #0]
 8006d06:	292b      	cmp	r1, #43	@ 0x2b
 8006d08:	d048      	beq.n	8006d9c <_strtod_l+0xb4>
 8006d0a:	d836      	bhi.n	8006d7a <_strtod_l+0x92>
 8006d0c:	290d      	cmp	r1, #13
 8006d0e:	d830      	bhi.n	8006d72 <_strtod_l+0x8a>
 8006d10:	2908      	cmp	r1, #8
 8006d12:	d830      	bhi.n	8006d76 <_strtod_l+0x8e>
 8006d14:	2900      	cmp	r1, #0
 8006d16:	d039      	beq.n	8006d8c <_strtod_l+0xa4>
 8006d18:	2200      	movs	r2, #0
 8006d1a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006d1e:	782a      	ldrb	r2, [r5, #0]
 8006d20:	2a30      	cmp	r2, #48	@ 0x30
 8006d22:	f040 80b0 	bne.w	8006e86 <_strtod_l+0x19e>
 8006d26:	786a      	ldrb	r2, [r5, #1]
 8006d28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d2c:	2a58      	cmp	r2, #88	@ 0x58
 8006d2e:	d16c      	bne.n	8006e0a <_strtod_l+0x122>
 8006d30:	9302      	str	r3, [sp, #8]
 8006d32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d34:	4a8f      	ldr	r2, [pc, #572]	@ (8006f74 <_strtod_l+0x28c>)
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	9805      	ldr	r0, [sp, #20]
 8006d3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d40:	a919      	add	r1, sp, #100	@ 0x64
 8006d42:	f002 fe89 	bl	8009a58 <__gethex>
 8006d46:	f010 060f 	ands.w	r6, r0, #15
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	d005      	beq.n	8006d5a <_strtod_l+0x72>
 8006d4e:	2e06      	cmp	r6, #6
 8006d50:	d126      	bne.n	8006da0 <_strtod_l+0xb8>
 8006d52:	2300      	movs	r3, #0
 8006d54:	3501      	adds	r5, #1
 8006d56:	9519      	str	r5, [sp, #100]	@ 0x64
 8006d58:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f040 8582 	bne.w	8007866 <_strtod_l+0xb7e>
 8006d62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d64:	b1bb      	cbz	r3, 8006d96 <_strtod_l+0xae>
 8006d66:	4650      	mov	r0, sl
 8006d68:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006d6c:	b01f      	add	sp, #124	@ 0x7c
 8006d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d72:	2920      	cmp	r1, #32
 8006d74:	d1d0      	bne.n	8006d18 <_strtod_l+0x30>
 8006d76:	3201      	adds	r2, #1
 8006d78:	e7c3      	b.n	8006d02 <_strtod_l+0x1a>
 8006d7a:	292d      	cmp	r1, #45	@ 0x2d
 8006d7c:	d1cc      	bne.n	8006d18 <_strtod_l+0x30>
 8006d7e:	2101      	movs	r1, #1
 8006d80:	910e      	str	r1, [sp, #56]	@ 0x38
 8006d82:	1c51      	adds	r1, r2, #1
 8006d84:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d86:	7852      	ldrb	r2, [r2, #1]
 8006d88:	2a00      	cmp	r2, #0
 8006d8a:	d1c7      	bne.n	8006d1c <_strtod_l+0x34>
 8006d8c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d8e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f040 8566 	bne.w	8007862 <_strtod_l+0xb7a>
 8006d96:	4650      	mov	r0, sl
 8006d98:	4659      	mov	r1, fp
 8006d9a:	e7e7      	b.n	8006d6c <_strtod_l+0x84>
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	e7ef      	b.n	8006d80 <_strtod_l+0x98>
 8006da0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006da2:	b13a      	cbz	r2, 8006db4 <_strtod_l+0xcc>
 8006da4:	2135      	movs	r1, #53	@ 0x35
 8006da6:	a81c      	add	r0, sp, #112	@ 0x70
 8006da8:	f003 fd96 	bl	800a8d8 <__copybits>
 8006dac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dae:	9805      	ldr	r0, [sp, #20]
 8006db0:	f003 f976 	bl	800a0a0 <_Bfree>
 8006db4:	3e01      	subs	r6, #1
 8006db6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006db8:	2e04      	cmp	r6, #4
 8006dba:	d806      	bhi.n	8006dca <_strtod_l+0xe2>
 8006dbc:	e8df f006 	tbb	[pc, r6]
 8006dc0:	201d0314 	.word	0x201d0314
 8006dc4:	14          	.byte	0x14
 8006dc5:	00          	.byte	0x00
 8006dc6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006dca:	05e1      	lsls	r1, r4, #23
 8006dcc:	bf48      	it	mi
 8006dce:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006dd2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006dd6:	0d1b      	lsrs	r3, r3, #20
 8006dd8:	051b      	lsls	r3, r3, #20
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1bd      	bne.n	8006d5a <_strtod_l+0x72>
 8006dde:	f001 fed3 	bl	8008b88 <__errno>
 8006de2:	2322      	movs	r3, #34	@ 0x22
 8006de4:	6003      	str	r3, [r0, #0]
 8006de6:	e7b8      	b.n	8006d5a <_strtod_l+0x72>
 8006de8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006dec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006df0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006df4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006df8:	e7e7      	b.n	8006dca <_strtod_l+0xe2>
 8006dfa:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006f78 <_strtod_l+0x290>
 8006dfe:	e7e4      	b.n	8006dca <_strtod_l+0xe2>
 8006e00:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006e04:	f04f 3aff 	mov.w	sl, #4294967295
 8006e08:	e7df      	b.n	8006dca <_strtod_l+0xe2>
 8006e0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	2b30      	cmp	r3, #48	@ 0x30
 8006e14:	d0f9      	beq.n	8006e0a <_strtod_l+0x122>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d09f      	beq.n	8006d5a <_strtod_l+0x72>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	2700      	movs	r7, #0
 8006e1e:	220a      	movs	r2, #10
 8006e20:	46b9      	mov	r9, r7
 8006e22:	9308      	str	r3, [sp, #32]
 8006e24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e26:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006e28:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e2a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006e2c:	7805      	ldrb	r5, [r0, #0]
 8006e2e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006e32:	b2d9      	uxtb	r1, r3
 8006e34:	2909      	cmp	r1, #9
 8006e36:	d928      	bls.n	8006e8a <_strtod_l+0x1a2>
 8006e38:	2201      	movs	r2, #1
 8006e3a:	4950      	ldr	r1, [pc, #320]	@ (8006f7c <_strtod_l+0x294>)
 8006e3c:	f001 fe37 	bl	8008aae <strncmp>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d032      	beq.n	8006eaa <_strtod_l+0x1c2>
 8006e44:	2000      	movs	r0, #0
 8006e46:	462a      	mov	r2, r5
 8006e48:	4603      	mov	r3, r0
 8006e4a:	464d      	mov	r5, r9
 8006e4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e4e:	2a65      	cmp	r2, #101	@ 0x65
 8006e50:	d001      	beq.n	8006e56 <_strtod_l+0x16e>
 8006e52:	2a45      	cmp	r2, #69	@ 0x45
 8006e54:	d114      	bne.n	8006e80 <_strtod_l+0x198>
 8006e56:	b91d      	cbnz	r5, 8006e60 <_strtod_l+0x178>
 8006e58:	9a08      	ldr	r2, [sp, #32]
 8006e5a:	4302      	orrs	r2, r0
 8006e5c:	d096      	beq.n	8006d8c <_strtod_l+0xa4>
 8006e5e:	2500      	movs	r5, #0
 8006e60:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006e62:	1c62      	adds	r2, r4, #1
 8006e64:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e66:	7862      	ldrb	r2, [r4, #1]
 8006e68:	2a2b      	cmp	r2, #43	@ 0x2b
 8006e6a:	d07a      	beq.n	8006f62 <_strtod_l+0x27a>
 8006e6c:	2a2d      	cmp	r2, #45	@ 0x2d
 8006e6e:	d07e      	beq.n	8006f6e <_strtod_l+0x286>
 8006e70:	f04f 0c00 	mov.w	ip, #0
 8006e74:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006e78:	2909      	cmp	r1, #9
 8006e7a:	f240 8085 	bls.w	8006f88 <_strtod_l+0x2a0>
 8006e7e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006e80:	f04f 0800 	mov.w	r8, #0
 8006e84:	e0a5      	b.n	8006fd2 <_strtod_l+0x2ea>
 8006e86:	2300      	movs	r3, #0
 8006e88:	e7c8      	b.n	8006e1c <_strtod_l+0x134>
 8006e8a:	f1b9 0f08 	cmp.w	r9, #8
 8006e8e:	bfd8      	it	le
 8006e90:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006e92:	f100 0001 	add.w	r0, r0, #1
 8006e96:	bfd6      	itet	le
 8006e98:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e9c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006ea0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006ea2:	f109 0901 	add.w	r9, r9, #1
 8006ea6:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ea8:	e7bf      	b.n	8006e2a <_strtod_l+0x142>
 8006eaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	9219      	str	r2, [sp, #100]	@ 0x64
 8006eb0:	785a      	ldrb	r2, [r3, #1]
 8006eb2:	f1b9 0f00 	cmp.w	r9, #0
 8006eb6:	d03b      	beq.n	8006f30 <_strtod_l+0x248>
 8006eb8:	464d      	mov	r5, r9
 8006eba:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ebc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006ec0:	2b09      	cmp	r3, #9
 8006ec2:	d912      	bls.n	8006eea <_strtod_l+0x202>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e7c2      	b.n	8006e4e <_strtod_l+0x166>
 8006ec8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eca:	3001      	adds	r0, #1
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ed0:	785a      	ldrb	r2, [r3, #1]
 8006ed2:	2a30      	cmp	r2, #48	@ 0x30
 8006ed4:	d0f8      	beq.n	8006ec8 <_strtod_l+0x1e0>
 8006ed6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006eda:	2b08      	cmp	r3, #8
 8006edc:	f200 84c8 	bhi.w	8007870 <_strtod_l+0xb88>
 8006ee0:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ee8:	930c      	str	r3, [sp, #48]	@ 0x30
 8006eea:	3a30      	subs	r2, #48	@ 0x30
 8006eec:	f100 0301 	add.w	r3, r0, #1
 8006ef0:	d018      	beq.n	8006f24 <_strtod_l+0x23c>
 8006ef2:	462e      	mov	r6, r5
 8006ef4:	f04f 0e0a 	mov.w	lr, #10
 8006ef8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006efa:	4419      	add	r1, r3
 8006efc:	910a      	str	r1, [sp, #40]	@ 0x28
 8006efe:	1c71      	adds	r1, r6, #1
 8006f00:	eba1 0c05 	sub.w	ip, r1, r5
 8006f04:	4563      	cmp	r3, ip
 8006f06:	dc15      	bgt.n	8006f34 <_strtod_l+0x24c>
 8006f08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006f0c:	182b      	adds	r3, r5, r0
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	f105 0501 	add.w	r5, r5, #1
 8006f14:	4405      	add	r5, r0
 8006f16:	dc1a      	bgt.n	8006f4e <_strtod_l+0x266>
 8006f18:	230a      	movs	r3, #10
 8006f1a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f1c:	fb03 2301 	mla	r3, r3, r1, r2
 8006f20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f22:	2300      	movs	r3, #0
 8006f24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f26:	4618      	mov	r0, r3
 8006f28:	1c51      	adds	r1, r2, #1
 8006f2a:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f2c:	7852      	ldrb	r2, [r2, #1]
 8006f2e:	e7c5      	b.n	8006ebc <_strtod_l+0x1d4>
 8006f30:	4648      	mov	r0, r9
 8006f32:	e7ce      	b.n	8006ed2 <_strtod_l+0x1ea>
 8006f34:	2e08      	cmp	r6, #8
 8006f36:	dc05      	bgt.n	8006f44 <_strtod_l+0x25c>
 8006f38:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006f3a:	fb0e f606 	mul.w	r6, lr, r6
 8006f3e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006f40:	460e      	mov	r6, r1
 8006f42:	e7dc      	b.n	8006efe <_strtod_l+0x216>
 8006f44:	2910      	cmp	r1, #16
 8006f46:	bfd8      	it	le
 8006f48:	fb0e f707 	mulle.w	r7, lr, r7
 8006f4c:	e7f8      	b.n	8006f40 <_strtod_l+0x258>
 8006f4e:	2b0f      	cmp	r3, #15
 8006f50:	bfdc      	itt	le
 8006f52:	230a      	movle	r3, #10
 8006f54:	fb03 2707 	mlale	r7, r3, r7, r2
 8006f58:	e7e3      	b.n	8006f22 <_strtod_l+0x23a>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e77a      	b.n	8006e58 <_strtod_l+0x170>
 8006f62:	f04f 0c00 	mov.w	ip, #0
 8006f66:	1ca2      	adds	r2, r4, #2
 8006f68:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f6a:	78a2      	ldrb	r2, [r4, #2]
 8006f6c:	e782      	b.n	8006e74 <_strtod_l+0x18c>
 8006f6e:	f04f 0c01 	mov.w	ip, #1
 8006f72:	e7f8      	b.n	8006f66 <_strtod_l+0x27e>
 8006f74:	0800b91c 	.word	0x0800b91c
 8006f78:	7ff00000 	.word	0x7ff00000
 8006f7c:	0800b730 	.word	0x0800b730
 8006f80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f82:	1c51      	adds	r1, r2, #1
 8006f84:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f86:	7852      	ldrb	r2, [r2, #1]
 8006f88:	2a30      	cmp	r2, #48	@ 0x30
 8006f8a:	d0f9      	beq.n	8006f80 <_strtod_l+0x298>
 8006f8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006f90:	2908      	cmp	r1, #8
 8006f92:	f63f af75 	bhi.w	8006e80 <_strtod_l+0x198>
 8006f96:	f04f 080a 	mov.w	r8, #10
 8006f9a:	3a30      	subs	r2, #48	@ 0x30
 8006f9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f9e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fa0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006fa2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fa4:	1c56      	adds	r6, r2, #1
 8006fa6:	9619      	str	r6, [sp, #100]	@ 0x64
 8006fa8:	7852      	ldrb	r2, [r2, #1]
 8006faa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006fae:	f1be 0f09 	cmp.w	lr, #9
 8006fb2:	d939      	bls.n	8007028 <_strtod_l+0x340>
 8006fb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006fb6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006fba:	1a76      	subs	r6, r6, r1
 8006fbc:	2e08      	cmp	r6, #8
 8006fbe:	dc03      	bgt.n	8006fc8 <_strtod_l+0x2e0>
 8006fc0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fc2:	4588      	cmp	r8, r1
 8006fc4:	bfa8      	it	ge
 8006fc6:	4688      	movge	r8, r1
 8006fc8:	f1bc 0f00 	cmp.w	ip, #0
 8006fcc:	d001      	beq.n	8006fd2 <_strtod_l+0x2ea>
 8006fce:	f1c8 0800 	rsb	r8, r8, #0
 8006fd2:	2d00      	cmp	r5, #0
 8006fd4:	d14e      	bne.n	8007074 <_strtod_l+0x38c>
 8006fd6:	9908      	ldr	r1, [sp, #32]
 8006fd8:	4308      	orrs	r0, r1
 8006fda:	f47f aebe 	bne.w	8006d5a <_strtod_l+0x72>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f47f aed4 	bne.w	8006d8c <_strtod_l+0xa4>
 8006fe4:	2a69      	cmp	r2, #105	@ 0x69
 8006fe6:	d028      	beq.n	800703a <_strtod_l+0x352>
 8006fe8:	dc25      	bgt.n	8007036 <_strtod_l+0x34e>
 8006fea:	2a49      	cmp	r2, #73	@ 0x49
 8006fec:	d025      	beq.n	800703a <_strtod_l+0x352>
 8006fee:	2a4e      	cmp	r2, #78	@ 0x4e
 8006ff0:	f47f aecc 	bne.w	8006d8c <_strtod_l+0xa4>
 8006ff4:	4999      	ldr	r1, [pc, #612]	@ (800725c <_strtod_l+0x574>)
 8006ff6:	a819      	add	r0, sp, #100	@ 0x64
 8006ff8:	f002 ff50 	bl	8009e9c <__match>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	f43f aec5 	beq.w	8006d8c <_strtod_l+0xa4>
 8007002:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b28      	cmp	r3, #40	@ 0x28
 8007008:	d12e      	bne.n	8007068 <_strtod_l+0x380>
 800700a:	4995      	ldr	r1, [pc, #596]	@ (8007260 <_strtod_l+0x578>)
 800700c:	aa1c      	add	r2, sp, #112	@ 0x70
 800700e:	a819      	add	r0, sp, #100	@ 0x64
 8007010:	f002 ff58 	bl	8009ec4 <__hexnan>
 8007014:	2805      	cmp	r0, #5
 8007016:	d127      	bne.n	8007068 <_strtod_l+0x380>
 8007018:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800701a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800701e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007022:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007026:	e698      	b.n	8006d5a <_strtod_l+0x72>
 8007028:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800702a:	fb08 2101 	mla	r1, r8, r1, r2
 800702e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007032:	9209      	str	r2, [sp, #36]	@ 0x24
 8007034:	e7b5      	b.n	8006fa2 <_strtod_l+0x2ba>
 8007036:	2a6e      	cmp	r2, #110	@ 0x6e
 8007038:	e7da      	b.n	8006ff0 <_strtod_l+0x308>
 800703a:	498a      	ldr	r1, [pc, #552]	@ (8007264 <_strtod_l+0x57c>)
 800703c:	a819      	add	r0, sp, #100	@ 0x64
 800703e:	f002 ff2d 	bl	8009e9c <__match>
 8007042:	2800      	cmp	r0, #0
 8007044:	f43f aea2 	beq.w	8006d8c <_strtod_l+0xa4>
 8007048:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800704a:	4987      	ldr	r1, [pc, #540]	@ (8007268 <_strtod_l+0x580>)
 800704c:	3b01      	subs	r3, #1
 800704e:	a819      	add	r0, sp, #100	@ 0x64
 8007050:	9319      	str	r3, [sp, #100]	@ 0x64
 8007052:	f002 ff23 	bl	8009e9c <__match>
 8007056:	b910      	cbnz	r0, 800705e <_strtod_l+0x376>
 8007058:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800705a:	3301      	adds	r3, #1
 800705c:	9319      	str	r3, [sp, #100]	@ 0x64
 800705e:	f04f 0a00 	mov.w	sl, #0
 8007062:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800726c <_strtod_l+0x584>
 8007066:	e678      	b.n	8006d5a <_strtod_l+0x72>
 8007068:	4881      	ldr	r0, [pc, #516]	@ (8007270 <_strtod_l+0x588>)
 800706a:	f001 fddf 	bl	8008c2c <nan>
 800706e:	4682      	mov	sl, r0
 8007070:	468b      	mov	fp, r1
 8007072:	e672      	b.n	8006d5a <_strtod_l+0x72>
 8007074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007076:	f1b9 0f00 	cmp.w	r9, #0
 800707a:	bf08      	it	eq
 800707c:	46a9      	moveq	r9, r5
 800707e:	eba8 0303 	sub.w	r3, r8, r3
 8007082:	2d10      	cmp	r5, #16
 8007084:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007086:	462c      	mov	r4, r5
 8007088:	9309      	str	r3, [sp, #36]	@ 0x24
 800708a:	bfa8      	it	ge
 800708c:	2410      	movge	r4, #16
 800708e:	f7f9 f9b3 	bl	80003f8 <__aeabi_ui2d>
 8007092:	2d09      	cmp	r5, #9
 8007094:	4682      	mov	sl, r0
 8007096:	468b      	mov	fp, r1
 8007098:	dc11      	bgt.n	80070be <_strtod_l+0x3d6>
 800709a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800709c:	2b00      	cmp	r3, #0
 800709e:	f43f ae5c 	beq.w	8006d5a <_strtod_l+0x72>
 80070a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a4:	dd76      	ble.n	8007194 <_strtod_l+0x4ac>
 80070a6:	2b16      	cmp	r3, #22
 80070a8:	dc5d      	bgt.n	8007166 <_strtod_l+0x47e>
 80070aa:	4972      	ldr	r1, [pc, #456]	@ (8007274 <_strtod_l+0x58c>)
 80070ac:	4652      	mov	r2, sl
 80070ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070b2:	465b      	mov	r3, fp
 80070b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070b8:	f7f9 fa18 	bl	80004ec <__aeabi_dmul>
 80070bc:	e7d7      	b.n	800706e <_strtod_l+0x386>
 80070be:	4b6d      	ldr	r3, [pc, #436]	@ (8007274 <_strtod_l+0x58c>)
 80070c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80070c8:	f7f9 fa10 	bl	80004ec <__aeabi_dmul>
 80070cc:	4682      	mov	sl, r0
 80070ce:	4638      	mov	r0, r7
 80070d0:	468b      	mov	fp, r1
 80070d2:	f7f9 f991 	bl	80003f8 <__aeabi_ui2d>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4650      	mov	r0, sl
 80070dc:	4659      	mov	r1, fp
 80070de:	f7f9 f84f 	bl	8000180 <__adddf3>
 80070e2:	2d0f      	cmp	r5, #15
 80070e4:	4682      	mov	sl, r0
 80070e6:	468b      	mov	fp, r1
 80070e8:	ddd7      	ble.n	800709a <_strtod_l+0x3b2>
 80070ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ec:	1b2c      	subs	r4, r5, r4
 80070ee:	441c      	add	r4, r3
 80070f0:	2c00      	cmp	r4, #0
 80070f2:	f340 8093 	ble.w	800721c <_strtod_l+0x534>
 80070f6:	f014 030f 	ands.w	r3, r4, #15
 80070fa:	d00a      	beq.n	8007112 <_strtod_l+0x42a>
 80070fc:	495d      	ldr	r1, [pc, #372]	@ (8007274 <_strtod_l+0x58c>)
 80070fe:	4652      	mov	r2, sl
 8007100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007108:	465b      	mov	r3, fp
 800710a:	f7f9 f9ef 	bl	80004ec <__aeabi_dmul>
 800710e:	4682      	mov	sl, r0
 8007110:	468b      	mov	fp, r1
 8007112:	f034 040f 	bics.w	r4, r4, #15
 8007116:	d073      	beq.n	8007200 <_strtod_l+0x518>
 8007118:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800711c:	dd49      	ble.n	80071b2 <_strtod_l+0x4ca>
 800711e:	2400      	movs	r4, #0
 8007120:	46a0      	mov	r8, r4
 8007122:	46a1      	mov	r9, r4
 8007124:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007126:	2322      	movs	r3, #34	@ 0x22
 8007128:	f04f 0a00 	mov.w	sl, #0
 800712c:	9a05      	ldr	r2, [sp, #20]
 800712e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800726c <_strtod_l+0x584>
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007136:	2b00      	cmp	r3, #0
 8007138:	f43f ae0f 	beq.w	8006d5a <_strtod_l+0x72>
 800713c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800713e:	9805      	ldr	r0, [sp, #20]
 8007140:	f002 ffae 	bl	800a0a0 <_Bfree>
 8007144:	4649      	mov	r1, r9
 8007146:	9805      	ldr	r0, [sp, #20]
 8007148:	f002 ffaa 	bl	800a0a0 <_Bfree>
 800714c:	4641      	mov	r1, r8
 800714e:	9805      	ldr	r0, [sp, #20]
 8007150:	f002 ffa6 	bl	800a0a0 <_Bfree>
 8007154:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007156:	9805      	ldr	r0, [sp, #20]
 8007158:	f002 ffa2 	bl	800a0a0 <_Bfree>
 800715c:	4621      	mov	r1, r4
 800715e:	9805      	ldr	r0, [sp, #20]
 8007160:	f002 ff9e 	bl	800a0a0 <_Bfree>
 8007164:	e5f9      	b.n	8006d5a <_strtod_l+0x72>
 8007166:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007168:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800716c:	4293      	cmp	r3, r2
 800716e:	dbbc      	blt.n	80070ea <_strtod_l+0x402>
 8007170:	4c40      	ldr	r4, [pc, #256]	@ (8007274 <_strtod_l+0x58c>)
 8007172:	f1c5 050f 	rsb	r5, r5, #15
 8007176:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800717a:	4652      	mov	r2, sl
 800717c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007180:	465b      	mov	r3, fp
 8007182:	f7f9 f9b3 	bl	80004ec <__aeabi_dmul>
 8007186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007188:	1b5d      	subs	r5, r3, r5
 800718a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800718e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007192:	e791      	b.n	80070b8 <_strtod_l+0x3d0>
 8007194:	3316      	adds	r3, #22
 8007196:	dba8      	blt.n	80070ea <_strtod_l+0x402>
 8007198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800719a:	4650      	mov	r0, sl
 800719c:	eba3 0808 	sub.w	r8, r3, r8
 80071a0:	4b34      	ldr	r3, [pc, #208]	@ (8007274 <_strtod_l+0x58c>)
 80071a2:	4659      	mov	r1, fp
 80071a4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80071a8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80071ac:	f7f9 fac8 	bl	8000740 <__aeabi_ddiv>
 80071b0:	e75d      	b.n	800706e <_strtod_l+0x386>
 80071b2:	2300      	movs	r3, #0
 80071b4:	4650      	mov	r0, sl
 80071b6:	4659      	mov	r1, fp
 80071b8:	461e      	mov	r6, r3
 80071ba:	4f2f      	ldr	r7, [pc, #188]	@ (8007278 <_strtod_l+0x590>)
 80071bc:	1124      	asrs	r4, r4, #4
 80071be:	2c01      	cmp	r4, #1
 80071c0:	dc21      	bgt.n	8007206 <_strtod_l+0x51e>
 80071c2:	b10b      	cbz	r3, 80071c8 <_strtod_l+0x4e0>
 80071c4:	4682      	mov	sl, r0
 80071c6:	468b      	mov	fp, r1
 80071c8:	492b      	ldr	r1, [pc, #172]	@ (8007278 <_strtod_l+0x590>)
 80071ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80071ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80071d2:	4652      	mov	r2, sl
 80071d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071d8:	465b      	mov	r3, fp
 80071da:	f7f9 f987 	bl	80004ec <__aeabi_dmul>
 80071de:	4b23      	ldr	r3, [pc, #140]	@ (800726c <_strtod_l+0x584>)
 80071e0:	460a      	mov	r2, r1
 80071e2:	400b      	ands	r3, r1
 80071e4:	4925      	ldr	r1, [pc, #148]	@ (800727c <_strtod_l+0x594>)
 80071e6:	4682      	mov	sl, r0
 80071e8:	428b      	cmp	r3, r1
 80071ea:	d898      	bhi.n	800711e <_strtod_l+0x436>
 80071ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80071f0:	428b      	cmp	r3, r1
 80071f2:	bf86      	itte	hi
 80071f4:	f04f 3aff 	movhi.w	sl, #4294967295
 80071f8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8007280 <_strtod_l+0x598>
 80071fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007200:	2300      	movs	r3, #0
 8007202:	9308      	str	r3, [sp, #32]
 8007204:	e076      	b.n	80072f4 <_strtod_l+0x60c>
 8007206:	07e2      	lsls	r2, r4, #31
 8007208:	d504      	bpl.n	8007214 <_strtod_l+0x52c>
 800720a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800720e:	f7f9 f96d 	bl	80004ec <__aeabi_dmul>
 8007212:	2301      	movs	r3, #1
 8007214:	3601      	adds	r6, #1
 8007216:	1064      	asrs	r4, r4, #1
 8007218:	3708      	adds	r7, #8
 800721a:	e7d0      	b.n	80071be <_strtod_l+0x4d6>
 800721c:	d0f0      	beq.n	8007200 <_strtod_l+0x518>
 800721e:	4264      	negs	r4, r4
 8007220:	f014 020f 	ands.w	r2, r4, #15
 8007224:	d00a      	beq.n	800723c <_strtod_l+0x554>
 8007226:	4b13      	ldr	r3, [pc, #76]	@ (8007274 <_strtod_l+0x58c>)
 8007228:	4650      	mov	r0, sl
 800722a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800722e:	4659      	mov	r1, fp
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f7f9 fa84 	bl	8000740 <__aeabi_ddiv>
 8007238:	4682      	mov	sl, r0
 800723a:	468b      	mov	fp, r1
 800723c:	1124      	asrs	r4, r4, #4
 800723e:	d0df      	beq.n	8007200 <_strtod_l+0x518>
 8007240:	2c1f      	cmp	r4, #31
 8007242:	dd1f      	ble.n	8007284 <_strtod_l+0x59c>
 8007244:	2400      	movs	r4, #0
 8007246:	46a0      	mov	r8, r4
 8007248:	46a1      	mov	r9, r4
 800724a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800724c:	2322      	movs	r3, #34	@ 0x22
 800724e:	9a05      	ldr	r2, [sp, #20]
 8007250:	f04f 0a00 	mov.w	sl, #0
 8007254:	f04f 0b00 	mov.w	fp, #0
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	e76b      	b.n	8007134 <_strtod_l+0x44c>
 800725c:	0800b73f 	.word	0x0800b73f
 8007260:	0800b908 	.word	0x0800b908
 8007264:	0800b737 	.word	0x0800b737
 8007268:	0800b776 	.word	0x0800b776
 800726c:	7ff00000 	.word	0x7ff00000
 8007270:	0800b905 	.word	0x0800b905
 8007274:	0800b990 	.word	0x0800b990
 8007278:	0800b968 	.word	0x0800b968
 800727c:	7ca00000 	.word	0x7ca00000
 8007280:	7fefffff 	.word	0x7fefffff
 8007284:	f014 0310 	ands.w	r3, r4, #16
 8007288:	bf18      	it	ne
 800728a:	236a      	movne	r3, #106	@ 0x6a
 800728c:	4650      	mov	r0, sl
 800728e:	9308      	str	r3, [sp, #32]
 8007290:	4659      	mov	r1, fp
 8007292:	2300      	movs	r3, #0
 8007294:	4e77      	ldr	r6, [pc, #476]	@ (8007474 <_strtod_l+0x78c>)
 8007296:	07e7      	lsls	r7, r4, #31
 8007298:	d504      	bpl.n	80072a4 <_strtod_l+0x5bc>
 800729a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800729e:	f7f9 f925 	bl	80004ec <__aeabi_dmul>
 80072a2:	2301      	movs	r3, #1
 80072a4:	1064      	asrs	r4, r4, #1
 80072a6:	f106 0608 	add.w	r6, r6, #8
 80072aa:	d1f4      	bne.n	8007296 <_strtod_l+0x5ae>
 80072ac:	b10b      	cbz	r3, 80072b2 <_strtod_l+0x5ca>
 80072ae:	4682      	mov	sl, r0
 80072b0:	468b      	mov	fp, r1
 80072b2:	9b08      	ldr	r3, [sp, #32]
 80072b4:	b1b3      	cbz	r3, 80072e4 <_strtod_l+0x5fc>
 80072b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80072be:	2b00      	cmp	r3, #0
 80072c0:	4659      	mov	r1, fp
 80072c2:	dd0f      	ble.n	80072e4 <_strtod_l+0x5fc>
 80072c4:	2b1f      	cmp	r3, #31
 80072c6:	dd58      	ble.n	800737a <_strtod_l+0x692>
 80072c8:	2b34      	cmp	r3, #52	@ 0x34
 80072ca:	bfd8      	it	le
 80072cc:	f04f 33ff 	movle.w	r3, #4294967295
 80072d0:	f04f 0a00 	mov.w	sl, #0
 80072d4:	bfcf      	iteee	gt
 80072d6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80072da:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80072de:	4093      	lslle	r3, r2
 80072e0:	ea03 0b01 	andle.w	fp, r3, r1
 80072e4:	2200      	movs	r2, #0
 80072e6:	2300      	movs	r3, #0
 80072e8:	4650      	mov	r0, sl
 80072ea:	4659      	mov	r1, fp
 80072ec:	f7f9 fb66 	bl	80009bc <__aeabi_dcmpeq>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	d1a7      	bne.n	8007244 <_strtod_l+0x55c>
 80072f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072f6:	464a      	mov	r2, r9
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80072fc:	462b      	mov	r3, r5
 80072fe:	9805      	ldr	r0, [sp, #20]
 8007300:	f002 ff36 	bl	800a170 <__s2b>
 8007304:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007306:	2800      	cmp	r0, #0
 8007308:	f43f af09 	beq.w	800711e <_strtod_l+0x436>
 800730c:	2400      	movs	r4, #0
 800730e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007312:	2a00      	cmp	r2, #0
 8007314:	eba3 0308 	sub.w	r3, r3, r8
 8007318:	bfa8      	it	ge
 800731a:	2300      	movge	r3, #0
 800731c:	46a0      	mov	r8, r4
 800731e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007320:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007324:	9316      	str	r3, [sp, #88]	@ 0x58
 8007326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007328:	9805      	ldr	r0, [sp, #20]
 800732a:	6859      	ldr	r1, [r3, #4]
 800732c:	f002 fe78 	bl	800a020 <_Balloc>
 8007330:	4681      	mov	r9, r0
 8007332:	2800      	cmp	r0, #0
 8007334:	f43f aef7 	beq.w	8007126 <_strtod_l+0x43e>
 8007338:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800733a:	300c      	adds	r0, #12
 800733c:	691a      	ldr	r2, [r3, #16]
 800733e:	f103 010c 	add.w	r1, r3, #12
 8007342:	3202      	adds	r2, #2
 8007344:	0092      	lsls	r2, r2, #2
 8007346:	f001 fc62 	bl	8008c0e <memcpy>
 800734a:	ab1c      	add	r3, sp, #112	@ 0x70
 800734c:	9301      	str	r3, [sp, #4]
 800734e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	4652      	mov	r2, sl
 8007354:	465b      	mov	r3, fp
 8007356:	9805      	ldr	r0, [sp, #20]
 8007358:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800735c:	f003 fa34 	bl	800a7c8 <__d2b>
 8007360:	901a      	str	r0, [sp, #104]	@ 0x68
 8007362:	2800      	cmp	r0, #0
 8007364:	f43f aedf 	beq.w	8007126 <_strtod_l+0x43e>
 8007368:	2101      	movs	r1, #1
 800736a:	9805      	ldr	r0, [sp, #20]
 800736c:	f002 ff96 	bl	800a29c <__i2b>
 8007370:	4680      	mov	r8, r0
 8007372:	b948      	cbnz	r0, 8007388 <_strtod_l+0x6a0>
 8007374:	f04f 0800 	mov.w	r8, #0
 8007378:	e6d5      	b.n	8007126 <_strtod_l+0x43e>
 800737a:	f04f 32ff 	mov.w	r2, #4294967295
 800737e:	fa02 f303 	lsl.w	r3, r2, r3
 8007382:	ea03 0a0a 	and.w	sl, r3, sl
 8007386:	e7ad      	b.n	80072e4 <_strtod_l+0x5fc>
 8007388:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800738a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800738c:	2d00      	cmp	r5, #0
 800738e:	bfab      	itete	ge
 8007390:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007392:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007394:	18ef      	addge	r7, r5, r3
 8007396:	1b5e      	sublt	r6, r3, r5
 8007398:	9b08      	ldr	r3, [sp, #32]
 800739a:	bfa8      	it	ge
 800739c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800739e:	eba5 0503 	sub.w	r5, r5, r3
 80073a2:	4415      	add	r5, r2
 80073a4:	4b34      	ldr	r3, [pc, #208]	@ (8007478 <_strtod_l+0x790>)
 80073a6:	f105 35ff 	add.w	r5, r5, #4294967295
 80073aa:	bfb8      	it	lt
 80073ac:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80073ae:	429d      	cmp	r5, r3
 80073b0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80073b4:	da50      	bge.n	8007458 <_strtod_l+0x770>
 80073b6:	1b5b      	subs	r3, r3, r5
 80073b8:	2b1f      	cmp	r3, #31
 80073ba:	f04f 0101 	mov.w	r1, #1
 80073be:	eba2 0203 	sub.w	r2, r2, r3
 80073c2:	dc3d      	bgt.n	8007440 <_strtod_l+0x758>
 80073c4:	fa01 f303 	lsl.w	r3, r1, r3
 80073c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073ca:	2300      	movs	r3, #0
 80073cc:	9310      	str	r3, [sp, #64]	@ 0x40
 80073ce:	18bd      	adds	r5, r7, r2
 80073d0:	9b08      	ldr	r3, [sp, #32]
 80073d2:	42af      	cmp	r7, r5
 80073d4:	4416      	add	r6, r2
 80073d6:	441e      	add	r6, r3
 80073d8:	463b      	mov	r3, r7
 80073da:	bfa8      	it	ge
 80073dc:	462b      	movge	r3, r5
 80073de:	42b3      	cmp	r3, r6
 80073e0:	bfa8      	it	ge
 80073e2:	4633      	movge	r3, r6
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	bfc2      	ittt	gt
 80073e8:	1aed      	subgt	r5, r5, r3
 80073ea:	1af6      	subgt	r6, r6, r3
 80073ec:	1aff      	subgt	r7, r7, r3
 80073ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	dd16      	ble.n	8007422 <_strtod_l+0x73a>
 80073f4:	4641      	mov	r1, r8
 80073f6:	461a      	mov	r2, r3
 80073f8:	9805      	ldr	r0, [sp, #20]
 80073fa:	f003 f807 	bl	800a40c <__pow5mult>
 80073fe:	4680      	mov	r8, r0
 8007400:	2800      	cmp	r0, #0
 8007402:	d0b7      	beq.n	8007374 <_strtod_l+0x68c>
 8007404:	4601      	mov	r1, r0
 8007406:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007408:	9805      	ldr	r0, [sp, #20]
 800740a:	f002 ff5d 	bl	800a2c8 <__multiply>
 800740e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007410:	2800      	cmp	r0, #0
 8007412:	f43f ae88 	beq.w	8007126 <_strtod_l+0x43e>
 8007416:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007418:	9805      	ldr	r0, [sp, #20]
 800741a:	f002 fe41 	bl	800a0a0 <_Bfree>
 800741e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007420:	931a      	str	r3, [sp, #104]	@ 0x68
 8007422:	2d00      	cmp	r5, #0
 8007424:	dc1d      	bgt.n	8007462 <_strtod_l+0x77a>
 8007426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007428:	2b00      	cmp	r3, #0
 800742a:	dd27      	ble.n	800747c <_strtod_l+0x794>
 800742c:	4649      	mov	r1, r9
 800742e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007430:	9805      	ldr	r0, [sp, #20]
 8007432:	f002 ffeb 	bl	800a40c <__pow5mult>
 8007436:	4681      	mov	r9, r0
 8007438:	bb00      	cbnz	r0, 800747c <_strtod_l+0x794>
 800743a:	f04f 0900 	mov.w	r9, #0
 800743e:	e672      	b.n	8007126 <_strtod_l+0x43e>
 8007440:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007444:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007448:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800744c:	35e2      	adds	r5, #226	@ 0xe2
 800744e:	fa01 f305 	lsl.w	r3, r1, r5
 8007452:	9310      	str	r3, [sp, #64]	@ 0x40
 8007454:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007456:	e7ba      	b.n	80073ce <_strtod_l+0x6e6>
 8007458:	2300      	movs	r3, #0
 800745a:	9310      	str	r3, [sp, #64]	@ 0x40
 800745c:	2301      	movs	r3, #1
 800745e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007460:	e7b5      	b.n	80073ce <_strtod_l+0x6e6>
 8007462:	462a      	mov	r2, r5
 8007464:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007466:	9805      	ldr	r0, [sp, #20]
 8007468:	f003 f82a 	bl	800a4c0 <__lshift>
 800746c:	901a      	str	r0, [sp, #104]	@ 0x68
 800746e:	2800      	cmp	r0, #0
 8007470:	d1d9      	bne.n	8007426 <_strtod_l+0x73e>
 8007472:	e658      	b.n	8007126 <_strtod_l+0x43e>
 8007474:	0800b930 	.word	0x0800b930
 8007478:	fffffc02 	.word	0xfffffc02
 800747c:	2e00      	cmp	r6, #0
 800747e:	dd07      	ble.n	8007490 <_strtod_l+0x7a8>
 8007480:	4649      	mov	r1, r9
 8007482:	4632      	mov	r2, r6
 8007484:	9805      	ldr	r0, [sp, #20]
 8007486:	f003 f81b 	bl	800a4c0 <__lshift>
 800748a:	4681      	mov	r9, r0
 800748c:	2800      	cmp	r0, #0
 800748e:	d0d4      	beq.n	800743a <_strtod_l+0x752>
 8007490:	2f00      	cmp	r7, #0
 8007492:	dd08      	ble.n	80074a6 <_strtod_l+0x7be>
 8007494:	4641      	mov	r1, r8
 8007496:	463a      	mov	r2, r7
 8007498:	9805      	ldr	r0, [sp, #20]
 800749a:	f003 f811 	bl	800a4c0 <__lshift>
 800749e:	4680      	mov	r8, r0
 80074a0:	2800      	cmp	r0, #0
 80074a2:	f43f ae40 	beq.w	8007126 <_strtod_l+0x43e>
 80074a6:	464a      	mov	r2, r9
 80074a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074aa:	9805      	ldr	r0, [sp, #20]
 80074ac:	f003 f890 	bl	800a5d0 <__mdiff>
 80074b0:	4604      	mov	r4, r0
 80074b2:	2800      	cmp	r0, #0
 80074b4:	f43f ae37 	beq.w	8007126 <_strtod_l+0x43e>
 80074b8:	68c3      	ldr	r3, [r0, #12]
 80074ba:	4641      	mov	r1, r8
 80074bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074be:	2300      	movs	r3, #0
 80074c0:	60c3      	str	r3, [r0, #12]
 80074c2:	f003 f869 	bl	800a598 <__mcmp>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	da3d      	bge.n	8007546 <_strtod_l+0x85e>
 80074ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074cc:	ea53 030a 	orrs.w	r3, r3, sl
 80074d0:	d163      	bne.n	800759a <_strtod_l+0x8b2>
 80074d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d15f      	bne.n	800759a <_strtod_l+0x8b2>
 80074da:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074de:	0d1b      	lsrs	r3, r3, #20
 80074e0:	051b      	lsls	r3, r3, #20
 80074e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80074e6:	d958      	bls.n	800759a <_strtod_l+0x8b2>
 80074e8:	6963      	ldr	r3, [r4, #20]
 80074ea:	b913      	cbnz	r3, 80074f2 <_strtod_l+0x80a>
 80074ec:	6923      	ldr	r3, [r4, #16]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	dd53      	ble.n	800759a <_strtod_l+0x8b2>
 80074f2:	4621      	mov	r1, r4
 80074f4:	2201      	movs	r2, #1
 80074f6:	9805      	ldr	r0, [sp, #20]
 80074f8:	f002 ffe2 	bl	800a4c0 <__lshift>
 80074fc:	4641      	mov	r1, r8
 80074fe:	4604      	mov	r4, r0
 8007500:	f003 f84a 	bl	800a598 <__mcmp>
 8007504:	2800      	cmp	r0, #0
 8007506:	dd48      	ble.n	800759a <_strtod_l+0x8b2>
 8007508:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800750c:	9a08      	ldr	r2, [sp, #32]
 800750e:	0d1b      	lsrs	r3, r3, #20
 8007510:	051b      	lsls	r3, r3, #20
 8007512:	2a00      	cmp	r2, #0
 8007514:	d062      	beq.n	80075dc <_strtod_l+0x8f4>
 8007516:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800751a:	d85f      	bhi.n	80075dc <_strtod_l+0x8f4>
 800751c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007520:	f67f ae94 	bls.w	800724c <_strtod_l+0x564>
 8007524:	4650      	mov	r0, sl
 8007526:	4659      	mov	r1, fp
 8007528:	4ba3      	ldr	r3, [pc, #652]	@ (80077b8 <_strtod_l+0xad0>)
 800752a:	2200      	movs	r2, #0
 800752c:	f7f8 ffde 	bl	80004ec <__aeabi_dmul>
 8007530:	4ba2      	ldr	r3, [pc, #648]	@ (80077bc <_strtod_l+0xad4>)
 8007532:	4682      	mov	sl, r0
 8007534:	400b      	ands	r3, r1
 8007536:	468b      	mov	fp, r1
 8007538:	2b00      	cmp	r3, #0
 800753a:	f47f adff 	bne.w	800713c <_strtod_l+0x454>
 800753e:	2322      	movs	r3, #34	@ 0x22
 8007540:	9a05      	ldr	r2, [sp, #20]
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	e5fa      	b.n	800713c <_strtod_l+0x454>
 8007546:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800754a:	d165      	bne.n	8007618 <_strtod_l+0x930>
 800754c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800754e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007552:	b35a      	cbz	r2, 80075ac <_strtod_l+0x8c4>
 8007554:	4a9a      	ldr	r2, [pc, #616]	@ (80077c0 <_strtod_l+0xad8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d12b      	bne.n	80075b2 <_strtod_l+0x8ca>
 800755a:	9b08      	ldr	r3, [sp, #32]
 800755c:	4651      	mov	r1, sl
 800755e:	b303      	cbz	r3, 80075a2 <_strtod_l+0x8ba>
 8007560:	465a      	mov	r2, fp
 8007562:	4b96      	ldr	r3, [pc, #600]	@ (80077bc <_strtod_l+0xad4>)
 8007564:	4013      	ands	r3, r2
 8007566:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800756a:	f04f 32ff 	mov.w	r2, #4294967295
 800756e:	d81b      	bhi.n	80075a8 <_strtod_l+0x8c0>
 8007570:	0d1b      	lsrs	r3, r3, #20
 8007572:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007576:	fa02 f303 	lsl.w	r3, r2, r3
 800757a:	4299      	cmp	r1, r3
 800757c:	d119      	bne.n	80075b2 <_strtod_l+0x8ca>
 800757e:	4b91      	ldr	r3, [pc, #580]	@ (80077c4 <_strtod_l+0xadc>)
 8007580:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007582:	429a      	cmp	r2, r3
 8007584:	d102      	bne.n	800758c <_strtod_l+0x8a4>
 8007586:	3101      	adds	r1, #1
 8007588:	f43f adcd 	beq.w	8007126 <_strtod_l+0x43e>
 800758c:	f04f 0a00 	mov.w	sl, #0
 8007590:	4b8a      	ldr	r3, [pc, #552]	@ (80077bc <_strtod_l+0xad4>)
 8007592:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007594:	401a      	ands	r2, r3
 8007596:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800759a:	9b08      	ldr	r3, [sp, #32]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1c1      	bne.n	8007524 <_strtod_l+0x83c>
 80075a0:	e5cc      	b.n	800713c <_strtod_l+0x454>
 80075a2:	f04f 33ff 	mov.w	r3, #4294967295
 80075a6:	e7e8      	b.n	800757a <_strtod_l+0x892>
 80075a8:	4613      	mov	r3, r2
 80075aa:	e7e6      	b.n	800757a <_strtod_l+0x892>
 80075ac:	ea53 030a 	orrs.w	r3, r3, sl
 80075b0:	d0aa      	beq.n	8007508 <_strtod_l+0x820>
 80075b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075b4:	b1db      	cbz	r3, 80075ee <_strtod_l+0x906>
 80075b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075b8:	4213      	tst	r3, r2
 80075ba:	d0ee      	beq.n	800759a <_strtod_l+0x8b2>
 80075bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075be:	4650      	mov	r0, sl
 80075c0:	4659      	mov	r1, fp
 80075c2:	9a08      	ldr	r2, [sp, #32]
 80075c4:	b1bb      	cbz	r3, 80075f6 <_strtod_l+0x90e>
 80075c6:	f7ff fb6b 	bl	8006ca0 <sulp>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075d2:	f7f8 fdd5 	bl	8000180 <__adddf3>
 80075d6:	4682      	mov	sl, r0
 80075d8:	468b      	mov	fp, r1
 80075da:	e7de      	b.n	800759a <_strtod_l+0x8b2>
 80075dc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80075e0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80075e4:	f04f 3aff 	mov.w	sl, #4294967295
 80075e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80075ec:	e7d5      	b.n	800759a <_strtod_l+0x8b2>
 80075ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80075f0:	ea13 0f0a 	tst.w	r3, sl
 80075f4:	e7e1      	b.n	80075ba <_strtod_l+0x8d2>
 80075f6:	f7ff fb53 	bl	8006ca0 <sulp>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007602:	f7f8 fdbb 	bl	800017c <__aeabi_dsub>
 8007606:	2200      	movs	r2, #0
 8007608:	2300      	movs	r3, #0
 800760a:	4682      	mov	sl, r0
 800760c:	468b      	mov	fp, r1
 800760e:	f7f9 f9d5 	bl	80009bc <__aeabi_dcmpeq>
 8007612:	2800      	cmp	r0, #0
 8007614:	d0c1      	beq.n	800759a <_strtod_l+0x8b2>
 8007616:	e619      	b.n	800724c <_strtod_l+0x564>
 8007618:	4641      	mov	r1, r8
 800761a:	4620      	mov	r0, r4
 800761c:	f003 f92c 	bl	800a878 <__ratio>
 8007620:	2200      	movs	r2, #0
 8007622:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007626:	4606      	mov	r6, r0
 8007628:	460f      	mov	r7, r1
 800762a:	f7f9 f9db 	bl	80009e4 <__aeabi_dcmple>
 800762e:	2800      	cmp	r0, #0
 8007630:	d06d      	beq.n	800770e <_strtod_l+0xa26>
 8007632:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007634:	2b00      	cmp	r3, #0
 8007636:	d178      	bne.n	800772a <_strtod_l+0xa42>
 8007638:	f1ba 0f00 	cmp.w	sl, #0
 800763c:	d156      	bne.n	80076ec <_strtod_l+0xa04>
 800763e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007644:	2b00      	cmp	r3, #0
 8007646:	d158      	bne.n	80076fa <_strtod_l+0xa12>
 8007648:	2200      	movs	r2, #0
 800764a:	4630      	mov	r0, r6
 800764c:	4639      	mov	r1, r7
 800764e:	4b5e      	ldr	r3, [pc, #376]	@ (80077c8 <_strtod_l+0xae0>)
 8007650:	f7f9 f9be 	bl	80009d0 <__aeabi_dcmplt>
 8007654:	2800      	cmp	r0, #0
 8007656:	d157      	bne.n	8007708 <_strtod_l+0xa20>
 8007658:	4630      	mov	r0, r6
 800765a:	4639      	mov	r1, r7
 800765c:	2200      	movs	r2, #0
 800765e:	4b5b      	ldr	r3, [pc, #364]	@ (80077cc <_strtod_l+0xae4>)
 8007660:	f7f8 ff44 	bl	80004ec <__aeabi_dmul>
 8007664:	4606      	mov	r6, r0
 8007666:	460f      	mov	r7, r1
 8007668:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800766c:	9606      	str	r6, [sp, #24]
 800766e:	9307      	str	r3, [sp, #28]
 8007670:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007674:	4d51      	ldr	r5, [pc, #324]	@ (80077bc <_strtod_l+0xad4>)
 8007676:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800767a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800767c:	401d      	ands	r5, r3
 800767e:	4b54      	ldr	r3, [pc, #336]	@ (80077d0 <_strtod_l+0xae8>)
 8007680:	429d      	cmp	r5, r3
 8007682:	f040 80ab 	bne.w	80077dc <_strtod_l+0xaf4>
 8007686:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007688:	4650      	mov	r0, sl
 800768a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800768e:	4659      	mov	r1, fp
 8007690:	f003 f832 	bl	800a6f8 <__ulp>
 8007694:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007698:	f7f8 ff28 	bl	80004ec <__aeabi_dmul>
 800769c:	4652      	mov	r2, sl
 800769e:	465b      	mov	r3, fp
 80076a0:	f7f8 fd6e 	bl	8000180 <__adddf3>
 80076a4:	460b      	mov	r3, r1
 80076a6:	4945      	ldr	r1, [pc, #276]	@ (80077bc <_strtod_l+0xad4>)
 80076a8:	4a4a      	ldr	r2, [pc, #296]	@ (80077d4 <_strtod_l+0xaec>)
 80076aa:	4019      	ands	r1, r3
 80076ac:	4291      	cmp	r1, r2
 80076ae:	4682      	mov	sl, r0
 80076b0:	d942      	bls.n	8007738 <_strtod_l+0xa50>
 80076b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076b4:	4b43      	ldr	r3, [pc, #268]	@ (80077c4 <_strtod_l+0xadc>)
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d103      	bne.n	80076c2 <_strtod_l+0x9da>
 80076ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076bc:	3301      	adds	r3, #1
 80076be:	f43f ad32 	beq.w	8007126 <_strtod_l+0x43e>
 80076c2:	f04f 3aff 	mov.w	sl, #4294967295
 80076c6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80077c4 <_strtod_l+0xadc>
 80076ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076cc:	9805      	ldr	r0, [sp, #20]
 80076ce:	f002 fce7 	bl	800a0a0 <_Bfree>
 80076d2:	4649      	mov	r1, r9
 80076d4:	9805      	ldr	r0, [sp, #20]
 80076d6:	f002 fce3 	bl	800a0a0 <_Bfree>
 80076da:	4641      	mov	r1, r8
 80076dc:	9805      	ldr	r0, [sp, #20]
 80076de:	f002 fcdf 	bl	800a0a0 <_Bfree>
 80076e2:	4621      	mov	r1, r4
 80076e4:	9805      	ldr	r0, [sp, #20]
 80076e6:	f002 fcdb 	bl	800a0a0 <_Bfree>
 80076ea:	e61c      	b.n	8007326 <_strtod_l+0x63e>
 80076ec:	f1ba 0f01 	cmp.w	sl, #1
 80076f0:	d103      	bne.n	80076fa <_strtod_l+0xa12>
 80076f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f43f ada9 	beq.w	800724c <_strtod_l+0x564>
 80076fa:	2200      	movs	r2, #0
 80076fc:	4b36      	ldr	r3, [pc, #216]	@ (80077d8 <_strtod_l+0xaf0>)
 80076fe:	2600      	movs	r6, #0
 8007700:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007704:	4f30      	ldr	r7, [pc, #192]	@ (80077c8 <_strtod_l+0xae0>)
 8007706:	e7b3      	b.n	8007670 <_strtod_l+0x988>
 8007708:	2600      	movs	r6, #0
 800770a:	4f30      	ldr	r7, [pc, #192]	@ (80077cc <_strtod_l+0xae4>)
 800770c:	e7ac      	b.n	8007668 <_strtod_l+0x980>
 800770e:	4630      	mov	r0, r6
 8007710:	4639      	mov	r1, r7
 8007712:	4b2e      	ldr	r3, [pc, #184]	@ (80077cc <_strtod_l+0xae4>)
 8007714:	2200      	movs	r2, #0
 8007716:	f7f8 fee9 	bl	80004ec <__aeabi_dmul>
 800771a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800771c:	4606      	mov	r6, r0
 800771e:	460f      	mov	r7, r1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0a1      	beq.n	8007668 <_strtod_l+0x980>
 8007724:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007728:	e7a2      	b.n	8007670 <_strtod_l+0x988>
 800772a:	2200      	movs	r2, #0
 800772c:	4b26      	ldr	r3, [pc, #152]	@ (80077c8 <_strtod_l+0xae0>)
 800772e:	4616      	mov	r6, r2
 8007730:	461f      	mov	r7, r3
 8007732:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007736:	e79b      	b.n	8007670 <_strtod_l+0x988>
 8007738:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800773c:	9b08      	ldr	r3, [sp, #32]
 800773e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1c1      	bne.n	80076ca <_strtod_l+0x9e2>
 8007746:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800774a:	0d1b      	lsrs	r3, r3, #20
 800774c:	051b      	lsls	r3, r3, #20
 800774e:	429d      	cmp	r5, r3
 8007750:	d1bb      	bne.n	80076ca <_strtod_l+0x9e2>
 8007752:	4630      	mov	r0, r6
 8007754:	4639      	mov	r1, r7
 8007756:	f7f9 fa87 	bl	8000c68 <__aeabi_d2lz>
 800775a:	f7f8 fe99 	bl	8000490 <__aeabi_l2d>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4630      	mov	r0, r6
 8007764:	4639      	mov	r1, r7
 8007766:	f7f8 fd09 	bl	800017c <__aeabi_dsub>
 800776a:	460b      	mov	r3, r1
 800776c:	4602      	mov	r2, r0
 800776e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007772:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007776:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007778:	ea46 060a 	orr.w	r6, r6, sl
 800777c:	431e      	orrs	r6, r3
 800777e:	d06a      	beq.n	8007856 <_strtod_l+0xb6e>
 8007780:	a309      	add	r3, pc, #36	@ (adr r3, 80077a8 <_strtod_l+0xac0>)
 8007782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007786:	f7f9 f923 	bl	80009d0 <__aeabi_dcmplt>
 800778a:	2800      	cmp	r0, #0
 800778c:	f47f acd6 	bne.w	800713c <_strtod_l+0x454>
 8007790:	a307      	add	r3, pc, #28	@ (adr r3, 80077b0 <_strtod_l+0xac8>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800779a:	f7f9 f937 	bl	8000a0c <__aeabi_dcmpgt>
 800779e:	2800      	cmp	r0, #0
 80077a0:	d093      	beq.n	80076ca <_strtod_l+0x9e2>
 80077a2:	e4cb      	b.n	800713c <_strtod_l+0x454>
 80077a4:	f3af 8000 	nop.w
 80077a8:	94a03595 	.word	0x94a03595
 80077ac:	3fdfffff 	.word	0x3fdfffff
 80077b0:	35afe535 	.word	0x35afe535
 80077b4:	3fe00000 	.word	0x3fe00000
 80077b8:	39500000 	.word	0x39500000
 80077bc:	7ff00000 	.word	0x7ff00000
 80077c0:	000fffff 	.word	0x000fffff
 80077c4:	7fefffff 	.word	0x7fefffff
 80077c8:	3ff00000 	.word	0x3ff00000
 80077cc:	3fe00000 	.word	0x3fe00000
 80077d0:	7fe00000 	.word	0x7fe00000
 80077d4:	7c9fffff 	.word	0x7c9fffff
 80077d8:	bff00000 	.word	0xbff00000
 80077dc:	9b08      	ldr	r3, [sp, #32]
 80077de:	b323      	cbz	r3, 800782a <_strtod_l+0xb42>
 80077e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80077e4:	d821      	bhi.n	800782a <_strtod_l+0xb42>
 80077e6:	a328      	add	r3, pc, #160	@ (adr r3, 8007888 <_strtod_l+0xba0>)
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	4630      	mov	r0, r6
 80077ee:	4639      	mov	r1, r7
 80077f0:	f7f9 f8f8 	bl	80009e4 <__aeabi_dcmple>
 80077f4:	b1a0      	cbz	r0, 8007820 <_strtod_l+0xb38>
 80077f6:	4639      	mov	r1, r7
 80077f8:	4630      	mov	r0, r6
 80077fa:	f7f9 f94f 	bl	8000a9c <__aeabi_d2uiz>
 80077fe:	2801      	cmp	r0, #1
 8007800:	bf38      	it	cc
 8007802:	2001      	movcc	r0, #1
 8007804:	f7f8 fdf8 	bl	80003f8 <__aeabi_ui2d>
 8007808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	b9fb      	cbnz	r3, 8007850 <_strtod_l+0xb68>
 8007810:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007814:	9014      	str	r0, [sp, #80]	@ 0x50
 8007816:	9315      	str	r3, [sp, #84]	@ 0x54
 8007818:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800781c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007820:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007822:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007826:	1b5b      	subs	r3, r3, r5
 8007828:	9311      	str	r3, [sp, #68]	@ 0x44
 800782a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800782e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007832:	f002 ff61 	bl	800a6f8 <__ulp>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4650      	mov	r0, sl
 800783c:	4659      	mov	r1, fp
 800783e:	f7f8 fe55 	bl	80004ec <__aeabi_dmul>
 8007842:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007846:	f7f8 fc9b 	bl	8000180 <__adddf3>
 800784a:	4682      	mov	sl, r0
 800784c:	468b      	mov	fp, r1
 800784e:	e775      	b.n	800773c <_strtod_l+0xa54>
 8007850:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007854:	e7e0      	b.n	8007818 <_strtod_l+0xb30>
 8007856:	a30e      	add	r3, pc, #56	@ (adr r3, 8007890 <_strtod_l+0xba8>)
 8007858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785c:	f7f9 f8b8 	bl	80009d0 <__aeabi_dcmplt>
 8007860:	e79d      	b.n	800779e <_strtod_l+0xab6>
 8007862:	2300      	movs	r3, #0
 8007864:	930e      	str	r3, [sp, #56]	@ 0x38
 8007866:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007868:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	f7ff ba79 	b.w	8006d62 <_strtod_l+0x7a>
 8007870:	2a65      	cmp	r2, #101	@ 0x65
 8007872:	f43f ab72 	beq.w	8006f5a <_strtod_l+0x272>
 8007876:	2a45      	cmp	r2, #69	@ 0x45
 8007878:	f43f ab6f 	beq.w	8006f5a <_strtod_l+0x272>
 800787c:	2301      	movs	r3, #1
 800787e:	f7ff bbaa 	b.w	8006fd6 <_strtod_l+0x2ee>
 8007882:	bf00      	nop
 8007884:	f3af 8000 	nop.w
 8007888:	ffc00000 	.word	0xffc00000
 800788c:	41dfffff 	.word	0x41dfffff
 8007890:	94a03595 	.word	0x94a03595
 8007894:	3fcfffff 	.word	0x3fcfffff

08007898 <_strtod_r>:
 8007898:	4b01      	ldr	r3, [pc, #4]	@ (80078a0 <_strtod_r+0x8>)
 800789a:	f7ff ba25 	b.w	8006ce8 <_strtod_l>
 800789e:	bf00      	nop
 80078a0:	20000050 	.word	0x20000050

080078a4 <strtod>:
 80078a4:	460a      	mov	r2, r1
 80078a6:	4601      	mov	r1, r0
 80078a8:	4802      	ldr	r0, [pc, #8]	@ (80078b4 <strtod+0x10>)
 80078aa:	4b03      	ldr	r3, [pc, #12]	@ (80078b8 <strtod+0x14>)
 80078ac:	6800      	ldr	r0, [r0, #0]
 80078ae:	f7ff ba1b 	b.w	8006ce8 <_strtod_l>
 80078b2:	bf00      	nop
 80078b4:	200001bc 	.word	0x200001bc
 80078b8:	20000050 	.word	0x20000050

080078bc <__cvt>:
 80078bc:	2b00      	cmp	r3, #0
 80078be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c2:	461d      	mov	r5, r3
 80078c4:	bfbb      	ittet	lt
 80078c6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80078ca:	461d      	movlt	r5, r3
 80078cc:	2300      	movge	r3, #0
 80078ce:	232d      	movlt	r3, #45	@ 0x2d
 80078d0:	b088      	sub	sp, #32
 80078d2:	4614      	mov	r4, r2
 80078d4:	bfb8      	it	lt
 80078d6:	4614      	movlt	r4, r2
 80078d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80078da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80078dc:	7013      	strb	r3, [r2, #0]
 80078de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80078e4:	f023 0820 	bic.w	r8, r3, #32
 80078e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80078ec:	d005      	beq.n	80078fa <__cvt+0x3e>
 80078ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80078f2:	d100      	bne.n	80078f6 <__cvt+0x3a>
 80078f4:	3601      	adds	r6, #1
 80078f6:	2302      	movs	r3, #2
 80078f8:	e000      	b.n	80078fc <__cvt+0x40>
 80078fa:	2303      	movs	r3, #3
 80078fc:	aa07      	add	r2, sp, #28
 80078fe:	9204      	str	r2, [sp, #16]
 8007900:	aa06      	add	r2, sp, #24
 8007902:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007906:	e9cd 3600 	strd	r3, r6, [sp]
 800790a:	4622      	mov	r2, r4
 800790c:	462b      	mov	r3, r5
 800790e:	f001 fa1f 	bl	8008d50 <_dtoa_r>
 8007912:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007916:	4607      	mov	r7, r0
 8007918:	d119      	bne.n	800794e <__cvt+0x92>
 800791a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800791c:	07db      	lsls	r3, r3, #31
 800791e:	d50e      	bpl.n	800793e <__cvt+0x82>
 8007920:	eb00 0906 	add.w	r9, r0, r6
 8007924:	2200      	movs	r2, #0
 8007926:	2300      	movs	r3, #0
 8007928:	4620      	mov	r0, r4
 800792a:	4629      	mov	r1, r5
 800792c:	f7f9 f846 	bl	80009bc <__aeabi_dcmpeq>
 8007930:	b108      	cbz	r0, 8007936 <__cvt+0x7a>
 8007932:	f8cd 901c 	str.w	r9, [sp, #28]
 8007936:	2230      	movs	r2, #48	@ 0x30
 8007938:	9b07      	ldr	r3, [sp, #28]
 800793a:	454b      	cmp	r3, r9
 800793c:	d31e      	bcc.n	800797c <__cvt+0xc0>
 800793e:	4638      	mov	r0, r7
 8007940:	9b07      	ldr	r3, [sp, #28]
 8007942:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007944:	1bdb      	subs	r3, r3, r7
 8007946:	6013      	str	r3, [r2, #0]
 8007948:	b008      	add	sp, #32
 800794a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800794e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007952:	eb00 0906 	add.w	r9, r0, r6
 8007956:	d1e5      	bne.n	8007924 <__cvt+0x68>
 8007958:	7803      	ldrb	r3, [r0, #0]
 800795a:	2b30      	cmp	r3, #48	@ 0x30
 800795c:	d10a      	bne.n	8007974 <__cvt+0xb8>
 800795e:	2200      	movs	r2, #0
 8007960:	2300      	movs	r3, #0
 8007962:	4620      	mov	r0, r4
 8007964:	4629      	mov	r1, r5
 8007966:	f7f9 f829 	bl	80009bc <__aeabi_dcmpeq>
 800796a:	b918      	cbnz	r0, 8007974 <__cvt+0xb8>
 800796c:	f1c6 0601 	rsb	r6, r6, #1
 8007970:	f8ca 6000 	str.w	r6, [sl]
 8007974:	f8da 3000 	ldr.w	r3, [sl]
 8007978:	4499      	add	r9, r3
 800797a:	e7d3      	b.n	8007924 <__cvt+0x68>
 800797c:	1c59      	adds	r1, r3, #1
 800797e:	9107      	str	r1, [sp, #28]
 8007980:	701a      	strb	r2, [r3, #0]
 8007982:	e7d9      	b.n	8007938 <__cvt+0x7c>

08007984 <__exponent>:
 8007984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007986:	2900      	cmp	r1, #0
 8007988:	bfb6      	itet	lt
 800798a:	232d      	movlt	r3, #45	@ 0x2d
 800798c:	232b      	movge	r3, #43	@ 0x2b
 800798e:	4249      	neglt	r1, r1
 8007990:	2909      	cmp	r1, #9
 8007992:	7002      	strb	r2, [r0, #0]
 8007994:	7043      	strb	r3, [r0, #1]
 8007996:	dd29      	ble.n	80079ec <__exponent+0x68>
 8007998:	f10d 0307 	add.w	r3, sp, #7
 800799c:	461d      	mov	r5, r3
 800799e:	270a      	movs	r7, #10
 80079a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80079a4:	461a      	mov	r2, r3
 80079a6:	fb07 1416 	mls	r4, r7, r6, r1
 80079aa:	3430      	adds	r4, #48	@ 0x30
 80079ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80079b0:	460c      	mov	r4, r1
 80079b2:	2c63      	cmp	r4, #99	@ 0x63
 80079b4:	4631      	mov	r1, r6
 80079b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80079ba:	dcf1      	bgt.n	80079a0 <__exponent+0x1c>
 80079bc:	3130      	adds	r1, #48	@ 0x30
 80079be:	1e94      	subs	r4, r2, #2
 80079c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80079c4:	4623      	mov	r3, r4
 80079c6:	1c41      	adds	r1, r0, #1
 80079c8:	42ab      	cmp	r3, r5
 80079ca:	d30a      	bcc.n	80079e2 <__exponent+0x5e>
 80079cc:	f10d 0309 	add.w	r3, sp, #9
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	42ac      	cmp	r4, r5
 80079d4:	bf88      	it	hi
 80079d6:	2300      	movhi	r3, #0
 80079d8:	3302      	adds	r3, #2
 80079da:	4403      	add	r3, r0
 80079dc:	1a18      	subs	r0, r3, r0
 80079de:	b003      	add	sp, #12
 80079e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80079e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80079ea:	e7ed      	b.n	80079c8 <__exponent+0x44>
 80079ec:	2330      	movs	r3, #48	@ 0x30
 80079ee:	3130      	adds	r1, #48	@ 0x30
 80079f0:	7083      	strb	r3, [r0, #2]
 80079f2:	70c1      	strb	r1, [r0, #3]
 80079f4:	1d03      	adds	r3, r0, #4
 80079f6:	e7f1      	b.n	80079dc <__exponent+0x58>

080079f8 <_printf_float>:
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	b091      	sub	sp, #68	@ 0x44
 80079fe:	460c      	mov	r4, r1
 8007a00:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007a04:	4616      	mov	r6, r2
 8007a06:	461f      	mov	r7, r3
 8007a08:	4605      	mov	r5, r0
 8007a0a:	f001 f863 	bl	8008ad4 <_localeconv_r>
 8007a0e:	6803      	ldr	r3, [r0, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	9308      	str	r3, [sp, #32]
 8007a14:	f7f8 fba6 	bl	8000164 <strlen>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	930e      	str	r3, [sp, #56]	@ 0x38
 8007a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a20:	9009      	str	r0, [sp, #36]	@ 0x24
 8007a22:	3307      	adds	r3, #7
 8007a24:	f023 0307 	bic.w	r3, r3, #7
 8007a28:	f103 0208 	add.w	r2, r3, #8
 8007a2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a30:	f8d4 b000 	ldr.w	fp, [r4]
 8007a34:	f8c8 2000 	str.w	r2, [r8]
 8007a38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a42:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007a46:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007a52:	4b9c      	ldr	r3, [pc, #624]	@ (8007cc4 <_printf_float+0x2cc>)
 8007a54:	f7f8 ffe4 	bl	8000a20 <__aeabi_dcmpun>
 8007a58:	bb70      	cbnz	r0, 8007ab8 <_printf_float+0xc0>
 8007a5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a62:	4b98      	ldr	r3, [pc, #608]	@ (8007cc4 <_printf_float+0x2cc>)
 8007a64:	f7f8 ffbe 	bl	80009e4 <__aeabi_dcmple>
 8007a68:	bb30      	cbnz	r0, 8007ab8 <_printf_float+0xc0>
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4640      	mov	r0, r8
 8007a70:	4649      	mov	r1, r9
 8007a72:	f7f8 ffad 	bl	80009d0 <__aeabi_dcmplt>
 8007a76:	b110      	cbz	r0, 8007a7e <_printf_float+0x86>
 8007a78:	232d      	movs	r3, #45	@ 0x2d
 8007a7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a7e:	4a92      	ldr	r2, [pc, #584]	@ (8007cc8 <_printf_float+0x2d0>)
 8007a80:	4b92      	ldr	r3, [pc, #584]	@ (8007ccc <_printf_float+0x2d4>)
 8007a82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007a86:	bf8c      	ite	hi
 8007a88:	4690      	movhi	r8, r2
 8007a8a:	4698      	movls	r8, r3
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	f04f 0900 	mov.w	r9, #0
 8007a92:	6123      	str	r3, [r4, #16]
 8007a94:	f02b 0304 	bic.w	r3, fp, #4
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	4633      	mov	r3, r6
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	9700      	str	r7, [sp, #0]
 8007aa2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007aa4:	f000 f9d4 	bl	8007e50 <_printf_common>
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	f040 8090 	bne.w	8007bce <_printf_float+0x1d6>
 8007aae:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab2:	b011      	add	sp, #68	@ 0x44
 8007ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab8:	4642      	mov	r2, r8
 8007aba:	464b      	mov	r3, r9
 8007abc:	4640      	mov	r0, r8
 8007abe:	4649      	mov	r1, r9
 8007ac0:	f7f8 ffae 	bl	8000a20 <__aeabi_dcmpun>
 8007ac4:	b148      	cbz	r0, 8007ada <_printf_float+0xe2>
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bfb8      	it	lt
 8007acc:	232d      	movlt	r3, #45	@ 0x2d
 8007ace:	4a80      	ldr	r2, [pc, #512]	@ (8007cd0 <_printf_float+0x2d8>)
 8007ad0:	bfb8      	it	lt
 8007ad2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007ad6:	4b7f      	ldr	r3, [pc, #508]	@ (8007cd4 <_printf_float+0x2dc>)
 8007ad8:	e7d3      	b.n	8007a82 <_printf_float+0x8a>
 8007ada:	6863      	ldr	r3, [r4, #4]
 8007adc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	d13f      	bne.n	8007b64 <_printf_float+0x16c>
 8007ae4:	2306      	movs	r3, #6
 8007ae6:	6063      	str	r3, [r4, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007aee:	6023      	str	r3, [r4, #0]
 8007af0:	9206      	str	r2, [sp, #24]
 8007af2:	aa0e      	add	r2, sp, #56	@ 0x38
 8007af4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007af8:	aa0d      	add	r2, sp, #52	@ 0x34
 8007afa:	9203      	str	r2, [sp, #12]
 8007afc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007b00:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007b04:	6863      	ldr	r3, [r4, #4]
 8007b06:	4642      	mov	r2, r8
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	910a      	str	r1, [sp, #40]	@ 0x28
 8007b10:	f7ff fed4 	bl	80078bc <__cvt>
 8007b14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b16:	4680      	mov	r8, r0
 8007b18:	2947      	cmp	r1, #71	@ 0x47
 8007b1a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007b1c:	d128      	bne.n	8007b70 <_printf_float+0x178>
 8007b1e:	1cc8      	adds	r0, r1, #3
 8007b20:	db02      	blt.n	8007b28 <_printf_float+0x130>
 8007b22:	6863      	ldr	r3, [r4, #4]
 8007b24:	4299      	cmp	r1, r3
 8007b26:	dd40      	ble.n	8007baa <_printf_float+0x1b2>
 8007b28:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b2c:	fa5f fa8a 	uxtb.w	sl, sl
 8007b30:	4652      	mov	r2, sl
 8007b32:	3901      	subs	r1, #1
 8007b34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007b38:	910d      	str	r1, [sp, #52]	@ 0x34
 8007b3a:	f7ff ff23 	bl	8007984 <__exponent>
 8007b3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b40:	4681      	mov	r9, r0
 8007b42:	1813      	adds	r3, r2, r0
 8007b44:	2a01      	cmp	r2, #1
 8007b46:	6123      	str	r3, [r4, #16]
 8007b48:	dc02      	bgt.n	8007b50 <_printf_float+0x158>
 8007b4a:	6822      	ldr	r2, [r4, #0]
 8007b4c:	07d2      	lsls	r2, r2, #31
 8007b4e:	d501      	bpl.n	8007b54 <_printf_float+0x15c>
 8007b50:	3301      	adds	r3, #1
 8007b52:	6123      	str	r3, [r4, #16]
 8007b54:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d09e      	beq.n	8007a9a <_printf_float+0xa2>
 8007b5c:	232d      	movs	r3, #45	@ 0x2d
 8007b5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b62:	e79a      	b.n	8007a9a <_printf_float+0xa2>
 8007b64:	2947      	cmp	r1, #71	@ 0x47
 8007b66:	d1bf      	bne.n	8007ae8 <_printf_float+0xf0>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1bd      	bne.n	8007ae8 <_printf_float+0xf0>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e7ba      	b.n	8007ae6 <_printf_float+0xee>
 8007b70:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b74:	d9dc      	bls.n	8007b30 <_printf_float+0x138>
 8007b76:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007b7a:	d118      	bne.n	8007bae <_printf_float+0x1b6>
 8007b7c:	2900      	cmp	r1, #0
 8007b7e:	6863      	ldr	r3, [r4, #4]
 8007b80:	dd0b      	ble.n	8007b9a <_printf_float+0x1a2>
 8007b82:	6121      	str	r1, [r4, #16]
 8007b84:	b913      	cbnz	r3, 8007b8c <_printf_float+0x194>
 8007b86:	6822      	ldr	r2, [r4, #0]
 8007b88:	07d0      	lsls	r0, r2, #31
 8007b8a:	d502      	bpl.n	8007b92 <_printf_float+0x19a>
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	440b      	add	r3, r1
 8007b90:	6123      	str	r3, [r4, #16]
 8007b92:	f04f 0900 	mov.w	r9, #0
 8007b96:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007b98:	e7dc      	b.n	8007b54 <_printf_float+0x15c>
 8007b9a:	b913      	cbnz	r3, 8007ba2 <_printf_float+0x1aa>
 8007b9c:	6822      	ldr	r2, [r4, #0]
 8007b9e:	07d2      	lsls	r2, r2, #31
 8007ba0:	d501      	bpl.n	8007ba6 <_printf_float+0x1ae>
 8007ba2:	3302      	adds	r3, #2
 8007ba4:	e7f4      	b.n	8007b90 <_printf_float+0x198>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e7f2      	b.n	8007b90 <_printf_float+0x198>
 8007baa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007bae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bb0:	4299      	cmp	r1, r3
 8007bb2:	db05      	blt.n	8007bc0 <_printf_float+0x1c8>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	6121      	str	r1, [r4, #16]
 8007bb8:	07d8      	lsls	r0, r3, #31
 8007bba:	d5ea      	bpl.n	8007b92 <_printf_float+0x19a>
 8007bbc:	1c4b      	adds	r3, r1, #1
 8007bbe:	e7e7      	b.n	8007b90 <_printf_float+0x198>
 8007bc0:	2900      	cmp	r1, #0
 8007bc2:	bfcc      	ite	gt
 8007bc4:	2201      	movgt	r2, #1
 8007bc6:	f1c1 0202 	rsble	r2, r1, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	e7e0      	b.n	8007b90 <_printf_float+0x198>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	055a      	lsls	r2, r3, #21
 8007bd2:	d407      	bmi.n	8007be4 <_printf_float+0x1ec>
 8007bd4:	6923      	ldr	r3, [r4, #16]
 8007bd6:	4642      	mov	r2, r8
 8007bd8:	4631      	mov	r1, r6
 8007bda:	4628      	mov	r0, r5
 8007bdc:	47b8      	blx	r7
 8007bde:	3001      	adds	r0, #1
 8007be0:	d12b      	bne.n	8007c3a <_printf_float+0x242>
 8007be2:	e764      	b.n	8007aae <_printf_float+0xb6>
 8007be4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007be8:	f240 80dc 	bls.w	8007da4 <_printf_float+0x3ac>
 8007bec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f7f8 fee2 	bl	80009bc <__aeabi_dcmpeq>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d033      	beq.n	8007c64 <_printf_float+0x26c>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4628      	mov	r0, r5
 8007c02:	4a35      	ldr	r2, [pc, #212]	@ (8007cd8 <_printf_float+0x2e0>)
 8007c04:	47b8      	blx	r7
 8007c06:	3001      	adds	r0, #1
 8007c08:	f43f af51 	beq.w	8007aae <_printf_float+0xb6>
 8007c0c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007c10:	4543      	cmp	r3, r8
 8007c12:	db02      	blt.n	8007c1a <_printf_float+0x222>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	07d8      	lsls	r0, r3, #31
 8007c18:	d50f      	bpl.n	8007c3a <_printf_float+0x242>
 8007c1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4628      	mov	r0, r5
 8007c22:	47b8      	blx	r7
 8007c24:	3001      	adds	r0, #1
 8007c26:	f43f af42 	beq.w	8007aae <_printf_float+0xb6>
 8007c2a:	f04f 0900 	mov.w	r9, #0
 8007c2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c32:	f104 0a1a 	add.w	sl, r4, #26
 8007c36:	45c8      	cmp	r8, r9
 8007c38:	dc09      	bgt.n	8007c4e <_printf_float+0x256>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	079b      	lsls	r3, r3, #30
 8007c3e:	f100 8102 	bmi.w	8007e46 <_printf_float+0x44e>
 8007c42:	68e0      	ldr	r0, [r4, #12]
 8007c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c46:	4298      	cmp	r0, r3
 8007c48:	bfb8      	it	lt
 8007c4a:	4618      	movlt	r0, r3
 8007c4c:	e731      	b.n	8007ab2 <_printf_float+0xba>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	4652      	mov	r2, sl
 8007c52:	4631      	mov	r1, r6
 8007c54:	4628      	mov	r0, r5
 8007c56:	47b8      	blx	r7
 8007c58:	3001      	adds	r0, #1
 8007c5a:	f43f af28 	beq.w	8007aae <_printf_float+0xb6>
 8007c5e:	f109 0901 	add.w	r9, r9, #1
 8007c62:	e7e8      	b.n	8007c36 <_printf_float+0x23e>
 8007c64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	dc38      	bgt.n	8007cdc <_printf_float+0x2e4>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4631      	mov	r1, r6
 8007c6e:	4628      	mov	r0, r5
 8007c70:	4a19      	ldr	r2, [pc, #100]	@ (8007cd8 <_printf_float+0x2e0>)
 8007c72:	47b8      	blx	r7
 8007c74:	3001      	adds	r0, #1
 8007c76:	f43f af1a 	beq.w	8007aae <_printf_float+0xb6>
 8007c7a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007c7e:	ea59 0303 	orrs.w	r3, r9, r3
 8007c82:	d102      	bne.n	8007c8a <_printf_float+0x292>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	07d9      	lsls	r1, r3, #31
 8007c88:	d5d7      	bpl.n	8007c3a <_printf_float+0x242>
 8007c8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	f43f af0a 	beq.w	8007aae <_printf_float+0xb6>
 8007c9a:	f04f 0a00 	mov.w	sl, #0
 8007c9e:	f104 0b1a 	add.w	fp, r4, #26
 8007ca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ca4:	425b      	negs	r3, r3
 8007ca6:	4553      	cmp	r3, sl
 8007ca8:	dc01      	bgt.n	8007cae <_printf_float+0x2b6>
 8007caa:	464b      	mov	r3, r9
 8007cac:	e793      	b.n	8007bd6 <_printf_float+0x1de>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	465a      	mov	r2, fp
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	47b8      	blx	r7
 8007cb8:	3001      	adds	r0, #1
 8007cba:	f43f aef8 	beq.w	8007aae <_printf_float+0xb6>
 8007cbe:	f10a 0a01 	add.w	sl, sl, #1
 8007cc2:	e7ee      	b.n	8007ca2 <_printf_float+0x2aa>
 8007cc4:	7fefffff 	.word	0x7fefffff
 8007cc8:	0800b736 	.word	0x0800b736
 8007ccc:	0800b732 	.word	0x0800b732
 8007cd0:	0800b73e 	.word	0x0800b73e
 8007cd4:	0800b73a 	.word	0x0800b73a
 8007cd8:	0800b742 	.word	0x0800b742
 8007cdc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007cde:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007ce2:	4553      	cmp	r3, sl
 8007ce4:	bfa8      	it	ge
 8007ce6:	4653      	movge	r3, sl
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	4699      	mov	r9, r3
 8007cec:	dc36      	bgt.n	8007d5c <_printf_float+0x364>
 8007cee:	f04f 0b00 	mov.w	fp, #0
 8007cf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cf6:	f104 021a 	add.w	r2, r4, #26
 8007cfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007cfc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cfe:	eba3 0309 	sub.w	r3, r3, r9
 8007d02:	455b      	cmp	r3, fp
 8007d04:	dc31      	bgt.n	8007d6a <_printf_float+0x372>
 8007d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d08:	459a      	cmp	sl, r3
 8007d0a:	dc3a      	bgt.n	8007d82 <_printf_float+0x38a>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	07da      	lsls	r2, r3, #31
 8007d10:	d437      	bmi.n	8007d82 <_printf_float+0x38a>
 8007d12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d14:	ebaa 0903 	sub.w	r9, sl, r3
 8007d18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d1a:	ebaa 0303 	sub.w	r3, sl, r3
 8007d1e:	4599      	cmp	r9, r3
 8007d20:	bfa8      	it	ge
 8007d22:	4699      	movge	r9, r3
 8007d24:	f1b9 0f00 	cmp.w	r9, #0
 8007d28:	dc33      	bgt.n	8007d92 <_printf_float+0x39a>
 8007d2a:	f04f 0800 	mov.w	r8, #0
 8007d2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d32:	f104 0b1a 	add.w	fp, r4, #26
 8007d36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d38:	ebaa 0303 	sub.w	r3, sl, r3
 8007d3c:	eba3 0309 	sub.w	r3, r3, r9
 8007d40:	4543      	cmp	r3, r8
 8007d42:	f77f af7a 	ble.w	8007c3a <_printf_float+0x242>
 8007d46:	2301      	movs	r3, #1
 8007d48:	465a      	mov	r2, fp
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	47b8      	blx	r7
 8007d50:	3001      	adds	r0, #1
 8007d52:	f43f aeac 	beq.w	8007aae <_printf_float+0xb6>
 8007d56:	f108 0801 	add.w	r8, r8, #1
 8007d5a:	e7ec      	b.n	8007d36 <_printf_float+0x33e>
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4628      	mov	r0, r5
 8007d62:	47b8      	blx	r7
 8007d64:	3001      	adds	r0, #1
 8007d66:	d1c2      	bne.n	8007cee <_printf_float+0x2f6>
 8007d68:	e6a1      	b.n	8007aae <_printf_float+0xb6>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4628      	mov	r0, r5
 8007d70:	920a      	str	r2, [sp, #40]	@ 0x28
 8007d72:	47b8      	blx	r7
 8007d74:	3001      	adds	r0, #1
 8007d76:	f43f ae9a 	beq.w	8007aae <_printf_float+0xb6>
 8007d7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d7c:	f10b 0b01 	add.w	fp, fp, #1
 8007d80:	e7bb      	b.n	8007cfa <_printf_float+0x302>
 8007d82:	4631      	mov	r1, r6
 8007d84:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d88:	4628      	mov	r0, r5
 8007d8a:	47b8      	blx	r7
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d1c0      	bne.n	8007d12 <_printf_float+0x31a>
 8007d90:	e68d      	b.n	8007aae <_printf_float+0xb6>
 8007d92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d94:	464b      	mov	r3, r9
 8007d96:	4631      	mov	r1, r6
 8007d98:	4628      	mov	r0, r5
 8007d9a:	4442      	add	r2, r8
 8007d9c:	47b8      	blx	r7
 8007d9e:	3001      	adds	r0, #1
 8007da0:	d1c3      	bne.n	8007d2a <_printf_float+0x332>
 8007da2:	e684      	b.n	8007aae <_printf_float+0xb6>
 8007da4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007da8:	f1ba 0f01 	cmp.w	sl, #1
 8007dac:	dc01      	bgt.n	8007db2 <_printf_float+0x3ba>
 8007dae:	07db      	lsls	r3, r3, #31
 8007db0:	d536      	bpl.n	8007e20 <_printf_float+0x428>
 8007db2:	2301      	movs	r3, #1
 8007db4:	4642      	mov	r2, r8
 8007db6:	4631      	mov	r1, r6
 8007db8:	4628      	mov	r0, r5
 8007dba:	47b8      	blx	r7
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	f43f ae76 	beq.w	8007aae <_printf_float+0xb6>
 8007dc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	4628      	mov	r0, r5
 8007dca:	47b8      	blx	r7
 8007dcc:	3001      	adds	r0, #1
 8007dce:	f43f ae6e 	beq.w	8007aae <_printf_float+0xb6>
 8007dd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dde:	f7f8 fded 	bl	80009bc <__aeabi_dcmpeq>
 8007de2:	b9c0      	cbnz	r0, 8007e16 <_printf_float+0x41e>
 8007de4:	4653      	mov	r3, sl
 8007de6:	f108 0201 	add.w	r2, r8, #1
 8007dea:	4631      	mov	r1, r6
 8007dec:	4628      	mov	r0, r5
 8007dee:	47b8      	blx	r7
 8007df0:	3001      	adds	r0, #1
 8007df2:	d10c      	bne.n	8007e0e <_printf_float+0x416>
 8007df4:	e65b      	b.n	8007aae <_printf_float+0xb6>
 8007df6:	2301      	movs	r3, #1
 8007df8:	465a      	mov	r2, fp
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	47b8      	blx	r7
 8007e00:	3001      	adds	r0, #1
 8007e02:	f43f ae54 	beq.w	8007aae <_printf_float+0xb6>
 8007e06:	f108 0801 	add.w	r8, r8, #1
 8007e0a:	45d0      	cmp	r8, sl
 8007e0c:	dbf3      	blt.n	8007df6 <_printf_float+0x3fe>
 8007e0e:	464b      	mov	r3, r9
 8007e10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007e14:	e6e0      	b.n	8007bd8 <_printf_float+0x1e0>
 8007e16:	f04f 0800 	mov.w	r8, #0
 8007e1a:	f104 0b1a 	add.w	fp, r4, #26
 8007e1e:	e7f4      	b.n	8007e0a <_printf_float+0x412>
 8007e20:	2301      	movs	r3, #1
 8007e22:	4642      	mov	r2, r8
 8007e24:	e7e1      	b.n	8007dea <_printf_float+0x3f2>
 8007e26:	2301      	movs	r3, #1
 8007e28:	464a      	mov	r2, r9
 8007e2a:	4631      	mov	r1, r6
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b8      	blx	r7
 8007e30:	3001      	adds	r0, #1
 8007e32:	f43f ae3c 	beq.w	8007aae <_printf_float+0xb6>
 8007e36:	f108 0801 	add.w	r8, r8, #1
 8007e3a:	68e3      	ldr	r3, [r4, #12]
 8007e3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007e3e:	1a5b      	subs	r3, r3, r1
 8007e40:	4543      	cmp	r3, r8
 8007e42:	dcf0      	bgt.n	8007e26 <_printf_float+0x42e>
 8007e44:	e6fd      	b.n	8007c42 <_printf_float+0x24a>
 8007e46:	f04f 0800 	mov.w	r8, #0
 8007e4a:	f104 0919 	add.w	r9, r4, #25
 8007e4e:	e7f4      	b.n	8007e3a <_printf_float+0x442>

08007e50 <_printf_common>:
 8007e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	4616      	mov	r6, r2
 8007e56:	4698      	mov	r8, r3
 8007e58:	688a      	ldr	r2, [r1, #8]
 8007e5a:	690b      	ldr	r3, [r1, #16]
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	bfb8      	it	lt
 8007e62:	4613      	movlt	r3, r2
 8007e64:	6033      	str	r3, [r6, #0]
 8007e66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e70:	b10a      	cbz	r2, 8007e76 <_printf_common+0x26>
 8007e72:	3301      	adds	r3, #1
 8007e74:	6033      	str	r3, [r6, #0]
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	0699      	lsls	r1, r3, #26
 8007e7a:	bf42      	ittt	mi
 8007e7c:	6833      	ldrmi	r3, [r6, #0]
 8007e7e:	3302      	addmi	r3, #2
 8007e80:	6033      	strmi	r3, [r6, #0]
 8007e82:	6825      	ldr	r5, [r4, #0]
 8007e84:	f015 0506 	ands.w	r5, r5, #6
 8007e88:	d106      	bne.n	8007e98 <_printf_common+0x48>
 8007e8a:	f104 0a19 	add.w	sl, r4, #25
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	6832      	ldr	r2, [r6, #0]
 8007e92:	1a9b      	subs	r3, r3, r2
 8007e94:	42ab      	cmp	r3, r5
 8007e96:	dc2b      	bgt.n	8007ef0 <_printf_common+0xa0>
 8007e98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e9c:	6822      	ldr	r2, [r4, #0]
 8007e9e:	3b00      	subs	r3, #0
 8007ea0:	bf18      	it	ne
 8007ea2:	2301      	movne	r3, #1
 8007ea4:	0692      	lsls	r2, r2, #26
 8007ea6:	d430      	bmi.n	8007f0a <_printf_common+0xba>
 8007ea8:	4641      	mov	r1, r8
 8007eaa:	4638      	mov	r0, r7
 8007eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007eb0:	47c8      	blx	r9
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d023      	beq.n	8007efe <_printf_common+0xae>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	6922      	ldr	r2, [r4, #16]
 8007eba:	f003 0306 	and.w	r3, r3, #6
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	bf14      	ite	ne
 8007ec2:	2500      	movne	r5, #0
 8007ec4:	6833      	ldreq	r3, [r6, #0]
 8007ec6:	f04f 0600 	mov.w	r6, #0
 8007eca:	bf08      	it	eq
 8007ecc:	68e5      	ldreq	r5, [r4, #12]
 8007ece:	f104 041a 	add.w	r4, r4, #26
 8007ed2:	bf08      	it	eq
 8007ed4:	1aed      	subeq	r5, r5, r3
 8007ed6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007eda:	bf08      	it	eq
 8007edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	bfc4      	itt	gt
 8007ee4:	1a9b      	subgt	r3, r3, r2
 8007ee6:	18ed      	addgt	r5, r5, r3
 8007ee8:	42b5      	cmp	r5, r6
 8007eea:	d11a      	bne.n	8007f22 <_printf_common+0xd2>
 8007eec:	2000      	movs	r0, #0
 8007eee:	e008      	b.n	8007f02 <_printf_common+0xb2>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	4652      	mov	r2, sl
 8007ef4:	4641      	mov	r1, r8
 8007ef6:	4638      	mov	r0, r7
 8007ef8:	47c8      	blx	r9
 8007efa:	3001      	adds	r0, #1
 8007efc:	d103      	bne.n	8007f06 <_printf_common+0xb6>
 8007efe:	f04f 30ff 	mov.w	r0, #4294967295
 8007f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f06:	3501      	adds	r5, #1
 8007f08:	e7c1      	b.n	8007e8e <_printf_common+0x3e>
 8007f0a:	2030      	movs	r0, #48	@ 0x30
 8007f0c:	18e1      	adds	r1, r4, r3
 8007f0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f18:	4422      	add	r2, r4
 8007f1a:	3302      	adds	r3, #2
 8007f1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f20:	e7c2      	b.n	8007ea8 <_printf_common+0x58>
 8007f22:	2301      	movs	r3, #1
 8007f24:	4622      	mov	r2, r4
 8007f26:	4641      	mov	r1, r8
 8007f28:	4638      	mov	r0, r7
 8007f2a:	47c8      	blx	r9
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d0e6      	beq.n	8007efe <_printf_common+0xae>
 8007f30:	3601      	adds	r6, #1
 8007f32:	e7d9      	b.n	8007ee8 <_printf_common+0x98>

08007f34 <_printf_i>:
 8007f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f38:	7e0f      	ldrb	r7, [r1, #24]
 8007f3a:	4691      	mov	r9, r2
 8007f3c:	2f78      	cmp	r7, #120	@ 0x78
 8007f3e:	4680      	mov	r8, r0
 8007f40:	460c      	mov	r4, r1
 8007f42:	469a      	mov	sl, r3
 8007f44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f4a:	d807      	bhi.n	8007f5c <_printf_i+0x28>
 8007f4c:	2f62      	cmp	r7, #98	@ 0x62
 8007f4e:	d80a      	bhi.n	8007f66 <_printf_i+0x32>
 8007f50:	2f00      	cmp	r7, #0
 8007f52:	f000 80d1 	beq.w	80080f8 <_printf_i+0x1c4>
 8007f56:	2f58      	cmp	r7, #88	@ 0x58
 8007f58:	f000 80b8 	beq.w	80080cc <_printf_i+0x198>
 8007f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f64:	e03a      	b.n	8007fdc <_printf_i+0xa8>
 8007f66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f6a:	2b15      	cmp	r3, #21
 8007f6c:	d8f6      	bhi.n	8007f5c <_printf_i+0x28>
 8007f6e:	a101      	add	r1, pc, #4	@ (adr r1, 8007f74 <_printf_i+0x40>)
 8007f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f74:	08007fcd 	.word	0x08007fcd
 8007f78:	08007fe1 	.word	0x08007fe1
 8007f7c:	08007f5d 	.word	0x08007f5d
 8007f80:	08007f5d 	.word	0x08007f5d
 8007f84:	08007f5d 	.word	0x08007f5d
 8007f88:	08007f5d 	.word	0x08007f5d
 8007f8c:	08007fe1 	.word	0x08007fe1
 8007f90:	08007f5d 	.word	0x08007f5d
 8007f94:	08007f5d 	.word	0x08007f5d
 8007f98:	08007f5d 	.word	0x08007f5d
 8007f9c:	08007f5d 	.word	0x08007f5d
 8007fa0:	080080df 	.word	0x080080df
 8007fa4:	0800800b 	.word	0x0800800b
 8007fa8:	08008099 	.word	0x08008099
 8007fac:	08007f5d 	.word	0x08007f5d
 8007fb0:	08007f5d 	.word	0x08007f5d
 8007fb4:	08008101 	.word	0x08008101
 8007fb8:	08007f5d 	.word	0x08007f5d
 8007fbc:	0800800b 	.word	0x0800800b
 8007fc0:	08007f5d 	.word	0x08007f5d
 8007fc4:	08007f5d 	.word	0x08007f5d
 8007fc8:	080080a1 	.word	0x080080a1
 8007fcc:	6833      	ldr	r3, [r6, #0]
 8007fce:	1d1a      	adds	r2, r3, #4
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6032      	str	r2, [r6, #0]
 8007fd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e09c      	b.n	800811a <_printf_i+0x1e6>
 8007fe0:	6833      	ldr	r3, [r6, #0]
 8007fe2:	6820      	ldr	r0, [r4, #0]
 8007fe4:	1d19      	adds	r1, r3, #4
 8007fe6:	6031      	str	r1, [r6, #0]
 8007fe8:	0606      	lsls	r6, r0, #24
 8007fea:	d501      	bpl.n	8007ff0 <_printf_i+0xbc>
 8007fec:	681d      	ldr	r5, [r3, #0]
 8007fee:	e003      	b.n	8007ff8 <_printf_i+0xc4>
 8007ff0:	0645      	lsls	r5, r0, #25
 8007ff2:	d5fb      	bpl.n	8007fec <_printf_i+0xb8>
 8007ff4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ff8:	2d00      	cmp	r5, #0
 8007ffa:	da03      	bge.n	8008004 <_printf_i+0xd0>
 8007ffc:	232d      	movs	r3, #45	@ 0x2d
 8007ffe:	426d      	negs	r5, r5
 8008000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008004:	230a      	movs	r3, #10
 8008006:	4858      	ldr	r0, [pc, #352]	@ (8008168 <_printf_i+0x234>)
 8008008:	e011      	b.n	800802e <_printf_i+0xfa>
 800800a:	6821      	ldr	r1, [r4, #0]
 800800c:	6833      	ldr	r3, [r6, #0]
 800800e:	0608      	lsls	r0, r1, #24
 8008010:	f853 5b04 	ldr.w	r5, [r3], #4
 8008014:	d402      	bmi.n	800801c <_printf_i+0xe8>
 8008016:	0649      	lsls	r1, r1, #25
 8008018:	bf48      	it	mi
 800801a:	b2ad      	uxthmi	r5, r5
 800801c:	2f6f      	cmp	r7, #111	@ 0x6f
 800801e:	6033      	str	r3, [r6, #0]
 8008020:	bf14      	ite	ne
 8008022:	230a      	movne	r3, #10
 8008024:	2308      	moveq	r3, #8
 8008026:	4850      	ldr	r0, [pc, #320]	@ (8008168 <_printf_i+0x234>)
 8008028:	2100      	movs	r1, #0
 800802a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800802e:	6866      	ldr	r6, [r4, #4]
 8008030:	2e00      	cmp	r6, #0
 8008032:	60a6      	str	r6, [r4, #8]
 8008034:	db05      	blt.n	8008042 <_printf_i+0x10e>
 8008036:	6821      	ldr	r1, [r4, #0]
 8008038:	432e      	orrs	r6, r5
 800803a:	f021 0104 	bic.w	r1, r1, #4
 800803e:	6021      	str	r1, [r4, #0]
 8008040:	d04b      	beq.n	80080da <_printf_i+0x1a6>
 8008042:	4616      	mov	r6, r2
 8008044:	fbb5 f1f3 	udiv	r1, r5, r3
 8008048:	fb03 5711 	mls	r7, r3, r1, r5
 800804c:	5dc7      	ldrb	r7, [r0, r7]
 800804e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008052:	462f      	mov	r7, r5
 8008054:	42bb      	cmp	r3, r7
 8008056:	460d      	mov	r5, r1
 8008058:	d9f4      	bls.n	8008044 <_printf_i+0x110>
 800805a:	2b08      	cmp	r3, #8
 800805c:	d10b      	bne.n	8008076 <_printf_i+0x142>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	07df      	lsls	r7, r3, #31
 8008062:	d508      	bpl.n	8008076 <_printf_i+0x142>
 8008064:	6923      	ldr	r3, [r4, #16]
 8008066:	6861      	ldr	r1, [r4, #4]
 8008068:	4299      	cmp	r1, r3
 800806a:	bfde      	ittt	le
 800806c:	2330      	movle	r3, #48	@ 0x30
 800806e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008072:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008076:	1b92      	subs	r2, r2, r6
 8008078:	6122      	str	r2, [r4, #16]
 800807a:	464b      	mov	r3, r9
 800807c:	4621      	mov	r1, r4
 800807e:	4640      	mov	r0, r8
 8008080:	f8cd a000 	str.w	sl, [sp]
 8008084:	aa03      	add	r2, sp, #12
 8008086:	f7ff fee3 	bl	8007e50 <_printf_common>
 800808a:	3001      	adds	r0, #1
 800808c:	d14a      	bne.n	8008124 <_printf_i+0x1f0>
 800808e:	f04f 30ff 	mov.w	r0, #4294967295
 8008092:	b004      	add	sp, #16
 8008094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	f043 0320 	orr.w	r3, r3, #32
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	2778      	movs	r7, #120	@ 0x78
 80080a2:	4832      	ldr	r0, [pc, #200]	@ (800816c <_printf_i+0x238>)
 80080a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	6831      	ldr	r1, [r6, #0]
 80080ac:	061f      	lsls	r7, r3, #24
 80080ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80080b2:	d402      	bmi.n	80080ba <_printf_i+0x186>
 80080b4:	065f      	lsls	r7, r3, #25
 80080b6:	bf48      	it	mi
 80080b8:	b2ad      	uxthmi	r5, r5
 80080ba:	6031      	str	r1, [r6, #0]
 80080bc:	07d9      	lsls	r1, r3, #31
 80080be:	bf44      	itt	mi
 80080c0:	f043 0320 	orrmi.w	r3, r3, #32
 80080c4:	6023      	strmi	r3, [r4, #0]
 80080c6:	b11d      	cbz	r5, 80080d0 <_printf_i+0x19c>
 80080c8:	2310      	movs	r3, #16
 80080ca:	e7ad      	b.n	8008028 <_printf_i+0xf4>
 80080cc:	4826      	ldr	r0, [pc, #152]	@ (8008168 <_printf_i+0x234>)
 80080ce:	e7e9      	b.n	80080a4 <_printf_i+0x170>
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	f023 0320 	bic.w	r3, r3, #32
 80080d6:	6023      	str	r3, [r4, #0]
 80080d8:	e7f6      	b.n	80080c8 <_printf_i+0x194>
 80080da:	4616      	mov	r6, r2
 80080dc:	e7bd      	b.n	800805a <_printf_i+0x126>
 80080de:	6833      	ldr	r3, [r6, #0]
 80080e0:	6825      	ldr	r5, [r4, #0]
 80080e2:	1d18      	adds	r0, r3, #4
 80080e4:	6961      	ldr	r1, [r4, #20]
 80080e6:	6030      	str	r0, [r6, #0]
 80080e8:	062e      	lsls	r6, r5, #24
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	d501      	bpl.n	80080f2 <_printf_i+0x1be>
 80080ee:	6019      	str	r1, [r3, #0]
 80080f0:	e002      	b.n	80080f8 <_printf_i+0x1c4>
 80080f2:	0668      	lsls	r0, r5, #25
 80080f4:	d5fb      	bpl.n	80080ee <_printf_i+0x1ba>
 80080f6:	8019      	strh	r1, [r3, #0]
 80080f8:	2300      	movs	r3, #0
 80080fa:	4616      	mov	r6, r2
 80080fc:	6123      	str	r3, [r4, #16]
 80080fe:	e7bc      	b.n	800807a <_printf_i+0x146>
 8008100:	6833      	ldr	r3, [r6, #0]
 8008102:	2100      	movs	r1, #0
 8008104:	1d1a      	adds	r2, r3, #4
 8008106:	6032      	str	r2, [r6, #0]
 8008108:	681e      	ldr	r6, [r3, #0]
 800810a:	6862      	ldr	r2, [r4, #4]
 800810c:	4630      	mov	r0, r6
 800810e:	f000 fd70 	bl	8008bf2 <memchr>
 8008112:	b108      	cbz	r0, 8008118 <_printf_i+0x1e4>
 8008114:	1b80      	subs	r0, r0, r6
 8008116:	6060      	str	r0, [r4, #4]
 8008118:	6863      	ldr	r3, [r4, #4]
 800811a:	6123      	str	r3, [r4, #16]
 800811c:	2300      	movs	r3, #0
 800811e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008122:	e7aa      	b.n	800807a <_printf_i+0x146>
 8008124:	4632      	mov	r2, r6
 8008126:	4649      	mov	r1, r9
 8008128:	4640      	mov	r0, r8
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	47d0      	blx	sl
 800812e:	3001      	adds	r0, #1
 8008130:	d0ad      	beq.n	800808e <_printf_i+0x15a>
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	079b      	lsls	r3, r3, #30
 8008136:	d413      	bmi.n	8008160 <_printf_i+0x22c>
 8008138:	68e0      	ldr	r0, [r4, #12]
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	4298      	cmp	r0, r3
 800813e:	bfb8      	it	lt
 8008140:	4618      	movlt	r0, r3
 8008142:	e7a6      	b.n	8008092 <_printf_i+0x15e>
 8008144:	2301      	movs	r3, #1
 8008146:	4632      	mov	r2, r6
 8008148:	4649      	mov	r1, r9
 800814a:	4640      	mov	r0, r8
 800814c:	47d0      	blx	sl
 800814e:	3001      	adds	r0, #1
 8008150:	d09d      	beq.n	800808e <_printf_i+0x15a>
 8008152:	3501      	adds	r5, #1
 8008154:	68e3      	ldr	r3, [r4, #12]
 8008156:	9903      	ldr	r1, [sp, #12]
 8008158:	1a5b      	subs	r3, r3, r1
 800815a:	42ab      	cmp	r3, r5
 800815c:	dcf2      	bgt.n	8008144 <_printf_i+0x210>
 800815e:	e7eb      	b.n	8008138 <_printf_i+0x204>
 8008160:	2500      	movs	r5, #0
 8008162:	f104 0619 	add.w	r6, r4, #25
 8008166:	e7f5      	b.n	8008154 <_printf_i+0x220>
 8008168:	0800b744 	.word	0x0800b744
 800816c:	0800b755 	.word	0x0800b755

08008170 <_scanf_float>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	b087      	sub	sp, #28
 8008176:	9303      	str	r3, [sp, #12]
 8008178:	688b      	ldr	r3, [r1, #8]
 800817a:	4691      	mov	r9, r2
 800817c:	1e5a      	subs	r2, r3, #1
 800817e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008182:	bf82      	ittt	hi
 8008184:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008188:	eb03 0b05 	addhi.w	fp, r3, r5
 800818c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008190:	460a      	mov	r2, r1
 8008192:	f04f 0500 	mov.w	r5, #0
 8008196:	bf88      	it	hi
 8008198:	608b      	strhi	r3, [r1, #8]
 800819a:	680b      	ldr	r3, [r1, #0]
 800819c:	4680      	mov	r8, r0
 800819e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80081a2:	f842 3b1c 	str.w	r3, [r2], #28
 80081a6:	460c      	mov	r4, r1
 80081a8:	bf98      	it	ls
 80081aa:	f04f 0b00 	movls.w	fp, #0
 80081ae:	4616      	mov	r6, r2
 80081b0:	46aa      	mov	sl, r5
 80081b2:	462f      	mov	r7, r5
 80081b4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80081b8:	9201      	str	r2, [sp, #4]
 80081ba:	9502      	str	r5, [sp, #8]
 80081bc:	68a2      	ldr	r2, [r4, #8]
 80081be:	b15a      	cbz	r2, 80081d8 <_scanf_float+0x68>
 80081c0:	f8d9 3000 	ldr.w	r3, [r9]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b4e      	cmp	r3, #78	@ 0x4e
 80081c8:	d862      	bhi.n	8008290 <_scanf_float+0x120>
 80081ca:	2b40      	cmp	r3, #64	@ 0x40
 80081cc:	d83a      	bhi.n	8008244 <_scanf_float+0xd4>
 80081ce:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80081d2:	b2c8      	uxtb	r0, r1
 80081d4:	280e      	cmp	r0, #14
 80081d6:	d938      	bls.n	800824a <_scanf_float+0xda>
 80081d8:	b11f      	cbz	r7, 80081e2 <_scanf_float+0x72>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081e6:	f1ba 0f01 	cmp.w	sl, #1
 80081ea:	f200 8114 	bhi.w	8008416 <_scanf_float+0x2a6>
 80081ee:	9b01      	ldr	r3, [sp, #4]
 80081f0:	429e      	cmp	r6, r3
 80081f2:	f200 8105 	bhi.w	8008400 <_scanf_float+0x290>
 80081f6:	2001      	movs	r0, #1
 80081f8:	b007      	add	sp, #28
 80081fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008202:	2a0d      	cmp	r2, #13
 8008204:	d8e8      	bhi.n	80081d8 <_scanf_float+0x68>
 8008206:	a101      	add	r1, pc, #4	@ (adr r1, 800820c <_scanf_float+0x9c>)
 8008208:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800820c:	08008355 	.word	0x08008355
 8008210:	080081d9 	.word	0x080081d9
 8008214:	080081d9 	.word	0x080081d9
 8008218:	080081d9 	.word	0x080081d9
 800821c:	080083b1 	.word	0x080083b1
 8008220:	0800838b 	.word	0x0800838b
 8008224:	080081d9 	.word	0x080081d9
 8008228:	080081d9 	.word	0x080081d9
 800822c:	08008363 	.word	0x08008363
 8008230:	080081d9 	.word	0x080081d9
 8008234:	080081d9 	.word	0x080081d9
 8008238:	080081d9 	.word	0x080081d9
 800823c:	080081d9 	.word	0x080081d9
 8008240:	0800831f 	.word	0x0800831f
 8008244:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008248:	e7db      	b.n	8008202 <_scanf_float+0x92>
 800824a:	290e      	cmp	r1, #14
 800824c:	d8c4      	bhi.n	80081d8 <_scanf_float+0x68>
 800824e:	a001      	add	r0, pc, #4	@ (adr r0, 8008254 <_scanf_float+0xe4>)
 8008250:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008254:	0800830f 	.word	0x0800830f
 8008258:	080081d9 	.word	0x080081d9
 800825c:	0800830f 	.word	0x0800830f
 8008260:	0800839f 	.word	0x0800839f
 8008264:	080081d9 	.word	0x080081d9
 8008268:	080082b1 	.word	0x080082b1
 800826c:	080082f5 	.word	0x080082f5
 8008270:	080082f5 	.word	0x080082f5
 8008274:	080082f5 	.word	0x080082f5
 8008278:	080082f5 	.word	0x080082f5
 800827c:	080082f5 	.word	0x080082f5
 8008280:	080082f5 	.word	0x080082f5
 8008284:	080082f5 	.word	0x080082f5
 8008288:	080082f5 	.word	0x080082f5
 800828c:	080082f5 	.word	0x080082f5
 8008290:	2b6e      	cmp	r3, #110	@ 0x6e
 8008292:	d809      	bhi.n	80082a8 <_scanf_float+0x138>
 8008294:	2b60      	cmp	r3, #96	@ 0x60
 8008296:	d8b2      	bhi.n	80081fe <_scanf_float+0x8e>
 8008298:	2b54      	cmp	r3, #84	@ 0x54
 800829a:	d07b      	beq.n	8008394 <_scanf_float+0x224>
 800829c:	2b59      	cmp	r3, #89	@ 0x59
 800829e:	d19b      	bne.n	80081d8 <_scanf_float+0x68>
 80082a0:	2d07      	cmp	r5, #7
 80082a2:	d199      	bne.n	80081d8 <_scanf_float+0x68>
 80082a4:	2508      	movs	r5, #8
 80082a6:	e02f      	b.n	8008308 <_scanf_float+0x198>
 80082a8:	2b74      	cmp	r3, #116	@ 0x74
 80082aa:	d073      	beq.n	8008394 <_scanf_float+0x224>
 80082ac:	2b79      	cmp	r3, #121	@ 0x79
 80082ae:	e7f6      	b.n	800829e <_scanf_float+0x12e>
 80082b0:	6821      	ldr	r1, [r4, #0]
 80082b2:	05c8      	lsls	r0, r1, #23
 80082b4:	d51e      	bpl.n	80082f4 <_scanf_float+0x184>
 80082b6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80082ba:	6021      	str	r1, [r4, #0]
 80082bc:	3701      	adds	r7, #1
 80082be:	f1bb 0f00 	cmp.w	fp, #0
 80082c2:	d003      	beq.n	80082cc <_scanf_float+0x15c>
 80082c4:	3201      	adds	r2, #1
 80082c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082ca:	60a2      	str	r2, [r4, #8]
 80082cc:	68a3      	ldr	r3, [r4, #8]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	60a3      	str	r3, [r4, #8]
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	3301      	adds	r3, #1
 80082d6:	6123      	str	r3, [r4, #16]
 80082d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80082dc:	3b01      	subs	r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f8c9 3004 	str.w	r3, [r9, #4]
 80082e4:	f340 8083 	ble.w	80083ee <_scanf_float+0x27e>
 80082e8:	f8d9 3000 	ldr.w	r3, [r9]
 80082ec:	3301      	adds	r3, #1
 80082ee:	f8c9 3000 	str.w	r3, [r9]
 80082f2:	e763      	b.n	80081bc <_scanf_float+0x4c>
 80082f4:	eb1a 0105 	adds.w	r1, sl, r5
 80082f8:	f47f af6e 	bne.w	80081d8 <_scanf_float+0x68>
 80082fc:	460d      	mov	r5, r1
 80082fe:	468a      	mov	sl, r1
 8008300:	6822      	ldr	r2, [r4, #0]
 8008302:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008306:	6022      	str	r2, [r4, #0]
 8008308:	f806 3b01 	strb.w	r3, [r6], #1
 800830c:	e7de      	b.n	80082cc <_scanf_float+0x15c>
 800830e:	6822      	ldr	r2, [r4, #0]
 8008310:	0610      	lsls	r0, r2, #24
 8008312:	f57f af61 	bpl.w	80081d8 <_scanf_float+0x68>
 8008316:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800831a:	6022      	str	r2, [r4, #0]
 800831c:	e7f4      	b.n	8008308 <_scanf_float+0x198>
 800831e:	f1ba 0f00 	cmp.w	sl, #0
 8008322:	d10c      	bne.n	800833e <_scanf_float+0x1ce>
 8008324:	b977      	cbnz	r7, 8008344 <_scanf_float+0x1d4>
 8008326:	6822      	ldr	r2, [r4, #0]
 8008328:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800832c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008330:	d108      	bne.n	8008344 <_scanf_float+0x1d4>
 8008332:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008336:	f04f 0a01 	mov.w	sl, #1
 800833a:	6022      	str	r2, [r4, #0]
 800833c:	e7e4      	b.n	8008308 <_scanf_float+0x198>
 800833e:	f1ba 0f02 	cmp.w	sl, #2
 8008342:	d051      	beq.n	80083e8 <_scanf_float+0x278>
 8008344:	2d01      	cmp	r5, #1
 8008346:	d002      	beq.n	800834e <_scanf_float+0x1de>
 8008348:	2d04      	cmp	r5, #4
 800834a:	f47f af45 	bne.w	80081d8 <_scanf_float+0x68>
 800834e:	3501      	adds	r5, #1
 8008350:	b2ed      	uxtb	r5, r5
 8008352:	e7d9      	b.n	8008308 <_scanf_float+0x198>
 8008354:	f1ba 0f01 	cmp.w	sl, #1
 8008358:	f47f af3e 	bne.w	80081d8 <_scanf_float+0x68>
 800835c:	f04f 0a02 	mov.w	sl, #2
 8008360:	e7d2      	b.n	8008308 <_scanf_float+0x198>
 8008362:	b975      	cbnz	r5, 8008382 <_scanf_float+0x212>
 8008364:	2f00      	cmp	r7, #0
 8008366:	f47f af38 	bne.w	80081da <_scanf_float+0x6a>
 800836a:	6822      	ldr	r2, [r4, #0]
 800836c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008370:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008374:	f040 80ff 	bne.w	8008576 <_scanf_float+0x406>
 8008378:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800837c:	2501      	movs	r5, #1
 800837e:	6022      	str	r2, [r4, #0]
 8008380:	e7c2      	b.n	8008308 <_scanf_float+0x198>
 8008382:	2d03      	cmp	r5, #3
 8008384:	d0e3      	beq.n	800834e <_scanf_float+0x1de>
 8008386:	2d05      	cmp	r5, #5
 8008388:	e7df      	b.n	800834a <_scanf_float+0x1da>
 800838a:	2d02      	cmp	r5, #2
 800838c:	f47f af24 	bne.w	80081d8 <_scanf_float+0x68>
 8008390:	2503      	movs	r5, #3
 8008392:	e7b9      	b.n	8008308 <_scanf_float+0x198>
 8008394:	2d06      	cmp	r5, #6
 8008396:	f47f af1f 	bne.w	80081d8 <_scanf_float+0x68>
 800839a:	2507      	movs	r5, #7
 800839c:	e7b4      	b.n	8008308 <_scanf_float+0x198>
 800839e:	6822      	ldr	r2, [r4, #0]
 80083a0:	0591      	lsls	r1, r2, #22
 80083a2:	f57f af19 	bpl.w	80081d8 <_scanf_float+0x68>
 80083a6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80083aa:	6022      	str	r2, [r4, #0]
 80083ac:	9702      	str	r7, [sp, #8]
 80083ae:	e7ab      	b.n	8008308 <_scanf_float+0x198>
 80083b0:	6822      	ldr	r2, [r4, #0]
 80083b2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80083b6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80083ba:	d005      	beq.n	80083c8 <_scanf_float+0x258>
 80083bc:	0550      	lsls	r0, r2, #21
 80083be:	f57f af0b 	bpl.w	80081d8 <_scanf_float+0x68>
 80083c2:	2f00      	cmp	r7, #0
 80083c4:	f000 80d7 	beq.w	8008576 <_scanf_float+0x406>
 80083c8:	0591      	lsls	r1, r2, #22
 80083ca:	bf58      	it	pl
 80083cc:	9902      	ldrpl	r1, [sp, #8]
 80083ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083d2:	bf58      	it	pl
 80083d4:	1a79      	subpl	r1, r7, r1
 80083d6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80083da:	f04f 0700 	mov.w	r7, #0
 80083de:	bf58      	it	pl
 80083e0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80083e4:	6022      	str	r2, [r4, #0]
 80083e6:	e78f      	b.n	8008308 <_scanf_float+0x198>
 80083e8:	f04f 0a03 	mov.w	sl, #3
 80083ec:	e78c      	b.n	8008308 <_scanf_float+0x198>
 80083ee:	4649      	mov	r1, r9
 80083f0:	4640      	mov	r0, r8
 80083f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80083f6:	4798      	blx	r3
 80083f8:	2800      	cmp	r0, #0
 80083fa:	f43f aedf 	beq.w	80081bc <_scanf_float+0x4c>
 80083fe:	e6eb      	b.n	80081d8 <_scanf_float+0x68>
 8008400:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008404:	464a      	mov	r2, r9
 8008406:	4640      	mov	r0, r8
 8008408:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800840c:	4798      	blx	r3
 800840e:	6923      	ldr	r3, [r4, #16]
 8008410:	3b01      	subs	r3, #1
 8008412:	6123      	str	r3, [r4, #16]
 8008414:	e6eb      	b.n	80081ee <_scanf_float+0x7e>
 8008416:	1e6b      	subs	r3, r5, #1
 8008418:	2b06      	cmp	r3, #6
 800841a:	d824      	bhi.n	8008466 <_scanf_float+0x2f6>
 800841c:	2d02      	cmp	r5, #2
 800841e:	d836      	bhi.n	800848e <_scanf_float+0x31e>
 8008420:	9b01      	ldr	r3, [sp, #4]
 8008422:	429e      	cmp	r6, r3
 8008424:	f67f aee7 	bls.w	80081f6 <_scanf_float+0x86>
 8008428:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800842c:	464a      	mov	r2, r9
 800842e:	4640      	mov	r0, r8
 8008430:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008434:	4798      	blx	r3
 8008436:	6923      	ldr	r3, [r4, #16]
 8008438:	3b01      	subs	r3, #1
 800843a:	6123      	str	r3, [r4, #16]
 800843c:	e7f0      	b.n	8008420 <_scanf_float+0x2b0>
 800843e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008442:	464a      	mov	r2, r9
 8008444:	4640      	mov	r0, r8
 8008446:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800844a:	4798      	blx	r3
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	3b01      	subs	r3, #1
 8008450:	6123      	str	r3, [r4, #16]
 8008452:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008456:	fa5f fa8a 	uxtb.w	sl, sl
 800845a:	f1ba 0f02 	cmp.w	sl, #2
 800845e:	d1ee      	bne.n	800843e <_scanf_float+0x2ce>
 8008460:	3d03      	subs	r5, #3
 8008462:	b2ed      	uxtb	r5, r5
 8008464:	1b76      	subs	r6, r6, r5
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	05da      	lsls	r2, r3, #23
 800846a:	d530      	bpl.n	80084ce <_scanf_float+0x35e>
 800846c:	055b      	lsls	r3, r3, #21
 800846e:	d511      	bpl.n	8008494 <_scanf_float+0x324>
 8008470:	9b01      	ldr	r3, [sp, #4]
 8008472:	429e      	cmp	r6, r3
 8008474:	f67f aebf 	bls.w	80081f6 <_scanf_float+0x86>
 8008478:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800847c:	464a      	mov	r2, r9
 800847e:	4640      	mov	r0, r8
 8008480:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008484:	4798      	blx	r3
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	3b01      	subs	r3, #1
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	e7f0      	b.n	8008470 <_scanf_float+0x300>
 800848e:	46aa      	mov	sl, r5
 8008490:	46b3      	mov	fp, r6
 8008492:	e7de      	b.n	8008452 <_scanf_float+0x2e2>
 8008494:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008498:	6923      	ldr	r3, [r4, #16]
 800849a:	2965      	cmp	r1, #101	@ 0x65
 800849c:	f103 33ff 	add.w	r3, r3, #4294967295
 80084a0:	f106 35ff 	add.w	r5, r6, #4294967295
 80084a4:	6123      	str	r3, [r4, #16]
 80084a6:	d00c      	beq.n	80084c2 <_scanf_float+0x352>
 80084a8:	2945      	cmp	r1, #69	@ 0x45
 80084aa:	d00a      	beq.n	80084c2 <_scanf_float+0x352>
 80084ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084b0:	464a      	mov	r2, r9
 80084b2:	4640      	mov	r0, r8
 80084b4:	4798      	blx	r3
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80084bc:	3b01      	subs	r3, #1
 80084be:	1eb5      	subs	r5, r6, #2
 80084c0:	6123      	str	r3, [r4, #16]
 80084c2:	464a      	mov	r2, r9
 80084c4:	4640      	mov	r0, r8
 80084c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084ca:	4798      	blx	r3
 80084cc:	462e      	mov	r6, r5
 80084ce:	6822      	ldr	r2, [r4, #0]
 80084d0:	f012 0210 	ands.w	r2, r2, #16
 80084d4:	d001      	beq.n	80084da <_scanf_float+0x36a>
 80084d6:	2000      	movs	r0, #0
 80084d8:	e68e      	b.n	80081f8 <_scanf_float+0x88>
 80084da:	7032      	strb	r2, [r6, #0]
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80084e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084e6:	d125      	bne.n	8008534 <_scanf_float+0x3c4>
 80084e8:	9b02      	ldr	r3, [sp, #8]
 80084ea:	429f      	cmp	r7, r3
 80084ec:	d00a      	beq.n	8008504 <_scanf_float+0x394>
 80084ee:	1bda      	subs	r2, r3, r7
 80084f0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80084f4:	429e      	cmp	r6, r3
 80084f6:	bf28      	it	cs
 80084f8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80084fc:	4630      	mov	r0, r6
 80084fe:	491f      	ldr	r1, [pc, #124]	@ (800857c <_scanf_float+0x40c>)
 8008500:	f000 f9a8 	bl	8008854 <siprintf>
 8008504:	2200      	movs	r2, #0
 8008506:	4640      	mov	r0, r8
 8008508:	9901      	ldr	r1, [sp, #4]
 800850a:	f7ff f9c5 	bl	8007898 <_strtod_r>
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	6825      	ldr	r5, [r4, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f015 0f02 	tst.w	r5, #2
 8008518:	4606      	mov	r6, r0
 800851a:	460f      	mov	r7, r1
 800851c:	f103 0204 	add.w	r2, r3, #4
 8008520:	d015      	beq.n	800854e <_scanf_float+0x3de>
 8008522:	9903      	ldr	r1, [sp, #12]
 8008524:	600a      	str	r2, [r1, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	e9c3 6700 	strd	r6, r7, [r3]
 800852c:	68e3      	ldr	r3, [r4, #12]
 800852e:	3301      	adds	r3, #1
 8008530:	60e3      	str	r3, [r4, #12]
 8008532:	e7d0      	b.n	80084d6 <_scanf_float+0x366>
 8008534:	9b04      	ldr	r3, [sp, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0e4      	beq.n	8008504 <_scanf_float+0x394>
 800853a:	9905      	ldr	r1, [sp, #20]
 800853c:	230a      	movs	r3, #10
 800853e:	4640      	mov	r0, r8
 8008540:	3101      	adds	r1, #1
 8008542:	f002 fa87 	bl	800aa54 <_strtol_r>
 8008546:	9b04      	ldr	r3, [sp, #16]
 8008548:	9e05      	ldr	r6, [sp, #20]
 800854a:	1ac2      	subs	r2, r0, r3
 800854c:	e7d0      	b.n	80084f0 <_scanf_float+0x380>
 800854e:	076d      	lsls	r5, r5, #29
 8008550:	d4e7      	bmi.n	8008522 <_scanf_float+0x3b2>
 8008552:	9d03      	ldr	r5, [sp, #12]
 8008554:	602a      	str	r2, [r5, #0]
 8008556:	681d      	ldr	r5, [r3, #0]
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	f7f8 fa60 	bl	8000a20 <__aeabi_dcmpun>
 8008560:	b120      	cbz	r0, 800856c <_scanf_float+0x3fc>
 8008562:	4807      	ldr	r0, [pc, #28]	@ (8008580 <_scanf_float+0x410>)
 8008564:	f000 fb68 	bl	8008c38 <nanf>
 8008568:	6028      	str	r0, [r5, #0]
 800856a:	e7df      	b.n	800852c <_scanf_float+0x3bc>
 800856c:	4630      	mov	r0, r6
 800856e:	4639      	mov	r1, r7
 8008570:	f7f8 fab4 	bl	8000adc <__aeabi_d2f>
 8008574:	e7f8      	b.n	8008568 <_scanf_float+0x3f8>
 8008576:	2700      	movs	r7, #0
 8008578:	e633      	b.n	80081e2 <_scanf_float+0x72>
 800857a:	bf00      	nop
 800857c:	0800b766 	.word	0x0800b766
 8008580:	0800b905 	.word	0x0800b905

08008584 <std>:
 8008584:	2300      	movs	r3, #0
 8008586:	b510      	push	{r4, lr}
 8008588:	4604      	mov	r4, r0
 800858a:	e9c0 3300 	strd	r3, r3, [r0]
 800858e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008592:	6083      	str	r3, [r0, #8]
 8008594:	8181      	strh	r1, [r0, #12]
 8008596:	6643      	str	r3, [r0, #100]	@ 0x64
 8008598:	81c2      	strh	r2, [r0, #14]
 800859a:	6183      	str	r3, [r0, #24]
 800859c:	4619      	mov	r1, r3
 800859e:	2208      	movs	r2, #8
 80085a0:	305c      	adds	r0, #92	@ 0x5c
 80085a2:	f000 fa51 	bl	8008a48 <memset>
 80085a6:	4b0d      	ldr	r3, [pc, #52]	@ (80085dc <std+0x58>)
 80085a8:	6224      	str	r4, [r4, #32]
 80085aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80085ac:	4b0c      	ldr	r3, [pc, #48]	@ (80085e0 <std+0x5c>)
 80085ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085b0:	4b0c      	ldr	r3, [pc, #48]	@ (80085e4 <std+0x60>)
 80085b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085b4:	4b0c      	ldr	r3, [pc, #48]	@ (80085e8 <std+0x64>)
 80085b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80085b8:	4b0c      	ldr	r3, [pc, #48]	@ (80085ec <std+0x68>)
 80085ba:	429c      	cmp	r4, r3
 80085bc:	d006      	beq.n	80085cc <std+0x48>
 80085be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085c2:	4294      	cmp	r4, r2
 80085c4:	d002      	beq.n	80085cc <std+0x48>
 80085c6:	33d0      	adds	r3, #208	@ 0xd0
 80085c8:	429c      	cmp	r4, r3
 80085ca:	d105      	bne.n	80085d8 <std+0x54>
 80085cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80085d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d4:	f000 bb02 	b.w	8008bdc <__retarget_lock_init_recursive>
 80085d8:	bd10      	pop	{r4, pc}
 80085da:	bf00      	nop
 80085dc:	08008899 	.word	0x08008899
 80085e0:	080088bb 	.word	0x080088bb
 80085e4:	080088f3 	.word	0x080088f3
 80085e8:	08008917 	.word	0x08008917
 80085ec:	200006fc 	.word	0x200006fc

080085f0 <stdio_exit_handler>:
 80085f0:	4a02      	ldr	r2, [pc, #8]	@ (80085fc <stdio_exit_handler+0xc>)
 80085f2:	4903      	ldr	r1, [pc, #12]	@ (8008600 <stdio_exit_handler+0x10>)
 80085f4:	4803      	ldr	r0, [pc, #12]	@ (8008604 <stdio_exit_handler+0x14>)
 80085f6:	f000 b869 	b.w	80086cc <_fwalk_sglue>
 80085fa:	bf00      	nop
 80085fc:	20000044 	.word	0x20000044
 8008600:	0800b0a1 	.word	0x0800b0a1
 8008604:	200001c0 	.word	0x200001c0

08008608 <cleanup_stdio>:
 8008608:	6841      	ldr	r1, [r0, #4]
 800860a:	4b0c      	ldr	r3, [pc, #48]	@ (800863c <cleanup_stdio+0x34>)
 800860c:	b510      	push	{r4, lr}
 800860e:	4299      	cmp	r1, r3
 8008610:	4604      	mov	r4, r0
 8008612:	d001      	beq.n	8008618 <cleanup_stdio+0x10>
 8008614:	f002 fd44 	bl	800b0a0 <_fflush_r>
 8008618:	68a1      	ldr	r1, [r4, #8]
 800861a:	4b09      	ldr	r3, [pc, #36]	@ (8008640 <cleanup_stdio+0x38>)
 800861c:	4299      	cmp	r1, r3
 800861e:	d002      	beq.n	8008626 <cleanup_stdio+0x1e>
 8008620:	4620      	mov	r0, r4
 8008622:	f002 fd3d 	bl	800b0a0 <_fflush_r>
 8008626:	68e1      	ldr	r1, [r4, #12]
 8008628:	4b06      	ldr	r3, [pc, #24]	@ (8008644 <cleanup_stdio+0x3c>)
 800862a:	4299      	cmp	r1, r3
 800862c:	d004      	beq.n	8008638 <cleanup_stdio+0x30>
 800862e:	4620      	mov	r0, r4
 8008630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008634:	f002 bd34 	b.w	800b0a0 <_fflush_r>
 8008638:	bd10      	pop	{r4, pc}
 800863a:	bf00      	nop
 800863c:	200006fc 	.word	0x200006fc
 8008640:	20000764 	.word	0x20000764
 8008644:	200007cc 	.word	0x200007cc

08008648 <global_stdio_init.part.0>:
 8008648:	b510      	push	{r4, lr}
 800864a:	4b0b      	ldr	r3, [pc, #44]	@ (8008678 <global_stdio_init.part.0+0x30>)
 800864c:	4c0b      	ldr	r4, [pc, #44]	@ (800867c <global_stdio_init.part.0+0x34>)
 800864e:	4a0c      	ldr	r2, [pc, #48]	@ (8008680 <global_stdio_init.part.0+0x38>)
 8008650:	4620      	mov	r0, r4
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	2104      	movs	r1, #4
 8008656:	2200      	movs	r2, #0
 8008658:	f7ff ff94 	bl	8008584 <std>
 800865c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008660:	2201      	movs	r2, #1
 8008662:	2109      	movs	r1, #9
 8008664:	f7ff ff8e 	bl	8008584 <std>
 8008668:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800866c:	2202      	movs	r2, #2
 800866e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008672:	2112      	movs	r1, #18
 8008674:	f7ff bf86 	b.w	8008584 <std>
 8008678:	20000834 	.word	0x20000834
 800867c:	200006fc 	.word	0x200006fc
 8008680:	080085f1 	.word	0x080085f1

08008684 <__sfp_lock_acquire>:
 8008684:	4801      	ldr	r0, [pc, #4]	@ (800868c <__sfp_lock_acquire+0x8>)
 8008686:	f000 baaa 	b.w	8008bde <__retarget_lock_acquire_recursive>
 800868a:	bf00      	nop
 800868c:	2000083d 	.word	0x2000083d

08008690 <__sfp_lock_release>:
 8008690:	4801      	ldr	r0, [pc, #4]	@ (8008698 <__sfp_lock_release+0x8>)
 8008692:	f000 baa5 	b.w	8008be0 <__retarget_lock_release_recursive>
 8008696:	bf00      	nop
 8008698:	2000083d 	.word	0x2000083d

0800869c <__sinit>:
 800869c:	b510      	push	{r4, lr}
 800869e:	4604      	mov	r4, r0
 80086a0:	f7ff fff0 	bl	8008684 <__sfp_lock_acquire>
 80086a4:	6a23      	ldr	r3, [r4, #32]
 80086a6:	b11b      	cbz	r3, 80086b0 <__sinit+0x14>
 80086a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086ac:	f7ff bff0 	b.w	8008690 <__sfp_lock_release>
 80086b0:	4b04      	ldr	r3, [pc, #16]	@ (80086c4 <__sinit+0x28>)
 80086b2:	6223      	str	r3, [r4, #32]
 80086b4:	4b04      	ldr	r3, [pc, #16]	@ (80086c8 <__sinit+0x2c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1f5      	bne.n	80086a8 <__sinit+0xc>
 80086bc:	f7ff ffc4 	bl	8008648 <global_stdio_init.part.0>
 80086c0:	e7f2      	b.n	80086a8 <__sinit+0xc>
 80086c2:	bf00      	nop
 80086c4:	08008609 	.word	0x08008609
 80086c8:	20000834 	.word	0x20000834

080086cc <_fwalk_sglue>:
 80086cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086d0:	4607      	mov	r7, r0
 80086d2:	4688      	mov	r8, r1
 80086d4:	4614      	mov	r4, r2
 80086d6:	2600      	movs	r6, #0
 80086d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086dc:	f1b9 0901 	subs.w	r9, r9, #1
 80086e0:	d505      	bpl.n	80086ee <_fwalk_sglue+0x22>
 80086e2:	6824      	ldr	r4, [r4, #0]
 80086e4:	2c00      	cmp	r4, #0
 80086e6:	d1f7      	bne.n	80086d8 <_fwalk_sglue+0xc>
 80086e8:	4630      	mov	r0, r6
 80086ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ee:	89ab      	ldrh	r3, [r5, #12]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d907      	bls.n	8008704 <_fwalk_sglue+0x38>
 80086f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086f8:	3301      	adds	r3, #1
 80086fa:	d003      	beq.n	8008704 <_fwalk_sglue+0x38>
 80086fc:	4629      	mov	r1, r5
 80086fe:	4638      	mov	r0, r7
 8008700:	47c0      	blx	r8
 8008702:	4306      	orrs	r6, r0
 8008704:	3568      	adds	r5, #104	@ 0x68
 8008706:	e7e9      	b.n	80086dc <_fwalk_sglue+0x10>

08008708 <iprintf>:
 8008708:	b40f      	push	{r0, r1, r2, r3}
 800870a:	b507      	push	{r0, r1, r2, lr}
 800870c:	4906      	ldr	r1, [pc, #24]	@ (8008728 <iprintf+0x20>)
 800870e:	ab04      	add	r3, sp, #16
 8008710:	6808      	ldr	r0, [r1, #0]
 8008712:	f853 2b04 	ldr.w	r2, [r3], #4
 8008716:	6881      	ldr	r1, [r0, #8]
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	f002 fb29 	bl	800ad70 <_vfiprintf_r>
 800871e:	b003      	add	sp, #12
 8008720:	f85d eb04 	ldr.w	lr, [sp], #4
 8008724:	b004      	add	sp, #16
 8008726:	4770      	bx	lr
 8008728:	200001bc 	.word	0x200001bc

0800872c <_puts_r>:
 800872c:	6a03      	ldr	r3, [r0, #32]
 800872e:	b570      	push	{r4, r5, r6, lr}
 8008730:	4605      	mov	r5, r0
 8008732:	460e      	mov	r6, r1
 8008734:	6884      	ldr	r4, [r0, #8]
 8008736:	b90b      	cbnz	r3, 800873c <_puts_r+0x10>
 8008738:	f7ff ffb0 	bl	800869c <__sinit>
 800873c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800873e:	07db      	lsls	r3, r3, #31
 8008740:	d405      	bmi.n	800874e <_puts_r+0x22>
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	0598      	lsls	r0, r3, #22
 8008746:	d402      	bmi.n	800874e <_puts_r+0x22>
 8008748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800874a:	f000 fa48 	bl	8008bde <__retarget_lock_acquire_recursive>
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	0719      	lsls	r1, r3, #28
 8008752:	d502      	bpl.n	800875a <_puts_r+0x2e>
 8008754:	6923      	ldr	r3, [r4, #16]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d135      	bne.n	80087c6 <_puts_r+0x9a>
 800875a:	4621      	mov	r1, r4
 800875c:	4628      	mov	r0, r5
 800875e:	f000 f91d 	bl	800899c <__swsetup_r>
 8008762:	b380      	cbz	r0, 80087c6 <_puts_r+0x9a>
 8008764:	f04f 35ff 	mov.w	r5, #4294967295
 8008768:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800876a:	07da      	lsls	r2, r3, #31
 800876c:	d405      	bmi.n	800877a <_puts_r+0x4e>
 800876e:	89a3      	ldrh	r3, [r4, #12]
 8008770:	059b      	lsls	r3, r3, #22
 8008772:	d402      	bmi.n	800877a <_puts_r+0x4e>
 8008774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008776:	f000 fa33 	bl	8008be0 <__retarget_lock_release_recursive>
 800877a:	4628      	mov	r0, r5
 800877c:	bd70      	pop	{r4, r5, r6, pc}
 800877e:	2b00      	cmp	r3, #0
 8008780:	da04      	bge.n	800878c <_puts_r+0x60>
 8008782:	69a2      	ldr	r2, [r4, #24]
 8008784:	429a      	cmp	r2, r3
 8008786:	dc17      	bgt.n	80087b8 <_puts_r+0x8c>
 8008788:	290a      	cmp	r1, #10
 800878a:	d015      	beq.n	80087b8 <_puts_r+0x8c>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	6022      	str	r2, [r4, #0]
 8008792:	7019      	strb	r1, [r3, #0]
 8008794:	68a3      	ldr	r3, [r4, #8]
 8008796:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800879a:	3b01      	subs	r3, #1
 800879c:	60a3      	str	r3, [r4, #8]
 800879e:	2900      	cmp	r1, #0
 80087a0:	d1ed      	bne.n	800877e <_puts_r+0x52>
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	da11      	bge.n	80087ca <_puts_r+0x9e>
 80087a6:	4622      	mov	r2, r4
 80087a8:	210a      	movs	r1, #10
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 f8b7 	bl	800891e <__swbuf_r>
 80087b0:	3001      	adds	r0, #1
 80087b2:	d0d7      	beq.n	8008764 <_puts_r+0x38>
 80087b4:	250a      	movs	r5, #10
 80087b6:	e7d7      	b.n	8008768 <_puts_r+0x3c>
 80087b8:	4622      	mov	r2, r4
 80087ba:	4628      	mov	r0, r5
 80087bc:	f000 f8af 	bl	800891e <__swbuf_r>
 80087c0:	3001      	adds	r0, #1
 80087c2:	d1e7      	bne.n	8008794 <_puts_r+0x68>
 80087c4:	e7ce      	b.n	8008764 <_puts_r+0x38>
 80087c6:	3e01      	subs	r6, #1
 80087c8:	e7e4      	b.n	8008794 <_puts_r+0x68>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	1c5a      	adds	r2, r3, #1
 80087ce:	6022      	str	r2, [r4, #0]
 80087d0:	220a      	movs	r2, #10
 80087d2:	701a      	strb	r2, [r3, #0]
 80087d4:	e7ee      	b.n	80087b4 <_puts_r+0x88>
	...

080087d8 <puts>:
 80087d8:	4b02      	ldr	r3, [pc, #8]	@ (80087e4 <puts+0xc>)
 80087da:	4601      	mov	r1, r0
 80087dc:	6818      	ldr	r0, [r3, #0]
 80087de:	f7ff bfa5 	b.w	800872c <_puts_r>
 80087e2:	bf00      	nop
 80087e4:	200001bc 	.word	0x200001bc

080087e8 <sniprintf>:
 80087e8:	b40c      	push	{r2, r3}
 80087ea:	b530      	push	{r4, r5, lr}
 80087ec:	4b18      	ldr	r3, [pc, #96]	@ (8008850 <sniprintf+0x68>)
 80087ee:	1e0c      	subs	r4, r1, #0
 80087f0:	681d      	ldr	r5, [r3, #0]
 80087f2:	b09d      	sub	sp, #116	@ 0x74
 80087f4:	da08      	bge.n	8008808 <sniprintf+0x20>
 80087f6:	238b      	movs	r3, #139	@ 0x8b
 80087f8:	f04f 30ff 	mov.w	r0, #4294967295
 80087fc:	602b      	str	r3, [r5, #0]
 80087fe:	b01d      	add	sp, #116	@ 0x74
 8008800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008804:	b002      	add	sp, #8
 8008806:	4770      	bx	lr
 8008808:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800880c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008810:	f04f 0300 	mov.w	r3, #0
 8008814:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008816:	bf0c      	ite	eq
 8008818:	4623      	moveq	r3, r4
 800881a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800881e:	9304      	str	r3, [sp, #16]
 8008820:	9307      	str	r3, [sp, #28]
 8008822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008826:	9002      	str	r0, [sp, #8]
 8008828:	9006      	str	r0, [sp, #24]
 800882a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800882e:	4628      	mov	r0, r5
 8008830:	ab21      	add	r3, sp, #132	@ 0x84
 8008832:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008834:	a902      	add	r1, sp, #8
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	f002 f976 	bl	800ab28 <_svfiprintf_r>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	bfbc      	itt	lt
 8008840:	238b      	movlt	r3, #139	@ 0x8b
 8008842:	602b      	strlt	r3, [r5, #0]
 8008844:	2c00      	cmp	r4, #0
 8008846:	d0da      	beq.n	80087fe <sniprintf+0x16>
 8008848:	2200      	movs	r2, #0
 800884a:	9b02      	ldr	r3, [sp, #8]
 800884c:	701a      	strb	r2, [r3, #0]
 800884e:	e7d6      	b.n	80087fe <sniprintf+0x16>
 8008850:	200001bc 	.word	0x200001bc

08008854 <siprintf>:
 8008854:	b40e      	push	{r1, r2, r3}
 8008856:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800885a:	b510      	push	{r4, lr}
 800885c:	2400      	movs	r4, #0
 800885e:	b09d      	sub	sp, #116	@ 0x74
 8008860:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008862:	9002      	str	r0, [sp, #8]
 8008864:	9006      	str	r0, [sp, #24]
 8008866:	9107      	str	r1, [sp, #28]
 8008868:	9104      	str	r1, [sp, #16]
 800886a:	4809      	ldr	r0, [pc, #36]	@ (8008890 <siprintf+0x3c>)
 800886c:	4909      	ldr	r1, [pc, #36]	@ (8008894 <siprintf+0x40>)
 800886e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008872:	9105      	str	r1, [sp, #20]
 8008874:	6800      	ldr	r0, [r0, #0]
 8008876:	a902      	add	r1, sp, #8
 8008878:	9301      	str	r3, [sp, #4]
 800887a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800887c:	f002 f954 	bl	800ab28 <_svfiprintf_r>
 8008880:	9b02      	ldr	r3, [sp, #8]
 8008882:	701c      	strb	r4, [r3, #0]
 8008884:	b01d      	add	sp, #116	@ 0x74
 8008886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800888a:	b003      	add	sp, #12
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	200001bc 	.word	0x200001bc
 8008894:	ffff0208 	.word	0xffff0208

08008898 <__sread>:
 8008898:	b510      	push	{r4, lr}
 800889a:	460c      	mov	r4, r1
 800889c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a0:	f000 f93e 	bl	8008b20 <_read_r>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	bfab      	itete	ge
 80088a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088aa:	89a3      	ldrhlt	r3, [r4, #12]
 80088ac:	181b      	addge	r3, r3, r0
 80088ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088b2:	bfac      	ite	ge
 80088b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088b6:	81a3      	strhlt	r3, [r4, #12]
 80088b8:	bd10      	pop	{r4, pc}

080088ba <__swrite>:
 80088ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088be:	461f      	mov	r7, r3
 80088c0:	898b      	ldrh	r3, [r1, #12]
 80088c2:	4605      	mov	r5, r0
 80088c4:	05db      	lsls	r3, r3, #23
 80088c6:	460c      	mov	r4, r1
 80088c8:	4616      	mov	r6, r2
 80088ca:	d505      	bpl.n	80088d8 <__swrite+0x1e>
 80088cc:	2302      	movs	r3, #2
 80088ce:	2200      	movs	r2, #0
 80088d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d4:	f000 f912 	bl	8008afc <_lseek_r>
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	4632      	mov	r2, r6
 80088dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088e0:	81a3      	strh	r3, [r4, #12]
 80088e2:	4628      	mov	r0, r5
 80088e4:	463b      	mov	r3, r7
 80088e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ee:	f000 b939 	b.w	8008b64 <_write_r>

080088f2 <__sseek>:
 80088f2:	b510      	push	{r4, lr}
 80088f4:	460c      	mov	r4, r1
 80088f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088fa:	f000 f8ff 	bl	8008afc <_lseek_r>
 80088fe:	1c43      	adds	r3, r0, #1
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	bf15      	itete	ne
 8008904:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008906:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800890a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800890e:	81a3      	strheq	r3, [r4, #12]
 8008910:	bf18      	it	ne
 8008912:	81a3      	strhne	r3, [r4, #12]
 8008914:	bd10      	pop	{r4, pc}

08008916 <__sclose>:
 8008916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891a:	f000 b8df 	b.w	8008adc <_close_r>

0800891e <__swbuf_r>:
 800891e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008920:	460e      	mov	r6, r1
 8008922:	4614      	mov	r4, r2
 8008924:	4605      	mov	r5, r0
 8008926:	b118      	cbz	r0, 8008930 <__swbuf_r+0x12>
 8008928:	6a03      	ldr	r3, [r0, #32]
 800892a:	b90b      	cbnz	r3, 8008930 <__swbuf_r+0x12>
 800892c:	f7ff feb6 	bl	800869c <__sinit>
 8008930:	69a3      	ldr	r3, [r4, #24]
 8008932:	60a3      	str	r3, [r4, #8]
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	071a      	lsls	r2, r3, #28
 8008938:	d501      	bpl.n	800893e <__swbuf_r+0x20>
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	b943      	cbnz	r3, 8008950 <__swbuf_r+0x32>
 800893e:	4621      	mov	r1, r4
 8008940:	4628      	mov	r0, r5
 8008942:	f000 f82b 	bl	800899c <__swsetup_r>
 8008946:	b118      	cbz	r0, 8008950 <__swbuf_r+0x32>
 8008948:	f04f 37ff 	mov.w	r7, #4294967295
 800894c:	4638      	mov	r0, r7
 800894e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	6922      	ldr	r2, [r4, #16]
 8008954:	b2f6      	uxtb	r6, r6
 8008956:	1a98      	subs	r0, r3, r2
 8008958:	6963      	ldr	r3, [r4, #20]
 800895a:	4637      	mov	r7, r6
 800895c:	4283      	cmp	r3, r0
 800895e:	dc05      	bgt.n	800896c <__swbuf_r+0x4e>
 8008960:	4621      	mov	r1, r4
 8008962:	4628      	mov	r0, r5
 8008964:	f002 fb9c 	bl	800b0a0 <_fflush_r>
 8008968:	2800      	cmp	r0, #0
 800896a:	d1ed      	bne.n	8008948 <__swbuf_r+0x2a>
 800896c:	68a3      	ldr	r3, [r4, #8]
 800896e:	3b01      	subs	r3, #1
 8008970:	60a3      	str	r3, [r4, #8]
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	6022      	str	r2, [r4, #0]
 8008978:	701e      	strb	r6, [r3, #0]
 800897a:	6962      	ldr	r2, [r4, #20]
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	429a      	cmp	r2, r3
 8008980:	d004      	beq.n	800898c <__swbuf_r+0x6e>
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	07db      	lsls	r3, r3, #31
 8008986:	d5e1      	bpl.n	800894c <__swbuf_r+0x2e>
 8008988:	2e0a      	cmp	r6, #10
 800898a:	d1df      	bne.n	800894c <__swbuf_r+0x2e>
 800898c:	4621      	mov	r1, r4
 800898e:	4628      	mov	r0, r5
 8008990:	f002 fb86 	bl	800b0a0 <_fflush_r>
 8008994:	2800      	cmp	r0, #0
 8008996:	d0d9      	beq.n	800894c <__swbuf_r+0x2e>
 8008998:	e7d6      	b.n	8008948 <__swbuf_r+0x2a>
	...

0800899c <__swsetup_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4b29      	ldr	r3, [pc, #164]	@ (8008a44 <__swsetup_r+0xa8>)
 80089a0:	4605      	mov	r5, r0
 80089a2:	6818      	ldr	r0, [r3, #0]
 80089a4:	460c      	mov	r4, r1
 80089a6:	b118      	cbz	r0, 80089b0 <__swsetup_r+0x14>
 80089a8:	6a03      	ldr	r3, [r0, #32]
 80089aa:	b90b      	cbnz	r3, 80089b0 <__swsetup_r+0x14>
 80089ac:	f7ff fe76 	bl	800869c <__sinit>
 80089b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b4:	0719      	lsls	r1, r3, #28
 80089b6:	d422      	bmi.n	80089fe <__swsetup_r+0x62>
 80089b8:	06da      	lsls	r2, r3, #27
 80089ba:	d407      	bmi.n	80089cc <__swsetup_r+0x30>
 80089bc:	2209      	movs	r2, #9
 80089be:	602a      	str	r2, [r5, #0]
 80089c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089c4:	f04f 30ff 	mov.w	r0, #4294967295
 80089c8:	81a3      	strh	r3, [r4, #12]
 80089ca:	e033      	b.n	8008a34 <__swsetup_r+0x98>
 80089cc:	0758      	lsls	r0, r3, #29
 80089ce:	d512      	bpl.n	80089f6 <__swsetup_r+0x5a>
 80089d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089d2:	b141      	cbz	r1, 80089e6 <__swsetup_r+0x4a>
 80089d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089d8:	4299      	cmp	r1, r3
 80089da:	d002      	beq.n	80089e2 <__swsetup_r+0x46>
 80089dc:	4628      	mov	r0, r5
 80089de:	f000 ff8b 	bl	80098f8 <_free_r>
 80089e2:	2300      	movs	r3, #0
 80089e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089ec:	81a3      	strh	r3, [r4, #12]
 80089ee:	2300      	movs	r3, #0
 80089f0:	6063      	str	r3, [r4, #4]
 80089f2:	6923      	ldr	r3, [r4, #16]
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	f043 0308 	orr.w	r3, r3, #8
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	6923      	ldr	r3, [r4, #16]
 8008a00:	b94b      	cbnz	r3, 8008a16 <__swsetup_r+0x7a>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a0c:	d003      	beq.n	8008a16 <__swsetup_r+0x7a>
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4628      	mov	r0, r5
 8008a12:	f002 fb92 	bl	800b13a <__smakebuf_r>
 8008a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1a:	f013 0201 	ands.w	r2, r3, #1
 8008a1e:	d00a      	beq.n	8008a36 <__swsetup_r+0x9a>
 8008a20:	2200      	movs	r2, #0
 8008a22:	60a2      	str	r2, [r4, #8]
 8008a24:	6962      	ldr	r2, [r4, #20]
 8008a26:	4252      	negs	r2, r2
 8008a28:	61a2      	str	r2, [r4, #24]
 8008a2a:	6922      	ldr	r2, [r4, #16]
 8008a2c:	b942      	cbnz	r2, 8008a40 <__swsetup_r+0xa4>
 8008a2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a32:	d1c5      	bne.n	80089c0 <__swsetup_r+0x24>
 8008a34:	bd38      	pop	{r3, r4, r5, pc}
 8008a36:	0799      	lsls	r1, r3, #30
 8008a38:	bf58      	it	pl
 8008a3a:	6962      	ldrpl	r2, [r4, #20]
 8008a3c:	60a2      	str	r2, [r4, #8]
 8008a3e:	e7f4      	b.n	8008a2a <__swsetup_r+0x8e>
 8008a40:	2000      	movs	r0, #0
 8008a42:	e7f7      	b.n	8008a34 <__swsetup_r+0x98>
 8008a44:	200001bc 	.word	0x200001bc

08008a48 <memset>:
 8008a48:	4603      	mov	r3, r0
 8008a4a:	4402      	add	r2, r0
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d100      	bne.n	8008a52 <memset+0xa>
 8008a50:	4770      	bx	lr
 8008a52:	f803 1b01 	strb.w	r1, [r3], #1
 8008a56:	e7f9      	b.n	8008a4c <memset+0x4>

08008a58 <strcat>:
 8008a58:	4602      	mov	r2, r0
 8008a5a:	b510      	push	{r4, lr}
 8008a5c:	7814      	ldrb	r4, [r2, #0]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	3201      	adds	r2, #1
 8008a62:	2c00      	cmp	r4, #0
 8008a64:	d1fa      	bne.n	8008a5c <strcat+0x4>
 8008a66:	3b01      	subs	r3, #1
 8008a68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a70:	2a00      	cmp	r2, #0
 8008a72:	d1f9      	bne.n	8008a68 <strcat+0x10>
 8008a74:	bd10      	pop	{r4, pc}
	...

08008a78 <strdup>:
 8008a78:	4b02      	ldr	r3, [pc, #8]	@ (8008a84 <strdup+0xc>)
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	f000 b803 	b.w	8008a88 <_strdup_r>
 8008a82:	bf00      	nop
 8008a84:	200001bc 	.word	0x200001bc

08008a88 <_strdup_r>:
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	460d      	mov	r5, r1
 8008a90:	f7f7 fb68 	bl	8000164 <strlen>
 8008a94:	1c46      	adds	r6, r0, #1
 8008a96:	4631      	mov	r1, r6
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f7fe f875 	bl	8006b88 <_malloc_r>
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	b118      	cbz	r0, 8008aaa <_strdup_r+0x22>
 8008aa2:	4632      	mov	r2, r6
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	f000 f8b2 	bl	8008c0e <memcpy>
 8008aaa:	4620      	mov	r0, r4
 8008aac:	bd70      	pop	{r4, r5, r6, pc}

08008aae <strncmp>:
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	b16a      	cbz	r2, 8008ace <strncmp+0x20>
 8008ab2:	3901      	subs	r1, #1
 8008ab4:	1884      	adds	r4, r0, r2
 8008ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d103      	bne.n	8008aca <strncmp+0x1c>
 8008ac2:	42a0      	cmp	r0, r4
 8008ac4:	d001      	beq.n	8008aca <strncmp+0x1c>
 8008ac6:	2a00      	cmp	r2, #0
 8008ac8:	d1f5      	bne.n	8008ab6 <strncmp+0x8>
 8008aca:	1ad0      	subs	r0, r2, r3
 8008acc:	bd10      	pop	{r4, pc}
 8008ace:	4610      	mov	r0, r2
 8008ad0:	e7fc      	b.n	8008acc <strncmp+0x1e>
	...

08008ad4 <_localeconv_r>:
 8008ad4:	4800      	ldr	r0, [pc, #0]	@ (8008ad8 <_localeconv_r+0x4>)
 8008ad6:	4770      	bx	lr
 8008ad8:	20000140 	.word	0x20000140

08008adc <_close_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4d05      	ldr	r5, [pc, #20]	@ (8008af8 <_close_r+0x1c>)
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	4608      	mov	r0, r1
 8008ae6:	602b      	str	r3, [r5, #0]
 8008ae8:	f7f8 fbe6 	bl	80012b8 <_close>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d102      	bne.n	8008af6 <_close_r+0x1a>
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	b103      	cbz	r3, 8008af6 <_close_r+0x1a>
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	20000838 	.word	0x20000838

08008afc <_lseek_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	4604      	mov	r4, r0
 8008b00:	4608      	mov	r0, r1
 8008b02:	4611      	mov	r1, r2
 8008b04:	2200      	movs	r2, #0
 8008b06:	4d05      	ldr	r5, [pc, #20]	@ (8008b1c <_lseek_r+0x20>)
 8008b08:	602a      	str	r2, [r5, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	f7f8 fbf8 	bl	8001300 <_lseek>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	d102      	bne.n	8008b1a <_lseek_r+0x1e>
 8008b14:	682b      	ldr	r3, [r5, #0]
 8008b16:	b103      	cbz	r3, 8008b1a <_lseek_r+0x1e>
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	20000838 	.word	0x20000838

08008b20 <_read_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	4604      	mov	r4, r0
 8008b24:	4608      	mov	r0, r1
 8008b26:	4611      	mov	r1, r2
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4d05      	ldr	r5, [pc, #20]	@ (8008b40 <_read_r+0x20>)
 8008b2c:	602a      	str	r2, [r5, #0]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f7f8 fba5 	bl	800127e <_read>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	d102      	bne.n	8008b3e <_read_r+0x1e>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	b103      	cbz	r3, 8008b3e <_read_r+0x1e>
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	20000838 	.word	0x20000838

08008b44 <_sbrk_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	2300      	movs	r3, #0
 8008b48:	4d05      	ldr	r5, [pc, #20]	@ (8008b60 <_sbrk_r+0x1c>)
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	602b      	str	r3, [r5, #0]
 8008b50:	f7f8 fbe2 	bl	8001318 <_sbrk>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d102      	bne.n	8008b5e <_sbrk_r+0x1a>
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	b103      	cbz	r3, 8008b5e <_sbrk_r+0x1a>
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	20000838 	.word	0x20000838

08008b64 <_write_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4604      	mov	r4, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	4d05      	ldr	r5, [pc, #20]	@ (8008b84 <_write_r+0x20>)
 8008b70:	602a      	str	r2, [r5, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	f7f8 fa2a 	bl	8000fcc <_write>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d102      	bne.n	8008b82 <_write_r+0x1e>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	b103      	cbz	r3, 8008b82 <_write_r+0x1e>
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	20000838 	.word	0x20000838

08008b88 <__errno>:
 8008b88:	4b01      	ldr	r3, [pc, #4]	@ (8008b90 <__errno+0x8>)
 8008b8a:	6818      	ldr	r0, [r3, #0]
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	200001bc 	.word	0x200001bc

08008b94 <__libc_init_array>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	2600      	movs	r6, #0
 8008b98:	4d0c      	ldr	r5, [pc, #48]	@ (8008bcc <__libc_init_array+0x38>)
 8008b9a:	4c0d      	ldr	r4, [pc, #52]	@ (8008bd0 <__libc_init_array+0x3c>)
 8008b9c:	1b64      	subs	r4, r4, r5
 8008b9e:	10a4      	asrs	r4, r4, #2
 8008ba0:	42a6      	cmp	r6, r4
 8008ba2:	d109      	bne.n	8008bb8 <__libc_init_array+0x24>
 8008ba4:	f002 fc08 	bl	800b3b8 <_init>
 8008ba8:	2600      	movs	r6, #0
 8008baa:	4d0a      	ldr	r5, [pc, #40]	@ (8008bd4 <__libc_init_array+0x40>)
 8008bac:	4c0a      	ldr	r4, [pc, #40]	@ (8008bd8 <__libc_init_array+0x44>)
 8008bae:	1b64      	subs	r4, r4, r5
 8008bb0:	10a4      	asrs	r4, r4, #2
 8008bb2:	42a6      	cmp	r6, r4
 8008bb4:	d105      	bne.n	8008bc2 <__libc_init_array+0x2e>
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
 8008bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bbc:	4798      	blx	r3
 8008bbe:	3601      	adds	r6, #1
 8008bc0:	e7ee      	b.n	8008ba0 <__libc_init_array+0xc>
 8008bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc6:	4798      	blx	r3
 8008bc8:	3601      	adds	r6, #1
 8008bca:	e7f2      	b.n	8008bb2 <__libc_init_array+0x1e>
 8008bcc:	0800bb64 	.word	0x0800bb64
 8008bd0:	0800bb64 	.word	0x0800bb64
 8008bd4:	0800bb64 	.word	0x0800bb64
 8008bd8:	0800bb68 	.word	0x0800bb68

08008bdc <__retarget_lock_init_recursive>:
 8008bdc:	4770      	bx	lr

08008bde <__retarget_lock_acquire_recursive>:
 8008bde:	4770      	bx	lr

08008be0 <__retarget_lock_release_recursive>:
 8008be0:	4770      	bx	lr

08008be2 <strcpy>:
 8008be2:	4603      	mov	r3, r0
 8008be4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008be8:	f803 2b01 	strb.w	r2, [r3], #1
 8008bec:	2a00      	cmp	r2, #0
 8008bee:	d1f9      	bne.n	8008be4 <strcpy+0x2>
 8008bf0:	4770      	bx	lr

08008bf2 <memchr>:
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	b2c9      	uxtb	r1, r1
 8008bf8:	4402      	add	r2, r0
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	d101      	bne.n	8008c04 <memchr+0x12>
 8008c00:	2000      	movs	r0, #0
 8008c02:	e003      	b.n	8008c0c <memchr+0x1a>
 8008c04:	7804      	ldrb	r4, [r0, #0]
 8008c06:	3301      	adds	r3, #1
 8008c08:	428c      	cmp	r4, r1
 8008c0a:	d1f6      	bne.n	8008bfa <memchr+0x8>
 8008c0c:	bd10      	pop	{r4, pc}

08008c0e <memcpy>:
 8008c0e:	440a      	add	r2, r1
 8008c10:	4291      	cmp	r1, r2
 8008c12:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c16:	d100      	bne.n	8008c1a <memcpy+0xc>
 8008c18:	4770      	bx	lr
 8008c1a:	b510      	push	{r4, lr}
 8008c1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c20:	4291      	cmp	r1, r2
 8008c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c26:	d1f9      	bne.n	8008c1c <memcpy+0xe>
 8008c28:	bd10      	pop	{r4, pc}
	...

08008c2c <nan>:
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	4901      	ldr	r1, [pc, #4]	@ (8008c34 <nan+0x8>)
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	7ff80000 	.word	0x7ff80000

08008c38 <nanf>:
 8008c38:	4800      	ldr	r0, [pc, #0]	@ (8008c3c <nanf+0x4>)
 8008c3a:	4770      	bx	lr
 8008c3c:	7fc00000 	.word	0x7fc00000

08008c40 <quorem>:
 8008c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c44:	6903      	ldr	r3, [r0, #16]
 8008c46:	690c      	ldr	r4, [r1, #16]
 8008c48:	4607      	mov	r7, r0
 8008c4a:	42a3      	cmp	r3, r4
 8008c4c:	db7e      	blt.n	8008d4c <quorem+0x10c>
 8008c4e:	3c01      	subs	r4, #1
 8008c50:	00a3      	lsls	r3, r4, #2
 8008c52:	f100 0514 	add.w	r5, r0, #20
 8008c56:	f101 0814 	add.w	r8, r1, #20
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c76:	d32e      	bcc.n	8008cd6 <quorem+0x96>
 8008c78:	f04f 0a00 	mov.w	sl, #0
 8008c7c:	46c4      	mov	ip, r8
 8008c7e:	46ae      	mov	lr, r5
 8008c80:	46d3      	mov	fp, sl
 8008c82:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c86:	b298      	uxth	r0, r3
 8008c88:	fb06 a000 	mla	r0, r6, r0, sl
 8008c8c:	0c1b      	lsrs	r3, r3, #16
 8008c8e:	0c02      	lsrs	r2, r0, #16
 8008c90:	fb06 2303 	mla	r3, r6, r3, r2
 8008c94:	f8de 2000 	ldr.w	r2, [lr]
 8008c98:	b280      	uxth	r0, r0
 8008c9a:	b292      	uxth	r2, r2
 8008c9c:	1a12      	subs	r2, r2, r0
 8008c9e:	445a      	add	r2, fp
 8008ca0:	f8de 0000 	ldr.w	r0, [lr]
 8008ca4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008cae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008cb2:	b292      	uxth	r2, r2
 8008cb4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008cb8:	45e1      	cmp	r9, ip
 8008cba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008cbe:	f84e 2b04 	str.w	r2, [lr], #4
 8008cc2:	d2de      	bcs.n	8008c82 <quorem+0x42>
 8008cc4:	9b00      	ldr	r3, [sp, #0]
 8008cc6:	58eb      	ldr	r3, [r5, r3]
 8008cc8:	b92b      	cbnz	r3, 8008cd6 <quorem+0x96>
 8008cca:	9b01      	ldr	r3, [sp, #4]
 8008ccc:	3b04      	subs	r3, #4
 8008cce:	429d      	cmp	r5, r3
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	d32f      	bcc.n	8008d34 <quorem+0xf4>
 8008cd4:	613c      	str	r4, [r7, #16]
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f001 fc5e 	bl	800a598 <__mcmp>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	db25      	blt.n	8008d2c <quorem+0xec>
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ce8:	f8d1 c000 	ldr.w	ip, [r1]
 8008cec:	fa1f fe82 	uxth.w	lr, r2
 8008cf0:	fa1f f38c 	uxth.w	r3, ip
 8008cf4:	eba3 030e 	sub.w	r3, r3, lr
 8008cf8:	4403      	add	r3, r0
 8008cfa:	0c12      	lsrs	r2, r2, #16
 8008cfc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d00:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d0a:	45c1      	cmp	r9, r8
 8008d0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d10:	f841 3b04 	str.w	r3, [r1], #4
 8008d14:	d2e6      	bcs.n	8008ce4 <quorem+0xa4>
 8008d16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d1e:	b922      	cbnz	r2, 8008d2a <quorem+0xea>
 8008d20:	3b04      	subs	r3, #4
 8008d22:	429d      	cmp	r5, r3
 8008d24:	461a      	mov	r2, r3
 8008d26:	d30b      	bcc.n	8008d40 <quorem+0x100>
 8008d28:	613c      	str	r4, [r7, #16]
 8008d2a:	3601      	adds	r6, #1
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	b003      	add	sp, #12
 8008d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d34:	6812      	ldr	r2, [r2, #0]
 8008d36:	3b04      	subs	r3, #4
 8008d38:	2a00      	cmp	r2, #0
 8008d3a:	d1cb      	bne.n	8008cd4 <quorem+0x94>
 8008d3c:	3c01      	subs	r4, #1
 8008d3e:	e7c6      	b.n	8008cce <quorem+0x8e>
 8008d40:	6812      	ldr	r2, [r2, #0]
 8008d42:	3b04      	subs	r3, #4
 8008d44:	2a00      	cmp	r2, #0
 8008d46:	d1ef      	bne.n	8008d28 <quorem+0xe8>
 8008d48:	3c01      	subs	r4, #1
 8008d4a:	e7ea      	b.n	8008d22 <quorem+0xe2>
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	e7ee      	b.n	8008d2e <quorem+0xee>

08008d50 <_dtoa_r>:
 8008d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d54:	4614      	mov	r4, r2
 8008d56:	461d      	mov	r5, r3
 8008d58:	69c7      	ldr	r7, [r0, #28]
 8008d5a:	b097      	sub	sp, #92	@ 0x5c
 8008d5c:	4681      	mov	r9, r0
 8008d5e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008d62:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008d64:	b97f      	cbnz	r7, 8008d86 <_dtoa_r+0x36>
 8008d66:	2010      	movs	r0, #16
 8008d68:	f7fd fedc 	bl	8006b24 <malloc>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	f8c9 001c 	str.w	r0, [r9, #28]
 8008d72:	b920      	cbnz	r0, 8008d7e <_dtoa_r+0x2e>
 8008d74:	21ef      	movs	r1, #239	@ 0xef
 8008d76:	4bac      	ldr	r3, [pc, #688]	@ (8009028 <_dtoa_r+0x2d8>)
 8008d78:	48ac      	ldr	r0, [pc, #688]	@ (800902c <_dtoa_r+0x2dc>)
 8008d7a:	f002 fa57 	bl	800b22c <__assert_func>
 8008d7e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008d82:	6007      	str	r7, [r0, #0]
 8008d84:	60c7      	str	r7, [r0, #12]
 8008d86:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d8a:	6819      	ldr	r1, [r3, #0]
 8008d8c:	b159      	cbz	r1, 8008da6 <_dtoa_r+0x56>
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	2301      	movs	r3, #1
 8008d92:	4093      	lsls	r3, r2
 8008d94:	604a      	str	r2, [r1, #4]
 8008d96:	608b      	str	r3, [r1, #8]
 8008d98:	4648      	mov	r0, r9
 8008d9a:	f001 f981 	bl	800a0a0 <_Bfree>
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	1e2b      	subs	r3, r5, #0
 8008da8:	bfaf      	iteee	ge
 8008daa:	2300      	movge	r3, #0
 8008dac:	2201      	movlt	r2, #1
 8008dae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008db2:	9307      	strlt	r3, [sp, #28]
 8008db4:	bfa8      	it	ge
 8008db6:	6033      	strge	r3, [r6, #0]
 8008db8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008dbc:	4b9c      	ldr	r3, [pc, #624]	@ (8009030 <_dtoa_r+0x2e0>)
 8008dbe:	bfb8      	it	lt
 8008dc0:	6032      	strlt	r2, [r6, #0]
 8008dc2:	ea33 0308 	bics.w	r3, r3, r8
 8008dc6:	d112      	bne.n	8008dee <_dtoa_r+0x9e>
 8008dc8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008dcc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008dd4:	4323      	orrs	r3, r4
 8008dd6:	f000 855e 	beq.w	8009896 <_dtoa_r+0xb46>
 8008dda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008ddc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009034 <_dtoa_r+0x2e4>
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 8560 	beq.w	80098a6 <_dtoa_r+0xb56>
 8008de6:	f10a 0303 	add.w	r3, sl, #3
 8008dea:	f000 bd5a 	b.w	80098a2 <_dtoa_r+0xb52>
 8008dee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008df2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f7f7 fddd 	bl	80009bc <__aeabi_dcmpeq>
 8008e02:	4607      	mov	r7, r0
 8008e04:	b158      	cbz	r0, 8008e1e <_dtoa_r+0xce>
 8008e06:	2301      	movs	r3, #1
 8008e08:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008e0a:	6013      	str	r3, [r2, #0]
 8008e0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008e0e:	b113      	cbz	r3, 8008e16 <_dtoa_r+0xc6>
 8008e10:	4b89      	ldr	r3, [pc, #548]	@ (8009038 <_dtoa_r+0x2e8>)
 8008e12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008e14:	6013      	str	r3, [r2, #0]
 8008e16:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800903c <_dtoa_r+0x2ec>
 8008e1a:	f000 bd44 	b.w	80098a6 <_dtoa_r+0xb56>
 8008e1e:	ab14      	add	r3, sp, #80	@ 0x50
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	ab15      	add	r3, sp, #84	@ 0x54
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	4648      	mov	r0, r9
 8008e28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008e2c:	f001 fccc 	bl	800a7c8 <__d2b>
 8008e30:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008e34:	9003      	str	r0, [sp, #12]
 8008e36:	2e00      	cmp	r6, #0
 8008e38:	d078      	beq.n	8008f2c <_dtoa_r+0x1dc>
 8008e3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e40:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e48:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008e4c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008e50:	9712      	str	r7, [sp, #72]	@ 0x48
 8008e52:	4619      	mov	r1, r3
 8008e54:	2200      	movs	r2, #0
 8008e56:	4b7a      	ldr	r3, [pc, #488]	@ (8009040 <_dtoa_r+0x2f0>)
 8008e58:	f7f7 f990 	bl	800017c <__aeabi_dsub>
 8008e5c:	a36c      	add	r3, pc, #432	@ (adr r3, 8009010 <_dtoa_r+0x2c0>)
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	f7f7 fb43 	bl	80004ec <__aeabi_dmul>
 8008e66:	a36c      	add	r3, pc, #432	@ (adr r3, 8009018 <_dtoa_r+0x2c8>)
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	f7f7 f988 	bl	8000180 <__adddf3>
 8008e70:	4604      	mov	r4, r0
 8008e72:	4630      	mov	r0, r6
 8008e74:	460d      	mov	r5, r1
 8008e76:	f7f7 facf 	bl	8000418 <__aeabi_i2d>
 8008e7a:	a369      	add	r3, pc, #420	@ (adr r3, 8009020 <_dtoa_r+0x2d0>)
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	f7f7 fb34 	bl	80004ec <__aeabi_dmul>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4620      	mov	r0, r4
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	f7f7 f978 	bl	8000180 <__adddf3>
 8008e90:	4604      	mov	r4, r0
 8008e92:	460d      	mov	r5, r1
 8008e94:	f7f7 fdda 	bl	8000a4c <__aeabi_d2iz>
 8008e98:	2200      	movs	r2, #0
 8008e9a:	4607      	mov	r7, r0
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7f7 fd95 	bl	80009d0 <__aeabi_dcmplt>
 8008ea6:	b140      	cbz	r0, 8008eba <_dtoa_r+0x16a>
 8008ea8:	4638      	mov	r0, r7
 8008eaa:	f7f7 fab5 	bl	8000418 <__aeabi_i2d>
 8008eae:	4622      	mov	r2, r4
 8008eb0:	462b      	mov	r3, r5
 8008eb2:	f7f7 fd83 	bl	80009bc <__aeabi_dcmpeq>
 8008eb6:	b900      	cbnz	r0, 8008eba <_dtoa_r+0x16a>
 8008eb8:	3f01      	subs	r7, #1
 8008eba:	2f16      	cmp	r7, #22
 8008ebc:	d854      	bhi.n	8008f68 <_dtoa_r+0x218>
 8008ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ec2:	4b60      	ldr	r3, [pc, #384]	@ (8009044 <_dtoa_r+0x2f4>)
 8008ec4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ecc:	f7f7 fd80 	bl	80009d0 <__aeabi_dcmplt>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d04b      	beq.n	8008f6c <_dtoa_r+0x21c>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	3f01      	subs	r7, #1
 8008ed8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008eda:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008edc:	1b9b      	subs	r3, r3, r6
 8008ede:	1e5a      	subs	r2, r3, #1
 8008ee0:	bf49      	itett	mi
 8008ee2:	f1c3 0301 	rsbmi	r3, r3, #1
 8008ee6:	2300      	movpl	r3, #0
 8008ee8:	9304      	strmi	r3, [sp, #16]
 8008eea:	2300      	movmi	r3, #0
 8008eec:	9209      	str	r2, [sp, #36]	@ 0x24
 8008eee:	bf54      	ite	pl
 8008ef0:	9304      	strpl	r3, [sp, #16]
 8008ef2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008ef4:	2f00      	cmp	r7, #0
 8008ef6:	db3b      	blt.n	8008f70 <_dtoa_r+0x220>
 8008ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008efa:	970e      	str	r7, [sp, #56]	@ 0x38
 8008efc:	443b      	add	r3, r7
 8008efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f00:	2300      	movs	r3, #0
 8008f02:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f06:	2b09      	cmp	r3, #9
 8008f08:	d865      	bhi.n	8008fd6 <_dtoa_r+0x286>
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	bfc4      	itt	gt
 8008f0e:	3b04      	subgt	r3, #4
 8008f10:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008f12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f14:	bfc8      	it	gt
 8008f16:	2400      	movgt	r4, #0
 8008f18:	f1a3 0302 	sub.w	r3, r3, #2
 8008f1c:	bfd8      	it	le
 8008f1e:	2401      	movle	r4, #1
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	d864      	bhi.n	8008fee <_dtoa_r+0x29e>
 8008f24:	e8df f003 	tbb	[pc, r3]
 8008f28:	2c385553 	.word	0x2c385553
 8008f2c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008f30:	441e      	add	r6, r3
 8008f32:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	bfc1      	itttt	gt
 8008f3a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008f3e:	fa08 f803 	lslgt.w	r8, r8, r3
 8008f42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008f46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008f4a:	bfd6      	itet	le
 8008f4c:	f1c3 0320 	rsble	r3, r3, #32
 8008f50:	ea48 0003 	orrgt.w	r0, r8, r3
 8008f54:	fa04 f003 	lslle.w	r0, r4, r3
 8008f58:	f7f7 fa4e 	bl	80003f8 <__aeabi_ui2d>
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008f62:	3e01      	subs	r6, #1
 8008f64:	9212      	str	r2, [sp, #72]	@ 0x48
 8008f66:	e774      	b.n	8008e52 <_dtoa_r+0x102>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e7b5      	b.n	8008ed8 <_dtoa_r+0x188>
 8008f6c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008f6e:	e7b4      	b.n	8008eda <_dtoa_r+0x18a>
 8008f70:	9b04      	ldr	r3, [sp, #16]
 8008f72:	1bdb      	subs	r3, r3, r7
 8008f74:	9304      	str	r3, [sp, #16]
 8008f76:	427b      	negs	r3, r7
 8008f78:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f7e:	e7c1      	b.n	8008f04 <_dtoa_r+0x1b4>
 8008f80:	2301      	movs	r3, #1
 8008f82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008f86:	eb07 0b03 	add.w	fp, r7, r3
 8008f8a:	f10b 0301 	add.w	r3, fp, #1
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	9308      	str	r3, [sp, #32]
 8008f92:	bfb8      	it	lt
 8008f94:	2301      	movlt	r3, #1
 8008f96:	e006      	b.n	8008fa6 <_dtoa_r+0x256>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	dd28      	ble.n	8008ff4 <_dtoa_r+0x2a4>
 8008fa2:	469b      	mov	fp, r3
 8008fa4:	9308      	str	r3, [sp, #32]
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	2204      	movs	r2, #4
 8008faa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008fae:	f102 0514 	add.w	r5, r2, #20
 8008fb2:	429d      	cmp	r5, r3
 8008fb4:	d926      	bls.n	8009004 <_dtoa_r+0x2b4>
 8008fb6:	6041      	str	r1, [r0, #4]
 8008fb8:	4648      	mov	r0, r9
 8008fba:	f001 f831 	bl	800a020 <_Balloc>
 8008fbe:	4682      	mov	sl, r0
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d143      	bne.n	800904c <_dtoa_r+0x2fc>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008fca:	4b1f      	ldr	r3, [pc, #124]	@ (8009048 <_dtoa_r+0x2f8>)
 8008fcc:	e6d4      	b.n	8008d78 <_dtoa_r+0x28>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e7e3      	b.n	8008f9a <_dtoa_r+0x24a>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e7d5      	b.n	8008f82 <_dtoa_r+0x232>
 8008fd6:	2401      	movs	r4, #1
 8008fd8:	2300      	movs	r3, #0
 8008fda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008fdc:	9320      	str	r3, [sp, #128]	@ 0x80
 8008fde:	f04f 3bff 	mov.w	fp, #4294967295
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2312      	movs	r3, #18
 8008fe6:	f8cd b020 	str.w	fp, [sp, #32]
 8008fea:	9221      	str	r2, [sp, #132]	@ 0x84
 8008fec:	e7db      	b.n	8008fa6 <_dtoa_r+0x256>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ff2:	e7f4      	b.n	8008fde <_dtoa_r+0x28e>
 8008ff4:	f04f 0b01 	mov.w	fp, #1
 8008ff8:	465b      	mov	r3, fp
 8008ffa:	f8cd b020 	str.w	fp, [sp, #32]
 8008ffe:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8009002:	e7d0      	b.n	8008fa6 <_dtoa_r+0x256>
 8009004:	3101      	adds	r1, #1
 8009006:	0052      	lsls	r2, r2, #1
 8009008:	e7d1      	b.n	8008fae <_dtoa_r+0x25e>
 800900a:	bf00      	nop
 800900c:	f3af 8000 	nop.w
 8009010:	636f4361 	.word	0x636f4361
 8009014:	3fd287a7 	.word	0x3fd287a7
 8009018:	8b60c8b3 	.word	0x8b60c8b3
 800901c:	3fc68a28 	.word	0x3fc68a28
 8009020:	509f79fb 	.word	0x509f79fb
 8009024:	3fd34413 	.word	0x3fd34413
 8009028:	0800b780 	.word	0x0800b780
 800902c:	0800b797 	.word	0x0800b797
 8009030:	7ff00000 	.word	0x7ff00000
 8009034:	0800b77c 	.word	0x0800b77c
 8009038:	0800b743 	.word	0x0800b743
 800903c:	0800b742 	.word	0x0800b742
 8009040:	3ff80000 	.word	0x3ff80000
 8009044:	0800b990 	.word	0x0800b990
 8009048:	0800b7ef 	.word	0x0800b7ef
 800904c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009050:	6018      	str	r0, [r3, #0]
 8009052:	9b08      	ldr	r3, [sp, #32]
 8009054:	2b0e      	cmp	r3, #14
 8009056:	f200 80a1 	bhi.w	800919c <_dtoa_r+0x44c>
 800905a:	2c00      	cmp	r4, #0
 800905c:	f000 809e 	beq.w	800919c <_dtoa_r+0x44c>
 8009060:	2f00      	cmp	r7, #0
 8009062:	dd33      	ble.n	80090cc <_dtoa_r+0x37c>
 8009064:	4b9c      	ldr	r3, [pc, #624]	@ (80092d8 <_dtoa_r+0x588>)
 8009066:	f007 020f 	and.w	r2, r7, #15
 800906a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800906e:	05f8      	lsls	r0, r7, #23
 8009070:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009074:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8009078:	ea4f 1427 	mov.w	r4, r7, asr #4
 800907c:	d516      	bpl.n	80090ac <_dtoa_r+0x35c>
 800907e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009082:	4b96      	ldr	r3, [pc, #600]	@ (80092dc <_dtoa_r+0x58c>)
 8009084:	2603      	movs	r6, #3
 8009086:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800908a:	f7f7 fb59 	bl	8000740 <__aeabi_ddiv>
 800908e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009092:	f004 040f 	and.w	r4, r4, #15
 8009096:	4d91      	ldr	r5, [pc, #580]	@ (80092dc <_dtoa_r+0x58c>)
 8009098:	b954      	cbnz	r4, 80090b0 <_dtoa_r+0x360>
 800909a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800909e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090a2:	f7f7 fb4d 	bl	8000740 <__aeabi_ddiv>
 80090a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090aa:	e028      	b.n	80090fe <_dtoa_r+0x3ae>
 80090ac:	2602      	movs	r6, #2
 80090ae:	e7f2      	b.n	8009096 <_dtoa_r+0x346>
 80090b0:	07e1      	lsls	r1, r4, #31
 80090b2:	d508      	bpl.n	80090c6 <_dtoa_r+0x376>
 80090b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80090b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090bc:	f7f7 fa16 	bl	80004ec <__aeabi_dmul>
 80090c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80090c4:	3601      	adds	r6, #1
 80090c6:	1064      	asrs	r4, r4, #1
 80090c8:	3508      	adds	r5, #8
 80090ca:	e7e5      	b.n	8009098 <_dtoa_r+0x348>
 80090cc:	f000 80af 	beq.w	800922e <_dtoa_r+0x4de>
 80090d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090d4:	427c      	negs	r4, r7
 80090d6:	4b80      	ldr	r3, [pc, #512]	@ (80092d8 <_dtoa_r+0x588>)
 80090d8:	f004 020f 	and.w	r2, r4, #15
 80090dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	f7f7 fa02 	bl	80004ec <__aeabi_dmul>
 80090e8:	2602      	movs	r6, #2
 80090ea:	2300      	movs	r3, #0
 80090ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090f0:	4d7a      	ldr	r5, [pc, #488]	@ (80092dc <_dtoa_r+0x58c>)
 80090f2:	1124      	asrs	r4, r4, #4
 80090f4:	2c00      	cmp	r4, #0
 80090f6:	f040 808f 	bne.w	8009218 <_dtoa_r+0x4c8>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1d3      	bne.n	80090a6 <_dtoa_r+0x356>
 80090fe:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009102:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 8094 	beq.w	8009232 <_dtoa_r+0x4e2>
 800910a:	2200      	movs	r2, #0
 800910c:	4620      	mov	r0, r4
 800910e:	4629      	mov	r1, r5
 8009110:	4b73      	ldr	r3, [pc, #460]	@ (80092e0 <_dtoa_r+0x590>)
 8009112:	f7f7 fc5d 	bl	80009d0 <__aeabi_dcmplt>
 8009116:	2800      	cmp	r0, #0
 8009118:	f000 808b 	beq.w	8009232 <_dtoa_r+0x4e2>
 800911c:	9b08      	ldr	r3, [sp, #32]
 800911e:	2b00      	cmp	r3, #0
 8009120:	f000 8087 	beq.w	8009232 <_dtoa_r+0x4e2>
 8009124:	f1bb 0f00 	cmp.w	fp, #0
 8009128:	dd34      	ble.n	8009194 <_dtoa_r+0x444>
 800912a:	4620      	mov	r0, r4
 800912c:	2200      	movs	r2, #0
 800912e:	4629      	mov	r1, r5
 8009130:	4b6c      	ldr	r3, [pc, #432]	@ (80092e4 <_dtoa_r+0x594>)
 8009132:	f7f7 f9db 	bl	80004ec <__aeabi_dmul>
 8009136:	465c      	mov	r4, fp
 8009138:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800913c:	f107 38ff 	add.w	r8, r7, #4294967295
 8009140:	3601      	adds	r6, #1
 8009142:	4630      	mov	r0, r6
 8009144:	f7f7 f968 	bl	8000418 <__aeabi_i2d>
 8009148:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800914c:	f7f7 f9ce 	bl	80004ec <__aeabi_dmul>
 8009150:	2200      	movs	r2, #0
 8009152:	4b65      	ldr	r3, [pc, #404]	@ (80092e8 <_dtoa_r+0x598>)
 8009154:	f7f7 f814 	bl	8000180 <__adddf3>
 8009158:	4605      	mov	r5, r0
 800915a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800915e:	2c00      	cmp	r4, #0
 8009160:	d16a      	bne.n	8009238 <_dtoa_r+0x4e8>
 8009162:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009166:	2200      	movs	r2, #0
 8009168:	4b60      	ldr	r3, [pc, #384]	@ (80092ec <_dtoa_r+0x59c>)
 800916a:	f7f7 f807 	bl	800017c <__aeabi_dsub>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009176:	462a      	mov	r2, r5
 8009178:	4633      	mov	r3, r6
 800917a:	f7f7 fc47 	bl	8000a0c <__aeabi_dcmpgt>
 800917e:	2800      	cmp	r0, #0
 8009180:	f040 8298 	bne.w	80096b4 <_dtoa_r+0x964>
 8009184:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009188:	462a      	mov	r2, r5
 800918a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800918e:	f7f7 fc1f 	bl	80009d0 <__aeabi_dcmplt>
 8009192:	bb38      	cbnz	r0, 80091e4 <_dtoa_r+0x494>
 8009194:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009198:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800919c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f2c0 8157 	blt.w	8009452 <_dtoa_r+0x702>
 80091a4:	2f0e      	cmp	r7, #14
 80091a6:	f300 8154 	bgt.w	8009452 <_dtoa_r+0x702>
 80091aa:	4b4b      	ldr	r3, [pc, #300]	@ (80092d8 <_dtoa_r+0x588>)
 80091ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80091b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80091b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f280 80e5 	bge.w	800938a <_dtoa_r+0x63a>
 80091c0:	9b08      	ldr	r3, [sp, #32]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f300 80e1 	bgt.w	800938a <_dtoa_r+0x63a>
 80091c8:	d10c      	bne.n	80091e4 <_dtoa_r+0x494>
 80091ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091ce:	2200      	movs	r2, #0
 80091d0:	4b46      	ldr	r3, [pc, #280]	@ (80092ec <_dtoa_r+0x59c>)
 80091d2:	f7f7 f98b 	bl	80004ec <__aeabi_dmul>
 80091d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091da:	f7f7 fc0d 	bl	80009f8 <__aeabi_dcmpge>
 80091de:	2800      	cmp	r0, #0
 80091e0:	f000 8266 	beq.w	80096b0 <_dtoa_r+0x960>
 80091e4:	2400      	movs	r4, #0
 80091e6:	4625      	mov	r5, r4
 80091e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80091ea:	4656      	mov	r6, sl
 80091ec:	ea6f 0803 	mvn.w	r8, r3
 80091f0:	2700      	movs	r7, #0
 80091f2:	4621      	mov	r1, r4
 80091f4:	4648      	mov	r0, r9
 80091f6:	f000 ff53 	bl	800a0a0 <_Bfree>
 80091fa:	2d00      	cmp	r5, #0
 80091fc:	f000 80bd 	beq.w	800937a <_dtoa_r+0x62a>
 8009200:	b12f      	cbz	r7, 800920e <_dtoa_r+0x4be>
 8009202:	42af      	cmp	r7, r5
 8009204:	d003      	beq.n	800920e <_dtoa_r+0x4be>
 8009206:	4639      	mov	r1, r7
 8009208:	4648      	mov	r0, r9
 800920a:	f000 ff49 	bl	800a0a0 <_Bfree>
 800920e:	4629      	mov	r1, r5
 8009210:	4648      	mov	r0, r9
 8009212:	f000 ff45 	bl	800a0a0 <_Bfree>
 8009216:	e0b0      	b.n	800937a <_dtoa_r+0x62a>
 8009218:	07e2      	lsls	r2, r4, #31
 800921a:	d505      	bpl.n	8009228 <_dtoa_r+0x4d8>
 800921c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009220:	f7f7 f964 	bl	80004ec <__aeabi_dmul>
 8009224:	2301      	movs	r3, #1
 8009226:	3601      	adds	r6, #1
 8009228:	1064      	asrs	r4, r4, #1
 800922a:	3508      	adds	r5, #8
 800922c:	e762      	b.n	80090f4 <_dtoa_r+0x3a4>
 800922e:	2602      	movs	r6, #2
 8009230:	e765      	b.n	80090fe <_dtoa_r+0x3ae>
 8009232:	46b8      	mov	r8, r7
 8009234:	9c08      	ldr	r4, [sp, #32]
 8009236:	e784      	b.n	8009142 <_dtoa_r+0x3f2>
 8009238:	4b27      	ldr	r3, [pc, #156]	@ (80092d8 <_dtoa_r+0x588>)
 800923a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800923c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009240:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009244:	4454      	add	r4, sl
 8009246:	2900      	cmp	r1, #0
 8009248:	d054      	beq.n	80092f4 <_dtoa_r+0x5a4>
 800924a:	2000      	movs	r0, #0
 800924c:	4928      	ldr	r1, [pc, #160]	@ (80092f0 <_dtoa_r+0x5a0>)
 800924e:	f7f7 fa77 	bl	8000740 <__aeabi_ddiv>
 8009252:	4633      	mov	r3, r6
 8009254:	462a      	mov	r2, r5
 8009256:	f7f6 ff91 	bl	800017c <__aeabi_dsub>
 800925a:	4656      	mov	r6, sl
 800925c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009264:	f7f7 fbf2 	bl	8000a4c <__aeabi_d2iz>
 8009268:	4605      	mov	r5, r0
 800926a:	f7f7 f8d5 	bl	8000418 <__aeabi_i2d>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009276:	f7f6 ff81 	bl	800017c <__aeabi_dsub>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	3530      	adds	r5, #48	@ 0x30
 8009280:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009284:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009288:	f806 5b01 	strb.w	r5, [r6], #1
 800928c:	f7f7 fba0 	bl	80009d0 <__aeabi_dcmplt>
 8009290:	2800      	cmp	r0, #0
 8009292:	d172      	bne.n	800937a <_dtoa_r+0x62a>
 8009294:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009298:	2000      	movs	r0, #0
 800929a:	4911      	ldr	r1, [pc, #68]	@ (80092e0 <_dtoa_r+0x590>)
 800929c:	f7f6 ff6e 	bl	800017c <__aeabi_dsub>
 80092a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092a4:	f7f7 fb94 	bl	80009d0 <__aeabi_dcmplt>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	f040 80b4 	bne.w	8009416 <_dtoa_r+0x6c6>
 80092ae:	42a6      	cmp	r6, r4
 80092b0:	f43f af70 	beq.w	8009194 <_dtoa_r+0x444>
 80092b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80092b8:	2200      	movs	r2, #0
 80092ba:	4b0a      	ldr	r3, [pc, #40]	@ (80092e4 <_dtoa_r+0x594>)
 80092bc:	f7f7 f916 	bl	80004ec <__aeabi_dmul>
 80092c0:	2200      	movs	r2, #0
 80092c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80092c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092ca:	4b06      	ldr	r3, [pc, #24]	@ (80092e4 <_dtoa_r+0x594>)
 80092cc:	f7f7 f90e 	bl	80004ec <__aeabi_dmul>
 80092d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80092d4:	e7c4      	b.n	8009260 <_dtoa_r+0x510>
 80092d6:	bf00      	nop
 80092d8:	0800b990 	.word	0x0800b990
 80092dc:	0800b968 	.word	0x0800b968
 80092e0:	3ff00000 	.word	0x3ff00000
 80092e4:	40240000 	.word	0x40240000
 80092e8:	401c0000 	.word	0x401c0000
 80092ec:	40140000 	.word	0x40140000
 80092f0:	3fe00000 	.word	0x3fe00000
 80092f4:	4631      	mov	r1, r6
 80092f6:	4628      	mov	r0, r5
 80092f8:	f7f7 f8f8 	bl	80004ec <__aeabi_dmul>
 80092fc:	4656      	mov	r6, sl
 80092fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009302:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009304:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009308:	f7f7 fba0 	bl	8000a4c <__aeabi_d2iz>
 800930c:	4605      	mov	r5, r0
 800930e:	f7f7 f883 	bl	8000418 <__aeabi_i2d>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800931a:	f7f6 ff2f 	bl	800017c <__aeabi_dsub>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	3530      	adds	r5, #48	@ 0x30
 8009324:	f806 5b01 	strb.w	r5, [r6], #1
 8009328:	42a6      	cmp	r6, r4
 800932a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800932e:	f04f 0200 	mov.w	r2, #0
 8009332:	d124      	bne.n	800937e <_dtoa_r+0x62e>
 8009334:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009338:	4bae      	ldr	r3, [pc, #696]	@ (80095f4 <_dtoa_r+0x8a4>)
 800933a:	f7f6 ff21 	bl	8000180 <__adddf3>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009346:	f7f7 fb61 	bl	8000a0c <__aeabi_dcmpgt>
 800934a:	2800      	cmp	r0, #0
 800934c:	d163      	bne.n	8009416 <_dtoa_r+0x6c6>
 800934e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009352:	2000      	movs	r0, #0
 8009354:	49a7      	ldr	r1, [pc, #668]	@ (80095f4 <_dtoa_r+0x8a4>)
 8009356:	f7f6 ff11 	bl	800017c <__aeabi_dsub>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009362:	f7f7 fb35 	bl	80009d0 <__aeabi_dcmplt>
 8009366:	2800      	cmp	r0, #0
 8009368:	f43f af14 	beq.w	8009194 <_dtoa_r+0x444>
 800936c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800936e:	1e73      	subs	r3, r6, #1
 8009370:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009372:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009376:	2b30      	cmp	r3, #48	@ 0x30
 8009378:	d0f8      	beq.n	800936c <_dtoa_r+0x61c>
 800937a:	4647      	mov	r7, r8
 800937c:	e03b      	b.n	80093f6 <_dtoa_r+0x6a6>
 800937e:	4b9e      	ldr	r3, [pc, #632]	@ (80095f8 <_dtoa_r+0x8a8>)
 8009380:	f7f7 f8b4 	bl	80004ec <__aeabi_dmul>
 8009384:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009388:	e7bc      	b.n	8009304 <_dtoa_r+0x5b4>
 800938a:	4656      	mov	r6, sl
 800938c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009394:	4620      	mov	r0, r4
 8009396:	4629      	mov	r1, r5
 8009398:	f7f7 f9d2 	bl	8000740 <__aeabi_ddiv>
 800939c:	f7f7 fb56 	bl	8000a4c <__aeabi_d2iz>
 80093a0:	4680      	mov	r8, r0
 80093a2:	f7f7 f839 	bl	8000418 <__aeabi_i2d>
 80093a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093aa:	f7f7 f89f 	bl	80004ec <__aeabi_dmul>
 80093ae:	4602      	mov	r2, r0
 80093b0:	460b      	mov	r3, r1
 80093b2:	4620      	mov	r0, r4
 80093b4:	4629      	mov	r1, r5
 80093b6:	f7f6 fee1 	bl	800017c <__aeabi_dsub>
 80093ba:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80093be:	9d08      	ldr	r5, [sp, #32]
 80093c0:	f806 4b01 	strb.w	r4, [r6], #1
 80093c4:	eba6 040a 	sub.w	r4, r6, sl
 80093c8:	42a5      	cmp	r5, r4
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	d133      	bne.n	8009438 <_dtoa_r+0x6e8>
 80093d0:	f7f6 fed6 	bl	8000180 <__adddf3>
 80093d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093d8:	4604      	mov	r4, r0
 80093da:	460d      	mov	r5, r1
 80093dc:	f7f7 fb16 	bl	8000a0c <__aeabi_dcmpgt>
 80093e0:	b9c0      	cbnz	r0, 8009414 <_dtoa_r+0x6c4>
 80093e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093e6:	4620      	mov	r0, r4
 80093e8:	4629      	mov	r1, r5
 80093ea:	f7f7 fae7 	bl	80009bc <__aeabi_dcmpeq>
 80093ee:	b110      	cbz	r0, 80093f6 <_dtoa_r+0x6a6>
 80093f0:	f018 0f01 	tst.w	r8, #1
 80093f4:	d10e      	bne.n	8009414 <_dtoa_r+0x6c4>
 80093f6:	4648      	mov	r0, r9
 80093f8:	9903      	ldr	r1, [sp, #12]
 80093fa:	f000 fe51 	bl	800a0a0 <_Bfree>
 80093fe:	2300      	movs	r3, #0
 8009400:	7033      	strb	r3, [r6, #0]
 8009402:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009404:	3701      	adds	r7, #1
 8009406:	601f      	str	r7, [r3, #0]
 8009408:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 824b 	beq.w	80098a6 <_dtoa_r+0xb56>
 8009410:	601e      	str	r6, [r3, #0]
 8009412:	e248      	b.n	80098a6 <_dtoa_r+0xb56>
 8009414:	46b8      	mov	r8, r7
 8009416:	4633      	mov	r3, r6
 8009418:	461e      	mov	r6, r3
 800941a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800941e:	2a39      	cmp	r2, #57	@ 0x39
 8009420:	d106      	bne.n	8009430 <_dtoa_r+0x6e0>
 8009422:	459a      	cmp	sl, r3
 8009424:	d1f8      	bne.n	8009418 <_dtoa_r+0x6c8>
 8009426:	2230      	movs	r2, #48	@ 0x30
 8009428:	f108 0801 	add.w	r8, r8, #1
 800942c:	f88a 2000 	strb.w	r2, [sl]
 8009430:	781a      	ldrb	r2, [r3, #0]
 8009432:	3201      	adds	r2, #1
 8009434:	701a      	strb	r2, [r3, #0]
 8009436:	e7a0      	b.n	800937a <_dtoa_r+0x62a>
 8009438:	2200      	movs	r2, #0
 800943a:	4b6f      	ldr	r3, [pc, #444]	@ (80095f8 <_dtoa_r+0x8a8>)
 800943c:	f7f7 f856 	bl	80004ec <__aeabi_dmul>
 8009440:	2200      	movs	r2, #0
 8009442:	2300      	movs	r3, #0
 8009444:	4604      	mov	r4, r0
 8009446:	460d      	mov	r5, r1
 8009448:	f7f7 fab8 	bl	80009bc <__aeabi_dcmpeq>
 800944c:	2800      	cmp	r0, #0
 800944e:	d09f      	beq.n	8009390 <_dtoa_r+0x640>
 8009450:	e7d1      	b.n	80093f6 <_dtoa_r+0x6a6>
 8009452:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009454:	2a00      	cmp	r2, #0
 8009456:	f000 80ea 	beq.w	800962e <_dtoa_r+0x8de>
 800945a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800945c:	2a01      	cmp	r2, #1
 800945e:	f300 80cd 	bgt.w	80095fc <_dtoa_r+0x8ac>
 8009462:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009464:	2a00      	cmp	r2, #0
 8009466:	f000 80c1 	beq.w	80095ec <_dtoa_r+0x89c>
 800946a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800946e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009470:	9e04      	ldr	r6, [sp, #16]
 8009472:	9a04      	ldr	r2, [sp, #16]
 8009474:	2101      	movs	r1, #1
 8009476:	441a      	add	r2, r3
 8009478:	9204      	str	r2, [sp, #16]
 800947a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800947c:	4648      	mov	r0, r9
 800947e:	441a      	add	r2, r3
 8009480:	9209      	str	r2, [sp, #36]	@ 0x24
 8009482:	f000 ff0b 	bl	800a29c <__i2b>
 8009486:	4605      	mov	r5, r0
 8009488:	b166      	cbz	r6, 80094a4 <_dtoa_r+0x754>
 800948a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800948c:	2b00      	cmp	r3, #0
 800948e:	dd09      	ble.n	80094a4 <_dtoa_r+0x754>
 8009490:	42b3      	cmp	r3, r6
 8009492:	bfa8      	it	ge
 8009494:	4633      	movge	r3, r6
 8009496:	9a04      	ldr	r2, [sp, #16]
 8009498:	1af6      	subs	r6, r6, r3
 800949a:	1ad2      	subs	r2, r2, r3
 800949c:	9204      	str	r2, [sp, #16]
 800949e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80094a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094a6:	b30b      	cbz	r3, 80094ec <_dtoa_r+0x79c>
 80094a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 80c6 	beq.w	800963c <_dtoa_r+0x8ec>
 80094b0:	2c00      	cmp	r4, #0
 80094b2:	f000 80c0 	beq.w	8009636 <_dtoa_r+0x8e6>
 80094b6:	4629      	mov	r1, r5
 80094b8:	4622      	mov	r2, r4
 80094ba:	4648      	mov	r0, r9
 80094bc:	f000 ffa6 	bl	800a40c <__pow5mult>
 80094c0:	9a03      	ldr	r2, [sp, #12]
 80094c2:	4601      	mov	r1, r0
 80094c4:	4605      	mov	r5, r0
 80094c6:	4648      	mov	r0, r9
 80094c8:	f000 fefe 	bl	800a2c8 <__multiply>
 80094cc:	9903      	ldr	r1, [sp, #12]
 80094ce:	4680      	mov	r8, r0
 80094d0:	4648      	mov	r0, r9
 80094d2:	f000 fde5 	bl	800a0a0 <_Bfree>
 80094d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094d8:	1b1b      	subs	r3, r3, r4
 80094da:	930a      	str	r3, [sp, #40]	@ 0x28
 80094dc:	f000 80b1 	beq.w	8009642 <_dtoa_r+0x8f2>
 80094e0:	4641      	mov	r1, r8
 80094e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094e4:	4648      	mov	r0, r9
 80094e6:	f000 ff91 	bl	800a40c <__pow5mult>
 80094ea:	9003      	str	r0, [sp, #12]
 80094ec:	2101      	movs	r1, #1
 80094ee:	4648      	mov	r0, r9
 80094f0:	f000 fed4 	bl	800a29c <__i2b>
 80094f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094f6:	4604      	mov	r4, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 81d8 	beq.w	80098ae <_dtoa_r+0xb5e>
 80094fe:	461a      	mov	r2, r3
 8009500:	4601      	mov	r1, r0
 8009502:	4648      	mov	r0, r9
 8009504:	f000 ff82 	bl	800a40c <__pow5mult>
 8009508:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800950a:	4604      	mov	r4, r0
 800950c:	2b01      	cmp	r3, #1
 800950e:	f300 809f 	bgt.w	8009650 <_dtoa_r+0x900>
 8009512:	9b06      	ldr	r3, [sp, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f040 8097 	bne.w	8009648 <_dtoa_r+0x8f8>
 800951a:	9b07      	ldr	r3, [sp, #28]
 800951c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009520:	2b00      	cmp	r3, #0
 8009522:	f040 8093 	bne.w	800964c <_dtoa_r+0x8fc>
 8009526:	9b07      	ldr	r3, [sp, #28]
 8009528:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800952c:	0d1b      	lsrs	r3, r3, #20
 800952e:	051b      	lsls	r3, r3, #20
 8009530:	b133      	cbz	r3, 8009540 <_dtoa_r+0x7f0>
 8009532:	9b04      	ldr	r3, [sp, #16]
 8009534:	3301      	adds	r3, #1
 8009536:	9304      	str	r3, [sp, #16]
 8009538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800953a:	3301      	adds	r3, #1
 800953c:	9309      	str	r3, [sp, #36]	@ 0x24
 800953e:	2301      	movs	r3, #1
 8009540:	930a      	str	r3, [sp, #40]	@ 0x28
 8009542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 81b8 	beq.w	80098ba <_dtoa_r+0xb6a>
 800954a:	6923      	ldr	r3, [r4, #16]
 800954c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009550:	6918      	ldr	r0, [r3, #16]
 8009552:	f000 fe57 	bl	800a204 <__hi0bits>
 8009556:	f1c0 0020 	rsb	r0, r0, #32
 800955a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800955c:	4418      	add	r0, r3
 800955e:	f010 001f 	ands.w	r0, r0, #31
 8009562:	f000 8082 	beq.w	800966a <_dtoa_r+0x91a>
 8009566:	f1c0 0320 	rsb	r3, r0, #32
 800956a:	2b04      	cmp	r3, #4
 800956c:	dd73      	ble.n	8009656 <_dtoa_r+0x906>
 800956e:	9b04      	ldr	r3, [sp, #16]
 8009570:	f1c0 001c 	rsb	r0, r0, #28
 8009574:	4403      	add	r3, r0
 8009576:	9304      	str	r3, [sp, #16]
 8009578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800957a:	4406      	add	r6, r0
 800957c:	4403      	add	r3, r0
 800957e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009580:	9b04      	ldr	r3, [sp, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	dd05      	ble.n	8009592 <_dtoa_r+0x842>
 8009586:	461a      	mov	r2, r3
 8009588:	4648      	mov	r0, r9
 800958a:	9903      	ldr	r1, [sp, #12]
 800958c:	f000 ff98 	bl	800a4c0 <__lshift>
 8009590:	9003      	str	r0, [sp, #12]
 8009592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	dd05      	ble.n	80095a4 <_dtoa_r+0x854>
 8009598:	4621      	mov	r1, r4
 800959a:	461a      	mov	r2, r3
 800959c:	4648      	mov	r0, r9
 800959e:	f000 ff8f 	bl	800a4c0 <__lshift>
 80095a2:	4604      	mov	r4, r0
 80095a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d061      	beq.n	800966e <_dtoa_r+0x91e>
 80095aa:	4621      	mov	r1, r4
 80095ac:	9803      	ldr	r0, [sp, #12]
 80095ae:	f000 fff3 	bl	800a598 <__mcmp>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	da5b      	bge.n	800966e <_dtoa_r+0x91e>
 80095b6:	2300      	movs	r3, #0
 80095b8:	220a      	movs	r2, #10
 80095ba:	4648      	mov	r0, r9
 80095bc:	9903      	ldr	r1, [sp, #12]
 80095be:	f000 fd91 	bl	800a0e4 <__multadd>
 80095c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095c4:	f107 38ff 	add.w	r8, r7, #4294967295
 80095c8:	9003      	str	r0, [sp, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8177 	beq.w	80098be <_dtoa_r+0xb6e>
 80095d0:	4629      	mov	r1, r5
 80095d2:	2300      	movs	r3, #0
 80095d4:	220a      	movs	r2, #10
 80095d6:	4648      	mov	r0, r9
 80095d8:	f000 fd84 	bl	800a0e4 <__multadd>
 80095dc:	f1bb 0f00 	cmp.w	fp, #0
 80095e0:	4605      	mov	r5, r0
 80095e2:	dc6f      	bgt.n	80096c4 <_dtoa_r+0x974>
 80095e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	dc49      	bgt.n	800967e <_dtoa_r+0x92e>
 80095ea:	e06b      	b.n	80096c4 <_dtoa_r+0x974>
 80095ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80095f2:	e73c      	b.n	800946e <_dtoa_r+0x71e>
 80095f4:	3fe00000 	.word	0x3fe00000
 80095f8:	40240000 	.word	0x40240000
 80095fc:	9b08      	ldr	r3, [sp, #32]
 80095fe:	1e5c      	subs	r4, r3, #1
 8009600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009602:	42a3      	cmp	r3, r4
 8009604:	db09      	blt.n	800961a <_dtoa_r+0x8ca>
 8009606:	1b1c      	subs	r4, r3, r4
 8009608:	9b08      	ldr	r3, [sp, #32]
 800960a:	2b00      	cmp	r3, #0
 800960c:	f6bf af30 	bge.w	8009470 <_dtoa_r+0x720>
 8009610:	9b04      	ldr	r3, [sp, #16]
 8009612:	9a08      	ldr	r2, [sp, #32]
 8009614:	1a9e      	subs	r6, r3, r2
 8009616:	2300      	movs	r3, #0
 8009618:	e72b      	b.n	8009472 <_dtoa_r+0x722>
 800961a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800961c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800961e:	1ae3      	subs	r3, r4, r3
 8009620:	441a      	add	r2, r3
 8009622:	940a      	str	r4, [sp, #40]	@ 0x28
 8009624:	9e04      	ldr	r6, [sp, #16]
 8009626:	2400      	movs	r4, #0
 8009628:	9b08      	ldr	r3, [sp, #32]
 800962a:	920e      	str	r2, [sp, #56]	@ 0x38
 800962c:	e721      	b.n	8009472 <_dtoa_r+0x722>
 800962e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009630:	9e04      	ldr	r6, [sp, #16]
 8009632:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009634:	e728      	b.n	8009488 <_dtoa_r+0x738>
 8009636:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800963a:	e751      	b.n	80094e0 <_dtoa_r+0x790>
 800963c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800963e:	9903      	ldr	r1, [sp, #12]
 8009640:	e750      	b.n	80094e4 <_dtoa_r+0x794>
 8009642:	f8cd 800c 	str.w	r8, [sp, #12]
 8009646:	e751      	b.n	80094ec <_dtoa_r+0x79c>
 8009648:	2300      	movs	r3, #0
 800964a:	e779      	b.n	8009540 <_dtoa_r+0x7f0>
 800964c:	9b06      	ldr	r3, [sp, #24]
 800964e:	e777      	b.n	8009540 <_dtoa_r+0x7f0>
 8009650:	2300      	movs	r3, #0
 8009652:	930a      	str	r3, [sp, #40]	@ 0x28
 8009654:	e779      	b.n	800954a <_dtoa_r+0x7fa>
 8009656:	d093      	beq.n	8009580 <_dtoa_r+0x830>
 8009658:	9a04      	ldr	r2, [sp, #16]
 800965a:	331c      	adds	r3, #28
 800965c:	441a      	add	r2, r3
 800965e:	9204      	str	r2, [sp, #16]
 8009660:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009662:	441e      	add	r6, r3
 8009664:	441a      	add	r2, r3
 8009666:	9209      	str	r2, [sp, #36]	@ 0x24
 8009668:	e78a      	b.n	8009580 <_dtoa_r+0x830>
 800966a:	4603      	mov	r3, r0
 800966c:	e7f4      	b.n	8009658 <_dtoa_r+0x908>
 800966e:	9b08      	ldr	r3, [sp, #32]
 8009670:	46b8      	mov	r8, r7
 8009672:	2b00      	cmp	r3, #0
 8009674:	dc20      	bgt.n	80096b8 <_dtoa_r+0x968>
 8009676:	469b      	mov	fp, r3
 8009678:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800967a:	2b02      	cmp	r3, #2
 800967c:	dd1e      	ble.n	80096bc <_dtoa_r+0x96c>
 800967e:	f1bb 0f00 	cmp.w	fp, #0
 8009682:	f47f adb1 	bne.w	80091e8 <_dtoa_r+0x498>
 8009686:	4621      	mov	r1, r4
 8009688:	465b      	mov	r3, fp
 800968a:	2205      	movs	r2, #5
 800968c:	4648      	mov	r0, r9
 800968e:	f000 fd29 	bl	800a0e4 <__multadd>
 8009692:	4601      	mov	r1, r0
 8009694:	4604      	mov	r4, r0
 8009696:	9803      	ldr	r0, [sp, #12]
 8009698:	f000 ff7e 	bl	800a598 <__mcmp>
 800969c:	2800      	cmp	r0, #0
 800969e:	f77f ada3 	ble.w	80091e8 <_dtoa_r+0x498>
 80096a2:	4656      	mov	r6, sl
 80096a4:	2331      	movs	r3, #49	@ 0x31
 80096a6:	f108 0801 	add.w	r8, r8, #1
 80096aa:	f806 3b01 	strb.w	r3, [r6], #1
 80096ae:	e59f      	b.n	80091f0 <_dtoa_r+0x4a0>
 80096b0:	46b8      	mov	r8, r7
 80096b2:	9c08      	ldr	r4, [sp, #32]
 80096b4:	4625      	mov	r5, r4
 80096b6:	e7f4      	b.n	80096a2 <_dtoa_r+0x952>
 80096b8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80096bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 8101 	beq.w	80098c6 <_dtoa_r+0xb76>
 80096c4:	2e00      	cmp	r6, #0
 80096c6:	dd05      	ble.n	80096d4 <_dtoa_r+0x984>
 80096c8:	4629      	mov	r1, r5
 80096ca:	4632      	mov	r2, r6
 80096cc:	4648      	mov	r0, r9
 80096ce:	f000 fef7 	bl	800a4c0 <__lshift>
 80096d2:	4605      	mov	r5, r0
 80096d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d05c      	beq.n	8009794 <_dtoa_r+0xa44>
 80096da:	4648      	mov	r0, r9
 80096dc:	6869      	ldr	r1, [r5, #4]
 80096de:	f000 fc9f 	bl	800a020 <_Balloc>
 80096e2:	4606      	mov	r6, r0
 80096e4:	b928      	cbnz	r0, 80096f2 <_dtoa_r+0x9a2>
 80096e6:	4602      	mov	r2, r0
 80096e8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80096ec:	4b80      	ldr	r3, [pc, #512]	@ (80098f0 <_dtoa_r+0xba0>)
 80096ee:	f7ff bb43 	b.w	8008d78 <_dtoa_r+0x28>
 80096f2:	692a      	ldr	r2, [r5, #16]
 80096f4:	f105 010c 	add.w	r1, r5, #12
 80096f8:	3202      	adds	r2, #2
 80096fa:	0092      	lsls	r2, r2, #2
 80096fc:	300c      	adds	r0, #12
 80096fe:	f7ff fa86 	bl	8008c0e <memcpy>
 8009702:	2201      	movs	r2, #1
 8009704:	4631      	mov	r1, r6
 8009706:	4648      	mov	r0, r9
 8009708:	f000 feda 	bl	800a4c0 <__lshift>
 800970c:	462f      	mov	r7, r5
 800970e:	4605      	mov	r5, r0
 8009710:	f10a 0301 	add.w	r3, sl, #1
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	eb0a 030b 	add.w	r3, sl, fp
 800971a:	930a      	str	r3, [sp, #40]	@ 0x28
 800971c:	9b06      	ldr	r3, [sp, #24]
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	9309      	str	r3, [sp, #36]	@ 0x24
 8009724:	9b04      	ldr	r3, [sp, #16]
 8009726:	4621      	mov	r1, r4
 8009728:	9803      	ldr	r0, [sp, #12]
 800972a:	f103 3bff 	add.w	fp, r3, #4294967295
 800972e:	f7ff fa87 	bl	8008c40 <quorem>
 8009732:	4603      	mov	r3, r0
 8009734:	4639      	mov	r1, r7
 8009736:	3330      	adds	r3, #48	@ 0x30
 8009738:	9006      	str	r0, [sp, #24]
 800973a:	9803      	ldr	r0, [sp, #12]
 800973c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800973e:	f000 ff2b 	bl	800a598 <__mcmp>
 8009742:	462a      	mov	r2, r5
 8009744:	9008      	str	r0, [sp, #32]
 8009746:	4621      	mov	r1, r4
 8009748:	4648      	mov	r0, r9
 800974a:	f000 ff41 	bl	800a5d0 <__mdiff>
 800974e:	68c2      	ldr	r2, [r0, #12]
 8009750:	4606      	mov	r6, r0
 8009752:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009754:	bb02      	cbnz	r2, 8009798 <_dtoa_r+0xa48>
 8009756:	4601      	mov	r1, r0
 8009758:	9803      	ldr	r0, [sp, #12]
 800975a:	f000 ff1d 	bl	800a598 <__mcmp>
 800975e:	4602      	mov	r2, r0
 8009760:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009762:	4631      	mov	r1, r6
 8009764:	4648      	mov	r0, r9
 8009766:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800976a:	f000 fc99 	bl	800a0a0 <_Bfree>
 800976e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009770:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009772:	9e04      	ldr	r6, [sp, #16]
 8009774:	ea42 0103 	orr.w	r1, r2, r3
 8009778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800977a:	4319      	orrs	r1, r3
 800977c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800977e:	d10d      	bne.n	800979c <_dtoa_r+0xa4c>
 8009780:	2b39      	cmp	r3, #57	@ 0x39
 8009782:	d027      	beq.n	80097d4 <_dtoa_r+0xa84>
 8009784:	9a08      	ldr	r2, [sp, #32]
 8009786:	2a00      	cmp	r2, #0
 8009788:	dd01      	ble.n	800978e <_dtoa_r+0xa3e>
 800978a:	9b06      	ldr	r3, [sp, #24]
 800978c:	3331      	adds	r3, #49	@ 0x31
 800978e:	f88b 3000 	strb.w	r3, [fp]
 8009792:	e52e      	b.n	80091f2 <_dtoa_r+0x4a2>
 8009794:	4628      	mov	r0, r5
 8009796:	e7b9      	b.n	800970c <_dtoa_r+0x9bc>
 8009798:	2201      	movs	r2, #1
 800979a:	e7e2      	b.n	8009762 <_dtoa_r+0xa12>
 800979c:	9908      	ldr	r1, [sp, #32]
 800979e:	2900      	cmp	r1, #0
 80097a0:	db04      	blt.n	80097ac <_dtoa_r+0xa5c>
 80097a2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80097a4:	4301      	orrs	r1, r0
 80097a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097a8:	4301      	orrs	r1, r0
 80097aa:	d120      	bne.n	80097ee <_dtoa_r+0xa9e>
 80097ac:	2a00      	cmp	r2, #0
 80097ae:	ddee      	ble.n	800978e <_dtoa_r+0xa3e>
 80097b0:	2201      	movs	r2, #1
 80097b2:	9903      	ldr	r1, [sp, #12]
 80097b4:	4648      	mov	r0, r9
 80097b6:	9304      	str	r3, [sp, #16]
 80097b8:	f000 fe82 	bl	800a4c0 <__lshift>
 80097bc:	4621      	mov	r1, r4
 80097be:	9003      	str	r0, [sp, #12]
 80097c0:	f000 feea 	bl	800a598 <__mcmp>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	9b04      	ldr	r3, [sp, #16]
 80097c8:	dc02      	bgt.n	80097d0 <_dtoa_r+0xa80>
 80097ca:	d1e0      	bne.n	800978e <_dtoa_r+0xa3e>
 80097cc:	07da      	lsls	r2, r3, #31
 80097ce:	d5de      	bpl.n	800978e <_dtoa_r+0xa3e>
 80097d0:	2b39      	cmp	r3, #57	@ 0x39
 80097d2:	d1da      	bne.n	800978a <_dtoa_r+0xa3a>
 80097d4:	2339      	movs	r3, #57	@ 0x39
 80097d6:	f88b 3000 	strb.w	r3, [fp]
 80097da:	4633      	mov	r3, r6
 80097dc:	461e      	mov	r6, r3
 80097de:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80097e2:	3b01      	subs	r3, #1
 80097e4:	2a39      	cmp	r2, #57	@ 0x39
 80097e6:	d04e      	beq.n	8009886 <_dtoa_r+0xb36>
 80097e8:	3201      	adds	r2, #1
 80097ea:	701a      	strb	r2, [r3, #0]
 80097ec:	e501      	b.n	80091f2 <_dtoa_r+0x4a2>
 80097ee:	2a00      	cmp	r2, #0
 80097f0:	dd03      	ble.n	80097fa <_dtoa_r+0xaaa>
 80097f2:	2b39      	cmp	r3, #57	@ 0x39
 80097f4:	d0ee      	beq.n	80097d4 <_dtoa_r+0xa84>
 80097f6:	3301      	adds	r3, #1
 80097f8:	e7c9      	b.n	800978e <_dtoa_r+0xa3e>
 80097fa:	9a04      	ldr	r2, [sp, #16]
 80097fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009802:	428a      	cmp	r2, r1
 8009804:	d028      	beq.n	8009858 <_dtoa_r+0xb08>
 8009806:	2300      	movs	r3, #0
 8009808:	220a      	movs	r2, #10
 800980a:	9903      	ldr	r1, [sp, #12]
 800980c:	4648      	mov	r0, r9
 800980e:	f000 fc69 	bl	800a0e4 <__multadd>
 8009812:	42af      	cmp	r7, r5
 8009814:	9003      	str	r0, [sp, #12]
 8009816:	f04f 0300 	mov.w	r3, #0
 800981a:	f04f 020a 	mov.w	r2, #10
 800981e:	4639      	mov	r1, r7
 8009820:	4648      	mov	r0, r9
 8009822:	d107      	bne.n	8009834 <_dtoa_r+0xae4>
 8009824:	f000 fc5e 	bl	800a0e4 <__multadd>
 8009828:	4607      	mov	r7, r0
 800982a:	4605      	mov	r5, r0
 800982c:	9b04      	ldr	r3, [sp, #16]
 800982e:	3301      	adds	r3, #1
 8009830:	9304      	str	r3, [sp, #16]
 8009832:	e777      	b.n	8009724 <_dtoa_r+0x9d4>
 8009834:	f000 fc56 	bl	800a0e4 <__multadd>
 8009838:	4629      	mov	r1, r5
 800983a:	4607      	mov	r7, r0
 800983c:	2300      	movs	r3, #0
 800983e:	220a      	movs	r2, #10
 8009840:	4648      	mov	r0, r9
 8009842:	f000 fc4f 	bl	800a0e4 <__multadd>
 8009846:	4605      	mov	r5, r0
 8009848:	e7f0      	b.n	800982c <_dtoa_r+0xadc>
 800984a:	f1bb 0f00 	cmp.w	fp, #0
 800984e:	bfcc      	ite	gt
 8009850:	465e      	movgt	r6, fp
 8009852:	2601      	movle	r6, #1
 8009854:	2700      	movs	r7, #0
 8009856:	4456      	add	r6, sl
 8009858:	2201      	movs	r2, #1
 800985a:	9903      	ldr	r1, [sp, #12]
 800985c:	4648      	mov	r0, r9
 800985e:	9304      	str	r3, [sp, #16]
 8009860:	f000 fe2e 	bl	800a4c0 <__lshift>
 8009864:	4621      	mov	r1, r4
 8009866:	9003      	str	r0, [sp, #12]
 8009868:	f000 fe96 	bl	800a598 <__mcmp>
 800986c:	2800      	cmp	r0, #0
 800986e:	dcb4      	bgt.n	80097da <_dtoa_r+0xa8a>
 8009870:	d102      	bne.n	8009878 <_dtoa_r+0xb28>
 8009872:	9b04      	ldr	r3, [sp, #16]
 8009874:	07db      	lsls	r3, r3, #31
 8009876:	d4b0      	bmi.n	80097da <_dtoa_r+0xa8a>
 8009878:	4633      	mov	r3, r6
 800987a:	461e      	mov	r6, r3
 800987c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009880:	2a30      	cmp	r2, #48	@ 0x30
 8009882:	d0fa      	beq.n	800987a <_dtoa_r+0xb2a>
 8009884:	e4b5      	b.n	80091f2 <_dtoa_r+0x4a2>
 8009886:	459a      	cmp	sl, r3
 8009888:	d1a8      	bne.n	80097dc <_dtoa_r+0xa8c>
 800988a:	2331      	movs	r3, #49	@ 0x31
 800988c:	f108 0801 	add.w	r8, r8, #1
 8009890:	f88a 3000 	strb.w	r3, [sl]
 8009894:	e4ad      	b.n	80091f2 <_dtoa_r+0x4a2>
 8009896:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009898:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80098f4 <_dtoa_r+0xba4>
 800989c:	b11b      	cbz	r3, 80098a6 <_dtoa_r+0xb56>
 800989e:	f10a 0308 	add.w	r3, sl, #8
 80098a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	4650      	mov	r0, sl
 80098a8:	b017      	add	sp, #92	@ 0x5c
 80098aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	f77f ae2e 	ble.w	8009512 <_dtoa_r+0x7c2>
 80098b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80098ba:	2001      	movs	r0, #1
 80098bc:	e64d      	b.n	800955a <_dtoa_r+0x80a>
 80098be:	f1bb 0f00 	cmp.w	fp, #0
 80098c2:	f77f aed9 	ble.w	8009678 <_dtoa_r+0x928>
 80098c6:	4656      	mov	r6, sl
 80098c8:	4621      	mov	r1, r4
 80098ca:	9803      	ldr	r0, [sp, #12]
 80098cc:	f7ff f9b8 	bl	8008c40 <quorem>
 80098d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80098d4:	f806 3b01 	strb.w	r3, [r6], #1
 80098d8:	eba6 020a 	sub.w	r2, r6, sl
 80098dc:	4593      	cmp	fp, r2
 80098de:	ddb4      	ble.n	800984a <_dtoa_r+0xafa>
 80098e0:	2300      	movs	r3, #0
 80098e2:	220a      	movs	r2, #10
 80098e4:	4648      	mov	r0, r9
 80098e6:	9903      	ldr	r1, [sp, #12]
 80098e8:	f000 fbfc 	bl	800a0e4 <__multadd>
 80098ec:	9003      	str	r0, [sp, #12]
 80098ee:	e7eb      	b.n	80098c8 <_dtoa_r+0xb78>
 80098f0:	0800b7ef 	.word	0x0800b7ef
 80098f4:	0800b773 	.word	0x0800b773

080098f8 <_free_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4605      	mov	r5, r0
 80098fc:	2900      	cmp	r1, #0
 80098fe:	d040      	beq.n	8009982 <_free_r+0x8a>
 8009900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009904:	1f0c      	subs	r4, r1, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	bfb8      	it	lt
 800990a:	18e4      	addlt	r4, r4, r3
 800990c:	f7fd f9bc 	bl	8006c88 <__malloc_lock>
 8009910:	4a1c      	ldr	r2, [pc, #112]	@ (8009984 <_free_r+0x8c>)
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	b933      	cbnz	r3, 8009924 <_free_r+0x2c>
 8009916:	6063      	str	r3, [r4, #4]
 8009918:	6014      	str	r4, [r2, #0]
 800991a:	4628      	mov	r0, r5
 800991c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009920:	f7fd b9b8 	b.w	8006c94 <__malloc_unlock>
 8009924:	42a3      	cmp	r3, r4
 8009926:	d908      	bls.n	800993a <_free_r+0x42>
 8009928:	6820      	ldr	r0, [r4, #0]
 800992a:	1821      	adds	r1, r4, r0
 800992c:	428b      	cmp	r3, r1
 800992e:	bf01      	itttt	eq
 8009930:	6819      	ldreq	r1, [r3, #0]
 8009932:	685b      	ldreq	r3, [r3, #4]
 8009934:	1809      	addeq	r1, r1, r0
 8009936:	6021      	streq	r1, [r4, #0]
 8009938:	e7ed      	b.n	8009916 <_free_r+0x1e>
 800993a:	461a      	mov	r2, r3
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	b10b      	cbz	r3, 8009944 <_free_r+0x4c>
 8009940:	42a3      	cmp	r3, r4
 8009942:	d9fa      	bls.n	800993a <_free_r+0x42>
 8009944:	6811      	ldr	r1, [r2, #0]
 8009946:	1850      	adds	r0, r2, r1
 8009948:	42a0      	cmp	r0, r4
 800994a:	d10b      	bne.n	8009964 <_free_r+0x6c>
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	4401      	add	r1, r0
 8009950:	1850      	adds	r0, r2, r1
 8009952:	4283      	cmp	r3, r0
 8009954:	6011      	str	r1, [r2, #0]
 8009956:	d1e0      	bne.n	800991a <_free_r+0x22>
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	4408      	add	r0, r1
 800995e:	6010      	str	r0, [r2, #0]
 8009960:	6053      	str	r3, [r2, #4]
 8009962:	e7da      	b.n	800991a <_free_r+0x22>
 8009964:	d902      	bls.n	800996c <_free_r+0x74>
 8009966:	230c      	movs	r3, #12
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	e7d6      	b.n	800991a <_free_r+0x22>
 800996c:	6820      	ldr	r0, [r4, #0]
 800996e:	1821      	adds	r1, r4, r0
 8009970:	428b      	cmp	r3, r1
 8009972:	bf01      	itttt	eq
 8009974:	6819      	ldreq	r1, [r3, #0]
 8009976:	685b      	ldreq	r3, [r3, #4]
 8009978:	1809      	addeq	r1, r1, r0
 800997a:	6021      	streq	r1, [r4, #0]
 800997c:	6063      	str	r3, [r4, #4]
 800997e:	6054      	str	r4, [r2, #4]
 8009980:	e7cb      	b.n	800991a <_free_r+0x22>
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	200006f8 	.word	0x200006f8

08009988 <rshift>:
 8009988:	6903      	ldr	r3, [r0, #16]
 800998a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800998e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009992:	f100 0414 	add.w	r4, r0, #20
 8009996:	ea4f 1261 	mov.w	r2, r1, asr #5
 800999a:	dd46      	ble.n	8009a2a <rshift+0xa2>
 800999c:	f011 011f 	ands.w	r1, r1, #31
 80099a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80099a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80099a8:	d10c      	bne.n	80099c4 <rshift+0x3c>
 80099aa:	4629      	mov	r1, r5
 80099ac:	f100 0710 	add.w	r7, r0, #16
 80099b0:	42b1      	cmp	r1, r6
 80099b2:	d335      	bcc.n	8009a20 <rshift+0x98>
 80099b4:	1a9b      	subs	r3, r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	1eea      	subs	r2, r5, #3
 80099ba:	4296      	cmp	r6, r2
 80099bc:	bf38      	it	cc
 80099be:	2300      	movcc	r3, #0
 80099c0:	4423      	add	r3, r4
 80099c2:	e015      	b.n	80099f0 <rshift+0x68>
 80099c4:	46a1      	mov	r9, r4
 80099c6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80099ca:	f1c1 0820 	rsb	r8, r1, #32
 80099ce:	40cf      	lsrs	r7, r1
 80099d0:	f105 0e04 	add.w	lr, r5, #4
 80099d4:	4576      	cmp	r6, lr
 80099d6:	46f4      	mov	ip, lr
 80099d8:	d816      	bhi.n	8009a08 <rshift+0x80>
 80099da:	1a9a      	subs	r2, r3, r2
 80099dc:	0092      	lsls	r2, r2, #2
 80099de:	3a04      	subs	r2, #4
 80099e0:	3501      	adds	r5, #1
 80099e2:	42ae      	cmp	r6, r5
 80099e4:	bf38      	it	cc
 80099e6:	2200      	movcc	r2, #0
 80099e8:	18a3      	adds	r3, r4, r2
 80099ea:	50a7      	str	r7, [r4, r2]
 80099ec:	b107      	cbz	r7, 80099f0 <rshift+0x68>
 80099ee:	3304      	adds	r3, #4
 80099f0:	42a3      	cmp	r3, r4
 80099f2:	eba3 0204 	sub.w	r2, r3, r4
 80099f6:	bf08      	it	eq
 80099f8:	2300      	moveq	r3, #0
 80099fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80099fe:	6102      	str	r2, [r0, #16]
 8009a00:	bf08      	it	eq
 8009a02:	6143      	streq	r3, [r0, #20]
 8009a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a08:	f8dc c000 	ldr.w	ip, [ip]
 8009a0c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a10:	ea4c 0707 	orr.w	r7, ip, r7
 8009a14:	f849 7b04 	str.w	r7, [r9], #4
 8009a18:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a1c:	40cf      	lsrs	r7, r1
 8009a1e:	e7d9      	b.n	80099d4 <rshift+0x4c>
 8009a20:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a24:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a28:	e7c2      	b.n	80099b0 <rshift+0x28>
 8009a2a:	4623      	mov	r3, r4
 8009a2c:	e7e0      	b.n	80099f0 <rshift+0x68>

08009a2e <__hexdig_fun>:
 8009a2e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009a32:	2b09      	cmp	r3, #9
 8009a34:	d802      	bhi.n	8009a3c <__hexdig_fun+0xe>
 8009a36:	3820      	subs	r0, #32
 8009a38:	b2c0      	uxtb	r0, r0
 8009a3a:	4770      	bx	lr
 8009a3c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009a40:	2b05      	cmp	r3, #5
 8009a42:	d801      	bhi.n	8009a48 <__hexdig_fun+0x1a>
 8009a44:	3847      	subs	r0, #71	@ 0x47
 8009a46:	e7f7      	b.n	8009a38 <__hexdig_fun+0xa>
 8009a48:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009a4c:	2b05      	cmp	r3, #5
 8009a4e:	d801      	bhi.n	8009a54 <__hexdig_fun+0x26>
 8009a50:	3827      	subs	r0, #39	@ 0x27
 8009a52:	e7f1      	b.n	8009a38 <__hexdig_fun+0xa>
 8009a54:	2000      	movs	r0, #0
 8009a56:	4770      	bx	lr

08009a58 <__gethex>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	468a      	mov	sl, r1
 8009a5e:	4690      	mov	r8, r2
 8009a60:	b085      	sub	sp, #20
 8009a62:	9302      	str	r3, [sp, #8]
 8009a64:	680b      	ldr	r3, [r1, #0]
 8009a66:	9001      	str	r0, [sp, #4]
 8009a68:	1c9c      	adds	r4, r3, #2
 8009a6a:	46a1      	mov	r9, r4
 8009a6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009a70:	2830      	cmp	r0, #48	@ 0x30
 8009a72:	d0fa      	beq.n	8009a6a <__gethex+0x12>
 8009a74:	eba9 0303 	sub.w	r3, r9, r3
 8009a78:	f1a3 0b02 	sub.w	fp, r3, #2
 8009a7c:	f7ff ffd7 	bl	8009a2e <__hexdig_fun>
 8009a80:	4605      	mov	r5, r0
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d168      	bne.n	8009b58 <__gethex+0x100>
 8009a86:	2201      	movs	r2, #1
 8009a88:	4648      	mov	r0, r9
 8009a8a:	499f      	ldr	r1, [pc, #636]	@ (8009d08 <__gethex+0x2b0>)
 8009a8c:	f7ff f80f 	bl	8008aae <strncmp>
 8009a90:	4607      	mov	r7, r0
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d167      	bne.n	8009b66 <__gethex+0x10e>
 8009a96:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009a9a:	4626      	mov	r6, r4
 8009a9c:	f7ff ffc7 	bl	8009a2e <__hexdig_fun>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d062      	beq.n	8009b6a <__gethex+0x112>
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	7818      	ldrb	r0, [r3, #0]
 8009aa8:	4699      	mov	r9, r3
 8009aaa:	2830      	cmp	r0, #48	@ 0x30
 8009aac:	f103 0301 	add.w	r3, r3, #1
 8009ab0:	d0f9      	beq.n	8009aa6 <__gethex+0x4e>
 8009ab2:	f7ff ffbc 	bl	8009a2e <__hexdig_fun>
 8009ab6:	fab0 f580 	clz	r5, r0
 8009aba:	f04f 0b01 	mov.w	fp, #1
 8009abe:	096d      	lsrs	r5, r5, #5
 8009ac0:	464a      	mov	r2, r9
 8009ac2:	4616      	mov	r6, r2
 8009ac4:	7830      	ldrb	r0, [r6, #0]
 8009ac6:	3201      	adds	r2, #1
 8009ac8:	f7ff ffb1 	bl	8009a2e <__hexdig_fun>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d1f8      	bne.n	8009ac2 <__gethex+0x6a>
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	498c      	ldr	r1, [pc, #560]	@ (8009d08 <__gethex+0x2b0>)
 8009ad6:	f7fe ffea 	bl	8008aae <strncmp>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d13f      	bne.n	8009b5e <__gethex+0x106>
 8009ade:	b944      	cbnz	r4, 8009af2 <__gethex+0x9a>
 8009ae0:	1c74      	adds	r4, r6, #1
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	4616      	mov	r6, r2
 8009ae6:	7830      	ldrb	r0, [r6, #0]
 8009ae8:	3201      	adds	r2, #1
 8009aea:	f7ff ffa0 	bl	8009a2e <__hexdig_fun>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d1f8      	bne.n	8009ae4 <__gethex+0x8c>
 8009af2:	1ba4      	subs	r4, r4, r6
 8009af4:	00a7      	lsls	r7, r4, #2
 8009af6:	7833      	ldrb	r3, [r6, #0]
 8009af8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009afc:	2b50      	cmp	r3, #80	@ 0x50
 8009afe:	d13e      	bne.n	8009b7e <__gethex+0x126>
 8009b00:	7873      	ldrb	r3, [r6, #1]
 8009b02:	2b2b      	cmp	r3, #43	@ 0x2b
 8009b04:	d033      	beq.n	8009b6e <__gethex+0x116>
 8009b06:	2b2d      	cmp	r3, #45	@ 0x2d
 8009b08:	d034      	beq.n	8009b74 <__gethex+0x11c>
 8009b0a:	2400      	movs	r4, #0
 8009b0c:	1c71      	adds	r1, r6, #1
 8009b0e:	7808      	ldrb	r0, [r1, #0]
 8009b10:	f7ff ff8d 	bl	8009a2e <__hexdig_fun>
 8009b14:	1e43      	subs	r3, r0, #1
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	2b18      	cmp	r3, #24
 8009b1a:	d830      	bhi.n	8009b7e <__gethex+0x126>
 8009b1c:	f1a0 0210 	sub.w	r2, r0, #16
 8009b20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b24:	f7ff ff83 	bl	8009a2e <__hexdig_fun>
 8009b28:	f100 3cff 	add.w	ip, r0, #4294967295
 8009b2c:	fa5f fc8c 	uxtb.w	ip, ip
 8009b30:	f1bc 0f18 	cmp.w	ip, #24
 8009b34:	f04f 030a 	mov.w	r3, #10
 8009b38:	d91e      	bls.n	8009b78 <__gethex+0x120>
 8009b3a:	b104      	cbz	r4, 8009b3e <__gethex+0xe6>
 8009b3c:	4252      	negs	r2, r2
 8009b3e:	4417      	add	r7, r2
 8009b40:	f8ca 1000 	str.w	r1, [sl]
 8009b44:	b1ed      	cbz	r5, 8009b82 <__gethex+0x12a>
 8009b46:	f1bb 0f00 	cmp.w	fp, #0
 8009b4a:	bf0c      	ite	eq
 8009b4c:	2506      	moveq	r5, #6
 8009b4e:	2500      	movne	r5, #0
 8009b50:	4628      	mov	r0, r5
 8009b52:	b005      	add	sp, #20
 8009b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b58:	2500      	movs	r5, #0
 8009b5a:	462c      	mov	r4, r5
 8009b5c:	e7b0      	b.n	8009ac0 <__gethex+0x68>
 8009b5e:	2c00      	cmp	r4, #0
 8009b60:	d1c7      	bne.n	8009af2 <__gethex+0x9a>
 8009b62:	4627      	mov	r7, r4
 8009b64:	e7c7      	b.n	8009af6 <__gethex+0x9e>
 8009b66:	464e      	mov	r6, r9
 8009b68:	462f      	mov	r7, r5
 8009b6a:	2501      	movs	r5, #1
 8009b6c:	e7c3      	b.n	8009af6 <__gethex+0x9e>
 8009b6e:	2400      	movs	r4, #0
 8009b70:	1cb1      	adds	r1, r6, #2
 8009b72:	e7cc      	b.n	8009b0e <__gethex+0xb6>
 8009b74:	2401      	movs	r4, #1
 8009b76:	e7fb      	b.n	8009b70 <__gethex+0x118>
 8009b78:	fb03 0002 	mla	r0, r3, r2, r0
 8009b7c:	e7ce      	b.n	8009b1c <__gethex+0xc4>
 8009b7e:	4631      	mov	r1, r6
 8009b80:	e7de      	b.n	8009b40 <__gethex+0xe8>
 8009b82:	4629      	mov	r1, r5
 8009b84:	eba6 0309 	sub.w	r3, r6, r9
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	2b07      	cmp	r3, #7
 8009b8c:	dc0a      	bgt.n	8009ba4 <__gethex+0x14c>
 8009b8e:	9801      	ldr	r0, [sp, #4]
 8009b90:	f000 fa46 	bl	800a020 <_Balloc>
 8009b94:	4604      	mov	r4, r0
 8009b96:	b940      	cbnz	r0, 8009baa <__gethex+0x152>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	21e4      	movs	r1, #228	@ 0xe4
 8009b9c:	4b5b      	ldr	r3, [pc, #364]	@ (8009d0c <__gethex+0x2b4>)
 8009b9e:	485c      	ldr	r0, [pc, #368]	@ (8009d10 <__gethex+0x2b8>)
 8009ba0:	f001 fb44 	bl	800b22c <__assert_func>
 8009ba4:	3101      	adds	r1, #1
 8009ba6:	105b      	asrs	r3, r3, #1
 8009ba8:	e7ef      	b.n	8009b8a <__gethex+0x132>
 8009baa:	2300      	movs	r3, #0
 8009bac:	f100 0a14 	add.w	sl, r0, #20
 8009bb0:	4655      	mov	r5, sl
 8009bb2:	469b      	mov	fp, r3
 8009bb4:	45b1      	cmp	r9, r6
 8009bb6:	d337      	bcc.n	8009c28 <__gethex+0x1d0>
 8009bb8:	f845 bb04 	str.w	fp, [r5], #4
 8009bbc:	eba5 050a 	sub.w	r5, r5, sl
 8009bc0:	10ad      	asrs	r5, r5, #2
 8009bc2:	6125      	str	r5, [r4, #16]
 8009bc4:	4658      	mov	r0, fp
 8009bc6:	f000 fb1d 	bl	800a204 <__hi0bits>
 8009bca:	016d      	lsls	r5, r5, #5
 8009bcc:	f8d8 6000 	ldr.w	r6, [r8]
 8009bd0:	1a2d      	subs	r5, r5, r0
 8009bd2:	42b5      	cmp	r5, r6
 8009bd4:	dd54      	ble.n	8009c80 <__gethex+0x228>
 8009bd6:	1bad      	subs	r5, r5, r6
 8009bd8:	4629      	mov	r1, r5
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 fe9f 	bl	800a91e <__any_on>
 8009be0:	4681      	mov	r9, r0
 8009be2:	b178      	cbz	r0, 8009c04 <__gethex+0x1ac>
 8009be4:	f04f 0901 	mov.w	r9, #1
 8009be8:	1e6b      	subs	r3, r5, #1
 8009bea:	1159      	asrs	r1, r3, #5
 8009bec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009bf0:	f003 021f 	and.w	r2, r3, #31
 8009bf4:	fa09 f202 	lsl.w	r2, r9, r2
 8009bf8:	420a      	tst	r2, r1
 8009bfa:	d003      	beq.n	8009c04 <__gethex+0x1ac>
 8009bfc:	454b      	cmp	r3, r9
 8009bfe:	dc36      	bgt.n	8009c6e <__gethex+0x216>
 8009c00:	f04f 0902 	mov.w	r9, #2
 8009c04:	4629      	mov	r1, r5
 8009c06:	4620      	mov	r0, r4
 8009c08:	f7ff febe 	bl	8009988 <rshift>
 8009c0c:	442f      	add	r7, r5
 8009c0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c12:	42bb      	cmp	r3, r7
 8009c14:	da42      	bge.n	8009c9c <__gethex+0x244>
 8009c16:	4621      	mov	r1, r4
 8009c18:	9801      	ldr	r0, [sp, #4]
 8009c1a:	f000 fa41 	bl	800a0a0 <_Bfree>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c22:	25a3      	movs	r5, #163	@ 0xa3
 8009c24:	6013      	str	r3, [r2, #0]
 8009c26:	e793      	b.n	8009b50 <__gethex+0xf8>
 8009c28:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009c2c:	2a2e      	cmp	r2, #46	@ 0x2e
 8009c2e:	d012      	beq.n	8009c56 <__gethex+0x1fe>
 8009c30:	2b20      	cmp	r3, #32
 8009c32:	d104      	bne.n	8009c3e <__gethex+0x1e6>
 8009c34:	f845 bb04 	str.w	fp, [r5], #4
 8009c38:	f04f 0b00 	mov.w	fp, #0
 8009c3c:	465b      	mov	r3, fp
 8009c3e:	7830      	ldrb	r0, [r6, #0]
 8009c40:	9303      	str	r3, [sp, #12]
 8009c42:	f7ff fef4 	bl	8009a2e <__hexdig_fun>
 8009c46:	9b03      	ldr	r3, [sp, #12]
 8009c48:	f000 000f 	and.w	r0, r0, #15
 8009c4c:	4098      	lsls	r0, r3
 8009c4e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009c52:	3304      	adds	r3, #4
 8009c54:	e7ae      	b.n	8009bb4 <__gethex+0x15c>
 8009c56:	45b1      	cmp	r9, r6
 8009c58:	d8ea      	bhi.n	8009c30 <__gethex+0x1d8>
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	492a      	ldr	r1, [pc, #168]	@ (8009d08 <__gethex+0x2b0>)
 8009c60:	9303      	str	r3, [sp, #12]
 8009c62:	f7fe ff24 	bl	8008aae <strncmp>
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d1e1      	bne.n	8009c30 <__gethex+0x1d8>
 8009c6c:	e7a2      	b.n	8009bb4 <__gethex+0x15c>
 8009c6e:	4620      	mov	r0, r4
 8009c70:	1ea9      	subs	r1, r5, #2
 8009c72:	f000 fe54 	bl	800a91e <__any_on>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d0c2      	beq.n	8009c00 <__gethex+0x1a8>
 8009c7a:	f04f 0903 	mov.w	r9, #3
 8009c7e:	e7c1      	b.n	8009c04 <__gethex+0x1ac>
 8009c80:	da09      	bge.n	8009c96 <__gethex+0x23e>
 8009c82:	1b75      	subs	r5, r6, r5
 8009c84:	4621      	mov	r1, r4
 8009c86:	462a      	mov	r2, r5
 8009c88:	9801      	ldr	r0, [sp, #4]
 8009c8a:	f000 fc19 	bl	800a4c0 <__lshift>
 8009c8e:	4604      	mov	r4, r0
 8009c90:	1b7f      	subs	r7, r7, r5
 8009c92:	f100 0a14 	add.w	sl, r0, #20
 8009c96:	f04f 0900 	mov.w	r9, #0
 8009c9a:	e7b8      	b.n	8009c0e <__gethex+0x1b6>
 8009c9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009ca0:	42bd      	cmp	r5, r7
 8009ca2:	dd6f      	ble.n	8009d84 <__gethex+0x32c>
 8009ca4:	1bed      	subs	r5, r5, r7
 8009ca6:	42ae      	cmp	r6, r5
 8009ca8:	dc34      	bgt.n	8009d14 <__gethex+0x2bc>
 8009caa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d022      	beq.n	8009cf8 <__gethex+0x2a0>
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	d024      	beq.n	8009d00 <__gethex+0x2a8>
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d115      	bne.n	8009ce6 <__gethex+0x28e>
 8009cba:	42ae      	cmp	r6, r5
 8009cbc:	d113      	bne.n	8009ce6 <__gethex+0x28e>
 8009cbe:	2e01      	cmp	r6, #1
 8009cc0:	d10b      	bne.n	8009cda <__gethex+0x282>
 8009cc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009cc6:	9a02      	ldr	r2, [sp, #8]
 8009cc8:	2562      	movs	r5, #98	@ 0x62
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	2301      	movs	r3, #1
 8009cce:	6123      	str	r3, [r4, #16]
 8009cd0:	f8ca 3000 	str.w	r3, [sl]
 8009cd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cd6:	601c      	str	r4, [r3, #0]
 8009cd8:	e73a      	b.n	8009b50 <__gethex+0xf8>
 8009cda:	4620      	mov	r0, r4
 8009cdc:	1e71      	subs	r1, r6, #1
 8009cde:	f000 fe1e 	bl	800a91e <__any_on>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d1ed      	bne.n	8009cc2 <__gethex+0x26a>
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	9801      	ldr	r0, [sp, #4]
 8009cea:	f000 f9d9 	bl	800a0a0 <_Bfree>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cf2:	2550      	movs	r5, #80	@ 0x50
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	e72b      	b.n	8009b50 <__gethex+0xf8>
 8009cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1f3      	bne.n	8009ce6 <__gethex+0x28e>
 8009cfe:	e7e0      	b.n	8009cc2 <__gethex+0x26a>
 8009d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1dd      	bne.n	8009cc2 <__gethex+0x26a>
 8009d06:	e7ee      	b.n	8009ce6 <__gethex+0x28e>
 8009d08:	0800b730 	.word	0x0800b730
 8009d0c:	0800b7ef 	.word	0x0800b7ef
 8009d10:	0800b800 	.word	0x0800b800
 8009d14:	1e6f      	subs	r7, r5, #1
 8009d16:	f1b9 0f00 	cmp.w	r9, #0
 8009d1a:	d130      	bne.n	8009d7e <__gethex+0x326>
 8009d1c:	b127      	cbz	r7, 8009d28 <__gethex+0x2d0>
 8009d1e:	4639      	mov	r1, r7
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 fdfc 	bl	800a91e <__any_on>
 8009d26:	4681      	mov	r9, r0
 8009d28:	2301      	movs	r3, #1
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	1b76      	subs	r6, r6, r5
 8009d2e:	2502      	movs	r5, #2
 8009d30:	117a      	asrs	r2, r7, #5
 8009d32:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009d36:	f007 071f 	and.w	r7, r7, #31
 8009d3a:	40bb      	lsls	r3, r7
 8009d3c:	4213      	tst	r3, r2
 8009d3e:	4620      	mov	r0, r4
 8009d40:	bf18      	it	ne
 8009d42:	f049 0902 	orrne.w	r9, r9, #2
 8009d46:	f7ff fe1f 	bl	8009988 <rshift>
 8009d4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009d4e:	f1b9 0f00 	cmp.w	r9, #0
 8009d52:	d047      	beq.n	8009de4 <__gethex+0x38c>
 8009d54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d015      	beq.n	8009d88 <__gethex+0x330>
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d017      	beq.n	8009d90 <__gethex+0x338>
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d109      	bne.n	8009d78 <__gethex+0x320>
 8009d64:	f019 0f02 	tst.w	r9, #2
 8009d68:	d006      	beq.n	8009d78 <__gethex+0x320>
 8009d6a:	f8da 3000 	ldr.w	r3, [sl]
 8009d6e:	ea49 0903 	orr.w	r9, r9, r3
 8009d72:	f019 0f01 	tst.w	r9, #1
 8009d76:	d10e      	bne.n	8009d96 <__gethex+0x33e>
 8009d78:	f045 0510 	orr.w	r5, r5, #16
 8009d7c:	e032      	b.n	8009de4 <__gethex+0x38c>
 8009d7e:	f04f 0901 	mov.w	r9, #1
 8009d82:	e7d1      	b.n	8009d28 <__gethex+0x2d0>
 8009d84:	2501      	movs	r5, #1
 8009d86:	e7e2      	b.n	8009d4e <__gethex+0x2f6>
 8009d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d8a:	f1c3 0301 	rsb	r3, r3, #1
 8009d8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0f0      	beq.n	8009d78 <__gethex+0x320>
 8009d96:	f04f 0c00 	mov.w	ip, #0
 8009d9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009d9e:	f104 0314 	add.w	r3, r4, #20
 8009da2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009da6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009daa:	4618      	mov	r0, r3
 8009dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009db4:	d01b      	beq.n	8009dee <__gethex+0x396>
 8009db6:	3201      	adds	r2, #1
 8009db8:	6002      	str	r2, [r0, #0]
 8009dba:	2d02      	cmp	r5, #2
 8009dbc:	f104 0314 	add.w	r3, r4, #20
 8009dc0:	d13c      	bne.n	8009e3c <__gethex+0x3e4>
 8009dc2:	f8d8 2000 	ldr.w	r2, [r8]
 8009dc6:	3a01      	subs	r2, #1
 8009dc8:	42b2      	cmp	r2, r6
 8009dca:	d109      	bne.n	8009de0 <__gethex+0x388>
 8009dcc:	2201      	movs	r2, #1
 8009dce:	1171      	asrs	r1, r6, #5
 8009dd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009dd4:	f006 061f 	and.w	r6, r6, #31
 8009dd8:	fa02 f606 	lsl.w	r6, r2, r6
 8009ddc:	421e      	tst	r6, r3
 8009dde:	d13a      	bne.n	8009e56 <__gethex+0x3fe>
 8009de0:	f045 0520 	orr.w	r5, r5, #32
 8009de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009de6:	601c      	str	r4, [r3, #0]
 8009de8:	9b02      	ldr	r3, [sp, #8]
 8009dea:	601f      	str	r7, [r3, #0]
 8009dec:	e6b0      	b.n	8009b50 <__gethex+0xf8>
 8009dee:	4299      	cmp	r1, r3
 8009df0:	f843 cc04 	str.w	ip, [r3, #-4]
 8009df4:	d8d9      	bhi.n	8009daa <__gethex+0x352>
 8009df6:	68a3      	ldr	r3, [r4, #8]
 8009df8:	459b      	cmp	fp, r3
 8009dfa:	db17      	blt.n	8009e2c <__gethex+0x3d4>
 8009dfc:	6861      	ldr	r1, [r4, #4]
 8009dfe:	9801      	ldr	r0, [sp, #4]
 8009e00:	3101      	adds	r1, #1
 8009e02:	f000 f90d 	bl	800a020 <_Balloc>
 8009e06:	4681      	mov	r9, r0
 8009e08:	b918      	cbnz	r0, 8009e12 <__gethex+0x3ba>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	2184      	movs	r1, #132	@ 0x84
 8009e0e:	4b19      	ldr	r3, [pc, #100]	@ (8009e74 <__gethex+0x41c>)
 8009e10:	e6c5      	b.n	8009b9e <__gethex+0x146>
 8009e12:	6922      	ldr	r2, [r4, #16]
 8009e14:	f104 010c 	add.w	r1, r4, #12
 8009e18:	3202      	adds	r2, #2
 8009e1a:	0092      	lsls	r2, r2, #2
 8009e1c:	300c      	adds	r0, #12
 8009e1e:	f7fe fef6 	bl	8008c0e <memcpy>
 8009e22:	4621      	mov	r1, r4
 8009e24:	9801      	ldr	r0, [sp, #4]
 8009e26:	f000 f93b 	bl	800a0a0 <_Bfree>
 8009e2a:	464c      	mov	r4, r9
 8009e2c:	6923      	ldr	r3, [r4, #16]
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	6122      	str	r2, [r4, #16]
 8009e32:	2201      	movs	r2, #1
 8009e34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e38:	615a      	str	r2, [r3, #20]
 8009e3a:	e7be      	b.n	8009dba <__gethex+0x362>
 8009e3c:	6922      	ldr	r2, [r4, #16]
 8009e3e:	455a      	cmp	r2, fp
 8009e40:	dd0b      	ble.n	8009e5a <__gethex+0x402>
 8009e42:	2101      	movs	r1, #1
 8009e44:	4620      	mov	r0, r4
 8009e46:	f7ff fd9f 	bl	8009988 <rshift>
 8009e4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e4e:	3701      	adds	r7, #1
 8009e50:	42bb      	cmp	r3, r7
 8009e52:	f6ff aee0 	blt.w	8009c16 <__gethex+0x1be>
 8009e56:	2501      	movs	r5, #1
 8009e58:	e7c2      	b.n	8009de0 <__gethex+0x388>
 8009e5a:	f016 061f 	ands.w	r6, r6, #31
 8009e5e:	d0fa      	beq.n	8009e56 <__gethex+0x3fe>
 8009e60:	4453      	add	r3, sl
 8009e62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009e66:	f000 f9cd 	bl	800a204 <__hi0bits>
 8009e6a:	f1c6 0620 	rsb	r6, r6, #32
 8009e6e:	42b0      	cmp	r0, r6
 8009e70:	dbe7      	blt.n	8009e42 <__gethex+0x3ea>
 8009e72:	e7f0      	b.n	8009e56 <__gethex+0x3fe>
 8009e74:	0800b7ef 	.word	0x0800b7ef

08009e78 <L_shift>:
 8009e78:	f1c2 0208 	rsb	r2, r2, #8
 8009e7c:	0092      	lsls	r2, r2, #2
 8009e7e:	b570      	push	{r4, r5, r6, lr}
 8009e80:	f1c2 0620 	rsb	r6, r2, #32
 8009e84:	6843      	ldr	r3, [r0, #4]
 8009e86:	6804      	ldr	r4, [r0, #0]
 8009e88:	fa03 f506 	lsl.w	r5, r3, r6
 8009e8c:	432c      	orrs	r4, r5
 8009e8e:	40d3      	lsrs	r3, r2
 8009e90:	6004      	str	r4, [r0, #0]
 8009e92:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e96:	4288      	cmp	r0, r1
 8009e98:	d3f4      	bcc.n	8009e84 <L_shift+0xc>
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}

08009e9c <__match>:
 8009e9c:	b530      	push	{r4, r5, lr}
 8009e9e:	6803      	ldr	r3, [r0, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ea6:	b914      	cbnz	r4, 8009eae <__match+0x12>
 8009ea8:	6003      	str	r3, [r0, #0]
 8009eaa:	2001      	movs	r0, #1
 8009eac:	bd30      	pop	{r4, r5, pc}
 8009eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eb2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009eb6:	2d19      	cmp	r5, #25
 8009eb8:	bf98      	it	ls
 8009eba:	3220      	addls	r2, #32
 8009ebc:	42a2      	cmp	r2, r4
 8009ebe:	d0f0      	beq.n	8009ea2 <__match+0x6>
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	e7f3      	b.n	8009eac <__match+0x10>

08009ec4 <__hexnan>:
 8009ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec8:	2500      	movs	r5, #0
 8009eca:	680b      	ldr	r3, [r1, #0]
 8009ecc:	4682      	mov	sl, r0
 8009ece:	115e      	asrs	r6, r3, #5
 8009ed0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ed4:	f013 031f 	ands.w	r3, r3, #31
 8009ed8:	bf18      	it	ne
 8009eda:	3604      	addne	r6, #4
 8009edc:	1f37      	subs	r7, r6, #4
 8009ede:	4690      	mov	r8, r2
 8009ee0:	46b9      	mov	r9, r7
 8009ee2:	463c      	mov	r4, r7
 8009ee4:	46ab      	mov	fp, r5
 8009ee6:	b087      	sub	sp, #28
 8009ee8:	6801      	ldr	r1, [r0, #0]
 8009eea:	9301      	str	r3, [sp, #4]
 8009eec:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ef0:	9502      	str	r5, [sp, #8]
 8009ef2:	784a      	ldrb	r2, [r1, #1]
 8009ef4:	1c4b      	adds	r3, r1, #1
 8009ef6:	9303      	str	r3, [sp, #12]
 8009ef8:	b342      	cbz	r2, 8009f4c <__hexnan+0x88>
 8009efa:	4610      	mov	r0, r2
 8009efc:	9105      	str	r1, [sp, #20]
 8009efe:	9204      	str	r2, [sp, #16]
 8009f00:	f7ff fd95 	bl	8009a2e <__hexdig_fun>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d151      	bne.n	8009fac <__hexnan+0xe8>
 8009f08:	9a04      	ldr	r2, [sp, #16]
 8009f0a:	9905      	ldr	r1, [sp, #20]
 8009f0c:	2a20      	cmp	r2, #32
 8009f0e:	d818      	bhi.n	8009f42 <__hexnan+0x7e>
 8009f10:	9b02      	ldr	r3, [sp, #8]
 8009f12:	459b      	cmp	fp, r3
 8009f14:	dd13      	ble.n	8009f3e <__hexnan+0x7a>
 8009f16:	454c      	cmp	r4, r9
 8009f18:	d206      	bcs.n	8009f28 <__hexnan+0x64>
 8009f1a:	2d07      	cmp	r5, #7
 8009f1c:	dc04      	bgt.n	8009f28 <__hexnan+0x64>
 8009f1e:	462a      	mov	r2, r5
 8009f20:	4649      	mov	r1, r9
 8009f22:	4620      	mov	r0, r4
 8009f24:	f7ff ffa8 	bl	8009e78 <L_shift>
 8009f28:	4544      	cmp	r4, r8
 8009f2a:	d952      	bls.n	8009fd2 <__hexnan+0x10e>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f1a4 0904 	sub.w	r9, r4, #4
 8009f32:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f36:	461d      	mov	r5, r3
 8009f38:	464c      	mov	r4, r9
 8009f3a:	f8cd b008 	str.w	fp, [sp, #8]
 8009f3e:	9903      	ldr	r1, [sp, #12]
 8009f40:	e7d7      	b.n	8009ef2 <__hexnan+0x2e>
 8009f42:	2a29      	cmp	r2, #41	@ 0x29
 8009f44:	d157      	bne.n	8009ff6 <__hexnan+0x132>
 8009f46:	3102      	adds	r1, #2
 8009f48:	f8ca 1000 	str.w	r1, [sl]
 8009f4c:	f1bb 0f00 	cmp.w	fp, #0
 8009f50:	d051      	beq.n	8009ff6 <__hexnan+0x132>
 8009f52:	454c      	cmp	r4, r9
 8009f54:	d206      	bcs.n	8009f64 <__hexnan+0xa0>
 8009f56:	2d07      	cmp	r5, #7
 8009f58:	dc04      	bgt.n	8009f64 <__hexnan+0xa0>
 8009f5a:	462a      	mov	r2, r5
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f7ff ff8a 	bl	8009e78 <L_shift>
 8009f64:	4544      	cmp	r4, r8
 8009f66:	d936      	bls.n	8009fd6 <__hexnan+0x112>
 8009f68:	4623      	mov	r3, r4
 8009f6a:	f1a8 0204 	sub.w	r2, r8, #4
 8009f6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009f72:	429f      	cmp	r7, r3
 8009f74:	f842 1f04 	str.w	r1, [r2, #4]!
 8009f78:	d2f9      	bcs.n	8009f6e <__hexnan+0xaa>
 8009f7a:	1b3b      	subs	r3, r7, r4
 8009f7c:	f023 0303 	bic.w	r3, r3, #3
 8009f80:	3304      	adds	r3, #4
 8009f82:	3401      	adds	r4, #1
 8009f84:	3e03      	subs	r6, #3
 8009f86:	42b4      	cmp	r4, r6
 8009f88:	bf88      	it	hi
 8009f8a:	2304      	movhi	r3, #4
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	4443      	add	r3, r8
 8009f90:	f843 2b04 	str.w	r2, [r3], #4
 8009f94:	429f      	cmp	r7, r3
 8009f96:	d2fb      	bcs.n	8009f90 <__hexnan+0xcc>
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	b91b      	cbnz	r3, 8009fa4 <__hexnan+0xe0>
 8009f9c:	4547      	cmp	r7, r8
 8009f9e:	d128      	bne.n	8009ff2 <__hexnan+0x12e>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	2005      	movs	r0, #5
 8009fa6:	b007      	add	sp, #28
 8009fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fac:	3501      	adds	r5, #1
 8009fae:	2d08      	cmp	r5, #8
 8009fb0:	f10b 0b01 	add.w	fp, fp, #1
 8009fb4:	dd06      	ble.n	8009fc4 <__hexnan+0x100>
 8009fb6:	4544      	cmp	r4, r8
 8009fb8:	d9c1      	bls.n	8009f3e <__hexnan+0x7a>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2501      	movs	r5, #1
 8009fbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fc2:	3c04      	subs	r4, #4
 8009fc4:	6822      	ldr	r2, [r4, #0]
 8009fc6:	f000 000f 	and.w	r0, r0, #15
 8009fca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009fce:	6020      	str	r0, [r4, #0]
 8009fd0:	e7b5      	b.n	8009f3e <__hexnan+0x7a>
 8009fd2:	2508      	movs	r5, #8
 8009fd4:	e7b3      	b.n	8009f3e <__hexnan+0x7a>
 8009fd6:	9b01      	ldr	r3, [sp, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d0dd      	beq.n	8009f98 <__hexnan+0xd4>
 8009fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe0:	f1c3 0320 	rsb	r3, r3, #32
 8009fe4:	40da      	lsrs	r2, r3
 8009fe6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009fea:	4013      	ands	r3, r2
 8009fec:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ff0:	e7d2      	b.n	8009f98 <__hexnan+0xd4>
 8009ff2:	3f04      	subs	r7, #4
 8009ff4:	e7d0      	b.n	8009f98 <__hexnan+0xd4>
 8009ff6:	2004      	movs	r0, #4
 8009ff8:	e7d5      	b.n	8009fa6 <__hexnan+0xe2>

08009ffa <__ascii_mbtowc>:
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	b901      	cbnz	r1, 800a000 <__ascii_mbtowc+0x6>
 8009ffe:	a901      	add	r1, sp, #4
 800a000:	b142      	cbz	r2, 800a014 <__ascii_mbtowc+0x1a>
 800a002:	b14b      	cbz	r3, 800a018 <__ascii_mbtowc+0x1e>
 800a004:	7813      	ldrb	r3, [r2, #0]
 800a006:	600b      	str	r3, [r1, #0]
 800a008:	7812      	ldrb	r2, [r2, #0]
 800a00a:	1e10      	subs	r0, r2, #0
 800a00c:	bf18      	it	ne
 800a00e:	2001      	movne	r0, #1
 800a010:	b002      	add	sp, #8
 800a012:	4770      	bx	lr
 800a014:	4610      	mov	r0, r2
 800a016:	e7fb      	b.n	800a010 <__ascii_mbtowc+0x16>
 800a018:	f06f 0001 	mvn.w	r0, #1
 800a01c:	e7f8      	b.n	800a010 <__ascii_mbtowc+0x16>
	...

0800a020 <_Balloc>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	69c6      	ldr	r6, [r0, #28]
 800a024:	4604      	mov	r4, r0
 800a026:	460d      	mov	r5, r1
 800a028:	b976      	cbnz	r6, 800a048 <_Balloc+0x28>
 800a02a:	2010      	movs	r0, #16
 800a02c:	f7fc fd7a 	bl	8006b24 <malloc>
 800a030:	4602      	mov	r2, r0
 800a032:	61e0      	str	r0, [r4, #28]
 800a034:	b920      	cbnz	r0, 800a040 <_Balloc+0x20>
 800a036:	216b      	movs	r1, #107	@ 0x6b
 800a038:	4b17      	ldr	r3, [pc, #92]	@ (800a098 <_Balloc+0x78>)
 800a03a:	4818      	ldr	r0, [pc, #96]	@ (800a09c <_Balloc+0x7c>)
 800a03c:	f001 f8f6 	bl	800b22c <__assert_func>
 800a040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a044:	6006      	str	r6, [r0, #0]
 800a046:	60c6      	str	r6, [r0, #12]
 800a048:	69e6      	ldr	r6, [r4, #28]
 800a04a:	68f3      	ldr	r3, [r6, #12]
 800a04c:	b183      	cbz	r3, 800a070 <_Balloc+0x50>
 800a04e:	69e3      	ldr	r3, [r4, #28]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a056:	b9b8      	cbnz	r0, 800a088 <_Balloc+0x68>
 800a058:	2101      	movs	r1, #1
 800a05a:	fa01 f605 	lsl.w	r6, r1, r5
 800a05e:	1d72      	adds	r2, r6, #5
 800a060:	4620      	mov	r0, r4
 800a062:	0092      	lsls	r2, r2, #2
 800a064:	f001 f900 	bl	800b268 <_calloc_r>
 800a068:	b160      	cbz	r0, 800a084 <_Balloc+0x64>
 800a06a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a06e:	e00e      	b.n	800a08e <_Balloc+0x6e>
 800a070:	2221      	movs	r2, #33	@ 0x21
 800a072:	2104      	movs	r1, #4
 800a074:	4620      	mov	r0, r4
 800a076:	f001 f8f7 	bl	800b268 <_calloc_r>
 800a07a:	69e3      	ldr	r3, [r4, #28]
 800a07c:	60f0      	str	r0, [r6, #12]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e4      	bne.n	800a04e <_Balloc+0x2e>
 800a084:	2000      	movs	r0, #0
 800a086:	bd70      	pop	{r4, r5, r6, pc}
 800a088:	6802      	ldr	r2, [r0, #0]
 800a08a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a08e:	2300      	movs	r3, #0
 800a090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a094:	e7f7      	b.n	800a086 <_Balloc+0x66>
 800a096:	bf00      	nop
 800a098:	0800b780 	.word	0x0800b780
 800a09c:	0800b860 	.word	0x0800b860

0800a0a0 <_Bfree>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	69c6      	ldr	r6, [r0, #28]
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	b976      	cbnz	r6, 800a0c8 <_Bfree+0x28>
 800a0aa:	2010      	movs	r0, #16
 800a0ac:	f7fc fd3a 	bl	8006b24 <malloc>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	61e8      	str	r0, [r5, #28]
 800a0b4:	b920      	cbnz	r0, 800a0c0 <_Bfree+0x20>
 800a0b6:	218f      	movs	r1, #143	@ 0x8f
 800a0b8:	4b08      	ldr	r3, [pc, #32]	@ (800a0dc <_Bfree+0x3c>)
 800a0ba:	4809      	ldr	r0, [pc, #36]	@ (800a0e0 <_Bfree+0x40>)
 800a0bc:	f001 f8b6 	bl	800b22c <__assert_func>
 800a0c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0c4:	6006      	str	r6, [r0, #0]
 800a0c6:	60c6      	str	r6, [r0, #12]
 800a0c8:	b13c      	cbz	r4, 800a0da <_Bfree+0x3a>
 800a0ca:	69eb      	ldr	r3, [r5, #28]
 800a0cc:	6862      	ldr	r2, [r4, #4]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0d4:	6021      	str	r1, [r4, #0]
 800a0d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0da:	bd70      	pop	{r4, r5, r6, pc}
 800a0dc:	0800b780 	.word	0x0800b780
 800a0e0:	0800b860 	.word	0x0800b860

0800a0e4 <__multadd>:
 800a0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e8:	4607      	mov	r7, r0
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	461e      	mov	r6, r3
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	690d      	ldr	r5, [r1, #16]
 800a0f2:	f101 0c14 	add.w	ip, r1, #20
 800a0f6:	f8dc 3000 	ldr.w	r3, [ip]
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	b299      	uxth	r1, r3
 800a0fe:	fb02 6101 	mla	r1, r2, r1, r6
 800a102:	0c1e      	lsrs	r6, r3, #16
 800a104:	0c0b      	lsrs	r3, r1, #16
 800a106:	fb02 3306 	mla	r3, r2, r6, r3
 800a10a:	b289      	uxth	r1, r1
 800a10c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a110:	4285      	cmp	r5, r0
 800a112:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a116:	f84c 1b04 	str.w	r1, [ip], #4
 800a11a:	dcec      	bgt.n	800a0f6 <__multadd+0x12>
 800a11c:	b30e      	cbz	r6, 800a162 <__multadd+0x7e>
 800a11e:	68a3      	ldr	r3, [r4, #8]
 800a120:	42ab      	cmp	r3, r5
 800a122:	dc19      	bgt.n	800a158 <__multadd+0x74>
 800a124:	6861      	ldr	r1, [r4, #4]
 800a126:	4638      	mov	r0, r7
 800a128:	3101      	adds	r1, #1
 800a12a:	f7ff ff79 	bl	800a020 <_Balloc>
 800a12e:	4680      	mov	r8, r0
 800a130:	b928      	cbnz	r0, 800a13e <__multadd+0x5a>
 800a132:	4602      	mov	r2, r0
 800a134:	21ba      	movs	r1, #186	@ 0xba
 800a136:	4b0c      	ldr	r3, [pc, #48]	@ (800a168 <__multadd+0x84>)
 800a138:	480c      	ldr	r0, [pc, #48]	@ (800a16c <__multadd+0x88>)
 800a13a:	f001 f877 	bl	800b22c <__assert_func>
 800a13e:	6922      	ldr	r2, [r4, #16]
 800a140:	f104 010c 	add.w	r1, r4, #12
 800a144:	3202      	adds	r2, #2
 800a146:	0092      	lsls	r2, r2, #2
 800a148:	300c      	adds	r0, #12
 800a14a:	f7fe fd60 	bl	8008c0e <memcpy>
 800a14e:	4621      	mov	r1, r4
 800a150:	4638      	mov	r0, r7
 800a152:	f7ff ffa5 	bl	800a0a0 <_Bfree>
 800a156:	4644      	mov	r4, r8
 800a158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a15c:	3501      	adds	r5, #1
 800a15e:	615e      	str	r6, [r3, #20]
 800a160:	6125      	str	r5, [r4, #16]
 800a162:	4620      	mov	r0, r4
 800a164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a168:	0800b7ef 	.word	0x0800b7ef
 800a16c:	0800b860 	.word	0x0800b860

0800a170 <__s2b>:
 800a170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a174:	4615      	mov	r5, r2
 800a176:	2209      	movs	r2, #9
 800a178:	461f      	mov	r7, r3
 800a17a:	3308      	adds	r3, #8
 800a17c:	460c      	mov	r4, r1
 800a17e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a182:	4606      	mov	r6, r0
 800a184:	2201      	movs	r2, #1
 800a186:	2100      	movs	r1, #0
 800a188:	429a      	cmp	r2, r3
 800a18a:	db09      	blt.n	800a1a0 <__s2b+0x30>
 800a18c:	4630      	mov	r0, r6
 800a18e:	f7ff ff47 	bl	800a020 <_Balloc>
 800a192:	b940      	cbnz	r0, 800a1a6 <__s2b+0x36>
 800a194:	4602      	mov	r2, r0
 800a196:	21d3      	movs	r1, #211	@ 0xd3
 800a198:	4b18      	ldr	r3, [pc, #96]	@ (800a1fc <__s2b+0x8c>)
 800a19a:	4819      	ldr	r0, [pc, #100]	@ (800a200 <__s2b+0x90>)
 800a19c:	f001 f846 	bl	800b22c <__assert_func>
 800a1a0:	0052      	lsls	r2, r2, #1
 800a1a2:	3101      	adds	r1, #1
 800a1a4:	e7f0      	b.n	800a188 <__s2b+0x18>
 800a1a6:	9b08      	ldr	r3, [sp, #32]
 800a1a8:	2d09      	cmp	r5, #9
 800a1aa:	6143      	str	r3, [r0, #20]
 800a1ac:	f04f 0301 	mov.w	r3, #1
 800a1b0:	6103      	str	r3, [r0, #16]
 800a1b2:	dd16      	ble.n	800a1e2 <__s2b+0x72>
 800a1b4:	f104 0909 	add.w	r9, r4, #9
 800a1b8:	46c8      	mov	r8, r9
 800a1ba:	442c      	add	r4, r5
 800a1bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	220a      	movs	r2, #10
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	3b30      	subs	r3, #48	@ 0x30
 800a1c8:	f7ff ff8c 	bl	800a0e4 <__multadd>
 800a1cc:	45a0      	cmp	r8, r4
 800a1ce:	d1f5      	bne.n	800a1bc <__s2b+0x4c>
 800a1d0:	f1a5 0408 	sub.w	r4, r5, #8
 800a1d4:	444c      	add	r4, r9
 800a1d6:	1b2d      	subs	r5, r5, r4
 800a1d8:	1963      	adds	r3, r4, r5
 800a1da:	42bb      	cmp	r3, r7
 800a1dc:	db04      	blt.n	800a1e8 <__s2b+0x78>
 800a1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1e2:	2509      	movs	r5, #9
 800a1e4:	340a      	adds	r4, #10
 800a1e6:	e7f6      	b.n	800a1d6 <__s2b+0x66>
 800a1e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1ec:	4601      	mov	r1, r0
 800a1ee:	220a      	movs	r2, #10
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	3b30      	subs	r3, #48	@ 0x30
 800a1f4:	f7ff ff76 	bl	800a0e4 <__multadd>
 800a1f8:	e7ee      	b.n	800a1d8 <__s2b+0x68>
 800a1fa:	bf00      	nop
 800a1fc:	0800b7ef 	.word	0x0800b7ef
 800a200:	0800b860 	.word	0x0800b860

0800a204 <__hi0bits>:
 800a204:	4603      	mov	r3, r0
 800a206:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a20a:	bf3a      	itte	cc
 800a20c:	0403      	lslcc	r3, r0, #16
 800a20e:	2010      	movcc	r0, #16
 800a210:	2000      	movcs	r0, #0
 800a212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a216:	bf3c      	itt	cc
 800a218:	021b      	lslcc	r3, r3, #8
 800a21a:	3008      	addcc	r0, #8
 800a21c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a220:	bf3c      	itt	cc
 800a222:	011b      	lslcc	r3, r3, #4
 800a224:	3004      	addcc	r0, #4
 800a226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a22a:	bf3c      	itt	cc
 800a22c:	009b      	lslcc	r3, r3, #2
 800a22e:	3002      	addcc	r0, #2
 800a230:	2b00      	cmp	r3, #0
 800a232:	db05      	blt.n	800a240 <__hi0bits+0x3c>
 800a234:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a238:	f100 0001 	add.w	r0, r0, #1
 800a23c:	bf08      	it	eq
 800a23e:	2020      	moveq	r0, #32
 800a240:	4770      	bx	lr

0800a242 <__lo0bits>:
 800a242:	6803      	ldr	r3, [r0, #0]
 800a244:	4602      	mov	r2, r0
 800a246:	f013 0007 	ands.w	r0, r3, #7
 800a24a:	d00b      	beq.n	800a264 <__lo0bits+0x22>
 800a24c:	07d9      	lsls	r1, r3, #31
 800a24e:	d421      	bmi.n	800a294 <__lo0bits+0x52>
 800a250:	0798      	lsls	r0, r3, #30
 800a252:	bf49      	itett	mi
 800a254:	085b      	lsrmi	r3, r3, #1
 800a256:	089b      	lsrpl	r3, r3, #2
 800a258:	2001      	movmi	r0, #1
 800a25a:	6013      	strmi	r3, [r2, #0]
 800a25c:	bf5c      	itt	pl
 800a25e:	2002      	movpl	r0, #2
 800a260:	6013      	strpl	r3, [r2, #0]
 800a262:	4770      	bx	lr
 800a264:	b299      	uxth	r1, r3
 800a266:	b909      	cbnz	r1, 800a26c <__lo0bits+0x2a>
 800a268:	2010      	movs	r0, #16
 800a26a:	0c1b      	lsrs	r3, r3, #16
 800a26c:	b2d9      	uxtb	r1, r3
 800a26e:	b909      	cbnz	r1, 800a274 <__lo0bits+0x32>
 800a270:	3008      	adds	r0, #8
 800a272:	0a1b      	lsrs	r3, r3, #8
 800a274:	0719      	lsls	r1, r3, #28
 800a276:	bf04      	itt	eq
 800a278:	091b      	lsreq	r3, r3, #4
 800a27a:	3004      	addeq	r0, #4
 800a27c:	0799      	lsls	r1, r3, #30
 800a27e:	bf04      	itt	eq
 800a280:	089b      	lsreq	r3, r3, #2
 800a282:	3002      	addeq	r0, #2
 800a284:	07d9      	lsls	r1, r3, #31
 800a286:	d403      	bmi.n	800a290 <__lo0bits+0x4e>
 800a288:	085b      	lsrs	r3, r3, #1
 800a28a:	f100 0001 	add.w	r0, r0, #1
 800a28e:	d003      	beq.n	800a298 <__lo0bits+0x56>
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	4770      	bx	lr
 800a294:	2000      	movs	r0, #0
 800a296:	4770      	bx	lr
 800a298:	2020      	movs	r0, #32
 800a29a:	4770      	bx	lr

0800a29c <__i2b>:
 800a29c:	b510      	push	{r4, lr}
 800a29e:	460c      	mov	r4, r1
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	f7ff febd 	bl	800a020 <_Balloc>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	b928      	cbnz	r0, 800a2b6 <__i2b+0x1a>
 800a2aa:	f240 1145 	movw	r1, #325	@ 0x145
 800a2ae:	4b04      	ldr	r3, [pc, #16]	@ (800a2c0 <__i2b+0x24>)
 800a2b0:	4804      	ldr	r0, [pc, #16]	@ (800a2c4 <__i2b+0x28>)
 800a2b2:	f000 ffbb 	bl	800b22c <__assert_func>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	6144      	str	r4, [r0, #20]
 800a2ba:	6103      	str	r3, [r0, #16]
 800a2bc:	bd10      	pop	{r4, pc}
 800a2be:	bf00      	nop
 800a2c0:	0800b7ef 	.word	0x0800b7ef
 800a2c4:	0800b860 	.word	0x0800b860

0800a2c8 <__multiply>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	4617      	mov	r7, r2
 800a2ce:	690a      	ldr	r2, [r1, #16]
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	4689      	mov	r9, r1
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	bfa2      	ittt	ge
 800a2d8:	463b      	movge	r3, r7
 800a2da:	460f      	movge	r7, r1
 800a2dc:	4699      	movge	r9, r3
 800a2de:	693d      	ldr	r5, [r7, #16]
 800a2e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	6879      	ldr	r1, [r7, #4]
 800a2e8:	eb05 060a 	add.w	r6, r5, sl
 800a2ec:	42b3      	cmp	r3, r6
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	bfb8      	it	lt
 800a2f2:	3101      	addlt	r1, #1
 800a2f4:	f7ff fe94 	bl	800a020 <_Balloc>
 800a2f8:	b930      	cbnz	r0, 800a308 <__multiply+0x40>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a300:	4b40      	ldr	r3, [pc, #256]	@ (800a404 <__multiply+0x13c>)
 800a302:	4841      	ldr	r0, [pc, #260]	@ (800a408 <__multiply+0x140>)
 800a304:	f000 ff92 	bl	800b22c <__assert_func>
 800a308:	f100 0414 	add.w	r4, r0, #20
 800a30c:	4623      	mov	r3, r4
 800a30e:	2200      	movs	r2, #0
 800a310:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a314:	4573      	cmp	r3, lr
 800a316:	d320      	bcc.n	800a35a <__multiply+0x92>
 800a318:	f107 0814 	add.w	r8, r7, #20
 800a31c:	f109 0114 	add.w	r1, r9, #20
 800a320:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a324:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a328:	9302      	str	r3, [sp, #8]
 800a32a:	1beb      	subs	r3, r5, r7
 800a32c:	3b15      	subs	r3, #21
 800a32e:	f023 0303 	bic.w	r3, r3, #3
 800a332:	3304      	adds	r3, #4
 800a334:	3715      	adds	r7, #21
 800a336:	42bd      	cmp	r5, r7
 800a338:	bf38      	it	cc
 800a33a:	2304      	movcc	r3, #4
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	9b02      	ldr	r3, [sp, #8]
 800a340:	9103      	str	r1, [sp, #12]
 800a342:	428b      	cmp	r3, r1
 800a344:	d80c      	bhi.n	800a360 <__multiply+0x98>
 800a346:	2e00      	cmp	r6, #0
 800a348:	dd03      	ble.n	800a352 <__multiply+0x8a>
 800a34a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d055      	beq.n	800a3fe <__multiply+0x136>
 800a352:	6106      	str	r6, [r0, #16]
 800a354:	b005      	add	sp, #20
 800a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35a:	f843 2b04 	str.w	r2, [r3], #4
 800a35e:	e7d9      	b.n	800a314 <__multiply+0x4c>
 800a360:	f8b1 a000 	ldrh.w	sl, [r1]
 800a364:	f1ba 0f00 	cmp.w	sl, #0
 800a368:	d01f      	beq.n	800a3aa <__multiply+0xe2>
 800a36a:	46c4      	mov	ip, r8
 800a36c:	46a1      	mov	r9, r4
 800a36e:	2700      	movs	r7, #0
 800a370:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a374:	f8d9 3000 	ldr.w	r3, [r9]
 800a378:	fa1f fb82 	uxth.w	fp, r2
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	fb0a 330b 	mla	r3, sl, fp, r3
 800a382:	443b      	add	r3, r7
 800a384:	f8d9 7000 	ldr.w	r7, [r9]
 800a388:	0c12      	lsrs	r2, r2, #16
 800a38a:	0c3f      	lsrs	r7, r7, #16
 800a38c:	fb0a 7202 	mla	r2, sl, r2, r7
 800a390:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a394:	b29b      	uxth	r3, r3
 800a396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a39a:	4565      	cmp	r5, ip
 800a39c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a3a0:	f849 3b04 	str.w	r3, [r9], #4
 800a3a4:	d8e4      	bhi.n	800a370 <__multiply+0xa8>
 800a3a6:	9b01      	ldr	r3, [sp, #4]
 800a3a8:	50e7      	str	r7, [r4, r3]
 800a3aa:	9b03      	ldr	r3, [sp, #12]
 800a3ac:	3104      	adds	r1, #4
 800a3ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a3b2:	f1b9 0f00 	cmp.w	r9, #0
 800a3b6:	d020      	beq.n	800a3fa <__multiply+0x132>
 800a3b8:	4647      	mov	r7, r8
 800a3ba:	46a4      	mov	ip, r4
 800a3bc:	f04f 0a00 	mov.w	sl, #0
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	f8b7 b000 	ldrh.w	fp, [r7]
 800a3c6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	fb09 220b 	mla	r2, r9, fp, r2
 800a3d0:	4452      	add	r2, sl
 800a3d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3d6:	f84c 3b04 	str.w	r3, [ip], #4
 800a3da:	f857 3b04 	ldr.w	r3, [r7], #4
 800a3de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3e2:	f8bc 3000 	ldrh.w	r3, [ip]
 800a3e6:	42bd      	cmp	r5, r7
 800a3e8:	fb09 330a 	mla	r3, r9, sl, r3
 800a3ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a3f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3f4:	d8e5      	bhi.n	800a3c2 <__multiply+0xfa>
 800a3f6:	9a01      	ldr	r2, [sp, #4]
 800a3f8:	50a3      	str	r3, [r4, r2]
 800a3fa:	3404      	adds	r4, #4
 800a3fc:	e79f      	b.n	800a33e <__multiply+0x76>
 800a3fe:	3e01      	subs	r6, #1
 800a400:	e7a1      	b.n	800a346 <__multiply+0x7e>
 800a402:	bf00      	nop
 800a404:	0800b7ef 	.word	0x0800b7ef
 800a408:	0800b860 	.word	0x0800b860

0800a40c <__pow5mult>:
 800a40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a410:	4615      	mov	r5, r2
 800a412:	f012 0203 	ands.w	r2, r2, #3
 800a416:	4607      	mov	r7, r0
 800a418:	460e      	mov	r6, r1
 800a41a:	d007      	beq.n	800a42c <__pow5mult+0x20>
 800a41c:	4c25      	ldr	r4, [pc, #148]	@ (800a4b4 <__pow5mult+0xa8>)
 800a41e:	3a01      	subs	r2, #1
 800a420:	2300      	movs	r3, #0
 800a422:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a426:	f7ff fe5d 	bl	800a0e4 <__multadd>
 800a42a:	4606      	mov	r6, r0
 800a42c:	10ad      	asrs	r5, r5, #2
 800a42e:	d03d      	beq.n	800a4ac <__pow5mult+0xa0>
 800a430:	69fc      	ldr	r4, [r7, #28]
 800a432:	b97c      	cbnz	r4, 800a454 <__pow5mult+0x48>
 800a434:	2010      	movs	r0, #16
 800a436:	f7fc fb75 	bl	8006b24 <malloc>
 800a43a:	4602      	mov	r2, r0
 800a43c:	61f8      	str	r0, [r7, #28]
 800a43e:	b928      	cbnz	r0, 800a44c <__pow5mult+0x40>
 800a440:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a444:	4b1c      	ldr	r3, [pc, #112]	@ (800a4b8 <__pow5mult+0xac>)
 800a446:	481d      	ldr	r0, [pc, #116]	@ (800a4bc <__pow5mult+0xb0>)
 800a448:	f000 fef0 	bl	800b22c <__assert_func>
 800a44c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a450:	6004      	str	r4, [r0, #0]
 800a452:	60c4      	str	r4, [r0, #12]
 800a454:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a458:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a45c:	b94c      	cbnz	r4, 800a472 <__pow5mult+0x66>
 800a45e:	f240 2171 	movw	r1, #625	@ 0x271
 800a462:	4638      	mov	r0, r7
 800a464:	f7ff ff1a 	bl	800a29c <__i2b>
 800a468:	2300      	movs	r3, #0
 800a46a:	4604      	mov	r4, r0
 800a46c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a470:	6003      	str	r3, [r0, #0]
 800a472:	f04f 0900 	mov.w	r9, #0
 800a476:	07eb      	lsls	r3, r5, #31
 800a478:	d50a      	bpl.n	800a490 <__pow5mult+0x84>
 800a47a:	4631      	mov	r1, r6
 800a47c:	4622      	mov	r2, r4
 800a47e:	4638      	mov	r0, r7
 800a480:	f7ff ff22 	bl	800a2c8 <__multiply>
 800a484:	4680      	mov	r8, r0
 800a486:	4631      	mov	r1, r6
 800a488:	4638      	mov	r0, r7
 800a48a:	f7ff fe09 	bl	800a0a0 <_Bfree>
 800a48e:	4646      	mov	r6, r8
 800a490:	106d      	asrs	r5, r5, #1
 800a492:	d00b      	beq.n	800a4ac <__pow5mult+0xa0>
 800a494:	6820      	ldr	r0, [r4, #0]
 800a496:	b938      	cbnz	r0, 800a4a8 <__pow5mult+0x9c>
 800a498:	4622      	mov	r2, r4
 800a49a:	4621      	mov	r1, r4
 800a49c:	4638      	mov	r0, r7
 800a49e:	f7ff ff13 	bl	800a2c8 <__multiply>
 800a4a2:	6020      	str	r0, [r4, #0]
 800a4a4:	f8c0 9000 	str.w	r9, [r0]
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	e7e4      	b.n	800a476 <__pow5mult+0x6a>
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4b2:	bf00      	nop
 800a4b4:	0800b958 	.word	0x0800b958
 800a4b8:	0800b780 	.word	0x0800b780
 800a4bc:	0800b860 	.word	0x0800b860

0800a4c0 <__lshift>:
 800a4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	4691      	mov	r9, r2
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	6849      	ldr	r1, [r1, #4]
 800a4ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4d2:	68a3      	ldr	r3, [r4, #8]
 800a4d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4d8:	f108 0601 	add.w	r6, r8, #1
 800a4dc:	42b3      	cmp	r3, r6
 800a4de:	db0b      	blt.n	800a4f8 <__lshift+0x38>
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	f7ff fd9d 	bl	800a020 <_Balloc>
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	b948      	cbnz	r0, 800a4fe <__lshift+0x3e>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4f0:	4b27      	ldr	r3, [pc, #156]	@ (800a590 <__lshift+0xd0>)
 800a4f2:	4828      	ldr	r0, [pc, #160]	@ (800a594 <__lshift+0xd4>)
 800a4f4:	f000 fe9a 	bl	800b22c <__assert_func>
 800a4f8:	3101      	adds	r1, #1
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	e7ee      	b.n	800a4dc <__lshift+0x1c>
 800a4fe:	2300      	movs	r3, #0
 800a500:	f100 0114 	add.w	r1, r0, #20
 800a504:	f100 0210 	add.w	r2, r0, #16
 800a508:	4618      	mov	r0, r3
 800a50a:	4553      	cmp	r3, sl
 800a50c:	db33      	blt.n	800a576 <__lshift+0xb6>
 800a50e:	6920      	ldr	r0, [r4, #16]
 800a510:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a514:	f104 0314 	add.w	r3, r4, #20
 800a518:	f019 091f 	ands.w	r9, r9, #31
 800a51c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a520:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a524:	d02b      	beq.n	800a57e <__lshift+0xbe>
 800a526:	468a      	mov	sl, r1
 800a528:	2200      	movs	r2, #0
 800a52a:	f1c9 0e20 	rsb	lr, r9, #32
 800a52e:	6818      	ldr	r0, [r3, #0]
 800a530:	fa00 f009 	lsl.w	r0, r0, r9
 800a534:	4310      	orrs	r0, r2
 800a536:	f84a 0b04 	str.w	r0, [sl], #4
 800a53a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a53e:	459c      	cmp	ip, r3
 800a540:	fa22 f20e 	lsr.w	r2, r2, lr
 800a544:	d8f3      	bhi.n	800a52e <__lshift+0x6e>
 800a546:	ebac 0304 	sub.w	r3, ip, r4
 800a54a:	3b15      	subs	r3, #21
 800a54c:	f023 0303 	bic.w	r3, r3, #3
 800a550:	3304      	adds	r3, #4
 800a552:	f104 0015 	add.w	r0, r4, #21
 800a556:	4560      	cmp	r0, ip
 800a558:	bf88      	it	hi
 800a55a:	2304      	movhi	r3, #4
 800a55c:	50ca      	str	r2, [r1, r3]
 800a55e:	b10a      	cbz	r2, 800a564 <__lshift+0xa4>
 800a560:	f108 0602 	add.w	r6, r8, #2
 800a564:	3e01      	subs	r6, #1
 800a566:	4638      	mov	r0, r7
 800a568:	4621      	mov	r1, r4
 800a56a:	612e      	str	r6, [r5, #16]
 800a56c:	f7ff fd98 	bl	800a0a0 <_Bfree>
 800a570:	4628      	mov	r0, r5
 800a572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a576:	f842 0f04 	str.w	r0, [r2, #4]!
 800a57a:	3301      	adds	r3, #1
 800a57c:	e7c5      	b.n	800a50a <__lshift+0x4a>
 800a57e:	3904      	subs	r1, #4
 800a580:	f853 2b04 	ldr.w	r2, [r3], #4
 800a584:	459c      	cmp	ip, r3
 800a586:	f841 2f04 	str.w	r2, [r1, #4]!
 800a58a:	d8f9      	bhi.n	800a580 <__lshift+0xc0>
 800a58c:	e7ea      	b.n	800a564 <__lshift+0xa4>
 800a58e:	bf00      	nop
 800a590:	0800b7ef 	.word	0x0800b7ef
 800a594:	0800b860 	.word	0x0800b860

0800a598 <__mcmp>:
 800a598:	4603      	mov	r3, r0
 800a59a:	690a      	ldr	r2, [r1, #16]
 800a59c:	6900      	ldr	r0, [r0, #16]
 800a59e:	b530      	push	{r4, r5, lr}
 800a5a0:	1a80      	subs	r0, r0, r2
 800a5a2:	d10e      	bne.n	800a5c2 <__mcmp+0x2a>
 800a5a4:	3314      	adds	r3, #20
 800a5a6:	3114      	adds	r1, #20
 800a5a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a5ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a5b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5b8:	4295      	cmp	r5, r2
 800a5ba:	d003      	beq.n	800a5c4 <__mcmp+0x2c>
 800a5bc:	d205      	bcs.n	800a5ca <__mcmp+0x32>
 800a5be:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c2:	bd30      	pop	{r4, r5, pc}
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	d3f3      	bcc.n	800a5b0 <__mcmp+0x18>
 800a5c8:	e7fb      	b.n	800a5c2 <__mcmp+0x2a>
 800a5ca:	2001      	movs	r0, #1
 800a5cc:	e7f9      	b.n	800a5c2 <__mcmp+0x2a>
	...

0800a5d0 <__mdiff>:
 800a5d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	4689      	mov	r9, r1
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	4611      	mov	r1, r2
 800a5da:	4648      	mov	r0, r9
 800a5dc:	4614      	mov	r4, r2
 800a5de:	f7ff ffdb 	bl	800a598 <__mcmp>
 800a5e2:	1e05      	subs	r5, r0, #0
 800a5e4:	d112      	bne.n	800a60c <__mdiff+0x3c>
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f7ff fd19 	bl	800a020 <_Balloc>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	b928      	cbnz	r0, 800a5fe <__mdiff+0x2e>
 800a5f2:	f240 2137 	movw	r1, #567	@ 0x237
 800a5f6:	4b3e      	ldr	r3, [pc, #248]	@ (800a6f0 <__mdiff+0x120>)
 800a5f8:	483e      	ldr	r0, [pc, #248]	@ (800a6f4 <__mdiff+0x124>)
 800a5fa:	f000 fe17 	bl	800b22c <__assert_func>
 800a5fe:	2301      	movs	r3, #1
 800a600:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a604:	4610      	mov	r0, r2
 800a606:	b003      	add	sp, #12
 800a608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60c:	bfbc      	itt	lt
 800a60e:	464b      	movlt	r3, r9
 800a610:	46a1      	movlt	r9, r4
 800a612:	4630      	mov	r0, r6
 800a614:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a618:	bfba      	itte	lt
 800a61a:	461c      	movlt	r4, r3
 800a61c:	2501      	movlt	r5, #1
 800a61e:	2500      	movge	r5, #0
 800a620:	f7ff fcfe 	bl	800a020 <_Balloc>
 800a624:	4602      	mov	r2, r0
 800a626:	b918      	cbnz	r0, 800a630 <__mdiff+0x60>
 800a628:	f240 2145 	movw	r1, #581	@ 0x245
 800a62c:	4b30      	ldr	r3, [pc, #192]	@ (800a6f0 <__mdiff+0x120>)
 800a62e:	e7e3      	b.n	800a5f8 <__mdiff+0x28>
 800a630:	f100 0b14 	add.w	fp, r0, #20
 800a634:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a638:	f109 0310 	add.w	r3, r9, #16
 800a63c:	60c5      	str	r5, [r0, #12]
 800a63e:	f04f 0c00 	mov.w	ip, #0
 800a642:	f109 0514 	add.w	r5, r9, #20
 800a646:	46d9      	mov	r9, fp
 800a648:	6926      	ldr	r6, [r4, #16]
 800a64a:	f104 0e14 	add.w	lr, r4, #20
 800a64e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a652:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	9b01      	ldr	r3, [sp, #4]
 800a65a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a65e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a662:	b281      	uxth	r1, r0
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	fa1f f38a 	uxth.w	r3, sl
 800a66a:	1a5b      	subs	r3, r3, r1
 800a66c:	0c00      	lsrs	r0, r0, #16
 800a66e:	4463      	add	r3, ip
 800a670:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a674:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a678:	b29b      	uxth	r3, r3
 800a67a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a67e:	4576      	cmp	r6, lr
 800a680:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a684:	f849 3b04 	str.w	r3, [r9], #4
 800a688:	d8e6      	bhi.n	800a658 <__mdiff+0x88>
 800a68a:	1b33      	subs	r3, r6, r4
 800a68c:	3b15      	subs	r3, #21
 800a68e:	f023 0303 	bic.w	r3, r3, #3
 800a692:	3415      	adds	r4, #21
 800a694:	3304      	adds	r3, #4
 800a696:	42a6      	cmp	r6, r4
 800a698:	bf38      	it	cc
 800a69a:	2304      	movcc	r3, #4
 800a69c:	441d      	add	r5, r3
 800a69e:	445b      	add	r3, fp
 800a6a0:	461e      	mov	r6, r3
 800a6a2:	462c      	mov	r4, r5
 800a6a4:	4544      	cmp	r4, r8
 800a6a6:	d30e      	bcc.n	800a6c6 <__mdiff+0xf6>
 800a6a8:	f108 0103 	add.w	r1, r8, #3
 800a6ac:	1b49      	subs	r1, r1, r5
 800a6ae:	f021 0103 	bic.w	r1, r1, #3
 800a6b2:	3d03      	subs	r5, #3
 800a6b4:	45a8      	cmp	r8, r5
 800a6b6:	bf38      	it	cc
 800a6b8:	2100      	movcc	r1, #0
 800a6ba:	440b      	add	r3, r1
 800a6bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6c0:	b199      	cbz	r1, 800a6ea <__mdiff+0x11a>
 800a6c2:	6117      	str	r7, [r2, #16]
 800a6c4:	e79e      	b.n	800a604 <__mdiff+0x34>
 800a6c6:	46e6      	mov	lr, ip
 800a6c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a6cc:	fa1f fc81 	uxth.w	ip, r1
 800a6d0:	44f4      	add	ip, lr
 800a6d2:	0c08      	lsrs	r0, r1, #16
 800a6d4:	4471      	add	r1, lr
 800a6d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6da:	b289      	uxth	r1, r1
 800a6dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6e4:	f846 1b04 	str.w	r1, [r6], #4
 800a6e8:	e7dc      	b.n	800a6a4 <__mdiff+0xd4>
 800a6ea:	3f01      	subs	r7, #1
 800a6ec:	e7e6      	b.n	800a6bc <__mdiff+0xec>
 800a6ee:	bf00      	nop
 800a6f0:	0800b7ef 	.word	0x0800b7ef
 800a6f4:	0800b860 	.word	0x0800b860

0800a6f8 <__ulp>:
 800a6f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a734 <__ulp+0x3c>)
 800a6fa:	400b      	ands	r3, r1
 800a6fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a700:	2b00      	cmp	r3, #0
 800a702:	dc08      	bgt.n	800a716 <__ulp+0x1e>
 800a704:	425b      	negs	r3, r3
 800a706:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a70a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a70e:	da04      	bge.n	800a71a <__ulp+0x22>
 800a710:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a714:	4113      	asrs	r3, r2
 800a716:	2200      	movs	r2, #0
 800a718:	e008      	b.n	800a72c <__ulp+0x34>
 800a71a:	f1a2 0314 	sub.w	r3, r2, #20
 800a71e:	2b1e      	cmp	r3, #30
 800a720:	bfd6      	itet	le
 800a722:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a726:	2201      	movgt	r2, #1
 800a728:	40da      	lsrle	r2, r3
 800a72a:	2300      	movs	r3, #0
 800a72c:	4619      	mov	r1, r3
 800a72e:	4610      	mov	r0, r2
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	7ff00000 	.word	0x7ff00000

0800a738 <__b2d>:
 800a738:	6902      	ldr	r2, [r0, #16]
 800a73a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73c:	f100 0614 	add.w	r6, r0, #20
 800a740:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a744:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a748:	4f1e      	ldr	r7, [pc, #120]	@ (800a7c4 <__b2d+0x8c>)
 800a74a:	4620      	mov	r0, r4
 800a74c:	f7ff fd5a 	bl	800a204 <__hi0bits>
 800a750:	4603      	mov	r3, r0
 800a752:	f1c0 0020 	rsb	r0, r0, #32
 800a756:	2b0a      	cmp	r3, #10
 800a758:	f1a2 0504 	sub.w	r5, r2, #4
 800a75c:	6008      	str	r0, [r1, #0]
 800a75e:	dc12      	bgt.n	800a786 <__b2d+0x4e>
 800a760:	42ae      	cmp	r6, r5
 800a762:	bf2c      	ite	cs
 800a764:	2200      	movcs	r2, #0
 800a766:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a76a:	f1c3 0c0b 	rsb	ip, r3, #11
 800a76e:	3315      	adds	r3, #21
 800a770:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a774:	fa04 f303 	lsl.w	r3, r4, r3
 800a778:	fa22 f20c 	lsr.w	r2, r2, ip
 800a77c:	ea4e 0107 	orr.w	r1, lr, r7
 800a780:	431a      	orrs	r2, r3
 800a782:	4610      	mov	r0, r2
 800a784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a786:	42ae      	cmp	r6, r5
 800a788:	bf36      	itet	cc
 800a78a:	f1a2 0508 	subcc.w	r5, r2, #8
 800a78e:	2200      	movcs	r2, #0
 800a790:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a794:	3b0b      	subs	r3, #11
 800a796:	d012      	beq.n	800a7be <__b2d+0x86>
 800a798:	f1c3 0720 	rsb	r7, r3, #32
 800a79c:	fa22 f107 	lsr.w	r1, r2, r7
 800a7a0:	409c      	lsls	r4, r3
 800a7a2:	430c      	orrs	r4, r1
 800a7a4:	42b5      	cmp	r5, r6
 800a7a6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a7aa:	bf94      	ite	ls
 800a7ac:	2400      	movls	r4, #0
 800a7ae:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a7b2:	409a      	lsls	r2, r3
 800a7b4:	40fc      	lsrs	r4, r7
 800a7b6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a7ba:	4322      	orrs	r2, r4
 800a7bc:	e7e1      	b.n	800a782 <__b2d+0x4a>
 800a7be:	ea44 0107 	orr.w	r1, r4, r7
 800a7c2:	e7de      	b.n	800a782 <__b2d+0x4a>
 800a7c4:	3ff00000 	.word	0x3ff00000

0800a7c8 <__d2b>:
 800a7c8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	4690      	mov	r8, r2
 800a7d0:	4699      	mov	r9, r3
 800a7d2:	9e08      	ldr	r6, [sp, #32]
 800a7d4:	f7ff fc24 	bl	800a020 <_Balloc>
 800a7d8:	4604      	mov	r4, r0
 800a7da:	b930      	cbnz	r0, 800a7ea <__d2b+0x22>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7e2:	4b23      	ldr	r3, [pc, #140]	@ (800a870 <__d2b+0xa8>)
 800a7e4:	4823      	ldr	r0, [pc, #140]	@ (800a874 <__d2b+0xac>)
 800a7e6:	f000 fd21 	bl	800b22c <__assert_func>
 800a7ea:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7f2:	b10d      	cbz	r5, 800a7f8 <__d2b+0x30>
 800a7f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7f8:	9301      	str	r3, [sp, #4]
 800a7fa:	f1b8 0300 	subs.w	r3, r8, #0
 800a7fe:	d024      	beq.n	800a84a <__d2b+0x82>
 800a800:	4668      	mov	r0, sp
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	f7ff fd1d 	bl	800a242 <__lo0bits>
 800a808:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a80c:	b1d8      	cbz	r0, 800a846 <__d2b+0x7e>
 800a80e:	f1c0 0320 	rsb	r3, r0, #32
 800a812:	fa02 f303 	lsl.w	r3, r2, r3
 800a816:	430b      	orrs	r3, r1
 800a818:	40c2      	lsrs	r2, r0
 800a81a:	6163      	str	r3, [r4, #20]
 800a81c:	9201      	str	r2, [sp, #4]
 800a81e:	9b01      	ldr	r3, [sp, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	bf0c      	ite	eq
 800a824:	2201      	moveq	r2, #1
 800a826:	2202      	movne	r2, #2
 800a828:	61a3      	str	r3, [r4, #24]
 800a82a:	6122      	str	r2, [r4, #16]
 800a82c:	b1ad      	cbz	r5, 800a85a <__d2b+0x92>
 800a82e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a832:	4405      	add	r5, r0
 800a834:	6035      	str	r5, [r6, #0]
 800a836:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a83a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a83c:	6018      	str	r0, [r3, #0]
 800a83e:	4620      	mov	r0, r4
 800a840:	b002      	add	sp, #8
 800a842:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a846:	6161      	str	r1, [r4, #20]
 800a848:	e7e9      	b.n	800a81e <__d2b+0x56>
 800a84a:	a801      	add	r0, sp, #4
 800a84c:	f7ff fcf9 	bl	800a242 <__lo0bits>
 800a850:	9b01      	ldr	r3, [sp, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	6163      	str	r3, [r4, #20]
 800a856:	3020      	adds	r0, #32
 800a858:	e7e7      	b.n	800a82a <__d2b+0x62>
 800a85a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a85e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a862:	6030      	str	r0, [r6, #0]
 800a864:	6918      	ldr	r0, [r3, #16]
 800a866:	f7ff fccd 	bl	800a204 <__hi0bits>
 800a86a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a86e:	e7e4      	b.n	800a83a <__d2b+0x72>
 800a870:	0800b7ef 	.word	0x0800b7ef
 800a874:	0800b860 	.word	0x0800b860

0800a878 <__ratio>:
 800a878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	b085      	sub	sp, #20
 800a87e:	e9cd 1000 	strd	r1, r0, [sp]
 800a882:	a902      	add	r1, sp, #8
 800a884:	f7ff ff58 	bl	800a738 <__b2d>
 800a888:	468b      	mov	fp, r1
 800a88a:	4606      	mov	r6, r0
 800a88c:	460f      	mov	r7, r1
 800a88e:	9800      	ldr	r0, [sp, #0]
 800a890:	a903      	add	r1, sp, #12
 800a892:	f7ff ff51 	bl	800a738 <__b2d>
 800a896:	460d      	mov	r5, r1
 800a898:	9b01      	ldr	r3, [sp, #4]
 800a89a:	4689      	mov	r9, r1
 800a89c:	6919      	ldr	r1, [r3, #16]
 800a89e:	9b00      	ldr	r3, [sp, #0]
 800a8a0:	4604      	mov	r4, r0
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	1ac9      	subs	r1, r1, r3
 800a8a8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a8ac:	1a9b      	subs	r3, r3, r2
 800a8ae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	bfcd      	iteet	gt
 800a8b6:	463a      	movgt	r2, r7
 800a8b8:	462a      	movle	r2, r5
 800a8ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8be:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a8c2:	bfd8      	it	le
 800a8c4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a8c8:	464b      	mov	r3, r9
 800a8ca:	4622      	mov	r2, r4
 800a8cc:	4659      	mov	r1, fp
 800a8ce:	f7f5 ff37 	bl	8000740 <__aeabi_ddiv>
 800a8d2:	b005      	add	sp, #20
 800a8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8d8 <__copybits>:
 800a8d8:	3901      	subs	r1, #1
 800a8da:	b570      	push	{r4, r5, r6, lr}
 800a8dc:	1149      	asrs	r1, r1, #5
 800a8de:	6914      	ldr	r4, [r2, #16]
 800a8e0:	3101      	adds	r1, #1
 800a8e2:	f102 0314 	add.w	r3, r2, #20
 800a8e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8ee:	1f05      	subs	r5, r0, #4
 800a8f0:	42a3      	cmp	r3, r4
 800a8f2:	d30c      	bcc.n	800a90e <__copybits+0x36>
 800a8f4:	1aa3      	subs	r3, r4, r2
 800a8f6:	3b11      	subs	r3, #17
 800a8f8:	f023 0303 	bic.w	r3, r3, #3
 800a8fc:	3211      	adds	r2, #17
 800a8fe:	42a2      	cmp	r2, r4
 800a900:	bf88      	it	hi
 800a902:	2300      	movhi	r3, #0
 800a904:	4418      	add	r0, r3
 800a906:	2300      	movs	r3, #0
 800a908:	4288      	cmp	r0, r1
 800a90a:	d305      	bcc.n	800a918 <__copybits+0x40>
 800a90c:	bd70      	pop	{r4, r5, r6, pc}
 800a90e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a912:	f845 6f04 	str.w	r6, [r5, #4]!
 800a916:	e7eb      	b.n	800a8f0 <__copybits+0x18>
 800a918:	f840 3b04 	str.w	r3, [r0], #4
 800a91c:	e7f4      	b.n	800a908 <__copybits+0x30>

0800a91e <__any_on>:
 800a91e:	f100 0214 	add.w	r2, r0, #20
 800a922:	6900      	ldr	r0, [r0, #16]
 800a924:	114b      	asrs	r3, r1, #5
 800a926:	4298      	cmp	r0, r3
 800a928:	b510      	push	{r4, lr}
 800a92a:	db11      	blt.n	800a950 <__any_on+0x32>
 800a92c:	dd0a      	ble.n	800a944 <__any_on+0x26>
 800a92e:	f011 011f 	ands.w	r1, r1, #31
 800a932:	d007      	beq.n	800a944 <__any_on+0x26>
 800a934:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a938:	fa24 f001 	lsr.w	r0, r4, r1
 800a93c:	fa00 f101 	lsl.w	r1, r0, r1
 800a940:	428c      	cmp	r4, r1
 800a942:	d10b      	bne.n	800a95c <__any_on+0x3e>
 800a944:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a948:	4293      	cmp	r3, r2
 800a94a:	d803      	bhi.n	800a954 <__any_on+0x36>
 800a94c:	2000      	movs	r0, #0
 800a94e:	bd10      	pop	{r4, pc}
 800a950:	4603      	mov	r3, r0
 800a952:	e7f7      	b.n	800a944 <__any_on+0x26>
 800a954:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a958:	2900      	cmp	r1, #0
 800a95a:	d0f5      	beq.n	800a948 <__any_on+0x2a>
 800a95c:	2001      	movs	r0, #1
 800a95e:	e7f6      	b.n	800a94e <__any_on+0x30>

0800a960 <_strtol_l.isra.0>:
 800a960:	2b24      	cmp	r3, #36	@ 0x24
 800a962:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a966:	4686      	mov	lr, r0
 800a968:	4690      	mov	r8, r2
 800a96a:	d801      	bhi.n	800a970 <_strtol_l.isra.0+0x10>
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d106      	bne.n	800a97e <_strtol_l.isra.0+0x1e>
 800a970:	f7fe f90a 	bl	8008b88 <__errno>
 800a974:	2316      	movs	r3, #22
 800a976:	6003      	str	r3, [r0, #0]
 800a978:	2000      	movs	r0, #0
 800a97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97e:	460d      	mov	r5, r1
 800a980:	4833      	ldr	r0, [pc, #204]	@ (800aa50 <_strtol_l.isra.0+0xf0>)
 800a982:	462a      	mov	r2, r5
 800a984:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a988:	5d06      	ldrb	r6, [r0, r4]
 800a98a:	f016 0608 	ands.w	r6, r6, #8
 800a98e:	d1f8      	bne.n	800a982 <_strtol_l.isra.0+0x22>
 800a990:	2c2d      	cmp	r4, #45	@ 0x2d
 800a992:	d110      	bne.n	800a9b6 <_strtol_l.isra.0+0x56>
 800a994:	2601      	movs	r6, #1
 800a996:	782c      	ldrb	r4, [r5, #0]
 800a998:	1c95      	adds	r5, r2, #2
 800a99a:	f033 0210 	bics.w	r2, r3, #16
 800a99e:	d115      	bne.n	800a9cc <_strtol_l.isra.0+0x6c>
 800a9a0:	2c30      	cmp	r4, #48	@ 0x30
 800a9a2:	d10d      	bne.n	800a9c0 <_strtol_l.isra.0+0x60>
 800a9a4:	782a      	ldrb	r2, [r5, #0]
 800a9a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9aa:	2a58      	cmp	r2, #88	@ 0x58
 800a9ac:	d108      	bne.n	800a9c0 <_strtol_l.isra.0+0x60>
 800a9ae:	786c      	ldrb	r4, [r5, #1]
 800a9b0:	3502      	adds	r5, #2
 800a9b2:	2310      	movs	r3, #16
 800a9b4:	e00a      	b.n	800a9cc <_strtol_l.isra.0+0x6c>
 800a9b6:	2c2b      	cmp	r4, #43	@ 0x2b
 800a9b8:	bf04      	itt	eq
 800a9ba:	782c      	ldrbeq	r4, [r5, #0]
 800a9bc:	1c95      	addeq	r5, r2, #2
 800a9be:	e7ec      	b.n	800a99a <_strtol_l.isra.0+0x3a>
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1f6      	bne.n	800a9b2 <_strtol_l.isra.0+0x52>
 800a9c4:	2c30      	cmp	r4, #48	@ 0x30
 800a9c6:	bf14      	ite	ne
 800a9c8:	230a      	movne	r3, #10
 800a9ca:	2308      	moveq	r3, #8
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a9d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a9d6:	fbbc f9f3 	udiv	r9, ip, r3
 800a9da:	4610      	mov	r0, r2
 800a9dc:	fb03 ca19 	mls	sl, r3, r9, ip
 800a9e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a9e4:	2f09      	cmp	r7, #9
 800a9e6:	d80f      	bhi.n	800aa08 <_strtol_l.isra.0+0xa8>
 800a9e8:	463c      	mov	r4, r7
 800a9ea:	42a3      	cmp	r3, r4
 800a9ec:	dd1b      	ble.n	800aa26 <_strtol_l.isra.0+0xc6>
 800a9ee:	1c57      	adds	r7, r2, #1
 800a9f0:	d007      	beq.n	800aa02 <_strtol_l.isra.0+0xa2>
 800a9f2:	4581      	cmp	r9, r0
 800a9f4:	d314      	bcc.n	800aa20 <_strtol_l.isra.0+0xc0>
 800a9f6:	d101      	bne.n	800a9fc <_strtol_l.isra.0+0x9c>
 800a9f8:	45a2      	cmp	sl, r4
 800a9fa:	db11      	blt.n	800aa20 <_strtol_l.isra.0+0xc0>
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	fb00 4003 	mla	r0, r0, r3, r4
 800aa02:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa06:	e7eb      	b.n	800a9e0 <_strtol_l.isra.0+0x80>
 800aa08:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aa0c:	2f19      	cmp	r7, #25
 800aa0e:	d801      	bhi.n	800aa14 <_strtol_l.isra.0+0xb4>
 800aa10:	3c37      	subs	r4, #55	@ 0x37
 800aa12:	e7ea      	b.n	800a9ea <_strtol_l.isra.0+0x8a>
 800aa14:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aa18:	2f19      	cmp	r7, #25
 800aa1a:	d804      	bhi.n	800aa26 <_strtol_l.isra.0+0xc6>
 800aa1c:	3c57      	subs	r4, #87	@ 0x57
 800aa1e:	e7e4      	b.n	800a9ea <_strtol_l.isra.0+0x8a>
 800aa20:	f04f 32ff 	mov.w	r2, #4294967295
 800aa24:	e7ed      	b.n	800aa02 <_strtol_l.isra.0+0xa2>
 800aa26:	1c53      	adds	r3, r2, #1
 800aa28:	d108      	bne.n	800aa3c <_strtol_l.isra.0+0xdc>
 800aa2a:	2322      	movs	r3, #34	@ 0x22
 800aa2c:	4660      	mov	r0, ip
 800aa2e:	f8ce 3000 	str.w	r3, [lr]
 800aa32:	f1b8 0f00 	cmp.w	r8, #0
 800aa36:	d0a0      	beq.n	800a97a <_strtol_l.isra.0+0x1a>
 800aa38:	1e69      	subs	r1, r5, #1
 800aa3a:	e006      	b.n	800aa4a <_strtol_l.isra.0+0xea>
 800aa3c:	b106      	cbz	r6, 800aa40 <_strtol_l.isra.0+0xe0>
 800aa3e:	4240      	negs	r0, r0
 800aa40:	f1b8 0f00 	cmp.w	r8, #0
 800aa44:	d099      	beq.n	800a97a <_strtol_l.isra.0+0x1a>
 800aa46:	2a00      	cmp	r2, #0
 800aa48:	d1f6      	bne.n	800aa38 <_strtol_l.isra.0+0xd8>
 800aa4a:	f8c8 1000 	str.w	r1, [r8]
 800aa4e:	e794      	b.n	800a97a <_strtol_l.isra.0+0x1a>
 800aa50:	0800ba59 	.word	0x0800ba59

0800aa54 <_strtol_r>:
 800aa54:	f7ff bf84 	b.w	800a960 <_strtol_l.isra.0>

0800aa58 <__ascii_wctomb>:
 800aa58:	4603      	mov	r3, r0
 800aa5a:	4608      	mov	r0, r1
 800aa5c:	b141      	cbz	r1, 800aa70 <__ascii_wctomb+0x18>
 800aa5e:	2aff      	cmp	r2, #255	@ 0xff
 800aa60:	d904      	bls.n	800aa6c <__ascii_wctomb+0x14>
 800aa62:	228a      	movs	r2, #138	@ 0x8a
 800aa64:	f04f 30ff 	mov.w	r0, #4294967295
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	4770      	bx	lr
 800aa6c:	2001      	movs	r0, #1
 800aa6e:	700a      	strb	r2, [r1, #0]
 800aa70:	4770      	bx	lr

0800aa72 <__ssputs_r>:
 800aa72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa76:	461f      	mov	r7, r3
 800aa78:	688e      	ldr	r6, [r1, #8]
 800aa7a:	4682      	mov	sl, r0
 800aa7c:	42be      	cmp	r6, r7
 800aa7e:	460c      	mov	r4, r1
 800aa80:	4690      	mov	r8, r2
 800aa82:	680b      	ldr	r3, [r1, #0]
 800aa84:	d82d      	bhi.n	800aae2 <__ssputs_r+0x70>
 800aa86:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa8a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa8e:	d026      	beq.n	800aade <__ssputs_r+0x6c>
 800aa90:	6965      	ldr	r5, [r4, #20]
 800aa92:	6909      	ldr	r1, [r1, #16]
 800aa94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa98:	eba3 0901 	sub.w	r9, r3, r1
 800aa9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaa0:	1c7b      	adds	r3, r7, #1
 800aaa2:	444b      	add	r3, r9
 800aaa4:	106d      	asrs	r5, r5, #1
 800aaa6:	429d      	cmp	r5, r3
 800aaa8:	bf38      	it	cc
 800aaaa:	461d      	movcc	r5, r3
 800aaac:	0553      	lsls	r3, r2, #21
 800aaae:	d527      	bpl.n	800ab00 <__ssputs_r+0x8e>
 800aab0:	4629      	mov	r1, r5
 800aab2:	f7fc f869 	bl	8006b88 <_malloc_r>
 800aab6:	4606      	mov	r6, r0
 800aab8:	b360      	cbz	r0, 800ab14 <__ssputs_r+0xa2>
 800aaba:	464a      	mov	r2, r9
 800aabc:	6921      	ldr	r1, [r4, #16]
 800aabe:	f7fe f8a6 	bl	8008c0e <memcpy>
 800aac2:	89a3      	ldrh	r3, [r4, #12]
 800aac4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aacc:	81a3      	strh	r3, [r4, #12]
 800aace:	6126      	str	r6, [r4, #16]
 800aad0:	444e      	add	r6, r9
 800aad2:	6026      	str	r6, [r4, #0]
 800aad4:	463e      	mov	r6, r7
 800aad6:	6165      	str	r5, [r4, #20]
 800aad8:	eba5 0509 	sub.w	r5, r5, r9
 800aadc:	60a5      	str	r5, [r4, #8]
 800aade:	42be      	cmp	r6, r7
 800aae0:	d900      	bls.n	800aae4 <__ssputs_r+0x72>
 800aae2:	463e      	mov	r6, r7
 800aae4:	4632      	mov	r2, r6
 800aae6:	4641      	mov	r1, r8
 800aae8:	6820      	ldr	r0, [r4, #0]
 800aaea:	f000 fb62 	bl	800b1b2 <memmove>
 800aaee:	2000      	movs	r0, #0
 800aaf0:	68a3      	ldr	r3, [r4, #8]
 800aaf2:	1b9b      	subs	r3, r3, r6
 800aaf4:	60a3      	str	r3, [r4, #8]
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	4433      	add	r3, r6
 800aafa:	6023      	str	r3, [r4, #0]
 800aafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab00:	462a      	mov	r2, r5
 800ab02:	f000 fbc5 	bl	800b290 <_realloc_r>
 800ab06:	4606      	mov	r6, r0
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d1e0      	bne.n	800aace <__ssputs_r+0x5c>
 800ab0c:	4650      	mov	r0, sl
 800ab0e:	6921      	ldr	r1, [r4, #16]
 800ab10:	f7fe fef2 	bl	80098f8 <_free_r>
 800ab14:	230c      	movs	r3, #12
 800ab16:	f8ca 3000 	str.w	r3, [sl]
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab24:	81a3      	strh	r3, [r4, #12]
 800ab26:	e7e9      	b.n	800aafc <__ssputs_r+0x8a>

0800ab28 <_svfiprintf_r>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	4698      	mov	r8, r3
 800ab2e:	898b      	ldrh	r3, [r1, #12]
 800ab30:	4607      	mov	r7, r0
 800ab32:	061b      	lsls	r3, r3, #24
 800ab34:	460d      	mov	r5, r1
 800ab36:	4614      	mov	r4, r2
 800ab38:	b09d      	sub	sp, #116	@ 0x74
 800ab3a:	d510      	bpl.n	800ab5e <_svfiprintf_r+0x36>
 800ab3c:	690b      	ldr	r3, [r1, #16]
 800ab3e:	b973      	cbnz	r3, 800ab5e <_svfiprintf_r+0x36>
 800ab40:	2140      	movs	r1, #64	@ 0x40
 800ab42:	f7fc f821 	bl	8006b88 <_malloc_r>
 800ab46:	6028      	str	r0, [r5, #0]
 800ab48:	6128      	str	r0, [r5, #16]
 800ab4a:	b930      	cbnz	r0, 800ab5a <_svfiprintf_r+0x32>
 800ab4c:	230c      	movs	r3, #12
 800ab4e:	603b      	str	r3, [r7, #0]
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295
 800ab54:	b01d      	add	sp, #116	@ 0x74
 800ab56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5a:	2340      	movs	r3, #64	@ 0x40
 800ab5c:	616b      	str	r3, [r5, #20]
 800ab5e:	2300      	movs	r3, #0
 800ab60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab62:	2320      	movs	r3, #32
 800ab64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab68:	2330      	movs	r3, #48	@ 0x30
 800ab6a:	f04f 0901 	mov.w	r9, #1
 800ab6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab72:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ad0c <_svfiprintf_r+0x1e4>
 800ab76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab7a:	4623      	mov	r3, r4
 800ab7c:	469a      	mov	sl, r3
 800ab7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab82:	b10a      	cbz	r2, 800ab88 <_svfiprintf_r+0x60>
 800ab84:	2a25      	cmp	r2, #37	@ 0x25
 800ab86:	d1f9      	bne.n	800ab7c <_svfiprintf_r+0x54>
 800ab88:	ebba 0b04 	subs.w	fp, sl, r4
 800ab8c:	d00b      	beq.n	800aba6 <_svfiprintf_r+0x7e>
 800ab8e:	465b      	mov	r3, fp
 800ab90:	4622      	mov	r2, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	4638      	mov	r0, r7
 800ab96:	f7ff ff6c 	bl	800aa72 <__ssputs_r>
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	f000 80a7 	beq.w	800acee <_svfiprintf_r+0x1c6>
 800aba0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aba2:	445a      	add	r2, fp
 800aba4:	9209      	str	r2, [sp, #36]	@ 0x24
 800aba6:	f89a 3000 	ldrb.w	r3, [sl]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f000 809f 	beq.w	800acee <_svfiprintf_r+0x1c6>
 800abb0:	2300      	movs	r3, #0
 800abb2:	f04f 32ff 	mov.w	r2, #4294967295
 800abb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abba:	f10a 0a01 	add.w	sl, sl, #1
 800abbe:	9304      	str	r3, [sp, #16]
 800abc0:	9307      	str	r3, [sp, #28]
 800abc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abc6:	931a      	str	r3, [sp, #104]	@ 0x68
 800abc8:	4654      	mov	r4, sl
 800abca:	2205      	movs	r2, #5
 800abcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd0:	484e      	ldr	r0, [pc, #312]	@ (800ad0c <_svfiprintf_r+0x1e4>)
 800abd2:	f7fe f80e 	bl	8008bf2 <memchr>
 800abd6:	9a04      	ldr	r2, [sp, #16]
 800abd8:	b9d8      	cbnz	r0, 800ac12 <_svfiprintf_r+0xea>
 800abda:	06d0      	lsls	r0, r2, #27
 800abdc:	bf44      	itt	mi
 800abde:	2320      	movmi	r3, #32
 800abe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abe4:	0711      	lsls	r1, r2, #28
 800abe6:	bf44      	itt	mi
 800abe8:	232b      	movmi	r3, #43	@ 0x2b
 800abea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abee:	f89a 3000 	ldrb.w	r3, [sl]
 800abf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800abf4:	d015      	beq.n	800ac22 <_svfiprintf_r+0xfa>
 800abf6:	4654      	mov	r4, sl
 800abf8:	2000      	movs	r0, #0
 800abfa:	f04f 0c0a 	mov.w	ip, #10
 800abfe:	9a07      	ldr	r2, [sp, #28]
 800ac00:	4621      	mov	r1, r4
 800ac02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac06:	3b30      	subs	r3, #48	@ 0x30
 800ac08:	2b09      	cmp	r3, #9
 800ac0a:	d94b      	bls.n	800aca4 <_svfiprintf_r+0x17c>
 800ac0c:	b1b0      	cbz	r0, 800ac3c <_svfiprintf_r+0x114>
 800ac0e:	9207      	str	r2, [sp, #28]
 800ac10:	e014      	b.n	800ac3c <_svfiprintf_r+0x114>
 800ac12:	eba0 0308 	sub.w	r3, r0, r8
 800ac16:	fa09 f303 	lsl.w	r3, r9, r3
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	46a2      	mov	sl, r4
 800ac1e:	9304      	str	r3, [sp, #16]
 800ac20:	e7d2      	b.n	800abc8 <_svfiprintf_r+0xa0>
 800ac22:	9b03      	ldr	r3, [sp, #12]
 800ac24:	1d19      	adds	r1, r3, #4
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	9103      	str	r1, [sp, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bfbb      	ittet	lt
 800ac2e:	425b      	neglt	r3, r3
 800ac30:	f042 0202 	orrlt.w	r2, r2, #2
 800ac34:	9307      	strge	r3, [sp, #28]
 800ac36:	9307      	strlt	r3, [sp, #28]
 800ac38:	bfb8      	it	lt
 800ac3a:	9204      	strlt	r2, [sp, #16]
 800ac3c:	7823      	ldrb	r3, [r4, #0]
 800ac3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac40:	d10a      	bne.n	800ac58 <_svfiprintf_r+0x130>
 800ac42:	7863      	ldrb	r3, [r4, #1]
 800ac44:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac46:	d132      	bne.n	800acae <_svfiprintf_r+0x186>
 800ac48:	9b03      	ldr	r3, [sp, #12]
 800ac4a:	3402      	adds	r4, #2
 800ac4c:	1d1a      	adds	r2, r3, #4
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	9203      	str	r2, [sp, #12]
 800ac52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac56:	9305      	str	r3, [sp, #20]
 800ac58:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ad10 <_svfiprintf_r+0x1e8>
 800ac5c:	2203      	movs	r2, #3
 800ac5e:	4650      	mov	r0, sl
 800ac60:	7821      	ldrb	r1, [r4, #0]
 800ac62:	f7fd ffc6 	bl	8008bf2 <memchr>
 800ac66:	b138      	cbz	r0, 800ac78 <_svfiprintf_r+0x150>
 800ac68:	2240      	movs	r2, #64	@ 0x40
 800ac6a:	9b04      	ldr	r3, [sp, #16]
 800ac6c:	eba0 000a 	sub.w	r0, r0, sl
 800ac70:	4082      	lsls	r2, r0
 800ac72:	4313      	orrs	r3, r2
 800ac74:	3401      	adds	r4, #1
 800ac76:	9304      	str	r3, [sp, #16]
 800ac78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac7c:	2206      	movs	r2, #6
 800ac7e:	4825      	ldr	r0, [pc, #148]	@ (800ad14 <_svfiprintf_r+0x1ec>)
 800ac80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac84:	f7fd ffb5 	bl	8008bf2 <memchr>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d036      	beq.n	800acfa <_svfiprintf_r+0x1d2>
 800ac8c:	4b22      	ldr	r3, [pc, #136]	@ (800ad18 <_svfiprintf_r+0x1f0>)
 800ac8e:	bb1b      	cbnz	r3, 800acd8 <_svfiprintf_r+0x1b0>
 800ac90:	9b03      	ldr	r3, [sp, #12]
 800ac92:	3307      	adds	r3, #7
 800ac94:	f023 0307 	bic.w	r3, r3, #7
 800ac98:	3308      	adds	r3, #8
 800ac9a:	9303      	str	r3, [sp, #12]
 800ac9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac9e:	4433      	add	r3, r6
 800aca0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aca2:	e76a      	b.n	800ab7a <_svfiprintf_r+0x52>
 800aca4:	460c      	mov	r4, r1
 800aca6:	2001      	movs	r0, #1
 800aca8:	fb0c 3202 	mla	r2, ip, r2, r3
 800acac:	e7a8      	b.n	800ac00 <_svfiprintf_r+0xd8>
 800acae:	2300      	movs	r3, #0
 800acb0:	f04f 0c0a 	mov.w	ip, #10
 800acb4:	4619      	mov	r1, r3
 800acb6:	3401      	adds	r4, #1
 800acb8:	9305      	str	r3, [sp, #20]
 800acba:	4620      	mov	r0, r4
 800acbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acc0:	3a30      	subs	r2, #48	@ 0x30
 800acc2:	2a09      	cmp	r2, #9
 800acc4:	d903      	bls.n	800acce <_svfiprintf_r+0x1a6>
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0c6      	beq.n	800ac58 <_svfiprintf_r+0x130>
 800acca:	9105      	str	r1, [sp, #20]
 800accc:	e7c4      	b.n	800ac58 <_svfiprintf_r+0x130>
 800acce:	4604      	mov	r4, r0
 800acd0:	2301      	movs	r3, #1
 800acd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800acd6:	e7f0      	b.n	800acba <_svfiprintf_r+0x192>
 800acd8:	ab03      	add	r3, sp, #12
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	462a      	mov	r2, r5
 800acde:	4638      	mov	r0, r7
 800ace0:	4b0e      	ldr	r3, [pc, #56]	@ (800ad1c <_svfiprintf_r+0x1f4>)
 800ace2:	a904      	add	r1, sp, #16
 800ace4:	f7fc fe88 	bl	80079f8 <_printf_float>
 800ace8:	1c42      	adds	r2, r0, #1
 800acea:	4606      	mov	r6, r0
 800acec:	d1d6      	bne.n	800ac9c <_svfiprintf_r+0x174>
 800acee:	89ab      	ldrh	r3, [r5, #12]
 800acf0:	065b      	lsls	r3, r3, #25
 800acf2:	f53f af2d 	bmi.w	800ab50 <_svfiprintf_r+0x28>
 800acf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acf8:	e72c      	b.n	800ab54 <_svfiprintf_r+0x2c>
 800acfa:	ab03      	add	r3, sp, #12
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	462a      	mov	r2, r5
 800ad00:	4638      	mov	r0, r7
 800ad02:	4b06      	ldr	r3, [pc, #24]	@ (800ad1c <_svfiprintf_r+0x1f4>)
 800ad04:	a904      	add	r1, sp, #16
 800ad06:	f7fd f915 	bl	8007f34 <_printf_i>
 800ad0a:	e7ed      	b.n	800ace8 <_svfiprintf_r+0x1c0>
 800ad0c:	0800b8b9 	.word	0x0800b8b9
 800ad10:	0800b8bf 	.word	0x0800b8bf
 800ad14:	0800b8c3 	.word	0x0800b8c3
 800ad18:	080079f9 	.word	0x080079f9
 800ad1c:	0800aa73 	.word	0x0800aa73

0800ad20 <__sfputc_r>:
 800ad20:	6893      	ldr	r3, [r2, #8]
 800ad22:	b410      	push	{r4}
 800ad24:	3b01      	subs	r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	6093      	str	r3, [r2, #8]
 800ad2a:	da07      	bge.n	800ad3c <__sfputc_r+0x1c>
 800ad2c:	6994      	ldr	r4, [r2, #24]
 800ad2e:	42a3      	cmp	r3, r4
 800ad30:	db01      	blt.n	800ad36 <__sfputc_r+0x16>
 800ad32:	290a      	cmp	r1, #10
 800ad34:	d102      	bne.n	800ad3c <__sfputc_r+0x1c>
 800ad36:	bc10      	pop	{r4}
 800ad38:	f7fd bdf1 	b.w	800891e <__swbuf_r>
 800ad3c:	6813      	ldr	r3, [r2, #0]
 800ad3e:	1c58      	adds	r0, r3, #1
 800ad40:	6010      	str	r0, [r2, #0]
 800ad42:	7019      	strb	r1, [r3, #0]
 800ad44:	4608      	mov	r0, r1
 800ad46:	bc10      	pop	{r4}
 800ad48:	4770      	bx	lr

0800ad4a <__sfputs_r>:
 800ad4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4c:	4606      	mov	r6, r0
 800ad4e:	460f      	mov	r7, r1
 800ad50:	4614      	mov	r4, r2
 800ad52:	18d5      	adds	r5, r2, r3
 800ad54:	42ac      	cmp	r4, r5
 800ad56:	d101      	bne.n	800ad5c <__sfputs_r+0x12>
 800ad58:	2000      	movs	r0, #0
 800ad5a:	e007      	b.n	800ad6c <__sfputs_r+0x22>
 800ad5c:	463a      	mov	r2, r7
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad64:	f7ff ffdc 	bl	800ad20 <__sfputc_r>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d1f3      	bne.n	800ad54 <__sfputs_r+0xa>
 800ad6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad70 <_vfiprintf_r>:
 800ad70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad74:	460d      	mov	r5, r1
 800ad76:	4614      	mov	r4, r2
 800ad78:	4698      	mov	r8, r3
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	b09d      	sub	sp, #116	@ 0x74
 800ad7e:	b118      	cbz	r0, 800ad88 <_vfiprintf_r+0x18>
 800ad80:	6a03      	ldr	r3, [r0, #32]
 800ad82:	b90b      	cbnz	r3, 800ad88 <_vfiprintf_r+0x18>
 800ad84:	f7fd fc8a 	bl	800869c <__sinit>
 800ad88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad8a:	07d9      	lsls	r1, r3, #31
 800ad8c:	d405      	bmi.n	800ad9a <_vfiprintf_r+0x2a>
 800ad8e:	89ab      	ldrh	r3, [r5, #12]
 800ad90:	059a      	lsls	r2, r3, #22
 800ad92:	d402      	bmi.n	800ad9a <_vfiprintf_r+0x2a>
 800ad94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad96:	f7fd ff22 	bl	8008bde <__retarget_lock_acquire_recursive>
 800ad9a:	89ab      	ldrh	r3, [r5, #12]
 800ad9c:	071b      	lsls	r3, r3, #28
 800ad9e:	d501      	bpl.n	800ada4 <_vfiprintf_r+0x34>
 800ada0:	692b      	ldr	r3, [r5, #16]
 800ada2:	b99b      	cbnz	r3, 800adcc <_vfiprintf_r+0x5c>
 800ada4:	4629      	mov	r1, r5
 800ada6:	4630      	mov	r0, r6
 800ada8:	f7fd fdf8 	bl	800899c <__swsetup_r>
 800adac:	b170      	cbz	r0, 800adcc <_vfiprintf_r+0x5c>
 800adae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adb0:	07dc      	lsls	r4, r3, #31
 800adb2:	d504      	bpl.n	800adbe <_vfiprintf_r+0x4e>
 800adb4:	f04f 30ff 	mov.w	r0, #4294967295
 800adb8:	b01d      	add	sp, #116	@ 0x74
 800adba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adbe:	89ab      	ldrh	r3, [r5, #12]
 800adc0:	0598      	lsls	r0, r3, #22
 800adc2:	d4f7      	bmi.n	800adb4 <_vfiprintf_r+0x44>
 800adc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adc6:	f7fd ff0b 	bl	8008be0 <__retarget_lock_release_recursive>
 800adca:	e7f3      	b.n	800adb4 <_vfiprintf_r+0x44>
 800adcc:	2300      	movs	r3, #0
 800adce:	9309      	str	r3, [sp, #36]	@ 0x24
 800add0:	2320      	movs	r3, #32
 800add2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800add6:	2330      	movs	r3, #48	@ 0x30
 800add8:	f04f 0901 	mov.w	r9, #1
 800addc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ade0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800af8c <_vfiprintf_r+0x21c>
 800ade4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ade8:	4623      	mov	r3, r4
 800adea:	469a      	mov	sl, r3
 800adec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adf0:	b10a      	cbz	r2, 800adf6 <_vfiprintf_r+0x86>
 800adf2:	2a25      	cmp	r2, #37	@ 0x25
 800adf4:	d1f9      	bne.n	800adea <_vfiprintf_r+0x7a>
 800adf6:	ebba 0b04 	subs.w	fp, sl, r4
 800adfa:	d00b      	beq.n	800ae14 <_vfiprintf_r+0xa4>
 800adfc:	465b      	mov	r3, fp
 800adfe:	4622      	mov	r2, r4
 800ae00:	4629      	mov	r1, r5
 800ae02:	4630      	mov	r0, r6
 800ae04:	f7ff ffa1 	bl	800ad4a <__sfputs_r>
 800ae08:	3001      	adds	r0, #1
 800ae0a:	f000 80a7 	beq.w	800af5c <_vfiprintf_r+0x1ec>
 800ae0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae10:	445a      	add	r2, fp
 800ae12:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae14:	f89a 3000 	ldrb.w	r3, [sl]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f000 809f 	beq.w	800af5c <_vfiprintf_r+0x1ec>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	f04f 32ff 	mov.w	r2, #4294967295
 800ae24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae28:	f10a 0a01 	add.w	sl, sl, #1
 800ae2c:	9304      	str	r3, [sp, #16]
 800ae2e:	9307      	str	r3, [sp, #28]
 800ae30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae34:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae36:	4654      	mov	r4, sl
 800ae38:	2205      	movs	r2, #5
 800ae3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae3e:	4853      	ldr	r0, [pc, #332]	@ (800af8c <_vfiprintf_r+0x21c>)
 800ae40:	f7fd fed7 	bl	8008bf2 <memchr>
 800ae44:	9a04      	ldr	r2, [sp, #16]
 800ae46:	b9d8      	cbnz	r0, 800ae80 <_vfiprintf_r+0x110>
 800ae48:	06d1      	lsls	r1, r2, #27
 800ae4a:	bf44      	itt	mi
 800ae4c:	2320      	movmi	r3, #32
 800ae4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae52:	0713      	lsls	r3, r2, #28
 800ae54:	bf44      	itt	mi
 800ae56:	232b      	movmi	r3, #43	@ 0x2b
 800ae58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae60:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae62:	d015      	beq.n	800ae90 <_vfiprintf_r+0x120>
 800ae64:	4654      	mov	r4, sl
 800ae66:	2000      	movs	r0, #0
 800ae68:	f04f 0c0a 	mov.w	ip, #10
 800ae6c:	9a07      	ldr	r2, [sp, #28]
 800ae6e:	4621      	mov	r1, r4
 800ae70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae74:	3b30      	subs	r3, #48	@ 0x30
 800ae76:	2b09      	cmp	r3, #9
 800ae78:	d94b      	bls.n	800af12 <_vfiprintf_r+0x1a2>
 800ae7a:	b1b0      	cbz	r0, 800aeaa <_vfiprintf_r+0x13a>
 800ae7c:	9207      	str	r2, [sp, #28]
 800ae7e:	e014      	b.n	800aeaa <_vfiprintf_r+0x13a>
 800ae80:	eba0 0308 	sub.w	r3, r0, r8
 800ae84:	fa09 f303 	lsl.w	r3, r9, r3
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	46a2      	mov	sl, r4
 800ae8c:	9304      	str	r3, [sp, #16]
 800ae8e:	e7d2      	b.n	800ae36 <_vfiprintf_r+0xc6>
 800ae90:	9b03      	ldr	r3, [sp, #12]
 800ae92:	1d19      	adds	r1, r3, #4
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	9103      	str	r1, [sp, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	bfbb      	ittet	lt
 800ae9c:	425b      	neglt	r3, r3
 800ae9e:	f042 0202 	orrlt.w	r2, r2, #2
 800aea2:	9307      	strge	r3, [sp, #28]
 800aea4:	9307      	strlt	r3, [sp, #28]
 800aea6:	bfb8      	it	lt
 800aea8:	9204      	strlt	r2, [sp, #16]
 800aeaa:	7823      	ldrb	r3, [r4, #0]
 800aeac:	2b2e      	cmp	r3, #46	@ 0x2e
 800aeae:	d10a      	bne.n	800aec6 <_vfiprintf_r+0x156>
 800aeb0:	7863      	ldrb	r3, [r4, #1]
 800aeb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeb4:	d132      	bne.n	800af1c <_vfiprintf_r+0x1ac>
 800aeb6:	9b03      	ldr	r3, [sp, #12]
 800aeb8:	3402      	adds	r4, #2
 800aeba:	1d1a      	adds	r2, r3, #4
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	9203      	str	r2, [sp, #12]
 800aec0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aec4:	9305      	str	r3, [sp, #20]
 800aec6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800af90 <_vfiprintf_r+0x220>
 800aeca:	2203      	movs	r2, #3
 800aecc:	4650      	mov	r0, sl
 800aece:	7821      	ldrb	r1, [r4, #0]
 800aed0:	f7fd fe8f 	bl	8008bf2 <memchr>
 800aed4:	b138      	cbz	r0, 800aee6 <_vfiprintf_r+0x176>
 800aed6:	2240      	movs	r2, #64	@ 0x40
 800aed8:	9b04      	ldr	r3, [sp, #16]
 800aeda:	eba0 000a 	sub.w	r0, r0, sl
 800aede:	4082      	lsls	r2, r0
 800aee0:	4313      	orrs	r3, r2
 800aee2:	3401      	adds	r4, #1
 800aee4:	9304      	str	r3, [sp, #16]
 800aee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeea:	2206      	movs	r2, #6
 800aeec:	4829      	ldr	r0, [pc, #164]	@ (800af94 <_vfiprintf_r+0x224>)
 800aeee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aef2:	f7fd fe7e 	bl	8008bf2 <memchr>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d03f      	beq.n	800af7a <_vfiprintf_r+0x20a>
 800aefa:	4b27      	ldr	r3, [pc, #156]	@ (800af98 <_vfiprintf_r+0x228>)
 800aefc:	bb1b      	cbnz	r3, 800af46 <_vfiprintf_r+0x1d6>
 800aefe:	9b03      	ldr	r3, [sp, #12]
 800af00:	3307      	adds	r3, #7
 800af02:	f023 0307 	bic.w	r3, r3, #7
 800af06:	3308      	adds	r3, #8
 800af08:	9303      	str	r3, [sp, #12]
 800af0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af0c:	443b      	add	r3, r7
 800af0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af10:	e76a      	b.n	800ade8 <_vfiprintf_r+0x78>
 800af12:	460c      	mov	r4, r1
 800af14:	2001      	movs	r0, #1
 800af16:	fb0c 3202 	mla	r2, ip, r2, r3
 800af1a:	e7a8      	b.n	800ae6e <_vfiprintf_r+0xfe>
 800af1c:	2300      	movs	r3, #0
 800af1e:	f04f 0c0a 	mov.w	ip, #10
 800af22:	4619      	mov	r1, r3
 800af24:	3401      	adds	r4, #1
 800af26:	9305      	str	r3, [sp, #20]
 800af28:	4620      	mov	r0, r4
 800af2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af2e:	3a30      	subs	r2, #48	@ 0x30
 800af30:	2a09      	cmp	r2, #9
 800af32:	d903      	bls.n	800af3c <_vfiprintf_r+0x1cc>
 800af34:	2b00      	cmp	r3, #0
 800af36:	d0c6      	beq.n	800aec6 <_vfiprintf_r+0x156>
 800af38:	9105      	str	r1, [sp, #20]
 800af3a:	e7c4      	b.n	800aec6 <_vfiprintf_r+0x156>
 800af3c:	4604      	mov	r4, r0
 800af3e:	2301      	movs	r3, #1
 800af40:	fb0c 2101 	mla	r1, ip, r1, r2
 800af44:	e7f0      	b.n	800af28 <_vfiprintf_r+0x1b8>
 800af46:	ab03      	add	r3, sp, #12
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	462a      	mov	r2, r5
 800af4c:	4630      	mov	r0, r6
 800af4e:	4b13      	ldr	r3, [pc, #76]	@ (800af9c <_vfiprintf_r+0x22c>)
 800af50:	a904      	add	r1, sp, #16
 800af52:	f7fc fd51 	bl	80079f8 <_printf_float>
 800af56:	4607      	mov	r7, r0
 800af58:	1c78      	adds	r0, r7, #1
 800af5a:	d1d6      	bne.n	800af0a <_vfiprintf_r+0x19a>
 800af5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af5e:	07d9      	lsls	r1, r3, #31
 800af60:	d405      	bmi.n	800af6e <_vfiprintf_r+0x1fe>
 800af62:	89ab      	ldrh	r3, [r5, #12]
 800af64:	059a      	lsls	r2, r3, #22
 800af66:	d402      	bmi.n	800af6e <_vfiprintf_r+0x1fe>
 800af68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af6a:	f7fd fe39 	bl	8008be0 <__retarget_lock_release_recursive>
 800af6e:	89ab      	ldrh	r3, [r5, #12]
 800af70:	065b      	lsls	r3, r3, #25
 800af72:	f53f af1f 	bmi.w	800adb4 <_vfiprintf_r+0x44>
 800af76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af78:	e71e      	b.n	800adb8 <_vfiprintf_r+0x48>
 800af7a:	ab03      	add	r3, sp, #12
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	462a      	mov	r2, r5
 800af80:	4630      	mov	r0, r6
 800af82:	4b06      	ldr	r3, [pc, #24]	@ (800af9c <_vfiprintf_r+0x22c>)
 800af84:	a904      	add	r1, sp, #16
 800af86:	f7fc ffd5 	bl	8007f34 <_printf_i>
 800af8a:	e7e4      	b.n	800af56 <_vfiprintf_r+0x1e6>
 800af8c:	0800b8b9 	.word	0x0800b8b9
 800af90:	0800b8bf 	.word	0x0800b8bf
 800af94:	0800b8c3 	.word	0x0800b8c3
 800af98:	080079f9 	.word	0x080079f9
 800af9c:	0800ad4b 	.word	0x0800ad4b

0800afa0 <__sflush_r>:
 800afa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	0716      	lsls	r6, r2, #28
 800afa8:	4605      	mov	r5, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	d454      	bmi.n	800b058 <__sflush_r+0xb8>
 800afae:	684b      	ldr	r3, [r1, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	dc02      	bgt.n	800afba <__sflush_r+0x1a>
 800afb4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	dd48      	ble.n	800b04c <__sflush_r+0xac>
 800afba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afbc:	2e00      	cmp	r6, #0
 800afbe:	d045      	beq.n	800b04c <__sflush_r+0xac>
 800afc0:	2300      	movs	r3, #0
 800afc2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800afc6:	682f      	ldr	r7, [r5, #0]
 800afc8:	6a21      	ldr	r1, [r4, #32]
 800afca:	602b      	str	r3, [r5, #0]
 800afcc:	d030      	beq.n	800b030 <__sflush_r+0x90>
 800afce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	0759      	lsls	r1, r3, #29
 800afd4:	d505      	bpl.n	800afe2 <__sflush_r+0x42>
 800afd6:	6863      	ldr	r3, [r4, #4]
 800afd8:	1ad2      	subs	r2, r2, r3
 800afda:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afdc:	b10b      	cbz	r3, 800afe2 <__sflush_r+0x42>
 800afde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afe0:	1ad2      	subs	r2, r2, r3
 800afe2:	2300      	movs	r3, #0
 800afe4:	4628      	mov	r0, r5
 800afe6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afe8:	6a21      	ldr	r1, [r4, #32]
 800afea:	47b0      	blx	r6
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	89a3      	ldrh	r3, [r4, #12]
 800aff0:	d106      	bne.n	800b000 <__sflush_r+0x60>
 800aff2:	6829      	ldr	r1, [r5, #0]
 800aff4:	291d      	cmp	r1, #29
 800aff6:	d82b      	bhi.n	800b050 <__sflush_r+0xb0>
 800aff8:	4a28      	ldr	r2, [pc, #160]	@ (800b09c <__sflush_r+0xfc>)
 800affa:	40ca      	lsrs	r2, r1
 800affc:	07d6      	lsls	r6, r2, #31
 800affe:	d527      	bpl.n	800b050 <__sflush_r+0xb0>
 800b000:	2200      	movs	r2, #0
 800b002:	6062      	str	r2, [r4, #4]
 800b004:	6922      	ldr	r2, [r4, #16]
 800b006:	04d9      	lsls	r1, r3, #19
 800b008:	6022      	str	r2, [r4, #0]
 800b00a:	d504      	bpl.n	800b016 <__sflush_r+0x76>
 800b00c:	1c42      	adds	r2, r0, #1
 800b00e:	d101      	bne.n	800b014 <__sflush_r+0x74>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	b903      	cbnz	r3, 800b016 <__sflush_r+0x76>
 800b014:	6560      	str	r0, [r4, #84]	@ 0x54
 800b016:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b018:	602f      	str	r7, [r5, #0]
 800b01a:	b1b9      	cbz	r1, 800b04c <__sflush_r+0xac>
 800b01c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b020:	4299      	cmp	r1, r3
 800b022:	d002      	beq.n	800b02a <__sflush_r+0x8a>
 800b024:	4628      	mov	r0, r5
 800b026:	f7fe fc67 	bl	80098f8 <_free_r>
 800b02a:	2300      	movs	r3, #0
 800b02c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b02e:	e00d      	b.n	800b04c <__sflush_r+0xac>
 800b030:	2301      	movs	r3, #1
 800b032:	4628      	mov	r0, r5
 800b034:	47b0      	blx	r6
 800b036:	4602      	mov	r2, r0
 800b038:	1c50      	adds	r0, r2, #1
 800b03a:	d1c9      	bne.n	800afd0 <__sflush_r+0x30>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0c6      	beq.n	800afd0 <__sflush_r+0x30>
 800b042:	2b1d      	cmp	r3, #29
 800b044:	d001      	beq.n	800b04a <__sflush_r+0xaa>
 800b046:	2b16      	cmp	r3, #22
 800b048:	d11d      	bne.n	800b086 <__sflush_r+0xe6>
 800b04a:	602f      	str	r7, [r5, #0]
 800b04c:	2000      	movs	r0, #0
 800b04e:	e021      	b.n	800b094 <__sflush_r+0xf4>
 800b050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b054:	b21b      	sxth	r3, r3
 800b056:	e01a      	b.n	800b08e <__sflush_r+0xee>
 800b058:	690f      	ldr	r7, [r1, #16]
 800b05a:	2f00      	cmp	r7, #0
 800b05c:	d0f6      	beq.n	800b04c <__sflush_r+0xac>
 800b05e:	0793      	lsls	r3, r2, #30
 800b060:	bf18      	it	ne
 800b062:	2300      	movne	r3, #0
 800b064:	680e      	ldr	r6, [r1, #0]
 800b066:	bf08      	it	eq
 800b068:	694b      	ldreq	r3, [r1, #20]
 800b06a:	1bf6      	subs	r6, r6, r7
 800b06c:	600f      	str	r7, [r1, #0]
 800b06e:	608b      	str	r3, [r1, #8]
 800b070:	2e00      	cmp	r6, #0
 800b072:	ddeb      	ble.n	800b04c <__sflush_r+0xac>
 800b074:	4633      	mov	r3, r6
 800b076:	463a      	mov	r2, r7
 800b078:	4628      	mov	r0, r5
 800b07a:	6a21      	ldr	r1, [r4, #32]
 800b07c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b080:	47e0      	blx	ip
 800b082:	2800      	cmp	r0, #0
 800b084:	dc07      	bgt.n	800b096 <__sflush_r+0xf6>
 800b086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b08a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b08e:	f04f 30ff 	mov.w	r0, #4294967295
 800b092:	81a3      	strh	r3, [r4, #12]
 800b094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b096:	4407      	add	r7, r0
 800b098:	1a36      	subs	r6, r6, r0
 800b09a:	e7e9      	b.n	800b070 <__sflush_r+0xd0>
 800b09c:	20400001 	.word	0x20400001

0800b0a0 <_fflush_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	690b      	ldr	r3, [r1, #16]
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	b913      	cbnz	r3, 800b0b0 <_fflush_r+0x10>
 800b0aa:	2500      	movs	r5, #0
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	b118      	cbz	r0, 800b0ba <_fflush_r+0x1a>
 800b0b2:	6a03      	ldr	r3, [r0, #32]
 800b0b4:	b90b      	cbnz	r3, 800b0ba <_fflush_r+0x1a>
 800b0b6:	f7fd faf1 	bl	800869c <__sinit>
 800b0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d0f3      	beq.n	800b0aa <_fflush_r+0xa>
 800b0c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0c4:	07d0      	lsls	r0, r2, #31
 800b0c6:	d404      	bmi.n	800b0d2 <_fflush_r+0x32>
 800b0c8:	0599      	lsls	r1, r3, #22
 800b0ca:	d402      	bmi.n	800b0d2 <_fflush_r+0x32>
 800b0cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ce:	f7fd fd86 	bl	8008bde <__retarget_lock_acquire_recursive>
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	f7ff ff63 	bl	800afa0 <__sflush_r>
 800b0da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0dc:	4605      	mov	r5, r0
 800b0de:	07da      	lsls	r2, r3, #31
 800b0e0:	d4e4      	bmi.n	800b0ac <_fflush_r+0xc>
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	059b      	lsls	r3, r3, #22
 800b0e6:	d4e1      	bmi.n	800b0ac <_fflush_r+0xc>
 800b0e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ea:	f7fd fd79 	bl	8008be0 <__retarget_lock_release_recursive>
 800b0ee:	e7dd      	b.n	800b0ac <_fflush_r+0xc>

0800b0f0 <__swhatbuf_r>:
 800b0f0:	b570      	push	{r4, r5, r6, lr}
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f8:	4615      	mov	r5, r2
 800b0fa:	2900      	cmp	r1, #0
 800b0fc:	461e      	mov	r6, r3
 800b0fe:	b096      	sub	sp, #88	@ 0x58
 800b100:	da0c      	bge.n	800b11c <__swhatbuf_r+0x2c>
 800b102:	89a3      	ldrh	r3, [r4, #12]
 800b104:	2100      	movs	r1, #0
 800b106:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b10a:	bf14      	ite	ne
 800b10c:	2340      	movne	r3, #64	@ 0x40
 800b10e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b112:	2000      	movs	r0, #0
 800b114:	6031      	str	r1, [r6, #0]
 800b116:	602b      	str	r3, [r5, #0]
 800b118:	b016      	add	sp, #88	@ 0x58
 800b11a:	bd70      	pop	{r4, r5, r6, pc}
 800b11c:	466a      	mov	r2, sp
 800b11e:	f000 f863 	bl	800b1e8 <_fstat_r>
 800b122:	2800      	cmp	r0, #0
 800b124:	dbed      	blt.n	800b102 <__swhatbuf_r+0x12>
 800b126:	9901      	ldr	r1, [sp, #4]
 800b128:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b12c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b130:	4259      	negs	r1, r3
 800b132:	4159      	adcs	r1, r3
 800b134:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b138:	e7eb      	b.n	800b112 <__swhatbuf_r+0x22>

0800b13a <__smakebuf_r>:
 800b13a:	898b      	ldrh	r3, [r1, #12]
 800b13c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b13e:	079d      	lsls	r5, r3, #30
 800b140:	4606      	mov	r6, r0
 800b142:	460c      	mov	r4, r1
 800b144:	d507      	bpl.n	800b156 <__smakebuf_r+0x1c>
 800b146:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b14a:	6023      	str	r3, [r4, #0]
 800b14c:	6123      	str	r3, [r4, #16]
 800b14e:	2301      	movs	r3, #1
 800b150:	6163      	str	r3, [r4, #20]
 800b152:	b003      	add	sp, #12
 800b154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b156:	466a      	mov	r2, sp
 800b158:	ab01      	add	r3, sp, #4
 800b15a:	f7ff ffc9 	bl	800b0f0 <__swhatbuf_r>
 800b15e:	9f00      	ldr	r7, [sp, #0]
 800b160:	4605      	mov	r5, r0
 800b162:	4639      	mov	r1, r7
 800b164:	4630      	mov	r0, r6
 800b166:	f7fb fd0f 	bl	8006b88 <_malloc_r>
 800b16a:	b948      	cbnz	r0, 800b180 <__smakebuf_r+0x46>
 800b16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b170:	059a      	lsls	r2, r3, #22
 800b172:	d4ee      	bmi.n	800b152 <__smakebuf_r+0x18>
 800b174:	f023 0303 	bic.w	r3, r3, #3
 800b178:	f043 0302 	orr.w	r3, r3, #2
 800b17c:	81a3      	strh	r3, [r4, #12]
 800b17e:	e7e2      	b.n	800b146 <__smakebuf_r+0xc>
 800b180:	89a3      	ldrh	r3, [r4, #12]
 800b182:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b18a:	81a3      	strh	r3, [r4, #12]
 800b18c:	9b01      	ldr	r3, [sp, #4]
 800b18e:	6020      	str	r0, [r4, #0]
 800b190:	b15b      	cbz	r3, 800b1aa <__smakebuf_r+0x70>
 800b192:	4630      	mov	r0, r6
 800b194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b198:	f000 f838 	bl	800b20c <_isatty_r>
 800b19c:	b128      	cbz	r0, 800b1aa <__smakebuf_r+0x70>
 800b19e:	89a3      	ldrh	r3, [r4, #12]
 800b1a0:	f023 0303 	bic.w	r3, r3, #3
 800b1a4:	f043 0301 	orr.w	r3, r3, #1
 800b1a8:	81a3      	strh	r3, [r4, #12]
 800b1aa:	89a3      	ldrh	r3, [r4, #12]
 800b1ac:	431d      	orrs	r5, r3
 800b1ae:	81a5      	strh	r5, [r4, #12]
 800b1b0:	e7cf      	b.n	800b152 <__smakebuf_r+0x18>

0800b1b2 <memmove>:
 800b1b2:	4288      	cmp	r0, r1
 800b1b4:	b510      	push	{r4, lr}
 800b1b6:	eb01 0402 	add.w	r4, r1, r2
 800b1ba:	d902      	bls.n	800b1c2 <memmove+0x10>
 800b1bc:	4284      	cmp	r4, r0
 800b1be:	4623      	mov	r3, r4
 800b1c0:	d807      	bhi.n	800b1d2 <memmove+0x20>
 800b1c2:	1e43      	subs	r3, r0, #1
 800b1c4:	42a1      	cmp	r1, r4
 800b1c6:	d008      	beq.n	800b1da <memmove+0x28>
 800b1c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1d0:	e7f8      	b.n	800b1c4 <memmove+0x12>
 800b1d2:	4601      	mov	r1, r0
 800b1d4:	4402      	add	r2, r0
 800b1d6:	428a      	cmp	r2, r1
 800b1d8:	d100      	bne.n	800b1dc <memmove+0x2a>
 800b1da:	bd10      	pop	{r4, pc}
 800b1dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1e4:	e7f7      	b.n	800b1d6 <memmove+0x24>
	...

0800b1e8 <_fstat_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	4d06      	ldr	r5, [pc, #24]	@ (800b208 <_fstat_r+0x20>)
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	602b      	str	r3, [r5, #0]
 800b1f6:	f7f6 f86a 	bl	80012ce <_fstat>
 800b1fa:	1c43      	adds	r3, r0, #1
 800b1fc:	d102      	bne.n	800b204 <_fstat_r+0x1c>
 800b1fe:	682b      	ldr	r3, [r5, #0]
 800b200:	b103      	cbz	r3, 800b204 <_fstat_r+0x1c>
 800b202:	6023      	str	r3, [r4, #0]
 800b204:	bd38      	pop	{r3, r4, r5, pc}
 800b206:	bf00      	nop
 800b208:	20000838 	.word	0x20000838

0800b20c <_isatty_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	2300      	movs	r3, #0
 800b210:	4d05      	ldr	r5, [pc, #20]	@ (800b228 <_isatty_r+0x1c>)
 800b212:	4604      	mov	r4, r0
 800b214:	4608      	mov	r0, r1
 800b216:	602b      	str	r3, [r5, #0]
 800b218:	f7f6 f868 	bl	80012ec <_isatty>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d102      	bne.n	800b226 <_isatty_r+0x1a>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	b103      	cbz	r3, 800b226 <_isatty_r+0x1a>
 800b224:	6023      	str	r3, [r4, #0]
 800b226:	bd38      	pop	{r3, r4, r5, pc}
 800b228:	20000838 	.word	0x20000838

0800b22c <__assert_func>:
 800b22c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b22e:	4614      	mov	r4, r2
 800b230:	461a      	mov	r2, r3
 800b232:	4b09      	ldr	r3, [pc, #36]	@ (800b258 <__assert_func+0x2c>)
 800b234:	4605      	mov	r5, r0
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68d8      	ldr	r0, [r3, #12]
 800b23a:	b14c      	cbz	r4, 800b250 <__assert_func+0x24>
 800b23c:	4b07      	ldr	r3, [pc, #28]	@ (800b25c <__assert_func+0x30>)
 800b23e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b242:	9100      	str	r1, [sp, #0]
 800b244:	462b      	mov	r3, r5
 800b246:	4906      	ldr	r1, [pc, #24]	@ (800b260 <__assert_func+0x34>)
 800b248:	f000 f850 	bl	800b2ec <fiprintf>
 800b24c:	f000 f860 	bl	800b310 <abort>
 800b250:	4b04      	ldr	r3, [pc, #16]	@ (800b264 <__assert_func+0x38>)
 800b252:	461c      	mov	r4, r3
 800b254:	e7f3      	b.n	800b23e <__assert_func+0x12>
 800b256:	bf00      	nop
 800b258:	200001bc 	.word	0x200001bc
 800b25c:	0800b8ca 	.word	0x0800b8ca
 800b260:	0800b8d7 	.word	0x0800b8d7
 800b264:	0800b905 	.word	0x0800b905

0800b268 <_calloc_r>:
 800b268:	b570      	push	{r4, r5, r6, lr}
 800b26a:	fba1 5402 	umull	r5, r4, r1, r2
 800b26e:	b934      	cbnz	r4, 800b27e <_calloc_r+0x16>
 800b270:	4629      	mov	r1, r5
 800b272:	f7fb fc89 	bl	8006b88 <_malloc_r>
 800b276:	4606      	mov	r6, r0
 800b278:	b928      	cbnz	r0, 800b286 <_calloc_r+0x1e>
 800b27a:	4630      	mov	r0, r6
 800b27c:	bd70      	pop	{r4, r5, r6, pc}
 800b27e:	220c      	movs	r2, #12
 800b280:	2600      	movs	r6, #0
 800b282:	6002      	str	r2, [r0, #0]
 800b284:	e7f9      	b.n	800b27a <_calloc_r+0x12>
 800b286:	462a      	mov	r2, r5
 800b288:	4621      	mov	r1, r4
 800b28a:	f7fd fbdd 	bl	8008a48 <memset>
 800b28e:	e7f4      	b.n	800b27a <_calloc_r+0x12>

0800b290 <_realloc_r>:
 800b290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b294:	4607      	mov	r7, r0
 800b296:	4614      	mov	r4, r2
 800b298:	460d      	mov	r5, r1
 800b29a:	b921      	cbnz	r1, 800b2a6 <_realloc_r+0x16>
 800b29c:	4611      	mov	r1, r2
 800b29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a2:	f7fb bc71 	b.w	8006b88 <_malloc_r>
 800b2a6:	b92a      	cbnz	r2, 800b2b4 <_realloc_r+0x24>
 800b2a8:	f7fe fb26 	bl	80098f8 <_free_r>
 800b2ac:	4625      	mov	r5, r4
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b4:	f000 f833 	bl	800b31e <_malloc_usable_size_r>
 800b2b8:	4284      	cmp	r4, r0
 800b2ba:	4606      	mov	r6, r0
 800b2bc:	d802      	bhi.n	800b2c4 <_realloc_r+0x34>
 800b2be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2c2:	d8f4      	bhi.n	800b2ae <_realloc_r+0x1e>
 800b2c4:	4621      	mov	r1, r4
 800b2c6:	4638      	mov	r0, r7
 800b2c8:	f7fb fc5e 	bl	8006b88 <_malloc_r>
 800b2cc:	4680      	mov	r8, r0
 800b2ce:	b908      	cbnz	r0, 800b2d4 <_realloc_r+0x44>
 800b2d0:	4645      	mov	r5, r8
 800b2d2:	e7ec      	b.n	800b2ae <_realloc_r+0x1e>
 800b2d4:	42b4      	cmp	r4, r6
 800b2d6:	4622      	mov	r2, r4
 800b2d8:	4629      	mov	r1, r5
 800b2da:	bf28      	it	cs
 800b2dc:	4632      	movcs	r2, r6
 800b2de:	f7fd fc96 	bl	8008c0e <memcpy>
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	f7fe fb07 	bl	80098f8 <_free_r>
 800b2ea:	e7f1      	b.n	800b2d0 <_realloc_r+0x40>

0800b2ec <fiprintf>:
 800b2ec:	b40e      	push	{r1, r2, r3}
 800b2ee:	b503      	push	{r0, r1, lr}
 800b2f0:	4601      	mov	r1, r0
 800b2f2:	ab03      	add	r3, sp, #12
 800b2f4:	4805      	ldr	r0, [pc, #20]	@ (800b30c <fiprintf+0x20>)
 800b2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fa:	6800      	ldr	r0, [r0, #0]
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	f7ff fd37 	bl	800ad70 <_vfiprintf_r>
 800b302:	b002      	add	sp, #8
 800b304:	f85d eb04 	ldr.w	lr, [sp], #4
 800b308:	b003      	add	sp, #12
 800b30a:	4770      	bx	lr
 800b30c:	200001bc 	.word	0x200001bc

0800b310 <abort>:
 800b310:	2006      	movs	r0, #6
 800b312:	b508      	push	{r3, lr}
 800b314:	f000 f834 	bl	800b380 <raise>
 800b318:	2001      	movs	r0, #1
 800b31a:	f7f5 ffa5 	bl	8001268 <_exit>

0800b31e <_malloc_usable_size_r>:
 800b31e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b322:	1f18      	subs	r0, r3, #4
 800b324:	2b00      	cmp	r3, #0
 800b326:	bfbc      	itt	lt
 800b328:	580b      	ldrlt	r3, [r1, r0]
 800b32a:	18c0      	addlt	r0, r0, r3
 800b32c:	4770      	bx	lr

0800b32e <_raise_r>:
 800b32e:	291f      	cmp	r1, #31
 800b330:	b538      	push	{r3, r4, r5, lr}
 800b332:	4605      	mov	r5, r0
 800b334:	460c      	mov	r4, r1
 800b336:	d904      	bls.n	800b342 <_raise_r+0x14>
 800b338:	2316      	movs	r3, #22
 800b33a:	6003      	str	r3, [r0, #0]
 800b33c:	f04f 30ff 	mov.w	r0, #4294967295
 800b340:	bd38      	pop	{r3, r4, r5, pc}
 800b342:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b344:	b112      	cbz	r2, 800b34c <_raise_r+0x1e>
 800b346:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b34a:	b94b      	cbnz	r3, 800b360 <_raise_r+0x32>
 800b34c:	4628      	mov	r0, r5
 800b34e:	f000 f831 	bl	800b3b4 <_getpid_r>
 800b352:	4622      	mov	r2, r4
 800b354:	4601      	mov	r1, r0
 800b356:	4628      	mov	r0, r5
 800b358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b35c:	f000 b818 	b.w	800b390 <_kill_r>
 800b360:	2b01      	cmp	r3, #1
 800b362:	d00a      	beq.n	800b37a <_raise_r+0x4c>
 800b364:	1c59      	adds	r1, r3, #1
 800b366:	d103      	bne.n	800b370 <_raise_r+0x42>
 800b368:	2316      	movs	r3, #22
 800b36a:	6003      	str	r3, [r0, #0]
 800b36c:	2001      	movs	r0, #1
 800b36e:	e7e7      	b.n	800b340 <_raise_r+0x12>
 800b370:	2100      	movs	r1, #0
 800b372:	4620      	mov	r0, r4
 800b374:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b378:	4798      	blx	r3
 800b37a:	2000      	movs	r0, #0
 800b37c:	e7e0      	b.n	800b340 <_raise_r+0x12>
	...

0800b380 <raise>:
 800b380:	4b02      	ldr	r3, [pc, #8]	@ (800b38c <raise+0xc>)
 800b382:	4601      	mov	r1, r0
 800b384:	6818      	ldr	r0, [r3, #0]
 800b386:	f7ff bfd2 	b.w	800b32e <_raise_r>
 800b38a:	bf00      	nop
 800b38c:	200001bc 	.word	0x200001bc

0800b390 <_kill_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	2300      	movs	r3, #0
 800b394:	4d06      	ldr	r5, [pc, #24]	@ (800b3b0 <_kill_r+0x20>)
 800b396:	4604      	mov	r4, r0
 800b398:	4608      	mov	r0, r1
 800b39a:	4611      	mov	r1, r2
 800b39c:	602b      	str	r3, [r5, #0]
 800b39e:	f7f5 ff53 	bl	8001248 <_kill>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	d102      	bne.n	800b3ac <_kill_r+0x1c>
 800b3a6:	682b      	ldr	r3, [r5, #0]
 800b3a8:	b103      	cbz	r3, 800b3ac <_kill_r+0x1c>
 800b3aa:	6023      	str	r3, [r4, #0]
 800b3ac:	bd38      	pop	{r3, r4, r5, pc}
 800b3ae:	bf00      	nop
 800b3b0:	20000838 	.word	0x20000838

0800b3b4 <_getpid_r>:
 800b3b4:	f7f5 bf41 	b.w	800123a <_getpid>

0800b3b8 <_init>:
 800b3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ba:	bf00      	nop
 800b3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3be:	bc08      	pop	{r3}
 800b3c0:	469e      	mov	lr, r3
 800b3c2:	4770      	bx	lr

0800b3c4 <_fini>:
 800b3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c6:	bf00      	nop
 800b3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ca:	bc08      	pop	{r3}
 800b3cc:	469e      	mov	lr, r3
 800b3ce:	4770      	bx	lr
