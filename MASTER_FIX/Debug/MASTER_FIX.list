
MASTER_FIX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800385c  0800385c  0000485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003894  08003894  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003894  08003894  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003894  08003894  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003894  08003894  00004894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003898  08003898  00004898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800389c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  080038a8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080038a8  00005118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2c3  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a67  00000000  00000000  0000f2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  00010d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005af  00000000  00000000  000114d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b013  00000000  00000000  00011a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a89a  00000000  00000000  0002ca9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a067c  00000000  00000000  00037334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d79b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d00  00000000  00000000  000d79f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000d96f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003844 	.word	0x08003844

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003844 	.word	0x08003844

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9b8 	bl	8000540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f810 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f894 	bl	8000300 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f862 	bl	80002a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 80001dc:	2264      	movs	r2, #100	@ 0x64
 80001de:	4903      	ldr	r1, [pc, #12]	@ (80001ec <main+0x24>)
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <main+0x28>)
 80001e2:	f003 fab3 	bl	800374c <HAL_UARTEx_ReceiveToIdle_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e6:	bf00      	nop
 80001e8:	e7fd      	b.n	80001e6 <main+0x1e>
 80001ea:	bf00      	nop
 80001ec:	20000028 	.word	0x20000028
 80001f0:	2000008c 	.word	0x2000008c

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b09c      	sub	sp, #112	@ 0x70
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80001fe:	2228      	movs	r2, #40	@ 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f003 faf2 	bl	80037ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
 8000216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000218:	463b      	mov	r3, r7
 800021a:	2234      	movs	r2, #52	@ 0x34
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f003 fae4 	bl	80037ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000224:	2302      	movs	r3, #2
 8000226:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022c:	2310      	movs	r3, #16
 800022e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000234:	2300      	movs	r3, #0
 8000236:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000238:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800023c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fcea 	bl	8000c1c <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800024e:	f000 f88d 	bl	800036c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800025a:	2380      	movs	r3, #128	@ 0x80
 800025c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000266:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800026a:	2101      	movs	r1, #1
 800026c:	4618      	mov	r0, r3
 800026e:	f001 fce3 	bl	8001c38 <HAL_RCC_ClockConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000278:	f000 f878 	bl	800036c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800027c:	2302      	movs	r3, #2
 800027e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000284:	463b      	mov	r3, r7
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fee8 	bl	800205c <HAL_RCCEx_PeriphCLKConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000292:	f000 f86b 	bl	800036c <Error_Handler>
  }
}
 8000296:	bf00      	nop
 8000298:	3770      	adds	r7, #112	@ 0x70
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002a4:	4b14      	ldr	r3, [pc, #80]	@ (80002f8 <MX_USART2_UART_Init+0x58>)
 80002a6:	4a15      	ldr	r2, [pc, #84]	@ (80002fc <MX_USART2_UART_Init+0x5c>)
 80002a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002aa:	4b13      	ldr	r3, [pc, #76]	@ (80002f8 <MX_USART2_UART_Init+0x58>)
 80002ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002b2:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <MX_USART2_UART_Init+0x58>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	@ (80002f8 <MX_USART2_UART_Init+0x58>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <MX_USART2_UART_Init+0x58>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	@ (80002f8 <MX_USART2_UART_Init+0x58>)
 80002c6:	220c      	movs	r2, #12
 80002c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ca:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <MX_USART2_UART_Init+0x58>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d0:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <MX_USART2_UART_Init+0x58>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002d6:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <MX_USART2_UART_Init+0x58>)
 80002d8:	2200      	movs	r2, #0
 80002da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002dc:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <MX_USART2_UART_Init+0x58>)
 80002de:	2200      	movs	r2, #0
 80002e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002e2:	4805      	ldr	r0, [pc, #20]	@ (80002f8 <MX_USART2_UART_Init+0x58>)
 80002e4:	f002 f84a 	bl	800237c <HAL_UART_Init>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80002ee:	f000 f83d 	bl	800036c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	2000008c 	.word	0x2000008c
 80002fc:	40004400 	.word	0x40004400

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000306:	4b09      	ldr	r3, [pc, #36]	@ (800032c <MX_GPIO_Init+0x2c>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a08      	ldr	r2, [pc, #32]	@ (800032c <MX_GPIO_Init+0x2c>)
 800030c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b06      	ldr	r3, [pc, #24]	@ (800032c <MX_GPIO_Init+0x2c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000

08000330 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)  {
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <HAL_UARTEx_RxEventCallback+0x34>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	429a      	cmp	r2, r3
 8000346:	d109      	bne.n	800035c <HAL_UARTEx_RxEventCallback+0x2c>
		memset(dataRX,0,sizeof(dataRX));
 8000348:	2264      	movs	r2, #100	@ 0x64
 800034a:	2100      	movs	r1, #0
 800034c:	4806      	ldr	r0, [pc, #24]	@ (8000368 <HAL_UARTEx_RxEventCallback+0x38>)
 800034e:	f003 fa4d 	bl	80037ec <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8000352:	2264      	movs	r2, #100	@ 0x64
 8000354:	4904      	ldr	r1, [pc, #16]	@ (8000368 <HAL_UARTEx_RxEventCallback+0x38>)
 8000356:	4803      	ldr	r0, [pc, #12]	@ (8000364 <HAL_UARTEx_RxEventCallback+0x34>)
 8000358:	f003 f9f8 	bl	800374c <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	2000008c 	.word	0x2000008c
 8000368:	20000028 	.word	0x20000028

0800036c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000370:	b672      	cpsid	i
}
 8000372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <Error_Handler+0x8>

08000378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800037e:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <HAL_MspInit+0x44>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a0e      	ldr	r2, [pc, #56]	@ (80003bc <HAL_MspInit+0x44>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <HAL_MspInit+0x44>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000396:	4b09      	ldr	r3, [pc, #36]	@ (80003bc <HAL_MspInit+0x44>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	4a08      	ldr	r2, [pc, #32]	@ (80003bc <HAL_MspInit+0x44>)
 800039c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003a0:	61d3      	str	r3, [r2, #28]
 80003a2:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <HAL_MspInit+0x44>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000

080003c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	@ 0x28
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c8:	f107 0314 	add.w	r3, r7, #20
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a1b      	ldr	r2, [pc, #108]	@ (800044c <HAL_UART_MspInit+0x8c>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d130      	bne.n	8000444 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000450 <HAL_UART_MspInit+0x90>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	4a1a      	ldr	r2, [pc, #104]	@ (8000450 <HAL_UART_MspInit+0x90>)
 80003e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003ec:	61d3      	str	r3, [r2, #28]
 80003ee:	4b18      	ldr	r3, [pc, #96]	@ (8000450 <HAL_UART_MspInit+0x90>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003f6:	613b      	str	r3, [r7, #16]
 80003f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fa:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <HAL_UART_MspInit+0x90>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a14      	ldr	r2, [pc, #80]	@ (8000450 <HAL_UART_MspInit+0x90>)
 8000400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000404:	6153      	str	r3, [r2, #20]
 8000406:	4b12      	ldr	r3, [pc, #72]	@ (8000450 <HAL_UART_MspInit+0x90>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000412:	230c      	movs	r3, #12
 8000414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000416:	2302      	movs	r3, #2
 8000418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800041e:	2303      	movs	r3, #3
 8000420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000422:	2307      	movs	r3, #7
 8000424:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	4619      	mov	r1, r3
 800042c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000430:	f000 fa7a 	bl	8000928 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2100      	movs	r1, #0
 8000438:	2026      	movs	r0, #38	@ 0x26
 800043a:	f000 f9c2 	bl	80007c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800043e:	2026      	movs	r0, #38	@ 0x26
 8000440:	f000 f9db 	bl	80007fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000444:	bf00      	nop
 8000446:	3728      	adds	r7, #40	@ 0x28
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40004400 	.word	0x40004400
 8000450:	40021000 	.word	0x40021000

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000458:	bf00      	nop
 800045a:	e7fd      	b.n	8000458 <NMI_Handler+0x4>

0800045c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <HardFault_Handler+0x4>

08000464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <MemManage_Handler+0x4>

0800046c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <BusFault_Handler+0x4>

08000474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <UsageFault_Handler+0x4>

0800047c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004aa:	f000 f88f 	bl	80005cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80004b8:	4802      	ldr	r0, [pc, #8]	@ (80004c4 <USART2_IRQHandler+0x10>)
 80004ba:	f001 ffad 	bl	8002418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2000008c 	.word	0x2000008c

080004c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <SystemInit+0x20>)
 80004ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004d2:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <SystemInit+0x20>)
 80004d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000524 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80004f0:	f7ff ffea 	bl	80004c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f4:	480c      	ldr	r0, [pc, #48]	@ (8000528 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f6:	490d      	ldr	r1, [pc, #52]	@ (800052c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000530 <LoopForever+0xe>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a0a      	ldr	r2, [pc, #40]	@ (8000534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800050c:	4c0a      	ldr	r4, [pc, #40]	@ (8000538 <LoopForever+0x16>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800051a:	f003 f96f 	bl	80037fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800051e:	f7ff fe53 	bl	80001c8 <main>

08000522 <LoopForever>:

LoopForever:
    b LoopForever
 8000522:	e7fe      	b.n	8000522 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000524:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000530:	0800389c 	.word	0x0800389c
  ldr r2, =_sbss
 8000534:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000538:	20000118 	.word	0x20000118

0800053c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC1_2_IRQHandler>
	...

08000540 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <HAL_Init+0x28>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <HAL_Init+0x28>)
 800054a:	f043 0310 	orr.w	r3, r3, #16
 800054e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f92b 	bl	80007ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000556:	200f      	movs	r0, #15
 8000558:	f000 f808 	bl	800056c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800055c:	f7ff ff0c 	bl	8000378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40022000 	.word	0x40022000

0800056c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <HAL_InitTick+0x54>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <HAL_InitTick+0x58>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000582:	fbb3 f3f1 	udiv	r3, r3, r1
 8000586:	fbb2 f3f3 	udiv	r3, r2, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f943 	bl	8000816 <HAL_SYSTICK_Config>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	e00e      	b.n	80005b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b0f      	cmp	r3, #15
 800059e:	d80a      	bhi.n	80005b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a0:	2200      	movs	r2, #0
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295
 80005a8:	f000 f90b 	bl	80007c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ac:	4a06      	ldr	r2, [pc, #24]	@ (80005c8 <HAL_InitTick+0x5c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e000      	b.n	80005b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000008 	.word	0x20000008
 80005c8:	20000004 	.word	0x20000004

080005cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000008 	.word	0x20000008
 80005f0:	20000114 	.word	0x20000114

080005f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80005f8:	4b03      	ldr	r3, [pc, #12]	@ (8000608 <HAL_GetTick+0x14>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000114 	.word	0x20000114

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	@ (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4907      	ldr	r1, [pc, #28]	@ (80006a8 <__NVIC_EnableIRQ+0x38>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e100 	.word	0xe000e100

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db0a      	blt.n	80006d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	490c      	ldr	r1, [pc, #48]	@ (80006f8 <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d4:	e00a      	b.n	80006ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4908      	ldr	r1, [pc, #32]	@ (80006fc <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	0112      	lsls	r2, r2, #4
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	440b      	add	r3, r1
 80006ea:	761a      	strb	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b089      	sub	sp, #36	@ 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f1c3 0307 	rsb	r3, r3, #7
 800071a:	2b04      	cmp	r3, #4
 800071c:	bf28      	it	cs
 800071e:	2304      	movcs	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3304      	adds	r3, #4
 8000726:	2b06      	cmp	r3, #6
 8000728:	d902      	bls.n	8000730 <NVIC_EncodePriority+0x30>
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3b03      	subs	r3, #3
 800072e:	e000      	b.n	8000732 <NVIC_EncodePriority+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	f04f 32ff 	mov.w	r2, #4294967295
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43da      	mvns	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	401a      	ands	r2, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	f04f 31ff 	mov.w	r1, #4294967295
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43d9      	mvns	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	@ 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000778:	d301      	bcc.n	800077e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077a:	2301      	movs	r3, #1
 800077c:	e00f      	b.n	800079e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077e:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <SysTick_Config+0x40>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000786:	210f      	movs	r1, #15
 8000788:	f04f 30ff 	mov.w	r0, #4294967295
 800078c:	f7ff ff8e 	bl	80006ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <SysTick_Config+0x40>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000796:	4b04      	ldr	r3, [pc, #16]	@ (80007a8 <SysTick_Config+0x40>)
 8000798:	2207      	movs	r2, #7
 800079a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	e000e010 	.word	0xe000e010

080007ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff29 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d4:	f7ff ff3e 	bl	8000654 <__NVIC_GetPriorityGrouping>
 80007d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	6978      	ldr	r0, [r7, #20]
 80007e0:	f7ff ff8e 	bl	8000700 <NVIC_EncodePriority>
 80007e4:	4602      	mov	r2, r0
 80007e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff5d 	bl	80006ac <__NVIC_SetPriority>
}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff31 	bl	8000670 <__NVIC_EnableIRQ>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffa2 	bl	8000768 <SysTick_Config>
 8000824:	4603      	mov	r3, r0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d101      	bne.n	8000840 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	e02e      	b.n	800089e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000846:	2b02      	cmp	r3, #2
 8000848:	d008      	beq.n	800085c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2204      	movs	r2, #4
 800084e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2200      	movs	r2, #0
 8000854:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e020      	b.n	800089e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f022 020e 	bic.w	r2, r2, #14
 800086a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f022 0201 	bic.w	r2, r2, #1
 800087a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000884:	2101      	movs	r1, #1
 8000886:	fa01 f202 	lsl.w	r2, r1, r2
 800088a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2201      	movs	r2, #1
 8000890:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b084      	sub	sp, #16
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d005      	beq.n	80008cc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2204      	movs	r2, #4
 80008c4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	73fb      	strb	r3, [r7, #15]
 80008ca:	e027      	b.n	800091c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f022 020e 	bic.w	r2, r2, #14
 80008da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f022 0201 	bic.w	r2, r2, #1
 80008ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008f4:	2101      	movs	r1, #1
 80008f6:	fa01 f202 	lsl.w	r2, r1, r2
 80008fa:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2201      	movs	r2, #1
 8000900:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000910:	2b00      	cmp	r3, #0
 8000912:	d003      	beq.n	800091c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	4798      	blx	r3
    }
  }
  return status;
 800091c:	7bfb      	ldrb	r3, [r7, #15]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000936:	e154      	b.n	8000be2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	2101      	movs	r1, #1
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	fa01 f303 	lsl.w	r3, r1, r3
 8000944:	4013      	ands	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2b00      	cmp	r3, #0
 800094c:	f000 8146 	beq.w	8000bdc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f003 0303 	and.w	r3, r3, #3
 8000958:	2b01      	cmp	r3, #1
 800095a:	d005      	beq.n	8000968 <HAL_GPIO_Init+0x40>
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f003 0303 	and.w	r3, r3, #3
 8000964:	2b02      	cmp	r3, #2
 8000966:	d130      	bne.n	80009ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	2203      	movs	r2, #3
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4313      	orrs	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800099e:	2201      	movs	r2, #1
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	091b      	lsrs	r3, r3, #4
 80009b4:	f003 0201 	and.w	r2, r3, #1
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d017      	beq.n	8000a06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	2203      	movs	r2, #3
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 0303 	and.w	r3, r3, #3
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d123      	bne.n	8000a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	08da      	lsrs	r2, r3, #3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3208      	adds	r2, #8
 8000a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	220f      	movs	r2, #15
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	691a      	ldr	r2, [r3, #16]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	08da      	lsrs	r2, r3, #3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3208      	adds	r2, #8
 8000a54:	6939      	ldr	r1, [r7, #16]
 8000a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	2203      	movs	r2, #3
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f003 0203 	and.w	r2, r3, #3
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 80a0 	beq.w	8000bdc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9c:	4b58      	ldr	r3, [pc, #352]	@ (8000c00 <HAL_GPIO_Init+0x2d8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a57      	ldr	r2, [pc, #348]	@ (8000c00 <HAL_GPIO_Init+0x2d8>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b55      	ldr	r3, [pc, #340]	@ (8000c00 <HAL_GPIO_Init+0x2d8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ab4:	4a53      	ldr	r2, [pc, #332]	@ (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	220f      	movs	r2, #15
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ade:	d019      	beq.n	8000b14 <HAL_GPIO_Init+0x1ec>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a49      	ldr	r2, [pc, #292]	@ (8000c08 <HAL_GPIO_Init+0x2e0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d013      	beq.n	8000b10 <HAL_GPIO_Init+0x1e8>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a48      	ldr	r2, [pc, #288]	@ (8000c0c <HAL_GPIO_Init+0x2e4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d00d      	beq.n	8000b0c <HAL_GPIO_Init+0x1e4>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a47      	ldr	r2, [pc, #284]	@ (8000c10 <HAL_GPIO_Init+0x2e8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d007      	beq.n	8000b08 <HAL_GPIO_Init+0x1e0>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a46      	ldr	r2, [pc, #280]	@ (8000c14 <HAL_GPIO_Init+0x2ec>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d101      	bne.n	8000b04 <HAL_GPIO_Init+0x1dc>
 8000b00:	2304      	movs	r3, #4
 8000b02:	e008      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b04:	2305      	movs	r3, #5
 8000b06:	e006      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e004      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b14:	2300      	movs	r3, #0
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	f002 0203 	and.w	r2, r2, #3
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	4093      	lsls	r3, r2
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b26:	4937      	ldr	r1, [pc, #220]	@ (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b34:	4b38      	ldr	r3, [pc, #224]	@ (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b58:	4a2f      	ldr	r2, [pc, #188]	@ (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b82:	4a25      	ldr	r2, [pc, #148]	@ (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b88:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bac:	4a1a      	ldr	r2, [pc, #104]	@ (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bd6:	4a10      	ldr	r2, [pc, #64]	@ (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f47f aea3 	bne.w	8000938 <HAL_GPIO_Init+0x10>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	371c      	adds	r7, #28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000
 8000c08:	48000400 	.word	0x48000400
 8000c0c:	48000800 	.word	0x48000800
 8000c10:	48000c00 	.word	0x48000c00
 8000c14:	48001000 	.word	0x48001000
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c2c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	f000 bff4 	b.w	8001c2a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 816d 	beq.w	8000f32 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c58:	4bb4      	ldr	r3, [pc, #720]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 030c 	and.w	r3, r3, #12
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	d00c      	beq.n	8000c7e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c64:	4bb1      	ldr	r3, [pc, #708]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 030c 	and.w	r3, r3, #12
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d157      	bne.n	8000d20 <HAL_RCC_OscConfig+0x104>
 8000c70:	4bae      	ldr	r3, [pc, #696]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c7c:	d150      	bne.n	8000d20 <HAL_RCC_OscConfig+0x104>
 8000c7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c82:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c86:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000c8a:	fa93 f3a3 	rbit	r3, r3
 8000c8e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c92:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c96:	fab3 f383 	clz	r3, r3
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c9e:	d802      	bhi.n	8000ca6 <HAL_RCC_OscConfig+0x8a>
 8000ca0:	4ba2      	ldr	r3, [pc, #648]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	e015      	b.n	8000cd2 <HAL_RCC_OscConfig+0xb6>
 8000ca6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000caa:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cae:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000cb2:	fa93 f3a3 	rbit	r3, r3
 8000cb6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000cba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cbe:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000cc2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000cc6:	fa93 f3a3 	rbit	r3, r3
 8000cca:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000cce:	4b97      	ldr	r3, [pc, #604]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000cd6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000cda:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000cde:	fa92 f2a2 	rbit	r2, r2
 8000ce2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000ce6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	f042 0220 	orr.w	r2, r2, #32
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	f002 021f 	and.w	r2, r2, #31
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000d00:	4013      	ands	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 8114 	beq.w	8000f30 <HAL_RCC_OscConfig+0x314>
 8000d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f040 810b 	bne.w	8000f30 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	f000 bf85 	b.w	8001c2a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d30:	d106      	bne.n	8000d40 <HAL_RCC_OscConfig+0x124>
 8000d32:	4b7e      	ldr	r3, [pc, #504]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a7d      	ldr	r2, [pc, #500]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e036      	b.n	8000dae <HAL_RCC_OscConfig+0x192>
 8000d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10c      	bne.n	8000d6a <HAL_RCC_OscConfig+0x14e>
 8000d50:	4b76      	ldr	r3, [pc, #472]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a75      	ldr	r2, [pc, #468]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4b73      	ldr	r3, [pc, #460]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a72      	ldr	r2, [pc, #456]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e021      	b.n	8000dae <HAL_RCC_OscConfig+0x192>
 8000d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d7a:	d10c      	bne.n	8000d96 <HAL_RCC_OscConfig+0x17a>
 8000d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a6a      	ldr	r2, [pc, #424]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000d82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b68      	ldr	r3, [pc, #416]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a67      	ldr	r2, [pc, #412]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e00b      	b.n	8000dae <HAL_RCC_OscConfig+0x192>
 8000d96:	4b65      	ldr	r3, [pc, #404]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a64      	ldr	r2, [pc, #400]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b62      	ldr	r3, [pc, #392]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a61      	ldr	r2, [pc, #388]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dac:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dae:	4b5f      	ldr	r3, [pc, #380]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db2:	f023 020f 	bic.w	r2, r3, #15
 8000db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	495a      	ldr	r1, [pc, #360]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d054      	beq.n	8000e82 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fc0c 	bl	80005f4 <HAL_GetTick>
 8000ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de0:	e00a      	b.n	8000df8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de2:	f7ff fc07 	bl	80005f4 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b64      	cmp	r3, #100	@ 0x64
 8000df0:	d902      	bls.n	8000df8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	f000 bf19 	b.w	8001c2a <HAL_RCC_OscConfig+0x100e>
 8000df8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dfc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e00:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000e04:	fa93 f3a3 	rbit	r3, r3
 8000e08:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000e0c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e10:	fab3 f383 	clz	r3, r3
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e18:	d802      	bhi.n	8000e20 <HAL_RCC_OscConfig+0x204>
 8000e1a:	4b44      	ldr	r3, [pc, #272]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	e015      	b.n	8000e4c <HAL_RCC_OscConfig+0x230>
 8000e20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e24:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e28:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000e2c:	fa93 f3a3 	rbit	r3, r3
 8000e30:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000e34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e38:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000e3c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000e40:	fa93 f3a3 	rbit	r3, r3
 8000e44:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000e48:	4b38      	ldr	r3, [pc, #224]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e50:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000e54:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000e58:	fa92 f2a2 	rbit	r2, r2
 8000e5c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000e60:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000e64:	fab2 f282 	clz	r2, r2
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	f042 0220 	orr.w	r2, r2, #32
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	f002 021f 	and.w	r2, r2, #31
 8000e74:	2101      	movs	r1, #1
 8000e76:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0b0      	beq.n	8000de2 <HAL_RCC_OscConfig+0x1c6>
 8000e80:	e057      	b.n	8000f32 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fbb7 	bl	80005f4 <HAL_GetTick>
 8000e86:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8a:	e00a      	b.n	8000ea2 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e8c:	f7ff fbb2 	bl	80005f4 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b64      	cmp	r3, #100	@ 0x64
 8000e9a:	d902      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	f000 bec4 	b.w	8001c2a <HAL_RCC_OscConfig+0x100e>
 8000ea2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ea6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eaa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000eae:	fa93 f3a3 	rbit	r3, r3
 8000eb2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000eb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eba:	fab3 f383 	clz	r3, r3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ec2:	d802      	bhi.n	8000eca <HAL_RCC_OscConfig+0x2ae>
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	e015      	b.n	8000ef6 <HAL_RCC_OscConfig+0x2da>
 8000eca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ece:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000ed6:	fa93 f3a3 	rbit	r3, r3
 8000eda:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000ede:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ee2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000ee6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000eea:	fa93 f3a3 	rbit	r3, r3
 8000eee:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <HAL_RCC_OscConfig+0x310>)
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000efa:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000efe:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000f02:	fa92 f2a2 	rbit	r2, r2
 8000f06:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000f0a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000f0e:	fab2 f282 	clz	r2, r2
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	f042 0220 	orr.w	r2, r2, #32
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	f002 021f 	and.w	r2, r2, #31
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1b0      	bne.n	8000e8c <HAL_RCC_OscConfig+0x270>
 8000f2a:	e002      	b.n	8000f32 <HAL_RCC_OscConfig+0x316>
 8000f2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 816c 	beq.w	8001220 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f48:	4bcc      	ldr	r3, [pc, #816]	@ (800127c <HAL_RCC_OscConfig+0x660>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00b      	beq.n	8000f6c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f54:	4bc9      	ldr	r3, [pc, #804]	@ (800127c <HAL_RCC_OscConfig+0x660>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d16d      	bne.n	800103c <HAL_RCC_OscConfig+0x420>
 8000f60:	4bc6      	ldr	r3, [pc, #792]	@ (800127c <HAL_RCC_OscConfig+0x660>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d167      	bne.n	800103c <HAL_RCC_OscConfig+0x420>
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000f7e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f82:	fab3 f383 	clz	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f8a:	d802      	bhi.n	8000f92 <HAL_RCC_OscConfig+0x376>
 8000f8c:	4bbb      	ldr	r3, [pc, #748]	@ (800127c <HAL_RCC_OscConfig+0x660>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	e013      	b.n	8000fba <HAL_RCC_OscConfig+0x39e>
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f98:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000f9c:	fa93 f3a3 	rbit	r3, r3
 8000fa0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000faa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000fae:	fa93 f3a3 	rbit	r3, r3
 8000fb2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000fb6:	4bb1      	ldr	r3, [pc, #708]	@ (800127c <HAL_RCC_OscConfig+0x660>)
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fba:	2202      	movs	r2, #2
 8000fbc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8000fc0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000fc4:	fa92 f2a2 	rbit	r2, r2
 8000fc8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8000fcc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000fd0:	fab2 f282 	clz	r2, r2
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	f042 0220 	orr.w	r2, r2, #32
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	f002 021f 	and.w	r2, r2, #31
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00a      	beq.n	8001002 <HAL_RCC_OscConfig+0x3e6>
 8000fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ff0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d002      	beq.n	8001002 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f000 be14 	b.w	8001c2a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001002:	4b9e      	ldr	r3, [pc, #632]	@ (800127c <HAL_RCC_OscConfig+0x660>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800100a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800100e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	21f8      	movs	r1, #248	@ 0xf8
 8001018:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001020:	fa91 f1a1 	rbit	r1, r1
 8001024:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001028:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800102c:	fab1 f181 	clz	r1, r1
 8001030:	b2c9      	uxtb	r1, r1
 8001032:	408b      	lsls	r3, r1
 8001034:	4991      	ldr	r1, [pc, #580]	@ (800127c <HAL_RCC_OscConfig+0x660>)
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103a:	e0f1      	b.n	8001220 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800103c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001040:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 8083 	beq.w	8001154 <HAL_RCC_OscConfig+0x538>
 800104e:	2301      	movs	r3, #1
 8001050:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001054:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001058:	fa93 f3a3 	rbit	r3, r3
 800105c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001060:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001064:	fab3 f383 	clz	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800106e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	461a      	mov	r2, r3
 8001076:	2301      	movs	r3, #1
 8001078:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107a:	f7ff fabb 	bl	80005f4 <HAL_GetTick>
 800107e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001082:	e00a      	b.n	800109a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001084:	f7ff fab6 	bl	80005f4 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d902      	bls.n	800109a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	f000 bdc8 	b.w	8001c2a <HAL_RCC_OscConfig+0x100e>
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80010a4:	fa93 f3a3 	rbit	r3, r3
 80010a8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80010ac:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b0:	fab3 f383 	clz	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80010b8:	d802      	bhi.n	80010c0 <HAL_RCC_OscConfig+0x4a4>
 80010ba:	4b70      	ldr	r3, [pc, #448]	@ (800127c <HAL_RCC_OscConfig+0x660>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	e013      	b.n	80010e8 <HAL_RCC_OscConfig+0x4cc>
 80010c0:	2302      	movs	r3, #2
 80010c2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80010ca:	fa93 f3a3 	rbit	r3, r3
 80010ce:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80010d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80010dc:	fa93 f3a3 	rbit	r3, r3
 80010e0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80010e4:	4b65      	ldr	r3, [pc, #404]	@ (800127c <HAL_RCC_OscConfig+0x660>)
 80010e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e8:	2202      	movs	r2, #2
 80010ea:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80010ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80010f2:	fa92 f2a2 	rbit	r2, r2
 80010f6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80010fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80010fe:	fab2 f282 	clz	r2, r2
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	f042 0220 	orr.w	r2, r2, #32
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	f002 021f 	and.w	r2, r2, #31
 800110e:	2101      	movs	r1, #1
 8001110:	fa01 f202 	lsl.w	r2, r1, r2
 8001114:	4013      	ands	r3, r2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0b4      	beq.n	8001084 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111a:	4b58      	ldr	r3, [pc, #352]	@ (800127c <HAL_RCC_OscConfig+0x660>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001126:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	21f8      	movs	r1, #248	@ 0xf8
 8001130:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001138:	fa91 f1a1 	rbit	r1, r1
 800113c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001140:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001144:	fab1 f181 	clz	r1, r1
 8001148:	b2c9      	uxtb	r1, r1
 800114a:	408b      	lsls	r3, r1
 800114c:	494b      	ldr	r1, [pc, #300]	@ (800127c <HAL_RCC_OscConfig+0x660>)
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
 8001152:	e065      	b.n	8001220 <HAL_RCC_OscConfig+0x604>
 8001154:	2301      	movs	r3, #1
 8001156:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001166:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800116a:	fab3 f383 	clz	r3, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001174:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	461a      	mov	r2, r3
 800117c:	2300      	movs	r3, #0
 800117e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fa38 	bl	80005f4 <HAL_GetTick>
 8001184:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001188:	e00a      	b.n	80011a0 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118a:	f7ff fa33 	bl	80005f4 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d902      	bls.n	80011a0 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	f000 bd45 	b.w	8001c2a <HAL_RCC_OscConfig+0x100e>
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80011b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b6:	fab3 f383 	clz	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80011be:	d802      	bhi.n	80011c6 <HAL_RCC_OscConfig+0x5aa>
 80011c0:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <HAL_RCC_OscConfig+0x660>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	e013      	b.n	80011ee <HAL_RCC_OscConfig+0x5d2>
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80011de:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80011ea:	4b24      	ldr	r3, [pc, #144]	@ (800127c <HAL_RCC_OscConfig+0x660>)
 80011ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ee:	2202      	movs	r2, #2
 80011f0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80011f4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80011f8:	fa92 f2a2 	rbit	r2, r2
 80011fc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001200:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001204:	fab2 f282 	clz	r2, r2
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	f042 0220 	orr.w	r2, r2, #32
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	f002 021f 	and.w	r2, r2, #31
 8001214:	2101      	movs	r1, #1
 8001216:	fa01 f202 	lsl.w	r2, r1, r2
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1b4      	bne.n	800118a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001224:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 8115 	beq.w	8001460 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800123a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d07e      	beq.n	8001344 <HAL_RCC_OscConfig+0x728>
 8001246:	2301      	movs	r3, #1
 8001248:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125c:	fab3 f383 	clz	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	461a      	mov	r2, r3
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_RCC_OscConfig+0x664>)
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	461a      	mov	r2, r3
 800126c:	2301      	movs	r3, #1
 800126e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001270:	f7ff f9c0 	bl	80005f4 <HAL_GetTick>
 8001274:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001278:	e00f      	b.n	800129a <HAL_RCC_OscConfig+0x67e>
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff f9b6 	bl	80005f4 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d902      	bls.n	800129a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	f000 bcc8 	b.w	8001c2a <HAL_RCC_OscConfig+0x100e>
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80012a4:	fa93 f3a3 	rbit	r3, r3
 80012a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80012ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012b4:	2202      	movs	r2, #2
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	fa93 f2a3 	rbit	r2, r3
 80012c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012d8:	2202      	movs	r2, #2
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	fa93 f2a3 	rbit	r2, r3
 80012ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f4:	4bb0      	ldr	r3, [pc, #704]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 80012f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001300:	2102      	movs	r1, #2
 8001302:	6019      	str	r1, [r3, #0]
 8001304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001308:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	fa93 f1a3 	rbit	r1, r3
 8001312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001316:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800131a:	6019      	str	r1, [r3, #0]
  return result;
 800131c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001320:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	fab3 f383 	clz	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0a0      	beq.n	8001284 <HAL_RCC_OscConfig+0x668>
 8001342:	e08d      	b.n	8001460 <HAL_RCC_OscConfig+0x844>
 8001344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001348:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001354:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	fa93 f2a3 	rbit	r2, r3
 800135e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001362:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001366:	601a      	str	r2, [r3, #0]
  return result;
 8001368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800136c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001370:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	4b90      	ldr	r3, [pc, #576]	@ (80015bc <HAL_RCC_OscConfig+0x9a0>)
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	461a      	mov	r2, r3
 8001382:	2300      	movs	r3, #0
 8001384:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff f935 	bl	80005f4 <HAL_GetTick>
 800138a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001390:	f7ff f930 	bl	80005f4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d902      	bls.n	80013a6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	f000 bc42 	b.w	8001c2a <HAL_RCC_OscConfig+0x100e>
 80013a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013ae:	2202      	movs	r2, #2
 80013b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	fa93 f2a3 	rbit	r2, r3
 80013c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013d2:	2202      	movs	r2, #2
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	fa93 f2a3 	rbit	r2, r3
 80013e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013f6:	2202      	movs	r2, #2
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	fa93 f2a3 	rbit	r2, r3
 8001408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001410:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001412:	4b69      	ldr	r3, [pc, #420]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 8001414:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800141a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800141e:	2102      	movs	r1, #2
 8001420:	6019      	str	r1, [r3, #0]
 8001422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001426:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	fa93 f1a3 	rbit	r1, r3
 8001430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001434:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001438:	6019      	str	r1, [r3, #0]
  return result;
 800143a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800143e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fab3 f383 	clz	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800144e:	b2db      	uxtb	r3, r3
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	2101      	movs	r1, #1
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	4013      	ands	r3, r2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d197      	bne.n	8001390 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001464:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 819e 	beq.w	80017b2 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147c:	4b4e      	ldr	r3, [pc, #312]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d116      	bne.n	80014b6 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	4b4b      	ldr	r3, [pc, #300]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	4a4a      	ldr	r2, [pc, #296]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 800148e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001492:	61d3      	str	r3, [r2, #28]
 8001494:	4b48      	ldr	r3, [pc, #288]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800149c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014aa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80014ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014b0:	2301      	movs	r3, #1
 80014b2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b6:	4b42      	ldr	r3, [pc, #264]	@ (80015c0 <HAL_RCC_OscConfig+0x9a4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d11a      	bne.n	80014f8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c2:	4b3f      	ldr	r3, [pc, #252]	@ (80015c0 <HAL_RCC_OscConfig+0x9a4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a3e      	ldr	r2, [pc, #248]	@ (80015c0 <HAL_RCC_OscConfig+0x9a4>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ce:	f7ff f891 	bl	80005f4 <HAL_GetTick>
 80014d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d6:	e009      	b.n	80014ec <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d8:	f7ff f88c 	bl	80005f4 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b64      	cmp	r3, #100	@ 0x64
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e39e      	b.n	8001c2a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	4b34      	ldr	r3, [pc, #208]	@ (80015c0 <HAL_RCC_OscConfig+0x9a4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0ef      	beq.n	80014d8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x8fa>
 8001508:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a2a      	ldr	r2, [pc, #168]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	e035      	b.n	8001582 <HAL_RCC_OscConfig+0x966>
 8001516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800151a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x924>
 8001526:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4a23      	ldr	r2, [pc, #140]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6213      	str	r3, [r2, #32]
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a20      	ldr	r2, [pc, #128]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6213      	str	r3, [r2, #32]
 800153e:	e020      	b.n	8001582 <HAL_RCC_OscConfig+0x966>
 8001540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001544:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b05      	cmp	r3, #5
 800154e:	d10c      	bne.n	800156a <HAL_RCC_OscConfig+0x94e>
 8001550:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4a18      	ldr	r2, [pc, #96]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6213      	str	r3, [r2, #32]
 800155c:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4a15      	ldr	r2, [pc, #84]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6213      	str	r3, [r2, #32]
 8001568:	e00b      	b.n	8001582 <HAL_RCC_OscConfig+0x966>
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a0f      	ldr	r2, [pc, #60]	@ (80015b8 <HAL_RCC_OscConfig+0x99c>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001586:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 8087 	beq.w	80016a2 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff f82e 	bl	80005f4 <HAL_GetTick>
 8001598:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159c:	e012      	b.n	80015c4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159e:	f7ff f829 	bl	80005f4 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d908      	bls.n	80015c4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e339      	b.n	8001c2a <HAL_RCC_OscConfig+0x100e>
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	10908120 	.word	0x10908120
 80015c0:	40007000 	.word	0x40007000
 80015c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015cc:	2202      	movs	r2, #2
 80015ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	fa93 f2a3 	rbit	r2, r3
 80015de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80015f0:	2202      	movs	r2, #2
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	fa93 f2a3 	rbit	r2, r3
 8001602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001606:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800160a:	601a      	str	r2, [r3, #0]
  return result;
 800160c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001610:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001614:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001616:	fab3 f383 	clz	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <HAL_RCC_OscConfig+0xa10>
 8001626:	4b98      	ldr	r3, [pc, #608]	@ (8001888 <HAL_RCC_OscConfig+0xc6c>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	e013      	b.n	8001654 <HAL_RCC_OscConfig+0xa38>
 800162c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001630:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001634:	2202      	movs	r2, #2
 8001636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800163c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fa93 f2a3 	rbit	r2, r3
 8001646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	4b8d      	ldr	r3, [pc, #564]	@ (8001888 <HAL_RCC_OscConfig+0xc6c>)
 8001652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001654:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001658:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800165c:	2102      	movs	r1, #2
 800165e:	6011      	str	r1, [r2, #0]
 8001660:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001664:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	fa92 f1a2 	rbit	r1, r2
 800166e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001672:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001676:	6011      	str	r1, [r2, #0]
  return result;
 8001678:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800167c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	fab2 f282 	clz	r2, r2
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	f002 021f 	and.w	r2, r2, #31
 8001692:	2101      	movs	r1, #1
 8001694:	fa01 f202 	lsl.w	r2, r1, r2
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	f43f af7f 	beq.w	800159e <HAL_RCC_OscConfig+0x982>
 80016a0:	e07d      	b.n	800179e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a2:	f7fe ffa7 	bl	80005f4 <HAL_GetTick>
 80016a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7fe ffa2 	bl	80005f4 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016bc:	4293      	cmp	r3, r2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e2b2      	b.n	8001c2a <HAL_RCC_OscConfig+0x100e>
 80016c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016cc:	2202      	movs	r2, #2
 80016ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	fa93 f2a3 	rbit	r2, r3
 80016de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ec:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80016f0:	2202      	movs	r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	fa93 f2a3 	rbit	r2, r3
 8001702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001706:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800170a:	601a      	str	r2, [r3, #0]
  return result;
 800170c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001710:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001714:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <HAL_RCC_OscConfig+0xb10>
 8001726:	4b58      	ldr	r3, [pc, #352]	@ (8001888 <HAL_RCC_OscConfig+0xc6c>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	e013      	b.n	8001754 <HAL_RCC_OscConfig+0xb38>
 800172c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001730:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001734:	2202      	movs	r2, #2
 8001736:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800173c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	fa93 f2a3 	rbit	r2, r3
 8001746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	4b4d      	ldr	r3, [pc, #308]	@ (8001888 <HAL_RCC_OscConfig+0xc6c>)
 8001752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001754:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001758:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800175c:	2102      	movs	r1, #2
 800175e:	6011      	str	r1, [r2, #0]
 8001760:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001764:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	fa92 f1a2 	rbit	r1, r2
 800176e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001772:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001776:	6011      	str	r1, [r2, #0]
  return result;
 8001778:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800177c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	fab2 f282 	clz	r2, r2
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	f002 021f 	and.w	r2, r2, #31
 8001792:	2101      	movs	r1, #1
 8001794:	fa01 f202 	lsl.w	r2, r1, r2
 8001798:	4013      	ands	r3, r2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d186      	bne.n	80016ac <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800179e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d105      	bne.n	80017b2 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a6:	4b38      	ldr	r3, [pc, #224]	@ (8001888 <HAL_RCC_OscConfig+0xc6c>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a37      	ldr	r2, [pc, #220]	@ (8001888 <HAL_RCC_OscConfig+0xc6c>)
 80017ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017b0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8232 	beq.w	8001c28 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c4:	4b30      	ldr	r3, [pc, #192]	@ (8001888 <HAL_RCC_OscConfig+0xc6c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	f000 8201 	beq.w	8001bd4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	f040 8157 	bne.w	8001a92 <HAL_RCC_OscConfig+0xe76>
 80017e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80017ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f2a3 	rbit	r2, r3
 8001800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001804:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001808:	601a      	str	r2, [r3, #0]
  return result;
 800180a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800180e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001812:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800181e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	461a      	mov	r2, r3
 8001826:	2300      	movs	r3, #0
 8001828:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7fe fee3 	bl	80005f4 <HAL_GetTick>
 800182e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001832:	e009      	b.n	8001848 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001834:	f7fe fede 	bl	80005f4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e1f0      	b.n	8001c2a <HAL_RCC_OscConfig+0x100e>
 8001848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001850:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001868:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800186c:	601a      	str	r2, [r3, #0]
  return result;
 800186e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001872:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001876:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001880:	d804      	bhi.n	800188c <HAL_RCC_OscConfig+0xc70>
 8001882:	4b01      	ldr	r3, [pc, #4]	@ (8001888 <HAL_RCC_OscConfig+0xc6c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	e029      	b.n	80018dc <HAL_RCC_OscConfig+0xcc0>
 8001888:	40021000 	.word	0x40021000
 800188c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001890:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001894:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	fa93 f2a3 	rbit	r2, r3
 80018a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ac:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80018ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	fa93 f2a3 	rbit	r2, r3
 80018ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	4bc3      	ldr	r3, [pc, #780]	@ (8001be8 <HAL_RCC_OscConfig+0xfcc>)
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018e0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80018e4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80018e8:	6011      	str	r1, [r2, #0]
 80018ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018ee:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	fa92 f1a2 	rbit	r1, r2
 80018f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018fc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001900:	6011      	str	r1, [r2, #0]
  return result;
 8001902:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001906:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	fab2 f282 	clz	r2, r2
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	f042 0220 	orr.w	r2, r2, #32
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	f002 021f 	and.w	r2, r2, #31
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f202 	lsl.w	r2, r1, r2
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d185      	bne.n	8001834 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001928:	4baf      	ldr	r3, [pc, #700]	@ (8001be8 <HAL_RCC_OscConfig+0xfcc>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001934:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800193c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001940:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	430b      	orrs	r3, r1
 800194a:	49a7      	ldr	r1, [pc, #668]	@ (8001be8 <HAL_RCC_OscConfig+0xfcc>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
 8001950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001954:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001958:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800195c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001962:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f2a3 	rbit	r2, r3
 800196c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001970:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001974:	601a      	str	r2, [r3, #0]
  return result;
 8001976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800197e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800198a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	461a      	mov	r2, r3
 8001992:	2301      	movs	r3, #1
 8001994:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7fe fe2d 	bl	80005f4 <HAL_GetTick>
 800199a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800199e:	e009      	b.n	80019b4 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7fe fe28 	bl	80005f4 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e13a      	b.n	8001c2a <HAL_RCC_OscConfig+0x100e>
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80019d8:	601a      	str	r2, [r3, #0]
  return result;
 80019da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019de:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80019e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80019ec:	d802      	bhi.n	80019f4 <HAL_RCC_OscConfig+0xdd8>
 80019ee:	4b7e      	ldr	r3, [pc, #504]	@ (8001be8 <HAL_RCC_OscConfig+0xfcc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	e027      	b.n	8001a44 <HAL_RCC_OscConfig+0xe28>
 80019f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80019fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a06:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	fa93 f2a3 	rbit	r2, r3
 8001a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a14:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	4b69      	ldr	r3, [pc, #420]	@ (8001be8 <HAL_RCC_OscConfig+0xfcc>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a48:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001a4c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a50:	6011      	str	r1, [r2, #0]
 8001a52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a56:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	fa92 f1a2 	rbit	r1, r2
 8001a60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a64:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a68:	6011      	str	r1, [r2, #0]
  return result;
 8001a6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a6e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	fab2 f282 	clz	r2, r2
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	f042 0220 	orr.w	r2, r2, #32
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	f002 021f 	and.w	r2, r2, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d087      	beq.n	80019a0 <HAL_RCC_OscConfig+0xd84>
 8001a90:	e0ca      	b.n	8001c28 <HAL_RCC_OscConfig+0x100c>
 8001a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a96:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001a9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fa93 f2a3 	rbit	r2, r3
 8001aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001ab6:	601a      	str	r2, [r3, #0]
  return result;
 8001ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001abc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001ac0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001acc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7fe fd8c 	bl	80005f4 <HAL_GetTick>
 8001adc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae0:	e009      	b.n	8001af6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7fe fd87 	bl	80005f4 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e099      	b.n	8001c2a <HAL_RCC_OscConfig+0x100e>
 8001af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001afe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b08:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f2a3 	rbit	r2, r3
 8001b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b16:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b1a:	601a      	str	r2, [r3, #0]
  return result;
 8001b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b20:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b2e:	d802      	bhi.n	8001b36 <HAL_RCC_OscConfig+0xf1a>
 8001b30:	4b2d      	ldr	r3, [pc, #180]	@ (8001be8 <HAL_RCC_OscConfig+0xfcc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	e027      	b.n	8001b86 <HAL_RCC_OscConfig+0xf6a>
 8001b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fa93 f2a3 	rbit	r2, r3
 8001b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b56:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b60:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001b64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	fa93 f2a3 	rbit	r2, r3
 8001b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <HAL_RCC_OscConfig+0xfcc>)
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b8a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001b8e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b92:	6011      	str	r1, [r2, #0]
 8001b94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b98:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	fa92 f1a2 	rbit	r1, r2
 8001ba2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ba6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001baa:	6011      	str	r1, [r2, #0]
  return result;
 8001bac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bb0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	fab2 f282 	clz	r2, r2
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	f042 0220 	orr.w	r2, r2, #32
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	f002 021f 	and.w	r2, r2, #31
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d187      	bne.n	8001ae2 <HAL_RCC_OscConfig+0xec6>
 8001bd2:	e029      	b.n	8001c28 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d103      	bne.n	8001bec <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e020      	b.n	8001c2a <HAL_RCC_OscConfig+0x100e>
 8001be8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <HAL_RCC_OscConfig+0x1018>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bf4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001bf8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d10b      	bne.n	8001c24 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c0c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001c10:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b09e      	sub	sp, #120	@ 0x78
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e154      	b.n	8001efa <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c50:	4b89      	ldr	r3, [pc, #548]	@ (8001e78 <HAL_RCC_ClockConfig+0x240>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d910      	bls.n	8001c80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b86      	ldr	r3, [pc, #536]	@ (8001e78 <HAL_RCC_ClockConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 0207 	bic.w	r2, r3, #7
 8001c66:	4984      	ldr	r1, [pc, #528]	@ (8001e78 <HAL_RCC_ClockConfig+0x240>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b82      	ldr	r3, [pc, #520]	@ (8001e78 <HAL_RCC_ClockConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e13c      	b.n	8001efa <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e7c <HAL_RCC_ClockConfig+0x244>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4978      	ldr	r1, [pc, #480]	@ (8001e7c <HAL_RCC_ClockConfig+0x244>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80cd 	beq.w	8001e46 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d137      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xec>
 8001cb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001cc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ccc:	d802      	bhi.n	8001cd4 <HAL_RCC_ClockConfig+0x9c>
 8001cce:	4b6b      	ldr	r3, [pc, #428]	@ (8001e7c <HAL_RCC_ClockConfig+0x244>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e00f      	b.n	8001cf4 <HAL_RCC_ClockConfig+0xbc>
 8001cd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ce2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ce6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ce8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001cf0:	4b62      	ldr	r3, [pc, #392]	@ (8001e7c <HAL_RCC_ClockConfig+0x244>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cf8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001cfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001cfc:	fa92 f2a2 	rbit	r2, r2
 8001d00:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001d02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d04:	fab2 f282 	clz	r2, r2
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f042 0220 	orr.w	r2, r2, #32
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f002 021f 	and.w	r2, r2, #31
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d171      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0ea      	b.n	8001efa <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d137      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x164>
 8001d2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d30:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d44:	d802      	bhi.n	8001d4c <HAL_RCC_ClockConfig+0x114>
 8001d46:	4b4d      	ldr	r3, [pc, #308]	@ (8001e7c <HAL_RCC_ClockConfig+0x244>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e00f      	b.n	8001d6c <HAL_RCC_ClockConfig+0x134>
 8001d4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d50:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d68:	4b44      	ldr	r3, [pc, #272]	@ (8001e7c <HAL_RCC_ClockConfig+0x244>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d70:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001d72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d74:	fa92 f2a2 	rbit	r2, r2
 8001d78:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001d7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d7c:	fab2 f282 	clz	r2, r2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f042 0220 	orr.w	r2, r2, #32
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	f002 021f 	and.w	r2, r2, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d135      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0ae      	b.n	8001efa <HAL_RCC_ClockConfig+0x2c2>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001db2:	d802      	bhi.n	8001dba <HAL_RCC_ClockConfig+0x182>
 8001db4:	4b31      	ldr	r3, [pc, #196]	@ (8001e7c <HAL_RCC_ClockConfig+0x244>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	e00d      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x19e>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	623b      	str	r3, [r7, #32]
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e7c <HAL_RCC_ClockConfig+0x244>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	61ba      	str	r2, [r7, #24]
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	fa92 f2a2 	rbit	r2, r2
 8001de0:	617a      	str	r2, [r7, #20]
  return result;
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	fab2 f282 	clz	r2, r2
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f042 0220 	orr.w	r2, r2, #32
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f002 021f 	and.w	r2, r2, #31
 8001df4:	2101      	movs	r1, #1
 8001df6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e07a      	b.n	8001efa <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e04:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <HAL_RCC_ClockConfig+0x244>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 0203 	bic.w	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	491a      	ldr	r1, [pc, #104]	@ (8001e7c <HAL_RCC_ClockConfig+0x244>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e16:	f7fe fbed 	bl	80005f4 <HAL_GetTick>
 8001e1a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1e:	f7fe fbe9 	bl	80005f4 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e062      	b.n	8001efa <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <HAL_RCC_ClockConfig+0x244>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 020c 	and.w	r2, r3, #12
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d1eb      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e46:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <HAL_RCC_ClockConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d215      	bcs.n	8001e80 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e54:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <HAL_RCC_ClockConfig+0x240>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f023 0207 	bic.w	r2, r3, #7
 8001e5c:	4906      	ldr	r1, [pc, #24]	@ (8001e78 <HAL_RCC_ClockConfig+0x240>)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <HAL_RCC_ClockConfig+0x240>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d006      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e041      	b.n	8001efa <HAL_RCC_ClockConfig+0x2c2>
 8001e76:	bf00      	nop
 8001e78:	40022000 	.word	0x40022000
 8001e7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <HAL_RCC_ClockConfig+0x2cc>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	491a      	ldr	r1, [pc, #104]	@ (8001f04 <HAL_RCC_ClockConfig+0x2cc>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <HAL_RCC_ClockConfig+0x2cc>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4912      	ldr	r1, [pc, #72]	@ (8001f04 <HAL_RCC_ClockConfig+0x2cc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ebe:	f000 f829 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001ec2:	4601      	mov	r1, r0
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <HAL_RCC_ClockConfig+0x2cc>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ecc:	22f0      	movs	r2, #240	@ 0xf0
 8001ece:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	fa92 f2a2 	rbit	r2, r2
 8001ed6:	60fa      	str	r2, [r7, #12]
  return result;
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	fab2 f282 	clz	r2, r2
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	40d3      	lsrs	r3, r2
 8001ee2:	4a09      	ldr	r2, [pc, #36]	@ (8001f08 <HAL_RCC_ClockConfig+0x2d0>)
 8001ee4:	5cd3      	ldrb	r3, [r2, r3]
 8001ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8001eea:	4a08      	ldr	r2, [pc, #32]	@ (8001f0c <HAL_RCC_ClockConfig+0x2d4>)
 8001eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <HAL_RCC_ClockConfig+0x2d8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fb3a 	bl	800056c <HAL_InitTick>
  
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3778      	adds	r7, #120	@ 0x78
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	0800385c 	.word	0x0800385c
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d002      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x30>
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d003      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x36>
 8001f42:	e026      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x98>)
 8001f46:	613b      	str	r3, [r7, #16]
      break;
 8001f48:	e026      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	0c9b      	lsrs	r3, r3, #18
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	4a17      	ldr	r2, [pc, #92]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
 8001f56:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001f58:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f70:	4a0e      	ldr	r2, [pc, #56]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x98>)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	e004      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
      break;
 8001f90:	e002      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x98>)
 8001f94:	613b      	str	r3, [r7, #16]
      break;
 8001f96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f98:	693b      	ldr	r3, [r7, #16]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	007a1200 	.word	0x007a1200
 8001fb0:	08003874 	.word	0x08003874
 8001fb4:	08003884 	.word	0x08003884
 8001fb8:	003d0900 	.word	0x003d0900

08001fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	@ (8001fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000000 	.word	0x20000000

08001fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001fda:	f7ff ffef 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8001fde:	4601      	mov	r1, r0
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001fe8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001fec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	fa92 f2a2 	rbit	r2, r2
 8001ff4:	603a      	str	r2, [r7, #0]
  return result;
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	40d3      	lsrs	r3, r2
 8002000:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	0800386c 	.word	0x0800386c

08002018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800201e:	f7ff ffcd 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8002022:	4601      	mov	r1, r0
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800202c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002030:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	fa92 f2a2 	rbit	r2, r2
 8002038:	603a      	str	r2, [r7, #0]
  return result;
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	fab2 f282 	clz	r2, r2
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	40d3      	lsrs	r3, r2
 8002044:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	0800386c 	.word	0x0800386c

0800205c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b092      	sub	sp, #72	@ 0x48
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 80d2 	beq.w	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002080:	4b4d      	ldr	r3, [pc, #308]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10e      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	4b4a      	ldr	r3, [pc, #296]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	4a49      	ldr	r2, [pc, #292]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002096:	61d3      	str	r3, [r2, #28]
 8002098:	4b47      	ldr	r3, [pc, #284]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a4:	2301      	movs	r3, #1
 80020a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	4b44      	ldr	r3, [pc, #272]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d118      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b6:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a40      	ldr	r2, [pc, #256]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c2:	f7fe fa97 	bl	80005f4 <HAL_GetTick>
 80020c6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	e008      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ca:	f7fe fa93 	bl	80005f4 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b64      	cmp	r3, #100	@ 0x64
 80020d6:	d901      	bls.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e149      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x314>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	4b37      	ldr	r3, [pc, #220]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020e8:	4b33      	ldr	r3, [pc, #204]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8082 	beq.w	80021fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002102:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002104:	429a      	cmp	r2, r3
 8002106:	d07a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002108:	4b2b      	ldr	r3, [pc, #172]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002112:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002116:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	4b25      	ldr	r3, [pc, #148]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	461a      	mov	r2, r3
 8002132:	2301      	movs	r3, #1
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800213a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	4b1c      	ldr	r3, [pc, #112]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	461a      	mov	r2, r3
 8002156:	2300      	movs	r3, #0
 8002158:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800215a:	4a17      	ldr	r2, [pc, #92]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800215c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800215e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d049      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7fe fa43 	bl	80005f4 <HAL_GetTick>
 800216e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe fa3f 	bl	80005f4 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0f3      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002188:	2302      	movs	r3, #2
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
 8002194:	2302      	movs	r3, #2
 8002196:	623b      	str	r3, [r7, #32]
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	61fb      	str	r3, [r7, #28]
  return result;
 80021a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d108      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80021b2:	4b01      	ldr	r3, [pc, #4]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	e00d      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40007000 	.word	0x40007000
 80021c0:	10908100 	.word	0x10908100
 80021c4:	2302      	movs	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	4b69      	ldr	r3, [pc, #420]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	2202      	movs	r2, #2
 80021d6:	613a      	str	r2, [r7, #16]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	fa92 f2a2 	rbit	r2, r2
 80021de:	60fa      	str	r2, [r7, #12]
  return result;
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	fab2 f282 	clz	r2, r2
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	f002 021f 	and.w	r2, r2, #31
 80021f2:	2101      	movs	r1, #1
 80021f4:	fa01 f202 	lsl.w	r2, r1, r2
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0b9      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	495b      	ldr	r1, [pc, #364]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800220c:	4313      	orrs	r3, r2
 800220e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002210:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002218:	4b57      	ldr	r3, [pc, #348]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	4a56      	ldr	r2, [pc, #344]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800221e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002222:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002230:	4b51      	ldr	r3, [pc, #324]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	f023 0203 	bic.w	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	494e      	ldr	r1, [pc, #312]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800223e:	4313      	orrs	r3, r2
 8002240:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800224e:	4b4a      	ldr	r3, [pc, #296]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	4947      	ldr	r1, [pc, #284]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800225c:	4313      	orrs	r3, r2
 800225e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800226c:	4b42      	ldr	r3, [pc, #264]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	493f      	ldr	r1, [pc, #252]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800227a:	4313      	orrs	r3, r2
 800227c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800228a:	4b3b      	ldr	r3, [pc, #236]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	f023 0210 	bic.w	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4938      	ldr	r1, [pc, #224]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002298:	4313      	orrs	r3, r2
 800229a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80022a8:	4b33      	ldr	r3, [pc, #204]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	4930      	ldr	r1, [pc, #192]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f023 0220 	bic.w	r2, r3, #32
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4929      	ldr	r1, [pc, #164]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022e4:	4b24      	ldr	r3, [pc, #144]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	4921      	ldr	r1, [pc, #132]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d008      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002302:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	491a      	ldr	r1, [pc, #104]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002310:	4313      	orrs	r3, r2
 8002312:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002320:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	4912      	ldr	r1, [pc, #72]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800233e:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002342:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	490b      	ldr	r1, [pc, #44]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800234c:	4313      	orrs	r3, r2
 800234e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002360:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002368:	4903      	ldr	r1, [pc, #12]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800236a:	4313      	orrs	r3, r2
 800236c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3748      	adds	r7, #72	@ 0x48
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000

0800237c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e040      	b.n	8002410 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe f80e 	bl	80003c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2224      	movs	r2, #36	@ 0x24
 80023a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fd00 	bl	8002dc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fb29 	bl	8002a20 <UART_SetConfig>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e01b      	b.n	8002410 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fd7f 	bl	8002f0c <UART_CheckIdleState>
 800240e:	4603      	mov	r3, r0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b0ba      	sub	sp, #232	@ 0xe8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800243e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002442:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002446:	4013      	ands	r3, r2
 8002448:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800244c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d115      	bne.n	8002480 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00f      	beq.n	8002480 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d009      	beq.n	8002480 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 82ab 	beq.w	80029cc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	4798      	blx	r3
      }
      return;
 800247e:	e2a5      	b.n	80029cc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002480:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8117 	beq.w	80026b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800248a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002496:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800249a:	4b85      	ldr	r3, [pc, #532]	@ (80026b0 <HAL_UART_IRQHandler+0x298>)
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 810a 	beq.w	80026b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d011      	beq.n	80024d4 <HAL_UART_IRQHandler+0xbc>
 80024b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00b      	beq.n	80024d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2201      	movs	r2, #1
 80024c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d011      	beq.n	8002504 <HAL_UART_IRQHandler+0xec>
 80024e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2202      	movs	r2, #2
 80024f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024fa:	f043 0204 	orr.w	r2, r3, #4
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d011      	beq.n	8002534 <HAL_UART_IRQHandler+0x11c>
 8002510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2204      	movs	r2, #4
 8002522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800252a:	f043 0202 	orr.w	r2, r3, #2
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d017      	beq.n	8002570 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800254c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002550:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00b      	beq.n	8002570 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2208      	movs	r2, #8
 800255e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002566:	f043 0208 	orr.w	r2, r3, #8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002578:	2b00      	cmp	r3, #0
 800257a:	d012      	beq.n	80025a2 <HAL_UART_IRQHandler+0x18a>
 800257c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002580:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00c      	beq.n	80025a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002598:	f043 0220 	orr.w	r2, r3, #32
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8211 	beq.w	80029d0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80025ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80025ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ea:	2b40      	cmp	r3, #64	@ 0x40
 80025ec:	d005      	beq.n	80025fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d04f      	beq.n	800269a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fe50 	bl	80032a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260a:	2b40      	cmp	r3, #64	@ 0x40
 800260c:	d141      	bne.n	8002692 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3308      	adds	r3, #8
 8002614:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002618:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800261c:	e853 3f00 	ldrex	r3, [r3]
 8002620:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002624:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800262c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3308      	adds	r3, #8
 8002636:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800263a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800263e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002642:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002646:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800264a:	e841 2300 	strex	r3, r2, [r1]
 800264e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002652:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1d9      	bne.n	800260e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800265e:	2b00      	cmp	r3, #0
 8002660:	d013      	beq.n	800268a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002666:	4a13      	ldr	r2, [pc, #76]	@ (80026b4 <HAL_UART_IRQHandler+0x29c>)
 8002668:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe f91b 	bl	80008aa <HAL_DMA_Abort_IT>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d017      	beq.n	80026aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002684:	4610      	mov	r0, r2
 8002686:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002688:	e00f      	b.n	80026aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f9be 	bl	8002a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002690:	e00b      	b.n	80026aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f9ba 	bl	8002a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002698:	e007      	b.n	80026aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f9b6 	bl	8002a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80026a8:	e192      	b.n	80029d0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026aa:	bf00      	nop
    return;
 80026ac:	e190      	b.n	80029d0 <HAL_UART_IRQHandler+0x5b8>
 80026ae:	bf00      	nop
 80026b0:	04000120 	.word	0x04000120
 80026b4:	08003369 	.word	0x08003369

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026bc:	2b01      	cmp	r3, #1
 80026be:	f040 814b 	bne.w	8002958 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80026c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8144 	beq.w	8002958 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80026d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 813d 	beq.w	8002958 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2210      	movs	r2, #16
 80026e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f0:	2b40      	cmp	r3, #64	@ 0x40
 80026f2:	f040 80b5 	bne.w	8002860 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002702:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8164 	beq.w	80029d4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002712:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002716:	429a      	cmp	r2, r3
 8002718:	f080 815c 	bcs.w	80029d4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002722:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b20      	cmp	r3, #32
 800272e:	f000 8086 	beq.w	800283e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800273e:	e853 3f00 	ldrex	r3, [r3]
 8002742:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002746:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800274a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800274e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800275c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002760:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002764:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002768:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800276c:	e841 2300 	strex	r3, r2, [r1]
 8002770:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002774:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1da      	bne.n	8002732 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3308      	adds	r3, #8
 8002782:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002784:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002786:	e853 3f00 	ldrex	r3, [r3]
 800278a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800278c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3308      	adds	r3, #8
 800279c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027a0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80027a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80027a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80027ac:	e841 2300 	strex	r3, r2, [r1]
 80027b0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80027b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e1      	bne.n	800277c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3308      	adds	r3, #8
 80027be:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80027c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3308      	adds	r3, #8
 80027d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80027dc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027de:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80027e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027e4:	e841 2300 	strex	r3, r2, [r1]
 80027e8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80027ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e3      	bne.n	80027b8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002806:	e853 3f00 	ldrex	r3, [r3]
 800280a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800280c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800280e:	f023 0310 	bic.w	r3, r3, #16
 8002812:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002820:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002822:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002824:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002826:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002828:	e841 2300 	strex	r3, r2, [r1]
 800282c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800282e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1e4      	bne.n	80027fe <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fff8 	bl	800082e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2202      	movs	r2, #2
 8002842:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002850:	b29b      	uxth	r3, r3
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	b29b      	uxth	r3, r3
 8002856:	4619      	mov	r1, r3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7fd fd69 	bl	8000330 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800285e:	e0b9      	b.n	80029d4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800286c:	b29b      	uxth	r3, r3
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80ab 	beq.w	80029d8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002882:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80a6 	beq.w	80029d8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002894:	e853 3f00 	ldrex	r3, [r3]
 8002898:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800289a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800289c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80028b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028b6:	e841 2300 	strex	r3, r2, [r1]
 80028ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1e4      	bne.n	800288c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3308      	adds	r3, #8
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	e853 3f00 	ldrex	r3, [r3]
 80028d0:	623b      	str	r3, [r7, #32]
   return(result);
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3308      	adds	r3, #8
 80028e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80028e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80028e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ee:	e841 2300 	strex	r3, r2, [r1]
 80028f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1e3      	bne.n	80028c2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	e853 3f00 	ldrex	r3, [r3]
 800291a:	60fb      	str	r3, [r7, #12]
   return(result);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0310 	bic.w	r3, r3, #16
 8002922:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002934:	69b9      	ldr	r1, [r7, #24]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	e841 2300 	strex	r3, r2, [r1]
 800293c:	617b      	str	r3, [r7, #20]
   return(result);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1e4      	bne.n	800290e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800294a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800294e:	4619      	mov	r1, r3
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7fd fced 	bl	8000330 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002956:	e03f      	b.n	80029d8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800295c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <HAL_UART_IRQHandler+0x56a>
 8002964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002968:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002978:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fedc 	bl	8003738 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002980:	e02d      	b.n	80029de <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00e      	beq.n	80029ac <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800298e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01c      	beq.n	80029dc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
    }
    return;
 80029aa:	e017      	b.n	80029dc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <HAL_UART_IRQHandler+0x5c6>
 80029b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00c      	beq.n	80029de <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fce5 	bl	8003394 <UART_EndTransmit_IT>
    return;
 80029ca:	e008      	b.n	80029de <HAL_UART_IRQHandler+0x5c6>
      return;
 80029cc:	bf00      	nop
 80029ce:	e006      	b.n	80029de <HAL_UART_IRQHandler+0x5c6>
    return;
 80029d0:	bf00      	nop
 80029d2:	e004      	b.n	80029de <HAL_UART_IRQHandler+0x5c6>
      return;
 80029d4:	bf00      	nop
 80029d6:	e002      	b.n	80029de <HAL_UART_IRQHandler+0x5c6>
      return;
 80029d8:	bf00      	nop
 80029da:	e000      	b.n	80029de <HAL_UART_IRQHandler+0x5c6>
    return;
 80029dc:	bf00      	nop
  }

}
 80029de:	37e8      	adds	r7, #232	@ 0xe8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002a4e:	f023 030c 	bic.w	r3, r3, #12
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	6979      	ldr	r1, [r7, #20]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4aa7      	ldr	r2, [pc, #668]	@ (8002d38 <UART_SetConfig+0x318>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d120      	bne.n	8002ae2 <UART_SetConfig+0xc2>
 8002aa0:	4ba6      	ldr	r3, [pc, #664]	@ (8002d3c <UART_SetConfig+0x31c>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d817      	bhi.n	8002adc <UART_SetConfig+0xbc>
 8002aac:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab4 <UART_SetConfig+0x94>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ac5 	.word	0x08002ac5
 8002ab8:	08002ad1 	.word	0x08002ad1
 8002abc:	08002ad7 	.word	0x08002ad7
 8002ac0:	08002acb 	.word	0x08002acb
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	77fb      	strb	r3, [r7, #31]
 8002ac8:	e0b5      	b.n	8002c36 <UART_SetConfig+0x216>
 8002aca:	2302      	movs	r3, #2
 8002acc:	77fb      	strb	r3, [r7, #31]
 8002ace:	e0b2      	b.n	8002c36 <UART_SetConfig+0x216>
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	77fb      	strb	r3, [r7, #31]
 8002ad4:	e0af      	b.n	8002c36 <UART_SetConfig+0x216>
 8002ad6:	2308      	movs	r3, #8
 8002ad8:	77fb      	strb	r3, [r7, #31]
 8002ada:	e0ac      	b.n	8002c36 <UART_SetConfig+0x216>
 8002adc:	2310      	movs	r3, #16
 8002ade:	77fb      	strb	r3, [r7, #31]
 8002ae0:	e0a9      	b.n	8002c36 <UART_SetConfig+0x216>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a96      	ldr	r2, [pc, #600]	@ (8002d40 <UART_SetConfig+0x320>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d124      	bne.n	8002b36 <UART_SetConfig+0x116>
 8002aec:	4b93      	ldr	r3, [pc, #588]	@ (8002d3c <UART_SetConfig+0x31c>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002af4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002af8:	d011      	beq.n	8002b1e <UART_SetConfig+0xfe>
 8002afa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002afe:	d817      	bhi.n	8002b30 <UART_SetConfig+0x110>
 8002b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b04:	d011      	beq.n	8002b2a <UART_SetConfig+0x10a>
 8002b06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b0a:	d811      	bhi.n	8002b30 <UART_SetConfig+0x110>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <UART_SetConfig+0xf8>
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b14:	d006      	beq.n	8002b24 <UART_SetConfig+0x104>
 8002b16:	e00b      	b.n	8002b30 <UART_SetConfig+0x110>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	e08b      	b.n	8002c36 <UART_SetConfig+0x216>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	77fb      	strb	r3, [r7, #31]
 8002b22:	e088      	b.n	8002c36 <UART_SetConfig+0x216>
 8002b24:	2304      	movs	r3, #4
 8002b26:	77fb      	strb	r3, [r7, #31]
 8002b28:	e085      	b.n	8002c36 <UART_SetConfig+0x216>
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	77fb      	strb	r3, [r7, #31]
 8002b2e:	e082      	b.n	8002c36 <UART_SetConfig+0x216>
 8002b30:	2310      	movs	r3, #16
 8002b32:	77fb      	strb	r3, [r7, #31]
 8002b34:	e07f      	b.n	8002c36 <UART_SetConfig+0x216>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a82      	ldr	r2, [pc, #520]	@ (8002d44 <UART_SetConfig+0x324>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d124      	bne.n	8002b8a <UART_SetConfig+0x16a>
 8002b40:	4b7e      	ldr	r3, [pc, #504]	@ (8002d3c <UART_SetConfig+0x31c>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002b48:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b4c:	d011      	beq.n	8002b72 <UART_SetConfig+0x152>
 8002b4e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b52:	d817      	bhi.n	8002b84 <UART_SetConfig+0x164>
 8002b54:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b58:	d011      	beq.n	8002b7e <UART_SetConfig+0x15e>
 8002b5a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b5e:	d811      	bhi.n	8002b84 <UART_SetConfig+0x164>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <UART_SetConfig+0x14c>
 8002b64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b68:	d006      	beq.n	8002b78 <UART_SetConfig+0x158>
 8002b6a:	e00b      	b.n	8002b84 <UART_SetConfig+0x164>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e061      	b.n	8002c36 <UART_SetConfig+0x216>
 8002b72:	2302      	movs	r3, #2
 8002b74:	77fb      	strb	r3, [r7, #31]
 8002b76:	e05e      	b.n	8002c36 <UART_SetConfig+0x216>
 8002b78:	2304      	movs	r3, #4
 8002b7a:	77fb      	strb	r3, [r7, #31]
 8002b7c:	e05b      	b.n	8002c36 <UART_SetConfig+0x216>
 8002b7e:	2308      	movs	r3, #8
 8002b80:	77fb      	strb	r3, [r7, #31]
 8002b82:	e058      	b.n	8002c36 <UART_SetConfig+0x216>
 8002b84:	2310      	movs	r3, #16
 8002b86:	77fb      	strb	r3, [r7, #31]
 8002b88:	e055      	b.n	8002c36 <UART_SetConfig+0x216>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002d48 <UART_SetConfig+0x328>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d124      	bne.n	8002bde <UART_SetConfig+0x1be>
 8002b94:	4b69      	ldr	r3, [pc, #420]	@ (8002d3c <UART_SetConfig+0x31c>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b98:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002b9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ba0:	d011      	beq.n	8002bc6 <UART_SetConfig+0x1a6>
 8002ba2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ba6:	d817      	bhi.n	8002bd8 <UART_SetConfig+0x1b8>
 8002ba8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bac:	d011      	beq.n	8002bd2 <UART_SetConfig+0x1b2>
 8002bae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bb2:	d811      	bhi.n	8002bd8 <UART_SetConfig+0x1b8>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <UART_SetConfig+0x1a0>
 8002bb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bbc:	d006      	beq.n	8002bcc <UART_SetConfig+0x1ac>
 8002bbe:	e00b      	b.n	8002bd8 <UART_SetConfig+0x1b8>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e037      	b.n	8002c36 <UART_SetConfig+0x216>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	77fb      	strb	r3, [r7, #31]
 8002bca:	e034      	b.n	8002c36 <UART_SetConfig+0x216>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	77fb      	strb	r3, [r7, #31]
 8002bd0:	e031      	b.n	8002c36 <UART_SetConfig+0x216>
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	77fb      	strb	r3, [r7, #31]
 8002bd6:	e02e      	b.n	8002c36 <UART_SetConfig+0x216>
 8002bd8:	2310      	movs	r3, #16
 8002bda:	77fb      	strb	r3, [r7, #31]
 8002bdc:	e02b      	b.n	8002c36 <UART_SetConfig+0x216>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a5a      	ldr	r2, [pc, #360]	@ (8002d4c <UART_SetConfig+0x32c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d124      	bne.n	8002c32 <UART_SetConfig+0x212>
 8002be8:	4b54      	ldr	r3, [pc, #336]	@ (8002d3c <UART_SetConfig+0x31c>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bec:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002bf0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bf4:	d011      	beq.n	8002c1a <UART_SetConfig+0x1fa>
 8002bf6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bfa:	d817      	bhi.n	8002c2c <UART_SetConfig+0x20c>
 8002bfc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c00:	d011      	beq.n	8002c26 <UART_SetConfig+0x206>
 8002c02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c06:	d811      	bhi.n	8002c2c <UART_SetConfig+0x20c>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <UART_SetConfig+0x1f4>
 8002c0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c10:	d006      	beq.n	8002c20 <UART_SetConfig+0x200>
 8002c12:	e00b      	b.n	8002c2c <UART_SetConfig+0x20c>
 8002c14:	2300      	movs	r3, #0
 8002c16:	77fb      	strb	r3, [r7, #31]
 8002c18:	e00d      	b.n	8002c36 <UART_SetConfig+0x216>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	77fb      	strb	r3, [r7, #31]
 8002c1e:	e00a      	b.n	8002c36 <UART_SetConfig+0x216>
 8002c20:	2304      	movs	r3, #4
 8002c22:	77fb      	strb	r3, [r7, #31]
 8002c24:	e007      	b.n	8002c36 <UART_SetConfig+0x216>
 8002c26:	2308      	movs	r3, #8
 8002c28:	77fb      	strb	r3, [r7, #31]
 8002c2a:	e004      	b.n	8002c36 <UART_SetConfig+0x216>
 8002c2c:	2310      	movs	r3, #16
 8002c2e:	77fb      	strb	r3, [r7, #31]
 8002c30:	e001      	b.n	8002c36 <UART_SetConfig+0x216>
 8002c32:	2310      	movs	r3, #16
 8002c34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c3e:	d15b      	bne.n	8002cf8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8002c40:	7ffb      	ldrb	r3, [r7, #31]
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d827      	bhi.n	8002c96 <UART_SetConfig+0x276>
 8002c46:	a201      	add	r2, pc, #4	@ (adr r2, 8002c4c <UART_SetConfig+0x22c>)
 8002c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4c:	08002c71 	.word	0x08002c71
 8002c50:	08002c79 	.word	0x08002c79
 8002c54:	08002c81 	.word	0x08002c81
 8002c58:	08002c97 	.word	0x08002c97
 8002c5c:	08002c87 	.word	0x08002c87
 8002c60:	08002c97 	.word	0x08002c97
 8002c64:	08002c97 	.word	0x08002c97
 8002c68:	08002c97 	.word	0x08002c97
 8002c6c:	08002c8f 	.word	0x08002c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c70:	f7ff f9b0 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8002c74:	61b8      	str	r0, [r7, #24]
        break;
 8002c76:	e013      	b.n	8002ca0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c78:	f7ff f9ce 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 8002c7c:	61b8      	str	r0, [r7, #24]
        break;
 8002c7e:	e00f      	b.n	8002ca0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c80:	4b33      	ldr	r3, [pc, #204]	@ (8002d50 <UART_SetConfig+0x330>)
 8002c82:	61bb      	str	r3, [r7, #24]
        break;
 8002c84:	e00c      	b.n	8002ca0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c86:	f7ff f945 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002c8a:	61b8      	str	r0, [r7, #24]
        break;
 8002c8c:	e008      	b.n	8002ca0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c92:	61bb      	str	r3, [r7, #24]
        break;
 8002c94:	e004      	b.n	8002ca0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	77bb      	strb	r3, [r7, #30]
        break;
 8002c9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8082 	beq.w	8002dac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	005a      	lsls	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	441a      	add	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b0f      	cmp	r3, #15
 8002cc2:	d916      	bls.n	8002cf2 <UART_SetConfig+0x2d2>
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cca:	d212      	bcs.n	8002cf2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	f023 030f 	bic.w	r3, r3, #15
 8002cd4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	89fb      	ldrh	r3, [r7, #14]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	89fa      	ldrh	r2, [r7, #14]
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	e05c      	b.n	8002dac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	77bb      	strb	r3, [r7, #30]
 8002cf6:	e059      	b.n	8002dac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cf8:	7ffb      	ldrb	r3, [r7, #31]
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d835      	bhi.n	8002d6a <UART_SetConfig+0x34a>
 8002cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8002d04 <UART_SetConfig+0x2e4>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d29 	.word	0x08002d29
 8002d08:	08002d31 	.word	0x08002d31
 8002d0c:	08002d55 	.word	0x08002d55
 8002d10:	08002d6b 	.word	0x08002d6b
 8002d14:	08002d5b 	.word	0x08002d5b
 8002d18:	08002d6b 	.word	0x08002d6b
 8002d1c:	08002d6b 	.word	0x08002d6b
 8002d20:	08002d6b 	.word	0x08002d6b
 8002d24:	08002d63 	.word	0x08002d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d28:	f7ff f954 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8002d2c:	61b8      	str	r0, [r7, #24]
        break;
 8002d2e:	e021      	b.n	8002d74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d30:	f7ff f972 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 8002d34:	61b8      	str	r0, [r7, #24]
        break;
 8002d36:	e01d      	b.n	8002d74 <UART_SetConfig+0x354>
 8002d38:	40013800 	.word	0x40013800
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40004400 	.word	0x40004400
 8002d44:	40004800 	.word	0x40004800
 8002d48:	40004c00 	.word	0x40004c00
 8002d4c:	40005000 	.word	0x40005000
 8002d50:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc4 <UART_SetConfig+0x3a4>)
 8002d56:	61bb      	str	r3, [r7, #24]
        break;
 8002d58:	e00c      	b.n	8002d74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d5a:	f7ff f8db 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002d5e:	61b8      	str	r0, [r7, #24]
        break;
 8002d60:	e008      	b.n	8002d74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d66:	61bb      	str	r3, [r7, #24]
        break;
 8002d68:	e004      	b.n	8002d74 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	77bb      	strb	r3, [r7, #30]
        break;
 8002d72:	bf00      	nop
    }

    if (pclk != 0U)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d018      	beq.n	8002dac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	085a      	lsrs	r2, r3, #1
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	441a      	add	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b0f      	cmp	r3, #15
 8002d92:	d909      	bls.n	8002da8 <UART_SetConfig+0x388>
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d9a:	d205      	bcs.n	8002da8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	e001      	b.n	8002dac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002db8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	007a1200 	.word	0x007a1200

08002dc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01a      	beq.n	8002ede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ec6:	d10a      	bne.n	8002ede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
  }
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b098      	sub	sp, #96	@ 0x60
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f1c:	f7fd fb6a 	bl	80005f4 <HAL_GetTick>
 8002f20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d12e      	bne.n	8002f8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f88c 	bl	800305c <UART_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d021      	beq.n	8002f8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f52:	e853 3f00 	ldrex	r3, [r3]
 8002f56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e6      	bne.n	8002f4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e062      	b.n	8003054 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d149      	bne.n	8003030 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f856 	bl	800305c <UART_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d03c      	beq.n	8003030 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	623b      	str	r3, [r7, #32]
   return(result);
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fdc:	e841 2300 	strex	r3, r2, [r1]
 8002fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e6      	bne.n	8002fb6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3308      	adds	r3, #8
 8002fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	e853 3f00 	ldrex	r3, [r3]
 8002ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3308      	adds	r3, #8
 8003006:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003008:	61fa      	str	r2, [r7, #28]
 800300a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300c:	69b9      	ldr	r1, [r7, #24]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	617b      	str	r3, [r7, #20]
   return(result);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e5      	bne.n	8002fe8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e011      	b.n	8003054 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3758      	adds	r7, #88	@ 0x58
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306c:	e04f      	b.n	800310e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d04b      	beq.n	800310e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fd fabd 	bl	80005f4 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <UART_WaitOnFlagUntilTimeout+0x30>
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e04e      	b.n	800312e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	d037      	beq.n	800310e <UART_WaitOnFlagUntilTimeout+0xb2>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b80      	cmp	r3, #128	@ 0x80
 80030a2:	d034      	beq.n	800310e <UART_WaitOnFlagUntilTimeout+0xb2>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b40      	cmp	r3, #64	@ 0x40
 80030a8:	d031      	beq.n	800310e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d110      	bne.n	80030da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2208      	movs	r2, #8
 80030be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f8ed 	bl	80032a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2208      	movs	r2, #8
 80030ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e029      	b.n	800312e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030e8:	d111      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f8d3 	bl	80032a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e00f      	b.n	800312e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4013      	ands	r3, r2
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	429a      	cmp	r2, r3
 800311c:	bf0c      	ite	eq
 800311e:	2301      	moveq	r3, #1
 8003120:	2300      	movne	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	429a      	cmp	r2, r3
 800312a:	d0a0      	beq.n	800306e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003138:	b480      	push	{r7}
 800313a:	b097      	sub	sp, #92	@ 0x5c
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	4613      	mov	r3, r2
 8003144:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	88fa      	ldrh	r2, [r7, #6]
 8003150:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	88fa      	ldrh	r2, [r7, #6]
 8003158:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800316a:	d10e      	bne.n	800318a <UART_Start_Receive_IT+0x52>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <UART_Start_Receive_IT+0x48>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800317a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800317e:	e01a      	b.n	80031b6 <UART_Start_Receive_IT+0x7e>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	22ff      	movs	r2, #255	@ 0xff
 8003184:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003188:	e015      	b.n	80031b6 <UART_Start_Receive_IT+0x7e>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10d      	bne.n	80031ae <UART_Start_Receive_IT+0x76>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d104      	bne.n	80031a4 <UART_Start_Receive_IT+0x6c>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	22ff      	movs	r2, #255	@ 0xff
 800319e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80031a2:	e008      	b.n	80031b6 <UART_Start_Receive_IT+0x7e>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	227f      	movs	r2, #127	@ 0x7f
 80031a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80031ac:	e003      	b.n	80031b6 <UART_Start_Receive_IT+0x7e>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2222      	movs	r2, #34	@ 0x22
 80031c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3308      	adds	r3, #8
 80031cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3308      	adds	r3, #8
 80031e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80031e6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80031e8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80031ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031ee:	e841 2300 	strex	r3, r2, [r1]
 80031f2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80031f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e5      	bne.n	80031c6 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003202:	d107      	bne.n	8003214 <UART_Start_Receive_IT+0xdc>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d103      	bne.n	8003214 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4a22      	ldr	r2, [pc, #136]	@ (8003298 <UART_Start_Receive_IT+0x160>)
 8003210:	669a      	str	r2, [r3, #104]	@ 0x68
 8003212:	e002      	b.n	800321a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a21      	ldr	r2, [pc, #132]	@ (800329c <UART_Start_Receive_IT+0x164>)
 8003218:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d019      	beq.n	8003256 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003240:	637b      	str	r3, [r7, #52]	@ 0x34
 8003242:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003246:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800324e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e6      	bne.n	8003222 <UART_Start_Receive_IT+0xea>
 8003254:	e018      	b.n	8003288 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	613b      	str	r3, [r7, #16]
   return(result);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f043 0320 	orr.w	r3, r3, #32
 800326a:	653b      	str	r3, [r7, #80]	@ 0x50
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003274:	623b      	str	r3, [r7, #32]
 8003276:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	69f9      	ldr	r1, [r7, #28]
 800327a:	6a3a      	ldr	r2, [r7, #32]
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	61bb      	str	r3, [r7, #24]
   return(result);
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e6      	bne.n	8003256 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	375c      	adds	r7, #92	@ 0x5c
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	08003591 	.word	0x08003591
 800329c:	080033e9 	.word	0x080033e9

080032a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b095      	sub	sp, #84	@ 0x54
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b0:	e853 3f00 	ldrex	r3, [r3]
 80032b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80032c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032ce:	e841 2300 	strex	r3, r2, [r1]
 80032d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1e6      	bne.n	80032a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	3308      	adds	r3, #8
 80032e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	e853 3f00 	ldrex	r3, [r3]
 80032e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3308      	adds	r3, #8
 80032f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e5      	bne.n	80032da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003312:	2b01      	cmp	r3, #1
 8003314:	d118      	bne.n	8003348 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	e853 3f00 	ldrex	r3, [r3]
 8003322:	60bb      	str	r3, [r7, #8]
   return(result);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f023 0310 	bic.w	r3, r3, #16
 800332a:	647b      	str	r3, [r7, #68]	@ 0x44
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003338:	6979      	ldr	r1, [r7, #20]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	e841 2300 	strex	r3, r2, [r1]
 8003340:	613b      	str	r3, [r7, #16]
   return(result);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e6      	bne.n	8003316 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800335c:	bf00      	nop
 800335e:	3754      	adds	r7, #84	@ 0x54
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f7ff fb40 	bl	8002a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	6979      	ldr	r1, [r7, #20]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	613b      	str	r3, [r7, #16]
   return(result);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e6      	bne.n	800339c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff fb02 	bl	80029e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033e0:	bf00      	nop
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b09c      	sub	sp, #112	@ 0x70
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80033f6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003400:	2b22      	cmp	r3, #34	@ 0x22
 8003402:	f040 80b9 	bne.w	8003578 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800340c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003410:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003414:	b2d9      	uxtb	r1, r3
 8003416:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800341a:	b2da      	uxtb	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003420:	400a      	ands	r2, r1
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 809c 	bne.w	8003588 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800345e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800346e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003470:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003472:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003474:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800347c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1e6      	bne.n	8003450 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3308      	adds	r3, #8
 8003488:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348c:	e853 3f00 	ldrex	r3, [r3]
 8003490:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	667b      	str	r3, [r7, #100]	@ 0x64
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3308      	adds	r3, #8
 80034a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80034a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80034a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e5      	bne.n	8003482 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d018      	beq.n	800350a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	623b      	str	r3, [r7, #32]
   return(result);
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80034f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e6      	bne.n	80034d8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350e:	2b01      	cmp	r3, #1
 8003510:	d12e      	bne.n	8003570 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	e853 3f00 	ldrex	r3, [r3]
 8003524:	60fb      	str	r3, [r7, #12]
   return(result);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f023 0310 	bic.w	r3, r3, #16
 800352c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	69b9      	ldr	r1, [r7, #24]
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	e841 2300 	strex	r3, r2, [r1]
 8003542:	617b      	str	r3, [r7, #20]
   return(result);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e6      	bne.n	8003518 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b10      	cmp	r3, #16
 8003556:	d103      	bne.n	8003560 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2210      	movs	r2, #16
 800355e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003566:	4619      	mov	r1, r3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7fc fee1 	bl	8000330 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800356e:	e00b      	b.n	8003588 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fa41 	bl	80029f8 <HAL_UART_RxCpltCallback>
}
 8003576:	e007      	b.n	8003588 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0208 	orr.w	r2, r2, #8
 8003586:	619a      	str	r2, [r3, #24]
}
 8003588:	bf00      	nop
 800358a:	3770      	adds	r7, #112	@ 0x70
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b09c      	sub	sp, #112	@ 0x70
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800359e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035a8:	2b22      	cmp	r3, #34	@ 0x22
 80035aa:	f040 80b9 	bne.w	8003720 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80035b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80035be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80035c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80035c6:	4013      	ands	r3, r2
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d2:	1c9a      	adds	r2, r3, #2
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f040 809c 	bne.w	8003730 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003600:	e853 3f00 	ldrex	r3, [r3]
 8003604:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800360c:	667b      	str	r3, [r7, #100]	@ 0x64
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003616:	657b      	str	r3, [r7, #84]	@ 0x54
 8003618:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800361c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e6      	bne.n	80035f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3308      	adds	r3, #8
 8003630:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800363a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	663b      	str	r3, [r7, #96]	@ 0x60
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3308      	adds	r3, #8
 8003648:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800364a:	643a      	str	r2, [r7, #64]	@ 0x40
 800364c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003650:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e5      	bne.n	800362a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d018      	beq.n	80036b2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	61fb      	str	r3, [r7, #28]
   return(result);
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003694:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800369e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036a0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036a6:	e841 2300 	strex	r3, r2, [r1]
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1e6      	bne.n	8003680 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d12e      	bne.n	8003718 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	e853 3f00 	ldrex	r3, [r3]
 80036cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f023 0310 	bic.w	r3, r3, #16
 80036d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036de:	61bb      	str	r3, [r7, #24]
 80036e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	6979      	ldr	r1, [r7, #20]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	613b      	str	r3, [r7, #16]
   return(result);
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e6      	bne.n	80036c0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b10      	cmp	r3, #16
 80036fe:	d103      	bne.n	8003708 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2210      	movs	r2, #16
 8003706:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800370e:	4619      	mov	r1, r3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7fc fe0d 	bl	8000330 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003716:	e00b      	b.n	8003730 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff f96d 	bl	80029f8 <HAL_UART_RxCpltCallback>
}
 800371e:	e007      	b.n	8003730 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0208 	orr.w	r2, r2, #8
 800372e:	619a      	str	r2, [r3, #24]
}
 8003730:	bf00      	nop
 8003732:	3770      	adds	r7, #112	@ 0x70
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	@ 0x30
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003766:	2b20      	cmp	r3, #32
 8003768:	d13b      	bne.n	80037e2 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e034      	b.n	80037e4 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	461a      	mov	r2, r3
 800378a:	68b9      	ldr	r1, [r7, #8]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f7ff fcd3 	bl	8003138 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003796:	2b01      	cmp	r3, #1
 8003798:	d11d      	bne.n	80037d6 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2210      	movs	r2, #16
 80037a0:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	617b      	str	r3, [r7, #20]
   return(result);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f043 0310 	orr.w	r3, r3, #16
 80037b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	6a39      	ldr	r1, [r7, #32]
 80037c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e6      	bne.n	80037a2 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80037d4:	e002      	b.n	80037dc <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80037dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037e0:	e000      	b.n	80037e4 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80037e2:	2302      	movs	r3, #2
  }
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3730      	adds	r7, #48	@ 0x30
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <memset>:
 80037ec:	4402      	add	r2, r0
 80037ee:	4603      	mov	r3, r0
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d100      	bne.n	80037f6 <memset+0xa>
 80037f4:	4770      	bx	lr
 80037f6:	f803 1b01 	strb.w	r1, [r3], #1
 80037fa:	e7f9      	b.n	80037f0 <memset+0x4>

080037fc <__libc_init_array>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003834 <__libc_init_array+0x38>)
 8003800:	4c0d      	ldr	r4, [pc, #52]	@ (8003838 <__libc_init_array+0x3c>)
 8003802:	1b64      	subs	r4, r4, r5
 8003804:	10a4      	asrs	r4, r4, #2
 8003806:	2600      	movs	r6, #0
 8003808:	42a6      	cmp	r6, r4
 800380a:	d109      	bne.n	8003820 <__libc_init_array+0x24>
 800380c:	4d0b      	ldr	r5, [pc, #44]	@ (800383c <__libc_init_array+0x40>)
 800380e:	4c0c      	ldr	r4, [pc, #48]	@ (8003840 <__libc_init_array+0x44>)
 8003810:	f000 f818 	bl	8003844 <_init>
 8003814:	1b64      	subs	r4, r4, r5
 8003816:	10a4      	asrs	r4, r4, #2
 8003818:	2600      	movs	r6, #0
 800381a:	42a6      	cmp	r6, r4
 800381c:	d105      	bne.n	800382a <__libc_init_array+0x2e>
 800381e:	bd70      	pop	{r4, r5, r6, pc}
 8003820:	f855 3b04 	ldr.w	r3, [r5], #4
 8003824:	4798      	blx	r3
 8003826:	3601      	adds	r6, #1
 8003828:	e7ee      	b.n	8003808 <__libc_init_array+0xc>
 800382a:	f855 3b04 	ldr.w	r3, [r5], #4
 800382e:	4798      	blx	r3
 8003830:	3601      	adds	r6, #1
 8003832:	e7f2      	b.n	800381a <__libc_init_array+0x1e>
 8003834:	08003894 	.word	0x08003894
 8003838:	08003894 	.word	0x08003894
 800383c:	08003894 	.word	0x08003894
 8003840:	08003898 	.word	0x08003898

08003844 <_init>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	bf00      	nop
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr

08003850 <_fini>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	bf00      	nop
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr
