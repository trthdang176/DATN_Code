
testt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a18c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800a320  0800a320  0000b320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a794  0800a794  0000c268  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a794  0800a794  0000b794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a79c  0800a79c  0000c268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a79c  0800a79c  0000b79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7a0  0800a7a0  0000b7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000268  20000000  0800a7a4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c268  2**0
                  CONTENTS
 10 .bss          0000041c  20000268  20000268  0000c268  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000684  20000684  0000c268  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c268  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e53  00000000  00000000  0000c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002af1  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00022be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e7d  00000000  00000000  00023e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023882  00000000  00000000  00024ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fc8  00000000  00000000  0004854f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3629  00000000  00000000  0005e517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00131b40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064d0  00000000  00000000  00131b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00138054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a304 	.word	0x0800a304

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	0800a304 	.word	0x0800a304

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <Control_IC_begin>:

uint8_t SHIFT_ICx[Shift_IC_MAX] = {Shift_IC1,Shift_IC2,Shift_IC3};
GPIO_TypeDef* GPIO_PORT_IC[] = {GPIOE,GPIOE,GPIOB};

void Control_IC_begin(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    // Enable Shift Register IC
    // HAL_GPIO_WritePin(GPIO_PORT_IC[0],MRx[0],GPIO_PIN_SET);
    // HAL_GPIO_WritePin(GPIO_PORT_IC[1],MRx[1],GPIO_PIN_SET);
    HAL_GPIO_WritePin(GPIO_PORT_IC[2],MRx[2],GPIO_PIN_SET);
 8001024:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <Control_IC_begin+0x48>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	4a10      	ldr	r2, [pc, #64]	@ (800106c <Control_IC_begin+0x4c>)
 800102a:	8891      	ldrh	r1, [r2, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	4618      	mov	r0, r3
 8001030:	f002 f800 	bl	8003034 <HAL_GPIO_WritePin>

    // Enable Shift Level IC 
    HAL_GPIO_WritePin(TXS_OE1_GPIO_Port,TXS_OE1_Pin,GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	2180      	movs	r1, #128	@ 0x80
 8001038:	480d      	ldr	r0, [pc, #52]	@ (8001070 <Control_IC_begin+0x50>)
 800103a:	f001 fffb 	bl	8003034 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TXS_OE2_GPIO_Port,TXS_OE2_Pin,GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001044:	480b      	ldr	r0, [pc, #44]	@ (8001074 <Control_IC_begin+0x54>)
 8001046:	f001 fff5 	bl	8003034 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TXS_OE3_GPIO_Port,TXS_OE3_Pin,GPIO_PIN_SET);
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001050:	4809      	ldr	r0, [pc, #36]	@ (8001078 <Control_IC_begin+0x58>)
 8001052:	f001 ffef 	bl	8003034 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TXS_OE4_GPIO_Port,TXS_OE4_Pin,GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <Control_IC_begin+0x54>)
 800105e:	f001 ffe9 	bl	8003034 <HAL_GPIO_WritePin>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000068 	.word	0x20000068
 800106c:	20000018 	.word	0x20000018
 8001070:	40021000 	.word	0x40021000
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40020800 	.word	0x40020800

0800107c <shift_out>:

void shift_out(uint8_t num, uint8_t data)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	460a      	mov	r2, r1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	71bb      	strb	r3, [r7, #6]
    for(uint8_t i =0; i < 8; i++ )
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e046      	b.n	8001120 <shift_out+0xa4>
    {
        HAL_GPIO_WritePin(GPIO_PORT_IC[num],CPx[num],GPIO_PIN_RESET);   // Clock LOW
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4a26      	ldr	r2, [pc, #152]	@ (8001130 <shift_out+0xb4>)
 8001096:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4a25      	ldr	r2, [pc, #148]	@ (8001134 <shift_out+0xb8>)
 800109e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	f001 ffc5 	bl	8003034 <HAL_GPIO_WritePin>
        delay_us(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f000 fbd8 	bl	8001860 <delay_us>
        // Data
        HAL_GPIO_WritePin(GPIO_PORT_IC[num],DSAx[num], (data >> i) & 0x01 );
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001130 <shift_out+0xb4>)
 80010b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001138 <shift_out+0xbc>)
 80010bc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80010c0:	79ba      	ldrb	r2, [r7, #6]
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	fa42 f303 	asr.w	r3, r2, r3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	f001 ffaf 	bl	8003034 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIO_PORT_IC[num],DSBx[num], (data >> i) & 0x01 );
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4a15      	ldr	r2, [pc, #84]	@ (8001130 <shift_out+0xb4>)
 80010da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4a16      	ldr	r2, [pc, #88]	@ (800113c <shift_out+0xc0>)
 80010e2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80010e6:	79ba      	ldrb	r2, [r7, #6]
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	fa42 f303 	asr.w	r3, r2, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	f001 ff9c 	bl	8003034 <HAL_GPIO_WritePin>
        delay_us(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f000 fbaf 	bl	8001860 <delay_us>
        HAL_GPIO_WritePin(GPIO_PORT_IC[num],CPx[num],GPIO_PIN_SET);   // Clock HIGH
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <shift_out+0xb4>)
 8001106:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4a09      	ldr	r2, [pc, #36]	@ (8001134 <shift_out+0xb8>)
 800110e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001112:	2201      	movs	r2, #1
 8001114:	4619      	mov	r1, r3
 8001116:	f001 ff8d 	bl	8003034 <HAL_GPIO_WritePin>
    for(uint8_t i =0; i < 8; i++ )
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	3301      	adds	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b07      	cmp	r3, #7
 8001124:	d9b5      	bls.n	8001092 <shift_out+0x16>
    }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000068 	.word	0x20000068
 8001134:	20000010 	.word	0x20000010
 8001138:	20000000 	.word	0x20000000
 800113c:	20000008 	.word	0x20000008

08001140 <Latch_IC_begin>:
/**
 * @brief Control 74HC164D , the output of 74HC164D is the OE and LE of 74HC164D
 * 
 */
void Latch_IC_begin(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
    // Disable all Latch pin
	for (uint8_t i = 0; i< 6; i++) {
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	e00f      	b.n	800116c <Latch_IC_begin+0x2c>
		HAL_GPIO_WritePin(PIN_LEx[i].Port_x,PIN_LEx[i].PIN_x,GPIO_PIN_RESET);
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4a16      	ldr	r2, [pc, #88]	@ (80011a8 <Latch_IC_begin+0x68>)
 8001150:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	4a14      	ldr	r2, [pc, #80]	@ (80011a8 <Latch_IC_begin+0x68>)
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	889b      	ldrh	r3, [r3, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	4619      	mov	r1, r3
 8001162:	f001 ff67 	bl	8003034 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i< 6; i++) {
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	3301      	adds	r3, #1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b05      	cmp	r3, #5
 8001170:	d9ec      	bls.n	800114c <Latch_IC_begin+0xc>
	}

	// Disable Latch IC Output IC test
	for(uint8_t i = 0; i < 3; i++) {
 8001172:	2300      	movs	r3, #0
 8001174:	71bb      	strb	r3, [r7, #6]
 8001176:	e00f      	b.n	8001198 <Latch_IC_begin+0x58>
		HAL_GPIO_WritePin(PIN_OEx[i].Port_x,PIN_OEx[i].PIN_x,GPIO_PIN_SET);
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	4a0c      	ldr	r2, [pc, #48]	@ (80011ac <Latch_IC_begin+0x6c>)
 800117c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <Latch_IC_begin+0x6c>)
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	4413      	add	r3, r2
 8001188:	889b      	ldrh	r3, [r3, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	4619      	mov	r1, r3
 800118e:	f001 ff51 	bl	8003034 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < 3; i++) {
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	3301      	adds	r3, #1
 8001196:	71bb      	strb	r3, [r7, #6]
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d9ec      	bls.n	8001178 <Latch_IC_begin+0x38>
	}
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000038 	.word	0x20000038
 80011ac:	20000020 	.word	0x20000020

080011b0 <Control_Vcc_pin>:

void Control_Vcc_pin(uint8_t data)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
    shift_out(Shift_IC3,data);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4619      	mov	r1, r3
 80011be:	2002      	movs	r0, #2
 80011c0:	f7ff ff5c 	bl	800107c <shift_out>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d013      	beq.n	800120c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00b      	beq.n	800120c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011f4:	e000      	b.n	80011f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f9      	beq.n	80011f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001202:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800120c:	687b      	ldr	r3, [r7, #4]
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001220:	f000 fd9a 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001224:	f000 f840 	bl	80012a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001228:	f000 f9a4 	bl	8001574 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800122c:	f000 f978 	bl	8001520 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001230:	f000 f926 	bl	8001480 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001234:	f000 f8f6 	bl	8001424 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001238:	f000 f8a0 	bl	800137c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // Init STM32
  HAL_Delay(3000);
 800123c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001240:	f000 fdfc 	bl	8001e3c <HAL_Delay>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8001244:	2264      	movs	r2, #100	@ 0x64
 8001246:	4913      	ldr	r1, [pc, #76]	@ (8001294 <main+0x78>)
 8001248:	4813      	ldr	r0, [pc, #76]	@ (8001298 <main+0x7c>)
 800124a:	f003 f8c6 	bl	80043da <HAL_UARTEx_ReceiveToIdle_IT>
//  HAL_UART_Receive_IT(&huart2, dataRX, 1);
  HAL_TIM_Base_Start(&htim1);
 800124e:	4813      	ldr	r0, [pc, #76]	@ (800129c <main+0x80>)
 8001250:	f002 fcf6 	bl	8003c40 <HAL_TIM_Base_Start>

  // Init custom code
  Control_IC_begin();
 8001254:	f7ff fee4 	bl	8001020 <Control_IC_begin>

  Latch_IC_begin();
 8001258:	f7ff ff72 	bl	8001140 <Latch_IC_begin>
  Control_Vcc_pin(0XFF); // disable all vcc in pin 
 800125c:	20ff      	movs	r0, #255	@ 0xff
 800125e:	f7ff ffa7 	bl	80011b0 <Control_Vcc_pin>

  Screen_begin(&huart2);
 8001262:	480d      	ldr	r0, [pc, #52]	@ (8001298 <main+0x7c>)
 8001264:	f004 f86a 	bl	800533c <Screen_begin>
//  uint8_t testBuffer[4] = {0x11, 0x22, 0x33, 0x44};
//  HAL_UART_Transmit(&huart2, testBuffer, 4, 500);

//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
  	  HAL_CAN_Start(&hcan1);
 8001268:	480d      	ldr	r0, [pc, #52]	@ (80012a0 <main+0x84>)
 800126a:	f000 ffe7 	bl	800223c <HAL_CAN_Start>

    // Active the notification
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800126e:	2102      	movs	r1, #2
 8001270:	480b      	ldr	r0, [pc, #44]	@ (80012a0 <main+0x84>)
 8001272:	f001 f949 	bl	8002508 <HAL_CAN_ActivateNotification>

    TxHeader.DLC = 2; // data length
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <main+0x88>)
 8001278:	2202      	movs	r2, #2
 800127a:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <main+0x88>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <main+0x88>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
    //TxHeader.StdId = 0x407; // ID of sender
    TxHeader.StdId = 0x407; // ID of sender
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <main+0x88>)
 800128a:	f240 4207 	movw	r2, #1031	@ 0x407
 800128e:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <main+0x74>
 8001294:	20000390 	.word	0x20000390
 8001298:	20000348 	.word	0x20000348
 800129c:	20000300 	.word	0x20000300
 80012a0:	20000284 	.word	0x20000284
 80012a4:	200003f4 	.word	0x200003f4

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b094      	sub	sp, #80	@ 0x50
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	2230      	movs	r2, #48	@ 0x30
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f006 fa51 	bl	800775e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <SystemClock_Config+0xcc>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a27      	ldr	r2, [pc, #156]	@ (8001374 <SystemClock_Config+0xcc>)
 80012d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <SystemClock_Config+0xcc>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <SystemClock_Config+0xd0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a21      	ldr	r2, [pc, #132]	@ (8001378 <SystemClock_Config+0xd0>)
 80012f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <SystemClock_Config+0xd0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001304:	2301      	movs	r3, #1
 8001306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001308:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130e:	2302      	movs	r3, #2
 8001310:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001312:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001318:	2319      	movs	r3, #25
 800131a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800131c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001320:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001322:	2302      	movs	r3, #2
 8001324:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001326:	2304      	movs	r3, #4
 8001328:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132a:	f107 0320 	add.w	r3, r7, #32
 800132e:	4618      	mov	r0, r3
 8001330:	f001 ffde 	bl	80032f0 <HAL_RCC_OscConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800133a:	f000 faab 	bl	8001894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133e:	230f      	movs	r3, #15
 8001340:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001342:	2302      	movs	r3, #2
 8001344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800134a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800134e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001354:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2105      	movs	r1, #5
 800135c:	4618      	mov	r0, r3
 800135e:	f002 fa3f 	bl	80037e0 <HAL_RCC_ClockConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001368:	f000 fa94 	bl	8001894 <Error_Handler>
  }
}
 800136c:	bf00      	nop
 800136e:	3750      	adds	r7, #80	@ 0x50
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800
 8001378:	40007000 	.word	0x40007000

0800137c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001382:	4b26      	ldr	r3, [pc, #152]	@ (800141c <MX_CAN1_Init+0xa0>)
 8001384:	4a26      	ldr	r2, [pc, #152]	@ (8001420 <MX_CAN1_Init+0xa4>)
 8001386:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8001388:	4b24      	ldr	r3, [pc, #144]	@ (800141c <MX_CAN1_Init+0xa0>)
 800138a:	220c      	movs	r2, #12
 800138c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800138e:	4b23      	ldr	r3, [pc, #140]	@ (800141c <MX_CAN1_Init+0xa0>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001394:	4b21      	ldr	r3, [pc, #132]	@ (800141c <MX_CAN1_Init+0xa0>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <MX_CAN1_Init+0xa0>)
 800139c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013a0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <MX_CAN1_Init+0xa0>)
 80013a4:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80013a8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_CAN1_Init+0xa0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_CAN1_Init+0xa0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <MX_CAN1_Init+0xa0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <MX_CAN1_Init+0xa0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <MX_CAN1_Init+0xa0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013c8:	4b14      	ldr	r3, [pc, #80]	@ (800141c <MX_CAN1_Init+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013ce:	4813      	ldr	r0, [pc, #76]	@ (800141c <MX_CAN1_Init+0xa0>)
 80013d0:	f000 fd58 	bl	8001e84 <HAL_CAN_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80013da:	f000 fa5b 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

      canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
      canfilterconfig.FilterBank = 16;  // which filter bank to use from the assigned ones
 80013e2:	2310      	movs	r3, #16
 80013e4:	617b      	str	r3, [r7, #20]
      canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
      canfilterconfig.FilterIdHigh = 0x417<<5;
 80013ea:	f248 23e0 	movw	r3, #33504	@ 0x82e0
 80013ee:	603b      	str	r3, [r7, #0]
      canfilterconfig.FilterIdLow = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
      canfilterconfig.FilterMaskIdHigh = 0x417<<5;
 80013f4:	f248 23e0 	movw	r3, #33504	@ 0x82e0
 80013f8:	60bb      	str	r3, [r7, #8]
      canfilterconfig.FilterMaskIdLow = 0x0000;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
      canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
      canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001402:	2301      	movs	r3, #1
 8001404:	61fb      	str	r3, [r7, #28]
      canfilterconfig.SlaveStartFilterBank = 20;
 8001406:	2314      	movs	r3, #20
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24

      HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4803      	ldr	r0, [pc, #12]	@ (800141c <MX_CAN1_Init+0xa0>)
 8001410:	f000 fe34 	bl	800207c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	@ 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000284 	.word	0x20000284
 8001420:	40006400 	.word	0x40006400

08001424 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001428:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <MX_I2C1_Init+0x50>)
 800142a:	4a13      	ldr	r2, [pc, #76]	@ (8001478 <MX_I2C1_Init+0x54>)
 800142c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <MX_I2C1_Init+0x50>)
 8001430:	4a12      	ldr	r2, [pc, #72]	@ (800147c <MX_I2C1_Init+0x58>)
 8001432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001434:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <MX_I2C1_Init+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <MX_I2C1_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <MX_I2C1_Init+0x50>)
 8001442:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001446:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001454:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <MX_I2C1_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <MX_I2C1_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001460:	4804      	ldr	r0, [pc, #16]	@ (8001474 <MX_I2C1_Init+0x50>)
 8001462:	f001 fe01 	bl	8003068 <HAL_I2C_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800146c:	f000 fa12 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200002ac 	.word	0x200002ac
 8001478:	40005400 	.word	0x40005400
 800147c:	000186a0 	.word	0x000186a0

08001480 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800149c:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <MX_TIM1_Init+0x98>)
 800149e:	4a1f      	ldr	r2, [pc, #124]	@ (800151c <MX_TIM1_Init+0x9c>)
 80014a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168 -1;
 80014a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <MX_TIM1_Init+0x98>)
 80014a4:	22a7      	movs	r2, #167	@ 0xa7
 80014a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <MX_TIM1_Init+0x98>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF - 1;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <MX_TIM1_Init+0x98>)
 80014b0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80014b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <MX_TIM1_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014bc:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <MX_TIM1_Init+0x98>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <MX_TIM1_Init+0x98>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014c8:	4813      	ldr	r0, [pc, #76]	@ (8001518 <MX_TIM1_Init+0x98>)
 80014ca:	f002 fb69 	bl	8003ba0 <HAL_TIM_Base_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014d4:	f000 f9de 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	4619      	mov	r1, r3
 80014e4:	480c      	ldr	r0, [pc, #48]	@ (8001518 <MX_TIM1_Init+0x98>)
 80014e6:	f002 fc13 	bl	8003d10 <HAL_TIM_ConfigClockSource>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014f0:	f000 f9d0 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	@ (8001518 <MX_TIM1_Init+0x98>)
 8001502:	f002 fe13 	bl	800412c <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800150c:	f000 f9c2 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000300 	.word	0x20000300
 800151c:	40010000 	.word	0x40010000

08001520 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_USART2_UART_Init+0x4c>)
 8001526:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <MX_USART2_UART_Init+0x50>)
 8001528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <MX_USART2_UART_Init+0x4c>)
 800152c:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_USART2_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_USART2_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <MX_USART2_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_USART2_UART_Init+0x4c>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_USART2_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_USART2_UART_Init+0x4c>)
 8001558:	f002 fe64 	bl	8004224 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001562:	f000 f997 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000348 	.word	0x20000348
 8001570:	40004400 	.word	0x40004400

08001574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	@ 0x30
 8001578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	4b82      	ldr	r3, [pc, #520]	@ (8001798 <MX_GPIO_Init+0x224>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a81      	ldr	r2, [pc, #516]	@ (8001798 <MX_GPIO_Init+0x224>)
 8001594:	f043 0310 	orr.w	r3, r3, #16
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b7f      	ldr	r3, [pc, #508]	@ (8001798 <MX_GPIO_Init+0x224>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	4b7b      	ldr	r3, [pc, #492]	@ (8001798 <MX_GPIO_Init+0x224>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a7a      	ldr	r2, [pc, #488]	@ (8001798 <MX_GPIO_Init+0x224>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b78      	ldr	r3, [pc, #480]	@ (8001798 <MX_GPIO_Init+0x224>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	4b74      	ldr	r3, [pc, #464]	@ (8001798 <MX_GPIO_Init+0x224>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a73      	ldr	r2, [pc, #460]	@ (8001798 <MX_GPIO_Init+0x224>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b71      	ldr	r3, [pc, #452]	@ (8001798 <MX_GPIO_Init+0x224>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001798 <MX_GPIO_Init+0x224>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001798 <MX_GPIO_Init+0x224>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001798 <MX_GPIO_Init+0x224>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	4b66      	ldr	r3, [pc, #408]	@ (8001798 <MX_GPIO_Init+0x224>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a65      	ldr	r2, [pc, #404]	@ (8001798 <MX_GPIO_Init+0x224>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b63      	ldr	r3, [pc, #396]	@ (8001798 <MX_GPIO_Init+0x224>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4b5f      	ldr	r3, [pc, #380]	@ (8001798 <MX_GPIO_Init+0x224>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a5e      	ldr	r2, [pc, #376]	@ (8001798 <MX_GPIO_Init+0x224>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b5c      	ldr	r3, [pc, #368]	@ (8001798 <MX_GPIO_Init+0x224>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|TXS_OE1_Pin|OUT8_Pin|OUT7_Pin
 8001632:	2200      	movs	r2, #0
 8001634:	f64f 7184 	movw	r1, #65412	@ 0xff84
 8001638:	4858      	ldr	r0, [pc, #352]	@ (800179c <MX_GPIO_Init+0x228>)
 800163a:	f001 fcfb 	bl	8003034 <HAL_GPIO_WritePin>
                          |OUT6_Pin|OUT5_Pin|OUT4_Pin|OUT3_Pin
                          |OUT2_Pin|OUT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT12_Pin|OUT11_Pin|OUT10_Pin|OUT9_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8001644:	4856      	ldr	r0, [pc, #344]	@ (80017a0 <MX_GPIO_Init+0x22c>)
 8001646:	f001 fcf5 	bl	8003034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TXS_OE2_Pin|TXS_OE4_Pin|OUT20_Pin|OUT19_Pin
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001650:	4854      	ldr	r0, [pc, #336]	@ (80017a4 <MX_GPIO_Init+0x230>)
 8001652:	f001 fcef 	bl	8003034 <HAL_GPIO_WritePin>
                          |OUT18_Pin|OUT17_Pin|OUT16_Pin|OUT15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT14_Pin|OUT13_Pin|GPIO_PIN_8|GPIO_PIN_10
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 615c 	mov.w	r1, #3520	@ 0xdc0
 800165c:	4852      	ldr	r0, [pc, #328]	@ (80017a8 <MX_GPIO_Init+0x234>)
 800165e:	f001 fce9 	bl	8003034 <HAL_GPIO_WritePin>
                          |TXS_OE3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001668:	4850      	ldr	r0, [pc, #320]	@ (80017ac <MX_GPIO_Init+0x238>)
 800166a:	f001 fce3 	bl	8003034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800166e:	2304      	movs	r3, #4
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	4845      	ldr	r0, [pc, #276]	@ (800179c <MX_GPIO_Init+0x228>)
 8001686:	f001 fb39 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : TXS_OE1_Pin */
  GPIO_InitStruct.Pin = TXS_OE1_Pin;
 800168a:	2380      	movs	r3, #128	@ 0x80
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001696:	2301      	movs	r3, #1
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TXS_OE1_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	483e      	ldr	r0, [pc, #248]	@ (800179c <MX_GPIO_Init+0x228>)
 80016a2:	f001 fb2b 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT8_Pin OUT7_Pin OUT6_Pin OUT5_Pin
                           OUT4_Pin OUT3_Pin OUT2_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT8_Pin|OUT7_Pin|OUT6_Pin|OUT5_Pin
 80016a6:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80016aa:	61fb      	str	r3, [r7, #28]
                          |OUT4_Pin|OUT3_Pin|OUT2_Pin|OUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b4:	2302      	movs	r3, #2
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	4837      	ldr	r0, [pc, #220]	@ (800179c <MX_GPIO_Init+0x228>)
 80016c0:	f001 fb1c 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT12_Pin OUT11_Pin OUT10_Pin OUT9_Pin */
  GPIO_InitStruct.Pin = OUT12_Pin|OUT11_Pin|OUT10_Pin|OUT9_Pin;
 80016c4:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d2:	2302      	movs	r3, #2
 80016d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4830      	ldr	r0, [pc, #192]	@ (80017a0 <MX_GPIO_Init+0x22c>)
 80016de:	f001 fb0d 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : TXS_OE2_Pin TXS_OE4_Pin */
  GPIO_InitStruct.Pin = TXS_OE2_Pin|TXS_OE4_Pin;
 80016e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016f0:	2301      	movs	r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	482a      	ldr	r0, [pc, #168]	@ (80017a4 <MX_GPIO_Init+0x230>)
 80016fc:	f001 fafe 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT20_Pin OUT19_Pin OUT18_Pin OUT17_Pin
                           OUT16_Pin OUT15_Pin */
  GPIO_InitStruct.Pin = OUT20_Pin|OUT19_Pin|OUT18_Pin|OUT17_Pin
 8001700:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001704:	61fb      	str	r3, [r7, #28]
                          |OUT16_Pin|OUT15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170e:	2302      	movs	r3, #2
 8001710:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4822      	ldr	r0, [pc, #136]	@ (80017a4 <MX_GPIO_Init+0x230>)
 800171a:	f001 faef 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT14_Pin OUT13_Pin PC8 PC10 */
  GPIO_InitStruct.Pin = OUT14_Pin|OUT13_Pin|GPIO_PIN_8|GPIO_PIN_10;
 800171e:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172c:	2302      	movs	r3, #2
 800172e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	481c      	ldr	r0, [pc, #112]	@ (80017a8 <MX_GPIO_Init+0x234>)
 8001738:	f001 fae0 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800173c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800174a:	2302      	movs	r3, #2
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4815      	ldr	r0, [pc, #84]	@ (80017ac <MX_GPIO_Init+0x238>)
 8001756:	f001 fad1 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : TXS_OE3_Pin */
  GPIO_InitStruct.Pin = TXS_OE3_Pin;
 800175a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001768:	2301      	movs	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TXS_OE3_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <MX_GPIO_Init+0x234>)
 8001774:	f001 fac2 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN7_Pin IN6_Pin IN5_Pin IN4_Pin
                           IN3_Pin IN2_Pin IN1_Pin IN0_Pin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin
 8001778:	23ff      	movs	r3, #255	@ 0xff
 800177a:	61fb      	str	r3, [r7, #28]
                          |IN3_Pin|IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <MX_GPIO_Init+0x230>)
 800178c:	f001 fab6 	bl	8002cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001790:	bf00      	nop
 8001792:	3730      	adds	r7, #48	@ 0x30
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	40021000 	.word	0x40021000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40020000 	.word	0x40020000

080017b0 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <HAL_UARTEx_RxEventCallback+0x3c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d10c      	bne.n	80017e2 <HAL_UARTEx_RxEventCallback+0x32>

		// Call to callback function screen
		Screen_RX_data(dataRX);
 80017c8:	4809      	ldr	r0, [pc, #36]	@ (80017f0 <HAL_UARTEx_RxEventCallback+0x40>)
 80017ca:	f003 fe03 	bl	80053d4 <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 80017ce:	2264      	movs	r2, #100	@ 0x64
 80017d0:	2100      	movs	r1, #0
 80017d2:	4807      	ldr	r0, [pc, #28]	@ (80017f0 <HAL_UARTEx_RxEventCallback+0x40>)
 80017d4:	f005 ffc3 	bl	800775e <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 80017d8:	2264      	movs	r2, #100	@ 0x64
 80017da:	4905      	ldr	r1, [pc, #20]	@ (80017f0 <HAL_UARTEx_RxEventCallback+0x40>)
 80017dc:	4803      	ldr	r0, [pc, #12]	@ (80017ec <HAL_UARTEx_RxEventCallback+0x3c>)
 80017de:	f002 fdfc 	bl	80043da <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000348 	.word	0x20000348
 80017f0:	20000390 	.word	0x20000390

080017f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80017fe:	4a07      	ldr	r2, [pc, #28]	@ (800181c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001800:	2100      	movs	r1, #0
 8001802:	4807      	ldr	r0, [pc, #28]	@ (8001820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001804:	f000 fd5e 	bl	80022c4 <HAL_CAN_GetRxMessage>
	RxCAn = 1;
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000428 	.word	0x20000428
 800181c:	2000040c 	.word	0x2000040c
 8001820:	20000284 	.word	0x20000284
 8001824:	20000430 	.word	0x20000430

08001828 <_write>:


int _write(int file, char *ptr, int len) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e009      	b.n	800184e <_write+0x26>
        ITM_SendChar(ptr[i]);
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fcc2 	bl	80011cc <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	dbf1      	blt.n	800183a <_write+0x12>
    }
    return len;
 8001856:	687b      	ldr	r3, [r7, #4]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <delay_us>:

/**
 * delay polling in microsecond
 */
void delay_us(uint16_t delay_us) {
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0); // reset time 1 to 0
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <delay_us+0x30>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	@ 0x24

	while(__HAL_TIM_GET_COUNTER(&htim1) < delay_us );
 8001872:	bf00      	nop
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <delay_us+0x30>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	429a      	cmp	r2, r3
 800187e:	d3f9      	bcc.n	8001874 <delay_us+0x14>
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000300 	.word	0x20000300

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001898:	b672      	cpsid	i
}
 800189a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <Error_Handler+0x8>

080018a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <HAL_MspInit+0x4c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	4a0f      	ldr	r2, [pc, #60]	@ (80018ec <HAL_MspInit+0x4c>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b6:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <HAL_MspInit+0x4c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_MspInit+0x4c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <HAL_MspInit+0x4c>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_MspInit+0x4c>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	@ 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1d      	ldr	r2, [pc, #116]	@ (8001984 <HAL_CAN_MspInit+0x94>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d134      	bne.n	800197c <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <HAL_CAN_MspInit+0x98>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	4a1b      	ldr	r2, [pc, #108]	@ (8001988 <HAL_CAN_MspInit+0x98>)
 800191c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001920:	6413      	str	r3, [r2, #64]	@ 0x40
 8001922:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_CAN_MspInit+0x98>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <HAL_CAN_MspInit+0x98>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a14      	ldr	r2, [pc, #80]	@ (8001988 <HAL_CAN_MspInit+0x98>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_CAN_MspInit+0x98>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800194a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800195c:	2309      	movs	r3, #9
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	4809      	ldr	r0, [pc, #36]	@ (800198c <HAL_CAN_MspInit+0x9c>)
 8001968:	f001 f9c8 	bl	8002cfc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	2014      	movs	r0, #20
 8001972:	f001 f8fa 	bl	8002b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001976:	2014      	movs	r0, #20
 8001978:	f001 f913 	bl	8002ba2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	@ 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40006400 	.word	0x40006400
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000

08001990 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	@ 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a19      	ldr	r2, [pc, #100]	@ (8001a14 <HAL_I2C_MspInit+0x84>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d12b      	bne.n	8001a0a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <HAL_I2C_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a17      	ldr	r2, [pc, #92]	@ (8001a18 <HAL_I2C_MspInit+0x88>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <HAL_I2C_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ce:	23c0      	movs	r3, #192	@ 0xc0
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d2:	2312      	movs	r3, #18
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019de:	2304      	movs	r3, #4
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <HAL_I2C_MspInit+0x8c>)
 80019ea:	f001 f987 	bl	8002cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_I2C_MspInit+0x88>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	4a08      	ldr	r2, [pc, #32]	@ (8001a18 <HAL_I2C_MspInit+0x88>)
 80019f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_I2C_MspInit+0x88>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	@ 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40005400 	.word	0x40005400
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020400 	.word	0x40020400

08001a20 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a5c <HAL_TIM_Base_MspInit+0x3c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d10d      	bne.n	8001a4e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <HAL_TIM_Base_MspInit+0x40>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	4a09      	ldr	r2, [pc, #36]	@ (8001a60 <HAL_TIM_Base_MspInit+0x40>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <HAL_TIM_Base_MspInit+0x40>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	40023800 	.word	0x40023800

08001a64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	@ 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1d      	ldr	r2, [pc, #116]	@ (8001af8 <HAL_UART_MspInit+0x94>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d133      	bne.n	8001aee <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001afc <HAL_UART_MspInit+0x98>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001afc <HAL_UART_MspInit+0x98>)
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a96:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_UART_MspInit+0x98>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <HAL_UART_MspInit+0x98>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a14      	ldr	r2, [pc, #80]	@ (8001afc <HAL_UART_MspInit+0x98>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <HAL_UART_MspInit+0x98>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001abe:	230c      	movs	r3, #12
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ace:	2307      	movs	r3, #7
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4809      	ldr	r0, [pc, #36]	@ (8001b00 <HAL_UART_MspInit+0x9c>)
 8001ada:	f001 f90f 	bl	8002cfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2026      	movs	r0, #38	@ 0x26
 8001ae4:	f001 f841 	bl	8002b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ae8:	2026      	movs	r0, #38	@ 0x26
 8001aea:	f001 f85a 	bl	8002ba2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	@ 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40004400 	.word	0x40004400
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020000 	.word	0x40020000

08001b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <NMI_Handler+0x4>

08001b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5a:	f000 f94f 	bl	8001dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <CAN1_RX0_IRQHandler+0x10>)
 8001b6a:	f000 fcf3 	bl	8002554 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000284 	.word	0x20000284

08001b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <USART2_IRQHandler+0x10>)
 8001b7e:	f002 fc89 	bl	8004494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000348 	.word	0x20000348

08001b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return 1;
 8001b90:	2301      	movs	r3, #1
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_kill>:

int _kill(int pid, int sig)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ba6:	f005 fe3f 	bl	8007828 <__errno>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2216      	movs	r2, #22
 8001bae:	601a      	str	r2, [r3, #0]
  return -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_exit>:

void _exit (int status)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ffe7 	bl	8001b9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bce:	bf00      	nop
 8001bd0:	e7fd      	b.n	8001bce <_exit+0x12>

08001bd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e00a      	b.n	8001bfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001be4:	f3af 8000 	nop.w
 8001be8:	4601      	mov	r1, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	60ba      	str	r2, [r7, #8]
 8001bf0:	b2ca      	uxtb	r2, r1
 8001bf2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	dbf0      	blt.n	8001be4 <_read+0x12>
  }

  return len;
 8001c02:	687b      	ldr	r3, [r7, #4]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c34:	605a      	str	r2, [r3, #4]
  return 0;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_isatty>:

int _isatty(int file)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c4c:	2301      	movs	r3, #1
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f005 fdc0 	bl	8007828 <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20020000 	.word	0x20020000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	20000434 	.word	0x20000434
 8001cdc:	20000688 	.word	0x20000688

08001ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d08:	f7ff ffea 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d0c:	480c      	ldr	r0, [pc, #48]	@ (8001d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d0e:	490d      	ldr	r1, [pc, #52]	@ (8001d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d10:	4a0d      	ldr	r2, [pc, #52]	@ (8001d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d24:	4c0a      	ldr	r4, [pc, #40]	@ (8001d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d32:	f005 fd7f 	bl	8007834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d36:	f7ff fa71 	bl	800121c <main>
  bx  lr    
 8001d3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8001d48:	0800a7a4 	.word	0x0800a7a4
  ldr r2, =_sbss
 8001d4c:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8001d50:	20000684 	.word	0x20000684

08001d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC_IRQHandler>
	...

08001d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0d      	ldr	r2, [pc, #52]	@ (8001d98 <HAL_Init+0x40>)
 8001d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_Init+0x40>)
 8001d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d74:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <HAL_Init+0x40>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f000 fee7 	bl	8002b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d86:	200f      	movs	r0, #15
 8001d88:	f000 f808 	bl	8001d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d8c:	f7ff fd88 	bl	80018a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <HAL_InitTick+0x54>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_InitTick+0x58>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 feff 	bl	8002bbe <HAL_SYSTICK_Config>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00e      	b.n	8001de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b0f      	cmp	r3, #15
 8001dce:	d80a      	bhi.n	8001de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f000 fec7 	bl	8002b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ddc:	4a06      	ldr	r2, [pc, #24]	@ (8001df8 <HAL_InitTick+0x5c>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000074 	.word	0x20000074
 8001df4:	2000007c 	.word	0x2000007c
 8001df8:	20000078 	.word	0x20000078

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	2000007c 	.word	0x2000007c
 8001e20:	20000438 	.word	0x20000438

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000438 	.word	0x20000438

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2000007c 	.word	0x2000007c

08001e84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0ed      	b.n	8002072 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff fd24 	bl	80018f0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb8:	f7ff ffb4 	bl	8001e24 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ebe:	e012      	b.n	8001ee6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ec0:	f7ff ffb0 	bl	8001e24 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b0a      	cmp	r3, #10
 8001ecc:	d90b      	bls.n	8001ee6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2205      	movs	r2, #5
 8001ede:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0c5      	b.n	8002072 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0e5      	beq.n	8001ec0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0202 	bic.w	r2, r2, #2
 8001f02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f04:	f7ff ff8e 	bl	8001e24 <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f0a:	e012      	b.n	8001f32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f0c:	f7ff ff8a 	bl	8001e24 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b0a      	cmp	r3, #10
 8001f18:	d90b      	bls.n	8001f32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2205      	movs	r2, #5
 8001f2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e09f      	b.n	8002072 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e5      	bne.n	8001f0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7e1b      	ldrb	r3, [r3, #24]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d108      	bne.n	8001f5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	e007      	b.n	8001f6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7e5b      	ldrb	r3, [r3, #25]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d108      	bne.n	8001f84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e007      	b.n	8001f94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7e9b      	ldrb	r3, [r3, #26]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d108      	bne.n	8001fae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0220 	orr.w	r2, r2, #32
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e007      	b.n	8001fbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0220 	bic.w	r2, r2, #32
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7edb      	ldrb	r3, [r3, #27]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d108      	bne.n	8001fd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0210 	bic.w	r2, r2, #16
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e007      	b.n	8001fe8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0210 	orr.w	r2, r2, #16
 8001fe6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7f1b      	ldrb	r3, [r3, #28]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d108      	bne.n	8002002 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0208 	orr.w	r2, r2, #8
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e007      	b.n	8002012 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0208 	bic.w	r2, r2, #8
 8002010:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7f5b      	ldrb	r3, [r3, #29]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d108      	bne.n	800202c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0204 	orr.w	r2, r2, #4
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e007      	b.n	800203c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0204 	bic.w	r2, r2, #4
 800203a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	ea42 0103 	orr.w	r1, r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	1e5a      	subs	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002092:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d003      	beq.n	80020a2 <HAL_CAN_ConfigFilter+0x26>
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	2b02      	cmp	r3, #2
 800209e:	f040 80be 	bne.w	800221e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80020a2:	4b65      	ldr	r3, [pc, #404]	@ (8002238 <HAL_CAN_ConfigFilter+0x1bc>)
 80020a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020bc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	431a      	orrs	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	2201      	movs	r2, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	401a      	ands	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d123      	bne.n	800214c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43db      	mvns	r3, r3
 800210e:	401a      	ands	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002126:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3248      	adds	r2, #72	@ 0x48
 800212c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002140:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002142:	6979      	ldr	r1, [r7, #20]
 8002144:	3348      	adds	r3, #72	@ 0x48
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d122      	bne.n	800219a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	431a      	orrs	r2, r3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002174:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3248      	adds	r2, #72	@ 0x48
 800217a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800218e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002190:	6979      	ldr	r1, [r7, #20]
 8002192:	3348      	adds	r3, #72	@ 0x48
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	401a      	ands	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80021b4:	e007      	b.n	80021c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	431a      	orrs	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	401a      	ands	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80021e0:	e007      	b.n	80021f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d107      	bne.n	800220a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	431a      	orrs	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002210:	f023 0201 	bic.w	r2, r3, #1
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e006      	b.n	800222c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
  }
}
 800222c:	4618      	mov	r0, r3
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40006400 	.word	0x40006400

0800223c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b01      	cmp	r3, #1
 800224e:	d12e      	bne.n	80022ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002268:	f7ff fddc 	bl	8001e24 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800226e:	e012      	b.n	8002296 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002270:	f7ff fdd8 	bl	8001e24 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b0a      	cmp	r3, #10
 800227c:	d90b      	bls.n	8002296 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2205      	movs	r2, #5
 800228e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e012      	b.n	80022bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e5      	bne.n	8002270 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e006      	b.n	80022bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
  }
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022da:	7dfb      	ldrb	r3, [r7, #23]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d003      	beq.n	80022e8 <HAL_CAN_GetRxMessage+0x24>
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	f040 8103 	bne.w	80024ee <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10e      	bne.n	800230c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d116      	bne.n	800232a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0f7      	b.n	80024fc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0e8      	b.n	80024fc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	331b      	adds	r3, #27
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	4413      	add	r3, r2
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0204 	and.w	r2, r3, #4
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10c      	bne.n	8002362 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	331b      	adds	r3, #27
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	4413      	add	r3, r2
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0d5b      	lsrs	r3, r3, #21
 8002358:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e00b      	b.n	800237a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	331b      	adds	r3, #27
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	4413      	add	r3, r2
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	08db      	lsrs	r3, r3, #3
 8002372:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	331b      	adds	r3, #27
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	4413      	add	r3, r2
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0202 	and.w	r2, r3, #2
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	331b      	adds	r3, #27
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	4413      	add	r3, r2
 800239c:	3304      	adds	r3, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2208      	movs	r2, #8
 80023ac:	611a      	str	r2, [r3, #16]
 80023ae:	e00b      	b.n	80023c8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	331b      	adds	r3, #27
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	4413      	add	r3, r2
 80023bc:	3304      	adds	r3, #4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 020f 	and.w	r2, r3, #15
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	331b      	adds	r3, #27
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	4413      	add	r3, r2
 80023d4:	3304      	adds	r3, #4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	331b      	adds	r3, #27
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	4413      	add	r3, r2
 80023ec:	3304      	adds	r3, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	0c1b      	lsrs	r3, r3, #16
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	4413      	add	r3, r2
 8002402:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	4413      	add	r3, r2
 8002418:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0a1a      	lsrs	r2, r3, #8
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	4413      	add	r3, r2
 8002432:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0c1a      	lsrs	r2, r3, #16
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	3302      	adds	r3, #2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	4413      	add	r3, r2
 800244c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0e1a      	lsrs	r2, r3, #24
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	3303      	adds	r3, #3
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	4413      	add	r3, r2
 8002466:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	3304      	adds	r3, #4
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4413      	add	r3, r2
 800247e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0a1a      	lsrs	r2, r3, #8
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	3305      	adds	r3, #5
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	4413      	add	r3, r2
 8002498:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	0c1a      	lsrs	r2, r3, #16
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	3306      	adds	r3, #6
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0e1a      	lsrs	r2, r3, #24
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	3307      	adds	r3, #7
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d108      	bne.n	80024da <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0220 	orr.w	r2, r2, #32
 80024d6:	60da      	str	r2, [r3, #12]
 80024d8:	e007      	b.n	80024ea <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0220 	orr.w	r2, r2, #32
 80024e8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e006      	b.n	80024fc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
  }
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002518:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d002      	beq.n	8002526 <HAL_CAN_ActivateNotification+0x1e>
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d109      	bne.n	800253a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6959      	ldr	r1, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e006      	b.n	8002548 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
  }
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	@ 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800255c:	2300      	movs	r3, #0
 800255e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d07c      	beq.n	8002694 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d023      	beq.n	80025ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2201      	movs	r2, #1
 80025aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f983 	bl	80028c2 <HAL_CAN_TxMailbox0CompleteCallback>
 80025bc:	e016      	b.n	80025ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d0:	e00c      	b.n	80025ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e4:	e002      	b.n	80025ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f989 	bl	80028fe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d024      	beq.n	8002640 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f963 	bl	80028d6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002610:	e016      	b.n	8002640 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d004      	beq.n	8002626 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
 8002624:	e00c      	b.n	8002640 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
 8002638:	e002      	b.n	8002640 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f969 	bl	8002912 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d024      	beq.n	8002694 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002652:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f943 	bl	80028ea <HAL_CAN_TxMailbox2CompleteCallback>
 8002664:	e016      	b.n	8002694 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
 8002678:	e00c      	b.n	8002694 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
 800268c:	e002      	b.n	8002694 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f949 	bl	8002926 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2210      	movs	r2, #16
 80026b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00b      	beq.n	80026da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d006      	beq.n	80026da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2208      	movs	r2, #8
 80026d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f930 	bl	800293a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff f87e 	bl	80017f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00c      	beq.n	800271c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002712:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2210      	movs	r2, #16
 800271a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d006      	beq.n	800273e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2208      	movs	r2, #8
 8002736:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f912 	bl	8002962 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	d009      	beq.n	800275c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f8f9 	bl	800294e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	d006      	beq.n	800277e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2210      	movs	r2, #16
 8002776:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f8fc 	bl	8002976 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00b      	beq.n	80027a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d006      	beq.n	80027a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2208      	movs	r2, #8
 8002798:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f8f5 	bl	800298a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d07b      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d072      	beq.n	800289a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	f043 0304 	orr.w	r3, r3, #4
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800280e:	2b00      	cmp	r3, #0
 8002810:	d043      	beq.n	800289a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002818:	2b00      	cmp	r3, #0
 800281a:	d03e      	beq.n	800289a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002822:	2b60      	cmp	r3, #96	@ 0x60
 8002824:	d02b      	beq.n	800287e <HAL_CAN_IRQHandler+0x32a>
 8002826:	2b60      	cmp	r3, #96	@ 0x60
 8002828:	d82e      	bhi.n	8002888 <HAL_CAN_IRQHandler+0x334>
 800282a:	2b50      	cmp	r3, #80	@ 0x50
 800282c:	d022      	beq.n	8002874 <HAL_CAN_IRQHandler+0x320>
 800282e:	2b50      	cmp	r3, #80	@ 0x50
 8002830:	d82a      	bhi.n	8002888 <HAL_CAN_IRQHandler+0x334>
 8002832:	2b40      	cmp	r3, #64	@ 0x40
 8002834:	d019      	beq.n	800286a <HAL_CAN_IRQHandler+0x316>
 8002836:	2b40      	cmp	r3, #64	@ 0x40
 8002838:	d826      	bhi.n	8002888 <HAL_CAN_IRQHandler+0x334>
 800283a:	2b30      	cmp	r3, #48	@ 0x30
 800283c:	d010      	beq.n	8002860 <HAL_CAN_IRQHandler+0x30c>
 800283e:	2b30      	cmp	r3, #48	@ 0x30
 8002840:	d822      	bhi.n	8002888 <HAL_CAN_IRQHandler+0x334>
 8002842:	2b10      	cmp	r3, #16
 8002844:	d002      	beq.n	800284c <HAL_CAN_IRQHandler+0x2f8>
 8002846:	2b20      	cmp	r3, #32
 8002848:	d005      	beq.n	8002856 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800284a:	e01d      	b.n	8002888 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	f043 0308 	orr.w	r3, r3, #8
 8002852:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002854:	e019      	b.n	800288a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	f043 0310 	orr.w	r3, r3, #16
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800285e:	e014      	b.n	800288a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002862:	f043 0320 	orr.w	r3, r3, #32
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002868:	e00f      	b.n	800288a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002872:	e00a      	b.n	800288a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800287c:	e005      	b.n	800288a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002886:	e000      	b.n	800288a <HAL_CAN_IRQHandler+0x336>
            break;
 8002888:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699a      	ldr	r2, [r3, #24]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002898:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2204      	movs	r2, #4
 80028a0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f872 	bl	800299e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028ba:	bf00      	nop
 80028bc:	3728      	adds	r7, #40	@ 0x28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <__NVIC_SetPriorityGrouping>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029d0:	4013      	ands	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e6:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	60d3      	str	r3, [r2, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_GetPriorityGrouping>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a00:	4b04      	ldr	r3, [pc, #16]	@ (8002a14 <__NVIC_GetPriorityGrouping+0x18>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	f003 0307 	and.w	r3, r3, #7
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_EnableIRQ>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	db0b      	blt.n	8002a42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	4907      	ldr	r1, [pc, #28]	@ (8002a50 <__NVIC_EnableIRQ+0x38>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2001      	movs	r0, #1
 8002a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000e100 	.word	0xe000e100

08002a54 <__NVIC_SetPriority>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	db0a      	blt.n	8002a7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	490c      	ldr	r1, [pc, #48]	@ (8002aa0 <__NVIC_SetPriority+0x4c>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	440b      	add	r3, r1
 8002a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002a7c:	e00a      	b.n	8002a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4908      	ldr	r1, [pc, #32]	@ (8002aa4 <__NVIC_SetPriority+0x50>)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	440b      	add	r3, r1
 8002a92:	761a      	strb	r2, [r3, #24]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <NVIC_EncodePriority>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	@ 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f1c3 0307 	rsb	r3, r3, #7
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	bf28      	it	cs
 8002ac6:	2304      	movcs	r3, #4
 8002ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d902      	bls.n	8002ad8 <NVIC_EncodePriority+0x30>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3b03      	subs	r3, #3
 8002ad6:	e000      	b.n	8002ada <NVIC_EncodePriority+0x32>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	401a      	ands	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af0:	f04f 31ff 	mov.w	r1, #4294967295
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43d9      	mvns	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	4313      	orrs	r3, r2
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3724      	adds	r7, #36	@ 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <SysTick_Config>:
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b20:	d301      	bcc.n	8002b26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00f      	b.n	8002b46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b26:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <SysTick_Config+0x40>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2e:	210f      	movs	r1, #15
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	f7ff ff8e 	bl	8002a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b38:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <SysTick_Config+0x40>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3e:	4b04      	ldr	r3, [pc, #16]	@ (8002b50 <SysTick_Config+0x40>)
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	e000e010 	.word	0xe000e010

08002b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff29 	bl	80029b4 <__NVIC_SetPriorityGrouping>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b7c:	f7ff ff3e 	bl	80029fc <__NVIC_GetPriorityGrouping>
 8002b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	6978      	ldr	r0, [r7, #20]
 8002b88:	f7ff ff8e 	bl	8002aa8 <NVIC_EncodePriority>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff5d 	bl	8002a54 <__NVIC_SetPriority>
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff31 	bl	8002a18 <__NVIC_EnableIRQ>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ffa2 	bl	8002b10 <SysTick_Config>
 8002bcc:	4603      	mov	r3, r0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002be4:	f7ff f91e 	bl	8001e24 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d008      	beq.n	8002c08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2280      	movs	r2, #128	@ 0x80
 8002bfa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e052      	b.n	8002cae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0216 	bic.w	r2, r2, #22
 8002c16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <HAL_DMA_Abort+0x62>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0208 	bic.w	r2, r2, #8
 8002c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c58:	e013      	b.n	8002c82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c5a:	f7ff f8e3 	bl	8001e24 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d90c      	bls.n	8002c82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e015      	b.n	8002cae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1e4      	bne.n	8002c5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c94:	223f      	movs	r2, #63	@ 0x3f
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d004      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2280      	movs	r2, #128	@ 0x80
 8002cce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e00c      	b.n	8002cee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2205      	movs	r2, #5
 8002cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b089      	sub	sp, #36	@ 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	e16b      	b.n	8002ff0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d18:	2201      	movs	r2, #1
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	f040 815a 	bne.w	8002fea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d005      	beq.n	8002d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d130      	bne.n	8002db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	2203      	movs	r2, #3
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 0201 	and.w	r2, r3, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d017      	beq.n	8002dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d123      	bne.n	8002e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	08da      	lsrs	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3208      	adds	r2, #8
 8002e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	220f      	movs	r2, #15
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	08da      	lsrs	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3208      	adds	r2, #8
 8002e3a:	69b9      	ldr	r1, [r7, #24]
 8002e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0203 	and.w	r2, r3, #3
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80b4 	beq.w	8002fea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	4b60      	ldr	r3, [pc, #384]	@ (8003008 <HAL_GPIO_Init+0x30c>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	4a5f      	ldr	r2, [pc, #380]	@ (8003008 <HAL_GPIO_Init+0x30c>)
 8002e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e92:	4b5d      	ldr	r3, [pc, #372]	@ (8003008 <HAL_GPIO_Init+0x30c>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800300c <HAL_GPIO_Init+0x310>)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a52      	ldr	r2, [pc, #328]	@ (8003010 <HAL_GPIO_Init+0x314>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d02b      	beq.n	8002f22 <HAL_GPIO_Init+0x226>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a51      	ldr	r2, [pc, #324]	@ (8003014 <HAL_GPIO_Init+0x318>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d025      	beq.n	8002f1e <HAL_GPIO_Init+0x222>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a50      	ldr	r2, [pc, #320]	@ (8003018 <HAL_GPIO_Init+0x31c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01f      	beq.n	8002f1a <HAL_GPIO_Init+0x21e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4f      	ldr	r2, [pc, #316]	@ (800301c <HAL_GPIO_Init+0x320>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d019      	beq.n	8002f16 <HAL_GPIO_Init+0x21a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8003020 <HAL_GPIO_Init+0x324>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <HAL_GPIO_Init+0x216>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4d      	ldr	r2, [pc, #308]	@ (8003024 <HAL_GPIO_Init+0x328>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00d      	beq.n	8002f0e <HAL_GPIO_Init+0x212>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8003028 <HAL_GPIO_Init+0x32c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d007      	beq.n	8002f0a <HAL_GPIO_Init+0x20e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4b      	ldr	r2, [pc, #300]	@ (800302c <HAL_GPIO_Init+0x330>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_GPIO_Init+0x20a>
 8002f02:	2307      	movs	r3, #7
 8002f04:	e00e      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f06:	2308      	movs	r3, #8
 8002f08:	e00c      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	e00a      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f0e:	2305      	movs	r3, #5
 8002f10:	e008      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f12:	2304      	movs	r3, #4
 8002f14:	e006      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f16:	2303      	movs	r3, #3
 8002f18:	e004      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e002      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f22:	2300      	movs	r3, #0
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	f002 0203 	and.w	r2, r2, #3
 8002f2a:	0092      	lsls	r2, r2, #2
 8002f2c:	4093      	lsls	r3, r2
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f34:	4935      	ldr	r1, [pc, #212]	@ (800300c <HAL_GPIO_Init+0x310>)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f42:	4b3b      	ldr	r3, [pc, #236]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f66:	4a32      	ldr	r2, [pc, #200]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f6c:	4b30      	ldr	r3, [pc, #192]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f90:	4a27      	ldr	r2, [pc, #156]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f96:	4b26      	ldr	r3, [pc, #152]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fba:	4a1d      	ldr	r2, [pc, #116]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fe4:	4a12      	ldr	r2, [pc, #72]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3301      	adds	r3, #1
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b0f      	cmp	r3, #15
 8002ff4:	f67f ae90 	bls.w	8002d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3724      	adds	r7, #36	@ 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	40013800 	.word	0x40013800
 8003010:	40020000 	.word	0x40020000
 8003014:	40020400 	.word	0x40020400
 8003018:	40020800 	.word	0x40020800
 800301c:	40020c00 	.word	0x40020c00
 8003020:	40021000 	.word	0x40021000
 8003024:	40021400 	.word	0x40021400
 8003028:	40021800 	.word	0x40021800
 800302c:	40021c00 	.word	0x40021c00
 8003030:	40013c00 	.word	0x40013c00

08003034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	807b      	strh	r3, [r7, #2]
 8003040:	4613      	mov	r3, r2
 8003042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003044:	787b      	ldrb	r3, [r7, #1]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800304a:	887a      	ldrh	r2, [r7, #2]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003050:	e003      	b.n	800305a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003052:	887b      	ldrh	r3, [r7, #2]
 8003054:	041a      	lsls	r2, r3, #16
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	619a      	str	r2, [r3, #24]
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e12b      	b.n	80032d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe fc7e 	bl	8001990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	@ 0x24
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030cc:	f000 fd40 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 80030d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a81      	ldr	r2, [pc, #516]	@ (80032dc <HAL_I2C_Init+0x274>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d807      	bhi.n	80030ec <HAL_I2C_Init+0x84>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a80      	ldr	r2, [pc, #512]	@ (80032e0 <HAL_I2C_Init+0x278>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	bf94      	ite	ls
 80030e4:	2301      	movls	r3, #1
 80030e6:	2300      	movhi	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e006      	b.n	80030fa <HAL_I2C_Init+0x92>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a7d      	ldr	r2, [pc, #500]	@ (80032e4 <HAL_I2C_Init+0x27c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	bf94      	ite	ls
 80030f4:	2301      	movls	r3, #1
 80030f6:	2300      	movhi	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0e7      	b.n	80032d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4a78      	ldr	r2, [pc, #480]	@ (80032e8 <HAL_I2C_Init+0x280>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0c9b      	lsrs	r3, r3, #18
 800310c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a6a      	ldr	r2, [pc, #424]	@ (80032dc <HAL_I2C_Init+0x274>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d802      	bhi.n	800313c <HAL_I2C_Init+0xd4>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3301      	adds	r3, #1
 800313a:	e009      	b.n	8003150 <HAL_I2C_Init+0xe8>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	4a69      	ldr	r2, [pc, #420]	@ (80032ec <HAL_I2C_Init+0x284>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	3301      	adds	r3, #1
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	430b      	orrs	r3, r1
 8003156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003162:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	495c      	ldr	r1, [pc, #368]	@ (80032dc <HAL_I2C_Init+0x274>)
 800316c:	428b      	cmp	r3, r1
 800316e:	d819      	bhi.n	80031a4 <HAL_I2C_Init+0x13c>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fbb1 f3f3 	udiv	r3, r1, r3
 800317e:	1c59      	adds	r1, r3, #1
 8003180:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003184:	400b      	ands	r3, r1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_I2C_Init+0x138>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1e59      	subs	r1, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fbb1 f3f3 	udiv	r3, r1, r3
 8003198:	3301      	adds	r3, #1
 800319a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319e:	e051      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031a0:	2304      	movs	r3, #4
 80031a2:	e04f      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d111      	bne.n	80031d0 <HAL_I2C_Init+0x168>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e58      	subs	r0, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e012      	b.n	80031f6 <HAL_I2C_Init+0x18e>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	0099      	lsls	r1, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Init+0x196>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e022      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10e      	bne.n	8003224 <HAL_I2C_Init+0x1bc>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1e58      	subs	r0, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	440b      	add	r3, r1
 8003214:	fbb0 f3f3 	udiv	r3, r0, r3
 8003218:	3301      	adds	r3, #1
 800321a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003222:	e00f      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1e58      	subs	r0, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	0099      	lsls	r1, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	fbb0 f3f3 	udiv	r3, r0, r3
 800323a:	3301      	adds	r3, #1
 800323c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003240:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	6809      	ldr	r1, [r1, #0]
 8003248:	4313      	orrs	r3, r2
 800324a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003272:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6911      	ldr	r1, [r2, #16]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68d2      	ldr	r2, [r2, #12]
 800327e:	4311      	orrs	r1, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	430b      	orrs	r3, r1
 8003286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	000186a0 	.word	0x000186a0
 80032e0:	001e847f 	.word	0x001e847f
 80032e4:	003d08ff 	.word	0x003d08ff
 80032e8:	431bde83 	.word	0x431bde83
 80032ec:	10624dd3 	.word	0x10624dd3

080032f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e267      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d075      	beq.n	80033fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800330e:	4b88      	ldr	r3, [pc, #544]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b04      	cmp	r3, #4
 8003318:	d00c      	beq.n	8003334 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331a:	4b85      	ldr	r3, [pc, #532]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003322:	2b08      	cmp	r3, #8
 8003324:	d112      	bne.n	800334c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003326:	4b82      	ldr	r3, [pc, #520]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800332e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003332:	d10b      	bne.n	800334c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	4b7e      	ldr	r3, [pc, #504]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d05b      	beq.n	80033f8 <HAL_RCC_OscConfig+0x108>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d157      	bne.n	80033f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e242      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003354:	d106      	bne.n	8003364 <HAL_RCC_OscConfig+0x74>
 8003356:	4b76      	ldr	r3, [pc, #472]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a75      	ldr	r2, [pc, #468]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e01d      	b.n	80033a0 <HAL_RCC_OscConfig+0xb0>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x98>
 800336e:	4b70      	ldr	r3, [pc, #448]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6f      	ldr	r2, [pc, #444]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b6d      	ldr	r3, [pc, #436]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a6c      	ldr	r2, [pc, #432]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e00b      	b.n	80033a0 <HAL_RCC_OscConfig+0xb0>
 8003388:	4b69      	ldr	r3, [pc, #420]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a68      	ldr	r2, [pc, #416]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 800338e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b66      	ldr	r3, [pc, #408]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a65      	ldr	r2, [pc, #404]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 800339a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800339e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d013      	beq.n	80033d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7fe fd3c 	bl	8001e24 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b0:	f7fe fd38 	bl	8001e24 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	@ 0x64
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e207      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0xc0>
 80033ce:	e014      	b.n	80033fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fe fd28 	bl	8001e24 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fe fd24 	bl	8001e24 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	@ 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e1f3      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ea:	4b51      	ldr	r3, [pc, #324]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0xe8>
 80033f6:	e000      	b.n	80033fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d063      	beq.n	80034ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003406:	4b4a      	ldr	r3, [pc, #296]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003412:	4b47      	ldr	r3, [pc, #284]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800341a:	2b08      	cmp	r3, #8
 800341c:	d11c      	bne.n	8003458 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341e:	4b44      	ldr	r3, [pc, #272]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d116      	bne.n	8003458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	4b41      	ldr	r3, [pc, #260]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_RCC_OscConfig+0x152>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d001      	beq.n	8003442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e1c7      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003442:	4b3b      	ldr	r3, [pc, #236]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4937      	ldr	r1, [pc, #220]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003456:	e03a      	b.n	80034ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d020      	beq.n	80034a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003460:	4b34      	ldr	r3, [pc, #208]	@ (8003534 <HAL_RCC_OscConfig+0x244>)
 8003462:	2201      	movs	r2, #1
 8003464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003466:	f7fe fcdd 	bl	8001e24 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346e:	f7fe fcd9 	bl	8001e24 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e1a8      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003480:	4b2b      	ldr	r3, [pc, #172]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348c:	4b28      	ldr	r3, [pc, #160]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4925      	ldr	r1, [pc, #148]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 800349c:	4313      	orrs	r3, r2
 800349e:	600b      	str	r3, [r1, #0]
 80034a0:	e015      	b.n	80034ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a2:	4b24      	ldr	r3, [pc, #144]	@ (8003534 <HAL_RCC_OscConfig+0x244>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fe fcbc 	bl	8001e24 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b0:	f7fe fcb8 	bl	8001e24 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e187      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d036      	beq.n	8003548 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d016      	beq.n	8003510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e2:	4b15      	ldr	r3, [pc, #84]	@ (8003538 <HAL_RCC_OscConfig+0x248>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e8:	f7fe fc9c 	bl	8001e24 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f0:	f7fe fc98 	bl	8001e24 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e167      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003502:	4b0b      	ldr	r3, [pc, #44]	@ (8003530 <HAL_RCC_OscConfig+0x240>)
 8003504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x200>
 800350e:	e01b      	b.n	8003548 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003510:	4b09      	ldr	r3, [pc, #36]	@ (8003538 <HAL_RCC_OscConfig+0x248>)
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003516:	f7fe fc85 	bl	8001e24 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800351c:	e00e      	b.n	800353c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800351e:	f7fe fc81 	bl	8001e24 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d907      	bls.n	800353c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e150      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
 8003530:	40023800 	.word	0x40023800
 8003534:	42470000 	.word	0x42470000
 8003538:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353c:	4b88      	ldr	r3, [pc, #544]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 800353e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ea      	bne.n	800351e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 8097 	beq.w	8003684 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003556:	2300      	movs	r3, #0
 8003558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355a:	4b81      	ldr	r3, [pc, #516]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10f      	bne.n	8003586 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	4b7d      	ldr	r3, [pc, #500]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	4a7c      	ldr	r2, [pc, #496]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003574:	6413      	str	r3, [r2, #64]	@ 0x40
 8003576:	4b7a      	ldr	r3, [pc, #488]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003586:	4b77      	ldr	r3, [pc, #476]	@ (8003764 <HAL_RCC_OscConfig+0x474>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d118      	bne.n	80035c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003592:	4b74      	ldr	r3, [pc, #464]	@ (8003764 <HAL_RCC_OscConfig+0x474>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a73      	ldr	r2, [pc, #460]	@ (8003764 <HAL_RCC_OscConfig+0x474>)
 8003598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800359c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359e:	f7fe fc41 	bl	8001e24 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a6:	f7fe fc3d 	bl	8001e24 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e10c      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003764 <HAL_RCC_OscConfig+0x474>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d106      	bne.n	80035da <HAL_RCC_OscConfig+0x2ea>
 80035cc:	4b64      	ldr	r3, [pc, #400]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d0:	4a63      	ldr	r2, [pc, #396]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d8:	e01c      	b.n	8003614 <HAL_RCC_OscConfig+0x324>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2b05      	cmp	r3, #5
 80035e0:	d10c      	bne.n	80035fc <HAL_RCC_OscConfig+0x30c>
 80035e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 80035e8:	f043 0304 	orr.w	r3, r3, #4
 80035ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035fa:	e00b      	b.n	8003614 <HAL_RCC_OscConfig+0x324>
 80035fc:	4b58      	ldr	r3, [pc, #352]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003600:	4a57      	ldr	r2, [pc, #348]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	6713      	str	r3, [r2, #112]	@ 0x70
 8003608:	4b55      	ldr	r3, [pc, #340]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360c:	4a54      	ldr	r2, [pc, #336]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 800360e:	f023 0304 	bic.w	r3, r3, #4
 8003612:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d015      	beq.n	8003648 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fe fc02 	bl	8001e24 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003622:	e00a      	b.n	800363a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fe fbfe 	bl	8001e24 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e0cb      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363a:	4b49      	ldr	r3, [pc, #292]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0ee      	beq.n	8003624 <HAL_RCC_OscConfig+0x334>
 8003646:	e014      	b.n	8003672 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003648:	f7fe fbec 	bl	8001e24 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364e:	e00a      	b.n	8003666 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003650:	f7fe fbe8 	bl	8001e24 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e0b5      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003666:	4b3e      	ldr	r3, [pc, #248]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1ee      	bne.n	8003650 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003672:	7dfb      	ldrb	r3, [r7, #23]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d105      	bne.n	8003684 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003678:	4b39      	ldr	r3, [pc, #228]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	4a38      	ldr	r2, [pc, #224]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 800367e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003682:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80a1 	beq.w	80037d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800368e:	4b34      	ldr	r3, [pc, #208]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b08      	cmp	r3, #8
 8003698:	d05c      	beq.n	8003754 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d141      	bne.n	8003726 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a2:	4b31      	ldr	r3, [pc, #196]	@ (8003768 <HAL_RCC_OscConfig+0x478>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fe fbbc 	bl	8001e24 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b0:	f7fe fbb8 	bl	8001e24 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e087      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c2:	4b27      	ldr	r3, [pc, #156]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	019b      	lsls	r3, r3, #6
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	3b01      	subs	r3, #1
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	491b      	ldr	r1, [pc, #108]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003768 <HAL_RCC_OscConfig+0x478>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fe:	f7fe fb91 	bl	8001e24 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7fe fb8d 	bl	8001e24 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e05c      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003718:	4b11      	ldr	r3, [pc, #68]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x416>
 8003724:	e054      	b.n	80037d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b10      	ldr	r3, [pc, #64]	@ (8003768 <HAL_RCC_OscConfig+0x478>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe fb7a 	bl	8001e24 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe fb76 	bl	8001e24 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e045      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	4b06      	ldr	r3, [pc, #24]	@ (8003760 <HAL_RCC_OscConfig+0x470>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x444>
 8003752:	e03d      	b.n	80037d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d107      	bne.n	800376c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e038      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
 8003760:	40023800 	.word	0x40023800
 8003764:	40007000 	.word	0x40007000
 8003768:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800376c:	4b1b      	ldr	r3, [pc, #108]	@ (80037dc <HAL_RCC_OscConfig+0x4ec>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d028      	beq.n	80037cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d121      	bne.n	80037cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d11a      	bne.n	80037cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800379c:	4013      	ands	r3, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d111      	bne.n	80037cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	3b01      	subs	r3, #1
 80037b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800

080037e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0cc      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f4:	4b68      	ldr	r3, [pc, #416]	@ (8003998 <HAL_RCC_ClockConfig+0x1b8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d90c      	bls.n	800381c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003802:	4b65      	ldr	r3, [pc, #404]	@ (8003998 <HAL_RCC_ClockConfig+0x1b8>)
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b63      	ldr	r3, [pc, #396]	@ (8003998 <HAL_RCC_ClockConfig+0x1b8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0b8      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d020      	beq.n	800386a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003834:	4b59      	ldr	r3, [pc, #356]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4a58      	ldr	r2, [pc, #352]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800383e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800384c:	4b53      	ldr	r3, [pc, #332]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a52      	ldr	r2, [pc, #328]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003858:	4b50      	ldr	r3, [pc, #320]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	494d      	ldr	r1, [pc, #308]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d044      	beq.n	8003900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d107      	bne.n	800388e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	4b47      	ldr	r3, [pc, #284]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d119      	bne.n	80038be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e07f      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d003      	beq.n	800389e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389a:	2b03      	cmp	r3, #3
 800389c:	d107      	bne.n	80038ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389e:	4b3f      	ldr	r3, [pc, #252]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e06f      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ae:	4b3b      	ldr	r3, [pc, #236]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e067      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038be:	4b37      	ldr	r3, [pc, #220]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f023 0203 	bic.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4934      	ldr	r1, [pc, #208]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d0:	f7fe faa8 	bl	8001e24 <HAL_GetTick>
 80038d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d6:	e00a      	b.n	80038ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d8:	f7fe faa4 	bl	8001e24 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e04f      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	4b2b      	ldr	r3, [pc, #172]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 020c 	and.w	r2, r3, #12
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d1eb      	bne.n	80038d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003900:	4b25      	ldr	r3, [pc, #148]	@ (8003998 <HAL_RCC_ClockConfig+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d20c      	bcs.n	8003928 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390e:	4b22      	ldr	r3, [pc, #136]	@ (8003998 <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b20      	ldr	r3, [pc, #128]	@ (8003998 <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e032      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003934:	4b19      	ldr	r3, [pc, #100]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4916      	ldr	r1, [pc, #88]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d009      	beq.n	8003966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003952:	4b12      	ldr	r3, [pc, #72]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	490e      	ldr	r1, [pc, #56]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	4313      	orrs	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003966:	f000 f821 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 800396a:	4602      	mov	r2, r0
 800396c:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	490a      	ldr	r1, [pc, #40]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003978:	5ccb      	ldrb	r3, [r1, r3]
 800397a:	fa22 f303 	lsr.w	r3, r2, r3
 800397e:	4a09      	ldr	r2, [pc, #36]	@ (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003982:	4b09      	ldr	r3, [pc, #36]	@ (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fa08 	bl	8001d9c <HAL_InitTick>

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023c00 	.word	0x40023c00
 800399c:	40023800 	.word	0x40023800
 80039a0:	0800a350 	.word	0x0800a350
 80039a4:	20000074 	.word	0x20000074
 80039a8:	20000078 	.word	0x20000078

080039ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b0:	b090      	sub	sp, #64	@ 0x40
 80039b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039c4:	4b59      	ldr	r3, [pc, #356]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d00d      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x40>
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	f200 80a1 	bhi.w	8003b18 <HAL_RCC_GetSysClockFreq+0x16c>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x34>
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d003      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039de:	e09b      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e0:	4b53      	ldr	r3, [pc, #332]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x184>)
 80039e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039e4:	e09b      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039e6:	4b53      	ldr	r3, [pc, #332]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x188>)
 80039e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039ea:	e098      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ec:	4b4f      	ldr	r3, [pc, #316]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039f6:	4b4d      	ldr	r3, [pc, #308]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d028      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a02:	4b4a      	ldr	r3, [pc, #296]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	099b      	lsrs	r3, r3, #6
 8003a08:	2200      	movs	r2, #0
 8003a0a:	623b      	str	r3, [r7, #32]
 8003a0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a14:	2100      	movs	r1, #0
 8003a16:	4b47      	ldr	r3, [pc, #284]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a18:	fb03 f201 	mul.w	r2, r3, r1
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	fb00 f303 	mul.w	r3, r0, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	4a43      	ldr	r2, [pc, #268]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a26:	fba0 1202 	umull	r1, r2, r0, r2
 8003a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a2c:	460a      	mov	r2, r1
 8003a2e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a32:	4413      	add	r3, r2
 8003a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a38:	2200      	movs	r2, #0
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	61fa      	str	r2, [r7, #28]
 8003a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a46:	f7fd f91f 	bl	8000c88 <__aeabi_uldivmod>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4613      	mov	r3, r2
 8003a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a52:	e053      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a54:	4b35      	ldr	r3, [pc, #212]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	099b      	lsrs	r3, r3, #6
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	617a      	str	r2, [r7, #20]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a66:	f04f 0b00 	mov.w	fp, #0
 8003a6a:	4652      	mov	r2, sl
 8003a6c:	465b      	mov	r3, fp
 8003a6e:	f04f 0000 	mov.w	r0, #0
 8003a72:	f04f 0100 	mov.w	r1, #0
 8003a76:	0159      	lsls	r1, r3, #5
 8003a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a7c:	0150      	lsls	r0, r2, #5
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	ebb2 080a 	subs.w	r8, r2, sl
 8003a86:	eb63 090b 	sbc.w	r9, r3, fp
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a9e:	ebb2 0408 	subs.w	r4, r2, r8
 8003aa2:	eb63 0509 	sbc.w	r5, r3, r9
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	00eb      	lsls	r3, r5, #3
 8003ab0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ab4:	00e2      	lsls	r2, r4, #3
 8003ab6:	4614      	mov	r4, r2
 8003ab8:	461d      	mov	r5, r3
 8003aba:	eb14 030a 	adds.w	r3, r4, sl
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	eb45 030b 	adc.w	r3, r5, fp
 8003ac4:	607b      	str	r3, [r7, #4]
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	028b      	lsls	r3, r1, #10
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003adc:	4621      	mov	r1, r4
 8003ade:	028a      	lsls	r2, r1, #10
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	60fa      	str	r2, [r7, #12]
 8003aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003af0:	f7fd f8ca 	bl	8000c88 <__aeabi_uldivmod>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4613      	mov	r3, r2
 8003afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003afc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	3301      	adds	r3, #1
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003b0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b16:	e002      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b18:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3740      	adds	r7, #64	@ 0x40
 8003b24:	46bd      	mov	sp, r7
 8003b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	00f42400 	.word	0x00f42400
 8003b34:	017d7840 	.word	0x017d7840

08003b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	@ (8003b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000074 	.word	0x20000074

08003b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b54:	f7ff fff0 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	0a9b      	lsrs	r3, r3, #10
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	4903      	ldr	r1, [pc, #12]	@ (8003b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b66:	5ccb      	ldrb	r3, [r1, r3]
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40023800 	.word	0x40023800
 8003b74:	0800a360 	.word	0x0800a360

08003b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b7c:	f7ff ffdc 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	0b5b      	lsrs	r3, r3, #13
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4903      	ldr	r1, [pc, #12]	@ (8003b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	0800a360 	.word	0x0800a360

08003ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e041      	b.n	8003c36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fd ff2a 	bl	8001a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4610      	mov	r0, r2
 8003be0:	f000 f95e 	bl	8003ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d001      	beq.n	8003c58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e046      	b.n	8003ce6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a23      	ldr	r2, [pc, #140]	@ (8003cf4 <HAL_TIM_Base_Start+0xb4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d022      	beq.n	8003cb0 <HAL_TIM_Base_Start+0x70>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c72:	d01d      	beq.n	8003cb0 <HAL_TIM_Base_Start+0x70>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf8 <HAL_TIM_Base_Start+0xb8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d018      	beq.n	8003cb0 <HAL_TIM_Base_Start+0x70>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1e      	ldr	r2, [pc, #120]	@ (8003cfc <HAL_TIM_Base_Start+0xbc>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d013      	beq.n	8003cb0 <HAL_TIM_Base_Start+0x70>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003d00 <HAL_TIM_Base_Start+0xc0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00e      	beq.n	8003cb0 <HAL_TIM_Base_Start+0x70>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1b      	ldr	r2, [pc, #108]	@ (8003d04 <HAL_TIM_Base_Start+0xc4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d009      	beq.n	8003cb0 <HAL_TIM_Base_Start+0x70>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	@ (8003d08 <HAL_TIM_Base_Start+0xc8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <HAL_TIM_Base_Start+0x70>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a18      	ldr	r2, [pc, #96]	@ (8003d0c <HAL_TIM_Base_Start+0xcc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d111      	bne.n	8003cd4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d010      	beq.n	8003ce4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd2:	e007      	b.n	8003ce4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800
 8003d00:	40000c00 	.word	0x40000c00
 8003d04:	40010400 	.word	0x40010400
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40001800 	.word	0x40001800

08003d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_TIM_ConfigClockSource+0x1c>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e0b4      	b.n	8003e96 <HAL_TIM_ConfigClockSource+0x186>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d64:	d03e      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0xd4>
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d6a:	f200 8087 	bhi.w	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d72:	f000 8086 	beq.w	8003e82 <HAL_TIM_ConfigClockSource+0x172>
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d7a:	d87f      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d7c:	2b70      	cmp	r3, #112	@ 0x70
 8003d7e:	d01a      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0xa6>
 8003d80:	2b70      	cmp	r3, #112	@ 0x70
 8003d82:	d87b      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d84:	2b60      	cmp	r3, #96	@ 0x60
 8003d86:	d050      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x11a>
 8003d88:	2b60      	cmp	r3, #96	@ 0x60
 8003d8a:	d877      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d8c:	2b50      	cmp	r3, #80	@ 0x50
 8003d8e:	d03c      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0xfa>
 8003d90:	2b50      	cmp	r3, #80	@ 0x50
 8003d92:	d873      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b40      	cmp	r3, #64	@ 0x40
 8003d96:	d058      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x13a>
 8003d98:	2b40      	cmp	r3, #64	@ 0x40
 8003d9a:	d86f      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d9c:	2b30      	cmp	r3, #48	@ 0x30
 8003d9e:	d064      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x15a>
 8003da0:	2b30      	cmp	r3, #48	@ 0x30
 8003da2:	d86b      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d060      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x15a>
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d867      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d05c      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x15a>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d05a      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x15a>
 8003db4:	e062      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dc6:	f000 f991 	bl	80040ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	609a      	str	r2, [r3, #8]
      break;
 8003de2:	e04f      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003df4:	f000 f97a 	bl	80040ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e06:	609a      	str	r2, [r3, #8]
      break;
 8003e08:	e03c      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e16:	461a      	mov	r2, r3
 8003e18:	f000 f8ee 	bl	8003ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2150      	movs	r1, #80	@ 0x50
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f947 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003e28:	e02c      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e36:	461a      	mov	r2, r3
 8003e38:	f000 f90d 	bl	8004056 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2160      	movs	r1, #96	@ 0x60
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f937 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003e48:	e01c      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e56:	461a      	mov	r2, r3
 8003e58:	f000 f8ce 	bl	8003ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2140      	movs	r1, #64	@ 0x40
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f927 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003e68:	e00c      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f000 f91e 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003e7a:	e003      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e80:	e000      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a46      	ldr	r2, [pc, #280]	@ (8003fcc <TIM_Base_SetConfig+0x12c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebe:	d00f      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a43      	ldr	r2, [pc, #268]	@ (8003fd0 <TIM_Base_SetConfig+0x130>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00b      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a42      	ldr	r2, [pc, #264]	@ (8003fd4 <TIM_Base_SetConfig+0x134>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d007      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a41      	ldr	r2, [pc, #260]	@ (8003fd8 <TIM_Base_SetConfig+0x138>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a40      	ldr	r2, [pc, #256]	@ (8003fdc <TIM_Base_SetConfig+0x13c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d108      	bne.n	8003ef2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a35      	ldr	r2, [pc, #212]	@ (8003fcc <TIM_Base_SetConfig+0x12c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d02b      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f00:	d027      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a32      	ldr	r2, [pc, #200]	@ (8003fd0 <TIM_Base_SetConfig+0x130>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d023      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a31      	ldr	r2, [pc, #196]	@ (8003fd4 <TIM_Base_SetConfig+0x134>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01f      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a30      	ldr	r2, [pc, #192]	@ (8003fd8 <TIM_Base_SetConfig+0x138>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01b      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a2f      	ldr	r2, [pc, #188]	@ (8003fdc <TIM_Base_SetConfig+0x13c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d017      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2e      	ldr	r2, [pc, #184]	@ (8003fe0 <TIM_Base_SetConfig+0x140>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003fe4 <TIM_Base_SetConfig+0x144>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00f      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe8 <TIM_Base_SetConfig+0x148>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fec <TIM_Base_SetConfig+0x14c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d007      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a2a      	ldr	r2, [pc, #168]	@ (8003ff0 <TIM_Base_SetConfig+0x150>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d003      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a29      	ldr	r2, [pc, #164]	@ (8003ff4 <TIM_Base_SetConfig+0x154>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d108      	bne.n	8003f64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a10      	ldr	r2, [pc, #64]	@ (8003fcc <TIM_Base_SetConfig+0x12c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_Base_SetConfig+0xf8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a12      	ldr	r2, [pc, #72]	@ (8003fdc <TIM_Base_SetConfig+0x13c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d103      	bne.n	8003fa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d105      	bne.n	8003fbe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f023 0201 	bic.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	611a      	str	r2, [r3, #16]
  }
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40010000 	.word	0x40010000
 8003fd0:	40000400 	.word	0x40000400
 8003fd4:	40000800 	.word	0x40000800
 8003fd8:	40000c00 	.word	0x40000c00
 8003fdc:	40010400 	.word	0x40010400
 8003fe0:	40014000 	.word	0x40014000
 8003fe4:	40014400 	.word	0x40014400
 8003fe8:	40014800 	.word	0x40014800
 8003fec:	40001800 	.word	0x40001800
 8003ff0:	40001c00 	.word	0x40001c00
 8003ff4:	40002000 	.word	0x40002000

08003ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0201 	bic.w	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 030a 	bic.w	r3, r3, #10
 8004034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	621a      	str	r2, [r3, #32]
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004056:	b480      	push	{r7}
 8004058:	b087      	sub	sp, #28
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f023 0210 	bic.w	r2, r3, #16
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	031b      	lsls	r3, r3, #12
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004092:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f043 0307 	orr.w	r3, r3, #7
 80040d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	609a      	str	r2, [r3, #8]
}
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004106:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	021a      	lsls	r2, r3, #8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	431a      	orrs	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4313      	orrs	r3, r2
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004140:	2302      	movs	r3, #2
 8004142:	e05a      	b.n	80041fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a21      	ldr	r2, [pc, #132]	@ (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d022      	beq.n	80041ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004190:	d01d      	beq.n	80041ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1d      	ldr	r2, [pc, #116]	@ (800420c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d018      	beq.n	80041ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004210 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d013      	beq.n	80041ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004214 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00e      	beq.n	80041ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a18      	ldr	r2, [pc, #96]	@ (8004218 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d009      	beq.n	80041ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a17      	ldr	r2, [pc, #92]	@ (800421c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d004      	beq.n	80041ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a15      	ldr	r2, [pc, #84]	@ (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d10c      	bne.n	80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40010000 	.word	0x40010000
 800420c:	40000400 	.word	0x40000400
 8004210:	40000800 	.word	0x40000800
 8004214:	40000c00 	.word	0x40000c00
 8004218:	40010400 	.word	0x40010400
 800421c:	40014000 	.word	0x40014000
 8004220:	40001800 	.word	0x40001800

08004224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e042      	b.n	80042bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fd fc0a 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2224      	movs	r2, #36	@ 0x24
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fdf3 	bl	8004e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800427c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800428c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800429c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	@ 0x28
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	4613      	mov	r3, r2
 80042d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d175      	bne.n	80043d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_UART_Transmit+0x2c>
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e06e      	b.n	80043d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2221      	movs	r2, #33	@ 0x21
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004302:	f7fd fd8f 	bl	8001e24 <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	88fa      	ldrh	r2, [r7, #6]
 8004312:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431c:	d108      	bne.n	8004330 <HAL_UART_Transmit+0x6c>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d104      	bne.n	8004330 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	e003      	b.n	8004338 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004334:	2300      	movs	r3, #0
 8004336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004338:	e02e      	b.n	8004398 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2200      	movs	r2, #0
 8004342:	2180      	movs	r1, #128	@ 0x80
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 fb55 	bl	80049f4 <UART_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e03a      	b.n	80043d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10b      	bne.n	800437a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004370:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	3302      	adds	r3, #2
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	e007      	b.n	800438a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	781a      	ldrb	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	3301      	adds	r3, #1
 8004388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1cb      	bne.n	800433a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2200      	movs	r2, #0
 80043aa:	2140      	movs	r1, #64	@ 0x40
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 fb21 	bl	80049f4 <UART_WaitOnFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e006      	b.n	80043d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e000      	b.n	80043d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3720      	adds	r7, #32
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b08c      	sub	sp, #48	@ 0x30
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	4613      	mov	r3, r2
 80043e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d14a      	bne.n	800448a <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e043      	b.n	800448c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	461a      	mov	r2, r3
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fb45 	bl	8004aa6 <UART_Start_Receive_IT>
 800441c:	4603      	mov	r3, r0
 800441e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004422:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004426:	2b00      	cmp	r3, #0
 8004428:	d12c      	bne.n	8004484 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442e:	2b01      	cmp	r3, #1
 8004430:	d125      	bne.n	800447e <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004432:	2300      	movs	r3, #0
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	617b      	str	r3, [r7, #20]
   return(result);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f043 0310 	orr.w	r3, r3, #16
 800445e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004468:	627a      	str	r2, [r7, #36]	@ 0x24
 800446a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6a39      	ldr	r1, [r7, #32]
 800446e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	61fb      	str	r3, [r7, #28]
   return(result);
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e5      	bne.n	8004448 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800447c:	e002      	b.n	8004484 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004484:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004488:	e000      	b.n	800448c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800448a:	2302      	movs	r3, #2
  }
}
 800448c:	4618      	mov	r0, r3
 800448e:	3730      	adds	r7, #48	@ 0x30
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b0ba      	sub	sp, #232	@ 0xe8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80044d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10f      	bne.n	80044fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <HAL_UART_IRQHandler+0x66>
 80044e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fbf0 	bl	8004cd8 <UART_Receive_IT>
      return;
 80044f8:	e25b      	b.n	80049b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80de 	beq.w	80046c0 <HAL_UART_IRQHandler+0x22c>
 8004504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d106      	bne.n	800451e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004514:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80d1 	beq.w	80046c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800451e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <HAL_UART_IRQHandler+0xae>
 800452a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800452e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_UART_IRQHandler+0xd2>
 800454e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455e:	f043 0202 	orr.w	r2, r3, #2
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <HAL_UART_IRQHandler+0xf6>
 8004572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004582:	f043 0204 	orr.w	r2, r3, #4
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d011      	beq.n	80045ba <HAL_UART_IRQHandler+0x126>
 8004596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d105      	bne.n	80045ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b2:	f043 0208 	orr.w	r2, r3, #8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 81f2 	beq.w	80049a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_UART_IRQHandler+0x14e>
 80045d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fb7b 	bl	8004cd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ec:	2b40      	cmp	r3, #64	@ 0x40
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <HAL_UART_IRQHandler+0x17a>
 8004606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d04f      	beq.n	80046ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fa83 	bl	8004b1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461e:	2b40      	cmp	r3, #64	@ 0x40
 8004620:	d141      	bne.n	80046a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3314      	adds	r3, #20
 8004628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004638:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800463c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3314      	adds	r3, #20
 800464a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800464e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800465a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1d9      	bne.n	8004622 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d013      	beq.n	800469e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467a:	4a7e      	ldr	r2, [pc, #504]	@ (8004874 <HAL_UART_IRQHandler+0x3e0>)
 800467c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe fb17 	bl	8002cb6 <HAL_DMA_Abort_IT>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d016      	beq.n	80046bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004698:	4610      	mov	r0, r2
 800469a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	e00e      	b.n	80046bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f99e 	bl	80049e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a4:	e00a      	b.n	80046bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f99a 	bl	80049e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ac:	e006      	b.n	80046bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f996 	bl	80049e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80046ba:	e175      	b.n	80049a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046bc:	bf00      	nop
    return;
 80046be:	e173      	b.n	80049a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	f040 814f 	bne.w	8004968 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8148 	beq.w	8004968 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8141 	beq.w	8004968 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046e6:	2300      	movs	r3, #0
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004706:	2b40      	cmp	r3, #64	@ 0x40
 8004708:	f040 80b6 	bne.w	8004878 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004718:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8145 	beq.w	80049ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800472a:	429a      	cmp	r2, r3
 800472c:	f080 813e 	bcs.w	80049ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004736:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004742:	f000 8088 	beq.w	8004856 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800475c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004772:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800477e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800478a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1d9      	bne.n	8004746 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3314      	adds	r3, #20
 80047b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80047c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e1      	bne.n	8004792 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3314      	adds	r3, #20
 80047d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3314      	adds	r3, #20
 80047ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80047f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80047f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e3      	bne.n	80047ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004826:	f023 0310 	bic.w	r3, r3, #16
 800482a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004838:	65ba      	str	r2, [r7, #88]	@ 0x58
 800483a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800483e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e3      	bne.n	8004814 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004850:	4618      	mov	r0, r3
 8004852:	f7fe f9c0 	bl	8002bd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004864:	b29b      	uxth	r3, r3
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	b29b      	uxth	r3, r3
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7fc ff9f 	bl	80017b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004872:	e09b      	b.n	80049ac <HAL_UART_IRQHandler+0x518>
 8004874:	08004be1 	.word	0x08004be1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004880:	b29b      	uxth	r3, r3
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 808e 	beq.w	80049b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 8089 	beq.w	80049b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80048c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80048c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e3      	bne.n	800489e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3314      	adds	r3, #20
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	623b      	str	r3, [r7, #32]
   return(result);
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3314      	adds	r3, #20
 80048f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80048fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e3      	bne.n	80048d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	60fb      	str	r3, [r7, #12]
   return(result);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0310 	bic.w	r3, r3, #16
 8004932:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004940:	61fa      	str	r2, [r7, #28]
 8004942:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	69b9      	ldr	r1, [r7, #24]
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	617b      	str	r3, [r7, #20]
   return(result);
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e3      	bne.n	800491c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800495a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7fc ff25 	bl	80017b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004966:	e023      	b.n	80049b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800496c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004970:	2b00      	cmp	r3, #0
 8004972:	d009      	beq.n	8004988 <HAL_UART_IRQHandler+0x4f4>
 8004974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f941 	bl	8004c08 <UART_Transmit_IT>
    return;
 8004986:	e014      	b.n	80049b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800498c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00e      	beq.n	80049b2 <HAL_UART_IRQHandler+0x51e>
 8004994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f981 	bl	8004ca8 <UART_EndTransmit_IT>
    return;
 80049a6:	e004      	b.n	80049b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80049a8:	bf00      	nop
 80049aa:	e002      	b.n	80049b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80049ac:	bf00      	nop
 80049ae:	e000      	b.n	80049b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80049b0:	bf00      	nop
  }
}
 80049b2:	37e8      	adds	r7, #232	@ 0xe8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a04:	e03b      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d037      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0e:	f7fd fa09 	bl	8001e24 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	6a3a      	ldr	r2, [r7, #32]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d302      	bcc.n	8004a24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e03a      	b.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d023      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b80      	cmp	r3, #128	@ 0x80
 8004a3a:	d020      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b40      	cmp	r3, #64	@ 0x40
 8004a40:	d01d      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d116      	bne.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 f857 	bl	8004b1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2208      	movs	r2, #8
 8004a70:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e00f      	b.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4013      	ands	r3, r2
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	bf0c      	ite	eq
 8004a8e:	2301      	moveq	r3, #1
 8004a90:	2300      	movne	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d0b4      	beq.n	8004a06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	88fa      	ldrh	r2, [r7, #6]
 8004abe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	88fa      	ldrh	r2, [r7, #6]
 8004ac4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2222      	movs	r2, #34	@ 0x22
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0201 	orr.w	r2, r2, #1
 8004afa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0220 	orr.w	r2, r2, #32
 8004b0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b095      	sub	sp, #84	@ 0x54
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	330c      	adds	r3, #12
 8004b28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	330c      	adds	r3, #12
 8004b40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b42:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b4a:	e841 2300 	strex	r3, r2, [r1]
 8004b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1e5      	bne.n	8004b22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3314      	adds	r3, #20
 8004b5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3314      	adds	r3, #20
 8004b74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e5      	bne.n	8004b56 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d119      	bne.n	8004bc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f023 0310 	bic.w	r3, r3, #16
 8004ba8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bb2:	61ba      	str	r2, [r7, #24]
 8004bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6979      	ldr	r1, [r7, #20]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e5      	bne.n	8004b92 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bd4:	bf00      	nop
 8004bd6:	3754      	adds	r7, #84	@ 0x54
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7ff fef0 	bl	80049e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b21      	cmp	r3, #33	@ 0x21
 8004c1a:	d13e      	bne.n	8004c9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c24:	d114      	bne.n	8004c50 <UART_Transmit_IT+0x48>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d110      	bne.n	8004c50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	1c9a      	adds	r2, r3, #2
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	621a      	str	r2, [r3, #32]
 8004c4e:	e008      	b.n	8004c62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	1c59      	adds	r1, r3, #1
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6211      	str	r1, [r2, #32]
 8004c5a:	781a      	ldrb	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10f      	bne.n	8004c96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e000      	b.n	8004c9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
  }
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff fe75 	bl	80049b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08c      	sub	sp, #48	@ 0x30
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b22      	cmp	r3, #34	@ 0x22
 8004cea:	f040 80ae 	bne.w	8004e4a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf6:	d117      	bne.n	8004d28 <UART_Receive_IT+0x50>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d113      	bne.n	8004d28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d08:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	1c9a      	adds	r2, r3, #2
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d26:	e026      	b.n	8004d76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d3a:	d007      	beq.n	8004d4c <UART_Receive_IT+0x74>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <UART_Receive_IT+0x82>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	e008      	b.n	8004d6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	4619      	mov	r1, r3
 8004d84:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d15d      	bne.n	8004e46 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0220 	bic.w	r2, r2, #32
 8004d98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004da8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0201 	bic.w	r2, r2, #1
 8004db8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d135      	bne.n	8004e3c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	330c      	adds	r3, #12
 8004ddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	613b      	str	r3, [r7, #16]
   return(result);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f023 0310 	bic.w	r3, r3, #16
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	330c      	adds	r3, #12
 8004df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df6:	623a      	str	r2, [r7, #32]
 8004df8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	69f9      	ldr	r1, [r7, #28]
 8004dfc:	6a3a      	ldr	r2, [r7, #32]
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e5      	bne.n	8004dd6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d10a      	bne.n	8004e2e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fc fcbb 	bl	80017b0 <HAL_UARTEx_RxEventCallback>
 8004e3a:	e002      	b.n	8004e42 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7ff fdc5 	bl	80049cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	e002      	b.n	8004e4c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e000      	b.n	8004e4c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e4a:	2302      	movs	r3, #2
  }
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3730      	adds	r7, #48	@ 0x30
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e58:	b0c0      	sub	sp, #256	@ 0x100
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e70:	68d9      	ldr	r1, [r3, #12]
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	ea40 0301 	orr.w	r3, r0, r1
 8004e7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004eac:	f021 010c 	bic.w	r1, r1, #12
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ece:	6999      	ldr	r1, [r3, #24]
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	ea40 0301 	orr.w	r3, r0, r1
 8004eda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b8f      	ldr	r3, [pc, #572]	@ (8005120 <UART_SetConfig+0x2cc>)
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d005      	beq.n	8004ef4 <UART_SetConfig+0xa0>
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	4b8d      	ldr	r3, [pc, #564]	@ (8005124 <UART_SetConfig+0x2d0>)
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d104      	bne.n	8004efe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ef4:	f7fe fe40 	bl	8003b78 <HAL_RCC_GetPCLK2Freq>
 8004ef8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004efc:	e003      	b.n	8004f06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004efe:	f7fe fe27 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 8004f02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f10:	f040 810c 	bne.w	800512c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f26:	4622      	mov	r2, r4
 8004f28:	462b      	mov	r3, r5
 8004f2a:	1891      	adds	r1, r2, r2
 8004f2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f2e:	415b      	adcs	r3, r3
 8004f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f36:	4621      	mov	r1, r4
 8004f38:	eb12 0801 	adds.w	r8, r2, r1
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	eb43 0901 	adc.w	r9, r3, r1
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f56:	4690      	mov	r8, r2
 8004f58:	4699      	mov	r9, r3
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	eb18 0303 	adds.w	r3, r8, r3
 8004f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f64:	462b      	mov	r3, r5
 8004f66:	eb49 0303 	adc.w	r3, r9, r3
 8004f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f82:	460b      	mov	r3, r1
 8004f84:	18db      	adds	r3, r3, r3
 8004f86:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f88:	4613      	mov	r3, r2
 8004f8a:	eb42 0303 	adc.w	r3, r2, r3
 8004f8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f98:	f7fb fe76 	bl	8000c88 <__aeabi_uldivmod>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4b61      	ldr	r3, [pc, #388]	@ (8005128 <UART_SetConfig+0x2d4>)
 8004fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	011c      	lsls	r4, r3, #4
 8004faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	1891      	adds	r1, r2, r2
 8004fc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004fc4:	415b      	adcs	r3, r3
 8004fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004fcc:	4641      	mov	r1, r8
 8004fce:	eb12 0a01 	adds.w	sl, r2, r1
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	eb43 0b01 	adc.w	fp, r3, r1
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fe4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fec:	4692      	mov	sl, r2
 8004fee:	469b      	mov	fp, r3
 8004ff0:	4643      	mov	r3, r8
 8004ff2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ffa:	464b      	mov	r3, r9
 8004ffc:	eb4b 0303 	adc.w	r3, fp, r3
 8005000:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005010:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005014:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005018:	460b      	mov	r3, r1
 800501a:	18db      	adds	r3, r3, r3
 800501c:	643b      	str	r3, [r7, #64]	@ 0x40
 800501e:	4613      	mov	r3, r2
 8005020:	eb42 0303 	adc.w	r3, r2, r3
 8005024:	647b      	str	r3, [r7, #68]	@ 0x44
 8005026:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800502a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800502e:	f7fb fe2b 	bl	8000c88 <__aeabi_uldivmod>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4611      	mov	r1, r2
 8005038:	4b3b      	ldr	r3, [pc, #236]	@ (8005128 <UART_SetConfig+0x2d4>)
 800503a:	fba3 2301 	umull	r2, r3, r3, r1
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	2264      	movs	r2, #100	@ 0x64
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	1acb      	subs	r3, r1, r3
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800504e:	4b36      	ldr	r3, [pc, #216]	@ (8005128 <UART_SetConfig+0x2d4>)
 8005050:	fba3 2302 	umull	r2, r3, r3, r2
 8005054:	095b      	lsrs	r3, r3, #5
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800505c:	441c      	add	r4, r3
 800505e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005062:	2200      	movs	r2, #0
 8005064:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005068:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800506c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005070:	4642      	mov	r2, r8
 8005072:	464b      	mov	r3, r9
 8005074:	1891      	adds	r1, r2, r2
 8005076:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005078:	415b      	adcs	r3, r3
 800507a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800507c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005080:	4641      	mov	r1, r8
 8005082:	1851      	adds	r1, r2, r1
 8005084:	6339      	str	r1, [r7, #48]	@ 0x30
 8005086:	4649      	mov	r1, r9
 8005088:	414b      	adcs	r3, r1
 800508a:	637b      	str	r3, [r7, #52]	@ 0x34
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005098:	4659      	mov	r1, fp
 800509a:	00cb      	lsls	r3, r1, #3
 800509c:	4651      	mov	r1, sl
 800509e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050a2:	4651      	mov	r1, sl
 80050a4:	00ca      	lsls	r2, r1, #3
 80050a6:	4610      	mov	r0, r2
 80050a8:	4619      	mov	r1, r3
 80050aa:	4603      	mov	r3, r0
 80050ac:	4642      	mov	r2, r8
 80050ae:	189b      	adds	r3, r3, r2
 80050b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050b4:	464b      	mov	r3, r9
 80050b6:	460a      	mov	r2, r1
 80050b8:	eb42 0303 	adc.w	r3, r2, r3
 80050bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050d4:	460b      	mov	r3, r1
 80050d6:	18db      	adds	r3, r3, r3
 80050d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050da:	4613      	mov	r3, r2
 80050dc:	eb42 0303 	adc.w	r3, r2, r3
 80050e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050ea:	f7fb fdcd 	bl	8000c88 <__aeabi_uldivmod>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005128 <UART_SetConfig+0x2d4>)
 80050f4:	fba3 1302 	umull	r1, r3, r3, r2
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	2164      	movs	r1, #100	@ 0x64
 80050fc:	fb01 f303 	mul.w	r3, r1, r3
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	3332      	adds	r3, #50	@ 0x32
 8005106:	4a08      	ldr	r2, [pc, #32]	@ (8005128 <UART_SetConfig+0x2d4>)
 8005108:	fba2 2303 	umull	r2, r3, r2, r3
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	f003 0207 	and.w	r2, r3, #7
 8005112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4422      	add	r2, r4
 800511a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800511c:	e106      	b.n	800532c <UART_SetConfig+0x4d8>
 800511e:	bf00      	nop
 8005120:	40011000 	.word	0x40011000
 8005124:	40011400 	.word	0x40011400
 8005128:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800512c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005130:	2200      	movs	r2, #0
 8005132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005136:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800513a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800513e:	4642      	mov	r2, r8
 8005140:	464b      	mov	r3, r9
 8005142:	1891      	adds	r1, r2, r2
 8005144:	6239      	str	r1, [r7, #32]
 8005146:	415b      	adcs	r3, r3
 8005148:	627b      	str	r3, [r7, #36]	@ 0x24
 800514a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800514e:	4641      	mov	r1, r8
 8005150:	1854      	adds	r4, r2, r1
 8005152:	4649      	mov	r1, r9
 8005154:	eb43 0501 	adc.w	r5, r3, r1
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	00eb      	lsls	r3, r5, #3
 8005162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005166:	00e2      	lsls	r2, r4, #3
 8005168:	4614      	mov	r4, r2
 800516a:	461d      	mov	r5, r3
 800516c:	4643      	mov	r3, r8
 800516e:	18e3      	adds	r3, r4, r3
 8005170:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005174:	464b      	mov	r3, r9
 8005176:	eb45 0303 	adc.w	r3, r5, r3
 800517a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800517e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800518a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800519a:	4629      	mov	r1, r5
 800519c:	008b      	lsls	r3, r1, #2
 800519e:	4621      	mov	r1, r4
 80051a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051a4:	4621      	mov	r1, r4
 80051a6:	008a      	lsls	r2, r1, #2
 80051a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051ac:	f7fb fd6c 	bl	8000c88 <__aeabi_uldivmod>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4b60      	ldr	r3, [pc, #384]	@ (8005338 <UART_SetConfig+0x4e4>)
 80051b6:	fba3 2302 	umull	r2, r3, r3, r2
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	011c      	lsls	r4, r3, #4
 80051be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051d0:	4642      	mov	r2, r8
 80051d2:	464b      	mov	r3, r9
 80051d4:	1891      	adds	r1, r2, r2
 80051d6:	61b9      	str	r1, [r7, #24]
 80051d8:	415b      	adcs	r3, r3
 80051da:	61fb      	str	r3, [r7, #28]
 80051dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051e0:	4641      	mov	r1, r8
 80051e2:	1851      	adds	r1, r2, r1
 80051e4:	6139      	str	r1, [r7, #16]
 80051e6:	4649      	mov	r1, r9
 80051e8:	414b      	adcs	r3, r1
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051f8:	4659      	mov	r1, fp
 80051fa:	00cb      	lsls	r3, r1, #3
 80051fc:	4651      	mov	r1, sl
 80051fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005202:	4651      	mov	r1, sl
 8005204:	00ca      	lsls	r2, r1, #3
 8005206:	4610      	mov	r0, r2
 8005208:	4619      	mov	r1, r3
 800520a:	4603      	mov	r3, r0
 800520c:	4642      	mov	r2, r8
 800520e:	189b      	adds	r3, r3, r2
 8005210:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005214:	464b      	mov	r3, r9
 8005216:	460a      	mov	r2, r1
 8005218:	eb42 0303 	adc.w	r3, r2, r3
 800521c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	67bb      	str	r3, [r7, #120]	@ 0x78
 800522a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005238:	4649      	mov	r1, r9
 800523a:	008b      	lsls	r3, r1, #2
 800523c:	4641      	mov	r1, r8
 800523e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005242:	4641      	mov	r1, r8
 8005244:	008a      	lsls	r2, r1, #2
 8005246:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800524a:	f7fb fd1d 	bl	8000c88 <__aeabi_uldivmod>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4611      	mov	r1, r2
 8005254:	4b38      	ldr	r3, [pc, #224]	@ (8005338 <UART_SetConfig+0x4e4>)
 8005256:	fba3 2301 	umull	r2, r3, r3, r1
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	2264      	movs	r2, #100	@ 0x64
 800525e:	fb02 f303 	mul.w	r3, r2, r3
 8005262:	1acb      	subs	r3, r1, r3
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	3332      	adds	r3, #50	@ 0x32
 8005268:	4a33      	ldr	r2, [pc, #204]	@ (8005338 <UART_SetConfig+0x4e4>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005274:	441c      	add	r4, r3
 8005276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800527a:	2200      	movs	r2, #0
 800527c:	673b      	str	r3, [r7, #112]	@ 0x70
 800527e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005280:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	1891      	adds	r1, r2, r2
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	415b      	adcs	r3, r3
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005294:	4641      	mov	r1, r8
 8005296:	1851      	adds	r1, r2, r1
 8005298:	6039      	str	r1, [r7, #0]
 800529a:	4649      	mov	r1, r9
 800529c:	414b      	adcs	r3, r1
 800529e:	607b      	str	r3, [r7, #4]
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052ac:	4659      	mov	r1, fp
 80052ae:	00cb      	lsls	r3, r1, #3
 80052b0:	4651      	mov	r1, sl
 80052b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b6:	4651      	mov	r1, sl
 80052b8:	00ca      	lsls	r2, r1, #3
 80052ba:	4610      	mov	r0, r2
 80052bc:	4619      	mov	r1, r3
 80052be:	4603      	mov	r3, r0
 80052c0:	4642      	mov	r2, r8
 80052c2:	189b      	adds	r3, r3, r2
 80052c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052c6:	464b      	mov	r3, r9
 80052c8:	460a      	mov	r2, r1
 80052ca:	eb42 0303 	adc.w	r3, r2, r3
 80052ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80052da:	667a      	str	r2, [r7, #100]	@ 0x64
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052e8:	4649      	mov	r1, r9
 80052ea:	008b      	lsls	r3, r1, #2
 80052ec:	4641      	mov	r1, r8
 80052ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052f2:	4641      	mov	r1, r8
 80052f4:	008a      	lsls	r2, r1, #2
 80052f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80052fa:	f7fb fcc5 	bl	8000c88 <__aeabi_uldivmod>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4b0d      	ldr	r3, [pc, #52]	@ (8005338 <UART_SetConfig+0x4e4>)
 8005304:	fba3 1302 	umull	r1, r3, r3, r2
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	2164      	movs	r1, #100	@ 0x64
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	3332      	adds	r3, #50	@ 0x32
 8005316:	4a08      	ldr	r2, [pc, #32]	@ (8005338 <UART_SetConfig+0x4e4>)
 8005318:	fba2 2303 	umull	r2, r3, r2, r3
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	f003 020f 	and.w	r2, r3, #15
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4422      	add	r2, r4
 800532a:	609a      	str	r2, [r3, #8]
}
 800532c:	bf00      	nop
 800532e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005332:	46bd      	mov	sp, r7
 8005334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005338:	51eb851f 	.word	0x51eb851f

0800533c <Screen_begin>:
    [CONDITION_YEAR]     = {.max_value = 99, .min_value = 1},
    [CONDITION_HOUR]     = {.max_value = 23, .min_value = 0},
    [CONDITION_MINUTE]   = {.max_value = 59, .min_value = 0}
};

void Screen_begin(UART_HandleTypeDef * UART_Screen) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
    // Init _DWIN UART
	_Screen.Screen_DWIN.pUart = UART_Screen;
 8005344:	4a1f      	ldr	r2, [pc, #124]	@ (80053c4 <Screen_begin+0x88>)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6013      	str	r3, [r2, #0]

    // add receive function callback
	Screen_init_handler_table(&_Screen);
 800534a:	481e      	ldr	r0, [pc, #120]	@ (80053c4 <Screen_begin+0x88>)
 800534c:	f000 f9fe 	bl	800574c <Screen_init_handler_table>
    DWIN_SetCallback((Dwin_t *)&_Screen,(pListenDWIN)Screen_RX_Callback);
 8005350:	491d      	ldr	r1, [pc, #116]	@ (80053c8 <Screen_begin+0x8c>)
 8005352:	481c      	ldr	r0, [pc, #112]	@ (80053c4 <Screen_begin+0x88>)
 8005354:	f000 fbd1 	bl	8005afa <DWIN_SetCallback>

    // Init screen keyboard     
    _Screen.Screen_keyboard.VP_Text = 0xFFFF;
 8005358:	4b1a      	ldr	r3, [pc, #104]	@ (80053c4 <Screen_begin+0x88>)
 800535a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800535e:	819a      	strh	r2, [r3, #12]
    _Screen.Screen_keyboard.Index_String = 0;
 8005360:	4b18      	ldr	r3, [pc, #96]	@ (80053c4 <Screen_begin+0x88>)
 8005362:	2200      	movs	r2, #0
 8005364:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    _Screen.Screen_keyboard.Caplock = 0;   
 8005368:	4b16      	ldr	r3, [pc, #88]	@ (80053c4 <Screen_begin+0x88>)
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    DWIN_SetPage((Dwin_t *)&_Screen,106);  // Go to first page when start
 8005370:	216a      	movs	r1, #106	@ 0x6a
 8005372:	4814      	ldr	r0, [pc, #80]	@ (80053c4 <Screen_begin+0x88>)
 8005374:	f000 fafe 	bl	8005974 <DWIN_SetPage>
    DWIN_SetText((Dwin_t *)&_Screen,0x7000,(uint8_t *)"Dang tt", strlen("Dangtt"));
 8005378:	2306      	movs	r3, #6
 800537a:	4a14      	ldr	r2, [pc, #80]	@ (80053cc <Screen_begin+0x90>)
 800537c:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8005380:	4810      	ldr	r0, [pc, #64]	@ (80053c4 <Screen_begin+0x88>)
 8005382:	f000 fb1e 	bl	80059c2 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)&_Screen,0x7010,(uint8_t *)"Dangtt1762003", sizeof("Dangtt1762003"));
 8005386:	230e      	movs	r3, #14
 8005388:	4a11      	ldr	r2, [pc, #68]	@ (80053d0 <Screen_begin+0x94>)
 800538a:	f247 0110 	movw	r1, #28688	@ 0x7010
 800538e:	480d      	ldr	r0, [pc, #52]	@ (80053c4 <Screen_begin+0x88>)
 8005390:	f000 fb17 	bl	80059c2 <DWIN_SetText>
    uint8_t text_show[] = {0x31,0x32};
 8005394:	f243 2331 	movw	r3, #12849	@ 0x3231
 8005398:	81bb      	strh	r3, [r7, #12]
    DWIN_SetText((Dwin_t *)&_Screen,0x9000,text_show,2);
 800539a:	f107 020c 	add.w	r2, r7, #12
 800539e:	2302      	movs	r3, #2
 80053a0:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80053a4:	4807      	ldr	r0, [pc, #28]	@ (80053c4 <Screen_begin+0x88>)
 80053a6:	f000 fb0c 	bl	80059c2 <DWIN_SetText>
    _Screen.pre_page = 106;
 80053aa:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <Screen_begin+0x88>)
 80053ac:	226a      	movs	r2, #106	@ 0x6a
 80053ae:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    //     DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1800,25,200,data,current);
    //     ++current;
    //     HAL_Delay(500);
    // }

    _Screen.Status_Dev_1 = false;
 80053b2:	4b04      	ldr	r3, [pc, #16]	@ (80053c4 <Screen_begin+0x88>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	2000043c 	.word	0x2000043c
 80053c8:	080053f1 	.word	0x080053f1
 80053cc:	0800a320 	.word	0x0800a320
 80053d0:	0800a328 	.word	0x0800a328

080053d4 <Screen_RX_data>:

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4803      	ldr	r0, [pc, #12]	@ (80053ec <Screen_RX_data+0x18>)
 80053e0:	f000 fb99 	bl	8005b16 <DWIN_Listen>
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	2000043c 	.word	0x2000043c

080053f0 <Screen_RX_Callback>:

void Screen_RX_Callback(uint16_t Vpaddress, uint16_t lastByte, uint8_t ASCII_Code) { 
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	80fb      	strh	r3, [r7, #6]
 80053fa:	460b      	mov	r3, r1
 80053fc:	80bb      	strh	r3, [r7, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	70fb      	strb	r3, [r7, #3]
    screen_event_t screen_event;

    screen_event.event = Index_VP(Vpaddress,lookup_VP_SIG,SIZE_LOOKUP_VP_SIG);
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	2204      	movs	r2, #4
 8005406:	490a      	ldr	r1, [pc, #40]	@ (8005430 <Screen_RX_Callback+0x40>)
 8005408:	4618      	mov	r0, r3
 800540a:	f000 f954 	bl	80056b6 <Index_VP>
 800540e:	4603      	mov	r3, r0
 8005410:	723b      	strb	r3, [r7, #8]
    screen_event.data = lastByte;
 8005412:	88bb      	ldrh	r3, [r7, #4]
 8005414:	817b      	strh	r3, [r7, #10]
    screen_event.ASCII_Code = ASCII_Code;
 8005416:	78fb      	ldrb	r3, [r7, #3]
 8005418:	733b      	strb	r3, [r7, #12]

    // call to respective function
    Screen_excute_RX_function(&_Screen,&screen_event);
 800541a:	f107 0308 	add.w	r3, r7, #8
 800541e:	4619      	mov	r1, r3
 8005420:	4804      	ldr	r0, [pc, #16]	@ (8005434 <Screen_RX_Callback+0x44>)
 8005422:	f000 f9d1 	bl	80057c8 <Screen_excute_RX_function>
}
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000080 	.word	0x20000080
 8005434:	2000043c 	.word	0x2000043c

08005438 <Navigation_setting_page>:


#pragma region CALLBACK FUNCTION VP ADRRESS 

void Navigation_setting_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
 8005442:	2168      	movs	r1, #104	@ 0x68
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fa95 	bl	8005974 <DWIN_SetPage>
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <Navigation_home_page>:

void Navigation_home_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
    // Show data

}   
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <Navigation_Next_MainPage>:

void Navigation_Next_MainPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]

    // Change current device
    screen_obj->curr_device++;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8005478:	3301      	adds	r3, #1
 800547a:	b2da      	uxtb	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

    // Show data with correspond device index
    switch (screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain) {
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8005488:	4619      	mov	r1, r3
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	440b      	add	r3, r1
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	3349      	adds	r3, #73	@ 0x49
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	3b64      	subs	r3, #100	@ 0x64
 800549c:	2b0b      	cmp	r3, #11
 800549e:	d81c      	bhi.n	80054da <Navigation_Next_MainPage+0x72>
 80054a0:	a201      	add	r2, pc, #4	@ (adr r2, 80054a8 <Navigation_Next_MainPage+0x40>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054d9 	.word	0x080054d9
 80054ac:	080054d9 	.word	0x080054d9
 80054b0:	080054d9 	.word	0x080054d9
 80054b4:	080054db 	.word	0x080054db
 80054b8:	080054db 	.word	0x080054db
 80054bc:	080054db 	.word	0x080054db
 80054c0:	080054db 	.word	0x080054db
 80054c4:	080054db 	.word	0x080054db
 80054c8:	080054db 	.word	0x080054db
 80054cc:	080054db 	.word	0x080054db
 80054d0:	080054db 	.word	0x080054db
 80054d4:	080054d9 	.word	0x080054d9
        case DWINPAGE_MAIN : {
            // Show info 

        } break;
 80054d8:	bf00      	nop
        } break;
        case DWINPAGE_MAIN_GRAPH : {

        } break;
    }
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop

080054e8 <Navigation_Next_PrevPage>:

void Navigation_Next_PrevPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]

}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <ON_OFF_Button>:

void ON_OFF_Button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80054fe:	b580      	push	{r7, lr}
 8005500:	b082      	sub	sp, #8
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
    // do sth
    screen_obj->Status_Dev_1 = !screen_obj->Status_Dev_1;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 800550e:	2b00      	cmp	r3, #0
 8005510:	bf14      	ite	ne
 8005512:	2301      	movne	r3, #1
 8005514:	2300      	moveq	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f083 0301 	eor.w	r3, r3, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	b2da      	uxtb	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
    // change icon
    // DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ON_OFF_Icon_1,ON_ICON);
    //    HAL_Delay(1000);
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ON_OFF_Icon_1,screen_obj->Status_Dev_1);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8005530:	461a      	mov	r2, r3
 8005532:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fab2 	bl	8005aa0 <DWIN_SetVariable_Icon>

}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <Navigation_keyboard>:

void Navigation_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
    // Switch screen keyboard will excute in screen

    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->data;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	885a      	ldrh	r2, [r3, #2]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	330e      	adds	r3, #14
 8005562:	2232      	movs	r2, #50	@ 0x32
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f002 f8f9 	bl	800775e <memset>
    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f103 020e 	add.w	r2, r3, #14
 8005572:	2332      	movs	r3, #50	@ 0x32
 8005574:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fa22 	bl	80059c2 <DWIN_SetText>
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <Keyboard>:

void Keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
    
    /* The other Functions button */
    if (screen_event->data == 0xF3) { // Delete button
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	885b      	ldrh	r3, [r3, #2]
 8005594:	2bf3      	cmp	r3, #243	@ 0xf3
 8005596:	d10d      	bne.n	80055b4 <Keyboard+0x2e>
        if (screen_obj->Screen_keyboard.Index_String != 0) {
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d07a      	beq.n	8005698 <Keyboard+0x112>
            --screen_obj->Screen_keyboard.Index_String;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 80055b2:	e071      	b.n	8005698 <Keyboard+0x112>
        }
    } else if (screen_event->data == 0xF4) { // Caplock button
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	885b      	ldrh	r3, [r3, #2]
 80055b8:	2bf4      	cmp	r3, #244	@ 0xf4
 80055ba:	d111      	bne.n	80055e0 <Keyboard+0x5a>
        /* Toggle status Caplock keyboard */
        screen_obj->Screen_keyboard.Caplock = !screen_obj->Screen_keyboard.Caplock; 
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bf14      	ite	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	2300      	moveq	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f083 0301 	eor.w	r3, r3, #1
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055de:	e05b      	b.n	8005698 <Keyboard+0x112>
    } else if (screen_event->data == 0xF1) { // Enter button
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	885b      	ldrh	r3, [r3, #2]
 80055e4:	2bf1      	cmp	r3, #241	@ 0xf1
 80055e6:	d118      	bne.n	800561a <Keyboard+0x94>
        // Check if the data is valid
        if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f921 	bl	8005830 <Screen_CheckInput_Keyboard>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d151      	bne.n	8005698 <Keyboard+0x112>
            // Show data input to VP 
            DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8999      	ldrh	r1, [r3, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f103 020e 	add.w	r2, r3, #14
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f9dc 	bl	80059c2 <DWIN_SetText>
            DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f9ae 	bl	8005974 <DWIN_SetPage>
 8005618:	e03e      	b.n	8005698 <Keyboard+0x112>
        }
    }
    /* the data value is the character input -> add to string */
    else if (screen_event->data >= 0x41 && screen_event->data <= 0x5A) { // letter need check Caplock
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	885b      	ldrh	r3, [r3, #2]
 800561e:	2b40      	cmp	r3, #64	@ 0x40
 8005620:	d92b      	bls.n	800567a <Keyboard+0xf4>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	885b      	ldrh	r3, [r3, #2]
 8005626:	2b5a      	cmp	r3, #90	@ 0x5a
 8005628:	d827      	bhi.n	800567a <Keyboard+0xf4>
        if (screen_obj->Screen_keyboard.Caplock) { // Caplock is on
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005630:	2b00      	cmp	r3, #0
 8005632:	d012      	beq.n	800565a <Keyboard+0xd4>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data + 0x20;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	885b      	ldrh	r3, [r3, #2]
 8005638:	b2da      	uxtb	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005640:	1c59      	adds	r1, r3, #1
 8005642:	b288      	uxth	r0, r1
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	f8a1 0040 	strh.w	r0, [r1, #64]	@ 0x40
 800564a:	4619      	mov	r1, r3
 800564c:	f102 0320 	add.w	r3, r2, #32
 8005650:	b2da      	uxtb	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	440b      	add	r3, r1
 8005656:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock) { // Caplock is on
 8005658:	e01e      	b.n	8005698 <Keyboard+0x112>
        } else {
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	8858      	ldrh	r0, [r3, #2]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	b291      	uxth	r1, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 800566e:	4619      	mov	r1, r3
 8005670:	b2c2      	uxtb	r2, r0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	440b      	add	r3, r1
 8005676:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock) { // Caplock is on
 8005678:	e00e      	b.n	8005698 <Keyboard+0x112>
        }
    } else {
        screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	8858      	ldrh	r0, [r3, #2]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	b291      	uxth	r1, r2
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 800568e:	4619      	mov	r1, r3
 8005690:	b2c2      	uxtb	r2, r0
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	440b      	add	r3, r1
 8005696:	739a      	strb	r2, [r3, #14]
    }

    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f103 020e 	add.w	r2, r3, #14
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80056a4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f98a 	bl	80059c2 <DWIN_SetText>
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <Index_VP>:
#pragma endregion CALLBACK FUNCTION VP ADRRESS 

#pragma region FUNCTION EXCUTE SCREEN

// binary search index of VP address
uint8_t Index_VP(uint16_t vp, VP_item* VP_array, uint8_t Size_array) {
 80056b6:	b480      	push	{r7}
 80056b8:	b087      	sub	sp, #28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	4603      	mov	r3, r0
 80056be:	6039      	str	r1, [r7, #0]
 80056c0:	80fb      	strh	r3, [r7, #6]
 80056c2:	4613      	mov	r3, r2
 80056c4:	717b      	strb	r3, [r7, #5]
    int left = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
    int right = Size_array - 1;
 80056ca:	797b      	ldrb	r3, [r7, #5]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]
    int mid;
    for (int i = left; i <= right; i++) {
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	e02e      	b.n	8005734 <Index_VP+0x7e>
        mid = (left + right)/2;
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	0fda      	lsrs	r2, r3, #31
 80056de:	4413      	add	r3, r2
 80056e0:	105b      	asrs	r3, r3, #1
 80056e2:	60bb      	str	r3, [r7, #8]
        if (VP_array[mid].VP_address == vp) {
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	4413      	add	r3, r2
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	88fa      	ldrh	r2, [r7, #6]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d105      	bne.n	8005700 <Index_VP+0x4a>
            return VP_array[mid].index;     // Return the index corresponding to the VP
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	4413      	add	r3, r2
 80056fc:	789b      	ldrb	r3, [r3, #2]
 80056fe:	e01e      	b.n	800573e <Index_VP+0x88>
        } else if (VP_array[mid].VP_address > vp) {
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	4413      	add	r3, r2
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	88fa      	ldrh	r2, [r7, #6]
 800570c:	429a      	cmp	r2, r3
 800570e:	d203      	bcs.n	8005718 <Index_VP+0x62>
            right = mid - 1;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	3b01      	subs	r3, #1
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	e00a      	b.n	800572e <Index_VP+0x78>
        } else if (VP_array[mid].VP_address < vp) {
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	4413      	add	r3, r2
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	429a      	cmp	r2, r3
 8005726:	d902      	bls.n	800572e <Index_VP+0x78>
            left = mid + 1;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	3301      	adds	r3, #1
 800572c:	617b      	str	r3, [r7, #20]
    for (int i = left; i <= right; i++) {
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3301      	adds	r3, #1
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	429a      	cmp	r2, r3
 800573a:	ddcc      	ble.n	80056d6 <Index_VP+0x20>
        }
    }
    return 255; // VP input is not valid
 800573c:	23ff      	movs	r3, #255	@ 0xff
}
 800573e:	4618      	mov	r0, r3
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <Screen_init_handler_table>:

void Screen_init_handler_table(Screen_t *const obj_screen) {
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
                                                                a_handler_on_off_sig ,
                                                                a_handler_keyboard_sig,
                                                                a_handler_navigation_keyboard  };

    // Assign the callback function to handler table
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PAGE]     = Navigation_setting_page ;
 8005754:	4b14      	ldr	r3, [pc, #80]	@ (80057a8 <Screen_init_handler_table+0x5c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a14      	ldr	r2, [pc, #80]	@ (80057ac <Screen_init_handler_table+0x60>)
 800575a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_HOME]             = Navigation_home_page;
 800575c:	4b12      	ldr	r3, [pc, #72]	@ (80057a8 <Screen_init_handler_table+0x5c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3308      	adds	r3, #8
 8005762:	4a13      	ldr	r2, [pc, #76]	@ (80057b0 <Screen_init_handler_table+0x64>)
 8005764:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_NEXT_MAINPAGE]    = Navigation_Next_MainPage;
 8005766:	4b10      	ldr	r3, [pc, #64]	@ (80057a8 <Screen_init_handler_table+0x5c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3318      	adds	r3, #24
 800576c:	4a11      	ldr	r2, [pc, #68]	@ (80057b4 <Screen_init_handler_table+0x68>)
 800576e:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_PREV_MAINPAGE]    = Navigation_Next_PrevPage;
 8005770:	4b0d      	ldr	r3, [pc, #52]	@ (80057a8 <Screen_init_handler_table+0x5c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	331c      	adds	r3, #28
 8005776:	4a10      	ldr	r2, [pc, #64]	@ (80057b8 <Screen_init_handler_table+0x6c>)
 8005778:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ON_OFF][ON_OFF_DEV_1]                    = ON_OFF_Button;
 800577a:	4b0b      	ldr	r3, [pc, #44]	@ (80057a8 <Screen_init_handler_table+0x5c>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	4a0f      	ldr	r2, [pc, #60]	@ (80057bc <Screen_init_handler_table+0x70>)
 8005780:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_NAVIGATION_KEYBOARD][VALUE_NAVIGATION_KEYBOARD] = Navigation_keyboard;
 8005782:	4b09      	ldr	r3, [pc, #36]	@ (80057a8 <Screen_init_handler_table+0x5c>)
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	4a0e      	ldr	r2, [pc, #56]	@ (80057c0 <Screen_init_handler_table+0x74>)
 8005788:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD]             = Keyboard;
 800578a:	4b07      	ldr	r3, [pc, #28]	@ (80057a8 <Screen_init_handler_table+0x5c>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	4a0d      	ldr	r2, [pc, #52]	@ (80057c4 <Screen_init_handler_table+0x78>)
 8005790:	601a      	str	r2, [r3, #0]

    // assign handler table to handler table of object
    obj_screen->p_handler_table = (void *)handler_function_table;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a04      	ldr	r2, [pc, #16]	@ (80057a8 <Screen_init_handler_table+0x5c>)
 8005796:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20000090 	.word	0x20000090
 80057ac:	08005439 	.word	0x08005439
 80057b0:	08005453 	.word	0x08005453
 80057b4:	08005469 	.word	0x08005469
 80057b8:	080054e9 	.word	0x080054e9
 80057bc:	080054ff 	.word	0x080054ff
 80057c0:	08005545 	.word	0x08005545
 80057c4:	08005587 	.word	0x08005587

080057c8 <Screen_excute_RX_function>:

void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
    // do sth ...


	handler_func **handler_function_table = (handler_func **) obj_screen->p_handler_table;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80057d8:	60fb      	str	r3, [r7, #12]
    // excute the callback function
    if (screen_e->event == SIG_KEYBOARD) {  // ENVENT KEYBOARD
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d107      	bne.n	80057f2 <Screen_excute_RX_function+0x2a>
        handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD](obj_screen, screen_e);   
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3308      	adds	r3, #8
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	4798      	blx	r3
    } else if (screen_e->event ==SIG_NAVIGATION_KEYBOARD) {  // SWTICH TO KEYBOARD BUTTON
        handler_function_table[SIG_NAVIGATION_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
    } else {
        handler_function_table[screen_e->event][screen_e->data](obj_screen, screen_e);
    }  
}
 80057f0:	e019      	b.n	8005826 <Screen_excute_RX_function+0x5e>
    } else if (screen_e->event ==SIG_NAVIGATION_KEYBOARD) {  // SWTICH TO KEYBOARD BUTTON
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d107      	bne.n	800580a <Screen_excute_RX_function+0x42>
        handler_function_table[SIG_NAVIGATION_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	330c      	adds	r3, #12
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	4798      	blx	r3
}
 8005808:	e00d      	b.n	8005826 <Screen_excute_RX_function+0x5e>
        handler_function_table[screen_e->event][screen_e->data](obj_screen, screen_e);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	885b      	ldrh	r3, [r3, #2]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	4798      	blx	r3
}
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <Screen_CheckInput_Keyboard>:

#pragma endregion FUNCTION EXCUTE SCREEN

#pragma region FUNCTION SCREEN 

Return_Status Screen_CheckInput_Keyboard(Screen_t *const obj_screen) {
 8005830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005834:	b08d      	sub	sp, #52	@ 0x34
 8005836:	af02      	add	r7, sp, #8
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	466b      	mov	r3, sp
 800583c:	461e      	mov	r6, r3
    char string[obj_screen->Screen_keyboard.Index_String];
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 8005844:	460b      	mov	r3, r1
 8005846:	3b01      	subs	r3, #1
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
 800584a:	b28b      	uxth	r3, r1
 800584c:	2200      	movs	r2, #0
 800584e:	4698      	mov	r8, r3
 8005850:	4691      	mov	r9, r2
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800585e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005866:	b28b      	uxth	r3, r1
 8005868:	2200      	movs	r2, #0
 800586a:	461c      	mov	r4, r3
 800586c:	4615      	mov	r5, r2
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	00eb      	lsls	r3, r5, #3
 8005878:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800587c:	00e2      	lsls	r2, r4, #3
 800587e:	460b      	mov	r3, r1
 8005880:	3307      	adds	r3, #7
 8005882:	08db      	lsrs	r3, r3, #3
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	ebad 0d03 	sub.w	sp, sp, r3
 800588a:	ab02      	add	r3, sp, #8
 800588c:	3300      	adds	r3, #0
 800588e:	623b      	str	r3, [r7, #32]
    char warm_string[20] = {0};
 8005890:	f107 0308 	add.w	r3, r7, #8
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	605a      	str	r2, [r3, #4]
 800589a:	609a      	str	r2, [r3, #8]
 800589c:	60da      	str	r2, [r3, #12]
 800589e:	611a      	str	r2, [r3, #16]
    float data_compare;
    // copy string
    memcpy(string,obj_screen->Screen_keyboard.String,obj_screen->Screen_keyboard.Index_String);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f103 010e 	add.w	r1, r3, #14
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80058ac:	461a      	mov	r2, r3
 80058ae:	6a38      	ldr	r0, [r7, #32]
 80058b0:	f001 ffe7 	bl	8007882 <memcpy>
    /* compare data with limit */
    data_compare = atof(string);
 80058b4:	6a38      	ldr	r0, [r7, #32]
 80058b6:	f000 f977 	bl	8005ba8 <atof>
 80058ba:	ec53 2b10 	vmov	r2, r3, d0
 80058be:	4610      	mov	r0, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	f7fb f991 	bl	8000be8 <__aeabi_d2f>
 80058c6:	4603      	mov	r3, r0
 80058c8:	61fb      	str	r3, [r7, #28]
    if (data_compare > obj_screen->Screen_condition->max_value) {
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ce:	edd3 7a00 	vldr	s15, [r3]
 80058d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80058d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058de:	dd19      	ble.n	8005914 <Screen_CheckInput_Keyboard+0xe4>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MAX: %.2f", obj_screen->Screen_condition->max_value);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fa fe2e 	bl	8000548 <__aeabi_f2d>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	f107 0008 	add.w	r0, r7, #8
 80058f4:	e9cd 2300 	strd	r2, r3, [sp]
 80058f8:	4a1c      	ldr	r2, [pc, #112]	@ (800596c <Screen_CheckInput_Keyboard+0x13c>)
 80058fa:	2114      	movs	r1, #20
 80058fc:	f001 fe94 	bl	8007628 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,(uint8_t *)warm_string,sizeof(warm_string));
 8005900:	f107 0208 	add.w	r2, r7, #8
 8005904:	2314      	movs	r3, #20
 8005906:	f44f 4172 	mov.w	r1, #61952	@ 0xf200
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f859 	bl	80059c2 <DWIN_SetText>
        return Status_ERROR;
 8005910:	2300      	movs	r3, #0
 8005912:	e025      	b.n	8005960 <Screen_CheckInput_Keyboard+0x130>
    } else if (data_compare < obj_screen->Screen_condition->min_value) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005918:	edd3 7a01 	vldr	s15, [r3, #4]
 800591c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005928:	d519      	bpl.n	800595e <Screen_CheckInput_Keyboard+0x12e>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MIN: %.2f", obj_screen->Screen_condition->min_value);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	4618      	mov	r0, r3
 8005932:	f7fa fe09 	bl	8000548 <__aeabi_f2d>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	f107 0008 	add.w	r0, r7, #8
 800593e:	e9cd 2300 	strd	r2, r3, [sp]
 8005942:	4a0b      	ldr	r2, [pc, #44]	@ (8005970 <Screen_CheckInput_Keyboard+0x140>)
 8005944:	2114      	movs	r1, #20
 8005946:	f001 fe6f 	bl	8007628 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,(uint8_t *)warm_string,sizeof(warm_string));
 800594a:	f107 0208 	add.w	r2, r7, #8
 800594e:	2314      	movs	r3, #20
 8005950:	f44f 4172 	mov.w	r1, #61952	@ 0xf200
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f834 	bl	80059c2 <DWIN_SetText>
        return Status_ERROR;
 800595a:	2300      	movs	r3, #0
 800595c:	e000      	b.n	8005960 <Screen_CheckInput_Keyboard+0x130>
    } 
    return Status_SUCCESS; 
 800595e:	2301      	movs	r3, #1
 8005960:	46b5      	mov	sp, r6
}
 8005962:	4618      	mov	r0, r3
 8005964:	372c      	adds	r7, #44	@ 0x2c
 8005966:	46bd      	mov	sp, r7
 8005968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800596c:	0800a338 	.word	0x0800a338
 8005970:	0800a344 	.word	0x0800a344

08005974 <DWIN_SetPage>:
#include "DWIN_HMI.h"

void DWIN_SetPage(Dwin_t *pDwin, uint8_t page)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]
    uint8_t sendBuffer[10] = {CMD_HEAD1, CMD_HEAD2, 0x07, CMD_WRITE, 0x00, 0x84, 0x5A, 0x01, 0x00, page};
 8005980:	235a      	movs	r3, #90	@ 0x5a
 8005982:	733b      	strb	r3, [r7, #12]
 8005984:	23a5      	movs	r3, #165	@ 0xa5
 8005986:	737b      	strb	r3, [r7, #13]
 8005988:	2307      	movs	r3, #7
 800598a:	73bb      	strb	r3, [r7, #14]
 800598c:	2382      	movs	r3, #130	@ 0x82
 800598e:	73fb      	strb	r3, [r7, #15]
 8005990:	2300      	movs	r3, #0
 8005992:	743b      	strb	r3, [r7, #16]
 8005994:	2384      	movs	r3, #132	@ 0x84
 8005996:	747b      	strb	r3, [r7, #17]
 8005998:	235a      	movs	r3, #90	@ 0x5a
 800599a:	74bb      	strb	r3, [r7, #18]
 800599c:	2301      	movs	r3, #1
 800599e:	74fb      	strb	r3, [r7, #19]
 80059a0:	2300      	movs	r3, #0
 80059a2:	753b      	strb	r3, [r7, #20]
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	f107 010c 	add.w	r1, r7, #12
 80059b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80059b4:	220a      	movs	r2, #10
 80059b6:	f7fe fc85 	bl	80042c4 <HAL_UART_Transmit>
}
 80059ba:	bf00      	nop
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <DWIN_SetText>:

void DWIN_SetText(Dwin_t *pDwin, uint16_t VP_address, uint8_t *textData, uint16_t datalen) {
 80059c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c6:	b08a      	sub	sp, #40	@ 0x28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	461a      	mov	r2, r3
 80059d0:	460b      	mov	r3, r1
 80059d2:	817b      	strh	r3, [r7, #10]
 80059d4:	4613      	mov	r3, r2
 80059d6:	813b      	strh	r3, [r7, #8]
 80059d8:	466b      	mov	r3, sp
 80059da:	469a      	mov	sl, r3
    uint8_t ffEnding[2] = { 0xFF, 0xFF };
 80059dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059e0:	83bb      	strh	r3, [r7, #28]
    uint8_t sendBuffer[8 + datalen];
 80059e2:	893b      	ldrh	r3, [r7, #8]
 80059e4:	f103 0608 	add.w	r6, r3, #8
 80059e8:	1e73      	subs	r3, r6, #1
 80059ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ec:	4632      	mov	r2, r6
 80059ee:	2300      	movs	r3, #0
 80059f0:	4690      	mov	r8, r2
 80059f2:	4699      	mov	r9, r3
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a08:	4632      	mov	r2, r6
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	4614      	mov	r4, r2
 8005a0e:	461d      	mov	r5, r3
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	00eb      	lsls	r3, r5, #3
 8005a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a1e:	00e2      	lsls	r2, r4, #3
 8005a20:	4633      	mov	r3, r6
 8005a22:	3307      	adds	r3, #7
 8005a24:	08db      	lsrs	r3, r3, #3
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	ebad 0d03 	sub.w	sp, sp, r3
 8005a2c:	466b      	mov	r3, sp
 8005a2e:	3300      	adds	r3, #0
 8005a30:	623b      	str	r3, [r7, #32]

    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 8005a32:	235a      	movs	r3, #90	@ 0x5a
 8005a34:	753b      	strb	r3, [r7, #20]
 8005a36:	23a5      	movs	r3, #165	@ 0xa5
 8005a38:	757b      	strb	r3, [r7, #21]
 8005a3a:	893b      	ldrh	r3, [r7, #8]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	3305      	adds	r3, #5
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	75bb      	strb	r3, [r7, #22]
 8005a44:	2382      	movs	r3, #130	@ 0x82
 8005a46:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 8005a48:	897b      	ldrh	r3, [r7, #10]
 8005a4a:	0a1b      	lsrs	r3, r3, #8
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 8005a50:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 8005a52:	897b      	ldrh	r3, [r7, #10]
 8005a54:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 8005a56:	767b      	strb	r3, [r7, #25]
    
    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f107 0314 	add.w	r3, r7, #20
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	6010      	str	r0, [r2, #0]
 8005a64:	889b      	ldrh	r3, [r3, #4]
 8005a66:	8093      	strh	r3, [r2, #4]
    memcpy(sendBuffer + 6, textData, datalen);
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	3306      	adds	r3, #6
 8005a6c:	893a      	ldrh	r2, [r7, #8]
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 ff06 	bl	8007882 <memcpy>
    memcpy(sendBuffer + (6 + datalen), ffEnding, sizeof(ffEnding));
 8005a76:	893b      	ldrh	r3, [r7, #8]
 8005a78:	3306      	adds	r3, #6
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	4413      	add	r3, r2
 8005a80:	8bba      	ldrh	r2, [r7, #28]
 8005a82:	801a      	strh	r2, [r3, #0]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	b2b2      	uxth	r2, r6
 8005a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a8e:	6a39      	ldr	r1, [r7, #32]
 8005a90:	f7fe fc18 	bl	80042c4 <HAL_UART_Transmit>
 8005a94:	46d5      	mov	sp, sl
}
 8005a96:	bf00      	nop
 8005a98:	3728      	adds	r7, #40	@ 0x28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005aa0 <DWIN_SetVariable_Icon>:
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
}

void DWIN_SetVariable_Icon(Dwin_t *pDwin, uint16_t VP_address, uint16_t data ) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	807b      	strh	r3, [r7, #2]
 8005aac:	4613      	mov	r3, r2
 8005aae:	803b      	strh	r3, [r7, #0]
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8005ab0:	235a      	movs	r3, #90	@ 0x5a
 8005ab2:	723b      	strb	r3, [r7, #8]
 8005ab4:	23a5      	movs	r3, #165	@ 0xa5
 8005ab6:	727b      	strb	r3, [r7, #9]
 8005ab8:	2305      	movs	r3, #5
 8005aba:	72bb      	strb	r3, [r7, #10]
 8005abc:	2382      	movs	r3, #130	@ 0x82
 8005abe:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 8005ac0:	887b      	ldrh	r3, [r7, #2]
 8005ac2:	0a1b      	lsrs	r3, r3, #8
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8005ac8:	733b      	strb	r3, [r7, #12]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 8005aca:	887b      	ldrh	r3, [r7, #2]
 8005acc:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8005ace:	737b      	strb	r3, [r7, #13]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 8005ad0:	883b      	ldrh	r3, [r7, #0]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8005ad8:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 8005ada:	883b      	ldrh	r3, [r7, #0]
 8005adc:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8005ade:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	f107 0108 	add.w	r1, r7, #8
 8005ae8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005aec:	2208      	movs	r2, #8
 8005aee:	f7fe fbe9 	bl	80042c4 <HAL_UART_Transmit>
}
 8005af2:	bf00      	nop
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <DWIN_SetCallback>:
    }
}

// Set DWIN callback function when receive data 
void DWIN_SetCallback(Dwin_t *pDwin, pListenDWIN dwin_callback)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
    pDwin->p_ListenDWIN_Callback = dwin_callback;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	609a      	str	r2, [r3, #8]
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <DWIN_Listen>:

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
    uint8_t message_ASCII;
    uint16_t VPaddress;
    uint16_t lastByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b5a      	cmp	r3, #90	@ 0x5a
 8005b26:	d13b      	bne.n	8005ba0 <DWIN_Listen+0x8a>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2ba5      	cmp	r3, #165	@ 0xa5
 8005b30:	d136      	bne.n	8005ba0 <DWIN_Listen+0x8a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	3303      	adds	r3, #3
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b83      	cmp	r3, #131	@ 0x83
 8005b3a:	d131      	bne.n	8005ba0 <DWIN_Listen+0x8a>
        {
            datalength = RX_Buffer[2];
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	789b      	ldrb	r3, [r3, #2]
 8005b40:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	3302      	adds	r3, #2
 8005b46:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	b21b      	sxth	r3, r3
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	b21a      	sxth	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	3305      	adds	r3, #5
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	b21b      	sxth	r3, r3
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	b21b      	sxth	r3, r3
 8005b60:	81bb      	strh	r3, [r7, #12]
            // get return key value
            lastByte = (uint16_t)(RX_Buffer[datalength-1] << 8 | RX_Buffer[datalength]);
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	4413      	add	r3, r2
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	b21b      	sxth	r3, r3
 8005b6e:	021b      	lsls	r3, r3, #8
 8005b70:	b21a      	sxth	r2, r3
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	440b      	add	r3, r1
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	b21b      	sxth	r3, r3
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	b21b      	sxth	r3, r3
 8005b80:	817b      	strh	r3, [r7, #10]
            // Get message ASCII
            message_ASCII = RX_Buffer[datalength];
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	4413      	add	r3, r2
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	727b      	strb	r3, [r7, #9]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d005      	beq.n	8005ba0 <DWIN_Listen+0x8a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lastByte,message_ASCII);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	7a7a      	ldrb	r2, [r7, #9]
 8005b9a:	8979      	ldrh	r1, [r7, #10]
 8005b9c:	89b8      	ldrh	r0, [r7, #12]
 8005b9e:	4798      	blx	r3
            }
        }
    }

    
}
 8005ba0:	bf00      	nop
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <atof>:
 8005ba8:	2100      	movs	r1, #0
 8005baa:	f000 be0b 	b.w	80067c4 <strtod>

08005bae <sulp>:
 8005bae:	b570      	push	{r4, r5, r6, lr}
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	460d      	mov	r5, r1
 8005bb4:	ec45 4b10 	vmov	d0, r4, r5
 8005bb8:	4616      	mov	r6, r2
 8005bba:	f003 fc91 	bl	80094e0 <__ulp>
 8005bbe:	ec51 0b10 	vmov	r0, r1, d0
 8005bc2:	b17e      	cbz	r6, 8005be4 <sulp+0x36>
 8005bc4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005bc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	dd09      	ble.n	8005be4 <sulp+0x36>
 8005bd0:	051b      	lsls	r3, r3, #20
 8005bd2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005bd6:	2400      	movs	r4, #0
 8005bd8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005bdc:	4622      	mov	r2, r4
 8005bde:	462b      	mov	r3, r5
 8005be0:	f7fa fd0a 	bl	80005f8 <__aeabi_dmul>
 8005be4:	ec41 0b10 	vmov	d0, r0, r1
 8005be8:	bd70      	pop	{r4, r5, r6, pc}
 8005bea:	0000      	movs	r0, r0
 8005bec:	0000      	movs	r0, r0
	...

08005bf0 <_strtod_l>:
 8005bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	b09f      	sub	sp, #124	@ 0x7c
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	921a      	str	r2, [sp, #104]	@ 0x68
 8005bfe:	9005      	str	r0, [sp, #20]
 8005c00:	f04f 0a00 	mov.w	sl, #0
 8005c04:	f04f 0b00 	mov.w	fp, #0
 8005c08:	460a      	mov	r2, r1
 8005c0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c0c:	7811      	ldrb	r1, [r2, #0]
 8005c0e:	292b      	cmp	r1, #43	@ 0x2b
 8005c10:	d04a      	beq.n	8005ca8 <_strtod_l+0xb8>
 8005c12:	d838      	bhi.n	8005c86 <_strtod_l+0x96>
 8005c14:	290d      	cmp	r1, #13
 8005c16:	d832      	bhi.n	8005c7e <_strtod_l+0x8e>
 8005c18:	2908      	cmp	r1, #8
 8005c1a:	d832      	bhi.n	8005c82 <_strtod_l+0x92>
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	d03b      	beq.n	8005c98 <_strtod_l+0xa8>
 8005c20:	2200      	movs	r2, #0
 8005c22:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005c26:	782a      	ldrb	r2, [r5, #0]
 8005c28:	2a30      	cmp	r2, #48	@ 0x30
 8005c2a:	f040 80b2 	bne.w	8005d92 <_strtod_l+0x1a2>
 8005c2e:	786a      	ldrb	r2, [r5, #1]
 8005c30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005c34:	2a58      	cmp	r2, #88	@ 0x58
 8005c36:	d16e      	bne.n	8005d16 <_strtod_l+0x126>
 8005c38:	9302      	str	r3, [sp, #8]
 8005c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	ab1a      	add	r3, sp, #104	@ 0x68
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	4a8f      	ldr	r2, [pc, #572]	@ (8005e80 <_strtod_l+0x290>)
 8005c44:	9805      	ldr	r0, [sp, #20]
 8005c46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005c48:	a919      	add	r1, sp, #100	@ 0x64
 8005c4a:	f002 fd43 	bl	80086d4 <__gethex>
 8005c4e:	f010 060f 	ands.w	r6, r0, #15
 8005c52:	4604      	mov	r4, r0
 8005c54:	d005      	beq.n	8005c62 <_strtod_l+0x72>
 8005c56:	2e06      	cmp	r6, #6
 8005c58:	d128      	bne.n	8005cac <_strtod_l+0xbc>
 8005c5a:	3501      	adds	r5, #1
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005c60:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 858e 	bne.w	8006786 <_strtod_l+0xb96>
 8005c6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c6c:	b1cb      	cbz	r3, 8005ca2 <_strtod_l+0xb2>
 8005c6e:	4652      	mov	r2, sl
 8005c70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005c74:	ec43 2b10 	vmov	d0, r2, r3
 8005c78:	b01f      	add	sp, #124	@ 0x7c
 8005c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7e:	2920      	cmp	r1, #32
 8005c80:	d1ce      	bne.n	8005c20 <_strtod_l+0x30>
 8005c82:	3201      	adds	r2, #1
 8005c84:	e7c1      	b.n	8005c0a <_strtod_l+0x1a>
 8005c86:	292d      	cmp	r1, #45	@ 0x2d
 8005c88:	d1ca      	bne.n	8005c20 <_strtod_l+0x30>
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	910e      	str	r1, [sp, #56]	@ 0x38
 8005c8e:	1c51      	adds	r1, r2, #1
 8005c90:	9119      	str	r1, [sp, #100]	@ 0x64
 8005c92:	7852      	ldrb	r2, [r2, #1]
 8005c94:	2a00      	cmp	r2, #0
 8005c96:	d1c5      	bne.n	8005c24 <_strtod_l+0x34>
 8005c98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f040 8570 	bne.w	8006782 <_strtod_l+0xb92>
 8005ca2:	4652      	mov	r2, sl
 8005ca4:	465b      	mov	r3, fp
 8005ca6:	e7e5      	b.n	8005c74 <_strtod_l+0x84>
 8005ca8:	2100      	movs	r1, #0
 8005caa:	e7ef      	b.n	8005c8c <_strtod_l+0x9c>
 8005cac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005cae:	b13a      	cbz	r2, 8005cc0 <_strtod_l+0xd0>
 8005cb0:	2135      	movs	r1, #53	@ 0x35
 8005cb2:	a81c      	add	r0, sp, #112	@ 0x70
 8005cb4:	f003 fd0e 	bl	80096d4 <__copybits>
 8005cb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005cba:	9805      	ldr	r0, [sp, #20]
 8005cbc:	f003 f8e4 	bl	8008e88 <_Bfree>
 8005cc0:	3e01      	subs	r6, #1
 8005cc2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005cc4:	2e04      	cmp	r6, #4
 8005cc6:	d806      	bhi.n	8005cd6 <_strtod_l+0xe6>
 8005cc8:	e8df f006 	tbb	[pc, r6]
 8005ccc:	201d0314 	.word	0x201d0314
 8005cd0:	14          	.byte	0x14
 8005cd1:	00          	.byte	0x00
 8005cd2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005cd6:	05e1      	lsls	r1, r4, #23
 8005cd8:	bf48      	it	mi
 8005cda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005cde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005ce2:	0d1b      	lsrs	r3, r3, #20
 8005ce4:	051b      	lsls	r3, r3, #20
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1bb      	bne.n	8005c62 <_strtod_l+0x72>
 8005cea:	f001 fd9d 	bl	8007828 <__errno>
 8005cee:	2322      	movs	r3, #34	@ 0x22
 8005cf0:	6003      	str	r3, [r0, #0]
 8005cf2:	e7b6      	b.n	8005c62 <_strtod_l+0x72>
 8005cf4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005cf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005cfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005d00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005d04:	e7e7      	b.n	8005cd6 <_strtod_l+0xe6>
 8005d06:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8005e88 <_strtod_l+0x298>
 8005d0a:	e7e4      	b.n	8005cd6 <_strtod_l+0xe6>
 8005d0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005d10:	f04f 3aff 	mov.w	sl, #4294967295
 8005d14:	e7df      	b.n	8005cd6 <_strtod_l+0xe6>
 8005d16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b30      	cmp	r3, #48	@ 0x30
 8005d20:	d0f9      	beq.n	8005d16 <_strtod_l+0x126>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d09d      	beq.n	8005c62 <_strtod_l+0x72>
 8005d26:	2301      	movs	r3, #1
 8005d28:	2700      	movs	r7, #0
 8005d2a:	9308      	str	r3, [sp, #32]
 8005d2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d30:	970b      	str	r7, [sp, #44]	@ 0x2c
 8005d32:	46b9      	mov	r9, r7
 8005d34:	220a      	movs	r2, #10
 8005d36:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005d38:	7805      	ldrb	r5, [r0, #0]
 8005d3a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005d3e:	b2d9      	uxtb	r1, r3
 8005d40:	2909      	cmp	r1, #9
 8005d42:	d928      	bls.n	8005d96 <_strtod_l+0x1a6>
 8005d44:	494f      	ldr	r1, [pc, #316]	@ (8005e84 <_strtod_l+0x294>)
 8005d46:	2201      	movs	r2, #1
 8005d48:	f001 fd11 	bl	800776e <strncmp>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d032      	beq.n	8005db6 <_strtod_l+0x1c6>
 8005d50:	2000      	movs	r0, #0
 8005d52:	462a      	mov	r2, r5
 8005d54:	900a      	str	r0, [sp, #40]	@ 0x28
 8005d56:	464d      	mov	r5, r9
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2a65      	cmp	r2, #101	@ 0x65
 8005d5c:	d001      	beq.n	8005d62 <_strtod_l+0x172>
 8005d5e:	2a45      	cmp	r2, #69	@ 0x45
 8005d60:	d114      	bne.n	8005d8c <_strtod_l+0x19c>
 8005d62:	b91d      	cbnz	r5, 8005d6c <_strtod_l+0x17c>
 8005d64:	9a08      	ldr	r2, [sp, #32]
 8005d66:	4302      	orrs	r2, r0
 8005d68:	d096      	beq.n	8005c98 <_strtod_l+0xa8>
 8005d6a:	2500      	movs	r5, #0
 8005d6c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005d6e:	1c62      	adds	r2, r4, #1
 8005d70:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d72:	7862      	ldrb	r2, [r4, #1]
 8005d74:	2a2b      	cmp	r2, #43	@ 0x2b
 8005d76:	d07a      	beq.n	8005e6e <_strtod_l+0x27e>
 8005d78:	2a2d      	cmp	r2, #45	@ 0x2d
 8005d7a:	d07e      	beq.n	8005e7a <_strtod_l+0x28a>
 8005d7c:	f04f 0c00 	mov.w	ip, #0
 8005d80:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005d84:	2909      	cmp	r1, #9
 8005d86:	f240 8085 	bls.w	8005e94 <_strtod_l+0x2a4>
 8005d8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8005d8c:	f04f 0800 	mov.w	r8, #0
 8005d90:	e0a5      	b.n	8005ede <_strtod_l+0x2ee>
 8005d92:	2300      	movs	r3, #0
 8005d94:	e7c8      	b.n	8005d28 <_strtod_l+0x138>
 8005d96:	f1b9 0f08 	cmp.w	r9, #8
 8005d9a:	bfd8      	it	le
 8005d9c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005d9e:	f100 0001 	add.w	r0, r0, #1
 8005da2:	bfda      	itte	le
 8005da4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005da8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005daa:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005dae:	f109 0901 	add.w	r9, r9, #1
 8005db2:	9019      	str	r0, [sp, #100]	@ 0x64
 8005db4:	e7bf      	b.n	8005d36 <_strtod_l+0x146>
 8005db6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	9219      	str	r2, [sp, #100]	@ 0x64
 8005dbc:	785a      	ldrb	r2, [r3, #1]
 8005dbe:	f1b9 0f00 	cmp.w	r9, #0
 8005dc2:	d03b      	beq.n	8005e3c <_strtod_l+0x24c>
 8005dc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8005dc6:	464d      	mov	r5, r9
 8005dc8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005dcc:	2b09      	cmp	r3, #9
 8005dce:	d912      	bls.n	8005df6 <_strtod_l+0x206>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e7c2      	b.n	8005d5a <_strtod_l+0x16a>
 8005dd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	9219      	str	r2, [sp, #100]	@ 0x64
 8005dda:	785a      	ldrb	r2, [r3, #1]
 8005ddc:	3001      	adds	r0, #1
 8005dde:	2a30      	cmp	r2, #48	@ 0x30
 8005de0:	d0f8      	beq.n	8005dd4 <_strtod_l+0x1e4>
 8005de2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005de6:	2b08      	cmp	r3, #8
 8005de8:	f200 84d2 	bhi.w	8006790 <_strtod_l+0xba0>
 8005dec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dee:	900a      	str	r0, [sp, #40]	@ 0x28
 8005df0:	2000      	movs	r0, #0
 8005df2:	930c      	str	r3, [sp, #48]	@ 0x30
 8005df4:	4605      	mov	r5, r0
 8005df6:	3a30      	subs	r2, #48	@ 0x30
 8005df8:	f100 0301 	add.w	r3, r0, #1
 8005dfc:	d018      	beq.n	8005e30 <_strtod_l+0x240>
 8005dfe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e00:	4419      	add	r1, r3
 8005e02:	910a      	str	r1, [sp, #40]	@ 0x28
 8005e04:	462e      	mov	r6, r5
 8005e06:	f04f 0e0a 	mov.w	lr, #10
 8005e0a:	1c71      	adds	r1, r6, #1
 8005e0c:	eba1 0c05 	sub.w	ip, r1, r5
 8005e10:	4563      	cmp	r3, ip
 8005e12:	dc15      	bgt.n	8005e40 <_strtod_l+0x250>
 8005e14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005e18:	182b      	adds	r3, r5, r0
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	f105 0501 	add.w	r5, r5, #1
 8005e20:	4405      	add	r5, r0
 8005e22:	dc1a      	bgt.n	8005e5a <_strtod_l+0x26a>
 8005e24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e26:	230a      	movs	r3, #10
 8005e28:	fb03 2301 	mla	r3, r3, r1, r2
 8005e2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e32:	1c51      	adds	r1, r2, #1
 8005e34:	9119      	str	r1, [sp, #100]	@ 0x64
 8005e36:	7852      	ldrb	r2, [r2, #1]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	e7c5      	b.n	8005dc8 <_strtod_l+0x1d8>
 8005e3c:	4648      	mov	r0, r9
 8005e3e:	e7ce      	b.n	8005dde <_strtod_l+0x1ee>
 8005e40:	2e08      	cmp	r6, #8
 8005e42:	dc05      	bgt.n	8005e50 <_strtod_l+0x260>
 8005e44:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005e46:	fb0e f606 	mul.w	r6, lr, r6
 8005e4a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005e4c:	460e      	mov	r6, r1
 8005e4e:	e7dc      	b.n	8005e0a <_strtod_l+0x21a>
 8005e50:	2910      	cmp	r1, #16
 8005e52:	bfd8      	it	le
 8005e54:	fb0e f707 	mulle.w	r7, lr, r7
 8005e58:	e7f8      	b.n	8005e4c <_strtod_l+0x25c>
 8005e5a:	2b0f      	cmp	r3, #15
 8005e5c:	bfdc      	itt	le
 8005e5e:	230a      	movle	r3, #10
 8005e60:	fb03 2707 	mlale	r7, r3, r7, r2
 8005e64:	e7e3      	b.n	8005e2e <_strtod_l+0x23e>
 8005e66:	2300      	movs	r3, #0
 8005e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e77a      	b.n	8005d64 <_strtod_l+0x174>
 8005e6e:	f04f 0c00 	mov.w	ip, #0
 8005e72:	1ca2      	adds	r2, r4, #2
 8005e74:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e76:	78a2      	ldrb	r2, [r4, #2]
 8005e78:	e782      	b.n	8005d80 <_strtod_l+0x190>
 8005e7a:	f04f 0c01 	mov.w	ip, #1
 8005e7e:	e7f8      	b.n	8005e72 <_strtod_l+0x282>
 8005e80:	0800a554 	.word	0x0800a554
 8005e84:	0800a368 	.word	0x0800a368
 8005e88:	7ff00000 	.word	0x7ff00000
 8005e8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e8e:	1c51      	adds	r1, r2, #1
 8005e90:	9119      	str	r1, [sp, #100]	@ 0x64
 8005e92:	7852      	ldrb	r2, [r2, #1]
 8005e94:	2a30      	cmp	r2, #48	@ 0x30
 8005e96:	d0f9      	beq.n	8005e8c <_strtod_l+0x29c>
 8005e98:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005e9c:	2908      	cmp	r1, #8
 8005e9e:	f63f af75 	bhi.w	8005d8c <_strtod_l+0x19c>
 8005ea2:	3a30      	subs	r2, #48	@ 0x30
 8005ea4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ea6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005ea8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005eaa:	f04f 080a 	mov.w	r8, #10
 8005eae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005eb0:	1c56      	adds	r6, r2, #1
 8005eb2:	9619      	str	r6, [sp, #100]	@ 0x64
 8005eb4:	7852      	ldrb	r2, [r2, #1]
 8005eb6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005eba:	f1be 0f09 	cmp.w	lr, #9
 8005ebe:	d939      	bls.n	8005f34 <_strtod_l+0x344>
 8005ec0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ec2:	1a76      	subs	r6, r6, r1
 8005ec4:	2e08      	cmp	r6, #8
 8005ec6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005eca:	dc03      	bgt.n	8005ed4 <_strtod_l+0x2e4>
 8005ecc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ece:	4588      	cmp	r8, r1
 8005ed0:	bfa8      	it	ge
 8005ed2:	4688      	movge	r8, r1
 8005ed4:	f1bc 0f00 	cmp.w	ip, #0
 8005ed8:	d001      	beq.n	8005ede <_strtod_l+0x2ee>
 8005eda:	f1c8 0800 	rsb	r8, r8, #0
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	d14e      	bne.n	8005f80 <_strtod_l+0x390>
 8005ee2:	9908      	ldr	r1, [sp, #32]
 8005ee4:	4308      	orrs	r0, r1
 8005ee6:	f47f aebc 	bne.w	8005c62 <_strtod_l+0x72>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f47f aed4 	bne.w	8005c98 <_strtod_l+0xa8>
 8005ef0:	2a69      	cmp	r2, #105	@ 0x69
 8005ef2:	d028      	beq.n	8005f46 <_strtod_l+0x356>
 8005ef4:	dc25      	bgt.n	8005f42 <_strtod_l+0x352>
 8005ef6:	2a49      	cmp	r2, #73	@ 0x49
 8005ef8:	d025      	beq.n	8005f46 <_strtod_l+0x356>
 8005efa:	2a4e      	cmp	r2, #78	@ 0x4e
 8005efc:	f47f aecc 	bne.w	8005c98 <_strtod_l+0xa8>
 8005f00:	499a      	ldr	r1, [pc, #616]	@ (800616c <_strtod_l+0x57c>)
 8005f02:	a819      	add	r0, sp, #100	@ 0x64
 8005f04:	f002 fe08 	bl	8008b18 <__match>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	f43f aec5 	beq.w	8005c98 <_strtod_l+0xa8>
 8005f0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b28      	cmp	r3, #40	@ 0x28
 8005f14:	d12e      	bne.n	8005f74 <_strtod_l+0x384>
 8005f16:	4996      	ldr	r1, [pc, #600]	@ (8006170 <_strtod_l+0x580>)
 8005f18:	aa1c      	add	r2, sp, #112	@ 0x70
 8005f1a:	a819      	add	r0, sp, #100	@ 0x64
 8005f1c:	f002 fe10 	bl	8008b40 <__hexnan>
 8005f20:	2805      	cmp	r0, #5
 8005f22:	d127      	bne.n	8005f74 <_strtod_l+0x384>
 8005f24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005f26:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005f2a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005f2e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005f32:	e696      	b.n	8005c62 <_strtod_l+0x72>
 8005f34:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f36:	fb08 2101 	mla	r1, r8, r1, r2
 8005f3a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005f3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f40:	e7b5      	b.n	8005eae <_strtod_l+0x2be>
 8005f42:	2a6e      	cmp	r2, #110	@ 0x6e
 8005f44:	e7da      	b.n	8005efc <_strtod_l+0x30c>
 8005f46:	498b      	ldr	r1, [pc, #556]	@ (8006174 <_strtod_l+0x584>)
 8005f48:	a819      	add	r0, sp, #100	@ 0x64
 8005f4a:	f002 fde5 	bl	8008b18 <__match>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	f43f aea2 	beq.w	8005c98 <_strtod_l+0xa8>
 8005f54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f56:	4988      	ldr	r1, [pc, #544]	@ (8006178 <_strtod_l+0x588>)
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	a819      	add	r0, sp, #100	@ 0x64
 8005f5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8005f5e:	f002 fddb 	bl	8008b18 <__match>
 8005f62:	b910      	cbnz	r0, 8005f6a <_strtod_l+0x37a>
 8005f64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f66:	3301      	adds	r3, #1
 8005f68:	9319      	str	r3, [sp, #100]	@ 0x64
 8005f6a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006188 <_strtod_l+0x598>
 8005f6e:	f04f 0a00 	mov.w	sl, #0
 8005f72:	e676      	b.n	8005c62 <_strtod_l+0x72>
 8005f74:	4881      	ldr	r0, [pc, #516]	@ (800617c <_strtod_l+0x58c>)
 8005f76:	f001 fc93 	bl	80078a0 <nan>
 8005f7a:	ec5b ab10 	vmov	sl, fp, d0
 8005f7e:	e670      	b.n	8005c62 <_strtod_l+0x72>
 8005f80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f82:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005f84:	eba8 0303 	sub.w	r3, r8, r3
 8005f88:	f1b9 0f00 	cmp.w	r9, #0
 8005f8c:	bf08      	it	eq
 8005f8e:	46a9      	moveq	r9, r5
 8005f90:	2d10      	cmp	r5, #16
 8005f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f94:	462c      	mov	r4, r5
 8005f96:	bfa8      	it	ge
 8005f98:	2410      	movge	r4, #16
 8005f9a:	f7fa fab3 	bl	8000504 <__aeabi_ui2d>
 8005f9e:	2d09      	cmp	r5, #9
 8005fa0:	4682      	mov	sl, r0
 8005fa2:	468b      	mov	fp, r1
 8005fa4:	dc13      	bgt.n	8005fce <_strtod_l+0x3de>
 8005fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f43f ae5a 	beq.w	8005c62 <_strtod_l+0x72>
 8005fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb0:	dd78      	ble.n	80060a4 <_strtod_l+0x4b4>
 8005fb2:	2b16      	cmp	r3, #22
 8005fb4:	dc5f      	bgt.n	8006076 <_strtod_l+0x486>
 8005fb6:	4972      	ldr	r1, [pc, #456]	@ (8006180 <_strtod_l+0x590>)
 8005fb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fc0:	4652      	mov	r2, sl
 8005fc2:	465b      	mov	r3, fp
 8005fc4:	f7fa fb18 	bl	80005f8 <__aeabi_dmul>
 8005fc8:	4682      	mov	sl, r0
 8005fca:	468b      	mov	fp, r1
 8005fcc:	e649      	b.n	8005c62 <_strtod_l+0x72>
 8005fce:	4b6c      	ldr	r3, [pc, #432]	@ (8006180 <_strtod_l+0x590>)
 8005fd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fd4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005fd8:	f7fa fb0e 	bl	80005f8 <__aeabi_dmul>
 8005fdc:	4682      	mov	sl, r0
 8005fde:	4638      	mov	r0, r7
 8005fe0:	468b      	mov	fp, r1
 8005fe2:	f7fa fa8f 	bl	8000504 <__aeabi_ui2d>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4650      	mov	r0, sl
 8005fec:	4659      	mov	r1, fp
 8005fee:	f7fa f94d 	bl	800028c <__adddf3>
 8005ff2:	2d0f      	cmp	r5, #15
 8005ff4:	4682      	mov	sl, r0
 8005ff6:	468b      	mov	fp, r1
 8005ff8:	ddd5      	ble.n	8005fa6 <_strtod_l+0x3b6>
 8005ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ffc:	1b2c      	subs	r4, r5, r4
 8005ffe:	441c      	add	r4, r3
 8006000:	2c00      	cmp	r4, #0
 8006002:	f340 8093 	ble.w	800612c <_strtod_l+0x53c>
 8006006:	f014 030f 	ands.w	r3, r4, #15
 800600a:	d00a      	beq.n	8006022 <_strtod_l+0x432>
 800600c:	495c      	ldr	r1, [pc, #368]	@ (8006180 <_strtod_l+0x590>)
 800600e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006012:	4652      	mov	r2, sl
 8006014:	465b      	mov	r3, fp
 8006016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800601a:	f7fa faed 	bl	80005f8 <__aeabi_dmul>
 800601e:	4682      	mov	sl, r0
 8006020:	468b      	mov	fp, r1
 8006022:	f034 040f 	bics.w	r4, r4, #15
 8006026:	d073      	beq.n	8006110 <_strtod_l+0x520>
 8006028:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800602c:	dd49      	ble.n	80060c2 <_strtod_l+0x4d2>
 800602e:	2400      	movs	r4, #0
 8006030:	46a0      	mov	r8, r4
 8006032:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006034:	46a1      	mov	r9, r4
 8006036:	9a05      	ldr	r2, [sp, #20]
 8006038:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006188 <_strtod_l+0x598>
 800603c:	2322      	movs	r3, #34	@ 0x22
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	f04f 0a00 	mov.w	sl, #0
 8006044:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006046:	2b00      	cmp	r3, #0
 8006048:	f43f ae0b 	beq.w	8005c62 <_strtod_l+0x72>
 800604c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800604e:	9805      	ldr	r0, [sp, #20]
 8006050:	f002 ff1a 	bl	8008e88 <_Bfree>
 8006054:	9805      	ldr	r0, [sp, #20]
 8006056:	4649      	mov	r1, r9
 8006058:	f002 ff16 	bl	8008e88 <_Bfree>
 800605c:	9805      	ldr	r0, [sp, #20]
 800605e:	4641      	mov	r1, r8
 8006060:	f002 ff12 	bl	8008e88 <_Bfree>
 8006064:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006066:	9805      	ldr	r0, [sp, #20]
 8006068:	f002 ff0e 	bl	8008e88 <_Bfree>
 800606c:	9805      	ldr	r0, [sp, #20]
 800606e:	4621      	mov	r1, r4
 8006070:	f002 ff0a 	bl	8008e88 <_Bfree>
 8006074:	e5f5      	b.n	8005c62 <_strtod_l+0x72>
 8006076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006078:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800607c:	4293      	cmp	r3, r2
 800607e:	dbbc      	blt.n	8005ffa <_strtod_l+0x40a>
 8006080:	4c3f      	ldr	r4, [pc, #252]	@ (8006180 <_strtod_l+0x590>)
 8006082:	f1c5 050f 	rsb	r5, r5, #15
 8006086:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800608a:	4652      	mov	r2, sl
 800608c:	465b      	mov	r3, fp
 800608e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006092:	f7fa fab1 	bl	80005f8 <__aeabi_dmul>
 8006096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006098:	1b5d      	subs	r5, r3, r5
 800609a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800609e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80060a2:	e78f      	b.n	8005fc4 <_strtod_l+0x3d4>
 80060a4:	3316      	adds	r3, #22
 80060a6:	dba8      	blt.n	8005ffa <_strtod_l+0x40a>
 80060a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060aa:	eba3 0808 	sub.w	r8, r3, r8
 80060ae:	4b34      	ldr	r3, [pc, #208]	@ (8006180 <_strtod_l+0x590>)
 80060b0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80060b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80060b8:	4650      	mov	r0, sl
 80060ba:	4659      	mov	r1, fp
 80060bc:	f7fa fbc6 	bl	800084c <__aeabi_ddiv>
 80060c0:	e782      	b.n	8005fc8 <_strtod_l+0x3d8>
 80060c2:	2300      	movs	r3, #0
 80060c4:	4f2f      	ldr	r7, [pc, #188]	@ (8006184 <_strtod_l+0x594>)
 80060c6:	1124      	asrs	r4, r4, #4
 80060c8:	4650      	mov	r0, sl
 80060ca:	4659      	mov	r1, fp
 80060cc:	461e      	mov	r6, r3
 80060ce:	2c01      	cmp	r4, #1
 80060d0:	dc21      	bgt.n	8006116 <_strtod_l+0x526>
 80060d2:	b10b      	cbz	r3, 80060d8 <_strtod_l+0x4e8>
 80060d4:	4682      	mov	sl, r0
 80060d6:	468b      	mov	fp, r1
 80060d8:	492a      	ldr	r1, [pc, #168]	@ (8006184 <_strtod_l+0x594>)
 80060da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80060de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80060e2:	4652      	mov	r2, sl
 80060e4:	465b      	mov	r3, fp
 80060e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060ea:	f7fa fa85 	bl	80005f8 <__aeabi_dmul>
 80060ee:	4b26      	ldr	r3, [pc, #152]	@ (8006188 <_strtod_l+0x598>)
 80060f0:	460a      	mov	r2, r1
 80060f2:	400b      	ands	r3, r1
 80060f4:	4925      	ldr	r1, [pc, #148]	@ (800618c <_strtod_l+0x59c>)
 80060f6:	428b      	cmp	r3, r1
 80060f8:	4682      	mov	sl, r0
 80060fa:	d898      	bhi.n	800602e <_strtod_l+0x43e>
 80060fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006100:	428b      	cmp	r3, r1
 8006102:	bf86      	itte	hi
 8006104:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006190 <_strtod_l+0x5a0>
 8006108:	f04f 3aff 	movhi.w	sl, #4294967295
 800610c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006110:	2300      	movs	r3, #0
 8006112:	9308      	str	r3, [sp, #32]
 8006114:	e076      	b.n	8006204 <_strtod_l+0x614>
 8006116:	07e2      	lsls	r2, r4, #31
 8006118:	d504      	bpl.n	8006124 <_strtod_l+0x534>
 800611a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800611e:	f7fa fa6b 	bl	80005f8 <__aeabi_dmul>
 8006122:	2301      	movs	r3, #1
 8006124:	3601      	adds	r6, #1
 8006126:	1064      	asrs	r4, r4, #1
 8006128:	3708      	adds	r7, #8
 800612a:	e7d0      	b.n	80060ce <_strtod_l+0x4de>
 800612c:	d0f0      	beq.n	8006110 <_strtod_l+0x520>
 800612e:	4264      	negs	r4, r4
 8006130:	f014 020f 	ands.w	r2, r4, #15
 8006134:	d00a      	beq.n	800614c <_strtod_l+0x55c>
 8006136:	4b12      	ldr	r3, [pc, #72]	@ (8006180 <_strtod_l+0x590>)
 8006138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800613c:	4650      	mov	r0, sl
 800613e:	4659      	mov	r1, fp
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f7fa fb82 	bl	800084c <__aeabi_ddiv>
 8006148:	4682      	mov	sl, r0
 800614a:	468b      	mov	fp, r1
 800614c:	1124      	asrs	r4, r4, #4
 800614e:	d0df      	beq.n	8006110 <_strtod_l+0x520>
 8006150:	2c1f      	cmp	r4, #31
 8006152:	dd1f      	ble.n	8006194 <_strtod_l+0x5a4>
 8006154:	2400      	movs	r4, #0
 8006156:	46a0      	mov	r8, r4
 8006158:	940b      	str	r4, [sp, #44]	@ 0x2c
 800615a:	46a1      	mov	r9, r4
 800615c:	9a05      	ldr	r2, [sp, #20]
 800615e:	2322      	movs	r3, #34	@ 0x22
 8006160:	f04f 0a00 	mov.w	sl, #0
 8006164:	f04f 0b00 	mov.w	fp, #0
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	e76b      	b.n	8006044 <_strtod_l+0x454>
 800616c:	0800a377 	.word	0x0800a377
 8006170:	0800a540 	.word	0x0800a540
 8006174:	0800a36f 	.word	0x0800a36f
 8006178:	0800a3ae 	.word	0x0800a3ae
 800617c:	0800a53d 	.word	0x0800a53d
 8006180:	0800a5c8 	.word	0x0800a5c8
 8006184:	0800a5a0 	.word	0x0800a5a0
 8006188:	7ff00000 	.word	0x7ff00000
 800618c:	7ca00000 	.word	0x7ca00000
 8006190:	7fefffff 	.word	0x7fefffff
 8006194:	f014 0310 	ands.w	r3, r4, #16
 8006198:	bf18      	it	ne
 800619a:	236a      	movne	r3, #106	@ 0x6a
 800619c:	4ea9      	ldr	r6, [pc, #676]	@ (8006444 <_strtod_l+0x854>)
 800619e:	9308      	str	r3, [sp, #32]
 80061a0:	4650      	mov	r0, sl
 80061a2:	4659      	mov	r1, fp
 80061a4:	2300      	movs	r3, #0
 80061a6:	07e7      	lsls	r7, r4, #31
 80061a8:	d504      	bpl.n	80061b4 <_strtod_l+0x5c4>
 80061aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061ae:	f7fa fa23 	bl	80005f8 <__aeabi_dmul>
 80061b2:	2301      	movs	r3, #1
 80061b4:	1064      	asrs	r4, r4, #1
 80061b6:	f106 0608 	add.w	r6, r6, #8
 80061ba:	d1f4      	bne.n	80061a6 <_strtod_l+0x5b6>
 80061bc:	b10b      	cbz	r3, 80061c2 <_strtod_l+0x5d2>
 80061be:	4682      	mov	sl, r0
 80061c0:	468b      	mov	fp, r1
 80061c2:	9b08      	ldr	r3, [sp, #32]
 80061c4:	b1b3      	cbz	r3, 80061f4 <_strtod_l+0x604>
 80061c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80061ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	4659      	mov	r1, fp
 80061d2:	dd0f      	ble.n	80061f4 <_strtod_l+0x604>
 80061d4:	2b1f      	cmp	r3, #31
 80061d6:	dd56      	ble.n	8006286 <_strtod_l+0x696>
 80061d8:	2b34      	cmp	r3, #52	@ 0x34
 80061da:	bfde      	ittt	le
 80061dc:	f04f 33ff 	movle.w	r3, #4294967295
 80061e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80061e4:	4093      	lslle	r3, r2
 80061e6:	f04f 0a00 	mov.w	sl, #0
 80061ea:	bfcc      	ite	gt
 80061ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80061f0:	ea03 0b01 	andle.w	fp, r3, r1
 80061f4:	2200      	movs	r2, #0
 80061f6:	2300      	movs	r3, #0
 80061f8:	4650      	mov	r0, sl
 80061fa:	4659      	mov	r1, fp
 80061fc:	f7fa fc64 	bl	8000ac8 <__aeabi_dcmpeq>
 8006200:	2800      	cmp	r0, #0
 8006202:	d1a7      	bne.n	8006154 <_strtod_l+0x564>
 8006204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800620a:	9805      	ldr	r0, [sp, #20]
 800620c:	462b      	mov	r3, r5
 800620e:	464a      	mov	r2, r9
 8006210:	f002 fea2 	bl	8008f58 <__s2b>
 8006214:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006216:	2800      	cmp	r0, #0
 8006218:	f43f af09 	beq.w	800602e <_strtod_l+0x43e>
 800621c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800621e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006220:	2a00      	cmp	r2, #0
 8006222:	eba3 0308 	sub.w	r3, r3, r8
 8006226:	bfa8      	it	ge
 8006228:	2300      	movge	r3, #0
 800622a:	9312      	str	r3, [sp, #72]	@ 0x48
 800622c:	2400      	movs	r4, #0
 800622e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006232:	9316      	str	r3, [sp, #88]	@ 0x58
 8006234:	46a0      	mov	r8, r4
 8006236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006238:	9805      	ldr	r0, [sp, #20]
 800623a:	6859      	ldr	r1, [r3, #4]
 800623c:	f002 fde4 	bl	8008e08 <_Balloc>
 8006240:	4681      	mov	r9, r0
 8006242:	2800      	cmp	r0, #0
 8006244:	f43f aef7 	beq.w	8006036 <_strtod_l+0x446>
 8006248:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	3202      	adds	r2, #2
 800624e:	f103 010c 	add.w	r1, r3, #12
 8006252:	0092      	lsls	r2, r2, #2
 8006254:	300c      	adds	r0, #12
 8006256:	f001 fb14 	bl	8007882 <memcpy>
 800625a:	ec4b ab10 	vmov	d0, sl, fp
 800625e:	9805      	ldr	r0, [sp, #20]
 8006260:	aa1c      	add	r2, sp, #112	@ 0x70
 8006262:	a91b      	add	r1, sp, #108	@ 0x6c
 8006264:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006268:	f003 f9aa 	bl	80095c0 <__d2b>
 800626c:	901a      	str	r0, [sp, #104]	@ 0x68
 800626e:	2800      	cmp	r0, #0
 8006270:	f43f aee1 	beq.w	8006036 <_strtod_l+0x446>
 8006274:	9805      	ldr	r0, [sp, #20]
 8006276:	2101      	movs	r1, #1
 8006278:	f002 ff04 	bl	8009084 <__i2b>
 800627c:	4680      	mov	r8, r0
 800627e:	b948      	cbnz	r0, 8006294 <_strtod_l+0x6a4>
 8006280:	f04f 0800 	mov.w	r8, #0
 8006284:	e6d7      	b.n	8006036 <_strtod_l+0x446>
 8006286:	f04f 32ff 	mov.w	r2, #4294967295
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	ea03 0a0a 	and.w	sl, r3, sl
 8006292:	e7af      	b.n	80061f4 <_strtod_l+0x604>
 8006294:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006296:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006298:	2d00      	cmp	r5, #0
 800629a:	bfab      	itete	ge
 800629c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800629e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80062a0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80062a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80062a4:	bfac      	ite	ge
 80062a6:	18ef      	addge	r7, r5, r3
 80062a8:	1b5e      	sublt	r6, r3, r5
 80062aa:	9b08      	ldr	r3, [sp, #32]
 80062ac:	1aed      	subs	r5, r5, r3
 80062ae:	4415      	add	r5, r2
 80062b0:	4b65      	ldr	r3, [pc, #404]	@ (8006448 <_strtod_l+0x858>)
 80062b2:	3d01      	subs	r5, #1
 80062b4:	429d      	cmp	r5, r3
 80062b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80062ba:	da50      	bge.n	800635e <_strtod_l+0x76e>
 80062bc:	1b5b      	subs	r3, r3, r5
 80062be:	2b1f      	cmp	r3, #31
 80062c0:	eba2 0203 	sub.w	r2, r2, r3
 80062c4:	f04f 0101 	mov.w	r1, #1
 80062c8:	dc3d      	bgt.n	8006346 <_strtod_l+0x756>
 80062ca:	fa01 f303 	lsl.w	r3, r1, r3
 80062ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80062d0:	2300      	movs	r3, #0
 80062d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80062d4:	18bd      	adds	r5, r7, r2
 80062d6:	9b08      	ldr	r3, [sp, #32]
 80062d8:	42af      	cmp	r7, r5
 80062da:	4416      	add	r6, r2
 80062dc:	441e      	add	r6, r3
 80062de:	463b      	mov	r3, r7
 80062e0:	bfa8      	it	ge
 80062e2:	462b      	movge	r3, r5
 80062e4:	42b3      	cmp	r3, r6
 80062e6:	bfa8      	it	ge
 80062e8:	4633      	movge	r3, r6
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bfc2      	ittt	gt
 80062ee:	1aed      	subgt	r5, r5, r3
 80062f0:	1af6      	subgt	r6, r6, r3
 80062f2:	1aff      	subgt	r7, r7, r3
 80062f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	dd16      	ble.n	8006328 <_strtod_l+0x738>
 80062fa:	4641      	mov	r1, r8
 80062fc:	9805      	ldr	r0, [sp, #20]
 80062fe:	461a      	mov	r2, r3
 8006300:	f002 ff78 	bl	80091f4 <__pow5mult>
 8006304:	4680      	mov	r8, r0
 8006306:	2800      	cmp	r0, #0
 8006308:	d0ba      	beq.n	8006280 <_strtod_l+0x690>
 800630a:	4601      	mov	r1, r0
 800630c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800630e:	9805      	ldr	r0, [sp, #20]
 8006310:	f002 fece 	bl	80090b0 <__multiply>
 8006314:	900a      	str	r0, [sp, #40]	@ 0x28
 8006316:	2800      	cmp	r0, #0
 8006318:	f43f ae8d 	beq.w	8006036 <_strtod_l+0x446>
 800631c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800631e:	9805      	ldr	r0, [sp, #20]
 8006320:	f002 fdb2 	bl	8008e88 <_Bfree>
 8006324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006326:	931a      	str	r3, [sp, #104]	@ 0x68
 8006328:	2d00      	cmp	r5, #0
 800632a:	dc1d      	bgt.n	8006368 <_strtod_l+0x778>
 800632c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800632e:	2b00      	cmp	r3, #0
 8006330:	dd23      	ble.n	800637a <_strtod_l+0x78a>
 8006332:	4649      	mov	r1, r9
 8006334:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006336:	9805      	ldr	r0, [sp, #20]
 8006338:	f002 ff5c 	bl	80091f4 <__pow5mult>
 800633c:	4681      	mov	r9, r0
 800633e:	b9e0      	cbnz	r0, 800637a <_strtod_l+0x78a>
 8006340:	f04f 0900 	mov.w	r9, #0
 8006344:	e677      	b.n	8006036 <_strtod_l+0x446>
 8006346:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800634a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800634e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006352:	35e2      	adds	r5, #226	@ 0xe2
 8006354:	fa01 f305 	lsl.w	r3, r1, r5
 8006358:	9310      	str	r3, [sp, #64]	@ 0x40
 800635a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800635c:	e7ba      	b.n	80062d4 <_strtod_l+0x6e4>
 800635e:	2300      	movs	r3, #0
 8006360:	9310      	str	r3, [sp, #64]	@ 0x40
 8006362:	2301      	movs	r3, #1
 8006364:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006366:	e7b5      	b.n	80062d4 <_strtod_l+0x6e4>
 8006368:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800636a:	9805      	ldr	r0, [sp, #20]
 800636c:	462a      	mov	r2, r5
 800636e:	f002 ff9b 	bl	80092a8 <__lshift>
 8006372:	901a      	str	r0, [sp, #104]	@ 0x68
 8006374:	2800      	cmp	r0, #0
 8006376:	d1d9      	bne.n	800632c <_strtod_l+0x73c>
 8006378:	e65d      	b.n	8006036 <_strtod_l+0x446>
 800637a:	2e00      	cmp	r6, #0
 800637c:	dd07      	ble.n	800638e <_strtod_l+0x79e>
 800637e:	4649      	mov	r1, r9
 8006380:	9805      	ldr	r0, [sp, #20]
 8006382:	4632      	mov	r2, r6
 8006384:	f002 ff90 	bl	80092a8 <__lshift>
 8006388:	4681      	mov	r9, r0
 800638a:	2800      	cmp	r0, #0
 800638c:	d0d8      	beq.n	8006340 <_strtod_l+0x750>
 800638e:	2f00      	cmp	r7, #0
 8006390:	dd08      	ble.n	80063a4 <_strtod_l+0x7b4>
 8006392:	4641      	mov	r1, r8
 8006394:	9805      	ldr	r0, [sp, #20]
 8006396:	463a      	mov	r2, r7
 8006398:	f002 ff86 	bl	80092a8 <__lshift>
 800639c:	4680      	mov	r8, r0
 800639e:	2800      	cmp	r0, #0
 80063a0:	f43f ae49 	beq.w	8006036 <_strtod_l+0x446>
 80063a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063a6:	9805      	ldr	r0, [sp, #20]
 80063a8:	464a      	mov	r2, r9
 80063aa:	f003 f805 	bl	80093b8 <__mdiff>
 80063ae:	4604      	mov	r4, r0
 80063b0:	2800      	cmp	r0, #0
 80063b2:	f43f ae40 	beq.w	8006036 <_strtod_l+0x446>
 80063b6:	68c3      	ldr	r3, [r0, #12]
 80063b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80063ba:	2300      	movs	r3, #0
 80063bc:	60c3      	str	r3, [r0, #12]
 80063be:	4641      	mov	r1, r8
 80063c0:	f002 ffde 	bl	8009380 <__mcmp>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	da45      	bge.n	8006454 <_strtod_l+0x864>
 80063c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063ca:	ea53 030a 	orrs.w	r3, r3, sl
 80063ce:	d16b      	bne.n	80064a8 <_strtod_l+0x8b8>
 80063d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d167      	bne.n	80064a8 <_strtod_l+0x8b8>
 80063d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80063dc:	0d1b      	lsrs	r3, r3, #20
 80063de:	051b      	lsls	r3, r3, #20
 80063e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80063e4:	d960      	bls.n	80064a8 <_strtod_l+0x8b8>
 80063e6:	6963      	ldr	r3, [r4, #20]
 80063e8:	b913      	cbnz	r3, 80063f0 <_strtod_l+0x800>
 80063ea:	6923      	ldr	r3, [r4, #16]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	dd5b      	ble.n	80064a8 <_strtod_l+0x8b8>
 80063f0:	4621      	mov	r1, r4
 80063f2:	2201      	movs	r2, #1
 80063f4:	9805      	ldr	r0, [sp, #20]
 80063f6:	f002 ff57 	bl	80092a8 <__lshift>
 80063fa:	4641      	mov	r1, r8
 80063fc:	4604      	mov	r4, r0
 80063fe:	f002 ffbf 	bl	8009380 <__mcmp>
 8006402:	2800      	cmp	r0, #0
 8006404:	dd50      	ble.n	80064a8 <_strtod_l+0x8b8>
 8006406:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800640a:	9a08      	ldr	r2, [sp, #32]
 800640c:	0d1b      	lsrs	r3, r3, #20
 800640e:	051b      	lsls	r3, r3, #20
 8006410:	2a00      	cmp	r2, #0
 8006412:	d06a      	beq.n	80064ea <_strtod_l+0x8fa>
 8006414:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006418:	d867      	bhi.n	80064ea <_strtod_l+0x8fa>
 800641a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800641e:	f67f ae9d 	bls.w	800615c <_strtod_l+0x56c>
 8006422:	4b0a      	ldr	r3, [pc, #40]	@ (800644c <_strtod_l+0x85c>)
 8006424:	4650      	mov	r0, sl
 8006426:	4659      	mov	r1, fp
 8006428:	2200      	movs	r2, #0
 800642a:	f7fa f8e5 	bl	80005f8 <__aeabi_dmul>
 800642e:	4b08      	ldr	r3, [pc, #32]	@ (8006450 <_strtod_l+0x860>)
 8006430:	400b      	ands	r3, r1
 8006432:	4682      	mov	sl, r0
 8006434:	468b      	mov	fp, r1
 8006436:	2b00      	cmp	r3, #0
 8006438:	f47f ae08 	bne.w	800604c <_strtod_l+0x45c>
 800643c:	9a05      	ldr	r2, [sp, #20]
 800643e:	2322      	movs	r3, #34	@ 0x22
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	e603      	b.n	800604c <_strtod_l+0x45c>
 8006444:	0800a568 	.word	0x0800a568
 8006448:	fffffc02 	.word	0xfffffc02
 800644c:	39500000 	.word	0x39500000
 8006450:	7ff00000 	.word	0x7ff00000
 8006454:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006458:	d165      	bne.n	8006526 <_strtod_l+0x936>
 800645a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800645c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006460:	b35a      	cbz	r2, 80064ba <_strtod_l+0x8ca>
 8006462:	4a9f      	ldr	r2, [pc, #636]	@ (80066e0 <_strtod_l+0xaf0>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d12b      	bne.n	80064c0 <_strtod_l+0x8d0>
 8006468:	9b08      	ldr	r3, [sp, #32]
 800646a:	4651      	mov	r1, sl
 800646c:	b303      	cbz	r3, 80064b0 <_strtod_l+0x8c0>
 800646e:	4b9d      	ldr	r3, [pc, #628]	@ (80066e4 <_strtod_l+0xaf4>)
 8006470:	465a      	mov	r2, fp
 8006472:	4013      	ands	r3, r2
 8006474:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006478:	f04f 32ff 	mov.w	r2, #4294967295
 800647c:	d81b      	bhi.n	80064b6 <_strtod_l+0x8c6>
 800647e:	0d1b      	lsrs	r3, r3, #20
 8006480:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	4299      	cmp	r1, r3
 800648a:	d119      	bne.n	80064c0 <_strtod_l+0x8d0>
 800648c:	4b96      	ldr	r3, [pc, #600]	@ (80066e8 <_strtod_l+0xaf8>)
 800648e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006490:	429a      	cmp	r2, r3
 8006492:	d102      	bne.n	800649a <_strtod_l+0x8aa>
 8006494:	3101      	adds	r1, #1
 8006496:	f43f adce 	beq.w	8006036 <_strtod_l+0x446>
 800649a:	4b92      	ldr	r3, [pc, #584]	@ (80066e4 <_strtod_l+0xaf4>)
 800649c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800649e:	401a      	ands	r2, r3
 80064a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80064a4:	f04f 0a00 	mov.w	sl, #0
 80064a8:	9b08      	ldr	r3, [sp, #32]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1b9      	bne.n	8006422 <_strtod_l+0x832>
 80064ae:	e5cd      	b.n	800604c <_strtod_l+0x45c>
 80064b0:	f04f 33ff 	mov.w	r3, #4294967295
 80064b4:	e7e8      	b.n	8006488 <_strtod_l+0x898>
 80064b6:	4613      	mov	r3, r2
 80064b8:	e7e6      	b.n	8006488 <_strtod_l+0x898>
 80064ba:	ea53 030a 	orrs.w	r3, r3, sl
 80064be:	d0a2      	beq.n	8006406 <_strtod_l+0x816>
 80064c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064c2:	b1db      	cbz	r3, 80064fc <_strtod_l+0x90c>
 80064c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064c6:	4213      	tst	r3, r2
 80064c8:	d0ee      	beq.n	80064a8 <_strtod_l+0x8b8>
 80064ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064cc:	9a08      	ldr	r2, [sp, #32]
 80064ce:	4650      	mov	r0, sl
 80064d0:	4659      	mov	r1, fp
 80064d2:	b1bb      	cbz	r3, 8006504 <_strtod_l+0x914>
 80064d4:	f7ff fb6b 	bl	8005bae <sulp>
 80064d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064dc:	ec53 2b10 	vmov	r2, r3, d0
 80064e0:	f7f9 fed4 	bl	800028c <__adddf3>
 80064e4:	4682      	mov	sl, r0
 80064e6:	468b      	mov	fp, r1
 80064e8:	e7de      	b.n	80064a8 <_strtod_l+0x8b8>
 80064ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80064ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80064f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80064f6:	f04f 3aff 	mov.w	sl, #4294967295
 80064fa:	e7d5      	b.n	80064a8 <_strtod_l+0x8b8>
 80064fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80064fe:	ea13 0f0a 	tst.w	r3, sl
 8006502:	e7e1      	b.n	80064c8 <_strtod_l+0x8d8>
 8006504:	f7ff fb53 	bl	8005bae <sulp>
 8006508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800650c:	ec53 2b10 	vmov	r2, r3, d0
 8006510:	f7f9 feba 	bl	8000288 <__aeabi_dsub>
 8006514:	2200      	movs	r2, #0
 8006516:	2300      	movs	r3, #0
 8006518:	4682      	mov	sl, r0
 800651a:	468b      	mov	fp, r1
 800651c:	f7fa fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006520:	2800      	cmp	r0, #0
 8006522:	d0c1      	beq.n	80064a8 <_strtod_l+0x8b8>
 8006524:	e61a      	b.n	800615c <_strtod_l+0x56c>
 8006526:	4641      	mov	r1, r8
 8006528:	4620      	mov	r0, r4
 800652a:	f003 f8a1 	bl	8009670 <__ratio>
 800652e:	ec57 6b10 	vmov	r6, r7, d0
 8006532:	2200      	movs	r2, #0
 8006534:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006538:	4630      	mov	r0, r6
 800653a:	4639      	mov	r1, r7
 800653c:	f7fa fad8 	bl	8000af0 <__aeabi_dcmple>
 8006540:	2800      	cmp	r0, #0
 8006542:	d06f      	beq.n	8006624 <_strtod_l+0xa34>
 8006544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d17a      	bne.n	8006640 <_strtod_l+0xa50>
 800654a:	f1ba 0f00 	cmp.w	sl, #0
 800654e:	d158      	bne.n	8006602 <_strtod_l+0xa12>
 8006550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006552:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006556:	2b00      	cmp	r3, #0
 8006558:	d15a      	bne.n	8006610 <_strtod_l+0xa20>
 800655a:	4b64      	ldr	r3, [pc, #400]	@ (80066ec <_strtod_l+0xafc>)
 800655c:	2200      	movs	r2, #0
 800655e:	4630      	mov	r0, r6
 8006560:	4639      	mov	r1, r7
 8006562:	f7fa fabb 	bl	8000adc <__aeabi_dcmplt>
 8006566:	2800      	cmp	r0, #0
 8006568:	d159      	bne.n	800661e <_strtod_l+0xa2e>
 800656a:	4630      	mov	r0, r6
 800656c:	4639      	mov	r1, r7
 800656e:	4b60      	ldr	r3, [pc, #384]	@ (80066f0 <_strtod_l+0xb00>)
 8006570:	2200      	movs	r2, #0
 8006572:	f7fa f841 	bl	80005f8 <__aeabi_dmul>
 8006576:	4606      	mov	r6, r0
 8006578:	460f      	mov	r7, r1
 800657a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800657e:	9606      	str	r6, [sp, #24]
 8006580:	9307      	str	r3, [sp, #28]
 8006582:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006586:	4d57      	ldr	r5, [pc, #348]	@ (80066e4 <_strtod_l+0xaf4>)
 8006588:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800658c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800658e:	401d      	ands	r5, r3
 8006590:	4b58      	ldr	r3, [pc, #352]	@ (80066f4 <_strtod_l+0xb04>)
 8006592:	429d      	cmp	r5, r3
 8006594:	f040 80b2 	bne.w	80066fc <_strtod_l+0xb0c>
 8006598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800659a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800659e:	ec4b ab10 	vmov	d0, sl, fp
 80065a2:	f002 ff9d 	bl	80094e0 <__ulp>
 80065a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065aa:	ec51 0b10 	vmov	r0, r1, d0
 80065ae:	f7fa f823 	bl	80005f8 <__aeabi_dmul>
 80065b2:	4652      	mov	r2, sl
 80065b4:	465b      	mov	r3, fp
 80065b6:	f7f9 fe69 	bl	800028c <__adddf3>
 80065ba:	460b      	mov	r3, r1
 80065bc:	4949      	ldr	r1, [pc, #292]	@ (80066e4 <_strtod_l+0xaf4>)
 80065be:	4a4e      	ldr	r2, [pc, #312]	@ (80066f8 <_strtod_l+0xb08>)
 80065c0:	4019      	ands	r1, r3
 80065c2:	4291      	cmp	r1, r2
 80065c4:	4682      	mov	sl, r0
 80065c6:	d942      	bls.n	800664e <_strtod_l+0xa5e>
 80065c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80065ca:	4b47      	ldr	r3, [pc, #284]	@ (80066e8 <_strtod_l+0xaf8>)
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d103      	bne.n	80065d8 <_strtod_l+0x9e8>
 80065d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065d2:	3301      	adds	r3, #1
 80065d4:	f43f ad2f 	beq.w	8006036 <_strtod_l+0x446>
 80065d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80066e8 <_strtod_l+0xaf8>
 80065dc:	f04f 3aff 	mov.w	sl, #4294967295
 80065e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065e2:	9805      	ldr	r0, [sp, #20]
 80065e4:	f002 fc50 	bl	8008e88 <_Bfree>
 80065e8:	9805      	ldr	r0, [sp, #20]
 80065ea:	4649      	mov	r1, r9
 80065ec:	f002 fc4c 	bl	8008e88 <_Bfree>
 80065f0:	9805      	ldr	r0, [sp, #20]
 80065f2:	4641      	mov	r1, r8
 80065f4:	f002 fc48 	bl	8008e88 <_Bfree>
 80065f8:	9805      	ldr	r0, [sp, #20]
 80065fa:	4621      	mov	r1, r4
 80065fc:	f002 fc44 	bl	8008e88 <_Bfree>
 8006600:	e619      	b.n	8006236 <_strtod_l+0x646>
 8006602:	f1ba 0f01 	cmp.w	sl, #1
 8006606:	d103      	bne.n	8006610 <_strtod_l+0xa20>
 8006608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800660a:	2b00      	cmp	r3, #0
 800660c:	f43f ada6 	beq.w	800615c <_strtod_l+0x56c>
 8006610:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80066c0 <_strtod_l+0xad0>
 8006614:	4f35      	ldr	r7, [pc, #212]	@ (80066ec <_strtod_l+0xafc>)
 8006616:	ed8d 7b06 	vstr	d7, [sp, #24]
 800661a:	2600      	movs	r6, #0
 800661c:	e7b1      	b.n	8006582 <_strtod_l+0x992>
 800661e:	4f34      	ldr	r7, [pc, #208]	@ (80066f0 <_strtod_l+0xb00>)
 8006620:	2600      	movs	r6, #0
 8006622:	e7aa      	b.n	800657a <_strtod_l+0x98a>
 8006624:	4b32      	ldr	r3, [pc, #200]	@ (80066f0 <_strtod_l+0xb00>)
 8006626:	4630      	mov	r0, r6
 8006628:	4639      	mov	r1, r7
 800662a:	2200      	movs	r2, #0
 800662c:	f7f9 ffe4 	bl	80005f8 <__aeabi_dmul>
 8006630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006632:	4606      	mov	r6, r0
 8006634:	460f      	mov	r7, r1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d09f      	beq.n	800657a <_strtod_l+0x98a>
 800663a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800663e:	e7a0      	b.n	8006582 <_strtod_l+0x992>
 8006640:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80066c8 <_strtod_l+0xad8>
 8006644:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006648:	ec57 6b17 	vmov	r6, r7, d7
 800664c:	e799      	b.n	8006582 <_strtod_l+0x992>
 800664e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006652:	9b08      	ldr	r3, [sp, #32]
 8006654:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1c1      	bne.n	80065e0 <_strtod_l+0x9f0>
 800665c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006660:	0d1b      	lsrs	r3, r3, #20
 8006662:	051b      	lsls	r3, r3, #20
 8006664:	429d      	cmp	r5, r3
 8006666:	d1bb      	bne.n	80065e0 <_strtod_l+0x9f0>
 8006668:	4630      	mov	r0, r6
 800666a:	4639      	mov	r1, r7
 800666c:	f7fa fb24 	bl	8000cb8 <__aeabi_d2lz>
 8006670:	f7f9 ff94 	bl	800059c <__aeabi_l2d>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4630      	mov	r0, r6
 800667a:	4639      	mov	r1, r7
 800667c:	f7f9 fe04 	bl	8000288 <__aeabi_dsub>
 8006680:	460b      	mov	r3, r1
 8006682:	4602      	mov	r2, r0
 8006684:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006688:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800668c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800668e:	ea46 060a 	orr.w	r6, r6, sl
 8006692:	431e      	orrs	r6, r3
 8006694:	d06f      	beq.n	8006776 <_strtod_l+0xb86>
 8006696:	a30e      	add	r3, pc, #56	@ (adr r3, 80066d0 <_strtod_l+0xae0>)
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	f7fa fa1e 	bl	8000adc <__aeabi_dcmplt>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	f47f acd3 	bne.w	800604c <_strtod_l+0x45c>
 80066a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80066d8 <_strtod_l+0xae8>)
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066b0:	f7fa fa32 	bl	8000b18 <__aeabi_dcmpgt>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d093      	beq.n	80065e0 <_strtod_l+0x9f0>
 80066b8:	e4c8      	b.n	800604c <_strtod_l+0x45c>
 80066ba:	bf00      	nop
 80066bc:	f3af 8000 	nop.w
 80066c0:	00000000 	.word	0x00000000
 80066c4:	bff00000 	.word	0xbff00000
 80066c8:	00000000 	.word	0x00000000
 80066cc:	3ff00000 	.word	0x3ff00000
 80066d0:	94a03595 	.word	0x94a03595
 80066d4:	3fdfffff 	.word	0x3fdfffff
 80066d8:	35afe535 	.word	0x35afe535
 80066dc:	3fe00000 	.word	0x3fe00000
 80066e0:	000fffff 	.word	0x000fffff
 80066e4:	7ff00000 	.word	0x7ff00000
 80066e8:	7fefffff 	.word	0x7fefffff
 80066ec:	3ff00000 	.word	0x3ff00000
 80066f0:	3fe00000 	.word	0x3fe00000
 80066f4:	7fe00000 	.word	0x7fe00000
 80066f8:	7c9fffff 	.word	0x7c9fffff
 80066fc:	9b08      	ldr	r3, [sp, #32]
 80066fe:	b323      	cbz	r3, 800674a <_strtod_l+0xb5a>
 8006700:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006704:	d821      	bhi.n	800674a <_strtod_l+0xb5a>
 8006706:	a328      	add	r3, pc, #160	@ (adr r3, 80067a8 <_strtod_l+0xbb8>)
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	4630      	mov	r0, r6
 800670e:	4639      	mov	r1, r7
 8006710:	f7fa f9ee 	bl	8000af0 <__aeabi_dcmple>
 8006714:	b1a0      	cbz	r0, 8006740 <_strtod_l+0xb50>
 8006716:	4639      	mov	r1, r7
 8006718:	4630      	mov	r0, r6
 800671a:	f7fa fa45 	bl	8000ba8 <__aeabi_d2uiz>
 800671e:	2801      	cmp	r0, #1
 8006720:	bf38      	it	cc
 8006722:	2001      	movcc	r0, #1
 8006724:	f7f9 feee 	bl	8000504 <__aeabi_ui2d>
 8006728:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800672a:	4606      	mov	r6, r0
 800672c:	460f      	mov	r7, r1
 800672e:	b9fb      	cbnz	r3, 8006770 <_strtod_l+0xb80>
 8006730:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006734:	9014      	str	r0, [sp, #80]	@ 0x50
 8006736:	9315      	str	r3, [sp, #84]	@ 0x54
 8006738:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800673c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006740:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006742:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006746:	1b5b      	subs	r3, r3, r5
 8006748:	9311      	str	r3, [sp, #68]	@ 0x44
 800674a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800674e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006752:	f002 fec5 	bl	80094e0 <__ulp>
 8006756:	4650      	mov	r0, sl
 8006758:	ec53 2b10 	vmov	r2, r3, d0
 800675c:	4659      	mov	r1, fp
 800675e:	f7f9 ff4b 	bl	80005f8 <__aeabi_dmul>
 8006762:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006766:	f7f9 fd91 	bl	800028c <__adddf3>
 800676a:	4682      	mov	sl, r0
 800676c:	468b      	mov	fp, r1
 800676e:	e770      	b.n	8006652 <_strtod_l+0xa62>
 8006770:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006774:	e7e0      	b.n	8006738 <_strtod_l+0xb48>
 8006776:	a30e      	add	r3, pc, #56	@ (adr r3, 80067b0 <_strtod_l+0xbc0>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f7fa f9ae 	bl	8000adc <__aeabi_dcmplt>
 8006780:	e798      	b.n	80066b4 <_strtod_l+0xac4>
 8006782:	2300      	movs	r3, #0
 8006784:	930e      	str	r3, [sp, #56]	@ 0x38
 8006786:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006788:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	f7ff ba6d 	b.w	8005c6a <_strtod_l+0x7a>
 8006790:	2a65      	cmp	r2, #101	@ 0x65
 8006792:	f43f ab68 	beq.w	8005e66 <_strtod_l+0x276>
 8006796:	2a45      	cmp	r2, #69	@ 0x45
 8006798:	f43f ab65 	beq.w	8005e66 <_strtod_l+0x276>
 800679c:	2301      	movs	r3, #1
 800679e:	f7ff bba0 	b.w	8005ee2 <_strtod_l+0x2f2>
 80067a2:	bf00      	nop
 80067a4:	f3af 8000 	nop.w
 80067a8:	ffc00000 	.word	0xffc00000
 80067ac:	41dfffff 	.word	0x41dfffff
 80067b0:	94a03595 	.word	0x94a03595
 80067b4:	3fcfffff 	.word	0x3fcfffff

080067b8 <_strtod_r>:
 80067b8:	4b01      	ldr	r3, [pc, #4]	@ (80067c0 <_strtod_r+0x8>)
 80067ba:	f7ff ba19 	b.w	8005bf0 <_strtod_l>
 80067be:	bf00      	nop
 80067c0:	200000ac 	.word	0x200000ac

080067c4 <strtod>:
 80067c4:	460a      	mov	r2, r1
 80067c6:	4601      	mov	r1, r0
 80067c8:	4802      	ldr	r0, [pc, #8]	@ (80067d4 <strtod+0x10>)
 80067ca:	4b03      	ldr	r3, [pc, #12]	@ (80067d8 <strtod+0x14>)
 80067cc:	6800      	ldr	r0, [r0, #0]
 80067ce:	f7ff ba0f 	b.w	8005bf0 <_strtod_l>
 80067d2:	bf00      	nop
 80067d4:	20000218 	.word	0x20000218
 80067d8:	200000ac 	.word	0x200000ac

080067dc <__cvt>:
 80067dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067e0:	ec57 6b10 	vmov	r6, r7, d0
 80067e4:	2f00      	cmp	r7, #0
 80067e6:	460c      	mov	r4, r1
 80067e8:	4619      	mov	r1, r3
 80067ea:	463b      	mov	r3, r7
 80067ec:	bfbb      	ittet	lt
 80067ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80067f2:	461f      	movlt	r7, r3
 80067f4:	2300      	movge	r3, #0
 80067f6:	232d      	movlt	r3, #45	@ 0x2d
 80067f8:	700b      	strb	r3, [r1, #0]
 80067fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006800:	4691      	mov	r9, r2
 8006802:	f023 0820 	bic.w	r8, r3, #32
 8006806:	bfbc      	itt	lt
 8006808:	4632      	movlt	r2, r6
 800680a:	4616      	movlt	r6, r2
 800680c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006810:	d005      	beq.n	800681e <__cvt+0x42>
 8006812:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006816:	d100      	bne.n	800681a <__cvt+0x3e>
 8006818:	3401      	adds	r4, #1
 800681a:	2102      	movs	r1, #2
 800681c:	e000      	b.n	8006820 <__cvt+0x44>
 800681e:	2103      	movs	r1, #3
 8006820:	ab03      	add	r3, sp, #12
 8006822:	9301      	str	r3, [sp, #4]
 8006824:	ab02      	add	r3, sp, #8
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	ec47 6b10 	vmov	d0, r6, r7
 800682c:	4653      	mov	r3, sl
 800682e:	4622      	mov	r2, r4
 8006830:	f001 f8ce 	bl	80079d0 <_dtoa_r>
 8006834:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006838:	4605      	mov	r5, r0
 800683a:	d119      	bne.n	8006870 <__cvt+0x94>
 800683c:	f019 0f01 	tst.w	r9, #1
 8006840:	d00e      	beq.n	8006860 <__cvt+0x84>
 8006842:	eb00 0904 	add.w	r9, r0, r4
 8006846:	2200      	movs	r2, #0
 8006848:	2300      	movs	r3, #0
 800684a:	4630      	mov	r0, r6
 800684c:	4639      	mov	r1, r7
 800684e:	f7fa f93b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006852:	b108      	cbz	r0, 8006858 <__cvt+0x7c>
 8006854:	f8cd 900c 	str.w	r9, [sp, #12]
 8006858:	2230      	movs	r2, #48	@ 0x30
 800685a:	9b03      	ldr	r3, [sp, #12]
 800685c:	454b      	cmp	r3, r9
 800685e:	d31e      	bcc.n	800689e <__cvt+0xc2>
 8006860:	9b03      	ldr	r3, [sp, #12]
 8006862:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006864:	1b5b      	subs	r3, r3, r5
 8006866:	4628      	mov	r0, r5
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	b004      	add	sp, #16
 800686c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006870:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006874:	eb00 0904 	add.w	r9, r0, r4
 8006878:	d1e5      	bne.n	8006846 <__cvt+0x6a>
 800687a:	7803      	ldrb	r3, [r0, #0]
 800687c:	2b30      	cmp	r3, #48	@ 0x30
 800687e:	d10a      	bne.n	8006896 <__cvt+0xba>
 8006880:	2200      	movs	r2, #0
 8006882:	2300      	movs	r3, #0
 8006884:	4630      	mov	r0, r6
 8006886:	4639      	mov	r1, r7
 8006888:	f7fa f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800688c:	b918      	cbnz	r0, 8006896 <__cvt+0xba>
 800688e:	f1c4 0401 	rsb	r4, r4, #1
 8006892:	f8ca 4000 	str.w	r4, [sl]
 8006896:	f8da 3000 	ldr.w	r3, [sl]
 800689a:	4499      	add	r9, r3
 800689c:	e7d3      	b.n	8006846 <__cvt+0x6a>
 800689e:	1c59      	adds	r1, r3, #1
 80068a0:	9103      	str	r1, [sp, #12]
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	e7d9      	b.n	800685a <__cvt+0x7e>

080068a6 <__exponent>:
 80068a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068a8:	2900      	cmp	r1, #0
 80068aa:	bfba      	itte	lt
 80068ac:	4249      	neglt	r1, r1
 80068ae:	232d      	movlt	r3, #45	@ 0x2d
 80068b0:	232b      	movge	r3, #43	@ 0x2b
 80068b2:	2909      	cmp	r1, #9
 80068b4:	7002      	strb	r2, [r0, #0]
 80068b6:	7043      	strb	r3, [r0, #1]
 80068b8:	dd29      	ble.n	800690e <__exponent+0x68>
 80068ba:	f10d 0307 	add.w	r3, sp, #7
 80068be:	461d      	mov	r5, r3
 80068c0:	270a      	movs	r7, #10
 80068c2:	461a      	mov	r2, r3
 80068c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80068c8:	fb07 1416 	mls	r4, r7, r6, r1
 80068cc:	3430      	adds	r4, #48	@ 0x30
 80068ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80068d2:	460c      	mov	r4, r1
 80068d4:	2c63      	cmp	r4, #99	@ 0x63
 80068d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80068da:	4631      	mov	r1, r6
 80068dc:	dcf1      	bgt.n	80068c2 <__exponent+0x1c>
 80068de:	3130      	adds	r1, #48	@ 0x30
 80068e0:	1e94      	subs	r4, r2, #2
 80068e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068e6:	1c41      	adds	r1, r0, #1
 80068e8:	4623      	mov	r3, r4
 80068ea:	42ab      	cmp	r3, r5
 80068ec:	d30a      	bcc.n	8006904 <__exponent+0x5e>
 80068ee:	f10d 0309 	add.w	r3, sp, #9
 80068f2:	1a9b      	subs	r3, r3, r2
 80068f4:	42ac      	cmp	r4, r5
 80068f6:	bf88      	it	hi
 80068f8:	2300      	movhi	r3, #0
 80068fa:	3302      	adds	r3, #2
 80068fc:	4403      	add	r3, r0
 80068fe:	1a18      	subs	r0, r3, r0
 8006900:	b003      	add	sp, #12
 8006902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006904:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006908:	f801 6f01 	strb.w	r6, [r1, #1]!
 800690c:	e7ed      	b.n	80068ea <__exponent+0x44>
 800690e:	2330      	movs	r3, #48	@ 0x30
 8006910:	3130      	adds	r1, #48	@ 0x30
 8006912:	7083      	strb	r3, [r0, #2]
 8006914:	70c1      	strb	r1, [r0, #3]
 8006916:	1d03      	adds	r3, r0, #4
 8006918:	e7f1      	b.n	80068fe <__exponent+0x58>
	...

0800691c <_printf_float>:
 800691c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006920:	b08d      	sub	sp, #52	@ 0x34
 8006922:	460c      	mov	r4, r1
 8006924:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006928:	4616      	mov	r6, r2
 800692a:	461f      	mov	r7, r3
 800692c:	4605      	mov	r5, r0
 800692e:	f000 ff31 	bl	8007794 <_localeconv_r>
 8006932:	6803      	ldr	r3, [r0, #0]
 8006934:	9304      	str	r3, [sp, #16]
 8006936:	4618      	mov	r0, r3
 8006938:	f7f9 fc9a 	bl	8000270 <strlen>
 800693c:	2300      	movs	r3, #0
 800693e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006940:	f8d8 3000 	ldr.w	r3, [r8]
 8006944:	9005      	str	r0, [sp, #20]
 8006946:	3307      	adds	r3, #7
 8006948:	f023 0307 	bic.w	r3, r3, #7
 800694c:	f103 0208 	add.w	r2, r3, #8
 8006950:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006954:	f8d4 b000 	ldr.w	fp, [r4]
 8006958:	f8c8 2000 	str.w	r2, [r8]
 800695c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006960:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006964:	9307      	str	r3, [sp, #28]
 8006966:	f8cd 8018 	str.w	r8, [sp, #24]
 800696a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800696e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006972:	4b9c      	ldr	r3, [pc, #624]	@ (8006be4 <_printf_float+0x2c8>)
 8006974:	f04f 32ff 	mov.w	r2, #4294967295
 8006978:	f7fa f8d8 	bl	8000b2c <__aeabi_dcmpun>
 800697c:	bb70      	cbnz	r0, 80069dc <_printf_float+0xc0>
 800697e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006982:	4b98      	ldr	r3, [pc, #608]	@ (8006be4 <_printf_float+0x2c8>)
 8006984:	f04f 32ff 	mov.w	r2, #4294967295
 8006988:	f7fa f8b2 	bl	8000af0 <__aeabi_dcmple>
 800698c:	bb30      	cbnz	r0, 80069dc <_printf_float+0xc0>
 800698e:	2200      	movs	r2, #0
 8006990:	2300      	movs	r3, #0
 8006992:	4640      	mov	r0, r8
 8006994:	4649      	mov	r1, r9
 8006996:	f7fa f8a1 	bl	8000adc <__aeabi_dcmplt>
 800699a:	b110      	cbz	r0, 80069a2 <_printf_float+0x86>
 800699c:	232d      	movs	r3, #45	@ 0x2d
 800699e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069a2:	4a91      	ldr	r2, [pc, #580]	@ (8006be8 <_printf_float+0x2cc>)
 80069a4:	4b91      	ldr	r3, [pc, #580]	@ (8006bec <_printf_float+0x2d0>)
 80069a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80069aa:	bf8c      	ite	hi
 80069ac:	4690      	movhi	r8, r2
 80069ae:	4698      	movls	r8, r3
 80069b0:	2303      	movs	r3, #3
 80069b2:	6123      	str	r3, [r4, #16]
 80069b4:	f02b 0304 	bic.w	r3, fp, #4
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	f04f 0900 	mov.w	r9, #0
 80069be:	9700      	str	r7, [sp, #0]
 80069c0:	4633      	mov	r3, r6
 80069c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80069c4:	4621      	mov	r1, r4
 80069c6:	4628      	mov	r0, r5
 80069c8:	f000 f9d2 	bl	8006d70 <_printf_common>
 80069cc:	3001      	adds	r0, #1
 80069ce:	f040 808d 	bne.w	8006aec <_printf_float+0x1d0>
 80069d2:	f04f 30ff 	mov.w	r0, #4294967295
 80069d6:	b00d      	add	sp, #52	@ 0x34
 80069d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069dc:	4642      	mov	r2, r8
 80069de:	464b      	mov	r3, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	4649      	mov	r1, r9
 80069e4:	f7fa f8a2 	bl	8000b2c <__aeabi_dcmpun>
 80069e8:	b140      	cbz	r0, 80069fc <_printf_float+0xe0>
 80069ea:	464b      	mov	r3, r9
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bfbc      	itt	lt
 80069f0:	232d      	movlt	r3, #45	@ 0x2d
 80069f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80069f6:	4a7e      	ldr	r2, [pc, #504]	@ (8006bf0 <_printf_float+0x2d4>)
 80069f8:	4b7e      	ldr	r3, [pc, #504]	@ (8006bf4 <_printf_float+0x2d8>)
 80069fa:	e7d4      	b.n	80069a6 <_printf_float+0x8a>
 80069fc:	6863      	ldr	r3, [r4, #4]
 80069fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006a02:	9206      	str	r2, [sp, #24]
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	d13b      	bne.n	8006a80 <_printf_float+0x164>
 8006a08:	2306      	movs	r3, #6
 8006a0a:	6063      	str	r3, [r4, #4]
 8006a0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006a10:	2300      	movs	r3, #0
 8006a12:	6022      	str	r2, [r4, #0]
 8006a14:	9303      	str	r3, [sp, #12]
 8006a16:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a18:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006a1c:	ab09      	add	r3, sp, #36	@ 0x24
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	6861      	ldr	r1, [r4, #4]
 8006a22:	ec49 8b10 	vmov	d0, r8, r9
 8006a26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7ff fed6 	bl	80067dc <__cvt>
 8006a30:	9b06      	ldr	r3, [sp, #24]
 8006a32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a34:	2b47      	cmp	r3, #71	@ 0x47
 8006a36:	4680      	mov	r8, r0
 8006a38:	d129      	bne.n	8006a8e <_printf_float+0x172>
 8006a3a:	1cc8      	adds	r0, r1, #3
 8006a3c:	db02      	blt.n	8006a44 <_printf_float+0x128>
 8006a3e:	6863      	ldr	r3, [r4, #4]
 8006a40:	4299      	cmp	r1, r3
 8006a42:	dd41      	ble.n	8006ac8 <_printf_float+0x1ac>
 8006a44:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a48:	fa5f fa8a 	uxtb.w	sl, sl
 8006a4c:	3901      	subs	r1, #1
 8006a4e:	4652      	mov	r2, sl
 8006a50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a54:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a56:	f7ff ff26 	bl	80068a6 <__exponent>
 8006a5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a5c:	1813      	adds	r3, r2, r0
 8006a5e:	2a01      	cmp	r2, #1
 8006a60:	4681      	mov	r9, r0
 8006a62:	6123      	str	r3, [r4, #16]
 8006a64:	dc02      	bgt.n	8006a6c <_printf_float+0x150>
 8006a66:	6822      	ldr	r2, [r4, #0]
 8006a68:	07d2      	lsls	r2, r2, #31
 8006a6a:	d501      	bpl.n	8006a70 <_printf_float+0x154>
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	6123      	str	r3, [r4, #16]
 8006a70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0a2      	beq.n	80069be <_printf_float+0xa2>
 8006a78:	232d      	movs	r3, #45	@ 0x2d
 8006a7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a7e:	e79e      	b.n	80069be <_printf_float+0xa2>
 8006a80:	9a06      	ldr	r2, [sp, #24]
 8006a82:	2a47      	cmp	r2, #71	@ 0x47
 8006a84:	d1c2      	bne.n	8006a0c <_printf_float+0xf0>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1c0      	bne.n	8006a0c <_printf_float+0xf0>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e7bd      	b.n	8006a0a <_printf_float+0xee>
 8006a8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a92:	d9db      	bls.n	8006a4c <_printf_float+0x130>
 8006a94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a98:	d118      	bne.n	8006acc <_printf_float+0x1b0>
 8006a9a:	2900      	cmp	r1, #0
 8006a9c:	6863      	ldr	r3, [r4, #4]
 8006a9e:	dd0b      	ble.n	8006ab8 <_printf_float+0x19c>
 8006aa0:	6121      	str	r1, [r4, #16]
 8006aa2:	b913      	cbnz	r3, 8006aaa <_printf_float+0x18e>
 8006aa4:	6822      	ldr	r2, [r4, #0]
 8006aa6:	07d0      	lsls	r0, r2, #31
 8006aa8:	d502      	bpl.n	8006ab0 <_printf_float+0x194>
 8006aaa:	3301      	adds	r3, #1
 8006aac:	440b      	add	r3, r1
 8006aae:	6123      	str	r3, [r4, #16]
 8006ab0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ab2:	f04f 0900 	mov.w	r9, #0
 8006ab6:	e7db      	b.n	8006a70 <_printf_float+0x154>
 8006ab8:	b913      	cbnz	r3, 8006ac0 <_printf_float+0x1a4>
 8006aba:	6822      	ldr	r2, [r4, #0]
 8006abc:	07d2      	lsls	r2, r2, #31
 8006abe:	d501      	bpl.n	8006ac4 <_printf_float+0x1a8>
 8006ac0:	3302      	adds	r3, #2
 8006ac2:	e7f4      	b.n	8006aae <_printf_float+0x192>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e7f2      	b.n	8006aae <_printf_float+0x192>
 8006ac8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ace:	4299      	cmp	r1, r3
 8006ad0:	db05      	blt.n	8006ade <_printf_float+0x1c2>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	6121      	str	r1, [r4, #16]
 8006ad6:	07d8      	lsls	r0, r3, #31
 8006ad8:	d5ea      	bpl.n	8006ab0 <_printf_float+0x194>
 8006ada:	1c4b      	adds	r3, r1, #1
 8006adc:	e7e7      	b.n	8006aae <_printf_float+0x192>
 8006ade:	2900      	cmp	r1, #0
 8006ae0:	bfd4      	ite	le
 8006ae2:	f1c1 0202 	rsble	r2, r1, #2
 8006ae6:	2201      	movgt	r2, #1
 8006ae8:	4413      	add	r3, r2
 8006aea:	e7e0      	b.n	8006aae <_printf_float+0x192>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	055a      	lsls	r2, r3, #21
 8006af0:	d407      	bmi.n	8006b02 <_printf_float+0x1e6>
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	4642      	mov	r2, r8
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	d12b      	bne.n	8006b58 <_printf_float+0x23c>
 8006b00:	e767      	b.n	80069d2 <_printf_float+0xb6>
 8006b02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b06:	f240 80dd 	bls.w	8006cc4 <_printf_float+0x3a8>
 8006b0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2300      	movs	r3, #0
 8006b12:	f7f9 ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d033      	beq.n	8006b82 <_printf_float+0x266>
 8006b1a:	4a37      	ldr	r2, [pc, #220]	@ (8006bf8 <_printf_float+0x2dc>)
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b8      	blx	r7
 8006b24:	3001      	adds	r0, #1
 8006b26:	f43f af54 	beq.w	80069d2 <_printf_float+0xb6>
 8006b2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b2e:	4543      	cmp	r3, r8
 8006b30:	db02      	blt.n	8006b38 <_printf_float+0x21c>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	07d8      	lsls	r0, r3, #31
 8006b36:	d50f      	bpl.n	8006b58 <_printf_float+0x23c>
 8006b38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b8      	blx	r7
 8006b42:	3001      	adds	r0, #1
 8006b44:	f43f af45 	beq.w	80069d2 <_printf_float+0xb6>
 8006b48:	f04f 0900 	mov.w	r9, #0
 8006b4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b50:	f104 0a1a 	add.w	sl, r4, #26
 8006b54:	45c8      	cmp	r8, r9
 8006b56:	dc09      	bgt.n	8006b6c <_printf_float+0x250>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	079b      	lsls	r3, r3, #30
 8006b5c:	f100 8103 	bmi.w	8006d66 <_printf_float+0x44a>
 8006b60:	68e0      	ldr	r0, [r4, #12]
 8006b62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b64:	4298      	cmp	r0, r3
 8006b66:	bfb8      	it	lt
 8006b68:	4618      	movlt	r0, r3
 8006b6a:	e734      	b.n	80069d6 <_printf_float+0xba>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	4652      	mov	r2, sl
 8006b70:	4631      	mov	r1, r6
 8006b72:	4628      	mov	r0, r5
 8006b74:	47b8      	blx	r7
 8006b76:	3001      	adds	r0, #1
 8006b78:	f43f af2b 	beq.w	80069d2 <_printf_float+0xb6>
 8006b7c:	f109 0901 	add.w	r9, r9, #1
 8006b80:	e7e8      	b.n	8006b54 <_printf_float+0x238>
 8006b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	dc39      	bgt.n	8006bfc <_printf_float+0x2e0>
 8006b88:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf8 <_printf_float+0x2dc>)
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	3001      	adds	r0, #1
 8006b94:	f43f af1d 	beq.w	80069d2 <_printf_float+0xb6>
 8006b98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b9c:	ea59 0303 	orrs.w	r3, r9, r3
 8006ba0:	d102      	bne.n	8006ba8 <_printf_float+0x28c>
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	07d9      	lsls	r1, r3, #31
 8006ba6:	d5d7      	bpl.n	8006b58 <_printf_float+0x23c>
 8006ba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bac:	4631      	mov	r1, r6
 8006bae:	4628      	mov	r0, r5
 8006bb0:	47b8      	blx	r7
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	f43f af0d 	beq.w	80069d2 <_printf_float+0xb6>
 8006bb8:	f04f 0a00 	mov.w	sl, #0
 8006bbc:	f104 0b1a 	add.w	fp, r4, #26
 8006bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc2:	425b      	negs	r3, r3
 8006bc4:	4553      	cmp	r3, sl
 8006bc6:	dc01      	bgt.n	8006bcc <_printf_float+0x2b0>
 8006bc8:	464b      	mov	r3, r9
 8006bca:	e793      	b.n	8006af4 <_printf_float+0x1d8>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	465a      	mov	r2, fp
 8006bd0:	4631      	mov	r1, r6
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	47b8      	blx	r7
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	f43f aefb 	beq.w	80069d2 <_printf_float+0xb6>
 8006bdc:	f10a 0a01 	add.w	sl, sl, #1
 8006be0:	e7ee      	b.n	8006bc0 <_printf_float+0x2a4>
 8006be2:	bf00      	nop
 8006be4:	7fefffff 	.word	0x7fefffff
 8006be8:	0800a36e 	.word	0x0800a36e
 8006bec:	0800a36a 	.word	0x0800a36a
 8006bf0:	0800a376 	.word	0x0800a376
 8006bf4:	0800a372 	.word	0x0800a372
 8006bf8:	0800a37a 	.word	0x0800a37a
 8006bfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bfe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c02:	4553      	cmp	r3, sl
 8006c04:	bfa8      	it	ge
 8006c06:	4653      	movge	r3, sl
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	4699      	mov	r9, r3
 8006c0c:	dc36      	bgt.n	8006c7c <_printf_float+0x360>
 8006c0e:	f04f 0b00 	mov.w	fp, #0
 8006c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c16:	f104 021a 	add.w	r2, r4, #26
 8006c1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c1c:	9306      	str	r3, [sp, #24]
 8006c1e:	eba3 0309 	sub.w	r3, r3, r9
 8006c22:	455b      	cmp	r3, fp
 8006c24:	dc31      	bgt.n	8006c8a <_printf_float+0x36e>
 8006c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c28:	459a      	cmp	sl, r3
 8006c2a:	dc3a      	bgt.n	8006ca2 <_printf_float+0x386>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	07da      	lsls	r2, r3, #31
 8006c30:	d437      	bmi.n	8006ca2 <_printf_float+0x386>
 8006c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c34:	ebaa 0903 	sub.w	r9, sl, r3
 8006c38:	9b06      	ldr	r3, [sp, #24]
 8006c3a:	ebaa 0303 	sub.w	r3, sl, r3
 8006c3e:	4599      	cmp	r9, r3
 8006c40:	bfa8      	it	ge
 8006c42:	4699      	movge	r9, r3
 8006c44:	f1b9 0f00 	cmp.w	r9, #0
 8006c48:	dc33      	bgt.n	8006cb2 <_printf_float+0x396>
 8006c4a:	f04f 0800 	mov.w	r8, #0
 8006c4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c52:	f104 0b1a 	add.w	fp, r4, #26
 8006c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c58:	ebaa 0303 	sub.w	r3, sl, r3
 8006c5c:	eba3 0309 	sub.w	r3, r3, r9
 8006c60:	4543      	cmp	r3, r8
 8006c62:	f77f af79 	ble.w	8006b58 <_printf_float+0x23c>
 8006c66:	2301      	movs	r3, #1
 8006c68:	465a      	mov	r2, fp
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	47b8      	blx	r7
 8006c70:	3001      	adds	r0, #1
 8006c72:	f43f aeae 	beq.w	80069d2 <_printf_float+0xb6>
 8006c76:	f108 0801 	add.w	r8, r8, #1
 8006c7a:	e7ec      	b.n	8006c56 <_printf_float+0x33a>
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	d1c2      	bne.n	8006c0e <_printf_float+0x2f2>
 8006c88:	e6a3      	b.n	80069d2 <_printf_float+0xb6>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4628      	mov	r0, r5
 8006c90:	9206      	str	r2, [sp, #24]
 8006c92:	47b8      	blx	r7
 8006c94:	3001      	adds	r0, #1
 8006c96:	f43f ae9c 	beq.w	80069d2 <_printf_float+0xb6>
 8006c9a:	9a06      	ldr	r2, [sp, #24]
 8006c9c:	f10b 0b01 	add.w	fp, fp, #1
 8006ca0:	e7bb      	b.n	8006c1a <_printf_float+0x2fe>
 8006ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	4628      	mov	r0, r5
 8006caa:	47b8      	blx	r7
 8006cac:	3001      	adds	r0, #1
 8006cae:	d1c0      	bne.n	8006c32 <_printf_float+0x316>
 8006cb0:	e68f      	b.n	80069d2 <_printf_float+0xb6>
 8006cb2:	9a06      	ldr	r2, [sp, #24]
 8006cb4:	464b      	mov	r3, r9
 8006cb6:	4442      	add	r2, r8
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4628      	mov	r0, r5
 8006cbc:	47b8      	blx	r7
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	d1c3      	bne.n	8006c4a <_printf_float+0x32e>
 8006cc2:	e686      	b.n	80069d2 <_printf_float+0xb6>
 8006cc4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006cc8:	f1ba 0f01 	cmp.w	sl, #1
 8006ccc:	dc01      	bgt.n	8006cd2 <_printf_float+0x3b6>
 8006cce:	07db      	lsls	r3, r3, #31
 8006cd0:	d536      	bpl.n	8006d40 <_printf_float+0x424>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4642      	mov	r2, r8
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f43f ae78 	beq.w	80069d2 <_printf_float+0xb6>
 8006ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b8      	blx	r7
 8006cec:	3001      	adds	r0, #1
 8006cee:	f43f ae70 	beq.w	80069d2 <_printf_float+0xb6>
 8006cf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cfe:	f7f9 fee3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d02:	b9c0      	cbnz	r0, 8006d36 <_printf_float+0x41a>
 8006d04:	4653      	mov	r3, sl
 8006d06:	f108 0201 	add.w	r2, r8, #1
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	d10c      	bne.n	8006d2e <_printf_float+0x412>
 8006d14:	e65d      	b.n	80069d2 <_printf_float+0xb6>
 8006d16:	2301      	movs	r3, #1
 8006d18:	465a      	mov	r2, fp
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	47b8      	blx	r7
 8006d20:	3001      	adds	r0, #1
 8006d22:	f43f ae56 	beq.w	80069d2 <_printf_float+0xb6>
 8006d26:	f108 0801 	add.w	r8, r8, #1
 8006d2a:	45d0      	cmp	r8, sl
 8006d2c:	dbf3      	blt.n	8006d16 <_printf_float+0x3fa>
 8006d2e:	464b      	mov	r3, r9
 8006d30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d34:	e6df      	b.n	8006af6 <_printf_float+0x1da>
 8006d36:	f04f 0800 	mov.w	r8, #0
 8006d3a:	f104 0b1a 	add.w	fp, r4, #26
 8006d3e:	e7f4      	b.n	8006d2a <_printf_float+0x40e>
 8006d40:	2301      	movs	r3, #1
 8006d42:	4642      	mov	r2, r8
 8006d44:	e7e1      	b.n	8006d0a <_printf_float+0x3ee>
 8006d46:	2301      	movs	r3, #1
 8006d48:	464a      	mov	r2, r9
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	f43f ae3e 	beq.w	80069d2 <_printf_float+0xb6>
 8006d56:	f108 0801 	add.w	r8, r8, #1
 8006d5a:	68e3      	ldr	r3, [r4, #12]
 8006d5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d5e:	1a5b      	subs	r3, r3, r1
 8006d60:	4543      	cmp	r3, r8
 8006d62:	dcf0      	bgt.n	8006d46 <_printf_float+0x42a>
 8006d64:	e6fc      	b.n	8006b60 <_printf_float+0x244>
 8006d66:	f04f 0800 	mov.w	r8, #0
 8006d6a:	f104 0919 	add.w	r9, r4, #25
 8006d6e:	e7f4      	b.n	8006d5a <_printf_float+0x43e>

08006d70 <_printf_common>:
 8006d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d74:	4616      	mov	r6, r2
 8006d76:	4698      	mov	r8, r3
 8006d78:	688a      	ldr	r2, [r1, #8]
 8006d7a:	690b      	ldr	r3, [r1, #16]
 8006d7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d80:	4293      	cmp	r3, r2
 8006d82:	bfb8      	it	lt
 8006d84:	4613      	movlt	r3, r2
 8006d86:	6033      	str	r3, [r6, #0]
 8006d88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d8c:	4607      	mov	r7, r0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	b10a      	cbz	r2, 8006d96 <_printf_common+0x26>
 8006d92:	3301      	adds	r3, #1
 8006d94:	6033      	str	r3, [r6, #0]
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	0699      	lsls	r1, r3, #26
 8006d9a:	bf42      	ittt	mi
 8006d9c:	6833      	ldrmi	r3, [r6, #0]
 8006d9e:	3302      	addmi	r3, #2
 8006da0:	6033      	strmi	r3, [r6, #0]
 8006da2:	6825      	ldr	r5, [r4, #0]
 8006da4:	f015 0506 	ands.w	r5, r5, #6
 8006da8:	d106      	bne.n	8006db8 <_printf_common+0x48>
 8006daa:	f104 0a19 	add.w	sl, r4, #25
 8006dae:	68e3      	ldr	r3, [r4, #12]
 8006db0:	6832      	ldr	r2, [r6, #0]
 8006db2:	1a9b      	subs	r3, r3, r2
 8006db4:	42ab      	cmp	r3, r5
 8006db6:	dc26      	bgt.n	8006e06 <_printf_common+0x96>
 8006db8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006dbc:	6822      	ldr	r2, [r4, #0]
 8006dbe:	3b00      	subs	r3, #0
 8006dc0:	bf18      	it	ne
 8006dc2:	2301      	movne	r3, #1
 8006dc4:	0692      	lsls	r2, r2, #26
 8006dc6:	d42b      	bmi.n	8006e20 <_printf_common+0xb0>
 8006dc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006dcc:	4641      	mov	r1, r8
 8006dce:	4638      	mov	r0, r7
 8006dd0:	47c8      	blx	r9
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	d01e      	beq.n	8006e14 <_printf_common+0xa4>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	6922      	ldr	r2, [r4, #16]
 8006dda:	f003 0306 	and.w	r3, r3, #6
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	bf02      	ittt	eq
 8006de2:	68e5      	ldreq	r5, [r4, #12]
 8006de4:	6833      	ldreq	r3, [r6, #0]
 8006de6:	1aed      	subeq	r5, r5, r3
 8006de8:	68a3      	ldr	r3, [r4, #8]
 8006dea:	bf0c      	ite	eq
 8006dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006df0:	2500      	movne	r5, #0
 8006df2:	4293      	cmp	r3, r2
 8006df4:	bfc4      	itt	gt
 8006df6:	1a9b      	subgt	r3, r3, r2
 8006df8:	18ed      	addgt	r5, r5, r3
 8006dfa:	2600      	movs	r6, #0
 8006dfc:	341a      	adds	r4, #26
 8006dfe:	42b5      	cmp	r5, r6
 8006e00:	d11a      	bne.n	8006e38 <_printf_common+0xc8>
 8006e02:	2000      	movs	r0, #0
 8006e04:	e008      	b.n	8006e18 <_printf_common+0xa8>
 8006e06:	2301      	movs	r3, #1
 8006e08:	4652      	mov	r2, sl
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	47c8      	blx	r9
 8006e10:	3001      	adds	r0, #1
 8006e12:	d103      	bne.n	8006e1c <_printf_common+0xac>
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1c:	3501      	adds	r5, #1
 8006e1e:	e7c6      	b.n	8006dae <_printf_common+0x3e>
 8006e20:	18e1      	adds	r1, r4, r3
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	2030      	movs	r0, #48	@ 0x30
 8006e26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e2a:	4422      	add	r2, r4
 8006e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e34:	3302      	adds	r3, #2
 8006e36:	e7c7      	b.n	8006dc8 <_printf_common+0x58>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4622      	mov	r2, r4
 8006e3c:	4641      	mov	r1, r8
 8006e3e:	4638      	mov	r0, r7
 8006e40:	47c8      	blx	r9
 8006e42:	3001      	adds	r0, #1
 8006e44:	d0e6      	beq.n	8006e14 <_printf_common+0xa4>
 8006e46:	3601      	adds	r6, #1
 8006e48:	e7d9      	b.n	8006dfe <_printf_common+0x8e>
	...

08006e4c <_printf_i>:
 8006e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e50:	7e0f      	ldrb	r7, [r1, #24]
 8006e52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e54:	2f78      	cmp	r7, #120	@ 0x78
 8006e56:	4691      	mov	r9, r2
 8006e58:	4680      	mov	r8, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	469a      	mov	sl, r3
 8006e5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e62:	d807      	bhi.n	8006e74 <_printf_i+0x28>
 8006e64:	2f62      	cmp	r7, #98	@ 0x62
 8006e66:	d80a      	bhi.n	8006e7e <_printf_i+0x32>
 8006e68:	2f00      	cmp	r7, #0
 8006e6a:	f000 80d1 	beq.w	8007010 <_printf_i+0x1c4>
 8006e6e:	2f58      	cmp	r7, #88	@ 0x58
 8006e70:	f000 80b8 	beq.w	8006fe4 <_printf_i+0x198>
 8006e74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e7c:	e03a      	b.n	8006ef4 <_printf_i+0xa8>
 8006e7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e82:	2b15      	cmp	r3, #21
 8006e84:	d8f6      	bhi.n	8006e74 <_printf_i+0x28>
 8006e86:	a101      	add	r1, pc, #4	@ (adr r1, 8006e8c <_printf_i+0x40>)
 8006e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e8c:	08006ee5 	.word	0x08006ee5
 8006e90:	08006ef9 	.word	0x08006ef9
 8006e94:	08006e75 	.word	0x08006e75
 8006e98:	08006e75 	.word	0x08006e75
 8006e9c:	08006e75 	.word	0x08006e75
 8006ea0:	08006e75 	.word	0x08006e75
 8006ea4:	08006ef9 	.word	0x08006ef9
 8006ea8:	08006e75 	.word	0x08006e75
 8006eac:	08006e75 	.word	0x08006e75
 8006eb0:	08006e75 	.word	0x08006e75
 8006eb4:	08006e75 	.word	0x08006e75
 8006eb8:	08006ff7 	.word	0x08006ff7
 8006ebc:	08006f23 	.word	0x08006f23
 8006ec0:	08006fb1 	.word	0x08006fb1
 8006ec4:	08006e75 	.word	0x08006e75
 8006ec8:	08006e75 	.word	0x08006e75
 8006ecc:	08007019 	.word	0x08007019
 8006ed0:	08006e75 	.word	0x08006e75
 8006ed4:	08006f23 	.word	0x08006f23
 8006ed8:	08006e75 	.word	0x08006e75
 8006edc:	08006e75 	.word	0x08006e75
 8006ee0:	08006fb9 	.word	0x08006fb9
 8006ee4:	6833      	ldr	r3, [r6, #0]
 8006ee6:	1d1a      	adds	r2, r3, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6032      	str	r2, [r6, #0]
 8006eec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ef0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e09c      	b.n	8007032 <_printf_i+0x1e6>
 8006ef8:	6833      	ldr	r3, [r6, #0]
 8006efa:	6820      	ldr	r0, [r4, #0]
 8006efc:	1d19      	adds	r1, r3, #4
 8006efe:	6031      	str	r1, [r6, #0]
 8006f00:	0606      	lsls	r6, r0, #24
 8006f02:	d501      	bpl.n	8006f08 <_printf_i+0xbc>
 8006f04:	681d      	ldr	r5, [r3, #0]
 8006f06:	e003      	b.n	8006f10 <_printf_i+0xc4>
 8006f08:	0645      	lsls	r5, r0, #25
 8006f0a:	d5fb      	bpl.n	8006f04 <_printf_i+0xb8>
 8006f0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f10:	2d00      	cmp	r5, #0
 8006f12:	da03      	bge.n	8006f1c <_printf_i+0xd0>
 8006f14:	232d      	movs	r3, #45	@ 0x2d
 8006f16:	426d      	negs	r5, r5
 8006f18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f1c:	4858      	ldr	r0, [pc, #352]	@ (8007080 <_printf_i+0x234>)
 8006f1e:	230a      	movs	r3, #10
 8006f20:	e011      	b.n	8006f46 <_printf_i+0xfa>
 8006f22:	6821      	ldr	r1, [r4, #0]
 8006f24:	6833      	ldr	r3, [r6, #0]
 8006f26:	0608      	lsls	r0, r1, #24
 8006f28:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f2c:	d402      	bmi.n	8006f34 <_printf_i+0xe8>
 8006f2e:	0649      	lsls	r1, r1, #25
 8006f30:	bf48      	it	mi
 8006f32:	b2ad      	uxthmi	r5, r5
 8006f34:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f36:	4852      	ldr	r0, [pc, #328]	@ (8007080 <_printf_i+0x234>)
 8006f38:	6033      	str	r3, [r6, #0]
 8006f3a:	bf14      	ite	ne
 8006f3c:	230a      	movne	r3, #10
 8006f3e:	2308      	moveq	r3, #8
 8006f40:	2100      	movs	r1, #0
 8006f42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f46:	6866      	ldr	r6, [r4, #4]
 8006f48:	60a6      	str	r6, [r4, #8]
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	db05      	blt.n	8006f5a <_printf_i+0x10e>
 8006f4e:	6821      	ldr	r1, [r4, #0]
 8006f50:	432e      	orrs	r6, r5
 8006f52:	f021 0104 	bic.w	r1, r1, #4
 8006f56:	6021      	str	r1, [r4, #0]
 8006f58:	d04b      	beq.n	8006ff2 <_printf_i+0x1a6>
 8006f5a:	4616      	mov	r6, r2
 8006f5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f60:	fb03 5711 	mls	r7, r3, r1, r5
 8006f64:	5dc7      	ldrb	r7, [r0, r7]
 8006f66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f6a:	462f      	mov	r7, r5
 8006f6c:	42bb      	cmp	r3, r7
 8006f6e:	460d      	mov	r5, r1
 8006f70:	d9f4      	bls.n	8006f5c <_printf_i+0x110>
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d10b      	bne.n	8006f8e <_printf_i+0x142>
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	07df      	lsls	r7, r3, #31
 8006f7a:	d508      	bpl.n	8006f8e <_printf_i+0x142>
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	6861      	ldr	r1, [r4, #4]
 8006f80:	4299      	cmp	r1, r3
 8006f82:	bfde      	ittt	le
 8006f84:	2330      	movle	r3, #48	@ 0x30
 8006f86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f8e:	1b92      	subs	r2, r2, r6
 8006f90:	6122      	str	r2, [r4, #16]
 8006f92:	f8cd a000 	str.w	sl, [sp]
 8006f96:	464b      	mov	r3, r9
 8006f98:	aa03      	add	r2, sp, #12
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	f7ff fee7 	bl	8006d70 <_printf_common>
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	d14a      	bne.n	800703c <_printf_i+0x1f0>
 8006fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8006faa:	b004      	add	sp, #16
 8006fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	f043 0320 	orr.w	r3, r3, #32
 8006fb6:	6023      	str	r3, [r4, #0]
 8006fb8:	4832      	ldr	r0, [pc, #200]	@ (8007084 <_printf_i+0x238>)
 8006fba:	2778      	movs	r7, #120	@ 0x78
 8006fbc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	6831      	ldr	r1, [r6, #0]
 8006fc4:	061f      	lsls	r7, r3, #24
 8006fc6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fca:	d402      	bmi.n	8006fd2 <_printf_i+0x186>
 8006fcc:	065f      	lsls	r7, r3, #25
 8006fce:	bf48      	it	mi
 8006fd0:	b2ad      	uxthmi	r5, r5
 8006fd2:	6031      	str	r1, [r6, #0]
 8006fd4:	07d9      	lsls	r1, r3, #31
 8006fd6:	bf44      	itt	mi
 8006fd8:	f043 0320 	orrmi.w	r3, r3, #32
 8006fdc:	6023      	strmi	r3, [r4, #0]
 8006fde:	b11d      	cbz	r5, 8006fe8 <_printf_i+0x19c>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	e7ad      	b.n	8006f40 <_printf_i+0xf4>
 8006fe4:	4826      	ldr	r0, [pc, #152]	@ (8007080 <_printf_i+0x234>)
 8006fe6:	e7e9      	b.n	8006fbc <_printf_i+0x170>
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	f023 0320 	bic.w	r3, r3, #32
 8006fee:	6023      	str	r3, [r4, #0]
 8006ff0:	e7f6      	b.n	8006fe0 <_printf_i+0x194>
 8006ff2:	4616      	mov	r6, r2
 8006ff4:	e7bd      	b.n	8006f72 <_printf_i+0x126>
 8006ff6:	6833      	ldr	r3, [r6, #0]
 8006ff8:	6825      	ldr	r5, [r4, #0]
 8006ffa:	6961      	ldr	r1, [r4, #20]
 8006ffc:	1d18      	adds	r0, r3, #4
 8006ffe:	6030      	str	r0, [r6, #0]
 8007000:	062e      	lsls	r6, r5, #24
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	d501      	bpl.n	800700a <_printf_i+0x1be>
 8007006:	6019      	str	r1, [r3, #0]
 8007008:	e002      	b.n	8007010 <_printf_i+0x1c4>
 800700a:	0668      	lsls	r0, r5, #25
 800700c:	d5fb      	bpl.n	8007006 <_printf_i+0x1ba>
 800700e:	8019      	strh	r1, [r3, #0]
 8007010:	2300      	movs	r3, #0
 8007012:	6123      	str	r3, [r4, #16]
 8007014:	4616      	mov	r6, r2
 8007016:	e7bc      	b.n	8006f92 <_printf_i+0x146>
 8007018:	6833      	ldr	r3, [r6, #0]
 800701a:	1d1a      	adds	r2, r3, #4
 800701c:	6032      	str	r2, [r6, #0]
 800701e:	681e      	ldr	r6, [r3, #0]
 8007020:	6862      	ldr	r2, [r4, #4]
 8007022:	2100      	movs	r1, #0
 8007024:	4630      	mov	r0, r6
 8007026:	f7f9 f8d3 	bl	80001d0 <memchr>
 800702a:	b108      	cbz	r0, 8007030 <_printf_i+0x1e4>
 800702c:	1b80      	subs	r0, r0, r6
 800702e:	6060      	str	r0, [r4, #4]
 8007030:	6863      	ldr	r3, [r4, #4]
 8007032:	6123      	str	r3, [r4, #16]
 8007034:	2300      	movs	r3, #0
 8007036:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800703a:	e7aa      	b.n	8006f92 <_printf_i+0x146>
 800703c:	6923      	ldr	r3, [r4, #16]
 800703e:	4632      	mov	r2, r6
 8007040:	4649      	mov	r1, r9
 8007042:	4640      	mov	r0, r8
 8007044:	47d0      	blx	sl
 8007046:	3001      	adds	r0, #1
 8007048:	d0ad      	beq.n	8006fa6 <_printf_i+0x15a>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	079b      	lsls	r3, r3, #30
 800704e:	d413      	bmi.n	8007078 <_printf_i+0x22c>
 8007050:	68e0      	ldr	r0, [r4, #12]
 8007052:	9b03      	ldr	r3, [sp, #12]
 8007054:	4298      	cmp	r0, r3
 8007056:	bfb8      	it	lt
 8007058:	4618      	movlt	r0, r3
 800705a:	e7a6      	b.n	8006faa <_printf_i+0x15e>
 800705c:	2301      	movs	r3, #1
 800705e:	4632      	mov	r2, r6
 8007060:	4649      	mov	r1, r9
 8007062:	4640      	mov	r0, r8
 8007064:	47d0      	blx	sl
 8007066:	3001      	adds	r0, #1
 8007068:	d09d      	beq.n	8006fa6 <_printf_i+0x15a>
 800706a:	3501      	adds	r5, #1
 800706c:	68e3      	ldr	r3, [r4, #12]
 800706e:	9903      	ldr	r1, [sp, #12]
 8007070:	1a5b      	subs	r3, r3, r1
 8007072:	42ab      	cmp	r3, r5
 8007074:	dcf2      	bgt.n	800705c <_printf_i+0x210>
 8007076:	e7eb      	b.n	8007050 <_printf_i+0x204>
 8007078:	2500      	movs	r5, #0
 800707a:	f104 0619 	add.w	r6, r4, #25
 800707e:	e7f5      	b.n	800706c <_printf_i+0x220>
 8007080:	0800a37c 	.word	0x0800a37c
 8007084:	0800a38d 	.word	0x0800a38d

08007088 <_scanf_float>:
 8007088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	b087      	sub	sp, #28
 800708e:	4691      	mov	r9, r2
 8007090:	9303      	str	r3, [sp, #12]
 8007092:	688b      	ldr	r3, [r1, #8]
 8007094:	1e5a      	subs	r2, r3, #1
 8007096:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800709a:	bf81      	itttt	hi
 800709c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80070a0:	eb03 0b05 	addhi.w	fp, r3, r5
 80070a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80070a8:	608b      	strhi	r3, [r1, #8]
 80070aa:	680b      	ldr	r3, [r1, #0]
 80070ac:	460a      	mov	r2, r1
 80070ae:	f04f 0500 	mov.w	r5, #0
 80070b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80070b6:	f842 3b1c 	str.w	r3, [r2], #28
 80070ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80070be:	4680      	mov	r8, r0
 80070c0:	460c      	mov	r4, r1
 80070c2:	bf98      	it	ls
 80070c4:	f04f 0b00 	movls.w	fp, #0
 80070c8:	9201      	str	r2, [sp, #4]
 80070ca:	4616      	mov	r6, r2
 80070cc:	46aa      	mov	sl, r5
 80070ce:	462f      	mov	r7, r5
 80070d0:	9502      	str	r5, [sp, #8]
 80070d2:	68a2      	ldr	r2, [r4, #8]
 80070d4:	b15a      	cbz	r2, 80070ee <_scanf_float+0x66>
 80070d6:	f8d9 3000 	ldr.w	r3, [r9]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b4e      	cmp	r3, #78	@ 0x4e
 80070de:	d863      	bhi.n	80071a8 <_scanf_float+0x120>
 80070e0:	2b40      	cmp	r3, #64	@ 0x40
 80070e2:	d83b      	bhi.n	800715c <_scanf_float+0xd4>
 80070e4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80070e8:	b2c8      	uxtb	r0, r1
 80070ea:	280e      	cmp	r0, #14
 80070ec:	d939      	bls.n	8007162 <_scanf_float+0xda>
 80070ee:	b11f      	cbz	r7, 80070f8 <_scanf_float+0x70>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070fc:	f1ba 0f01 	cmp.w	sl, #1
 8007100:	f200 8114 	bhi.w	800732c <_scanf_float+0x2a4>
 8007104:	9b01      	ldr	r3, [sp, #4]
 8007106:	429e      	cmp	r6, r3
 8007108:	f200 8105 	bhi.w	8007316 <_scanf_float+0x28e>
 800710c:	2001      	movs	r0, #1
 800710e:	b007      	add	sp, #28
 8007110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007114:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007118:	2a0d      	cmp	r2, #13
 800711a:	d8e8      	bhi.n	80070ee <_scanf_float+0x66>
 800711c:	a101      	add	r1, pc, #4	@ (adr r1, 8007124 <_scanf_float+0x9c>)
 800711e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007122:	bf00      	nop
 8007124:	0800726d 	.word	0x0800726d
 8007128:	080070ef 	.word	0x080070ef
 800712c:	080070ef 	.word	0x080070ef
 8007130:	080070ef 	.word	0x080070ef
 8007134:	080072c9 	.word	0x080072c9
 8007138:	080072a3 	.word	0x080072a3
 800713c:	080070ef 	.word	0x080070ef
 8007140:	080070ef 	.word	0x080070ef
 8007144:	0800727b 	.word	0x0800727b
 8007148:	080070ef 	.word	0x080070ef
 800714c:	080070ef 	.word	0x080070ef
 8007150:	080070ef 	.word	0x080070ef
 8007154:	080070ef 	.word	0x080070ef
 8007158:	08007237 	.word	0x08007237
 800715c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007160:	e7da      	b.n	8007118 <_scanf_float+0x90>
 8007162:	290e      	cmp	r1, #14
 8007164:	d8c3      	bhi.n	80070ee <_scanf_float+0x66>
 8007166:	a001      	add	r0, pc, #4	@ (adr r0, 800716c <_scanf_float+0xe4>)
 8007168:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800716c:	08007227 	.word	0x08007227
 8007170:	080070ef 	.word	0x080070ef
 8007174:	08007227 	.word	0x08007227
 8007178:	080072b7 	.word	0x080072b7
 800717c:	080070ef 	.word	0x080070ef
 8007180:	080071c9 	.word	0x080071c9
 8007184:	0800720d 	.word	0x0800720d
 8007188:	0800720d 	.word	0x0800720d
 800718c:	0800720d 	.word	0x0800720d
 8007190:	0800720d 	.word	0x0800720d
 8007194:	0800720d 	.word	0x0800720d
 8007198:	0800720d 	.word	0x0800720d
 800719c:	0800720d 	.word	0x0800720d
 80071a0:	0800720d 	.word	0x0800720d
 80071a4:	0800720d 	.word	0x0800720d
 80071a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80071aa:	d809      	bhi.n	80071c0 <_scanf_float+0x138>
 80071ac:	2b60      	cmp	r3, #96	@ 0x60
 80071ae:	d8b1      	bhi.n	8007114 <_scanf_float+0x8c>
 80071b0:	2b54      	cmp	r3, #84	@ 0x54
 80071b2:	d07b      	beq.n	80072ac <_scanf_float+0x224>
 80071b4:	2b59      	cmp	r3, #89	@ 0x59
 80071b6:	d19a      	bne.n	80070ee <_scanf_float+0x66>
 80071b8:	2d07      	cmp	r5, #7
 80071ba:	d198      	bne.n	80070ee <_scanf_float+0x66>
 80071bc:	2508      	movs	r5, #8
 80071be:	e02f      	b.n	8007220 <_scanf_float+0x198>
 80071c0:	2b74      	cmp	r3, #116	@ 0x74
 80071c2:	d073      	beq.n	80072ac <_scanf_float+0x224>
 80071c4:	2b79      	cmp	r3, #121	@ 0x79
 80071c6:	e7f6      	b.n	80071b6 <_scanf_float+0x12e>
 80071c8:	6821      	ldr	r1, [r4, #0]
 80071ca:	05c8      	lsls	r0, r1, #23
 80071cc:	d51e      	bpl.n	800720c <_scanf_float+0x184>
 80071ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80071d2:	6021      	str	r1, [r4, #0]
 80071d4:	3701      	adds	r7, #1
 80071d6:	f1bb 0f00 	cmp.w	fp, #0
 80071da:	d003      	beq.n	80071e4 <_scanf_float+0x15c>
 80071dc:	3201      	adds	r2, #1
 80071de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071e2:	60a2      	str	r2, [r4, #8]
 80071e4:	68a3      	ldr	r3, [r4, #8]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	60a3      	str	r3, [r4, #8]
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	3301      	adds	r3, #1
 80071ee:	6123      	str	r3, [r4, #16]
 80071f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f8c9 3004 	str.w	r3, [r9, #4]
 80071fc:	f340 8082 	ble.w	8007304 <_scanf_float+0x27c>
 8007200:	f8d9 3000 	ldr.w	r3, [r9]
 8007204:	3301      	adds	r3, #1
 8007206:	f8c9 3000 	str.w	r3, [r9]
 800720a:	e762      	b.n	80070d2 <_scanf_float+0x4a>
 800720c:	eb1a 0105 	adds.w	r1, sl, r5
 8007210:	f47f af6d 	bne.w	80070ee <_scanf_float+0x66>
 8007214:	6822      	ldr	r2, [r4, #0]
 8007216:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800721a:	6022      	str	r2, [r4, #0]
 800721c:	460d      	mov	r5, r1
 800721e:	468a      	mov	sl, r1
 8007220:	f806 3b01 	strb.w	r3, [r6], #1
 8007224:	e7de      	b.n	80071e4 <_scanf_float+0x15c>
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	0610      	lsls	r0, r2, #24
 800722a:	f57f af60 	bpl.w	80070ee <_scanf_float+0x66>
 800722e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007232:	6022      	str	r2, [r4, #0]
 8007234:	e7f4      	b.n	8007220 <_scanf_float+0x198>
 8007236:	f1ba 0f00 	cmp.w	sl, #0
 800723a:	d10c      	bne.n	8007256 <_scanf_float+0x1ce>
 800723c:	b977      	cbnz	r7, 800725c <_scanf_float+0x1d4>
 800723e:	6822      	ldr	r2, [r4, #0]
 8007240:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007244:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007248:	d108      	bne.n	800725c <_scanf_float+0x1d4>
 800724a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800724e:	6022      	str	r2, [r4, #0]
 8007250:	f04f 0a01 	mov.w	sl, #1
 8007254:	e7e4      	b.n	8007220 <_scanf_float+0x198>
 8007256:	f1ba 0f02 	cmp.w	sl, #2
 800725a:	d050      	beq.n	80072fe <_scanf_float+0x276>
 800725c:	2d01      	cmp	r5, #1
 800725e:	d002      	beq.n	8007266 <_scanf_float+0x1de>
 8007260:	2d04      	cmp	r5, #4
 8007262:	f47f af44 	bne.w	80070ee <_scanf_float+0x66>
 8007266:	3501      	adds	r5, #1
 8007268:	b2ed      	uxtb	r5, r5
 800726a:	e7d9      	b.n	8007220 <_scanf_float+0x198>
 800726c:	f1ba 0f01 	cmp.w	sl, #1
 8007270:	f47f af3d 	bne.w	80070ee <_scanf_float+0x66>
 8007274:	f04f 0a02 	mov.w	sl, #2
 8007278:	e7d2      	b.n	8007220 <_scanf_float+0x198>
 800727a:	b975      	cbnz	r5, 800729a <_scanf_float+0x212>
 800727c:	2f00      	cmp	r7, #0
 800727e:	f47f af37 	bne.w	80070f0 <_scanf_float+0x68>
 8007282:	6822      	ldr	r2, [r4, #0]
 8007284:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007288:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800728c:	f040 8103 	bne.w	8007496 <_scanf_float+0x40e>
 8007290:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007294:	6022      	str	r2, [r4, #0]
 8007296:	2501      	movs	r5, #1
 8007298:	e7c2      	b.n	8007220 <_scanf_float+0x198>
 800729a:	2d03      	cmp	r5, #3
 800729c:	d0e3      	beq.n	8007266 <_scanf_float+0x1de>
 800729e:	2d05      	cmp	r5, #5
 80072a0:	e7df      	b.n	8007262 <_scanf_float+0x1da>
 80072a2:	2d02      	cmp	r5, #2
 80072a4:	f47f af23 	bne.w	80070ee <_scanf_float+0x66>
 80072a8:	2503      	movs	r5, #3
 80072aa:	e7b9      	b.n	8007220 <_scanf_float+0x198>
 80072ac:	2d06      	cmp	r5, #6
 80072ae:	f47f af1e 	bne.w	80070ee <_scanf_float+0x66>
 80072b2:	2507      	movs	r5, #7
 80072b4:	e7b4      	b.n	8007220 <_scanf_float+0x198>
 80072b6:	6822      	ldr	r2, [r4, #0]
 80072b8:	0591      	lsls	r1, r2, #22
 80072ba:	f57f af18 	bpl.w	80070ee <_scanf_float+0x66>
 80072be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80072c2:	6022      	str	r2, [r4, #0]
 80072c4:	9702      	str	r7, [sp, #8]
 80072c6:	e7ab      	b.n	8007220 <_scanf_float+0x198>
 80072c8:	6822      	ldr	r2, [r4, #0]
 80072ca:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80072ce:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80072d2:	d005      	beq.n	80072e0 <_scanf_float+0x258>
 80072d4:	0550      	lsls	r0, r2, #21
 80072d6:	f57f af0a 	bpl.w	80070ee <_scanf_float+0x66>
 80072da:	2f00      	cmp	r7, #0
 80072dc:	f000 80db 	beq.w	8007496 <_scanf_float+0x40e>
 80072e0:	0591      	lsls	r1, r2, #22
 80072e2:	bf58      	it	pl
 80072e4:	9902      	ldrpl	r1, [sp, #8]
 80072e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072ea:	bf58      	it	pl
 80072ec:	1a79      	subpl	r1, r7, r1
 80072ee:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80072f2:	bf58      	it	pl
 80072f4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80072f8:	6022      	str	r2, [r4, #0]
 80072fa:	2700      	movs	r7, #0
 80072fc:	e790      	b.n	8007220 <_scanf_float+0x198>
 80072fe:	f04f 0a03 	mov.w	sl, #3
 8007302:	e78d      	b.n	8007220 <_scanf_float+0x198>
 8007304:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007308:	4649      	mov	r1, r9
 800730a:	4640      	mov	r0, r8
 800730c:	4798      	blx	r3
 800730e:	2800      	cmp	r0, #0
 8007310:	f43f aedf 	beq.w	80070d2 <_scanf_float+0x4a>
 8007314:	e6eb      	b.n	80070ee <_scanf_float+0x66>
 8007316:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800731a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800731e:	464a      	mov	r2, r9
 8007320:	4640      	mov	r0, r8
 8007322:	4798      	blx	r3
 8007324:	6923      	ldr	r3, [r4, #16]
 8007326:	3b01      	subs	r3, #1
 8007328:	6123      	str	r3, [r4, #16]
 800732a:	e6eb      	b.n	8007104 <_scanf_float+0x7c>
 800732c:	1e6b      	subs	r3, r5, #1
 800732e:	2b06      	cmp	r3, #6
 8007330:	d824      	bhi.n	800737c <_scanf_float+0x2f4>
 8007332:	2d02      	cmp	r5, #2
 8007334:	d836      	bhi.n	80073a4 <_scanf_float+0x31c>
 8007336:	9b01      	ldr	r3, [sp, #4]
 8007338:	429e      	cmp	r6, r3
 800733a:	f67f aee7 	bls.w	800710c <_scanf_float+0x84>
 800733e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007342:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007346:	464a      	mov	r2, r9
 8007348:	4640      	mov	r0, r8
 800734a:	4798      	blx	r3
 800734c:	6923      	ldr	r3, [r4, #16]
 800734e:	3b01      	subs	r3, #1
 8007350:	6123      	str	r3, [r4, #16]
 8007352:	e7f0      	b.n	8007336 <_scanf_float+0x2ae>
 8007354:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007358:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800735c:	464a      	mov	r2, r9
 800735e:	4640      	mov	r0, r8
 8007360:	4798      	blx	r3
 8007362:	6923      	ldr	r3, [r4, #16]
 8007364:	3b01      	subs	r3, #1
 8007366:	6123      	str	r3, [r4, #16]
 8007368:	f10a 3aff 	add.w	sl, sl, #4294967295
 800736c:	fa5f fa8a 	uxtb.w	sl, sl
 8007370:	f1ba 0f02 	cmp.w	sl, #2
 8007374:	d1ee      	bne.n	8007354 <_scanf_float+0x2cc>
 8007376:	3d03      	subs	r5, #3
 8007378:	b2ed      	uxtb	r5, r5
 800737a:	1b76      	subs	r6, r6, r5
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	05da      	lsls	r2, r3, #23
 8007380:	d530      	bpl.n	80073e4 <_scanf_float+0x35c>
 8007382:	055b      	lsls	r3, r3, #21
 8007384:	d511      	bpl.n	80073aa <_scanf_float+0x322>
 8007386:	9b01      	ldr	r3, [sp, #4]
 8007388:	429e      	cmp	r6, r3
 800738a:	f67f aebf 	bls.w	800710c <_scanf_float+0x84>
 800738e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007392:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007396:	464a      	mov	r2, r9
 8007398:	4640      	mov	r0, r8
 800739a:	4798      	blx	r3
 800739c:	6923      	ldr	r3, [r4, #16]
 800739e:	3b01      	subs	r3, #1
 80073a0:	6123      	str	r3, [r4, #16]
 80073a2:	e7f0      	b.n	8007386 <_scanf_float+0x2fe>
 80073a4:	46aa      	mov	sl, r5
 80073a6:	46b3      	mov	fp, r6
 80073a8:	e7de      	b.n	8007368 <_scanf_float+0x2e0>
 80073aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80073ae:	6923      	ldr	r3, [r4, #16]
 80073b0:	2965      	cmp	r1, #101	@ 0x65
 80073b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80073b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80073ba:	6123      	str	r3, [r4, #16]
 80073bc:	d00c      	beq.n	80073d8 <_scanf_float+0x350>
 80073be:	2945      	cmp	r1, #69	@ 0x45
 80073c0:	d00a      	beq.n	80073d8 <_scanf_float+0x350>
 80073c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073c6:	464a      	mov	r2, r9
 80073c8:	4640      	mov	r0, r8
 80073ca:	4798      	blx	r3
 80073cc:	6923      	ldr	r3, [r4, #16]
 80073ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	1eb5      	subs	r5, r6, #2
 80073d6:	6123      	str	r3, [r4, #16]
 80073d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073dc:	464a      	mov	r2, r9
 80073de:	4640      	mov	r0, r8
 80073e0:	4798      	blx	r3
 80073e2:	462e      	mov	r6, r5
 80073e4:	6822      	ldr	r2, [r4, #0]
 80073e6:	f012 0210 	ands.w	r2, r2, #16
 80073ea:	d001      	beq.n	80073f0 <_scanf_float+0x368>
 80073ec:	2000      	movs	r0, #0
 80073ee:	e68e      	b.n	800710e <_scanf_float+0x86>
 80073f0:	7032      	strb	r2, [r6, #0]
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80073f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073fc:	d125      	bne.n	800744a <_scanf_float+0x3c2>
 80073fe:	9b02      	ldr	r3, [sp, #8]
 8007400:	429f      	cmp	r7, r3
 8007402:	d00a      	beq.n	800741a <_scanf_float+0x392>
 8007404:	1bda      	subs	r2, r3, r7
 8007406:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800740a:	429e      	cmp	r6, r3
 800740c:	bf28      	it	cs
 800740e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007412:	4922      	ldr	r1, [pc, #136]	@ (800749c <_scanf_float+0x414>)
 8007414:	4630      	mov	r0, r6
 8007416:	f000 f93d 	bl	8007694 <siprintf>
 800741a:	9901      	ldr	r1, [sp, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	4640      	mov	r0, r8
 8007420:	f7ff f9ca 	bl	80067b8 <_strtod_r>
 8007424:	9b03      	ldr	r3, [sp, #12]
 8007426:	6821      	ldr	r1, [r4, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f011 0f02 	tst.w	r1, #2
 800742e:	ec57 6b10 	vmov	r6, r7, d0
 8007432:	f103 0204 	add.w	r2, r3, #4
 8007436:	d015      	beq.n	8007464 <_scanf_float+0x3dc>
 8007438:	9903      	ldr	r1, [sp, #12]
 800743a:	600a      	str	r2, [r1, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	e9c3 6700 	strd	r6, r7, [r3]
 8007442:	68e3      	ldr	r3, [r4, #12]
 8007444:	3301      	adds	r3, #1
 8007446:	60e3      	str	r3, [r4, #12]
 8007448:	e7d0      	b.n	80073ec <_scanf_float+0x364>
 800744a:	9b04      	ldr	r3, [sp, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0e4      	beq.n	800741a <_scanf_float+0x392>
 8007450:	9905      	ldr	r1, [sp, #20]
 8007452:	230a      	movs	r3, #10
 8007454:	3101      	adds	r1, #1
 8007456:	4640      	mov	r0, r8
 8007458:	f002 f9fa 	bl	8009850 <_strtol_r>
 800745c:	9b04      	ldr	r3, [sp, #16]
 800745e:	9e05      	ldr	r6, [sp, #20]
 8007460:	1ac2      	subs	r2, r0, r3
 8007462:	e7d0      	b.n	8007406 <_scanf_float+0x37e>
 8007464:	f011 0f04 	tst.w	r1, #4
 8007468:	9903      	ldr	r1, [sp, #12]
 800746a:	600a      	str	r2, [r1, #0]
 800746c:	d1e6      	bne.n	800743c <_scanf_float+0x3b4>
 800746e:	681d      	ldr	r5, [r3, #0]
 8007470:	4632      	mov	r2, r6
 8007472:	463b      	mov	r3, r7
 8007474:	4630      	mov	r0, r6
 8007476:	4639      	mov	r1, r7
 8007478:	f7f9 fb58 	bl	8000b2c <__aeabi_dcmpun>
 800747c:	b128      	cbz	r0, 800748a <_scanf_float+0x402>
 800747e:	4808      	ldr	r0, [pc, #32]	@ (80074a0 <_scanf_float+0x418>)
 8007480:	f000 fa16 	bl	80078b0 <nanf>
 8007484:	ed85 0a00 	vstr	s0, [r5]
 8007488:	e7db      	b.n	8007442 <_scanf_float+0x3ba>
 800748a:	4630      	mov	r0, r6
 800748c:	4639      	mov	r1, r7
 800748e:	f7f9 fbab 	bl	8000be8 <__aeabi_d2f>
 8007492:	6028      	str	r0, [r5, #0]
 8007494:	e7d5      	b.n	8007442 <_scanf_float+0x3ba>
 8007496:	2700      	movs	r7, #0
 8007498:	e62e      	b.n	80070f8 <_scanf_float+0x70>
 800749a:	bf00      	nop
 800749c:	0800a39e 	.word	0x0800a39e
 80074a0:	0800a53d 	.word	0x0800a53d

080074a4 <std>:
 80074a4:	2300      	movs	r3, #0
 80074a6:	b510      	push	{r4, lr}
 80074a8:	4604      	mov	r4, r0
 80074aa:	e9c0 3300 	strd	r3, r3, [r0]
 80074ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074b2:	6083      	str	r3, [r0, #8]
 80074b4:	8181      	strh	r1, [r0, #12]
 80074b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80074b8:	81c2      	strh	r2, [r0, #14]
 80074ba:	6183      	str	r3, [r0, #24]
 80074bc:	4619      	mov	r1, r3
 80074be:	2208      	movs	r2, #8
 80074c0:	305c      	adds	r0, #92	@ 0x5c
 80074c2:	f000 f94c 	bl	800775e <memset>
 80074c6:	4b0d      	ldr	r3, [pc, #52]	@ (80074fc <std+0x58>)
 80074c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80074ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007500 <std+0x5c>)
 80074cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007504 <std+0x60>)
 80074d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007508 <std+0x64>)
 80074d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80074d6:	4b0d      	ldr	r3, [pc, #52]	@ (800750c <std+0x68>)
 80074d8:	6224      	str	r4, [r4, #32]
 80074da:	429c      	cmp	r4, r3
 80074dc:	d006      	beq.n	80074ec <std+0x48>
 80074de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074e2:	4294      	cmp	r4, r2
 80074e4:	d002      	beq.n	80074ec <std+0x48>
 80074e6:	33d0      	adds	r3, #208	@ 0xd0
 80074e8:	429c      	cmp	r4, r3
 80074ea:	d105      	bne.n	80074f8 <std+0x54>
 80074ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f4:	f000 b9c2 	b.w	800787c <__retarget_lock_init_recursive>
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	bf00      	nop
 80074fc:	080076d9 	.word	0x080076d9
 8007500:	080076fb 	.word	0x080076fb
 8007504:	08007733 	.word	0x08007733
 8007508:	08007757 	.word	0x08007757
 800750c:	20000538 	.word	0x20000538

08007510 <stdio_exit_handler>:
 8007510:	4a02      	ldr	r2, [pc, #8]	@ (800751c <stdio_exit_handler+0xc>)
 8007512:	4903      	ldr	r1, [pc, #12]	@ (8007520 <stdio_exit_handler+0x10>)
 8007514:	4803      	ldr	r0, [pc, #12]	@ (8007524 <stdio_exit_handler+0x14>)
 8007516:	f000 b869 	b.w	80075ec <_fwalk_sglue>
 800751a:	bf00      	nop
 800751c:	200000a0 	.word	0x200000a0
 8007520:	08009c25 	.word	0x08009c25
 8007524:	2000021c 	.word	0x2000021c

08007528 <cleanup_stdio>:
 8007528:	6841      	ldr	r1, [r0, #4]
 800752a:	4b0c      	ldr	r3, [pc, #48]	@ (800755c <cleanup_stdio+0x34>)
 800752c:	4299      	cmp	r1, r3
 800752e:	b510      	push	{r4, lr}
 8007530:	4604      	mov	r4, r0
 8007532:	d001      	beq.n	8007538 <cleanup_stdio+0x10>
 8007534:	f002 fb76 	bl	8009c24 <_fflush_r>
 8007538:	68a1      	ldr	r1, [r4, #8]
 800753a:	4b09      	ldr	r3, [pc, #36]	@ (8007560 <cleanup_stdio+0x38>)
 800753c:	4299      	cmp	r1, r3
 800753e:	d002      	beq.n	8007546 <cleanup_stdio+0x1e>
 8007540:	4620      	mov	r0, r4
 8007542:	f002 fb6f 	bl	8009c24 <_fflush_r>
 8007546:	68e1      	ldr	r1, [r4, #12]
 8007548:	4b06      	ldr	r3, [pc, #24]	@ (8007564 <cleanup_stdio+0x3c>)
 800754a:	4299      	cmp	r1, r3
 800754c:	d004      	beq.n	8007558 <cleanup_stdio+0x30>
 800754e:	4620      	mov	r0, r4
 8007550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007554:	f002 bb66 	b.w	8009c24 <_fflush_r>
 8007558:	bd10      	pop	{r4, pc}
 800755a:	bf00      	nop
 800755c:	20000538 	.word	0x20000538
 8007560:	200005a0 	.word	0x200005a0
 8007564:	20000608 	.word	0x20000608

08007568 <global_stdio_init.part.0>:
 8007568:	b510      	push	{r4, lr}
 800756a:	4b0b      	ldr	r3, [pc, #44]	@ (8007598 <global_stdio_init.part.0+0x30>)
 800756c:	4c0b      	ldr	r4, [pc, #44]	@ (800759c <global_stdio_init.part.0+0x34>)
 800756e:	4a0c      	ldr	r2, [pc, #48]	@ (80075a0 <global_stdio_init.part.0+0x38>)
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	4620      	mov	r0, r4
 8007574:	2200      	movs	r2, #0
 8007576:	2104      	movs	r1, #4
 8007578:	f7ff ff94 	bl	80074a4 <std>
 800757c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007580:	2201      	movs	r2, #1
 8007582:	2109      	movs	r1, #9
 8007584:	f7ff ff8e 	bl	80074a4 <std>
 8007588:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800758c:	2202      	movs	r2, #2
 800758e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007592:	2112      	movs	r1, #18
 8007594:	f7ff bf86 	b.w	80074a4 <std>
 8007598:	20000670 	.word	0x20000670
 800759c:	20000538 	.word	0x20000538
 80075a0:	08007511 	.word	0x08007511

080075a4 <__sfp_lock_acquire>:
 80075a4:	4801      	ldr	r0, [pc, #4]	@ (80075ac <__sfp_lock_acquire+0x8>)
 80075a6:	f000 b96a 	b.w	800787e <__retarget_lock_acquire_recursive>
 80075aa:	bf00      	nop
 80075ac:	20000679 	.word	0x20000679

080075b0 <__sfp_lock_release>:
 80075b0:	4801      	ldr	r0, [pc, #4]	@ (80075b8 <__sfp_lock_release+0x8>)
 80075b2:	f000 b965 	b.w	8007880 <__retarget_lock_release_recursive>
 80075b6:	bf00      	nop
 80075b8:	20000679 	.word	0x20000679

080075bc <__sinit>:
 80075bc:	b510      	push	{r4, lr}
 80075be:	4604      	mov	r4, r0
 80075c0:	f7ff fff0 	bl	80075a4 <__sfp_lock_acquire>
 80075c4:	6a23      	ldr	r3, [r4, #32]
 80075c6:	b11b      	cbz	r3, 80075d0 <__sinit+0x14>
 80075c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075cc:	f7ff bff0 	b.w	80075b0 <__sfp_lock_release>
 80075d0:	4b04      	ldr	r3, [pc, #16]	@ (80075e4 <__sinit+0x28>)
 80075d2:	6223      	str	r3, [r4, #32]
 80075d4:	4b04      	ldr	r3, [pc, #16]	@ (80075e8 <__sinit+0x2c>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1f5      	bne.n	80075c8 <__sinit+0xc>
 80075dc:	f7ff ffc4 	bl	8007568 <global_stdio_init.part.0>
 80075e0:	e7f2      	b.n	80075c8 <__sinit+0xc>
 80075e2:	bf00      	nop
 80075e4:	08007529 	.word	0x08007529
 80075e8:	20000670 	.word	0x20000670

080075ec <_fwalk_sglue>:
 80075ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f0:	4607      	mov	r7, r0
 80075f2:	4688      	mov	r8, r1
 80075f4:	4614      	mov	r4, r2
 80075f6:	2600      	movs	r6, #0
 80075f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075fc:	f1b9 0901 	subs.w	r9, r9, #1
 8007600:	d505      	bpl.n	800760e <_fwalk_sglue+0x22>
 8007602:	6824      	ldr	r4, [r4, #0]
 8007604:	2c00      	cmp	r4, #0
 8007606:	d1f7      	bne.n	80075f8 <_fwalk_sglue+0xc>
 8007608:	4630      	mov	r0, r6
 800760a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800760e:	89ab      	ldrh	r3, [r5, #12]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d907      	bls.n	8007624 <_fwalk_sglue+0x38>
 8007614:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007618:	3301      	adds	r3, #1
 800761a:	d003      	beq.n	8007624 <_fwalk_sglue+0x38>
 800761c:	4629      	mov	r1, r5
 800761e:	4638      	mov	r0, r7
 8007620:	47c0      	blx	r8
 8007622:	4306      	orrs	r6, r0
 8007624:	3568      	adds	r5, #104	@ 0x68
 8007626:	e7e9      	b.n	80075fc <_fwalk_sglue+0x10>

08007628 <sniprintf>:
 8007628:	b40c      	push	{r2, r3}
 800762a:	b530      	push	{r4, r5, lr}
 800762c:	4b18      	ldr	r3, [pc, #96]	@ (8007690 <sniprintf+0x68>)
 800762e:	1e0c      	subs	r4, r1, #0
 8007630:	681d      	ldr	r5, [r3, #0]
 8007632:	b09d      	sub	sp, #116	@ 0x74
 8007634:	da08      	bge.n	8007648 <sniprintf+0x20>
 8007636:	238b      	movs	r3, #139	@ 0x8b
 8007638:	602b      	str	r3, [r5, #0]
 800763a:	f04f 30ff 	mov.w	r0, #4294967295
 800763e:	b01d      	add	sp, #116	@ 0x74
 8007640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007644:	b002      	add	sp, #8
 8007646:	4770      	bx	lr
 8007648:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800764c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007656:	bf14      	ite	ne
 8007658:	f104 33ff 	addne.w	r3, r4, #4294967295
 800765c:	4623      	moveq	r3, r4
 800765e:	9304      	str	r3, [sp, #16]
 8007660:	9307      	str	r3, [sp, #28]
 8007662:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007666:	9002      	str	r0, [sp, #8]
 8007668:	9006      	str	r0, [sp, #24]
 800766a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800766e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007670:	ab21      	add	r3, sp, #132	@ 0x84
 8007672:	a902      	add	r1, sp, #8
 8007674:	4628      	mov	r0, r5
 8007676:	9301      	str	r3, [sp, #4]
 8007678:	f002 f954 	bl	8009924 <_svfiprintf_r>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	bfbc      	itt	lt
 8007680:	238b      	movlt	r3, #139	@ 0x8b
 8007682:	602b      	strlt	r3, [r5, #0]
 8007684:	2c00      	cmp	r4, #0
 8007686:	d0da      	beq.n	800763e <sniprintf+0x16>
 8007688:	9b02      	ldr	r3, [sp, #8]
 800768a:	2200      	movs	r2, #0
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	e7d6      	b.n	800763e <sniprintf+0x16>
 8007690:	20000218 	.word	0x20000218

08007694 <siprintf>:
 8007694:	b40e      	push	{r1, r2, r3}
 8007696:	b510      	push	{r4, lr}
 8007698:	b09d      	sub	sp, #116	@ 0x74
 800769a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800769c:	9002      	str	r0, [sp, #8]
 800769e:	9006      	str	r0, [sp, #24]
 80076a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80076a4:	480a      	ldr	r0, [pc, #40]	@ (80076d0 <siprintf+0x3c>)
 80076a6:	9107      	str	r1, [sp, #28]
 80076a8:	9104      	str	r1, [sp, #16]
 80076aa:	490a      	ldr	r1, [pc, #40]	@ (80076d4 <siprintf+0x40>)
 80076ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b0:	9105      	str	r1, [sp, #20]
 80076b2:	2400      	movs	r4, #0
 80076b4:	a902      	add	r1, sp, #8
 80076b6:	6800      	ldr	r0, [r0, #0]
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80076bc:	f002 f932 	bl	8009924 <_svfiprintf_r>
 80076c0:	9b02      	ldr	r3, [sp, #8]
 80076c2:	701c      	strb	r4, [r3, #0]
 80076c4:	b01d      	add	sp, #116	@ 0x74
 80076c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ca:	b003      	add	sp, #12
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	20000218 	.word	0x20000218
 80076d4:	ffff0208 	.word	0xffff0208

080076d8 <__sread>:
 80076d8:	b510      	push	{r4, lr}
 80076da:	460c      	mov	r4, r1
 80076dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e0:	f000 f87e 	bl	80077e0 <_read_r>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	bfab      	itete	ge
 80076e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076ea:	89a3      	ldrhlt	r3, [r4, #12]
 80076ec:	181b      	addge	r3, r3, r0
 80076ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076f2:	bfac      	ite	ge
 80076f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076f6:	81a3      	strhlt	r3, [r4, #12]
 80076f8:	bd10      	pop	{r4, pc}

080076fa <__swrite>:
 80076fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076fe:	461f      	mov	r7, r3
 8007700:	898b      	ldrh	r3, [r1, #12]
 8007702:	05db      	lsls	r3, r3, #23
 8007704:	4605      	mov	r5, r0
 8007706:	460c      	mov	r4, r1
 8007708:	4616      	mov	r6, r2
 800770a:	d505      	bpl.n	8007718 <__swrite+0x1e>
 800770c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007710:	2302      	movs	r3, #2
 8007712:	2200      	movs	r2, #0
 8007714:	f000 f852 	bl	80077bc <_lseek_r>
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800771e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007722:	81a3      	strh	r3, [r4, #12]
 8007724:	4632      	mov	r2, r6
 8007726:	463b      	mov	r3, r7
 8007728:	4628      	mov	r0, r5
 800772a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800772e:	f000 b869 	b.w	8007804 <_write_r>

08007732 <__sseek>:
 8007732:	b510      	push	{r4, lr}
 8007734:	460c      	mov	r4, r1
 8007736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800773a:	f000 f83f 	bl	80077bc <_lseek_r>
 800773e:	1c43      	adds	r3, r0, #1
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	bf15      	itete	ne
 8007744:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007746:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800774a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800774e:	81a3      	strheq	r3, [r4, #12]
 8007750:	bf18      	it	ne
 8007752:	81a3      	strhne	r3, [r4, #12]
 8007754:	bd10      	pop	{r4, pc}

08007756 <__sclose>:
 8007756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775a:	f000 b81f 	b.w	800779c <_close_r>

0800775e <memset>:
 800775e:	4402      	add	r2, r0
 8007760:	4603      	mov	r3, r0
 8007762:	4293      	cmp	r3, r2
 8007764:	d100      	bne.n	8007768 <memset+0xa>
 8007766:	4770      	bx	lr
 8007768:	f803 1b01 	strb.w	r1, [r3], #1
 800776c:	e7f9      	b.n	8007762 <memset+0x4>

0800776e <strncmp>:
 800776e:	b510      	push	{r4, lr}
 8007770:	b16a      	cbz	r2, 800778e <strncmp+0x20>
 8007772:	3901      	subs	r1, #1
 8007774:	1884      	adds	r4, r0, r2
 8007776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800777a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800777e:	429a      	cmp	r2, r3
 8007780:	d103      	bne.n	800778a <strncmp+0x1c>
 8007782:	42a0      	cmp	r0, r4
 8007784:	d001      	beq.n	800778a <strncmp+0x1c>
 8007786:	2a00      	cmp	r2, #0
 8007788:	d1f5      	bne.n	8007776 <strncmp+0x8>
 800778a:	1ad0      	subs	r0, r2, r3
 800778c:	bd10      	pop	{r4, pc}
 800778e:	4610      	mov	r0, r2
 8007790:	e7fc      	b.n	800778c <strncmp+0x1e>
	...

08007794 <_localeconv_r>:
 8007794:	4800      	ldr	r0, [pc, #0]	@ (8007798 <_localeconv_r+0x4>)
 8007796:	4770      	bx	lr
 8007798:	2000019c 	.word	0x2000019c

0800779c <_close_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	4d06      	ldr	r5, [pc, #24]	@ (80077b8 <_close_r+0x1c>)
 80077a0:	2300      	movs	r3, #0
 80077a2:	4604      	mov	r4, r0
 80077a4:	4608      	mov	r0, r1
 80077a6:	602b      	str	r3, [r5, #0]
 80077a8:	f7fa fa30 	bl	8001c0c <_close>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d102      	bne.n	80077b6 <_close_r+0x1a>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	b103      	cbz	r3, 80077b6 <_close_r+0x1a>
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	20000674 	.word	0x20000674

080077bc <_lseek_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4d07      	ldr	r5, [pc, #28]	@ (80077dc <_lseek_r+0x20>)
 80077c0:	4604      	mov	r4, r0
 80077c2:	4608      	mov	r0, r1
 80077c4:	4611      	mov	r1, r2
 80077c6:	2200      	movs	r2, #0
 80077c8:	602a      	str	r2, [r5, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	f7fa fa45 	bl	8001c5a <_lseek>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d102      	bne.n	80077da <_lseek_r+0x1e>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	b103      	cbz	r3, 80077da <_lseek_r+0x1e>
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	20000674 	.word	0x20000674

080077e0 <_read_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4d07      	ldr	r5, [pc, #28]	@ (8007800 <_read_r+0x20>)
 80077e4:	4604      	mov	r4, r0
 80077e6:	4608      	mov	r0, r1
 80077e8:	4611      	mov	r1, r2
 80077ea:	2200      	movs	r2, #0
 80077ec:	602a      	str	r2, [r5, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	f7fa f9ef 	bl	8001bd2 <_read>
 80077f4:	1c43      	adds	r3, r0, #1
 80077f6:	d102      	bne.n	80077fe <_read_r+0x1e>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	b103      	cbz	r3, 80077fe <_read_r+0x1e>
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
 8007800:	20000674 	.word	0x20000674

08007804 <_write_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4d07      	ldr	r5, [pc, #28]	@ (8007824 <_write_r+0x20>)
 8007808:	4604      	mov	r4, r0
 800780a:	4608      	mov	r0, r1
 800780c:	4611      	mov	r1, r2
 800780e:	2200      	movs	r2, #0
 8007810:	602a      	str	r2, [r5, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	f7fa f808 	bl	8001828 <_write>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_write_r+0x1e>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	b103      	cbz	r3, 8007822 <_write_r+0x1e>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	20000674 	.word	0x20000674

08007828 <__errno>:
 8007828:	4b01      	ldr	r3, [pc, #4]	@ (8007830 <__errno+0x8>)
 800782a:	6818      	ldr	r0, [r3, #0]
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	20000218 	.word	0x20000218

08007834 <__libc_init_array>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	4d0d      	ldr	r5, [pc, #52]	@ (800786c <__libc_init_array+0x38>)
 8007838:	4c0d      	ldr	r4, [pc, #52]	@ (8007870 <__libc_init_array+0x3c>)
 800783a:	1b64      	subs	r4, r4, r5
 800783c:	10a4      	asrs	r4, r4, #2
 800783e:	2600      	movs	r6, #0
 8007840:	42a6      	cmp	r6, r4
 8007842:	d109      	bne.n	8007858 <__libc_init_array+0x24>
 8007844:	4d0b      	ldr	r5, [pc, #44]	@ (8007874 <__libc_init_array+0x40>)
 8007846:	4c0c      	ldr	r4, [pc, #48]	@ (8007878 <__libc_init_array+0x44>)
 8007848:	f002 fd5c 	bl	800a304 <_init>
 800784c:	1b64      	subs	r4, r4, r5
 800784e:	10a4      	asrs	r4, r4, #2
 8007850:	2600      	movs	r6, #0
 8007852:	42a6      	cmp	r6, r4
 8007854:	d105      	bne.n	8007862 <__libc_init_array+0x2e>
 8007856:	bd70      	pop	{r4, r5, r6, pc}
 8007858:	f855 3b04 	ldr.w	r3, [r5], #4
 800785c:	4798      	blx	r3
 800785e:	3601      	adds	r6, #1
 8007860:	e7ee      	b.n	8007840 <__libc_init_array+0xc>
 8007862:	f855 3b04 	ldr.w	r3, [r5], #4
 8007866:	4798      	blx	r3
 8007868:	3601      	adds	r6, #1
 800786a:	e7f2      	b.n	8007852 <__libc_init_array+0x1e>
 800786c:	0800a79c 	.word	0x0800a79c
 8007870:	0800a79c 	.word	0x0800a79c
 8007874:	0800a79c 	.word	0x0800a79c
 8007878:	0800a7a0 	.word	0x0800a7a0

0800787c <__retarget_lock_init_recursive>:
 800787c:	4770      	bx	lr

0800787e <__retarget_lock_acquire_recursive>:
 800787e:	4770      	bx	lr

08007880 <__retarget_lock_release_recursive>:
 8007880:	4770      	bx	lr

08007882 <memcpy>:
 8007882:	440a      	add	r2, r1
 8007884:	4291      	cmp	r1, r2
 8007886:	f100 33ff 	add.w	r3, r0, #4294967295
 800788a:	d100      	bne.n	800788e <memcpy+0xc>
 800788c:	4770      	bx	lr
 800788e:	b510      	push	{r4, lr}
 8007890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007898:	4291      	cmp	r1, r2
 800789a:	d1f9      	bne.n	8007890 <memcpy+0xe>
 800789c:	bd10      	pop	{r4, pc}
	...

080078a0 <nan>:
 80078a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80078a8 <nan+0x8>
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	00000000 	.word	0x00000000
 80078ac:	7ff80000 	.word	0x7ff80000

080078b0 <nanf>:
 80078b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80078b8 <nanf+0x8>
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	7fc00000 	.word	0x7fc00000

080078bc <quorem>:
 80078bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c0:	6903      	ldr	r3, [r0, #16]
 80078c2:	690c      	ldr	r4, [r1, #16]
 80078c4:	42a3      	cmp	r3, r4
 80078c6:	4607      	mov	r7, r0
 80078c8:	db7e      	blt.n	80079c8 <quorem+0x10c>
 80078ca:	3c01      	subs	r4, #1
 80078cc:	f101 0814 	add.w	r8, r1, #20
 80078d0:	00a3      	lsls	r3, r4, #2
 80078d2:	f100 0514 	add.w	r5, r0, #20
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078e6:	3301      	adds	r3, #1
 80078e8:	429a      	cmp	r2, r3
 80078ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80078f2:	d32e      	bcc.n	8007952 <quorem+0x96>
 80078f4:	f04f 0a00 	mov.w	sl, #0
 80078f8:	46c4      	mov	ip, r8
 80078fa:	46ae      	mov	lr, r5
 80078fc:	46d3      	mov	fp, sl
 80078fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007902:	b298      	uxth	r0, r3
 8007904:	fb06 a000 	mla	r0, r6, r0, sl
 8007908:	0c02      	lsrs	r2, r0, #16
 800790a:	0c1b      	lsrs	r3, r3, #16
 800790c:	fb06 2303 	mla	r3, r6, r3, r2
 8007910:	f8de 2000 	ldr.w	r2, [lr]
 8007914:	b280      	uxth	r0, r0
 8007916:	b292      	uxth	r2, r2
 8007918:	1a12      	subs	r2, r2, r0
 800791a:	445a      	add	r2, fp
 800791c:	f8de 0000 	ldr.w	r0, [lr]
 8007920:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007924:	b29b      	uxth	r3, r3
 8007926:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800792a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800792e:	b292      	uxth	r2, r2
 8007930:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007934:	45e1      	cmp	r9, ip
 8007936:	f84e 2b04 	str.w	r2, [lr], #4
 800793a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800793e:	d2de      	bcs.n	80078fe <quorem+0x42>
 8007940:	9b00      	ldr	r3, [sp, #0]
 8007942:	58eb      	ldr	r3, [r5, r3]
 8007944:	b92b      	cbnz	r3, 8007952 <quorem+0x96>
 8007946:	9b01      	ldr	r3, [sp, #4]
 8007948:	3b04      	subs	r3, #4
 800794a:	429d      	cmp	r5, r3
 800794c:	461a      	mov	r2, r3
 800794e:	d32f      	bcc.n	80079b0 <quorem+0xf4>
 8007950:	613c      	str	r4, [r7, #16]
 8007952:	4638      	mov	r0, r7
 8007954:	f001 fd14 	bl	8009380 <__mcmp>
 8007958:	2800      	cmp	r0, #0
 800795a:	db25      	blt.n	80079a8 <quorem+0xec>
 800795c:	4629      	mov	r1, r5
 800795e:	2000      	movs	r0, #0
 8007960:	f858 2b04 	ldr.w	r2, [r8], #4
 8007964:	f8d1 c000 	ldr.w	ip, [r1]
 8007968:	fa1f fe82 	uxth.w	lr, r2
 800796c:	fa1f f38c 	uxth.w	r3, ip
 8007970:	eba3 030e 	sub.w	r3, r3, lr
 8007974:	4403      	add	r3, r0
 8007976:	0c12      	lsrs	r2, r2, #16
 8007978:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800797c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007980:	b29b      	uxth	r3, r3
 8007982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007986:	45c1      	cmp	r9, r8
 8007988:	f841 3b04 	str.w	r3, [r1], #4
 800798c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007990:	d2e6      	bcs.n	8007960 <quorem+0xa4>
 8007992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800799a:	b922      	cbnz	r2, 80079a6 <quorem+0xea>
 800799c:	3b04      	subs	r3, #4
 800799e:	429d      	cmp	r5, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	d30b      	bcc.n	80079bc <quorem+0x100>
 80079a4:	613c      	str	r4, [r7, #16]
 80079a6:	3601      	adds	r6, #1
 80079a8:	4630      	mov	r0, r6
 80079aa:	b003      	add	sp, #12
 80079ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b0:	6812      	ldr	r2, [r2, #0]
 80079b2:	3b04      	subs	r3, #4
 80079b4:	2a00      	cmp	r2, #0
 80079b6:	d1cb      	bne.n	8007950 <quorem+0x94>
 80079b8:	3c01      	subs	r4, #1
 80079ba:	e7c6      	b.n	800794a <quorem+0x8e>
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	3b04      	subs	r3, #4
 80079c0:	2a00      	cmp	r2, #0
 80079c2:	d1ef      	bne.n	80079a4 <quorem+0xe8>
 80079c4:	3c01      	subs	r4, #1
 80079c6:	e7ea      	b.n	800799e <quorem+0xe2>
 80079c8:	2000      	movs	r0, #0
 80079ca:	e7ee      	b.n	80079aa <quorem+0xee>
 80079cc:	0000      	movs	r0, r0
	...

080079d0 <_dtoa_r>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	69c7      	ldr	r7, [r0, #28]
 80079d6:	b097      	sub	sp, #92	@ 0x5c
 80079d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80079dc:	ec55 4b10 	vmov	r4, r5, d0
 80079e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80079e2:	9107      	str	r1, [sp, #28]
 80079e4:	4681      	mov	r9, r0
 80079e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80079e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80079ea:	b97f      	cbnz	r7, 8007a0c <_dtoa_r+0x3c>
 80079ec:	2010      	movs	r0, #16
 80079ee:	f001 f943 	bl	8008c78 <malloc>
 80079f2:	4602      	mov	r2, r0
 80079f4:	f8c9 001c 	str.w	r0, [r9, #28]
 80079f8:	b920      	cbnz	r0, 8007a04 <_dtoa_r+0x34>
 80079fa:	4ba9      	ldr	r3, [pc, #676]	@ (8007ca0 <_dtoa_r+0x2d0>)
 80079fc:	21ef      	movs	r1, #239	@ 0xef
 80079fe:	48a9      	ldr	r0, [pc, #676]	@ (8007ca4 <_dtoa_r+0x2d4>)
 8007a00:	f002 f962 	bl	8009cc8 <__assert_func>
 8007a04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a08:	6007      	str	r7, [r0, #0]
 8007a0a:	60c7      	str	r7, [r0, #12]
 8007a0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a10:	6819      	ldr	r1, [r3, #0]
 8007a12:	b159      	cbz	r1, 8007a2c <_dtoa_r+0x5c>
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	604a      	str	r2, [r1, #4]
 8007a18:	2301      	movs	r3, #1
 8007a1a:	4093      	lsls	r3, r2
 8007a1c:	608b      	str	r3, [r1, #8]
 8007a1e:	4648      	mov	r0, r9
 8007a20:	f001 fa32 	bl	8008e88 <_Bfree>
 8007a24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	1e2b      	subs	r3, r5, #0
 8007a2e:	bfb9      	ittee	lt
 8007a30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a34:	9305      	strlt	r3, [sp, #20]
 8007a36:	2300      	movge	r3, #0
 8007a38:	6033      	strge	r3, [r6, #0]
 8007a3a:	9f05      	ldr	r7, [sp, #20]
 8007a3c:	4b9a      	ldr	r3, [pc, #616]	@ (8007ca8 <_dtoa_r+0x2d8>)
 8007a3e:	bfbc      	itt	lt
 8007a40:	2201      	movlt	r2, #1
 8007a42:	6032      	strlt	r2, [r6, #0]
 8007a44:	43bb      	bics	r3, r7
 8007a46:	d112      	bne.n	8007a6e <_dtoa_r+0x9e>
 8007a48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a54:	4323      	orrs	r3, r4
 8007a56:	f000 855a 	beq.w	800850e <_dtoa_r+0xb3e>
 8007a5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a5c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007cbc <_dtoa_r+0x2ec>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 855c 	beq.w	800851e <_dtoa_r+0xb4e>
 8007a66:	f10a 0303 	add.w	r3, sl, #3
 8007a6a:	f000 bd56 	b.w	800851a <_dtoa_r+0xb4a>
 8007a6e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007a72:	2200      	movs	r2, #0
 8007a74:	ec51 0b17 	vmov	r0, r1, d7
 8007a78:	2300      	movs	r3, #0
 8007a7a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007a7e:	f7f9 f823 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a82:	4680      	mov	r8, r0
 8007a84:	b158      	cbz	r0, 8007a9e <_dtoa_r+0xce>
 8007a86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a88:	2301      	movs	r3, #1
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a8e:	b113      	cbz	r3, 8007a96 <_dtoa_r+0xc6>
 8007a90:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007a92:	4b86      	ldr	r3, [pc, #536]	@ (8007cac <_dtoa_r+0x2dc>)
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007cc0 <_dtoa_r+0x2f0>
 8007a9a:	f000 bd40 	b.w	800851e <_dtoa_r+0xb4e>
 8007a9e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007aa2:	aa14      	add	r2, sp, #80	@ 0x50
 8007aa4:	a915      	add	r1, sp, #84	@ 0x54
 8007aa6:	4648      	mov	r0, r9
 8007aa8:	f001 fd8a 	bl	80095c0 <__d2b>
 8007aac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ab0:	9002      	str	r0, [sp, #8]
 8007ab2:	2e00      	cmp	r6, #0
 8007ab4:	d078      	beq.n	8007ba8 <_dtoa_r+0x1d8>
 8007ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ab8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ac4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ac8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007acc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	4b76      	ldr	r3, [pc, #472]	@ (8007cb0 <_dtoa_r+0x2e0>)
 8007ad6:	f7f8 fbd7 	bl	8000288 <__aeabi_dsub>
 8007ada:	a36b      	add	r3, pc, #428	@ (adr r3, 8007c88 <_dtoa_r+0x2b8>)
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f7f8 fd8a 	bl	80005f8 <__aeabi_dmul>
 8007ae4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007c90 <_dtoa_r+0x2c0>)
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	f7f8 fbcf 	bl	800028c <__adddf3>
 8007aee:	4604      	mov	r4, r0
 8007af0:	4630      	mov	r0, r6
 8007af2:	460d      	mov	r5, r1
 8007af4:	f7f8 fd16 	bl	8000524 <__aeabi_i2d>
 8007af8:	a367      	add	r3, pc, #412	@ (adr r3, 8007c98 <_dtoa_r+0x2c8>)
 8007afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afe:	f7f8 fd7b 	bl	80005f8 <__aeabi_dmul>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4620      	mov	r0, r4
 8007b08:	4629      	mov	r1, r5
 8007b0a:	f7f8 fbbf 	bl	800028c <__adddf3>
 8007b0e:	4604      	mov	r4, r0
 8007b10:	460d      	mov	r5, r1
 8007b12:	f7f9 f821 	bl	8000b58 <__aeabi_d2iz>
 8007b16:	2200      	movs	r2, #0
 8007b18:	4607      	mov	r7, r0
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	4629      	mov	r1, r5
 8007b20:	f7f8 ffdc 	bl	8000adc <__aeabi_dcmplt>
 8007b24:	b140      	cbz	r0, 8007b38 <_dtoa_r+0x168>
 8007b26:	4638      	mov	r0, r7
 8007b28:	f7f8 fcfc 	bl	8000524 <__aeabi_i2d>
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	462b      	mov	r3, r5
 8007b30:	f7f8 ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b34:	b900      	cbnz	r0, 8007b38 <_dtoa_r+0x168>
 8007b36:	3f01      	subs	r7, #1
 8007b38:	2f16      	cmp	r7, #22
 8007b3a:	d852      	bhi.n	8007be2 <_dtoa_r+0x212>
 8007b3c:	4b5d      	ldr	r3, [pc, #372]	@ (8007cb4 <_dtoa_r+0x2e4>)
 8007b3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b4a:	f7f8 ffc7 	bl	8000adc <__aeabi_dcmplt>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d049      	beq.n	8007be6 <_dtoa_r+0x216>
 8007b52:	3f01      	subs	r7, #1
 8007b54:	2300      	movs	r3, #0
 8007b56:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b5a:	1b9b      	subs	r3, r3, r6
 8007b5c:	1e5a      	subs	r2, r3, #1
 8007b5e:	bf45      	ittet	mi
 8007b60:	f1c3 0301 	rsbmi	r3, r3, #1
 8007b64:	9300      	strmi	r3, [sp, #0]
 8007b66:	2300      	movpl	r3, #0
 8007b68:	2300      	movmi	r3, #0
 8007b6a:	9206      	str	r2, [sp, #24]
 8007b6c:	bf54      	ite	pl
 8007b6e:	9300      	strpl	r3, [sp, #0]
 8007b70:	9306      	strmi	r3, [sp, #24]
 8007b72:	2f00      	cmp	r7, #0
 8007b74:	db39      	blt.n	8007bea <_dtoa_r+0x21a>
 8007b76:	9b06      	ldr	r3, [sp, #24]
 8007b78:	970d      	str	r7, [sp, #52]	@ 0x34
 8007b7a:	443b      	add	r3, r7
 8007b7c:	9306      	str	r3, [sp, #24]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9308      	str	r3, [sp, #32]
 8007b82:	9b07      	ldr	r3, [sp, #28]
 8007b84:	2b09      	cmp	r3, #9
 8007b86:	d863      	bhi.n	8007c50 <_dtoa_r+0x280>
 8007b88:	2b05      	cmp	r3, #5
 8007b8a:	bfc4      	itt	gt
 8007b8c:	3b04      	subgt	r3, #4
 8007b8e:	9307      	strgt	r3, [sp, #28]
 8007b90:	9b07      	ldr	r3, [sp, #28]
 8007b92:	f1a3 0302 	sub.w	r3, r3, #2
 8007b96:	bfcc      	ite	gt
 8007b98:	2400      	movgt	r4, #0
 8007b9a:	2401      	movle	r4, #1
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d863      	bhi.n	8007c68 <_dtoa_r+0x298>
 8007ba0:	e8df f003 	tbb	[pc, r3]
 8007ba4:	2b375452 	.word	0x2b375452
 8007ba8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007bac:	441e      	add	r6, r3
 8007bae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	bfc1      	itttt	gt
 8007bb6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007bba:	409f      	lslgt	r7, r3
 8007bbc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007bc0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007bc4:	bfd6      	itet	le
 8007bc6:	f1c3 0320 	rsble	r3, r3, #32
 8007bca:	ea47 0003 	orrgt.w	r0, r7, r3
 8007bce:	fa04 f003 	lslle.w	r0, r4, r3
 8007bd2:	f7f8 fc97 	bl	8000504 <__aeabi_ui2d>
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007bdc:	3e01      	subs	r6, #1
 8007bde:	9212      	str	r2, [sp, #72]	@ 0x48
 8007be0:	e776      	b.n	8007ad0 <_dtoa_r+0x100>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e7b7      	b.n	8007b56 <_dtoa_r+0x186>
 8007be6:	9010      	str	r0, [sp, #64]	@ 0x40
 8007be8:	e7b6      	b.n	8007b58 <_dtoa_r+0x188>
 8007bea:	9b00      	ldr	r3, [sp, #0]
 8007bec:	1bdb      	subs	r3, r3, r7
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	427b      	negs	r3, r7
 8007bf2:	9308      	str	r3, [sp, #32]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007bf8:	e7c3      	b.n	8007b82 <_dtoa_r+0x1b2>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c00:	eb07 0b03 	add.w	fp, r7, r3
 8007c04:	f10b 0301 	add.w	r3, fp, #1
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	9303      	str	r3, [sp, #12]
 8007c0c:	bfb8      	it	lt
 8007c0e:	2301      	movlt	r3, #1
 8007c10:	e006      	b.n	8007c20 <_dtoa_r+0x250>
 8007c12:	2301      	movs	r3, #1
 8007c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dd28      	ble.n	8007c6e <_dtoa_r+0x29e>
 8007c1c:	469b      	mov	fp, r3
 8007c1e:	9303      	str	r3, [sp, #12]
 8007c20:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007c24:	2100      	movs	r1, #0
 8007c26:	2204      	movs	r2, #4
 8007c28:	f102 0514 	add.w	r5, r2, #20
 8007c2c:	429d      	cmp	r5, r3
 8007c2e:	d926      	bls.n	8007c7e <_dtoa_r+0x2ae>
 8007c30:	6041      	str	r1, [r0, #4]
 8007c32:	4648      	mov	r0, r9
 8007c34:	f001 f8e8 	bl	8008e08 <_Balloc>
 8007c38:	4682      	mov	sl, r0
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d142      	bne.n	8007cc4 <_dtoa_r+0x2f4>
 8007c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007cb8 <_dtoa_r+0x2e8>)
 8007c40:	4602      	mov	r2, r0
 8007c42:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c46:	e6da      	b.n	80079fe <_dtoa_r+0x2e>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	e7e3      	b.n	8007c14 <_dtoa_r+0x244>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e7d5      	b.n	8007bfc <_dtoa_r+0x22c>
 8007c50:	2401      	movs	r4, #1
 8007c52:	2300      	movs	r3, #0
 8007c54:	9307      	str	r3, [sp, #28]
 8007c56:	9409      	str	r4, [sp, #36]	@ 0x24
 8007c58:	f04f 3bff 	mov.w	fp, #4294967295
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007c62:	2312      	movs	r3, #18
 8007c64:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c66:	e7db      	b.n	8007c20 <_dtoa_r+0x250>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c6c:	e7f4      	b.n	8007c58 <_dtoa_r+0x288>
 8007c6e:	f04f 0b01 	mov.w	fp, #1
 8007c72:	f8cd b00c 	str.w	fp, [sp, #12]
 8007c76:	465b      	mov	r3, fp
 8007c78:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007c7c:	e7d0      	b.n	8007c20 <_dtoa_r+0x250>
 8007c7e:	3101      	adds	r1, #1
 8007c80:	0052      	lsls	r2, r2, #1
 8007c82:	e7d1      	b.n	8007c28 <_dtoa_r+0x258>
 8007c84:	f3af 8000 	nop.w
 8007c88:	636f4361 	.word	0x636f4361
 8007c8c:	3fd287a7 	.word	0x3fd287a7
 8007c90:	8b60c8b3 	.word	0x8b60c8b3
 8007c94:	3fc68a28 	.word	0x3fc68a28
 8007c98:	509f79fb 	.word	0x509f79fb
 8007c9c:	3fd34413 	.word	0x3fd34413
 8007ca0:	0800a3b8 	.word	0x0800a3b8
 8007ca4:	0800a3cf 	.word	0x0800a3cf
 8007ca8:	7ff00000 	.word	0x7ff00000
 8007cac:	0800a37b 	.word	0x0800a37b
 8007cb0:	3ff80000 	.word	0x3ff80000
 8007cb4:	0800a5c8 	.word	0x0800a5c8
 8007cb8:	0800a427 	.word	0x0800a427
 8007cbc:	0800a3b4 	.word	0x0800a3b4
 8007cc0:	0800a37a 	.word	0x0800a37a
 8007cc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007cc8:	6018      	str	r0, [r3, #0]
 8007cca:	9b03      	ldr	r3, [sp, #12]
 8007ccc:	2b0e      	cmp	r3, #14
 8007cce:	f200 80a1 	bhi.w	8007e14 <_dtoa_r+0x444>
 8007cd2:	2c00      	cmp	r4, #0
 8007cd4:	f000 809e 	beq.w	8007e14 <_dtoa_r+0x444>
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	dd33      	ble.n	8007d44 <_dtoa_r+0x374>
 8007cdc:	4b9c      	ldr	r3, [pc, #624]	@ (8007f50 <_dtoa_r+0x580>)
 8007cde:	f007 020f 	and.w	r2, r7, #15
 8007ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ce6:	ed93 7b00 	vldr	d7, [r3]
 8007cea:	05f8      	lsls	r0, r7, #23
 8007cec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007cf0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007cf4:	d516      	bpl.n	8007d24 <_dtoa_r+0x354>
 8007cf6:	4b97      	ldr	r3, [pc, #604]	@ (8007f54 <_dtoa_r+0x584>)
 8007cf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007cfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d00:	f7f8 fda4 	bl	800084c <__aeabi_ddiv>
 8007d04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d08:	f004 040f 	and.w	r4, r4, #15
 8007d0c:	2603      	movs	r6, #3
 8007d0e:	4d91      	ldr	r5, [pc, #580]	@ (8007f54 <_dtoa_r+0x584>)
 8007d10:	b954      	cbnz	r4, 8007d28 <_dtoa_r+0x358>
 8007d12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d1a:	f7f8 fd97 	bl	800084c <__aeabi_ddiv>
 8007d1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d22:	e028      	b.n	8007d76 <_dtoa_r+0x3a6>
 8007d24:	2602      	movs	r6, #2
 8007d26:	e7f2      	b.n	8007d0e <_dtoa_r+0x33e>
 8007d28:	07e1      	lsls	r1, r4, #31
 8007d2a:	d508      	bpl.n	8007d3e <_dtoa_r+0x36e>
 8007d2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d34:	f7f8 fc60 	bl	80005f8 <__aeabi_dmul>
 8007d38:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d3c:	3601      	adds	r6, #1
 8007d3e:	1064      	asrs	r4, r4, #1
 8007d40:	3508      	adds	r5, #8
 8007d42:	e7e5      	b.n	8007d10 <_dtoa_r+0x340>
 8007d44:	f000 80af 	beq.w	8007ea6 <_dtoa_r+0x4d6>
 8007d48:	427c      	negs	r4, r7
 8007d4a:	4b81      	ldr	r3, [pc, #516]	@ (8007f50 <_dtoa_r+0x580>)
 8007d4c:	4d81      	ldr	r5, [pc, #516]	@ (8007f54 <_dtoa_r+0x584>)
 8007d4e:	f004 020f 	and.w	r2, r4, #15
 8007d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d5e:	f7f8 fc4b 	bl	80005f8 <__aeabi_dmul>
 8007d62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d66:	1124      	asrs	r4, r4, #4
 8007d68:	2300      	movs	r3, #0
 8007d6a:	2602      	movs	r6, #2
 8007d6c:	2c00      	cmp	r4, #0
 8007d6e:	f040 808f 	bne.w	8007e90 <_dtoa_r+0x4c0>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1d3      	bne.n	8007d1e <_dtoa_r+0x34e>
 8007d76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d78:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 8094 	beq.w	8007eaa <_dtoa_r+0x4da>
 8007d82:	4b75      	ldr	r3, [pc, #468]	@ (8007f58 <_dtoa_r+0x588>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	4620      	mov	r0, r4
 8007d88:	4629      	mov	r1, r5
 8007d8a:	f7f8 fea7 	bl	8000adc <__aeabi_dcmplt>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f000 808b 	beq.w	8007eaa <_dtoa_r+0x4da>
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 8087 	beq.w	8007eaa <_dtoa_r+0x4da>
 8007d9c:	f1bb 0f00 	cmp.w	fp, #0
 8007da0:	dd34      	ble.n	8007e0c <_dtoa_r+0x43c>
 8007da2:	4620      	mov	r0, r4
 8007da4:	4b6d      	ldr	r3, [pc, #436]	@ (8007f5c <_dtoa_r+0x58c>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	4629      	mov	r1, r5
 8007daa:	f7f8 fc25 	bl	80005f8 <__aeabi_dmul>
 8007dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007db2:	f107 38ff 	add.w	r8, r7, #4294967295
 8007db6:	3601      	adds	r6, #1
 8007db8:	465c      	mov	r4, fp
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7f8 fbb2 	bl	8000524 <__aeabi_i2d>
 8007dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dc4:	f7f8 fc18 	bl	80005f8 <__aeabi_dmul>
 8007dc8:	4b65      	ldr	r3, [pc, #404]	@ (8007f60 <_dtoa_r+0x590>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f7f8 fa5e 	bl	800028c <__adddf3>
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007dd6:	2c00      	cmp	r4, #0
 8007dd8:	d16a      	bne.n	8007eb0 <_dtoa_r+0x4e0>
 8007dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dde:	4b61      	ldr	r3, [pc, #388]	@ (8007f64 <_dtoa_r+0x594>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	f7f8 fa51 	bl	8000288 <__aeabi_dsub>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dee:	462a      	mov	r2, r5
 8007df0:	4633      	mov	r3, r6
 8007df2:	f7f8 fe91 	bl	8000b18 <__aeabi_dcmpgt>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	f040 8298 	bne.w	800832c <_dtoa_r+0x95c>
 8007dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e00:	462a      	mov	r2, r5
 8007e02:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e06:	f7f8 fe69 	bl	8000adc <__aeabi_dcmplt>
 8007e0a:	bb38      	cbnz	r0, 8007e5c <_dtoa_r+0x48c>
 8007e0c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007e10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f2c0 8157 	blt.w	80080ca <_dtoa_r+0x6fa>
 8007e1c:	2f0e      	cmp	r7, #14
 8007e1e:	f300 8154 	bgt.w	80080ca <_dtoa_r+0x6fa>
 8007e22:	4b4b      	ldr	r3, [pc, #300]	@ (8007f50 <_dtoa_r+0x580>)
 8007e24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e28:	ed93 7b00 	vldr	d7, [r3]
 8007e2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	ed8d 7b00 	vstr	d7, [sp]
 8007e34:	f280 80e5 	bge.w	8008002 <_dtoa_r+0x632>
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f300 80e1 	bgt.w	8008002 <_dtoa_r+0x632>
 8007e40:	d10c      	bne.n	8007e5c <_dtoa_r+0x48c>
 8007e42:	4b48      	ldr	r3, [pc, #288]	@ (8007f64 <_dtoa_r+0x594>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	ec51 0b17 	vmov	r0, r1, d7
 8007e4a:	f7f8 fbd5 	bl	80005f8 <__aeabi_dmul>
 8007e4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e52:	f7f8 fe57 	bl	8000b04 <__aeabi_dcmpge>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	f000 8266 	beq.w	8008328 <_dtoa_r+0x958>
 8007e5c:	2400      	movs	r4, #0
 8007e5e:	4625      	mov	r5, r4
 8007e60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e62:	4656      	mov	r6, sl
 8007e64:	ea6f 0803 	mvn.w	r8, r3
 8007e68:	2700      	movs	r7, #0
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4648      	mov	r0, r9
 8007e6e:	f001 f80b 	bl	8008e88 <_Bfree>
 8007e72:	2d00      	cmp	r5, #0
 8007e74:	f000 80bd 	beq.w	8007ff2 <_dtoa_r+0x622>
 8007e78:	b12f      	cbz	r7, 8007e86 <_dtoa_r+0x4b6>
 8007e7a:	42af      	cmp	r7, r5
 8007e7c:	d003      	beq.n	8007e86 <_dtoa_r+0x4b6>
 8007e7e:	4639      	mov	r1, r7
 8007e80:	4648      	mov	r0, r9
 8007e82:	f001 f801 	bl	8008e88 <_Bfree>
 8007e86:	4629      	mov	r1, r5
 8007e88:	4648      	mov	r0, r9
 8007e8a:	f000 fffd 	bl	8008e88 <_Bfree>
 8007e8e:	e0b0      	b.n	8007ff2 <_dtoa_r+0x622>
 8007e90:	07e2      	lsls	r2, r4, #31
 8007e92:	d505      	bpl.n	8007ea0 <_dtoa_r+0x4d0>
 8007e94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e98:	f7f8 fbae 	bl	80005f8 <__aeabi_dmul>
 8007e9c:	3601      	adds	r6, #1
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	1064      	asrs	r4, r4, #1
 8007ea2:	3508      	adds	r5, #8
 8007ea4:	e762      	b.n	8007d6c <_dtoa_r+0x39c>
 8007ea6:	2602      	movs	r6, #2
 8007ea8:	e765      	b.n	8007d76 <_dtoa_r+0x3a6>
 8007eaa:	9c03      	ldr	r4, [sp, #12]
 8007eac:	46b8      	mov	r8, r7
 8007eae:	e784      	b.n	8007dba <_dtoa_r+0x3ea>
 8007eb0:	4b27      	ldr	r3, [pc, #156]	@ (8007f50 <_dtoa_r+0x580>)
 8007eb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007eb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007eb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ebc:	4454      	add	r4, sl
 8007ebe:	2900      	cmp	r1, #0
 8007ec0:	d054      	beq.n	8007f6c <_dtoa_r+0x59c>
 8007ec2:	4929      	ldr	r1, [pc, #164]	@ (8007f68 <_dtoa_r+0x598>)
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	f7f8 fcc1 	bl	800084c <__aeabi_ddiv>
 8007eca:	4633      	mov	r3, r6
 8007ecc:	462a      	mov	r2, r5
 8007ece:	f7f8 f9db 	bl	8000288 <__aeabi_dsub>
 8007ed2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ed6:	4656      	mov	r6, sl
 8007ed8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007edc:	f7f8 fe3c 	bl	8000b58 <__aeabi_d2iz>
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	f7f8 fb1f 	bl	8000524 <__aeabi_i2d>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eee:	f7f8 f9cb 	bl	8000288 <__aeabi_dsub>
 8007ef2:	3530      	adds	r5, #48	@ 0x30
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007efc:	f806 5b01 	strb.w	r5, [r6], #1
 8007f00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f04:	f7f8 fdea 	bl	8000adc <__aeabi_dcmplt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d172      	bne.n	8007ff2 <_dtoa_r+0x622>
 8007f0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f10:	4911      	ldr	r1, [pc, #68]	@ (8007f58 <_dtoa_r+0x588>)
 8007f12:	2000      	movs	r0, #0
 8007f14:	f7f8 f9b8 	bl	8000288 <__aeabi_dsub>
 8007f18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f1c:	f7f8 fdde 	bl	8000adc <__aeabi_dcmplt>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	f040 80b4 	bne.w	800808e <_dtoa_r+0x6be>
 8007f26:	42a6      	cmp	r6, r4
 8007f28:	f43f af70 	beq.w	8007e0c <_dtoa_r+0x43c>
 8007f2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f30:	4b0a      	ldr	r3, [pc, #40]	@ (8007f5c <_dtoa_r+0x58c>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	f7f8 fb60 	bl	80005f8 <__aeabi_dmul>
 8007f38:	4b08      	ldr	r3, [pc, #32]	@ (8007f5c <_dtoa_r+0x58c>)
 8007f3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f3e:	2200      	movs	r2, #0
 8007f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f44:	f7f8 fb58 	bl	80005f8 <__aeabi_dmul>
 8007f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f4c:	e7c4      	b.n	8007ed8 <_dtoa_r+0x508>
 8007f4e:	bf00      	nop
 8007f50:	0800a5c8 	.word	0x0800a5c8
 8007f54:	0800a5a0 	.word	0x0800a5a0
 8007f58:	3ff00000 	.word	0x3ff00000
 8007f5c:	40240000 	.word	0x40240000
 8007f60:	401c0000 	.word	0x401c0000
 8007f64:	40140000 	.word	0x40140000
 8007f68:	3fe00000 	.word	0x3fe00000
 8007f6c:	4631      	mov	r1, r6
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f7f8 fb42 	bl	80005f8 <__aeabi_dmul>
 8007f74:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f78:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007f7a:	4656      	mov	r6, sl
 8007f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f80:	f7f8 fdea 	bl	8000b58 <__aeabi_d2iz>
 8007f84:	4605      	mov	r5, r0
 8007f86:	f7f8 facd 	bl	8000524 <__aeabi_i2d>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f92:	f7f8 f979 	bl	8000288 <__aeabi_dsub>
 8007f96:	3530      	adds	r5, #48	@ 0x30
 8007f98:	f806 5b01 	strb.w	r5, [r6], #1
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	42a6      	cmp	r6, r4
 8007fa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fa6:	f04f 0200 	mov.w	r2, #0
 8007faa:	d124      	bne.n	8007ff6 <_dtoa_r+0x626>
 8007fac:	4baf      	ldr	r3, [pc, #700]	@ (800826c <_dtoa_r+0x89c>)
 8007fae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007fb2:	f7f8 f96b 	bl	800028c <__adddf3>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fbe:	f7f8 fdab 	bl	8000b18 <__aeabi_dcmpgt>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d163      	bne.n	800808e <_dtoa_r+0x6be>
 8007fc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007fca:	49a8      	ldr	r1, [pc, #672]	@ (800826c <_dtoa_r+0x89c>)
 8007fcc:	2000      	movs	r0, #0
 8007fce:	f7f8 f95b 	bl	8000288 <__aeabi_dsub>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fda:	f7f8 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	f43f af14 	beq.w	8007e0c <_dtoa_r+0x43c>
 8007fe4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007fe6:	1e73      	subs	r3, r6, #1
 8007fe8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fee:	2b30      	cmp	r3, #48	@ 0x30
 8007ff0:	d0f8      	beq.n	8007fe4 <_dtoa_r+0x614>
 8007ff2:	4647      	mov	r7, r8
 8007ff4:	e03b      	b.n	800806e <_dtoa_r+0x69e>
 8007ff6:	4b9e      	ldr	r3, [pc, #632]	@ (8008270 <_dtoa_r+0x8a0>)
 8007ff8:	f7f8 fafe 	bl	80005f8 <__aeabi_dmul>
 8007ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008000:	e7bc      	b.n	8007f7c <_dtoa_r+0x5ac>
 8008002:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008006:	4656      	mov	r6, sl
 8008008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800800c:	4620      	mov	r0, r4
 800800e:	4629      	mov	r1, r5
 8008010:	f7f8 fc1c 	bl	800084c <__aeabi_ddiv>
 8008014:	f7f8 fda0 	bl	8000b58 <__aeabi_d2iz>
 8008018:	4680      	mov	r8, r0
 800801a:	f7f8 fa83 	bl	8000524 <__aeabi_i2d>
 800801e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008022:	f7f8 fae9 	bl	80005f8 <__aeabi_dmul>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4620      	mov	r0, r4
 800802c:	4629      	mov	r1, r5
 800802e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008032:	f7f8 f929 	bl	8000288 <__aeabi_dsub>
 8008036:	f806 4b01 	strb.w	r4, [r6], #1
 800803a:	9d03      	ldr	r5, [sp, #12]
 800803c:	eba6 040a 	sub.w	r4, r6, sl
 8008040:	42a5      	cmp	r5, r4
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	d133      	bne.n	80080b0 <_dtoa_r+0x6e0>
 8008048:	f7f8 f920 	bl	800028c <__adddf3>
 800804c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008050:	4604      	mov	r4, r0
 8008052:	460d      	mov	r5, r1
 8008054:	f7f8 fd60 	bl	8000b18 <__aeabi_dcmpgt>
 8008058:	b9c0      	cbnz	r0, 800808c <_dtoa_r+0x6bc>
 800805a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 8008066:	b110      	cbz	r0, 800806e <_dtoa_r+0x69e>
 8008068:	f018 0f01 	tst.w	r8, #1
 800806c:	d10e      	bne.n	800808c <_dtoa_r+0x6bc>
 800806e:	9902      	ldr	r1, [sp, #8]
 8008070:	4648      	mov	r0, r9
 8008072:	f000 ff09 	bl	8008e88 <_Bfree>
 8008076:	2300      	movs	r3, #0
 8008078:	7033      	strb	r3, [r6, #0]
 800807a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800807c:	3701      	adds	r7, #1
 800807e:	601f      	str	r7, [r3, #0]
 8008080:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 824b 	beq.w	800851e <_dtoa_r+0xb4e>
 8008088:	601e      	str	r6, [r3, #0]
 800808a:	e248      	b.n	800851e <_dtoa_r+0xb4e>
 800808c:	46b8      	mov	r8, r7
 800808e:	4633      	mov	r3, r6
 8008090:	461e      	mov	r6, r3
 8008092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008096:	2a39      	cmp	r2, #57	@ 0x39
 8008098:	d106      	bne.n	80080a8 <_dtoa_r+0x6d8>
 800809a:	459a      	cmp	sl, r3
 800809c:	d1f8      	bne.n	8008090 <_dtoa_r+0x6c0>
 800809e:	2230      	movs	r2, #48	@ 0x30
 80080a0:	f108 0801 	add.w	r8, r8, #1
 80080a4:	f88a 2000 	strb.w	r2, [sl]
 80080a8:	781a      	ldrb	r2, [r3, #0]
 80080aa:	3201      	adds	r2, #1
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	e7a0      	b.n	8007ff2 <_dtoa_r+0x622>
 80080b0:	4b6f      	ldr	r3, [pc, #444]	@ (8008270 <_dtoa_r+0x8a0>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	f7f8 faa0 	bl	80005f8 <__aeabi_dmul>
 80080b8:	2200      	movs	r2, #0
 80080ba:	2300      	movs	r3, #0
 80080bc:	4604      	mov	r4, r0
 80080be:	460d      	mov	r5, r1
 80080c0:	f7f8 fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d09f      	beq.n	8008008 <_dtoa_r+0x638>
 80080c8:	e7d1      	b.n	800806e <_dtoa_r+0x69e>
 80080ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080cc:	2a00      	cmp	r2, #0
 80080ce:	f000 80ea 	beq.w	80082a6 <_dtoa_r+0x8d6>
 80080d2:	9a07      	ldr	r2, [sp, #28]
 80080d4:	2a01      	cmp	r2, #1
 80080d6:	f300 80cd 	bgt.w	8008274 <_dtoa_r+0x8a4>
 80080da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80080dc:	2a00      	cmp	r2, #0
 80080de:	f000 80c1 	beq.w	8008264 <_dtoa_r+0x894>
 80080e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80080e6:	9c08      	ldr	r4, [sp, #32]
 80080e8:	9e00      	ldr	r6, [sp, #0]
 80080ea:	9a00      	ldr	r2, [sp, #0]
 80080ec:	441a      	add	r2, r3
 80080ee:	9200      	str	r2, [sp, #0]
 80080f0:	9a06      	ldr	r2, [sp, #24]
 80080f2:	2101      	movs	r1, #1
 80080f4:	441a      	add	r2, r3
 80080f6:	4648      	mov	r0, r9
 80080f8:	9206      	str	r2, [sp, #24]
 80080fa:	f000 ffc3 	bl	8009084 <__i2b>
 80080fe:	4605      	mov	r5, r0
 8008100:	b166      	cbz	r6, 800811c <_dtoa_r+0x74c>
 8008102:	9b06      	ldr	r3, [sp, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	dd09      	ble.n	800811c <_dtoa_r+0x74c>
 8008108:	42b3      	cmp	r3, r6
 800810a:	9a00      	ldr	r2, [sp, #0]
 800810c:	bfa8      	it	ge
 800810e:	4633      	movge	r3, r6
 8008110:	1ad2      	subs	r2, r2, r3
 8008112:	9200      	str	r2, [sp, #0]
 8008114:	9a06      	ldr	r2, [sp, #24]
 8008116:	1af6      	subs	r6, r6, r3
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	9306      	str	r3, [sp, #24]
 800811c:	9b08      	ldr	r3, [sp, #32]
 800811e:	b30b      	cbz	r3, 8008164 <_dtoa_r+0x794>
 8008120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 80c6 	beq.w	80082b4 <_dtoa_r+0x8e4>
 8008128:	2c00      	cmp	r4, #0
 800812a:	f000 80c0 	beq.w	80082ae <_dtoa_r+0x8de>
 800812e:	4629      	mov	r1, r5
 8008130:	4622      	mov	r2, r4
 8008132:	4648      	mov	r0, r9
 8008134:	f001 f85e 	bl	80091f4 <__pow5mult>
 8008138:	9a02      	ldr	r2, [sp, #8]
 800813a:	4601      	mov	r1, r0
 800813c:	4605      	mov	r5, r0
 800813e:	4648      	mov	r0, r9
 8008140:	f000 ffb6 	bl	80090b0 <__multiply>
 8008144:	9902      	ldr	r1, [sp, #8]
 8008146:	4680      	mov	r8, r0
 8008148:	4648      	mov	r0, r9
 800814a:	f000 fe9d 	bl	8008e88 <_Bfree>
 800814e:	9b08      	ldr	r3, [sp, #32]
 8008150:	1b1b      	subs	r3, r3, r4
 8008152:	9308      	str	r3, [sp, #32]
 8008154:	f000 80b1 	beq.w	80082ba <_dtoa_r+0x8ea>
 8008158:	9a08      	ldr	r2, [sp, #32]
 800815a:	4641      	mov	r1, r8
 800815c:	4648      	mov	r0, r9
 800815e:	f001 f849 	bl	80091f4 <__pow5mult>
 8008162:	9002      	str	r0, [sp, #8]
 8008164:	2101      	movs	r1, #1
 8008166:	4648      	mov	r0, r9
 8008168:	f000 ff8c 	bl	8009084 <__i2b>
 800816c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800816e:	4604      	mov	r4, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 81d8 	beq.w	8008526 <_dtoa_r+0xb56>
 8008176:	461a      	mov	r2, r3
 8008178:	4601      	mov	r1, r0
 800817a:	4648      	mov	r0, r9
 800817c:	f001 f83a 	bl	80091f4 <__pow5mult>
 8008180:	9b07      	ldr	r3, [sp, #28]
 8008182:	2b01      	cmp	r3, #1
 8008184:	4604      	mov	r4, r0
 8008186:	f300 809f 	bgt.w	80082c8 <_dtoa_r+0x8f8>
 800818a:	9b04      	ldr	r3, [sp, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 8097 	bne.w	80082c0 <_dtoa_r+0x8f0>
 8008192:	9b05      	ldr	r3, [sp, #20]
 8008194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008198:	2b00      	cmp	r3, #0
 800819a:	f040 8093 	bne.w	80082c4 <_dtoa_r+0x8f4>
 800819e:	9b05      	ldr	r3, [sp, #20]
 80081a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081a4:	0d1b      	lsrs	r3, r3, #20
 80081a6:	051b      	lsls	r3, r3, #20
 80081a8:	b133      	cbz	r3, 80081b8 <_dtoa_r+0x7e8>
 80081aa:	9b00      	ldr	r3, [sp, #0]
 80081ac:	3301      	adds	r3, #1
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	9b06      	ldr	r3, [sp, #24]
 80081b2:	3301      	adds	r3, #1
 80081b4:	9306      	str	r3, [sp, #24]
 80081b6:	2301      	movs	r3, #1
 80081b8:	9308      	str	r3, [sp, #32]
 80081ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 81b8 	beq.w	8008532 <_dtoa_r+0xb62>
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081c8:	6918      	ldr	r0, [r3, #16]
 80081ca:	f000 ff0f 	bl	8008fec <__hi0bits>
 80081ce:	f1c0 0020 	rsb	r0, r0, #32
 80081d2:	9b06      	ldr	r3, [sp, #24]
 80081d4:	4418      	add	r0, r3
 80081d6:	f010 001f 	ands.w	r0, r0, #31
 80081da:	f000 8082 	beq.w	80082e2 <_dtoa_r+0x912>
 80081de:	f1c0 0320 	rsb	r3, r0, #32
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	dd73      	ble.n	80082ce <_dtoa_r+0x8fe>
 80081e6:	9b00      	ldr	r3, [sp, #0]
 80081e8:	f1c0 001c 	rsb	r0, r0, #28
 80081ec:	4403      	add	r3, r0
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	9b06      	ldr	r3, [sp, #24]
 80081f2:	4403      	add	r3, r0
 80081f4:	4406      	add	r6, r0
 80081f6:	9306      	str	r3, [sp, #24]
 80081f8:	9b00      	ldr	r3, [sp, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	dd05      	ble.n	800820a <_dtoa_r+0x83a>
 80081fe:	9902      	ldr	r1, [sp, #8]
 8008200:	461a      	mov	r2, r3
 8008202:	4648      	mov	r0, r9
 8008204:	f001 f850 	bl	80092a8 <__lshift>
 8008208:	9002      	str	r0, [sp, #8]
 800820a:	9b06      	ldr	r3, [sp, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	dd05      	ble.n	800821c <_dtoa_r+0x84c>
 8008210:	4621      	mov	r1, r4
 8008212:	461a      	mov	r2, r3
 8008214:	4648      	mov	r0, r9
 8008216:	f001 f847 	bl	80092a8 <__lshift>
 800821a:	4604      	mov	r4, r0
 800821c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d061      	beq.n	80082e6 <_dtoa_r+0x916>
 8008222:	9802      	ldr	r0, [sp, #8]
 8008224:	4621      	mov	r1, r4
 8008226:	f001 f8ab 	bl	8009380 <__mcmp>
 800822a:	2800      	cmp	r0, #0
 800822c:	da5b      	bge.n	80082e6 <_dtoa_r+0x916>
 800822e:	2300      	movs	r3, #0
 8008230:	9902      	ldr	r1, [sp, #8]
 8008232:	220a      	movs	r2, #10
 8008234:	4648      	mov	r0, r9
 8008236:	f000 fe49 	bl	8008ecc <__multadd>
 800823a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800823c:	9002      	str	r0, [sp, #8]
 800823e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 8177 	beq.w	8008536 <_dtoa_r+0xb66>
 8008248:	4629      	mov	r1, r5
 800824a:	2300      	movs	r3, #0
 800824c:	220a      	movs	r2, #10
 800824e:	4648      	mov	r0, r9
 8008250:	f000 fe3c 	bl	8008ecc <__multadd>
 8008254:	f1bb 0f00 	cmp.w	fp, #0
 8008258:	4605      	mov	r5, r0
 800825a:	dc6f      	bgt.n	800833c <_dtoa_r+0x96c>
 800825c:	9b07      	ldr	r3, [sp, #28]
 800825e:	2b02      	cmp	r3, #2
 8008260:	dc49      	bgt.n	80082f6 <_dtoa_r+0x926>
 8008262:	e06b      	b.n	800833c <_dtoa_r+0x96c>
 8008264:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008266:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800826a:	e73c      	b.n	80080e6 <_dtoa_r+0x716>
 800826c:	3fe00000 	.word	0x3fe00000
 8008270:	40240000 	.word	0x40240000
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	1e5c      	subs	r4, r3, #1
 8008278:	9b08      	ldr	r3, [sp, #32]
 800827a:	42a3      	cmp	r3, r4
 800827c:	db09      	blt.n	8008292 <_dtoa_r+0x8c2>
 800827e:	1b1c      	subs	r4, r3, r4
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f6bf af30 	bge.w	80080e8 <_dtoa_r+0x718>
 8008288:	9b00      	ldr	r3, [sp, #0]
 800828a:	9a03      	ldr	r2, [sp, #12]
 800828c:	1a9e      	subs	r6, r3, r2
 800828e:	2300      	movs	r3, #0
 8008290:	e72b      	b.n	80080ea <_dtoa_r+0x71a>
 8008292:	9b08      	ldr	r3, [sp, #32]
 8008294:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008296:	9408      	str	r4, [sp, #32]
 8008298:	1ae3      	subs	r3, r4, r3
 800829a:	441a      	add	r2, r3
 800829c:	9e00      	ldr	r6, [sp, #0]
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	920d      	str	r2, [sp, #52]	@ 0x34
 80082a2:	2400      	movs	r4, #0
 80082a4:	e721      	b.n	80080ea <_dtoa_r+0x71a>
 80082a6:	9c08      	ldr	r4, [sp, #32]
 80082a8:	9e00      	ldr	r6, [sp, #0]
 80082aa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80082ac:	e728      	b.n	8008100 <_dtoa_r+0x730>
 80082ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80082b2:	e751      	b.n	8008158 <_dtoa_r+0x788>
 80082b4:	9a08      	ldr	r2, [sp, #32]
 80082b6:	9902      	ldr	r1, [sp, #8]
 80082b8:	e750      	b.n	800815c <_dtoa_r+0x78c>
 80082ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80082be:	e751      	b.n	8008164 <_dtoa_r+0x794>
 80082c0:	2300      	movs	r3, #0
 80082c2:	e779      	b.n	80081b8 <_dtoa_r+0x7e8>
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	e777      	b.n	80081b8 <_dtoa_r+0x7e8>
 80082c8:	2300      	movs	r3, #0
 80082ca:	9308      	str	r3, [sp, #32]
 80082cc:	e779      	b.n	80081c2 <_dtoa_r+0x7f2>
 80082ce:	d093      	beq.n	80081f8 <_dtoa_r+0x828>
 80082d0:	9a00      	ldr	r2, [sp, #0]
 80082d2:	331c      	adds	r3, #28
 80082d4:	441a      	add	r2, r3
 80082d6:	9200      	str	r2, [sp, #0]
 80082d8:	9a06      	ldr	r2, [sp, #24]
 80082da:	441a      	add	r2, r3
 80082dc:	441e      	add	r6, r3
 80082de:	9206      	str	r2, [sp, #24]
 80082e0:	e78a      	b.n	80081f8 <_dtoa_r+0x828>
 80082e2:	4603      	mov	r3, r0
 80082e4:	e7f4      	b.n	80082d0 <_dtoa_r+0x900>
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	46b8      	mov	r8, r7
 80082ec:	dc20      	bgt.n	8008330 <_dtoa_r+0x960>
 80082ee:	469b      	mov	fp, r3
 80082f0:	9b07      	ldr	r3, [sp, #28]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	dd1e      	ble.n	8008334 <_dtoa_r+0x964>
 80082f6:	f1bb 0f00 	cmp.w	fp, #0
 80082fa:	f47f adb1 	bne.w	8007e60 <_dtoa_r+0x490>
 80082fe:	4621      	mov	r1, r4
 8008300:	465b      	mov	r3, fp
 8008302:	2205      	movs	r2, #5
 8008304:	4648      	mov	r0, r9
 8008306:	f000 fde1 	bl	8008ecc <__multadd>
 800830a:	4601      	mov	r1, r0
 800830c:	4604      	mov	r4, r0
 800830e:	9802      	ldr	r0, [sp, #8]
 8008310:	f001 f836 	bl	8009380 <__mcmp>
 8008314:	2800      	cmp	r0, #0
 8008316:	f77f ada3 	ble.w	8007e60 <_dtoa_r+0x490>
 800831a:	4656      	mov	r6, sl
 800831c:	2331      	movs	r3, #49	@ 0x31
 800831e:	f806 3b01 	strb.w	r3, [r6], #1
 8008322:	f108 0801 	add.w	r8, r8, #1
 8008326:	e59f      	b.n	8007e68 <_dtoa_r+0x498>
 8008328:	9c03      	ldr	r4, [sp, #12]
 800832a:	46b8      	mov	r8, r7
 800832c:	4625      	mov	r5, r4
 800832e:	e7f4      	b.n	800831a <_dtoa_r+0x94a>
 8008330:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 8101 	beq.w	800853e <_dtoa_r+0xb6e>
 800833c:	2e00      	cmp	r6, #0
 800833e:	dd05      	ble.n	800834c <_dtoa_r+0x97c>
 8008340:	4629      	mov	r1, r5
 8008342:	4632      	mov	r2, r6
 8008344:	4648      	mov	r0, r9
 8008346:	f000 ffaf 	bl	80092a8 <__lshift>
 800834a:	4605      	mov	r5, r0
 800834c:	9b08      	ldr	r3, [sp, #32]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d05c      	beq.n	800840c <_dtoa_r+0xa3c>
 8008352:	6869      	ldr	r1, [r5, #4]
 8008354:	4648      	mov	r0, r9
 8008356:	f000 fd57 	bl	8008e08 <_Balloc>
 800835a:	4606      	mov	r6, r0
 800835c:	b928      	cbnz	r0, 800836a <_dtoa_r+0x99a>
 800835e:	4b82      	ldr	r3, [pc, #520]	@ (8008568 <_dtoa_r+0xb98>)
 8008360:	4602      	mov	r2, r0
 8008362:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008366:	f7ff bb4a 	b.w	80079fe <_dtoa_r+0x2e>
 800836a:	692a      	ldr	r2, [r5, #16]
 800836c:	3202      	adds	r2, #2
 800836e:	0092      	lsls	r2, r2, #2
 8008370:	f105 010c 	add.w	r1, r5, #12
 8008374:	300c      	adds	r0, #12
 8008376:	f7ff fa84 	bl	8007882 <memcpy>
 800837a:	2201      	movs	r2, #1
 800837c:	4631      	mov	r1, r6
 800837e:	4648      	mov	r0, r9
 8008380:	f000 ff92 	bl	80092a8 <__lshift>
 8008384:	f10a 0301 	add.w	r3, sl, #1
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	eb0a 030b 	add.w	r3, sl, fp
 800838e:	9308      	str	r3, [sp, #32]
 8008390:	9b04      	ldr	r3, [sp, #16]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	462f      	mov	r7, r5
 8008398:	9306      	str	r3, [sp, #24]
 800839a:	4605      	mov	r5, r0
 800839c:	9b00      	ldr	r3, [sp, #0]
 800839e:	9802      	ldr	r0, [sp, #8]
 80083a0:	4621      	mov	r1, r4
 80083a2:	f103 3bff 	add.w	fp, r3, #4294967295
 80083a6:	f7ff fa89 	bl	80078bc <quorem>
 80083aa:	4603      	mov	r3, r0
 80083ac:	3330      	adds	r3, #48	@ 0x30
 80083ae:	9003      	str	r0, [sp, #12]
 80083b0:	4639      	mov	r1, r7
 80083b2:	9802      	ldr	r0, [sp, #8]
 80083b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083b6:	f000 ffe3 	bl	8009380 <__mcmp>
 80083ba:	462a      	mov	r2, r5
 80083bc:	9004      	str	r0, [sp, #16]
 80083be:	4621      	mov	r1, r4
 80083c0:	4648      	mov	r0, r9
 80083c2:	f000 fff9 	bl	80093b8 <__mdiff>
 80083c6:	68c2      	ldr	r2, [r0, #12]
 80083c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ca:	4606      	mov	r6, r0
 80083cc:	bb02      	cbnz	r2, 8008410 <_dtoa_r+0xa40>
 80083ce:	4601      	mov	r1, r0
 80083d0:	9802      	ldr	r0, [sp, #8]
 80083d2:	f000 ffd5 	bl	8009380 <__mcmp>
 80083d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d8:	4602      	mov	r2, r0
 80083da:	4631      	mov	r1, r6
 80083dc:	4648      	mov	r0, r9
 80083de:	920c      	str	r2, [sp, #48]	@ 0x30
 80083e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80083e2:	f000 fd51 	bl	8008e88 <_Bfree>
 80083e6:	9b07      	ldr	r3, [sp, #28]
 80083e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083ea:	9e00      	ldr	r6, [sp, #0]
 80083ec:	ea42 0103 	orr.w	r1, r2, r3
 80083f0:	9b06      	ldr	r3, [sp, #24]
 80083f2:	4319      	orrs	r1, r3
 80083f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f6:	d10d      	bne.n	8008414 <_dtoa_r+0xa44>
 80083f8:	2b39      	cmp	r3, #57	@ 0x39
 80083fa:	d027      	beq.n	800844c <_dtoa_r+0xa7c>
 80083fc:	9a04      	ldr	r2, [sp, #16]
 80083fe:	2a00      	cmp	r2, #0
 8008400:	dd01      	ble.n	8008406 <_dtoa_r+0xa36>
 8008402:	9b03      	ldr	r3, [sp, #12]
 8008404:	3331      	adds	r3, #49	@ 0x31
 8008406:	f88b 3000 	strb.w	r3, [fp]
 800840a:	e52e      	b.n	8007e6a <_dtoa_r+0x49a>
 800840c:	4628      	mov	r0, r5
 800840e:	e7b9      	b.n	8008384 <_dtoa_r+0x9b4>
 8008410:	2201      	movs	r2, #1
 8008412:	e7e2      	b.n	80083da <_dtoa_r+0xa0a>
 8008414:	9904      	ldr	r1, [sp, #16]
 8008416:	2900      	cmp	r1, #0
 8008418:	db04      	blt.n	8008424 <_dtoa_r+0xa54>
 800841a:	9807      	ldr	r0, [sp, #28]
 800841c:	4301      	orrs	r1, r0
 800841e:	9806      	ldr	r0, [sp, #24]
 8008420:	4301      	orrs	r1, r0
 8008422:	d120      	bne.n	8008466 <_dtoa_r+0xa96>
 8008424:	2a00      	cmp	r2, #0
 8008426:	ddee      	ble.n	8008406 <_dtoa_r+0xa36>
 8008428:	9902      	ldr	r1, [sp, #8]
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	2201      	movs	r2, #1
 800842e:	4648      	mov	r0, r9
 8008430:	f000 ff3a 	bl	80092a8 <__lshift>
 8008434:	4621      	mov	r1, r4
 8008436:	9002      	str	r0, [sp, #8]
 8008438:	f000 ffa2 	bl	8009380 <__mcmp>
 800843c:	2800      	cmp	r0, #0
 800843e:	9b00      	ldr	r3, [sp, #0]
 8008440:	dc02      	bgt.n	8008448 <_dtoa_r+0xa78>
 8008442:	d1e0      	bne.n	8008406 <_dtoa_r+0xa36>
 8008444:	07da      	lsls	r2, r3, #31
 8008446:	d5de      	bpl.n	8008406 <_dtoa_r+0xa36>
 8008448:	2b39      	cmp	r3, #57	@ 0x39
 800844a:	d1da      	bne.n	8008402 <_dtoa_r+0xa32>
 800844c:	2339      	movs	r3, #57	@ 0x39
 800844e:	f88b 3000 	strb.w	r3, [fp]
 8008452:	4633      	mov	r3, r6
 8008454:	461e      	mov	r6, r3
 8008456:	3b01      	subs	r3, #1
 8008458:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800845c:	2a39      	cmp	r2, #57	@ 0x39
 800845e:	d04e      	beq.n	80084fe <_dtoa_r+0xb2e>
 8008460:	3201      	adds	r2, #1
 8008462:	701a      	strb	r2, [r3, #0]
 8008464:	e501      	b.n	8007e6a <_dtoa_r+0x49a>
 8008466:	2a00      	cmp	r2, #0
 8008468:	dd03      	ble.n	8008472 <_dtoa_r+0xaa2>
 800846a:	2b39      	cmp	r3, #57	@ 0x39
 800846c:	d0ee      	beq.n	800844c <_dtoa_r+0xa7c>
 800846e:	3301      	adds	r3, #1
 8008470:	e7c9      	b.n	8008406 <_dtoa_r+0xa36>
 8008472:	9a00      	ldr	r2, [sp, #0]
 8008474:	9908      	ldr	r1, [sp, #32]
 8008476:	f802 3c01 	strb.w	r3, [r2, #-1]
 800847a:	428a      	cmp	r2, r1
 800847c:	d028      	beq.n	80084d0 <_dtoa_r+0xb00>
 800847e:	9902      	ldr	r1, [sp, #8]
 8008480:	2300      	movs	r3, #0
 8008482:	220a      	movs	r2, #10
 8008484:	4648      	mov	r0, r9
 8008486:	f000 fd21 	bl	8008ecc <__multadd>
 800848a:	42af      	cmp	r7, r5
 800848c:	9002      	str	r0, [sp, #8]
 800848e:	f04f 0300 	mov.w	r3, #0
 8008492:	f04f 020a 	mov.w	r2, #10
 8008496:	4639      	mov	r1, r7
 8008498:	4648      	mov	r0, r9
 800849a:	d107      	bne.n	80084ac <_dtoa_r+0xadc>
 800849c:	f000 fd16 	bl	8008ecc <__multadd>
 80084a0:	4607      	mov	r7, r0
 80084a2:	4605      	mov	r5, r0
 80084a4:	9b00      	ldr	r3, [sp, #0]
 80084a6:	3301      	adds	r3, #1
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	e777      	b.n	800839c <_dtoa_r+0x9cc>
 80084ac:	f000 fd0e 	bl	8008ecc <__multadd>
 80084b0:	4629      	mov	r1, r5
 80084b2:	4607      	mov	r7, r0
 80084b4:	2300      	movs	r3, #0
 80084b6:	220a      	movs	r2, #10
 80084b8:	4648      	mov	r0, r9
 80084ba:	f000 fd07 	bl	8008ecc <__multadd>
 80084be:	4605      	mov	r5, r0
 80084c0:	e7f0      	b.n	80084a4 <_dtoa_r+0xad4>
 80084c2:	f1bb 0f00 	cmp.w	fp, #0
 80084c6:	bfcc      	ite	gt
 80084c8:	465e      	movgt	r6, fp
 80084ca:	2601      	movle	r6, #1
 80084cc:	4456      	add	r6, sl
 80084ce:	2700      	movs	r7, #0
 80084d0:	9902      	ldr	r1, [sp, #8]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	2201      	movs	r2, #1
 80084d6:	4648      	mov	r0, r9
 80084d8:	f000 fee6 	bl	80092a8 <__lshift>
 80084dc:	4621      	mov	r1, r4
 80084de:	9002      	str	r0, [sp, #8]
 80084e0:	f000 ff4e 	bl	8009380 <__mcmp>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	dcb4      	bgt.n	8008452 <_dtoa_r+0xa82>
 80084e8:	d102      	bne.n	80084f0 <_dtoa_r+0xb20>
 80084ea:	9b00      	ldr	r3, [sp, #0]
 80084ec:	07db      	lsls	r3, r3, #31
 80084ee:	d4b0      	bmi.n	8008452 <_dtoa_r+0xa82>
 80084f0:	4633      	mov	r3, r6
 80084f2:	461e      	mov	r6, r3
 80084f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084f8:	2a30      	cmp	r2, #48	@ 0x30
 80084fa:	d0fa      	beq.n	80084f2 <_dtoa_r+0xb22>
 80084fc:	e4b5      	b.n	8007e6a <_dtoa_r+0x49a>
 80084fe:	459a      	cmp	sl, r3
 8008500:	d1a8      	bne.n	8008454 <_dtoa_r+0xa84>
 8008502:	2331      	movs	r3, #49	@ 0x31
 8008504:	f108 0801 	add.w	r8, r8, #1
 8008508:	f88a 3000 	strb.w	r3, [sl]
 800850c:	e4ad      	b.n	8007e6a <_dtoa_r+0x49a>
 800850e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008510:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800856c <_dtoa_r+0xb9c>
 8008514:	b11b      	cbz	r3, 800851e <_dtoa_r+0xb4e>
 8008516:	f10a 0308 	add.w	r3, sl, #8
 800851a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	4650      	mov	r0, sl
 8008520:	b017      	add	sp, #92	@ 0x5c
 8008522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008526:	9b07      	ldr	r3, [sp, #28]
 8008528:	2b01      	cmp	r3, #1
 800852a:	f77f ae2e 	ble.w	800818a <_dtoa_r+0x7ba>
 800852e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008530:	9308      	str	r3, [sp, #32]
 8008532:	2001      	movs	r0, #1
 8008534:	e64d      	b.n	80081d2 <_dtoa_r+0x802>
 8008536:	f1bb 0f00 	cmp.w	fp, #0
 800853a:	f77f aed9 	ble.w	80082f0 <_dtoa_r+0x920>
 800853e:	4656      	mov	r6, sl
 8008540:	9802      	ldr	r0, [sp, #8]
 8008542:	4621      	mov	r1, r4
 8008544:	f7ff f9ba 	bl	80078bc <quorem>
 8008548:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800854c:	f806 3b01 	strb.w	r3, [r6], #1
 8008550:	eba6 020a 	sub.w	r2, r6, sl
 8008554:	4593      	cmp	fp, r2
 8008556:	ddb4      	ble.n	80084c2 <_dtoa_r+0xaf2>
 8008558:	9902      	ldr	r1, [sp, #8]
 800855a:	2300      	movs	r3, #0
 800855c:	220a      	movs	r2, #10
 800855e:	4648      	mov	r0, r9
 8008560:	f000 fcb4 	bl	8008ecc <__multadd>
 8008564:	9002      	str	r0, [sp, #8]
 8008566:	e7eb      	b.n	8008540 <_dtoa_r+0xb70>
 8008568:	0800a427 	.word	0x0800a427
 800856c:	0800a3ab 	.word	0x0800a3ab

08008570 <_free_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4605      	mov	r5, r0
 8008574:	2900      	cmp	r1, #0
 8008576:	d041      	beq.n	80085fc <_free_r+0x8c>
 8008578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800857c:	1f0c      	subs	r4, r1, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	bfb8      	it	lt
 8008582:	18e4      	addlt	r4, r4, r3
 8008584:	f000 fc34 	bl	8008df0 <__malloc_lock>
 8008588:	4a1d      	ldr	r2, [pc, #116]	@ (8008600 <_free_r+0x90>)
 800858a:	6813      	ldr	r3, [r2, #0]
 800858c:	b933      	cbnz	r3, 800859c <_free_r+0x2c>
 800858e:	6063      	str	r3, [r4, #4]
 8008590:	6014      	str	r4, [r2, #0]
 8008592:	4628      	mov	r0, r5
 8008594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008598:	f000 bc30 	b.w	8008dfc <__malloc_unlock>
 800859c:	42a3      	cmp	r3, r4
 800859e:	d908      	bls.n	80085b2 <_free_r+0x42>
 80085a0:	6820      	ldr	r0, [r4, #0]
 80085a2:	1821      	adds	r1, r4, r0
 80085a4:	428b      	cmp	r3, r1
 80085a6:	bf01      	itttt	eq
 80085a8:	6819      	ldreq	r1, [r3, #0]
 80085aa:	685b      	ldreq	r3, [r3, #4]
 80085ac:	1809      	addeq	r1, r1, r0
 80085ae:	6021      	streq	r1, [r4, #0]
 80085b0:	e7ed      	b.n	800858e <_free_r+0x1e>
 80085b2:	461a      	mov	r2, r3
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	b10b      	cbz	r3, 80085bc <_free_r+0x4c>
 80085b8:	42a3      	cmp	r3, r4
 80085ba:	d9fa      	bls.n	80085b2 <_free_r+0x42>
 80085bc:	6811      	ldr	r1, [r2, #0]
 80085be:	1850      	adds	r0, r2, r1
 80085c0:	42a0      	cmp	r0, r4
 80085c2:	d10b      	bne.n	80085dc <_free_r+0x6c>
 80085c4:	6820      	ldr	r0, [r4, #0]
 80085c6:	4401      	add	r1, r0
 80085c8:	1850      	adds	r0, r2, r1
 80085ca:	4283      	cmp	r3, r0
 80085cc:	6011      	str	r1, [r2, #0]
 80085ce:	d1e0      	bne.n	8008592 <_free_r+0x22>
 80085d0:	6818      	ldr	r0, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	6053      	str	r3, [r2, #4]
 80085d6:	4408      	add	r0, r1
 80085d8:	6010      	str	r0, [r2, #0]
 80085da:	e7da      	b.n	8008592 <_free_r+0x22>
 80085dc:	d902      	bls.n	80085e4 <_free_r+0x74>
 80085de:	230c      	movs	r3, #12
 80085e0:	602b      	str	r3, [r5, #0]
 80085e2:	e7d6      	b.n	8008592 <_free_r+0x22>
 80085e4:	6820      	ldr	r0, [r4, #0]
 80085e6:	1821      	adds	r1, r4, r0
 80085e8:	428b      	cmp	r3, r1
 80085ea:	bf04      	itt	eq
 80085ec:	6819      	ldreq	r1, [r3, #0]
 80085ee:	685b      	ldreq	r3, [r3, #4]
 80085f0:	6063      	str	r3, [r4, #4]
 80085f2:	bf04      	itt	eq
 80085f4:	1809      	addeq	r1, r1, r0
 80085f6:	6021      	streq	r1, [r4, #0]
 80085f8:	6054      	str	r4, [r2, #4]
 80085fa:	e7ca      	b.n	8008592 <_free_r+0x22>
 80085fc:	bd38      	pop	{r3, r4, r5, pc}
 80085fe:	bf00      	nop
 8008600:	20000680 	.word	0x20000680

08008604 <rshift>:
 8008604:	6903      	ldr	r3, [r0, #16]
 8008606:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800860a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800860e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008612:	f100 0414 	add.w	r4, r0, #20
 8008616:	dd45      	ble.n	80086a4 <rshift+0xa0>
 8008618:	f011 011f 	ands.w	r1, r1, #31
 800861c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008620:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008624:	d10c      	bne.n	8008640 <rshift+0x3c>
 8008626:	f100 0710 	add.w	r7, r0, #16
 800862a:	4629      	mov	r1, r5
 800862c:	42b1      	cmp	r1, r6
 800862e:	d334      	bcc.n	800869a <rshift+0x96>
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	1eea      	subs	r2, r5, #3
 8008636:	4296      	cmp	r6, r2
 8008638:	bf38      	it	cc
 800863a:	2300      	movcc	r3, #0
 800863c:	4423      	add	r3, r4
 800863e:	e015      	b.n	800866c <rshift+0x68>
 8008640:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008644:	f1c1 0820 	rsb	r8, r1, #32
 8008648:	40cf      	lsrs	r7, r1
 800864a:	f105 0e04 	add.w	lr, r5, #4
 800864e:	46a1      	mov	r9, r4
 8008650:	4576      	cmp	r6, lr
 8008652:	46f4      	mov	ip, lr
 8008654:	d815      	bhi.n	8008682 <rshift+0x7e>
 8008656:	1a9a      	subs	r2, r3, r2
 8008658:	0092      	lsls	r2, r2, #2
 800865a:	3a04      	subs	r2, #4
 800865c:	3501      	adds	r5, #1
 800865e:	42ae      	cmp	r6, r5
 8008660:	bf38      	it	cc
 8008662:	2200      	movcc	r2, #0
 8008664:	18a3      	adds	r3, r4, r2
 8008666:	50a7      	str	r7, [r4, r2]
 8008668:	b107      	cbz	r7, 800866c <rshift+0x68>
 800866a:	3304      	adds	r3, #4
 800866c:	1b1a      	subs	r2, r3, r4
 800866e:	42a3      	cmp	r3, r4
 8008670:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008674:	bf08      	it	eq
 8008676:	2300      	moveq	r3, #0
 8008678:	6102      	str	r2, [r0, #16]
 800867a:	bf08      	it	eq
 800867c:	6143      	streq	r3, [r0, #20]
 800867e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008682:	f8dc c000 	ldr.w	ip, [ip]
 8008686:	fa0c fc08 	lsl.w	ip, ip, r8
 800868a:	ea4c 0707 	orr.w	r7, ip, r7
 800868e:	f849 7b04 	str.w	r7, [r9], #4
 8008692:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008696:	40cf      	lsrs	r7, r1
 8008698:	e7da      	b.n	8008650 <rshift+0x4c>
 800869a:	f851 cb04 	ldr.w	ip, [r1], #4
 800869e:	f847 cf04 	str.w	ip, [r7, #4]!
 80086a2:	e7c3      	b.n	800862c <rshift+0x28>
 80086a4:	4623      	mov	r3, r4
 80086a6:	e7e1      	b.n	800866c <rshift+0x68>

080086a8 <__hexdig_fun>:
 80086a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80086ac:	2b09      	cmp	r3, #9
 80086ae:	d802      	bhi.n	80086b6 <__hexdig_fun+0xe>
 80086b0:	3820      	subs	r0, #32
 80086b2:	b2c0      	uxtb	r0, r0
 80086b4:	4770      	bx	lr
 80086b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	d801      	bhi.n	80086c2 <__hexdig_fun+0x1a>
 80086be:	3847      	subs	r0, #71	@ 0x47
 80086c0:	e7f7      	b.n	80086b2 <__hexdig_fun+0xa>
 80086c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80086c6:	2b05      	cmp	r3, #5
 80086c8:	d801      	bhi.n	80086ce <__hexdig_fun+0x26>
 80086ca:	3827      	subs	r0, #39	@ 0x27
 80086cc:	e7f1      	b.n	80086b2 <__hexdig_fun+0xa>
 80086ce:	2000      	movs	r0, #0
 80086d0:	4770      	bx	lr
	...

080086d4 <__gethex>:
 80086d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d8:	b085      	sub	sp, #20
 80086da:	468a      	mov	sl, r1
 80086dc:	9302      	str	r3, [sp, #8]
 80086de:	680b      	ldr	r3, [r1, #0]
 80086e0:	9001      	str	r0, [sp, #4]
 80086e2:	4690      	mov	r8, r2
 80086e4:	1c9c      	adds	r4, r3, #2
 80086e6:	46a1      	mov	r9, r4
 80086e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80086ec:	2830      	cmp	r0, #48	@ 0x30
 80086ee:	d0fa      	beq.n	80086e6 <__gethex+0x12>
 80086f0:	eba9 0303 	sub.w	r3, r9, r3
 80086f4:	f1a3 0b02 	sub.w	fp, r3, #2
 80086f8:	f7ff ffd6 	bl	80086a8 <__hexdig_fun>
 80086fc:	4605      	mov	r5, r0
 80086fe:	2800      	cmp	r0, #0
 8008700:	d168      	bne.n	80087d4 <__gethex+0x100>
 8008702:	49a0      	ldr	r1, [pc, #640]	@ (8008984 <__gethex+0x2b0>)
 8008704:	2201      	movs	r2, #1
 8008706:	4648      	mov	r0, r9
 8008708:	f7ff f831 	bl	800776e <strncmp>
 800870c:	4607      	mov	r7, r0
 800870e:	2800      	cmp	r0, #0
 8008710:	d167      	bne.n	80087e2 <__gethex+0x10e>
 8008712:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008716:	4626      	mov	r6, r4
 8008718:	f7ff ffc6 	bl	80086a8 <__hexdig_fun>
 800871c:	2800      	cmp	r0, #0
 800871e:	d062      	beq.n	80087e6 <__gethex+0x112>
 8008720:	4623      	mov	r3, r4
 8008722:	7818      	ldrb	r0, [r3, #0]
 8008724:	2830      	cmp	r0, #48	@ 0x30
 8008726:	4699      	mov	r9, r3
 8008728:	f103 0301 	add.w	r3, r3, #1
 800872c:	d0f9      	beq.n	8008722 <__gethex+0x4e>
 800872e:	f7ff ffbb 	bl	80086a8 <__hexdig_fun>
 8008732:	fab0 f580 	clz	r5, r0
 8008736:	096d      	lsrs	r5, r5, #5
 8008738:	f04f 0b01 	mov.w	fp, #1
 800873c:	464a      	mov	r2, r9
 800873e:	4616      	mov	r6, r2
 8008740:	3201      	adds	r2, #1
 8008742:	7830      	ldrb	r0, [r6, #0]
 8008744:	f7ff ffb0 	bl	80086a8 <__hexdig_fun>
 8008748:	2800      	cmp	r0, #0
 800874a:	d1f8      	bne.n	800873e <__gethex+0x6a>
 800874c:	498d      	ldr	r1, [pc, #564]	@ (8008984 <__gethex+0x2b0>)
 800874e:	2201      	movs	r2, #1
 8008750:	4630      	mov	r0, r6
 8008752:	f7ff f80c 	bl	800776e <strncmp>
 8008756:	2800      	cmp	r0, #0
 8008758:	d13f      	bne.n	80087da <__gethex+0x106>
 800875a:	b944      	cbnz	r4, 800876e <__gethex+0x9a>
 800875c:	1c74      	adds	r4, r6, #1
 800875e:	4622      	mov	r2, r4
 8008760:	4616      	mov	r6, r2
 8008762:	3201      	adds	r2, #1
 8008764:	7830      	ldrb	r0, [r6, #0]
 8008766:	f7ff ff9f 	bl	80086a8 <__hexdig_fun>
 800876a:	2800      	cmp	r0, #0
 800876c:	d1f8      	bne.n	8008760 <__gethex+0x8c>
 800876e:	1ba4      	subs	r4, r4, r6
 8008770:	00a7      	lsls	r7, r4, #2
 8008772:	7833      	ldrb	r3, [r6, #0]
 8008774:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008778:	2b50      	cmp	r3, #80	@ 0x50
 800877a:	d13e      	bne.n	80087fa <__gethex+0x126>
 800877c:	7873      	ldrb	r3, [r6, #1]
 800877e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008780:	d033      	beq.n	80087ea <__gethex+0x116>
 8008782:	2b2d      	cmp	r3, #45	@ 0x2d
 8008784:	d034      	beq.n	80087f0 <__gethex+0x11c>
 8008786:	1c71      	adds	r1, r6, #1
 8008788:	2400      	movs	r4, #0
 800878a:	7808      	ldrb	r0, [r1, #0]
 800878c:	f7ff ff8c 	bl	80086a8 <__hexdig_fun>
 8008790:	1e43      	subs	r3, r0, #1
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b18      	cmp	r3, #24
 8008796:	d830      	bhi.n	80087fa <__gethex+0x126>
 8008798:	f1a0 0210 	sub.w	r2, r0, #16
 800879c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80087a0:	f7ff ff82 	bl	80086a8 <__hexdig_fun>
 80087a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80087a8:	fa5f fc8c 	uxtb.w	ip, ip
 80087ac:	f1bc 0f18 	cmp.w	ip, #24
 80087b0:	f04f 030a 	mov.w	r3, #10
 80087b4:	d91e      	bls.n	80087f4 <__gethex+0x120>
 80087b6:	b104      	cbz	r4, 80087ba <__gethex+0xe6>
 80087b8:	4252      	negs	r2, r2
 80087ba:	4417      	add	r7, r2
 80087bc:	f8ca 1000 	str.w	r1, [sl]
 80087c0:	b1ed      	cbz	r5, 80087fe <__gethex+0x12a>
 80087c2:	f1bb 0f00 	cmp.w	fp, #0
 80087c6:	bf0c      	ite	eq
 80087c8:	2506      	moveq	r5, #6
 80087ca:	2500      	movne	r5, #0
 80087cc:	4628      	mov	r0, r5
 80087ce:	b005      	add	sp, #20
 80087d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d4:	2500      	movs	r5, #0
 80087d6:	462c      	mov	r4, r5
 80087d8:	e7b0      	b.n	800873c <__gethex+0x68>
 80087da:	2c00      	cmp	r4, #0
 80087dc:	d1c7      	bne.n	800876e <__gethex+0x9a>
 80087de:	4627      	mov	r7, r4
 80087e0:	e7c7      	b.n	8008772 <__gethex+0x9e>
 80087e2:	464e      	mov	r6, r9
 80087e4:	462f      	mov	r7, r5
 80087e6:	2501      	movs	r5, #1
 80087e8:	e7c3      	b.n	8008772 <__gethex+0x9e>
 80087ea:	2400      	movs	r4, #0
 80087ec:	1cb1      	adds	r1, r6, #2
 80087ee:	e7cc      	b.n	800878a <__gethex+0xb6>
 80087f0:	2401      	movs	r4, #1
 80087f2:	e7fb      	b.n	80087ec <__gethex+0x118>
 80087f4:	fb03 0002 	mla	r0, r3, r2, r0
 80087f8:	e7ce      	b.n	8008798 <__gethex+0xc4>
 80087fa:	4631      	mov	r1, r6
 80087fc:	e7de      	b.n	80087bc <__gethex+0xe8>
 80087fe:	eba6 0309 	sub.w	r3, r6, r9
 8008802:	3b01      	subs	r3, #1
 8008804:	4629      	mov	r1, r5
 8008806:	2b07      	cmp	r3, #7
 8008808:	dc0a      	bgt.n	8008820 <__gethex+0x14c>
 800880a:	9801      	ldr	r0, [sp, #4]
 800880c:	f000 fafc 	bl	8008e08 <_Balloc>
 8008810:	4604      	mov	r4, r0
 8008812:	b940      	cbnz	r0, 8008826 <__gethex+0x152>
 8008814:	4b5c      	ldr	r3, [pc, #368]	@ (8008988 <__gethex+0x2b4>)
 8008816:	4602      	mov	r2, r0
 8008818:	21e4      	movs	r1, #228	@ 0xe4
 800881a:	485c      	ldr	r0, [pc, #368]	@ (800898c <__gethex+0x2b8>)
 800881c:	f001 fa54 	bl	8009cc8 <__assert_func>
 8008820:	3101      	adds	r1, #1
 8008822:	105b      	asrs	r3, r3, #1
 8008824:	e7ef      	b.n	8008806 <__gethex+0x132>
 8008826:	f100 0a14 	add.w	sl, r0, #20
 800882a:	2300      	movs	r3, #0
 800882c:	4655      	mov	r5, sl
 800882e:	469b      	mov	fp, r3
 8008830:	45b1      	cmp	r9, r6
 8008832:	d337      	bcc.n	80088a4 <__gethex+0x1d0>
 8008834:	f845 bb04 	str.w	fp, [r5], #4
 8008838:	eba5 050a 	sub.w	r5, r5, sl
 800883c:	10ad      	asrs	r5, r5, #2
 800883e:	6125      	str	r5, [r4, #16]
 8008840:	4658      	mov	r0, fp
 8008842:	f000 fbd3 	bl	8008fec <__hi0bits>
 8008846:	016d      	lsls	r5, r5, #5
 8008848:	f8d8 6000 	ldr.w	r6, [r8]
 800884c:	1a2d      	subs	r5, r5, r0
 800884e:	42b5      	cmp	r5, r6
 8008850:	dd54      	ble.n	80088fc <__gethex+0x228>
 8008852:	1bad      	subs	r5, r5, r6
 8008854:	4629      	mov	r1, r5
 8008856:	4620      	mov	r0, r4
 8008858:	f000 ff5f 	bl	800971a <__any_on>
 800885c:	4681      	mov	r9, r0
 800885e:	b178      	cbz	r0, 8008880 <__gethex+0x1ac>
 8008860:	1e6b      	subs	r3, r5, #1
 8008862:	1159      	asrs	r1, r3, #5
 8008864:	f003 021f 	and.w	r2, r3, #31
 8008868:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800886c:	f04f 0901 	mov.w	r9, #1
 8008870:	fa09 f202 	lsl.w	r2, r9, r2
 8008874:	420a      	tst	r2, r1
 8008876:	d003      	beq.n	8008880 <__gethex+0x1ac>
 8008878:	454b      	cmp	r3, r9
 800887a:	dc36      	bgt.n	80088ea <__gethex+0x216>
 800887c:	f04f 0902 	mov.w	r9, #2
 8008880:	4629      	mov	r1, r5
 8008882:	4620      	mov	r0, r4
 8008884:	f7ff febe 	bl	8008604 <rshift>
 8008888:	442f      	add	r7, r5
 800888a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800888e:	42bb      	cmp	r3, r7
 8008890:	da42      	bge.n	8008918 <__gethex+0x244>
 8008892:	9801      	ldr	r0, [sp, #4]
 8008894:	4621      	mov	r1, r4
 8008896:	f000 faf7 	bl	8008e88 <_Bfree>
 800889a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800889c:	2300      	movs	r3, #0
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	25a3      	movs	r5, #163	@ 0xa3
 80088a2:	e793      	b.n	80087cc <__gethex+0xf8>
 80088a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80088a8:	2a2e      	cmp	r2, #46	@ 0x2e
 80088aa:	d012      	beq.n	80088d2 <__gethex+0x1fe>
 80088ac:	2b20      	cmp	r3, #32
 80088ae:	d104      	bne.n	80088ba <__gethex+0x1e6>
 80088b0:	f845 bb04 	str.w	fp, [r5], #4
 80088b4:	f04f 0b00 	mov.w	fp, #0
 80088b8:	465b      	mov	r3, fp
 80088ba:	7830      	ldrb	r0, [r6, #0]
 80088bc:	9303      	str	r3, [sp, #12]
 80088be:	f7ff fef3 	bl	80086a8 <__hexdig_fun>
 80088c2:	9b03      	ldr	r3, [sp, #12]
 80088c4:	f000 000f 	and.w	r0, r0, #15
 80088c8:	4098      	lsls	r0, r3
 80088ca:	ea4b 0b00 	orr.w	fp, fp, r0
 80088ce:	3304      	adds	r3, #4
 80088d0:	e7ae      	b.n	8008830 <__gethex+0x15c>
 80088d2:	45b1      	cmp	r9, r6
 80088d4:	d8ea      	bhi.n	80088ac <__gethex+0x1d8>
 80088d6:	492b      	ldr	r1, [pc, #172]	@ (8008984 <__gethex+0x2b0>)
 80088d8:	9303      	str	r3, [sp, #12]
 80088da:	2201      	movs	r2, #1
 80088dc:	4630      	mov	r0, r6
 80088de:	f7fe ff46 	bl	800776e <strncmp>
 80088e2:	9b03      	ldr	r3, [sp, #12]
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d1e1      	bne.n	80088ac <__gethex+0x1d8>
 80088e8:	e7a2      	b.n	8008830 <__gethex+0x15c>
 80088ea:	1ea9      	subs	r1, r5, #2
 80088ec:	4620      	mov	r0, r4
 80088ee:	f000 ff14 	bl	800971a <__any_on>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d0c2      	beq.n	800887c <__gethex+0x1a8>
 80088f6:	f04f 0903 	mov.w	r9, #3
 80088fa:	e7c1      	b.n	8008880 <__gethex+0x1ac>
 80088fc:	da09      	bge.n	8008912 <__gethex+0x23e>
 80088fe:	1b75      	subs	r5, r6, r5
 8008900:	4621      	mov	r1, r4
 8008902:	9801      	ldr	r0, [sp, #4]
 8008904:	462a      	mov	r2, r5
 8008906:	f000 fccf 	bl	80092a8 <__lshift>
 800890a:	1b7f      	subs	r7, r7, r5
 800890c:	4604      	mov	r4, r0
 800890e:	f100 0a14 	add.w	sl, r0, #20
 8008912:	f04f 0900 	mov.w	r9, #0
 8008916:	e7b8      	b.n	800888a <__gethex+0x1b6>
 8008918:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800891c:	42bd      	cmp	r5, r7
 800891e:	dd6f      	ble.n	8008a00 <__gethex+0x32c>
 8008920:	1bed      	subs	r5, r5, r7
 8008922:	42ae      	cmp	r6, r5
 8008924:	dc34      	bgt.n	8008990 <__gethex+0x2bc>
 8008926:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800892a:	2b02      	cmp	r3, #2
 800892c:	d022      	beq.n	8008974 <__gethex+0x2a0>
 800892e:	2b03      	cmp	r3, #3
 8008930:	d024      	beq.n	800897c <__gethex+0x2a8>
 8008932:	2b01      	cmp	r3, #1
 8008934:	d115      	bne.n	8008962 <__gethex+0x28e>
 8008936:	42ae      	cmp	r6, r5
 8008938:	d113      	bne.n	8008962 <__gethex+0x28e>
 800893a:	2e01      	cmp	r6, #1
 800893c:	d10b      	bne.n	8008956 <__gethex+0x282>
 800893e:	9a02      	ldr	r2, [sp, #8]
 8008940:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	2301      	movs	r3, #1
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	f8ca 3000 	str.w	r3, [sl]
 800894e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008950:	2562      	movs	r5, #98	@ 0x62
 8008952:	601c      	str	r4, [r3, #0]
 8008954:	e73a      	b.n	80087cc <__gethex+0xf8>
 8008956:	1e71      	subs	r1, r6, #1
 8008958:	4620      	mov	r0, r4
 800895a:	f000 fede 	bl	800971a <__any_on>
 800895e:	2800      	cmp	r0, #0
 8008960:	d1ed      	bne.n	800893e <__gethex+0x26a>
 8008962:	9801      	ldr	r0, [sp, #4]
 8008964:	4621      	mov	r1, r4
 8008966:	f000 fa8f 	bl	8008e88 <_Bfree>
 800896a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800896c:	2300      	movs	r3, #0
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	2550      	movs	r5, #80	@ 0x50
 8008972:	e72b      	b.n	80087cc <__gethex+0xf8>
 8008974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1f3      	bne.n	8008962 <__gethex+0x28e>
 800897a:	e7e0      	b.n	800893e <__gethex+0x26a>
 800897c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1dd      	bne.n	800893e <__gethex+0x26a>
 8008982:	e7ee      	b.n	8008962 <__gethex+0x28e>
 8008984:	0800a368 	.word	0x0800a368
 8008988:	0800a427 	.word	0x0800a427
 800898c:	0800a438 	.word	0x0800a438
 8008990:	1e6f      	subs	r7, r5, #1
 8008992:	f1b9 0f00 	cmp.w	r9, #0
 8008996:	d130      	bne.n	80089fa <__gethex+0x326>
 8008998:	b127      	cbz	r7, 80089a4 <__gethex+0x2d0>
 800899a:	4639      	mov	r1, r7
 800899c:	4620      	mov	r0, r4
 800899e:	f000 febc 	bl	800971a <__any_on>
 80089a2:	4681      	mov	r9, r0
 80089a4:	117a      	asrs	r2, r7, #5
 80089a6:	2301      	movs	r3, #1
 80089a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80089ac:	f007 071f 	and.w	r7, r7, #31
 80089b0:	40bb      	lsls	r3, r7
 80089b2:	4213      	tst	r3, r2
 80089b4:	4629      	mov	r1, r5
 80089b6:	4620      	mov	r0, r4
 80089b8:	bf18      	it	ne
 80089ba:	f049 0902 	orrne.w	r9, r9, #2
 80089be:	f7ff fe21 	bl	8008604 <rshift>
 80089c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80089c6:	1b76      	subs	r6, r6, r5
 80089c8:	2502      	movs	r5, #2
 80089ca:	f1b9 0f00 	cmp.w	r9, #0
 80089ce:	d047      	beq.n	8008a60 <__gethex+0x38c>
 80089d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d015      	beq.n	8008a04 <__gethex+0x330>
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d017      	beq.n	8008a0c <__gethex+0x338>
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d109      	bne.n	80089f4 <__gethex+0x320>
 80089e0:	f019 0f02 	tst.w	r9, #2
 80089e4:	d006      	beq.n	80089f4 <__gethex+0x320>
 80089e6:	f8da 3000 	ldr.w	r3, [sl]
 80089ea:	ea49 0903 	orr.w	r9, r9, r3
 80089ee:	f019 0f01 	tst.w	r9, #1
 80089f2:	d10e      	bne.n	8008a12 <__gethex+0x33e>
 80089f4:	f045 0510 	orr.w	r5, r5, #16
 80089f8:	e032      	b.n	8008a60 <__gethex+0x38c>
 80089fa:	f04f 0901 	mov.w	r9, #1
 80089fe:	e7d1      	b.n	80089a4 <__gethex+0x2d0>
 8008a00:	2501      	movs	r5, #1
 8008a02:	e7e2      	b.n	80089ca <__gethex+0x2f6>
 8008a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a06:	f1c3 0301 	rsb	r3, r3, #1
 8008a0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0f0      	beq.n	80089f4 <__gethex+0x320>
 8008a12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a16:	f104 0314 	add.w	r3, r4, #20
 8008a1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008a1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008a22:	f04f 0c00 	mov.w	ip, #0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008a30:	d01b      	beq.n	8008a6a <__gethex+0x396>
 8008a32:	3201      	adds	r2, #1
 8008a34:	6002      	str	r2, [r0, #0]
 8008a36:	2d02      	cmp	r5, #2
 8008a38:	f104 0314 	add.w	r3, r4, #20
 8008a3c:	d13c      	bne.n	8008ab8 <__gethex+0x3e4>
 8008a3e:	f8d8 2000 	ldr.w	r2, [r8]
 8008a42:	3a01      	subs	r2, #1
 8008a44:	42b2      	cmp	r2, r6
 8008a46:	d109      	bne.n	8008a5c <__gethex+0x388>
 8008a48:	1171      	asrs	r1, r6, #5
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a50:	f006 061f 	and.w	r6, r6, #31
 8008a54:	fa02 f606 	lsl.w	r6, r2, r6
 8008a58:	421e      	tst	r6, r3
 8008a5a:	d13a      	bne.n	8008ad2 <__gethex+0x3fe>
 8008a5c:	f045 0520 	orr.w	r5, r5, #32
 8008a60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a62:	601c      	str	r4, [r3, #0]
 8008a64:	9b02      	ldr	r3, [sp, #8]
 8008a66:	601f      	str	r7, [r3, #0]
 8008a68:	e6b0      	b.n	80087cc <__gethex+0xf8>
 8008a6a:	4299      	cmp	r1, r3
 8008a6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008a70:	d8d9      	bhi.n	8008a26 <__gethex+0x352>
 8008a72:	68a3      	ldr	r3, [r4, #8]
 8008a74:	459b      	cmp	fp, r3
 8008a76:	db17      	blt.n	8008aa8 <__gethex+0x3d4>
 8008a78:	6861      	ldr	r1, [r4, #4]
 8008a7a:	9801      	ldr	r0, [sp, #4]
 8008a7c:	3101      	adds	r1, #1
 8008a7e:	f000 f9c3 	bl	8008e08 <_Balloc>
 8008a82:	4681      	mov	r9, r0
 8008a84:	b918      	cbnz	r0, 8008a8e <__gethex+0x3ba>
 8008a86:	4b1a      	ldr	r3, [pc, #104]	@ (8008af0 <__gethex+0x41c>)
 8008a88:	4602      	mov	r2, r0
 8008a8a:	2184      	movs	r1, #132	@ 0x84
 8008a8c:	e6c5      	b.n	800881a <__gethex+0x146>
 8008a8e:	6922      	ldr	r2, [r4, #16]
 8008a90:	3202      	adds	r2, #2
 8008a92:	f104 010c 	add.w	r1, r4, #12
 8008a96:	0092      	lsls	r2, r2, #2
 8008a98:	300c      	adds	r0, #12
 8008a9a:	f7fe fef2 	bl	8007882 <memcpy>
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	9801      	ldr	r0, [sp, #4]
 8008aa2:	f000 f9f1 	bl	8008e88 <_Bfree>
 8008aa6:	464c      	mov	r4, r9
 8008aa8:	6923      	ldr	r3, [r4, #16]
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ab0:	6122      	str	r2, [r4, #16]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	615a      	str	r2, [r3, #20]
 8008ab6:	e7be      	b.n	8008a36 <__gethex+0x362>
 8008ab8:	6922      	ldr	r2, [r4, #16]
 8008aba:	455a      	cmp	r2, fp
 8008abc:	dd0b      	ble.n	8008ad6 <__gethex+0x402>
 8008abe:	2101      	movs	r1, #1
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f7ff fd9f 	bl	8008604 <rshift>
 8008ac6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008aca:	3701      	adds	r7, #1
 8008acc:	42bb      	cmp	r3, r7
 8008ace:	f6ff aee0 	blt.w	8008892 <__gethex+0x1be>
 8008ad2:	2501      	movs	r5, #1
 8008ad4:	e7c2      	b.n	8008a5c <__gethex+0x388>
 8008ad6:	f016 061f 	ands.w	r6, r6, #31
 8008ada:	d0fa      	beq.n	8008ad2 <__gethex+0x3fe>
 8008adc:	4453      	add	r3, sl
 8008ade:	f1c6 0620 	rsb	r6, r6, #32
 8008ae2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008ae6:	f000 fa81 	bl	8008fec <__hi0bits>
 8008aea:	42b0      	cmp	r0, r6
 8008aec:	dbe7      	blt.n	8008abe <__gethex+0x3ea>
 8008aee:	e7f0      	b.n	8008ad2 <__gethex+0x3fe>
 8008af0:	0800a427 	.word	0x0800a427

08008af4 <L_shift>:
 8008af4:	f1c2 0208 	rsb	r2, r2, #8
 8008af8:	0092      	lsls	r2, r2, #2
 8008afa:	b570      	push	{r4, r5, r6, lr}
 8008afc:	f1c2 0620 	rsb	r6, r2, #32
 8008b00:	6843      	ldr	r3, [r0, #4]
 8008b02:	6804      	ldr	r4, [r0, #0]
 8008b04:	fa03 f506 	lsl.w	r5, r3, r6
 8008b08:	432c      	orrs	r4, r5
 8008b0a:	40d3      	lsrs	r3, r2
 8008b0c:	6004      	str	r4, [r0, #0]
 8008b0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b12:	4288      	cmp	r0, r1
 8008b14:	d3f4      	bcc.n	8008b00 <L_shift+0xc>
 8008b16:	bd70      	pop	{r4, r5, r6, pc}

08008b18 <__match>:
 8008b18:	b530      	push	{r4, r5, lr}
 8008b1a:	6803      	ldr	r3, [r0, #0]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b22:	b914      	cbnz	r4, 8008b2a <__match+0x12>
 8008b24:	6003      	str	r3, [r0, #0]
 8008b26:	2001      	movs	r0, #1
 8008b28:	bd30      	pop	{r4, r5, pc}
 8008b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008b32:	2d19      	cmp	r5, #25
 8008b34:	bf98      	it	ls
 8008b36:	3220      	addls	r2, #32
 8008b38:	42a2      	cmp	r2, r4
 8008b3a:	d0f0      	beq.n	8008b1e <__match+0x6>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	e7f3      	b.n	8008b28 <__match+0x10>

08008b40 <__hexnan>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	680b      	ldr	r3, [r1, #0]
 8008b46:	6801      	ldr	r1, [r0, #0]
 8008b48:	115e      	asrs	r6, r3, #5
 8008b4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008b4e:	f013 031f 	ands.w	r3, r3, #31
 8008b52:	b087      	sub	sp, #28
 8008b54:	bf18      	it	ne
 8008b56:	3604      	addne	r6, #4
 8008b58:	2500      	movs	r5, #0
 8008b5a:	1f37      	subs	r7, r6, #4
 8008b5c:	4682      	mov	sl, r0
 8008b5e:	4690      	mov	r8, r2
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b66:	46b9      	mov	r9, r7
 8008b68:	463c      	mov	r4, r7
 8008b6a:	9502      	str	r5, [sp, #8]
 8008b6c:	46ab      	mov	fp, r5
 8008b6e:	784a      	ldrb	r2, [r1, #1]
 8008b70:	1c4b      	adds	r3, r1, #1
 8008b72:	9303      	str	r3, [sp, #12]
 8008b74:	b342      	cbz	r2, 8008bc8 <__hexnan+0x88>
 8008b76:	4610      	mov	r0, r2
 8008b78:	9105      	str	r1, [sp, #20]
 8008b7a:	9204      	str	r2, [sp, #16]
 8008b7c:	f7ff fd94 	bl	80086a8 <__hexdig_fun>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d151      	bne.n	8008c28 <__hexnan+0xe8>
 8008b84:	9a04      	ldr	r2, [sp, #16]
 8008b86:	9905      	ldr	r1, [sp, #20]
 8008b88:	2a20      	cmp	r2, #32
 8008b8a:	d818      	bhi.n	8008bbe <__hexnan+0x7e>
 8008b8c:	9b02      	ldr	r3, [sp, #8]
 8008b8e:	459b      	cmp	fp, r3
 8008b90:	dd13      	ble.n	8008bba <__hexnan+0x7a>
 8008b92:	454c      	cmp	r4, r9
 8008b94:	d206      	bcs.n	8008ba4 <__hexnan+0x64>
 8008b96:	2d07      	cmp	r5, #7
 8008b98:	dc04      	bgt.n	8008ba4 <__hexnan+0x64>
 8008b9a:	462a      	mov	r2, r5
 8008b9c:	4649      	mov	r1, r9
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f7ff ffa8 	bl	8008af4 <L_shift>
 8008ba4:	4544      	cmp	r4, r8
 8008ba6:	d952      	bls.n	8008c4e <__hexnan+0x10e>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f1a4 0904 	sub.w	r9, r4, #4
 8008bae:	f844 3c04 	str.w	r3, [r4, #-4]
 8008bb2:	f8cd b008 	str.w	fp, [sp, #8]
 8008bb6:	464c      	mov	r4, r9
 8008bb8:	461d      	mov	r5, r3
 8008bba:	9903      	ldr	r1, [sp, #12]
 8008bbc:	e7d7      	b.n	8008b6e <__hexnan+0x2e>
 8008bbe:	2a29      	cmp	r2, #41	@ 0x29
 8008bc0:	d157      	bne.n	8008c72 <__hexnan+0x132>
 8008bc2:	3102      	adds	r1, #2
 8008bc4:	f8ca 1000 	str.w	r1, [sl]
 8008bc8:	f1bb 0f00 	cmp.w	fp, #0
 8008bcc:	d051      	beq.n	8008c72 <__hexnan+0x132>
 8008bce:	454c      	cmp	r4, r9
 8008bd0:	d206      	bcs.n	8008be0 <__hexnan+0xa0>
 8008bd2:	2d07      	cmp	r5, #7
 8008bd4:	dc04      	bgt.n	8008be0 <__hexnan+0xa0>
 8008bd6:	462a      	mov	r2, r5
 8008bd8:	4649      	mov	r1, r9
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f7ff ff8a 	bl	8008af4 <L_shift>
 8008be0:	4544      	cmp	r4, r8
 8008be2:	d936      	bls.n	8008c52 <__hexnan+0x112>
 8008be4:	f1a8 0204 	sub.w	r2, r8, #4
 8008be8:	4623      	mov	r3, r4
 8008bea:	f853 1b04 	ldr.w	r1, [r3], #4
 8008bee:	f842 1f04 	str.w	r1, [r2, #4]!
 8008bf2:	429f      	cmp	r7, r3
 8008bf4:	d2f9      	bcs.n	8008bea <__hexnan+0xaa>
 8008bf6:	1b3b      	subs	r3, r7, r4
 8008bf8:	f023 0303 	bic.w	r3, r3, #3
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	3401      	adds	r4, #1
 8008c00:	3e03      	subs	r6, #3
 8008c02:	42b4      	cmp	r4, r6
 8008c04:	bf88      	it	hi
 8008c06:	2304      	movhi	r3, #4
 8008c08:	4443      	add	r3, r8
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f843 2b04 	str.w	r2, [r3], #4
 8008c10:	429f      	cmp	r7, r3
 8008c12:	d2fb      	bcs.n	8008c0c <__hexnan+0xcc>
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	b91b      	cbnz	r3, 8008c20 <__hexnan+0xe0>
 8008c18:	4547      	cmp	r7, r8
 8008c1a:	d128      	bne.n	8008c6e <__hexnan+0x12e>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	603b      	str	r3, [r7, #0]
 8008c20:	2005      	movs	r0, #5
 8008c22:	b007      	add	sp, #28
 8008c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c28:	3501      	adds	r5, #1
 8008c2a:	2d08      	cmp	r5, #8
 8008c2c:	f10b 0b01 	add.w	fp, fp, #1
 8008c30:	dd06      	ble.n	8008c40 <__hexnan+0x100>
 8008c32:	4544      	cmp	r4, r8
 8008c34:	d9c1      	bls.n	8008bba <__hexnan+0x7a>
 8008c36:	2300      	movs	r3, #0
 8008c38:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c3c:	2501      	movs	r5, #1
 8008c3e:	3c04      	subs	r4, #4
 8008c40:	6822      	ldr	r2, [r4, #0]
 8008c42:	f000 000f 	and.w	r0, r0, #15
 8008c46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008c4a:	6020      	str	r0, [r4, #0]
 8008c4c:	e7b5      	b.n	8008bba <__hexnan+0x7a>
 8008c4e:	2508      	movs	r5, #8
 8008c50:	e7b3      	b.n	8008bba <__hexnan+0x7a>
 8008c52:	9b01      	ldr	r3, [sp, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0dd      	beq.n	8008c14 <__hexnan+0xd4>
 8008c58:	f1c3 0320 	rsb	r3, r3, #32
 8008c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c60:	40da      	lsrs	r2, r3
 8008c62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008c66:	4013      	ands	r3, r2
 8008c68:	f846 3c04 	str.w	r3, [r6, #-4]
 8008c6c:	e7d2      	b.n	8008c14 <__hexnan+0xd4>
 8008c6e:	3f04      	subs	r7, #4
 8008c70:	e7d0      	b.n	8008c14 <__hexnan+0xd4>
 8008c72:	2004      	movs	r0, #4
 8008c74:	e7d5      	b.n	8008c22 <__hexnan+0xe2>
	...

08008c78 <malloc>:
 8008c78:	4b02      	ldr	r3, [pc, #8]	@ (8008c84 <malloc+0xc>)
 8008c7a:	4601      	mov	r1, r0
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	f000 b825 	b.w	8008ccc <_malloc_r>
 8008c82:	bf00      	nop
 8008c84:	20000218 	.word	0x20000218

08008c88 <sbrk_aligned>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	4e0f      	ldr	r6, [pc, #60]	@ (8008cc8 <sbrk_aligned+0x40>)
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	6831      	ldr	r1, [r6, #0]
 8008c90:	4605      	mov	r5, r0
 8008c92:	b911      	cbnz	r1, 8008c9a <sbrk_aligned+0x12>
 8008c94:	f001 f808 	bl	8009ca8 <_sbrk_r>
 8008c98:	6030      	str	r0, [r6, #0]
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f001 f803 	bl	8009ca8 <_sbrk_r>
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	d103      	bne.n	8008cae <sbrk_aligned+0x26>
 8008ca6:	f04f 34ff 	mov.w	r4, #4294967295
 8008caa:	4620      	mov	r0, r4
 8008cac:	bd70      	pop	{r4, r5, r6, pc}
 8008cae:	1cc4      	adds	r4, r0, #3
 8008cb0:	f024 0403 	bic.w	r4, r4, #3
 8008cb4:	42a0      	cmp	r0, r4
 8008cb6:	d0f8      	beq.n	8008caa <sbrk_aligned+0x22>
 8008cb8:	1a21      	subs	r1, r4, r0
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f000 fff4 	bl	8009ca8 <_sbrk_r>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d1f2      	bne.n	8008caa <sbrk_aligned+0x22>
 8008cc4:	e7ef      	b.n	8008ca6 <sbrk_aligned+0x1e>
 8008cc6:	bf00      	nop
 8008cc8:	2000067c 	.word	0x2000067c

08008ccc <_malloc_r>:
 8008ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd0:	1ccd      	adds	r5, r1, #3
 8008cd2:	f025 0503 	bic.w	r5, r5, #3
 8008cd6:	3508      	adds	r5, #8
 8008cd8:	2d0c      	cmp	r5, #12
 8008cda:	bf38      	it	cc
 8008cdc:	250c      	movcc	r5, #12
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	db01      	blt.n	8008ce8 <_malloc_r+0x1c>
 8008ce4:	42a9      	cmp	r1, r5
 8008ce6:	d904      	bls.n	8008cf2 <_malloc_r+0x26>
 8008ce8:	230c      	movs	r3, #12
 8008cea:	6033      	str	r3, [r6, #0]
 8008cec:	2000      	movs	r0, #0
 8008cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008dc8 <_malloc_r+0xfc>
 8008cf6:	f000 f87b 	bl	8008df0 <__malloc_lock>
 8008cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8008cfe:	461c      	mov	r4, r3
 8008d00:	bb44      	cbnz	r4, 8008d54 <_malloc_r+0x88>
 8008d02:	4629      	mov	r1, r5
 8008d04:	4630      	mov	r0, r6
 8008d06:	f7ff ffbf 	bl	8008c88 <sbrk_aligned>
 8008d0a:	1c43      	adds	r3, r0, #1
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	d158      	bne.n	8008dc2 <_malloc_r+0xf6>
 8008d10:	f8d8 4000 	ldr.w	r4, [r8]
 8008d14:	4627      	mov	r7, r4
 8008d16:	2f00      	cmp	r7, #0
 8008d18:	d143      	bne.n	8008da2 <_malloc_r+0xd6>
 8008d1a:	2c00      	cmp	r4, #0
 8008d1c:	d04b      	beq.n	8008db6 <_malloc_r+0xea>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	4639      	mov	r1, r7
 8008d22:	4630      	mov	r0, r6
 8008d24:	eb04 0903 	add.w	r9, r4, r3
 8008d28:	f000 ffbe 	bl	8009ca8 <_sbrk_r>
 8008d2c:	4581      	cmp	r9, r0
 8008d2e:	d142      	bne.n	8008db6 <_malloc_r+0xea>
 8008d30:	6821      	ldr	r1, [r4, #0]
 8008d32:	1a6d      	subs	r5, r5, r1
 8008d34:	4629      	mov	r1, r5
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7ff ffa6 	bl	8008c88 <sbrk_aligned>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d03a      	beq.n	8008db6 <_malloc_r+0xea>
 8008d40:	6823      	ldr	r3, [r4, #0]
 8008d42:	442b      	add	r3, r5
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	f8d8 3000 	ldr.w	r3, [r8]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	bb62      	cbnz	r2, 8008da8 <_malloc_r+0xdc>
 8008d4e:	f8c8 7000 	str.w	r7, [r8]
 8008d52:	e00f      	b.n	8008d74 <_malloc_r+0xa8>
 8008d54:	6822      	ldr	r2, [r4, #0]
 8008d56:	1b52      	subs	r2, r2, r5
 8008d58:	d420      	bmi.n	8008d9c <_malloc_r+0xd0>
 8008d5a:	2a0b      	cmp	r2, #11
 8008d5c:	d917      	bls.n	8008d8e <_malloc_r+0xc2>
 8008d5e:	1961      	adds	r1, r4, r5
 8008d60:	42a3      	cmp	r3, r4
 8008d62:	6025      	str	r5, [r4, #0]
 8008d64:	bf18      	it	ne
 8008d66:	6059      	strne	r1, [r3, #4]
 8008d68:	6863      	ldr	r3, [r4, #4]
 8008d6a:	bf08      	it	eq
 8008d6c:	f8c8 1000 	streq.w	r1, [r8]
 8008d70:	5162      	str	r2, [r4, r5]
 8008d72:	604b      	str	r3, [r1, #4]
 8008d74:	4630      	mov	r0, r6
 8008d76:	f000 f841 	bl	8008dfc <__malloc_unlock>
 8008d7a:	f104 000b 	add.w	r0, r4, #11
 8008d7e:	1d23      	adds	r3, r4, #4
 8008d80:	f020 0007 	bic.w	r0, r0, #7
 8008d84:	1ac2      	subs	r2, r0, r3
 8008d86:	bf1c      	itt	ne
 8008d88:	1a1b      	subne	r3, r3, r0
 8008d8a:	50a3      	strne	r3, [r4, r2]
 8008d8c:	e7af      	b.n	8008cee <_malloc_r+0x22>
 8008d8e:	6862      	ldr	r2, [r4, #4]
 8008d90:	42a3      	cmp	r3, r4
 8008d92:	bf0c      	ite	eq
 8008d94:	f8c8 2000 	streq.w	r2, [r8]
 8008d98:	605a      	strne	r2, [r3, #4]
 8008d9a:	e7eb      	b.n	8008d74 <_malloc_r+0xa8>
 8008d9c:	4623      	mov	r3, r4
 8008d9e:	6864      	ldr	r4, [r4, #4]
 8008da0:	e7ae      	b.n	8008d00 <_malloc_r+0x34>
 8008da2:	463c      	mov	r4, r7
 8008da4:	687f      	ldr	r7, [r7, #4]
 8008da6:	e7b6      	b.n	8008d16 <_malloc_r+0x4a>
 8008da8:	461a      	mov	r2, r3
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	42a3      	cmp	r3, r4
 8008dae:	d1fb      	bne.n	8008da8 <_malloc_r+0xdc>
 8008db0:	2300      	movs	r3, #0
 8008db2:	6053      	str	r3, [r2, #4]
 8008db4:	e7de      	b.n	8008d74 <_malloc_r+0xa8>
 8008db6:	230c      	movs	r3, #12
 8008db8:	6033      	str	r3, [r6, #0]
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f000 f81e 	bl	8008dfc <__malloc_unlock>
 8008dc0:	e794      	b.n	8008cec <_malloc_r+0x20>
 8008dc2:	6005      	str	r5, [r0, #0]
 8008dc4:	e7d6      	b.n	8008d74 <_malloc_r+0xa8>
 8008dc6:	bf00      	nop
 8008dc8:	20000680 	.word	0x20000680

08008dcc <__ascii_mbtowc>:
 8008dcc:	b082      	sub	sp, #8
 8008dce:	b901      	cbnz	r1, 8008dd2 <__ascii_mbtowc+0x6>
 8008dd0:	a901      	add	r1, sp, #4
 8008dd2:	b142      	cbz	r2, 8008de6 <__ascii_mbtowc+0x1a>
 8008dd4:	b14b      	cbz	r3, 8008dea <__ascii_mbtowc+0x1e>
 8008dd6:	7813      	ldrb	r3, [r2, #0]
 8008dd8:	600b      	str	r3, [r1, #0]
 8008dda:	7812      	ldrb	r2, [r2, #0]
 8008ddc:	1e10      	subs	r0, r2, #0
 8008dde:	bf18      	it	ne
 8008de0:	2001      	movne	r0, #1
 8008de2:	b002      	add	sp, #8
 8008de4:	4770      	bx	lr
 8008de6:	4610      	mov	r0, r2
 8008de8:	e7fb      	b.n	8008de2 <__ascii_mbtowc+0x16>
 8008dea:	f06f 0001 	mvn.w	r0, #1
 8008dee:	e7f8      	b.n	8008de2 <__ascii_mbtowc+0x16>

08008df0 <__malloc_lock>:
 8008df0:	4801      	ldr	r0, [pc, #4]	@ (8008df8 <__malloc_lock+0x8>)
 8008df2:	f7fe bd44 	b.w	800787e <__retarget_lock_acquire_recursive>
 8008df6:	bf00      	nop
 8008df8:	20000678 	.word	0x20000678

08008dfc <__malloc_unlock>:
 8008dfc:	4801      	ldr	r0, [pc, #4]	@ (8008e04 <__malloc_unlock+0x8>)
 8008dfe:	f7fe bd3f 	b.w	8007880 <__retarget_lock_release_recursive>
 8008e02:	bf00      	nop
 8008e04:	20000678 	.word	0x20000678

08008e08 <_Balloc>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	69c6      	ldr	r6, [r0, #28]
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	460d      	mov	r5, r1
 8008e10:	b976      	cbnz	r6, 8008e30 <_Balloc+0x28>
 8008e12:	2010      	movs	r0, #16
 8008e14:	f7ff ff30 	bl	8008c78 <malloc>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	61e0      	str	r0, [r4, #28]
 8008e1c:	b920      	cbnz	r0, 8008e28 <_Balloc+0x20>
 8008e1e:	4b18      	ldr	r3, [pc, #96]	@ (8008e80 <_Balloc+0x78>)
 8008e20:	4818      	ldr	r0, [pc, #96]	@ (8008e84 <_Balloc+0x7c>)
 8008e22:	216b      	movs	r1, #107	@ 0x6b
 8008e24:	f000 ff50 	bl	8009cc8 <__assert_func>
 8008e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e2c:	6006      	str	r6, [r0, #0]
 8008e2e:	60c6      	str	r6, [r0, #12]
 8008e30:	69e6      	ldr	r6, [r4, #28]
 8008e32:	68f3      	ldr	r3, [r6, #12]
 8008e34:	b183      	cbz	r3, 8008e58 <_Balloc+0x50>
 8008e36:	69e3      	ldr	r3, [r4, #28]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e3e:	b9b8      	cbnz	r0, 8008e70 <_Balloc+0x68>
 8008e40:	2101      	movs	r1, #1
 8008e42:	fa01 f605 	lsl.w	r6, r1, r5
 8008e46:	1d72      	adds	r2, r6, #5
 8008e48:	0092      	lsls	r2, r2, #2
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f000 ff5a 	bl	8009d04 <_calloc_r>
 8008e50:	b160      	cbz	r0, 8008e6c <_Balloc+0x64>
 8008e52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e56:	e00e      	b.n	8008e76 <_Balloc+0x6e>
 8008e58:	2221      	movs	r2, #33	@ 0x21
 8008e5a:	2104      	movs	r1, #4
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f000 ff51 	bl	8009d04 <_calloc_r>
 8008e62:	69e3      	ldr	r3, [r4, #28]
 8008e64:	60f0      	str	r0, [r6, #12]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1e4      	bne.n	8008e36 <_Balloc+0x2e>
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}
 8008e70:	6802      	ldr	r2, [r0, #0]
 8008e72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e76:	2300      	movs	r3, #0
 8008e78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e7c:	e7f7      	b.n	8008e6e <_Balloc+0x66>
 8008e7e:	bf00      	nop
 8008e80:	0800a3b8 	.word	0x0800a3b8
 8008e84:	0800a498 	.word	0x0800a498

08008e88 <_Bfree>:
 8008e88:	b570      	push	{r4, r5, r6, lr}
 8008e8a:	69c6      	ldr	r6, [r0, #28]
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	b976      	cbnz	r6, 8008eb0 <_Bfree+0x28>
 8008e92:	2010      	movs	r0, #16
 8008e94:	f7ff fef0 	bl	8008c78 <malloc>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	61e8      	str	r0, [r5, #28]
 8008e9c:	b920      	cbnz	r0, 8008ea8 <_Bfree+0x20>
 8008e9e:	4b09      	ldr	r3, [pc, #36]	@ (8008ec4 <_Bfree+0x3c>)
 8008ea0:	4809      	ldr	r0, [pc, #36]	@ (8008ec8 <_Bfree+0x40>)
 8008ea2:	218f      	movs	r1, #143	@ 0x8f
 8008ea4:	f000 ff10 	bl	8009cc8 <__assert_func>
 8008ea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008eac:	6006      	str	r6, [r0, #0]
 8008eae:	60c6      	str	r6, [r0, #12]
 8008eb0:	b13c      	cbz	r4, 8008ec2 <_Bfree+0x3a>
 8008eb2:	69eb      	ldr	r3, [r5, #28]
 8008eb4:	6862      	ldr	r2, [r4, #4]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ebc:	6021      	str	r1, [r4, #0]
 8008ebe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ec2:	bd70      	pop	{r4, r5, r6, pc}
 8008ec4:	0800a3b8 	.word	0x0800a3b8
 8008ec8:	0800a498 	.word	0x0800a498

08008ecc <__multadd>:
 8008ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed0:	690d      	ldr	r5, [r1, #16]
 8008ed2:	4607      	mov	r7, r0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	461e      	mov	r6, r3
 8008ed8:	f101 0c14 	add.w	ip, r1, #20
 8008edc:	2000      	movs	r0, #0
 8008ede:	f8dc 3000 	ldr.w	r3, [ip]
 8008ee2:	b299      	uxth	r1, r3
 8008ee4:	fb02 6101 	mla	r1, r2, r1, r6
 8008ee8:	0c1e      	lsrs	r6, r3, #16
 8008eea:	0c0b      	lsrs	r3, r1, #16
 8008eec:	fb02 3306 	mla	r3, r2, r6, r3
 8008ef0:	b289      	uxth	r1, r1
 8008ef2:	3001      	adds	r0, #1
 8008ef4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ef8:	4285      	cmp	r5, r0
 8008efa:	f84c 1b04 	str.w	r1, [ip], #4
 8008efe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f02:	dcec      	bgt.n	8008ede <__multadd+0x12>
 8008f04:	b30e      	cbz	r6, 8008f4a <__multadd+0x7e>
 8008f06:	68a3      	ldr	r3, [r4, #8]
 8008f08:	42ab      	cmp	r3, r5
 8008f0a:	dc19      	bgt.n	8008f40 <__multadd+0x74>
 8008f0c:	6861      	ldr	r1, [r4, #4]
 8008f0e:	4638      	mov	r0, r7
 8008f10:	3101      	adds	r1, #1
 8008f12:	f7ff ff79 	bl	8008e08 <_Balloc>
 8008f16:	4680      	mov	r8, r0
 8008f18:	b928      	cbnz	r0, 8008f26 <__multadd+0x5a>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f50 <__multadd+0x84>)
 8008f1e:	480d      	ldr	r0, [pc, #52]	@ (8008f54 <__multadd+0x88>)
 8008f20:	21ba      	movs	r1, #186	@ 0xba
 8008f22:	f000 fed1 	bl	8009cc8 <__assert_func>
 8008f26:	6922      	ldr	r2, [r4, #16]
 8008f28:	3202      	adds	r2, #2
 8008f2a:	f104 010c 	add.w	r1, r4, #12
 8008f2e:	0092      	lsls	r2, r2, #2
 8008f30:	300c      	adds	r0, #12
 8008f32:	f7fe fca6 	bl	8007882 <memcpy>
 8008f36:	4621      	mov	r1, r4
 8008f38:	4638      	mov	r0, r7
 8008f3a:	f7ff ffa5 	bl	8008e88 <_Bfree>
 8008f3e:	4644      	mov	r4, r8
 8008f40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f44:	3501      	adds	r5, #1
 8008f46:	615e      	str	r6, [r3, #20]
 8008f48:	6125      	str	r5, [r4, #16]
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f50:	0800a427 	.word	0x0800a427
 8008f54:	0800a498 	.word	0x0800a498

08008f58 <__s2b>:
 8008f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	4615      	mov	r5, r2
 8008f60:	461f      	mov	r7, r3
 8008f62:	2209      	movs	r2, #9
 8008f64:	3308      	adds	r3, #8
 8008f66:	4606      	mov	r6, r0
 8008f68:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	2201      	movs	r2, #1
 8008f70:	429a      	cmp	r2, r3
 8008f72:	db09      	blt.n	8008f88 <__s2b+0x30>
 8008f74:	4630      	mov	r0, r6
 8008f76:	f7ff ff47 	bl	8008e08 <_Balloc>
 8008f7a:	b940      	cbnz	r0, 8008f8e <__s2b+0x36>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	4b19      	ldr	r3, [pc, #100]	@ (8008fe4 <__s2b+0x8c>)
 8008f80:	4819      	ldr	r0, [pc, #100]	@ (8008fe8 <__s2b+0x90>)
 8008f82:	21d3      	movs	r1, #211	@ 0xd3
 8008f84:	f000 fea0 	bl	8009cc8 <__assert_func>
 8008f88:	0052      	lsls	r2, r2, #1
 8008f8a:	3101      	adds	r1, #1
 8008f8c:	e7f0      	b.n	8008f70 <__s2b+0x18>
 8008f8e:	9b08      	ldr	r3, [sp, #32]
 8008f90:	6143      	str	r3, [r0, #20]
 8008f92:	2d09      	cmp	r5, #9
 8008f94:	f04f 0301 	mov.w	r3, #1
 8008f98:	6103      	str	r3, [r0, #16]
 8008f9a:	dd16      	ble.n	8008fca <__s2b+0x72>
 8008f9c:	f104 0909 	add.w	r9, r4, #9
 8008fa0:	46c8      	mov	r8, r9
 8008fa2:	442c      	add	r4, r5
 8008fa4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008fa8:	4601      	mov	r1, r0
 8008faa:	3b30      	subs	r3, #48	@ 0x30
 8008fac:	220a      	movs	r2, #10
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f7ff ff8c 	bl	8008ecc <__multadd>
 8008fb4:	45a0      	cmp	r8, r4
 8008fb6:	d1f5      	bne.n	8008fa4 <__s2b+0x4c>
 8008fb8:	f1a5 0408 	sub.w	r4, r5, #8
 8008fbc:	444c      	add	r4, r9
 8008fbe:	1b2d      	subs	r5, r5, r4
 8008fc0:	1963      	adds	r3, r4, r5
 8008fc2:	42bb      	cmp	r3, r7
 8008fc4:	db04      	blt.n	8008fd0 <__s2b+0x78>
 8008fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fca:	340a      	adds	r4, #10
 8008fcc:	2509      	movs	r5, #9
 8008fce:	e7f6      	b.n	8008fbe <__s2b+0x66>
 8008fd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008fd4:	4601      	mov	r1, r0
 8008fd6:	3b30      	subs	r3, #48	@ 0x30
 8008fd8:	220a      	movs	r2, #10
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f7ff ff76 	bl	8008ecc <__multadd>
 8008fe0:	e7ee      	b.n	8008fc0 <__s2b+0x68>
 8008fe2:	bf00      	nop
 8008fe4:	0800a427 	.word	0x0800a427
 8008fe8:	0800a498 	.word	0x0800a498

08008fec <__hi0bits>:
 8008fec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	bf36      	itet	cc
 8008ff4:	0403      	lslcc	r3, r0, #16
 8008ff6:	2000      	movcs	r0, #0
 8008ff8:	2010      	movcc	r0, #16
 8008ffa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ffe:	bf3c      	itt	cc
 8009000:	021b      	lslcc	r3, r3, #8
 8009002:	3008      	addcc	r0, #8
 8009004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009008:	bf3c      	itt	cc
 800900a:	011b      	lslcc	r3, r3, #4
 800900c:	3004      	addcc	r0, #4
 800900e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009012:	bf3c      	itt	cc
 8009014:	009b      	lslcc	r3, r3, #2
 8009016:	3002      	addcc	r0, #2
 8009018:	2b00      	cmp	r3, #0
 800901a:	db05      	blt.n	8009028 <__hi0bits+0x3c>
 800901c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009020:	f100 0001 	add.w	r0, r0, #1
 8009024:	bf08      	it	eq
 8009026:	2020      	moveq	r0, #32
 8009028:	4770      	bx	lr

0800902a <__lo0bits>:
 800902a:	6803      	ldr	r3, [r0, #0]
 800902c:	4602      	mov	r2, r0
 800902e:	f013 0007 	ands.w	r0, r3, #7
 8009032:	d00b      	beq.n	800904c <__lo0bits+0x22>
 8009034:	07d9      	lsls	r1, r3, #31
 8009036:	d421      	bmi.n	800907c <__lo0bits+0x52>
 8009038:	0798      	lsls	r0, r3, #30
 800903a:	bf49      	itett	mi
 800903c:	085b      	lsrmi	r3, r3, #1
 800903e:	089b      	lsrpl	r3, r3, #2
 8009040:	2001      	movmi	r0, #1
 8009042:	6013      	strmi	r3, [r2, #0]
 8009044:	bf5c      	itt	pl
 8009046:	6013      	strpl	r3, [r2, #0]
 8009048:	2002      	movpl	r0, #2
 800904a:	4770      	bx	lr
 800904c:	b299      	uxth	r1, r3
 800904e:	b909      	cbnz	r1, 8009054 <__lo0bits+0x2a>
 8009050:	0c1b      	lsrs	r3, r3, #16
 8009052:	2010      	movs	r0, #16
 8009054:	b2d9      	uxtb	r1, r3
 8009056:	b909      	cbnz	r1, 800905c <__lo0bits+0x32>
 8009058:	3008      	adds	r0, #8
 800905a:	0a1b      	lsrs	r3, r3, #8
 800905c:	0719      	lsls	r1, r3, #28
 800905e:	bf04      	itt	eq
 8009060:	091b      	lsreq	r3, r3, #4
 8009062:	3004      	addeq	r0, #4
 8009064:	0799      	lsls	r1, r3, #30
 8009066:	bf04      	itt	eq
 8009068:	089b      	lsreq	r3, r3, #2
 800906a:	3002      	addeq	r0, #2
 800906c:	07d9      	lsls	r1, r3, #31
 800906e:	d403      	bmi.n	8009078 <__lo0bits+0x4e>
 8009070:	085b      	lsrs	r3, r3, #1
 8009072:	f100 0001 	add.w	r0, r0, #1
 8009076:	d003      	beq.n	8009080 <__lo0bits+0x56>
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	4770      	bx	lr
 800907c:	2000      	movs	r0, #0
 800907e:	4770      	bx	lr
 8009080:	2020      	movs	r0, #32
 8009082:	4770      	bx	lr

08009084 <__i2b>:
 8009084:	b510      	push	{r4, lr}
 8009086:	460c      	mov	r4, r1
 8009088:	2101      	movs	r1, #1
 800908a:	f7ff febd 	bl	8008e08 <_Balloc>
 800908e:	4602      	mov	r2, r0
 8009090:	b928      	cbnz	r0, 800909e <__i2b+0x1a>
 8009092:	4b05      	ldr	r3, [pc, #20]	@ (80090a8 <__i2b+0x24>)
 8009094:	4805      	ldr	r0, [pc, #20]	@ (80090ac <__i2b+0x28>)
 8009096:	f240 1145 	movw	r1, #325	@ 0x145
 800909a:	f000 fe15 	bl	8009cc8 <__assert_func>
 800909e:	2301      	movs	r3, #1
 80090a0:	6144      	str	r4, [r0, #20]
 80090a2:	6103      	str	r3, [r0, #16]
 80090a4:	bd10      	pop	{r4, pc}
 80090a6:	bf00      	nop
 80090a8:	0800a427 	.word	0x0800a427
 80090ac:	0800a498 	.word	0x0800a498

080090b0 <__multiply>:
 80090b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	4617      	mov	r7, r2
 80090b6:	690a      	ldr	r2, [r1, #16]
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	bfa8      	it	ge
 80090be:	463b      	movge	r3, r7
 80090c0:	4689      	mov	r9, r1
 80090c2:	bfa4      	itt	ge
 80090c4:	460f      	movge	r7, r1
 80090c6:	4699      	movge	r9, r3
 80090c8:	693d      	ldr	r5, [r7, #16]
 80090ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	6879      	ldr	r1, [r7, #4]
 80090d2:	eb05 060a 	add.w	r6, r5, sl
 80090d6:	42b3      	cmp	r3, r6
 80090d8:	b085      	sub	sp, #20
 80090da:	bfb8      	it	lt
 80090dc:	3101      	addlt	r1, #1
 80090de:	f7ff fe93 	bl	8008e08 <_Balloc>
 80090e2:	b930      	cbnz	r0, 80090f2 <__multiply+0x42>
 80090e4:	4602      	mov	r2, r0
 80090e6:	4b41      	ldr	r3, [pc, #260]	@ (80091ec <__multiply+0x13c>)
 80090e8:	4841      	ldr	r0, [pc, #260]	@ (80091f0 <__multiply+0x140>)
 80090ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80090ee:	f000 fdeb 	bl	8009cc8 <__assert_func>
 80090f2:	f100 0414 	add.w	r4, r0, #20
 80090f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80090fa:	4623      	mov	r3, r4
 80090fc:	2200      	movs	r2, #0
 80090fe:	4573      	cmp	r3, lr
 8009100:	d320      	bcc.n	8009144 <__multiply+0x94>
 8009102:	f107 0814 	add.w	r8, r7, #20
 8009106:	f109 0114 	add.w	r1, r9, #20
 800910a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800910e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009112:	9302      	str	r3, [sp, #8]
 8009114:	1beb      	subs	r3, r5, r7
 8009116:	3b15      	subs	r3, #21
 8009118:	f023 0303 	bic.w	r3, r3, #3
 800911c:	3304      	adds	r3, #4
 800911e:	3715      	adds	r7, #21
 8009120:	42bd      	cmp	r5, r7
 8009122:	bf38      	it	cc
 8009124:	2304      	movcc	r3, #4
 8009126:	9301      	str	r3, [sp, #4]
 8009128:	9b02      	ldr	r3, [sp, #8]
 800912a:	9103      	str	r1, [sp, #12]
 800912c:	428b      	cmp	r3, r1
 800912e:	d80c      	bhi.n	800914a <__multiply+0x9a>
 8009130:	2e00      	cmp	r6, #0
 8009132:	dd03      	ble.n	800913c <__multiply+0x8c>
 8009134:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009138:	2b00      	cmp	r3, #0
 800913a:	d055      	beq.n	80091e8 <__multiply+0x138>
 800913c:	6106      	str	r6, [r0, #16]
 800913e:	b005      	add	sp, #20
 8009140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009144:	f843 2b04 	str.w	r2, [r3], #4
 8009148:	e7d9      	b.n	80090fe <__multiply+0x4e>
 800914a:	f8b1 a000 	ldrh.w	sl, [r1]
 800914e:	f1ba 0f00 	cmp.w	sl, #0
 8009152:	d01f      	beq.n	8009194 <__multiply+0xe4>
 8009154:	46c4      	mov	ip, r8
 8009156:	46a1      	mov	r9, r4
 8009158:	2700      	movs	r7, #0
 800915a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800915e:	f8d9 3000 	ldr.w	r3, [r9]
 8009162:	fa1f fb82 	uxth.w	fp, r2
 8009166:	b29b      	uxth	r3, r3
 8009168:	fb0a 330b 	mla	r3, sl, fp, r3
 800916c:	443b      	add	r3, r7
 800916e:	f8d9 7000 	ldr.w	r7, [r9]
 8009172:	0c12      	lsrs	r2, r2, #16
 8009174:	0c3f      	lsrs	r7, r7, #16
 8009176:	fb0a 7202 	mla	r2, sl, r2, r7
 800917a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800917e:	b29b      	uxth	r3, r3
 8009180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009184:	4565      	cmp	r5, ip
 8009186:	f849 3b04 	str.w	r3, [r9], #4
 800918a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800918e:	d8e4      	bhi.n	800915a <__multiply+0xaa>
 8009190:	9b01      	ldr	r3, [sp, #4]
 8009192:	50e7      	str	r7, [r4, r3]
 8009194:	9b03      	ldr	r3, [sp, #12]
 8009196:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800919a:	3104      	adds	r1, #4
 800919c:	f1b9 0f00 	cmp.w	r9, #0
 80091a0:	d020      	beq.n	80091e4 <__multiply+0x134>
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	4647      	mov	r7, r8
 80091a6:	46a4      	mov	ip, r4
 80091a8:	f04f 0a00 	mov.w	sl, #0
 80091ac:	f8b7 b000 	ldrh.w	fp, [r7]
 80091b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80091b4:	fb09 220b 	mla	r2, r9, fp, r2
 80091b8:	4452      	add	r2, sl
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091c0:	f84c 3b04 	str.w	r3, [ip], #4
 80091c4:	f857 3b04 	ldr.w	r3, [r7], #4
 80091c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091cc:	f8bc 3000 	ldrh.w	r3, [ip]
 80091d0:	fb09 330a 	mla	r3, r9, sl, r3
 80091d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80091d8:	42bd      	cmp	r5, r7
 80091da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091de:	d8e5      	bhi.n	80091ac <__multiply+0xfc>
 80091e0:	9a01      	ldr	r2, [sp, #4]
 80091e2:	50a3      	str	r3, [r4, r2]
 80091e4:	3404      	adds	r4, #4
 80091e6:	e79f      	b.n	8009128 <__multiply+0x78>
 80091e8:	3e01      	subs	r6, #1
 80091ea:	e7a1      	b.n	8009130 <__multiply+0x80>
 80091ec:	0800a427 	.word	0x0800a427
 80091f0:	0800a498 	.word	0x0800a498

080091f4 <__pow5mult>:
 80091f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f8:	4615      	mov	r5, r2
 80091fa:	f012 0203 	ands.w	r2, r2, #3
 80091fe:	4607      	mov	r7, r0
 8009200:	460e      	mov	r6, r1
 8009202:	d007      	beq.n	8009214 <__pow5mult+0x20>
 8009204:	4c25      	ldr	r4, [pc, #148]	@ (800929c <__pow5mult+0xa8>)
 8009206:	3a01      	subs	r2, #1
 8009208:	2300      	movs	r3, #0
 800920a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800920e:	f7ff fe5d 	bl	8008ecc <__multadd>
 8009212:	4606      	mov	r6, r0
 8009214:	10ad      	asrs	r5, r5, #2
 8009216:	d03d      	beq.n	8009294 <__pow5mult+0xa0>
 8009218:	69fc      	ldr	r4, [r7, #28]
 800921a:	b97c      	cbnz	r4, 800923c <__pow5mult+0x48>
 800921c:	2010      	movs	r0, #16
 800921e:	f7ff fd2b 	bl	8008c78 <malloc>
 8009222:	4602      	mov	r2, r0
 8009224:	61f8      	str	r0, [r7, #28]
 8009226:	b928      	cbnz	r0, 8009234 <__pow5mult+0x40>
 8009228:	4b1d      	ldr	r3, [pc, #116]	@ (80092a0 <__pow5mult+0xac>)
 800922a:	481e      	ldr	r0, [pc, #120]	@ (80092a4 <__pow5mult+0xb0>)
 800922c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009230:	f000 fd4a 	bl	8009cc8 <__assert_func>
 8009234:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009238:	6004      	str	r4, [r0, #0]
 800923a:	60c4      	str	r4, [r0, #12]
 800923c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009240:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009244:	b94c      	cbnz	r4, 800925a <__pow5mult+0x66>
 8009246:	f240 2171 	movw	r1, #625	@ 0x271
 800924a:	4638      	mov	r0, r7
 800924c:	f7ff ff1a 	bl	8009084 <__i2b>
 8009250:	2300      	movs	r3, #0
 8009252:	f8c8 0008 	str.w	r0, [r8, #8]
 8009256:	4604      	mov	r4, r0
 8009258:	6003      	str	r3, [r0, #0]
 800925a:	f04f 0900 	mov.w	r9, #0
 800925e:	07eb      	lsls	r3, r5, #31
 8009260:	d50a      	bpl.n	8009278 <__pow5mult+0x84>
 8009262:	4631      	mov	r1, r6
 8009264:	4622      	mov	r2, r4
 8009266:	4638      	mov	r0, r7
 8009268:	f7ff ff22 	bl	80090b0 <__multiply>
 800926c:	4631      	mov	r1, r6
 800926e:	4680      	mov	r8, r0
 8009270:	4638      	mov	r0, r7
 8009272:	f7ff fe09 	bl	8008e88 <_Bfree>
 8009276:	4646      	mov	r6, r8
 8009278:	106d      	asrs	r5, r5, #1
 800927a:	d00b      	beq.n	8009294 <__pow5mult+0xa0>
 800927c:	6820      	ldr	r0, [r4, #0]
 800927e:	b938      	cbnz	r0, 8009290 <__pow5mult+0x9c>
 8009280:	4622      	mov	r2, r4
 8009282:	4621      	mov	r1, r4
 8009284:	4638      	mov	r0, r7
 8009286:	f7ff ff13 	bl	80090b0 <__multiply>
 800928a:	6020      	str	r0, [r4, #0]
 800928c:	f8c0 9000 	str.w	r9, [r0]
 8009290:	4604      	mov	r4, r0
 8009292:	e7e4      	b.n	800925e <__pow5mult+0x6a>
 8009294:	4630      	mov	r0, r6
 8009296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800929a:	bf00      	nop
 800929c:	0800a590 	.word	0x0800a590
 80092a0:	0800a3b8 	.word	0x0800a3b8
 80092a4:	0800a498 	.word	0x0800a498

080092a8 <__lshift>:
 80092a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ac:	460c      	mov	r4, r1
 80092ae:	6849      	ldr	r1, [r1, #4]
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092b6:	68a3      	ldr	r3, [r4, #8]
 80092b8:	4607      	mov	r7, r0
 80092ba:	4691      	mov	r9, r2
 80092bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092c0:	f108 0601 	add.w	r6, r8, #1
 80092c4:	42b3      	cmp	r3, r6
 80092c6:	db0b      	blt.n	80092e0 <__lshift+0x38>
 80092c8:	4638      	mov	r0, r7
 80092ca:	f7ff fd9d 	bl	8008e08 <_Balloc>
 80092ce:	4605      	mov	r5, r0
 80092d0:	b948      	cbnz	r0, 80092e6 <__lshift+0x3e>
 80092d2:	4602      	mov	r2, r0
 80092d4:	4b28      	ldr	r3, [pc, #160]	@ (8009378 <__lshift+0xd0>)
 80092d6:	4829      	ldr	r0, [pc, #164]	@ (800937c <__lshift+0xd4>)
 80092d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80092dc:	f000 fcf4 	bl	8009cc8 <__assert_func>
 80092e0:	3101      	adds	r1, #1
 80092e2:	005b      	lsls	r3, r3, #1
 80092e4:	e7ee      	b.n	80092c4 <__lshift+0x1c>
 80092e6:	2300      	movs	r3, #0
 80092e8:	f100 0114 	add.w	r1, r0, #20
 80092ec:	f100 0210 	add.w	r2, r0, #16
 80092f0:	4618      	mov	r0, r3
 80092f2:	4553      	cmp	r3, sl
 80092f4:	db33      	blt.n	800935e <__lshift+0xb6>
 80092f6:	6920      	ldr	r0, [r4, #16]
 80092f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092fc:	f104 0314 	add.w	r3, r4, #20
 8009300:	f019 091f 	ands.w	r9, r9, #31
 8009304:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009308:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800930c:	d02b      	beq.n	8009366 <__lshift+0xbe>
 800930e:	f1c9 0e20 	rsb	lr, r9, #32
 8009312:	468a      	mov	sl, r1
 8009314:	2200      	movs	r2, #0
 8009316:	6818      	ldr	r0, [r3, #0]
 8009318:	fa00 f009 	lsl.w	r0, r0, r9
 800931c:	4310      	orrs	r0, r2
 800931e:	f84a 0b04 	str.w	r0, [sl], #4
 8009322:	f853 2b04 	ldr.w	r2, [r3], #4
 8009326:	459c      	cmp	ip, r3
 8009328:	fa22 f20e 	lsr.w	r2, r2, lr
 800932c:	d8f3      	bhi.n	8009316 <__lshift+0x6e>
 800932e:	ebac 0304 	sub.w	r3, ip, r4
 8009332:	3b15      	subs	r3, #21
 8009334:	f023 0303 	bic.w	r3, r3, #3
 8009338:	3304      	adds	r3, #4
 800933a:	f104 0015 	add.w	r0, r4, #21
 800933e:	4560      	cmp	r0, ip
 8009340:	bf88      	it	hi
 8009342:	2304      	movhi	r3, #4
 8009344:	50ca      	str	r2, [r1, r3]
 8009346:	b10a      	cbz	r2, 800934c <__lshift+0xa4>
 8009348:	f108 0602 	add.w	r6, r8, #2
 800934c:	3e01      	subs	r6, #1
 800934e:	4638      	mov	r0, r7
 8009350:	612e      	str	r6, [r5, #16]
 8009352:	4621      	mov	r1, r4
 8009354:	f7ff fd98 	bl	8008e88 <_Bfree>
 8009358:	4628      	mov	r0, r5
 800935a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009362:	3301      	adds	r3, #1
 8009364:	e7c5      	b.n	80092f2 <__lshift+0x4a>
 8009366:	3904      	subs	r1, #4
 8009368:	f853 2b04 	ldr.w	r2, [r3], #4
 800936c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009370:	459c      	cmp	ip, r3
 8009372:	d8f9      	bhi.n	8009368 <__lshift+0xc0>
 8009374:	e7ea      	b.n	800934c <__lshift+0xa4>
 8009376:	bf00      	nop
 8009378:	0800a427 	.word	0x0800a427
 800937c:	0800a498 	.word	0x0800a498

08009380 <__mcmp>:
 8009380:	690a      	ldr	r2, [r1, #16]
 8009382:	4603      	mov	r3, r0
 8009384:	6900      	ldr	r0, [r0, #16]
 8009386:	1a80      	subs	r0, r0, r2
 8009388:	b530      	push	{r4, r5, lr}
 800938a:	d10e      	bne.n	80093aa <__mcmp+0x2a>
 800938c:	3314      	adds	r3, #20
 800938e:	3114      	adds	r1, #20
 8009390:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009394:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009398:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800939c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80093a0:	4295      	cmp	r5, r2
 80093a2:	d003      	beq.n	80093ac <__mcmp+0x2c>
 80093a4:	d205      	bcs.n	80093b2 <__mcmp+0x32>
 80093a6:	f04f 30ff 	mov.w	r0, #4294967295
 80093aa:	bd30      	pop	{r4, r5, pc}
 80093ac:	42a3      	cmp	r3, r4
 80093ae:	d3f3      	bcc.n	8009398 <__mcmp+0x18>
 80093b0:	e7fb      	b.n	80093aa <__mcmp+0x2a>
 80093b2:	2001      	movs	r0, #1
 80093b4:	e7f9      	b.n	80093aa <__mcmp+0x2a>
	...

080093b8 <__mdiff>:
 80093b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	4689      	mov	r9, r1
 80093be:	4606      	mov	r6, r0
 80093c0:	4611      	mov	r1, r2
 80093c2:	4648      	mov	r0, r9
 80093c4:	4614      	mov	r4, r2
 80093c6:	f7ff ffdb 	bl	8009380 <__mcmp>
 80093ca:	1e05      	subs	r5, r0, #0
 80093cc:	d112      	bne.n	80093f4 <__mdiff+0x3c>
 80093ce:	4629      	mov	r1, r5
 80093d0:	4630      	mov	r0, r6
 80093d2:	f7ff fd19 	bl	8008e08 <_Balloc>
 80093d6:	4602      	mov	r2, r0
 80093d8:	b928      	cbnz	r0, 80093e6 <__mdiff+0x2e>
 80093da:	4b3f      	ldr	r3, [pc, #252]	@ (80094d8 <__mdiff+0x120>)
 80093dc:	f240 2137 	movw	r1, #567	@ 0x237
 80093e0:	483e      	ldr	r0, [pc, #248]	@ (80094dc <__mdiff+0x124>)
 80093e2:	f000 fc71 	bl	8009cc8 <__assert_func>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093ec:	4610      	mov	r0, r2
 80093ee:	b003      	add	sp, #12
 80093f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f4:	bfbc      	itt	lt
 80093f6:	464b      	movlt	r3, r9
 80093f8:	46a1      	movlt	r9, r4
 80093fa:	4630      	mov	r0, r6
 80093fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009400:	bfba      	itte	lt
 8009402:	461c      	movlt	r4, r3
 8009404:	2501      	movlt	r5, #1
 8009406:	2500      	movge	r5, #0
 8009408:	f7ff fcfe 	bl	8008e08 <_Balloc>
 800940c:	4602      	mov	r2, r0
 800940e:	b918      	cbnz	r0, 8009418 <__mdiff+0x60>
 8009410:	4b31      	ldr	r3, [pc, #196]	@ (80094d8 <__mdiff+0x120>)
 8009412:	f240 2145 	movw	r1, #581	@ 0x245
 8009416:	e7e3      	b.n	80093e0 <__mdiff+0x28>
 8009418:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800941c:	6926      	ldr	r6, [r4, #16]
 800941e:	60c5      	str	r5, [r0, #12]
 8009420:	f109 0310 	add.w	r3, r9, #16
 8009424:	f109 0514 	add.w	r5, r9, #20
 8009428:	f104 0e14 	add.w	lr, r4, #20
 800942c:	f100 0b14 	add.w	fp, r0, #20
 8009430:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009434:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009438:	9301      	str	r3, [sp, #4]
 800943a:	46d9      	mov	r9, fp
 800943c:	f04f 0c00 	mov.w	ip, #0
 8009440:	9b01      	ldr	r3, [sp, #4]
 8009442:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009446:	f853 af04 	ldr.w	sl, [r3, #4]!
 800944a:	9301      	str	r3, [sp, #4]
 800944c:	fa1f f38a 	uxth.w	r3, sl
 8009450:	4619      	mov	r1, r3
 8009452:	b283      	uxth	r3, r0
 8009454:	1acb      	subs	r3, r1, r3
 8009456:	0c00      	lsrs	r0, r0, #16
 8009458:	4463      	add	r3, ip
 800945a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800945e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009462:	b29b      	uxth	r3, r3
 8009464:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009468:	4576      	cmp	r6, lr
 800946a:	f849 3b04 	str.w	r3, [r9], #4
 800946e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009472:	d8e5      	bhi.n	8009440 <__mdiff+0x88>
 8009474:	1b33      	subs	r3, r6, r4
 8009476:	3b15      	subs	r3, #21
 8009478:	f023 0303 	bic.w	r3, r3, #3
 800947c:	3415      	adds	r4, #21
 800947e:	3304      	adds	r3, #4
 8009480:	42a6      	cmp	r6, r4
 8009482:	bf38      	it	cc
 8009484:	2304      	movcc	r3, #4
 8009486:	441d      	add	r5, r3
 8009488:	445b      	add	r3, fp
 800948a:	461e      	mov	r6, r3
 800948c:	462c      	mov	r4, r5
 800948e:	4544      	cmp	r4, r8
 8009490:	d30e      	bcc.n	80094b0 <__mdiff+0xf8>
 8009492:	f108 0103 	add.w	r1, r8, #3
 8009496:	1b49      	subs	r1, r1, r5
 8009498:	f021 0103 	bic.w	r1, r1, #3
 800949c:	3d03      	subs	r5, #3
 800949e:	45a8      	cmp	r8, r5
 80094a0:	bf38      	it	cc
 80094a2:	2100      	movcc	r1, #0
 80094a4:	440b      	add	r3, r1
 80094a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094aa:	b191      	cbz	r1, 80094d2 <__mdiff+0x11a>
 80094ac:	6117      	str	r7, [r2, #16]
 80094ae:	e79d      	b.n	80093ec <__mdiff+0x34>
 80094b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80094b4:	46e6      	mov	lr, ip
 80094b6:	0c08      	lsrs	r0, r1, #16
 80094b8:	fa1c fc81 	uxtah	ip, ip, r1
 80094bc:	4471      	add	r1, lr
 80094be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80094c2:	b289      	uxth	r1, r1
 80094c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80094c8:	f846 1b04 	str.w	r1, [r6], #4
 80094cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094d0:	e7dd      	b.n	800948e <__mdiff+0xd6>
 80094d2:	3f01      	subs	r7, #1
 80094d4:	e7e7      	b.n	80094a6 <__mdiff+0xee>
 80094d6:	bf00      	nop
 80094d8:	0800a427 	.word	0x0800a427
 80094dc:	0800a498 	.word	0x0800a498

080094e0 <__ulp>:
 80094e0:	b082      	sub	sp, #8
 80094e2:	ed8d 0b00 	vstr	d0, [sp]
 80094e6:	9a01      	ldr	r2, [sp, #4]
 80094e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009528 <__ulp+0x48>)
 80094ea:	4013      	ands	r3, r2
 80094ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	dc08      	bgt.n	8009506 <__ulp+0x26>
 80094f4:	425b      	negs	r3, r3
 80094f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80094fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80094fe:	da04      	bge.n	800950a <__ulp+0x2a>
 8009500:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009504:	4113      	asrs	r3, r2
 8009506:	2200      	movs	r2, #0
 8009508:	e008      	b.n	800951c <__ulp+0x3c>
 800950a:	f1a2 0314 	sub.w	r3, r2, #20
 800950e:	2b1e      	cmp	r3, #30
 8009510:	bfda      	itte	le
 8009512:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009516:	40da      	lsrle	r2, r3
 8009518:	2201      	movgt	r2, #1
 800951a:	2300      	movs	r3, #0
 800951c:	4619      	mov	r1, r3
 800951e:	4610      	mov	r0, r2
 8009520:	ec41 0b10 	vmov	d0, r0, r1
 8009524:	b002      	add	sp, #8
 8009526:	4770      	bx	lr
 8009528:	7ff00000 	.word	0x7ff00000

0800952c <__b2d>:
 800952c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009530:	6906      	ldr	r6, [r0, #16]
 8009532:	f100 0814 	add.w	r8, r0, #20
 8009536:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800953a:	1f37      	subs	r7, r6, #4
 800953c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009540:	4610      	mov	r0, r2
 8009542:	f7ff fd53 	bl	8008fec <__hi0bits>
 8009546:	f1c0 0320 	rsb	r3, r0, #32
 800954a:	280a      	cmp	r0, #10
 800954c:	600b      	str	r3, [r1, #0]
 800954e:	491b      	ldr	r1, [pc, #108]	@ (80095bc <__b2d+0x90>)
 8009550:	dc15      	bgt.n	800957e <__b2d+0x52>
 8009552:	f1c0 0c0b 	rsb	ip, r0, #11
 8009556:	fa22 f30c 	lsr.w	r3, r2, ip
 800955a:	45b8      	cmp	r8, r7
 800955c:	ea43 0501 	orr.w	r5, r3, r1
 8009560:	bf34      	ite	cc
 8009562:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009566:	2300      	movcs	r3, #0
 8009568:	3015      	adds	r0, #21
 800956a:	fa02 f000 	lsl.w	r0, r2, r0
 800956e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009572:	4303      	orrs	r3, r0
 8009574:	461c      	mov	r4, r3
 8009576:	ec45 4b10 	vmov	d0, r4, r5
 800957a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800957e:	45b8      	cmp	r8, r7
 8009580:	bf3a      	itte	cc
 8009582:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009586:	f1a6 0708 	subcc.w	r7, r6, #8
 800958a:	2300      	movcs	r3, #0
 800958c:	380b      	subs	r0, #11
 800958e:	d012      	beq.n	80095b6 <__b2d+0x8a>
 8009590:	f1c0 0120 	rsb	r1, r0, #32
 8009594:	fa23 f401 	lsr.w	r4, r3, r1
 8009598:	4082      	lsls	r2, r0
 800959a:	4322      	orrs	r2, r4
 800959c:	4547      	cmp	r7, r8
 800959e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80095a2:	bf8c      	ite	hi
 80095a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80095a8:	2200      	movls	r2, #0
 80095aa:	4083      	lsls	r3, r0
 80095ac:	40ca      	lsrs	r2, r1
 80095ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80095b2:	4313      	orrs	r3, r2
 80095b4:	e7de      	b.n	8009574 <__b2d+0x48>
 80095b6:	ea42 0501 	orr.w	r5, r2, r1
 80095ba:	e7db      	b.n	8009574 <__b2d+0x48>
 80095bc:	3ff00000 	.word	0x3ff00000

080095c0 <__d2b>:
 80095c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095c4:	460f      	mov	r7, r1
 80095c6:	2101      	movs	r1, #1
 80095c8:	ec59 8b10 	vmov	r8, r9, d0
 80095cc:	4616      	mov	r6, r2
 80095ce:	f7ff fc1b 	bl	8008e08 <_Balloc>
 80095d2:	4604      	mov	r4, r0
 80095d4:	b930      	cbnz	r0, 80095e4 <__d2b+0x24>
 80095d6:	4602      	mov	r2, r0
 80095d8:	4b23      	ldr	r3, [pc, #140]	@ (8009668 <__d2b+0xa8>)
 80095da:	4824      	ldr	r0, [pc, #144]	@ (800966c <__d2b+0xac>)
 80095dc:	f240 310f 	movw	r1, #783	@ 0x30f
 80095e0:	f000 fb72 	bl	8009cc8 <__assert_func>
 80095e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095ec:	b10d      	cbz	r5, 80095f2 <__d2b+0x32>
 80095ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	f1b8 0300 	subs.w	r3, r8, #0
 80095f8:	d023      	beq.n	8009642 <__d2b+0x82>
 80095fa:	4668      	mov	r0, sp
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	f7ff fd14 	bl	800902a <__lo0bits>
 8009602:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009606:	b1d0      	cbz	r0, 800963e <__d2b+0x7e>
 8009608:	f1c0 0320 	rsb	r3, r0, #32
 800960c:	fa02 f303 	lsl.w	r3, r2, r3
 8009610:	430b      	orrs	r3, r1
 8009612:	40c2      	lsrs	r2, r0
 8009614:	6163      	str	r3, [r4, #20]
 8009616:	9201      	str	r2, [sp, #4]
 8009618:	9b01      	ldr	r3, [sp, #4]
 800961a:	61a3      	str	r3, [r4, #24]
 800961c:	2b00      	cmp	r3, #0
 800961e:	bf0c      	ite	eq
 8009620:	2201      	moveq	r2, #1
 8009622:	2202      	movne	r2, #2
 8009624:	6122      	str	r2, [r4, #16]
 8009626:	b1a5      	cbz	r5, 8009652 <__d2b+0x92>
 8009628:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800962c:	4405      	add	r5, r0
 800962e:	603d      	str	r5, [r7, #0]
 8009630:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009634:	6030      	str	r0, [r6, #0]
 8009636:	4620      	mov	r0, r4
 8009638:	b003      	add	sp, #12
 800963a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800963e:	6161      	str	r1, [r4, #20]
 8009640:	e7ea      	b.n	8009618 <__d2b+0x58>
 8009642:	a801      	add	r0, sp, #4
 8009644:	f7ff fcf1 	bl	800902a <__lo0bits>
 8009648:	9b01      	ldr	r3, [sp, #4]
 800964a:	6163      	str	r3, [r4, #20]
 800964c:	3020      	adds	r0, #32
 800964e:	2201      	movs	r2, #1
 8009650:	e7e8      	b.n	8009624 <__d2b+0x64>
 8009652:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009656:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800965a:	6038      	str	r0, [r7, #0]
 800965c:	6918      	ldr	r0, [r3, #16]
 800965e:	f7ff fcc5 	bl	8008fec <__hi0bits>
 8009662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009666:	e7e5      	b.n	8009634 <__d2b+0x74>
 8009668:	0800a427 	.word	0x0800a427
 800966c:	0800a498 	.word	0x0800a498

08009670 <__ratio>:
 8009670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	b085      	sub	sp, #20
 8009676:	e9cd 1000 	strd	r1, r0, [sp]
 800967a:	a902      	add	r1, sp, #8
 800967c:	f7ff ff56 	bl	800952c <__b2d>
 8009680:	9800      	ldr	r0, [sp, #0]
 8009682:	a903      	add	r1, sp, #12
 8009684:	ec55 4b10 	vmov	r4, r5, d0
 8009688:	f7ff ff50 	bl	800952c <__b2d>
 800968c:	9b01      	ldr	r3, [sp, #4]
 800968e:	6919      	ldr	r1, [r3, #16]
 8009690:	9b00      	ldr	r3, [sp, #0]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	1ac9      	subs	r1, r1, r3
 8009696:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800969a:	1a9b      	subs	r3, r3, r2
 800969c:	ec5b ab10 	vmov	sl, fp, d0
 80096a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	bfce      	itee	gt
 80096a8:	462a      	movgt	r2, r5
 80096aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80096ae:	465a      	movle	r2, fp
 80096b0:	462f      	mov	r7, r5
 80096b2:	46d9      	mov	r9, fp
 80096b4:	bfcc      	ite	gt
 80096b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80096ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80096be:	464b      	mov	r3, r9
 80096c0:	4652      	mov	r2, sl
 80096c2:	4620      	mov	r0, r4
 80096c4:	4639      	mov	r1, r7
 80096c6:	f7f7 f8c1 	bl	800084c <__aeabi_ddiv>
 80096ca:	ec41 0b10 	vmov	d0, r0, r1
 80096ce:	b005      	add	sp, #20
 80096d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096d4 <__copybits>:
 80096d4:	3901      	subs	r1, #1
 80096d6:	b570      	push	{r4, r5, r6, lr}
 80096d8:	1149      	asrs	r1, r1, #5
 80096da:	6914      	ldr	r4, [r2, #16]
 80096dc:	3101      	adds	r1, #1
 80096de:	f102 0314 	add.w	r3, r2, #20
 80096e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80096e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80096ea:	1f05      	subs	r5, r0, #4
 80096ec:	42a3      	cmp	r3, r4
 80096ee:	d30c      	bcc.n	800970a <__copybits+0x36>
 80096f0:	1aa3      	subs	r3, r4, r2
 80096f2:	3b11      	subs	r3, #17
 80096f4:	f023 0303 	bic.w	r3, r3, #3
 80096f8:	3211      	adds	r2, #17
 80096fa:	42a2      	cmp	r2, r4
 80096fc:	bf88      	it	hi
 80096fe:	2300      	movhi	r3, #0
 8009700:	4418      	add	r0, r3
 8009702:	2300      	movs	r3, #0
 8009704:	4288      	cmp	r0, r1
 8009706:	d305      	bcc.n	8009714 <__copybits+0x40>
 8009708:	bd70      	pop	{r4, r5, r6, pc}
 800970a:	f853 6b04 	ldr.w	r6, [r3], #4
 800970e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009712:	e7eb      	b.n	80096ec <__copybits+0x18>
 8009714:	f840 3b04 	str.w	r3, [r0], #4
 8009718:	e7f4      	b.n	8009704 <__copybits+0x30>

0800971a <__any_on>:
 800971a:	f100 0214 	add.w	r2, r0, #20
 800971e:	6900      	ldr	r0, [r0, #16]
 8009720:	114b      	asrs	r3, r1, #5
 8009722:	4298      	cmp	r0, r3
 8009724:	b510      	push	{r4, lr}
 8009726:	db11      	blt.n	800974c <__any_on+0x32>
 8009728:	dd0a      	ble.n	8009740 <__any_on+0x26>
 800972a:	f011 011f 	ands.w	r1, r1, #31
 800972e:	d007      	beq.n	8009740 <__any_on+0x26>
 8009730:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009734:	fa24 f001 	lsr.w	r0, r4, r1
 8009738:	fa00 f101 	lsl.w	r1, r0, r1
 800973c:	428c      	cmp	r4, r1
 800973e:	d10b      	bne.n	8009758 <__any_on+0x3e>
 8009740:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009744:	4293      	cmp	r3, r2
 8009746:	d803      	bhi.n	8009750 <__any_on+0x36>
 8009748:	2000      	movs	r0, #0
 800974a:	bd10      	pop	{r4, pc}
 800974c:	4603      	mov	r3, r0
 800974e:	e7f7      	b.n	8009740 <__any_on+0x26>
 8009750:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009754:	2900      	cmp	r1, #0
 8009756:	d0f5      	beq.n	8009744 <__any_on+0x2a>
 8009758:	2001      	movs	r0, #1
 800975a:	e7f6      	b.n	800974a <__any_on+0x30>

0800975c <_strtol_l.isra.0>:
 800975c:	2b24      	cmp	r3, #36	@ 0x24
 800975e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009762:	4686      	mov	lr, r0
 8009764:	4690      	mov	r8, r2
 8009766:	d801      	bhi.n	800976c <_strtol_l.isra.0+0x10>
 8009768:	2b01      	cmp	r3, #1
 800976a:	d106      	bne.n	800977a <_strtol_l.isra.0+0x1e>
 800976c:	f7fe f85c 	bl	8007828 <__errno>
 8009770:	2316      	movs	r3, #22
 8009772:	6003      	str	r3, [r0, #0]
 8009774:	2000      	movs	r0, #0
 8009776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977a:	4834      	ldr	r0, [pc, #208]	@ (800984c <_strtol_l.isra.0+0xf0>)
 800977c:	460d      	mov	r5, r1
 800977e:	462a      	mov	r2, r5
 8009780:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009784:	5d06      	ldrb	r6, [r0, r4]
 8009786:	f016 0608 	ands.w	r6, r6, #8
 800978a:	d1f8      	bne.n	800977e <_strtol_l.isra.0+0x22>
 800978c:	2c2d      	cmp	r4, #45	@ 0x2d
 800978e:	d110      	bne.n	80097b2 <_strtol_l.isra.0+0x56>
 8009790:	782c      	ldrb	r4, [r5, #0]
 8009792:	2601      	movs	r6, #1
 8009794:	1c95      	adds	r5, r2, #2
 8009796:	f033 0210 	bics.w	r2, r3, #16
 800979a:	d115      	bne.n	80097c8 <_strtol_l.isra.0+0x6c>
 800979c:	2c30      	cmp	r4, #48	@ 0x30
 800979e:	d10d      	bne.n	80097bc <_strtol_l.isra.0+0x60>
 80097a0:	782a      	ldrb	r2, [r5, #0]
 80097a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80097a6:	2a58      	cmp	r2, #88	@ 0x58
 80097a8:	d108      	bne.n	80097bc <_strtol_l.isra.0+0x60>
 80097aa:	786c      	ldrb	r4, [r5, #1]
 80097ac:	3502      	adds	r5, #2
 80097ae:	2310      	movs	r3, #16
 80097b0:	e00a      	b.n	80097c8 <_strtol_l.isra.0+0x6c>
 80097b2:	2c2b      	cmp	r4, #43	@ 0x2b
 80097b4:	bf04      	itt	eq
 80097b6:	782c      	ldrbeq	r4, [r5, #0]
 80097b8:	1c95      	addeq	r5, r2, #2
 80097ba:	e7ec      	b.n	8009796 <_strtol_l.isra.0+0x3a>
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1f6      	bne.n	80097ae <_strtol_l.isra.0+0x52>
 80097c0:	2c30      	cmp	r4, #48	@ 0x30
 80097c2:	bf14      	ite	ne
 80097c4:	230a      	movne	r3, #10
 80097c6:	2308      	moveq	r3, #8
 80097c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80097cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80097d0:	2200      	movs	r2, #0
 80097d2:	fbbc f9f3 	udiv	r9, ip, r3
 80097d6:	4610      	mov	r0, r2
 80097d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80097dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80097e0:	2f09      	cmp	r7, #9
 80097e2:	d80f      	bhi.n	8009804 <_strtol_l.isra.0+0xa8>
 80097e4:	463c      	mov	r4, r7
 80097e6:	42a3      	cmp	r3, r4
 80097e8:	dd1b      	ble.n	8009822 <_strtol_l.isra.0+0xc6>
 80097ea:	1c57      	adds	r7, r2, #1
 80097ec:	d007      	beq.n	80097fe <_strtol_l.isra.0+0xa2>
 80097ee:	4581      	cmp	r9, r0
 80097f0:	d314      	bcc.n	800981c <_strtol_l.isra.0+0xc0>
 80097f2:	d101      	bne.n	80097f8 <_strtol_l.isra.0+0x9c>
 80097f4:	45a2      	cmp	sl, r4
 80097f6:	db11      	blt.n	800981c <_strtol_l.isra.0+0xc0>
 80097f8:	fb00 4003 	mla	r0, r0, r3, r4
 80097fc:	2201      	movs	r2, #1
 80097fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009802:	e7eb      	b.n	80097dc <_strtol_l.isra.0+0x80>
 8009804:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009808:	2f19      	cmp	r7, #25
 800980a:	d801      	bhi.n	8009810 <_strtol_l.isra.0+0xb4>
 800980c:	3c37      	subs	r4, #55	@ 0x37
 800980e:	e7ea      	b.n	80097e6 <_strtol_l.isra.0+0x8a>
 8009810:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009814:	2f19      	cmp	r7, #25
 8009816:	d804      	bhi.n	8009822 <_strtol_l.isra.0+0xc6>
 8009818:	3c57      	subs	r4, #87	@ 0x57
 800981a:	e7e4      	b.n	80097e6 <_strtol_l.isra.0+0x8a>
 800981c:	f04f 32ff 	mov.w	r2, #4294967295
 8009820:	e7ed      	b.n	80097fe <_strtol_l.isra.0+0xa2>
 8009822:	1c53      	adds	r3, r2, #1
 8009824:	d108      	bne.n	8009838 <_strtol_l.isra.0+0xdc>
 8009826:	2322      	movs	r3, #34	@ 0x22
 8009828:	f8ce 3000 	str.w	r3, [lr]
 800982c:	4660      	mov	r0, ip
 800982e:	f1b8 0f00 	cmp.w	r8, #0
 8009832:	d0a0      	beq.n	8009776 <_strtol_l.isra.0+0x1a>
 8009834:	1e69      	subs	r1, r5, #1
 8009836:	e006      	b.n	8009846 <_strtol_l.isra.0+0xea>
 8009838:	b106      	cbz	r6, 800983c <_strtol_l.isra.0+0xe0>
 800983a:	4240      	negs	r0, r0
 800983c:	f1b8 0f00 	cmp.w	r8, #0
 8009840:	d099      	beq.n	8009776 <_strtol_l.isra.0+0x1a>
 8009842:	2a00      	cmp	r2, #0
 8009844:	d1f6      	bne.n	8009834 <_strtol_l.isra.0+0xd8>
 8009846:	f8c8 1000 	str.w	r1, [r8]
 800984a:	e794      	b.n	8009776 <_strtol_l.isra.0+0x1a>
 800984c:	0800a691 	.word	0x0800a691

08009850 <_strtol_r>:
 8009850:	f7ff bf84 	b.w	800975c <_strtol_l.isra.0>

08009854 <__ascii_wctomb>:
 8009854:	4603      	mov	r3, r0
 8009856:	4608      	mov	r0, r1
 8009858:	b141      	cbz	r1, 800986c <__ascii_wctomb+0x18>
 800985a:	2aff      	cmp	r2, #255	@ 0xff
 800985c:	d904      	bls.n	8009868 <__ascii_wctomb+0x14>
 800985e:	228a      	movs	r2, #138	@ 0x8a
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	f04f 30ff 	mov.w	r0, #4294967295
 8009866:	4770      	bx	lr
 8009868:	700a      	strb	r2, [r1, #0]
 800986a:	2001      	movs	r0, #1
 800986c:	4770      	bx	lr

0800986e <__ssputs_r>:
 800986e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009872:	688e      	ldr	r6, [r1, #8]
 8009874:	461f      	mov	r7, r3
 8009876:	42be      	cmp	r6, r7
 8009878:	680b      	ldr	r3, [r1, #0]
 800987a:	4682      	mov	sl, r0
 800987c:	460c      	mov	r4, r1
 800987e:	4690      	mov	r8, r2
 8009880:	d82d      	bhi.n	80098de <__ssputs_r+0x70>
 8009882:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009886:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800988a:	d026      	beq.n	80098da <__ssputs_r+0x6c>
 800988c:	6965      	ldr	r5, [r4, #20]
 800988e:	6909      	ldr	r1, [r1, #16]
 8009890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009894:	eba3 0901 	sub.w	r9, r3, r1
 8009898:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800989c:	1c7b      	adds	r3, r7, #1
 800989e:	444b      	add	r3, r9
 80098a0:	106d      	asrs	r5, r5, #1
 80098a2:	429d      	cmp	r5, r3
 80098a4:	bf38      	it	cc
 80098a6:	461d      	movcc	r5, r3
 80098a8:	0553      	lsls	r3, r2, #21
 80098aa:	d527      	bpl.n	80098fc <__ssputs_r+0x8e>
 80098ac:	4629      	mov	r1, r5
 80098ae:	f7ff fa0d 	bl	8008ccc <_malloc_r>
 80098b2:	4606      	mov	r6, r0
 80098b4:	b360      	cbz	r0, 8009910 <__ssputs_r+0xa2>
 80098b6:	6921      	ldr	r1, [r4, #16]
 80098b8:	464a      	mov	r2, r9
 80098ba:	f7fd ffe2 	bl	8007882 <memcpy>
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80098c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	6126      	str	r6, [r4, #16]
 80098cc:	6165      	str	r5, [r4, #20]
 80098ce:	444e      	add	r6, r9
 80098d0:	eba5 0509 	sub.w	r5, r5, r9
 80098d4:	6026      	str	r6, [r4, #0]
 80098d6:	60a5      	str	r5, [r4, #8]
 80098d8:	463e      	mov	r6, r7
 80098da:	42be      	cmp	r6, r7
 80098dc:	d900      	bls.n	80098e0 <__ssputs_r+0x72>
 80098de:	463e      	mov	r6, r7
 80098e0:	6820      	ldr	r0, [r4, #0]
 80098e2:	4632      	mov	r2, r6
 80098e4:	4641      	mov	r1, r8
 80098e6:	f000 f9c5 	bl	8009c74 <memmove>
 80098ea:	68a3      	ldr	r3, [r4, #8]
 80098ec:	1b9b      	subs	r3, r3, r6
 80098ee:	60a3      	str	r3, [r4, #8]
 80098f0:	6823      	ldr	r3, [r4, #0]
 80098f2:	4433      	add	r3, r6
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	2000      	movs	r0, #0
 80098f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098fc:	462a      	mov	r2, r5
 80098fe:	f000 fa15 	bl	8009d2c <_realloc_r>
 8009902:	4606      	mov	r6, r0
 8009904:	2800      	cmp	r0, #0
 8009906:	d1e0      	bne.n	80098ca <__ssputs_r+0x5c>
 8009908:	6921      	ldr	r1, [r4, #16]
 800990a:	4650      	mov	r0, sl
 800990c:	f7fe fe30 	bl	8008570 <_free_r>
 8009910:	230c      	movs	r3, #12
 8009912:	f8ca 3000 	str.w	r3, [sl]
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	f04f 30ff 	mov.w	r0, #4294967295
 8009922:	e7e9      	b.n	80098f8 <__ssputs_r+0x8a>

08009924 <_svfiprintf_r>:
 8009924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009928:	4698      	mov	r8, r3
 800992a:	898b      	ldrh	r3, [r1, #12]
 800992c:	061b      	lsls	r3, r3, #24
 800992e:	b09d      	sub	sp, #116	@ 0x74
 8009930:	4607      	mov	r7, r0
 8009932:	460d      	mov	r5, r1
 8009934:	4614      	mov	r4, r2
 8009936:	d510      	bpl.n	800995a <_svfiprintf_r+0x36>
 8009938:	690b      	ldr	r3, [r1, #16]
 800993a:	b973      	cbnz	r3, 800995a <_svfiprintf_r+0x36>
 800993c:	2140      	movs	r1, #64	@ 0x40
 800993e:	f7ff f9c5 	bl	8008ccc <_malloc_r>
 8009942:	6028      	str	r0, [r5, #0]
 8009944:	6128      	str	r0, [r5, #16]
 8009946:	b930      	cbnz	r0, 8009956 <_svfiprintf_r+0x32>
 8009948:	230c      	movs	r3, #12
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	f04f 30ff 	mov.w	r0, #4294967295
 8009950:	b01d      	add	sp, #116	@ 0x74
 8009952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009956:	2340      	movs	r3, #64	@ 0x40
 8009958:	616b      	str	r3, [r5, #20]
 800995a:	2300      	movs	r3, #0
 800995c:	9309      	str	r3, [sp, #36]	@ 0x24
 800995e:	2320      	movs	r3, #32
 8009960:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009964:	f8cd 800c 	str.w	r8, [sp, #12]
 8009968:	2330      	movs	r3, #48	@ 0x30
 800996a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b08 <_svfiprintf_r+0x1e4>
 800996e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009972:	f04f 0901 	mov.w	r9, #1
 8009976:	4623      	mov	r3, r4
 8009978:	469a      	mov	sl, r3
 800997a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800997e:	b10a      	cbz	r2, 8009984 <_svfiprintf_r+0x60>
 8009980:	2a25      	cmp	r2, #37	@ 0x25
 8009982:	d1f9      	bne.n	8009978 <_svfiprintf_r+0x54>
 8009984:	ebba 0b04 	subs.w	fp, sl, r4
 8009988:	d00b      	beq.n	80099a2 <_svfiprintf_r+0x7e>
 800998a:	465b      	mov	r3, fp
 800998c:	4622      	mov	r2, r4
 800998e:	4629      	mov	r1, r5
 8009990:	4638      	mov	r0, r7
 8009992:	f7ff ff6c 	bl	800986e <__ssputs_r>
 8009996:	3001      	adds	r0, #1
 8009998:	f000 80a7 	beq.w	8009aea <_svfiprintf_r+0x1c6>
 800999c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800999e:	445a      	add	r2, fp
 80099a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80099a2:	f89a 3000 	ldrb.w	r3, [sl]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 809f 	beq.w	8009aea <_svfiprintf_r+0x1c6>
 80099ac:	2300      	movs	r3, #0
 80099ae:	f04f 32ff 	mov.w	r2, #4294967295
 80099b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099b6:	f10a 0a01 	add.w	sl, sl, #1
 80099ba:	9304      	str	r3, [sp, #16]
 80099bc:	9307      	str	r3, [sp, #28]
 80099be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80099c4:	4654      	mov	r4, sl
 80099c6:	2205      	movs	r2, #5
 80099c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099cc:	484e      	ldr	r0, [pc, #312]	@ (8009b08 <_svfiprintf_r+0x1e4>)
 80099ce:	f7f6 fbff 	bl	80001d0 <memchr>
 80099d2:	9a04      	ldr	r2, [sp, #16]
 80099d4:	b9d8      	cbnz	r0, 8009a0e <_svfiprintf_r+0xea>
 80099d6:	06d0      	lsls	r0, r2, #27
 80099d8:	bf44      	itt	mi
 80099da:	2320      	movmi	r3, #32
 80099dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099e0:	0711      	lsls	r1, r2, #28
 80099e2:	bf44      	itt	mi
 80099e4:	232b      	movmi	r3, #43	@ 0x2b
 80099e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099ea:	f89a 3000 	ldrb.w	r3, [sl]
 80099ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80099f0:	d015      	beq.n	8009a1e <_svfiprintf_r+0xfa>
 80099f2:	9a07      	ldr	r2, [sp, #28]
 80099f4:	4654      	mov	r4, sl
 80099f6:	2000      	movs	r0, #0
 80099f8:	f04f 0c0a 	mov.w	ip, #10
 80099fc:	4621      	mov	r1, r4
 80099fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a02:	3b30      	subs	r3, #48	@ 0x30
 8009a04:	2b09      	cmp	r3, #9
 8009a06:	d94b      	bls.n	8009aa0 <_svfiprintf_r+0x17c>
 8009a08:	b1b0      	cbz	r0, 8009a38 <_svfiprintf_r+0x114>
 8009a0a:	9207      	str	r2, [sp, #28]
 8009a0c:	e014      	b.n	8009a38 <_svfiprintf_r+0x114>
 8009a0e:	eba0 0308 	sub.w	r3, r0, r8
 8009a12:	fa09 f303 	lsl.w	r3, r9, r3
 8009a16:	4313      	orrs	r3, r2
 8009a18:	9304      	str	r3, [sp, #16]
 8009a1a:	46a2      	mov	sl, r4
 8009a1c:	e7d2      	b.n	80099c4 <_svfiprintf_r+0xa0>
 8009a1e:	9b03      	ldr	r3, [sp, #12]
 8009a20:	1d19      	adds	r1, r3, #4
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	9103      	str	r1, [sp, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	bfbb      	ittet	lt
 8009a2a:	425b      	neglt	r3, r3
 8009a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a30:	9307      	strge	r3, [sp, #28]
 8009a32:	9307      	strlt	r3, [sp, #28]
 8009a34:	bfb8      	it	lt
 8009a36:	9204      	strlt	r2, [sp, #16]
 8009a38:	7823      	ldrb	r3, [r4, #0]
 8009a3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a3c:	d10a      	bne.n	8009a54 <_svfiprintf_r+0x130>
 8009a3e:	7863      	ldrb	r3, [r4, #1]
 8009a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a42:	d132      	bne.n	8009aaa <_svfiprintf_r+0x186>
 8009a44:	9b03      	ldr	r3, [sp, #12]
 8009a46:	1d1a      	adds	r2, r3, #4
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	9203      	str	r2, [sp, #12]
 8009a4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a50:	3402      	adds	r4, #2
 8009a52:	9305      	str	r3, [sp, #20]
 8009a54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b18 <_svfiprintf_r+0x1f4>
 8009a58:	7821      	ldrb	r1, [r4, #0]
 8009a5a:	2203      	movs	r2, #3
 8009a5c:	4650      	mov	r0, sl
 8009a5e:	f7f6 fbb7 	bl	80001d0 <memchr>
 8009a62:	b138      	cbz	r0, 8009a74 <_svfiprintf_r+0x150>
 8009a64:	9b04      	ldr	r3, [sp, #16]
 8009a66:	eba0 000a 	sub.w	r0, r0, sl
 8009a6a:	2240      	movs	r2, #64	@ 0x40
 8009a6c:	4082      	lsls	r2, r0
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	3401      	adds	r4, #1
 8009a72:	9304      	str	r3, [sp, #16]
 8009a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a78:	4824      	ldr	r0, [pc, #144]	@ (8009b0c <_svfiprintf_r+0x1e8>)
 8009a7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a7e:	2206      	movs	r2, #6
 8009a80:	f7f6 fba6 	bl	80001d0 <memchr>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d036      	beq.n	8009af6 <_svfiprintf_r+0x1d2>
 8009a88:	4b21      	ldr	r3, [pc, #132]	@ (8009b10 <_svfiprintf_r+0x1ec>)
 8009a8a:	bb1b      	cbnz	r3, 8009ad4 <_svfiprintf_r+0x1b0>
 8009a8c:	9b03      	ldr	r3, [sp, #12]
 8009a8e:	3307      	adds	r3, #7
 8009a90:	f023 0307 	bic.w	r3, r3, #7
 8009a94:	3308      	adds	r3, #8
 8009a96:	9303      	str	r3, [sp, #12]
 8009a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a9a:	4433      	add	r3, r6
 8009a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a9e:	e76a      	b.n	8009976 <_svfiprintf_r+0x52>
 8009aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	2001      	movs	r0, #1
 8009aa8:	e7a8      	b.n	80099fc <_svfiprintf_r+0xd8>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	3401      	adds	r4, #1
 8009aae:	9305      	str	r3, [sp, #20]
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	f04f 0c0a 	mov.w	ip, #10
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009abc:	3a30      	subs	r2, #48	@ 0x30
 8009abe:	2a09      	cmp	r2, #9
 8009ac0:	d903      	bls.n	8009aca <_svfiprintf_r+0x1a6>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d0c6      	beq.n	8009a54 <_svfiprintf_r+0x130>
 8009ac6:	9105      	str	r1, [sp, #20]
 8009ac8:	e7c4      	b.n	8009a54 <_svfiprintf_r+0x130>
 8009aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ace:	4604      	mov	r4, r0
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e7f0      	b.n	8009ab6 <_svfiprintf_r+0x192>
 8009ad4:	ab03      	add	r3, sp, #12
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	462a      	mov	r2, r5
 8009ada:	4b0e      	ldr	r3, [pc, #56]	@ (8009b14 <_svfiprintf_r+0x1f0>)
 8009adc:	a904      	add	r1, sp, #16
 8009ade:	4638      	mov	r0, r7
 8009ae0:	f7fc ff1c 	bl	800691c <_printf_float>
 8009ae4:	1c42      	adds	r2, r0, #1
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	d1d6      	bne.n	8009a98 <_svfiprintf_r+0x174>
 8009aea:	89ab      	ldrh	r3, [r5, #12]
 8009aec:	065b      	lsls	r3, r3, #25
 8009aee:	f53f af2d 	bmi.w	800994c <_svfiprintf_r+0x28>
 8009af2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009af4:	e72c      	b.n	8009950 <_svfiprintf_r+0x2c>
 8009af6:	ab03      	add	r3, sp, #12
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	462a      	mov	r2, r5
 8009afc:	4b05      	ldr	r3, [pc, #20]	@ (8009b14 <_svfiprintf_r+0x1f0>)
 8009afe:	a904      	add	r1, sp, #16
 8009b00:	4638      	mov	r0, r7
 8009b02:	f7fd f9a3 	bl	8006e4c <_printf_i>
 8009b06:	e7ed      	b.n	8009ae4 <_svfiprintf_r+0x1c0>
 8009b08:	0800a4f1 	.word	0x0800a4f1
 8009b0c:	0800a4fb 	.word	0x0800a4fb
 8009b10:	0800691d 	.word	0x0800691d
 8009b14:	0800986f 	.word	0x0800986f
 8009b18:	0800a4f7 	.word	0x0800a4f7

08009b1c <__sflush_r>:
 8009b1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b24:	0716      	lsls	r6, r2, #28
 8009b26:	4605      	mov	r5, r0
 8009b28:	460c      	mov	r4, r1
 8009b2a:	d454      	bmi.n	8009bd6 <__sflush_r+0xba>
 8009b2c:	684b      	ldr	r3, [r1, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	dc02      	bgt.n	8009b38 <__sflush_r+0x1c>
 8009b32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	dd48      	ble.n	8009bca <__sflush_r+0xae>
 8009b38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b3a:	2e00      	cmp	r6, #0
 8009b3c:	d045      	beq.n	8009bca <__sflush_r+0xae>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b44:	682f      	ldr	r7, [r5, #0]
 8009b46:	6a21      	ldr	r1, [r4, #32]
 8009b48:	602b      	str	r3, [r5, #0]
 8009b4a:	d030      	beq.n	8009bae <__sflush_r+0x92>
 8009b4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	0759      	lsls	r1, r3, #29
 8009b52:	d505      	bpl.n	8009b60 <__sflush_r+0x44>
 8009b54:	6863      	ldr	r3, [r4, #4]
 8009b56:	1ad2      	subs	r2, r2, r3
 8009b58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b5a:	b10b      	cbz	r3, 8009b60 <__sflush_r+0x44>
 8009b5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	2300      	movs	r3, #0
 8009b62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b64:	6a21      	ldr	r1, [r4, #32]
 8009b66:	4628      	mov	r0, r5
 8009b68:	47b0      	blx	r6
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	d106      	bne.n	8009b7e <__sflush_r+0x62>
 8009b70:	6829      	ldr	r1, [r5, #0]
 8009b72:	291d      	cmp	r1, #29
 8009b74:	d82b      	bhi.n	8009bce <__sflush_r+0xb2>
 8009b76:	4a2a      	ldr	r2, [pc, #168]	@ (8009c20 <__sflush_r+0x104>)
 8009b78:	40ca      	lsrs	r2, r1
 8009b7a:	07d6      	lsls	r6, r2, #31
 8009b7c:	d527      	bpl.n	8009bce <__sflush_r+0xb2>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	6062      	str	r2, [r4, #4]
 8009b82:	04d9      	lsls	r1, r3, #19
 8009b84:	6922      	ldr	r2, [r4, #16]
 8009b86:	6022      	str	r2, [r4, #0]
 8009b88:	d504      	bpl.n	8009b94 <__sflush_r+0x78>
 8009b8a:	1c42      	adds	r2, r0, #1
 8009b8c:	d101      	bne.n	8009b92 <__sflush_r+0x76>
 8009b8e:	682b      	ldr	r3, [r5, #0]
 8009b90:	b903      	cbnz	r3, 8009b94 <__sflush_r+0x78>
 8009b92:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b96:	602f      	str	r7, [r5, #0]
 8009b98:	b1b9      	cbz	r1, 8009bca <__sflush_r+0xae>
 8009b9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b9e:	4299      	cmp	r1, r3
 8009ba0:	d002      	beq.n	8009ba8 <__sflush_r+0x8c>
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	f7fe fce4 	bl	8008570 <_free_r>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bac:	e00d      	b.n	8009bca <__sflush_r+0xae>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	47b0      	blx	r6
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	1c50      	adds	r0, r2, #1
 8009bb8:	d1c9      	bne.n	8009b4e <__sflush_r+0x32>
 8009bba:	682b      	ldr	r3, [r5, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d0c6      	beq.n	8009b4e <__sflush_r+0x32>
 8009bc0:	2b1d      	cmp	r3, #29
 8009bc2:	d001      	beq.n	8009bc8 <__sflush_r+0xac>
 8009bc4:	2b16      	cmp	r3, #22
 8009bc6:	d11e      	bne.n	8009c06 <__sflush_r+0xea>
 8009bc8:	602f      	str	r7, [r5, #0]
 8009bca:	2000      	movs	r0, #0
 8009bcc:	e022      	b.n	8009c14 <__sflush_r+0xf8>
 8009bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bd2:	b21b      	sxth	r3, r3
 8009bd4:	e01b      	b.n	8009c0e <__sflush_r+0xf2>
 8009bd6:	690f      	ldr	r7, [r1, #16]
 8009bd8:	2f00      	cmp	r7, #0
 8009bda:	d0f6      	beq.n	8009bca <__sflush_r+0xae>
 8009bdc:	0793      	lsls	r3, r2, #30
 8009bde:	680e      	ldr	r6, [r1, #0]
 8009be0:	bf08      	it	eq
 8009be2:	694b      	ldreq	r3, [r1, #20]
 8009be4:	600f      	str	r7, [r1, #0]
 8009be6:	bf18      	it	ne
 8009be8:	2300      	movne	r3, #0
 8009bea:	eba6 0807 	sub.w	r8, r6, r7
 8009bee:	608b      	str	r3, [r1, #8]
 8009bf0:	f1b8 0f00 	cmp.w	r8, #0
 8009bf4:	dde9      	ble.n	8009bca <__sflush_r+0xae>
 8009bf6:	6a21      	ldr	r1, [r4, #32]
 8009bf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009bfa:	4643      	mov	r3, r8
 8009bfc:	463a      	mov	r2, r7
 8009bfe:	4628      	mov	r0, r5
 8009c00:	47b0      	blx	r6
 8009c02:	2800      	cmp	r0, #0
 8009c04:	dc08      	bgt.n	8009c18 <__sflush_r+0xfc>
 8009c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c0e:	81a3      	strh	r3, [r4, #12]
 8009c10:	f04f 30ff 	mov.w	r0, #4294967295
 8009c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c18:	4407      	add	r7, r0
 8009c1a:	eba8 0800 	sub.w	r8, r8, r0
 8009c1e:	e7e7      	b.n	8009bf0 <__sflush_r+0xd4>
 8009c20:	20400001 	.word	0x20400001

08009c24 <_fflush_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	690b      	ldr	r3, [r1, #16]
 8009c28:	4605      	mov	r5, r0
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	b913      	cbnz	r3, 8009c34 <_fflush_r+0x10>
 8009c2e:	2500      	movs	r5, #0
 8009c30:	4628      	mov	r0, r5
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	b118      	cbz	r0, 8009c3e <_fflush_r+0x1a>
 8009c36:	6a03      	ldr	r3, [r0, #32]
 8009c38:	b90b      	cbnz	r3, 8009c3e <_fflush_r+0x1a>
 8009c3a:	f7fd fcbf 	bl	80075bc <__sinit>
 8009c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0f3      	beq.n	8009c2e <_fflush_r+0xa>
 8009c46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c48:	07d0      	lsls	r0, r2, #31
 8009c4a:	d404      	bmi.n	8009c56 <_fflush_r+0x32>
 8009c4c:	0599      	lsls	r1, r3, #22
 8009c4e:	d402      	bmi.n	8009c56 <_fflush_r+0x32>
 8009c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c52:	f7fd fe14 	bl	800787e <__retarget_lock_acquire_recursive>
 8009c56:	4628      	mov	r0, r5
 8009c58:	4621      	mov	r1, r4
 8009c5a:	f7ff ff5f 	bl	8009b1c <__sflush_r>
 8009c5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c60:	07da      	lsls	r2, r3, #31
 8009c62:	4605      	mov	r5, r0
 8009c64:	d4e4      	bmi.n	8009c30 <_fflush_r+0xc>
 8009c66:	89a3      	ldrh	r3, [r4, #12]
 8009c68:	059b      	lsls	r3, r3, #22
 8009c6a:	d4e1      	bmi.n	8009c30 <_fflush_r+0xc>
 8009c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c6e:	f7fd fe07 	bl	8007880 <__retarget_lock_release_recursive>
 8009c72:	e7dd      	b.n	8009c30 <_fflush_r+0xc>

08009c74 <memmove>:
 8009c74:	4288      	cmp	r0, r1
 8009c76:	b510      	push	{r4, lr}
 8009c78:	eb01 0402 	add.w	r4, r1, r2
 8009c7c:	d902      	bls.n	8009c84 <memmove+0x10>
 8009c7e:	4284      	cmp	r4, r0
 8009c80:	4623      	mov	r3, r4
 8009c82:	d807      	bhi.n	8009c94 <memmove+0x20>
 8009c84:	1e43      	subs	r3, r0, #1
 8009c86:	42a1      	cmp	r1, r4
 8009c88:	d008      	beq.n	8009c9c <memmove+0x28>
 8009c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c92:	e7f8      	b.n	8009c86 <memmove+0x12>
 8009c94:	4402      	add	r2, r0
 8009c96:	4601      	mov	r1, r0
 8009c98:	428a      	cmp	r2, r1
 8009c9a:	d100      	bne.n	8009c9e <memmove+0x2a>
 8009c9c:	bd10      	pop	{r4, pc}
 8009c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ca6:	e7f7      	b.n	8009c98 <memmove+0x24>

08009ca8 <_sbrk_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4d06      	ldr	r5, [pc, #24]	@ (8009cc4 <_sbrk_r+0x1c>)
 8009cac:	2300      	movs	r3, #0
 8009cae:	4604      	mov	r4, r0
 8009cb0:	4608      	mov	r0, r1
 8009cb2:	602b      	str	r3, [r5, #0]
 8009cb4:	f7f7 ffde 	bl	8001c74 <_sbrk>
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	d102      	bne.n	8009cc2 <_sbrk_r+0x1a>
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	b103      	cbz	r3, 8009cc2 <_sbrk_r+0x1a>
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	bd38      	pop	{r3, r4, r5, pc}
 8009cc4:	20000674 	.word	0x20000674

08009cc8 <__assert_func>:
 8009cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cca:	4614      	mov	r4, r2
 8009ccc:	461a      	mov	r2, r3
 8009cce:	4b09      	ldr	r3, [pc, #36]	@ (8009cf4 <__assert_func+0x2c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	68d8      	ldr	r0, [r3, #12]
 8009cd6:	b14c      	cbz	r4, 8009cec <__assert_func+0x24>
 8009cd8:	4b07      	ldr	r3, [pc, #28]	@ (8009cf8 <__assert_func+0x30>)
 8009cda:	9100      	str	r1, [sp, #0]
 8009cdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ce0:	4906      	ldr	r1, [pc, #24]	@ (8009cfc <__assert_func+0x34>)
 8009ce2:	462b      	mov	r3, r5
 8009ce4:	f000 f850 	bl	8009d88 <fiprintf>
 8009ce8:	f000 f860 	bl	8009dac <abort>
 8009cec:	4b04      	ldr	r3, [pc, #16]	@ (8009d00 <__assert_func+0x38>)
 8009cee:	461c      	mov	r4, r3
 8009cf0:	e7f3      	b.n	8009cda <__assert_func+0x12>
 8009cf2:	bf00      	nop
 8009cf4:	20000218 	.word	0x20000218
 8009cf8:	0800a502 	.word	0x0800a502
 8009cfc:	0800a50f 	.word	0x0800a50f
 8009d00:	0800a53d 	.word	0x0800a53d

08009d04 <_calloc_r>:
 8009d04:	b570      	push	{r4, r5, r6, lr}
 8009d06:	fba1 5402 	umull	r5, r4, r1, r2
 8009d0a:	b934      	cbnz	r4, 8009d1a <_calloc_r+0x16>
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	f7fe ffdd 	bl	8008ccc <_malloc_r>
 8009d12:	4606      	mov	r6, r0
 8009d14:	b928      	cbnz	r0, 8009d22 <_calloc_r+0x1e>
 8009d16:	4630      	mov	r0, r6
 8009d18:	bd70      	pop	{r4, r5, r6, pc}
 8009d1a:	220c      	movs	r2, #12
 8009d1c:	6002      	str	r2, [r0, #0]
 8009d1e:	2600      	movs	r6, #0
 8009d20:	e7f9      	b.n	8009d16 <_calloc_r+0x12>
 8009d22:	462a      	mov	r2, r5
 8009d24:	4621      	mov	r1, r4
 8009d26:	f7fd fd1a 	bl	800775e <memset>
 8009d2a:	e7f4      	b.n	8009d16 <_calloc_r+0x12>

08009d2c <_realloc_r>:
 8009d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d30:	4607      	mov	r7, r0
 8009d32:	4614      	mov	r4, r2
 8009d34:	460d      	mov	r5, r1
 8009d36:	b921      	cbnz	r1, 8009d42 <_realloc_r+0x16>
 8009d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	f7fe bfc5 	b.w	8008ccc <_malloc_r>
 8009d42:	b92a      	cbnz	r2, 8009d50 <_realloc_r+0x24>
 8009d44:	f7fe fc14 	bl	8008570 <_free_r>
 8009d48:	4625      	mov	r5, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d50:	f000 f833 	bl	8009dba <_malloc_usable_size_r>
 8009d54:	4284      	cmp	r4, r0
 8009d56:	4606      	mov	r6, r0
 8009d58:	d802      	bhi.n	8009d60 <_realloc_r+0x34>
 8009d5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d5e:	d8f4      	bhi.n	8009d4a <_realloc_r+0x1e>
 8009d60:	4621      	mov	r1, r4
 8009d62:	4638      	mov	r0, r7
 8009d64:	f7fe ffb2 	bl	8008ccc <_malloc_r>
 8009d68:	4680      	mov	r8, r0
 8009d6a:	b908      	cbnz	r0, 8009d70 <_realloc_r+0x44>
 8009d6c:	4645      	mov	r5, r8
 8009d6e:	e7ec      	b.n	8009d4a <_realloc_r+0x1e>
 8009d70:	42b4      	cmp	r4, r6
 8009d72:	4622      	mov	r2, r4
 8009d74:	4629      	mov	r1, r5
 8009d76:	bf28      	it	cs
 8009d78:	4632      	movcs	r2, r6
 8009d7a:	f7fd fd82 	bl	8007882 <memcpy>
 8009d7e:	4629      	mov	r1, r5
 8009d80:	4638      	mov	r0, r7
 8009d82:	f7fe fbf5 	bl	8008570 <_free_r>
 8009d86:	e7f1      	b.n	8009d6c <_realloc_r+0x40>

08009d88 <fiprintf>:
 8009d88:	b40e      	push	{r1, r2, r3}
 8009d8a:	b503      	push	{r0, r1, lr}
 8009d8c:	4601      	mov	r1, r0
 8009d8e:	ab03      	add	r3, sp, #12
 8009d90:	4805      	ldr	r0, [pc, #20]	@ (8009da8 <fiprintf+0x20>)
 8009d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d96:	6800      	ldr	r0, [r0, #0]
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	f000 f83f 	bl	8009e1c <_vfiprintf_r>
 8009d9e:	b002      	add	sp, #8
 8009da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009da4:	b003      	add	sp, #12
 8009da6:	4770      	bx	lr
 8009da8:	20000218 	.word	0x20000218

08009dac <abort>:
 8009dac:	b508      	push	{r3, lr}
 8009dae:	2006      	movs	r0, #6
 8009db0:	f000 fa08 	bl	800a1c4 <raise>
 8009db4:	2001      	movs	r0, #1
 8009db6:	f7f7 ff01 	bl	8001bbc <_exit>

08009dba <_malloc_usable_size_r>:
 8009dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dbe:	1f18      	subs	r0, r3, #4
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	bfbc      	itt	lt
 8009dc4:	580b      	ldrlt	r3, [r1, r0]
 8009dc6:	18c0      	addlt	r0, r0, r3
 8009dc8:	4770      	bx	lr

08009dca <__sfputc_r>:
 8009dca:	6893      	ldr	r3, [r2, #8]
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	b410      	push	{r4}
 8009dd2:	6093      	str	r3, [r2, #8]
 8009dd4:	da08      	bge.n	8009de8 <__sfputc_r+0x1e>
 8009dd6:	6994      	ldr	r4, [r2, #24]
 8009dd8:	42a3      	cmp	r3, r4
 8009dda:	db01      	blt.n	8009de0 <__sfputc_r+0x16>
 8009ddc:	290a      	cmp	r1, #10
 8009dde:	d103      	bne.n	8009de8 <__sfputc_r+0x1e>
 8009de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de4:	f000 b932 	b.w	800a04c <__swbuf_r>
 8009de8:	6813      	ldr	r3, [r2, #0]
 8009dea:	1c58      	adds	r0, r3, #1
 8009dec:	6010      	str	r0, [r2, #0]
 8009dee:	7019      	strb	r1, [r3, #0]
 8009df0:	4608      	mov	r0, r1
 8009df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <__sfputs_r>:
 8009df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	460f      	mov	r7, r1
 8009dfe:	4614      	mov	r4, r2
 8009e00:	18d5      	adds	r5, r2, r3
 8009e02:	42ac      	cmp	r4, r5
 8009e04:	d101      	bne.n	8009e0a <__sfputs_r+0x12>
 8009e06:	2000      	movs	r0, #0
 8009e08:	e007      	b.n	8009e1a <__sfputs_r+0x22>
 8009e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e0e:	463a      	mov	r2, r7
 8009e10:	4630      	mov	r0, r6
 8009e12:	f7ff ffda 	bl	8009dca <__sfputc_r>
 8009e16:	1c43      	adds	r3, r0, #1
 8009e18:	d1f3      	bne.n	8009e02 <__sfputs_r+0xa>
 8009e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e1c <_vfiprintf_r>:
 8009e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	460d      	mov	r5, r1
 8009e22:	b09d      	sub	sp, #116	@ 0x74
 8009e24:	4614      	mov	r4, r2
 8009e26:	4698      	mov	r8, r3
 8009e28:	4606      	mov	r6, r0
 8009e2a:	b118      	cbz	r0, 8009e34 <_vfiprintf_r+0x18>
 8009e2c:	6a03      	ldr	r3, [r0, #32]
 8009e2e:	b90b      	cbnz	r3, 8009e34 <_vfiprintf_r+0x18>
 8009e30:	f7fd fbc4 	bl	80075bc <__sinit>
 8009e34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e36:	07d9      	lsls	r1, r3, #31
 8009e38:	d405      	bmi.n	8009e46 <_vfiprintf_r+0x2a>
 8009e3a:	89ab      	ldrh	r3, [r5, #12]
 8009e3c:	059a      	lsls	r2, r3, #22
 8009e3e:	d402      	bmi.n	8009e46 <_vfiprintf_r+0x2a>
 8009e40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e42:	f7fd fd1c 	bl	800787e <__retarget_lock_acquire_recursive>
 8009e46:	89ab      	ldrh	r3, [r5, #12]
 8009e48:	071b      	lsls	r3, r3, #28
 8009e4a:	d501      	bpl.n	8009e50 <_vfiprintf_r+0x34>
 8009e4c:	692b      	ldr	r3, [r5, #16]
 8009e4e:	b99b      	cbnz	r3, 8009e78 <_vfiprintf_r+0x5c>
 8009e50:	4629      	mov	r1, r5
 8009e52:	4630      	mov	r0, r6
 8009e54:	f000 f938 	bl	800a0c8 <__swsetup_r>
 8009e58:	b170      	cbz	r0, 8009e78 <_vfiprintf_r+0x5c>
 8009e5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e5c:	07dc      	lsls	r4, r3, #31
 8009e5e:	d504      	bpl.n	8009e6a <_vfiprintf_r+0x4e>
 8009e60:	f04f 30ff 	mov.w	r0, #4294967295
 8009e64:	b01d      	add	sp, #116	@ 0x74
 8009e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6a:	89ab      	ldrh	r3, [r5, #12]
 8009e6c:	0598      	lsls	r0, r3, #22
 8009e6e:	d4f7      	bmi.n	8009e60 <_vfiprintf_r+0x44>
 8009e70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e72:	f7fd fd05 	bl	8007880 <__retarget_lock_release_recursive>
 8009e76:	e7f3      	b.n	8009e60 <_vfiprintf_r+0x44>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e7c:	2320      	movs	r3, #32
 8009e7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e86:	2330      	movs	r3, #48	@ 0x30
 8009e88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a038 <_vfiprintf_r+0x21c>
 8009e8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e90:	f04f 0901 	mov.w	r9, #1
 8009e94:	4623      	mov	r3, r4
 8009e96:	469a      	mov	sl, r3
 8009e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e9c:	b10a      	cbz	r2, 8009ea2 <_vfiprintf_r+0x86>
 8009e9e:	2a25      	cmp	r2, #37	@ 0x25
 8009ea0:	d1f9      	bne.n	8009e96 <_vfiprintf_r+0x7a>
 8009ea2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ea6:	d00b      	beq.n	8009ec0 <_vfiprintf_r+0xa4>
 8009ea8:	465b      	mov	r3, fp
 8009eaa:	4622      	mov	r2, r4
 8009eac:	4629      	mov	r1, r5
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f7ff ffa2 	bl	8009df8 <__sfputs_r>
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	f000 80a7 	beq.w	800a008 <_vfiprintf_r+0x1ec>
 8009eba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ebc:	445a      	add	r2, fp
 8009ebe:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 809f 	beq.w	800a008 <_vfiprintf_r+0x1ec>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ed4:	f10a 0a01 	add.w	sl, sl, #1
 8009ed8:	9304      	str	r3, [sp, #16]
 8009eda:	9307      	str	r3, [sp, #28]
 8009edc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ee0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ee2:	4654      	mov	r4, sl
 8009ee4:	2205      	movs	r2, #5
 8009ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eea:	4853      	ldr	r0, [pc, #332]	@ (800a038 <_vfiprintf_r+0x21c>)
 8009eec:	f7f6 f970 	bl	80001d0 <memchr>
 8009ef0:	9a04      	ldr	r2, [sp, #16]
 8009ef2:	b9d8      	cbnz	r0, 8009f2c <_vfiprintf_r+0x110>
 8009ef4:	06d1      	lsls	r1, r2, #27
 8009ef6:	bf44      	itt	mi
 8009ef8:	2320      	movmi	r3, #32
 8009efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009efe:	0713      	lsls	r3, r2, #28
 8009f00:	bf44      	itt	mi
 8009f02:	232b      	movmi	r3, #43	@ 0x2b
 8009f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f08:	f89a 3000 	ldrb.w	r3, [sl]
 8009f0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f0e:	d015      	beq.n	8009f3c <_vfiprintf_r+0x120>
 8009f10:	9a07      	ldr	r2, [sp, #28]
 8009f12:	4654      	mov	r4, sl
 8009f14:	2000      	movs	r0, #0
 8009f16:	f04f 0c0a 	mov.w	ip, #10
 8009f1a:	4621      	mov	r1, r4
 8009f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f20:	3b30      	subs	r3, #48	@ 0x30
 8009f22:	2b09      	cmp	r3, #9
 8009f24:	d94b      	bls.n	8009fbe <_vfiprintf_r+0x1a2>
 8009f26:	b1b0      	cbz	r0, 8009f56 <_vfiprintf_r+0x13a>
 8009f28:	9207      	str	r2, [sp, #28]
 8009f2a:	e014      	b.n	8009f56 <_vfiprintf_r+0x13a>
 8009f2c:	eba0 0308 	sub.w	r3, r0, r8
 8009f30:	fa09 f303 	lsl.w	r3, r9, r3
 8009f34:	4313      	orrs	r3, r2
 8009f36:	9304      	str	r3, [sp, #16]
 8009f38:	46a2      	mov	sl, r4
 8009f3a:	e7d2      	b.n	8009ee2 <_vfiprintf_r+0xc6>
 8009f3c:	9b03      	ldr	r3, [sp, #12]
 8009f3e:	1d19      	adds	r1, r3, #4
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	9103      	str	r1, [sp, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	bfbb      	ittet	lt
 8009f48:	425b      	neglt	r3, r3
 8009f4a:	f042 0202 	orrlt.w	r2, r2, #2
 8009f4e:	9307      	strge	r3, [sp, #28]
 8009f50:	9307      	strlt	r3, [sp, #28]
 8009f52:	bfb8      	it	lt
 8009f54:	9204      	strlt	r2, [sp, #16]
 8009f56:	7823      	ldrb	r3, [r4, #0]
 8009f58:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f5a:	d10a      	bne.n	8009f72 <_vfiprintf_r+0x156>
 8009f5c:	7863      	ldrb	r3, [r4, #1]
 8009f5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f60:	d132      	bne.n	8009fc8 <_vfiprintf_r+0x1ac>
 8009f62:	9b03      	ldr	r3, [sp, #12]
 8009f64:	1d1a      	adds	r2, r3, #4
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	9203      	str	r2, [sp, #12]
 8009f6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f6e:	3402      	adds	r4, #2
 8009f70:	9305      	str	r3, [sp, #20]
 8009f72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a048 <_vfiprintf_r+0x22c>
 8009f76:	7821      	ldrb	r1, [r4, #0]
 8009f78:	2203      	movs	r2, #3
 8009f7a:	4650      	mov	r0, sl
 8009f7c:	f7f6 f928 	bl	80001d0 <memchr>
 8009f80:	b138      	cbz	r0, 8009f92 <_vfiprintf_r+0x176>
 8009f82:	9b04      	ldr	r3, [sp, #16]
 8009f84:	eba0 000a 	sub.w	r0, r0, sl
 8009f88:	2240      	movs	r2, #64	@ 0x40
 8009f8a:	4082      	lsls	r2, r0
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	3401      	adds	r4, #1
 8009f90:	9304      	str	r3, [sp, #16]
 8009f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f96:	4829      	ldr	r0, [pc, #164]	@ (800a03c <_vfiprintf_r+0x220>)
 8009f98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f9c:	2206      	movs	r2, #6
 8009f9e:	f7f6 f917 	bl	80001d0 <memchr>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d03f      	beq.n	800a026 <_vfiprintf_r+0x20a>
 8009fa6:	4b26      	ldr	r3, [pc, #152]	@ (800a040 <_vfiprintf_r+0x224>)
 8009fa8:	bb1b      	cbnz	r3, 8009ff2 <_vfiprintf_r+0x1d6>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	3307      	adds	r3, #7
 8009fae:	f023 0307 	bic.w	r3, r3, #7
 8009fb2:	3308      	adds	r3, #8
 8009fb4:	9303      	str	r3, [sp, #12]
 8009fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb8:	443b      	add	r3, r7
 8009fba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fbc:	e76a      	b.n	8009e94 <_vfiprintf_r+0x78>
 8009fbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	2001      	movs	r0, #1
 8009fc6:	e7a8      	b.n	8009f1a <_vfiprintf_r+0xfe>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	3401      	adds	r4, #1
 8009fcc:	9305      	str	r3, [sp, #20]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	f04f 0c0a 	mov.w	ip, #10
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fda:	3a30      	subs	r2, #48	@ 0x30
 8009fdc:	2a09      	cmp	r2, #9
 8009fde:	d903      	bls.n	8009fe8 <_vfiprintf_r+0x1cc>
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d0c6      	beq.n	8009f72 <_vfiprintf_r+0x156>
 8009fe4:	9105      	str	r1, [sp, #20]
 8009fe6:	e7c4      	b.n	8009f72 <_vfiprintf_r+0x156>
 8009fe8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fec:	4604      	mov	r4, r0
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e7f0      	b.n	8009fd4 <_vfiprintf_r+0x1b8>
 8009ff2:	ab03      	add	r3, sp, #12
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	462a      	mov	r2, r5
 8009ff8:	4b12      	ldr	r3, [pc, #72]	@ (800a044 <_vfiprintf_r+0x228>)
 8009ffa:	a904      	add	r1, sp, #16
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f7fc fc8d 	bl	800691c <_printf_float>
 800a002:	4607      	mov	r7, r0
 800a004:	1c78      	adds	r0, r7, #1
 800a006:	d1d6      	bne.n	8009fb6 <_vfiprintf_r+0x19a>
 800a008:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a00a:	07d9      	lsls	r1, r3, #31
 800a00c:	d405      	bmi.n	800a01a <_vfiprintf_r+0x1fe>
 800a00e:	89ab      	ldrh	r3, [r5, #12]
 800a010:	059a      	lsls	r2, r3, #22
 800a012:	d402      	bmi.n	800a01a <_vfiprintf_r+0x1fe>
 800a014:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a016:	f7fd fc33 	bl	8007880 <__retarget_lock_release_recursive>
 800a01a:	89ab      	ldrh	r3, [r5, #12]
 800a01c:	065b      	lsls	r3, r3, #25
 800a01e:	f53f af1f 	bmi.w	8009e60 <_vfiprintf_r+0x44>
 800a022:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a024:	e71e      	b.n	8009e64 <_vfiprintf_r+0x48>
 800a026:	ab03      	add	r3, sp, #12
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	462a      	mov	r2, r5
 800a02c:	4b05      	ldr	r3, [pc, #20]	@ (800a044 <_vfiprintf_r+0x228>)
 800a02e:	a904      	add	r1, sp, #16
 800a030:	4630      	mov	r0, r6
 800a032:	f7fc ff0b 	bl	8006e4c <_printf_i>
 800a036:	e7e4      	b.n	800a002 <_vfiprintf_r+0x1e6>
 800a038:	0800a4f1 	.word	0x0800a4f1
 800a03c:	0800a4fb 	.word	0x0800a4fb
 800a040:	0800691d 	.word	0x0800691d
 800a044:	08009df9 	.word	0x08009df9
 800a048:	0800a4f7 	.word	0x0800a4f7

0800a04c <__swbuf_r>:
 800a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04e:	460e      	mov	r6, r1
 800a050:	4614      	mov	r4, r2
 800a052:	4605      	mov	r5, r0
 800a054:	b118      	cbz	r0, 800a05e <__swbuf_r+0x12>
 800a056:	6a03      	ldr	r3, [r0, #32]
 800a058:	b90b      	cbnz	r3, 800a05e <__swbuf_r+0x12>
 800a05a:	f7fd faaf 	bl	80075bc <__sinit>
 800a05e:	69a3      	ldr	r3, [r4, #24]
 800a060:	60a3      	str	r3, [r4, #8]
 800a062:	89a3      	ldrh	r3, [r4, #12]
 800a064:	071a      	lsls	r2, r3, #28
 800a066:	d501      	bpl.n	800a06c <__swbuf_r+0x20>
 800a068:	6923      	ldr	r3, [r4, #16]
 800a06a:	b943      	cbnz	r3, 800a07e <__swbuf_r+0x32>
 800a06c:	4621      	mov	r1, r4
 800a06e:	4628      	mov	r0, r5
 800a070:	f000 f82a 	bl	800a0c8 <__swsetup_r>
 800a074:	b118      	cbz	r0, 800a07e <__swbuf_r+0x32>
 800a076:	f04f 37ff 	mov.w	r7, #4294967295
 800a07a:	4638      	mov	r0, r7
 800a07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	6922      	ldr	r2, [r4, #16]
 800a082:	1a98      	subs	r0, r3, r2
 800a084:	6963      	ldr	r3, [r4, #20]
 800a086:	b2f6      	uxtb	r6, r6
 800a088:	4283      	cmp	r3, r0
 800a08a:	4637      	mov	r7, r6
 800a08c:	dc05      	bgt.n	800a09a <__swbuf_r+0x4e>
 800a08e:	4621      	mov	r1, r4
 800a090:	4628      	mov	r0, r5
 800a092:	f7ff fdc7 	bl	8009c24 <_fflush_r>
 800a096:	2800      	cmp	r0, #0
 800a098:	d1ed      	bne.n	800a076 <__swbuf_r+0x2a>
 800a09a:	68a3      	ldr	r3, [r4, #8]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	60a3      	str	r3, [r4, #8]
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	6022      	str	r2, [r4, #0]
 800a0a6:	701e      	strb	r6, [r3, #0]
 800a0a8:	6962      	ldr	r2, [r4, #20]
 800a0aa:	1c43      	adds	r3, r0, #1
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d004      	beq.n	800a0ba <__swbuf_r+0x6e>
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	07db      	lsls	r3, r3, #31
 800a0b4:	d5e1      	bpl.n	800a07a <__swbuf_r+0x2e>
 800a0b6:	2e0a      	cmp	r6, #10
 800a0b8:	d1df      	bne.n	800a07a <__swbuf_r+0x2e>
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	4628      	mov	r0, r5
 800a0be:	f7ff fdb1 	bl	8009c24 <_fflush_r>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d0d9      	beq.n	800a07a <__swbuf_r+0x2e>
 800a0c6:	e7d6      	b.n	800a076 <__swbuf_r+0x2a>

0800a0c8 <__swsetup_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4b29      	ldr	r3, [pc, #164]	@ (800a170 <__swsetup_r+0xa8>)
 800a0cc:	4605      	mov	r5, r0
 800a0ce:	6818      	ldr	r0, [r3, #0]
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	b118      	cbz	r0, 800a0dc <__swsetup_r+0x14>
 800a0d4:	6a03      	ldr	r3, [r0, #32]
 800a0d6:	b90b      	cbnz	r3, 800a0dc <__swsetup_r+0x14>
 800a0d8:	f7fd fa70 	bl	80075bc <__sinit>
 800a0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0e0:	0719      	lsls	r1, r3, #28
 800a0e2:	d422      	bmi.n	800a12a <__swsetup_r+0x62>
 800a0e4:	06da      	lsls	r2, r3, #27
 800a0e6:	d407      	bmi.n	800a0f8 <__swsetup_r+0x30>
 800a0e8:	2209      	movs	r2, #9
 800a0ea:	602a      	str	r2, [r5, #0]
 800a0ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0f0:	81a3      	strh	r3, [r4, #12]
 800a0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f6:	e033      	b.n	800a160 <__swsetup_r+0x98>
 800a0f8:	0758      	lsls	r0, r3, #29
 800a0fa:	d512      	bpl.n	800a122 <__swsetup_r+0x5a>
 800a0fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0fe:	b141      	cbz	r1, 800a112 <__swsetup_r+0x4a>
 800a100:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a104:	4299      	cmp	r1, r3
 800a106:	d002      	beq.n	800a10e <__swsetup_r+0x46>
 800a108:	4628      	mov	r0, r5
 800a10a:	f7fe fa31 	bl	8008570 <_free_r>
 800a10e:	2300      	movs	r3, #0
 800a110:	6363      	str	r3, [r4, #52]	@ 0x34
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a118:	81a3      	strh	r3, [r4, #12]
 800a11a:	2300      	movs	r3, #0
 800a11c:	6063      	str	r3, [r4, #4]
 800a11e:	6923      	ldr	r3, [r4, #16]
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	89a3      	ldrh	r3, [r4, #12]
 800a124:	f043 0308 	orr.w	r3, r3, #8
 800a128:	81a3      	strh	r3, [r4, #12]
 800a12a:	6923      	ldr	r3, [r4, #16]
 800a12c:	b94b      	cbnz	r3, 800a142 <__swsetup_r+0x7a>
 800a12e:	89a3      	ldrh	r3, [r4, #12]
 800a130:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a138:	d003      	beq.n	800a142 <__swsetup_r+0x7a>
 800a13a:	4621      	mov	r1, r4
 800a13c:	4628      	mov	r0, r5
 800a13e:	f000 f883 	bl	800a248 <__smakebuf_r>
 800a142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a146:	f013 0201 	ands.w	r2, r3, #1
 800a14a:	d00a      	beq.n	800a162 <__swsetup_r+0x9a>
 800a14c:	2200      	movs	r2, #0
 800a14e:	60a2      	str	r2, [r4, #8]
 800a150:	6962      	ldr	r2, [r4, #20]
 800a152:	4252      	negs	r2, r2
 800a154:	61a2      	str	r2, [r4, #24]
 800a156:	6922      	ldr	r2, [r4, #16]
 800a158:	b942      	cbnz	r2, 800a16c <__swsetup_r+0xa4>
 800a15a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a15e:	d1c5      	bne.n	800a0ec <__swsetup_r+0x24>
 800a160:	bd38      	pop	{r3, r4, r5, pc}
 800a162:	0799      	lsls	r1, r3, #30
 800a164:	bf58      	it	pl
 800a166:	6962      	ldrpl	r2, [r4, #20]
 800a168:	60a2      	str	r2, [r4, #8]
 800a16a:	e7f4      	b.n	800a156 <__swsetup_r+0x8e>
 800a16c:	2000      	movs	r0, #0
 800a16e:	e7f7      	b.n	800a160 <__swsetup_r+0x98>
 800a170:	20000218 	.word	0x20000218

0800a174 <_raise_r>:
 800a174:	291f      	cmp	r1, #31
 800a176:	b538      	push	{r3, r4, r5, lr}
 800a178:	4605      	mov	r5, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	d904      	bls.n	800a188 <_raise_r+0x14>
 800a17e:	2316      	movs	r3, #22
 800a180:	6003      	str	r3, [r0, #0]
 800a182:	f04f 30ff 	mov.w	r0, #4294967295
 800a186:	bd38      	pop	{r3, r4, r5, pc}
 800a188:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a18a:	b112      	cbz	r2, 800a192 <_raise_r+0x1e>
 800a18c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a190:	b94b      	cbnz	r3, 800a1a6 <_raise_r+0x32>
 800a192:	4628      	mov	r0, r5
 800a194:	f000 f830 	bl	800a1f8 <_getpid_r>
 800a198:	4622      	mov	r2, r4
 800a19a:	4601      	mov	r1, r0
 800a19c:	4628      	mov	r0, r5
 800a19e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1a2:	f000 b817 	b.w	800a1d4 <_kill_r>
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d00a      	beq.n	800a1c0 <_raise_r+0x4c>
 800a1aa:	1c59      	adds	r1, r3, #1
 800a1ac:	d103      	bne.n	800a1b6 <_raise_r+0x42>
 800a1ae:	2316      	movs	r3, #22
 800a1b0:	6003      	str	r3, [r0, #0]
 800a1b2:	2001      	movs	r0, #1
 800a1b4:	e7e7      	b.n	800a186 <_raise_r+0x12>
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a1bc:	4620      	mov	r0, r4
 800a1be:	4798      	blx	r3
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	e7e0      	b.n	800a186 <_raise_r+0x12>

0800a1c4 <raise>:
 800a1c4:	4b02      	ldr	r3, [pc, #8]	@ (800a1d0 <raise+0xc>)
 800a1c6:	4601      	mov	r1, r0
 800a1c8:	6818      	ldr	r0, [r3, #0]
 800a1ca:	f7ff bfd3 	b.w	800a174 <_raise_r>
 800a1ce:	bf00      	nop
 800a1d0:	20000218 	.word	0x20000218

0800a1d4 <_kill_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	4d07      	ldr	r5, [pc, #28]	@ (800a1f4 <_kill_r+0x20>)
 800a1d8:	2300      	movs	r3, #0
 800a1da:	4604      	mov	r4, r0
 800a1dc:	4608      	mov	r0, r1
 800a1de:	4611      	mov	r1, r2
 800a1e0:	602b      	str	r3, [r5, #0]
 800a1e2:	f7f7 fcdb 	bl	8001b9c <_kill>
 800a1e6:	1c43      	adds	r3, r0, #1
 800a1e8:	d102      	bne.n	800a1f0 <_kill_r+0x1c>
 800a1ea:	682b      	ldr	r3, [r5, #0]
 800a1ec:	b103      	cbz	r3, 800a1f0 <_kill_r+0x1c>
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	bd38      	pop	{r3, r4, r5, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20000674 	.word	0x20000674

0800a1f8 <_getpid_r>:
 800a1f8:	f7f7 bcc8 	b.w	8001b8c <_getpid>

0800a1fc <__swhatbuf_r>:
 800a1fc:	b570      	push	{r4, r5, r6, lr}
 800a1fe:	460c      	mov	r4, r1
 800a200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a204:	2900      	cmp	r1, #0
 800a206:	b096      	sub	sp, #88	@ 0x58
 800a208:	4615      	mov	r5, r2
 800a20a:	461e      	mov	r6, r3
 800a20c:	da0d      	bge.n	800a22a <__swhatbuf_r+0x2e>
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a214:	f04f 0100 	mov.w	r1, #0
 800a218:	bf14      	ite	ne
 800a21a:	2340      	movne	r3, #64	@ 0x40
 800a21c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a220:	2000      	movs	r0, #0
 800a222:	6031      	str	r1, [r6, #0]
 800a224:	602b      	str	r3, [r5, #0]
 800a226:	b016      	add	sp, #88	@ 0x58
 800a228:	bd70      	pop	{r4, r5, r6, pc}
 800a22a:	466a      	mov	r2, sp
 800a22c:	f000 f848 	bl	800a2c0 <_fstat_r>
 800a230:	2800      	cmp	r0, #0
 800a232:	dbec      	blt.n	800a20e <__swhatbuf_r+0x12>
 800a234:	9901      	ldr	r1, [sp, #4]
 800a236:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a23a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a23e:	4259      	negs	r1, r3
 800a240:	4159      	adcs	r1, r3
 800a242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a246:	e7eb      	b.n	800a220 <__swhatbuf_r+0x24>

0800a248 <__smakebuf_r>:
 800a248:	898b      	ldrh	r3, [r1, #12]
 800a24a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a24c:	079d      	lsls	r5, r3, #30
 800a24e:	4606      	mov	r6, r0
 800a250:	460c      	mov	r4, r1
 800a252:	d507      	bpl.n	800a264 <__smakebuf_r+0x1c>
 800a254:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	6123      	str	r3, [r4, #16]
 800a25c:	2301      	movs	r3, #1
 800a25e:	6163      	str	r3, [r4, #20]
 800a260:	b003      	add	sp, #12
 800a262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a264:	ab01      	add	r3, sp, #4
 800a266:	466a      	mov	r2, sp
 800a268:	f7ff ffc8 	bl	800a1fc <__swhatbuf_r>
 800a26c:	9f00      	ldr	r7, [sp, #0]
 800a26e:	4605      	mov	r5, r0
 800a270:	4639      	mov	r1, r7
 800a272:	4630      	mov	r0, r6
 800a274:	f7fe fd2a 	bl	8008ccc <_malloc_r>
 800a278:	b948      	cbnz	r0, 800a28e <__smakebuf_r+0x46>
 800a27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a27e:	059a      	lsls	r2, r3, #22
 800a280:	d4ee      	bmi.n	800a260 <__smakebuf_r+0x18>
 800a282:	f023 0303 	bic.w	r3, r3, #3
 800a286:	f043 0302 	orr.w	r3, r3, #2
 800a28a:	81a3      	strh	r3, [r4, #12]
 800a28c:	e7e2      	b.n	800a254 <__smakebuf_r+0xc>
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	6020      	str	r0, [r4, #0]
 800a292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a296:	81a3      	strh	r3, [r4, #12]
 800a298:	9b01      	ldr	r3, [sp, #4]
 800a29a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a29e:	b15b      	cbz	r3, 800a2b8 <__smakebuf_r+0x70>
 800a2a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	f000 f81d 	bl	800a2e4 <_isatty_r>
 800a2aa:	b128      	cbz	r0, 800a2b8 <__smakebuf_r+0x70>
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	f023 0303 	bic.w	r3, r3, #3
 800a2b2:	f043 0301 	orr.w	r3, r3, #1
 800a2b6:	81a3      	strh	r3, [r4, #12]
 800a2b8:	89a3      	ldrh	r3, [r4, #12]
 800a2ba:	431d      	orrs	r5, r3
 800a2bc:	81a5      	strh	r5, [r4, #12]
 800a2be:	e7cf      	b.n	800a260 <__smakebuf_r+0x18>

0800a2c0 <_fstat_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d07      	ldr	r5, [pc, #28]	@ (800a2e0 <_fstat_r+0x20>)
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	4608      	mov	r0, r1
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	602b      	str	r3, [r5, #0]
 800a2ce:	f7f7 fca9 	bl	8001c24 <_fstat>
 800a2d2:	1c43      	adds	r3, r0, #1
 800a2d4:	d102      	bne.n	800a2dc <_fstat_r+0x1c>
 800a2d6:	682b      	ldr	r3, [r5, #0]
 800a2d8:	b103      	cbz	r3, 800a2dc <_fstat_r+0x1c>
 800a2da:	6023      	str	r3, [r4, #0]
 800a2dc:	bd38      	pop	{r3, r4, r5, pc}
 800a2de:	bf00      	nop
 800a2e0:	20000674 	.word	0x20000674

0800a2e4 <_isatty_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d06      	ldr	r5, [pc, #24]	@ (800a300 <_isatty_r+0x1c>)
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	602b      	str	r3, [r5, #0]
 800a2f0:	f7f7 fca8 	bl	8001c44 <_isatty>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	d102      	bne.n	800a2fe <_isatty_r+0x1a>
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	b103      	cbz	r3, 800a2fe <_isatty_r+0x1a>
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	20000674 	.word	0x20000674

0800a304 <_init>:
 800a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a306:	bf00      	nop
 800a308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a30a:	bc08      	pop	{r3}
 800a30c:	469e      	mov	lr, r3
 800a30e:	4770      	bx	lr

0800a310 <_fini>:
 800a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a312:	bf00      	nop
 800a314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a316:	bc08      	pop	{r3}
 800a318:	469e      	mov	lr, r3
 800a31a:	4770      	bx	lr
