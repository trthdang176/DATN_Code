
testt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000073c  0800cee8  0800cee8  0000dee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d624  0800d624  0000f350  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d624  0800d624  0000e624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d62c  0800d62c  0000f350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d62c  0800d62c  0000e62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d630  0800d630  0000e630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  0800d634  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f350  2**0
                  CONTENTS
 10 .bss          00000b94  20000350  20000350  0000f350  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ee4  20000ee4  0000f350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f350  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f6e  00000000  00000000  0000f380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003137  00000000  00000000  000262ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  00029428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa6  00000000  00000000  0002a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024433  00000000  00000000  0002b7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bdd  00000000  00000000  0004fbf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4496  00000000  00000000  000687ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013cc64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006adc  00000000  00000000  0013cca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00143784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cecc 	.word	0x0800cecc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800cecc 	.word	0x0800cecc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <Latch_IC_begin>:
/**
 * @brief Control 74HC164D , the output of 74HC164D is the OE and LE of 74HC164D
 * 
 */
void Latch_IC_begin(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	// 	HAL_GPIO_WritePin(PIN_OEx[i].Port_x,PIN_OEx[i].PIN_x,GPIO_PIN_SET);
	// }
    // HAL_GPIO_WritePin(PIN_SCKx[num].Port_x,PIN_SCKx[num].PIN_x,GPIO_PIN_RESET);
    //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);   // Clock LOW

    HAL_GPIO_WritePin(PIN_TXS_OEx[0].Port_x,PIN_TXS_OEx[0].PIN_x,GPIO_PIN_RESET);
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <Latch_IC_begin+0x38>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0b      	ldr	r2, [pc, #44]	@ (8001058 <Latch_IC_begin+0x38>)
 800102a:	8891      	ldrh	r1, [r2, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fc0e 	bl	8004850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_TXS_OEx[1].Port_x,PIN_TXS_OEx[1].PIN_x,GPIO_PIN_RESET);
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <Latch_IC_begin+0x38>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <Latch_IC_begin+0x38>)
 800103a:	8991      	ldrh	r1, [r2, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fc06 	bl	8004850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_TXS_OEx[2].Port_x,PIN_TXS_OEx[2].PIN_x,GPIO_PIN_RESET);
 8001044:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <Latch_IC_begin+0x38>)
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	4a03      	ldr	r2, [pc, #12]	@ (8001058 <Latch_IC_begin+0x38>)
 800104a:	8a91      	ldrh	r1, [r2, #20]
 800104c:	2200      	movs	r2, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fbfe 	bl	8004850 <HAL_GPIO_WritePin>

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000e0 	.word	0x200000e0

0800105c <reset_TXS>:

void reset_TXS(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PIN_TXS_OEx[0].Port_x,PIN_TXS_OEx[0].PIN_x,GPIO_PIN_RESET);
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <reset_TXS+0x38>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <reset_TXS+0x38>)
 8001066:	8891      	ldrh	r1, [r2, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fbf0 	bl	8004850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_TXS_OEx[1].Port_x,PIN_TXS_OEx[1].PIN_x,GPIO_PIN_RESET);
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <reset_TXS+0x38>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4a07      	ldr	r2, [pc, #28]	@ (8001094 <reset_TXS+0x38>)
 8001076:	8991      	ldrh	r1, [r2, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fbe8 	bl	8004850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_TXS_OEx[2].Port_x,PIN_TXS_OEx[2].PIN_x,GPIO_PIN_RESET);
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <reset_TXS+0x38>)
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	4a03      	ldr	r2, [pc, #12]	@ (8001094 <reset_TXS+0x38>)
 8001086:	8a91      	ldrh	r1, [r2, #20]
 8001088:	2200      	movs	r2, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fbe0 	bl	8004850 <HAL_GPIO_WritePin>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200000e0 	.word	0x200000e0

08001098 <compute_outputLatchIC>:

#define NUM_PIN_LATCH_IC_CONTROL  4 /* each latch IC control 4 pin of IC test */
#define NUM_PIN_IC_TEST           20

/* each Latch IC control 4 pins IC test */
void compute_outputLatchIC(uint8_t *dataIC_test, uint8_t (*data_out_latchIC)[numPin]) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
    uint8_t p_high; /* position HIGH */
    uint8_t p_low;  /* position LOW */
    uint8_t p_pin;  /* position IC test correspond to Latch IC */
    uint8_t Latch_x;
    /* clear all data latch ic */
    for (uint8_t latchIC = 0; latchIC < 5; latchIC++) {
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	e00b      	b.n	80010c0 <compute_outputLatchIC+0x28>
        memset(data_out_latchIC[latchIC],0,numPin);
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	2208      	movs	r2, #8
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f009 f9be 	bl	800a436 <memset>
    for (uint8_t latchIC = 0; latchIC < 5; latchIC++) {
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	3301      	adds	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d9f0      	bls.n	80010a8 <compute_outputLatchIC+0x10>
    }

    for (uint8_t latchIC_x = 0; latchIC_x < NUM_PIN_IC_TEST; latchIC_x++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	73bb      	strb	r3, [r7, #14]
 80010ca:	e04b      	b.n	8001164 <compute_outputLatchIC+0xcc>
        Latch_x = latchIC_x / NUM_PIN_LATCH_IC_CONTROL;
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	737b      	strb	r3, [r7, #13]
        p_pin = latchIC_x % NUM_PIN_LATCH_IC_CONTROL;
 80010d2:	7bbb      	ldrb	r3, [r7, #14]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	733b      	strb	r3, [r7, #12]
        p_high = p_pin * 2;
 80010da:	7b3b      	ldrb	r3, [r7, #12]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	72fb      	strb	r3, [r7, #11]
        p_low = p_high + 1;
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	3301      	adds	r3, #1
 80010e4:	72bb      	strb	r3, [r7, #10]
        switch (dataIC_test[latchIC_x]) {
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d024      	beq.n	800113c <compute_outputLatchIC+0xa4>
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	dc32      	bgt.n	800115c <compute_outputLatchIC+0xc4>
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <compute_outputLatchIC+0x66>
 80010fa:	2b01      	cmp	r3, #1
            } break;
            case 2 : {
                data_out_latchIC[Latch_x][p_high] |= 1u;
            } break;

            default : break;
 80010fc:	e02e      	b.n	800115c <compute_outputLatchIC+0xc4>
                data_out_latchIC[Latch_x][p_high] |= 1u;
 80010fe:	7b7b      	ldrb	r3, [r7, #13]
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	441a      	add	r2, r3
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	5cd1      	ldrb	r1, [r2, r3]
 800110a:	7b7b      	ldrb	r3, [r7, #13]
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	441a      	add	r2, r3
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	f041 0101 	orr.w	r1, r1, #1
 8001118:	b2c9      	uxtb	r1, r1
 800111a:	54d1      	strb	r1, [r2, r3]
                data_out_latchIC[Latch_x][p_low] |= 1u;
 800111c:	7b7b      	ldrb	r3, [r7, #13]
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	441a      	add	r2, r3
 8001124:	7abb      	ldrb	r3, [r7, #10]
 8001126:	5cd1      	ldrb	r1, [r2, r3]
 8001128:	7b7b      	ldrb	r3, [r7, #13]
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	441a      	add	r2, r3
 8001130:	7abb      	ldrb	r3, [r7, #10]
 8001132:	f041 0101 	orr.w	r1, r1, #1
 8001136:	b2c9      	uxtb	r1, r1
 8001138:	54d1      	strb	r1, [r2, r3]
            } break;
 800113a:	e010      	b.n	800115e <compute_outputLatchIC+0xc6>
                data_out_latchIC[Latch_x][p_high] |= 1u;
 800113c:	7b7b      	ldrb	r3, [r7, #13]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	441a      	add	r2, r3
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	5cd1      	ldrb	r1, [r2, r3]
 8001148:	7b7b      	ldrb	r3, [r7, #13]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	441a      	add	r2, r3
 8001150:	7afb      	ldrb	r3, [r7, #11]
 8001152:	f041 0101 	orr.w	r1, r1, #1
 8001156:	b2c9      	uxtb	r1, r1
 8001158:	54d1      	strb	r1, [r2, r3]
            } break;
 800115a:	e000      	b.n	800115e <compute_outputLatchIC+0xc6>
            default : break;
 800115c:	bf00      	nop
    for (uint8_t latchIC_x = 0; latchIC_x < NUM_PIN_IC_TEST; latchIC_x++) {
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	3301      	adds	r3, #1
 8001162:	73bb      	strb	r3, [r7, #14]
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	2b13      	cmp	r3, #19
 8001168:	d9b0      	bls.n	80010cc <compute_outputLatchIC+0x34>
        }
    }
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <shift_out>:

void shift_out(uint8_t num, uint8_t *data)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i =0; i < 8; i++ )
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e058      	b.n	8001238 <shift_out+0xc4>
    {
        HAL_GPIO_WritePin(PIN_SCKx[num].Port_x,PIN_SCKx[num].PIN_x,GPIO_PIN_RESET);   // Clock LOW
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4a2f      	ldr	r2, [pc, #188]	@ (8001248 <shift_out+0xd4>)
 800118a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4a2d      	ldr	r2, [pc, #180]	@ (8001248 <shift_out+0xd4>)
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4413      	add	r3, r2
 8001196:	889b      	ldrh	r3, [r3, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	f003 fb58 	bl	8004850 <HAL_GPIO_WritePin>
        delay_us(1);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f001 fdbb 	bl	8002d1c <delay_us>
        // Data
        HAL_GPIO_WritePin(PIN_SIx[num/3].Port_x,PIN_SIx[num/3].PIN_x, (data[i]));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	4a28      	ldr	r2, [pc, #160]	@ (800124c <shift_out+0xd8>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	085b      	lsrs	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <shift_out+0xdc>)
 80011b6:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4a23      	ldr	r2, [pc, #140]	@ (800124c <shift_out+0xd8>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	085b      	lsrs	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4a22      	ldr	r2, [pc, #136]	@ (8001250 <shift_out+0xdc>)
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	4413      	add	r3, r2
 80011cc:	8899      	ldrh	r1, [r3, #4]
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	f003 fb3a 	bl	8004850 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PIN_SIx[num/3].Port_x,PIN_SIx[num/3].PIN_x, (data[i]));
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4a1b      	ldr	r2, [pc, #108]	@ (800124c <shift_out+0xd8>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	085b      	lsrs	r3, r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <shift_out+0xdc>)
 80011ec:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	4a16      	ldr	r2, [pc, #88]	@ (800124c <shift_out+0xd8>)
 80011f4:	fba2 2303 	umull	r2, r3, r2, r3
 80011f8:	085b      	lsrs	r3, r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4a14      	ldr	r2, [pc, #80]	@ (8001250 <shift_out+0xdc>)
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4413      	add	r3, r2
 8001202:	8899      	ldrh	r1, [r3, #4]
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	4413      	add	r3, r2
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	f003 fb1f 	bl	8004850 <HAL_GPIO_WritePin>
        delay_us(1);
 8001212:	2001      	movs	r0, #1
 8001214:	f001 fd82 	bl	8002d1c <delay_us>
        HAL_GPIO_WritePin(PIN_SCKx[num].Port_x,PIN_SCKx[num].PIN_x,GPIO_PIN_SET);   // Clock HIGH
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4a0b      	ldr	r2, [pc, #44]	@ (8001248 <shift_out+0xd4>)
 800121c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <shift_out+0xd4>)
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	889b      	ldrh	r3, [r3, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	4619      	mov	r1, r3
 800122e:	f003 fb0f 	bl	8004850 <HAL_GPIO_WritePin>
    for(uint8_t i =0; i < 8; i++ )
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	3301      	adds	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	2b07      	cmp	r3, #7
 800123c:	d9a3      	bls.n	8001186 <shift_out+0x12>
    }
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	aaaaaaab 	.word	0xaaaaaaab
 8001250:	200000c0 	.word	0x200000c0

08001254 <Write_data>:


void Write_data(uint8_t num, uint8_t *data) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
    // Enable Latch
    uint8_t data_array[8];
    memcpy(data_array,data,sizeof(data_array));
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	6810      	ldr	r0, [r2, #0]
 8001268:	6851      	ldr	r1, [r2, #4]
 800126a:	c303      	stmia	r3!, {r0, r1}
    HAL_GPIO_WritePin(PIN_RCKx[num].Port_x,PIN_RCKx[num].PIN_x,GPIO_PIN_RESET);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4a13      	ldr	r2, [pc, #76]	@ (80012bc <Write_data+0x68>)
 8001270:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4a11      	ldr	r2, [pc, #68]	@ (80012bc <Write_data+0x68>)
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	889b      	ldrh	r3, [r3, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	f003 fae5 	bl	8004850 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001286:	2001      	movs	r0, #1
 8001288:	f002 f8da 	bl	8003440 <HAL_Delay>
    shift_out(num,data_array);
 800128c:	f107 0208 	add.w	r2, r7, #8
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff6d 	bl	8001174 <shift_out>
    HAL_GPIO_WritePin(PIN_RCKx[num].Port_x,PIN_RCKx[num].PIN_x,GPIO_PIN_SET);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <Write_data+0x68>)
 800129e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <Write_data+0x68>)
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4413      	add	r3, r2
 80012aa:	889b      	ldrh	r3, [r3, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	4619      	mov	r1, r3
 80012b0:	f003 face 	bl	8004850 <HAL_GPIO_WritePin>
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000060 	.word	0x20000060

080012c0 <WritePin_ICTest>:

// Control the pin IO TEST
void WritePin_ICTest(uint8_t *dataPin) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    compute_outputLatchIC(dataPin,output_latch);
 80012c8:	4920      	ldr	r1, [pc, #128]	@ (800134c <WritePin_ICTest+0x8c>)
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fee4 	bl	8001098 <compute_outputLatchIC>
    /* reverse data */
    for (int ic = 0; ic < numIC; ++ic) {
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	e01c      	b.n	8001310 <WritePin_ICTest+0x50>
        for (int p = 0; p < numPin; ++p) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	e013      	b.n	8001304 <WritePin_ICTest+0x44>
            reversed_latch[ic][p] = output_latch[ic][numPin - 1 - p];
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	491a      	ldr	r1, [pc, #104]	@ (800134c <WritePin_ICTest+0x8c>)
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	00d2      	lsls	r2, r2, #3
 80012e8:	440a      	add	r2, r1
 80012ea:	4413      	add	r3, r2
 80012ec:	7819      	ldrb	r1, [r3, #0]
 80012ee:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <WritePin_ICTest+0x90>)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	441a      	add	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4413      	add	r3, r2
 80012fa:	460a      	mov	r2, r1
 80012fc:	701a      	strb	r2, [r3, #0]
        for (int p = 0; p < numPin; ++p) {
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	3301      	adds	r3, #1
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b07      	cmp	r3, #7
 8001308:	dde8      	ble.n	80012dc <WritePin_ICTest+0x1c>
    for (int ic = 0; ic < numIC; ++ic) {
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2b04      	cmp	r3, #4
 8001314:	dddf      	ble.n	80012d6 <WritePin_ICTest+0x16>
        }
    }
    for (uint8_t latch_x = 0; latch_x < 5; latch_x++) {
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e00e      	b.n	800133a <WritePin_ICTest+0x7a>
        Write_data(latch_x,reversed_latch[latch_x]);
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <WritePin_ICTest+0x90>)
 8001322:	441a      	add	r2, r3
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff93 	bl	8001254 <Write_data>
        HAL_Delay(1);
 800132e:	2001      	movs	r0, #1
 8001330:	f002 f886 	bl	8003440 <HAL_Delay>
    for (uint8_t latch_x = 0; latch_x < 5; latch_x++) {
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	3301      	adds	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b04      	cmp	r3, #4
 800133e:	d9ed      	bls.n	800131c <WritePin_ICTest+0x5c>
    }

}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000036c 	.word	0x2000036c
 8001350:	20000394 	.word	0x20000394

08001354 <WritePin_Ron>:
    WritePin_ICTest(data_float);
}



void WritePin_Ron(uint8_t *dataPin) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
    // for (uint8_t latch_x = 6; latch_x < 9; latch_x++) {
    //     Write_data(latch_x,output_latch[latch_x]);
    // }
    Write_data(6,dataPin);
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	2006      	movs	r0, #6
 8001360:	f7ff ff78 	bl	8001254 <Write_data>
    Write_data(7,dataPin);
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	2007      	movs	r0, #7
 8001368:	f7ff ff74 	bl	8001254 <Write_data>
    Write_data(8,dataPin);
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	2008      	movs	r0, #8
 8001370:	f7ff ff70 	bl	8001254 <Write_data>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <TurnOn_short_circuit>:
    Write_data(9,dataPin);
    Write_data(10,dataPin);
    Write_data(11,dataPin);
}

void TurnOn_short_circuit(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
    uint8_t data_pin[8] = {0,0,0,0,0,0,1,0};
 8001382:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <TurnOn_short_circuit+0x44>)
 8001384:	463b      	mov	r3, r7
 8001386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800138a:	e883 0003 	stmia.w	r3, {r0, r1}
    Write_data(9,data_pin);
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	2009      	movs	r0, #9
 8001394:	f7ff ff5e 	bl	8001254 <Write_data>
    memset(data_pin,1,8);
 8001398:	463b      	mov	r3, r7
 800139a:	2208      	movs	r2, #8
 800139c:	2101      	movs	r1, #1
 800139e:	4618      	mov	r0, r3
 80013a0:	f009 f849 	bl	800a436 <memset>
    Write_data(10,data_pin);
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	200a      	movs	r0, #10
 80013aa:	f7ff ff53 	bl	8001254 <Write_data>
    Write_data(11,data_pin);
 80013ae:	463b      	mov	r3, r7
 80013b0:	4619      	mov	r1, r3
 80013b2:	200b      	movs	r0, #11
 80013b4:	f7ff ff4e 	bl	8001254 <Write_data>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	0800cee8 	.word	0x0800cee8

080013c4 <TurnOff_short_circuit>:

void TurnOff_short_circuit(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
    uint8_t data_pin[8] = {0,0,0,0,0,0,0,1};
 80013ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001408 <TurnOff_short_circuit+0x44>)
 80013cc:	463b      	mov	r3, r7
 80013ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d2:	e883 0003 	stmia.w	r3, {r0, r1}
    Write_data(9,data_pin);
 80013d6:	463b      	mov	r3, r7
 80013d8:	4619      	mov	r1, r3
 80013da:	2009      	movs	r0, #9
 80013dc:	f7ff ff3a 	bl	8001254 <Write_data>
    memset(data_pin,1,8);
 80013e0:	463b      	mov	r3, r7
 80013e2:	2208      	movs	r2, #8
 80013e4:	2101      	movs	r1, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f009 f825 	bl	800a436 <memset>
    Write_data(10,data_pin);
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	200a      	movs	r0, #10
 80013f2:	f7ff ff2f 	bl	8001254 <Write_data>
    Write_data(11,data_pin);
 80013f6:	463b      	mov	r3, r7
 80013f8:	4619      	mov	r1, r3
 80013fa:	200b      	movs	r0, #11
 80013fc:	f7ff ff2a 	bl	8001254 <Write_data>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	0800cef0 	.word	0x0800cef0

0800140c <ReadPin_IC_test>:

void ReadPin_IC_test(uint8_t *dataPin,uint8_t num_pin) {
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	70fb      	strb	r3, [r7, #3]
	uint8_t temp_buf[20] = {0};
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
    for (uint8_t Pinx = 0; Pinx < NUM_PIN_IC_TEST; Pinx++) {
 8001428:	2300      	movs	r3, #0
 800142a:	77fb      	strb	r3, [r7, #31]
 800142c:	e076      	b.n	800151c <ReadPin_IC_test+0x110>
        switch (Pinx/8) {
 800142e:	7ffb      	ldrb	r3, [r7, #31]
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d038      	beq.n	80014aa <ReadPin_IC_test+0x9e>
 8001438:	2b02      	cmp	r3, #2
 800143a:	dc4f      	bgt.n	80014dc <ReadPin_IC_test+0xd0>
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <ReadPin_IC_test+0x3a>
 8001440:	2b01      	cmp	r3, #1
 8001442:	d019      	beq.n	8001478 <ReadPin_IC_test+0x6c>
            case 2: {
                HAL_GPIO_WritePin(PIN_TXS_OEx[0].Port_x,PIN_TXS_OEx[0].PIN_x,GPIO_PIN_RESET);
                HAL_GPIO_WritePin(PIN_TXS_OEx[1].Port_x,PIN_TXS_OEx[1].PIN_x,GPIO_PIN_RESET);
                HAL_GPIO_WritePin(PIN_TXS_OEx[2].Port_x,PIN_TXS_OEx[2].PIN_x,GPIO_PIN_SET);
            } break;
            default : break;
 8001444:	e04a      	b.n	80014dc <ReadPin_IC_test+0xd0>
                HAL_GPIO_WritePin(PIN_TXS_OEx[0].Port_x,PIN_TXS_OEx[0].PIN_x,GPIO_PIN_SET);
 8001446:	4b61      	ldr	r3, [pc, #388]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a60      	ldr	r2, [pc, #384]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 800144c:	8891      	ldrh	r1, [r2, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	4618      	mov	r0, r3
 8001452:	f003 f9fd 	bl	8004850 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(PIN_TXS_OEx[1].Port_x,PIN_TXS_OEx[1].PIN_x,GPIO_PIN_RESET);
 8001456:	4b5d      	ldr	r3, [pc, #372]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	4a5c      	ldr	r2, [pc, #368]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 800145c:	8991      	ldrh	r1, [r2, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f003 f9f5 	bl	8004850 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(PIN_TXS_OEx[2].Port_x,PIN_TXS_OEx[2].PIN_x,GPIO_PIN_RESET);
 8001466:	4b59      	ldr	r3, [pc, #356]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	4a58      	ldr	r2, [pc, #352]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 800146c:	8a91      	ldrh	r1, [r2, #20]
 800146e:	2200      	movs	r2, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f003 f9ed 	bl	8004850 <HAL_GPIO_WritePin>
            } break;
 8001476:	e032      	b.n	80014de <ReadPin_IC_test+0xd2>
                HAL_GPIO_WritePin(PIN_TXS_OEx[0].Port_x,PIN_TXS_OEx[0].PIN_x,GPIO_PIN_RESET);
 8001478:	4b54      	ldr	r3, [pc, #336]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a53      	ldr	r2, [pc, #332]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 800147e:	8891      	ldrh	r1, [r2, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f003 f9e4 	bl	8004850 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(PIN_TXS_OEx[1].Port_x,PIN_TXS_OEx[1].PIN_x,GPIO_PIN_SET);
 8001488:	4b50      	ldr	r3, [pc, #320]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a4f      	ldr	r2, [pc, #316]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 800148e:	8991      	ldrh	r1, [r2, #12]
 8001490:	2201      	movs	r2, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f003 f9dc 	bl	8004850 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(PIN_TXS_OEx[2].Port_x,PIN_TXS_OEx[2].PIN_x,GPIO_PIN_RESET);
 8001498:	4b4c      	ldr	r3, [pc, #304]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	4a4b      	ldr	r2, [pc, #300]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 800149e:	8a91      	ldrh	r1, [r2, #20]
 80014a0:	2200      	movs	r2, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 f9d4 	bl	8004850 <HAL_GPIO_WritePin>
            } break;
 80014a8:	e019      	b.n	80014de <ReadPin_IC_test+0xd2>
                HAL_GPIO_WritePin(PIN_TXS_OEx[0].Port_x,PIN_TXS_OEx[0].PIN_x,GPIO_PIN_RESET);
 80014aa:	4b48      	ldr	r3, [pc, #288]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a47      	ldr	r2, [pc, #284]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 80014b0:	8891      	ldrh	r1, [r2, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 f9cb 	bl	8004850 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(PIN_TXS_OEx[1].Port_x,PIN_TXS_OEx[1].PIN_x,GPIO_PIN_RESET);
 80014ba:	4b44      	ldr	r3, [pc, #272]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	4a43      	ldr	r2, [pc, #268]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 80014c0:	8991      	ldrh	r1, [r2, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 f9c3 	bl	8004850 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(PIN_TXS_OEx[2].Port_x,PIN_TXS_OEx[2].PIN_x,GPIO_PIN_SET);
 80014ca:	4b40      	ldr	r3, [pc, #256]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	4a3f      	ldr	r2, [pc, #252]	@ (80015cc <ReadPin_IC_test+0x1c0>)
 80014d0:	8a91      	ldrh	r1, [r2, #20]
 80014d2:	2201      	movs	r2, #1
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 f9bb 	bl	8004850 <HAL_GPIO_WritePin>
            } break;
 80014da:	e000      	b.n	80014de <ReadPin_IC_test+0xd2>
            default : break;
 80014dc:	bf00      	nop
        }
        HAL_Delay(5);
 80014de:	2005      	movs	r0, #5
 80014e0:	f001 ffae 	bl	8003440 <HAL_Delay>
        temp_buf[Pinx] = HAL_GPIO_ReadPin(PIN_SIGx[Pinx%8].Port_x,PIN_SIGx[Pinx%8].PIN_x);
 80014e4:	7ffb      	ldrb	r3, [r7, #31]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	4a39      	ldr	r2, [pc, #228]	@ (80015d0 <ReadPin_IC_test+0x1c4>)
 80014ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80014f0:	7ffb      	ldrb	r3, [r7, #31]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	4936      	ldr	r1, [pc, #216]	@ (80015d0 <ReadPin_IC_test+0x1c4>)
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	440b      	add	r3, r1
 80014fc:	889b      	ldrh	r3, [r3, #4]
 80014fe:	7ffc      	ldrb	r4, [r7, #31]
 8001500:	4619      	mov	r1, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f003 f98c 	bl	8004820 <HAL_GPIO_ReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	f104 0320 	add.w	r3, r4, #32
 8001510:	443b      	add	r3, r7
 8001512:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (uint8_t Pinx = 0; Pinx < NUM_PIN_IC_TEST; Pinx++) {
 8001516:	7ffb      	ldrb	r3, [r7, #31]
 8001518:	3301      	adds	r3, #1
 800151a:	77fb      	strb	r3, [r7, #31]
 800151c:	7ffb      	ldrb	r3, [r7, #31]
 800151e:	2b13      	cmp	r3, #19
 8001520:	d985      	bls.n	800142e <ReadPin_IC_test+0x22>
    }
    if (num_pin == 18) {
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	2b12      	cmp	r3, #18
 8001526:	d115      	bne.n	8001554 <ReadPin_IC_test+0x148>
        for (uint8_t i = 9; i < num_pin; i++) {
 8001528:	2309      	movs	r3, #9
 800152a:	77bb      	strb	r3, [r7, #30]
 800152c:	e00d      	b.n	800154a <ReadPin_IC_test+0x13e>
        	temp_buf[i] = temp_buf[i + 2];
 800152e:	7fbb      	ldrb	r3, [r7, #30]
 8001530:	1c9a      	adds	r2, r3, #2
 8001532:	7fbb      	ldrb	r3, [r7, #30]
 8001534:	3220      	adds	r2, #32
 8001536:	443a      	add	r2, r7
 8001538:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800153c:	3320      	adds	r3, #32
 800153e:	443b      	add	r3, r7
 8001540:	f803 2c18 	strb.w	r2, [r3, #-24]
        for (uint8_t i = 9; i < num_pin; i++) {
 8001544:	7fbb      	ldrb	r3, [r7, #30]
 8001546:	3301      	adds	r3, #1
 8001548:	77bb      	strb	r3, [r7, #30]
 800154a:	7fba      	ldrb	r2, [r7, #30]
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	429a      	cmp	r2, r3
 8001550:	d3ed      	bcc.n	800152e <ReadPin_IC_test+0x122>
 8001552:	e030      	b.n	80015b6 <ReadPin_IC_test+0x1aa>
        }
    } else if (num_pin == 16) {
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	2b10      	cmp	r3, #16
 8001558:	d115      	bne.n	8001586 <ReadPin_IC_test+0x17a>
        for (uint8_t i = 8; i < num_pin; i++) {
 800155a:	2308      	movs	r3, #8
 800155c:	777b      	strb	r3, [r7, #29]
 800155e:	e00d      	b.n	800157c <ReadPin_IC_test+0x170>
        	temp_buf[i] = temp_buf[i + 4];
 8001560:	7f7b      	ldrb	r3, [r7, #29]
 8001562:	1d1a      	adds	r2, r3, #4
 8001564:	7f7b      	ldrb	r3, [r7, #29]
 8001566:	3220      	adds	r2, #32
 8001568:	443a      	add	r2, r7
 800156a:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800156e:	3320      	adds	r3, #32
 8001570:	443b      	add	r3, r7
 8001572:	f803 2c18 	strb.w	r2, [r3, #-24]
        for (uint8_t i = 8; i < num_pin; i++) {
 8001576:	7f7b      	ldrb	r3, [r7, #29]
 8001578:	3301      	adds	r3, #1
 800157a:	777b      	strb	r3, [r7, #29]
 800157c:	7f7a      	ldrb	r2, [r7, #29]
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	429a      	cmp	r2, r3
 8001582:	d3ed      	bcc.n	8001560 <ReadPin_IC_test+0x154>
 8001584:	e017      	b.n	80015b6 <ReadPin_IC_test+0x1aa>
        }
    } else if (num_pin == 14) {
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	2b0e      	cmp	r3, #14
 800158a:	d114      	bne.n	80015b6 <ReadPin_IC_test+0x1aa>
        for (uint8_t i = 7; i < num_pin; i++) {
 800158c:	2307      	movs	r3, #7
 800158e:	773b      	strb	r3, [r7, #28]
 8001590:	e00d      	b.n	80015ae <ReadPin_IC_test+0x1a2>
        	temp_buf[i] = temp_buf[i + 6];
 8001592:	7f3b      	ldrb	r3, [r7, #28]
 8001594:	1d9a      	adds	r2, r3, #6
 8001596:	7f3b      	ldrb	r3, [r7, #28]
 8001598:	3220      	adds	r2, #32
 800159a:	443a      	add	r2, r7
 800159c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80015a0:	3320      	adds	r3, #32
 80015a2:	443b      	add	r3, r7
 80015a4:	f803 2c18 	strb.w	r2, [r3, #-24]
        for (uint8_t i = 7; i < num_pin; i++) {
 80015a8:	7f3b      	ldrb	r3, [r7, #28]
 80015aa:	3301      	adds	r3, #1
 80015ac:	773b      	strb	r3, [r7, #28]
 80015ae:	7f3a      	ldrb	r2, [r7, #28]
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d3ed      	bcc.n	8001592 <ReadPin_IC_test+0x186>
        }
    }
    memcpy(dataPin,temp_buf,num_pin);
 80015b6:	78fa      	ldrb	r2, [r7, #3]
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4619      	mov	r1, r3
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f009 f837 	bl	800a632 <memcpy>
}
 80015c4:	bf00      	nop
 80015c6:	3724      	adds	r7, #36	@ 0x24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	200000e0 	.word	0x200000e0
 80015d0:	200000f8 	.word	0x200000f8

080015d4 <Read_ADC_IC_test>:

void Read_ADC_IC_test(ADS1115_t *pADS1115, uint8_t pin,float *data_buf) {
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	460b      	mov	r3, r1
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	72fb      	strb	r3, [r7, #11]
    /* disable all */
    uint8_t channel_adc;
    uint8_t index_pin;
    for (uint8_t i = 0; i < 3; i++) {
 80015e2:	2300      	movs	r3, #0
 80015e4:	75bb      	strb	r3, [r7, #22]
 80015e6:	e00f      	b.n	8001608 <Read_ADC_IC_test+0x34>
        HAL_GPIO_WritePin(PIN_ADC_ENx[i].Port_x,PIN_ADC_ENx[i].PIN_x,GPIO_PIN_SET);
 80015e8:	7dbb      	ldrb	r3, [r7, #22]
 80015ea:	4a3b      	ldr	r2, [pc, #236]	@ (80016d8 <Read_ADC_IC_test+0x104>)
 80015ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80015f0:	7dbb      	ldrb	r3, [r7, #22]
 80015f2:	4a39      	ldr	r2, [pc, #228]	@ (80016d8 <Read_ADC_IC_test+0x104>)
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4413      	add	r3, r2
 80015f8:	889b      	ldrh	r3, [r3, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	4619      	mov	r1, r3
 80015fe:	f003 f927 	bl	8004850 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 8001602:	7dbb      	ldrb	r3, [r7, #22]
 8001604:	3301      	adds	r3, #1
 8001606:	75bb      	strb	r3, [r7, #22]
 8001608:	7dbb      	ldrb	r3, [r7, #22]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d9ec      	bls.n	80015e8 <Read_ADC_IC_test+0x14>
    }
    HAL_GPIO_WritePin(PIN_ADC_ENx[pin/8].Port_x,PIN_ADC_ENx[pin/8].PIN_x,GPIO_PIN_RESET);
 800160e:	7afb      	ldrb	r3, [r7, #11]
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	4b30      	ldr	r3, [pc, #192]	@ (80016d8 <Read_ADC_IC_test+0x104>)
 8001618:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800161c:	7afb      	ldrb	r3, [r7, #11]
 800161e:	08db      	lsrs	r3, r3, #3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4a2d      	ldr	r2, [pc, #180]	@ (80016d8 <Read_ADC_IC_test+0x104>)
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	889b      	ldrh	r3, [r3, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	f003 f90f 	bl	8004850 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001632:	2005      	movs	r0, #5
 8001634:	f001 ff04 	bl	8003440 <HAL_Delay>
    /* Control Select pin */
    HAL_GPIO_WritePin(PIN_ADC_Sx[0].Port_x,PIN_ADC_Sx[0].PIN_x,(GPIO_PinState)(pin & 0x01));        /* bit 1*/
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <Read_ADC_IC_test+0x108>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <Read_ADC_IC_test+0x108>)
 800163e:	8899      	ldrh	r1, [r3, #4]
 8001640:	7afb      	ldrb	r3, [r7, #11]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	f003 f901 	bl	8004850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_ADC_Sx[1].Port_x,PIN_ADC_Sx[1].PIN_x,(GPIO_PinState)((pin >> 1) & 0x01)); /* bit 2*/
 800164e:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <Read_ADC_IC_test+0x108>)
 8001650:	6898      	ldr	r0, [r3, #8]
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <Read_ADC_IC_test+0x108>)
 8001654:	8999      	ldrh	r1, [r3, #12]
 8001656:	7afb      	ldrb	r3, [r7, #11]
 8001658:	085b      	lsrs	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	f003 f8f4 	bl	8004850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_ADC_Sx[2].Port_x,PIN_ADC_Sx[2].PIN_x,(GPIO_PinState)((pin >> 2) & 0x01));
 8001668:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <Read_ADC_IC_test+0x108>)
 800166a:	6918      	ldr	r0, [r3, #16]
 800166c:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <Read_ADC_IC_test+0x108>)
 800166e:	8a99      	ldrh	r1, [r3, #20]
 8001670:	7afb      	ldrb	r3, [r7, #11]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	f003 f8e7 	bl	8004850 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001682:	2005      	movs	r0, #5
 8001684:	f001 fedc 	bl	8003440 <HAL_Delay>
    index_pin = pin/8;
 8001688:	7afb      	ldrb	r3, [r7, #11]
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	757b      	strb	r3, [r7, #21]
    switch (index_pin) {
 800168e:	7d7b      	ldrb	r3, [r7, #21]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d00c      	beq.n	80016ae <Read_ADC_IC_test+0xda>
 8001694:	2b02      	cmp	r3, #2
 8001696:	dc0d      	bgt.n	80016b4 <Read_ADC_IC_test+0xe0>
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <Read_ADC_IC_test+0xce>
 800169c:	2b01      	cmp	r3, #1
 800169e:	d003      	beq.n	80016a8 <Read_ADC_IC_test+0xd4>
            channel_adc = CHANNEL_AIN1_GND;
        } break;
        case 2 : {
            channel_adc = CHANNEL_AIN2_GND;
        } break;
        default : break;
 80016a0:	e008      	b.n	80016b4 <Read_ADC_IC_test+0xe0>
            channel_adc = CHANNEL_AIN0_GND;
 80016a2:	2304      	movs	r3, #4
 80016a4:	75fb      	strb	r3, [r7, #23]
        } break;
 80016a6:	e006      	b.n	80016b6 <Read_ADC_IC_test+0xe2>
            channel_adc = CHANNEL_AIN1_GND;
 80016a8:	2305      	movs	r3, #5
 80016aa:	75fb      	strb	r3, [r7, #23]
        } break;
 80016ac:	e003      	b.n	80016b6 <Read_ADC_IC_test+0xe2>
            channel_adc = CHANNEL_AIN2_GND;
 80016ae:	2306      	movs	r3, #6
 80016b0:	75fb      	strb	r3, [r7, #23]
        } break;
 80016b2:	e000      	b.n	80016b6 <Read_ADC_IC_test+0xe2>
        default : break;
 80016b4:	bf00      	nop
    }
    /* read value */
    data_buf[pin] = ADS1115_single_getdata(pADS1115,channel_adc);
 80016b6:	7afb      	ldrb	r3, [r7, #11]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	18d4      	adds	r4, r2, r3
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	4619      	mov	r1, r3
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f006 f9d6 	bl	8007a74 <ADS1115_single_getdata>
 80016c8:	eef0 7a40 	vmov.f32	s15, s0
 80016cc:	edc4 7a00 	vstr	s15, [r4]
}
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	20000150 	.word	0x20000150
 80016dc:	20000138 	.word	0x20000138

080016e0 <convert_data_compare>:



uint8_t convert_data_compare(char c_input) {
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
    switch (c_input) {
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	3b30      	subs	r3, #48	@ 0x30
 80016ee:	2b26      	cmp	r3, #38	@ 0x26
 80016f0:	d854      	bhi.n	800179c <convert_data_compare+0xbc>
 80016f2:	a201      	add	r2, pc, #4	@ (adr r2, 80016f8 <convert_data_compare+0x18>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001799 	.word	0x08001799
 80016fc:	08001795 	.word	0x08001795
 8001700:	0800179d 	.word	0x0800179d
 8001704:	0800179d 	.word	0x0800179d
 8001708:	0800179d 	.word	0x0800179d
 800170c:	0800179d 	.word	0x0800179d
 8001710:	0800179d 	.word	0x0800179d
 8001714:	0800179d 	.word	0x0800179d
 8001718:	0800179d 	.word	0x0800179d
 800171c:	0800179d 	.word	0x0800179d
 8001720:	0800179d 	.word	0x0800179d
 8001724:	0800179d 	.word	0x0800179d
 8001728:	0800179d 	.word	0x0800179d
 800172c:	0800179d 	.word	0x0800179d
 8001730:	0800179d 	.word	0x0800179d
 8001734:	0800179d 	.word	0x0800179d
 8001738:	0800179d 	.word	0x0800179d
 800173c:	0800179d 	.word	0x0800179d
 8001740:	0800179d 	.word	0x0800179d
 8001744:	0800179d 	.word	0x0800179d
 8001748:	0800179d 	.word	0x0800179d
 800174c:	0800179d 	.word	0x0800179d
 8001750:	0800179d 	.word	0x0800179d
 8001754:	08001799 	.word	0x08001799
 8001758:	08001795 	.word	0x08001795
 800175c:	0800179d 	.word	0x0800179d
 8001760:	0800179d 	.word	0x0800179d
 8001764:	0800179d 	.word	0x0800179d
 8001768:	08001799 	.word	0x08001799
 800176c:	0800179d 	.word	0x0800179d
 8001770:	0800179d 	.word	0x0800179d
 8001774:	0800179d 	.word	0x0800179d
 8001778:	0800179d 	.word	0x0800179d
 800177c:	0800179d 	.word	0x0800179d
 8001780:	0800179d 	.word	0x0800179d
 8001784:	0800179d 	.word	0x0800179d
 8001788:	0800179d 	.word	0x0800179d
 800178c:	0800179d 	.word	0x0800179d
 8001790:	08001795 	.word	0x08001795
        case 'V' :
        case 'H' :
        case '1' : {
            return 1;
 8001794:	2301      	movs	r3, #1
 8001796:	e001      	b.n	800179c <convert_data_compare+0xbc>
        } break;
        case 'G' :
        case 'L' :
        case '0' : {
            return 0;
 8001798:	2300      	movs	r3, #0
 800179a:	e7ff      	b.n	800179c <convert_data_compare+0xbc>
        } break;
    }
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <convert_character_input>:

uint8_t convert_character_input(char c_input) {
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
    switch (c_input) {
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	3b30      	subs	r3, #48	@ 0x30
 80017b6:	2b26      	cmp	r3, #38	@ 0x26
 80017b8:	d856      	bhi.n	8001868 <convert_character_input+0xc0>
 80017ba:	a201      	add	r2, pc, #4	@ (adr r2, 80017c0 <convert_character_input+0x18>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	08001861 	.word	0x08001861
 80017c4:	0800185d 	.word	0x0800185d
 80017c8:	08001869 	.word	0x08001869
 80017cc:	08001869 	.word	0x08001869
 80017d0:	08001869 	.word	0x08001869
 80017d4:	08001869 	.word	0x08001869
 80017d8:	08001869 	.word	0x08001869
 80017dc:	08001869 	.word	0x08001869
 80017e0:	08001869 	.word	0x08001869
 80017e4:	08001869 	.word	0x08001869
 80017e8:	08001869 	.word	0x08001869
 80017ec:	08001869 	.word	0x08001869
 80017f0:	08001869 	.word	0x08001869
 80017f4:	08001869 	.word	0x08001869
 80017f8:	08001869 	.word	0x08001869
 80017fc:	08001869 	.word	0x08001869
 8001800:	08001869 	.word	0x08001869
 8001804:	08001869 	.word	0x08001869
 8001808:	08001869 	.word	0x08001869
 800180c:	08001869 	.word	0x08001869
 8001810:	0800186d 	.word	0x0800186d
 8001814:	08001869 	.word	0x08001869
 8001818:	08001869 	.word	0x08001869
 800181c:	08001861 	.word	0x08001861
 8001820:	08001865 	.word	0x08001865
 8001824:	08001869 	.word	0x08001869
 8001828:	08001869 	.word	0x08001869
 800182c:	08001869 	.word	0x08001869
 8001830:	08001865 	.word	0x08001865
 8001834:	08001869 	.word	0x08001869
 8001838:	08001869 	.word	0x08001869
 800183c:	08001869 	.word	0x08001869
 8001840:	08001869 	.word	0x08001869
 8001844:	08001869 	.word	0x08001869
 8001848:	08001869 	.word	0x08001869
 800184c:	08001869 	.word	0x08001869
 8001850:	08001869 	.word	0x08001869
 8001854:	0800186d 	.word	0x0800186d
 8001858:	0800185d 	.word	0x0800185d
        case 'V' :
        case '1' : {
            return 1;
 800185c:	2301      	movs	r3, #1
 800185e:	e006      	b.n	800186e <convert_character_input+0xc6>
        } break;
        case 'G' :
        case '0' : {
            return 0;
 8001860:	2300      	movs	r3, #0
 8001862:	e004      	b.n	800186e <convert_character_input+0xc6>
        } break;
        case 'L' :
        case 'H' : {
            return 2;
 8001864:	2302      	movs	r3, #2
 8001866:	e002      	b.n	800186e <convert_character_input+0xc6>
        } break;
        case 'D' : {
            // mean high to low clock
        } break;
        default : {
            return 2;
 8001868:	2302      	movs	r3, #2
 800186a:	e000      	b.n	800186e <convert_character_input+0xc6>
        } break;
 800186c:	bf00      	nop
        } break;
    }
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <convert_data_test>:

void convert_data_test(uint8_t num_pin, char *data_test, uint8_t *data_control) {
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	73fb      	strb	r3, [r7, #15]
    memset(data_control,2,20);
 800188a:	2214      	movs	r2, #20
 800188c:	2102      	movs	r1, #2
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f008 fdd1 	bl	800a436 <memset>

    if (num_pin == 18) {
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	2b12      	cmp	r3, #18
 8001898:	d12c      	bne.n	80018f4 <convert_data_test+0x78>
        for (uint8_t i = 0; i < 9; i++) {
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]
 800189e:	e00e      	b.n	80018be <convert_data_test+0x42>
            data_control[i] = convert_character_input(data_test[i]);
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	4413      	add	r3, r2
 80018a6:	7819      	ldrb	r1, [r3, #0]
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	18d4      	adds	r4, r2, r3
 80018ae:	4608      	mov	r0, r1
 80018b0:	f7ff ff7a 	bl	80017a8 <convert_character_input>
 80018b4:	4603      	mov	r3, r0
 80018b6:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 0; i < 9; i++) {
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	3301      	adds	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d9ed      	bls.n	80018a0 <convert_data_test+0x24>
        }
        for (uint8_t i = 9; i < 18; i++) {
 80018c4:	2309      	movs	r3, #9
 80018c6:	75bb      	strb	r3, [r7, #22]
 80018c8:	e010      	b.n	80018ec <convert_data_test+0x70>
            data_control[11 + (i - 9)] = convert_character_input(data_test[i]);
 80018ca:	7dbb      	ldrb	r3, [r7, #22]
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	4413      	add	r3, r2
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	7dbb      	ldrb	r3, [r7, #22]
 80018d4:	3302      	adds	r3, #2
 80018d6:	4619      	mov	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	185c      	adds	r4, r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	f7ff ff63 	bl	80017a8 <convert_character_input>
 80018e2:	4603      	mov	r3, r0
 80018e4:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 9; i < 18; i++) {
 80018e6:	7dbb      	ldrb	r3, [r7, #22]
 80018e8:	3301      	adds	r3, #1
 80018ea:	75bb      	strb	r3, [r7, #22]
 80018ec:	7dbb      	ldrb	r3, [r7, #22]
 80018ee:	2b11      	cmp	r3, #17
 80018f0:	d9eb      	bls.n	80018ca <convert_data_test+0x4e>
        }
        for (uint8_t i = 7; i < 14; i++) {
            data_control[13 + (i - 7)] = convert_character_input(data_test[i]);
        }
    }
}
 80018f2:	e05e      	b.n	80019b2 <convert_data_test+0x136>
    } else if (num_pin == 16) {
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	d12c      	bne.n	8001954 <convert_data_test+0xd8>
        for (uint8_t i = 0; i < 8; i++) {
 80018fa:	2300      	movs	r3, #0
 80018fc:	757b      	strb	r3, [r7, #21]
 80018fe:	e00e      	b.n	800191e <convert_data_test+0xa2>
            data_control[i] = convert_character_input(data_test[i]);
 8001900:	7d7b      	ldrb	r3, [r7, #21]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	4413      	add	r3, r2
 8001906:	7819      	ldrb	r1, [r3, #0]
 8001908:	7d7b      	ldrb	r3, [r7, #21]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	18d4      	adds	r4, r2, r3
 800190e:	4608      	mov	r0, r1
 8001910:	f7ff ff4a 	bl	80017a8 <convert_character_input>
 8001914:	4603      	mov	r3, r0
 8001916:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 0; i < 8; i++) {
 8001918:	7d7b      	ldrb	r3, [r7, #21]
 800191a:	3301      	adds	r3, #1
 800191c:	757b      	strb	r3, [r7, #21]
 800191e:	7d7b      	ldrb	r3, [r7, #21]
 8001920:	2b07      	cmp	r3, #7
 8001922:	d9ed      	bls.n	8001900 <convert_data_test+0x84>
        for (uint8_t i = 8; i < 16; i++) {
 8001924:	2308      	movs	r3, #8
 8001926:	753b      	strb	r3, [r7, #20]
 8001928:	e010      	b.n	800194c <convert_data_test+0xd0>
            data_control[12 + (i - 8)] = convert_character_input(data_test[i]);
 800192a:	7d3b      	ldrb	r3, [r7, #20]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	4413      	add	r3, r2
 8001930:	781a      	ldrb	r2, [r3, #0]
 8001932:	7d3b      	ldrb	r3, [r7, #20]
 8001934:	3304      	adds	r3, #4
 8001936:	4619      	mov	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	185c      	adds	r4, r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	f7ff ff33 	bl	80017a8 <convert_character_input>
 8001942:	4603      	mov	r3, r0
 8001944:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 8; i < 16; i++) {
 8001946:	7d3b      	ldrb	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	753b      	strb	r3, [r7, #20]
 800194c:	7d3b      	ldrb	r3, [r7, #20]
 800194e:	2b0f      	cmp	r3, #15
 8001950:	d9eb      	bls.n	800192a <convert_data_test+0xae>
}
 8001952:	e02e      	b.n	80019b2 <convert_data_test+0x136>
    } else if (num_pin == 14) {
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	2b0e      	cmp	r3, #14
 8001958:	d12b      	bne.n	80019b2 <convert_data_test+0x136>
        for (uint8_t i = 0; i < 7; i++) {
 800195a:	2300      	movs	r3, #0
 800195c:	74fb      	strb	r3, [r7, #19]
 800195e:	e00e      	b.n	800197e <convert_data_test+0x102>
            data_control[i] = convert_character_input(data_test[i]);
 8001960:	7cfb      	ldrb	r3, [r7, #19]
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	4413      	add	r3, r2
 8001966:	7819      	ldrb	r1, [r3, #0]
 8001968:	7cfb      	ldrb	r3, [r7, #19]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	18d4      	adds	r4, r2, r3
 800196e:	4608      	mov	r0, r1
 8001970:	f7ff ff1a 	bl	80017a8 <convert_character_input>
 8001974:	4603      	mov	r3, r0
 8001976:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 0; i < 7; i++) {
 8001978:	7cfb      	ldrb	r3, [r7, #19]
 800197a:	3301      	adds	r3, #1
 800197c:	74fb      	strb	r3, [r7, #19]
 800197e:	7cfb      	ldrb	r3, [r7, #19]
 8001980:	2b06      	cmp	r3, #6
 8001982:	d9ed      	bls.n	8001960 <convert_data_test+0xe4>
        for (uint8_t i = 7; i < 14; i++) {
 8001984:	2307      	movs	r3, #7
 8001986:	74bb      	strb	r3, [r7, #18]
 8001988:	e010      	b.n	80019ac <convert_data_test+0x130>
            data_control[13 + (i - 7)] = convert_character_input(data_test[i]);
 800198a:	7cbb      	ldrb	r3, [r7, #18]
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	4413      	add	r3, r2
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	7cbb      	ldrb	r3, [r7, #18]
 8001994:	3306      	adds	r3, #6
 8001996:	4619      	mov	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	185c      	adds	r4, r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	f7ff ff03 	bl	80017a8 <convert_character_input>
 80019a2:	4603      	mov	r3, r0
 80019a4:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 7; i < 14; i++) {
 80019a6:	7cbb      	ldrb	r3, [r7, #18]
 80019a8:	3301      	adds	r3, #1
 80019aa:	74bb      	strb	r3, [r7, #18]
 80019ac:	7cbb      	ldrb	r3, [r7, #18]
 80019ae:	2b0d      	cmp	r3, #13
 80019b0:	d9eb      	bls.n	800198a <convert_data_test+0x10e>
}
 80019b2:	bf00      	nop
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd90      	pop	{r4, r7, pc}

080019ba <has_clock_transition>:

bool has_clock_transition(uint8_t num_pin, char *data_test) {
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	6039      	str	r1, [r7, #0]
 80019c4:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < num_pin; i++) {
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
 80019ca:	e010      	b.n	80019ee <has_clock_transition+0x34>
        if (data_test[i] == 'U' || data_test[i] == 'D') {
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b55      	cmp	r3, #85	@ 0x55
 80019d6:	d005      	beq.n	80019e4 <has_clock_transition+0x2a>
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b44      	cmp	r3, #68	@ 0x44
 80019e2:	d101      	bne.n	80019e8 <has_clock_transition+0x2e>
            return true;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e007      	b.n	80019f8 <has_clock_transition+0x3e>
    for (uint8_t i = 0; i < num_pin; i++) {
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	3301      	adds	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	7bfa      	ldrb	r2, [r7, #15]
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d3ea      	bcc.n	80019cc <has_clock_transition+0x12>
        }
    }
    return false;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <convert_data_test_first_state>:

void convert_data_test_first_state(uint8_t num_pin, char *data_test, uint8_t *data_control) {
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	73fb      	strb	r3, [r7, #15]
    memset(data_control,2,20);
 8001a12:	2214      	movs	r2, #20
 8001a14:	2102      	movs	r1, #2
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f008 fd0d 	bl	800a436 <memset>

    if (num_pin == 16) {
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b10      	cmp	r3, #16
 8001a20:	d158      	bne.n	8001ad4 <convert_data_test_first_state+0xd0>
        for (uint8_t i = 0; i < 8; i++) {
 8001a22:	2300      	movs	r3, #0
 8001a24:	75fb      	strb	r3, [r7, #23]
 8001a26:	e022      	b.n	8001a6e <convert_data_test_first_state+0x6a>
            char c = data_test[i];
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	743b      	strb	r3, [r7, #16]
            if (c == 'U') {
 8001a32:	7c3b      	ldrb	r3, [r7, #16]
 8001a34:	2b55      	cmp	r3, #85	@ 0x55
 8001a36:	d105      	bne.n	8001a44 <convert_data_test_first_state+0x40>
                data_control[i] = 0;       
 8001a38:	7dfb      	ldrb	r3, [r7, #23]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e011      	b.n	8001a68 <convert_data_test_first_state+0x64>
            } else if (c == 'D') {
 8001a44:	7c3b      	ldrb	r3, [r7, #16]
 8001a46:	2b44      	cmp	r3, #68	@ 0x44
 8001a48:	d105      	bne.n	8001a56 <convert_data_test_first_state+0x52>
                data_control[i] = 1;        
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	e008      	b.n	8001a68 <convert_data_test_first_state+0x64>
            } else {
                data_control[i] = convert_character_input(c);
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	18d4      	adds	r4, r2, r3
 8001a5c:	7c3b      	ldrb	r3, [r7, #16]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fea2 	bl	80017a8 <convert_character_input>
 8001a64:	4603      	mov	r3, r0
 8001a66:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 0; i < 8; i++) {
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	75fb      	strb	r3, [r7, #23]
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	2b07      	cmp	r3, #7
 8001a72:	d9d9      	bls.n	8001a28 <convert_data_test_first_state+0x24>
            }
        }
        for (uint8_t i = 8; i < 16; i++) {
 8001a74:	2308      	movs	r3, #8
 8001a76:	75bb      	strb	r3, [r7, #22]
 8001a78:	e028      	b.n	8001acc <convert_data_test_first_state+0xc8>
            char c = data_test[i];
 8001a7a:	7dbb      	ldrb	r3, [r7, #22]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	4413      	add	r3, r2
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	747b      	strb	r3, [r7, #17]
            if (c == 'U') {
 8001a84:	7c7b      	ldrb	r3, [r7, #17]
 8001a86:	2b55      	cmp	r3, #85	@ 0x55
 8001a88:	d107      	bne.n	8001a9a <convert_data_test_first_state+0x96>
                data_control[12 + (i - 8)] = 0;   
 8001a8a:	7dbb      	ldrb	r3, [r7, #22]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	461a      	mov	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
 8001a98:	e015      	b.n	8001ac6 <convert_data_test_first_state+0xc2>
            } else if (c == 'D') {
 8001a9a:	7c7b      	ldrb	r3, [r7, #17]
 8001a9c:	2b44      	cmp	r3, #68	@ 0x44
 8001a9e:	d107      	bne.n	8001ab0 <convert_data_test_first_state+0xac>
                data_control[12 + (i - 8)] = 1;    
 8001aa0:	7dbb      	ldrb	r3, [r7, #22]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	e00a      	b.n	8001ac6 <convert_data_test_first_state+0xc2>
            } else {
                data_control[12 + (i - 8)] = convert_character_input(c);
 8001ab0:	7dbb      	ldrb	r3, [r7, #22]
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	189c      	adds	r4, r3, r2
 8001aba:	7c7b      	ldrb	r3, [r7, #17]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fe73 	bl	80017a8 <convert_character_input>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 8; i < 16; i++) {
 8001ac6:	7dbb      	ldrb	r3, [r7, #22]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	75bb      	strb	r3, [r7, #22]
 8001acc:	7dbb      	ldrb	r3, [r7, #22]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	d9d3      	bls.n	8001a7a <convert_data_test_first_state+0x76>
            } else {
                data_control[13 + (i - 7)] = convert_character_input(c);
            }
        }
    }
}
 8001ad2:	e05a      	b.n	8001b8a <convert_data_test_first_state+0x186>
    } else if (num_pin == 14) {
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b0e      	cmp	r3, #14
 8001ad8:	d157      	bne.n	8001b8a <convert_data_test_first_state+0x186>
        for (uint8_t i = 0; i < 7; i++) {
 8001ada:	2300      	movs	r3, #0
 8001adc:	757b      	strb	r3, [r7, #21]
 8001ade:	e022      	b.n	8001b26 <convert_data_test_first_state+0x122>
            char c = data_test[i];
 8001ae0:	7d7b      	ldrb	r3, [r7, #21]
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	74bb      	strb	r3, [r7, #18]
            if (c == 'U') {
 8001aea:	7cbb      	ldrb	r3, [r7, #18]
 8001aec:	2b55      	cmp	r3, #85	@ 0x55
 8001aee:	d105      	bne.n	8001afc <convert_data_test_first_state+0xf8>
                data_control[i] = 0;       
 8001af0:	7d7b      	ldrb	r3, [r7, #21]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e011      	b.n	8001b20 <convert_data_test_first_state+0x11c>
            } else if (c == 'D') {
 8001afc:	7cbb      	ldrb	r3, [r7, #18]
 8001afe:	2b44      	cmp	r3, #68	@ 0x44
 8001b00:	d105      	bne.n	8001b0e <convert_data_test_first_state+0x10a>
                data_control[i] = 1;        
 8001b02:	7d7b      	ldrb	r3, [r7, #21]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	e008      	b.n	8001b20 <convert_data_test_first_state+0x11c>
                data_control[i] = convert_character_input(c);
 8001b0e:	7d7b      	ldrb	r3, [r7, #21]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	18d4      	adds	r4, r2, r3
 8001b14:	7cbb      	ldrb	r3, [r7, #18]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fe46 	bl	80017a8 <convert_character_input>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 0; i < 7; i++) {
 8001b20:	7d7b      	ldrb	r3, [r7, #21]
 8001b22:	3301      	adds	r3, #1
 8001b24:	757b      	strb	r3, [r7, #21]
 8001b26:	7d7b      	ldrb	r3, [r7, #21]
 8001b28:	2b06      	cmp	r3, #6
 8001b2a:	d9d9      	bls.n	8001ae0 <convert_data_test_first_state+0xdc>
        for (uint8_t i = 7; i < 14; i++) {
 8001b2c:	2307      	movs	r3, #7
 8001b2e:	753b      	strb	r3, [r7, #20]
 8001b30:	e028      	b.n	8001b84 <convert_data_test_first_state+0x180>
            char c = data_test[i];
 8001b32:	7d3b      	ldrb	r3, [r7, #20]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	4413      	add	r3, r2
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	74fb      	strb	r3, [r7, #19]
            if (c == 'U') {
 8001b3c:	7cfb      	ldrb	r3, [r7, #19]
 8001b3e:	2b55      	cmp	r3, #85	@ 0x55
 8001b40:	d107      	bne.n	8001b52 <convert_data_test_first_state+0x14e>
                data_control[13 + (i - 7)] = 0;   
 8001b42:	7d3b      	ldrb	r3, [r7, #20]
 8001b44:	3306      	adds	r3, #6
 8001b46:	461a      	mov	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	e015      	b.n	8001b7e <convert_data_test_first_state+0x17a>
            } else if (c == 'D') {
 8001b52:	7cfb      	ldrb	r3, [r7, #19]
 8001b54:	2b44      	cmp	r3, #68	@ 0x44
 8001b56:	d107      	bne.n	8001b68 <convert_data_test_first_state+0x164>
                data_control[13 + (i - 7)] = 1;    
 8001b58:	7d3b      	ldrb	r3, [r7, #20]
 8001b5a:	3306      	adds	r3, #6
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e00a      	b.n	8001b7e <convert_data_test_first_state+0x17a>
                data_control[13 + (i - 7)] = convert_character_input(c);
 8001b68:	7d3b      	ldrb	r3, [r7, #20]
 8001b6a:	3306      	adds	r3, #6
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	189c      	adds	r4, r3, r2
 8001b72:	7cfb      	ldrb	r3, [r7, #19]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe17 	bl	80017a8 <convert_character_input>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 7; i < 14; i++) {
 8001b7e:	7d3b      	ldrb	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	753b      	strb	r3, [r7, #20]
 8001b84:	7d3b      	ldrb	r3, [r7, #20]
 8001b86:	2b0d      	cmp	r3, #13
 8001b88:	d9d3      	bls.n	8001b32 <convert_data_test_first_state+0x12e>
}
 8001b8a:	bf00      	nop
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}

08001b92 <convert_data_test_second_state>:

void convert_data_test_second_state(uint8_t num_pin, char *data_test, uint8_t *data_control) {
 8001b92:	b590      	push	{r4, r7, lr}
 8001b94:	b087      	sub	sp, #28
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	73fb      	strb	r3, [r7, #15]
    memset(data_control, 2, 20);
 8001ba0:	2214      	movs	r2, #20
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f008 fc46 	bl	800a436 <memset>

    if (num_pin == 16) {
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b10      	cmp	r3, #16
 8001bae:	d158      	bne.n	8001c62 <convert_data_test_second_state+0xd0>
        for (uint8_t i = 0; i < 8; i++) {
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	75fb      	strb	r3, [r7, #23]
 8001bb4:	e022      	b.n	8001bfc <convert_data_test_second_state+0x6a>
            char c = data_test[i];
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	743b      	strb	r3, [r7, #16]
            if (c == 'U') {
 8001bc0:	7c3b      	ldrb	r3, [r7, #16]
 8001bc2:	2b55      	cmp	r3, #85	@ 0x55
 8001bc4:	d105      	bne.n	8001bd2 <convert_data_test_second_state+0x40>
                data_control[i] = 1;        // U: end with HIGH
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	e011      	b.n	8001bf6 <convert_data_test_second_state+0x64>
            } else if (c == 'D') {
 8001bd2:	7c3b      	ldrb	r3, [r7, #16]
 8001bd4:	2b44      	cmp	r3, #68	@ 0x44
 8001bd6:	d105      	bne.n	8001be4 <convert_data_test_second_state+0x52>
                data_control[i] = 0;        // D: end with LOW
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	e008      	b.n	8001bf6 <convert_data_test_second_state+0x64>
            } else {
                data_control[i] = convert_character_input(c);
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	18d4      	adds	r4, r2, r3
 8001bea:	7c3b      	ldrb	r3, [r7, #16]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fddb 	bl	80017a8 <convert_character_input>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 0; i < 8; i++) {
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	75fb      	strb	r3, [r7, #23]
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	2b07      	cmp	r3, #7
 8001c00:	d9d9      	bls.n	8001bb6 <convert_data_test_second_state+0x24>
            }
        }
        for (uint8_t i = 8; i < 16; i++) {
 8001c02:	2308      	movs	r3, #8
 8001c04:	75bb      	strb	r3, [r7, #22]
 8001c06:	e028      	b.n	8001c5a <convert_data_test_second_state+0xc8>
            char c = data_test[i];
 8001c08:	7dbb      	ldrb	r3, [r7, #22]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	747b      	strb	r3, [r7, #17]
            if (c == 'U') {
 8001c12:	7c7b      	ldrb	r3, [r7, #17]
 8001c14:	2b55      	cmp	r3, #85	@ 0x55
 8001c16:	d107      	bne.n	8001c28 <convert_data_test_second_state+0x96>
                data_control[12 + (i - 8)] = 1;    // U: end with HIGH
 8001c18:	7dbb      	ldrb	r3, [r7, #22]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e015      	b.n	8001c54 <convert_data_test_second_state+0xc2>
            } else if (c == 'D') {
 8001c28:	7c7b      	ldrb	r3, [r7, #17]
 8001c2a:	2b44      	cmp	r3, #68	@ 0x44
 8001c2c:	d107      	bne.n	8001c3e <convert_data_test_second_state+0xac>
                data_control[12 + (i - 8)] = 0;    // D: end with LOW
 8001c2e:	7dbb      	ldrb	r3, [r7, #22]
 8001c30:	3304      	adds	r3, #4
 8001c32:	461a      	mov	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	e00a      	b.n	8001c54 <convert_data_test_second_state+0xc2>
            } else {
                data_control[12 + (i - 8)] = convert_character_input(c);
 8001c3e:	7dbb      	ldrb	r3, [r7, #22]
 8001c40:	3304      	adds	r3, #4
 8001c42:	461a      	mov	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	189c      	adds	r4, r3, r2
 8001c48:	7c7b      	ldrb	r3, [r7, #17]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fdac 	bl	80017a8 <convert_character_input>
 8001c50:	4603      	mov	r3, r0
 8001c52:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 8; i < 16; i++) {
 8001c54:	7dbb      	ldrb	r3, [r7, #22]
 8001c56:	3301      	adds	r3, #1
 8001c58:	75bb      	strb	r3, [r7, #22]
 8001c5a:	7dbb      	ldrb	r3, [r7, #22]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d9d3      	bls.n	8001c08 <convert_data_test_second_state+0x76>
            } else {
                data_control[13 + (i - 7)] = convert_character_input(c);
            }
        }
    }
}
 8001c60:	e05a      	b.n	8001d18 <convert_data_test_second_state+0x186>
    } else if (num_pin == 14) {
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	2b0e      	cmp	r3, #14
 8001c66:	d157      	bne.n	8001d18 <convert_data_test_second_state+0x186>
        for (uint8_t i = 0; i < 7; i++) {
 8001c68:	2300      	movs	r3, #0
 8001c6a:	757b      	strb	r3, [r7, #21]
 8001c6c:	e022      	b.n	8001cb4 <convert_data_test_second_state+0x122>
            char c = data_test[i];
 8001c6e:	7d7b      	ldrb	r3, [r7, #21]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	4413      	add	r3, r2
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	74bb      	strb	r3, [r7, #18]
            if (c == 'U') {
 8001c78:	7cbb      	ldrb	r3, [r7, #18]
 8001c7a:	2b55      	cmp	r3, #85	@ 0x55
 8001c7c:	d105      	bne.n	8001c8a <convert_data_test_second_state+0xf8>
                data_control[i] = 1;        // U: end with HIGH
 8001c7e:	7d7b      	ldrb	r3, [r7, #21]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e011      	b.n	8001cae <convert_data_test_second_state+0x11c>
            } else if (c == 'D') {
 8001c8a:	7cbb      	ldrb	r3, [r7, #18]
 8001c8c:	2b44      	cmp	r3, #68	@ 0x44
 8001c8e:	d105      	bne.n	8001c9c <convert_data_test_second_state+0x10a>
                data_control[i] = 0;        // D: end with LOW
 8001c90:	7d7b      	ldrb	r3, [r7, #21]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	e008      	b.n	8001cae <convert_data_test_second_state+0x11c>
                data_control[i] = convert_character_input(c);
 8001c9c:	7d7b      	ldrb	r3, [r7, #21]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	18d4      	adds	r4, r2, r3
 8001ca2:	7cbb      	ldrb	r3, [r7, #18]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fd7f 	bl	80017a8 <convert_character_input>
 8001caa:	4603      	mov	r3, r0
 8001cac:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 0; i < 7; i++) {
 8001cae:	7d7b      	ldrb	r3, [r7, #21]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	757b      	strb	r3, [r7, #21]
 8001cb4:	7d7b      	ldrb	r3, [r7, #21]
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d9d9      	bls.n	8001c6e <convert_data_test_second_state+0xdc>
        for (uint8_t i = 7; i < 14; i++) {
 8001cba:	2307      	movs	r3, #7
 8001cbc:	753b      	strb	r3, [r7, #20]
 8001cbe:	e028      	b.n	8001d12 <convert_data_test_second_state+0x180>
            char c = data_test[i];
 8001cc0:	7d3b      	ldrb	r3, [r7, #20]
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	74fb      	strb	r3, [r7, #19]
            if (c == 'U') {
 8001cca:	7cfb      	ldrb	r3, [r7, #19]
 8001ccc:	2b55      	cmp	r3, #85	@ 0x55
 8001cce:	d107      	bne.n	8001ce0 <convert_data_test_second_state+0x14e>
                data_control[13 + (i - 7)] = 1;    // U: end with HIGH
 8001cd0:	7d3b      	ldrb	r3, [r7, #20]
 8001cd2:	3306      	adds	r3, #6
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	e015      	b.n	8001d0c <convert_data_test_second_state+0x17a>
            } else if (c == 'D') {
 8001ce0:	7cfb      	ldrb	r3, [r7, #19]
 8001ce2:	2b44      	cmp	r3, #68	@ 0x44
 8001ce4:	d107      	bne.n	8001cf6 <convert_data_test_second_state+0x164>
                data_control[13 + (i - 7)] = 0;    // D: end with LOW
 8001ce6:	7d3b      	ldrb	r3, [r7, #20]
 8001ce8:	3306      	adds	r3, #6
 8001cea:	461a      	mov	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	e00a      	b.n	8001d0c <convert_data_test_second_state+0x17a>
                data_control[13 + (i - 7)] = convert_character_input(c);
 8001cf6:	7d3b      	ldrb	r3, [r7, #20]
 8001cf8:	3306      	adds	r3, #6
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	189c      	adds	r4, r3, r2
 8001d00:	7cfb      	ldrb	r3, [r7, #19]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fd50 	bl	80017a8 <convert_character_input>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 7; i < 14; i++) {
 8001d0c:	7d3b      	ldrb	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	753b      	strb	r3, [r7, #20]
 8001d12:	7d3b      	ldrb	r3, [r7, #20]
 8001d14:	2b0d      	cmp	r3, #13
 8001d16:	d9d3      	bls.n	8001cc0 <convert_data_test_second_state+0x12e>
}
 8001d18:	bf00      	nop
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd90      	pop	{r4, r7, pc}

08001d20 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d2c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d013      	beq.n	8001d60 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001d38:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d3c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001d40:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00b      	beq.n	8001d60 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001d48:	e000      	b.n	8001d4c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001d4a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001d4c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f9      	beq.n	8001d4a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001d56:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	f5ad 6d90 	sub.w	sp, sp, #1152	@ 0x480
 8001d76:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d78:	f001 faf0 	bl	800335c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d7c:	f000 fc9a 	bl	80026b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d80:	f000 fe28 	bl	80029d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d84:	f000 fdfc 	bl	8002980 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001d88:	f000 fd80 	bl	800288c <MX_TIM1_Init>
  MX_I2C1_Init();
 8001d8c:	f000 fd50 	bl	8002830 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001d90:	f000 fcfa 	bl	8002788 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8001d94:	f000 fdca 	bl	800292c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init STM32
//  HAL_Delay(3000);
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8001d98:	2264      	movs	r2, #100	@ 0x64
 8001d9a:	49b5      	ldr	r1, [pc, #724]	@ (8002070 <main+0x300>)
 8001d9c:	48b5      	ldr	r0, [pc, #724]	@ (8002074 <main+0x304>)
 8001d9e:	f004 fedb 	bl	8006b58 <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_TIM_Base_Start(&htim1);
 8001da2:	48b5      	ldr	r0, [pc, #724]	@ (8002078 <main+0x308>)
 8001da4:	f004 fb96 	bl	80064d4 <HAL_TIM_Base_Start>

  // Init custom code
//  Control_IC_begin();

  Latch_IC_begin();
 8001da8:	f7ff f93a 	bl	8001020 <Latch_IC_begin>
  
  //  uint8_t IC_test_data[20] = {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
    // uint8_t IC_test_data[20] = {2,2,2,2,2,2,2,2,2,1,0,2,2,2,2,2,2,2,2,2};
  uint8_t IC_test_data_1[20] = {0,0,2,0,0,0,0,0,2,1,0,2,0,0,0,0,1,0,0,1};  // 0
 8001dac:	4bb3      	ldr	r3, [pc, #716]	@ (800207c <main+0x30c>)
 8001dae:	f507 648a 	add.w	r4, r7, #1104	@ 0x450
 8001db2:	461d      	mov	r5, r3
 8001db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db8:	682b      	ldr	r3, [r5, #0]
 8001dba:	6023      	str	r3, [r4, #0]
  uint8_t IC_test_data_2[20] = {0,0,2,0,0,0,0,0,2,1,0,2,0,0,0,0,0,0,0,1};  // 0
 8001dbc:	4bb0      	ldr	r3, [pc, #704]	@ (8002080 <main+0x310>)
 8001dbe:	f207 443c 	addw	r4, r7, #1084	@ 0x43c
 8001dc2:	461d      	mov	r5, r3
 8001dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc8:	682b      	ldr	r3, [r5, #0]
 8001dca:	6023      	str	r3, [r4, #0]
  uint8_t IC_test_data[20] =   {2,2,2,2,2,2,2,2,2,0,1,2,2,2,2,2,2,2,2,2};
 8001dcc:	4bad      	ldr	r3, [pc, #692]	@ (8002084 <main+0x314>)
 8001dce:	f507 6485 	add.w	r4, r7, #1064	@ 0x428
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd8:	682b      	ldr	r3, [r5, #0]
 8001dda:	6023      	str	r3, [r4, #0]

//  uint8_t IC_test_data[20];
  memset(IC_test_data,2,sizeof(IC_test_data));
 8001ddc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001de0:	2214      	movs	r2, #20
 8001de2:	2102      	movs	r1, #2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f008 fb26 	bl	800a436 <memset>
  WritePin_ICTest(IC_test_data);
 8001dea:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fa66 	bl	80012c0 <WritePin_ICTest>
  TurnOff_short_circuit();
 8001df4:	f7ff fae6 	bl	80013c4 <TurnOff_short_circuit>
  uint8_t data_Ron[20];
  memset(data_Ron,1,sizeof(data_Ron));
 8001df8:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 8001dfc:	2214      	movs	r2, #20
 8001dfe:	2101      	movs	r1, #1
 8001e00:	4618      	mov	r0, r3
 8001e02:	f008 fb18 	bl	800a436 <memset>
  WritePin_Ron(data_Ron);
 8001e06:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff faa2 	bl	8001354 <WritePin_Ron>

  flag_run_test = false;
 8001e10:	4b9d      	ldr	r3, [pc, #628]	@ (8002088 <main+0x318>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
//  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);

  ADS1115_t ADS1115;
  config_reg_t config_reg_ads;
  config_reg_ads.PGA = PGA_6_144;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 33fe 	strb.w	r3, [r7, #1022]	@ 0x3fe
  config_reg_ads.channel = DEFAULT_VALUE_CHANNEL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 33fc 	strb.w	r3, [r7, #1020]	@ 0x3fc
  config_reg_ads.compareMode = DEFAULT_VALUE_COMP_MODE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 3400 	strb.w	r3, [r7, #1024]	@ 0x400
  config_reg_ads.DataRate = DEFAULT_VALUE_DATARATE;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	f887 33fd 	strb.w	r3, [r7, #1021]	@ 0x3fd
  config_reg_ads.latchingMode = DEFAULT_VALUE_COMP_LAT;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 3402 	strb.w	r3, [r7, #1026]	@ 0x402
  config_reg_ads.mode = DEFAULT_VALUE_MODE;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f887 33ff 	strb.w	r3, [r7, #1023]	@ 0x3ff
  config_reg_ads.polarityMode = DEFAULT_VALUE_COMP_POL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 3401 	strb.w	r3, [r7, #1025]	@ 0x401
  config_reg_ads.queueComparator = DEFAULT_VALUE_COMP_QUE;
 8001e40:	2303      	movs	r3, #3
 8001e42:	f887 3403 	strb.w	r3, [r7, #1027]	@ 0x403

  ADS1115.config = &config_reg_ads;
 8001e46:	f507 737f 	add.w	r3, r7, #1020	@ 0x3fc
 8001e4a:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410

  ADS1115_Init(&ADS1115,&hi2c1,ADS1115_READ_ADC_ADDRESS);
 8001e4e:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8001e52:	2248      	movs	r2, #72	@ 0x48
 8001e54:	498d      	ldr	r1, [pc, #564]	@ (800208c <main+0x31c>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f005 fde6 	bl	8007a28 <ADS1115_Init>

//  Screen_begin(&huart2);

  // uint8_t num_case = 8;
  // uint8_t num_pin  = 16;
  uint8_t num_pin_control = 20;
 8001e5c:	2314      	movs	r3, #20
 8001e5e:	f887 3469 	strb.w	r3, [r7, #1129]	@ 0x469
  // uint8_t (*data_control)[20] = malloc(num_case * sizeof(*data_control));

  char * ptr_data_test ;
  uint8_t count_case = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 3473 	strb.w	r3, [r7, #1139]	@ 0x473
//
//  uint8_t data_tx[6] = {'H','E','L','L','O','3'};
  // HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data_tx, &TxMailbox);

#if DEVICE == 1
  isotp_init_link(&CAN_iso, 0x471, can_iso_send_buf , sizeof(can_iso_send_buf)
 8001e68:	23fa      	movs	r3, #250	@ 0xfa
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	4b88      	ldr	r3, [pc, #544]	@ (8002090 <main+0x320>)
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	23fa      	movs	r3, #250	@ 0xfa
 8001e72:	4a88      	ldr	r2, [pc, #544]	@ (8002094 <main+0x324>)
 8001e74:	f240 4171 	movw	r1, #1137	@ 0x471
 8001e78:	4887      	ldr	r0, [pc, #540]	@ (8002098 <main+0x328>)
 8001e7a:	f006 fbb9 	bl	80085f0 <isotp_init_link>
  isotp_init_link(&CAN_iso, 0x474, can_iso_send_buf , sizeof(can_iso_send_buf)
                                , can_iso_recv_buf, sizeof(can_iso_recv_buf));
#endif

  /* start the CAN */
  HAL_CAN_Start(&hcan1);
 8001e7e:	4887      	ldr	r0, [pc, #540]	@ (800209c <main+0x32c>)
 8001e80:	f001 fcde 	bl	8003840 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001e84:	2102      	movs	r1, #2
 8001e86:	4885      	ldr	r0, [pc, #532]	@ (800209c <main+0x32c>)
 8001e88:	f001 ff34 	bl	8003cf4 <HAL_CAN_ActivateNotification>
//      Read_ADC_IC_test(&ADS1115,i,ADC_data);
//      // ADC_DUT1 = ADS1115_single_getdata(&ADS1115, CHANNEL_AIN0_GND);
//    }
//    Read_ADC_IC_test(&ADS1115,channel_read_adc,ADC_data);
//	  HAL_Delay(10);
    if (flag_run_test) {
 8001e8c:	4b7e      	ldr	r3, [pc, #504]	@ (8002088 <main+0x318>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0fb      	beq.n	8001e8c <main+0x11c>
      /* First test short circuit */
      switch (Control_IC_test.cur_case) {
 8001e94:	4b82      	ldr	r3, [pc, #520]	@ (80020a0 <main+0x330>)
 8001e96:	789b      	ldrb	r3, [r3, #2]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	f000 8331 	beq.w	8002500 <main+0x790>
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	f300 83f9 	bgt.w	8002696 <main+0x926>
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <main+0x140>
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	f000 8103 	beq.w	80020b4 <main+0x344>
          total_data_send_can[Control_IC_test.num_pin+4+Control_IC_test.num_case*Control_IC_test.num_pin] = '\0';
          total_data_send_can[Control_IC_test.num_pin+6+Control_IC_test.num_case*Control_IC_test.num_pin+Control_IC_test.num_case] = '\0';
          isotp_send(&CAN_iso,total_data_send_can,(Control_IC_test.num_pin + 6 + Control_IC_test.num_case*Control_IC_test.num_pin + Control_IC_test.num_case));
          flag_run_test = false;
        } break;
        default : break;
 8001eae:	e3f2      	b.n	8002696 <main+0x926>
          Control_IC_test.data_control_testing = &Data_test_short_circuit;
 8001eb0:	4b7b      	ldr	r3, [pc, #492]	@ (80020a0 <main+0x330>)
 8001eb2:	4a7c      	ldr	r2, [pc, #496]	@ (80020a4 <main+0x334>)
 8001eb4:	605a      	str	r2, [r3, #4]
          Control_IC_test.isShort = 0;
 8001eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80020a0 <main+0x330>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
          reset_TXS();
 8001ebc:	f7ff f8ce 	bl	800105c <reset_TXS>
          memset(Control_IC_test.result_short_pin,1,num_pin_control);
 8001ec0:	f897 3469 	ldrb.w	r3, [r7, #1129]	@ 0x469
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	4877      	ldr	r0, [pc, #476]	@ (80020a8 <main+0x338>)
 8001eca:	f008 fab4 	bl	800a436 <memset>
          WritePin_ICTest(Control_IC_test.data_control_testing);
 8001ece:	4b74      	ldr	r3, [pc, #464]	@ (80020a0 <main+0x330>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f9f4 	bl	80012c0 <WritePin_ICTest>
          TurnOn_short_circuit();
 8001ed8:	f7ff fa50 	bl	800137c <TurnOn_short_circuit>
          Control_IC_test.result_short_circuit = malloc(20 * sizeof(float));
 8001edc:	2050      	movs	r0, #80	@ 0x50
 8001ede:	f006 fc4d 	bl	800877c <malloc>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b6e      	ldr	r3, [pc, #440]	@ (80020a0 <main+0x330>)
 8001ee8:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
          for (uint8_t i = 0; i < 20; i++) {
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 3472 	strb.w	r3, [r7, #1138]	@ 0x472
 8001ef2:	e038      	b.n	8001f66 <main+0x1f6>
            Read_ADC_IC_test(&ADS1115,i,Control_IC_test.result_short_circuit);
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80020a0 <main+0x330>)
 8001ef6:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8001efa:	f897 1472 	ldrb.w	r1, [r7, #1138]	@ 0x472
 8001efe:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fb66 	bl	80015d4 <Read_ADC_IC_test>
            if (Control_IC_test.result_short_circuit[i] < 2.0f || Control_IC_test.result_short_circuit[i] > 2.8f) {
 8001f08:	4b65      	ldr	r3, [pc, #404]	@ (80020a0 <main+0x330>)
 8001f0a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8001f0e:	f897 3472 	ldrb.w	r3, [r7, #1138]	@ 0x472
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	edd3 7a00 	vldr	s15, [r3]
 8001f1a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f26:	d40f      	bmi.n	8001f48 <main+0x1d8>
 8001f28:	4b5d      	ldr	r3, [pc, #372]	@ (80020a0 <main+0x330>)
 8001f2a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8001f2e:	f897 3472 	ldrb.w	r3, [r7, #1138]	@ 0x472
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80020ac <main+0x33c>
 8001f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	dd09      	ble.n	8001f5c <main+0x1ec>
              Control_IC_test.result_short_pin[i] = 0;
 8001f48:	f897 3472 	ldrb.w	r3, [r7, #1138]	@ 0x472
 8001f4c:	4a54      	ldr	r2, [pc, #336]	@ (80020a0 <main+0x330>)
 8001f4e:	4413      	add	r3, r2
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 227c 	strb.w	r2, [r3, #636]	@ 0x27c
              Control_IC_test.isShort = 1;
 8001f56:	4b52      	ldr	r3, [pc, #328]	@ (80020a0 <main+0x330>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
          for (uint8_t i = 0; i < 20; i++) {
 8001f5c:	f897 3472 	ldrb.w	r3, [r7, #1138]	@ 0x472
 8001f60:	3301      	adds	r3, #1
 8001f62:	f887 3472 	strb.w	r3, [r7, #1138]	@ 0x472
 8001f66:	f897 3472 	ldrb.w	r3, [r7, #1138]	@ 0x472
 8001f6a:	2b13      	cmp	r3, #19
 8001f6c:	d9c2      	bls.n	8001ef4 <main+0x184>
          memcpy(ADC_data,Control_IC_test.result_short_circuit,20*4);
 8001f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80020a0 <main+0x330>)
 8001f70:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8001f74:	2250      	movs	r2, #80	@ 0x50
 8001f76:	4619      	mov	r1, r3
 8001f78:	484d      	ldr	r0, [pc, #308]	@ (80020b0 <main+0x340>)
 8001f7a:	f008 fb5a 	bl	800a632 <memcpy>
          if (Control_IC_test.num_pin == 18) {
 8001f7e:	4b48      	ldr	r3, [pc, #288]	@ (80020a0 <main+0x330>)
 8001f80:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 8001f84:	2b12      	cmp	r3, #18
 8001f86:	d11e      	bne.n	8001fc6 <main+0x256>
              for (uint8_t i = 9; i < Control_IC_test.num_pin; i++) {
 8001f88:	2309      	movs	r3, #9
 8001f8a:	f887 3471 	strb.w	r3, [r7, #1137]	@ 0x471
 8001f8e:	e012      	b.n	8001fb6 <main+0x246>
                Control_IC_test.result_short_pin[i] = Control_IC_test.result_short_pin[i + 2];
 8001f90:	f897 3471 	ldrb.w	r3, [r7, #1137]	@ 0x471
 8001f94:	1c9a      	adds	r2, r3, #2
 8001f96:	f897 3471 	ldrb.w	r3, [r7, #1137]	@ 0x471
 8001f9a:	4941      	ldr	r1, [pc, #260]	@ (80020a0 <main+0x330>)
 8001f9c:	440a      	add	r2, r1
 8001f9e:	f892 127c 	ldrb.w	r1, [r2, #636]	@ 0x27c
 8001fa2:	4a3f      	ldr	r2, [pc, #252]	@ (80020a0 <main+0x330>)
 8001fa4:	4413      	add	r3, r2
 8001fa6:	460a      	mov	r2, r1
 8001fa8:	f883 227c 	strb.w	r2, [r3, #636]	@ 0x27c
              for (uint8_t i = 9; i < Control_IC_test.num_pin; i++) {
 8001fac:	f897 3471 	ldrb.w	r3, [r7, #1137]	@ 0x471
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f887 3471 	strb.w	r3, [r7, #1137]	@ 0x471
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80020a0 <main+0x330>)
 8001fb8:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 8001fbc:	f897 2471 	ldrb.w	r2, [r7, #1137]	@ 0x471
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d3e5      	bcc.n	8001f90 <main+0x220>
 8001fc4:	e046      	b.n	8002054 <main+0x2e4>
          } else if (Control_IC_test.num_pin == 16) {
 8001fc6:	4b36      	ldr	r3, [pc, #216]	@ (80020a0 <main+0x330>)
 8001fc8:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d11e      	bne.n	800200e <main+0x29e>
              for (uint8_t i = 8; i < Control_IC_test.num_pin; i++) {
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	f887 3470 	strb.w	r3, [r7, #1136]	@ 0x470
 8001fd6:	e012      	b.n	8001ffe <main+0x28e>
                Control_IC_test.result_short_pin[i] = Control_IC_test.result_short_pin[i + 4];
 8001fd8:	f897 3470 	ldrb.w	r3, [r7, #1136]	@ 0x470
 8001fdc:	1d1a      	adds	r2, r3, #4
 8001fde:	f897 3470 	ldrb.w	r3, [r7, #1136]	@ 0x470
 8001fe2:	492f      	ldr	r1, [pc, #188]	@ (80020a0 <main+0x330>)
 8001fe4:	440a      	add	r2, r1
 8001fe6:	f892 127c 	ldrb.w	r1, [r2, #636]	@ 0x27c
 8001fea:	4a2d      	ldr	r2, [pc, #180]	@ (80020a0 <main+0x330>)
 8001fec:	4413      	add	r3, r2
 8001fee:	460a      	mov	r2, r1
 8001ff0:	f883 227c 	strb.w	r2, [r3, #636]	@ 0x27c
              for (uint8_t i = 8; i < Control_IC_test.num_pin; i++) {
 8001ff4:	f897 3470 	ldrb.w	r3, [r7, #1136]	@ 0x470
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f887 3470 	strb.w	r3, [r7, #1136]	@ 0x470
 8001ffe:	4b28      	ldr	r3, [pc, #160]	@ (80020a0 <main+0x330>)
 8002000:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 8002004:	f897 2470 	ldrb.w	r2, [r7, #1136]	@ 0x470
 8002008:	429a      	cmp	r2, r3
 800200a:	d3e5      	bcc.n	8001fd8 <main+0x268>
 800200c:	e022      	b.n	8002054 <main+0x2e4>
          } else if (Control_IC_test.num_pin == 14) {
 800200e:	4b24      	ldr	r3, [pc, #144]	@ (80020a0 <main+0x330>)
 8002010:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 8002014:	2b0e      	cmp	r3, #14
 8002016:	d11d      	bne.n	8002054 <main+0x2e4>
              for (uint8_t i = 7; i < Control_IC_test.num_pin; i++) {
 8002018:	2307      	movs	r3, #7
 800201a:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
 800201e:	e012      	b.n	8002046 <main+0x2d6>
                Control_IC_test.result_short_pin[i] = Control_IC_test.result_short_pin[i + 6];
 8002020:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8002024:	1d9a      	adds	r2, r3, #6
 8002026:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800202a:	491d      	ldr	r1, [pc, #116]	@ (80020a0 <main+0x330>)
 800202c:	440a      	add	r2, r1
 800202e:	f892 127c 	ldrb.w	r1, [r2, #636]	@ 0x27c
 8002032:	4a1b      	ldr	r2, [pc, #108]	@ (80020a0 <main+0x330>)
 8002034:	4413      	add	r3, r2
 8002036:	460a      	mov	r2, r1
 8002038:	f883 227c 	strb.w	r2, [r3, #636]	@ 0x27c
              for (uint8_t i = 7; i < Control_IC_test.num_pin; i++) {
 800203c:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8002040:	3301      	adds	r3, #1
 8002042:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
 8002046:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <main+0x330>)
 8002048:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 800204c:	f897 246f 	ldrb.w	r2, [r7, #1135]	@ 0x46f
 8002050:	429a      	cmp	r2, r3
 8002052:	d3e5      	bcc.n	8002020 <main+0x2b0>
          TurnOff_short_circuit();
 8002054:	f7ff f9b6 	bl	80013c4 <TurnOff_short_circuit>
          if (Control_IC_test.isShort) {
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <main+0x330>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <main+0x2f8>
            Control_IC_test.cur_case = FINISH_TEST;
 8002060:	4b0f      	ldr	r3, [pc, #60]	@ (80020a0 <main+0x330>)
 8002062:	2202      	movs	r2, #2
 8002064:	709a      	strb	r2, [r3, #2]
        } break;
 8002066:	e317      	b.n	8002698 <main+0x928>
            Control_IC_test.cur_case = TEST_FUNCTION;
 8002068:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <main+0x330>)
 800206a:	2201      	movs	r2, #1
 800206c:	709a      	strb	r2, [r3, #2]
        } break;
 800206e:	e313      	b.n	8002698 <main+0x928>
 8002070:	20000510 	.word	0x20000510
 8002074:	200004c8 	.word	0x200004c8
 8002078:	20000438 	.word	0x20000438
 800207c:	0800cefc 	.word	0x0800cefc
 8002080:	0800cf10 	.word	0x0800cf10
 8002084:	0800cf24 	.word	0x0800cf24
 8002088:	20000cc4 	.word	0x20000cc4
 800208c:	200003e4 	.word	0x200003e4
 8002090:	20000644 	.word	0x20000644
 8002094:	20000740 	.word	0x20000740
 8002098:	20000604 	.word	0x20000604
 800209c:	200003bc 	.word	0x200003bc
 80020a0:	2000083c 	.word	0x2000083c
 80020a4:	20000168 	.word	0x20000168
 80020a8:	20000ab8 	.word	0x20000ab8
 80020ac:	40333333 	.word	0x40333333
 80020b0:	200005b4 	.word	0x200005b4
          uint8_t copy_buf[500] = {0};
 80020b4:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 80020b8:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 80020bc:	4618      	mov	r0, r3
 80020be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80020c2:	461a      	mov	r2, r3
 80020c4:	2100      	movs	r1, #0
 80020c6:	f008 f9b6 	bl	800a436 <memset>
          bool is_clock_transition = false;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f887 3468 	strb.w	r3, [r7, #1128]	@ 0x468
          memset(Control_IC_test.data_control_first_state,0,sizeof(Control_IC_test.data_control_first_state));
 80020d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020d4:	2100      	movs	r1, #0
 80020d6:	48d5      	ldr	r0, [pc, #852]	@ (800242c <main+0x6bc>)
 80020d8:	f008 f9ad 	bl	800a436 <memset>
          memset(Control_IC_test.data_control_second_state,0,sizeof(Control_IC_test.data_control_second_state));
 80020dc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020e0:	2100      	movs	r1, #0
 80020e2:	48d3      	ldr	r0, [pc, #844]	@ (8002430 <main+0x6c0>)
 80020e4:	f008 f9a7 	bl	800a436 <memset>
          Control_IC_test.data_control_testing = malloc(Control_IC_test.num_case * num_pin_control);
 80020e8:	4bd2      	ldr	r3, [pc, #840]	@ (8002434 <main+0x6c4>)
 80020ea:	f893 3486 	ldrb.w	r3, [r3, #1158]	@ 0x486
 80020ee:	461a      	mov	r2, r3
 80020f0:	f897 3469 	ldrb.w	r3, [r7, #1129]	@ 0x469
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	f006 fb3f 	bl	800877c <malloc>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	4bcc      	ldr	r3, [pc, #816]	@ (8002434 <main+0x6c4>)
 8002104:	605a      	str	r2, [r3, #4]
          memset(Control_IC_test.data_control_testing,0,Control_IC_test.num_case * num_pin_control);
 8002106:	4bcb      	ldr	r3, [pc, #812]	@ (8002434 <main+0x6c4>)
 8002108:	6858      	ldr	r0, [r3, #4]
 800210a:	4bca      	ldr	r3, [pc, #808]	@ (8002434 <main+0x6c4>)
 800210c:	f893 3486 	ldrb.w	r3, [r3, #1158]	@ 0x486
 8002110:	461a      	mov	r2, r3
 8002112:	f897 3469 	ldrb.w	r3, [r7, #1129]	@ 0x469
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	461a      	mov	r2, r3
 800211c:	2100      	movs	r1, #0
 800211e:	f008 f98a 	bl	800a436 <memset>
          memcpy(copy_buf,Control_IC_test.data_test,Control_IC_test.data_test_len);
 8002122:	4bc4      	ldr	r3, [pc, #784]	@ (8002434 <main+0x6c4>)
 8002124:	f8b3 3484 	ldrh.w	r3, [r3, #1156]	@ 0x484
 8002128:	461a      	mov	r2, r3
 800212a:	463b      	mov	r3, r7
 800212c:	49c2      	ldr	r1, [pc, #776]	@ (8002438 <main+0x6c8>)
 800212e:	4618      	mov	r0, r3
 8002130:	f008 fa7f 	bl	800a632 <memcpy>
          count_case = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3473 	strb.w	r3, [r7, #1139]	@ 0x473
          ptr_data_test = strtok(copy_buf,"\n");
 800213a:	463b      	mov	r3, r7
 800213c:	49bf      	ldr	r1, [pc, #764]	@ (800243c <main+0x6cc>)
 800213e:	4618      	mov	r0, r3
 8002140:	f008 f994 	bl	800a46c <strtok>
 8002144:	f8c7 0474 	str.w	r0, [r7, #1140]	@ 0x474
          is_clock_transition = has_clock_transition(Control_IC_test.num_pin,ptr_data_test);
 8002148:	4bba      	ldr	r3, [pc, #744]	@ (8002434 <main+0x6c4>)
 800214a:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 800214e:	f8d7 1474 	ldr.w	r1, [r7, #1140]	@ 0x474
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fc31 	bl	80019ba <has_clock_transition>
 8002158:	4603      	mov	r3, r0
 800215a:	f887 3468 	strb.w	r3, [r7, #1128]	@ 0x468
          while (ptr_data_test != NULL) { 
 800215e:	e044      	b.n	80021ea <main+0x47a>
            if (is_clock_transition) {
 8002160:	f897 3468 	ldrb.w	r3, [r7, #1128]	@ 0x468
 8002164:	2b00      	cmp	r3, #0
 8002166:	d024      	beq.n	80021b2 <main+0x442>
              convert_data_test_first_state(Control_IC_test.num_pin,ptr_data_test,&Control_IC_test.data_control_first_state[num_pin_control * count_case]);
 8002168:	4bb2      	ldr	r3, [pc, #712]	@ (8002434 <main+0x6c4>)
 800216a:	f893 0487 	ldrb.w	r0, [r3, #1159]	@ 0x487
 800216e:	f897 3469 	ldrb.w	r3, [r7, #1129]	@ 0x469
 8002172:	f897 2473 	ldrb.w	r2, [r7, #1139]	@ 0x473
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	3308      	adds	r3, #8
 800217c:	4aad      	ldr	r2, [pc, #692]	@ (8002434 <main+0x6c4>)
 800217e:	4413      	add	r3, r2
 8002180:	461a      	mov	r2, r3
 8002182:	f8d7 1474 	ldr.w	r1, [r7, #1140]	@ 0x474
 8002186:	f7ff fc3d 	bl	8001a04 <convert_data_test_first_state>
              convert_data_test_second_state(Control_IC_test.num_pin,ptr_data_test,&Control_IC_test.data_control_second_state[num_pin_control * count_case]);
 800218a:	4baa      	ldr	r3, [pc, #680]	@ (8002434 <main+0x6c4>)
 800218c:	f893 0487 	ldrb.w	r0, [r3, #1159]	@ 0x487
 8002190:	f897 3469 	ldrb.w	r3, [r7, #1129]	@ 0x469
 8002194:	f897 2473 	ldrb.w	r2, [r7, #1139]	@ 0x473
 8002198:	fb02 f303 	mul.w	r3, r2, r3
 800219c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80021a0:	4aa4      	ldr	r2, [pc, #656]	@ (8002434 <main+0x6c4>)
 80021a2:	4413      	add	r3, r2
 80021a4:	3304      	adds	r3, #4
 80021a6:	461a      	mov	r2, r3
 80021a8:	f8d7 1474 	ldr.w	r1, [r7, #1140]	@ 0x474
 80021ac:	f7ff fcf1 	bl	8001b92 <convert_data_test_second_state>
 80021b0:	e010      	b.n	80021d4 <main+0x464>
              convert_data_test(Control_IC_test.num_pin,ptr_data_test,&Control_IC_test.data_control_testing[num_pin_control * count_case]);
 80021b2:	4ba0      	ldr	r3, [pc, #640]	@ (8002434 <main+0x6c4>)
 80021b4:	f893 0487 	ldrb.w	r0, [r3, #1159]	@ 0x487
 80021b8:	4b9e      	ldr	r3, [pc, #632]	@ (8002434 <main+0x6c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f897 2469 	ldrb.w	r2, [r7, #1129]	@ 0x469
 80021c0:	f897 1473 	ldrb.w	r1, [r7, #1139]	@ 0x473
 80021c4:	fb01 f202 	mul.w	r2, r1, r2
 80021c8:	4413      	add	r3, r2
 80021ca:	461a      	mov	r2, r3
 80021cc:	f8d7 1474 	ldr.w	r1, [r7, #1140]	@ 0x474
 80021d0:	f7ff fb54 	bl	800187c <convert_data_test>
            count_case++;
 80021d4:	f897 3473 	ldrb.w	r3, [r7, #1139]	@ 0x473
 80021d8:	3301      	adds	r3, #1
 80021da:	f887 3473 	strb.w	r3, [r7, #1139]	@ 0x473
            ptr_data_test = strtok(NULL,"\n"); /* go to next case test data */
 80021de:	4997      	ldr	r1, [pc, #604]	@ (800243c <main+0x6cc>)
 80021e0:	2000      	movs	r0, #0
 80021e2:	f008 f943 	bl	800a46c <strtok>
 80021e6:	f8c7 0474 	str.w	r0, [r7, #1140]	@ 0x474
          while (ptr_data_test != NULL) { 
 80021ea:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1b6      	bne.n	8002160 <main+0x3f0>
          TurnOff_short_circuit();
 80021f2:	f7ff f8e7 	bl	80013c4 <TurnOff_short_circuit>
          Control_IC_test.result_test_function = malloc(Control_IC_test.num_case * Control_IC_test.num_pin);
 80021f6:	4b8f      	ldr	r3, [pc, #572]	@ (8002434 <main+0x6c4>)
 80021f8:	f893 3486 	ldrb.w	r3, [r3, #1158]	@ 0x486
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b8d      	ldr	r3, [pc, #564]	@ (8002434 <main+0x6c4>)
 8002200:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	4618      	mov	r0, r3
 800220a:	f006 fab7 	bl	800877c <malloc>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	4b88      	ldr	r3, [pc, #544]	@ (8002434 <main+0x6c4>)
 8002214:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
          memset(Control_IC_test.result_test_function,0,Control_IC_test.num_case * Control_IC_test.num_pin);
 8002218:	4b86      	ldr	r3, [pc, #536]	@ (8002434 <main+0x6c4>)
 800221a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800221e:	4a85      	ldr	r2, [pc, #532]	@ (8002434 <main+0x6c4>)
 8002220:	f892 2486 	ldrb.w	r2, [r2, #1158]	@ 0x486
 8002224:	4611      	mov	r1, r2
 8002226:	4a83      	ldr	r2, [pc, #524]	@ (8002434 <main+0x6c4>)
 8002228:	f892 2487 	ldrb.w	r2, [r2, #1159]	@ 0x487
 800222c:	fb01 f202 	mul.w	r2, r1, r2
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f008 f8ff 	bl	800a436 <memset>
          count_case = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	f887 3473 	strb.w	r3, [r7, #1139]	@ 0x473
          memcpy(copy_buf,Control_IC_test.data_test,Control_IC_test.data_test_len);
 800223e:	4b7d      	ldr	r3, [pc, #500]	@ (8002434 <main+0x6c4>)
 8002240:	f8b3 3484 	ldrh.w	r3, [r3, #1156]	@ 0x484
 8002244:	461a      	mov	r2, r3
 8002246:	463b      	mov	r3, r7
 8002248:	497b      	ldr	r1, [pc, #492]	@ (8002438 <main+0x6c8>)
 800224a:	4618      	mov	r0, r3
 800224c:	f008 f9f1 	bl	800a632 <memcpy>
          ptr_data_test = strtok(copy_buf,"\n");
 8002250:	463b      	mov	r3, r7
 8002252:	497a      	ldr	r1, [pc, #488]	@ (800243c <main+0x6cc>)
 8002254:	4618      	mov	r0, r3
 8002256:	f008 f909 	bl	800a46c <strtok>
 800225a:	f8c7 0474 	str.w	r0, [r7, #1140]	@ 0x474
          while (count_case < Control_IC_test.num_case) {
 800225e:	e0a6      	b.n	80023ae <main+0x63e>
            reset_TXS();
 8002260:	f7fe fefc 	bl	800105c <reset_TXS>
            if (is_clock_transition) {
 8002264:	f897 3468 	ldrb.w	r3, [r7, #1128]	@ 0x468
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01e      	beq.n	80022aa <main+0x53a>
              WritePin_ICTest(Control_IC_test.data_control_first_state + (num_pin_control * count_case));
 800226c:	f897 3469 	ldrb.w	r3, [r7, #1129]	@ 0x469
 8002270:	f897 2473 	ldrb.w	r2, [r7, #1139]	@ 0x473
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	461a      	mov	r2, r3
 800227a:	4b6c      	ldr	r3, [pc, #432]	@ (800242c <main+0x6bc>)
 800227c:	4413      	add	r3, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff f81e 	bl	80012c0 <WritePin_ICTest>
              HAL_Delay(10);
 8002284:	200a      	movs	r0, #10
 8002286:	f001 f8db 	bl	8003440 <HAL_Delay>
              WritePin_ICTest(Control_IC_test.data_control_second_state + (num_pin_control * count_case));
 800228a:	f897 3469 	ldrb.w	r3, [r7, #1129]	@ 0x469
 800228e:	f897 2473 	ldrb.w	r2, [r7, #1139]	@ 0x473
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	461a      	mov	r2, r3
 8002298:	4b65      	ldr	r3, [pc, #404]	@ (8002430 <main+0x6c0>)
 800229a:	4413      	add	r3, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff f80f 	bl	80012c0 <WritePin_ICTest>
              HAL_Delay(10);
 80022a2:	200a      	movs	r0, #10
 80022a4:	f001 f8cc 	bl	8003440 <HAL_Delay>
 80022a8:	e021      	b.n	80022ee <main+0x57e>
              WritePin_ICTest(Control_IC_test.data_control_testing + (num_pin_control * count_case));
 80022aa:	4b62      	ldr	r3, [pc, #392]	@ (8002434 <main+0x6c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f897 2469 	ldrb.w	r2, [r7, #1129]	@ 0x469
 80022b2:	f897 1473 	ldrb.w	r1, [r7, #1139]	@ 0x473
 80022b6:	fb01 f202 	mul.w	r2, r1, r2
 80022ba:	4413      	add	r3, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe ffff 	bl	80012c0 <WritePin_ICTest>
              memcpy(buffer,Control_IC_test.data_control_testing + (num_pin_control * count_case),20);
 80022c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002434 <main+0x6c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f897 2469 	ldrb.w	r2, [r7, #1129]	@ 0x469
 80022ca:	f897 1473 	ldrb.w	r1, [r7, #1139]	@ 0x473
 80022ce:	fb01 f202 	mul.w	r2, r1, r2
 80022d2:	4413      	add	r3, r2
 80022d4:	f507 747a 	add.w	r4, r7, #1000	@ 0x3e8
 80022d8:	461d      	mov	r5, r3
 80022da:	6828      	ldr	r0, [r5, #0]
 80022dc:	6869      	ldr	r1, [r5, #4]
 80022de:	68aa      	ldr	r2, [r5, #8]
 80022e0:	68eb      	ldr	r3, [r5, #12]
 80022e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e4:	6928      	ldr	r0, [r5, #16]
 80022e6:	6020      	str	r0, [r4, #0]
              HAL_Delay(10);
 80022e8:	200a      	movs	r0, #10
 80022ea:	f001 f8a9 	bl	8003440 <HAL_Delay>
            ReadPin_IC_test(Control_IC_test.result_test_function + (Control_IC_test.num_pin * count_case),Control_IC_test.num_pin);
 80022ee:	4b51      	ldr	r3, [pc, #324]	@ (8002434 <main+0x6c4>)
 80022f0:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80022f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002434 <main+0x6c4>)
 80022f6:	f892 2487 	ldrb.w	r2, [r2, #1159]	@ 0x487
 80022fa:	4611      	mov	r1, r2
 80022fc:	f897 2473 	ldrb.w	r2, [r7, #1139]	@ 0x473
 8002300:	fb01 f202 	mul.w	r2, r1, r2
 8002304:	4413      	add	r3, r2
 8002306:	4a4b      	ldr	r2, [pc, #300]	@ (8002434 <main+0x6c4>)
 8002308:	f892 2487 	ldrb.w	r2, [r2, #1159]	@ 0x487
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f87c 	bl	800140c <ReadPin_IC_test>
            if (ptr_data_test != NULL) {
 8002314:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 8002318:	2b00      	cmp	r3, #0
 800231a:	d039      	beq.n	8002390 <main+0x620>
              for (uint8_t i = 0; i < Control_IC_test.num_pin; i++) {
 800231c:	2300      	movs	r3, #0
 800231e:	f887 346e 	strb.w	r3, [r7, #1134]	@ 0x46e
 8002322:	e02e      	b.n	8002382 <main+0x612>
                uint8_t *pdata = &Control_IC_test.result_test_function[(Control_IC_test.num_pin * count_case) + i];
 8002324:	4b43      	ldr	r3, [pc, #268]	@ (8002434 <main+0x6c4>)
 8002326:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800232a:	4a42      	ldr	r2, [pc, #264]	@ (8002434 <main+0x6c4>)
 800232c:	f892 2487 	ldrb.w	r2, [r2, #1159]	@ 0x487
 8002330:	4611      	mov	r1, r2
 8002332:	f897 2473 	ldrb.w	r2, [r7, #1139]	@ 0x473
 8002336:	fb02 f101 	mul.w	r1, r2, r1
 800233a:	f897 246e 	ldrb.w	r2, [r7, #1134]	@ 0x46e
 800233e:	440a      	add	r2, r1
 8002340:	4413      	add	r3, r2
 8002342:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
                if (ptr_data_test[i] == 'U') {
 8002346:	f897 346e 	ldrb.w	r3, [r7, #1134]	@ 0x46e
 800234a:	f8d7 2474 	ldr.w	r2, [r7, #1140]	@ 0x474
 800234e:	4413      	add	r3, r2
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b55      	cmp	r3, #85	@ 0x55
 8002354:	d104      	bne.n	8002360 <main+0x5f0>
                  *pdata = 3;
 8002356:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800235a:	2203      	movs	r2, #3
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	e00b      	b.n	8002378 <main+0x608>
                } else if (ptr_data_test[i] == 'D') {
 8002360:	f897 346e 	ldrb.w	r3, [r7, #1134]	@ 0x46e
 8002364:	f8d7 2474 	ldr.w	r2, [r7, #1140]	@ 0x474
 8002368:	4413      	add	r3, r2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b44      	cmp	r3, #68	@ 0x44
 800236e:	d103      	bne.n	8002378 <main+0x608>
                  *pdata = 4;
 8002370:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8002374:	2204      	movs	r2, #4
 8002376:	701a      	strb	r2, [r3, #0]
              for (uint8_t i = 0; i < Control_IC_test.num_pin; i++) {
 8002378:	f897 346e 	ldrb.w	r3, [r7, #1134]	@ 0x46e
 800237c:	3301      	adds	r3, #1
 800237e:	f887 346e 	strb.w	r3, [r7, #1134]	@ 0x46e
 8002382:	4b2c      	ldr	r3, [pc, #176]	@ (8002434 <main+0x6c4>)
 8002384:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 8002388:	f897 246e 	ldrb.w	r2, [r7, #1134]	@ 0x46e
 800238c:	429a      	cmp	r2, r3
 800238e:	d3c9      	bcc.n	8002324 <main+0x5b4>
            count_case++;
 8002390:	f897 3473 	ldrb.w	r3, [r7, #1139]	@ 0x473
 8002394:	3301      	adds	r3, #1
 8002396:	f887 3473 	strb.w	r3, [r7, #1139]	@ 0x473
            if (ptr_data_test != NULL) {
 800239a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <main+0x63e>
              ptr_data_test = strtok(NULL,"\n");
 80023a2:	4926      	ldr	r1, [pc, #152]	@ (800243c <main+0x6cc>)
 80023a4:	2000      	movs	r0, #0
 80023a6:	f008 f861 	bl	800a46c <strtok>
 80023aa:	f8c7 0474 	str.w	r0, [r7, #1140]	@ 0x474
          while (count_case < Control_IC_test.num_case) {
 80023ae:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <main+0x6c4>)
 80023b0:	f893 3486 	ldrb.w	r3, [r3, #1158]	@ 0x486
 80023b4:	f897 2473 	ldrb.w	r2, [r7, #1139]	@ 0x473
 80023b8:	429a      	cmp	r2, r3
 80023ba:	f4ff af51 	bcc.w	8002260 <main+0x4f0>
          memcpy(can_send_result_test,Control_IC_test.result_test_function,Control_IC_test.num_pin * Control_IC_test.num_case);
 80023be:	4b1d      	ldr	r3, [pc, #116]	@ (8002434 <main+0x6c4>)
 80023c0:	f8d3 1264 	ldr.w	r1, [r3, #612]	@ 0x264
 80023c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <main+0x6c4>)
 80023c6:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b19      	ldr	r3, [pc, #100]	@ (8002434 <main+0x6c4>)
 80023ce:	f893 3486 	ldrb.w	r3, [r3, #1158]	@ 0x486
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	f507 73fa 	add.w	r3, r7, #500	@ 0x1f4
 80023dc:	4618      	mov	r0, r3
 80023de:	f008 f928 	bl	800a632 <memcpy>
          memset(Control_IC_test.result_case,0,sizeof(Control_IC_test.result_case));
 80023e2:	2214      	movs	r2, #20
 80023e4:	2100      	movs	r1, #0
 80023e6:	4816      	ldr	r0, [pc, #88]	@ (8002440 <main+0x6d0>)
 80023e8:	f008 f825 	bl	800a436 <memset>
          memset(Control_IC_test.result_case,1,Control_IC_test.num_case);
 80023ec:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <main+0x6c4>)
 80023ee:	f893 3486 	ldrb.w	r3, [r3, #1158]	@ 0x486
 80023f2:	461a      	mov	r2, r3
 80023f4:	2101      	movs	r1, #1
 80023f6:	4812      	ldr	r0, [pc, #72]	@ (8002440 <main+0x6d0>)
 80023f8:	f008 f81d 	bl	800a436 <memset>
          count_case = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f887 3473 	strb.w	r3, [r7, #1139]	@ 0x473
          memcpy(copy_buf,Control_IC_test.data_test,Control_IC_test.data_test_len);
 8002402:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <main+0x6c4>)
 8002404:	f8b3 3484 	ldrh.w	r3, [r3, #1156]	@ 0x484
 8002408:	461a      	mov	r2, r3
 800240a:	463b      	mov	r3, r7
 800240c:	490a      	ldr	r1, [pc, #40]	@ (8002438 <main+0x6c8>)
 800240e:	4618      	mov	r0, r3
 8002410:	f008 f90f 	bl	800a632 <memcpy>
          ptr_data_test = strtok(copy_buf,"\n");
 8002414:	463b      	mov	r3, r7
 8002416:	4909      	ldr	r1, [pc, #36]	@ (800243c <main+0x6cc>)
 8002418:	4618      	mov	r0, r3
 800241a:	f008 f827 	bl	800a46c <strtok>
 800241e:	f8c7 0474 	str.w	r0, [r7, #1140]	@ 0x474
          while (ptr_data_test != NULL) {
 8002422:	e05b      	b.n	80024dc <main+0x76c>
            for (uint8_t pin = 0; pin < Control_IC_test.num_pin; pin++) {
 8002424:	2300      	movs	r3, #0
 8002426:	f887 346d 	strb.w	r3, [r7, #1133]	@ 0x46d
 800242a:	e045      	b.n	80024b8 <main+0x748>
 800242c:	20000844 	.word	0x20000844
 8002430:	20000970 	.word	0x20000970
 8002434:	2000083c 	.word	0x2000083c
 8002438:	20000acc 	.word	0x20000acc
 800243c:	0800cef8 	.word	0x0800cef8
 8002440:	20000aa4 	.word	0x20000aa4
              if (ptr_data_test[pin] == 'U' || ptr_data_test[pin] == 'D') {
 8002444:	f897 346d 	ldrb.w	r3, [r7, #1133]	@ 0x46d
 8002448:	f8d7 2474 	ldr.w	r2, [r7, #1140]	@ 0x474
 800244c:	4413      	add	r3, r2
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b55      	cmp	r3, #85	@ 0x55
 8002452:	d02b      	beq.n	80024ac <main+0x73c>
 8002454:	f897 346d 	ldrb.w	r3, [r7, #1133]	@ 0x46d
 8002458:	f8d7 2474 	ldr.w	r2, [r7, #1140]	@ 0x474
 800245c:	4413      	add	r3, r2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b44      	cmp	r3, #68	@ 0x44
 8002462:	d023      	beq.n	80024ac <main+0x73c>
              if (convert_data_compare(ptr_data_test[pin]) != can_send_result_test[pin + (count_case * Control_IC_test.num_pin)]) {
 8002464:	f897 346d 	ldrb.w	r3, [r7, #1133]	@ 0x46d
 8002468:	f8d7 2474 	ldr.w	r2, [r7, #1140]	@ 0x474
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff f935 	bl	80016e0 <convert_data_compare>
 8002476:	4603      	mov	r3, r0
 8002478:	4618      	mov	r0, r3
 800247a:	f897 246d 	ldrb.w	r2, [r7, #1133]	@ 0x46d
 800247e:	f897 3473 	ldrb.w	r3, [r7, #1139]	@ 0x473
 8002482:	4986      	ldr	r1, [pc, #536]	@ (800269c <main+0x92c>)
 8002484:	f891 1487 	ldrb.w	r1, [r1, #1159]	@ 0x487
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	f507 628f 	add.w	r2, r7, #1144	@ 0x478
 8002492:	f5a2 7221 	sub.w	r2, r2, #644	@ 0x284
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	4298      	cmp	r0, r3
 800249a:	d008      	beq.n	80024ae <main+0x73e>
                Control_IC_test.result_case[count_case] = 0;
 800249c:	f897 3473 	ldrb.w	r3, [r7, #1139]	@ 0x473
 80024a0:	4a7e      	ldr	r2, [pc, #504]	@ (800269c <main+0x92c>)
 80024a2:	4413      	add	r3, r2
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2268 	strb.w	r2, [r3, #616]	@ 0x268
                break;
 80024aa:	e00c      	b.n	80024c6 <main+0x756>
                continue;
 80024ac:	bf00      	nop
            for (uint8_t pin = 0; pin < Control_IC_test.num_pin; pin++) {
 80024ae:	f897 346d 	ldrb.w	r3, [r7, #1133]	@ 0x46d
 80024b2:	3301      	adds	r3, #1
 80024b4:	f887 346d 	strb.w	r3, [r7, #1133]	@ 0x46d
 80024b8:	4b78      	ldr	r3, [pc, #480]	@ (800269c <main+0x92c>)
 80024ba:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 80024be:	f897 246d 	ldrb.w	r2, [r7, #1133]	@ 0x46d
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d3be      	bcc.n	8002444 <main+0x6d4>
            count_case++;
 80024c6:	f897 3473 	ldrb.w	r3, [r7, #1139]	@ 0x473
 80024ca:	3301      	adds	r3, #1
 80024cc:	f887 3473 	strb.w	r3, [r7, #1139]	@ 0x473
            ptr_data_test = strtok(NULL,"\n");
 80024d0:	4973      	ldr	r1, [pc, #460]	@ (80026a0 <main+0x930>)
 80024d2:	2000      	movs	r0, #0
 80024d4:	f007 ffca 	bl	800a46c <strtok>
 80024d8:	f8c7 0474 	str.w	r0, [r7, #1140]	@ 0x474
          while (ptr_data_test != NULL) {
 80024dc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d19f      	bne.n	8002424 <main+0x6b4>
          memcpy(buffer,Control_IC_test.result_case,Control_IC_test.num_case);
 80024e4:	4b6d      	ldr	r3, [pc, #436]	@ (800269c <main+0x92c>)
 80024e6:	f893 3486 	ldrb.w	r3, [r3, #1158]	@ 0x486
 80024ea:	461a      	mov	r2, r3
 80024ec:	f507 737a 	add.w	r3, r7, #1000	@ 0x3e8
 80024f0:	496c      	ldr	r1, [pc, #432]	@ (80026a4 <main+0x934>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f008 f89d 	bl	800a632 <memcpy>
          Control_IC_test.cur_case = FINISH_TEST;
 80024f8:	4b68      	ldr	r3, [pc, #416]	@ (800269c <main+0x92c>)
 80024fa:	2202      	movs	r2, #2
 80024fc:	709a      	strb	r2, [r3, #2]
        } break;
 80024fe:	e0cb      	b.n	8002698 <main+0x928>
          memset(total_data_send_can,0,sizeof(total_data_send_can));
 8002500:	463b      	mov	r3, r7
 8002502:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f007 ff94 	bl	800a436 <memset>
          total_data_send_can[0] = Control_IC_test.isShort;
 800250e:	4b63      	ldr	r3, [pc, #396]	@ (800269c <main+0x92c>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8002518:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800251c:	701a      	strb	r2, [r3, #0]
          memcpy(&total_data_send_can[2],&Control_IC_test.result_short_pin[0],Control_IC_test.num_pin);
 800251e:	4b5f      	ldr	r3, [pc, #380]	@ (800269c <main+0x92c>)
 8002520:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 8002524:	461a      	mov	r2, r3
 8002526:	463b      	mov	r3, r7
 8002528:	3302      	adds	r3, #2
 800252a:	495f      	ldr	r1, [pc, #380]	@ (80026a8 <main+0x938>)
 800252c:	4618      	mov	r0, r3
 800252e:	f008 f880 	bl	800a632 <memcpy>
          memcpy(&total_data_send_can[Control_IC_test.num_pin+3],Control_IC_test.result_test_function,Control_IC_test.num_case*Control_IC_test.num_pin);
 8002532:	4b5a      	ldr	r3, [pc, #360]	@ (800269c <main+0x92c>)
 8002534:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 8002538:	3303      	adds	r3, #3
 800253a:	463a      	mov	r2, r7
 800253c:	4413      	add	r3, r2
 800253e:	4a57      	ldr	r2, [pc, #348]	@ (800269c <main+0x92c>)
 8002540:	f8d2 1264 	ldr.w	r1, [r2, #612]	@ 0x264
 8002544:	4a55      	ldr	r2, [pc, #340]	@ (800269c <main+0x92c>)
 8002546:	f892 2486 	ldrb.w	r2, [r2, #1158]	@ 0x486
 800254a:	4610      	mov	r0, r2
 800254c:	4a53      	ldr	r2, [pc, #332]	@ (800269c <main+0x92c>)
 800254e:	f892 2487 	ldrb.w	r2, [r2, #1159]	@ 0x487
 8002552:	fb00 f202 	mul.w	r2, r0, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f008 f86b 	bl	800a632 <memcpy>
          memcpy(&total_data_send_can[Control_IC_test.num_pin+5+Control_IC_test.num_case*Control_IC_test.num_pin],Control_IC_test.result_case,Control_IC_test.num_case);
 800255c:	4b4f      	ldr	r3, [pc, #316]	@ (800269c <main+0x92c>)
 800255e:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 8002562:	1d5a      	adds	r2, r3, #5
 8002564:	4b4d      	ldr	r3, [pc, #308]	@ (800269c <main+0x92c>)
 8002566:	f893 3486 	ldrb.w	r3, [r3, #1158]	@ 0x486
 800256a:	4619      	mov	r1, r3
 800256c:	4b4b      	ldr	r3, [pc, #300]	@ (800269c <main+0x92c>)
 800256e:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	463a      	mov	r2, r7
 800257a:	4413      	add	r3, r2
 800257c:	4a47      	ldr	r2, [pc, #284]	@ (800269c <main+0x92c>)
 800257e:	f892 2486 	ldrb.w	r2, [r2, #1158]	@ 0x486
 8002582:	4948      	ldr	r1, [pc, #288]	@ (80026a4 <main+0x934>)
 8002584:	4618      	mov	r0, r3
 8002586:	f008 f854 	bl	800a632 <memcpy>
          for (uint16_t i = 0; i < (Control_IC_test.num_pin + 5 + Control_IC_test.num_case*Control_IC_test.num_pin + Control_IC_test.num_case); i++) {
 800258a:	2300      	movs	r3, #0
 800258c:	f8a7 346a 	strh.w	r3, [r7, #1130]	@ 0x46a
 8002590:	e014      	b.n	80025bc <main+0x84c>
            total_data_send_can[i] = '0' + total_data_send_can[i];
 8002592:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	@ 0x46a
 8002596:	f507 628f 	add.w	r2, r7, #1144	@ 0x478
 800259a:	f5a2 628f 	sub.w	r2, r2, #1144	@ 0x478
 800259e:	5cd2      	ldrb	r2, [r2, r3]
 80025a0:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	@ 0x46a
 80025a4:	3230      	adds	r2, #48	@ 0x30
 80025a6:	b2d1      	uxtb	r1, r2
 80025a8:	f507 628f 	add.w	r2, r7, #1144	@ 0x478
 80025ac:	f5a2 628f 	sub.w	r2, r2, #1144	@ 0x478
 80025b0:	54d1      	strb	r1, [r2, r3]
          for (uint16_t i = 0; i < (Control_IC_test.num_pin + 5 + Control_IC_test.num_case*Control_IC_test.num_pin + Control_IC_test.num_case); i++) {
 80025b2:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	@ 0x46a
 80025b6:	3301      	adds	r3, #1
 80025b8:	f8a7 346a 	strh.w	r3, [r7, #1130]	@ 0x46a
 80025bc:	f8b7 246a 	ldrh.w	r2, [r7, #1130]	@ 0x46a
 80025c0:	4b36      	ldr	r3, [pc, #216]	@ (800269c <main+0x92c>)
 80025c2:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 80025c6:	1d59      	adds	r1, r3, #5
 80025c8:	4b34      	ldr	r3, [pc, #208]	@ (800269c <main+0x92c>)
 80025ca:	f893 3486 	ldrb.w	r3, [r3, #1158]	@ 0x486
 80025ce:	4618      	mov	r0, r3
 80025d0:	4b32      	ldr	r3, [pc, #200]	@ (800269c <main+0x92c>)
 80025d2:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 80025d6:	fb00 f303 	mul.w	r3, r0, r3
 80025da:	440b      	add	r3, r1
 80025dc:	492f      	ldr	r1, [pc, #188]	@ (800269c <main+0x92c>)
 80025de:	f891 1486 	ldrb.w	r1, [r1, #1158]	@ 0x486
 80025e2:	440b      	add	r3, r1
 80025e4:	429a      	cmp	r2, r3
 80025e6:	dbd4      	blt.n	8002592 <main+0x822>
          total_data_send_can[1] = '\0';
 80025e8:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 80025ec:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 80025f0:	2200      	movs	r2, #0
 80025f2:	705a      	strb	r2, [r3, #1]
          total_data_send_can[Control_IC_test.num_pin+2] = '\0';
 80025f4:	4b29      	ldr	r3, [pc, #164]	@ (800269c <main+0x92c>)
 80025f6:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 80025fa:	3302      	adds	r3, #2
 80025fc:	f507 628f 	add.w	r2, r7, #1144	@ 0x478
 8002600:	f5a2 628f 	sub.w	r2, r2, #1144	@ 0x478
 8002604:	2100      	movs	r1, #0
 8002606:	54d1      	strb	r1, [r2, r3]
          total_data_send_can[Control_IC_test.num_pin+4+Control_IC_test.num_case*Control_IC_test.num_pin] = '\0';
 8002608:	4b24      	ldr	r3, [pc, #144]	@ (800269c <main+0x92c>)
 800260a:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 800260e:	1d1a      	adds	r2, r3, #4
 8002610:	4b22      	ldr	r3, [pc, #136]	@ (800269c <main+0x92c>)
 8002612:	f893 3486 	ldrb.w	r3, [r3, #1158]	@ 0x486
 8002616:	4619      	mov	r1, r3
 8002618:	4b20      	ldr	r3, [pc, #128]	@ (800269c <main+0x92c>)
 800261a:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	f507 628f 	add.w	r2, r7, #1144	@ 0x478
 8002628:	f5a2 628f 	sub.w	r2, r2, #1144	@ 0x478
 800262c:	2100      	movs	r1, #0
 800262e:	54d1      	strb	r1, [r2, r3]
          total_data_send_can[Control_IC_test.num_pin+6+Control_IC_test.num_case*Control_IC_test.num_pin+Control_IC_test.num_case] = '\0';
 8002630:	4b1a      	ldr	r3, [pc, #104]	@ (800269c <main+0x92c>)
 8002632:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 8002636:	1d9a      	adds	r2, r3, #6
 8002638:	4b18      	ldr	r3, [pc, #96]	@ (800269c <main+0x92c>)
 800263a:	f893 3486 	ldrb.w	r3, [r3, #1158]	@ 0x486
 800263e:	4619      	mov	r1, r3
 8002640:	4b16      	ldr	r3, [pc, #88]	@ (800269c <main+0x92c>)
 8002642:	f893 3487 	ldrb.w	r3, [r3, #1159]	@ 0x487
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	4a13      	ldr	r2, [pc, #76]	@ (800269c <main+0x92c>)
 800264e:	f892 2486 	ldrb.w	r2, [r2, #1158]	@ 0x486
 8002652:	4413      	add	r3, r2
 8002654:	f507 628f 	add.w	r2, r7, #1144	@ 0x478
 8002658:	f5a2 628f 	sub.w	r2, r2, #1144	@ 0x478
 800265c:	2100      	movs	r1, #0
 800265e:	54d1      	strb	r1, [r2, r3]
          isotp_send(&CAN_iso,total_data_send_can,(Control_IC_test.num_pin + 6 + Control_IC_test.num_case*Control_IC_test.num_pin + Control_IC_test.num_case));
 8002660:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <main+0x92c>)
 8002662:	f893 3486 	ldrb.w	r3, [r3, #1158]	@ 0x486
 8002666:	3301      	adds	r3, #1
 8002668:	b29b      	uxth	r3, r3
 800266a:	4a0c      	ldr	r2, [pc, #48]	@ (800269c <main+0x92c>)
 800266c:	f892 2487 	ldrb.w	r2, [r2, #1159]	@ 0x487
 8002670:	fb13 f302 	smulbb	r3, r3, r2
 8002674:	b29b      	uxth	r3, r3
 8002676:	4a09      	ldr	r2, [pc, #36]	@ (800269c <main+0x92c>)
 8002678:	f892 2486 	ldrb.w	r2, [r2, #1158]	@ 0x486
 800267c:	4413      	add	r3, r2
 800267e:	b29b      	uxth	r3, r3
 8002680:	3306      	adds	r3, #6
 8002682:	b29a      	uxth	r2, r3
 8002684:	463b      	mov	r3, r7
 8002686:	4619      	mov	r1, r3
 8002688:	4808      	ldr	r0, [pc, #32]	@ (80026ac <main+0x93c>)
 800268a:	f005 fda5 	bl	80081d8 <isotp_send>
          flag_run_test = false;
 800268e:	4b08      	ldr	r3, [pc, #32]	@ (80026b0 <main+0x940>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
        } break;
 8002694:	e000      	b.n	8002698 <main+0x928>
        default : break;
 8002696:	bf00      	nop
    if (flag_run_test) {
 8002698:	f7ff bbf8 	b.w	8001e8c <main+0x11c>
 800269c:	2000083c 	.word	0x2000083c
 80026a0:	0800cef8 	.word	0x0800cef8
 80026a4:	20000aa4 	.word	0x20000aa4
 80026a8:	20000ab8 	.word	0x20000ab8
 80026ac:	20000604 	.word	0x20000604
 80026b0:	20000cc4 	.word	0x20000cc4

080026b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b094      	sub	sp, #80	@ 0x50
 80026b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ba:	f107 0320 	add.w	r3, r7, #32
 80026be:	2230      	movs	r2, #48	@ 0x30
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f007 feb7 	bl	800a436 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	2300      	movs	r3, #0
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	4b28      	ldr	r3, [pc, #160]	@ (8002780 <SystemClock_Config+0xcc>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	4a27      	ldr	r2, [pc, #156]	@ (8002780 <SystemClock_Config+0xcc>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e8:	4b25      	ldr	r3, [pc, #148]	@ (8002780 <SystemClock_Config+0xcc>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f4:	2300      	movs	r3, #0
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	4b22      	ldr	r3, [pc, #136]	@ (8002784 <SystemClock_Config+0xd0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a21      	ldr	r2, [pc, #132]	@ (8002784 <SystemClock_Config+0xd0>)
 80026fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b1f      	ldr	r3, [pc, #124]	@ (8002784 <SystemClock_Config+0xd0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002710:	2302      	movs	r3, #2
 8002712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002714:	2301      	movs	r3, #1
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002718:	2310      	movs	r3, #16
 800271a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800271c:	2302      	movs	r3, #2
 800271e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002720:	2300      	movs	r3, #0
 8002722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002724:	2308      	movs	r3, #8
 8002726:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002728:	2348      	movs	r3, #72	@ 0x48
 800272a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800272c:	2302      	movs	r3, #2
 800272e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002730:	2304      	movs	r3, #4
 8002732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002734:	f107 0320 	add.w	r3, r7, #32
 8002738:	4618      	mov	r0, r3
 800273a:	f003 f9e5 	bl	8005b08 <HAL_RCC_OscConfig>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002744:	f000 fb3e 	bl	8002dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002748:	230f      	movs	r3, #15
 800274a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800274c:	2302      	movs	r3, #2
 800274e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800275a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800275e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	2102      	movs	r1, #2
 8002766:	4618      	mov	r0, r3
 8002768:	f003 fc46 	bl	8005ff8 <HAL_RCC_ClockConfig>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002772:	f000 fb27 	bl	8002dc4 <Error_Handler>
  }
}
 8002776:	bf00      	nop
 8002778:	3750      	adds	r7, #80	@ 0x50
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800
 8002784:	40007000 	.word	0x40007000

08002788 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	@ 0x28
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800278e:	4b26      	ldr	r3, [pc, #152]	@ (8002828 <MX_CAN1_Init+0xa0>)
 8002790:	4a26      	ldr	r2, [pc, #152]	@ (800282c <MX_CAN1_Init+0xa4>)
 8002792:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8002794:	4b24      	ldr	r3, [pc, #144]	@ (8002828 <MX_CAN1_Init+0xa0>)
 8002796:	2204      	movs	r2, #4
 8002798:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800279a:	4b23      	ldr	r3, [pc, #140]	@ (8002828 <MX_CAN1_Init+0xa0>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80027a0:	4b21      	ldr	r3, [pc, #132]	@ (8002828 <MX_CAN1_Init+0xa0>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80027a6:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <MX_CAN1_Init+0xa0>)
 80027a8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80027ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80027ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <MX_CAN1_Init+0xa0>)
 80027b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80027b4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80027b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002828 <MX_CAN1_Init+0xa0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80027bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <MX_CAN1_Init+0xa0>)
 80027be:	2200      	movs	r2, #0
 80027c0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80027c2:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <MX_CAN1_Init+0xa0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80027c8:	4b17      	ldr	r3, [pc, #92]	@ (8002828 <MX_CAN1_Init+0xa0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80027ce:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <MX_CAN1_Init+0xa0>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80027d4:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <MX_CAN1_Init+0xa0>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80027da:	4813      	ldr	r0, [pc, #76]	@ (8002828 <MX_CAN1_Init+0xa0>)
 80027dc:	f000 fe54 	bl	8003488 <HAL_CAN_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80027e6:	f000 faed 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

#if DEVICE == 1
 canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80027ea:	2301      	movs	r3, #1
 80027ec:	623b      	str	r3, [r7, #32]
 canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80027ee:	2312      	movs	r3, #18
 80027f0:	617b      	str	r3, [r7, #20]
 canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 canfilterconfig.FilterIdHigh = 0x131<<5;
 80027f6:	f242 6320 	movw	r3, #9760	@ 0x2620
 80027fa:	603b      	str	r3, [r7, #0]
 canfilterconfig.FilterIdLow = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	607b      	str	r3, [r7, #4]
 canfilterconfig.FilterMaskIdHigh = 0x131<<5;
 8002800:	f242 6320 	movw	r3, #9760	@ 0x2620
 8002804:	60bb      	str	r3, [r7, #8]
 canfilterconfig.FilterMaskIdLow = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
 canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800280e:	2301      	movs	r3, #1
 8002810:	61fb      	str	r3, [r7, #28]
 canfilterconfig.SlaveStartFilterBank = 20;
 8002812:	2314      	movs	r3, #20
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
  canfilterconfig.SlaveStartFilterBank = 20;
#endif  

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8002816:	463b      	mov	r3, r7
 8002818:	4619      	mov	r1, r3
 800281a:	4803      	ldr	r0, [pc, #12]	@ (8002828 <MX_CAN1_Init+0xa0>)
 800281c:	f000 ff30 	bl	8003680 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8002820:	bf00      	nop
 8002822:	3728      	adds	r7, #40	@ 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	200003bc 	.word	0x200003bc
 800282c:	40006400 	.word	0x40006400

08002830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002834:	4b12      	ldr	r3, [pc, #72]	@ (8002880 <MX_I2C1_Init+0x50>)
 8002836:	4a13      	ldr	r2, [pc, #76]	@ (8002884 <MX_I2C1_Init+0x54>)
 8002838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 200000;
 800283a:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <MX_I2C1_Init+0x50>)
 800283c:	4a12      	ldr	r2, [pc, #72]	@ (8002888 <MX_I2C1_Init+0x58>)
 800283e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002840:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <MX_I2C1_Init+0x50>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002846:	4b0e      	ldr	r3, [pc, #56]	@ (8002880 <MX_I2C1_Init+0x50>)
 8002848:	2200      	movs	r2, #0
 800284a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800284c:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <MX_I2C1_Init+0x50>)
 800284e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002854:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <MX_I2C1_Init+0x50>)
 8002856:	2200      	movs	r2, #0
 8002858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800285a:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <MX_I2C1_Init+0x50>)
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002860:	4b07      	ldr	r3, [pc, #28]	@ (8002880 <MX_I2C1_Init+0x50>)
 8002862:	2200      	movs	r2, #0
 8002864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <MX_I2C1_Init+0x50>)
 8002868:	2200      	movs	r2, #0
 800286a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800286c:	4804      	ldr	r0, [pc, #16]	@ (8002880 <MX_I2C1_Init+0x50>)
 800286e:	f002 f809 	bl	8004884 <HAL_I2C_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002878:	f000 faa4 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800287c:	bf00      	nop
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200003e4 	.word	0x200003e4
 8002884:	40005400 	.word	0x40005400
 8002888:	00030d40 	.word	0x00030d40

0800288c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a0:	463b      	mov	r3, r7
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002924 <MX_TIM1_Init+0x98>)
 80028aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002928 <MX_TIM1_Init+0x9c>)
 80028ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168 -1;
 80028ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002924 <MX_TIM1_Init+0x98>)
 80028b0:	22a7      	movs	r2, #167	@ 0xa7
 80028b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <MX_TIM1_Init+0x98>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF - 1;
 80028ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002924 <MX_TIM1_Init+0x98>)
 80028bc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80028c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c2:	4b18      	ldr	r3, [pc, #96]	@ (8002924 <MX_TIM1_Init+0x98>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028c8:	4b16      	ldr	r3, [pc, #88]	@ (8002924 <MX_TIM1_Init+0x98>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ce:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <MX_TIM1_Init+0x98>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028d4:	4813      	ldr	r0, [pc, #76]	@ (8002924 <MX_TIM1_Init+0x98>)
 80028d6:	f003 fdad 	bl	8006434 <HAL_TIM_Base_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80028e0:	f000 fa70 	bl	8002dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028ea:	f107 0308 	add.w	r3, r7, #8
 80028ee:	4619      	mov	r1, r3
 80028f0:	480c      	ldr	r0, [pc, #48]	@ (8002924 <MX_TIM1_Init+0x98>)
 80028f2:	f003 fe57 	bl	80065a4 <HAL_TIM_ConfigClockSource>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80028fc:	f000 fa62 	bl	8002dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002900:	2300      	movs	r3, #0
 8002902:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002904:	2300      	movs	r3, #0
 8002906:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002908:	463b      	mov	r3, r7
 800290a:	4619      	mov	r1, r3
 800290c:	4805      	ldr	r0, [pc, #20]	@ (8002924 <MX_TIM1_Init+0x98>)
 800290e:	f004 f857 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002918:	f000 fa54 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  
  /* USER CODE END TIM1_Init 2 */

}
 800291c:	bf00      	nop
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000438 	.word	0x20000438
 8002928:	40010000 	.word	0x40010000

0800292c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <MX_USART1_UART_Init+0x4c>)
 8002932:	4a12      	ldr	r2, [pc, #72]	@ (800297c <MX_USART1_UART_Init+0x50>)
 8002934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002936:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <MX_USART1_UART_Init+0x4c>)
 8002938:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800293c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800293e:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <MX_USART1_UART_Init+0x4c>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002944:	4b0c      	ldr	r3, [pc, #48]	@ (8002978 <MX_USART1_UART_Init+0x4c>)
 8002946:	2200      	movs	r2, #0
 8002948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <MX_USART1_UART_Init+0x4c>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <MX_USART1_UART_Init+0x4c>)
 8002952:	220c      	movs	r2, #12
 8002954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002956:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <MX_USART1_UART_Init+0x4c>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <MX_USART1_UART_Init+0x4c>)
 800295e:	2200      	movs	r2, #0
 8002960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002962:	4805      	ldr	r0, [pc, #20]	@ (8002978 <MX_USART1_UART_Init+0x4c>)
 8002964:	f004 f8a8 	bl	8006ab8 <HAL_UART_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800296e:	f000 fa29 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000480 	.word	0x20000480
 800297c:	40011000 	.word	0x40011000

08002980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <MX_USART2_UART_Init+0x4c>)
 8002986:	4a12      	ldr	r2, [pc, #72]	@ (80029d0 <MX_USART2_UART_Init+0x50>)
 8002988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 800298a:	4b10      	ldr	r3, [pc, #64]	@ (80029cc <MX_USART2_UART_Init+0x4c>)
 800298c:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8002990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002992:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <MX_USART2_UART_Init+0x4c>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002998:	4b0c      	ldr	r3, [pc, #48]	@ (80029cc <MX_USART2_UART_Init+0x4c>)
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800299e:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <MX_USART2_UART_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029a4:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <MX_USART2_UART_Init+0x4c>)
 80029a6:	220c      	movs	r2, #12
 80029a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029aa:	4b08      	ldr	r3, [pc, #32]	@ (80029cc <MX_USART2_UART_Init+0x4c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b0:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <MX_USART2_UART_Init+0x4c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029b6:	4805      	ldr	r0, [pc, #20]	@ (80029cc <MX_USART2_UART_Init+0x4c>)
 80029b8:	f004 f87e 	bl	8006ab8 <HAL_UART_Init>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029c2:	f000 f9ff 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200004c8 	.word	0x200004c8
 80029d0:	40004400 	.word	0x40004400

080029d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08c      	sub	sp, #48	@ 0x30
 80029d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029da:	f107 031c 	add.w	r3, r7, #28
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	4b6b      	ldr	r3, [pc, #428]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	4a6a      	ldr	r2, [pc, #424]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 80029f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fa:	4b68      	ldr	r3, [pc, #416]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	4b64      	ldr	r3, [pc, #400]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	4a63      	ldr	r2, [pc, #396]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a16:	4b61      	ldr	r3, [pc, #388]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	4b5d      	ldr	r3, [pc, #372]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	4a5c      	ldr	r2, [pc, #368]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a32:	4b5a      	ldr	r3, [pc, #360]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b56      	ldr	r3, [pc, #344]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	4a55      	ldr	r2, [pc, #340]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4e:	4b53      	ldr	r3, [pc, #332]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	4a4e      	ldr	r2, [pc, #312]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a64:	f043 0310 	orr.w	r3, r3, #16
 8002a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	4b48      	ldr	r3, [pc, #288]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	4a47      	ldr	r2, [pc, #284]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a80:	f043 0308 	orr.w	r3, r3, #8
 8002a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a86:	4b45      	ldr	r3, [pc, #276]	@ (8002b9c <MX_GPIO_Init+0x1c8>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8002a92:	2200      	movs	r2, #0
 8002a94:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8002a98:	4841      	ldr	r0, [pc, #260]	@ (8002ba0 <MX_GPIO_Init+0x1cc>)
 8002a9a:	f001 fed9 	bl	8004850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f641 71f0 	movw	r1, #8176	@ 0x1ff0
 8002aa4:	483f      	ldr	r0, [pc, #252]	@ (8002ba4 <MX_GPIO_Init+0x1d0>)
 8002aa6:	f001 fed3 	bl	8004850 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f643 013b 	movw	r1, #14395	@ 0x383b
 8002ab0:	483d      	ldr	r0, [pc, #244]	@ (8002ba8 <MX_GPIO_Init+0x1d4>)
 8002ab2:	f001 fecd 	bl	8004850 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f44f 41ff 	mov.w	r1, #32640	@ 0x7f80
 8002abc:	483b      	ldr	r0, [pc, #236]	@ (8002bac <MX_GPIO_Init+0x1d8>)
 8002abe:	f001 fec7 	bl	8004850 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	21f7      	movs	r1, #247	@ 0xf7
 8002ac6:	483a      	ldr	r0, [pc, #232]	@ (8002bb0 <MX_GPIO_Init+0x1dc>)
 8002ac8:	f001 fec2 	bl	8004850 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002acc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ade:	f107 031c 	add.w	r3, r7, #28
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	482e      	ldr	r0, [pc, #184]	@ (8002ba0 <MX_GPIO_Init+0x1cc>)
 8002ae6:	f001 fcff 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002aea:	f641 73f0 	movw	r3, #8176	@ 0x1ff0
 8002aee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af0:	2301      	movs	r3, #1
 8002af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	4619      	mov	r1, r3
 8002b02:	4828      	ldr	r0, [pc, #160]	@ (8002ba4 <MX_GPIO_Init+0x1d0>)
 8002b04:	f001 fcf0 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 PB12
                           PB13 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8002b08:	f643 033b 	movw	r3, #14395	@ 0x383b
 8002b0c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1a:	f107 031c 	add.w	r3, r7, #28
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4821      	ldr	r0, [pc, #132]	@ (8002ba8 <MX_GPIO_Init+0x1d4>)
 8002b22:	f001 fce1 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002b26:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 8002b2a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b38:	f107 031c 	add.w	r3, r7, #28
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	481b      	ldr	r0, [pc, #108]	@ (8002bac <MX_GPIO_Init+0x1d8>)
 8002b40:	f001 fcd2 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002b44:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b52:	f107 031c 	add.w	r3, r7, #28
 8002b56:	4619      	mov	r1, r3
 8002b58:	4813      	ldr	r0, [pc, #76]	@ (8002ba8 <MX_GPIO_Init+0x1d4>)
 8002b5a:	f001 fcc5 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002b5e:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8002b62:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b64:	2300      	movs	r3, #0
 8002b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b6c:	f107 031c 	add.w	r3, r7, #28
 8002b70:	4619      	mov	r1, r3
 8002b72:	480f      	ldr	r0, [pc, #60]	@ (8002bb0 <MX_GPIO_Init+0x1dc>)
 8002b74:	f001 fcb8 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002b78:	23f7      	movs	r3, #247	@ 0xf7
 8002b7a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b88:	f107 031c 	add.w	r3, r7, #28
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4808      	ldr	r0, [pc, #32]	@ (8002bb0 <MX_GPIO_Init+0x1dc>)
 8002b90:	f001 fcaa 	bl	80044e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002b94:	bf00      	nop
 8002b96:	3730      	adds	r7, #48	@ 0x30
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40020000 	.word	0x40020000
 8002ba4:	40020800 	.word	0x40020800
 8002ba8:	40020400 	.word	0x40020400
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40020c00 	.word	0x40020c00

08002bb4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <HAL_UARTEx_RxEventCallback+0x3c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d10c      	bne.n	8002be6 <HAL_UARTEx_RxEventCallback+0x32>

		// Call to callback function screen
		Screen_RX_data(dataRX);
 8002bcc:	4809      	ldr	r0, [pc, #36]	@ (8002bf4 <HAL_UARTEx_RxEventCallback+0x40>)
 8002bce:	f004 ff1d 	bl	8007a0c <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 8002bd2:	2264      	movs	r2, #100	@ 0x64
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4807      	ldr	r0, [pc, #28]	@ (8002bf4 <HAL_UARTEx_RxEventCallback+0x40>)
 8002bd8:	f007 fc2d 	bl	800a436 <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8002bdc:	2264      	movs	r2, #100	@ 0x64
 8002bde:	4905      	ldr	r1, [pc, #20]	@ (8002bf4 <HAL_UARTEx_RxEventCallback+0x40>)
 8002be0:	4803      	ldr	r0, [pc, #12]	@ (8002bf0 <HAL_UARTEx_RxEventCallback+0x3c>)
 8002be2:	f003 ffb9 	bl	8006b58 <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200004c8 	.word	0x200004c8
 8002bf4:	20000510 	.word	0x20000510

08002bf8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c08:	6018      	str	r0, [r3, #0]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8002c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8002cc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8002c0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002ccc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8002c0e:	2100      	movs	r1, #0
 8002c10:	482f      	ldr	r0, [pc, #188]	@ (8002cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8002c12:	f000 ff4d 	bl	8003ab0 <HAL_CAN_GetRxMessage>
	uint8_t payload[500];
	uint16_t act_size = 0;
 8002c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1a:	f5a3 73fb 	sub.w	r3, r3, #502	@ 0x1f6
 8002c1e:	2200      	movs	r2, #0
 8002c20:	801a      	strh	r2, [r3, #0]
  isotp_on_can_message(&CAN_iso, RxData, RxHeader.DLC);
 8002c22:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4927      	ldr	r1, [pc, #156]	@ (8002cc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8002c2c:	4829      	ldr	r0, [pc, #164]	@ (8002cd4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8002c2e:	f005 fb61 	bl	80082f4 <isotp_on_can_message>
  isotp_poll(&CAN_iso);
 8002c32:	4828      	ldr	r0, [pc, #160]	@ (8002cd4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8002c34:	f005 fd03 	bl	800863e <isotp_poll>
  if (CAN_iso.receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 8002c38:	4b26      	ldr	r3, [pc, #152]	@ (8002cd4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8002c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d13c      	bne.n	8002cbc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>
	  isotp_receive(&CAN_iso, payload, sizeof(payload), &act_size);
 8002c42:	f107 030a 	add.w	r3, r7, #10
 8002c46:	f107 010c 	add.w	r1, r7, #12
 8002c4a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002c4e:	4821      	ldr	r0, [pc, #132]	@ (8002cd4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8002c50:	f005 fca2 	bl	8008598 <isotp_receive>
    /* Receive full data test */
    memset(Control_IC_test.data_test,0,sizeof(Control_IC_test.data_test));
 8002c54:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002c58:	2100      	movs	r1, #0
 8002c5a:	481f      	ldr	r0, [pc, #124]	@ (8002cd8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8002c5c:	f007 fbeb 	bl	800a436 <memset>
    Control_IC_test.num_pin = payload[0];
 8002c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c64:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002c68:	781a      	ldrb	r2, [r3, #0]
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cdc <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8002c6c:	f883 2487 	strb.w	r2, [r3, #1159]	@ 0x487
    Control_IC_test.num_case = payload[2];
 8002c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c74:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002c78:	789a      	ldrb	r2, [r3, #2]
 8002c7a:	4b18      	ldr	r3, [pc, #96]	@ (8002cdc <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8002c7c:	f883 2486 	strb.w	r2, [r3, #1158]	@ 0x486
    memcpy(Control_IC_test.data_test,&payload[4],act_size - 4);
 8002c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c84:	f5a3 73fb 	sub.w	r3, r3, #502	@ 0x1f6
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	3b04      	subs	r3, #4
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	3304      	adds	r3, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4810      	ldr	r0, [pc, #64]	@ (8002cd8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8002c98:	f007 fccb 	bl	800a632 <memcpy>
    Control_IC_test.data_test_len = act_size - 4;
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 73fb 	sub.w	r3, r3, #502	@ 0x1f6
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	3b04      	subs	r3, #4
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	4b0c      	ldr	r3, [pc, #48]	@ (8002cdc <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8002cac:	f8a3 2484 	strh.w	r2, [r3, #1156]	@ 0x484
    Control_IC_test.cur_case = TEST_SHORT_CIRCUIT;
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	709a      	strb	r2, [r3, #2]
    flag_run_test = true;
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	701a      	strb	r2, [r3, #0]
  }

}
 8002cbc:	bf00      	nop
 8002cbe:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200005a8 	.word	0x200005a8
 8002ccc:	2000058c 	.word	0x2000058c
 8002cd0:	200003bc 	.word	0x200003bc
 8002cd4:	20000604 	.word	0x20000604
 8002cd8:	20000acc 	.word	0x20000acc
 8002cdc:	2000083c 	.word	0x2000083c
 8002ce0:	20000cc4 	.word	0x20000cc4

08002ce4 <_write>:
//void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
//	  isotp_poll(&CAN_iso);
//}


int _write(int file, char *ptr, int len) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e009      	b.n	8002d0a <_write+0x26>
        ITM_SendChar(ptr[i]);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff f80e 	bl	8001d20 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3301      	adds	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	dbf1      	blt.n	8002cf6 <_write+0x12>
    }
    return len;
 8002d12:	687b      	ldr	r3, [r7, #4]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <delay_us>:

/**
 * delay polling in microsecond
 */
void delay_us(uint16_t delay_us) {
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0); // reset time 1 to 0
 8002d26:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <delay_us+0x30>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	625a      	str	r2, [r3, #36]	@ 0x24

	while(__HAL_TIM_GET_COUNTER(&htim1) < delay_us );
 8002d2e:	bf00      	nop
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <delay_us+0x30>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d3f9      	bcc.n	8002d30 <delay_us+0x14>
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000438 	.word	0x20000438

08002d50 <isotp_user_send_can>:

/* FUNCTION USING IN CAN ISO TP */
int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t* data, const uint8_t size) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	71fb      	strb	r3, [r7, #7]
  TxHeader.DLC = size;
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	4a0d      	ldr	r2, [pc, #52]	@ (8002d98 <isotp_user_send_can+0x48>)
 8002d62:	6113      	str	r3, [r2, #16]
  TxHeader.StdId = arbitration_id;
 8002d64:	4a0c      	ldr	r2, [pc, #48]	@ (8002d98 <isotp_user_send_can+0x48>)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6013      	str	r3, [r2, #0]
  TxHeader.IDE = CAN_ID_STD;
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <isotp_user_send_can+0x48>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8002d70:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <isotp_user_send_can+0x48>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	60da      	str	r2, [r3, #12]

  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TxMailbox) == HAL_OK) {
 8002d76:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <isotp_user_send_can+0x4c>)
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	4907      	ldr	r1, [pc, #28]	@ (8002d98 <isotp_user_send_can+0x48>)
 8002d7c:	4808      	ldr	r0, [pc, #32]	@ (8002da0 <isotp_user_send_can+0x50>)
 8002d7e:	f000 fda3 	bl	80038c8 <HAL_CAN_AddTxMessage>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <isotp_user_send_can+0x3c>
	  //while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
	  return ISOTP_RET_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e001      	b.n	8002d90 <isotp_user_send_can+0x40>
  }

  return ISOTP_RET_ERROR;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000574 	.word	0x20000574
 8002d9c:	200005b0 	.word	0x200005b0
 8002da0:	200003bc 	.word	0x200003bc

08002da4 <isotp_user_get_ms>:


uint32_t isotp_user_get_ms(void) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002da8:	f000 fb3e 	bl	8003428 <HAL_GetTick>
 8002dac:	4603      	mov	r3, r0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <isotp_user_debug>:

void isotp_user_debug(const char* message, ...) {
 8002db2:	b40f      	push	{r0, r1, r2, r3}
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	b004      	add	sp, #16
 8002dc2:	4770      	bx	lr

08002dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <Error_Handler+0x8>

08002dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	4a0f      	ldr	r2, [pc, #60]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002de6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	4a08      	ldr	r2, [pc, #32]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800

08002e20 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	@ 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a25      	ldr	r2, [pc, #148]	@ (8002ed4 <HAL_CAN_MspInit+0xb4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d144      	bne.n	8002ecc <HAL_CAN_MspInit+0xac>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	4b24      	ldr	r3, [pc, #144]	@ (8002ed8 <HAL_CAN_MspInit+0xb8>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	4a23      	ldr	r2, [pc, #140]	@ (8002ed8 <HAL_CAN_MspInit+0xb8>)
 8002e4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e52:	4b21      	ldr	r3, [pc, #132]	@ (8002ed8 <HAL_CAN_MspInit+0xb8>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed8 <HAL_CAN_MspInit+0xb8>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed8 <HAL_CAN_MspInit+0xb8>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <HAL_CAN_MspInit+0xb8>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e7a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002e8c:	2309      	movs	r3, #9
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	4619      	mov	r1, r3
 8002e96:	4811      	ldr	r0, [pc, #68]	@ (8002edc <HAL_CAN_MspInit+0xbc>)
 8002e98:	f001 fb26 	bl	80044e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	2013      	movs	r0, #19
 8002ea2:	f001 fa58 	bl	8004356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002ea6:	2013      	movs	r0, #19
 8002ea8:	f001 fa71 	bl	800438e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002eac:	2200      	movs	r2, #0
 8002eae:	2100      	movs	r1, #0
 8002eb0:	2014      	movs	r0, #20
 8002eb2:	f001 fa50 	bl	8004356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002eb6:	2014      	movs	r0, #20
 8002eb8:	f001 fa69 	bl	800438e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	2015      	movs	r0, #21
 8002ec2:	f001 fa48 	bl	8004356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002ec6:	2015      	movs	r0, #21
 8002ec8:	f001 fa61 	bl	800438e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002ecc:	bf00      	nop
 8002ece:	3728      	adds	r7, #40	@ 0x28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40006400 	.word	0x40006400
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40020000 	.word	0x40020000

08002ee0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	@ 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a19      	ldr	r2, [pc, #100]	@ (8002f64 <HAL_I2C_MspInit+0x84>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d12b      	bne.n	8002f5a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	4b18      	ldr	r3, [pc, #96]	@ (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	4a17      	ldr	r2, [pc, #92]	@ (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f12:	4b15      	ldr	r3, [pc, #84]	@ (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f1e:	23c0      	movs	r3, #192	@ 0xc0
 8002f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f22:	2312      	movs	r3, #18
 8002f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f2e:	2304      	movs	r3, #4
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f32:	f107 0314 	add.w	r3, r7, #20
 8002f36:	4619      	mov	r1, r3
 8002f38:	480c      	ldr	r0, [pc, #48]	@ (8002f6c <HAL_I2C_MspInit+0x8c>)
 8002f3a:	f001 fad5 	bl	80044e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	4a08      	ldr	r2, [pc, #32]	@ (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002f5a:	bf00      	nop
 8002f5c:	3728      	adds	r7, #40	@ 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40005400 	.word	0x40005400
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40020400 	.word	0x40020400

08002f70 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002fac <HAL_TIM_Base_MspInit+0x3c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10d      	bne.n	8002f9e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb0 <HAL_TIM_Base_MspInit+0x40>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8a:	4a09      	ldr	r2, [pc, #36]	@ (8002fb0 <HAL_TIM_Base_MspInit+0x40>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f92:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <HAL_TIM_Base_MspInit+0x40>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	40023800 	.word	0x40023800

08002fb4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	@ 0x30
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 031c 	add.w	r3, r7, #28
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a36      	ldr	r2, [pc, #216]	@ (80030ac <HAL_UART_MspInit+0xf8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d12d      	bne.n	8003032 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	4b35      	ldr	r3, [pc, #212]	@ (80030b0 <HAL_UART_MspInit+0xfc>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fde:	4a34      	ldr	r2, [pc, #208]	@ (80030b0 <HAL_UART_MspInit+0xfc>)
 8002fe0:	f043 0310 	orr.w	r3, r3, #16
 8002fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fe6:	4b32      	ldr	r3, [pc, #200]	@ (80030b0 <HAL_UART_MspInit+0xfc>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	4b2e      	ldr	r3, [pc, #184]	@ (80030b0 <HAL_UART_MspInit+0xfc>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	4a2d      	ldr	r2, [pc, #180]	@ (80030b0 <HAL_UART_MspInit+0xfc>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6313      	str	r3, [r2, #48]	@ 0x30
 8003002:	4b2b      	ldr	r3, [pc, #172]	@ (80030b0 <HAL_UART_MspInit+0xfc>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800300e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301c:	2303      	movs	r3, #3
 800301e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003020:	2307      	movs	r3, #7
 8003022:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	4619      	mov	r1, r3
 800302a:	4822      	ldr	r0, [pc, #136]	@ (80030b4 <HAL_UART_MspInit+0x100>)
 800302c:	f001 fa5c 	bl	80044e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003030:	e038      	b.n	80030a4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a20      	ldr	r2, [pc, #128]	@ (80030b8 <HAL_UART_MspInit+0x104>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d133      	bne.n	80030a4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <HAL_UART_MspInit+0xfc>)
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	4a1a      	ldr	r2, [pc, #104]	@ (80030b0 <HAL_UART_MspInit+0xfc>)
 8003046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800304a:	6413      	str	r3, [r2, #64]	@ 0x40
 800304c:	4b18      	ldr	r3, [pc, #96]	@ (80030b0 <HAL_UART_MspInit+0xfc>)
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	4b14      	ldr	r3, [pc, #80]	@ (80030b0 <HAL_UART_MspInit+0xfc>)
 800305e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003060:	4a13      	ldr	r2, [pc, #76]	@ (80030b0 <HAL_UART_MspInit+0xfc>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6313      	str	r3, [r2, #48]	@ 0x30
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <HAL_UART_MspInit+0xfc>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003074:	230c      	movs	r3, #12
 8003076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003078:	2302      	movs	r3, #2
 800307a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003080:	2303      	movs	r3, #3
 8003082:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003084:	2307      	movs	r3, #7
 8003086:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003088:	f107 031c 	add.w	r3, r7, #28
 800308c:	4619      	mov	r1, r3
 800308e:	4809      	ldr	r0, [pc, #36]	@ (80030b4 <HAL_UART_MspInit+0x100>)
 8003090:	f001 fa2a 	bl	80044e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	2100      	movs	r1, #0
 8003098:	2026      	movs	r0, #38	@ 0x26
 800309a:	f001 f95c 	bl	8004356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800309e:	2026      	movs	r0, #38	@ 0x26
 80030a0:	f001 f975 	bl	800438e <HAL_NVIC_EnableIRQ>
}
 80030a4:	bf00      	nop
 80030a6:	3730      	adds	r7, #48	@ 0x30
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40011000 	.word	0x40011000
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40020000 	.word	0x40020000
 80030b8:	40004400 	.word	0x40004400

080030bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <NMI_Handler+0x4>

080030c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <HardFault_Handler+0x4>

080030cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <MemManage_Handler+0x4>

080030d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <BusFault_Handler+0x4>

080030dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <UsageFault_Handler+0x4>

080030e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003114:	f000 f974 	bl	8003400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (!HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox)) {
 8003118:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <SysTick_Handler+0x24>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	4806      	ldr	r0, [pc, #24]	@ (8003138 <SysTick_Handler+0x28>)
 8003120:	f000 fca2 	bl	8003a68 <HAL_CAN_IsTxMessagePending>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <SysTick_Handler+0x20>
	  isotp_poll(&CAN_iso);
 800312a:	4804      	ldr	r0, [pc, #16]	@ (800313c <SysTick_Handler+0x2c>)
 800312c:	f005 fa87 	bl	800863e <isotp_poll>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8003130:	bf00      	nop
 8003132:	bd80      	pop	{r7, pc}
 8003134:	200005b0 	.word	0x200005b0
 8003138:	200003bc 	.word	0x200003bc
 800313c:	20000604 	.word	0x20000604

08003140 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003144:	4802      	ldr	r0, [pc, #8]	@ (8003150 <CAN1_TX_IRQHandler+0x10>)
 8003146:	f000 fdfb 	bl	8003d40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	200003bc 	.word	0x200003bc

08003154 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003158:	4802      	ldr	r0, [pc, #8]	@ (8003164 <CAN1_RX0_IRQHandler+0x10>)
 800315a:	f000 fdf1 	bl	8003d40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200003bc 	.word	0x200003bc

08003168 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800316c:	4802      	ldr	r0, [pc, #8]	@ (8003178 <CAN1_RX1_IRQHandler+0x10>)
 800316e:	f000 fde7 	bl	8003d40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	200003bc 	.word	0x200003bc

0800317c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003180:	4802      	ldr	r0, [pc, #8]	@ (800318c <USART2_IRQHandler+0x10>)
 8003182:	f003 fd47 	bl	8006c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200004c8 	.word	0x200004c8

08003190 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return 1;
 8003194:	2301      	movs	r3, #1
}
 8003196:	4618      	mov	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <_kill>:

int _kill(int pid, int sig)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031aa:	f007 fa15 	bl	800a5d8 <__errno>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2216      	movs	r2, #22
 80031b2:	601a      	str	r2, [r3, #0]
  return -1;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <_exit>:

void _exit (int status)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031c8:	f04f 31ff 	mov.w	r1, #4294967295
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ffe7 	bl	80031a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031d2:	bf00      	nop
 80031d4:	e7fd      	b.n	80031d2 <_exit+0x12>

080031d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	e00a      	b.n	80031fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031e8:	f3af 8000 	nop.w
 80031ec:	4601      	mov	r1, r0
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	60ba      	str	r2, [r7, #8]
 80031f4:	b2ca      	uxtb	r2, r1
 80031f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	3301      	adds	r3, #1
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	429a      	cmp	r2, r3
 8003204:	dbf0      	blt.n	80031e8 <_read+0x12>
  }

  return len;
 8003206:	687b      	ldr	r3, [r7, #4]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003238:	605a      	str	r2, [r3, #4]
  return 0;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <_isatty>:

int _isatty(int file)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003250:	2301      	movs	r3, #1
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003280:	4a14      	ldr	r2, [pc, #80]	@ (80032d4 <_sbrk+0x5c>)
 8003282:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <_sbrk+0x60>)
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800328c:	4b13      	ldr	r3, [pc, #76]	@ (80032dc <_sbrk+0x64>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003294:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <_sbrk+0x64>)
 8003296:	4a12      	ldr	r2, [pc, #72]	@ (80032e0 <_sbrk+0x68>)
 8003298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800329a:	4b10      	ldr	r3, [pc, #64]	@ (80032dc <_sbrk+0x64>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d207      	bcs.n	80032b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032a8:	f007 f996 	bl	800a5d8 <__errno>
 80032ac:	4603      	mov	r3, r0
 80032ae:	220c      	movs	r2, #12
 80032b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295
 80032b6:	e009      	b.n	80032cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032b8:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <_sbrk+0x64>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032be:	4b07      	ldr	r3, [pc, #28]	@ (80032dc <_sbrk+0x64>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	4a05      	ldr	r2, [pc, #20]	@ (80032dc <_sbrk+0x64>)
 80032c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ca:	68fb      	ldr	r3, [r7, #12]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20020000 	.word	0x20020000
 80032d8:	00000400 	.word	0x00000400
 80032dc:	20000cc8 	.word	0x20000cc8
 80032e0:	20000ee8 	.word	0x20000ee8

080032e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032e8:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <SystemInit+0x20>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ee:	4a05      	ldr	r2, [pc, #20]	@ (8003304 <SystemInit+0x20>)
 80032f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003308:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003340 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800330c:	f7ff ffea 	bl	80032e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003310:	480c      	ldr	r0, [pc, #48]	@ (8003344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003312:	490d      	ldr	r1, [pc, #52]	@ (8003348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003314:	4a0d      	ldr	r2, [pc, #52]	@ (800334c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003318:	e002      	b.n	8003320 <LoopCopyDataInit>

0800331a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800331a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800331c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800331e:	3304      	adds	r3, #4

08003320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003324:	d3f9      	bcc.n	800331a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003326:	4a0a      	ldr	r2, [pc, #40]	@ (8003350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003328:	4c0a      	ldr	r4, [pc, #40]	@ (8003354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800332a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800332c:	e001      	b.n	8003332 <LoopFillZerobss>

0800332e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800332e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003330:	3204      	adds	r2, #4

08003332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003334:	d3fb      	bcc.n	800332e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003336:	f007 f955 	bl	800a5e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800333a:	f7fe fd19 	bl	8001d70 <main>
  bx  lr    
 800333e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003348:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 800334c:	0800d634 	.word	0x0800d634
  ldr r2, =_sbss
 8003350:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8003354:	20000ee4 	.word	0x20000ee4

08003358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003358:	e7fe      	b.n	8003358 <ADC_IRQHandler>
	...

0800335c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003360:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <HAL_Init+0x40>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0d      	ldr	r2, [pc, #52]	@ (800339c <HAL_Init+0x40>)
 8003366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800336a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800336c:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_Init+0x40>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0a      	ldr	r2, [pc, #40]	@ (800339c <HAL_Init+0x40>)
 8003372:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003378:	4b08      	ldr	r3, [pc, #32]	@ (800339c <HAL_Init+0x40>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a07      	ldr	r2, [pc, #28]	@ (800339c <HAL_Init+0x40>)
 800337e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003384:	2003      	movs	r0, #3
 8003386:	f000 ffdb 	bl	8004340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800338a:	200f      	movs	r0, #15
 800338c:	f000 f808 	bl	80033a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003390:	f7ff fd1e 	bl	8002dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023c00 	.word	0x40023c00

080033a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033a8:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <HAL_InitTick+0x54>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b12      	ldr	r3, [pc, #72]	@ (80033f8 <HAL_InitTick+0x58>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	4619      	mov	r1, r3
 80033b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fff3 	bl	80043aa <HAL_SYSTICK_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e00e      	b.n	80033ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b0f      	cmp	r3, #15
 80033d2:	d80a      	bhi.n	80033ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033d4:	2200      	movs	r2, #0
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	f000 ffbb 	bl	8004356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033e0:	4a06      	ldr	r2, [pc, #24]	@ (80033fc <HAL_InitTick+0x5c>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	2000017c 	.word	0x2000017c
 80033f8:	20000184 	.word	0x20000184
 80033fc:	20000180 	.word	0x20000180

08003400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003404:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_IncTick+0x20>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	4b06      	ldr	r3, [pc, #24]	@ (8003424 <HAL_IncTick+0x24>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4413      	add	r3, r2
 8003410:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <HAL_IncTick+0x24>)
 8003412:	6013      	str	r3, [r2, #0]
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000184 	.word	0x20000184
 8003424:	20000ccc 	.word	0x20000ccc

08003428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return uwTick;
 800342c:	4b03      	ldr	r3, [pc, #12]	@ (800343c <HAL_GetTick+0x14>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000ccc 	.word	0x20000ccc

08003440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003448:	f7ff ffee 	bl	8003428 <HAL_GetTick>
 800344c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d005      	beq.n	8003466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800345a:	4b0a      	ldr	r3, [pc, #40]	@ (8003484 <HAL_Delay+0x44>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003466:	bf00      	nop
 8003468:	f7ff ffde 	bl	8003428 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	429a      	cmp	r2, r3
 8003476:	d8f7      	bhi.n	8003468 <HAL_Delay+0x28>
  {
  }
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000184 	.word	0x20000184

08003488 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0ed      	b.n	8003676 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff fcba 	bl	8002e20 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034bc:	f7ff ffb4 	bl	8003428 <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034c2:	e012      	b.n	80034ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034c4:	f7ff ffb0 	bl	8003428 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b0a      	cmp	r3, #10
 80034d0:	d90b      	bls.n	80034ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2205      	movs	r2, #5
 80034e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0c5      	b.n	8003676 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0e5      	beq.n	80034c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0202 	bic.w	r2, r2, #2
 8003506:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003508:	f7ff ff8e 	bl	8003428 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800350e:	e012      	b.n	8003536 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003510:	f7ff ff8a 	bl	8003428 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b0a      	cmp	r3, #10
 800351c:	d90b      	bls.n	8003536 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2205      	movs	r2, #5
 800352e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e09f      	b.n	8003676 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e5      	bne.n	8003510 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	7e1b      	ldrb	r3, [r3, #24]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d108      	bne.n	800355e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	e007      	b.n	800356e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800356c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	7e5b      	ldrb	r3, [r3, #25]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d108      	bne.n	8003588 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e007      	b.n	8003598 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003596:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	7e9b      	ldrb	r3, [r3, #26]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d108      	bne.n	80035b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0220 	orr.w	r2, r2, #32
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e007      	b.n	80035c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0220 	bic.w	r2, r2, #32
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	7edb      	ldrb	r3, [r3, #27]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d108      	bne.n	80035dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0210 	bic.w	r2, r2, #16
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	e007      	b.n	80035ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0210 	orr.w	r2, r2, #16
 80035ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	7f1b      	ldrb	r3, [r3, #28]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d108      	bne.n	8003606 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0208 	orr.w	r2, r2, #8
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e007      	b.n	8003616 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0208 	bic.w	r2, r2, #8
 8003614:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	7f5b      	ldrb	r3, [r3, #29]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d108      	bne.n	8003630 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0204 	orr.w	r2, r2, #4
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	e007      	b.n	8003640 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0204 	bic.w	r2, r2, #4
 800363e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	ea42 0103 	orr.w	r1, r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	1e5a      	subs	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003696:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d003      	beq.n	80036a6 <HAL_CAN_ConfigFilter+0x26>
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	f040 80be 	bne.w	8003822 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80036a6:	4b65      	ldr	r3, [pc, #404]	@ (800383c <HAL_CAN_ConfigFilter+0x1bc>)
 80036a8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80036c0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	431a      	orrs	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2201      	movs	r2, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	43db      	mvns	r3, r3
 80036f8:	401a      	ands	r2, r3
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d123      	bne.n	8003750 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	43db      	mvns	r3, r3
 8003712:	401a      	ands	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800372a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	3248      	adds	r2, #72	@ 0x48
 8003730:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003744:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003746:	6979      	ldr	r1, [r7, #20]
 8003748:	3348      	adds	r3, #72	@ 0x48
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	440b      	add	r3, r1
 800374e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d122      	bne.n	800379e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	431a      	orrs	r2, r3
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003778:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	3248      	adds	r2, #72	@ 0x48
 800377e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003792:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003794:	6979      	ldr	r1, [r7, #20]
 8003796:	3348      	adds	r3, #72	@ 0x48
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	440b      	add	r3, r1
 800379c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	401a      	ands	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80037b8:	e007      	b.n	80037ca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43db      	mvns	r3, r3
 80037dc:	401a      	ands	r2, r3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80037e4:	e007      	b.n	80037f6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d107      	bne.n	800380e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	431a      	orrs	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003814:	f023 0201 	bic.w	r2, r3, #1
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e006      	b.n	8003830 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40006400 	.word	0x40006400

08003840 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d12e      	bne.n	80038b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800386c:	f7ff fddc 	bl	8003428 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003872:	e012      	b.n	800389a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003874:	f7ff fdd8 	bl	8003428 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b0a      	cmp	r3, #10
 8003880:	d90b      	bls.n	800389a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2205      	movs	r2, #5
 8003892:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e012      	b.n	80038c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e5      	bne.n	8003874 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e006      	b.n	80038c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
  }
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	@ 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80038e6:	7ffb      	ldrb	r3, [r7, #31]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d003      	beq.n	80038f4 <HAL_CAN_AddTxMessage+0x2c>
 80038ec:	7ffb      	ldrb	r3, [r7, #31]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	f040 80ad 	bne.w	8003a4e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8095 	beq.w	8003a3e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	0e1b      	lsrs	r3, r3, #24
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800391e:	2201      	movs	r2, #1
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	409a      	lsls	r2, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10d      	bne.n	800394c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800393a:	68f9      	ldr	r1, [r7, #12]
 800393c:	6809      	ldr	r1, [r1, #0]
 800393e:	431a      	orrs	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	3318      	adds	r3, #24
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	440b      	add	r3, r1
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e00f      	b.n	800396c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003956:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800395c:	68f9      	ldr	r1, [r7, #12]
 800395e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003960:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	3318      	adds	r3, #24
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	440b      	add	r3, r1
 800396a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6819      	ldr	r1, [r3, #0]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	3318      	adds	r3, #24
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	440b      	add	r3, r1
 800397c:	3304      	adds	r3, #4
 800397e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	7d1b      	ldrb	r3, [r3, #20]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d111      	bne.n	80039ac <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	3318      	adds	r3, #24
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	4413      	add	r3, r2
 8003994:	3304      	adds	r3, #4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	6811      	ldr	r1, [r2, #0]
 800399c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	3318      	adds	r3, #24
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	440b      	add	r3, r1
 80039a8:	3304      	adds	r3, #4
 80039aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3307      	adds	r3, #7
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	061a      	lsls	r2, r3, #24
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3306      	adds	r3, #6
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	041b      	lsls	r3, r3, #16
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3305      	adds	r3, #5
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	4313      	orrs	r3, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	3204      	adds	r2, #4
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	4610      	mov	r0, r2
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	6811      	ldr	r1, [r2, #0]
 80039d4:	ea43 0200 	orr.w	r2, r3, r0
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	440b      	add	r3, r1
 80039de:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80039e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3303      	adds	r3, #3
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	061a      	lsls	r2, r3, #24
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3302      	adds	r3, #2
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3301      	adds	r3, #1
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	4313      	orrs	r3, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	4610      	mov	r0, r2
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	6811      	ldr	r1, [r2, #0]
 8003a0a:	ea43 0200 	orr.w	r2, r3, r0
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	440b      	add	r3, r1
 8003a14:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003a18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	3318      	adds	r3, #24
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	4413      	add	r3, r2
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	6811      	ldr	r1, [r2, #0]
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	3318      	adds	r3, #24
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	440b      	add	r3, r1
 8003a38:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e00e      	b.n	8003a5c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e006      	b.n	8003a5c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
  }
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3724      	adds	r7, #36	@ 0x24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a7c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a7e:	7afb      	ldrb	r3, [r7, #11]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d002      	beq.n	8003a8a <HAL_CAN_IsTxMessagePending+0x22>
 8003a84:	7afb      	ldrb	r3, [r7, #11]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d10b      	bne.n	8003aa2 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	069b      	lsls	r3, r3, #26
 8003a94:	401a      	ands	r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	069b      	lsls	r3, r3, #26
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d001      	beq.n	8003aa2 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ac4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d003      	beq.n	8003ad4 <HAL_CAN_GetRxMessage+0x24>
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	f040 8103 	bne.w	8003cda <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10e      	bne.n	8003af8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d116      	bne.n	8003b16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0f7      	b.n	8003ce8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d107      	bne.n	8003b16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e0e8      	b.n	8003ce8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	331b      	adds	r3, #27
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	4413      	add	r3, r2
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0204 	and.w	r2, r3, #4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10c      	bne.n	8003b4e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	331b      	adds	r3, #27
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	4413      	add	r3, r2
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	0d5b      	lsrs	r3, r3, #21
 8003b44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	e00b      	b.n	8003b66 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	331b      	adds	r3, #27
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	4413      	add	r3, r2
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	08db      	lsrs	r3, r3, #3
 8003b5e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	331b      	adds	r3, #27
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	4413      	add	r3, r2
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0202 	and.w	r2, r3, #2
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	331b      	adds	r3, #27
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	4413      	add	r3, r2
 8003b88:	3304      	adds	r3, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2208      	movs	r2, #8
 8003b98:	611a      	str	r2, [r3, #16]
 8003b9a:	e00b      	b.n	8003bb4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	331b      	adds	r3, #27
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3304      	adds	r3, #4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 020f 	and.w	r2, r3, #15
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	331b      	adds	r3, #27
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	331b      	adds	r3, #27
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3304      	adds	r3, #4
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	0a1a      	lsrs	r2, r3, #8
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	0c1a      	lsrs	r2, r3, #16
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	3302      	adds	r3, #2
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	0e1a      	lsrs	r2, r3, #24
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	3303      	adds	r3, #3
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	0a1a      	lsrs	r2, r3, #8
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	3305      	adds	r3, #5
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	0c1a      	lsrs	r2, r3, #16
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	3306      	adds	r3, #6
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	0e1a      	lsrs	r2, r3, #24
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	3307      	adds	r3, #7
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d108      	bne.n	8003cc6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0220 	orr.w	r2, r2, #32
 8003cc2:	60da      	str	r2, [r3, #12]
 8003cc4:	e007      	b.n	8003cd6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0220 	orr.w	r2, r2, #32
 8003cd4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e006      	b.n	8003ce8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
  }
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d04:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d002      	beq.n	8003d12 <HAL_CAN_ActivateNotification+0x1e>
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d109      	bne.n	8003d26 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6959      	ldr	r1, [r3, #20]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e006      	b.n	8003d34 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
  }
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08a      	sub	sp, #40	@ 0x28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d07c      	beq.n	8003e80 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d023      	beq.n	8003dd8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2201      	movs	r2, #1
 8003d96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f983 	bl	80040ae <HAL_CAN_TxMailbox0CompleteCallback>
 8003da8:	e016      	b.n	8003dd8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d004      	beq.n	8003dbe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dbc:	e00c      	b.n	8003dd8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd0:	e002      	b.n	8003dd8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f989 	bl	80040ea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d024      	beq.n	8003e2c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003dea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f963 	bl	80040c2 <HAL_CAN_TxMailbox1CompleteCallback>
 8003dfc:	e016      	b.n	8003e2c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e10:	e00c      	b.n	8003e2c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d004      	beq.n	8003e26 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e24:	e002      	b.n	8003e2c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f969 	bl	80040fe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d024      	beq.n	8003e80 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f943 	bl	80040d6 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e50:	e016      	b.n	8003e80 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e64:	e00c      	b.n	8003e80 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e78:	e002      	b.n	8003e80 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f949 	bl	8004112 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00c      	beq.n	8003ea4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e9a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2210      	movs	r2, #16
 8003ea2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d006      	beq.n	8003ec6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f930 	bl	8004126 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d009      	beq.n	8003ee4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fe fe8a 	bl	8002bf8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2210      	movs	r2, #16
 8003f06:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d006      	beq.n	8003f2a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2208      	movs	r2, #8
 8003f22:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f912 	bl	800414e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d009      	beq.n	8003f48 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f8f9 	bl	800413a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d006      	beq.n	8003f6a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2210      	movs	r2, #16
 8003f62:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f8fc 	bl	8004162 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00b      	beq.n	8003f8c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d006      	beq.n	8003f8c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2208      	movs	r2, #8
 8003f84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8f5 	bl	8004176 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d07b      	beq.n	800408e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d072      	beq.n	8004086 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	f043 0302 	orr.w	r3, r3, #2
 8003fd6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d008      	beq.n	8003ff4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	f043 0304 	orr.w	r3, r3, #4
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d043      	beq.n	8004086 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004004:	2b00      	cmp	r3, #0
 8004006:	d03e      	beq.n	8004086 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800400e:	2b60      	cmp	r3, #96	@ 0x60
 8004010:	d02b      	beq.n	800406a <HAL_CAN_IRQHandler+0x32a>
 8004012:	2b60      	cmp	r3, #96	@ 0x60
 8004014:	d82e      	bhi.n	8004074 <HAL_CAN_IRQHandler+0x334>
 8004016:	2b50      	cmp	r3, #80	@ 0x50
 8004018:	d022      	beq.n	8004060 <HAL_CAN_IRQHandler+0x320>
 800401a:	2b50      	cmp	r3, #80	@ 0x50
 800401c:	d82a      	bhi.n	8004074 <HAL_CAN_IRQHandler+0x334>
 800401e:	2b40      	cmp	r3, #64	@ 0x40
 8004020:	d019      	beq.n	8004056 <HAL_CAN_IRQHandler+0x316>
 8004022:	2b40      	cmp	r3, #64	@ 0x40
 8004024:	d826      	bhi.n	8004074 <HAL_CAN_IRQHandler+0x334>
 8004026:	2b30      	cmp	r3, #48	@ 0x30
 8004028:	d010      	beq.n	800404c <HAL_CAN_IRQHandler+0x30c>
 800402a:	2b30      	cmp	r3, #48	@ 0x30
 800402c:	d822      	bhi.n	8004074 <HAL_CAN_IRQHandler+0x334>
 800402e:	2b10      	cmp	r3, #16
 8004030:	d002      	beq.n	8004038 <HAL_CAN_IRQHandler+0x2f8>
 8004032:	2b20      	cmp	r3, #32
 8004034:	d005      	beq.n	8004042 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004036:	e01d      	b.n	8004074 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	f043 0308 	orr.w	r3, r3, #8
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004040:	e019      	b.n	8004076 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	f043 0310 	orr.w	r3, r3, #16
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800404a:	e014      	b.n	8004076 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	f043 0320 	orr.w	r3, r3, #32
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004054:	e00f      	b.n	8004076 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800405e:	e00a      	b.n	8004076 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004068:	e005      	b.n	8004076 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004072:	e000      	b.n	8004076 <HAL_CAN_IRQHandler+0x336>
            break;
 8004074:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004084:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2204      	movs	r2, #4
 800408c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f872 	bl	800418a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80040a6:	bf00      	nop
 80040a8:	3728      	adds	r7, #40	@ 0x28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <__NVIC_SetPriorityGrouping>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041b0:	4b0c      	ldr	r3, [pc, #48]	@ (80041e4 <__NVIC_SetPriorityGrouping+0x44>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041bc:	4013      	ands	r3, r2
 80041be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041d2:	4a04      	ldr	r2, [pc, #16]	@ (80041e4 <__NVIC_SetPriorityGrouping+0x44>)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	60d3      	str	r3, [r2, #12]
}
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	e000ed00 	.word	0xe000ed00

080041e8 <__NVIC_GetPriorityGrouping>:
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041ec:	4b04      	ldr	r3, [pc, #16]	@ (8004200 <__NVIC_GetPriorityGrouping+0x18>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	0a1b      	lsrs	r3, r3, #8
 80041f2:	f003 0307 	and.w	r3, r3, #7
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	e000ed00 	.word	0xe000ed00

08004204 <__NVIC_EnableIRQ>:
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	2b00      	cmp	r3, #0
 8004214:	db0b      	blt.n	800422e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	f003 021f 	and.w	r2, r3, #31
 800421c:	4907      	ldr	r1, [pc, #28]	@ (800423c <__NVIC_EnableIRQ+0x38>)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2001      	movs	r0, #1
 8004226:	fa00 f202 	lsl.w	r2, r0, r2
 800422a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	e000e100 	.word	0xe000e100

08004240 <__NVIC_SetPriority>:
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	6039      	str	r1, [r7, #0]
 800424a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800424c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004250:	2b00      	cmp	r3, #0
 8004252:	db0a      	blt.n	800426a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	b2da      	uxtb	r2, r3
 8004258:	490c      	ldr	r1, [pc, #48]	@ (800428c <__NVIC_SetPriority+0x4c>)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	0112      	lsls	r2, r2, #4
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	440b      	add	r3, r1
 8004264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004268:	e00a      	b.n	8004280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	b2da      	uxtb	r2, r3
 800426e:	4908      	ldr	r1, [pc, #32]	@ (8004290 <__NVIC_SetPriority+0x50>)
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	3b04      	subs	r3, #4
 8004278:	0112      	lsls	r2, r2, #4
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	440b      	add	r3, r1
 800427e:	761a      	strb	r2, [r3, #24]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000e100 	.word	0xe000e100
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <NVIC_EncodePriority>:
{
 8004294:	b480      	push	{r7}
 8004296:	b089      	sub	sp, #36	@ 0x24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f1c3 0307 	rsb	r3, r3, #7
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	bf28      	it	cs
 80042b2:	2304      	movcs	r3, #4
 80042b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	3304      	adds	r3, #4
 80042ba:	2b06      	cmp	r3, #6
 80042bc:	d902      	bls.n	80042c4 <NVIC_EncodePriority+0x30>
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3b03      	subs	r3, #3
 80042c2:	e000      	b.n	80042c6 <NVIC_EncodePriority+0x32>
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c8:	f04f 32ff 	mov.w	r2, #4294967295
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43da      	mvns	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	401a      	ands	r2, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042dc:	f04f 31ff 	mov.w	r1, #4294967295
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	43d9      	mvns	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ec:	4313      	orrs	r3, r2
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3724      	adds	r7, #36	@ 0x24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <SysTick_Config>:
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3b01      	subs	r3, #1
 8004308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800430c:	d301      	bcc.n	8004312 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800430e:	2301      	movs	r3, #1
 8004310:	e00f      	b.n	8004332 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004312:	4a0a      	ldr	r2, [pc, #40]	@ (800433c <SysTick_Config+0x40>)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3b01      	subs	r3, #1
 8004318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800431a:	210f      	movs	r1, #15
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	f7ff ff8e 	bl	8004240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004324:	4b05      	ldr	r3, [pc, #20]	@ (800433c <SysTick_Config+0x40>)
 8004326:	2200      	movs	r2, #0
 8004328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800432a:	4b04      	ldr	r3, [pc, #16]	@ (800433c <SysTick_Config+0x40>)
 800432c:	2207      	movs	r2, #7
 800432e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	e000e010 	.word	0xe000e010

08004340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ff29 	bl	80041a0 <__NVIC_SetPriorityGrouping>
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004356:	b580      	push	{r7, lr}
 8004358:	b086      	sub	sp, #24
 800435a:	af00      	add	r7, sp, #0
 800435c:	4603      	mov	r3, r0
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004368:	f7ff ff3e 	bl	80041e8 <__NVIC_GetPriorityGrouping>
 800436c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	6978      	ldr	r0, [r7, #20]
 8004374:	f7ff ff8e 	bl	8004294 <NVIC_EncodePriority>
 8004378:	4602      	mov	r2, r0
 800437a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff ff5d 	bl	8004240 <__NVIC_SetPriority>
}
 8004386:	bf00      	nop
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	4603      	mov	r3, r0
 8004396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff ff31 	bl	8004204 <__NVIC_EnableIRQ>
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff ffa2 	bl	80042fc <SysTick_Config>
 80043b8:	4603      	mov	r3, r0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043d0:	f7ff f82a 	bl	8003428 <HAL_GetTick>
 80043d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d008      	beq.n	80043f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2280      	movs	r2, #128	@ 0x80
 80043e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e052      	b.n	800449a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0216 	bic.w	r2, r2, #22
 8004402:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004412:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <HAL_DMA_Abort+0x62>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0208 	bic.w	r2, r2, #8
 8004432:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004444:	e013      	b.n	800446e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004446:	f7fe ffef 	bl	8003428 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b05      	cmp	r3, #5
 8004452:	d90c      	bls.n	800446e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2203      	movs	r2, #3
 800445e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e015      	b.n	800449a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e4      	bne.n	8004446 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004480:	223f      	movs	r2, #63	@ 0x3f
 8004482:	409a      	lsls	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d004      	beq.n	80044c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2280      	movs	r2, #128	@ 0x80
 80044ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e00c      	b.n	80044da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2205      	movs	r2, #5
 80044c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b089      	sub	sp, #36	@ 0x24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044fe:	2300      	movs	r3, #0
 8004500:	61fb      	str	r3, [r7, #28]
 8004502:	e16b      	b.n	80047dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004504:	2201      	movs	r2, #1
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4013      	ands	r3, r2
 8004516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	429a      	cmp	r2, r3
 800451e:	f040 815a 	bne.w	80047d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b01      	cmp	r3, #1
 800452c:	d005      	beq.n	800453a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004536:	2b02      	cmp	r3, #2
 8004538:	d130      	bne.n	800459c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	2203      	movs	r2, #3
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4013      	ands	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4313      	orrs	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004570:	2201      	movs	r2, #1
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4013      	ands	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f003 0201 	and.w	r2, r3, #1
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d017      	beq.n	80045d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	2203      	movs	r2, #3
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d123      	bne.n	800462c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	08da      	lsrs	r2, r3, #3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3208      	adds	r2, #8
 80045ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	220f      	movs	r2, #15
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4013      	ands	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4313      	orrs	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	08da      	lsrs	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3208      	adds	r2, #8
 8004626:	69b9      	ldr	r1, [r7, #24]
 8004628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	2203      	movs	r2, #3
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4013      	ands	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 0203 	and.w	r2, r3, #3
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	4313      	orrs	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80b4 	beq.w	80047d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	4b60      	ldr	r3, [pc, #384]	@ (80047f4 <HAL_GPIO_Init+0x30c>)
 8004674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004676:	4a5f      	ldr	r2, [pc, #380]	@ (80047f4 <HAL_GPIO_Init+0x30c>)
 8004678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800467c:	6453      	str	r3, [r2, #68]	@ 0x44
 800467e:	4b5d      	ldr	r3, [pc, #372]	@ (80047f4 <HAL_GPIO_Init+0x30c>)
 8004680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800468a:	4a5b      	ldr	r2, [pc, #364]	@ (80047f8 <HAL_GPIO_Init+0x310>)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	3302      	adds	r3, #2
 8004692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	220f      	movs	r2, #15
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a52      	ldr	r2, [pc, #328]	@ (80047fc <HAL_GPIO_Init+0x314>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d02b      	beq.n	800470e <HAL_GPIO_Init+0x226>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a51      	ldr	r2, [pc, #324]	@ (8004800 <HAL_GPIO_Init+0x318>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d025      	beq.n	800470a <HAL_GPIO_Init+0x222>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a50      	ldr	r2, [pc, #320]	@ (8004804 <HAL_GPIO_Init+0x31c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01f      	beq.n	8004706 <HAL_GPIO_Init+0x21e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a4f      	ldr	r2, [pc, #316]	@ (8004808 <HAL_GPIO_Init+0x320>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d019      	beq.n	8004702 <HAL_GPIO_Init+0x21a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a4e      	ldr	r2, [pc, #312]	@ (800480c <HAL_GPIO_Init+0x324>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d013      	beq.n	80046fe <HAL_GPIO_Init+0x216>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a4d      	ldr	r2, [pc, #308]	@ (8004810 <HAL_GPIO_Init+0x328>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00d      	beq.n	80046fa <HAL_GPIO_Init+0x212>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004814 <HAL_GPIO_Init+0x32c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d007      	beq.n	80046f6 <HAL_GPIO_Init+0x20e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004818 <HAL_GPIO_Init+0x330>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d101      	bne.n	80046f2 <HAL_GPIO_Init+0x20a>
 80046ee:	2307      	movs	r3, #7
 80046f0:	e00e      	b.n	8004710 <HAL_GPIO_Init+0x228>
 80046f2:	2308      	movs	r3, #8
 80046f4:	e00c      	b.n	8004710 <HAL_GPIO_Init+0x228>
 80046f6:	2306      	movs	r3, #6
 80046f8:	e00a      	b.n	8004710 <HAL_GPIO_Init+0x228>
 80046fa:	2305      	movs	r3, #5
 80046fc:	e008      	b.n	8004710 <HAL_GPIO_Init+0x228>
 80046fe:	2304      	movs	r3, #4
 8004700:	e006      	b.n	8004710 <HAL_GPIO_Init+0x228>
 8004702:	2303      	movs	r3, #3
 8004704:	e004      	b.n	8004710 <HAL_GPIO_Init+0x228>
 8004706:	2302      	movs	r3, #2
 8004708:	e002      	b.n	8004710 <HAL_GPIO_Init+0x228>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_GPIO_Init+0x228>
 800470e:	2300      	movs	r3, #0
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	f002 0203 	and.w	r2, r2, #3
 8004716:	0092      	lsls	r2, r2, #2
 8004718:	4093      	lsls	r3, r2
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4313      	orrs	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004720:	4935      	ldr	r1, [pc, #212]	@ (80047f8 <HAL_GPIO_Init+0x310>)
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	089b      	lsrs	r3, r3, #2
 8004726:	3302      	adds	r3, #2
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800472e:	4b3b      	ldr	r3, [pc, #236]	@ (800481c <HAL_GPIO_Init+0x334>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	43db      	mvns	r3, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4013      	ands	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004752:	4a32      	ldr	r2, [pc, #200]	@ (800481c <HAL_GPIO_Init+0x334>)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004758:	4b30      	ldr	r3, [pc, #192]	@ (800481c <HAL_GPIO_Init+0x334>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800477c:	4a27      	ldr	r2, [pc, #156]	@ (800481c <HAL_GPIO_Init+0x334>)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004782:	4b26      	ldr	r3, [pc, #152]	@ (800481c <HAL_GPIO_Init+0x334>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047a6:	4a1d      	ldr	r2, [pc, #116]	@ (800481c <HAL_GPIO_Init+0x334>)
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047ac:	4b1b      	ldr	r3, [pc, #108]	@ (800481c <HAL_GPIO_Init+0x334>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047d0:	4a12      	ldr	r2, [pc, #72]	@ (800481c <HAL_GPIO_Init+0x334>)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	3301      	adds	r3, #1
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2b0f      	cmp	r3, #15
 80047e0:	f67f ae90 	bls.w	8004504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	3724      	adds	r7, #36	@ 0x24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800
 80047f8:	40013800 	.word	0x40013800
 80047fc:	40020000 	.word	0x40020000
 8004800:	40020400 	.word	0x40020400
 8004804:	40020800 	.word	0x40020800
 8004808:	40020c00 	.word	0x40020c00
 800480c:	40021000 	.word	0x40021000
 8004810:	40021400 	.word	0x40021400
 8004814:	40021800 	.word	0x40021800
 8004818:	40021c00 	.word	0x40021c00
 800481c:	40013c00 	.word	0x40013c00

08004820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	887b      	ldrh	r3, [r7, #2]
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
 800483c:	e001      	b.n	8004842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004842:	7bfb      	ldrb	r3, [r7, #15]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	807b      	strh	r3, [r7, #2]
 800485c:	4613      	mov	r3, r2
 800485e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004860:	787b      	ldrb	r3, [r7, #1]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004866:	887a      	ldrh	r2, [r7, #2]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800486c:	e003      	b.n	8004876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800486e:	887b      	ldrh	r3, [r7, #2]
 8004870:	041a      	lsls	r2, r3, #16
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	619a      	str	r2, [r3, #24]
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e12b      	b.n	8004aee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fe fb18 	bl	8002ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2224      	movs	r2, #36	@ 0x24
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048e8:	f001 fd7c 	bl	80063e4 <HAL_RCC_GetPCLK1Freq>
 80048ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	4a81      	ldr	r2, [pc, #516]	@ (8004af8 <HAL_I2C_Init+0x274>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d807      	bhi.n	8004908 <HAL_I2C_Init+0x84>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4a80      	ldr	r2, [pc, #512]	@ (8004afc <HAL_I2C_Init+0x278>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	bf94      	ite	ls
 8004900:	2301      	movls	r3, #1
 8004902:	2300      	movhi	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	e006      	b.n	8004916 <HAL_I2C_Init+0x92>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a7d      	ldr	r2, [pc, #500]	@ (8004b00 <HAL_I2C_Init+0x27c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	bf94      	ite	ls
 8004910:	2301      	movls	r3, #1
 8004912:	2300      	movhi	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e0e7      	b.n	8004aee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4a78      	ldr	r2, [pc, #480]	@ (8004b04 <HAL_I2C_Init+0x280>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	0c9b      	lsrs	r3, r3, #18
 8004928:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	4a6a      	ldr	r2, [pc, #424]	@ (8004af8 <HAL_I2C_Init+0x274>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d802      	bhi.n	8004958 <HAL_I2C_Init+0xd4>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	3301      	adds	r3, #1
 8004956:	e009      	b.n	800496c <HAL_I2C_Init+0xe8>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	4a69      	ldr	r2, [pc, #420]	@ (8004b08 <HAL_I2C_Init+0x284>)
 8004964:	fba2 2303 	umull	r2, r3, r2, r3
 8004968:	099b      	lsrs	r3, r3, #6
 800496a:	3301      	adds	r3, #1
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	430b      	orrs	r3, r1
 8004972:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800497e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	495c      	ldr	r1, [pc, #368]	@ (8004af8 <HAL_I2C_Init+0x274>)
 8004988:	428b      	cmp	r3, r1
 800498a:	d819      	bhi.n	80049c0 <HAL_I2C_Init+0x13c>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	1e59      	subs	r1, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	fbb1 f3f3 	udiv	r3, r1, r3
 800499a:	1c59      	adds	r1, r3, #1
 800499c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80049a0:	400b      	ands	r3, r1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_I2C_Init+0x138>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1e59      	subs	r1, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80049b4:	3301      	adds	r3, #1
 80049b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ba:	e051      	b.n	8004a60 <HAL_I2C_Init+0x1dc>
 80049bc:	2304      	movs	r3, #4
 80049be:	e04f      	b.n	8004a60 <HAL_I2C_Init+0x1dc>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d111      	bne.n	80049ec <HAL_I2C_Init+0x168>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	1e58      	subs	r0, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6859      	ldr	r1, [r3, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	440b      	add	r3, r1
 80049d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049da:	3301      	adds	r3, #1
 80049dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	e012      	b.n	8004a12 <HAL_I2C_Init+0x18e>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1e58      	subs	r0, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6859      	ldr	r1, [r3, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	0099      	lsls	r1, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a02:	3301      	adds	r3, #1
 8004a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf0c      	ite	eq
 8004a0c:	2301      	moveq	r3, #1
 8004a0e:	2300      	movne	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_I2C_Init+0x196>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e022      	b.n	8004a60 <HAL_I2C_Init+0x1dc>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10e      	bne.n	8004a40 <HAL_I2C_Init+0x1bc>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1e58      	subs	r0, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6859      	ldr	r1, [r3, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	440b      	add	r3, r1
 8004a30:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a34:	3301      	adds	r3, #1
 8004a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a3e:	e00f      	b.n	8004a60 <HAL_I2C_Init+0x1dc>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1e58      	subs	r0, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6859      	ldr	r1, [r3, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	0099      	lsls	r1, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a56:	3301      	adds	r3, #1
 8004a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	6809      	ldr	r1, [r1, #0]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69da      	ldr	r2, [r3, #28]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6911      	ldr	r1, [r2, #16]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	68d2      	ldr	r2, [r2, #12]
 8004a9a:	4311      	orrs	r1, r2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	000186a0 	.word	0x000186a0
 8004afc:	001e847f 	.word	0x001e847f
 8004b00:	003d08ff 	.word	0x003d08ff
 8004b04:	431bde83 	.word	0x431bde83
 8004b08:	10624dd3 	.word	0x10624dd3

08004b0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	461a      	mov	r2, r3
 8004b18:	460b      	mov	r3, r1
 8004b1a:	817b      	strh	r3, [r7, #10]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b20:	f7fe fc82 	bl	8003428 <HAL_GetTick>
 8004b24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	f040 80e0 	bne.w	8004cf4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	2319      	movs	r3, #25
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	4970      	ldr	r1, [pc, #448]	@ (8004d00 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 fdac 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e0d3      	b.n	8004cf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_I2C_Master_Transmit+0x50>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e0cc      	b.n	8004cf6 <HAL_I2C_Master_Transmit+0x1ea>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d007      	beq.n	8004b82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0201 	orr.w	r2, r2, #1
 8004b80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2221      	movs	r2, #33	@ 0x21
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2210      	movs	r2, #16
 8004b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	893a      	ldrh	r2, [r7, #8]
 8004bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4a50      	ldr	r2, [pc, #320]	@ (8004d04 <HAL_I2C_Master_Transmit+0x1f8>)
 8004bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bc4:	8979      	ldrh	r1, [r7, #10]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	6a3a      	ldr	r2, [r7, #32]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fbfc 	bl	80053c8 <I2C_MasterRequestWrite>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e08d      	b.n	8004cf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004bf0:	e066      	b.n	8004cc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	6a39      	ldr	r1, [r7, #32]
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fe6a 	bl	80058d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00d      	beq.n	8004c1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d107      	bne.n	8004c1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e06b      	b.n	8004cf6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d11b      	bne.n	8004c94 <HAL_I2C_Master_Transmit+0x188>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d017      	beq.n	8004c94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	781a      	ldrb	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	6a39      	ldr	r1, [r7, #32]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fe61 	bl	8005960 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00d      	beq.n	8004cc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d107      	bne.n	8004cbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e01a      	b.n	8004cf6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d194      	bne.n	8004bf2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e000      	b.n	8004cf6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004cf4:	2302      	movs	r3, #2
  }
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	00100002 	.word	0x00100002
 8004d04:	ffff0000 	.word	0xffff0000

08004d08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08c      	sub	sp, #48	@ 0x30
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	4608      	mov	r0, r1
 8004d12:	4611      	mov	r1, r2
 8004d14:	461a      	mov	r2, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	817b      	strh	r3, [r7, #10]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	813b      	strh	r3, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d22:	f7fe fb81 	bl	8003428 <HAL_GetTick>
 8004d26:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	f040 8214 	bne.w	800515e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	2319      	movs	r3, #25
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	497b      	ldr	r1, [pc, #492]	@ (8004f2c <HAL_I2C_Mem_Read+0x224>)
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fcab 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e207      	b.n	8005160 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_I2C_Mem_Read+0x56>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e200      	b.n	8005160 <HAL_I2C_Mem_Read+0x458>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d007      	beq.n	8004d84 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2222      	movs	r2, #34	@ 0x22
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2240      	movs	r2, #64	@ 0x40
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a5b      	ldr	r2, [pc, #364]	@ (8004f30 <HAL_I2C_Mem_Read+0x228>)
 8004dc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dc6:	88f8      	ldrh	r0, [r7, #6]
 8004dc8:	893a      	ldrh	r2, [r7, #8]
 8004dca:	8979      	ldrh	r1, [r7, #10]
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fb78 	bl	80054cc <I2C_RequestMemoryRead>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e1bc      	b.n	8005160 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d113      	bne.n	8004e16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dee:	2300      	movs	r3, #0
 8004df0:	623b      	str	r3, [r7, #32]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	623b      	str	r3, [r7, #32]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	623b      	str	r3, [r7, #32]
 8004e02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	e190      	b.n	8005138 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d11b      	bne.n	8004e56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	61fb      	str	r3, [r7, #28]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e170      	b.n	8005138 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d11b      	bne.n	8004e96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61bb      	str	r3, [r7, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	e150      	b.n	8005138 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004eac:	e144      	b.n	8005138 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	f200 80f1 	bhi.w	800509a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d123      	bne.n	8004f08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 fd93 	bl	80059f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e145      	b.n	8005160 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f06:	e117      	b.n	8005138 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d14e      	bne.n	8004fae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f16:	2200      	movs	r2, #0
 8004f18:	4906      	ldr	r1, [pc, #24]	@ (8004f34 <HAL_I2C_Mem_Read+0x22c>)
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 fbbe 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d008      	beq.n	8004f38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e11a      	b.n	8005160 <HAL_I2C_Mem_Read+0x458>
 8004f2a:	bf00      	nop
 8004f2c:	00100002 	.word	0x00100002
 8004f30:	ffff0000 	.word	0xffff0000
 8004f34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fac:	e0c4      	b.n	8005138 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	496c      	ldr	r1, [pc, #432]	@ (8005168 <HAL_I2C_Mem_Read+0x460>)
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 fb6f 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0cb      	b.n	8005160 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005010:	2200      	movs	r2, #0
 8005012:	4955      	ldr	r1, [pc, #340]	@ (8005168 <HAL_I2C_Mem_Read+0x460>)
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fb41 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e09d      	b.n	8005160 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005098:	e04e      	b.n	8005138 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800509a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800509c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 fca6 	bl	80059f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e058      	b.n	8005160 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d124      	bne.n	8005138 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d107      	bne.n	8005106 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005104:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800513c:	2b00      	cmp	r3, #0
 800513e:	f47f aeb6 	bne.w	8004eae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	e000      	b.n	8005160 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800515e:	2302      	movs	r3, #2
  }
}
 8005160:	4618      	mov	r0, r3
 8005162:	3728      	adds	r7, #40	@ 0x28
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	00010004 	.word	0x00010004

0800516c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	@ 0x28
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	607a      	str	r2, [r7, #4]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	460b      	mov	r3, r1
 800517a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800517c:	f7fe f954 	bl	8003428 <HAL_GetTick>
 8005180:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b20      	cmp	r3, #32
 8005190:	f040 8111 	bne.w	80053b6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	2319      	movs	r3, #25
 800519a:	2201      	movs	r2, #1
 800519c:	4988      	ldr	r1, [pc, #544]	@ (80053c0 <HAL_I2C_IsDeviceReady+0x254>)
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fa7c 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80051aa:	2302      	movs	r3, #2
 80051ac:	e104      	b.n	80053b8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_I2C_IsDeviceReady+0x50>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e0fd      	b.n	80053b8 <HAL_I2C_IsDeviceReady+0x24c>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d007      	beq.n	80051e2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0201 	orr.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2224      	movs	r2, #36	@ 0x24
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a70      	ldr	r2, [pc, #448]	@ (80053c4 <HAL_I2C_IsDeviceReady+0x258>)
 8005204:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005214:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2200      	movs	r2, #0
 800521e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fa3a 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00d      	beq.n	800524a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800523c:	d103      	bne.n	8005246 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005244:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e0b6      	b.n	80053b8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800524a:	897b      	ldrh	r3, [r7, #10]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005258:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800525a:	f7fe f8e5 	bl	8003428 <HAL_GetTick>
 800525e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b02      	cmp	r3, #2
 800526c:	bf0c      	ite	eq
 800526e:	2301      	moveq	r3, #1
 8005270:	2300      	movne	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005284:	bf0c      	ite	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	2300      	movne	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800528e:	e025      	b.n	80052dc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005290:	f7fe f8ca 	bl	8003428 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d302      	bcc.n	80052a6 <HAL_I2C_IsDeviceReady+0x13a>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d103      	bne.n	80052ae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	22a0      	movs	r2, #160	@ 0xa0
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	bf0c      	ite	eq
 80052bc:	2301      	moveq	r3, #1
 80052be:	2300      	movne	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d2:	bf0c      	ite	eq
 80052d4:	2301      	moveq	r3, #1
 80052d6:	2300      	movne	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2ba0      	cmp	r3, #160	@ 0xa0
 80052e6:	d005      	beq.n	80052f4 <HAL_I2C_IsDeviceReady+0x188>
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d102      	bne.n	80052f4 <HAL_I2C_IsDeviceReady+0x188>
 80052ee:	7dbb      	ldrb	r3, [r7, #22]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0cd      	beq.n	8005290 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d129      	bne.n	800535e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005318:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531a:	2300      	movs	r3, #0
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	2319      	movs	r3, #25
 8005336:	2201      	movs	r2, #1
 8005338:	4921      	ldr	r1, [pc, #132]	@ (80053c0 <HAL_I2C_IsDeviceReady+0x254>)
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f9ae 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e036      	b.n	80053b8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	e02c      	b.n	80053b8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800536c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005376:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	2319      	movs	r3, #25
 800537e:	2201      	movs	r2, #1
 8005380:	490f      	ldr	r1, [pc, #60]	@ (80053c0 <HAL_I2C_IsDeviceReady+0x254>)
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 f98a 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e012      	b.n	80053b8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	3301      	adds	r3, #1
 8005396:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	f4ff af32 	bcc.w	8005206 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80053b6:	2302      	movs	r3, #2
  }
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3720      	adds	r7, #32
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	00100002 	.word	0x00100002
 80053c4:	ffff0000 	.word	0xffff0000

080053c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	607a      	str	r2, [r7, #4]
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	460b      	mov	r3, r1
 80053d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d006      	beq.n	80053f2 <I2C_MasterRequestWrite+0x2a>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d003      	beq.n	80053f2 <I2C_MasterRequestWrite+0x2a>
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053f0:	d108      	bne.n	8005404 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e00b      	b.n	800541c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005408:	2b12      	cmp	r3, #18
 800540a:	d107      	bne.n	800541c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800541a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f937 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00d      	beq.n	8005450 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005442:	d103      	bne.n	800544c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800544a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e035      	b.n	80054bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005458:	d108      	bne.n	800546c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800545a:	897b      	ldrh	r3, [r7, #10]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005468:	611a      	str	r2, [r3, #16]
 800546a:	e01b      	b.n	80054a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800546c:	897b      	ldrh	r3, [r7, #10]
 800546e:	11db      	asrs	r3, r3, #7
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 0306 	and.w	r3, r3, #6
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f063 030f 	orn	r3, r3, #15
 800547c:	b2da      	uxtb	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	490e      	ldr	r1, [pc, #56]	@ (80054c4 <I2C_MasterRequestWrite+0xfc>)
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f980 	bl	8005790 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e010      	b.n	80054bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800549a:	897b      	ldrh	r3, [r7, #10]
 800549c:	b2da      	uxtb	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4907      	ldr	r1, [pc, #28]	@ (80054c8 <I2C_MasterRequestWrite+0x100>)
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 f970 	bl	8005790 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	00010008 	.word	0x00010008
 80054c8:	00010002 	.word	0x00010002

080054cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	4608      	mov	r0, r1
 80054d6:	4611      	mov	r1, r2
 80054d8:	461a      	mov	r2, r3
 80054da:	4603      	mov	r3, r0
 80054dc:	817b      	strh	r3, [r7, #10]
 80054de:	460b      	mov	r3, r1
 80054e0:	813b      	strh	r3, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005504:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	2200      	movs	r2, #0
 800550e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f8c2 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00d      	beq.n	800553a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800552c:	d103      	bne.n	8005536 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005534:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e0aa      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800553a:	897b      	ldrh	r3, [r7, #10]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	461a      	mov	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005548:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	6a3a      	ldr	r2, [r7, #32]
 800554e:	4952      	ldr	r1, [pc, #328]	@ (8005698 <I2C_RequestMemoryRead+0x1cc>)
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f91d 	bl	8005790 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e097      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005578:	6a39      	ldr	r1, [r7, #32]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f9a8 	bl	80058d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00d      	beq.n	80055a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	2b04      	cmp	r3, #4
 800558c:	d107      	bne.n	800559e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800559c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e076      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d105      	bne.n	80055b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055a8:	893b      	ldrh	r3, [r7, #8]
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	611a      	str	r2, [r3, #16]
 80055b2:	e021      	b.n	80055f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055b4:	893b      	ldrh	r3, [r7, #8]
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c4:	6a39      	ldr	r1, [r7, #32]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f982 	bl	80058d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00d      	beq.n	80055ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d107      	bne.n	80055ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e050      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055ee:	893b      	ldrh	r3, [r7, #8]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055fa:	6a39      	ldr	r1, [r7, #32]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f967 	bl	80058d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00d      	beq.n	8005624 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560c:	2b04      	cmp	r3, #4
 800560e:	d107      	bne.n	8005620 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800561e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e035      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005632:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	2200      	movs	r2, #0
 800563c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f82b 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00d      	beq.n	8005668 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800565a:	d103      	bne.n	8005664 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005662:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e013      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005668:	897b      	ldrh	r3, [r7, #10]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	b2da      	uxtb	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	6a3a      	ldr	r2, [r7, #32]
 800567c:	4906      	ldr	r1, [pc, #24]	@ (8005698 <I2C_RequestMemoryRead+0x1cc>)
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 f886 	bl	8005790 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	00010002 	.word	0x00010002

0800569c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	4613      	mov	r3, r2
 80056aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056ac:	e048      	b.n	8005740 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b4:	d044      	beq.n	8005740 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b6:	f7fd feb7 	bl	8003428 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d302      	bcc.n	80056cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d139      	bne.n	8005740 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	0c1b      	lsrs	r3, r3, #16
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d10d      	bne.n	80056f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	43da      	mvns	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	4013      	ands	r3, r2
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bf0c      	ite	eq
 80056e8:	2301      	moveq	r3, #1
 80056ea:	2300      	movne	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	461a      	mov	r2, r3
 80056f0:	e00c      	b.n	800570c <I2C_WaitOnFlagUntilTimeout+0x70>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	43da      	mvns	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	4013      	ands	r3, r2
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf0c      	ite	eq
 8005704:	2301      	moveq	r3, #1
 8005706:	2300      	movne	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	429a      	cmp	r2, r3
 8005710:	d116      	bne.n	8005740 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572c:	f043 0220 	orr.w	r2, r3, #32
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e023      	b.n	8005788 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	d10d      	bne.n	8005766 <I2C_WaitOnFlagUntilTimeout+0xca>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	43da      	mvns	r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4013      	ands	r3, r2
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	e00c      	b.n	8005780 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	43da      	mvns	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	429a      	cmp	r2, r3
 8005784:	d093      	beq.n	80056ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800579e:	e071      	b.n	8005884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ae:	d123      	bne.n	80057f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e4:	f043 0204 	orr.w	r2, r3, #4
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e067      	b.n	80058c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d041      	beq.n	8005884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005800:	f7fd fe12 	bl	8003428 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	d302      	bcc.n	8005816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d136      	bne.n	8005884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	0c1b      	lsrs	r3, r3, #16
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d10c      	bne.n	800583a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	43da      	mvns	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4013      	ands	r3, r2
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	bf14      	ite	ne
 8005832:	2301      	movne	r3, #1
 8005834:	2300      	moveq	r3, #0
 8005836:	b2db      	uxtb	r3, r3
 8005838:	e00b      	b.n	8005852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	43da      	mvns	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4013      	ands	r3, r2
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	bf14      	ite	ne
 800584c:	2301      	movne	r3, #1
 800584e:	2300      	moveq	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d016      	beq.n	8005884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005870:	f043 0220 	orr.w	r2, r3, #32
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e021      	b.n	80058c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	0c1b      	lsrs	r3, r3, #16
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	d10c      	bne.n	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	43da      	mvns	r2, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4013      	ands	r3, r2
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	bf14      	ite	ne
 80058a0:	2301      	movne	r3, #1
 80058a2:	2300      	moveq	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	e00b      	b.n	80058c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	43da      	mvns	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4013      	ands	r3, r2
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bf14      	ite	ne
 80058ba:	2301      	movne	r3, #1
 80058bc:	2300      	moveq	r3, #0
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f47f af6d 	bne.w	80057a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058dc:	e034      	b.n	8005948 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f8e3 	bl	8005aaa <I2C_IsAcknowledgeFailed>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e034      	b.n	8005958 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d028      	beq.n	8005948 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f6:	f7fd fd97 	bl	8003428 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	429a      	cmp	r2, r3
 8005904:	d302      	bcc.n	800590c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d11d      	bne.n	8005948 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005916:	2b80      	cmp	r3, #128	@ 0x80
 8005918:	d016      	beq.n	8005948 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005934:	f043 0220 	orr.w	r2, r3, #32
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e007      	b.n	8005958 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005952:	2b80      	cmp	r3, #128	@ 0x80
 8005954:	d1c3      	bne.n	80058de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800596c:	e034      	b.n	80059d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f89b 	bl	8005aaa <I2C_IsAcknowledgeFailed>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e034      	b.n	80059e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d028      	beq.n	80059d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005986:	f7fd fd4f 	bl	8003428 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	429a      	cmp	r2, r3
 8005994:	d302      	bcc.n	800599c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d11d      	bne.n	80059d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d016      	beq.n	80059d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c4:	f043 0220 	orr.w	r2, r3, #32
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e007      	b.n	80059e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d1c3      	bne.n	800596e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059fc:	e049      	b.n	8005a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d119      	bne.n	8005a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0210 	mvn.w	r2, #16
 8005a14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e030      	b.n	8005aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a40:	f7fd fcf2 	bl	8003428 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d302      	bcc.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d11d      	bne.n	8005a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a60:	2b40      	cmp	r3, #64	@ 0x40
 8005a62:	d016      	beq.n	8005a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7e:	f043 0220 	orr.w	r2, r3, #32
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e007      	b.n	8005aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9c:	2b40      	cmp	r3, #64	@ 0x40
 8005a9e:	d1ae      	bne.n	80059fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ac0:	d11b      	bne.n	8005afa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005aca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae6:	f043 0204 	orr.w	r2, r3, #4
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e267      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d075      	beq.n	8005c12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b26:	4b88      	ldr	r3, [pc, #544]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d00c      	beq.n	8005b4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b32:	4b85      	ldr	r3, [pc, #532]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d112      	bne.n	8005b64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b3e:	4b82      	ldr	r3, [pc, #520]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b4a:	d10b      	bne.n	8005b64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b4c:	4b7e      	ldr	r3, [pc, #504]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d05b      	beq.n	8005c10 <HAL_RCC_OscConfig+0x108>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d157      	bne.n	8005c10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e242      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b6c:	d106      	bne.n	8005b7c <HAL_RCC_OscConfig+0x74>
 8005b6e:	4b76      	ldr	r3, [pc, #472]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a75      	ldr	r2, [pc, #468]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e01d      	b.n	8005bb8 <HAL_RCC_OscConfig+0xb0>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x98>
 8005b86:	4b70      	ldr	r3, [pc, #448]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a6f      	ldr	r2, [pc, #444]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	4b6d      	ldr	r3, [pc, #436]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a6c      	ldr	r2, [pc, #432]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e00b      	b.n	8005bb8 <HAL_RCC_OscConfig+0xb0>
 8005ba0:	4b69      	ldr	r3, [pc, #420]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a68      	ldr	r2, [pc, #416]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	4b66      	ldr	r3, [pc, #408]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a65      	ldr	r2, [pc, #404]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d013      	beq.n	8005be8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc0:	f7fd fc32 	bl	8003428 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bc8:	f7fd fc2e 	bl	8003428 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b64      	cmp	r3, #100	@ 0x64
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e207      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bda:	4b5b      	ldr	r3, [pc, #364]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <HAL_RCC_OscConfig+0xc0>
 8005be6:	e014      	b.n	8005c12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be8:	f7fd fc1e 	bl	8003428 <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf0:	f7fd fc1a 	bl	8003428 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b64      	cmp	r3, #100	@ 0x64
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e1f3      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c02:	4b51      	ldr	r3, [pc, #324]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0xe8>
 8005c0e:	e000      	b.n	8005c12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d063      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00b      	beq.n	8005c42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c2a:	4b47      	ldr	r3, [pc, #284]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d11c      	bne.n	8005c70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c36:	4b44      	ldr	r3, [pc, #272]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d116      	bne.n	8005c70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c42:	4b41      	ldr	r3, [pc, #260]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <HAL_RCC_OscConfig+0x152>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d001      	beq.n	8005c5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e1c7      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	4937      	ldr	r1, [pc, #220]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c6e:	e03a      	b.n	8005ce6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d020      	beq.n	8005cba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c78:	4b34      	ldr	r3, [pc, #208]	@ (8005d4c <HAL_RCC_OscConfig+0x244>)
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7e:	f7fd fbd3 	bl	8003428 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c86:	f7fd fbcf 	bl	8003428 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e1a8      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c98:	4b2b      	ldr	r3, [pc, #172]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca4:	4b28      	ldr	r3, [pc, #160]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4925      	ldr	r1, [pc, #148]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	600b      	str	r3, [r1, #0]
 8005cb8:	e015      	b.n	8005ce6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cba:	4b24      	ldr	r3, [pc, #144]	@ (8005d4c <HAL_RCC_OscConfig+0x244>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc0:	f7fd fbb2 	bl	8003428 <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cc8:	f7fd fbae 	bl	8003428 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e187      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cda:	4b1b      	ldr	r3, [pc, #108]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f0      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0308 	and.w	r3, r3, #8
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d036      	beq.n	8005d60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d016      	beq.n	8005d28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cfa:	4b15      	ldr	r3, [pc, #84]	@ (8005d50 <HAL_RCC_OscConfig+0x248>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d00:	f7fd fb92 	bl	8003428 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d08:	f7fd fb8e 	bl	8003428 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e167      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0f0      	beq.n	8005d08 <HAL_RCC_OscConfig+0x200>
 8005d26:	e01b      	b.n	8005d60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d28:	4b09      	ldr	r3, [pc, #36]	@ (8005d50 <HAL_RCC_OscConfig+0x248>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d2e:	f7fd fb7b 	bl	8003428 <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d34:	e00e      	b.n	8005d54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d36:	f7fd fb77 	bl	8003428 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d907      	bls.n	8005d54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e150      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	42470000 	.word	0x42470000
 8005d50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d54:	4b88      	ldr	r3, [pc, #544]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1ea      	bne.n	8005d36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 8097 	beq.w	8005e9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d72:	4b81      	ldr	r3, [pc, #516]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10f      	bne.n	8005d9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60bb      	str	r3, [r7, #8]
 8005d82:	4b7d      	ldr	r3, [pc, #500]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d86:	4a7c      	ldr	r2, [pc, #496]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d8e:	4b7a      	ldr	r3, [pc, #488]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d96:	60bb      	str	r3, [r7, #8]
 8005d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d9e:	4b77      	ldr	r3, [pc, #476]	@ (8005f7c <HAL_RCC_OscConfig+0x474>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d118      	bne.n	8005ddc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005daa:	4b74      	ldr	r3, [pc, #464]	@ (8005f7c <HAL_RCC_OscConfig+0x474>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a73      	ldr	r2, [pc, #460]	@ (8005f7c <HAL_RCC_OscConfig+0x474>)
 8005db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005db6:	f7fd fb37 	bl	8003428 <HAL_GetTick>
 8005dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dbe:	f7fd fb33 	bl	8003428 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e10c      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd0:	4b6a      	ldr	r3, [pc, #424]	@ (8005f7c <HAL_RCC_OscConfig+0x474>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0f0      	beq.n	8005dbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d106      	bne.n	8005df2 <HAL_RCC_OscConfig+0x2ea>
 8005de4:	4b64      	ldr	r3, [pc, #400]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de8:	4a63      	ldr	r2, [pc, #396]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8005df0:	e01c      	b.n	8005e2c <HAL_RCC_OscConfig+0x324>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2b05      	cmp	r3, #5
 8005df8:	d10c      	bne.n	8005e14 <HAL_RCC_OscConfig+0x30c>
 8005dfa:	4b5f      	ldr	r3, [pc, #380]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dfe:	4a5e      	ldr	r2, [pc, #376]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e00:	f043 0304 	orr.w	r3, r3, #4
 8005e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e06:	4b5c      	ldr	r3, [pc, #368]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0a:	4a5b      	ldr	r2, [pc, #364]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e0c:	f043 0301 	orr.w	r3, r3, #1
 8005e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e12:	e00b      	b.n	8005e2c <HAL_RCC_OscConfig+0x324>
 8005e14:	4b58      	ldr	r3, [pc, #352]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e18:	4a57      	ldr	r2, [pc, #348]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e20:	4b55      	ldr	r3, [pc, #340]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e24:	4a54      	ldr	r2, [pc, #336]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e26:	f023 0304 	bic.w	r3, r3, #4
 8005e2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d015      	beq.n	8005e60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e34:	f7fd faf8 	bl	8003428 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e3a:	e00a      	b.n	8005e52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e3c:	f7fd faf4 	bl	8003428 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e0cb      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e52:	4b49      	ldr	r3, [pc, #292]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0ee      	beq.n	8005e3c <HAL_RCC_OscConfig+0x334>
 8005e5e:	e014      	b.n	8005e8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e60:	f7fd fae2 	bl	8003428 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e66:	e00a      	b.n	8005e7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e68:	f7fd fade 	bl	8003428 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e0b5      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1ee      	bne.n	8005e68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d105      	bne.n	8005e9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e90:	4b39      	ldr	r3, [pc, #228]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e94:	4a38      	ldr	r2, [pc, #224]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80a1 	beq.w	8005fe8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ea6:	4b34      	ldr	r3, [pc, #208]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 030c 	and.w	r3, r3, #12
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d05c      	beq.n	8005f6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d141      	bne.n	8005f3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eba:	4b31      	ldr	r3, [pc, #196]	@ (8005f80 <HAL_RCC_OscConfig+0x478>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec0:	f7fd fab2 	bl	8003428 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec8:	f7fd faae 	bl	8003428 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e087      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eda:	4b27      	ldr	r3, [pc, #156]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f0      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69da      	ldr	r2, [r3, #28]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	019b      	lsls	r3, r3, #6
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	085b      	lsrs	r3, r3, #1
 8005efe:	3b01      	subs	r3, #1
 8005f00:	041b      	lsls	r3, r3, #16
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f08:	061b      	lsls	r3, r3, #24
 8005f0a:	491b      	ldr	r1, [pc, #108]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f10:	4b1b      	ldr	r3, [pc, #108]	@ (8005f80 <HAL_RCC_OscConfig+0x478>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f16:	f7fd fa87 	bl	8003428 <HAL_GetTick>
 8005f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f1c:	e008      	b.n	8005f30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f1e:	f7fd fa83 	bl	8003428 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e05c      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f30:	4b11      	ldr	r3, [pc, #68]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f0      	beq.n	8005f1e <HAL_RCC_OscConfig+0x416>
 8005f3c:	e054      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f3e:	4b10      	ldr	r3, [pc, #64]	@ (8005f80 <HAL_RCC_OscConfig+0x478>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f44:	f7fd fa70 	bl	8003428 <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f4c:	f7fd fa6c 	bl	8003428 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e045      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f5e:	4b06      	ldr	r3, [pc, #24]	@ (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f0      	bne.n	8005f4c <HAL_RCC_OscConfig+0x444>
 8005f6a:	e03d      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d107      	bne.n	8005f84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e038      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	40007000 	.word	0x40007000
 8005f80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f84:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff4 <HAL_RCC_OscConfig+0x4ec>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d028      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d121      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d11a      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005fba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d111      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fca:	085b      	lsrs	r3, r3, #1
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d107      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d001      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e000      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40023800 	.word	0x40023800

08005ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e0cc      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800600c:	4b68      	ldr	r3, [pc, #416]	@ (80061b0 <HAL_RCC_ClockConfig+0x1b8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d90c      	bls.n	8006034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601a:	4b65      	ldr	r3, [pc, #404]	@ (80061b0 <HAL_RCC_ClockConfig+0x1b8>)
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006022:	4b63      	ldr	r3, [pc, #396]	@ (80061b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	429a      	cmp	r2, r3
 800602e:	d001      	beq.n	8006034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e0b8      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d020      	beq.n	8006082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d005      	beq.n	8006058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800604c:	4b59      	ldr	r3, [pc, #356]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	4a58      	ldr	r2, [pc, #352]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006052:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006056:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006064:	4b53      	ldr	r3, [pc, #332]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	4a52      	ldr	r2, [pc, #328]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800606a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800606e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006070:	4b50      	ldr	r3, [pc, #320]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	494d      	ldr	r1, [pc, #308]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800607e:	4313      	orrs	r3, r2
 8006080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d044      	beq.n	8006118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d107      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006096:	4b47      	ldr	r3, [pc, #284]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d119      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e07f      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d003      	beq.n	80060b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d107      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b6:	4b3f      	ldr	r3, [pc, #252]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e06f      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c6:	4b3b      	ldr	r3, [pc, #236]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e067      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060d6:	4b37      	ldr	r3, [pc, #220]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f023 0203 	bic.w	r2, r3, #3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4934      	ldr	r1, [pc, #208]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060e8:	f7fd f99e 	bl	8003428 <HAL_GetTick>
 80060ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ee:	e00a      	b.n	8006106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f0:	f7fd f99a 	bl	8003428 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e04f      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006106:	4b2b      	ldr	r3, [pc, #172]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 020c 	and.w	r2, r3, #12
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	429a      	cmp	r2, r3
 8006116:	d1eb      	bne.n	80060f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006118:	4b25      	ldr	r3, [pc, #148]	@ (80061b0 <HAL_RCC_ClockConfig+0x1b8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d20c      	bcs.n	8006140 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006126:	4b22      	ldr	r3, [pc, #136]	@ (80061b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800612e:	4b20      	ldr	r3, [pc, #128]	@ (80061b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d001      	beq.n	8006140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e032      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d008      	beq.n	800615e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800614c:	4b19      	ldr	r3, [pc, #100]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	4916      	ldr	r1, [pc, #88]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800615a:	4313      	orrs	r3, r2
 800615c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800616a:	4b12      	ldr	r3, [pc, #72]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	490e      	ldr	r1, [pc, #56]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800617a:	4313      	orrs	r3, r2
 800617c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800617e:	f000 f821 	bl	80061c4 <HAL_RCC_GetSysClockFreq>
 8006182:	4602      	mov	r2, r0
 8006184:	4b0b      	ldr	r3, [pc, #44]	@ (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	091b      	lsrs	r3, r3, #4
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	490a      	ldr	r1, [pc, #40]	@ (80061b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006190:	5ccb      	ldrb	r3, [r1, r3]
 8006192:	fa22 f303 	lsr.w	r3, r2, r3
 8006196:	4a09      	ldr	r2, [pc, #36]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 8006198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800619a:	4b09      	ldr	r3, [pc, #36]	@ (80061c0 <HAL_RCC_ClockConfig+0x1c8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fd f8fe 	bl	80033a0 <HAL_InitTick>

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40023c00 	.word	0x40023c00
 80061b4:	40023800 	.word	0x40023800
 80061b8:	0800d134 	.word	0x0800d134
 80061bc:	2000017c 	.word	0x2000017c
 80061c0:	20000180 	.word	0x20000180

080061c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061c8:	b094      	sub	sp, #80	@ 0x50
 80061ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061dc:	4b79      	ldr	r3, [pc, #484]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 030c 	and.w	r3, r3, #12
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d00d      	beq.n	8006204 <HAL_RCC_GetSysClockFreq+0x40>
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	f200 80e1 	bhi.w	80063b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <HAL_RCC_GetSysClockFreq+0x34>
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d003      	beq.n	80061fe <HAL_RCC_GetSysClockFreq+0x3a>
 80061f6:	e0db      	b.n	80063b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061f8:	4b73      	ldr	r3, [pc, #460]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80061fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061fc:	e0db      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061fe:	4b72      	ldr	r3, [pc, #456]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006200:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006202:	e0d8      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006204:	4b6f      	ldr	r3, [pc, #444]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800620c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800620e:	4b6d      	ldr	r3, [pc, #436]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d063      	beq.n	80062e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800621a:	4b6a      	ldr	r3, [pc, #424]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	099b      	lsrs	r3, r3, #6
 8006220:	2200      	movs	r2, #0
 8006222:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006224:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622c:	633b      	str	r3, [r7, #48]	@ 0x30
 800622e:	2300      	movs	r3, #0
 8006230:	637b      	str	r3, [r7, #52]	@ 0x34
 8006232:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006236:	4622      	mov	r2, r4
 8006238:	462b      	mov	r3, r5
 800623a:	f04f 0000 	mov.w	r0, #0
 800623e:	f04f 0100 	mov.w	r1, #0
 8006242:	0159      	lsls	r1, r3, #5
 8006244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006248:	0150      	lsls	r0, r2, #5
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	4621      	mov	r1, r4
 8006250:	1a51      	subs	r1, r2, r1
 8006252:	6139      	str	r1, [r7, #16]
 8006254:	4629      	mov	r1, r5
 8006256:	eb63 0301 	sbc.w	r3, r3, r1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006268:	4659      	mov	r1, fp
 800626a:	018b      	lsls	r3, r1, #6
 800626c:	4651      	mov	r1, sl
 800626e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006272:	4651      	mov	r1, sl
 8006274:	018a      	lsls	r2, r1, #6
 8006276:	4651      	mov	r1, sl
 8006278:	ebb2 0801 	subs.w	r8, r2, r1
 800627c:	4659      	mov	r1, fp
 800627e:	eb63 0901 	sbc.w	r9, r3, r1
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	f04f 0300 	mov.w	r3, #0
 800628a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800628e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006296:	4690      	mov	r8, r2
 8006298:	4699      	mov	r9, r3
 800629a:	4623      	mov	r3, r4
 800629c:	eb18 0303 	adds.w	r3, r8, r3
 80062a0:	60bb      	str	r3, [r7, #8]
 80062a2:	462b      	mov	r3, r5
 80062a4:	eb49 0303 	adc.w	r3, r9, r3
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	f04f 0300 	mov.w	r3, #0
 80062b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062b6:	4629      	mov	r1, r5
 80062b8:	028b      	lsls	r3, r1, #10
 80062ba:	4621      	mov	r1, r4
 80062bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062c0:	4621      	mov	r1, r4
 80062c2:	028a      	lsls	r2, r1, #10
 80062c4:	4610      	mov	r0, r2
 80062c6:	4619      	mov	r1, r3
 80062c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ca:	2200      	movs	r2, #0
 80062cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062d4:	f7fa fcd8 	bl	8000c88 <__aeabi_uldivmod>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4613      	mov	r3, r2
 80062de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e0:	e058      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062e2:	4b38      	ldr	r3, [pc, #224]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	099b      	lsrs	r3, r3, #6
 80062e8:	2200      	movs	r2, #0
 80062ea:	4618      	mov	r0, r3
 80062ec:	4611      	mov	r1, r2
 80062ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062f2:	623b      	str	r3, [r7, #32]
 80062f4:	2300      	movs	r3, #0
 80062f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80062f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062fc:	4642      	mov	r2, r8
 80062fe:	464b      	mov	r3, r9
 8006300:	f04f 0000 	mov.w	r0, #0
 8006304:	f04f 0100 	mov.w	r1, #0
 8006308:	0159      	lsls	r1, r3, #5
 800630a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800630e:	0150      	lsls	r0, r2, #5
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4641      	mov	r1, r8
 8006316:	ebb2 0a01 	subs.w	sl, r2, r1
 800631a:	4649      	mov	r1, r9
 800631c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800632c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006330:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006334:	ebb2 040a 	subs.w	r4, r2, sl
 8006338:	eb63 050b 	sbc.w	r5, r3, fp
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	00eb      	lsls	r3, r5, #3
 8006346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800634a:	00e2      	lsls	r2, r4, #3
 800634c:	4614      	mov	r4, r2
 800634e:	461d      	mov	r5, r3
 8006350:	4643      	mov	r3, r8
 8006352:	18e3      	adds	r3, r4, r3
 8006354:	603b      	str	r3, [r7, #0]
 8006356:	464b      	mov	r3, r9
 8006358:	eb45 0303 	adc.w	r3, r5, r3
 800635c:	607b      	str	r3, [r7, #4]
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800636a:	4629      	mov	r1, r5
 800636c:	028b      	lsls	r3, r1, #10
 800636e:	4621      	mov	r1, r4
 8006370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006374:	4621      	mov	r1, r4
 8006376:	028a      	lsls	r2, r1, #10
 8006378:	4610      	mov	r0, r2
 800637a:	4619      	mov	r1, r3
 800637c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800637e:	2200      	movs	r2, #0
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	61fa      	str	r2, [r7, #28]
 8006384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006388:	f7fa fc7e 	bl	8000c88 <__aeabi_uldivmod>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4613      	mov	r3, r2
 8006392:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006394:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	0c1b      	lsrs	r3, r3, #16
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	3301      	adds	r3, #1
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80063a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063ae:	e002      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063b0:	4b05      	ldr	r3, [pc, #20]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80063b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3750      	adds	r7, #80	@ 0x50
 80063bc:	46bd      	mov	sp, r7
 80063be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063c2:	bf00      	nop
 80063c4:	40023800 	.word	0x40023800
 80063c8:	00f42400 	.word	0x00f42400

080063cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063d0:	4b03      	ldr	r3, [pc, #12]	@ (80063e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80063d2:	681b      	ldr	r3, [r3, #0]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	2000017c 	.word	0x2000017c

080063e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063e8:	f7ff fff0 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 80063ec:	4602      	mov	r2, r0
 80063ee:	4b05      	ldr	r3, [pc, #20]	@ (8006404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	0a9b      	lsrs	r3, r3, #10
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	4903      	ldr	r1, [pc, #12]	@ (8006408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063fa:	5ccb      	ldrb	r3, [r1, r3]
 80063fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006400:	4618      	mov	r0, r3
 8006402:	bd80      	pop	{r7, pc}
 8006404:	40023800 	.word	0x40023800
 8006408:	0800d144 	.word	0x0800d144

0800640c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006410:	f7ff ffdc 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 8006414:	4602      	mov	r2, r0
 8006416:	4b05      	ldr	r3, [pc, #20]	@ (800642c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	0b5b      	lsrs	r3, r3, #13
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	4903      	ldr	r1, [pc, #12]	@ (8006430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006422:	5ccb      	ldrb	r3, [r1, r3]
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40023800 	.word	0x40023800
 8006430:	0800d144 	.word	0x0800d144

08006434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e041      	b.n	80064ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fc fd88 	bl	8002f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f000 f95e 	bl	8006734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d001      	beq.n	80064ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e046      	b.n	800657a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a23      	ldr	r2, [pc, #140]	@ (8006588 <HAL_TIM_Base_Start+0xb4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d022      	beq.n	8006544 <HAL_TIM_Base_Start+0x70>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006506:	d01d      	beq.n	8006544 <HAL_TIM_Base_Start+0x70>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1f      	ldr	r2, [pc, #124]	@ (800658c <HAL_TIM_Base_Start+0xb8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d018      	beq.n	8006544 <HAL_TIM_Base_Start+0x70>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1e      	ldr	r2, [pc, #120]	@ (8006590 <HAL_TIM_Base_Start+0xbc>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d013      	beq.n	8006544 <HAL_TIM_Base_Start+0x70>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1c      	ldr	r2, [pc, #112]	@ (8006594 <HAL_TIM_Base_Start+0xc0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00e      	beq.n	8006544 <HAL_TIM_Base_Start+0x70>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1b      	ldr	r2, [pc, #108]	@ (8006598 <HAL_TIM_Base_Start+0xc4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d009      	beq.n	8006544 <HAL_TIM_Base_Start+0x70>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a19      	ldr	r2, [pc, #100]	@ (800659c <HAL_TIM_Base_Start+0xc8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d004      	beq.n	8006544 <HAL_TIM_Base_Start+0x70>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a18      	ldr	r2, [pc, #96]	@ (80065a0 <HAL_TIM_Base_Start+0xcc>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d111      	bne.n	8006568 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b06      	cmp	r3, #6
 8006554:	d010      	beq.n	8006578 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0201 	orr.w	r2, r2, #1
 8006564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006566:	e007      	b.n	8006578 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40010400 	.word	0x40010400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40001800 	.word	0x40001800

080065a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_TIM_ConfigClockSource+0x1c>
 80065bc:	2302      	movs	r3, #2
 80065be:	e0b4      	b.n	800672a <HAL_TIM_ConfigClockSource+0x186>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80065de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f8:	d03e      	beq.n	8006678 <HAL_TIM_ConfigClockSource+0xd4>
 80065fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065fe:	f200 8087 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x16c>
 8006602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006606:	f000 8086 	beq.w	8006716 <HAL_TIM_ConfigClockSource+0x172>
 800660a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800660e:	d87f      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x16c>
 8006610:	2b70      	cmp	r3, #112	@ 0x70
 8006612:	d01a      	beq.n	800664a <HAL_TIM_ConfigClockSource+0xa6>
 8006614:	2b70      	cmp	r3, #112	@ 0x70
 8006616:	d87b      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x16c>
 8006618:	2b60      	cmp	r3, #96	@ 0x60
 800661a:	d050      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x11a>
 800661c:	2b60      	cmp	r3, #96	@ 0x60
 800661e:	d877      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x16c>
 8006620:	2b50      	cmp	r3, #80	@ 0x50
 8006622:	d03c      	beq.n	800669e <HAL_TIM_ConfigClockSource+0xfa>
 8006624:	2b50      	cmp	r3, #80	@ 0x50
 8006626:	d873      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x16c>
 8006628:	2b40      	cmp	r3, #64	@ 0x40
 800662a:	d058      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x13a>
 800662c:	2b40      	cmp	r3, #64	@ 0x40
 800662e:	d86f      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x16c>
 8006630:	2b30      	cmp	r3, #48	@ 0x30
 8006632:	d064      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x15a>
 8006634:	2b30      	cmp	r3, #48	@ 0x30
 8006636:	d86b      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x16c>
 8006638:	2b20      	cmp	r3, #32
 800663a:	d060      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x15a>
 800663c:	2b20      	cmp	r3, #32
 800663e:	d867      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x16c>
 8006640:	2b00      	cmp	r3, #0
 8006642:	d05c      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x15a>
 8006644:	2b10      	cmp	r3, #16
 8006646:	d05a      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x15a>
 8006648:	e062      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800665a:	f000 f991 	bl	8006980 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800666c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	609a      	str	r2, [r3, #8]
      break;
 8006676:	e04f      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006688:	f000 f97a 	bl	8006980 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800669a:	609a      	str	r2, [r3, #8]
      break;
 800669c:	e03c      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066aa:	461a      	mov	r2, r3
 80066ac:	f000 f8ee 	bl	800688c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2150      	movs	r1, #80	@ 0x50
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 f947 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 80066bc:	e02c      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ca:	461a      	mov	r2, r3
 80066cc:	f000 f90d 	bl	80068ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2160      	movs	r1, #96	@ 0x60
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 f937 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 80066dc:	e01c      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ea:	461a      	mov	r2, r3
 80066ec:	f000 f8ce 	bl	800688c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2140      	movs	r1, #64	@ 0x40
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 f927 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 80066fc:	e00c      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f000 f91e 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 800670e:	e003      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	73fb      	strb	r3, [r7, #15]
      break;
 8006714:	e000      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006728:	7bfb      	ldrb	r3, [r7, #15]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a46      	ldr	r2, [pc, #280]	@ (8006860 <TIM_Base_SetConfig+0x12c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d013      	beq.n	8006774 <TIM_Base_SetConfig+0x40>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006752:	d00f      	beq.n	8006774 <TIM_Base_SetConfig+0x40>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a43      	ldr	r2, [pc, #268]	@ (8006864 <TIM_Base_SetConfig+0x130>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00b      	beq.n	8006774 <TIM_Base_SetConfig+0x40>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a42      	ldr	r2, [pc, #264]	@ (8006868 <TIM_Base_SetConfig+0x134>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d007      	beq.n	8006774 <TIM_Base_SetConfig+0x40>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a41      	ldr	r2, [pc, #260]	@ (800686c <TIM_Base_SetConfig+0x138>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_Base_SetConfig+0x40>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a40      	ldr	r2, [pc, #256]	@ (8006870 <TIM_Base_SetConfig+0x13c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d108      	bne.n	8006786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800677a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a35      	ldr	r2, [pc, #212]	@ (8006860 <TIM_Base_SetConfig+0x12c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d02b      	beq.n	80067e6 <TIM_Base_SetConfig+0xb2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006794:	d027      	beq.n	80067e6 <TIM_Base_SetConfig+0xb2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a32      	ldr	r2, [pc, #200]	@ (8006864 <TIM_Base_SetConfig+0x130>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d023      	beq.n	80067e6 <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a31      	ldr	r2, [pc, #196]	@ (8006868 <TIM_Base_SetConfig+0x134>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d01f      	beq.n	80067e6 <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a30      	ldr	r2, [pc, #192]	@ (800686c <TIM_Base_SetConfig+0x138>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d01b      	beq.n	80067e6 <TIM_Base_SetConfig+0xb2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a2f      	ldr	r2, [pc, #188]	@ (8006870 <TIM_Base_SetConfig+0x13c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d017      	beq.n	80067e6 <TIM_Base_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006874 <TIM_Base_SetConfig+0x140>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <TIM_Base_SetConfig+0xb2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006878 <TIM_Base_SetConfig+0x144>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00f      	beq.n	80067e6 <TIM_Base_SetConfig+0xb2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a2c      	ldr	r2, [pc, #176]	@ (800687c <TIM_Base_SetConfig+0x148>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00b      	beq.n	80067e6 <TIM_Base_SetConfig+0xb2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006880 <TIM_Base_SetConfig+0x14c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d007      	beq.n	80067e6 <TIM_Base_SetConfig+0xb2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006884 <TIM_Base_SetConfig+0x150>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d003      	beq.n	80067e6 <TIM_Base_SetConfig+0xb2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a29      	ldr	r2, [pc, #164]	@ (8006888 <TIM_Base_SetConfig+0x154>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d108      	bne.n	80067f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a10      	ldr	r2, [pc, #64]	@ (8006860 <TIM_Base_SetConfig+0x12c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d003      	beq.n	800682c <TIM_Base_SetConfig+0xf8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a12      	ldr	r2, [pc, #72]	@ (8006870 <TIM_Base_SetConfig+0x13c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d103      	bne.n	8006834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b01      	cmp	r3, #1
 8006844:	d105      	bne.n	8006852 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f023 0201 	bic.w	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	611a      	str	r2, [r3, #16]
  }
}
 8006852:	bf00      	nop
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40010000 	.word	0x40010000
 8006864:	40000400 	.word	0x40000400
 8006868:	40000800 	.word	0x40000800
 800686c:	40000c00 	.word	0x40000c00
 8006870:	40010400 	.word	0x40010400
 8006874:	40014000 	.word	0x40014000
 8006878:	40014400 	.word	0x40014400
 800687c:	40014800 	.word	0x40014800
 8006880:	40001800 	.word	0x40001800
 8006884:	40001c00 	.word	0x40001c00
 8006888:	40002000 	.word	0x40002000

0800688c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f023 0201 	bic.w	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f023 030a 	bic.w	r3, r3, #10
 80068c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b087      	sub	sp, #28
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f023 0210 	bic.w	r2, r3, #16
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006914:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	031b      	lsls	r3, r3, #12
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006926:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	f043 0307 	orr.w	r3, r3, #7
 800696c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	609a      	str	r2, [r3, #8]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800699a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	021a      	lsls	r2, r3, #8
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	609a      	str	r2, [r3, #8]
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d101      	bne.n	80069d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069d4:	2302      	movs	r3, #2
 80069d6:	e05a      	b.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a21      	ldr	r2, [pc, #132]	@ (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d022      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a24:	d01d      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d018      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d013      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00e      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a18      	ldr	r2, [pc, #96]	@ (8006aac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d009      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a17      	ldr	r2, [pc, #92]	@ (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d004      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a15      	ldr	r2, [pc, #84]	@ (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d10c      	bne.n	8006a7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40010000 	.word	0x40010000
 8006aa0:	40000400 	.word	0x40000400
 8006aa4:	40000800 	.word	0x40000800
 8006aa8:	40000c00 	.word	0x40000c00
 8006aac:	40010400 	.word	0x40010400
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40001800 	.word	0x40001800

08006ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e042      	b.n	8006b50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fc fa68 	bl	8002fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2224      	movs	r2, #36	@ 0x24
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fd11 	bl	8007524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	691a      	ldr	r2, [r3, #16]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	695a      	ldr	r2, [r3, #20]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68da      	ldr	r2, [r3, #12]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08c      	sub	sp, #48	@ 0x30
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	d14a      	bne.n	8006c08 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e043      	b.n	8006c0a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2201      	movs	r2, #1
 8006b86:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006b8e:	88fb      	ldrh	r3, [r7, #6]
 8006b90:	461a      	mov	r2, r3
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 faed 	bl	8007174 <UART_Start_Receive_IT>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d12c      	bne.n	8006c02 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d125      	bne.n	8006bfc <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	613b      	str	r3, [r7, #16]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	330c      	adds	r3, #12
 8006bcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f043 0310 	orr.w	r3, r3, #16
 8006bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006be6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6a39      	ldr	r1, [r7, #32]
 8006bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e5      	bne.n	8006bc6 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8006bfa:	e002      	b.n	8006c02 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006c02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c06:	e000      	b.n	8006c0a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006c08:	2302      	movs	r3, #2
  }
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3730      	adds	r7, #48	@ 0x30
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b0ba      	sub	sp, #232	@ 0xe8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10f      	bne.n	8006c7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d009      	beq.n	8006c7a <HAL_UART_IRQHandler+0x66>
 8006c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fb97 	bl	80073a6 <UART_Receive_IT>
      return;
 8006c78:	e25b      	b.n	8007132 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 80de 	beq.w	8006e40 <HAL_UART_IRQHandler+0x22c>
 8006c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d106      	bne.n	8006c9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c94:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80d1 	beq.w	8006e40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00b      	beq.n	8006cc2 <HAL_UART_IRQHandler+0xae>
 8006caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cba:	f043 0201 	orr.w	r2, r3, #1
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00b      	beq.n	8006ce6 <HAL_UART_IRQHandler+0xd2>
 8006cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cde:	f043 0202 	orr.w	r2, r3, #2
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00b      	beq.n	8006d0a <HAL_UART_IRQHandler+0xf6>
 8006cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d02:	f043 0204 	orr.w	r2, r3, #4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d011      	beq.n	8006d3a <HAL_UART_IRQHandler+0x126>
 8006d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d105      	bne.n	8006d2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d005      	beq.n	8006d3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d32:	f043 0208 	orr.w	r2, r3, #8
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 81f2 	beq.w	8007128 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d48:	f003 0320 	and.w	r3, r3, #32
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d008      	beq.n	8006d62 <HAL_UART_IRQHandler+0x14e>
 8006d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fb22 	bl	80073a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6c:	2b40      	cmp	r3, #64	@ 0x40
 8006d6e:	bf0c      	ite	eq
 8006d70:	2301      	moveq	r3, #1
 8006d72:	2300      	movne	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d7e:	f003 0308 	and.w	r3, r3, #8
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d103      	bne.n	8006d8e <HAL_UART_IRQHandler+0x17a>
 8006d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d04f      	beq.n	8006e2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa2a 	bl	80071e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9e:	2b40      	cmp	r3, #64	@ 0x40
 8006da0:	d141      	bne.n	8006e26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3314      	adds	r3, #20
 8006da8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006dbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3314      	adds	r3, #20
 8006dca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006dce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006dda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1d9      	bne.n	8006da2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d013      	beq.n	8006e1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfa:	4a7e      	ldr	r2, [pc, #504]	@ (8006ff4 <HAL_UART_IRQHandler+0x3e0>)
 8006dfc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fd fb4d 	bl	80044a2 <HAL_DMA_Abort_IT>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d016      	beq.n	8006e3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1c:	e00e      	b.n	8006e3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f99e 	bl	8007160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e24:	e00a      	b.n	8006e3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f99a 	bl	8007160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2c:	e006      	b.n	8006e3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f996 	bl	8007160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006e3a:	e175      	b.n	8007128 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e3c:	bf00      	nop
    return;
 8006e3e:	e173      	b.n	8007128 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	f040 814f 	bne.w	80070e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 8148 	beq.w	80070e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e5c:	f003 0310 	and.w	r3, r3, #16
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 8141 	beq.w	80070e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e66:	2300      	movs	r3, #0
 8006e68:	60bb      	str	r3, [r7, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60bb      	str	r3, [r7, #8]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	60bb      	str	r3, [r7, #8]
 8006e7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e86:	2b40      	cmp	r3, #64	@ 0x40
 8006e88:	f040 80b6 	bne.w	8006ff8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8145 	beq.w	800712c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	f080 813e 	bcs.w	800712c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006eb6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ec2:	f000 8088 	beq.w	8006fd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	330c      	adds	r3, #12
 8006ecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006ef2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ef6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006efe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1d9      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3314      	adds	r3, #20
 8006f18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f24:	f023 0301 	bic.w	r3, r3, #1
 8006f28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3314      	adds	r3, #20
 8006f32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e1      	bne.n	8006f12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3314      	adds	r3, #20
 8006f54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3314      	adds	r3, #20
 8006f6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e3      	bne.n	8006f4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006fa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fa6:	f023 0310 	bic.w	r3, r3, #16
 8006faa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	330c      	adds	r3, #12
 8006fb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006fb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006fba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e3      	bne.n	8006f94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fd f9f6 	bl	80043c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7fb fde1 	bl	8002bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ff2:	e09b      	b.n	800712c <HAL_UART_IRQHandler+0x518>
 8006ff4:	080072af 	.word	0x080072af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007000:	b29b      	uxth	r3, r3
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 808e 	beq.w	8007130 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 8089 	beq.w	8007130 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	330c      	adds	r3, #12
 8007024:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800702e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007034:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	330c      	adds	r3, #12
 800703e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007042:	647a      	str	r2, [r7, #68]	@ 0x44
 8007044:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007048:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e3      	bne.n	800701e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3314      	adds	r3, #20
 800705c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	623b      	str	r3, [r7, #32]
   return(result);
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3314      	adds	r3, #20
 8007076:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800707a:	633a      	str	r2, [r7, #48]	@ 0x30
 800707c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e3      	bne.n	8007056 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0310 	bic.w	r3, r3, #16
 80070b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	330c      	adds	r3, #12
 80070bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80070c0:	61fa      	str	r2, [r7, #28]
 80070c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	69b9      	ldr	r1, [r7, #24]
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	617b      	str	r3, [r7, #20]
   return(result);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e3      	bne.n	800709c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7fb fd67 	bl	8002bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070e6:	e023      	b.n	8007130 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d009      	beq.n	8007108 <HAL_UART_IRQHandler+0x4f4>
 80070f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f8e8 	bl	80072d6 <UART_Transmit_IT>
    return;
 8007106:	e014      	b.n	8007132 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800710c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00e      	beq.n	8007132 <HAL_UART_IRQHandler+0x51e>
 8007114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800711c:	2b00      	cmp	r3, #0
 800711e:	d008      	beq.n	8007132 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f928 	bl	8007376 <UART_EndTransmit_IT>
    return;
 8007126:	e004      	b.n	8007132 <HAL_UART_IRQHandler+0x51e>
    return;
 8007128:	bf00      	nop
 800712a:	e002      	b.n	8007132 <HAL_UART_IRQHandler+0x51e>
      return;
 800712c:	bf00      	nop
 800712e:	e000      	b.n	8007132 <HAL_UART_IRQHandler+0x51e>
      return;
 8007130:	bf00      	nop
  }
}
 8007132:	37e8      	adds	r7, #232	@ 0xe8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	4613      	mov	r3, r2
 8007180:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	88fa      	ldrh	r2, [r7, #6]
 800718c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	88fa      	ldrh	r2, [r7, #6]
 8007192:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2222      	movs	r2, #34	@ 0x22
 800719e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d007      	beq.n	80071ba <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68da      	ldr	r2, [r3, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695a      	ldr	r2, [r3, #20]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f042 0201 	orr.w	r2, r2, #1
 80071c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0220 	orr.w	r2, r2, #32
 80071d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b095      	sub	sp, #84	@ 0x54
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	330c      	adds	r3, #12
 80071f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	330c      	adds	r3, #12
 800720e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007210:	643a      	str	r2, [r7, #64]	@ 0x40
 8007212:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800721e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e5      	bne.n	80071f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3314      	adds	r3, #20
 800722a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	61fb      	str	r3, [r7, #28]
   return(result);
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	f023 0301 	bic.w	r3, r3, #1
 800723a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3314      	adds	r3, #20
 8007242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007244:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007246:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800724a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800724c:	e841 2300 	strex	r3, r2, [r1]
 8007250:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e5      	bne.n	8007224 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800725c:	2b01      	cmp	r3, #1
 800725e:	d119      	bne.n	8007294 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	330c      	adds	r3, #12
 8007266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f023 0310 	bic.w	r3, r3, #16
 8007276:	647b      	str	r3, [r7, #68]	@ 0x44
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	330c      	adds	r3, #12
 800727e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007280:	61ba      	str	r2, [r7, #24]
 8007282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	6979      	ldr	r1, [r7, #20]
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	613b      	str	r3, [r7, #16]
   return(result);
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e5      	bne.n	8007260 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2220      	movs	r2, #32
 8007298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80072a2:	bf00      	nop
 80072a4:	3754      	adds	r7, #84	@ 0x54
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f7ff ff49 	bl	8007160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ce:	bf00      	nop
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b085      	sub	sp, #20
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b21      	cmp	r3, #33	@ 0x21
 80072e8:	d13e      	bne.n	8007368 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f2:	d114      	bne.n	800731e <UART_Transmit_IT+0x48>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d110      	bne.n	800731e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a1b      	ldr	r3, [r3, #32]
 8007300:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007310:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	1c9a      	adds	r2, r3, #2
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	621a      	str	r2, [r3, #32]
 800731c:	e008      	b.n	8007330 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	1c59      	adds	r1, r3, #1
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6211      	str	r1, [r2, #32]
 8007328:	781a      	ldrb	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007334:	b29b      	uxth	r3, r3
 8007336:	3b01      	subs	r3, #1
 8007338:	b29b      	uxth	r3, r3
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	4619      	mov	r1, r3
 800733e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10f      	bne.n	8007364 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007352:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68da      	ldr	r2, [r3, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007362:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007364:	2300      	movs	r3, #0
 8007366:	e000      	b.n	800736a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007368:	2302      	movs	r3, #2
  }
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b082      	sub	sp, #8
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800738c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2220      	movs	r2, #32
 8007392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7ff fece 	bl	8007138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b08c      	sub	sp, #48	@ 0x30
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b22      	cmp	r3, #34	@ 0x22
 80073b8:	f040 80ae 	bne.w	8007518 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073c4:	d117      	bne.n	80073f6 <UART_Receive_IT+0x50>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d113      	bne.n	80073f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ee:	1c9a      	adds	r2, r3, #2
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80073f4:	e026      	b.n	8007444 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007408:	d007      	beq.n	800741a <UART_Receive_IT+0x74>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <UART_Receive_IT+0x82>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	b2da      	uxtb	r2, r3
 8007422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	e008      	b.n	800743a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007434:	b2da      	uxtb	r2, r3
 8007436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007438:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007448:	b29b      	uxth	r3, r3
 800744a:	3b01      	subs	r3, #1
 800744c:	b29b      	uxth	r3, r3
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4619      	mov	r1, r3
 8007452:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007454:	2b00      	cmp	r3, #0
 8007456:	d15d      	bne.n	8007514 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0220 	bic.w	r2, r2, #32
 8007466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007476:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	695a      	ldr	r2, [r3, #20]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0201 	bic.w	r2, r2, #1
 8007486:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749a:	2b01      	cmp	r3, #1
 800749c:	d135      	bne.n	800750a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	330c      	adds	r3, #12
 80074aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	613b      	str	r3, [r7, #16]
   return(result);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f023 0310 	bic.w	r3, r3, #16
 80074ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	330c      	adds	r3, #12
 80074c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074c4:	623a      	str	r2, [r7, #32]
 80074c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	69f9      	ldr	r1, [r7, #28]
 80074ca:	6a3a      	ldr	r2, [r7, #32]
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e5      	bne.n	80074a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0310 	and.w	r3, r3, #16
 80074e2:	2b10      	cmp	r3, #16
 80074e4:	d10a      	bne.n	80074fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7fb fb56 	bl	8002bb4 <HAL_UARTEx_RxEventCallback>
 8007508:	e002      	b.n	8007510 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff fe1e 	bl	800714c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	e002      	b.n	800751a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	e000      	b.n	800751a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007518:	2302      	movs	r3, #2
  }
}
 800751a:	4618      	mov	r0, r3
 800751c:	3730      	adds	r7, #48	@ 0x30
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
	...

08007524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007528:	b0c0      	sub	sp, #256	@ 0x100
 800752a:	af00      	add	r7, sp, #0
 800752c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007540:	68d9      	ldr	r1, [r3, #12]
 8007542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	ea40 0301 	orr.w	r3, r0, r1
 800754c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800754e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	431a      	orrs	r2, r3
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	431a      	orrs	r2, r3
 8007564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	4313      	orrs	r3, r2
 800756c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800757c:	f021 010c 	bic.w	r1, r1, #12
 8007580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800758a:	430b      	orrs	r3, r1
 800758c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800758e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800759a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800759e:	6999      	ldr	r1, [r3, #24]
 80075a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	ea40 0301 	orr.w	r3, r0, r1
 80075aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	4b8f      	ldr	r3, [pc, #572]	@ (80077f0 <UART_SetConfig+0x2cc>)
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d005      	beq.n	80075c4 <UART_SetConfig+0xa0>
 80075b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	4b8d      	ldr	r3, [pc, #564]	@ (80077f4 <UART_SetConfig+0x2d0>)
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d104      	bne.n	80075ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075c4:	f7fe ff22 	bl	800640c <HAL_RCC_GetPCLK2Freq>
 80075c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80075cc:	e003      	b.n	80075d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075ce:	f7fe ff09 	bl	80063e4 <HAL_RCC_GetPCLK1Freq>
 80075d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075e0:	f040 810c 	bne.w	80077fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075e8:	2200      	movs	r2, #0
 80075ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80075ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80075f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80075f6:	4622      	mov	r2, r4
 80075f8:	462b      	mov	r3, r5
 80075fa:	1891      	adds	r1, r2, r2
 80075fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80075fe:	415b      	adcs	r3, r3
 8007600:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007602:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007606:	4621      	mov	r1, r4
 8007608:	eb12 0801 	adds.w	r8, r2, r1
 800760c:	4629      	mov	r1, r5
 800760e:	eb43 0901 	adc.w	r9, r3, r1
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	f04f 0300 	mov.w	r3, #0
 800761a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800761e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007626:	4690      	mov	r8, r2
 8007628:	4699      	mov	r9, r3
 800762a:	4623      	mov	r3, r4
 800762c:	eb18 0303 	adds.w	r3, r8, r3
 8007630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007634:	462b      	mov	r3, r5
 8007636:	eb49 0303 	adc.w	r3, r9, r3
 800763a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800763e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800764a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800764e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007652:	460b      	mov	r3, r1
 8007654:	18db      	adds	r3, r3, r3
 8007656:	653b      	str	r3, [r7, #80]	@ 0x50
 8007658:	4613      	mov	r3, r2
 800765a:	eb42 0303 	adc.w	r3, r2, r3
 800765e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007660:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007664:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007668:	f7f9 fb0e 	bl	8000c88 <__aeabi_uldivmod>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4b61      	ldr	r3, [pc, #388]	@ (80077f8 <UART_SetConfig+0x2d4>)
 8007672:	fba3 2302 	umull	r2, r3, r3, r2
 8007676:	095b      	lsrs	r3, r3, #5
 8007678:	011c      	lsls	r4, r3, #4
 800767a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800767e:	2200      	movs	r2, #0
 8007680:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007684:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007688:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800768c:	4642      	mov	r2, r8
 800768e:	464b      	mov	r3, r9
 8007690:	1891      	adds	r1, r2, r2
 8007692:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007694:	415b      	adcs	r3, r3
 8007696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007698:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800769c:	4641      	mov	r1, r8
 800769e:	eb12 0a01 	adds.w	sl, r2, r1
 80076a2:	4649      	mov	r1, r9
 80076a4:	eb43 0b01 	adc.w	fp, r3, r1
 80076a8:	f04f 0200 	mov.w	r2, #0
 80076ac:	f04f 0300 	mov.w	r3, #0
 80076b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80076b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80076b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076bc:	4692      	mov	sl, r2
 80076be:	469b      	mov	fp, r3
 80076c0:	4643      	mov	r3, r8
 80076c2:	eb1a 0303 	adds.w	r3, sl, r3
 80076c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076ca:	464b      	mov	r3, r9
 80076cc:	eb4b 0303 	adc.w	r3, fp, r3
 80076d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80076e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80076e8:	460b      	mov	r3, r1
 80076ea:	18db      	adds	r3, r3, r3
 80076ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80076ee:	4613      	mov	r3, r2
 80076f0:	eb42 0303 	adc.w	r3, r2, r3
 80076f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80076f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80076fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80076fe:	f7f9 fac3 	bl	8000c88 <__aeabi_uldivmod>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4611      	mov	r1, r2
 8007708:	4b3b      	ldr	r3, [pc, #236]	@ (80077f8 <UART_SetConfig+0x2d4>)
 800770a:	fba3 2301 	umull	r2, r3, r3, r1
 800770e:	095b      	lsrs	r3, r3, #5
 8007710:	2264      	movs	r2, #100	@ 0x64
 8007712:	fb02 f303 	mul.w	r3, r2, r3
 8007716:	1acb      	subs	r3, r1, r3
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800771e:	4b36      	ldr	r3, [pc, #216]	@ (80077f8 <UART_SetConfig+0x2d4>)
 8007720:	fba3 2302 	umull	r2, r3, r3, r2
 8007724:	095b      	lsrs	r3, r3, #5
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800772c:	441c      	add	r4, r3
 800772e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007732:	2200      	movs	r2, #0
 8007734:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007738:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800773c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007740:	4642      	mov	r2, r8
 8007742:	464b      	mov	r3, r9
 8007744:	1891      	adds	r1, r2, r2
 8007746:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007748:	415b      	adcs	r3, r3
 800774a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800774c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007750:	4641      	mov	r1, r8
 8007752:	1851      	adds	r1, r2, r1
 8007754:	6339      	str	r1, [r7, #48]	@ 0x30
 8007756:	4649      	mov	r1, r9
 8007758:	414b      	adcs	r3, r1
 800775a:	637b      	str	r3, [r7, #52]	@ 0x34
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	f04f 0300 	mov.w	r3, #0
 8007764:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007768:	4659      	mov	r1, fp
 800776a:	00cb      	lsls	r3, r1, #3
 800776c:	4651      	mov	r1, sl
 800776e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007772:	4651      	mov	r1, sl
 8007774:	00ca      	lsls	r2, r1, #3
 8007776:	4610      	mov	r0, r2
 8007778:	4619      	mov	r1, r3
 800777a:	4603      	mov	r3, r0
 800777c:	4642      	mov	r2, r8
 800777e:	189b      	adds	r3, r3, r2
 8007780:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007784:	464b      	mov	r3, r9
 8007786:	460a      	mov	r2, r1
 8007788:	eb42 0303 	adc.w	r3, r2, r3
 800778c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800779c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80077a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80077a4:	460b      	mov	r3, r1
 80077a6:	18db      	adds	r3, r3, r3
 80077a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077aa:	4613      	mov	r3, r2
 80077ac:	eb42 0303 	adc.w	r3, r2, r3
 80077b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80077b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80077ba:	f7f9 fa65 	bl	8000c88 <__aeabi_uldivmod>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4b0d      	ldr	r3, [pc, #52]	@ (80077f8 <UART_SetConfig+0x2d4>)
 80077c4:	fba3 1302 	umull	r1, r3, r3, r2
 80077c8:	095b      	lsrs	r3, r3, #5
 80077ca:	2164      	movs	r1, #100	@ 0x64
 80077cc:	fb01 f303 	mul.w	r3, r1, r3
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	3332      	adds	r3, #50	@ 0x32
 80077d6:	4a08      	ldr	r2, [pc, #32]	@ (80077f8 <UART_SetConfig+0x2d4>)
 80077d8:	fba2 2303 	umull	r2, r3, r2, r3
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	f003 0207 	and.w	r2, r3, #7
 80077e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4422      	add	r2, r4
 80077ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077ec:	e106      	b.n	80079fc <UART_SetConfig+0x4d8>
 80077ee:	bf00      	nop
 80077f0:	40011000 	.word	0x40011000
 80077f4:	40011400 	.word	0x40011400
 80077f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007800:	2200      	movs	r2, #0
 8007802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007806:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800780a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800780e:	4642      	mov	r2, r8
 8007810:	464b      	mov	r3, r9
 8007812:	1891      	adds	r1, r2, r2
 8007814:	6239      	str	r1, [r7, #32]
 8007816:	415b      	adcs	r3, r3
 8007818:	627b      	str	r3, [r7, #36]	@ 0x24
 800781a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800781e:	4641      	mov	r1, r8
 8007820:	1854      	adds	r4, r2, r1
 8007822:	4649      	mov	r1, r9
 8007824:	eb43 0501 	adc.w	r5, r3, r1
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	f04f 0300 	mov.w	r3, #0
 8007830:	00eb      	lsls	r3, r5, #3
 8007832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007836:	00e2      	lsls	r2, r4, #3
 8007838:	4614      	mov	r4, r2
 800783a:	461d      	mov	r5, r3
 800783c:	4643      	mov	r3, r8
 800783e:	18e3      	adds	r3, r4, r3
 8007840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007844:	464b      	mov	r3, r9
 8007846:	eb45 0303 	adc.w	r3, r5, r3
 800784a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800784e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800785a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800785e:	f04f 0200 	mov.w	r2, #0
 8007862:	f04f 0300 	mov.w	r3, #0
 8007866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800786a:	4629      	mov	r1, r5
 800786c:	008b      	lsls	r3, r1, #2
 800786e:	4621      	mov	r1, r4
 8007870:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007874:	4621      	mov	r1, r4
 8007876:	008a      	lsls	r2, r1, #2
 8007878:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800787c:	f7f9 fa04 	bl	8000c88 <__aeabi_uldivmod>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	4b60      	ldr	r3, [pc, #384]	@ (8007a08 <UART_SetConfig+0x4e4>)
 8007886:	fba3 2302 	umull	r2, r3, r3, r2
 800788a:	095b      	lsrs	r3, r3, #5
 800788c:	011c      	lsls	r4, r3, #4
 800788e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007892:	2200      	movs	r2, #0
 8007894:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007898:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800789c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80078a0:	4642      	mov	r2, r8
 80078a2:	464b      	mov	r3, r9
 80078a4:	1891      	adds	r1, r2, r2
 80078a6:	61b9      	str	r1, [r7, #24]
 80078a8:	415b      	adcs	r3, r3
 80078aa:	61fb      	str	r3, [r7, #28]
 80078ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078b0:	4641      	mov	r1, r8
 80078b2:	1851      	adds	r1, r2, r1
 80078b4:	6139      	str	r1, [r7, #16]
 80078b6:	4649      	mov	r1, r9
 80078b8:	414b      	adcs	r3, r1
 80078ba:	617b      	str	r3, [r7, #20]
 80078bc:	f04f 0200 	mov.w	r2, #0
 80078c0:	f04f 0300 	mov.w	r3, #0
 80078c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078c8:	4659      	mov	r1, fp
 80078ca:	00cb      	lsls	r3, r1, #3
 80078cc:	4651      	mov	r1, sl
 80078ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078d2:	4651      	mov	r1, sl
 80078d4:	00ca      	lsls	r2, r1, #3
 80078d6:	4610      	mov	r0, r2
 80078d8:	4619      	mov	r1, r3
 80078da:	4603      	mov	r3, r0
 80078dc:	4642      	mov	r2, r8
 80078de:	189b      	adds	r3, r3, r2
 80078e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078e4:	464b      	mov	r3, r9
 80078e6:	460a      	mov	r2, r1
 80078e8:	eb42 0303 	adc.w	r3, r2, r3
 80078ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	f04f 0300 	mov.w	r3, #0
 8007904:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007908:	4649      	mov	r1, r9
 800790a:	008b      	lsls	r3, r1, #2
 800790c:	4641      	mov	r1, r8
 800790e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007912:	4641      	mov	r1, r8
 8007914:	008a      	lsls	r2, r1, #2
 8007916:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800791a:	f7f9 f9b5 	bl	8000c88 <__aeabi_uldivmod>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4611      	mov	r1, r2
 8007924:	4b38      	ldr	r3, [pc, #224]	@ (8007a08 <UART_SetConfig+0x4e4>)
 8007926:	fba3 2301 	umull	r2, r3, r3, r1
 800792a:	095b      	lsrs	r3, r3, #5
 800792c:	2264      	movs	r2, #100	@ 0x64
 800792e:	fb02 f303 	mul.w	r3, r2, r3
 8007932:	1acb      	subs	r3, r1, r3
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	3332      	adds	r3, #50	@ 0x32
 8007938:	4a33      	ldr	r2, [pc, #204]	@ (8007a08 <UART_SetConfig+0x4e4>)
 800793a:	fba2 2303 	umull	r2, r3, r2, r3
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007944:	441c      	add	r4, r3
 8007946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800794a:	2200      	movs	r2, #0
 800794c:	673b      	str	r3, [r7, #112]	@ 0x70
 800794e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007950:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007954:	4642      	mov	r2, r8
 8007956:	464b      	mov	r3, r9
 8007958:	1891      	adds	r1, r2, r2
 800795a:	60b9      	str	r1, [r7, #8]
 800795c:	415b      	adcs	r3, r3
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007964:	4641      	mov	r1, r8
 8007966:	1851      	adds	r1, r2, r1
 8007968:	6039      	str	r1, [r7, #0]
 800796a:	4649      	mov	r1, r9
 800796c:	414b      	adcs	r3, r1
 800796e:	607b      	str	r3, [r7, #4]
 8007970:	f04f 0200 	mov.w	r2, #0
 8007974:	f04f 0300 	mov.w	r3, #0
 8007978:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800797c:	4659      	mov	r1, fp
 800797e:	00cb      	lsls	r3, r1, #3
 8007980:	4651      	mov	r1, sl
 8007982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007986:	4651      	mov	r1, sl
 8007988:	00ca      	lsls	r2, r1, #3
 800798a:	4610      	mov	r0, r2
 800798c:	4619      	mov	r1, r3
 800798e:	4603      	mov	r3, r0
 8007990:	4642      	mov	r2, r8
 8007992:	189b      	adds	r3, r3, r2
 8007994:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007996:	464b      	mov	r3, r9
 8007998:	460a      	mov	r2, r1
 800799a:	eb42 0303 	adc.w	r3, r2, r3
 800799e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80079aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80079ac:	f04f 0200 	mov.w	r2, #0
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80079b8:	4649      	mov	r1, r9
 80079ba:	008b      	lsls	r3, r1, #2
 80079bc:	4641      	mov	r1, r8
 80079be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079c2:	4641      	mov	r1, r8
 80079c4:	008a      	lsls	r2, r1, #2
 80079c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80079ca:	f7f9 f95d 	bl	8000c88 <__aeabi_uldivmod>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a08 <UART_SetConfig+0x4e4>)
 80079d4:	fba3 1302 	umull	r1, r3, r3, r2
 80079d8:	095b      	lsrs	r3, r3, #5
 80079da:	2164      	movs	r1, #100	@ 0x64
 80079dc:	fb01 f303 	mul.w	r3, r1, r3
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	3332      	adds	r3, #50	@ 0x32
 80079e6:	4a08      	ldr	r2, [pc, #32]	@ (8007a08 <UART_SetConfig+0x4e4>)
 80079e8:	fba2 2303 	umull	r2, r3, r2, r3
 80079ec:	095b      	lsrs	r3, r3, #5
 80079ee:	f003 020f 	and.w	r2, r3, #15
 80079f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4422      	add	r2, r4
 80079fa:	609a      	str	r2, [r3, #8]
}
 80079fc:	bf00      	nop
 80079fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007a02:	46bd      	mov	sp, r7
 8007a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a08:	51eb851f 	.word	0x51eb851f

08007a0c <Screen_RX_data>:

    _Screen.Status_Dev_1 = false;
}

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 8007a14:	6879      	ldr	r1, [r7, #4]
 8007a16:	4803      	ldr	r0, [pc, #12]	@ (8007a24 <Screen_RX_data+0x18>)
 8007a18:	f000 f93a 	bl	8007c90 <DWIN_Listen>
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20000cd0 	.word	0x20000cd0

08007a28 <ADS1115_Init>:
void ADS1115_makeConfig_frame(uint8_t *buffer,config_reg_t *reg_config);
void compute_VoltageConv(ADS1115_t *pADS1115);
float getValue(ADS1115_t *pADS1115);
void ADS1115_setThresholds(ADS1115_t *pADS1115, int16_t lowValue, int16_t highValue);

ADS115_Status ADS1115_Init(ADS1115_t *pADS1115, I2C_HandleTypeDef *i2c, uint16_t dev_address) {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	4613      	mov	r3, r2
 8007a34:	80fb      	strh	r3, [r7, #6]
    pADS1115->i2c_port = i2c;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	601a      	str	r2, [r3, #0]
//    memcpy(pADS1115->i2c_port,i2c,sizeof(I2C_HandleTypeDef));
    pADS1115->dev_address = dev_address << 1;
 8007a3c:	88fb      	ldrh	r3, [r7, #6]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	711a      	strb	r2, [r3, #4]

    compute_VoltageConv(pADS1115);
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 f8dd 	bl	8007c08 <compute_VoltageConv>
    /* Test communication */
    if (HAL_I2C_IsDeviceReady(pADS1115->i2c_port, pADS1115->dev_address, 1, 100) == HAL_OK) {
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	791b      	ldrb	r3, [r3, #4]
 8007a56:	4619      	mov	r1, r3
 8007a58:	2364      	movs	r3, #100	@ 0x64
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f7fd fb86 	bl	800516c <HAL_I2C_IsDeviceReady>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <ADS1115_Init+0x42>
        return ADS1115_Init_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e000      	b.n	8007a6c <ADS1115_Init+0x44>
    }
    return ADS1115_Init_Fail;
 8007a6a:	2301      	movs	r3, #1
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <ADS1115_single_getdata>:

float ADS1115_single_getdata(ADS1115_t *pADS1115, MultiplexerConfig_t channel) {
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b088      	sub	sp, #32
 8007a78:	af04      	add	r7, sp, #16
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
    uint8_t  config_val[2];
    uint16_t config_check;
    /* update channel */
    uint8_t bytes[3] = {0};
 8007a80:	f107 0308 	add.w	r3, r7, #8
 8007a84:	2100      	movs	r1, #0
 8007a86:	460a      	mov	r2, r1
 8007a88:	801a      	strh	r2, [r3, #0]
 8007a8a:	460a      	mov	r2, r1
 8007a8c:	709a      	strb	r2, [r3, #2]
    pADS1115->config->channel = channel;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	78fa      	ldrb	r2, [r7, #3]
 8007a94:	701a      	strb	r2, [r3, #0]

    ADS1115_makeConfig_frame(bytes,pADS1115->config);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	f107 0308 	add.w	r3, r7, #8
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 f86b 	bl	8007b7c <ADS1115_makeConfig_frame>
    /* Set single conversion */
    bytes[1] |= (1u << 7);
 8007aa6:	7a7b      	ldrb	r3, [r7, #9]
 8007aa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	727b      	strb	r3, [r7, #9]

    HAL_I2C_Master_Transmit(pADS1115->i2c_port,pADS1115->dev_address,bytes,3,100);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6818      	ldr	r0, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	791b      	ldrb	r3, [r3, #4]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	f107 0208 	add.w	r2, r7, #8
 8007abe:	2364      	movs	r3, #100	@ 0x64
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	f7fd f822 	bl	8004b0c <HAL_I2C_Master_Transmit>
    HAL_Delay(8);
 8007ac8:	2008      	movs	r0, #8
 8007aca:	f7fb fcb9 	bl	8003440 <HAL_Delay>
    // if (HAL_I2C_Mem_Read( pADS1115->i2c_port, pADS1115->dev_address, 0x01, I2C_MEMADD_SIZE_8BIT, config_val, 2, 100 ) != HAL_OK ) {
    // 	return -1;
    // }
    /* wait conversion complete */
    do {
        HAL_I2C_Mem_Read( pADS1115->i2c_port, pADS1115->dev_address, 0x01, I2C_MEMADD_SIZE_8BIT, config_val, 2, 100 );
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	791b      	ldrb	r3, [r3, #4]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	2364      	movs	r3, #100	@ 0x64
 8007ada:	9302      	str	r3, [sp, #8]
 8007adc:	2302      	movs	r3, #2
 8007ade:	9301      	str	r3, [sp, #4]
 8007ae0:	f107 030c 	add.w	r3, r7, #12
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f7fd f90d 	bl	8004d08 <HAL_I2C_Mem_Read>
        config_check = ((config_val[0] << 8) | config_val[1]);
 8007aee:	7b3b      	ldrb	r3, [r7, #12]
 8007af0:	b21b      	sxth	r3, r3
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	b21a      	sxth	r2, r3
 8007af6:	7b7b      	ldrb	r3, [r7, #13]
 8007af8:	b21b      	sxth	r3, r3
 8007afa:	4313      	orrs	r3, r2
 8007afc:	b21b      	sxth	r3, r3
 8007afe:	81fb      	strh	r3, [r7, #14]
    } while ((config_check & 0x8000) == 0);
 8007b00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	dae2      	bge.n	8007ace <ADS1115_single_getdata+0x5a>
    
    return getValue(pADS1115);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f807 	bl	8007b1c <getValue>
 8007b0e:	eef0 7a40 	vmov.f32	s15, s0
}
 8007b12:	eeb0 0a67 	vmov.f32	s0, s15
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <getValue>:

float getValue(ADS1115_t *pADS1115) {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af04      	add	r7, sp, #16
 8007b22:	6078      	str	r0, [r7, #4]
    uint8_t bytes[2] = {0};
 8007b24:	2300      	movs	r3, #0
 8007b26:	81bb      	strh	r3, [r7, #12]
    int16_t value_ret;
	bytes[0] = 0x00; /* Conversion register contains the result */
 8007b28:	2300      	movs	r3, #0
 8007b2a:	733b      	strb	r3, [r7, #12]
    // HAL_I2C_Master_Transmit(pADS1115->i2c_port,pADS1115->dev_address,bytes,1,100);

    // if (HAL_I2C_Master_Receive(pADS1115->i2c_port,pADS1115->dev_address,bytes,2,100) != HAL_OK) {
    //     return ADS1115_Read_Data_Fail;
    // }
    HAL_I2C_Mem_Read(pADS1115->i2c_port, pADS1115->dev_address, 0x00, I2C_MEMADD_SIZE_8BIT, bytes, 2, 100);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	791b      	ldrb	r3, [r3, #4]
 8007b34:	4619      	mov	r1, r3
 8007b36:	2364      	movs	r3, #100	@ 0x64
 8007b38:	9302      	str	r3, [sp, #8]
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	f107 030c 	add.w	r3, r7, #12
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	2301      	movs	r3, #1
 8007b46:	2200      	movs	r2, #0
 8007b48:	f7fd f8de 	bl	8004d08 <HAL_I2C_Mem_Read>

    value_ret = ((bytes[0] << 8) | bytes[1]);
 8007b4c:	7b3b      	ldrb	r3, [r7, #12]
 8007b4e:	b21b      	sxth	r3, r3
 8007b50:	021b      	lsls	r3, r3, #8
 8007b52:	b21a      	sxth	r2, r3
 8007b54:	7b7b      	ldrb	r3, [r7, #13]
 8007b56:	b21b      	sxth	r3, r3
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	81fb      	strh	r3, [r7, #14]
    /* Convert to Voltage */
    return value_ret * pADS1115->voltageConv;
 8007b5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b60:	ee07 3a90 	vmov	s15, r3
 8007b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8007b72:	eeb0 0a67 	vmov.f32	s0, s15
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <ADS1115_makeConfig_frame>:
    ADS1115_makeConfig_frame(byte_write,pADS1115->config);

    HAL_I2C_Master_Transmit(pADS1115->i2c_port,pADS1115->dev_address,byte_write,3,100);
}

void ADS1115_makeConfig_frame(uint8_t *buffer,config_reg_t *reg_config) {
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
    buffer[0] = 0x01; /* points to Config register */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	701a      	strb	r2, [r3, #0]
    buffer[1] = (reg_config->channel << 4) | (reg_config->PGA << 1) | (reg_config->mode << 0);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	b25b      	sxtb	r3, r3
 8007b92:	011b      	lsls	r3, r3, #4
 8007b94:	b25a      	sxtb	r2, r3
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	789b      	ldrb	r3, [r3, #2]
 8007b9a:	b25b      	sxtb	r3, r3
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	b25b      	sxtb	r3, r3
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	b25a      	sxtb	r2, r3
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	78db      	ldrb	r3, [r3, #3]
 8007ba8:	b25b      	sxtb	r3, r3
 8007baa:	4313      	orrs	r3, r2
 8007bac:	b25a      	sxtb	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	701a      	strb	r2, [r3, #0]
    buffer[2] = (reg_config->DataRate << 5) | (reg_config->compareMode << 4) | (reg_config->polarityMode << 3) | (reg_config->latchingMode << 2) | (reg_config->queueComparator << 0);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	b25b      	sxtb	r3, r3
 8007bbc:	015b      	lsls	r3, r3, #5
 8007bbe:	b25a      	sxtb	r2, r3
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	791b      	ldrb	r3, [r3, #4]
 8007bc4:	b25b      	sxtb	r3, r3
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	b25b      	sxtb	r3, r3
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	b25a      	sxtb	r2, r3
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	795b      	ldrb	r3, [r3, #5]
 8007bd2:	b25b      	sxtb	r3, r3
 8007bd4:	00db      	lsls	r3, r3, #3
 8007bd6:	b25b      	sxtb	r3, r3
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	b25a      	sxtb	r2, r3
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	799b      	ldrb	r3, [r3, #6]
 8007be0:	b25b      	sxtb	r3, r3
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	b25b      	sxtb	r3, r3
 8007be6:	4313      	orrs	r3, r2
 8007be8:	b25a      	sxtb	r2, r3
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	79db      	ldrb	r3, [r3, #7]
 8007bee:	b25b      	sxtb	r3, r3
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	b25a      	sxtb	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	3302      	adds	r3, #2
 8007bf8:	b2d2      	uxtb	r2, r2
 8007bfa:	701a      	strb	r2, [r3, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <compute_VoltageConv>:

void compute_VoltageConv(ADS1115_t *pADS1115) {
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
    switch (pADS1115->config->PGA) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	789b      	ldrb	r3, [r3, #2]
 8007c16:	2b05      	cmp	r3, #5
 8007c18:	d826      	bhi.n	8007c68 <compute_VoltageConv+0x60>
 8007c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c20 <compute_VoltageConv+0x18>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c39 	.word	0x08007c39
 8007c24:	08007c41 	.word	0x08007c41
 8007c28:	08007c49 	.word	0x08007c49
 8007c2c:	08007c51 	.word	0x08007c51
 8007c30:	08007c59 	.word	0x08007c59
 8007c34:	08007c61 	.word	0x08007c61
        case PGA_6_144 : {
            pADS1115->voltageConv = (6.144f)/(32768.0f);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8007c78 <compute_VoltageConv+0x70>)
 8007c3c:	609a      	str	r2, [r3, #8]
        } break;
 8007c3e:	e014      	b.n	8007c6a <compute_VoltageConv+0x62>
        case PGA_4_096 : {
            pADS1115->voltageConv = (4.096f)/(32768.0f);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a0e      	ldr	r2, [pc, #56]	@ (8007c7c <compute_VoltageConv+0x74>)
 8007c44:	609a      	str	r2, [r3, #8]
        } break;
 8007c46:	e010      	b.n	8007c6a <compute_VoltageConv+0x62>
        case PGA_2_048 : {
            pADS1115->voltageConv = (2.048f)/(32768.0f);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8007c80 <compute_VoltageConv+0x78>)
 8007c4c:	609a      	str	r2, [r3, #8]
        } break;
 8007c4e:	e00c      	b.n	8007c6a <compute_VoltageConv+0x62>
        case PGA_1_024 : {
            pADS1115->voltageConv = (1.024f)/(32768.0f);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a0c      	ldr	r2, [pc, #48]	@ (8007c84 <compute_VoltageConv+0x7c>)
 8007c54:	609a      	str	r2, [r3, #8]
        } break;
 8007c56:	e008      	b.n	8007c6a <compute_VoltageConv+0x62>
        case PGA_0_512 : {
            pADS1115->voltageConv = (0.512f)/(32768.0f);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8007c88 <compute_VoltageConv+0x80>)
 8007c5c:	609a      	str	r2, [r3, #8]
        } break;
 8007c5e:	e004      	b.n	8007c6a <compute_VoltageConv+0x62>
        case PGA_0_256 : {
            pADS1115->voltageConv = (0.256f)/(32768.0f);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a0a      	ldr	r2, [pc, #40]	@ (8007c8c <compute_VoltageConv+0x84>)
 8007c64:	609a      	str	r2, [r3, #8]
        } break; 
 8007c66:	e000      	b.n	8007c6a <compute_VoltageConv+0x62>
        
        default : break;
 8007c68:	bf00      	nop
    }
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	39449ba6 	.word	0x39449ba6
 8007c7c:	3903126f 	.word	0x3903126f
 8007c80:	3883126f 	.word	0x3883126f
 8007c84:	3803126f 	.word	0x3803126f
 8007c88:	3783126f 	.word	0x3783126f
 8007c8c:	3703126f 	.word	0x3703126f

08007c90 <DWIN_Listen>:
{
    pDwin->p_ListenDWIN_Callback = dwin_callback;
}

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
    uint8_t message_ASCII;
    uint16_t VPaddress;
    uint16_t lastByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b5a      	cmp	r3, #90	@ 0x5a
 8007ca0:	d13b      	bne.n	8007d1a <DWIN_Listen+0x8a>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2ba5      	cmp	r3, #165	@ 0xa5
 8007caa:	d136      	bne.n	8007d1a <DWIN_Listen+0x8a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	3303      	adds	r3, #3
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b83      	cmp	r3, #131	@ 0x83
 8007cb4:	d131      	bne.n	8007d1a <DWIN_Listen+0x8a>
        {
            datalength = RX_Buffer[2];
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	789b      	ldrb	r3, [r3, #2]
 8007cba:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	3302      	adds	r3, #2
 8007cc0:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	b21b      	sxth	r3, r3
 8007cca:	021b      	lsls	r3, r3, #8
 8007ccc:	b21a      	sxth	r2, r3
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	3305      	adds	r3, #5
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	b21b      	sxth	r3, r3
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	b21b      	sxth	r3, r3
 8007cda:	81bb      	strh	r3, [r7, #12]
            // get return key value
            lastByte = (uint16_t)(RX_Buffer[datalength-1] << 8 | RX_Buffer[datalength]);
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	b21b      	sxth	r3, r3
 8007ce8:	021b      	lsls	r3, r3, #8
 8007cea:	b21a      	sxth	r2, r3
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	440b      	add	r3, r1
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	b21b      	sxth	r3, r3
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	b21b      	sxth	r3, r3
 8007cfa:	817b      	strh	r3, [r7, #10]
            // Get message ASCII
            message_ASCII = RX_Buffer[datalength];
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	4413      	add	r3, r2
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	727b      	strb	r3, [r7, #9]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <DWIN_Listen+0x8a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lastByte,message_ASCII);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	7a7a      	ldrb	r2, [r7, #9]
 8007d14:	8979      	ldrh	r1, [r7, #10]
 8007d16:	89b8      	ldrh	r0, [r7, #12]
 8007d18:	4798      	blx	r3
            }
        }
    }

    
}
 8007d1a:	bf00      	nop
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <isotp_ms_to_st_min>:
///////////////////////////////////////////////////////
///                 STATIC FUNCTIONS                ///
///////////////////////////////////////////////////////

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	4603      	mov	r3, r0
 8007d2a:	71fb      	strb	r3, [r7, #7]
    uint8_t st_min;

    st_min = ms;
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	73fb      	strb	r3, [r7, #15]
    if (st_min > 0x7F) {
 8007d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	da01      	bge.n	8007d3c <isotp_ms_to_st_min+0x1a>
        st_min = 0x7F;
 8007d38:	237f      	movs	r3, #127	@ 0x7f
 8007d3a:	73fb      	strb	r3, [r7, #15]
    }

    return st_min;
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 8007d4a:	b480      	push	{r7}
 8007d4c:	b085      	sub	sp, #20
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	4603      	mov	r3, r0
 8007d52:	71fb      	strb	r3, [r7, #7]
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9) {
 8007d54:	79fb      	ldrb	r3, [r7, #7]
 8007d56:	2bf0      	cmp	r3, #240	@ 0xf0
 8007d58:	d905      	bls.n	8007d66 <isotp_st_min_to_ms+0x1c>
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	2bf9      	cmp	r3, #249	@ 0xf9
 8007d5e:	d802      	bhi.n	8007d66 <isotp_st_min_to_ms+0x1c>
        ms = 1;
 8007d60:	2301      	movs	r3, #1
 8007d62:	73fb      	strb	r3, [r7, #15]
 8007d64:	e008      	b.n	8007d78 <isotp_st_min_to_ms+0x2e>
    } else if (st_min <= 0x7F) {
 8007d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	db02      	blt.n	8007d74 <isotp_st_min_to_ms+0x2a>
        ms = st_min;
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	73fb      	strb	r3, [r7, #15]
 8007d72:	e001      	b.n	8007d78 <isotp_st_min_to_ms+0x2e>
    } else {
        ms = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	73fb      	strb	r3, [r7, #15]
    }

    return ms;
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) {
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b086      	sub	sp, #24
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	4608      	mov	r0, r1
 8007d90:	4611      	mov	r1, r2
 8007d92:	461a      	mov	r2, r3
 8007d94:	4603      	mov	r3, r0
 8007d96:	70fb      	strb	r3, [r7, #3]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70bb      	strb	r3, [r7, #2]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	707b      	strb	r3, [r7, #1]

    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 8007da0:	7b3b      	ldrb	r3, [r7, #12]
 8007da2:	2203      	movs	r2, #3
 8007da4:	f362 1307 	bfi	r3, r2, #4, #4
 8007da8:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.FS = flow_status;
 8007daa:	78fb      	ldrb	r3, [r7, #3]
 8007dac:	f003 030f 	and.w	r3, r3, #15
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	7b3b      	ldrb	r3, [r7, #12]
 8007db4:	f362 0303 	bfi	r3, r2, #0, #4
 8007db8:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.BS = block_size;
 8007dba:	78bb      	ldrb	r3, [r7, #2]
 8007dbc:	737b      	strb	r3, [r7, #13]
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 8007dbe:	787b      	ldrb	r3, [r7, #1]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff ffae 	bl	8007d22 <isotp_ms_to_st_min>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73bb      	strb	r3, [r7, #14]

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.flow_control.reserve, 0, sizeof(message.as.flow_control.reserve));
 8007dca:	f107 030c 	add.w	r3, r7, #12
 8007dce:	3303      	adds	r3, #3
 8007dd0:	2205      	movs	r2, #5
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f002 fb2e 	bl	800a436 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f107 010c 	add.w	r1, r7, #12
 8007de2:	2208      	movs	r2, #8
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fa ffb3 	bl	8002d50 <isotp_user_send_can>
 8007dea:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif

    return ret;
 8007dec:	697b      	ldr	r3, [r7, #20]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <isotp_send_single_frame>:

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	895b      	ldrh	r3, [r3, #10]
 8007e06:	2b07      	cmp	r3, #7
 8007e08:	d905      	bls.n	8007e16 <isotp_send_single_frame+0x1e>
 8007e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8007e80 <isotp_send_single_frame+0x88>)
 8007e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e84 <isotp_send_single_frame+0x8c>)
 8007e0e:	2142      	movs	r1, #66	@ 0x42
 8007e10:	481d      	ldr	r0, [pc, #116]	@ (8007e88 <isotp_send_single_frame+0x90>)
 8007e12:	f000 fc95 	bl	8008740 <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 8007e16:	7b3b      	ldrb	r3, [r7, #12]
 8007e18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e1c:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	895b      	ldrh	r3, [r3, #10]
 8007e22:	f003 030f 	and.w	r3, r3, #15
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	7b3b      	ldrb	r3, [r7, #12]
 8007e2a:	f362 0303 	bfi	r3, r2, #0, #4
 8007e2e:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6859      	ldr	r1, [r3, #4]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	895b      	ldrh	r3, [r3, #10]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	f107 030c 	add.w	r3, r7, #12
 8007e3e:	3301      	adds	r3, #1
 8007e40:	4618      	mov	r0, r3
 8007e42:	f002 fbf6 	bl	800a632 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0, sizeof(message.as.single_frame.data) - link->send_size);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	895b      	ldrh	r3, [r3, #10]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f107 030c 	add.w	r3, r7, #12
 8007e50:	3301      	adds	r3, #1
 8007e52:	1898      	adds	r0, r3, r2
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	895b      	ldrh	r3, [r3, #10]
 8007e58:	f1c3 0307 	rsb	r3, r3, #7
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	2100      	movs	r1, #0
 8007e60:	f002 fae9 	bl	800a436 <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8007e64:	f107 030c 	add.w	r3, r7, #12
 8007e68:	2208      	movs	r2, #8
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6838      	ldr	r0, [r7, #0]
 8007e6e:	f7fa ff6f 	bl	8002d50 <isotp_user_send_can>
 8007e72:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 8007e74:	697b      	ldr	r3, [r7, #20]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	0800cf38 	.word	0x0800cf38
 8007e84:	0800d14c 	.word	0x0800d14c
 8007e88:	0800cf50 	.word	0x0800cf50

08007e8c <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
    
    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	895b      	ldrh	r3, [r3, #10]
 8007e9a:	2b07      	cmp	r3, #7
 8007e9c:	d805      	bhi.n	8007eaa <isotp_send_first_frame+0x1e>
 8007e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8007f14 <isotp_send_first_frame+0x88>)
 8007ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f18 <isotp_send_first_frame+0x8c>)
 8007ea2:	215c      	movs	r1, #92	@ 0x5c
 8007ea4:	481d      	ldr	r0, [pc, #116]	@ (8007f1c <isotp_send_first_frame+0x90>)
 8007ea6:	f000 fc4b 	bl	8008740 <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 8007eaa:	7b3b      	ldrb	r3, [r7, #12]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f362 1307 	bfi	r3, r2, #4, #4
 8007eb2:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	895b      	ldrh	r3, [r3, #10]
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	895b      	ldrh	r3, [r3, #10]
 8007ec0:	0a1b      	lsrs	r3, r3, #8
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	f003 030f 	and.w	r3, r3, #15
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	7b3b      	ldrb	r3, [r7, #12]
 8007ecc:	f362 0303 	bfi	r3, r2, #0, #4
 8007ed0:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	f107 030e 	add.w	r3, r7, #14
 8007eda:	6811      	ldr	r1, [r2, #0]
 8007edc:	6019      	str	r1, [r3, #0]
 8007ede:	8892      	ldrh	r2, [r2, #4]
 8007ee0:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8007ee2:	f107 030c 	add.w	r3, r7, #12
 8007ee6:	2208      	movs	r2, #8
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6838      	ldr	r0, [r7, #0]
 8007eec:	f7fa ff30 	bl	8002d50 <isotp_user_send_can>
 8007ef0:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d108      	bne.n	8007f0a <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	899b      	ldrh	r3, [r3, #12]
 8007efc:	3306      	adds	r3, #6
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 8007f0a:	697b      	ldr	r3, [r7, #20]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	0800cf68 	.word	0x0800cf68
 8007f18:	0800d164 	.word	0x0800d164
 8007f1c:	0800cf50 	.word	0x0800cf50

08007f20 <isotp_send_consecutive_frame>:

static int isotp_send_consecutive_frame(IsoTpLink* link) {
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
    IsoTpCanMessage message;
    uint16_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	895b      	ldrh	r3, [r3, #10]
 8007f2c:	2b07      	cmp	r3, #7
 8007f2e:	d805      	bhi.n	8007f3c <isotp_send_consecutive_frame+0x1c>
 8007f30:	4b2d      	ldr	r3, [pc, #180]	@ (8007fe8 <isotp_send_consecutive_frame+0xc8>)
 8007f32:	4a2e      	ldr	r2, [pc, #184]	@ (8007fec <isotp_send_consecutive_frame+0xcc>)
 8007f34:	2175      	movs	r1, #117	@ 0x75
 8007f36:	482e      	ldr	r0, [pc, #184]	@ (8007ff0 <isotp_send_consecutive_frame+0xd0>)
 8007f38:	f000 fc02 	bl	8008740 <__assert_func>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 8007f3c:	7a3b      	ldrb	r3, [r7, #8]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f362 1307 	bfi	r3, r2, #4, #4
 8007f44:	723b      	strb	r3, [r7, #8]
    message.as.consecutive_frame.SN = link->send_sn;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	7b9b      	ldrb	r3, [r3, #14]
 8007f4a:	f003 030f 	and.w	r3, r3, #15
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	7a3b      	ldrb	r3, [r7, #8]
 8007f52:	f362 0303 	bfi	r3, r2, #0, #4
 8007f56:	723b      	strb	r3, [r7, #8]
    data_length = link->send_size - link->send_offset;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	895a      	ldrh	r2, [r3, #10]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	899b      	ldrh	r3, [r3, #12]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	82fb      	strh	r3, [r7, #22]
    if (data_length > sizeof(message.as.consecutive_frame.data)) {
 8007f64:	8afb      	ldrh	r3, [r7, #22]
 8007f66:	2b07      	cmp	r3, #7
 8007f68:	d901      	bls.n	8007f6e <isotp_send_consecutive_frame+0x4e>
        data_length = sizeof(message.as.consecutive_frame.data);
 8007f6a:	2307      	movs	r3, #7
 8007f6c:	82fb      	strh	r3, [r7, #22]
    }
    (void) memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	8992      	ldrh	r2, [r2, #12]
 8007f76:	1899      	adds	r1, r3, r2
 8007f78:	8afa      	ldrh	r2, [r7, #22]
 8007f7a:	f107 0308 	add.w	r3, r7, #8
 8007f7e:	3301      	adds	r3, #1
 8007f80:	4618      	mov	r0, r3
 8007f82:	f002 fb56 	bl	800a632 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.consecutive_frame.data + data_length, 0, sizeof(message.as.consecutive_frame.data) - data_length);
 8007f86:	8afb      	ldrh	r3, [r7, #22]
 8007f88:	f107 0208 	add.w	r2, r7, #8
 8007f8c:	3201      	adds	r2, #1
 8007f8e:	18d0      	adds	r0, r2, r3
 8007f90:	8afb      	ldrh	r3, [r7, #22]
 8007f92:	f1c3 0307 	rsb	r3, r3, #7
 8007f96:	461a      	mov	r2, r3
 8007f98:	2100      	movs	r1, #0
 8007f9a:	f002 fa4c 	bl	800a436 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f107 0108 	add.w	r1, r7, #8
 8007fa6:	2208      	movs	r2, #8
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fa fed1 	bl	8002d50 <isotp_user_send_can>
 8007fae:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
    if (ISOTP_RET_OK == ret) {
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d113      	bne.n	8007fde <isotp_send_consecutive_frame+0xbe>
        link->send_offset += data_length;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	899a      	ldrh	r2, [r3, #12]
 8007fba:	8afb      	ldrh	r3, [r7, #22]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	819a      	strh	r2, [r3, #12]
        if (++(link->send_sn) > 0x0F) {
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	7b9b      	ldrb	r3, [r3, #14]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	739a      	strb	r2, [r3, #14]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7b9b      	ldrb	r3, [r3, #14]
 8007fd4:	2b0f      	cmp	r3, #15
 8007fd6:	d902      	bls.n	8007fde <isotp_send_consecutive_frame+0xbe>
            link->send_sn = 0;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	739a      	strb	r2, [r3, #14]
        }
    }
    
    return ret;
 8007fde:	693b      	ldr	r3, [r7, #16]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	0800cf68 	.word	0x0800cf68
 8007fec:	0800d17c 	.word	0x0800d17c
 8007ff0:	0800cf50 	.word	0x0800cf50

08007ff4 <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4613      	mov	r3, r2
 8008000:	71fb      	strb	r3, [r7, #7]
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) || (message->as.single_frame.SF_DL > (len - 1))) {
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	f003 030f 	and.w	r3, r3, #15
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	d008      	beq.n	8008022 <isotp_receive_single_frame+0x2e>
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008018:	b2db      	uxtb	r3, r3
 800801a:	461a      	mov	r2, r3
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	4293      	cmp	r3, r2
 8008020:	d805      	bhi.n	800802e <isotp_receive_single_frame+0x3a>
        isotp_user_debug("Single-frame length too small.");
 8008022:	480f      	ldr	r0, [pc, #60]	@ (8008060 <isotp_receive_single_frame+0x6c>)
 8008024:	f7fa fec5 	bl	8002db2 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 8008028:	f06f 0306 	mvn.w	r3, #6
 800802c:	e014      	b.n	8008058 <isotp_receive_single_frame+0x64>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.single_frame.data, message->as.single_frame.SF_DL);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	1c59      	adds	r1, r3, #1
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800803e:	b2db      	uxtb	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	f002 faf6 	bl	800a632 <memcpy>
    link->receive_size = message->as.single_frame.SF_DL;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800804e:	b2db      	uxtb	r3, r3
 8008050:	461a      	mov	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	85da      	strh	r2, [r3, #46]	@ 0x2e
    
    return ISOTP_RET_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	0800cf7c 	.word	0x0800cf7c

08008064 <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	4613      	mov	r3, r2
 8008070:	71fb      	strb	r3, [r7, #7]
    uint16_t payload_length;

    if (8 != len) {
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	2b08      	cmp	r3, #8
 8008076:	d005      	beq.n	8008084 <isotp_receive_first_frame+0x20>
        isotp_user_debug("First frame should be 8 bytes in length.");
 8008078:	481e      	ldr	r0, [pc, #120]	@ (80080f4 <isotp_receive_first_frame+0x90>)
 800807a:	f7fa fe9a 	bl	8002db2 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800807e:	f06f 0306 	mvn.w	r3, #6
 8008082:	e033      	b.n	80080ec <isotp_receive_first_frame+0x88>
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800808c:	b2db      	uxtb	r3, r3
 800808e:	82fb      	strh	r3, [r7, #22]
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 8008090:	8afb      	ldrh	r3, [r7, #22]
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	b29b      	uxth	r3, r3
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	7852      	ldrb	r2, [r2, #1]
 800809a:	4413      	add	r3, r2
 800809c:	82fb      	strh	r3, [r7, #22]

    /* should not use multiple frame transmition */
    if (payload_length <= 7) {
 800809e:	8afb      	ldrh	r3, [r7, #22]
 80080a0:	2b07      	cmp	r3, #7
 80080a2:	d805      	bhi.n	80080b0 <isotp_receive_first_frame+0x4c>
        isotp_user_debug("Should not use multiple frame transmission.");
 80080a4:	4814      	ldr	r0, [pc, #80]	@ (80080f8 <isotp_receive_first_frame+0x94>)
 80080a6:	f7fa fe84 	bl	8002db2 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 80080aa:	f06f 0306 	mvn.w	r3, #6
 80080ae:	e01d      	b.n	80080ec <isotp_receive_first_frame+0x88>
    }
    
    if (payload_length > link->receive_buf_size) {
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080b4:	8afa      	ldrh	r2, [r7, #22]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d905      	bls.n	80080c6 <isotp_receive_first_frame+0x62>
        isotp_user_debug("Multi-frame response too large for receiving buffer.");
 80080ba:	4810      	ldr	r0, [pc, #64]	@ (80080fc <isotp_receive_first_frame+0x98>)
 80080bc:	f7fa fe79 	bl	8002db2 <isotp_user_debug>
        return ISOTP_RET_OVERFLOW;
 80080c0:	f06f 0302 	mvn.w	r3, #2
 80080c4:	e012      	b.n	80080ec <isotp_receive_first_frame+0x88>
    }
    
    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	3302      	adds	r3, #2
 80080ce:	2206      	movs	r2, #6
 80080d0:	4619      	mov	r1, r3
 80080d2:	f002 faae 	bl	800a632 <memcpy>
    link->receive_size = payload_length;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8afa      	ldrh	r2, [r7, #22]
 80080da:	85da      	strh	r2, [r3, #46]	@ 0x2e
    link->receive_offset = sizeof(message->as.first_frame.data);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2206      	movs	r2, #6
 80080e0:	861a      	strh	r2, [r3, #48]	@ 0x30
    link->receive_sn = 1;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    return ISOTP_RET_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	0800cf9c 	.word	0x0800cf9c
 80080f8:	0800cfc8 	.word	0x0800cfc8
 80080fc:	0800cff4 	.word	0x0800cff4

08008100 <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	4613      	mov	r3, r2
 800810c:	71fb      	strb	r3, [r7, #7]
    uint16_t remaining_bytes;
    
    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN) {
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	7812      	ldrb	r2, [r2, #0]
 8008118:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800811c:	b2d2      	uxtb	r2, r2
 800811e:	4293      	cmp	r3, r2
 8008120:	d002      	beq.n	8008128 <isotp_receive_consecutive_frame+0x28>
        return ISOTP_RET_WRONG_SN;
 8008122:	f06f 0303 	mvn.w	r3, #3
 8008126:	e038      	b.n	800819a <isotp_receive_consecutive_frame+0x9a>
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	82fb      	strh	r3, [r7, #22]
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 8008134:	8afb      	ldrh	r3, [r7, #22]
 8008136:	2b07      	cmp	r3, #7
 8008138:	d901      	bls.n	800813e <isotp_receive_consecutive_frame+0x3e>
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
 800813a:	2307      	movs	r3, #7
 800813c:	82fb      	strh	r3, [r7, #22]
    }
    if (remaining_bytes > len - 1) {
 800813e:	79fa      	ldrb	r2, [r7, #7]
 8008140:	8afb      	ldrh	r3, [r7, #22]
 8008142:	429a      	cmp	r2, r3
 8008144:	dc05      	bgt.n	8008152 <isotp_receive_consecutive_frame+0x52>
        isotp_user_debug("Consecutive frame too short.");
 8008146:	4817      	ldr	r0, [pc, #92]	@ (80081a4 <isotp_receive_consecutive_frame+0xa4>)
 8008148:	f7fa fe33 	bl	8002db2 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800814c:	f06f 0306 	mvn.w	r3, #6
 8008150:	e023      	b.n	800819a <isotp_receive_consecutive_frame+0x9a>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer + link->receive_offset, message->as.consecutive_frame.data, remaining_bytes);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 800815a:	1898      	adds	r0, r3, r2
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	3301      	adds	r3, #1
 8008160:	8afa      	ldrh	r2, [r7, #22]
 8008162:	4619      	mov	r1, r3
 8008164:	f002 fa65 	bl	800a632 <memcpy>

    link->receive_offset += remaining_bytes;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800816c:	8afb      	ldrh	r3, [r7, #22]
 800816e:	4413      	add	r3, r2
 8008170:	b29a      	uxth	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (++(link->receive_sn) > 0x0F) {
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800817c:	3301      	adds	r3, #1
 800817e:	b2da      	uxtb	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800818c:	2b0f      	cmp	r3, #15
 800818e:	d903      	bls.n	8008198 <isotp_receive_consecutive_frame+0x98>
        link->receive_sn = 0;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }

    return ISOTP_RET_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	0800d02c 	.word	0x0800d02c

080081a8 <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	4613      	mov	r3, r2
 80081b4:	71fb      	strb	r3, [r7, #7]
    /* check message length */
    if (len < 3) {
 80081b6:	79fb      	ldrb	r3, [r7, #7]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d805      	bhi.n	80081c8 <isotp_receive_flow_control_frame+0x20>
        isotp_user_debug("Flow control frame too short.");
 80081bc:	4805      	ldr	r0, [pc, #20]	@ (80081d4 <isotp_receive_flow_control_frame+0x2c>)
 80081be:	f7fa fdf8 	bl	8002db2 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 80081c2:	f06f 0306 	mvn.w	r3, #6
 80081c6:	e000      	b.n	80081ca <isotp_receive_flow_control_frame+0x22>
    }

    return ISOTP_RET_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	0800d04c 	.word	0x0800d04c

080081d8 <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	4613      	mov	r3, r2
 80081e4:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6819      	ldr	r1, [r3, #0]
 80081ea:	88fb      	ldrh	r3, [r7, #6]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f000 f806 	bl	8008200 <isotp_send_with_id>
 80081f4:	4603      	mov	r3, r0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 8008200:	b580      	push	{r7, lr}
 8008202:	b0a6      	sub	sp, #152	@ 0x98
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d105      	bne.n	8008220 <isotp_send_with_id+0x20>
        isotp_user_debug("Link is null!");
 8008214:	4833      	ldr	r0, [pc, #204]	@ (80082e4 <isotp_send_with_id+0xe4>)
 8008216:	f7fa fdcc 	bl	8002db2 <isotp_user_debug>
        return ISOTP_RET_ERROR;
 800821a:	f04f 33ff 	mov.w	r3, #4294967295
 800821e:	e05d      	b.n	80082dc <isotp_send_with_id+0xdc>
    }

    if (size > link->send_buf_size) {
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	891b      	ldrh	r3, [r3, #8]
 8008224:	887a      	ldrh	r2, [r7, #2]
 8008226:	429a      	cmp	r2, r3
 8008228:	d90d      	bls.n	8008246 <isotp_send_with_id+0x46>
        isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
 800822a:	482f      	ldr	r0, [pc, #188]	@ (80082e8 <isotp_send_with_id+0xe8>)
 800822c:	f7fa fdc1 	bl	8002db2 <isotp_user_debug>
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 8008230:	887a      	ldrh	r2, [r7, #2]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	891b      	ldrh	r3, [r3, #8]
 8008236:	f107 0014 	add.w	r0, r7, #20
 800823a:	492c      	ldr	r1, [pc, #176]	@ (80082ec <isotp_send_with_id+0xec>)
 800823c:	f002 f896 	bl	800a36c <siprintf>
        return ISOTP_RET_OVERFLOW;
 8008240:	f06f 0302 	mvn.w	r3, #2
 8008244:	e04a      	b.n	80082dc <isotp_send_with_id+0xdc>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d105      	bne.n	800825c <isotp_send_with_id+0x5c>
        isotp_user_debug("Abort previous message, transmission in progress.\n");
 8008250:	4827      	ldr	r0, [pc, #156]	@ (80082f0 <isotp_send_with_id+0xf0>)
 8008252:	f7fa fdae 	bl	8002db2 <isotp_user_debug>
        return ISOTP_RET_INPROGRESS;
 8008256:	f06f 0301 	mvn.w	r3, #1
 800825a:	e03f      	b.n	80082dc <isotp_send_with_id+0xdc>
    }

    /* copy into local buffer */
    link->send_size = size;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	887a      	ldrh	r2, [r7, #2]
 8008260:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	887a      	ldrh	r2, [r7, #2]
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	4618      	mov	r0, r3
 8008272:	f002 f9de 	bl	800a632 <memcpy>

    if (link->send_size < 8) {
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	895b      	ldrh	r3, [r3, #10]
 800827a:	2b07      	cmp	r3, #7
 800827c:	d806      	bhi.n	800828c <isotp_send_with_id+0x8c>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 800827e:	68b9      	ldr	r1, [r7, #8]
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f7ff fdb9 	bl	8007df8 <isotp_send_single_frame>
 8008286:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800828a:	e025      	b.n	80082d8 <isotp_send_with_id+0xd8>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f7ff fdfc 	bl	8007e8c <isotp_send_first_frame>
 8008294:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 8008298:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800829c:	2b00      	cmp	r3, #0
 800829e:	d11b      	bne.n	80082d8 <isotp_send_with_id+0xd8>
            link->send_bs_remain = 0;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 80082b2:	f7fa fd77 	bl	8002da4 <isotp_user_get_ms>
 80082b6:	4602      	mov	r2, r0
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80082bc:	f7fa fd72 	bl	8002da4 <isotp_user_get_ms>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 80082d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3798      	adds	r7, #152	@ 0x98
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	0800d06c 	.word	0x0800d06c
 80082e8:	0800d07c 	.word	0x0800d07c
 80082ec:	0800d0d0 	.word	0x0800d0d0
 80082f0:	0800d100 	.word	0x0800d100

080082f4 <isotp_on_can_message>:

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	4613      	mov	r3, r2
 8008300:	71fb      	strb	r3, [r7, #7]
    IsoTpCanMessage message;
    int ret;
    
    if (len < 2 || len > 8) {
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	2b01      	cmp	r3, #1
 8008306:	f240 8143 	bls.w	8008590 <isotp_on_can_message+0x29c>
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	2b08      	cmp	r3, #8
 800830e:	f200 813f 	bhi.w	8008590 <isotp_on_can_message+0x29c>
        return;
    }

    memcpy(message.as.data_array.ptr, data, len);
 8008312:	79fa      	ldrb	r2, [r7, #7]
 8008314:	f107 0314 	add.w	r3, r7, #20
 8008318:	68b9      	ldr	r1, [r7, #8]
 800831a:	4618      	mov	r0, r3
 800831c:	f002 f989 	bl	800a632 <memcpy>
    memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	f107 0214 	add.w	r2, r7, #20
 8008326:	18d0      	adds	r0, r2, r3
 8008328:	79fb      	ldrb	r3, [r7, #7]
 800832a:	f1c3 0308 	rsb	r3, r3, #8
 800832e:	461a      	mov	r2, r3
 8008330:	2100      	movs	r1, #0
 8008332:	f002 f880 	bl	800a436 <memset>

    switch (message.as.common.type) {
 8008336:	7d3b      	ldrb	r3, [r7, #20]
 8008338:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b03      	cmp	r3, #3
 8008340:	f200 811a 	bhi.w	8008578 <isotp_on_can_message+0x284>
 8008344:	a201      	add	r2, pc, #4	@ (adr r2, 800834c <isotp_on_can_message+0x58>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	0800835d 	.word	0x0800835d
 8008350:	08008399 	.word	0x08008399
 8008354:	08008421 	.word	0x08008421
 8008358:	080084bf 	.word	0x080084bf
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008362:	2b01      	cmp	r3, #1
 8008364:	d104      	bne.n	8008370 <isotp_on_can_message+0x7c>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f06f 0205 	mvn.w	r2, #5
 800836c:	639a      	str	r2, [r3, #56]	@ 0x38
 800836e:	e002      	b.n	8008376 <isotp_on_can_message+0x82>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
 8008376:	79fa      	ldrb	r2, [r7, #7]
 8008378:	f107 0314 	add.w	r3, r7, #20
 800837c:	4619      	mov	r1, r3
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f7ff fe38 	bl	8007ff4 <isotp_receive_single_frame>
 8008384:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f040 80f7 	bne.w	800857c <isotp_on_can_message+0x288>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2202      	movs	r2, #2
 8008392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            }
            break;
 8008396:	e0f1      	b.n	800857c <isotp_on_can_message+0x288>
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d104      	bne.n	80083ac <isotp_on_can_message+0xb8>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f06f 0205 	mvn.w	r2, #5
 80083a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80083aa:	e002      	b.n	80083b2 <isotp_on_can_message+0xbe>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_first_frame(link, &message, len);
 80083b2:	79fa      	ldrb	r2, [r7, #7]
 80083b4:	f107 0314 	add.w	r3, r7, #20
 80083b8:	4619      	mov	r1, r3
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f7ff fe52 	bl	8008064 <isotp_receive_first_frame>
 80083c0:	61f8      	str	r0, [r7, #28]

            /* if overflow happened */
            if (ISOTP_RET_OVERFLOW == ret) {
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	f113 0f03 	cmn.w	r3, #3
 80083c8:	d10e      	bne.n	80083e8 <isotp_on_can_message+0xf4>
                /* update protocol result */
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f06f 0207 	mvn.w	r2, #7
 80083d0:	639a      	str	r2, [r3, #56]	@ 0x38
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send error message */
                isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
 80083da:	2300      	movs	r3, #0
 80083dc:	2200      	movs	r2, #0
 80083de:	2102      	movs	r1, #2
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f7ff fcd0 	bl	8007d86 <isotp_send_flow_control>
                break;
 80083e6:	e0d2      	b.n	800858e <isotp_on_can_message+0x29a>
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret) {
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f040 80c8 	bne.w	8008580 <isotp_on_can_message+0x28c>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	22c8      	movs	r2, #200	@ 0xc8
 80083fc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8008406:	2300      	movs	r3, #0
 8008408:	2100      	movs	r1, #0
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f7ff fcbb 	bl	8007d86 <isotp_send_flow_control>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8008410:	f7fa fcc8 	bl	8002da4 <isotp_user_get_ms>
 8008414:	4603      	mov	r3, r0
 8008416:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	635a      	str	r2, [r3, #52]	@ 0x34
            }
            
            break;
 800841e:	e0af      	b.n	8008580 <isotp_on_can_message+0x28c>
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008426:	2b01      	cmp	r3, #1
 8008428:	d004      	beq.n	8008434 <isotp_on_can_message+0x140>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f06f 0205 	mvn.w	r2, #5
 8008430:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 8008432:	e0ac      	b.n	800858e <isotp_on_can_message+0x29a>
            }

            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);
 8008434:	79fa      	ldrb	r2, [r7, #7]
 8008436:	f107 0314 	add.w	r3, r7, #20
 800843a:	4619      	mov	r1, r3
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f7ff fe5f 	bl	8008100 <isotp_receive_consecutive_frame>
 8008442:	61f8      	str	r0, [r7, #28]

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret) {
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	f113 0f04 	cmn.w	r3, #4
 800844a:	d108      	bne.n	800845e <isotp_on_can_message+0x16a>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f06f 0203 	mvn.w	r2, #3
 8008452:	639a      	str	r2, [r3, #56]	@ 0x38
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                break;
 800845c:	e097      	b.n	800858e <isotp_on_can_message+0x29a>
            }

            /* if success */
            if (ISOTP_RET_OK == ret) {
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f040 808f 	bne.w	8008584 <isotp_on_can_message+0x290>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8008466:	f7fa fc9d 	bl	8002da4 <isotp_user_get_ms>
 800846a:	4603      	mov	r3, r0
 800846c:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	635a      	str	r2, [r3, #52]	@ 0x34
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size) {
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800847c:	429a      	cmp	r2, r3
 800847e:	d304      	bcc.n	800848a <isotp_on_can_message+0x196>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2202      	movs	r2, #2
 8008484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
                    }
                }
            }
            
            break;
 8008488:	e07c      	b.n	8008584 <isotp_on_can_message+0x290>
                    if (0 == --link->receive_bs_count) {
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008490:	3b01      	subs	r3, #1
 8008492:	b2da      	uxtb	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d16f      	bne.n	8008584 <isotp_on_can_message+0x290>
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	22c8      	movs	r2, #200	@ 0xc8
 80084a8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80084b2:	2300      	movs	r3, #0
 80084b4:	2100      	movs	r1, #0
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f7ff fc65 	bl	8007d86 <isotp_send_flow_control>
            break;
 80084bc:	e062      	b.n	8008584 <isotp_on_can_message+0x290>
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d15f      	bne.n	8008588 <isotp_on_can_message+0x294>
                break;
            }

            /* handle message */
            ret = isotp_receive_flow_control_frame(link, &message, len);
 80084c8:	79fa      	ldrb	r2, [r7, #7]
 80084ca:	f107 0314 	add.w	r3, r7, #20
 80084ce:	4619      	mov	r1, r3
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f7ff fe69 	bl	80081a8 <isotp_receive_flow_control_frame>
 80084d6:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d156      	bne.n	800858c <isotp_on_can_message+0x298>
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80084de:	f7fa fc61 	bl	8002da4 <isotp_user_get_ms>
 80084e2:	4603      	mov	r3, r0
 80084e4:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	619a      	str	r2, [r3, #24]

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 80084ec:	7d3b      	ldrb	r3, [r7, #20]
 80084ee:	f003 030f 	and.w	r3, r3, #15
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d108      	bne.n	800850a <isotp_on_can_message+0x216>
                    link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f06f 0207 	mvn.w	r2, #7
 80084fe:	61da      	str	r2, [r3, #28]
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2202      	movs	r2, #2
 8008504:	f883 2020 	strb.w	r2, [r3, #32]
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
                    link->send_wtf_count = 0;
                }
            }
            break;
 8008508:	e040      	b.n	800858c <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 800850a:	7d3b      	ldrb	r3, [r7, #20]
 800850c:	f003 030f 	and.w	r3, r3, #15
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b01      	cmp	r3, #1
 8008514:	d112      	bne.n	800853c <isotp_on_can_message+0x248>
                    link->send_wtf_count += 1;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	7cdb      	ldrb	r3, [r3, #19]
 800851a:	3301      	adds	r3, #1
 800851c:	b2da      	uxtb	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	74da      	strb	r2, [r3, #19]
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	7cdb      	ldrb	r3, [r3, #19]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d930      	bls.n	800858c <isotp_on_can_message+0x298>
                        link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f06f 0206 	mvn.w	r2, #6
 8008530:	61da      	str	r2, [r3, #28]
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2202      	movs	r2, #2
 8008536:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 800853a:	e027      	b.n	800858c <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 800853c:	7d3b      	ldrb	r3, [r7, #20]
 800853e:	f003 030f 	and.w	r3, r3, #15
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	d121      	bne.n	800858c <isotp_on_can_message+0x298>
                    if (0 == message.as.flow_control.BS) {
 8008548:	7d7b      	ldrb	r3, [r7, #21]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d104      	bne.n	8008558 <isotp_on_can_message+0x264>
                        link->send_bs_remain = ISOTP_INVALID_BS;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008554:	821a      	strh	r2, [r3, #16]
 8008556:	e003      	b.n	8008560 <isotp_on_can_message+0x26c>
                        link->send_bs_remain = message.as.flow_control.BS;
 8008558:	7d7b      	ldrb	r3, [r7, #21]
 800855a:	461a      	mov	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	821a      	strh	r2, [r3, #16]
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 8008560:	7dbb      	ldrb	r3, [r7, #22]
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff fbf1 	bl	8007d4a <isotp_st_min_to_ms>
 8008568:	4603      	mov	r3, r0
 800856a:	461a      	mov	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	749a      	strb	r2, [r3, #18]
                    link->send_wtf_count = 0;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	74da      	strb	r2, [r3, #19]
            break;
 8008576:	e009      	b.n	800858c <isotp_on_can_message+0x298>
        default:
            break;
 8008578:	bf00      	nop
 800857a:	e00a      	b.n	8008592 <isotp_on_can_message+0x29e>
            break;
 800857c:	bf00      	nop
 800857e:	e008      	b.n	8008592 <isotp_on_can_message+0x29e>
            break;
 8008580:	bf00      	nop
 8008582:	e006      	b.n	8008592 <isotp_on_can_message+0x29e>
            break;
 8008584:	bf00      	nop
 8008586:	e004      	b.n	8008592 <isotp_on_can_message+0x29e>
                break;
 8008588:	bf00      	nop
 800858a:	e002      	b.n	8008592 <isotp_on_can_message+0x29e>
            break;
 800858c:	bf00      	nop
    };
    
    return;
 800858e:	e000      	b.n	8008592 <isotp_on_can_message+0x29e>
        return;
 8008590:	bf00      	nop
}
 8008592:	3720      	adds	r7, #32
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <isotp_receive>:

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size) {
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	4613      	mov	r3, r2
 80085a6:	80fb      	strh	r3, [r7, #6]
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status) {
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d002      	beq.n	80085b8 <isotp_receive+0x20>
        return ISOTP_RET_NO_DATA;
 80085b2:	f06f 0304 	mvn.w	r3, #4
 80085b6:	e017      	b.n	80085e8 <isotp_receive+0x50>
    }

    copylen = link->receive_size;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085bc:	82fb      	strh	r3, [r7, #22]
    if (copylen > payload_size) {
 80085be:	8afa      	ldrh	r2, [r7, #22]
 80085c0:	88fb      	ldrh	r3, [r7, #6]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d901      	bls.n	80085ca <isotp_receive+0x32>
        copylen = payload_size;
 80085c6:	88fb      	ldrh	r3, [r7, #6]
 80085c8:	82fb      	strh	r3, [r7, #22]
    }

    memcpy(payload, link->receive_buffer, copylen);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ce:	8afa      	ldrh	r2, [r7, #22]
 80085d0:	4619      	mov	r1, r3
 80085d2:	68b8      	ldr	r0, [r7, #8]
 80085d4:	f002 f82d 	bl	800a632 <memcpy>
    *out_size = copylen;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	8afa      	ldrh	r2, [r7, #22]
 80085dc:	801a      	strh	r2, [r3, #0]

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return ISOTP_RET_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <isotp_init_link>:

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 80085fe:	2240      	movs	r2, #64	@ 0x40
 8008600:	2100      	movs	r1, #0
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f001 ff17 	bl	800a436 <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	887a      	ldrh	r2, [r7, #2]
 8008628:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	629a      	str	r2, [r3, #40]	@ 0x28
    link->receive_buf_size = recvbufsize;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	8bba      	ldrh	r2, [r7, #28]
 8008634:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    return;
 8008636:	bf00      	nop
}
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 800863e:	b590      	push	{r4, r7, lr}
 8008640:	b085      	sub	sp, #20
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d15c      	bne.n	800870a <isotp_poll+0xcc>

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	8a1b      	ldrh	r3, [r3, #16]
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
 8008654:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008658:	4293      	cmp	r3, r2
 800865a:	d003      	beq.n	8008664 <isotp_poll+0x26>
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	8a1b      	ldrh	r3, [r3, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d041      	beq.n	80086e8 <isotp_poll+0xaa>
        /* and if st_min is zero or go beyond interval time */
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	7c9b      	ldrb	r3, [r3, #18]
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00c      	beq.n	8008686 <isotp_poll+0x48>
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	7c9b      	ldrb	r3, [r3, #18]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d039      	beq.n	80086e8 <isotp_poll+0xaa>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	461c      	mov	r4, r3
 800867a:	f7fa fb93 	bl	8002da4 <isotp_user_get_ms>
 800867e:	4603      	mov	r3, r0
 8008680:	1ae3      	subs	r3, r4, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	da30      	bge.n	80086e8 <isotp_poll+0xaa>
            
            ret = isotp_send_consecutive_frame(link);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7ff fc4a 	bl	8007f20 <isotp_send_consecutive_frame>
 800868c:	60f8      	str	r0, [r7, #12]
            if (ISOTP_RET_OK == ret) {
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d125      	bne.n	80086e0 <isotp_poll+0xa2>
                if (ISOTP_INVALID_BS != link->send_bs_remain) {
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	8a1b      	ldrh	r3, [r3, #16]
 8008698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800869c:	4293      	cmp	r3, r2
 800869e:	d005      	beq.n	80086ac <isotp_poll+0x6e>
                    link->send_bs_remain -= 1;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	8a1b      	ldrh	r3, [r3, #16]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	821a      	strh	r2, [r3, #16]
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80086ac:	f7fa fb7a 	bl	8002da4 <isotp_user_get_ms>
 80086b0:	4603      	mov	r3, r0
 80086b2:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	619a      	str	r2, [r3, #24]
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 80086ba:	f7fa fb73 	bl	8002da4 <isotp_user_get_ms>
 80086be:	4602      	mov	r2, r0
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	7c9b      	ldrb	r3, [r3, #18]
 80086c4:	441a      	add	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	615a      	str	r2, [r3, #20]

                /* check if send finish */
                if (link->send_offset >= link->send_size) {
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	899a      	ldrh	r2, [r3, #12]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	895b      	ldrh	r3, [r3, #10]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d308      	bcc.n	80086e8 <isotp_poll+0xaa>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2020 	strb.w	r2, [r3, #32]
 80086de:	e003      	b.n	80086e8 <isotp_poll+0xaa>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2202      	movs	r2, #2
 80086e4:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	461c      	mov	r4, r3
 80086ee:	f7fa fb59 	bl	8002da4 <isotp_user_get_ms>
 80086f2:	4603      	mov	r3, r0
 80086f4:	1ae3      	subs	r3, r4, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	da07      	bge.n	800870a <isotp_poll+0xcc>
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f06f 0201 	mvn.w	r2, #1
 8008700:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_ERROR;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2202      	movs	r2, #2
 8008706:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008710:	2b01      	cmp	r3, #1
 8008712:	d111      	bne.n	8008738 <isotp_poll+0xfa>
        
        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008718:	461c      	mov	r4, r3
 800871a:	f7fa fb43 	bl	8002da4 <isotp_user_get_ms>
 800871e:	4603      	mov	r3, r0
 8008720:	1ae3      	subs	r3, r4, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	da08      	bge.n	8008738 <isotp_poll+0xfa>
            link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f06f 0202 	mvn.w	r2, #2
 800872c:	639a      	str	r2, [r3, #56]	@ 0x38
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    return;
 8008736:	bf00      	nop
 8008738:	bf00      	nop
}
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	bd90      	pop	{r4, r7, pc}

08008740 <__assert_func>:
 8008740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008742:	4614      	mov	r4, r2
 8008744:	461a      	mov	r2, r3
 8008746:	4b09      	ldr	r3, [pc, #36]	@ (800876c <__assert_func+0x2c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4605      	mov	r5, r0
 800874c:	68d8      	ldr	r0, [r3, #12]
 800874e:	b14c      	cbz	r4, 8008764 <__assert_func+0x24>
 8008750:	4b07      	ldr	r3, [pc, #28]	@ (8008770 <__assert_func+0x30>)
 8008752:	9100      	str	r1, [sp, #0]
 8008754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008758:	4906      	ldr	r1, [pc, #24]	@ (8008774 <__assert_func+0x34>)
 800875a:	462b      	mov	r3, r5
 800875c:	f001 fdd6 	bl	800a30c <fiprintf>
 8008760:	f001 ff84 	bl	800a66c <abort>
 8008764:	4b04      	ldr	r3, [pc, #16]	@ (8008778 <__assert_func+0x38>)
 8008766:	461c      	mov	r4, r3
 8008768:	e7f3      	b.n	8008752 <__assert_func+0x12>
 800876a:	bf00      	nop
 800876c:	20000300 	.word	0x20000300
 8008770:	0800d199 	.word	0x0800d199
 8008774:	0800d1a6 	.word	0x0800d1a6
 8008778:	0800d1d4 	.word	0x0800d1d4

0800877c <malloc>:
 800877c:	4b02      	ldr	r3, [pc, #8]	@ (8008788 <malloc+0xc>)
 800877e:	4601      	mov	r1, r0
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	f000 b825 	b.w	80087d0 <_malloc_r>
 8008786:	bf00      	nop
 8008788:	20000300 	.word	0x20000300

0800878c <sbrk_aligned>:
 800878c:	b570      	push	{r4, r5, r6, lr}
 800878e:	4e0f      	ldr	r6, [pc, #60]	@ (80087cc <sbrk_aligned+0x40>)
 8008790:	460c      	mov	r4, r1
 8008792:	6831      	ldr	r1, [r6, #0]
 8008794:	4605      	mov	r5, r0
 8008796:	b911      	cbnz	r1, 800879e <sbrk_aligned+0x12>
 8008798:	f001 fefc 	bl	800a594 <_sbrk_r>
 800879c:	6030      	str	r0, [r6, #0]
 800879e:	4621      	mov	r1, r4
 80087a0:	4628      	mov	r0, r5
 80087a2:	f001 fef7 	bl	800a594 <_sbrk_r>
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	d103      	bne.n	80087b2 <sbrk_aligned+0x26>
 80087aa:	f04f 34ff 	mov.w	r4, #4294967295
 80087ae:	4620      	mov	r0, r4
 80087b0:	bd70      	pop	{r4, r5, r6, pc}
 80087b2:	1cc4      	adds	r4, r0, #3
 80087b4:	f024 0403 	bic.w	r4, r4, #3
 80087b8:	42a0      	cmp	r0, r4
 80087ba:	d0f8      	beq.n	80087ae <sbrk_aligned+0x22>
 80087bc:	1a21      	subs	r1, r4, r0
 80087be:	4628      	mov	r0, r5
 80087c0:	f001 fee8 	bl	800a594 <_sbrk_r>
 80087c4:	3001      	adds	r0, #1
 80087c6:	d1f2      	bne.n	80087ae <sbrk_aligned+0x22>
 80087c8:	e7ef      	b.n	80087aa <sbrk_aligned+0x1e>
 80087ca:	bf00      	nop
 80087cc:	20000d98 	.word	0x20000d98

080087d0 <_malloc_r>:
 80087d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d4:	1ccd      	adds	r5, r1, #3
 80087d6:	f025 0503 	bic.w	r5, r5, #3
 80087da:	3508      	adds	r5, #8
 80087dc:	2d0c      	cmp	r5, #12
 80087de:	bf38      	it	cc
 80087e0:	250c      	movcc	r5, #12
 80087e2:	2d00      	cmp	r5, #0
 80087e4:	4606      	mov	r6, r0
 80087e6:	db01      	blt.n	80087ec <_malloc_r+0x1c>
 80087e8:	42a9      	cmp	r1, r5
 80087ea:	d904      	bls.n	80087f6 <_malloc_r+0x26>
 80087ec:	230c      	movs	r3, #12
 80087ee:	6033      	str	r3, [r6, #0]
 80087f0:	2000      	movs	r0, #0
 80087f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088cc <_malloc_r+0xfc>
 80087fa:	f000 f869 	bl	80088d0 <__malloc_lock>
 80087fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008802:	461c      	mov	r4, r3
 8008804:	bb44      	cbnz	r4, 8008858 <_malloc_r+0x88>
 8008806:	4629      	mov	r1, r5
 8008808:	4630      	mov	r0, r6
 800880a:	f7ff ffbf 	bl	800878c <sbrk_aligned>
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	4604      	mov	r4, r0
 8008812:	d158      	bne.n	80088c6 <_malloc_r+0xf6>
 8008814:	f8d8 4000 	ldr.w	r4, [r8]
 8008818:	4627      	mov	r7, r4
 800881a:	2f00      	cmp	r7, #0
 800881c:	d143      	bne.n	80088a6 <_malloc_r+0xd6>
 800881e:	2c00      	cmp	r4, #0
 8008820:	d04b      	beq.n	80088ba <_malloc_r+0xea>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	4639      	mov	r1, r7
 8008826:	4630      	mov	r0, r6
 8008828:	eb04 0903 	add.w	r9, r4, r3
 800882c:	f001 feb2 	bl	800a594 <_sbrk_r>
 8008830:	4581      	cmp	r9, r0
 8008832:	d142      	bne.n	80088ba <_malloc_r+0xea>
 8008834:	6821      	ldr	r1, [r4, #0]
 8008836:	1a6d      	subs	r5, r5, r1
 8008838:	4629      	mov	r1, r5
 800883a:	4630      	mov	r0, r6
 800883c:	f7ff ffa6 	bl	800878c <sbrk_aligned>
 8008840:	3001      	adds	r0, #1
 8008842:	d03a      	beq.n	80088ba <_malloc_r+0xea>
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	442b      	add	r3, r5
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	f8d8 3000 	ldr.w	r3, [r8]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	bb62      	cbnz	r2, 80088ac <_malloc_r+0xdc>
 8008852:	f8c8 7000 	str.w	r7, [r8]
 8008856:	e00f      	b.n	8008878 <_malloc_r+0xa8>
 8008858:	6822      	ldr	r2, [r4, #0]
 800885a:	1b52      	subs	r2, r2, r5
 800885c:	d420      	bmi.n	80088a0 <_malloc_r+0xd0>
 800885e:	2a0b      	cmp	r2, #11
 8008860:	d917      	bls.n	8008892 <_malloc_r+0xc2>
 8008862:	1961      	adds	r1, r4, r5
 8008864:	42a3      	cmp	r3, r4
 8008866:	6025      	str	r5, [r4, #0]
 8008868:	bf18      	it	ne
 800886a:	6059      	strne	r1, [r3, #4]
 800886c:	6863      	ldr	r3, [r4, #4]
 800886e:	bf08      	it	eq
 8008870:	f8c8 1000 	streq.w	r1, [r8]
 8008874:	5162      	str	r2, [r4, r5]
 8008876:	604b      	str	r3, [r1, #4]
 8008878:	4630      	mov	r0, r6
 800887a:	f000 f82f 	bl	80088dc <__malloc_unlock>
 800887e:	f104 000b 	add.w	r0, r4, #11
 8008882:	1d23      	adds	r3, r4, #4
 8008884:	f020 0007 	bic.w	r0, r0, #7
 8008888:	1ac2      	subs	r2, r0, r3
 800888a:	bf1c      	itt	ne
 800888c:	1a1b      	subne	r3, r3, r0
 800888e:	50a3      	strne	r3, [r4, r2]
 8008890:	e7af      	b.n	80087f2 <_malloc_r+0x22>
 8008892:	6862      	ldr	r2, [r4, #4]
 8008894:	42a3      	cmp	r3, r4
 8008896:	bf0c      	ite	eq
 8008898:	f8c8 2000 	streq.w	r2, [r8]
 800889c:	605a      	strne	r2, [r3, #4]
 800889e:	e7eb      	b.n	8008878 <_malloc_r+0xa8>
 80088a0:	4623      	mov	r3, r4
 80088a2:	6864      	ldr	r4, [r4, #4]
 80088a4:	e7ae      	b.n	8008804 <_malloc_r+0x34>
 80088a6:	463c      	mov	r4, r7
 80088a8:	687f      	ldr	r7, [r7, #4]
 80088aa:	e7b6      	b.n	800881a <_malloc_r+0x4a>
 80088ac:	461a      	mov	r2, r3
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	d1fb      	bne.n	80088ac <_malloc_r+0xdc>
 80088b4:	2300      	movs	r3, #0
 80088b6:	6053      	str	r3, [r2, #4]
 80088b8:	e7de      	b.n	8008878 <_malloc_r+0xa8>
 80088ba:	230c      	movs	r3, #12
 80088bc:	6033      	str	r3, [r6, #0]
 80088be:	4630      	mov	r0, r6
 80088c0:	f000 f80c 	bl	80088dc <__malloc_unlock>
 80088c4:	e794      	b.n	80087f0 <_malloc_r+0x20>
 80088c6:	6005      	str	r5, [r0, #0]
 80088c8:	e7d6      	b.n	8008878 <_malloc_r+0xa8>
 80088ca:	bf00      	nop
 80088cc:	20000d9c 	.word	0x20000d9c

080088d0 <__malloc_lock>:
 80088d0:	4801      	ldr	r0, [pc, #4]	@ (80088d8 <__malloc_lock+0x8>)
 80088d2:	f001 beac 	b.w	800a62e <__retarget_lock_acquire_recursive>
 80088d6:	bf00      	nop
 80088d8:	20000ee0 	.word	0x20000ee0

080088dc <__malloc_unlock>:
 80088dc:	4801      	ldr	r0, [pc, #4]	@ (80088e4 <__malloc_unlock+0x8>)
 80088de:	f001 bea7 	b.w	800a630 <__retarget_lock_release_recursive>
 80088e2:	bf00      	nop
 80088e4:	20000ee0 	.word	0x20000ee0

080088e8 <sulp>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	4604      	mov	r4, r0
 80088ec:	460d      	mov	r5, r1
 80088ee:	ec45 4b10 	vmov	d0, r4, r5
 80088f2:	4616      	mov	r6, r2
 80088f4:	f003 fc1e 	bl	800c134 <__ulp>
 80088f8:	ec51 0b10 	vmov	r0, r1, d0
 80088fc:	b17e      	cbz	r6, 800891e <sulp+0x36>
 80088fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008902:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008906:	2b00      	cmp	r3, #0
 8008908:	dd09      	ble.n	800891e <sulp+0x36>
 800890a:	051b      	lsls	r3, r3, #20
 800890c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008910:	2400      	movs	r4, #0
 8008912:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008916:	4622      	mov	r2, r4
 8008918:	462b      	mov	r3, r5
 800891a:	f7f7 fe6d 	bl	80005f8 <__aeabi_dmul>
 800891e:	ec41 0b10 	vmov	d0, r0, r1
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	0000      	movs	r0, r0
	...

08008928 <_strtod_l>:
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	b09f      	sub	sp, #124	@ 0x7c
 800892e:	460c      	mov	r4, r1
 8008930:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008932:	2200      	movs	r2, #0
 8008934:	921a      	str	r2, [sp, #104]	@ 0x68
 8008936:	9005      	str	r0, [sp, #20]
 8008938:	f04f 0a00 	mov.w	sl, #0
 800893c:	f04f 0b00 	mov.w	fp, #0
 8008940:	460a      	mov	r2, r1
 8008942:	9219      	str	r2, [sp, #100]	@ 0x64
 8008944:	7811      	ldrb	r1, [r2, #0]
 8008946:	292b      	cmp	r1, #43	@ 0x2b
 8008948:	d04a      	beq.n	80089e0 <_strtod_l+0xb8>
 800894a:	d838      	bhi.n	80089be <_strtod_l+0x96>
 800894c:	290d      	cmp	r1, #13
 800894e:	d832      	bhi.n	80089b6 <_strtod_l+0x8e>
 8008950:	2908      	cmp	r1, #8
 8008952:	d832      	bhi.n	80089ba <_strtod_l+0x92>
 8008954:	2900      	cmp	r1, #0
 8008956:	d03b      	beq.n	80089d0 <_strtod_l+0xa8>
 8008958:	2200      	movs	r2, #0
 800895a:	920e      	str	r2, [sp, #56]	@ 0x38
 800895c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800895e:	782a      	ldrb	r2, [r5, #0]
 8008960:	2a30      	cmp	r2, #48	@ 0x30
 8008962:	f040 80b2 	bne.w	8008aca <_strtod_l+0x1a2>
 8008966:	786a      	ldrb	r2, [r5, #1]
 8008968:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800896c:	2a58      	cmp	r2, #88	@ 0x58
 800896e:	d16e      	bne.n	8008a4e <_strtod_l+0x126>
 8008970:	9302      	str	r3, [sp, #8]
 8008972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	ab1a      	add	r3, sp, #104	@ 0x68
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	4a8f      	ldr	r2, [pc, #572]	@ (8008bb8 <_strtod_l+0x290>)
 800897c:	9805      	ldr	r0, [sp, #20]
 800897e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008980:	a919      	add	r1, sp, #100	@ 0x64
 8008982:	f002 fd87 	bl	800b494 <__gethex>
 8008986:	f010 060f 	ands.w	r6, r0, #15
 800898a:	4604      	mov	r4, r0
 800898c:	d005      	beq.n	800899a <_strtod_l+0x72>
 800898e:	2e06      	cmp	r6, #6
 8008990:	d128      	bne.n	80089e4 <_strtod_l+0xbc>
 8008992:	3501      	adds	r5, #1
 8008994:	2300      	movs	r3, #0
 8008996:	9519      	str	r5, [sp, #100]	@ 0x64
 8008998:	930e      	str	r3, [sp, #56]	@ 0x38
 800899a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800899c:	2b00      	cmp	r3, #0
 800899e:	f040 858e 	bne.w	80094be <_strtod_l+0xb96>
 80089a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089a4:	b1cb      	cbz	r3, 80089da <_strtod_l+0xb2>
 80089a6:	4652      	mov	r2, sl
 80089a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80089ac:	ec43 2b10 	vmov	d0, r2, r3
 80089b0:	b01f      	add	sp, #124	@ 0x7c
 80089b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b6:	2920      	cmp	r1, #32
 80089b8:	d1ce      	bne.n	8008958 <_strtod_l+0x30>
 80089ba:	3201      	adds	r2, #1
 80089bc:	e7c1      	b.n	8008942 <_strtod_l+0x1a>
 80089be:	292d      	cmp	r1, #45	@ 0x2d
 80089c0:	d1ca      	bne.n	8008958 <_strtod_l+0x30>
 80089c2:	2101      	movs	r1, #1
 80089c4:	910e      	str	r1, [sp, #56]	@ 0x38
 80089c6:	1c51      	adds	r1, r2, #1
 80089c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80089ca:	7852      	ldrb	r2, [r2, #1]
 80089cc:	2a00      	cmp	r2, #0
 80089ce:	d1c5      	bne.n	800895c <_strtod_l+0x34>
 80089d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f040 8570 	bne.w	80094ba <_strtod_l+0xb92>
 80089da:	4652      	mov	r2, sl
 80089dc:	465b      	mov	r3, fp
 80089de:	e7e5      	b.n	80089ac <_strtod_l+0x84>
 80089e0:	2100      	movs	r1, #0
 80089e2:	e7ef      	b.n	80089c4 <_strtod_l+0x9c>
 80089e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80089e6:	b13a      	cbz	r2, 80089f8 <_strtod_l+0xd0>
 80089e8:	2135      	movs	r1, #53	@ 0x35
 80089ea:	a81c      	add	r0, sp, #112	@ 0x70
 80089ec:	f003 fc9c 	bl	800c328 <__copybits>
 80089f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089f2:	9805      	ldr	r0, [sp, #20]
 80089f4:	f003 f872 	bl	800badc <_Bfree>
 80089f8:	3e01      	subs	r6, #1
 80089fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80089fc:	2e04      	cmp	r6, #4
 80089fe:	d806      	bhi.n	8008a0e <_strtod_l+0xe6>
 8008a00:	e8df f006 	tbb	[pc, r6]
 8008a04:	201d0314 	.word	0x201d0314
 8008a08:	14          	.byte	0x14
 8008a09:	00          	.byte	0x00
 8008a0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008a0e:	05e1      	lsls	r1, r4, #23
 8008a10:	bf48      	it	mi
 8008a12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008a16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a1a:	0d1b      	lsrs	r3, r3, #20
 8008a1c:	051b      	lsls	r3, r3, #20
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1bb      	bne.n	800899a <_strtod_l+0x72>
 8008a22:	f001 fdd9 	bl	800a5d8 <__errno>
 8008a26:	2322      	movs	r3, #34	@ 0x22
 8008a28:	6003      	str	r3, [r0, #0]
 8008a2a:	e7b6      	b.n	800899a <_strtod_l+0x72>
 8008a2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008a30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008a34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008a38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a3c:	e7e7      	b.n	8008a0e <_strtod_l+0xe6>
 8008a3e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008bc0 <_strtod_l+0x298>
 8008a42:	e7e4      	b.n	8008a0e <_strtod_l+0xe6>
 8008a44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008a48:	f04f 3aff 	mov.w	sl, #4294967295
 8008a4c:	e7df      	b.n	8008a0e <_strtod_l+0xe6>
 8008a4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a54:	785b      	ldrb	r3, [r3, #1]
 8008a56:	2b30      	cmp	r3, #48	@ 0x30
 8008a58:	d0f9      	beq.n	8008a4e <_strtod_l+0x126>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d09d      	beq.n	800899a <_strtod_l+0x72>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	2700      	movs	r7, #0
 8008a62:	9308      	str	r3, [sp, #32]
 8008a64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a66:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a68:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008a6a:	46b9      	mov	r9, r7
 8008a6c:	220a      	movs	r2, #10
 8008a6e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008a70:	7805      	ldrb	r5, [r0, #0]
 8008a72:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008a76:	b2d9      	uxtb	r1, r3
 8008a78:	2909      	cmp	r1, #9
 8008a7a:	d928      	bls.n	8008ace <_strtod_l+0x1a6>
 8008a7c:	494f      	ldr	r1, [pc, #316]	@ (8008bbc <_strtod_l+0x294>)
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f001 fce1 	bl	800a446 <strncmp>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d032      	beq.n	8008aee <_strtod_l+0x1c6>
 8008a88:	2000      	movs	r0, #0
 8008a8a:	462a      	mov	r2, r5
 8008a8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a8e:	464d      	mov	r5, r9
 8008a90:	4603      	mov	r3, r0
 8008a92:	2a65      	cmp	r2, #101	@ 0x65
 8008a94:	d001      	beq.n	8008a9a <_strtod_l+0x172>
 8008a96:	2a45      	cmp	r2, #69	@ 0x45
 8008a98:	d114      	bne.n	8008ac4 <_strtod_l+0x19c>
 8008a9a:	b91d      	cbnz	r5, 8008aa4 <_strtod_l+0x17c>
 8008a9c:	9a08      	ldr	r2, [sp, #32]
 8008a9e:	4302      	orrs	r2, r0
 8008aa0:	d096      	beq.n	80089d0 <_strtod_l+0xa8>
 8008aa2:	2500      	movs	r5, #0
 8008aa4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008aa6:	1c62      	adds	r2, r4, #1
 8008aa8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008aaa:	7862      	ldrb	r2, [r4, #1]
 8008aac:	2a2b      	cmp	r2, #43	@ 0x2b
 8008aae:	d07a      	beq.n	8008ba6 <_strtod_l+0x27e>
 8008ab0:	2a2d      	cmp	r2, #45	@ 0x2d
 8008ab2:	d07e      	beq.n	8008bb2 <_strtod_l+0x28a>
 8008ab4:	f04f 0c00 	mov.w	ip, #0
 8008ab8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008abc:	2909      	cmp	r1, #9
 8008abe:	f240 8085 	bls.w	8008bcc <_strtod_l+0x2a4>
 8008ac2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ac4:	f04f 0800 	mov.w	r8, #0
 8008ac8:	e0a5      	b.n	8008c16 <_strtod_l+0x2ee>
 8008aca:	2300      	movs	r3, #0
 8008acc:	e7c8      	b.n	8008a60 <_strtod_l+0x138>
 8008ace:	f1b9 0f08 	cmp.w	r9, #8
 8008ad2:	bfd8      	it	le
 8008ad4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008ad6:	f100 0001 	add.w	r0, r0, #1
 8008ada:	bfda      	itte	le
 8008adc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ae0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008ae2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008ae6:	f109 0901 	add.w	r9, r9, #1
 8008aea:	9019      	str	r0, [sp, #100]	@ 0x64
 8008aec:	e7bf      	b.n	8008a6e <_strtod_l+0x146>
 8008aee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008af0:	1c5a      	adds	r2, r3, #1
 8008af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008af4:	785a      	ldrb	r2, [r3, #1]
 8008af6:	f1b9 0f00 	cmp.w	r9, #0
 8008afa:	d03b      	beq.n	8008b74 <_strtod_l+0x24c>
 8008afc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008afe:	464d      	mov	r5, r9
 8008b00:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008b04:	2b09      	cmp	r3, #9
 8008b06:	d912      	bls.n	8008b2e <_strtod_l+0x206>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e7c2      	b.n	8008a92 <_strtod_l+0x16a>
 8008b0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b12:	785a      	ldrb	r2, [r3, #1]
 8008b14:	3001      	adds	r0, #1
 8008b16:	2a30      	cmp	r2, #48	@ 0x30
 8008b18:	d0f8      	beq.n	8008b0c <_strtod_l+0x1e4>
 8008b1a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008b1e:	2b08      	cmp	r3, #8
 8008b20:	f200 84d2 	bhi.w	80094c8 <_strtod_l+0xba0>
 8008b24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b26:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b28:	2000      	movs	r0, #0
 8008b2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	3a30      	subs	r2, #48	@ 0x30
 8008b30:	f100 0301 	add.w	r3, r0, #1
 8008b34:	d018      	beq.n	8008b68 <_strtod_l+0x240>
 8008b36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b38:	4419      	add	r1, r3
 8008b3a:	910a      	str	r1, [sp, #40]	@ 0x28
 8008b3c:	462e      	mov	r6, r5
 8008b3e:	f04f 0e0a 	mov.w	lr, #10
 8008b42:	1c71      	adds	r1, r6, #1
 8008b44:	eba1 0c05 	sub.w	ip, r1, r5
 8008b48:	4563      	cmp	r3, ip
 8008b4a:	dc15      	bgt.n	8008b78 <_strtod_l+0x250>
 8008b4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008b50:	182b      	adds	r3, r5, r0
 8008b52:	2b08      	cmp	r3, #8
 8008b54:	f105 0501 	add.w	r5, r5, #1
 8008b58:	4405      	add	r5, r0
 8008b5a:	dc1a      	bgt.n	8008b92 <_strtod_l+0x26a>
 8008b5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b5e:	230a      	movs	r3, #10
 8008b60:	fb03 2301 	mla	r3, r3, r1, r2
 8008b64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b66:	2300      	movs	r3, #0
 8008b68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b6a:	1c51      	adds	r1, r2, #1
 8008b6c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b6e:	7852      	ldrb	r2, [r2, #1]
 8008b70:	4618      	mov	r0, r3
 8008b72:	e7c5      	b.n	8008b00 <_strtod_l+0x1d8>
 8008b74:	4648      	mov	r0, r9
 8008b76:	e7ce      	b.n	8008b16 <_strtod_l+0x1ee>
 8008b78:	2e08      	cmp	r6, #8
 8008b7a:	dc05      	bgt.n	8008b88 <_strtod_l+0x260>
 8008b7c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008b7e:	fb0e f606 	mul.w	r6, lr, r6
 8008b82:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008b84:	460e      	mov	r6, r1
 8008b86:	e7dc      	b.n	8008b42 <_strtod_l+0x21a>
 8008b88:	2910      	cmp	r1, #16
 8008b8a:	bfd8      	it	le
 8008b8c:	fb0e f707 	mulle.w	r7, lr, r7
 8008b90:	e7f8      	b.n	8008b84 <_strtod_l+0x25c>
 8008b92:	2b0f      	cmp	r3, #15
 8008b94:	bfdc      	itt	le
 8008b96:	230a      	movle	r3, #10
 8008b98:	fb03 2707 	mlale	r7, r3, r7, r2
 8008b9c:	e7e3      	b.n	8008b66 <_strtod_l+0x23e>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e77a      	b.n	8008a9c <_strtod_l+0x174>
 8008ba6:	f04f 0c00 	mov.w	ip, #0
 8008baa:	1ca2      	adds	r2, r4, #2
 8008bac:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bae:	78a2      	ldrb	r2, [r4, #2]
 8008bb0:	e782      	b.n	8008ab8 <_strtod_l+0x190>
 8008bb2:	f04f 0c01 	mov.w	ip, #1
 8008bb6:	e7f8      	b.n	8008baa <_strtod_l+0x282>
 8008bb8:	0800d3e0 	.word	0x0800d3e0
 8008bbc:	0800d1d5 	.word	0x0800d1d5
 8008bc0:	7ff00000 	.word	0x7ff00000
 8008bc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bc6:	1c51      	adds	r1, r2, #1
 8008bc8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008bca:	7852      	ldrb	r2, [r2, #1]
 8008bcc:	2a30      	cmp	r2, #48	@ 0x30
 8008bce:	d0f9      	beq.n	8008bc4 <_strtod_l+0x29c>
 8008bd0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008bd4:	2908      	cmp	r1, #8
 8008bd6:	f63f af75 	bhi.w	8008ac4 <_strtod_l+0x19c>
 8008bda:	3a30      	subs	r2, #48	@ 0x30
 8008bdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008be0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008be2:	f04f 080a 	mov.w	r8, #10
 8008be6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008be8:	1c56      	adds	r6, r2, #1
 8008bea:	9619      	str	r6, [sp, #100]	@ 0x64
 8008bec:	7852      	ldrb	r2, [r2, #1]
 8008bee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008bf2:	f1be 0f09 	cmp.w	lr, #9
 8008bf6:	d939      	bls.n	8008c6c <_strtod_l+0x344>
 8008bf8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008bfa:	1a76      	subs	r6, r6, r1
 8008bfc:	2e08      	cmp	r6, #8
 8008bfe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008c02:	dc03      	bgt.n	8008c0c <_strtod_l+0x2e4>
 8008c04:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c06:	4588      	cmp	r8, r1
 8008c08:	bfa8      	it	ge
 8008c0a:	4688      	movge	r8, r1
 8008c0c:	f1bc 0f00 	cmp.w	ip, #0
 8008c10:	d001      	beq.n	8008c16 <_strtod_l+0x2ee>
 8008c12:	f1c8 0800 	rsb	r8, r8, #0
 8008c16:	2d00      	cmp	r5, #0
 8008c18:	d14e      	bne.n	8008cb8 <_strtod_l+0x390>
 8008c1a:	9908      	ldr	r1, [sp, #32]
 8008c1c:	4308      	orrs	r0, r1
 8008c1e:	f47f aebc 	bne.w	800899a <_strtod_l+0x72>
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f47f aed4 	bne.w	80089d0 <_strtod_l+0xa8>
 8008c28:	2a69      	cmp	r2, #105	@ 0x69
 8008c2a:	d028      	beq.n	8008c7e <_strtod_l+0x356>
 8008c2c:	dc25      	bgt.n	8008c7a <_strtod_l+0x352>
 8008c2e:	2a49      	cmp	r2, #73	@ 0x49
 8008c30:	d025      	beq.n	8008c7e <_strtod_l+0x356>
 8008c32:	2a4e      	cmp	r2, #78	@ 0x4e
 8008c34:	f47f aecc 	bne.w	80089d0 <_strtod_l+0xa8>
 8008c38:	499a      	ldr	r1, [pc, #616]	@ (8008ea4 <_strtod_l+0x57c>)
 8008c3a:	a819      	add	r0, sp, #100	@ 0x64
 8008c3c:	f002 fe4c 	bl	800b8d8 <__match>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	f43f aec5 	beq.w	80089d0 <_strtod_l+0xa8>
 8008c46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b28      	cmp	r3, #40	@ 0x28
 8008c4c:	d12e      	bne.n	8008cac <_strtod_l+0x384>
 8008c4e:	4996      	ldr	r1, [pc, #600]	@ (8008ea8 <_strtod_l+0x580>)
 8008c50:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c52:	a819      	add	r0, sp, #100	@ 0x64
 8008c54:	f002 fe54 	bl	800b900 <__hexnan>
 8008c58:	2805      	cmp	r0, #5
 8008c5a:	d127      	bne.n	8008cac <_strtod_l+0x384>
 8008c5c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008c5e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008c62:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008c66:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008c6a:	e696      	b.n	800899a <_strtod_l+0x72>
 8008c6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c6e:	fb08 2101 	mla	r1, r8, r1, r2
 8008c72:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008c76:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c78:	e7b5      	b.n	8008be6 <_strtod_l+0x2be>
 8008c7a:	2a6e      	cmp	r2, #110	@ 0x6e
 8008c7c:	e7da      	b.n	8008c34 <_strtod_l+0x30c>
 8008c7e:	498b      	ldr	r1, [pc, #556]	@ (8008eac <_strtod_l+0x584>)
 8008c80:	a819      	add	r0, sp, #100	@ 0x64
 8008c82:	f002 fe29 	bl	800b8d8 <__match>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f43f aea2 	beq.w	80089d0 <_strtod_l+0xa8>
 8008c8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c8e:	4988      	ldr	r1, [pc, #544]	@ (8008eb0 <_strtod_l+0x588>)
 8008c90:	3b01      	subs	r3, #1
 8008c92:	a819      	add	r0, sp, #100	@ 0x64
 8008c94:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c96:	f002 fe1f 	bl	800b8d8 <__match>
 8008c9a:	b910      	cbnz	r0, 8008ca2 <_strtod_l+0x37a>
 8008c9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	9319      	str	r3, [sp, #100]	@ 0x64
 8008ca2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008ec0 <_strtod_l+0x598>
 8008ca6:	f04f 0a00 	mov.w	sl, #0
 8008caa:	e676      	b.n	800899a <_strtod_l+0x72>
 8008cac:	4881      	ldr	r0, [pc, #516]	@ (8008eb4 <_strtod_l+0x58c>)
 8008cae:	f001 fccf 	bl	800a650 <nan>
 8008cb2:	ec5b ab10 	vmov	sl, fp, d0
 8008cb6:	e670      	b.n	800899a <_strtod_l+0x72>
 8008cb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008cbc:	eba8 0303 	sub.w	r3, r8, r3
 8008cc0:	f1b9 0f00 	cmp.w	r9, #0
 8008cc4:	bf08      	it	eq
 8008cc6:	46a9      	moveq	r9, r5
 8008cc8:	2d10      	cmp	r5, #16
 8008cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ccc:	462c      	mov	r4, r5
 8008cce:	bfa8      	it	ge
 8008cd0:	2410      	movge	r4, #16
 8008cd2:	f7f7 fc17 	bl	8000504 <__aeabi_ui2d>
 8008cd6:	2d09      	cmp	r5, #9
 8008cd8:	4682      	mov	sl, r0
 8008cda:	468b      	mov	fp, r1
 8008cdc:	dc13      	bgt.n	8008d06 <_strtod_l+0x3de>
 8008cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f43f ae5a 	beq.w	800899a <_strtod_l+0x72>
 8008ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce8:	dd78      	ble.n	8008ddc <_strtod_l+0x4b4>
 8008cea:	2b16      	cmp	r3, #22
 8008cec:	dc5f      	bgt.n	8008dae <_strtod_l+0x486>
 8008cee:	4972      	ldr	r1, [pc, #456]	@ (8008eb8 <_strtod_l+0x590>)
 8008cf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cf8:	4652      	mov	r2, sl
 8008cfa:	465b      	mov	r3, fp
 8008cfc:	f7f7 fc7c 	bl	80005f8 <__aeabi_dmul>
 8008d00:	4682      	mov	sl, r0
 8008d02:	468b      	mov	fp, r1
 8008d04:	e649      	b.n	800899a <_strtod_l+0x72>
 8008d06:	4b6c      	ldr	r3, [pc, #432]	@ (8008eb8 <_strtod_l+0x590>)
 8008d08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008d10:	f7f7 fc72 	bl	80005f8 <__aeabi_dmul>
 8008d14:	4682      	mov	sl, r0
 8008d16:	4638      	mov	r0, r7
 8008d18:	468b      	mov	fp, r1
 8008d1a:	f7f7 fbf3 	bl	8000504 <__aeabi_ui2d>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4650      	mov	r0, sl
 8008d24:	4659      	mov	r1, fp
 8008d26:	f7f7 fab1 	bl	800028c <__adddf3>
 8008d2a:	2d0f      	cmp	r5, #15
 8008d2c:	4682      	mov	sl, r0
 8008d2e:	468b      	mov	fp, r1
 8008d30:	ddd5      	ble.n	8008cde <_strtod_l+0x3b6>
 8008d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d34:	1b2c      	subs	r4, r5, r4
 8008d36:	441c      	add	r4, r3
 8008d38:	2c00      	cmp	r4, #0
 8008d3a:	f340 8093 	ble.w	8008e64 <_strtod_l+0x53c>
 8008d3e:	f014 030f 	ands.w	r3, r4, #15
 8008d42:	d00a      	beq.n	8008d5a <_strtod_l+0x432>
 8008d44:	495c      	ldr	r1, [pc, #368]	@ (8008eb8 <_strtod_l+0x590>)
 8008d46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d4a:	4652      	mov	r2, sl
 8008d4c:	465b      	mov	r3, fp
 8008d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d52:	f7f7 fc51 	bl	80005f8 <__aeabi_dmul>
 8008d56:	4682      	mov	sl, r0
 8008d58:	468b      	mov	fp, r1
 8008d5a:	f034 040f 	bics.w	r4, r4, #15
 8008d5e:	d073      	beq.n	8008e48 <_strtod_l+0x520>
 8008d60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008d64:	dd49      	ble.n	8008dfa <_strtod_l+0x4d2>
 8008d66:	2400      	movs	r4, #0
 8008d68:	46a0      	mov	r8, r4
 8008d6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008d6c:	46a1      	mov	r9, r4
 8008d6e:	9a05      	ldr	r2, [sp, #20]
 8008d70:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008ec0 <_strtod_l+0x598>
 8008d74:	2322      	movs	r3, #34	@ 0x22
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	f04f 0a00 	mov.w	sl, #0
 8008d7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f43f ae0b 	beq.w	800899a <_strtod_l+0x72>
 8008d84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d86:	9805      	ldr	r0, [sp, #20]
 8008d88:	f002 fea8 	bl	800badc <_Bfree>
 8008d8c:	9805      	ldr	r0, [sp, #20]
 8008d8e:	4649      	mov	r1, r9
 8008d90:	f002 fea4 	bl	800badc <_Bfree>
 8008d94:	9805      	ldr	r0, [sp, #20]
 8008d96:	4641      	mov	r1, r8
 8008d98:	f002 fea0 	bl	800badc <_Bfree>
 8008d9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d9e:	9805      	ldr	r0, [sp, #20]
 8008da0:	f002 fe9c 	bl	800badc <_Bfree>
 8008da4:	9805      	ldr	r0, [sp, #20]
 8008da6:	4621      	mov	r1, r4
 8008da8:	f002 fe98 	bl	800badc <_Bfree>
 8008dac:	e5f5      	b.n	800899a <_strtod_l+0x72>
 8008dae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008db0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008db4:	4293      	cmp	r3, r2
 8008db6:	dbbc      	blt.n	8008d32 <_strtod_l+0x40a>
 8008db8:	4c3f      	ldr	r4, [pc, #252]	@ (8008eb8 <_strtod_l+0x590>)
 8008dba:	f1c5 050f 	rsb	r5, r5, #15
 8008dbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008dc2:	4652      	mov	r2, sl
 8008dc4:	465b      	mov	r3, fp
 8008dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dca:	f7f7 fc15 	bl	80005f8 <__aeabi_dmul>
 8008dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd0:	1b5d      	subs	r5, r3, r5
 8008dd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008dd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008dda:	e78f      	b.n	8008cfc <_strtod_l+0x3d4>
 8008ddc:	3316      	adds	r3, #22
 8008dde:	dba8      	blt.n	8008d32 <_strtod_l+0x40a>
 8008de0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008de2:	eba3 0808 	sub.w	r8, r3, r8
 8008de6:	4b34      	ldr	r3, [pc, #208]	@ (8008eb8 <_strtod_l+0x590>)
 8008de8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008dec:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008df0:	4650      	mov	r0, sl
 8008df2:	4659      	mov	r1, fp
 8008df4:	f7f7 fd2a 	bl	800084c <__aeabi_ddiv>
 8008df8:	e782      	b.n	8008d00 <_strtod_l+0x3d8>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4f2f      	ldr	r7, [pc, #188]	@ (8008ebc <_strtod_l+0x594>)
 8008dfe:	1124      	asrs	r4, r4, #4
 8008e00:	4650      	mov	r0, sl
 8008e02:	4659      	mov	r1, fp
 8008e04:	461e      	mov	r6, r3
 8008e06:	2c01      	cmp	r4, #1
 8008e08:	dc21      	bgt.n	8008e4e <_strtod_l+0x526>
 8008e0a:	b10b      	cbz	r3, 8008e10 <_strtod_l+0x4e8>
 8008e0c:	4682      	mov	sl, r0
 8008e0e:	468b      	mov	fp, r1
 8008e10:	492a      	ldr	r1, [pc, #168]	@ (8008ebc <_strtod_l+0x594>)
 8008e12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008e16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008e1a:	4652      	mov	r2, sl
 8008e1c:	465b      	mov	r3, fp
 8008e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e22:	f7f7 fbe9 	bl	80005f8 <__aeabi_dmul>
 8008e26:	4b26      	ldr	r3, [pc, #152]	@ (8008ec0 <_strtod_l+0x598>)
 8008e28:	460a      	mov	r2, r1
 8008e2a:	400b      	ands	r3, r1
 8008e2c:	4925      	ldr	r1, [pc, #148]	@ (8008ec4 <_strtod_l+0x59c>)
 8008e2e:	428b      	cmp	r3, r1
 8008e30:	4682      	mov	sl, r0
 8008e32:	d898      	bhi.n	8008d66 <_strtod_l+0x43e>
 8008e34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf86      	itte	hi
 8008e3c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008ec8 <_strtod_l+0x5a0>
 8008e40:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008e48:	2300      	movs	r3, #0
 8008e4a:	9308      	str	r3, [sp, #32]
 8008e4c:	e076      	b.n	8008f3c <_strtod_l+0x614>
 8008e4e:	07e2      	lsls	r2, r4, #31
 8008e50:	d504      	bpl.n	8008e5c <_strtod_l+0x534>
 8008e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e56:	f7f7 fbcf 	bl	80005f8 <__aeabi_dmul>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	3601      	adds	r6, #1
 8008e5e:	1064      	asrs	r4, r4, #1
 8008e60:	3708      	adds	r7, #8
 8008e62:	e7d0      	b.n	8008e06 <_strtod_l+0x4de>
 8008e64:	d0f0      	beq.n	8008e48 <_strtod_l+0x520>
 8008e66:	4264      	negs	r4, r4
 8008e68:	f014 020f 	ands.w	r2, r4, #15
 8008e6c:	d00a      	beq.n	8008e84 <_strtod_l+0x55c>
 8008e6e:	4b12      	ldr	r3, [pc, #72]	@ (8008eb8 <_strtod_l+0x590>)
 8008e70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e74:	4650      	mov	r0, sl
 8008e76:	4659      	mov	r1, fp
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	f7f7 fce6 	bl	800084c <__aeabi_ddiv>
 8008e80:	4682      	mov	sl, r0
 8008e82:	468b      	mov	fp, r1
 8008e84:	1124      	asrs	r4, r4, #4
 8008e86:	d0df      	beq.n	8008e48 <_strtod_l+0x520>
 8008e88:	2c1f      	cmp	r4, #31
 8008e8a:	dd1f      	ble.n	8008ecc <_strtod_l+0x5a4>
 8008e8c:	2400      	movs	r4, #0
 8008e8e:	46a0      	mov	r8, r4
 8008e90:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e92:	46a1      	mov	r9, r4
 8008e94:	9a05      	ldr	r2, [sp, #20]
 8008e96:	2322      	movs	r3, #34	@ 0x22
 8008e98:	f04f 0a00 	mov.w	sl, #0
 8008e9c:	f04f 0b00 	mov.w	fp, #0
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	e76b      	b.n	8008d7c <_strtod_l+0x454>
 8008ea4:	0800d1e4 	.word	0x0800d1e4
 8008ea8:	0800d3cc 	.word	0x0800d3cc
 8008eac:	0800d1dc 	.word	0x0800d1dc
 8008eb0:	0800d28c 	.word	0x0800d28c
 8008eb4:	0800d1d4 	.word	0x0800d1d4
 8008eb8:	0800d458 	.word	0x0800d458
 8008ebc:	0800d430 	.word	0x0800d430
 8008ec0:	7ff00000 	.word	0x7ff00000
 8008ec4:	7ca00000 	.word	0x7ca00000
 8008ec8:	7fefffff 	.word	0x7fefffff
 8008ecc:	f014 0310 	ands.w	r3, r4, #16
 8008ed0:	bf18      	it	ne
 8008ed2:	236a      	movne	r3, #106	@ 0x6a
 8008ed4:	4ea9      	ldr	r6, [pc, #676]	@ (800917c <_strtod_l+0x854>)
 8008ed6:	9308      	str	r3, [sp, #32]
 8008ed8:	4650      	mov	r0, sl
 8008eda:	4659      	mov	r1, fp
 8008edc:	2300      	movs	r3, #0
 8008ede:	07e7      	lsls	r7, r4, #31
 8008ee0:	d504      	bpl.n	8008eec <_strtod_l+0x5c4>
 8008ee2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ee6:	f7f7 fb87 	bl	80005f8 <__aeabi_dmul>
 8008eea:	2301      	movs	r3, #1
 8008eec:	1064      	asrs	r4, r4, #1
 8008eee:	f106 0608 	add.w	r6, r6, #8
 8008ef2:	d1f4      	bne.n	8008ede <_strtod_l+0x5b6>
 8008ef4:	b10b      	cbz	r3, 8008efa <_strtod_l+0x5d2>
 8008ef6:	4682      	mov	sl, r0
 8008ef8:	468b      	mov	fp, r1
 8008efa:	9b08      	ldr	r3, [sp, #32]
 8008efc:	b1b3      	cbz	r3, 8008f2c <_strtod_l+0x604>
 8008efe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	4659      	mov	r1, fp
 8008f0a:	dd0f      	ble.n	8008f2c <_strtod_l+0x604>
 8008f0c:	2b1f      	cmp	r3, #31
 8008f0e:	dd56      	ble.n	8008fbe <_strtod_l+0x696>
 8008f10:	2b34      	cmp	r3, #52	@ 0x34
 8008f12:	bfde      	ittt	le
 8008f14:	f04f 33ff 	movle.w	r3, #4294967295
 8008f18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008f1c:	4093      	lslle	r3, r2
 8008f1e:	f04f 0a00 	mov.w	sl, #0
 8008f22:	bfcc      	ite	gt
 8008f24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008f28:	ea03 0b01 	andle.w	fp, r3, r1
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2300      	movs	r3, #0
 8008f30:	4650      	mov	r0, sl
 8008f32:	4659      	mov	r1, fp
 8008f34:	f7f7 fdc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d1a7      	bne.n	8008e8c <_strtod_l+0x564>
 8008f3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008f42:	9805      	ldr	r0, [sp, #20]
 8008f44:	462b      	mov	r3, r5
 8008f46:	464a      	mov	r2, r9
 8008f48:	f002 fe30 	bl	800bbac <__s2b>
 8008f4c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f43f af09 	beq.w	8008d66 <_strtod_l+0x43e>
 8008f54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f58:	2a00      	cmp	r2, #0
 8008f5a:	eba3 0308 	sub.w	r3, r3, r8
 8008f5e:	bfa8      	it	ge
 8008f60:	2300      	movge	r3, #0
 8008f62:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f64:	2400      	movs	r4, #0
 8008f66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f6a:	9316      	str	r3, [sp, #88]	@ 0x58
 8008f6c:	46a0      	mov	r8, r4
 8008f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f70:	9805      	ldr	r0, [sp, #20]
 8008f72:	6859      	ldr	r1, [r3, #4]
 8008f74:	f002 fd72 	bl	800ba5c <_Balloc>
 8008f78:	4681      	mov	r9, r0
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f43f aef7 	beq.w	8008d6e <_strtod_l+0x446>
 8008f80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f82:	691a      	ldr	r2, [r3, #16]
 8008f84:	3202      	adds	r2, #2
 8008f86:	f103 010c 	add.w	r1, r3, #12
 8008f8a:	0092      	lsls	r2, r2, #2
 8008f8c:	300c      	adds	r0, #12
 8008f8e:	f001 fb50 	bl	800a632 <memcpy>
 8008f92:	ec4b ab10 	vmov	d0, sl, fp
 8008f96:	9805      	ldr	r0, [sp, #20]
 8008f98:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f9a:	a91b      	add	r1, sp, #108	@ 0x6c
 8008f9c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008fa0:	f003 f938 	bl	800c214 <__d2b>
 8008fa4:	901a      	str	r0, [sp, #104]	@ 0x68
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	f43f aee1 	beq.w	8008d6e <_strtod_l+0x446>
 8008fac:	9805      	ldr	r0, [sp, #20]
 8008fae:	2101      	movs	r1, #1
 8008fb0:	f002 fe92 	bl	800bcd8 <__i2b>
 8008fb4:	4680      	mov	r8, r0
 8008fb6:	b948      	cbnz	r0, 8008fcc <_strtod_l+0x6a4>
 8008fb8:	f04f 0800 	mov.w	r8, #0
 8008fbc:	e6d7      	b.n	8008d6e <_strtod_l+0x446>
 8008fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc6:	ea03 0a0a 	and.w	sl, r3, sl
 8008fca:	e7af      	b.n	8008f2c <_strtod_l+0x604>
 8008fcc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008fce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008fd0:	2d00      	cmp	r5, #0
 8008fd2:	bfab      	itete	ge
 8008fd4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008fd6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008fd8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008fda:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008fdc:	bfac      	ite	ge
 8008fde:	18ef      	addge	r7, r5, r3
 8008fe0:	1b5e      	sublt	r6, r3, r5
 8008fe2:	9b08      	ldr	r3, [sp, #32]
 8008fe4:	1aed      	subs	r5, r5, r3
 8008fe6:	4415      	add	r5, r2
 8008fe8:	4b65      	ldr	r3, [pc, #404]	@ (8009180 <_strtod_l+0x858>)
 8008fea:	3d01      	subs	r5, #1
 8008fec:	429d      	cmp	r5, r3
 8008fee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008ff2:	da50      	bge.n	8009096 <_strtod_l+0x76e>
 8008ff4:	1b5b      	subs	r3, r3, r5
 8008ff6:	2b1f      	cmp	r3, #31
 8008ff8:	eba2 0203 	sub.w	r2, r2, r3
 8008ffc:	f04f 0101 	mov.w	r1, #1
 8009000:	dc3d      	bgt.n	800907e <_strtod_l+0x756>
 8009002:	fa01 f303 	lsl.w	r3, r1, r3
 8009006:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009008:	2300      	movs	r3, #0
 800900a:	9310      	str	r3, [sp, #64]	@ 0x40
 800900c:	18bd      	adds	r5, r7, r2
 800900e:	9b08      	ldr	r3, [sp, #32]
 8009010:	42af      	cmp	r7, r5
 8009012:	4416      	add	r6, r2
 8009014:	441e      	add	r6, r3
 8009016:	463b      	mov	r3, r7
 8009018:	bfa8      	it	ge
 800901a:	462b      	movge	r3, r5
 800901c:	42b3      	cmp	r3, r6
 800901e:	bfa8      	it	ge
 8009020:	4633      	movge	r3, r6
 8009022:	2b00      	cmp	r3, #0
 8009024:	bfc2      	ittt	gt
 8009026:	1aed      	subgt	r5, r5, r3
 8009028:	1af6      	subgt	r6, r6, r3
 800902a:	1aff      	subgt	r7, r7, r3
 800902c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800902e:	2b00      	cmp	r3, #0
 8009030:	dd16      	ble.n	8009060 <_strtod_l+0x738>
 8009032:	4641      	mov	r1, r8
 8009034:	9805      	ldr	r0, [sp, #20]
 8009036:	461a      	mov	r2, r3
 8009038:	f002 ff06 	bl	800be48 <__pow5mult>
 800903c:	4680      	mov	r8, r0
 800903e:	2800      	cmp	r0, #0
 8009040:	d0ba      	beq.n	8008fb8 <_strtod_l+0x690>
 8009042:	4601      	mov	r1, r0
 8009044:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009046:	9805      	ldr	r0, [sp, #20]
 8009048:	f002 fe5c 	bl	800bd04 <__multiply>
 800904c:	900a      	str	r0, [sp, #40]	@ 0x28
 800904e:	2800      	cmp	r0, #0
 8009050:	f43f ae8d 	beq.w	8008d6e <_strtod_l+0x446>
 8009054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009056:	9805      	ldr	r0, [sp, #20]
 8009058:	f002 fd40 	bl	800badc <_Bfree>
 800905c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800905e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009060:	2d00      	cmp	r5, #0
 8009062:	dc1d      	bgt.n	80090a0 <_strtod_l+0x778>
 8009064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009066:	2b00      	cmp	r3, #0
 8009068:	dd23      	ble.n	80090b2 <_strtod_l+0x78a>
 800906a:	4649      	mov	r1, r9
 800906c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800906e:	9805      	ldr	r0, [sp, #20]
 8009070:	f002 feea 	bl	800be48 <__pow5mult>
 8009074:	4681      	mov	r9, r0
 8009076:	b9e0      	cbnz	r0, 80090b2 <_strtod_l+0x78a>
 8009078:	f04f 0900 	mov.w	r9, #0
 800907c:	e677      	b.n	8008d6e <_strtod_l+0x446>
 800907e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009082:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009086:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800908a:	35e2      	adds	r5, #226	@ 0xe2
 800908c:	fa01 f305 	lsl.w	r3, r1, r5
 8009090:	9310      	str	r3, [sp, #64]	@ 0x40
 8009092:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009094:	e7ba      	b.n	800900c <_strtod_l+0x6e4>
 8009096:	2300      	movs	r3, #0
 8009098:	9310      	str	r3, [sp, #64]	@ 0x40
 800909a:	2301      	movs	r3, #1
 800909c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800909e:	e7b5      	b.n	800900c <_strtod_l+0x6e4>
 80090a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090a2:	9805      	ldr	r0, [sp, #20]
 80090a4:	462a      	mov	r2, r5
 80090a6:	f002 ff29 	bl	800befc <__lshift>
 80090aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d1d9      	bne.n	8009064 <_strtod_l+0x73c>
 80090b0:	e65d      	b.n	8008d6e <_strtod_l+0x446>
 80090b2:	2e00      	cmp	r6, #0
 80090b4:	dd07      	ble.n	80090c6 <_strtod_l+0x79e>
 80090b6:	4649      	mov	r1, r9
 80090b8:	9805      	ldr	r0, [sp, #20]
 80090ba:	4632      	mov	r2, r6
 80090bc:	f002 ff1e 	bl	800befc <__lshift>
 80090c0:	4681      	mov	r9, r0
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d0d8      	beq.n	8009078 <_strtod_l+0x750>
 80090c6:	2f00      	cmp	r7, #0
 80090c8:	dd08      	ble.n	80090dc <_strtod_l+0x7b4>
 80090ca:	4641      	mov	r1, r8
 80090cc:	9805      	ldr	r0, [sp, #20]
 80090ce:	463a      	mov	r2, r7
 80090d0:	f002 ff14 	bl	800befc <__lshift>
 80090d4:	4680      	mov	r8, r0
 80090d6:	2800      	cmp	r0, #0
 80090d8:	f43f ae49 	beq.w	8008d6e <_strtod_l+0x446>
 80090dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090de:	9805      	ldr	r0, [sp, #20]
 80090e0:	464a      	mov	r2, r9
 80090e2:	f002 ff93 	bl	800c00c <__mdiff>
 80090e6:	4604      	mov	r4, r0
 80090e8:	2800      	cmp	r0, #0
 80090ea:	f43f ae40 	beq.w	8008d6e <_strtod_l+0x446>
 80090ee:	68c3      	ldr	r3, [r0, #12]
 80090f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80090f2:	2300      	movs	r3, #0
 80090f4:	60c3      	str	r3, [r0, #12]
 80090f6:	4641      	mov	r1, r8
 80090f8:	f002 ff6c 	bl	800bfd4 <__mcmp>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	da45      	bge.n	800918c <_strtod_l+0x864>
 8009100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009102:	ea53 030a 	orrs.w	r3, r3, sl
 8009106:	d16b      	bne.n	80091e0 <_strtod_l+0x8b8>
 8009108:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800910c:	2b00      	cmp	r3, #0
 800910e:	d167      	bne.n	80091e0 <_strtod_l+0x8b8>
 8009110:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009114:	0d1b      	lsrs	r3, r3, #20
 8009116:	051b      	lsls	r3, r3, #20
 8009118:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800911c:	d960      	bls.n	80091e0 <_strtod_l+0x8b8>
 800911e:	6963      	ldr	r3, [r4, #20]
 8009120:	b913      	cbnz	r3, 8009128 <_strtod_l+0x800>
 8009122:	6923      	ldr	r3, [r4, #16]
 8009124:	2b01      	cmp	r3, #1
 8009126:	dd5b      	ble.n	80091e0 <_strtod_l+0x8b8>
 8009128:	4621      	mov	r1, r4
 800912a:	2201      	movs	r2, #1
 800912c:	9805      	ldr	r0, [sp, #20]
 800912e:	f002 fee5 	bl	800befc <__lshift>
 8009132:	4641      	mov	r1, r8
 8009134:	4604      	mov	r4, r0
 8009136:	f002 ff4d 	bl	800bfd4 <__mcmp>
 800913a:	2800      	cmp	r0, #0
 800913c:	dd50      	ble.n	80091e0 <_strtod_l+0x8b8>
 800913e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009142:	9a08      	ldr	r2, [sp, #32]
 8009144:	0d1b      	lsrs	r3, r3, #20
 8009146:	051b      	lsls	r3, r3, #20
 8009148:	2a00      	cmp	r2, #0
 800914a:	d06a      	beq.n	8009222 <_strtod_l+0x8fa>
 800914c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009150:	d867      	bhi.n	8009222 <_strtod_l+0x8fa>
 8009152:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009156:	f67f ae9d 	bls.w	8008e94 <_strtod_l+0x56c>
 800915a:	4b0a      	ldr	r3, [pc, #40]	@ (8009184 <_strtod_l+0x85c>)
 800915c:	4650      	mov	r0, sl
 800915e:	4659      	mov	r1, fp
 8009160:	2200      	movs	r2, #0
 8009162:	f7f7 fa49 	bl	80005f8 <__aeabi_dmul>
 8009166:	4b08      	ldr	r3, [pc, #32]	@ (8009188 <_strtod_l+0x860>)
 8009168:	400b      	ands	r3, r1
 800916a:	4682      	mov	sl, r0
 800916c:	468b      	mov	fp, r1
 800916e:	2b00      	cmp	r3, #0
 8009170:	f47f ae08 	bne.w	8008d84 <_strtod_l+0x45c>
 8009174:	9a05      	ldr	r2, [sp, #20]
 8009176:	2322      	movs	r3, #34	@ 0x22
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	e603      	b.n	8008d84 <_strtod_l+0x45c>
 800917c:	0800d3f8 	.word	0x0800d3f8
 8009180:	fffffc02 	.word	0xfffffc02
 8009184:	39500000 	.word	0x39500000
 8009188:	7ff00000 	.word	0x7ff00000
 800918c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009190:	d165      	bne.n	800925e <_strtod_l+0x936>
 8009192:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009194:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009198:	b35a      	cbz	r2, 80091f2 <_strtod_l+0x8ca>
 800919a:	4a9f      	ldr	r2, [pc, #636]	@ (8009418 <_strtod_l+0xaf0>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d12b      	bne.n	80091f8 <_strtod_l+0x8d0>
 80091a0:	9b08      	ldr	r3, [sp, #32]
 80091a2:	4651      	mov	r1, sl
 80091a4:	b303      	cbz	r3, 80091e8 <_strtod_l+0x8c0>
 80091a6:	4b9d      	ldr	r3, [pc, #628]	@ (800941c <_strtod_l+0xaf4>)
 80091a8:	465a      	mov	r2, fp
 80091aa:	4013      	ands	r3, r2
 80091ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80091b0:	f04f 32ff 	mov.w	r2, #4294967295
 80091b4:	d81b      	bhi.n	80091ee <_strtod_l+0x8c6>
 80091b6:	0d1b      	lsrs	r3, r3, #20
 80091b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80091bc:	fa02 f303 	lsl.w	r3, r2, r3
 80091c0:	4299      	cmp	r1, r3
 80091c2:	d119      	bne.n	80091f8 <_strtod_l+0x8d0>
 80091c4:	4b96      	ldr	r3, [pc, #600]	@ (8009420 <_strtod_l+0xaf8>)
 80091c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d102      	bne.n	80091d2 <_strtod_l+0x8aa>
 80091cc:	3101      	adds	r1, #1
 80091ce:	f43f adce 	beq.w	8008d6e <_strtod_l+0x446>
 80091d2:	4b92      	ldr	r3, [pc, #584]	@ (800941c <_strtod_l+0xaf4>)
 80091d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091d6:	401a      	ands	r2, r3
 80091d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80091dc:	f04f 0a00 	mov.w	sl, #0
 80091e0:	9b08      	ldr	r3, [sp, #32]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1b9      	bne.n	800915a <_strtod_l+0x832>
 80091e6:	e5cd      	b.n	8008d84 <_strtod_l+0x45c>
 80091e8:	f04f 33ff 	mov.w	r3, #4294967295
 80091ec:	e7e8      	b.n	80091c0 <_strtod_l+0x898>
 80091ee:	4613      	mov	r3, r2
 80091f0:	e7e6      	b.n	80091c0 <_strtod_l+0x898>
 80091f2:	ea53 030a 	orrs.w	r3, r3, sl
 80091f6:	d0a2      	beq.n	800913e <_strtod_l+0x816>
 80091f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80091fa:	b1db      	cbz	r3, 8009234 <_strtod_l+0x90c>
 80091fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091fe:	4213      	tst	r3, r2
 8009200:	d0ee      	beq.n	80091e0 <_strtod_l+0x8b8>
 8009202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009204:	9a08      	ldr	r2, [sp, #32]
 8009206:	4650      	mov	r0, sl
 8009208:	4659      	mov	r1, fp
 800920a:	b1bb      	cbz	r3, 800923c <_strtod_l+0x914>
 800920c:	f7ff fb6c 	bl	80088e8 <sulp>
 8009210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009214:	ec53 2b10 	vmov	r2, r3, d0
 8009218:	f7f7 f838 	bl	800028c <__adddf3>
 800921c:	4682      	mov	sl, r0
 800921e:	468b      	mov	fp, r1
 8009220:	e7de      	b.n	80091e0 <_strtod_l+0x8b8>
 8009222:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009226:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800922a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800922e:	f04f 3aff 	mov.w	sl, #4294967295
 8009232:	e7d5      	b.n	80091e0 <_strtod_l+0x8b8>
 8009234:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009236:	ea13 0f0a 	tst.w	r3, sl
 800923a:	e7e1      	b.n	8009200 <_strtod_l+0x8d8>
 800923c:	f7ff fb54 	bl	80088e8 <sulp>
 8009240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009244:	ec53 2b10 	vmov	r2, r3, d0
 8009248:	f7f7 f81e 	bl	8000288 <__aeabi_dsub>
 800924c:	2200      	movs	r2, #0
 800924e:	2300      	movs	r3, #0
 8009250:	4682      	mov	sl, r0
 8009252:	468b      	mov	fp, r1
 8009254:	f7f7 fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 8009258:	2800      	cmp	r0, #0
 800925a:	d0c1      	beq.n	80091e0 <_strtod_l+0x8b8>
 800925c:	e61a      	b.n	8008e94 <_strtod_l+0x56c>
 800925e:	4641      	mov	r1, r8
 8009260:	4620      	mov	r0, r4
 8009262:	f003 f82f 	bl	800c2c4 <__ratio>
 8009266:	ec57 6b10 	vmov	r6, r7, d0
 800926a:	2200      	movs	r2, #0
 800926c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009270:	4630      	mov	r0, r6
 8009272:	4639      	mov	r1, r7
 8009274:	f7f7 fc3c 	bl	8000af0 <__aeabi_dcmple>
 8009278:	2800      	cmp	r0, #0
 800927a:	d06f      	beq.n	800935c <_strtod_l+0xa34>
 800927c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d17a      	bne.n	8009378 <_strtod_l+0xa50>
 8009282:	f1ba 0f00 	cmp.w	sl, #0
 8009286:	d158      	bne.n	800933a <_strtod_l+0xa12>
 8009288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800928a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800928e:	2b00      	cmp	r3, #0
 8009290:	d15a      	bne.n	8009348 <_strtod_l+0xa20>
 8009292:	4b64      	ldr	r3, [pc, #400]	@ (8009424 <_strtod_l+0xafc>)
 8009294:	2200      	movs	r2, #0
 8009296:	4630      	mov	r0, r6
 8009298:	4639      	mov	r1, r7
 800929a:	f7f7 fc1f 	bl	8000adc <__aeabi_dcmplt>
 800929e:	2800      	cmp	r0, #0
 80092a0:	d159      	bne.n	8009356 <_strtod_l+0xa2e>
 80092a2:	4630      	mov	r0, r6
 80092a4:	4639      	mov	r1, r7
 80092a6:	4b60      	ldr	r3, [pc, #384]	@ (8009428 <_strtod_l+0xb00>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	f7f7 f9a5 	bl	80005f8 <__aeabi_dmul>
 80092ae:	4606      	mov	r6, r0
 80092b0:	460f      	mov	r7, r1
 80092b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80092b6:	9606      	str	r6, [sp, #24]
 80092b8:	9307      	str	r3, [sp, #28]
 80092ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092be:	4d57      	ldr	r5, [pc, #348]	@ (800941c <_strtod_l+0xaf4>)
 80092c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80092c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092c6:	401d      	ands	r5, r3
 80092c8:	4b58      	ldr	r3, [pc, #352]	@ (800942c <_strtod_l+0xb04>)
 80092ca:	429d      	cmp	r5, r3
 80092cc:	f040 80b2 	bne.w	8009434 <_strtod_l+0xb0c>
 80092d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80092d6:	ec4b ab10 	vmov	d0, sl, fp
 80092da:	f002 ff2b 	bl	800c134 <__ulp>
 80092de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092e2:	ec51 0b10 	vmov	r0, r1, d0
 80092e6:	f7f7 f987 	bl	80005f8 <__aeabi_dmul>
 80092ea:	4652      	mov	r2, sl
 80092ec:	465b      	mov	r3, fp
 80092ee:	f7f6 ffcd 	bl	800028c <__adddf3>
 80092f2:	460b      	mov	r3, r1
 80092f4:	4949      	ldr	r1, [pc, #292]	@ (800941c <_strtod_l+0xaf4>)
 80092f6:	4a4e      	ldr	r2, [pc, #312]	@ (8009430 <_strtod_l+0xb08>)
 80092f8:	4019      	ands	r1, r3
 80092fa:	4291      	cmp	r1, r2
 80092fc:	4682      	mov	sl, r0
 80092fe:	d942      	bls.n	8009386 <_strtod_l+0xa5e>
 8009300:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009302:	4b47      	ldr	r3, [pc, #284]	@ (8009420 <_strtod_l+0xaf8>)
 8009304:	429a      	cmp	r2, r3
 8009306:	d103      	bne.n	8009310 <_strtod_l+0x9e8>
 8009308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800930a:	3301      	adds	r3, #1
 800930c:	f43f ad2f 	beq.w	8008d6e <_strtod_l+0x446>
 8009310:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009420 <_strtod_l+0xaf8>
 8009314:	f04f 3aff 	mov.w	sl, #4294967295
 8009318:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800931a:	9805      	ldr	r0, [sp, #20]
 800931c:	f002 fbde 	bl	800badc <_Bfree>
 8009320:	9805      	ldr	r0, [sp, #20]
 8009322:	4649      	mov	r1, r9
 8009324:	f002 fbda 	bl	800badc <_Bfree>
 8009328:	9805      	ldr	r0, [sp, #20]
 800932a:	4641      	mov	r1, r8
 800932c:	f002 fbd6 	bl	800badc <_Bfree>
 8009330:	9805      	ldr	r0, [sp, #20]
 8009332:	4621      	mov	r1, r4
 8009334:	f002 fbd2 	bl	800badc <_Bfree>
 8009338:	e619      	b.n	8008f6e <_strtod_l+0x646>
 800933a:	f1ba 0f01 	cmp.w	sl, #1
 800933e:	d103      	bne.n	8009348 <_strtod_l+0xa20>
 8009340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009342:	2b00      	cmp	r3, #0
 8009344:	f43f ada6 	beq.w	8008e94 <_strtod_l+0x56c>
 8009348:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80093f8 <_strtod_l+0xad0>
 800934c:	4f35      	ldr	r7, [pc, #212]	@ (8009424 <_strtod_l+0xafc>)
 800934e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009352:	2600      	movs	r6, #0
 8009354:	e7b1      	b.n	80092ba <_strtod_l+0x992>
 8009356:	4f34      	ldr	r7, [pc, #208]	@ (8009428 <_strtod_l+0xb00>)
 8009358:	2600      	movs	r6, #0
 800935a:	e7aa      	b.n	80092b2 <_strtod_l+0x98a>
 800935c:	4b32      	ldr	r3, [pc, #200]	@ (8009428 <_strtod_l+0xb00>)
 800935e:	4630      	mov	r0, r6
 8009360:	4639      	mov	r1, r7
 8009362:	2200      	movs	r2, #0
 8009364:	f7f7 f948 	bl	80005f8 <__aeabi_dmul>
 8009368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800936a:	4606      	mov	r6, r0
 800936c:	460f      	mov	r7, r1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d09f      	beq.n	80092b2 <_strtod_l+0x98a>
 8009372:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009376:	e7a0      	b.n	80092ba <_strtod_l+0x992>
 8009378:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009400 <_strtod_l+0xad8>
 800937c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009380:	ec57 6b17 	vmov	r6, r7, d7
 8009384:	e799      	b.n	80092ba <_strtod_l+0x992>
 8009386:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800938a:	9b08      	ldr	r3, [sp, #32]
 800938c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1c1      	bne.n	8009318 <_strtod_l+0x9f0>
 8009394:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009398:	0d1b      	lsrs	r3, r3, #20
 800939a:	051b      	lsls	r3, r3, #20
 800939c:	429d      	cmp	r5, r3
 800939e:	d1bb      	bne.n	8009318 <_strtod_l+0x9f0>
 80093a0:	4630      	mov	r0, r6
 80093a2:	4639      	mov	r1, r7
 80093a4:	f7f7 fc88 	bl	8000cb8 <__aeabi_d2lz>
 80093a8:	f7f7 f8f8 	bl	800059c <__aeabi_l2d>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4630      	mov	r0, r6
 80093b2:	4639      	mov	r1, r7
 80093b4:	f7f6 ff68 	bl	8000288 <__aeabi_dsub>
 80093b8:	460b      	mov	r3, r1
 80093ba:	4602      	mov	r2, r0
 80093bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80093c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80093c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093c6:	ea46 060a 	orr.w	r6, r6, sl
 80093ca:	431e      	orrs	r6, r3
 80093cc:	d06f      	beq.n	80094ae <_strtod_l+0xb86>
 80093ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8009408 <_strtod_l+0xae0>)
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	f7f7 fb82 	bl	8000adc <__aeabi_dcmplt>
 80093d8:	2800      	cmp	r0, #0
 80093da:	f47f acd3 	bne.w	8008d84 <_strtod_l+0x45c>
 80093de:	a30c      	add	r3, pc, #48	@ (adr r3, 8009410 <_strtod_l+0xae8>)
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093e8:	f7f7 fb96 	bl	8000b18 <__aeabi_dcmpgt>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d093      	beq.n	8009318 <_strtod_l+0x9f0>
 80093f0:	e4c8      	b.n	8008d84 <_strtod_l+0x45c>
 80093f2:	bf00      	nop
 80093f4:	f3af 8000 	nop.w
 80093f8:	00000000 	.word	0x00000000
 80093fc:	bff00000 	.word	0xbff00000
 8009400:	00000000 	.word	0x00000000
 8009404:	3ff00000 	.word	0x3ff00000
 8009408:	94a03595 	.word	0x94a03595
 800940c:	3fdfffff 	.word	0x3fdfffff
 8009410:	35afe535 	.word	0x35afe535
 8009414:	3fe00000 	.word	0x3fe00000
 8009418:	000fffff 	.word	0x000fffff
 800941c:	7ff00000 	.word	0x7ff00000
 8009420:	7fefffff 	.word	0x7fefffff
 8009424:	3ff00000 	.word	0x3ff00000
 8009428:	3fe00000 	.word	0x3fe00000
 800942c:	7fe00000 	.word	0x7fe00000
 8009430:	7c9fffff 	.word	0x7c9fffff
 8009434:	9b08      	ldr	r3, [sp, #32]
 8009436:	b323      	cbz	r3, 8009482 <_strtod_l+0xb5a>
 8009438:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800943c:	d821      	bhi.n	8009482 <_strtod_l+0xb5a>
 800943e:	a328      	add	r3, pc, #160	@ (adr r3, 80094e0 <_strtod_l+0xbb8>)
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	4630      	mov	r0, r6
 8009446:	4639      	mov	r1, r7
 8009448:	f7f7 fb52 	bl	8000af0 <__aeabi_dcmple>
 800944c:	b1a0      	cbz	r0, 8009478 <_strtod_l+0xb50>
 800944e:	4639      	mov	r1, r7
 8009450:	4630      	mov	r0, r6
 8009452:	f7f7 fba9 	bl	8000ba8 <__aeabi_d2uiz>
 8009456:	2801      	cmp	r0, #1
 8009458:	bf38      	it	cc
 800945a:	2001      	movcc	r0, #1
 800945c:	f7f7 f852 	bl	8000504 <__aeabi_ui2d>
 8009460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009462:	4606      	mov	r6, r0
 8009464:	460f      	mov	r7, r1
 8009466:	b9fb      	cbnz	r3, 80094a8 <_strtod_l+0xb80>
 8009468:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800946c:	9014      	str	r0, [sp, #80]	@ 0x50
 800946e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009470:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009474:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009478:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800947a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800947e:	1b5b      	subs	r3, r3, r5
 8009480:	9311      	str	r3, [sp, #68]	@ 0x44
 8009482:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009486:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800948a:	f002 fe53 	bl	800c134 <__ulp>
 800948e:	4650      	mov	r0, sl
 8009490:	ec53 2b10 	vmov	r2, r3, d0
 8009494:	4659      	mov	r1, fp
 8009496:	f7f7 f8af 	bl	80005f8 <__aeabi_dmul>
 800949a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800949e:	f7f6 fef5 	bl	800028c <__adddf3>
 80094a2:	4682      	mov	sl, r0
 80094a4:	468b      	mov	fp, r1
 80094a6:	e770      	b.n	800938a <_strtod_l+0xa62>
 80094a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80094ac:	e7e0      	b.n	8009470 <_strtod_l+0xb48>
 80094ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80094e8 <_strtod_l+0xbc0>)
 80094b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b4:	f7f7 fb12 	bl	8000adc <__aeabi_dcmplt>
 80094b8:	e798      	b.n	80093ec <_strtod_l+0xac4>
 80094ba:	2300      	movs	r3, #0
 80094bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80094be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80094c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	f7ff ba6d 	b.w	80089a2 <_strtod_l+0x7a>
 80094c8:	2a65      	cmp	r2, #101	@ 0x65
 80094ca:	f43f ab68 	beq.w	8008b9e <_strtod_l+0x276>
 80094ce:	2a45      	cmp	r2, #69	@ 0x45
 80094d0:	f43f ab65 	beq.w	8008b9e <_strtod_l+0x276>
 80094d4:	2301      	movs	r3, #1
 80094d6:	f7ff bba0 	b.w	8008c1a <_strtod_l+0x2f2>
 80094da:	bf00      	nop
 80094dc:	f3af 8000 	nop.w
 80094e0:	ffc00000 	.word	0xffc00000
 80094e4:	41dfffff 	.word	0x41dfffff
 80094e8:	94a03595 	.word	0x94a03595
 80094ec:	3fcfffff 	.word	0x3fcfffff

080094f0 <_strtod_r>:
 80094f0:	4b01      	ldr	r3, [pc, #4]	@ (80094f8 <_strtod_r+0x8>)
 80094f2:	f7ff ba19 	b.w	8008928 <_strtod_l>
 80094f6:	bf00      	nop
 80094f8:	20000194 	.word	0x20000194

080094fc <__cvt>:
 80094fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009500:	ec57 6b10 	vmov	r6, r7, d0
 8009504:	2f00      	cmp	r7, #0
 8009506:	460c      	mov	r4, r1
 8009508:	4619      	mov	r1, r3
 800950a:	463b      	mov	r3, r7
 800950c:	bfbb      	ittet	lt
 800950e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009512:	461f      	movlt	r7, r3
 8009514:	2300      	movge	r3, #0
 8009516:	232d      	movlt	r3, #45	@ 0x2d
 8009518:	700b      	strb	r3, [r1, #0]
 800951a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800951c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009520:	4691      	mov	r9, r2
 8009522:	f023 0820 	bic.w	r8, r3, #32
 8009526:	bfbc      	itt	lt
 8009528:	4632      	movlt	r2, r6
 800952a:	4616      	movlt	r6, r2
 800952c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009530:	d005      	beq.n	800953e <__cvt+0x42>
 8009532:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009536:	d100      	bne.n	800953a <__cvt+0x3e>
 8009538:	3401      	adds	r4, #1
 800953a:	2102      	movs	r1, #2
 800953c:	e000      	b.n	8009540 <__cvt+0x44>
 800953e:	2103      	movs	r1, #3
 8009540:	ab03      	add	r3, sp, #12
 8009542:	9301      	str	r3, [sp, #4]
 8009544:	ab02      	add	r3, sp, #8
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	ec47 6b10 	vmov	d0, r6, r7
 800954c:	4653      	mov	r3, sl
 800954e:	4622      	mov	r2, r4
 8009550:	f001 f91e 	bl	800a790 <_dtoa_r>
 8009554:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009558:	4605      	mov	r5, r0
 800955a:	d119      	bne.n	8009590 <__cvt+0x94>
 800955c:	f019 0f01 	tst.w	r9, #1
 8009560:	d00e      	beq.n	8009580 <__cvt+0x84>
 8009562:	eb00 0904 	add.w	r9, r0, r4
 8009566:	2200      	movs	r2, #0
 8009568:	2300      	movs	r3, #0
 800956a:	4630      	mov	r0, r6
 800956c:	4639      	mov	r1, r7
 800956e:	f7f7 faab 	bl	8000ac8 <__aeabi_dcmpeq>
 8009572:	b108      	cbz	r0, 8009578 <__cvt+0x7c>
 8009574:	f8cd 900c 	str.w	r9, [sp, #12]
 8009578:	2230      	movs	r2, #48	@ 0x30
 800957a:	9b03      	ldr	r3, [sp, #12]
 800957c:	454b      	cmp	r3, r9
 800957e:	d31e      	bcc.n	80095be <__cvt+0xc2>
 8009580:	9b03      	ldr	r3, [sp, #12]
 8009582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009584:	1b5b      	subs	r3, r3, r5
 8009586:	4628      	mov	r0, r5
 8009588:	6013      	str	r3, [r2, #0]
 800958a:	b004      	add	sp, #16
 800958c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009590:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009594:	eb00 0904 	add.w	r9, r0, r4
 8009598:	d1e5      	bne.n	8009566 <__cvt+0x6a>
 800959a:	7803      	ldrb	r3, [r0, #0]
 800959c:	2b30      	cmp	r3, #48	@ 0x30
 800959e:	d10a      	bne.n	80095b6 <__cvt+0xba>
 80095a0:	2200      	movs	r2, #0
 80095a2:	2300      	movs	r3, #0
 80095a4:	4630      	mov	r0, r6
 80095a6:	4639      	mov	r1, r7
 80095a8:	f7f7 fa8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80095ac:	b918      	cbnz	r0, 80095b6 <__cvt+0xba>
 80095ae:	f1c4 0401 	rsb	r4, r4, #1
 80095b2:	f8ca 4000 	str.w	r4, [sl]
 80095b6:	f8da 3000 	ldr.w	r3, [sl]
 80095ba:	4499      	add	r9, r3
 80095bc:	e7d3      	b.n	8009566 <__cvt+0x6a>
 80095be:	1c59      	adds	r1, r3, #1
 80095c0:	9103      	str	r1, [sp, #12]
 80095c2:	701a      	strb	r2, [r3, #0]
 80095c4:	e7d9      	b.n	800957a <__cvt+0x7e>

080095c6 <__exponent>:
 80095c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095c8:	2900      	cmp	r1, #0
 80095ca:	bfba      	itte	lt
 80095cc:	4249      	neglt	r1, r1
 80095ce:	232d      	movlt	r3, #45	@ 0x2d
 80095d0:	232b      	movge	r3, #43	@ 0x2b
 80095d2:	2909      	cmp	r1, #9
 80095d4:	7002      	strb	r2, [r0, #0]
 80095d6:	7043      	strb	r3, [r0, #1]
 80095d8:	dd29      	ble.n	800962e <__exponent+0x68>
 80095da:	f10d 0307 	add.w	r3, sp, #7
 80095de:	461d      	mov	r5, r3
 80095e0:	270a      	movs	r7, #10
 80095e2:	461a      	mov	r2, r3
 80095e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80095e8:	fb07 1416 	mls	r4, r7, r6, r1
 80095ec:	3430      	adds	r4, #48	@ 0x30
 80095ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80095f2:	460c      	mov	r4, r1
 80095f4:	2c63      	cmp	r4, #99	@ 0x63
 80095f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80095fa:	4631      	mov	r1, r6
 80095fc:	dcf1      	bgt.n	80095e2 <__exponent+0x1c>
 80095fe:	3130      	adds	r1, #48	@ 0x30
 8009600:	1e94      	subs	r4, r2, #2
 8009602:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009606:	1c41      	adds	r1, r0, #1
 8009608:	4623      	mov	r3, r4
 800960a:	42ab      	cmp	r3, r5
 800960c:	d30a      	bcc.n	8009624 <__exponent+0x5e>
 800960e:	f10d 0309 	add.w	r3, sp, #9
 8009612:	1a9b      	subs	r3, r3, r2
 8009614:	42ac      	cmp	r4, r5
 8009616:	bf88      	it	hi
 8009618:	2300      	movhi	r3, #0
 800961a:	3302      	adds	r3, #2
 800961c:	4403      	add	r3, r0
 800961e:	1a18      	subs	r0, r3, r0
 8009620:	b003      	add	sp, #12
 8009622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009624:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009628:	f801 6f01 	strb.w	r6, [r1, #1]!
 800962c:	e7ed      	b.n	800960a <__exponent+0x44>
 800962e:	2330      	movs	r3, #48	@ 0x30
 8009630:	3130      	adds	r1, #48	@ 0x30
 8009632:	7083      	strb	r3, [r0, #2]
 8009634:	70c1      	strb	r1, [r0, #3]
 8009636:	1d03      	adds	r3, r0, #4
 8009638:	e7f1      	b.n	800961e <__exponent+0x58>
	...

0800963c <_printf_float>:
 800963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009640:	b08d      	sub	sp, #52	@ 0x34
 8009642:	460c      	mov	r4, r1
 8009644:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009648:	4616      	mov	r6, r2
 800964a:	461f      	mov	r7, r3
 800964c:	4605      	mov	r5, r0
 800964e:	f000 ff69 	bl	800a524 <_localeconv_r>
 8009652:	6803      	ldr	r3, [r0, #0]
 8009654:	9304      	str	r3, [sp, #16]
 8009656:	4618      	mov	r0, r3
 8009658:	f7f6 fe0a 	bl	8000270 <strlen>
 800965c:	2300      	movs	r3, #0
 800965e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009660:	f8d8 3000 	ldr.w	r3, [r8]
 8009664:	9005      	str	r0, [sp, #20]
 8009666:	3307      	adds	r3, #7
 8009668:	f023 0307 	bic.w	r3, r3, #7
 800966c:	f103 0208 	add.w	r2, r3, #8
 8009670:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009674:	f8d4 b000 	ldr.w	fp, [r4]
 8009678:	f8c8 2000 	str.w	r2, [r8]
 800967c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009680:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009684:	9307      	str	r3, [sp, #28]
 8009686:	f8cd 8018 	str.w	r8, [sp, #24]
 800968a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800968e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009692:	4b9c      	ldr	r3, [pc, #624]	@ (8009904 <_printf_float+0x2c8>)
 8009694:	f04f 32ff 	mov.w	r2, #4294967295
 8009698:	f7f7 fa48 	bl	8000b2c <__aeabi_dcmpun>
 800969c:	bb70      	cbnz	r0, 80096fc <_printf_float+0xc0>
 800969e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096a2:	4b98      	ldr	r3, [pc, #608]	@ (8009904 <_printf_float+0x2c8>)
 80096a4:	f04f 32ff 	mov.w	r2, #4294967295
 80096a8:	f7f7 fa22 	bl	8000af0 <__aeabi_dcmple>
 80096ac:	bb30      	cbnz	r0, 80096fc <_printf_float+0xc0>
 80096ae:	2200      	movs	r2, #0
 80096b0:	2300      	movs	r3, #0
 80096b2:	4640      	mov	r0, r8
 80096b4:	4649      	mov	r1, r9
 80096b6:	f7f7 fa11 	bl	8000adc <__aeabi_dcmplt>
 80096ba:	b110      	cbz	r0, 80096c2 <_printf_float+0x86>
 80096bc:	232d      	movs	r3, #45	@ 0x2d
 80096be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096c2:	4a91      	ldr	r2, [pc, #580]	@ (8009908 <_printf_float+0x2cc>)
 80096c4:	4b91      	ldr	r3, [pc, #580]	@ (800990c <_printf_float+0x2d0>)
 80096c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80096ca:	bf8c      	ite	hi
 80096cc:	4690      	movhi	r8, r2
 80096ce:	4698      	movls	r8, r3
 80096d0:	2303      	movs	r3, #3
 80096d2:	6123      	str	r3, [r4, #16]
 80096d4:	f02b 0304 	bic.w	r3, fp, #4
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	f04f 0900 	mov.w	r9, #0
 80096de:	9700      	str	r7, [sp, #0]
 80096e0:	4633      	mov	r3, r6
 80096e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80096e4:	4621      	mov	r1, r4
 80096e6:	4628      	mov	r0, r5
 80096e8:	f000 f9d2 	bl	8009a90 <_printf_common>
 80096ec:	3001      	adds	r0, #1
 80096ee:	f040 808d 	bne.w	800980c <_printf_float+0x1d0>
 80096f2:	f04f 30ff 	mov.w	r0, #4294967295
 80096f6:	b00d      	add	sp, #52	@ 0x34
 80096f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fc:	4642      	mov	r2, r8
 80096fe:	464b      	mov	r3, r9
 8009700:	4640      	mov	r0, r8
 8009702:	4649      	mov	r1, r9
 8009704:	f7f7 fa12 	bl	8000b2c <__aeabi_dcmpun>
 8009708:	b140      	cbz	r0, 800971c <_printf_float+0xe0>
 800970a:	464b      	mov	r3, r9
 800970c:	2b00      	cmp	r3, #0
 800970e:	bfbc      	itt	lt
 8009710:	232d      	movlt	r3, #45	@ 0x2d
 8009712:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009716:	4a7e      	ldr	r2, [pc, #504]	@ (8009910 <_printf_float+0x2d4>)
 8009718:	4b7e      	ldr	r3, [pc, #504]	@ (8009914 <_printf_float+0x2d8>)
 800971a:	e7d4      	b.n	80096c6 <_printf_float+0x8a>
 800971c:	6863      	ldr	r3, [r4, #4]
 800971e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009722:	9206      	str	r2, [sp, #24]
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	d13b      	bne.n	80097a0 <_printf_float+0x164>
 8009728:	2306      	movs	r3, #6
 800972a:	6063      	str	r3, [r4, #4]
 800972c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009730:	2300      	movs	r3, #0
 8009732:	6022      	str	r2, [r4, #0]
 8009734:	9303      	str	r3, [sp, #12]
 8009736:	ab0a      	add	r3, sp, #40	@ 0x28
 8009738:	e9cd a301 	strd	sl, r3, [sp, #4]
 800973c:	ab09      	add	r3, sp, #36	@ 0x24
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	6861      	ldr	r1, [r4, #4]
 8009742:	ec49 8b10 	vmov	d0, r8, r9
 8009746:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800974a:	4628      	mov	r0, r5
 800974c:	f7ff fed6 	bl	80094fc <__cvt>
 8009750:	9b06      	ldr	r3, [sp, #24]
 8009752:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009754:	2b47      	cmp	r3, #71	@ 0x47
 8009756:	4680      	mov	r8, r0
 8009758:	d129      	bne.n	80097ae <_printf_float+0x172>
 800975a:	1cc8      	adds	r0, r1, #3
 800975c:	db02      	blt.n	8009764 <_printf_float+0x128>
 800975e:	6863      	ldr	r3, [r4, #4]
 8009760:	4299      	cmp	r1, r3
 8009762:	dd41      	ble.n	80097e8 <_printf_float+0x1ac>
 8009764:	f1aa 0a02 	sub.w	sl, sl, #2
 8009768:	fa5f fa8a 	uxtb.w	sl, sl
 800976c:	3901      	subs	r1, #1
 800976e:	4652      	mov	r2, sl
 8009770:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009774:	9109      	str	r1, [sp, #36]	@ 0x24
 8009776:	f7ff ff26 	bl	80095c6 <__exponent>
 800977a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800977c:	1813      	adds	r3, r2, r0
 800977e:	2a01      	cmp	r2, #1
 8009780:	4681      	mov	r9, r0
 8009782:	6123      	str	r3, [r4, #16]
 8009784:	dc02      	bgt.n	800978c <_printf_float+0x150>
 8009786:	6822      	ldr	r2, [r4, #0]
 8009788:	07d2      	lsls	r2, r2, #31
 800978a:	d501      	bpl.n	8009790 <_printf_float+0x154>
 800978c:	3301      	adds	r3, #1
 800978e:	6123      	str	r3, [r4, #16]
 8009790:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009794:	2b00      	cmp	r3, #0
 8009796:	d0a2      	beq.n	80096de <_printf_float+0xa2>
 8009798:	232d      	movs	r3, #45	@ 0x2d
 800979a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800979e:	e79e      	b.n	80096de <_printf_float+0xa2>
 80097a0:	9a06      	ldr	r2, [sp, #24]
 80097a2:	2a47      	cmp	r2, #71	@ 0x47
 80097a4:	d1c2      	bne.n	800972c <_printf_float+0xf0>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1c0      	bne.n	800972c <_printf_float+0xf0>
 80097aa:	2301      	movs	r3, #1
 80097ac:	e7bd      	b.n	800972a <_printf_float+0xee>
 80097ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80097b2:	d9db      	bls.n	800976c <_printf_float+0x130>
 80097b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80097b8:	d118      	bne.n	80097ec <_printf_float+0x1b0>
 80097ba:	2900      	cmp	r1, #0
 80097bc:	6863      	ldr	r3, [r4, #4]
 80097be:	dd0b      	ble.n	80097d8 <_printf_float+0x19c>
 80097c0:	6121      	str	r1, [r4, #16]
 80097c2:	b913      	cbnz	r3, 80097ca <_printf_float+0x18e>
 80097c4:	6822      	ldr	r2, [r4, #0]
 80097c6:	07d0      	lsls	r0, r2, #31
 80097c8:	d502      	bpl.n	80097d0 <_printf_float+0x194>
 80097ca:	3301      	adds	r3, #1
 80097cc:	440b      	add	r3, r1
 80097ce:	6123      	str	r3, [r4, #16]
 80097d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80097d2:	f04f 0900 	mov.w	r9, #0
 80097d6:	e7db      	b.n	8009790 <_printf_float+0x154>
 80097d8:	b913      	cbnz	r3, 80097e0 <_printf_float+0x1a4>
 80097da:	6822      	ldr	r2, [r4, #0]
 80097dc:	07d2      	lsls	r2, r2, #31
 80097de:	d501      	bpl.n	80097e4 <_printf_float+0x1a8>
 80097e0:	3302      	adds	r3, #2
 80097e2:	e7f4      	b.n	80097ce <_printf_float+0x192>
 80097e4:	2301      	movs	r3, #1
 80097e6:	e7f2      	b.n	80097ce <_printf_float+0x192>
 80097e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80097ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ee:	4299      	cmp	r1, r3
 80097f0:	db05      	blt.n	80097fe <_printf_float+0x1c2>
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	6121      	str	r1, [r4, #16]
 80097f6:	07d8      	lsls	r0, r3, #31
 80097f8:	d5ea      	bpl.n	80097d0 <_printf_float+0x194>
 80097fa:	1c4b      	adds	r3, r1, #1
 80097fc:	e7e7      	b.n	80097ce <_printf_float+0x192>
 80097fe:	2900      	cmp	r1, #0
 8009800:	bfd4      	ite	le
 8009802:	f1c1 0202 	rsble	r2, r1, #2
 8009806:	2201      	movgt	r2, #1
 8009808:	4413      	add	r3, r2
 800980a:	e7e0      	b.n	80097ce <_printf_float+0x192>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	055a      	lsls	r2, r3, #21
 8009810:	d407      	bmi.n	8009822 <_printf_float+0x1e6>
 8009812:	6923      	ldr	r3, [r4, #16]
 8009814:	4642      	mov	r2, r8
 8009816:	4631      	mov	r1, r6
 8009818:	4628      	mov	r0, r5
 800981a:	47b8      	blx	r7
 800981c:	3001      	adds	r0, #1
 800981e:	d12b      	bne.n	8009878 <_printf_float+0x23c>
 8009820:	e767      	b.n	80096f2 <_printf_float+0xb6>
 8009822:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009826:	f240 80dd 	bls.w	80099e4 <_printf_float+0x3a8>
 800982a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800982e:	2200      	movs	r2, #0
 8009830:	2300      	movs	r3, #0
 8009832:	f7f7 f949 	bl	8000ac8 <__aeabi_dcmpeq>
 8009836:	2800      	cmp	r0, #0
 8009838:	d033      	beq.n	80098a2 <_printf_float+0x266>
 800983a:	4a37      	ldr	r2, [pc, #220]	@ (8009918 <_printf_float+0x2dc>)
 800983c:	2301      	movs	r3, #1
 800983e:	4631      	mov	r1, r6
 8009840:	4628      	mov	r0, r5
 8009842:	47b8      	blx	r7
 8009844:	3001      	adds	r0, #1
 8009846:	f43f af54 	beq.w	80096f2 <_printf_float+0xb6>
 800984a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800984e:	4543      	cmp	r3, r8
 8009850:	db02      	blt.n	8009858 <_printf_float+0x21c>
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	07d8      	lsls	r0, r3, #31
 8009856:	d50f      	bpl.n	8009878 <_printf_float+0x23c>
 8009858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800985c:	4631      	mov	r1, r6
 800985e:	4628      	mov	r0, r5
 8009860:	47b8      	blx	r7
 8009862:	3001      	adds	r0, #1
 8009864:	f43f af45 	beq.w	80096f2 <_printf_float+0xb6>
 8009868:	f04f 0900 	mov.w	r9, #0
 800986c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009870:	f104 0a1a 	add.w	sl, r4, #26
 8009874:	45c8      	cmp	r8, r9
 8009876:	dc09      	bgt.n	800988c <_printf_float+0x250>
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	079b      	lsls	r3, r3, #30
 800987c:	f100 8103 	bmi.w	8009a86 <_printf_float+0x44a>
 8009880:	68e0      	ldr	r0, [r4, #12]
 8009882:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009884:	4298      	cmp	r0, r3
 8009886:	bfb8      	it	lt
 8009888:	4618      	movlt	r0, r3
 800988a:	e734      	b.n	80096f6 <_printf_float+0xba>
 800988c:	2301      	movs	r3, #1
 800988e:	4652      	mov	r2, sl
 8009890:	4631      	mov	r1, r6
 8009892:	4628      	mov	r0, r5
 8009894:	47b8      	blx	r7
 8009896:	3001      	adds	r0, #1
 8009898:	f43f af2b 	beq.w	80096f2 <_printf_float+0xb6>
 800989c:	f109 0901 	add.w	r9, r9, #1
 80098a0:	e7e8      	b.n	8009874 <_printf_float+0x238>
 80098a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	dc39      	bgt.n	800991c <_printf_float+0x2e0>
 80098a8:	4a1b      	ldr	r2, [pc, #108]	@ (8009918 <_printf_float+0x2dc>)
 80098aa:	2301      	movs	r3, #1
 80098ac:	4631      	mov	r1, r6
 80098ae:	4628      	mov	r0, r5
 80098b0:	47b8      	blx	r7
 80098b2:	3001      	adds	r0, #1
 80098b4:	f43f af1d 	beq.w	80096f2 <_printf_float+0xb6>
 80098b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80098bc:	ea59 0303 	orrs.w	r3, r9, r3
 80098c0:	d102      	bne.n	80098c8 <_printf_float+0x28c>
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	07d9      	lsls	r1, r3, #31
 80098c6:	d5d7      	bpl.n	8009878 <_printf_float+0x23c>
 80098c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098cc:	4631      	mov	r1, r6
 80098ce:	4628      	mov	r0, r5
 80098d0:	47b8      	blx	r7
 80098d2:	3001      	adds	r0, #1
 80098d4:	f43f af0d 	beq.w	80096f2 <_printf_float+0xb6>
 80098d8:	f04f 0a00 	mov.w	sl, #0
 80098dc:	f104 0b1a 	add.w	fp, r4, #26
 80098e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e2:	425b      	negs	r3, r3
 80098e4:	4553      	cmp	r3, sl
 80098e6:	dc01      	bgt.n	80098ec <_printf_float+0x2b0>
 80098e8:	464b      	mov	r3, r9
 80098ea:	e793      	b.n	8009814 <_printf_float+0x1d8>
 80098ec:	2301      	movs	r3, #1
 80098ee:	465a      	mov	r2, fp
 80098f0:	4631      	mov	r1, r6
 80098f2:	4628      	mov	r0, r5
 80098f4:	47b8      	blx	r7
 80098f6:	3001      	adds	r0, #1
 80098f8:	f43f aefb 	beq.w	80096f2 <_printf_float+0xb6>
 80098fc:	f10a 0a01 	add.w	sl, sl, #1
 8009900:	e7ee      	b.n	80098e0 <_printf_float+0x2a4>
 8009902:	bf00      	nop
 8009904:	7fefffff 	.word	0x7fefffff
 8009908:	0800d1db 	.word	0x0800d1db
 800990c:	0800d1d7 	.word	0x0800d1d7
 8009910:	0800d1e3 	.word	0x0800d1e3
 8009914:	0800d1df 	.word	0x0800d1df
 8009918:	0800d1e7 	.word	0x0800d1e7
 800991c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800991e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009922:	4553      	cmp	r3, sl
 8009924:	bfa8      	it	ge
 8009926:	4653      	movge	r3, sl
 8009928:	2b00      	cmp	r3, #0
 800992a:	4699      	mov	r9, r3
 800992c:	dc36      	bgt.n	800999c <_printf_float+0x360>
 800992e:	f04f 0b00 	mov.w	fp, #0
 8009932:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009936:	f104 021a 	add.w	r2, r4, #26
 800993a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800993c:	9306      	str	r3, [sp, #24]
 800993e:	eba3 0309 	sub.w	r3, r3, r9
 8009942:	455b      	cmp	r3, fp
 8009944:	dc31      	bgt.n	80099aa <_printf_float+0x36e>
 8009946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009948:	459a      	cmp	sl, r3
 800994a:	dc3a      	bgt.n	80099c2 <_printf_float+0x386>
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	07da      	lsls	r2, r3, #31
 8009950:	d437      	bmi.n	80099c2 <_printf_float+0x386>
 8009952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009954:	ebaa 0903 	sub.w	r9, sl, r3
 8009958:	9b06      	ldr	r3, [sp, #24]
 800995a:	ebaa 0303 	sub.w	r3, sl, r3
 800995e:	4599      	cmp	r9, r3
 8009960:	bfa8      	it	ge
 8009962:	4699      	movge	r9, r3
 8009964:	f1b9 0f00 	cmp.w	r9, #0
 8009968:	dc33      	bgt.n	80099d2 <_printf_float+0x396>
 800996a:	f04f 0800 	mov.w	r8, #0
 800996e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009972:	f104 0b1a 	add.w	fp, r4, #26
 8009976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009978:	ebaa 0303 	sub.w	r3, sl, r3
 800997c:	eba3 0309 	sub.w	r3, r3, r9
 8009980:	4543      	cmp	r3, r8
 8009982:	f77f af79 	ble.w	8009878 <_printf_float+0x23c>
 8009986:	2301      	movs	r3, #1
 8009988:	465a      	mov	r2, fp
 800998a:	4631      	mov	r1, r6
 800998c:	4628      	mov	r0, r5
 800998e:	47b8      	blx	r7
 8009990:	3001      	adds	r0, #1
 8009992:	f43f aeae 	beq.w	80096f2 <_printf_float+0xb6>
 8009996:	f108 0801 	add.w	r8, r8, #1
 800999a:	e7ec      	b.n	8009976 <_printf_float+0x33a>
 800999c:	4642      	mov	r2, r8
 800999e:	4631      	mov	r1, r6
 80099a0:	4628      	mov	r0, r5
 80099a2:	47b8      	blx	r7
 80099a4:	3001      	adds	r0, #1
 80099a6:	d1c2      	bne.n	800992e <_printf_float+0x2f2>
 80099a8:	e6a3      	b.n	80096f2 <_printf_float+0xb6>
 80099aa:	2301      	movs	r3, #1
 80099ac:	4631      	mov	r1, r6
 80099ae:	4628      	mov	r0, r5
 80099b0:	9206      	str	r2, [sp, #24]
 80099b2:	47b8      	blx	r7
 80099b4:	3001      	adds	r0, #1
 80099b6:	f43f ae9c 	beq.w	80096f2 <_printf_float+0xb6>
 80099ba:	9a06      	ldr	r2, [sp, #24]
 80099bc:	f10b 0b01 	add.w	fp, fp, #1
 80099c0:	e7bb      	b.n	800993a <_printf_float+0x2fe>
 80099c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099c6:	4631      	mov	r1, r6
 80099c8:	4628      	mov	r0, r5
 80099ca:	47b8      	blx	r7
 80099cc:	3001      	adds	r0, #1
 80099ce:	d1c0      	bne.n	8009952 <_printf_float+0x316>
 80099d0:	e68f      	b.n	80096f2 <_printf_float+0xb6>
 80099d2:	9a06      	ldr	r2, [sp, #24]
 80099d4:	464b      	mov	r3, r9
 80099d6:	4442      	add	r2, r8
 80099d8:	4631      	mov	r1, r6
 80099da:	4628      	mov	r0, r5
 80099dc:	47b8      	blx	r7
 80099de:	3001      	adds	r0, #1
 80099e0:	d1c3      	bne.n	800996a <_printf_float+0x32e>
 80099e2:	e686      	b.n	80096f2 <_printf_float+0xb6>
 80099e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80099e8:	f1ba 0f01 	cmp.w	sl, #1
 80099ec:	dc01      	bgt.n	80099f2 <_printf_float+0x3b6>
 80099ee:	07db      	lsls	r3, r3, #31
 80099f0:	d536      	bpl.n	8009a60 <_printf_float+0x424>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4642      	mov	r2, r8
 80099f6:	4631      	mov	r1, r6
 80099f8:	4628      	mov	r0, r5
 80099fa:	47b8      	blx	r7
 80099fc:	3001      	adds	r0, #1
 80099fe:	f43f ae78 	beq.w	80096f2 <_printf_float+0xb6>
 8009a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a06:	4631      	mov	r1, r6
 8009a08:	4628      	mov	r0, r5
 8009a0a:	47b8      	blx	r7
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	f43f ae70 	beq.w	80096f2 <_printf_float+0xb6>
 8009a12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a16:	2200      	movs	r2, #0
 8009a18:	2300      	movs	r3, #0
 8009a1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a1e:	f7f7 f853 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a22:	b9c0      	cbnz	r0, 8009a56 <_printf_float+0x41a>
 8009a24:	4653      	mov	r3, sl
 8009a26:	f108 0201 	add.w	r2, r8, #1
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b8      	blx	r7
 8009a30:	3001      	adds	r0, #1
 8009a32:	d10c      	bne.n	8009a4e <_printf_float+0x412>
 8009a34:	e65d      	b.n	80096f2 <_printf_float+0xb6>
 8009a36:	2301      	movs	r3, #1
 8009a38:	465a      	mov	r2, fp
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	47b8      	blx	r7
 8009a40:	3001      	adds	r0, #1
 8009a42:	f43f ae56 	beq.w	80096f2 <_printf_float+0xb6>
 8009a46:	f108 0801 	add.w	r8, r8, #1
 8009a4a:	45d0      	cmp	r8, sl
 8009a4c:	dbf3      	blt.n	8009a36 <_printf_float+0x3fa>
 8009a4e:	464b      	mov	r3, r9
 8009a50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009a54:	e6df      	b.n	8009816 <_printf_float+0x1da>
 8009a56:	f04f 0800 	mov.w	r8, #0
 8009a5a:	f104 0b1a 	add.w	fp, r4, #26
 8009a5e:	e7f4      	b.n	8009a4a <_printf_float+0x40e>
 8009a60:	2301      	movs	r3, #1
 8009a62:	4642      	mov	r2, r8
 8009a64:	e7e1      	b.n	8009a2a <_printf_float+0x3ee>
 8009a66:	2301      	movs	r3, #1
 8009a68:	464a      	mov	r2, r9
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	47b8      	blx	r7
 8009a70:	3001      	adds	r0, #1
 8009a72:	f43f ae3e 	beq.w	80096f2 <_printf_float+0xb6>
 8009a76:	f108 0801 	add.w	r8, r8, #1
 8009a7a:	68e3      	ldr	r3, [r4, #12]
 8009a7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a7e:	1a5b      	subs	r3, r3, r1
 8009a80:	4543      	cmp	r3, r8
 8009a82:	dcf0      	bgt.n	8009a66 <_printf_float+0x42a>
 8009a84:	e6fc      	b.n	8009880 <_printf_float+0x244>
 8009a86:	f04f 0800 	mov.w	r8, #0
 8009a8a:	f104 0919 	add.w	r9, r4, #25
 8009a8e:	e7f4      	b.n	8009a7a <_printf_float+0x43e>

08009a90 <_printf_common>:
 8009a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a94:	4616      	mov	r6, r2
 8009a96:	4698      	mov	r8, r3
 8009a98:	688a      	ldr	r2, [r1, #8]
 8009a9a:	690b      	ldr	r3, [r1, #16]
 8009a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	bfb8      	it	lt
 8009aa4:	4613      	movlt	r3, r2
 8009aa6:	6033      	str	r3, [r6, #0]
 8009aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009aac:	4607      	mov	r7, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	b10a      	cbz	r2, 8009ab6 <_printf_common+0x26>
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	6033      	str	r3, [r6, #0]
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	0699      	lsls	r1, r3, #26
 8009aba:	bf42      	ittt	mi
 8009abc:	6833      	ldrmi	r3, [r6, #0]
 8009abe:	3302      	addmi	r3, #2
 8009ac0:	6033      	strmi	r3, [r6, #0]
 8009ac2:	6825      	ldr	r5, [r4, #0]
 8009ac4:	f015 0506 	ands.w	r5, r5, #6
 8009ac8:	d106      	bne.n	8009ad8 <_printf_common+0x48>
 8009aca:	f104 0a19 	add.w	sl, r4, #25
 8009ace:	68e3      	ldr	r3, [r4, #12]
 8009ad0:	6832      	ldr	r2, [r6, #0]
 8009ad2:	1a9b      	subs	r3, r3, r2
 8009ad4:	42ab      	cmp	r3, r5
 8009ad6:	dc26      	bgt.n	8009b26 <_printf_common+0x96>
 8009ad8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009adc:	6822      	ldr	r2, [r4, #0]
 8009ade:	3b00      	subs	r3, #0
 8009ae0:	bf18      	it	ne
 8009ae2:	2301      	movne	r3, #1
 8009ae4:	0692      	lsls	r2, r2, #26
 8009ae6:	d42b      	bmi.n	8009b40 <_printf_common+0xb0>
 8009ae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009aec:	4641      	mov	r1, r8
 8009aee:	4638      	mov	r0, r7
 8009af0:	47c8      	blx	r9
 8009af2:	3001      	adds	r0, #1
 8009af4:	d01e      	beq.n	8009b34 <_printf_common+0xa4>
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	6922      	ldr	r2, [r4, #16]
 8009afa:	f003 0306 	and.w	r3, r3, #6
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	bf02      	ittt	eq
 8009b02:	68e5      	ldreq	r5, [r4, #12]
 8009b04:	6833      	ldreq	r3, [r6, #0]
 8009b06:	1aed      	subeq	r5, r5, r3
 8009b08:	68a3      	ldr	r3, [r4, #8]
 8009b0a:	bf0c      	ite	eq
 8009b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b10:	2500      	movne	r5, #0
 8009b12:	4293      	cmp	r3, r2
 8009b14:	bfc4      	itt	gt
 8009b16:	1a9b      	subgt	r3, r3, r2
 8009b18:	18ed      	addgt	r5, r5, r3
 8009b1a:	2600      	movs	r6, #0
 8009b1c:	341a      	adds	r4, #26
 8009b1e:	42b5      	cmp	r5, r6
 8009b20:	d11a      	bne.n	8009b58 <_printf_common+0xc8>
 8009b22:	2000      	movs	r0, #0
 8009b24:	e008      	b.n	8009b38 <_printf_common+0xa8>
 8009b26:	2301      	movs	r3, #1
 8009b28:	4652      	mov	r2, sl
 8009b2a:	4641      	mov	r1, r8
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	47c8      	blx	r9
 8009b30:	3001      	adds	r0, #1
 8009b32:	d103      	bne.n	8009b3c <_printf_common+0xac>
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295
 8009b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3c:	3501      	adds	r5, #1
 8009b3e:	e7c6      	b.n	8009ace <_printf_common+0x3e>
 8009b40:	18e1      	adds	r1, r4, r3
 8009b42:	1c5a      	adds	r2, r3, #1
 8009b44:	2030      	movs	r0, #48	@ 0x30
 8009b46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b4a:	4422      	add	r2, r4
 8009b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b54:	3302      	adds	r3, #2
 8009b56:	e7c7      	b.n	8009ae8 <_printf_common+0x58>
 8009b58:	2301      	movs	r3, #1
 8009b5a:	4622      	mov	r2, r4
 8009b5c:	4641      	mov	r1, r8
 8009b5e:	4638      	mov	r0, r7
 8009b60:	47c8      	blx	r9
 8009b62:	3001      	adds	r0, #1
 8009b64:	d0e6      	beq.n	8009b34 <_printf_common+0xa4>
 8009b66:	3601      	adds	r6, #1
 8009b68:	e7d9      	b.n	8009b1e <_printf_common+0x8e>
	...

08009b6c <_printf_i>:
 8009b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b70:	7e0f      	ldrb	r7, [r1, #24]
 8009b72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b74:	2f78      	cmp	r7, #120	@ 0x78
 8009b76:	4691      	mov	r9, r2
 8009b78:	4680      	mov	r8, r0
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	469a      	mov	sl, r3
 8009b7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b82:	d807      	bhi.n	8009b94 <_printf_i+0x28>
 8009b84:	2f62      	cmp	r7, #98	@ 0x62
 8009b86:	d80a      	bhi.n	8009b9e <_printf_i+0x32>
 8009b88:	2f00      	cmp	r7, #0
 8009b8a:	f000 80d1 	beq.w	8009d30 <_printf_i+0x1c4>
 8009b8e:	2f58      	cmp	r7, #88	@ 0x58
 8009b90:	f000 80b8 	beq.w	8009d04 <_printf_i+0x198>
 8009b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b9c:	e03a      	b.n	8009c14 <_printf_i+0xa8>
 8009b9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ba2:	2b15      	cmp	r3, #21
 8009ba4:	d8f6      	bhi.n	8009b94 <_printf_i+0x28>
 8009ba6:	a101      	add	r1, pc, #4	@ (adr r1, 8009bac <_printf_i+0x40>)
 8009ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bac:	08009c05 	.word	0x08009c05
 8009bb0:	08009c19 	.word	0x08009c19
 8009bb4:	08009b95 	.word	0x08009b95
 8009bb8:	08009b95 	.word	0x08009b95
 8009bbc:	08009b95 	.word	0x08009b95
 8009bc0:	08009b95 	.word	0x08009b95
 8009bc4:	08009c19 	.word	0x08009c19
 8009bc8:	08009b95 	.word	0x08009b95
 8009bcc:	08009b95 	.word	0x08009b95
 8009bd0:	08009b95 	.word	0x08009b95
 8009bd4:	08009b95 	.word	0x08009b95
 8009bd8:	08009d17 	.word	0x08009d17
 8009bdc:	08009c43 	.word	0x08009c43
 8009be0:	08009cd1 	.word	0x08009cd1
 8009be4:	08009b95 	.word	0x08009b95
 8009be8:	08009b95 	.word	0x08009b95
 8009bec:	08009d39 	.word	0x08009d39
 8009bf0:	08009b95 	.word	0x08009b95
 8009bf4:	08009c43 	.word	0x08009c43
 8009bf8:	08009b95 	.word	0x08009b95
 8009bfc:	08009b95 	.word	0x08009b95
 8009c00:	08009cd9 	.word	0x08009cd9
 8009c04:	6833      	ldr	r3, [r6, #0]
 8009c06:	1d1a      	adds	r2, r3, #4
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	6032      	str	r2, [r6, #0]
 8009c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c14:	2301      	movs	r3, #1
 8009c16:	e09c      	b.n	8009d52 <_printf_i+0x1e6>
 8009c18:	6833      	ldr	r3, [r6, #0]
 8009c1a:	6820      	ldr	r0, [r4, #0]
 8009c1c:	1d19      	adds	r1, r3, #4
 8009c1e:	6031      	str	r1, [r6, #0]
 8009c20:	0606      	lsls	r6, r0, #24
 8009c22:	d501      	bpl.n	8009c28 <_printf_i+0xbc>
 8009c24:	681d      	ldr	r5, [r3, #0]
 8009c26:	e003      	b.n	8009c30 <_printf_i+0xc4>
 8009c28:	0645      	lsls	r5, r0, #25
 8009c2a:	d5fb      	bpl.n	8009c24 <_printf_i+0xb8>
 8009c2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c30:	2d00      	cmp	r5, #0
 8009c32:	da03      	bge.n	8009c3c <_printf_i+0xd0>
 8009c34:	232d      	movs	r3, #45	@ 0x2d
 8009c36:	426d      	negs	r5, r5
 8009c38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c3c:	4858      	ldr	r0, [pc, #352]	@ (8009da0 <_printf_i+0x234>)
 8009c3e:	230a      	movs	r3, #10
 8009c40:	e011      	b.n	8009c66 <_printf_i+0xfa>
 8009c42:	6821      	ldr	r1, [r4, #0]
 8009c44:	6833      	ldr	r3, [r6, #0]
 8009c46:	0608      	lsls	r0, r1, #24
 8009c48:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c4c:	d402      	bmi.n	8009c54 <_printf_i+0xe8>
 8009c4e:	0649      	lsls	r1, r1, #25
 8009c50:	bf48      	it	mi
 8009c52:	b2ad      	uxthmi	r5, r5
 8009c54:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c56:	4852      	ldr	r0, [pc, #328]	@ (8009da0 <_printf_i+0x234>)
 8009c58:	6033      	str	r3, [r6, #0]
 8009c5a:	bf14      	ite	ne
 8009c5c:	230a      	movne	r3, #10
 8009c5e:	2308      	moveq	r3, #8
 8009c60:	2100      	movs	r1, #0
 8009c62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c66:	6866      	ldr	r6, [r4, #4]
 8009c68:	60a6      	str	r6, [r4, #8]
 8009c6a:	2e00      	cmp	r6, #0
 8009c6c:	db05      	blt.n	8009c7a <_printf_i+0x10e>
 8009c6e:	6821      	ldr	r1, [r4, #0]
 8009c70:	432e      	orrs	r6, r5
 8009c72:	f021 0104 	bic.w	r1, r1, #4
 8009c76:	6021      	str	r1, [r4, #0]
 8009c78:	d04b      	beq.n	8009d12 <_printf_i+0x1a6>
 8009c7a:	4616      	mov	r6, r2
 8009c7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c80:	fb03 5711 	mls	r7, r3, r1, r5
 8009c84:	5dc7      	ldrb	r7, [r0, r7]
 8009c86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c8a:	462f      	mov	r7, r5
 8009c8c:	42bb      	cmp	r3, r7
 8009c8e:	460d      	mov	r5, r1
 8009c90:	d9f4      	bls.n	8009c7c <_printf_i+0x110>
 8009c92:	2b08      	cmp	r3, #8
 8009c94:	d10b      	bne.n	8009cae <_printf_i+0x142>
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	07df      	lsls	r7, r3, #31
 8009c9a:	d508      	bpl.n	8009cae <_printf_i+0x142>
 8009c9c:	6923      	ldr	r3, [r4, #16]
 8009c9e:	6861      	ldr	r1, [r4, #4]
 8009ca0:	4299      	cmp	r1, r3
 8009ca2:	bfde      	ittt	le
 8009ca4:	2330      	movle	r3, #48	@ 0x30
 8009ca6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009caa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cae:	1b92      	subs	r2, r2, r6
 8009cb0:	6122      	str	r2, [r4, #16]
 8009cb2:	f8cd a000 	str.w	sl, [sp]
 8009cb6:	464b      	mov	r3, r9
 8009cb8:	aa03      	add	r2, sp, #12
 8009cba:	4621      	mov	r1, r4
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	f7ff fee7 	bl	8009a90 <_printf_common>
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	d14a      	bne.n	8009d5c <_printf_i+0x1f0>
 8009cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cca:	b004      	add	sp, #16
 8009ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	f043 0320 	orr.w	r3, r3, #32
 8009cd6:	6023      	str	r3, [r4, #0]
 8009cd8:	4832      	ldr	r0, [pc, #200]	@ (8009da4 <_printf_i+0x238>)
 8009cda:	2778      	movs	r7, #120	@ 0x78
 8009cdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	6831      	ldr	r1, [r6, #0]
 8009ce4:	061f      	lsls	r7, r3, #24
 8009ce6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009cea:	d402      	bmi.n	8009cf2 <_printf_i+0x186>
 8009cec:	065f      	lsls	r7, r3, #25
 8009cee:	bf48      	it	mi
 8009cf0:	b2ad      	uxthmi	r5, r5
 8009cf2:	6031      	str	r1, [r6, #0]
 8009cf4:	07d9      	lsls	r1, r3, #31
 8009cf6:	bf44      	itt	mi
 8009cf8:	f043 0320 	orrmi.w	r3, r3, #32
 8009cfc:	6023      	strmi	r3, [r4, #0]
 8009cfe:	b11d      	cbz	r5, 8009d08 <_printf_i+0x19c>
 8009d00:	2310      	movs	r3, #16
 8009d02:	e7ad      	b.n	8009c60 <_printf_i+0xf4>
 8009d04:	4826      	ldr	r0, [pc, #152]	@ (8009da0 <_printf_i+0x234>)
 8009d06:	e7e9      	b.n	8009cdc <_printf_i+0x170>
 8009d08:	6823      	ldr	r3, [r4, #0]
 8009d0a:	f023 0320 	bic.w	r3, r3, #32
 8009d0e:	6023      	str	r3, [r4, #0]
 8009d10:	e7f6      	b.n	8009d00 <_printf_i+0x194>
 8009d12:	4616      	mov	r6, r2
 8009d14:	e7bd      	b.n	8009c92 <_printf_i+0x126>
 8009d16:	6833      	ldr	r3, [r6, #0]
 8009d18:	6825      	ldr	r5, [r4, #0]
 8009d1a:	6961      	ldr	r1, [r4, #20]
 8009d1c:	1d18      	adds	r0, r3, #4
 8009d1e:	6030      	str	r0, [r6, #0]
 8009d20:	062e      	lsls	r6, r5, #24
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	d501      	bpl.n	8009d2a <_printf_i+0x1be>
 8009d26:	6019      	str	r1, [r3, #0]
 8009d28:	e002      	b.n	8009d30 <_printf_i+0x1c4>
 8009d2a:	0668      	lsls	r0, r5, #25
 8009d2c:	d5fb      	bpl.n	8009d26 <_printf_i+0x1ba>
 8009d2e:	8019      	strh	r1, [r3, #0]
 8009d30:	2300      	movs	r3, #0
 8009d32:	6123      	str	r3, [r4, #16]
 8009d34:	4616      	mov	r6, r2
 8009d36:	e7bc      	b.n	8009cb2 <_printf_i+0x146>
 8009d38:	6833      	ldr	r3, [r6, #0]
 8009d3a:	1d1a      	adds	r2, r3, #4
 8009d3c:	6032      	str	r2, [r6, #0]
 8009d3e:	681e      	ldr	r6, [r3, #0]
 8009d40:	6862      	ldr	r2, [r4, #4]
 8009d42:	2100      	movs	r1, #0
 8009d44:	4630      	mov	r0, r6
 8009d46:	f7f6 fa43 	bl	80001d0 <memchr>
 8009d4a:	b108      	cbz	r0, 8009d50 <_printf_i+0x1e4>
 8009d4c:	1b80      	subs	r0, r0, r6
 8009d4e:	6060      	str	r0, [r4, #4]
 8009d50:	6863      	ldr	r3, [r4, #4]
 8009d52:	6123      	str	r3, [r4, #16]
 8009d54:	2300      	movs	r3, #0
 8009d56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d5a:	e7aa      	b.n	8009cb2 <_printf_i+0x146>
 8009d5c:	6923      	ldr	r3, [r4, #16]
 8009d5e:	4632      	mov	r2, r6
 8009d60:	4649      	mov	r1, r9
 8009d62:	4640      	mov	r0, r8
 8009d64:	47d0      	blx	sl
 8009d66:	3001      	adds	r0, #1
 8009d68:	d0ad      	beq.n	8009cc6 <_printf_i+0x15a>
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	079b      	lsls	r3, r3, #30
 8009d6e:	d413      	bmi.n	8009d98 <_printf_i+0x22c>
 8009d70:	68e0      	ldr	r0, [r4, #12]
 8009d72:	9b03      	ldr	r3, [sp, #12]
 8009d74:	4298      	cmp	r0, r3
 8009d76:	bfb8      	it	lt
 8009d78:	4618      	movlt	r0, r3
 8009d7a:	e7a6      	b.n	8009cca <_printf_i+0x15e>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	4632      	mov	r2, r6
 8009d80:	4649      	mov	r1, r9
 8009d82:	4640      	mov	r0, r8
 8009d84:	47d0      	blx	sl
 8009d86:	3001      	adds	r0, #1
 8009d88:	d09d      	beq.n	8009cc6 <_printf_i+0x15a>
 8009d8a:	3501      	adds	r5, #1
 8009d8c:	68e3      	ldr	r3, [r4, #12]
 8009d8e:	9903      	ldr	r1, [sp, #12]
 8009d90:	1a5b      	subs	r3, r3, r1
 8009d92:	42ab      	cmp	r3, r5
 8009d94:	dcf2      	bgt.n	8009d7c <_printf_i+0x210>
 8009d96:	e7eb      	b.n	8009d70 <_printf_i+0x204>
 8009d98:	2500      	movs	r5, #0
 8009d9a:	f104 0619 	add.w	r6, r4, #25
 8009d9e:	e7f5      	b.n	8009d8c <_printf_i+0x220>
 8009da0:	0800d1e9 	.word	0x0800d1e9
 8009da4:	0800d1fa 	.word	0x0800d1fa

08009da8 <_scanf_float>:
 8009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dac:	b087      	sub	sp, #28
 8009dae:	4691      	mov	r9, r2
 8009db0:	9303      	str	r3, [sp, #12]
 8009db2:	688b      	ldr	r3, [r1, #8]
 8009db4:	1e5a      	subs	r2, r3, #1
 8009db6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009dba:	bf81      	itttt	hi
 8009dbc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009dc0:	eb03 0b05 	addhi.w	fp, r3, r5
 8009dc4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009dc8:	608b      	strhi	r3, [r1, #8]
 8009dca:	680b      	ldr	r3, [r1, #0]
 8009dcc:	460a      	mov	r2, r1
 8009dce:	f04f 0500 	mov.w	r5, #0
 8009dd2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009dd6:	f842 3b1c 	str.w	r3, [r2], #28
 8009dda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009dde:	4680      	mov	r8, r0
 8009de0:	460c      	mov	r4, r1
 8009de2:	bf98      	it	ls
 8009de4:	f04f 0b00 	movls.w	fp, #0
 8009de8:	9201      	str	r2, [sp, #4]
 8009dea:	4616      	mov	r6, r2
 8009dec:	46aa      	mov	sl, r5
 8009dee:	462f      	mov	r7, r5
 8009df0:	9502      	str	r5, [sp, #8]
 8009df2:	68a2      	ldr	r2, [r4, #8]
 8009df4:	b15a      	cbz	r2, 8009e0e <_scanf_float+0x66>
 8009df6:	f8d9 3000 	ldr.w	r3, [r9]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b4e      	cmp	r3, #78	@ 0x4e
 8009dfe:	d863      	bhi.n	8009ec8 <_scanf_float+0x120>
 8009e00:	2b40      	cmp	r3, #64	@ 0x40
 8009e02:	d83b      	bhi.n	8009e7c <_scanf_float+0xd4>
 8009e04:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009e08:	b2c8      	uxtb	r0, r1
 8009e0a:	280e      	cmp	r0, #14
 8009e0c:	d939      	bls.n	8009e82 <_scanf_float+0xda>
 8009e0e:	b11f      	cbz	r7, 8009e18 <_scanf_float+0x70>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e16:	6023      	str	r3, [r4, #0]
 8009e18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e1c:	f1ba 0f01 	cmp.w	sl, #1
 8009e20:	f200 8114 	bhi.w	800a04c <_scanf_float+0x2a4>
 8009e24:	9b01      	ldr	r3, [sp, #4]
 8009e26:	429e      	cmp	r6, r3
 8009e28:	f200 8105 	bhi.w	800a036 <_scanf_float+0x28e>
 8009e2c:	2001      	movs	r0, #1
 8009e2e:	b007      	add	sp, #28
 8009e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e34:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009e38:	2a0d      	cmp	r2, #13
 8009e3a:	d8e8      	bhi.n	8009e0e <_scanf_float+0x66>
 8009e3c:	a101      	add	r1, pc, #4	@ (adr r1, 8009e44 <_scanf_float+0x9c>)
 8009e3e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009f8d 	.word	0x08009f8d
 8009e48:	08009e0f 	.word	0x08009e0f
 8009e4c:	08009e0f 	.word	0x08009e0f
 8009e50:	08009e0f 	.word	0x08009e0f
 8009e54:	08009fe9 	.word	0x08009fe9
 8009e58:	08009fc3 	.word	0x08009fc3
 8009e5c:	08009e0f 	.word	0x08009e0f
 8009e60:	08009e0f 	.word	0x08009e0f
 8009e64:	08009f9b 	.word	0x08009f9b
 8009e68:	08009e0f 	.word	0x08009e0f
 8009e6c:	08009e0f 	.word	0x08009e0f
 8009e70:	08009e0f 	.word	0x08009e0f
 8009e74:	08009e0f 	.word	0x08009e0f
 8009e78:	08009f57 	.word	0x08009f57
 8009e7c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009e80:	e7da      	b.n	8009e38 <_scanf_float+0x90>
 8009e82:	290e      	cmp	r1, #14
 8009e84:	d8c3      	bhi.n	8009e0e <_scanf_float+0x66>
 8009e86:	a001      	add	r0, pc, #4	@ (adr r0, 8009e8c <_scanf_float+0xe4>)
 8009e88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009e8c:	08009f47 	.word	0x08009f47
 8009e90:	08009e0f 	.word	0x08009e0f
 8009e94:	08009f47 	.word	0x08009f47
 8009e98:	08009fd7 	.word	0x08009fd7
 8009e9c:	08009e0f 	.word	0x08009e0f
 8009ea0:	08009ee9 	.word	0x08009ee9
 8009ea4:	08009f2d 	.word	0x08009f2d
 8009ea8:	08009f2d 	.word	0x08009f2d
 8009eac:	08009f2d 	.word	0x08009f2d
 8009eb0:	08009f2d 	.word	0x08009f2d
 8009eb4:	08009f2d 	.word	0x08009f2d
 8009eb8:	08009f2d 	.word	0x08009f2d
 8009ebc:	08009f2d 	.word	0x08009f2d
 8009ec0:	08009f2d 	.word	0x08009f2d
 8009ec4:	08009f2d 	.word	0x08009f2d
 8009ec8:	2b6e      	cmp	r3, #110	@ 0x6e
 8009eca:	d809      	bhi.n	8009ee0 <_scanf_float+0x138>
 8009ecc:	2b60      	cmp	r3, #96	@ 0x60
 8009ece:	d8b1      	bhi.n	8009e34 <_scanf_float+0x8c>
 8009ed0:	2b54      	cmp	r3, #84	@ 0x54
 8009ed2:	d07b      	beq.n	8009fcc <_scanf_float+0x224>
 8009ed4:	2b59      	cmp	r3, #89	@ 0x59
 8009ed6:	d19a      	bne.n	8009e0e <_scanf_float+0x66>
 8009ed8:	2d07      	cmp	r5, #7
 8009eda:	d198      	bne.n	8009e0e <_scanf_float+0x66>
 8009edc:	2508      	movs	r5, #8
 8009ede:	e02f      	b.n	8009f40 <_scanf_float+0x198>
 8009ee0:	2b74      	cmp	r3, #116	@ 0x74
 8009ee2:	d073      	beq.n	8009fcc <_scanf_float+0x224>
 8009ee4:	2b79      	cmp	r3, #121	@ 0x79
 8009ee6:	e7f6      	b.n	8009ed6 <_scanf_float+0x12e>
 8009ee8:	6821      	ldr	r1, [r4, #0]
 8009eea:	05c8      	lsls	r0, r1, #23
 8009eec:	d51e      	bpl.n	8009f2c <_scanf_float+0x184>
 8009eee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009ef2:	6021      	str	r1, [r4, #0]
 8009ef4:	3701      	adds	r7, #1
 8009ef6:	f1bb 0f00 	cmp.w	fp, #0
 8009efa:	d003      	beq.n	8009f04 <_scanf_float+0x15c>
 8009efc:	3201      	adds	r2, #1
 8009efe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f02:	60a2      	str	r2, [r4, #8]
 8009f04:	68a3      	ldr	r3, [r4, #8]
 8009f06:	3b01      	subs	r3, #1
 8009f08:	60a3      	str	r3, [r4, #8]
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	6123      	str	r3, [r4, #16]
 8009f10:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009f14:	3b01      	subs	r3, #1
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f8c9 3004 	str.w	r3, [r9, #4]
 8009f1c:	f340 8082 	ble.w	800a024 <_scanf_float+0x27c>
 8009f20:	f8d9 3000 	ldr.w	r3, [r9]
 8009f24:	3301      	adds	r3, #1
 8009f26:	f8c9 3000 	str.w	r3, [r9]
 8009f2a:	e762      	b.n	8009df2 <_scanf_float+0x4a>
 8009f2c:	eb1a 0105 	adds.w	r1, sl, r5
 8009f30:	f47f af6d 	bne.w	8009e0e <_scanf_float+0x66>
 8009f34:	6822      	ldr	r2, [r4, #0]
 8009f36:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009f3a:	6022      	str	r2, [r4, #0]
 8009f3c:	460d      	mov	r5, r1
 8009f3e:	468a      	mov	sl, r1
 8009f40:	f806 3b01 	strb.w	r3, [r6], #1
 8009f44:	e7de      	b.n	8009f04 <_scanf_float+0x15c>
 8009f46:	6822      	ldr	r2, [r4, #0]
 8009f48:	0610      	lsls	r0, r2, #24
 8009f4a:	f57f af60 	bpl.w	8009e0e <_scanf_float+0x66>
 8009f4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f52:	6022      	str	r2, [r4, #0]
 8009f54:	e7f4      	b.n	8009f40 <_scanf_float+0x198>
 8009f56:	f1ba 0f00 	cmp.w	sl, #0
 8009f5a:	d10c      	bne.n	8009f76 <_scanf_float+0x1ce>
 8009f5c:	b977      	cbnz	r7, 8009f7c <_scanf_float+0x1d4>
 8009f5e:	6822      	ldr	r2, [r4, #0]
 8009f60:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009f64:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009f68:	d108      	bne.n	8009f7c <_scanf_float+0x1d4>
 8009f6a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009f6e:	6022      	str	r2, [r4, #0]
 8009f70:	f04f 0a01 	mov.w	sl, #1
 8009f74:	e7e4      	b.n	8009f40 <_scanf_float+0x198>
 8009f76:	f1ba 0f02 	cmp.w	sl, #2
 8009f7a:	d050      	beq.n	800a01e <_scanf_float+0x276>
 8009f7c:	2d01      	cmp	r5, #1
 8009f7e:	d002      	beq.n	8009f86 <_scanf_float+0x1de>
 8009f80:	2d04      	cmp	r5, #4
 8009f82:	f47f af44 	bne.w	8009e0e <_scanf_float+0x66>
 8009f86:	3501      	adds	r5, #1
 8009f88:	b2ed      	uxtb	r5, r5
 8009f8a:	e7d9      	b.n	8009f40 <_scanf_float+0x198>
 8009f8c:	f1ba 0f01 	cmp.w	sl, #1
 8009f90:	f47f af3d 	bne.w	8009e0e <_scanf_float+0x66>
 8009f94:	f04f 0a02 	mov.w	sl, #2
 8009f98:	e7d2      	b.n	8009f40 <_scanf_float+0x198>
 8009f9a:	b975      	cbnz	r5, 8009fba <_scanf_float+0x212>
 8009f9c:	2f00      	cmp	r7, #0
 8009f9e:	f47f af37 	bne.w	8009e10 <_scanf_float+0x68>
 8009fa2:	6822      	ldr	r2, [r4, #0]
 8009fa4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009fa8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009fac:	f040 8103 	bne.w	800a1b6 <_scanf_float+0x40e>
 8009fb0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009fb4:	6022      	str	r2, [r4, #0]
 8009fb6:	2501      	movs	r5, #1
 8009fb8:	e7c2      	b.n	8009f40 <_scanf_float+0x198>
 8009fba:	2d03      	cmp	r5, #3
 8009fbc:	d0e3      	beq.n	8009f86 <_scanf_float+0x1de>
 8009fbe:	2d05      	cmp	r5, #5
 8009fc0:	e7df      	b.n	8009f82 <_scanf_float+0x1da>
 8009fc2:	2d02      	cmp	r5, #2
 8009fc4:	f47f af23 	bne.w	8009e0e <_scanf_float+0x66>
 8009fc8:	2503      	movs	r5, #3
 8009fca:	e7b9      	b.n	8009f40 <_scanf_float+0x198>
 8009fcc:	2d06      	cmp	r5, #6
 8009fce:	f47f af1e 	bne.w	8009e0e <_scanf_float+0x66>
 8009fd2:	2507      	movs	r5, #7
 8009fd4:	e7b4      	b.n	8009f40 <_scanf_float+0x198>
 8009fd6:	6822      	ldr	r2, [r4, #0]
 8009fd8:	0591      	lsls	r1, r2, #22
 8009fda:	f57f af18 	bpl.w	8009e0e <_scanf_float+0x66>
 8009fde:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009fe2:	6022      	str	r2, [r4, #0]
 8009fe4:	9702      	str	r7, [sp, #8]
 8009fe6:	e7ab      	b.n	8009f40 <_scanf_float+0x198>
 8009fe8:	6822      	ldr	r2, [r4, #0]
 8009fea:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009fee:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009ff2:	d005      	beq.n	800a000 <_scanf_float+0x258>
 8009ff4:	0550      	lsls	r0, r2, #21
 8009ff6:	f57f af0a 	bpl.w	8009e0e <_scanf_float+0x66>
 8009ffa:	2f00      	cmp	r7, #0
 8009ffc:	f000 80db 	beq.w	800a1b6 <_scanf_float+0x40e>
 800a000:	0591      	lsls	r1, r2, #22
 800a002:	bf58      	it	pl
 800a004:	9902      	ldrpl	r1, [sp, #8]
 800a006:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a00a:	bf58      	it	pl
 800a00c:	1a79      	subpl	r1, r7, r1
 800a00e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a012:	bf58      	it	pl
 800a014:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a018:	6022      	str	r2, [r4, #0]
 800a01a:	2700      	movs	r7, #0
 800a01c:	e790      	b.n	8009f40 <_scanf_float+0x198>
 800a01e:	f04f 0a03 	mov.w	sl, #3
 800a022:	e78d      	b.n	8009f40 <_scanf_float+0x198>
 800a024:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a028:	4649      	mov	r1, r9
 800a02a:	4640      	mov	r0, r8
 800a02c:	4798      	blx	r3
 800a02e:	2800      	cmp	r0, #0
 800a030:	f43f aedf 	beq.w	8009df2 <_scanf_float+0x4a>
 800a034:	e6eb      	b.n	8009e0e <_scanf_float+0x66>
 800a036:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a03a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a03e:	464a      	mov	r2, r9
 800a040:	4640      	mov	r0, r8
 800a042:	4798      	blx	r3
 800a044:	6923      	ldr	r3, [r4, #16]
 800a046:	3b01      	subs	r3, #1
 800a048:	6123      	str	r3, [r4, #16]
 800a04a:	e6eb      	b.n	8009e24 <_scanf_float+0x7c>
 800a04c:	1e6b      	subs	r3, r5, #1
 800a04e:	2b06      	cmp	r3, #6
 800a050:	d824      	bhi.n	800a09c <_scanf_float+0x2f4>
 800a052:	2d02      	cmp	r5, #2
 800a054:	d836      	bhi.n	800a0c4 <_scanf_float+0x31c>
 800a056:	9b01      	ldr	r3, [sp, #4]
 800a058:	429e      	cmp	r6, r3
 800a05a:	f67f aee7 	bls.w	8009e2c <_scanf_float+0x84>
 800a05e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a062:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a066:	464a      	mov	r2, r9
 800a068:	4640      	mov	r0, r8
 800a06a:	4798      	blx	r3
 800a06c:	6923      	ldr	r3, [r4, #16]
 800a06e:	3b01      	subs	r3, #1
 800a070:	6123      	str	r3, [r4, #16]
 800a072:	e7f0      	b.n	800a056 <_scanf_float+0x2ae>
 800a074:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a078:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a07c:	464a      	mov	r2, r9
 800a07e:	4640      	mov	r0, r8
 800a080:	4798      	blx	r3
 800a082:	6923      	ldr	r3, [r4, #16]
 800a084:	3b01      	subs	r3, #1
 800a086:	6123      	str	r3, [r4, #16]
 800a088:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a08c:	fa5f fa8a 	uxtb.w	sl, sl
 800a090:	f1ba 0f02 	cmp.w	sl, #2
 800a094:	d1ee      	bne.n	800a074 <_scanf_float+0x2cc>
 800a096:	3d03      	subs	r5, #3
 800a098:	b2ed      	uxtb	r5, r5
 800a09a:	1b76      	subs	r6, r6, r5
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	05da      	lsls	r2, r3, #23
 800a0a0:	d530      	bpl.n	800a104 <_scanf_float+0x35c>
 800a0a2:	055b      	lsls	r3, r3, #21
 800a0a4:	d511      	bpl.n	800a0ca <_scanf_float+0x322>
 800a0a6:	9b01      	ldr	r3, [sp, #4]
 800a0a8:	429e      	cmp	r6, r3
 800a0aa:	f67f aebf 	bls.w	8009e2c <_scanf_float+0x84>
 800a0ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0b6:	464a      	mov	r2, r9
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	4798      	blx	r3
 800a0bc:	6923      	ldr	r3, [r4, #16]
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	6123      	str	r3, [r4, #16]
 800a0c2:	e7f0      	b.n	800a0a6 <_scanf_float+0x2fe>
 800a0c4:	46aa      	mov	sl, r5
 800a0c6:	46b3      	mov	fp, r6
 800a0c8:	e7de      	b.n	800a088 <_scanf_float+0x2e0>
 800a0ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a0ce:	6923      	ldr	r3, [r4, #16]
 800a0d0:	2965      	cmp	r1, #101	@ 0x65
 800a0d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0d6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a0da:	6123      	str	r3, [r4, #16]
 800a0dc:	d00c      	beq.n	800a0f8 <_scanf_float+0x350>
 800a0de:	2945      	cmp	r1, #69	@ 0x45
 800a0e0:	d00a      	beq.n	800a0f8 <_scanf_float+0x350>
 800a0e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0e6:	464a      	mov	r2, r9
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	4798      	blx	r3
 800a0ec:	6923      	ldr	r3, [r4, #16]
 800a0ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	1eb5      	subs	r5, r6, #2
 800a0f6:	6123      	str	r3, [r4, #16]
 800a0f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0fc:	464a      	mov	r2, r9
 800a0fe:	4640      	mov	r0, r8
 800a100:	4798      	blx	r3
 800a102:	462e      	mov	r6, r5
 800a104:	6822      	ldr	r2, [r4, #0]
 800a106:	f012 0210 	ands.w	r2, r2, #16
 800a10a:	d001      	beq.n	800a110 <_scanf_float+0x368>
 800a10c:	2000      	movs	r0, #0
 800a10e:	e68e      	b.n	8009e2e <_scanf_float+0x86>
 800a110:	7032      	strb	r2, [r6, #0]
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a11c:	d125      	bne.n	800a16a <_scanf_float+0x3c2>
 800a11e:	9b02      	ldr	r3, [sp, #8]
 800a120:	429f      	cmp	r7, r3
 800a122:	d00a      	beq.n	800a13a <_scanf_float+0x392>
 800a124:	1bda      	subs	r2, r3, r7
 800a126:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a12a:	429e      	cmp	r6, r3
 800a12c:	bf28      	it	cs
 800a12e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a132:	4922      	ldr	r1, [pc, #136]	@ (800a1bc <_scanf_float+0x414>)
 800a134:	4630      	mov	r0, r6
 800a136:	f000 f919 	bl	800a36c <siprintf>
 800a13a:	9901      	ldr	r1, [sp, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	4640      	mov	r0, r8
 800a140:	f7ff f9d6 	bl	80094f0 <_strtod_r>
 800a144:	9b03      	ldr	r3, [sp, #12]
 800a146:	6821      	ldr	r1, [r4, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f011 0f02 	tst.w	r1, #2
 800a14e:	ec57 6b10 	vmov	r6, r7, d0
 800a152:	f103 0204 	add.w	r2, r3, #4
 800a156:	d015      	beq.n	800a184 <_scanf_float+0x3dc>
 800a158:	9903      	ldr	r1, [sp, #12]
 800a15a:	600a      	str	r2, [r1, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	e9c3 6700 	strd	r6, r7, [r3]
 800a162:	68e3      	ldr	r3, [r4, #12]
 800a164:	3301      	adds	r3, #1
 800a166:	60e3      	str	r3, [r4, #12]
 800a168:	e7d0      	b.n	800a10c <_scanf_float+0x364>
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d0e4      	beq.n	800a13a <_scanf_float+0x392>
 800a170:	9905      	ldr	r1, [sp, #20]
 800a172:	230a      	movs	r3, #10
 800a174:	3101      	adds	r1, #1
 800a176:	4640      	mov	r0, r8
 800a178:	f002 f994 	bl	800c4a4 <_strtol_r>
 800a17c:	9b04      	ldr	r3, [sp, #16]
 800a17e:	9e05      	ldr	r6, [sp, #20]
 800a180:	1ac2      	subs	r2, r0, r3
 800a182:	e7d0      	b.n	800a126 <_scanf_float+0x37e>
 800a184:	f011 0f04 	tst.w	r1, #4
 800a188:	9903      	ldr	r1, [sp, #12]
 800a18a:	600a      	str	r2, [r1, #0]
 800a18c:	d1e6      	bne.n	800a15c <_scanf_float+0x3b4>
 800a18e:	681d      	ldr	r5, [r3, #0]
 800a190:	4632      	mov	r2, r6
 800a192:	463b      	mov	r3, r7
 800a194:	4630      	mov	r0, r6
 800a196:	4639      	mov	r1, r7
 800a198:	f7f6 fcc8 	bl	8000b2c <__aeabi_dcmpun>
 800a19c:	b128      	cbz	r0, 800a1aa <_scanf_float+0x402>
 800a19e:	4808      	ldr	r0, [pc, #32]	@ (800a1c0 <_scanf_float+0x418>)
 800a1a0:	f000 fa5e 	bl	800a660 <nanf>
 800a1a4:	ed85 0a00 	vstr	s0, [r5]
 800a1a8:	e7db      	b.n	800a162 <_scanf_float+0x3ba>
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	4639      	mov	r1, r7
 800a1ae:	f7f6 fd1b 	bl	8000be8 <__aeabi_d2f>
 800a1b2:	6028      	str	r0, [r5, #0]
 800a1b4:	e7d5      	b.n	800a162 <_scanf_float+0x3ba>
 800a1b6:	2700      	movs	r7, #0
 800a1b8:	e62e      	b.n	8009e18 <_scanf_float+0x70>
 800a1ba:	bf00      	nop
 800a1bc:	0800d20b 	.word	0x0800d20b
 800a1c0:	0800d1d4 	.word	0x0800d1d4

0800a1c4 <std>:
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	b510      	push	{r4, lr}
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a1ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1d2:	6083      	str	r3, [r0, #8]
 800a1d4:	8181      	strh	r1, [r0, #12]
 800a1d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a1d8:	81c2      	strh	r2, [r0, #14]
 800a1da:	6183      	str	r3, [r0, #24]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	2208      	movs	r2, #8
 800a1e0:	305c      	adds	r0, #92	@ 0x5c
 800a1e2:	f000 f928 	bl	800a436 <memset>
 800a1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a21c <std+0x58>)
 800a1e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a220 <std+0x5c>)
 800a1ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a224 <std+0x60>)
 800a1f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a228 <std+0x64>)
 800a1f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a22c <std+0x68>)
 800a1f8:	6224      	str	r4, [r4, #32]
 800a1fa:	429c      	cmp	r4, r3
 800a1fc:	d006      	beq.n	800a20c <std+0x48>
 800a1fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a202:	4294      	cmp	r4, r2
 800a204:	d002      	beq.n	800a20c <std+0x48>
 800a206:	33d0      	adds	r3, #208	@ 0xd0
 800a208:	429c      	cmp	r4, r3
 800a20a:	d105      	bne.n	800a218 <std+0x54>
 800a20c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a214:	f000 ba0a 	b.w	800a62c <__retarget_lock_init_recursive>
 800a218:	bd10      	pop	{r4, pc}
 800a21a:	bf00      	nop
 800a21c:	0800a3b1 	.word	0x0800a3b1
 800a220:	0800a3d3 	.word	0x0800a3d3
 800a224:	0800a40b 	.word	0x0800a40b
 800a228:	0800a42f 	.word	0x0800a42f
 800a22c:	20000da0 	.word	0x20000da0

0800a230 <stdio_exit_handler>:
 800a230:	4a02      	ldr	r2, [pc, #8]	@ (800a23c <stdio_exit_handler+0xc>)
 800a232:	4903      	ldr	r1, [pc, #12]	@ (800a240 <stdio_exit_handler+0x10>)
 800a234:	4803      	ldr	r0, [pc, #12]	@ (800a244 <stdio_exit_handler+0x14>)
 800a236:	f000 b87b 	b.w	800a330 <_fwalk_sglue>
 800a23a:	bf00      	nop
 800a23c:	20000188 	.word	0x20000188
 800a240:	0800cafd 	.word	0x0800cafd
 800a244:	20000304 	.word	0x20000304

0800a248 <cleanup_stdio>:
 800a248:	6841      	ldr	r1, [r0, #4]
 800a24a:	4b0c      	ldr	r3, [pc, #48]	@ (800a27c <cleanup_stdio+0x34>)
 800a24c:	4299      	cmp	r1, r3
 800a24e:	b510      	push	{r4, lr}
 800a250:	4604      	mov	r4, r0
 800a252:	d001      	beq.n	800a258 <cleanup_stdio+0x10>
 800a254:	f002 fc52 	bl	800cafc <_fflush_r>
 800a258:	68a1      	ldr	r1, [r4, #8]
 800a25a:	4b09      	ldr	r3, [pc, #36]	@ (800a280 <cleanup_stdio+0x38>)
 800a25c:	4299      	cmp	r1, r3
 800a25e:	d002      	beq.n	800a266 <cleanup_stdio+0x1e>
 800a260:	4620      	mov	r0, r4
 800a262:	f002 fc4b 	bl	800cafc <_fflush_r>
 800a266:	68e1      	ldr	r1, [r4, #12]
 800a268:	4b06      	ldr	r3, [pc, #24]	@ (800a284 <cleanup_stdio+0x3c>)
 800a26a:	4299      	cmp	r1, r3
 800a26c:	d004      	beq.n	800a278 <cleanup_stdio+0x30>
 800a26e:	4620      	mov	r0, r4
 800a270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a274:	f002 bc42 	b.w	800cafc <_fflush_r>
 800a278:	bd10      	pop	{r4, pc}
 800a27a:	bf00      	nop
 800a27c:	20000da0 	.word	0x20000da0
 800a280:	20000e08 	.word	0x20000e08
 800a284:	20000e70 	.word	0x20000e70

0800a288 <global_stdio_init.part.0>:
 800a288:	b510      	push	{r4, lr}
 800a28a:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b8 <global_stdio_init.part.0+0x30>)
 800a28c:	4c0b      	ldr	r4, [pc, #44]	@ (800a2bc <global_stdio_init.part.0+0x34>)
 800a28e:	4a0c      	ldr	r2, [pc, #48]	@ (800a2c0 <global_stdio_init.part.0+0x38>)
 800a290:	601a      	str	r2, [r3, #0]
 800a292:	4620      	mov	r0, r4
 800a294:	2200      	movs	r2, #0
 800a296:	2104      	movs	r1, #4
 800a298:	f7ff ff94 	bl	800a1c4 <std>
 800a29c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	2109      	movs	r1, #9
 800a2a4:	f7ff ff8e 	bl	800a1c4 <std>
 800a2a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2b2:	2112      	movs	r1, #18
 800a2b4:	f7ff bf86 	b.w	800a1c4 <std>
 800a2b8:	20000ed8 	.word	0x20000ed8
 800a2bc:	20000da0 	.word	0x20000da0
 800a2c0:	0800a231 	.word	0x0800a231

0800a2c4 <__sfp_lock_acquire>:
 800a2c4:	4801      	ldr	r0, [pc, #4]	@ (800a2cc <__sfp_lock_acquire+0x8>)
 800a2c6:	f000 b9b2 	b.w	800a62e <__retarget_lock_acquire_recursive>
 800a2ca:	bf00      	nop
 800a2cc:	20000ee1 	.word	0x20000ee1

0800a2d0 <__sfp_lock_release>:
 800a2d0:	4801      	ldr	r0, [pc, #4]	@ (800a2d8 <__sfp_lock_release+0x8>)
 800a2d2:	f000 b9ad 	b.w	800a630 <__retarget_lock_release_recursive>
 800a2d6:	bf00      	nop
 800a2d8:	20000ee1 	.word	0x20000ee1

0800a2dc <__sinit>:
 800a2dc:	b510      	push	{r4, lr}
 800a2de:	4604      	mov	r4, r0
 800a2e0:	f7ff fff0 	bl	800a2c4 <__sfp_lock_acquire>
 800a2e4:	6a23      	ldr	r3, [r4, #32]
 800a2e6:	b11b      	cbz	r3, 800a2f0 <__sinit+0x14>
 800a2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2ec:	f7ff bff0 	b.w	800a2d0 <__sfp_lock_release>
 800a2f0:	4b04      	ldr	r3, [pc, #16]	@ (800a304 <__sinit+0x28>)
 800a2f2:	6223      	str	r3, [r4, #32]
 800a2f4:	4b04      	ldr	r3, [pc, #16]	@ (800a308 <__sinit+0x2c>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1f5      	bne.n	800a2e8 <__sinit+0xc>
 800a2fc:	f7ff ffc4 	bl	800a288 <global_stdio_init.part.0>
 800a300:	e7f2      	b.n	800a2e8 <__sinit+0xc>
 800a302:	bf00      	nop
 800a304:	0800a249 	.word	0x0800a249
 800a308:	20000ed8 	.word	0x20000ed8

0800a30c <fiprintf>:
 800a30c:	b40e      	push	{r1, r2, r3}
 800a30e:	b503      	push	{r0, r1, lr}
 800a310:	4601      	mov	r1, r0
 800a312:	ab03      	add	r3, sp, #12
 800a314:	4805      	ldr	r0, [pc, #20]	@ (800a32c <fiprintf+0x20>)
 800a316:	f853 2b04 	ldr.w	r2, [r3], #4
 800a31a:	6800      	ldr	r0, [r0, #0]
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	f002 fa51 	bl	800c7c4 <_vfiprintf_r>
 800a322:	b002      	add	sp, #8
 800a324:	f85d eb04 	ldr.w	lr, [sp], #4
 800a328:	b003      	add	sp, #12
 800a32a:	4770      	bx	lr
 800a32c:	20000300 	.word	0x20000300

0800a330 <_fwalk_sglue>:
 800a330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a334:	4607      	mov	r7, r0
 800a336:	4688      	mov	r8, r1
 800a338:	4614      	mov	r4, r2
 800a33a:	2600      	movs	r6, #0
 800a33c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a340:	f1b9 0901 	subs.w	r9, r9, #1
 800a344:	d505      	bpl.n	800a352 <_fwalk_sglue+0x22>
 800a346:	6824      	ldr	r4, [r4, #0]
 800a348:	2c00      	cmp	r4, #0
 800a34a:	d1f7      	bne.n	800a33c <_fwalk_sglue+0xc>
 800a34c:	4630      	mov	r0, r6
 800a34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a352:	89ab      	ldrh	r3, [r5, #12]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d907      	bls.n	800a368 <_fwalk_sglue+0x38>
 800a358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a35c:	3301      	adds	r3, #1
 800a35e:	d003      	beq.n	800a368 <_fwalk_sglue+0x38>
 800a360:	4629      	mov	r1, r5
 800a362:	4638      	mov	r0, r7
 800a364:	47c0      	blx	r8
 800a366:	4306      	orrs	r6, r0
 800a368:	3568      	adds	r5, #104	@ 0x68
 800a36a:	e7e9      	b.n	800a340 <_fwalk_sglue+0x10>

0800a36c <siprintf>:
 800a36c:	b40e      	push	{r1, r2, r3}
 800a36e:	b510      	push	{r4, lr}
 800a370:	b09d      	sub	sp, #116	@ 0x74
 800a372:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a374:	9002      	str	r0, [sp, #8]
 800a376:	9006      	str	r0, [sp, #24]
 800a378:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a37c:	480a      	ldr	r0, [pc, #40]	@ (800a3a8 <siprintf+0x3c>)
 800a37e:	9107      	str	r1, [sp, #28]
 800a380:	9104      	str	r1, [sp, #16]
 800a382:	490a      	ldr	r1, [pc, #40]	@ (800a3ac <siprintf+0x40>)
 800a384:	f853 2b04 	ldr.w	r2, [r3], #4
 800a388:	9105      	str	r1, [sp, #20]
 800a38a:	2400      	movs	r4, #0
 800a38c:	a902      	add	r1, sp, #8
 800a38e:	6800      	ldr	r0, [r0, #0]
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a394:	f002 f8f0 	bl	800c578 <_svfiprintf_r>
 800a398:	9b02      	ldr	r3, [sp, #8]
 800a39a:	701c      	strb	r4, [r3, #0]
 800a39c:	b01d      	add	sp, #116	@ 0x74
 800a39e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3a2:	b003      	add	sp, #12
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	20000300 	.word	0x20000300
 800a3ac:	ffff0208 	.word	0xffff0208

0800a3b0 <__sread>:
 800a3b0:	b510      	push	{r4, lr}
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b8:	f000 f8da 	bl	800a570 <_read_r>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	bfab      	itete	ge
 800a3c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a3c2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3c4:	181b      	addge	r3, r3, r0
 800a3c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a3ca:	bfac      	ite	ge
 800a3cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a3ce:	81a3      	strhlt	r3, [r4, #12]
 800a3d0:	bd10      	pop	{r4, pc}

0800a3d2 <__swrite>:
 800a3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d6:	461f      	mov	r7, r3
 800a3d8:	898b      	ldrh	r3, [r1, #12]
 800a3da:	05db      	lsls	r3, r3, #23
 800a3dc:	4605      	mov	r5, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	4616      	mov	r6, r2
 800a3e2:	d505      	bpl.n	800a3f0 <__swrite+0x1e>
 800a3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f000 f8ae 	bl	800a54c <_lseek_r>
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	4632      	mov	r2, r6
 800a3fe:	463b      	mov	r3, r7
 800a400:	4628      	mov	r0, r5
 800a402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a406:	f000 b8d5 	b.w	800a5b4 <_write_r>

0800a40a <__sseek>:
 800a40a:	b510      	push	{r4, lr}
 800a40c:	460c      	mov	r4, r1
 800a40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a412:	f000 f89b 	bl	800a54c <_lseek_r>
 800a416:	1c43      	adds	r3, r0, #1
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	bf15      	itete	ne
 800a41c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a41e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a422:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a426:	81a3      	strheq	r3, [r4, #12]
 800a428:	bf18      	it	ne
 800a42a:	81a3      	strhne	r3, [r4, #12]
 800a42c:	bd10      	pop	{r4, pc}

0800a42e <__sclose>:
 800a42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a432:	f000 b87b 	b.w	800a52c <_close_r>

0800a436 <memset>:
 800a436:	4402      	add	r2, r0
 800a438:	4603      	mov	r3, r0
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d100      	bne.n	800a440 <memset+0xa>
 800a43e:	4770      	bx	lr
 800a440:	f803 1b01 	strb.w	r1, [r3], #1
 800a444:	e7f9      	b.n	800a43a <memset+0x4>

0800a446 <strncmp>:
 800a446:	b510      	push	{r4, lr}
 800a448:	b16a      	cbz	r2, 800a466 <strncmp+0x20>
 800a44a:	3901      	subs	r1, #1
 800a44c:	1884      	adds	r4, r0, r2
 800a44e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a452:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a456:	429a      	cmp	r2, r3
 800a458:	d103      	bne.n	800a462 <strncmp+0x1c>
 800a45a:	42a0      	cmp	r0, r4
 800a45c:	d001      	beq.n	800a462 <strncmp+0x1c>
 800a45e:	2a00      	cmp	r2, #0
 800a460:	d1f5      	bne.n	800a44e <strncmp+0x8>
 800a462:	1ad0      	subs	r0, r2, r3
 800a464:	bd10      	pop	{r4, pc}
 800a466:	4610      	mov	r0, r2
 800a468:	e7fc      	b.n	800a464 <strncmp+0x1e>
	...

0800a46c <strtok>:
 800a46c:	4b16      	ldr	r3, [pc, #88]	@ (800a4c8 <strtok+0x5c>)
 800a46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a472:	681f      	ldr	r7, [r3, #0]
 800a474:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a476:	4605      	mov	r5, r0
 800a478:	460e      	mov	r6, r1
 800a47a:	b9ec      	cbnz	r4, 800a4b8 <strtok+0x4c>
 800a47c:	2050      	movs	r0, #80	@ 0x50
 800a47e:	f7fe f97d 	bl	800877c <malloc>
 800a482:	4602      	mov	r2, r0
 800a484:	6478      	str	r0, [r7, #68]	@ 0x44
 800a486:	b920      	cbnz	r0, 800a492 <strtok+0x26>
 800a488:	4b10      	ldr	r3, [pc, #64]	@ (800a4cc <strtok+0x60>)
 800a48a:	4811      	ldr	r0, [pc, #68]	@ (800a4d0 <strtok+0x64>)
 800a48c:	215b      	movs	r1, #91	@ 0x5b
 800a48e:	f7fe f957 	bl	8008740 <__assert_func>
 800a492:	e9c0 4400 	strd	r4, r4, [r0]
 800a496:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a49a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a49e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a4a2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a4a6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a4aa:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a4ae:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a4b2:	6184      	str	r4, [r0, #24]
 800a4b4:	7704      	strb	r4, [r0, #28]
 800a4b6:	6244      	str	r4, [r0, #36]	@ 0x24
 800a4b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	4628      	mov	r0, r5
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c4:	f000 b806 	b.w	800a4d4 <__strtok_r>
 800a4c8:	20000300 	.word	0x20000300
 800a4cc:	0800d210 	.word	0x0800d210
 800a4d0:	0800d227 	.word	0x0800d227

0800a4d4 <__strtok_r>:
 800a4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	b908      	cbnz	r0, 800a4de <__strtok_r+0xa>
 800a4da:	6814      	ldr	r4, [r2, #0]
 800a4dc:	b144      	cbz	r4, 800a4f0 <__strtok_r+0x1c>
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a4e4:	460f      	mov	r7, r1
 800a4e6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a4ea:	b91e      	cbnz	r6, 800a4f4 <__strtok_r+0x20>
 800a4ec:	b965      	cbnz	r5, 800a508 <__strtok_r+0x34>
 800a4ee:	6015      	str	r5, [r2, #0]
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	e005      	b.n	800a500 <__strtok_r+0x2c>
 800a4f4:	42b5      	cmp	r5, r6
 800a4f6:	d1f6      	bne.n	800a4e6 <__strtok_r+0x12>
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1f0      	bne.n	800a4de <__strtok_r+0xa>
 800a4fc:	6014      	str	r4, [r2, #0]
 800a4fe:	7003      	strb	r3, [r0, #0]
 800a500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a502:	461c      	mov	r4, r3
 800a504:	e00c      	b.n	800a520 <__strtok_r+0x4c>
 800a506:	b91d      	cbnz	r5, 800a510 <__strtok_r+0x3c>
 800a508:	4627      	mov	r7, r4
 800a50a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a50e:	460e      	mov	r6, r1
 800a510:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a514:	42ab      	cmp	r3, r5
 800a516:	d1f6      	bne.n	800a506 <__strtok_r+0x32>
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d0f2      	beq.n	800a502 <__strtok_r+0x2e>
 800a51c:	2300      	movs	r3, #0
 800a51e:	703b      	strb	r3, [r7, #0]
 800a520:	6014      	str	r4, [r2, #0]
 800a522:	e7ed      	b.n	800a500 <__strtok_r+0x2c>

0800a524 <_localeconv_r>:
 800a524:	4800      	ldr	r0, [pc, #0]	@ (800a528 <_localeconv_r+0x4>)
 800a526:	4770      	bx	lr
 800a528:	20000284 	.word	0x20000284

0800a52c <_close_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4d06      	ldr	r5, [pc, #24]	@ (800a548 <_close_r+0x1c>)
 800a530:	2300      	movs	r3, #0
 800a532:	4604      	mov	r4, r0
 800a534:	4608      	mov	r0, r1
 800a536:	602b      	str	r3, [r5, #0]
 800a538:	f7f8 fe6a 	bl	8003210 <_close>
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	d102      	bne.n	800a546 <_close_r+0x1a>
 800a540:	682b      	ldr	r3, [r5, #0]
 800a542:	b103      	cbz	r3, 800a546 <_close_r+0x1a>
 800a544:	6023      	str	r3, [r4, #0]
 800a546:	bd38      	pop	{r3, r4, r5, pc}
 800a548:	20000edc 	.word	0x20000edc

0800a54c <_lseek_r>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	4d07      	ldr	r5, [pc, #28]	@ (800a56c <_lseek_r+0x20>)
 800a550:	4604      	mov	r4, r0
 800a552:	4608      	mov	r0, r1
 800a554:	4611      	mov	r1, r2
 800a556:	2200      	movs	r2, #0
 800a558:	602a      	str	r2, [r5, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	f7f8 fe7f 	bl	800325e <_lseek>
 800a560:	1c43      	adds	r3, r0, #1
 800a562:	d102      	bne.n	800a56a <_lseek_r+0x1e>
 800a564:	682b      	ldr	r3, [r5, #0]
 800a566:	b103      	cbz	r3, 800a56a <_lseek_r+0x1e>
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	bd38      	pop	{r3, r4, r5, pc}
 800a56c:	20000edc 	.word	0x20000edc

0800a570 <_read_r>:
 800a570:	b538      	push	{r3, r4, r5, lr}
 800a572:	4d07      	ldr	r5, [pc, #28]	@ (800a590 <_read_r+0x20>)
 800a574:	4604      	mov	r4, r0
 800a576:	4608      	mov	r0, r1
 800a578:	4611      	mov	r1, r2
 800a57a:	2200      	movs	r2, #0
 800a57c:	602a      	str	r2, [r5, #0]
 800a57e:	461a      	mov	r2, r3
 800a580:	f7f8 fe29 	bl	80031d6 <_read>
 800a584:	1c43      	adds	r3, r0, #1
 800a586:	d102      	bne.n	800a58e <_read_r+0x1e>
 800a588:	682b      	ldr	r3, [r5, #0]
 800a58a:	b103      	cbz	r3, 800a58e <_read_r+0x1e>
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	bd38      	pop	{r3, r4, r5, pc}
 800a590:	20000edc 	.word	0x20000edc

0800a594 <_sbrk_r>:
 800a594:	b538      	push	{r3, r4, r5, lr}
 800a596:	4d06      	ldr	r5, [pc, #24]	@ (800a5b0 <_sbrk_r+0x1c>)
 800a598:	2300      	movs	r3, #0
 800a59a:	4604      	mov	r4, r0
 800a59c:	4608      	mov	r0, r1
 800a59e:	602b      	str	r3, [r5, #0]
 800a5a0:	f7f8 fe6a 	bl	8003278 <_sbrk>
 800a5a4:	1c43      	adds	r3, r0, #1
 800a5a6:	d102      	bne.n	800a5ae <_sbrk_r+0x1a>
 800a5a8:	682b      	ldr	r3, [r5, #0]
 800a5aa:	b103      	cbz	r3, 800a5ae <_sbrk_r+0x1a>
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	bd38      	pop	{r3, r4, r5, pc}
 800a5b0:	20000edc 	.word	0x20000edc

0800a5b4 <_write_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4d07      	ldr	r5, [pc, #28]	@ (800a5d4 <_write_r+0x20>)
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	4608      	mov	r0, r1
 800a5bc:	4611      	mov	r1, r2
 800a5be:	2200      	movs	r2, #0
 800a5c0:	602a      	str	r2, [r5, #0]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	f7f8 fb8e 	bl	8002ce4 <_write>
 800a5c8:	1c43      	adds	r3, r0, #1
 800a5ca:	d102      	bne.n	800a5d2 <_write_r+0x1e>
 800a5cc:	682b      	ldr	r3, [r5, #0]
 800a5ce:	b103      	cbz	r3, 800a5d2 <_write_r+0x1e>
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	bd38      	pop	{r3, r4, r5, pc}
 800a5d4:	20000edc 	.word	0x20000edc

0800a5d8 <__errno>:
 800a5d8:	4b01      	ldr	r3, [pc, #4]	@ (800a5e0 <__errno+0x8>)
 800a5da:	6818      	ldr	r0, [r3, #0]
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	20000300 	.word	0x20000300

0800a5e4 <__libc_init_array>:
 800a5e4:	b570      	push	{r4, r5, r6, lr}
 800a5e6:	4d0d      	ldr	r5, [pc, #52]	@ (800a61c <__libc_init_array+0x38>)
 800a5e8:	4c0d      	ldr	r4, [pc, #52]	@ (800a620 <__libc_init_array+0x3c>)
 800a5ea:	1b64      	subs	r4, r4, r5
 800a5ec:	10a4      	asrs	r4, r4, #2
 800a5ee:	2600      	movs	r6, #0
 800a5f0:	42a6      	cmp	r6, r4
 800a5f2:	d109      	bne.n	800a608 <__libc_init_array+0x24>
 800a5f4:	4d0b      	ldr	r5, [pc, #44]	@ (800a624 <__libc_init_array+0x40>)
 800a5f6:	4c0c      	ldr	r4, [pc, #48]	@ (800a628 <__libc_init_array+0x44>)
 800a5f8:	f002 fc68 	bl	800cecc <_init>
 800a5fc:	1b64      	subs	r4, r4, r5
 800a5fe:	10a4      	asrs	r4, r4, #2
 800a600:	2600      	movs	r6, #0
 800a602:	42a6      	cmp	r6, r4
 800a604:	d105      	bne.n	800a612 <__libc_init_array+0x2e>
 800a606:	bd70      	pop	{r4, r5, r6, pc}
 800a608:	f855 3b04 	ldr.w	r3, [r5], #4
 800a60c:	4798      	blx	r3
 800a60e:	3601      	adds	r6, #1
 800a610:	e7ee      	b.n	800a5f0 <__libc_init_array+0xc>
 800a612:	f855 3b04 	ldr.w	r3, [r5], #4
 800a616:	4798      	blx	r3
 800a618:	3601      	adds	r6, #1
 800a61a:	e7f2      	b.n	800a602 <__libc_init_array+0x1e>
 800a61c:	0800d62c 	.word	0x0800d62c
 800a620:	0800d62c 	.word	0x0800d62c
 800a624:	0800d62c 	.word	0x0800d62c
 800a628:	0800d630 	.word	0x0800d630

0800a62c <__retarget_lock_init_recursive>:
 800a62c:	4770      	bx	lr

0800a62e <__retarget_lock_acquire_recursive>:
 800a62e:	4770      	bx	lr

0800a630 <__retarget_lock_release_recursive>:
 800a630:	4770      	bx	lr

0800a632 <memcpy>:
 800a632:	440a      	add	r2, r1
 800a634:	4291      	cmp	r1, r2
 800a636:	f100 33ff 	add.w	r3, r0, #4294967295
 800a63a:	d100      	bne.n	800a63e <memcpy+0xc>
 800a63c:	4770      	bx	lr
 800a63e:	b510      	push	{r4, lr}
 800a640:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a644:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a648:	4291      	cmp	r1, r2
 800a64a:	d1f9      	bne.n	800a640 <memcpy+0xe>
 800a64c:	bd10      	pop	{r4, pc}
	...

0800a650 <nan>:
 800a650:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a658 <nan+0x8>
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	00000000 	.word	0x00000000
 800a65c:	7ff80000 	.word	0x7ff80000

0800a660 <nanf>:
 800a660:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a668 <nanf+0x8>
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	7fc00000 	.word	0x7fc00000

0800a66c <abort>:
 800a66c:	b508      	push	{r3, lr}
 800a66e:	2006      	movs	r0, #6
 800a670:	f002 fb42 	bl	800ccf8 <raise>
 800a674:	2001      	movs	r0, #1
 800a676:	f7f8 fda3 	bl	80031c0 <_exit>

0800a67a <quorem>:
 800a67a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67e:	6903      	ldr	r3, [r0, #16]
 800a680:	690c      	ldr	r4, [r1, #16]
 800a682:	42a3      	cmp	r3, r4
 800a684:	4607      	mov	r7, r0
 800a686:	db7e      	blt.n	800a786 <quorem+0x10c>
 800a688:	3c01      	subs	r4, #1
 800a68a:	f101 0814 	add.w	r8, r1, #20
 800a68e:	00a3      	lsls	r3, r4, #2
 800a690:	f100 0514 	add.w	r5, r0, #20
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a69a:	9301      	str	r3, [sp, #4]
 800a69c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6b0:	d32e      	bcc.n	800a710 <quorem+0x96>
 800a6b2:	f04f 0a00 	mov.w	sl, #0
 800a6b6:	46c4      	mov	ip, r8
 800a6b8:	46ae      	mov	lr, r5
 800a6ba:	46d3      	mov	fp, sl
 800a6bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a6c0:	b298      	uxth	r0, r3
 800a6c2:	fb06 a000 	mla	r0, r6, r0, sl
 800a6c6:	0c02      	lsrs	r2, r0, #16
 800a6c8:	0c1b      	lsrs	r3, r3, #16
 800a6ca:	fb06 2303 	mla	r3, r6, r3, r2
 800a6ce:	f8de 2000 	ldr.w	r2, [lr]
 800a6d2:	b280      	uxth	r0, r0
 800a6d4:	b292      	uxth	r2, r2
 800a6d6:	1a12      	subs	r2, r2, r0
 800a6d8:	445a      	add	r2, fp
 800a6da:	f8de 0000 	ldr.w	r0, [lr]
 800a6de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a6e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a6ec:	b292      	uxth	r2, r2
 800a6ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a6f2:	45e1      	cmp	r9, ip
 800a6f4:	f84e 2b04 	str.w	r2, [lr], #4
 800a6f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a6fc:	d2de      	bcs.n	800a6bc <quorem+0x42>
 800a6fe:	9b00      	ldr	r3, [sp, #0]
 800a700:	58eb      	ldr	r3, [r5, r3]
 800a702:	b92b      	cbnz	r3, 800a710 <quorem+0x96>
 800a704:	9b01      	ldr	r3, [sp, #4]
 800a706:	3b04      	subs	r3, #4
 800a708:	429d      	cmp	r5, r3
 800a70a:	461a      	mov	r2, r3
 800a70c:	d32f      	bcc.n	800a76e <quorem+0xf4>
 800a70e:	613c      	str	r4, [r7, #16]
 800a710:	4638      	mov	r0, r7
 800a712:	f001 fc5f 	bl	800bfd4 <__mcmp>
 800a716:	2800      	cmp	r0, #0
 800a718:	db25      	blt.n	800a766 <quorem+0xec>
 800a71a:	4629      	mov	r1, r5
 800a71c:	2000      	movs	r0, #0
 800a71e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a722:	f8d1 c000 	ldr.w	ip, [r1]
 800a726:	fa1f fe82 	uxth.w	lr, r2
 800a72a:	fa1f f38c 	uxth.w	r3, ip
 800a72e:	eba3 030e 	sub.w	r3, r3, lr
 800a732:	4403      	add	r3, r0
 800a734:	0c12      	lsrs	r2, r2, #16
 800a736:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a73a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a73e:	b29b      	uxth	r3, r3
 800a740:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a744:	45c1      	cmp	r9, r8
 800a746:	f841 3b04 	str.w	r3, [r1], #4
 800a74a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a74e:	d2e6      	bcs.n	800a71e <quorem+0xa4>
 800a750:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a754:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a758:	b922      	cbnz	r2, 800a764 <quorem+0xea>
 800a75a:	3b04      	subs	r3, #4
 800a75c:	429d      	cmp	r5, r3
 800a75e:	461a      	mov	r2, r3
 800a760:	d30b      	bcc.n	800a77a <quorem+0x100>
 800a762:	613c      	str	r4, [r7, #16]
 800a764:	3601      	adds	r6, #1
 800a766:	4630      	mov	r0, r6
 800a768:	b003      	add	sp, #12
 800a76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76e:	6812      	ldr	r2, [r2, #0]
 800a770:	3b04      	subs	r3, #4
 800a772:	2a00      	cmp	r2, #0
 800a774:	d1cb      	bne.n	800a70e <quorem+0x94>
 800a776:	3c01      	subs	r4, #1
 800a778:	e7c6      	b.n	800a708 <quorem+0x8e>
 800a77a:	6812      	ldr	r2, [r2, #0]
 800a77c:	3b04      	subs	r3, #4
 800a77e:	2a00      	cmp	r2, #0
 800a780:	d1ef      	bne.n	800a762 <quorem+0xe8>
 800a782:	3c01      	subs	r4, #1
 800a784:	e7ea      	b.n	800a75c <quorem+0xe2>
 800a786:	2000      	movs	r0, #0
 800a788:	e7ee      	b.n	800a768 <quorem+0xee>
 800a78a:	0000      	movs	r0, r0
 800a78c:	0000      	movs	r0, r0
	...

0800a790 <_dtoa_r>:
 800a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	69c7      	ldr	r7, [r0, #28]
 800a796:	b097      	sub	sp, #92	@ 0x5c
 800a798:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a79c:	ec55 4b10 	vmov	r4, r5, d0
 800a7a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a7a2:	9107      	str	r1, [sp, #28]
 800a7a4:	4681      	mov	r9, r0
 800a7a6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a7a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a7aa:	b97f      	cbnz	r7, 800a7cc <_dtoa_r+0x3c>
 800a7ac:	2010      	movs	r0, #16
 800a7ae:	f7fd ffe5 	bl	800877c <malloc>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	f8c9 001c 	str.w	r0, [r9, #28]
 800a7b8:	b920      	cbnz	r0, 800a7c4 <_dtoa_r+0x34>
 800a7ba:	4ba9      	ldr	r3, [pc, #676]	@ (800aa60 <_dtoa_r+0x2d0>)
 800a7bc:	21ef      	movs	r1, #239	@ 0xef
 800a7be:	48a9      	ldr	r0, [pc, #676]	@ (800aa64 <_dtoa_r+0x2d4>)
 800a7c0:	f7fd ffbe 	bl	8008740 <__assert_func>
 800a7c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a7c8:	6007      	str	r7, [r0, #0]
 800a7ca:	60c7      	str	r7, [r0, #12]
 800a7cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a7d0:	6819      	ldr	r1, [r3, #0]
 800a7d2:	b159      	cbz	r1, 800a7ec <_dtoa_r+0x5c>
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	604a      	str	r2, [r1, #4]
 800a7d8:	2301      	movs	r3, #1
 800a7da:	4093      	lsls	r3, r2
 800a7dc:	608b      	str	r3, [r1, #8]
 800a7de:	4648      	mov	r0, r9
 800a7e0:	f001 f97c 	bl	800badc <_Bfree>
 800a7e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	1e2b      	subs	r3, r5, #0
 800a7ee:	bfb9      	ittee	lt
 800a7f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a7f4:	9305      	strlt	r3, [sp, #20]
 800a7f6:	2300      	movge	r3, #0
 800a7f8:	6033      	strge	r3, [r6, #0]
 800a7fa:	9f05      	ldr	r7, [sp, #20]
 800a7fc:	4b9a      	ldr	r3, [pc, #616]	@ (800aa68 <_dtoa_r+0x2d8>)
 800a7fe:	bfbc      	itt	lt
 800a800:	2201      	movlt	r2, #1
 800a802:	6032      	strlt	r2, [r6, #0]
 800a804:	43bb      	bics	r3, r7
 800a806:	d112      	bne.n	800a82e <_dtoa_r+0x9e>
 800a808:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a80a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a80e:	6013      	str	r3, [r2, #0]
 800a810:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a814:	4323      	orrs	r3, r4
 800a816:	f000 855a 	beq.w	800b2ce <_dtoa_r+0xb3e>
 800a81a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a81c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800aa7c <_dtoa_r+0x2ec>
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 855c 	beq.w	800b2de <_dtoa_r+0xb4e>
 800a826:	f10a 0303 	add.w	r3, sl, #3
 800a82a:	f000 bd56 	b.w	800b2da <_dtoa_r+0xb4a>
 800a82e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a832:	2200      	movs	r2, #0
 800a834:	ec51 0b17 	vmov	r0, r1, d7
 800a838:	2300      	movs	r3, #0
 800a83a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a83e:	f7f6 f943 	bl	8000ac8 <__aeabi_dcmpeq>
 800a842:	4680      	mov	r8, r0
 800a844:	b158      	cbz	r0, 800a85e <_dtoa_r+0xce>
 800a846:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a848:	2301      	movs	r3, #1
 800a84a:	6013      	str	r3, [r2, #0]
 800a84c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a84e:	b113      	cbz	r3, 800a856 <_dtoa_r+0xc6>
 800a850:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a852:	4b86      	ldr	r3, [pc, #536]	@ (800aa6c <_dtoa_r+0x2dc>)
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800aa80 <_dtoa_r+0x2f0>
 800a85a:	f000 bd40 	b.w	800b2de <_dtoa_r+0xb4e>
 800a85e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a862:	aa14      	add	r2, sp, #80	@ 0x50
 800a864:	a915      	add	r1, sp, #84	@ 0x54
 800a866:	4648      	mov	r0, r9
 800a868:	f001 fcd4 	bl	800c214 <__d2b>
 800a86c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a870:	9002      	str	r0, [sp, #8]
 800a872:	2e00      	cmp	r6, #0
 800a874:	d078      	beq.n	800a968 <_dtoa_r+0x1d8>
 800a876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a878:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a87c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a880:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a884:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a888:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a88c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a890:	4619      	mov	r1, r3
 800a892:	2200      	movs	r2, #0
 800a894:	4b76      	ldr	r3, [pc, #472]	@ (800aa70 <_dtoa_r+0x2e0>)
 800a896:	f7f5 fcf7 	bl	8000288 <__aeabi_dsub>
 800a89a:	a36b      	add	r3, pc, #428	@ (adr r3, 800aa48 <_dtoa_r+0x2b8>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f7f5 feaa 	bl	80005f8 <__aeabi_dmul>
 800a8a4:	a36a      	add	r3, pc, #424	@ (adr r3, 800aa50 <_dtoa_r+0x2c0>)
 800a8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8aa:	f7f5 fcef 	bl	800028c <__adddf3>
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	460d      	mov	r5, r1
 800a8b4:	f7f5 fe36 	bl	8000524 <__aeabi_i2d>
 800a8b8:	a367      	add	r3, pc, #412	@ (adr r3, 800aa58 <_dtoa_r+0x2c8>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f7f5 fe9b 	bl	80005f8 <__aeabi_dmul>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	4629      	mov	r1, r5
 800a8ca:	f7f5 fcdf 	bl	800028c <__adddf3>
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	460d      	mov	r5, r1
 800a8d2:	f7f6 f941 	bl	8000b58 <__aeabi_d2iz>
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	4607      	mov	r7, r0
 800a8da:	2300      	movs	r3, #0
 800a8dc:	4620      	mov	r0, r4
 800a8de:	4629      	mov	r1, r5
 800a8e0:	f7f6 f8fc 	bl	8000adc <__aeabi_dcmplt>
 800a8e4:	b140      	cbz	r0, 800a8f8 <_dtoa_r+0x168>
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	f7f5 fe1c 	bl	8000524 <__aeabi_i2d>
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	462b      	mov	r3, r5
 800a8f0:	f7f6 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8f4:	b900      	cbnz	r0, 800a8f8 <_dtoa_r+0x168>
 800a8f6:	3f01      	subs	r7, #1
 800a8f8:	2f16      	cmp	r7, #22
 800a8fa:	d852      	bhi.n	800a9a2 <_dtoa_r+0x212>
 800a8fc:	4b5d      	ldr	r3, [pc, #372]	@ (800aa74 <_dtoa_r+0x2e4>)
 800a8fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a906:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a90a:	f7f6 f8e7 	bl	8000adc <__aeabi_dcmplt>
 800a90e:	2800      	cmp	r0, #0
 800a910:	d049      	beq.n	800a9a6 <_dtoa_r+0x216>
 800a912:	3f01      	subs	r7, #1
 800a914:	2300      	movs	r3, #0
 800a916:	9310      	str	r3, [sp, #64]	@ 0x40
 800a918:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a91a:	1b9b      	subs	r3, r3, r6
 800a91c:	1e5a      	subs	r2, r3, #1
 800a91e:	bf45      	ittet	mi
 800a920:	f1c3 0301 	rsbmi	r3, r3, #1
 800a924:	9300      	strmi	r3, [sp, #0]
 800a926:	2300      	movpl	r3, #0
 800a928:	2300      	movmi	r3, #0
 800a92a:	9206      	str	r2, [sp, #24]
 800a92c:	bf54      	ite	pl
 800a92e:	9300      	strpl	r3, [sp, #0]
 800a930:	9306      	strmi	r3, [sp, #24]
 800a932:	2f00      	cmp	r7, #0
 800a934:	db39      	blt.n	800a9aa <_dtoa_r+0x21a>
 800a936:	9b06      	ldr	r3, [sp, #24]
 800a938:	970d      	str	r7, [sp, #52]	@ 0x34
 800a93a:	443b      	add	r3, r7
 800a93c:	9306      	str	r3, [sp, #24]
 800a93e:	2300      	movs	r3, #0
 800a940:	9308      	str	r3, [sp, #32]
 800a942:	9b07      	ldr	r3, [sp, #28]
 800a944:	2b09      	cmp	r3, #9
 800a946:	d863      	bhi.n	800aa10 <_dtoa_r+0x280>
 800a948:	2b05      	cmp	r3, #5
 800a94a:	bfc4      	itt	gt
 800a94c:	3b04      	subgt	r3, #4
 800a94e:	9307      	strgt	r3, [sp, #28]
 800a950:	9b07      	ldr	r3, [sp, #28]
 800a952:	f1a3 0302 	sub.w	r3, r3, #2
 800a956:	bfcc      	ite	gt
 800a958:	2400      	movgt	r4, #0
 800a95a:	2401      	movle	r4, #1
 800a95c:	2b03      	cmp	r3, #3
 800a95e:	d863      	bhi.n	800aa28 <_dtoa_r+0x298>
 800a960:	e8df f003 	tbb	[pc, r3]
 800a964:	2b375452 	.word	0x2b375452
 800a968:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a96c:	441e      	add	r6, r3
 800a96e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a972:	2b20      	cmp	r3, #32
 800a974:	bfc1      	itttt	gt
 800a976:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a97a:	409f      	lslgt	r7, r3
 800a97c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a980:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a984:	bfd6      	itet	le
 800a986:	f1c3 0320 	rsble	r3, r3, #32
 800a98a:	ea47 0003 	orrgt.w	r0, r7, r3
 800a98e:	fa04 f003 	lslle.w	r0, r4, r3
 800a992:	f7f5 fdb7 	bl	8000504 <__aeabi_ui2d>
 800a996:	2201      	movs	r2, #1
 800a998:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a99c:	3e01      	subs	r6, #1
 800a99e:	9212      	str	r2, [sp, #72]	@ 0x48
 800a9a0:	e776      	b.n	800a890 <_dtoa_r+0x100>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e7b7      	b.n	800a916 <_dtoa_r+0x186>
 800a9a6:	9010      	str	r0, [sp, #64]	@ 0x40
 800a9a8:	e7b6      	b.n	800a918 <_dtoa_r+0x188>
 800a9aa:	9b00      	ldr	r3, [sp, #0]
 800a9ac:	1bdb      	subs	r3, r3, r7
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	427b      	negs	r3, r7
 800a9b2:	9308      	str	r3, [sp, #32]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a9b8:	e7c3      	b.n	800a942 <_dtoa_r+0x1b2>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9c0:	eb07 0b03 	add.w	fp, r7, r3
 800a9c4:	f10b 0301 	add.w	r3, fp, #1
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	9303      	str	r3, [sp, #12]
 800a9cc:	bfb8      	it	lt
 800a9ce:	2301      	movlt	r3, #1
 800a9d0:	e006      	b.n	800a9e0 <_dtoa_r+0x250>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	dd28      	ble.n	800aa2e <_dtoa_r+0x29e>
 800a9dc:	469b      	mov	fp, r3
 800a9de:	9303      	str	r3, [sp, #12]
 800a9e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	2204      	movs	r2, #4
 800a9e8:	f102 0514 	add.w	r5, r2, #20
 800a9ec:	429d      	cmp	r5, r3
 800a9ee:	d926      	bls.n	800aa3e <_dtoa_r+0x2ae>
 800a9f0:	6041      	str	r1, [r0, #4]
 800a9f2:	4648      	mov	r0, r9
 800a9f4:	f001 f832 	bl	800ba5c <_Balloc>
 800a9f8:	4682      	mov	sl, r0
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d142      	bne.n	800aa84 <_dtoa_r+0x2f4>
 800a9fe:	4b1e      	ldr	r3, [pc, #120]	@ (800aa78 <_dtoa_r+0x2e8>)
 800aa00:	4602      	mov	r2, r0
 800aa02:	f240 11af 	movw	r1, #431	@ 0x1af
 800aa06:	e6da      	b.n	800a7be <_dtoa_r+0x2e>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e7e3      	b.n	800a9d4 <_dtoa_r+0x244>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	e7d5      	b.n	800a9bc <_dtoa_r+0x22c>
 800aa10:	2401      	movs	r4, #1
 800aa12:	2300      	movs	r3, #0
 800aa14:	9307      	str	r3, [sp, #28]
 800aa16:	9409      	str	r4, [sp, #36]	@ 0x24
 800aa18:	f04f 3bff 	mov.w	fp, #4294967295
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f8cd b00c 	str.w	fp, [sp, #12]
 800aa22:	2312      	movs	r3, #18
 800aa24:	920c      	str	r2, [sp, #48]	@ 0x30
 800aa26:	e7db      	b.n	800a9e0 <_dtoa_r+0x250>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa2c:	e7f4      	b.n	800aa18 <_dtoa_r+0x288>
 800aa2e:	f04f 0b01 	mov.w	fp, #1
 800aa32:	f8cd b00c 	str.w	fp, [sp, #12]
 800aa36:	465b      	mov	r3, fp
 800aa38:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800aa3c:	e7d0      	b.n	800a9e0 <_dtoa_r+0x250>
 800aa3e:	3101      	adds	r1, #1
 800aa40:	0052      	lsls	r2, r2, #1
 800aa42:	e7d1      	b.n	800a9e8 <_dtoa_r+0x258>
 800aa44:	f3af 8000 	nop.w
 800aa48:	636f4361 	.word	0x636f4361
 800aa4c:	3fd287a7 	.word	0x3fd287a7
 800aa50:	8b60c8b3 	.word	0x8b60c8b3
 800aa54:	3fc68a28 	.word	0x3fc68a28
 800aa58:	509f79fb 	.word	0x509f79fb
 800aa5c:	3fd34413 	.word	0x3fd34413
 800aa60:	0800d210 	.word	0x0800d210
 800aa64:	0800d296 	.word	0x0800d296
 800aa68:	7ff00000 	.word	0x7ff00000
 800aa6c:	0800d1e8 	.word	0x0800d1e8
 800aa70:	3ff80000 	.word	0x3ff80000
 800aa74:	0800d458 	.word	0x0800d458
 800aa78:	0800d2ee 	.word	0x0800d2ee
 800aa7c:	0800d292 	.word	0x0800d292
 800aa80:	0800d1e7 	.word	0x0800d1e7
 800aa84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa88:	6018      	str	r0, [r3, #0]
 800aa8a:	9b03      	ldr	r3, [sp, #12]
 800aa8c:	2b0e      	cmp	r3, #14
 800aa8e:	f200 80a1 	bhi.w	800abd4 <_dtoa_r+0x444>
 800aa92:	2c00      	cmp	r4, #0
 800aa94:	f000 809e 	beq.w	800abd4 <_dtoa_r+0x444>
 800aa98:	2f00      	cmp	r7, #0
 800aa9a:	dd33      	ble.n	800ab04 <_dtoa_r+0x374>
 800aa9c:	4b9c      	ldr	r3, [pc, #624]	@ (800ad10 <_dtoa_r+0x580>)
 800aa9e:	f007 020f 	and.w	r2, r7, #15
 800aaa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaa6:	ed93 7b00 	vldr	d7, [r3]
 800aaaa:	05f8      	lsls	r0, r7, #23
 800aaac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800aab0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aab4:	d516      	bpl.n	800aae4 <_dtoa_r+0x354>
 800aab6:	4b97      	ldr	r3, [pc, #604]	@ (800ad14 <_dtoa_r+0x584>)
 800aab8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aabc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aac0:	f7f5 fec4 	bl	800084c <__aeabi_ddiv>
 800aac4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aac8:	f004 040f 	and.w	r4, r4, #15
 800aacc:	2603      	movs	r6, #3
 800aace:	4d91      	ldr	r5, [pc, #580]	@ (800ad14 <_dtoa_r+0x584>)
 800aad0:	b954      	cbnz	r4, 800aae8 <_dtoa_r+0x358>
 800aad2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aad6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aada:	f7f5 feb7 	bl	800084c <__aeabi_ddiv>
 800aade:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aae2:	e028      	b.n	800ab36 <_dtoa_r+0x3a6>
 800aae4:	2602      	movs	r6, #2
 800aae6:	e7f2      	b.n	800aace <_dtoa_r+0x33e>
 800aae8:	07e1      	lsls	r1, r4, #31
 800aaea:	d508      	bpl.n	800aafe <_dtoa_r+0x36e>
 800aaec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aaf0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aaf4:	f7f5 fd80 	bl	80005f8 <__aeabi_dmul>
 800aaf8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aafc:	3601      	adds	r6, #1
 800aafe:	1064      	asrs	r4, r4, #1
 800ab00:	3508      	adds	r5, #8
 800ab02:	e7e5      	b.n	800aad0 <_dtoa_r+0x340>
 800ab04:	f000 80af 	beq.w	800ac66 <_dtoa_r+0x4d6>
 800ab08:	427c      	negs	r4, r7
 800ab0a:	4b81      	ldr	r3, [pc, #516]	@ (800ad10 <_dtoa_r+0x580>)
 800ab0c:	4d81      	ldr	r5, [pc, #516]	@ (800ad14 <_dtoa_r+0x584>)
 800ab0e:	f004 020f 	and.w	r2, r4, #15
 800ab12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab1e:	f7f5 fd6b 	bl	80005f8 <__aeabi_dmul>
 800ab22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab26:	1124      	asrs	r4, r4, #4
 800ab28:	2300      	movs	r3, #0
 800ab2a:	2602      	movs	r6, #2
 800ab2c:	2c00      	cmp	r4, #0
 800ab2e:	f040 808f 	bne.w	800ac50 <_dtoa_r+0x4c0>
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1d3      	bne.n	800aade <_dtoa_r+0x34e>
 800ab36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ab38:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 8094 	beq.w	800ac6a <_dtoa_r+0x4da>
 800ab42:	4b75      	ldr	r3, [pc, #468]	@ (800ad18 <_dtoa_r+0x588>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	4620      	mov	r0, r4
 800ab48:	4629      	mov	r1, r5
 800ab4a:	f7f5 ffc7 	bl	8000adc <__aeabi_dcmplt>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	f000 808b 	beq.w	800ac6a <_dtoa_r+0x4da>
 800ab54:	9b03      	ldr	r3, [sp, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f000 8087 	beq.w	800ac6a <_dtoa_r+0x4da>
 800ab5c:	f1bb 0f00 	cmp.w	fp, #0
 800ab60:	dd34      	ble.n	800abcc <_dtoa_r+0x43c>
 800ab62:	4620      	mov	r0, r4
 800ab64:	4b6d      	ldr	r3, [pc, #436]	@ (800ad1c <_dtoa_r+0x58c>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	4629      	mov	r1, r5
 800ab6a:	f7f5 fd45 	bl	80005f8 <__aeabi_dmul>
 800ab6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab72:	f107 38ff 	add.w	r8, r7, #4294967295
 800ab76:	3601      	adds	r6, #1
 800ab78:	465c      	mov	r4, fp
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f7f5 fcd2 	bl	8000524 <__aeabi_i2d>
 800ab80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab84:	f7f5 fd38 	bl	80005f8 <__aeabi_dmul>
 800ab88:	4b65      	ldr	r3, [pc, #404]	@ (800ad20 <_dtoa_r+0x590>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f7f5 fb7e 	bl	800028c <__adddf3>
 800ab90:	4605      	mov	r5, r0
 800ab92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ab96:	2c00      	cmp	r4, #0
 800ab98:	d16a      	bne.n	800ac70 <_dtoa_r+0x4e0>
 800ab9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab9e:	4b61      	ldr	r3, [pc, #388]	@ (800ad24 <_dtoa_r+0x594>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	f7f5 fb71 	bl	8000288 <__aeabi_dsub>
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abae:	462a      	mov	r2, r5
 800abb0:	4633      	mov	r3, r6
 800abb2:	f7f5 ffb1 	bl	8000b18 <__aeabi_dcmpgt>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	f040 8298 	bne.w	800b0ec <_dtoa_r+0x95c>
 800abbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abc0:	462a      	mov	r2, r5
 800abc2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800abc6:	f7f5 ff89 	bl	8000adc <__aeabi_dcmplt>
 800abca:	bb38      	cbnz	r0, 800ac1c <_dtoa_r+0x48c>
 800abcc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800abd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800abd4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f2c0 8157 	blt.w	800ae8a <_dtoa_r+0x6fa>
 800abdc:	2f0e      	cmp	r7, #14
 800abde:	f300 8154 	bgt.w	800ae8a <_dtoa_r+0x6fa>
 800abe2:	4b4b      	ldr	r3, [pc, #300]	@ (800ad10 <_dtoa_r+0x580>)
 800abe4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800abe8:	ed93 7b00 	vldr	d7, [r3]
 800abec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abee:	2b00      	cmp	r3, #0
 800abf0:	ed8d 7b00 	vstr	d7, [sp]
 800abf4:	f280 80e5 	bge.w	800adc2 <_dtoa_r+0x632>
 800abf8:	9b03      	ldr	r3, [sp, #12]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f300 80e1 	bgt.w	800adc2 <_dtoa_r+0x632>
 800ac00:	d10c      	bne.n	800ac1c <_dtoa_r+0x48c>
 800ac02:	4b48      	ldr	r3, [pc, #288]	@ (800ad24 <_dtoa_r+0x594>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	ec51 0b17 	vmov	r0, r1, d7
 800ac0a:	f7f5 fcf5 	bl	80005f8 <__aeabi_dmul>
 800ac0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac12:	f7f5 ff77 	bl	8000b04 <__aeabi_dcmpge>
 800ac16:	2800      	cmp	r0, #0
 800ac18:	f000 8266 	beq.w	800b0e8 <_dtoa_r+0x958>
 800ac1c:	2400      	movs	r4, #0
 800ac1e:	4625      	mov	r5, r4
 800ac20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac22:	4656      	mov	r6, sl
 800ac24:	ea6f 0803 	mvn.w	r8, r3
 800ac28:	2700      	movs	r7, #0
 800ac2a:	4621      	mov	r1, r4
 800ac2c:	4648      	mov	r0, r9
 800ac2e:	f000 ff55 	bl	800badc <_Bfree>
 800ac32:	2d00      	cmp	r5, #0
 800ac34:	f000 80bd 	beq.w	800adb2 <_dtoa_r+0x622>
 800ac38:	b12f      	cbz	r7, 800ac46 <_dtoa_r+0x4b6>
 800ac3a:	42af      	cmp	r7, r5
 800ac3c:	d003      	beq.n	800ac46 <_dtoa_r+0x4b6>
 800ac3e:	4639      	mov	r1, r7
 800ac40:	4648      	mov	r0, r9
 800ac42:	f000 ff4b 	bl	800badc <_Bfree>
 800ac46:	4629      	mov	r1, r5
 800ac48:	4648      	mov	r0, r9
 800ac4a:	f000 ff47 	bl	800badc <_Bfree>
 800ac4e:	e0b0      	b.n	800adb2 <_dtoa_r+0x622>
 800ac50:	07e2      	lsls	r2, r4, #31
 800ac52:	d505      	bpl.n	800ac60 <_dtoa_r+0x4d0>
 800ac54:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac58:	f7f5 fcce 	bl	80005f8 <__aeabi_dmul>
 800ac5c:	3601      	adds	r6, #1
 800ac5e:	2301      	movs	r3, #1
 800ac60:	1064      	asrs	r4, r4, #1
 800ac62:	3508      	adds	r5, #8
 800ac64:	e762      	b.n	800ab2c <_dtoa_r+0x39c>
 800ac66:	2602      	movs	r6, #2
 800ac68:	e765      	b.n	800ab36 <_dtoa_r+0x3a6>
 800ac6a:	9c03      	ldr	r4, [sp, #12]
 800ac6c:	46b8      	mov	r8, r7
 800ac6e:	e784      	b.n	800ab7a <_dtoa_r+0x3ea>
 800ac70:	4b27      	ldr	r3, [pc, #156]	@ (800ad10 <_dtoa_r+0x580>)
 800ac72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac7c:	4454      	add	r4, sl
 800ac7e:	2900      	cmp	r1, #0
 800ac80:	d054      	beq.n	800ad2c <_dtoa_r+0x59c>
 800ac82:	4929      	ldr	r1, [pc, #164]	@ (800ad28 <_dtoa_r+0x598>)
 800ac84:	2000      	movs	r0, #0
 800ac86:	f7f5 fde1 	bl	800084c <__aeabi_ddiv>
 800ac8a:	4633      	mov	r3, r6
 800ac8c:	462a      	mov	r2, r5
 800ac8e:	f7f5 fafb 	bl	8000288 <__aeabi_dsub>
 800ac92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac96:	4656      	mov	r6, sl
 800ac98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac9c:	f7f5 ff5c 	bl	8000b58 <__aeabi_d2iz>
 800aca0:	4605      	mov	r5, r0
 800aca2:	f7f5 fc3f 	bl	8000524 <__aeabi_i2d>
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acae:	f7f5 faeb 	bl	8000288 <__aeabi_dsub>
 800acb2:	3530      	adds	r5, #48	@ 0x30
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800acbc:	f806 5b01 	strb.w	r5, [r6], #1
 800acc0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800acc4:	f7f5 ff0a 	bl	8000adc <__aeabi_dcmplt>
 800acc8:	2800      	cmp	r0, #0
 800acca:	d172      	bne.n	800adb2 <_dtoa_r+0x622>
 800accc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acd0:	4911      	ldr	r1, [pc, #68]	@ (800ad18 <_dtoa_r+0x588>)
 800acd2:	2000      	movs	r0, #0
 800acd4:	f7f5 fad8 	bl	8000288 <__aeabi_dsub>
 800acd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800acdc:	f7f5 fefe 	bl	8000adc <__aeabi_dcmplt>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	f040 80b4 	bne.w	800ae4e <_dtoa_r+0x6be>
 800ace6:	42a6      	cmp	r6, r4
 800ace8:	f43f af70 	beq.w	800abcc <_dtoa_r+0x43c>
 800acec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800acf0:	4b0a      	ldr	r3, [pc, #40]	@ (800ad1c <_dtoa_r+0x58c>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	f7f5 fc80 	bl	80005f8 <__aeabi_dmul>
 800acf8:	4b08      	ldr	r3, [pc, #32]	@ (800ad1c <_dtoa_r+0x58c>)
 800acfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800acfe:	2200      	movs	r2, #0
 800ad00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad04:	f7f5 fc78 	bl	80005f8 <__aeabi_dmul>
 800ad08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad0c:	e7c4      	b.n	800ac98 <_dtoa_r+0x508>
 800ad0e:	bf00      	nop
 800ad10:	0800d458 	.word	0x0800d458
 800ad14:	0800d430 	.word	0x0800d430
 800ad18:	3ff00000 	.word	0x3ff00000
 800ad1c:	40240000 	.word	0x40240000
 800ad20:	401c0000 	.word	0x401c0000
 800ad24:	40140000 	.word	0x40140000
 800ad28:	3fe00000 	.word	0x3fe00000
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	4628      	mov	r0, r5
 800ad30:	f7f5 fc62 	bl	80005f8 <__aeabi_dmul>
 800ad34:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ad38:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ad3a:	4656      	mov	r6, sl
 800ad3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad40:	f7f5 ff0a 	bl	8000b58 <__aeabi_d2iz>
 800ad44:	4605      	mov	r5, r0
 800ad46:	f7f5 fbed 	bl	8000524 <__aeabi_i2d>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad52:	f7f5 fa99 	bl	8000288 <__aeabi_dsub>
 800ad56:	3530      	adds	r5, #48	@ 0x30
 800ad58:	f806 5b01 	strb.w	r5, [r6], #1
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	42a6      	cmp	r6, r4
 800ad62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad66:	f04f 0200 	mov.w	r2, #0
 800ad6a:	d124      	bne.n	800adb6 <_dtoa_r+0x626>
 800ad6c:	4baf      	ldr	r3, [pc, #700]	@ (800b02c <_dtoa_r+0x89c>)
 800ad6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ad72:	f7f5 fa8b 	bl	800028c <__adddf3>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad7e:	f7f5 fecb 	bl	8000b18 <__aeabi_dcmpgt>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d163      	bne.n	800ae4e <_dtoa_r+0x6be>
 800ad86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad8a:	49a8      	ldr	r1, [pc, #672]	@ (800b02c <_dtoa_r+0x89c>)
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	f7f5 fa7b 	bl	8000288 <__aeabi_dsub>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad9a:	f7f5 fe9f 	bl	8000adc <__aeabi_dcmplt>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	f43f af14 	beq.w	800abcc <_dtoa_r+0x43c>
 800ada4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ada6:	1e73      	subs	r3, r6, #1
 800ada8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800adaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800adae:	2b30      	cmp	r3, #48	@ 0x30
 800adb0:	d0f8      	beq.n	800ada4 <_dtoa_r+0x614>
 800adb2:	4647      	mov	r7, r8
 800adb4:	e03b      	b.n	800ae2e <_dtoa_r+0x69e>
 800adb6:	4b9e      	ldr	r3, [pc, #632]	@ (800b030 <_dtoa_r+0x8a0>)
 800adb8:	f7f5 fc1e 	bl	80005f8 <__aeabi_dmul>
 800adbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adc0:	e7bc      	b.n	800ad3c <_dtoa_r+0x5ac>
 800adc2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800adc6:	4656      	mov	r6, sl
 800adc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adcc:	4620      	mov	r0, r4
 800adce:	4629      	mov	r1, r5
 800add0:	f7f5 fd3c 	bl	800084c <__aeabi_ddiv>
 800add4:	f7f5 fec0 	bl	8000b58 <__aeabi_d2iz>
 800add8:	4680      	mov	r8, r0
 800adda:	f7f5 fba3 	bl	8000524 <__aeabi_i2d>
 800adde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ade2:	f7f5 fc09 	bl	80005f8 <__aeabi_dmul>
 800ade6:	4602      	mov	r2, r0
 800ade8:	460b      	mov	r3, r1
 800adea:	4620      	mov	r0, r4
 800adec:	4629      	mov	r1, r5
 800adee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800adf2:	f7f5 fa49 	bl	8000288 <__aeabi_dsub>
 800adf6:	f806 4b01 	strb.w	r4, [r6], #1
 800adfa:	9d03      	ldr	r5, [sp, #12]
 800adfc:	eba6 040a 	sub.w	r4, r6, sl
 800ae00:	42a5      	cmp	r5, r4
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	d133      	bne.n	800ae70 <_dtoa_r+0x6e0>
 800ae08:	f7f5 fa40 	bl	800028c <__adddf3>
 800ae0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae10:	4604      	mov	r4, r0
 800ae12:	460d      	mov	r5, r1
 800ae14:	f7f5 fe80 	bl	8000b18 <__aeabi_dcmpgt>
 800ae18:	b9c0      	cbnz	r0, 800ae4c <_dtoa_r+0x6bc>
 800ae1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae1e:	4620      	mov	r0, r4
 800ae20:	4629      	mov	r1, r5
 800ae22:	f7f5 fe51 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae26:	b110      	cbz	r0, 800ae2e <_dtoa_r+0x69e>
 800ae28:	f018 0f01 	tst.w	r8, #1
 800ae2c:	d10e      	bne.n	800ae4c <_dtoa_r+0x6bc>
 800ae2e:	9902      	ldr	r1, [sp, #8]
 800ae30:	4648      	mov	r0, r9
 800ae32:	f000 fe53 	bl	800badc <_Bfree>
 800ae36:	2300      	movs	r3, #0
 800ae38:	7033      	strb	r3, [r6, #0]
 800ae3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae3c:	3701      	adds	r7, #1
 800ae3e:	601f      	str	r7, [r3, #0]
 800ae40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 824b 	beq.w	800b2de <_dtoa_r+0xb4e>
 800ae48:	601e      	str	r6, [r3, #0]
 800ae4a:	e248      	b.n	800b2de <_dtoa_r+0xb4e>
 800ae4c:	46b8      	mov	r8, r7
 800ae4e:	4633      	mov	r3, r6
 800ae50:	461e      	mov	r6, r3
 800ae52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae56:	2a39      	cmp	r2, #57	@ 0x39
 800ae58:	d106      	bne.n	800ae68 <_dtoa_r+0x6d8>
 800ae5a:	459a      	cmp	sl, r3
 800ae5c:	d1f8      	bne.n	800ae50 <_dtoa_r+0x6c0>
 800ae5e:	2230      	movs	r2, #48	@ 0x30
 800ae60:	f108 0801 	add.w	r8, r8, #1
 800ae64:	f88a 2000 	strb.w	r2, [sl]
 800ae68:	781a      	ldrb	r2, [r3, #0]
 800ae6a:	3201      	adds	r2, #1
 800ae6c:	701a      	strb	r2, [r3, #0]
 800ae6e:	e7a0      	b.n	800adb2 <_dtoa_r+0x622>
 800ae70:	4b6f      	ldr	r3, [pc, #444]	@ (800b030 <_dtoa_r+0x8a0>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	f7f5 fbc0 	bl	80005f8 <__aeabi_dmul>
 800ae78:	2200      	movs	r2, #0
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	460d      	mov	r5, r1
 800ae80:	f7f5 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d09f      	beq.n	800adc8 <_dtoa_r+0x638>
 800ae88:	e7d1      	b.n	800ae2e <_dtoa_r+0x69e>
 800ae8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae8c:	2a00      	cmp	r2, #0
 800ae8e:	f000 80ea 	beq.w	800b066 <_dtoa_r+0x8d6>
 800ae92:	9a07      	ldr	r2, [sp, #28]
 800ae94:	2a01      	cmp	r2, #1
 800ae96:	f300 80cd 	bgt.w	800b034 <_dtoa_r+0x8a4>
 800ae9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ae9c:	2a00      	cmp	r2, #0
 800ae9e:	f000 80c1 	beq.w	800b024 <_dtoa_r+0x894>
 800aea2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aea6:	9c08      	ldr	r4, [sp, #32]
 800aea8:	9e00      	ldr	r6, [sp, #0]
 800aeaa:	9a00      	ldr	r2, [sp, #0]
 800aeac:	441a      	add	r2, r3
 800aeae:	9200      	str	r2, [sp, #0]
 800aeb0:	9a06      	ldr	r2, [sp, #24]
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	441a      	add	r2, r3
 800aeb6:	4648      	mov	r0, r9
 800aeb8:	9206      	str	r2, [sp, #24]
 800aeba:	f000 ff0d 	bl	800bcd8 <__i2b>
 800aebe:	4605      	mov	r5, r0
 800aec0:	b166      	cbz	r6, 800aedc <_dtoa_r+0x74c>
 800aec2:	9b06      	ldr	r3, [sp, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	dd09      	ble.n	800aedc <_dtoa_r+0x74c>
 800aec8:	42b3      	cmp	r3, r6
 800aeca:	9a00      	ldr	r2, [sp, #0]
 800aecc:	bfa8      	it	ge
 800aece:	4633      	movge	r3, r6
 800aed0:	1ad2      	subs	r2, r2, r3
 800aed2:	9200      	str	r2, [sp, #0]
 800aed4:	9a06      	ldr	r2, [sp, #24]
 800aed6:	1af6      	subs	r6, r6, r3
 800aed8:	1ad3      	subs	r3, r2, r3
 800aeda:	9306      	str	r3, [sp, #24]
 800aedc:	9b08      	ldr	r3, [sp, #32]
 800aede:	b30b      	cbz	r3, 800af24 <_dtoa_r+0x794>
 800aee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f000 80c6 	beq.w	800b074 <_dtoa_r+0x8e4>
 800aee8:	2c00      	cmp	r4, #0
 800aeea:	f000 80c0 	beq.w	800b06e <_dtoa_r+0x8de>
 800aeee:	4629      	mov	r1, r5
 800aef0:	4622      	mov	r2, r4
 800aef2:	4648      	mov	r0, r9
 800aef4:	f000 ffa8 	bl	800be48 <__pow5mult>
 800aef8:	9a02      	ldr	r2, [sp, #8]
 800aefa:	4601      	mov	r1, r0
 800aefc:	4605      	mov	r5, r0
 800aefe:	4648      	mov	r0, r9
 800af00:	f000 ff00 	bl	800bd04 <__multiply>
 800af04:	9902      	ldr	r1, [sp, #8]
 800af06:	4680      	mov	r8, r0
 800af08:	4648      	mov	r0, r9
 800af0a:	f000 fde7 	bl	800badc <_Bfree>
 800af0e:	9b08      	ldr	r3, [sp, #32]
 800af10:	1b1b      	subs	r3, r3, r4
 800af12:	9308      	str	r3, [sp, #32]
 800af14:	f000 80b1 	beq.w	800b07a <_dtoa_r+0x8ea>
 800af18:	9a08      	ldr	r2, [sp, #32]
 800af1a:	4641      	mov	r1, r8
 800af1c:	4648      	mov	r0, r9
 800af1e:	f000 ff93 	bl	800be48 <__pow5mult>
 800af22:	9002      	str	r0, [sp, #8]
 800af24:	2101      	movs	r1, #1
 800af26:	4648      	mov	r0, r9
 800af28:	f000 fed6 	bl	800bcd8 <__i2b>
 800af2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af2e:	4604      	mov	r4, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 81d8 	beq.w	800b2e6 <_dtoa_r+0xb56>
 800af36:	461a      	mov	r2, r3
 800af38:	4601      	mov	r1, r0
 800af3a:	4648      	mov	r0, r9
 800af3c:	f000 ff84 	bl	800be48 <__pow5mult>
 800af40:	9b07      	ldr	r3, [sp, #28]
 800af42:	2b01      	cmp	r3, #1
 800af44:	4604      	mov	r4, r0
 800af46:	f300 809f 	bgt.w	800b088 <_dtoa_r+0x8f8>
 800af4a:	9b04      	ldr	r3, [sp, #16]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f040 8097 	bne.w	800b080 <_dtoa_r+0x8f0>
 800af52:	9b05      	ldr	r3, [sp, #20]
 800af54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f040 8093 	bne.w	800b084 <_dtoa_r+0x8f4>
 800af5e:	9b05      	ldr	r3, [sp, #20]
 800af60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af64:	0d1b      	lsrs	r3, r3, #20
 800af66:	051b      	lsls	r3, r3, #20
 800af68:	b133      	cbz	r3, 800af78 <_dtoa_r+0x7e8>
 800af6a:	9b00      	ldr	r3, [sp, #0]
 800af6c:	3301      	adds	r3, #1
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	9b06      	ldr	r3, [sp, #24]
 800af72:	3301      	adds	r3, #1
 800af74:	9306      	str	r3, [sp, #24]
 800af76:	2301      	movs	r3, #1
 800af78:	9308      	str	r3, [sp, #32]
 800af7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f000 81b8 	beq.w	800b2f2 <_dtoa_r+0xb62>
 800af82:	6923      	ldr	r3, [r4, #16]
 800af84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af88:	6918      	ldr	r0, [r3, #16]
 800af8a:	f000 fe59 	bl	800bc40 <__hi0bits>
 800af8e:	f1c0 0020 	rsb	r0, r0, #32
 800af92:	9b06      	ldr	r3, [sp, #24]
 800af94:	4418      	add	r0, r3
 800af96:	f010 001f 	ands.w	r0, r0, #31
 800af9a:	f000 8082 	beq.w	800b0a2 <_dtoa_r+0x912>
 800af9e:	f1c0 0320 	rsb	r3, r0, #32
 800afa2:	2b04      	cmp	r3, #4
 800afa4:	dd73      	ble.n	800b08e <_dtoa_r+0x8fe>
 800afa6:	9b00      	ldr	r3, [sp, #0]
 800afa8:	f1c0 001c 	rsb	r0, r0, #28
 800afac:	4403      	add	r3, r0
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	9b06      	ldr	r3, [sp, #24]
 800afb2:	4403      	add	r3, r0
 800afb4:	4406      	add	r6, r0
 800afb6:	9306      	str	r3, [sp, #24]
 800afb8:	9b00      	ldr	r3, [sp, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	dd05      	ble.n	800afca <_dtoa_r+0x83a>
 800afbe:	9902      	ldr	r1, [sp, #8]
 800afc0:	461a      	mov	r2, r3
 800afc2:	4648      	mov	r0, r9
 800afc4:	f000 ff9a 	bl	800befc <__lshift>
 800afc8:	9002      	str	r0, [sp, #8]
 800afca:	9b06      	ldr	r3, [sp, #24]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	dd05      	ble.n	800afdc <_dtoa_r+0x84c>
 800afd0:	4621      	mov	r1, r4
 800afd2:	461a      	mov	r2, r3
 800afd4:	4648      	mov	r0, r9
 800afd6:	f000 ff91 	bl	800befc <__lshift>
 800afda:	4604      	mov	r4, r0
 800afdc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d061      	beq.n	800b0a6 <_dtoa_r+0x916>
 800afe2:	9802      	ldr	r0, [sp, #8]
 800afe4:	4621      	mov	r1, r4
 800afe6:	f000 fff5 	bl	800bfd4 <__mcmp>
 800afea:	2800      	cmp	r0, #0
 800afec:	da5b      	bge.n	800b0a6 <_dtoa_r+0x916>
 800afee:	2300      	movs	r3, #0
 800aff0:	9902      	ldr	r1, [sp, #8]
 800aff2:	220a      	movs	r2, #10
 800aff4:	4648      	mov	r0, r9
 800aff6:	f000 fd93 	bl	800bb20 <__multadd>
 800affa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800affc:	9002      	str	r0, [sp, #8]
 800affe:	f107 38ff 	add.w	r8, r7, #4294967295
 800b002:	2b00      	cmp	r3, #0
 800b004:	f000 8177 	beq.w	800b2f6 <_dtoa_r+0xb66>
 800b008:	4629      	mov	r1, r5
 800b00a:	2300      	movs	r3, #0
 800b00c:	220a      	movs	r2, #10
 800b00e:	4648      	mov	r0, r9
 800b010:	f000 fd86 	bl	800bb20 <__multadd>
 800b014:	f1bb 0f00 	cmp.w	fp, #0
 800b018:	4605      	mov	r5, r0
 800b01a:	dc6f      	bgt.n	800b0fc <_dtoa_r+0x96c>
 800b01c:	9b07      	ldr	r3, [sp, #28]
 800b01e:	2b02      	cmp	r3, #2
 800b020:	dc49      	bgt.n	800b0b6 <_dtoa_r+0x926>
 800b022:	e06b      	b.n	800b0fc <_dtoa_r+0x96c>
 800b024:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b026:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b02a:	e73c      	b.n	800aea6 <_dtoa_r+0x716>
 800b02c:	3fe00000 	.word	0x3fe00000
 800b030:	40240000 	.word	0x40240000
 800b034:	9b03      	ldr	r3, [sp, #12]
 800b036:	1e5c      	subs	r4, r3, #1
 800b038:	9b08      	ldr	r3, [sp, #32]
 800b03a:	42a3      	cmp	r3, r4
 800b03c:	db09      	blt.n	800b052 <_dtoa_r+0x8c2>
 800b03e:	1b1c      	subs	r4, r3, r4
 800b040:	9b03      	ldr	r3, [sp, #12]
 800b042:	2b00      	cmp	r3, #0
 800b044:	f6bf af30 	bge.w	800aea8 <_dtoa_r+0x718>
 800b048:	9b00      	ldr	r3, [sp, #0]
 800b04a:	9a03      	ldr	r2, [sp, #12]
 800b04c:	1a9e      	subs	r6, r3, r2
 800b04e:	2300      	movs	r3, #0
 800b050:	e72b      	b.n	800aeaa <_dtoa_r+0x71a>
 800b052:	9b08      	ldr	r3, [sp, #32]
 800b054:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b056:	9408      	str	r4, [sp, #32]
 800b058:	1ae3      	subs	r3, r4, r3
 800b05a:	441a      	add	r2, r3
 800b05c:	9e00      	ldr	r6, [sp, #0]
 800b05e:	9b03      	ldr	r3, [sp, #12]
 800b060:	920d      	str	r2, [sp, #52]	@ 0x34
 800b062:	2400      	movs	r4, #0
 800b064:	e721      	b.n	800aeaa <_dtoa_r+0x71a>
 800b066:	9c08      	ldr	r4, [sp, #32]
 800b068:	9e00      	ldr	r6, [sp, #0]
 800b06a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b06c:	e728      	b.n	800aec0 <_dtoa_r+0x730>
 800b06e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b072:	e751      	b.n	800af18 <_dtoa_r+0x788>
 800b074:	9a08      	ldr	r2, [sp, #32]
 800b076:	9902      	ldr	r1, [sp, #8]
 800b078:	e750      	b.n	800af1c <_dtoa_r+0x78c>
 800b07a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b07e:	e751      	b.n	800af24 <_dtoa_r+0x794>
 800b080:	2300      	movs	r3, #0
 800b082:	e779      	b.n	800af78 <_dtoa_r+0x7e8>
 800b084:	9b04      	ldr	r3, [sp, #16]
 800b086:	e777      	b.n	800af78 <_dtoa_r+0x7e8>
 800b088:	2300      	movs	r3, #0
 800b08a:	9308      	str	r3, [sp, #32]
 800b08c:	e779      	b.n	800af82 <_dtoa_r+0x7f2>
 800b08e:	d093      	beq.n	800afb8 <_dtoa_r+0x828>
 800b090:	9a00      	ldr	r2, [sp, #0]
 800b092:	331c      	adds	r3, #28
 800b094:	441a      	add	r2, r3
 800b096:	9200      	str	r2, [sp, #0]
 800b098:	9a06      	ldr	r2, [sp, #24]
 800b09a:	441a      	add	r2, r3
 800b09c:	441e      	add	r6, r3
 800b09e:	9206      	str	r2, [sp, #24]
 800b0a0:	e78a      	b.n	800afb8 <_dtoa_r+0x828>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	e7f4      	b.n	800b090 <_dtoa_r+0x900>
 800b0a6:	9b03      	ldr	r3, [sp, #12]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	46b8      	mov	r8, r7
 800b0ac:	dc20      	bgt.n	800b0f0 <_dtoa_r+0x960>
 800b0ae:	469b      	mov	fp, r3
 800b0b0:	9b07      	ldr	r3, [sp, #28]
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	dd1e      	ble.n	800b0f4 <_dtoa_r+0x964>
 800b0b6:	f1bb 0f00 	cmp.w	fp, #0
 800b0ba:	f47f adb1 	bne.w	800ac20 <_dtoa_r+0x490>
 800b0be:	4621      	mov	r1, r4
 800b0c0:	465b      	mov	r3, fp
 800b0c2:	2205      	movs	r2, #5
 800b0c4:	4648      	mov	r0, r9
 800b0c6:	f000 fd2b 	bl	800bb20 <__multadd>
 800b0ca:	4601      	mov	r1, r0
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	9802      	ldr	r0, [sp, #8]
 800b0d0:	f000 ff80 	bl	800bfd4 <__mcmp>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	f77f ada3 	ble.w	800ac20 <_dtoa_r+0x490>
 800b0da:	4656      	mov	r6, sl
 800b0dc:	2331      	movs	r3, #49	@ 0x31
 800b0de:	f806 3b01 	strb.w	r3, [r6], #1
 800b0e2:	f108 0801 	add.w	r8, r8, #1
 800b0e6:	e59f      	b.n	800ac28 <_dtoa_r+0x498>
 800b0e8:	9c03      	ldr	r4, [sp, #12]
 800b0ea:	46b8      	mov	r8, r7
 800b0ec:	4625      	mov	r5, r4
 800b0ee:	e7f4      	b.n	800b0da <_dtoa_r+0x94a>
 800b0f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f000 8101 	beq.w	800b2fe <_dtoa_r+0xb6e>
 800b0fc:	2e00      	cmp	r6, #0
 800b0fe:	dd05      	ble.n	800b10c <_dtoa_r+0x97c>
 800b100:	4629      	mov	r1, r5
 800b102:	4632      	mov	r2, r6
 800b104:	4648      	mov	r0, r9
 800b106:	f000 fef9 	bl	800befc <__lshift>
 800b10a:	4605      	mov	r5, r0
 800b10c:	9b08      	ldr	r3, [sp, #32]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d05c      	beq.n	800b1cc <_dtoa_r+0xa3c>
 800b112:	6869      	ldr	r1, [r5, #4]
 800b114:	4648      	mov	r0, r9
 800b116:	f000 fca1 	bl	800ba5c <_Balloc>
 800b11a:	4606      	mov	r6, r0
 800b11c:	b928      	cbnz	r0, 800b12a <_dtoa_r+0x99a>
 800b11e:	4b82      	ldr	r3, [pc, #520]	@ (800b328 <_dtoa_r+0xb98>)
 800b120:	4602      	mov	r2, r0
 800b122:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b126:	f7ff bb4a 	b.w	800a7be <_dtoa_r+0x2e>
 800b12a:	692a      	ldr	r2, [r5, #16]
 800b12c:	3202      	adds	r2, #2
 800b12e:	0092      	lsls	r2, r2, #2
 800b130:	f105 010c 	add.w	r1, r5, #12
 800b134:	300c      	adds	r0, #12
 800b136:	f7ff fa7c 	bl	800a632 <memcpy>
 800b13a:	2201      	movs	r2, #1
 800b13c:	4631      	mov	r1, r6
 800b13e:	4648      	mov	r0, r9
 800b140:	f000 fedc 	bl	800befc <__lshift>
 800b144:	f10a 0301 	add.w	r3, sl, #1
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	eb0a 030b 	add.w	r3, sl, fp
 800b14e:	9308      	str	r3, [sp, #32]
 800b150:	9b04      	ldr	r3, [sp, #16]
 800b152:	f003 0301 	and.w	r3, r3, #1
 800b156:	462f      	mov	r7, r5
 800b158:	9306      	str	r3, [sp, #24]
 800b15a:	4605      	mov	r5, r0
 800b15c:	9b00      	ldr	r3, [sp, #0]
 800b15e:	9802      	ldr	r0, [sp, #8]
 800b160:	4621      	mov	r1, r4
 800b162:	f103 3bff 	add.w	fp, r3, #4294967295
 800b166:	f7ff fa88 	bl	800a67a <quorem>
 800b16a:	4603      	mov	r3, r0
 800b16c:	3330      	adds	r3, #48	@ 0x30
 800b16e:	9003      	str	r0, [sp, #12]
 800b170:	4639      	mov	r1, r7
 800b172:	9802      	ldr	r0, [sp, #8]
 800b174:	9309      	str	r3, [sp, #36]	@ 0x24
 800b176:	f000 ff2d 	bl	800bfd4 <__mcmp>
 800b17a:	462a      	mov	r2, r5
 800b17c:	9004      	str	r0, [sp, #16]
 800b17e:	4621      	mov	r1, r4
 800b180:	4648      	mov	r0, r9
 800b182:	f000 ff43 	bl	800c00c <__mdiff>
 800b186:	68c2      	ldr	r2, [r0, #12]
 800b188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b18a:	4606      	mov	r6, r0
 800b18c:	bb02      	cbnz	r2, 800b1d0 <_dtoa_r+0xa40>
 800b18e:	4601      	mov	r1, r0
 800b190:	9802      	ldr	r0, [sp, #8]
 800b192:	f000 ff1f 	bl	800bfd4 <__mcmp>
 800b196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b198:	4602      	mov	r2, r0
 800b19a:	4631      	mov	r1, r6
 800b19c:	4648      	mov	r0, r9
 800b19e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b1a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1a2:	f000 fc9b 	bl	800badc <_Bfree>
 800b1a6:	9b07      	ldr	r3, [sp, #28]
 800b1a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b1aa:	9e00      	ldr	r6, [sp, #0]
 800b1ac:	ea42 0103 	orr.w	r1, r2, r3
 800b1b0:	9b06      	ldr	r3, [sp, #24]
 800b1b2:	4319      	orrs	r1, r3
 800b1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b6:	d10d      	bne.n	800b1d4 <_dtoa_r+0xa44>
 800b1b8:	2b39      	cmp	r3, #57	@ 0x39
 800b1ba:	d027      	beq.n	800b20c <_dtoa_r+0xa7c>
 800b1bc:	9a04      	ldr	r2, [sp, #16]
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	dd01      	ble.n	800b1c6 <_dtoa_r+0xa36>
 800b1c2:	9b03      	ldr	r3, [sp, #12]
 800b1c4:	3331      	adds	r3, #49	@ 0x31
 800b1c6:	f88b 3000 	strb.w	r3, [fp]
 800b1ca:	e52e      	b.n	800ac2a <_dtoa_r+0x49a>
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	e7b9      	b.n	800b144 <_dtoa_r+0x9b4>
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	e7e2      	b.n	800b19a <_dtoa_r+0xa0a>
 800b1d4:	9904      	ldr	r1, [sp, #16]
 800b1d6:	2900      	cmp	r1, #0
 800b1d8:	db04      	blt.n	800b1e4 <_dtoa_r+0xa54>
 800b1da:	9807      	ldr	r0, [sp, #28]
 800b1dc:	4301      	orrs	r1, r0
 800b1de:	9806      	ldr	r0, [sp, #24]
 800b1e0:	4301      	orrs	r1, r0
 800b1e2:	d120      	bne.n	800b226 <_dtoa_r+0xa96>
 800b1e4:	2a00      	cmp	r2, #0
 800b1e6:	ddee      	ble.n	800b1c6 <_dtoa_r+0xa36>
 800b1e8:	9902      	ldr	r1, [sp, #8]
 800b1ea:	9300      	str	r3, [sp, #0]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	4648      	mov	r0, r9
 800b1f0:	f000 fe84 	bl	800befc <__lshift>
 800b1f4:	4621      	mov	r1, r4
 800b1f6:	9002      	str	r0, [sp, #8]
 800b1f8:	f000 feec 	bl	800bfd4 <__mcmp>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	9b00      	ldr	r3, [sp, #0]
 800b200:	dc02      	bgt.n	800b208 <_dtoa_r+0xa78>
 800b202:	d1e0      	bne.n	800b1c6 <_dtoa_r+0xa36>
 800b204:	07da      	lsls	r2, r3, #31
 800b206:	d5de      	bpl.n	800b1c6 <_dtoa_r+0xa36>
 800b208:	2b39      	cmp	r3, #57	@ 0x39
 800b20a:	d1da      	bne.n	800b1c2 <_dtoa_r+0xa32>
 800b20c:	2339      	movs	r3, #57	@ 0x39
 800b20e:	f88b 3000 	strb.w	r3, [fp]
 800b212:	4633      	mov	r3, r6
 800b214:	461e      	mov	r6, r3
 800b216:	3b01      	subs	r3, #1
 800b218:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b21c:	2a39      	cmp	r2, #57	@ 0x39
 800b21e:	d04e      	beq.n	800b2be <_dtoa_r+0xb2e>
 800b220:	3201      	adds	r2, #1
 800b222:	701a      	strb	r2, [r3, #0]
 800b224:	e501      	b.n	800ac2a <_dtoa_r+0x49a>
 800b226:	2a00      	cmp	r2, #0
 800b228:	dd03      	ble.n	800b232 <_dtoa_r+0xaa2>
 800b22a:	2b39      	cmp	r3, #57	@ 0x39
 800b22c:	d0ee      	beq.n	800b20c <_dtoa_r+0xa7c>
 800b22e:	3301      	adds	r3, #1
 800b230:	e7c9      	b.n	800b1c6 <_dtoa_r+0xa36>
 800b232:	9a00      	ldr	r2, [sp, #0]
 800b234:	9908      	ldr	r1, [sp, #32]
 800b236:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b23a:	428a      	cmp	r2, r1
 800b23c:	d028      	beq.n	800b290 <_dtoa_r+0xb00>
 800b23e:	9902      	ldr	r1, [sp, #8]
 800b240:	2300      	movs	r3, #0
 800b242:	220a      	movs	r2, #10
 800b244:	4648      	mov	r0, r9
 800b246:	f000 fc6b 	bl	800bb20 <__multadd>
 800b24a:	42af      	cmp	r7, r5
 800b24c:	9002      	str	r0, [sp, #8]
 800b24e:	f04f 0300 	mov.w	r3, #0
 800b252:	f04f 020a 	mov.w	r2, #10
 800b256:	4639      	mov	r1, r7
 800b258:	4648      	mov	r0, r9
 800b25a:	d107      	bne.n	800b26c <_dtoa_r+0xadc>
 800b25c:	f000 fc60 	bl	800bb20 <__multadd>
 800b260:	4607      	mov	r7, r0
 800b262:	4605      	mov	r5, r0
 800b264:	9b00      	ldr	r3, [sp, #0]
 800b266:	3301      	adds	r3, #1
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	e777      	b.n	800b15c <_dtoa_r+0x9cc>
 800b26c:	f000 fc58 	bl	800bb20 <__multadd>
 800b270:	4629      	mov	r1, r5
 800b272:	4607      	mov	r7, r0
 800b274:	2300      	movs	r3, #0
 800b276:	220a      	movs	r2, #10
 800b278:	4648      	mov	r0, r9
 800b27a:	f000 fc51 	bl	800bb20 <__multadd>
 800b27e:	4605      	mov	r5, r0
 800b280:	e7f0      	b.n	800b264 <_dtoa_r+0xad4>
 800b282:	f1bb 0f00 	cmp.w	fp, #0
 800b286:	bfcc      	ite	gt
 800b288:	465e      	movgt	r6, fp
 800b28a:	2601      	movle	r6, #1
 800b28c:	4456      	add	r6, sl
 800b28e:	2700      	movs	r7, #0
 800b290:	9902      	ldr	r1, [sp, #8]
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	2201      	movs	r2, #1
 800b296:	4648      	mov	r0, r9
 800b298:	f000 fe30 	bl	800befc <__lshift>
 800b29c:	4621      	mov	r1, r4
 800b29e:	9002      	str	r0, [sp, #8]
 800b2a0:	f000 fe98 	bl	800bfd4 <__mcmp>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	dcb4      	bgt.n	800b212 <_dtoa_r+0xa82>
 800b2a8:	d102      	bne.n	800b2b0 <_dtoa_r+0xb20>
 800b2aa:	9b00      	ldr	r3, [sp, #0]
 800b2ac:	07db      	lsls	r3, r3, #31
 800b2ae:	d4b0      	bmi.n	800b212 <_dtoa_r+0xa82>
 800b2b0:	4633      	mov	r3, r6
 800b2b2:	461e      	mov	r6, r3
 800b2b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2b8:	2a30      	cmp	r2, #48	@ 0x30
 800b2ba:	d0fa      	beq.n	800b2b2 <_dtoa_r+0xb22>
 800b2bc:	e4b5      	b.n	800ac2a <_dtoa_r+0x49a>
 800b2be:	459a      	cmp	sl, r3
 800b2c0:	d1a8      	bne.n	800b214 <_dtoa_r+0xa84>
 800b2c2:	2331      	movs	r3, #49	@ 0x31
 800b2c4:	f108 0801 	add.w	r8, r8, #1
 800b2c8:	f88a 3000 	strb.w	r3, [sl]
 800b2cc:	e4ad      	b.n	800ac2a <_dtoa_r+0x49a>
 800b2ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b2d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b32c <_dtoa_r+0xb9c>
 800b2d4:	b11b      	cbz	r3, 800b2de <_dtoa_r+0xb4e>
 800b2d6:	f10a 0308 	add.w	r3, sl, #8
 800b2da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b2dc:	6013      	str	r3, [r2, #0]
 800b2de:	4650      	mov	r0, sl
 800b2e0:	b017      	add	sp, #92	@ 0x5c
 800b2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e6:	9b07      	ldr	r3, [sp, #28]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	f77f ae2e 	ble.w	800af4a <_dtoa_r+0x7ba>
 800b2ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2f0:	9308      	str	r3, [sp, #32]
 800b2f2:	2001      	movs	r0, #1
 800b2f4:	e64d      	b.n	800af92 <_dtoa_r+0x802>
 800b2f6:	f1bb 0f00 	cmp.w	fp, #0
 800b2fa:	f77f aed9 	ble.w	800b0b0 <_dtoa_r+0x920>
 800b2fe:	4656      	mov	r6, sl
 800b300:	9802      	ldr	r0, [sp, #8]
 800b302:	4621      	mov	r1, r4
 800b304:	f7ff f9b9 	bl	800a67a <quorem>
 800b308:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b30c:	f806 3b01 	strb.w	r3, [r6], #1
 800b310:	eba6 020a 	sub.w	r2, r6, sl
 800b314:	4593      	cmp	fp, r2
 800b316:	ddb4      	ble.n	800b282 <_dtoa_r+0xaf2>
 800b318:	9902      	ldr	r1, [sp, #8]
 800b31a:	2300      	movs	r3, #0
 800b31c:	220a      	movs	r2, #10
 800b31e:	4648      	mov	r0, r9
 800b320:	f000 fbfe 	bl	800bb20 <__multadd>
 800b324:	9002      	str	r0, [sp, #8]
 800b326:	e7eb      	b.n	800b300 <_dtoa_r+0xb70>
 800b328:	0800d2ee 	.word	0x0800d2ee
 800b32c:	0800d289 	.word	0x0800d289

0800b330 <_free_r>:
 800b330:	b538      	push	{r3, r4, r5, lr}
 800b332:	4605      	mov	r5, r0
 800b334:	2900      	cmp	r1, #0
 800b336:	d041      	beq.n	800b3bc <_free_r+0x8c>
 800b338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b33c:	1f0c      	subs	r4, r1, #4
 800b33e:	2b00      	cmp	r3, #0
 800b340:	bfb8      	it	lt
 800b342:	18e4      	addlt	r4, r4, r3
 800b344:	f7fd fac4 	bl	80088d0 <__malloc_lock>
 800b348:	4a1d      	ldr	r2, [pc, #116]	@ (800b3c0 <_free_r+0x90>)
 800b34a:	6813      	ldr	r3, [r2, #0]
 800b34c:	b933      	cbnz	r3, 800b35c <_free_r+0x2c>
 800b34e:	6063      	str	r3, [r4, #4]
 800b350:	6014      	str	r4, [r2, #0]
 800b352:	4628      	mov	r0, r5
 800b354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b358:	f7fd bac0 	b.w	80088dc <__malloc_unlock>
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	d908      	bls.n	800b372 <_free_r+0x42>
 800b360:	6820      	ldr	r0, [r4, #0]
 800b362:	1821      	adds	r1, r4, r0
 800b364:	428b      	cmp	r3, r1
 800b366:	bf01      	itttt	eq
 800b368:	6819      	ldreq	r1, [r3, #0]
 800b36a:	685b      	ldreq	r3, [r3, #4]
 800b36c:	1809      	addeq	r1, r1, r0
 800b36e:	6021      	streq	r1, [r4, #0]
 800b370:	e7ed      	b.n	800b34e <_free_r+0x1e>
 800b372:	461a      	mov	r2, r3
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	b10b      	cbz	r3, 800b37c <_free_r+0x4c>
 800b378:	42a3      	cmp	r3, r4
 800b37a:	d9fa      	bls.n	800b372 <_free_r+0x42>
 800b37c:	6811      	ldr	r1, [r2, #0]
 800b37e:	1850      	adds	r0, r2, r1
 800b380:	42a0      	cmp	r0, r4
 800b382:	d10b      	bne.n	800b39c <_free_r+0x6c>
 800b384:	6820      	ldr	r0, [r4, #0]
 800b386:	4401      	add	r1, r0
 800b388:	1850      	adds	r0, r2, r1
 800b38a:	4283      	cmp	r3, r0
 800b38c:	6011      	str	r1, [r2, #0]
 800b38e:	d1e0      	bne.n	800b352 <_free_r+0x22>
 800b390:	6818      	ldr	r0, [r3, #0]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	6053      	str	r3, [r2, #4]
 800b396:	4408      	add	r0, r1
 800b398:	6010      	str	r0, [r2, #0]
 800b39a:	e7da      	b.n	800b352 <_free_r+0x22>
 800b39c:	d902      	bls.n	800b3a4 <_free_r+0x74>
 800b39e:	230c      	movs	r3, #12
 800b3a0:	602b      	str	r3, [r5, #0]
 800b3a2:	e7d6      	b.n	800b352 <_free_r+0x22>
 800b3a4:	6820      	ldr	r0, [r4, #0]
 800b3a6:	1821      	adds	r1, r4, r0
 800b3a8:	428b      	cmp	r3, r1
 800b3aa:	bf04      	itt	eq
 800b3ac:	6819      	ldreq	r1, [r3, #0]
 800b3ae:	685b      	ldreq	r3, [r3, #4]
 800b3b0:	6063      	str	r3, [r4, #4]
 800b3b2:	bf04      	itt	eq
 800b3b4:	1809      	addeq	r1, r1, r0
 800b3b6:	6021      	streq	r1, [r4, #0]
 800b3b8:	6054      	str	r4, [r2, #4]
 800b3ba:	e7ca      	b.n	800b352 <_free_r+0x22>
 800b3bc:	bd38      	pop	{r3, r4, r5, pc}
 800b3be:	bf00      	nop
 800b3c0:	20000d9c 	.word	0x20000d9c

0800b3c4 <rshift>:
 800b3c4:	6903      	ldr	r3, [r0, #16]
 800b3c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b3ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b3d2:	f100 0414 	add.w	r4, r0, #20
 800b3d6:	dd45      	ble.n	800b464 <rshift+0xa0>
 800b3d8:	f011 011f 	ands.w	r1, r1, #31
 800b3dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b3e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b3e4:	d10c      	bne.n	800b400 <rshift+0x3c>
 800b3e6:	f100 0710 	add.w	r7, r0, #16
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	42b1      	cmp	r1, r6
 800b3ee:	d334      	bcc.n	800b45a <rshift+0x96>
 800b3f0:	1a9b      	subs	r3, r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	1eea      	subs	r2, r5, #3
 800b3f6:	4296      	cmp	r6, r2
 800b3f8:	bf38      	it	cc
 800b3fa:	2300      	movcc	r3, #0
 800b3fc:	4423      	add	r3, r4
 800b3fe:	e015      	b.n	800b42c <rshift+0x68>
 800b400:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b404:	f1c1 0820 	rsb	r8, r1, #32
 800b408:	40cf      	lsrs	r7, r1
 800b40a:	f105 0e04 	add.w	lr, r5, #4
 800b40e:	46a1      	mov	r9, r4
 800b410:	4576      	cmp	r6, lr
 800b412:	46f4      	mov	ip, lr
 800b414:	d815      	bhi.n	800b442 <rshift+0x7e>
 800b416:	1a9a      	subs	r2, r3, r2
 800b418:	0092      	lsls	r2, r2, #2
 800b41a:	3a04      	subs	r2, #4
 800b41c:	3501      	adds	r5, #1
 800b41e:	42ae      	cmp	r6, r5
 800b420:	bf38      	it	cc
 800b422:	2200      	movcc	r2, #0
 800b424:	18a3      	adds	r3, r4, r2
 800b426:	50a7      	str	r7, [r4, r2]
 800b428:	b107      	cbz	r7, 800b42c <rshift+0x68>
 800b42a:	3304      	adds	r3, #4
 800b42c:	1b1a      	subs	r2, r3, r4
 800b42e:	42a3      	cmp	r3, r4
 800b430:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b434:	bf08      	it	eq
 800b436:	2300      	moveq	r3, #0
 800b438:	6102      	str	r2, [r0, #16]
 800b43a:	bf08      	it	eq
 800b43c:	6143      	streq	r3, [r0, #20]
 800b43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b442:	f8dc c000 	ldr.w	ip, [ip]
 800b446:	fa0c fc08 	lsl.w	ip, ip, r8
 800b44a:	ea4c 0707 	orr.w	r7, ip, r7
 800b44e:	f849 7b04 	str.w	r7, [r9], #4
 800b452:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b456:	40cf      	lsrs	r7, r1
 800b458:	e7da      	b.n	800b410 <rshift+0x4c>
 800b45a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b45e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b462:	e7c3      	b.n	800b3ec <rshift+0x28>
 800b464:	4623      	mov	r3, r4
 800b466:	e7e1      	b.n	800b42c <rshift+0x68>

0800b468 <__hexdig_fun>:
 800b468:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b46c:	2b09      	cmp	r3, #9
 800b46e:	d802      	bhi.n	800b476 <__hexdig_fun+0xe>
 800b470:	3820      	subs	r0, #32
 800b472:	b2c0      	uxtb	r0, r0
 800b474:	4770      	bx	lr
 800b476:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b47a:	2b05      	cmp	r3, #5
 800b47c:	d801      	bhi.n	800b482 <__hexdig_fun+0x1a>
 800b47e:	3847      	subs	r0, #71	@ 0x47
 800b480:	e7f7      	b.n	800b472 <__hexdig_fun+0xa>
 800b482:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b486:	2b05      	cmp	r3, #5
 800b488:	d801      	bhi.n	800b48e <__hexdig_fun+0x26>
 800b48a:	3827      	subs	r0, #39	@ 0x27
 800b48c:	e7f1      	b.n	800b472 <__hexdig_fun+0xa>
 800b48e:	2000      	movs	r0, #0
 800b490:	4770      	bx	lr
	...

0800b494 <__gethex>:
 800b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	b085      	sub	sp, #20
 800b49a:	468a      	mov	sl, r1
 800b49c:	9302      	str	r3, [sp, #8]
 800b49e:	680b      	ldr	r3, [r1, #0]
 800b4a0:	9001      	str	r0, [sp, #4]
 800b4a2:	4690      	mov	r8, r2
 800b4a4:	1c9c      	adds	r4, r3, #2
 800b4a6:	46a1      	mov	r9, r4
 800b4a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b4ac:	2830      	cmp	r0, #48	@ 0x30
 800b4ae:	d0fa      	beq.n	800b4a6 <__gethex+0x12>
 800b4b0:	eba9 0303 	sub.w	r3, r9, r3
 800b4b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800b4b8:	f7ff ffd6 	bl	800b468 <__hexdig_fun>
 800b4bc:	4605      	mov	r5, r0
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d168      	bne.n	800b594 <__gethex+0x100>
 800b4c2:	49a0      	ldr	r1, [pc, #640]	@ (800b744 <__gethex+0x2b0>)
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	4648      	mov	r0, r9
 800b4c8:	f7fe ffbd 	bl	800a446 <strncmp>
 800b4cc:	4607      	mov	r7, r0
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d167      	bne.n	800b5a2 <__gethex+0x10e>
 800b4d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b4d6:	4626      	mov	r6, r4
 800b4d8:	f7ff ffc6 	bl	800b468 <__hexdig_fun>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d062      	beq.n	800b5a6 <__gethex+0x112>
 800b4e0:	4623      	mov	r3, r4
 800b4e2:	7818      	ldrb	r0, [r3, #0]
 800b4e4:	2830      	cmp	r0, #48	@ 0x30
 800b4e6:	4699      	mov	r9, r3
 800b4e8:	f103 0301 	add.w	r3, r3, #1
 800b4ec:	d0f9      	beq.n	800b4e2 <__gethex+0x4e>
 800b4ee:	f7ff ffbb 	bl	800b468 <__hexdig_fun>
 800b4f2:	fab0 f580 	clz	r5, r0
 800b4f6:	096d      	lsrs	r5, r5, #5
 800b4f8:	f04f 0b01 	mov.w	fp, #1
 800b4fc:	464a      	mov	r2, r9
 800b4fe:	4616      	mov	r6, r2
 800b500:	3201      	adds	r2, #1
 800b502:	7830      	ldrb	r0, [r6, #0]
 800b504:	f7ff ffb0 	bl	800b468 <__hexdig_fun>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d1f8      	bne.n	800b4fe <__gethex+0x6a>
 800b50c:	498d      	ldr	r1, [pc, #564]	@ (800b744 <__gethex+0x2b0>)
 800b50e:	2201      	movs	r2, #1
 800b510:	4630      	mov	r0, r6
 800b512:	f7fe ff98 	bl	800a446 <strncmp>
 800b516:	2800      	cmp	r0, #0
 800b518:	d13f      	bne.n	800b59a <__gethex+0x106>
 800b51a:	b944      	cbnz	r4, 800b52e <__gethex+0x9a>
 800b51c:	1c74      	adds	r4, r6, #1
 800b51e:	4622      	mov	r2, r4
 800b520:	4616      	mov	r6, r2
 800b522:	3201      	adds	r2, #1
 800b524:	7830      	ldrb	r0, [r6, #0]
 800b526:	f7ff ff9f 	bl	800b468 <__hexdig_fun>
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d1f8      	bne.n	800b520 <__gethex+0x8c>
 800b52e:	1ba4      	subs	r4, r4, r6
 800b530:	00a7      	lsls	r7, r4, #2
 800b532:	7833      	ldrb	r3, [r6, #0]
 800b534:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b538:	2b50      	cmp	r3, #80	@ 0x50
 800b53a:	d13e      	bne.n	800b5ba <__gethex+0x126>
 800b53c:	7873      	ldrb	r3, [r6, #1]
 800b53e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b540:	d033      	beq.n	800b5aa <__gethex+0x116>
 800b542:	2b2d      	cmp	r3, #45	@ 0x2d
 800b544:	d034      	beq.n	800b5b0 <__gethex+0x11c>
 800b546:	1c71      	adds	r1, r6, #1
 800b548:	2400      	movs	r4, #0
 800b54a:	7808      	ldrb	r0, [r1, #0]
 800b54c:	f7ff ff8c 	bl	800b468 <__hexdig_fun>
 800b550:	1e43      	subs	r3, r0, #1
 800b552:	b2db      	uxtb	r3, r3
 800b554:	2b18      	cmp	r3, #24
 800b556:	d830      	bhi.n	800b5ba <__gethex+0x126>
 800b558:	f1a0 0210 	sub.w	r2, r0, #16
 800b55c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b560:	f7ff ff82 	bl	800b468 <__hexdig_fun>
 800b564:	f100 3cff 	add.w	ip, r0, #4294967295
 800b568:	fa5f fc8c 	uxtb.w	ip, ip
 800b56c:	f1bc 0f18 	cmp.w	ip, #24
 800b570:	f04f 030a 	mov.w	r3, #10
 800b574:	d91e      	bls.n	800b5b4 <__gethex+0x120>
 800b576:	b104      	cbz	r4, 800b57a <__gethex+0xe6>
 800b578:	4252      	negs	r2, r2
 800b57a:	4417      	add	r7, r2
 800b57c:	f8ca 1000 	str.w	r1, [sl]
 800b580:	b1ed      	cbz	r5, 800b5be <__gethex+0x12a>
 800b582:	f1bb 0f00 	cmp.w	fp, #0
 800b586:	bf0c      	ite	eq
 800b588:	2506      	moveq	r5, #6
 800b58a:	2500      	movne	r5, #0
 800b58c:	4628      	mov	r0, r5
 800b58e:	b005      	add	sp, #20
 800b590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b594:	2500      	movs	r5, #0
 800b596:	462c      	mov	r4, r5
 800b598:	e7b0      	b.n	800b4fc <__gethex+0x68>
 800b59a:	2c00      	cmp	r4, #0
 800b59c:	d1c7      	bne.n	800b52e <__gethex+0x9a>
 800b59e:	4627      	mov	r7, r4
 800b5a0:	e7c7      	b.n	800b532 <__gethex+0x9e>
 800b5a2:	464e      	mov	r6, r9
 800b5a4:	462f      	mov	r7, r5
 800b5a6:	2501      	movs	r5, #1
 800b5a8:	e7c3      	b.n	800b532 <__gethex+0x9e>
 800b5aa:	2400      	movs	r4, #0
 800b5ac:	1cb1      	adds	r1, r6, #2
 800b5ae:	e7cc      	b.n	800b54a <__gethex+0xb6>
 800b5b0:	2401      	movs	r4, #1
 800b5b2:	e7fb      	b.n	800b5ac <__gethex+0x118>
 800b5b4:	fb03 0002 	mla	r0, r3, r2, r0
 800b5b8:	e7ce      	b.n	800b558 <__gethex+0xc4>
 800b5ba:	4631      	mov	r1, r6
 800b5bc:	e7de      	b.n	800b57c <__gethex+0xe8>
 800b5be:	eba6 0309 	sub.w	r3, r6, r9
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	2b07      	cmp	r3, #7
 800b5c8:	dc0a      	bgt.n	800b5e0 <__gethex+0x14c>
 800b5ca:	9801      	ldr	r0, [sp, #4]
 800b5cc:	f000 fa46 	bl	800ba5c <_Balloc>
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	b940      	cbnz	r0, 800b5e6 <__gethex+0x152>
 800b5d4:	4b5c      	ldr	r3, [pc, #368]	@ (800b748 <__gethex+0x2b4>)
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	21e4      	movs	r1, #228	@ 0xe4
 800b5da:	485c      	ldr	r0, [pc, #368]	@ (800b74c <__gethex+0x2b8>)
 800b5dc:	f7fd f8b0 	bl	8008740 <__assert_func>
 800b5e0:	3101      	adds	r1, #1
 800b5e2:	105b      	asrs	r3, r3, #1
 800b5e4:	e7ef      	b.n	800b5c6 <__gethex+0x132>
 800b5e6:	f100 0a14 	add.w	sl, r0, #20
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	4655      	mov	r5, sl
 800b5ee:	469b      	mov	fp, r3
 800b5f0:	45b1      	cmp	r9, r6
 800b5f2:	d337      	bcc.n	800b664 <__gethex+0x1d0>
 800b5f4:	f845 bb04 	str.w	fp, [r5], #4
 800b5f8:	eba5 050a 	sub.w	r5, r5, sl
 800b5fc:	10ad      	asrs	r5, r5, #2
 800b5fe:	6125      	str	r5, [r4, #16]
 800b600:	4658      	mov	r0, fp
 800b602:	f000 fb1d 	bl	800bc40 <__hi0bits>
 800b606:	016d      	lsls	r5, r5, #5
 800b608:	f8d8 6000 	ldr.w	r6, [r8]
 800b60c:	1a2d      	subs	r5, r5, r0
 800b60e:	42b5      	cmp	r5, r6
 800b610:	dd54      	ble.n	800b6bc <__gethex+0x228>
 800b612:	1bad      	subs	r5, r5, r6
 800b614:	4629      	mov	r1, r5
 800b616:	4620      	mov	r0, r4
 800b618:	f000 fea9 	bl	800c36e <__any_on>
 800b61c:	4681      	mov	r9, r0
 800b61e:	b178      	cbz	r0, 800b640 <__gethex+0x1ac>
 800b620:	1e6b      	subs	r3, r5, #1
 800b622:	1159      	asrs	r1, r3, #5
 800b624:	f003 021f 	and.w	r2, r3, #31
 800b628:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b62c:	f04f 0901 	mov.w	r9, #1
 800b630:	fa09 f202 	lsl.w	r2, r9, r2
 800b634:	420a      	tst	r2, r1
 800b636:	d003      	beq.n	800b640 <__gethex+0x1ac>
 800b638:	454b      	cmp	r3, r9
 800b63a:	dc36      	bgt.n	800b6aa <__gethex+0x216>
 800b63c:	f04f 0902 	mov.w	r9, #2
 800b640:	4629      	mov	r1, r5
 800b642:	4620      	mov	r0, r4
 800b644:	f7ff febe 	bl	800b3c4 <rshift>
 800b648:	442f      	add	r7, r5
 800b64a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b64e:	42bb      	cmp	r3, r7
 800b650:	da42      	bge.n	800b6d8 <__gethex+0x244>
 800b652:	9801      	ldr	r0, [sp, #4]
 800b654:	4621      	mov	r1, r4
 800b656:	f000 fa41 	bl	800badc <_Bfree>
 800b65a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b65c:	2300      	movs	r3, #0
 800b65e:	6013      	str	r3, [r2, #0]
 800b660:	25a3      	movs	r5, #163	@ 0xa3
 800b662:	e793      	b.n	800b58c <__gethex+0xf8>
 800b664:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b668:	2a2e      	cmp	r2, #46	@ 0x2e
 800b66a:	d012      	beq.n	800b692 <__gethex+0x1fe>
 800b66c:	2b20      	cmp	r3, #32
 800b66e:	d104      	bne.n	800b67a <__gethex+0x1e6>
 800b670:	f845 bb04 	str.w	fp, [r5], #4
 800b674:	f04f 0b00 	mov.w	fp, #0
 800b678:	465b      	mov	r3, fp
 800b67a:	7830      	ldrb	r0, [r6, #0]
 800b67c:	9303      	str	r3, [sp, #12]
 800b67e:	f7ff fef3 	bl	800b468 <__hexdig_fun>
 800b682:	9b03      	ldr	r3, [sp, #12]
 800b684:	f000 000f 	and.w	r0, r0, #15
 800b688:	4098      	lsls	r0, r3
 800b68a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b68e:	3304      	adds	r3, #4
 800b690:	e7ae      	b.n	800b5f0 <__gethex+0x15c>
 800b692:	45b1      	cmp	r9, r6
 800b694:	d8ea      	bhi.n	800b66c <__gethex+0x1d8>
 800b696:	492b      	ldr	r1, [pc, #172]	@ (800b744 <__gethex+0x2b0>)
 800b698:	9303      	str	r3, [sp, #12]
 800b69a:	2201      	movs	r2, #1
 800b69c:	4630      	mov	r0, r6
 800b69e:	f7fe fed2 	bl	800a446 <strncmp>
 800b6a2:	9b03      	ldr	r3, [sp, #12]
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d1e1      	bne.n	800b66c <__gethex+0x1d8>
 800b6a8:	e7a2      	b.n	800b5f0 <__gethex+0x15c>
 800b6aa:	1ea9      	subs	r1, r5, #2
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f000 fe5e 	bl	800c36e <__any_on>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d0c2      	beq.n	800b63c <__gethex+0x1a8>
 800b6b6:	f04f 0903 	mov.w	r9, #3
 800b6ba:	e7c1      	b.n	800b640 <__gethex+0x1ac>
 800b6bc:	da09      	bge.n	800b6d2 <__gethex+0x23e>
 800b6be:	1b75      	subs	r5, r6, r5
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	9801      	ldr	r0, [sp, #4]
 800b6c4:	462a      	mov	r2, r5
 800b6c6:	f000 fc19 	bl	800befc <__lshift>
 800b6ca:	1b7f      	subs	r7, r7, r5
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	f100 0a14 	add.w	sl, r0, #20
 800b6d2:	f04f 0900 	mov.w	r9, #0
 800b6d6:	e7b8      	b.n	800b64a <__gethex+0x1b6>
 800b6d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b6dc:	42bd      	cmp	r5, r7
 800b6de:	dd6f      	ble.n	800b7c0 <__gethex+0x32c>
 800b6e0:	1bed      	subs	r5, r5, r7
 800b6e2:	42ae      	cmp	r6, r5
 800b6e4:	dc34      	bgt.n	800b750 <__gethex+0x2bc>
 800b6e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6ea:	2b02      	cmp	r3, #2
 800b6ec:	d022      	beq.n	800b734 <__gethex+0x2a0>
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d024      	beq.n	800b73c <__gethex+0x2a8>
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d115      	bne.n	800b722 <__gethex+0x28e>
 800b6f6:	42ae      	cmp	r6, r5
 800b6f8:	d113      	bne.n	800b722 <__gethex+0x28e>
 800b6fa:	2e01      	cmp	r6, #1
 800b6fc:	d10b      	bne.n	800b716 <__gethex+0x282>
 800b6fe:	9a02      	ldr	r2, [sp, #8]
 800b700:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b704:	6013      	str	r3, [r2, #0]
 800b706:	2301      	movs	r3, #1
 800b708:	6123      	str	r3, [r4, #16]
 800b70a:	f8ca 3000 	str.w	r3, [sl]
 800b70e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b710:	2562      	movs	r5, #98	@ 0x62
 800b712:	601c      	str	r4, [r3, #0]
 800b714:	e73a      	b.n	800b58c <__gethex+0xf8>
 800b716:	1e71      	subs	r1, r6, #1
 800b718:	4620      	mov	r0, r4
 800b71a:	f000 fe28 	bl	800c36e <__any_on>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d1ed      	bne.n	800b6fe <__gethex+0x26a>
 800b722:	9801      	ldr	r0, [sp, #4]
 800b724:	4621      	mov	r1, r4
 800b726:	f000 f9d9 	bl	800badc <_Bfree>
 800b72a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b72c:	2300      	movs	r3, #0
 800b72e:	6013      	str	r3, [r2, #0]
 800b730:	2550      	movs	r5, #80	@ 0x50
 800b732:	e72b      	b.n	800b58c <__gethex+0xf8>
 800b734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1f3      	bne.n	800b722 <__gethex+0x28e>
 800b73a:	e7e0      	b.n	800b6fe <__gethex+0x26a>
 800b73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1dd      	bne.n	800b6fe <__gethex+0x26a>
 800b742:	e7ee      	b.n	800b722 <__gethex+0x28e>
 800b744:	0800d1d5 	.word	0x0800d1d5
 800b748:	0800d2ee 	.word	0x0800d2ee
 800b74c:	0800d2ff 	.word	0x0800d2ff
 800b750:	1e6f      	subs	r7, r5, #1
 800b752:	f1b9 0f00 	cmp.w	r9, #0
 800b756:	d130      	bne.n	800b7ba <__gethex+0x326>
 800b758:	b127      	cbz	r7, 800b764 <__gethex+0x2d0>
 800b75a:	4639      	mov	r1, r7
 800b75c:	4620      	mov	r0, r4
 800b75e:	f000 fe06 	bl	800c36e <__any_on>
 800b762:	4681      	mov	r9, r0
 800b764:	117a      	asrs	r2, r7, #5
 800b766:	2301      	movs	r3, #1
 800b768:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b76c:	f007 071f 	and.w	r7, r7, #31
 800b770:	40bb      	lsls	r3, r7
 800b772:	4213      	tst	r3, r2
 800b774:	4629      	mov	r1, r5
 800b776:	4620      	mov	r0, r4
 800b778:	bf18      	it	ne
 800b77a:	f049 0902 	orrne.w	r9, r9, #2
 800b77e:	f7ff fe21 	bl	800b3c4 <rshift>
 800b782:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b786:	1b76      	subs	r6, r6, r5
 800b788:	2502      	movs	r5, #2
 800b78a:	f1b9 0f00 	cmp.w	r9, #0
 800b78e:	d047      	beq.n	800b820 <__gethex+0x38c>
 800b790:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b794:	2b02      	cmp	r3, #2
 800b796:	d015      	beq.n	800b7c4 <__gethex+0x330>
 800b798:	2b03      	cmp	r3, #3
 800b79a:	d017      	beq.n	800b7cc <__gethex+0x338>
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d109      	bne.n	800b7b4 <__gethex+0x320>
 800b7a0:	f019 0f02 	tst.w	r9, #2
 800b7a4:	d006      	beq.n	800b7b4 <__gethex+0x320>
 800b7a6:	f8da 3000 	ldr.w	r3, [sl]
 800b7aa:	ea49 0903 	orr.w	r9, r9, r3
 800b7ae:	f019 0f01 	tst.w	r9, #1
 800b7b2:	d10e      	bne.n	800b7d2 <__gethex+0x33e>
 800b7b4:	f045 0510 	orr.w	r5, r5, #16
 800b7b8:	e032      	b.n	800b820 <__gethex+0x38c>
 800b7ba:	f04f 0901 	mov.w	r9, #1
 800b7be:	e7d1      	b.n	800b764 <__gethex+0x2d0>
 800b7c0:	2501      	movs	r5, #1
 800b7c2:	e7e2      	b.n	800b78a <__gethex+0x2f6>
 800b7c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7c6:	f1c3 0301 	rsb	r3, r3, #1
 800b7ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d0f0      	beq.n	800b7b4 <__gethex+0x320>
 800b7d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b7d6:	f104 0314 	add.w	r3, r4, #20
 800b7da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b7de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b7e2:	f04f 0c00 	mov.w	ip, #0
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b7f0:	d01b      	beq.n	800b82a <__gethex+0x396>
 800b7f2:	3201      	adds	r2, #1
 800b7f4:	6002      	str	r2, [r0, #0]
 800b7f6:	2d02      	cmp	r5, #2
 800b7f8:	f104 0314 	add.w	r3, r4, #20
 800b7fc:	d13c      	bne.n	800b878 <__gethex+0x3e4>
 800b7fe:	f8d8 2000 	ldr.w	r2, [r8]
 800b802:	3a01      	subs	r2, #1
 800b804:	42b2      	cmp	r2, r6
 800b806:	d109      	bne.n	800b81c <__gethex+0x388>
 800b808:	1171      	asrs	r1, r6, #5
 800b80a:	2201      	movs	r2, #1
 800b80c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b810:	f006 061f 	and.w	r6, r6, #31
 800b814:	fa02 f606 	lsl.w	r6, r2, r6
 800b818:	421e      	tst	r6, r3
 800b81a:	d13a      	bne.n	800b892 <__gethex+0x3fe>
 800b81c:	f045 0520 	orr.w	r5, r5, #32
 800b820:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b822:	601c      	str	r4, [r3, #0]
 800b824:	9b02      	ldr	r3, [sp, #8]
 800b826:	601f      	str	r7, [r3, #0]
 800b828:	e6b0      	b.n	800b58c <__gethex+0xf8>
 800b82a:	4299      	cmp	r1, r3
 800b82c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b830:	d8d9      	bhi.n	800b7e6 <__gethex+0x352>
 800b832:	68a3      	ldr	r3, [r4, #8]
 800b834:	459b      	cmp	fp, r3
 800b836:	db17      	blt.n	800b868 <__gethex+0x3d4>
 800b838:	6861      	ldr	r1, [r4, #4]
 800b83a:	9801      	ldr	r0, [sp, #4]
 800b83c:	3101      	adds	r1, #1
 800b83e:	f000 f90d 	bl	800ba5c <_Balloc>
 800b842:	4681      	mov	r9, r0
 800b844:	b918      	cbnz	r0, 800b84e <__gethex+0x3ba>
 800b846:	4b1a      	ldr	r3, [pc, #104]	@ (800b8b0 <__gethex+0x41c>)
 800b848:	4602      	mov	r2, r0
 800b84a:	2184      	movs	r1, #132	@ 0x84
 800b84c:	e6c5      	b.n	800b5da <__gethex+0x146>
 800b84e:	6922      	ldr	r2, [r4, #16]
 800b850:	3202      	adds	r2, #2
 800b852:	f104 010c 	add.w	r1, r4, #12
 800b856:	0092      	lsls	r2, r2, #2
 800b858:	300c      	adds	r0, #12
 800b85a:	f7fe feea 	bl	800a632 <memcpy>
 800b85e:	4621      	mov	r1, r4
 800b860:	9801      	ldr	r0, [sp, #4]
 800b862:	f000 f93b 	bl	800badc <_Bfree>
 800b866:	464c      	mov	r4, r9
 800b868:	6923      	ldr	r3, [r4, #16]
 800b86a:	1c5a      	adds	r2, r3, #1
 800b86c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b870:	6122      	str	r2, [r4, #16]
 800b872:	2201      	movs	r2, #1
 800b874:	615a      	str	r2, [r3, #20]
 800b876:	e7be      	b.n	800b7f6 <__gethex+0x362>
 800b878:	6922      	ldr	r2, [r4, #16]
 800b87a:	455a      	cmp	r2, fp
 800b87c:	dd0b      	ble.n	800b896 <__gethex+0x402>
 800b87e:	2101      	movs	r1, #1
 800b880:	4620      	mov	r0, r4
 800b882:	f7ff fd9f 	bl	800b3c4 <rshift>
 800b886:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b88a:	3701      	adds	r7, #1
 800b88c:	42bb      	cmp	r3, r7
 800b88e:	f6ff aee0 	blt.w	800b652 <__gethex+0x1be>
 800b892:	2501      	movs	r5, #1
 800b894:	e7c2      	b.n	800b81c <__gethex+0x388>
 800b896:	f016 061f 	ands.w	r6, r6, #31
 800b89a:	d0fa      	beq.n	800b892 <__gethex+0x3fe>
 800b89c:	4453      	add	r3, sl
 800b89e:	f1c6 0620 	rsb	r6, r6, #32
 800b8a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b8a6:	f000 f9cb 	bl	800bc40 <__hi0bits>
 800b8aa:	42b0      	cmp	r0, r6
 800b8ac:	dbe7      	blt.n	800b87e <__gethex+0x3ea>
 800b8ae:	e7f0      	b.n	800b892 <__gethex+0x3fe>
 800b8b0:	0800d2ee 	.word	0x0800d2ee

0800b8b4 <L_shift>:
 800b8b4:	f1c2 0208 	rsb	r2, r2, #8
 800b8b8:	0092      	lsls	r2, r2, #2
 800b8ba:	b570      	push	{r4, r5, r6, lr}
 800b8bc:	f1c2 0620 	rsb	r6, r2, #32
 800b8c0:	6843      	ldr	r3, [r0, #4]
 800b8c2:	6804      	ldr	r4, [r0, #0]
 800b8c4:	fa03 f506 	lsl.w	r5, r3, r6
 800b8c8:	432c      	orrs	r4, r5
 800b8ca:	40d3      	lsrs	r3, r2
 800b8cc:	6004      	str	r4, [r0, #0]
 800b8ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800b8d2:	4288      	cmp	r0, r1
 800b8d4:	d3f4      	bcc.n	800b8c0 <L_shift+0xc>
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}

0800b8d8 <__match>:
 800b8d8:	b530      	push	{r4, r5, lr}
 800b8da:	6803      	ldr	r3, [r0, #0]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8e2:	b914      	cbnz	r4, 800b8ea <__match+0x12>
 800b8e4:	6003      	str	r3, [r0, #0]
 800b8e6:	2001      	movs	r0, #1
 800b8e8:	bd30      	pop	{r4, r5, pc}
 800b8ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b8f2:	2d19      	cmp	r5, #25
 800b8f4:	bf98      	it	ls
 800b8f6:	3220      	addls	r2, #32
 800b8f8:	42a2      	cmp	r2, r4
 800b8fa:	d0f0      	beq.n	800b8de <__match+0x6>
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	e7f3      	b.n	800b8e8 <__match+0x10>

0800b900 <__hexnan>:
 800b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	680b      	ldr	r3, [r1, #0]
 800b906:	6801      	ldr	r1, [r0, #0]
 800b908:	115e      	asrs	r6, r3, #5
 800b90a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b90e:	f013 031f 	ands.w	r3, r3, #31
 800b912:	b087      	sub	sp, #28
 800b914:	bf18      	it	ne
 800b916:	3604      	addne	r6, #4
 800b918:	2500      	movs	r5, #0
 800b91a:	1f37      	subs	r7, r6, #4
 800b91c:	4682      	mov	sl, r0
 800b91e:	4690      	mov	r8, r2
 800b920:	9301      	str	r3, [sp, #4]
 800b922:	f846 5c04 	str.w	r5, [r6, #-4]
 800b926:	46b9      	mov	r9, r7
 800b928:	463c      	mov	r4, r7
 800b92a:	9502      	str	r5, [sp, #8]
 800b92c:	46ab      	mov	fp, r5
 800b92e:	784a      	ldrb	r2, [r1, #1]
 800b930:	1c4b      	adds	r3, r1, #1
 800b932:	9303      	str	r3, [sp, #12]
 800b934:	b342      	cbz	r2, 800b988 <__hexnan+0x88>
 800b936:	4610      	mov	r0, r2
 800b938:	9105      	str	r1, [sp, #20]
 800b93a:	9204      	str	r2, [sp, #16]
 800b93c:	f7ff fd94 	bl	800b468 <__hexdig_fun>
 800b940:	2800      	cmp	r0, #0
 800b942:	d151      	bne.n	800b9e8 <__hexnan+0xe8>
 800b944:	9a04      	ldr	r2, [sp, #16]
 800b946:	9905      	ldr	r1, [sp, #20]
 800b948:	2a20      	cmp	r2, #32
 800b94a:	d818      	bhi.n	800b97e <__hexnan+0x7e>
 800b94c:	9b02      	ldr	r3, [sp, #8]
 800b94e:	459b      	cmp	fp, r3
 800b950:	dd13      	ble.n	800b97a <__hexnan+0x7a>
 800b952:	454c      	cmp	r4, r9
 800b954:	d206      	bcs.n	800b964 <__hexnan+0x64>
 800b956:	2d07      	cmp	r5, #7
 800b958:	dc04      	bgt.n	800b964 <__hexnan+0x64>
 800b95a:	462a      	mov	r2, r5
 800b95c:	4649      	mov	r1, r9
 800b95e:	4620      	mov	r0, r4
 800b960:	f7ff ffa8 	bl	800b8b4 <L_shift>
 800b964:	4544      	cmp	r4, r8
 800b966:	d952      	bls.n	800ba0e <__hexnan+0x10e>
 800b968:	2300      	movs	r3, #0
 800b96a:	f1a4 0904 	sub.w	r9, r4, #4
 800b96e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b972:	f8cd b008 	str.w	fp, [sp, #8]
 800b976:	464c      	mov	r4, r9
 800b978:	461d      	mov	r5, r3
 800b97a:	9903      	ldr	r1, [sp, #12]
 800b97c:	e7d7      	b.n	800b92e <__hexnan+0x2e>
 800b97e:	2a29      	cmp	r2, #41	@ 0x29
 800b980:	d157      	bne.n	800ba32 <__hexnan+0x132>
 800b982:	3102      	adds	r1, #2
 800b984:	f8ca 1000 	str.w	r1, [sl]
 800b988:	f1bb 0f00 	cmp.w	fp, #0
 800b98c:	d051      	beq.n	800ba32 <__hexnan+0x132>
 800b98e:	454c      	cmp	r4, r9
 800b990:	d206      	bcs.n	800b9a0 <__hexnan+0xa0>
 800b992:	2d07      	cmp	r5, #7
 800b994:	dc04      	bgt.n	800b9a0 <__hexnan+0xa0>
 800b996:	462a      	mov	r2, r5
 800b998:	4649      	mov	r1, r9
 800b99a:	4620      	mov	r0, r4
 800b99c:	f7ff ff8a 	bl	800b8b4 <L_shift>
 800b9a0:	4544      	cmp	r4, r8
 800b9a2:	d936      	bls.n	800ba12 <__hexnan+0x112>
 800b9a4:	f1a8 0204 	sub.w	r2, r8, #4
 800b9a8:	4623      	mov	r3, r4
 800b9aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800b9ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800b9b2:	429f      	cmp	r7, r3
 800b9b4:	d2f9      	bcs.n	800b9aa <__hexnan+0xaa>
 800b9b6:	1b3b      	subs	r3, r7, r4
 800b9b8:	f023 0303 	bic.w	r3, r3, #3
 800b9bc:	3304      	adds	r3, #4
 800b9be:	3401      	adds	r4, #1
 800b9c0:	3e03      	subs	r6, #3
 800b9c2:	42b4      	cmp	r4, r6
 800b9c4:	bf88      	it	hi
 800b9c6:	2304      	movhi	r3, #4
 800b9c8:	4443      	add	r3, r8
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f843 2b04 	str.w	r2, [r3], #4
 800b9d0:	429f      	cmp	r7, r3
 800b9d2:	d2fb      	bcs.n	800b9cc <__hexnan+0xcc>
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	b91b      	cbnz	r3, 800b9e0 <__hexnan+0xe0>
 800b9d8:	4547      	cmp	r7, r8
 800b9da:	d128      	bne.n	800ba2e <__hexnan+0x12e>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	603b      	str	r3, [r7, #0]
 800b9e0:	2005      	movs	r0, #5
 800b9e2:	b007      	add	sp, #28
 800b9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e8:	3501      	adds	r5, #1
 800b9ea:	2d08      	cmp	r5, #8
 800b9ec:	f10b 0b01 	add.w	fp, fp, #1
 800b9f0:	dd06      	ble.n	800ba00 <__hexnan+0x100>
 800b9f2:	4544      	cmp	r4, r8
 800b9f4:	d9c1      	bls.n	800b97a <__hexnan+0x7a>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9fc:	2501      	movs	r5, #1
 800b9fe:	3c04      	subs	r4, #4
 800ba00:	6822      	ldr	r2, [r4, #0]
 800ba02:	f000 000f 	and.w	r0, r0, #15
 800ba06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ba0a:	6020      	str	r0, [r4, #0]
 800ba0c:	e7b5      	b.n	800b97a <__hexnan+0x7a>
 800ba0e:	2508      	movs	r5, #8
 800ba10:	e7b3      	b.n	800b97a <__hexnan+0x7a>
 800ba12:	9b01      	ldr	r3, [sp, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d0dd      	beq.n	800b9d4 <__hexnan+0xd4>
 800ba18:	f1c3 0320 	rsb	r3, r3, #32
 800ba1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba20:	40da      	lsrs	r2, r3
 800ba22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ba26:	4013      	ands	r3, r2
 800ba28:	f846 3c04 	str.w	r3, [r6, #-4]
 800ba2c:	e7d2      	b.n	800b9d4 <__hexnan+0xd4>
 800ba2e:	3f04      	subs	r7, #4
 800ba30:	e7d0      	b.n	800b9d4 <__hexnan+0xd4>
 800ba32:	2004      	movs	r0, #4
 800ba34:	e7d5      	b.n	800b9e2 <__hexnan+0xe2>

0800ba36 <__ascii_mbtowc>:
 800ba36:	b082      	sub	sp, #8
 800ba38:	b901      	cbnz	r1, 800ba3c <__ascii_mbtowc+0x6>
 800ba3a:	a901      	add	r1, sp, #4
 800ba3c:	b142      	cbz	r2, 800ba50 <__ascii_mbtowc+0x1a>
 800ba3e:	b14b      	cbz	r3, 800ba54 <__ascii_mbtowc+0x1e>
 800ba40:	7813      	ldrb	r3, [r2, #0]
 800ba42:	600b      	str	r3, [r1, #0]
 800ba44:	7812      	ldrb	r2, [r2, #0]
 800ba46:	1e10      	subs	r0, r2, #0
 800ba48:	bf18      	it	ne
 800ba4a:	2001      	movne	r0, #1
 800ba4c:	b002      	add	sp, #8
 800ba4e:	4770      	bx	lr
 800ba50:	4610      	mov	r0, r2
 800ba52:	e7fb      	b.n	800ba4c <__ascii_mbtowc+0x16>
 800ba54:	f06f 0001 	mvn.w	r0, #1
 800ba58:	e7f8      	b.n	800ba4c <__ascii_mbtowc+0x16>
	...

0800ba5c <_Balloc>:
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	69c6      	ldr	r6, [r0, #28]
 800ba60:	4604      	mov	r4, r0
 800ba62:	460d      	mov	r5, r1
 800ba64:	b976      	cbnz	r6, 800ba84 <_Balloc+0x28>
 800ba66:	2010      	movs	r0, #16
 800ba68:	f7fc fe88 	bl	800877c <malloc>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	61e0      	str	r0, [r4, #28]
 800ba70:	b920      	cbnz	r0, 800ba7c <_Balloc+0x20>
 800ba72:	4b18      	ldr	r3, [pc, #96]	@ (800bad4 <_Balloc+0x78>)
 800ba74:	4818      	ldr	r0, [pc, #96]	@ (800bad8 <_Balloc+0x7c>)
 800ba76:	216b      	movs	r1, #107	@ 0x6b
 800ba78:	f7fc fe62 	bl	8008740 <__assert_func>
 800ba7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba80:	6006      	str	r6, [r0, #0]
 800ba82:	60c6      	str	r6, [r0, #12]
 800ba84:	69e6      	ldr	r6, [r4, #28]
 800ba86:	68f3      	ldr	r3, [r6, #12]
 800ba88:	b183      	cbz	r3, 800baac <_Balloc+0x50>
 800ba8a:	69e3      	ldr	r3, [r4, #28]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba92:	b9b8      	cbnz	r0, 800bac4 <_Balloc+0x68>
 800ba94:	2101      	movs	r1, #1
 800ba96:	fa01 f605 	lsl.w	r6, r1, r5
 800ba9a:	1d72      	adds	r2, r6, #5
 800ba9c:	0092      	lsls	r2, r2, #2
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f001 f946 	bl	800cd30 <_calloc_r>
 800baa4:	b160      	cbz	r0, 800bac0 <_Balloc+0x64>
 800baa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800baaa:	e00e      	b.n	800baca <_Balloc+0x6e>
 800baac:	2221      	movs	r2, #33	@ 0x21
 800baae:	2104      	movs	r1, #4
 800bab0:	4620      	mov	r0, r4
 800bab2:	f001 f93d 	bl	800cd30 <_calloc_r>
 800bab6:	69e3      	ldr	r3, [r4, #28]
 800bab8:	60f0      	str	r0, [r6, #12]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1e4      	bne.n	800ba8a <_Balloc+0x2e>
 800bac0:	2000      	movs	r0, #0
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	6802      	ldr	r2, [r0, #0]
 800bac6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800baca:	2300      	movs	r3, #0
 800bacc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bad0:	e7f7      	b.n	800bac2 <_Balloc+0x66>
 800bad2:	bf00      	nop
 800bad4:	0800d210 	.word	0x0800d210
 800bad8:	0800d35f 	.word	0x0800d35f

0800badc <_Bfree>:
 800badc:	b570      	push	{r4, r5, r6, lr}
 800bade:	69c6      	ldr	r6, [r0, #28]
 800bae0:	4605      	mov	r5, r0
 800bae2:	460c      	mov	r4, r1
 800bae4:	b976      	cbnz	r6, 800bb04 <_Bfree+0x28>
 800bae6:	2010      	movs	r0, #16
 800bae8:	f7fc fe48 	bl	800877c <malloc>
 800baec:	4602      	mov	r2, r0
 800baee:	61e8      	str	r0, [r5, #28]
 800baf0:	b920      	cbnz	r0, 800bafc <_Bfree+0x20>
 800baf2:	4b09      	ldr	r3, [pc, #36]	@ (800bb18 <_Bfree+0x3c>)
 800baf4:	4809      	ldr	r0, [pc, #36]	@ (800bb1c <_Bfree+0x40>)
 800baf6:	218f      	movs	r1, #143	@ 0x8f
 800baf8:	f7fc fe22 	bl	8008740 <__assert_func>
 800bafc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb00:	6006      	str	r6, [r0, #0]
 800bb02:	60c6      	str	r6, [r0, #12]
 800bb04:	b13c      	cbz	r4, 800bb16 <_Bfree+0x3a>
 800bb06:	69eb      	ldr	r3, [r5, #28]
 800bb08:	6862      	ldr	r2, [r4, #4]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb10:	6021      	str	r1, [r4, #0]
 800bb12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb16:	bd70      	pop	{r4, r5, r6, pc}
 800bb18:	0800d210 	.word	0x0800d210
 800bb1c:	0800d35f 	.word	0x0800d35f

0800bb20 <__multadd>:
 800bb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb24:	690d      	ldr	r5, [r1, #16]
 800bb26:	4607      	mov	r7, r0
 800bb28:	460c      	mov	r4, r1
 800bb2a:	461e      	mov	r6, r3
 800bb2c:	f101 0c14 	add.w	ip, r1, #20
 800bb30:	2000      	movs	r0, #0
 800bb32:	f8dc 3000 	ldr.w	r3, [ip]
 800bb36:	b299      	uxth	r1, r3
 800bb38:	fb02 6101 	mla	r1, r2, r1, r6
 800bb3c:	0c1e      	lsrs	r6, r3, #16
 800bb3e:	0c0b      	lsrs	r3, r1, #16
 800bb40:	fb02 3306 	mla	r3, r2, r6, r3
 800bb44:	b289      	uxth	r1, r1
 800bb46:	3001      	adds	r0, #1
 800bb48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb4c:	4285      	cmp	r5, r0
 800bb4e:	f84c 1b04 	str.w	r1, [ip], #4
 800bb52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb56:	dcec      	bgt.n	800bb32 <__multadd+0x12>
 800bb58:	b30e      	cbz	r6, 800bb9e <__multadd+0x7e>
 800bb5a:	68a3      	ldr	r3, [r4, #8]
 800bb5c:	42ab      	cmp	r3, r5
 800bb5e:	dc19      	bgt.n	800bb94 <__multadd+0x74>
 800bb60:	6861      	ldr	r1, [r4, #4]
 800bb62:	4638      	mov	r0, r7
 800bb64:	3101      	adds	r1, #1
 800bb66:	f7ff ff79 	bl	800ba5c <_Balloc>
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	b928      	cbnz	r0, 800bb7a <__multadd+0x5a>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	4b0c      	ldr	r3, [pc, #48]	@ (800bba4 <__multadd+0x84>)
 800bb72:	480d      	ldr	r0, [pc, #52]	@ (800bba8 <__multadd+0x88>)
 800bb74:	21ba      	movs	r1, #186	@ 0xba
 800bb76:	f7fc fde3 	bl	8008740 <__assert_func>
 800bb7a:	6922      	ldr	r2, [r4, #16]
 800bb7c:	3202      	adds	r2, #2
 800bb7e:	f104 010c 	add.w	r1, r4, #12
 800bb82:	0092      	lsls	r2, r2, #2
 800bb84:	300c      	adds	r0, #12
 800bb86:	f7fe fd54 	bl	800a632 <memcpy>
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	f7ff ffa5 	bl	800badc <_Bfree>
 800bb92:	4644      	mov	r4, r8
 800bb94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb98:	3501      	adds	r5, #1
 800bb9a:	615e      	str	r6, [r3, #20]
 800bb9c:	6125      	str	r5, [r4, #16]
 800bb9e:	4620      	mov	r0, r4
 800bba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba4:	0800d2ee 	.word	0x0800d2ee
 800bba8:	0800d35f 	.word	0x0800d35f

0800bbac <__s2b>:
 800bbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	4615      	mov	r5, r2
 800bbb4:	461f      	mov	r7, r3
 800bbb6:	2209      	movs	r2, #9
 800bbb8:	3308      	adds	r3, #8
 800bbba:	4606      	mov	r6, r0
 800bbbc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	db09      	blt.n	800bbdc <__s2b+0x30>
 800bbc8:	4630      	mov	r0, r6
 800bbca:	f7ff ff47 	bl	800ba5c <_Balloc>
 800bbce:	b940      	cbnz	r0, 800bbe2 <__s2b+0x36>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	4b19      	ldr	r3, [pc, #100]	@ (800bc38 <__s2b+0x8c>)
 800bbd4:	4819      	ldr	r0, [pc, #100]	@ (800bc3c <__s2b+0x90>)
 800bbd6:	21d3      	movs	r1, #211	@ 0xd3
 800bbd8:	f7fc fdb2 	bl	8008740 <__assert_func>
 800bbdc:	0052      	lsls	r2, r2, #1
 800bbde:	3101      	adds	r1, #1
 800bbe0:	e7f0      	b.n	800bbc4 <__s2b+0x18>
 800bbe2:	9b08      	ldr	r3, [sp, #32]
 800bbe4:	6143      	str	r3, [r0, #20]
 800bbe6:	2d09      	cmp	r5, #9
 800bbe8:	f04f 0301 	mov.w	r3, #1
 800bbec:	6103      	str	r3, [r0, #16]
 800bbee:	dd16      	ble.n	800bc1e <__s2b+0x72>
 800bbf0:	f104 0909 	add.w	r9, r4, #9
 800bbf4:	46c8      	mov	r8, r9
 800bbf6:	442c      	add	r4, r5
 800bbf8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bbfc:	4601      	mov	r1, r0
 800bbfe:	3b30      	subs	r3, #48	@ 0x30
 800bc00:	220a      	movs	r2, #10
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7ff ff8c 	bl	800bb20 <__multadd>
 800bc08:	45a0      	cmp	r8, r4
 800bc0a:	d1f5      	bne.n	800bbf8 <__s2b+0x4c>
 800bc0c:	f1a5 0408 	sub.w	r4, r5, #8
 800bc10:	444c      	add	r4, r9
 800bc12:	1b2d      	subs	r5, r5, r4
 800bc14:	1963      	adds	r3, r4, r5
 800bc16:	42bb      	cmp	r3, r7
 800bc18:	db04      	blt.n	800bc24 <__s2b+0x78>
 800bc1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc1e:	340a      	adds	r4, #10
 800bc20:	2509      	movs	r5, #9
 800bc22:	e7f6      	b.n	800bc12 <__s2b+0x66>
 800bc24:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc28:	4601      	mov	r1, r0
 800bc2a:	3b30      	subs	r3, #48	@ 0x30
 800bc2c:	220a      	movs	r2, #10
 800bc2e:	4630      	mov	r0, r6
 800bc30:	f7ff ff76 	bl	800bb20 <__multadd>
 800bc34:	e7ee      	b.n	800bc14 <__s2b+0x68>
 800bc36:	bf00      	nop
 800bc38:	0800d2ee 	.word	0x0800d2ee
 800bc3c:	0800d35f 	.word	0x0800d35f

0800bc40 <__hi0bits>:
 800bc40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bc44:	4603      	mov	r3, r0
 800bc46:	bf36      	itet	cc
 800bc48:	0403      	lslcc	r3, r0, #16
 800bc4a:	2000      	movcs	r0, #0
 800bc4c:	2010      	movcc	r0, #16
 800bc4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc52:	bf3c      	itt	cc
 800bc54:	021b      	lslcc	r3, r3, #8
 800bc56:	3008      	addcc	r0, #8
 800bc58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc5c:	bf3c      	itt	cc
 800bc5e:	011b      	lslcc	r3, r3, #4
 800bc60:	3004      	addcc	r0, #4
 800bc62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc66:	bf3c      	itt	cc
 800bc68:	009b      	lslcc	r3, r3, #2
 800bc6a:	3002      	addcc	r0, #2
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	db05      	blt.n	800bc7c <__hi0bits+0x3c>
 800bc70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bc74:	f100 0001 	add.w	r0, r0, #1
 800bc78:	bf08      	it	eq
 800bc7a:	2020      	moveq	r0, #32
 800bc7c:	4770      	bx	lr

0800bc7e <__lo0bits>:
 800bc7e:	6803      	ldr	r3, [r0, #0]
 800bc80:	4602      	mov	r2, r0
 800bc82:	f013 0007 	ands.w	r0, r3, #7
 800bc86:	d00b      	beq.n	800bca0 <__lo0bits+0x22>
 800bc88:	07d9      	lsls	r1, r3, #31
 800bc8a:	d421      	bmi.n	800bcd0 <__lo0bits+0x52>
 800bc8c:	0798      	lsls	r0, r3, #30
 800bc8e:	bf49      	itett	mi
 800bc90:	085b      	lsrmi	r3, r3, #1
 800bc92:	089b      	lsrpl	r3, r3, #2
 800bc94:	2001      	movmi	r0, #1
 800bc96:	6013      	strmi	r3, [r2, #0]
 800bc98:	bf5c      	itt	pl
 800bc9a:	6013      	strpl	r3, [r2, #0]
 800bc9c:	2002      	movpl	r0, #2
 800bc9e:	4770      	bx	lr
 800bca0:	b299      	uxth	r1, r3
 800bca2:	b909      	cbnz	r1, 800bca8 <__lo0bits+0x2a>
 800bca4:	0c1b      	lsrs	r3, r3, #16
 800bca6:	2010      	movs	r0, #16
 800bca8:	b2d9      	uxtb	r1, r3
 800bcaa:	b909      	cbnz	r1, 800bcb0 <__lo0bits+0x32>
 800bcac:	3008      	adds	r0, #8
 800bcae:	0a1b      	lsrs	r3, r3, #8
 800bcb0:	0719      	lsls	r1, r3, #28
 800bcb2:	bf04      	itt	eq
 800bcb4:	091b      	lsreq	r3, r3, #4
 800bcb6:	3004      	addeq	r0, #4
 800bcb8:	0799      	lsls	r1, r3, #30
 800bcba:	bf04      	itt	eq
 800bcbc:	089b      	lsreq	r3, r3, #2
 800bcbe:	3002      	addeq	r0, #2
 800bcc0:	07d9      	lsls	r1, r3, #31
 800bcc2:	d403      	bmi.n	800bccc <__lo0bits+0x4e>
 800bcc4:	085b      	lsrs	r3, r3, #1
 800bcc6:	f100 0001 	add.w	r0, r0, #1
 800bcca:	d003      	beq.n	800bcd4 <__lo0bits+0x56>
 800bccc:	6013      	str	r3, [r2, #0]
 800bcce:	4770      	bx	lr
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	4770      	bx	lr
 800bcd4:	2020      	movs	r0, #32
 800bcd6:	4770      	bx	lr

0800bcd8 <__i2b>:
 800bcd8:	b510      	push	{r4, lr}
 800bcda:	460c      	mov	r4, r1
 800bcdc:	2101      	movs	r1, #1
 800bcde:	f7ff febd 	bl	800ba5c <_Balloc>
 800bce2:	4602      	mov	r2, r0
 800bce4:	b928      	cbnz	r0, 800bcf2 <__i2b+0x1a>
 800bce6:	4b05      	ldr	r3, [pc, #20]	@ (800bcfc <__i2b+0x24>)
 800bce8:	4805      	ldr	r0, [pc, #20]	@ (800bd00 <__i2b+0x28>)
 800bcea:	f240 1145 	movw	r1, #325	@ 0x145
 800bcee:	f7fc fd27 	bl	8008740 <__assert_func>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	6144      	str	r4, [r0, #20]
 800bcf6:	6103      	str	r3, [r0, #16]
 800bcf8:	bd10      	pop	{r4, pc}
 800bcfa:	bf00      	nop
 800bcfc:	0800d2ee 	.word	0x0800d2ee
 800bd00:	0800d35f 	.word	0x0800d35f

0800bd04 <__multiply>:
 800bd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd08:	4617      	mov	r7, r2
 800bd0a:	690a      	ldr	r2, [r1, #16]
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	bfa8      	it	ge
 800bd12:	463b      	movge	r3, r7
 800bd14:	4689      	mov	r9, r1
 800bd16:	bfa4      	itt	ge
 800bd18:	460f      	movge	r7, r1
 800bd1a:	4699      	movge	r9, r3
 800bd1c:	693d      	ldr	r5, [r7, #16]
 800bd1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	6879      	ldr	r1, [r7, #4]
 800bd26:	eb05 060a 	add.w	r6, r5, sl
 800bd2a:	42b3      	cmp	r3, r6
 800bd2c:	b085      	sub	sp, #20
 800bd2e:	bfb8      	it	lt
 800bd30:	3101      	addlt	r1, #1
 800bd32:	f7ff fe93 	bl	800ba5c <_Balloc>
 800bd36:	b930      	cbnz	r0, 800bd46 <__multiply+0x42>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	4b41      	ldr	r3, [pc, #260]	@ (800be40 <__multiply+0x13c>)
 800bd3c:	4841      	ldr	r0, [pc, #260]	@ (800be44 <__multiply+0x140>)
 800bd3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bd42:	f7fc fcfd 	bl	8008740 <__assert_func>
 800bd46:	f100 0414 	add.w	r4, r0, #20
 800bd4a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bd4e:	4623      	mov	r3, r4
 800bd50:	2200      	movs	r2, #0
 800bd52:	4573      	cmp	r3, lr
 800bd54:	d320      	bcc.n	800bd98 <__multiply+0x94>
 800bd56:	f107 0814 	add.w	r8, r7, #20
 800bd5a:	f109 0114 	add.w	r1, r9, #20
 800bd5e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bd62:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bd66:	9302      	str	r3, [sp, #8]
 800bd68:	1beb      	subs	r3, r5, r7
 800bd6a:	3b15      	subs	r3, #21
 800bd6c:	f023 0303 	bic.w	r3, r3, #3
 800bd70:	3304      	adds	r3, #4
 800bd72:	3715      	adds	r7, #21
 800bd74:	42bd      	cmp	r5, r7
 800bd76:	bf38      	it	cc
 800bd78:	2304      	movcc	r3, #4
 800bd7a:	9301      	str	r3, [sp, #4]
 800bd7c:	9b02      	ldr	r3, [sp, #8]
 800bd7e:	9103      	str	r1, [sp, #12]
 800bd80:	428b      	cmp	r3, r1
 800bd82:	d80c      	bhi.n	800bd9e <__multiply+0x9a>
 800bd84:	2e00      	cmp	r6, #0
 800bd86:	dd03      	ble.n	800bd90 <__multiply+0x8c>
 800bd88:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d055      	beq.n	800be3c <__multiply+0x138>
 800bd90:	6106      	str	r6, [r0, #16]
 800bd92:	b005      	add	sp, #20
 800bd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd98:	f843 2b04 	str.w	r2, [r3], #4
 800bd9c:	e7d9      	b.n	800bd52 <__multiply+0x4e>
 800bd9e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bda2:	f1ba 0f00 	cmp.w	sl, #0
 800bda6:	d01f      	beq.n	800bde8 <__multiply+0xe4>
 800bda8:	46c4      	mov	ip, r8
 800bdaa:	46a1      	mov	r9, r4
 800bdac:	2700      	movs	r7, #0
 800bdae:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bdb2:	f8d9 3000 	ldr.w	r3, [r9]
 800bdb6:	fa1f fb82 	uxth.w	fp, r2
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	fb0a 330b 	mla	r3, sl, fp, r3
 800bdc0:	443b      	add	r3, r7
 800bdc2:	f8d9 7000 	ldr.w	r7, [r9]
 800bdc6:	0c12      	lsrs	r2, r2, #16
 800bdc8:	0c3f      	lsrs	r7, r7, #16
 800bdca:	fb0a 7202 	mla	r2, sl, r2, r7
 800bdce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdd8:	4565      	cmp	r5, ip
 800bdda:	f849 3b04 	str.w	r3, [r9], #4
 800bdde:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bde2:	d8e4      	bhi.n	800bdae <__multiply+0xaa>
 800bde4:	9b01      	ldr	r3, [sp, #4]
 800bde6:	50e7      	str	r7, [r4, r3]
 800bde8:	9b03      	ldr	r3, [sp, #12]
 800bdea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bdee:	3104      	adds	r1, #4
 800bdf0:	f1b9 0f00 	cmp.w	r9, #0
 800bdf4:	d020      	beq.n	800be38 <__multiply+0x134>
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	4647      	mov	r7, r8
 800bdfa:	46a4      	mov	ip, r4
 800bdfc:	f04f 0a00 	mov.w	sl, #0
 800be00:	f8b7 b000 	ldrh.w	fp, [r7]
 800be04:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800be08:	fb09 220b 	mla	r2, r9, fp, r2
 800be0c:	4452      	add	r2, sl
 800be0e:	b29b      	uxth	r3, r3
 800be10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be14:	f84c 3b04 	str.w	r3, [ip], #4
 800be18:	f857 3b04 	ldr.w	r3, [r7], #4
 800be1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be20:	f8bc 3000 	ldrh.w	r3, [ip]
 800be24:	fb09 330a 	mla	r3, r9, sl, r3
 800be28:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800be2c:	42bd      	cmp	r5, r7
 800be2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be32:	d8e5      	bhi.n	800be00 <__multiply+0xfc>
 800be34:	9a01      	ldr	r2, [sp, #4]
 800be36:	50a3      	str	r3, [r4, r2]
 800be38:	3404      	adds	r4, #4
 800be3a:	e79f      	b.n	800bd7c <__multiply+0x78>
 800be3c:	3e01      	subs	r6, #1
 800be3e:	e7a1      	b.n	800bd84 <__multiply+0x80>
 800be40:	0800d2ee 	.word	0x0800d2ee
 800be44:	0800d35f 	.word	0x0800d35f

0800be48 <__pow5mult>:
 800be48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be4c:	4615      	mov	r5, r2
 800be4e:	f012 0203 	ands.w	r2, r2, #3
 800be52:	4607      	mov	r7, r0
 800be54:	460e      	mov	r6, r1
 800be56:	d007      	beq.n	800be68 <__pow5mult+0x20>
 800be58:	4c25      	ldr	r4, [pc, #148]	@ (800bef0 <__pow5mult+0xa8>)
 800be5a:	3a01      	subs	r2, #1
 800be5c:	2300      	movs	r3, #0
 800be5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be62:	f7ff fe5d 	bl	800bb20 <__multadd>
 800be66:	4606      	mov	r6, r0
 800be68:	10ad      	asrs	r5, r5, #2
 800be6a:	d03d      	beq.n	800bee8 <__pow5mult+0xa0>
 800be6c:	69fc      	ldr	r4, [r7, #28]
 800be6e:	b97c      	cbnz	r4, 800be90 <__pow5mult+0x48>
 800be70:	2010      	movs	r0, #16
 800be72:	f7fc fc83 	bl	800877c <malloc>
 800be76:	4602      	mov	r2, r0
 800be78:	61f8      	str	r0, [r7, #28]
 800be7a:	b928      	cbnz	r0, 800be88 <__pow5mult+0x40>
 800be7c:	4b1d      	ldr	r3, [pc, #116]	@ (800bef4 <__pow5mult+0xac>)
 800be7e:	481e      	ldr	r0, [pc, #120]	@ (800bef8 <__pow5mult+0xb0>)
 800be80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800be84:	f7fc fc5c 	bl	8008740 <__assert_func>
 800be88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be8c:	6004      	str	r4, [r0, #0]
 800be8e:	60c4      	str	r4, [r0, #12]
 800be90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800be94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be98:	b94c      	cbnz	r4, 800beae <__pow5mult+0x66>
 800be9a:	f240 2171 	movw	r1, #625	@ 0x271
 800be9e:	4638      	mov	r0, r7
 800bea0:	f7ff ff1a 	bl	800bcd8 <__i2b>
 800bea4:	2300      	movs	r3, #0
 800bea6:	f8c8 0008 	str.w	r0, [r8, #8]
 800beaa:	4604      	mov	r4, r0
 800beac:	6003      	str	r3, [r0, #0]
 800beae:	f04f 0900 	mov.w	r9, #0
 800beb2:	07eb      	lsls	r3, r5, #31
 800beb4:	d50a      	bpl.n	800becc <__pow5mult+0x84>
 800beb6:	4631      	mov	r1, r6
 800beb8:	4622      	mov	r2, r4
 800beba:	4638      	mov	r0, r7
 800bebc:	f7ff ff22 	bl	800bd04 <__multiply>
 800bec0:	4631      	mov	r1, r6
 800bec2:	4680      	mov	r8, r0
 800bec4:	4638      	mov	r0, r7
 800bec6:	f7ff fe09 	bl	800badc <_Bfree>
 800beca:	4646      	mov	r6, r8
 800becc:	106d      	asrs	r5, r5, #1
 800bece:	d00b      	beq.n	800bee8 <__pow5mult+0xa0>
 800bed0:	6820      	ldr	r0, [r4, #0]
 800bed2:	b938      	cbnz	r0, 800bee4 <__pow5mult+0x9c>
 800bed4:	4622      	mov	r2, r4
 800bed6:	4621      	mov	r1, r4
 800bed8:	4638      	mov	r0, r7
 800beda:	f7ff ff13 	bl	800bd04 <__multiply>
 800bede:	6020      	str	r0, [r4, #0]
 800bee0:	f8c0 9000 	str.w	r9, [r0]
 800bee4:	4604      	mov	r4, r0
 800bee6:	e7e4      	b.n	800beb2 <__pow5mult+0x6a>
 800bee8:	4630      	mov	r0, r6
 800beea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beee:	bf00      	nop
 800bef0:	0800d420 	.word	0x0800d420
 800bef4:	0800d210 	.word	0x0800d210
 800bef8:	0800d35f 	.word	0x0800d35f

0800befc <__lshift>:
 800befc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf00:	460c      	mov	r4, r1
 800bf02:	6849      	ldr	r1, [r1, #4]
 800bf04:	6923      	ldr	r3, [r4, #16]
 800bf06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf0a:	68a3      	ldr	r3, [r4, #8]
 800bf0c:	4607      	mov	r7, r0
 800bf0e:	4691      	mov	r9, r2
 800bf10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf14:	f108 0601 	add.w	r6, r8, #1
 800bf18:	42b3      	cmp	r3, r6
 800bf1a:	db0b      	blt.n	800bf34 <__lshift+0x38>
 800bf1c:	4638      	mov	r0, r7
 800bf1e:	f7ff fd9d 	bl	800ba5c <_Balloc>
 800bf22:	4605      	mov	r5, r0
 800bf24:	b948      	cbnz	r0, 800bf3a <__lshift+0x3e>
 800bf26:	4602      	mov	r2, r0
 800bf28:	4b28      	ldr	r3, [pc, #160]	@ (800bfcc <__lshift+0xd0>)
 800bf2a:	4829      	ldr	r0, [pc, #164]	@ (800bfd0 <__lshift+0xd4>)
 800bf2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bf30:	f7fc fc06 	bl	8008740 <__assert_func>
 800bf34:	3101      	adds	r1, #1
 800bf36:	005b      	lsls	r3, r3, #1
 800bf38:	e7ee      	b.n	800bf18 <__lshift+0x1c>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f100 0114 	add.w	r1, r0, #20
 800bf40:	f100 0210 	add.w	r2, r0, #16
 800bf44:	4618      	mov	r0, r3
 800bf46:	4553      	cmp	r3, sl
 800bf48:	db33      	blt.n	800bfb2 <__lshift+0xb6>
 800bf4a:	6920      	ldr	r0, [r4, #16]
 800bf4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf50:	f104 0314 	add.w	r3, r4, #20
 800bf54:	f019 091f 	ands.w	r9, r9, #31
 800bf58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf60:	d02b      	beq.n	800bfba <__lshift+0xbe>
 800bf62:	f1c9 0e20 	rsb	lr, r9, #32
 800bf66:	468a      	mov	sl, r1
 800bf68:	2200      	movs	r2, #0
 800bf6a:	6818      	ldr	r0, [r3, #0]
 800bf6c:	fa00 f009 	lsl.w	r0, r0, r9
 800bf70:	4310      	orrs	r0, r2
 800bf72:	f84a 0b04 	str.w	r0, [sl], #4
 800bf76:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf7a:	459c      	cmp	ip, r3
 800bf7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf80:	d8f3      	bhi.n	800bf6a <__lshift+0x6e>
 800bf82:	ebac 0304 	sub.w	r3, ip, r4
 800bf86:	3b15      	subs	r3, #21
 800bf88:	f023 0303 	bic.w	r3, r3, #3
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	f104 0015 	add.w	r0, r4, #21
 800bf92:	4560      	cmp	r0, ip
 800bf94:	bf88      	it	hi
 800bf96:	2304      	movhi	r3, #4
 800bf98:	50ca      	str	r2, [r1, r3]
 800bf9a:	b10a      	cbz	r2, 800bfa0 <__lshift+0xa4>
 800bf9c:	f108 0602 	add.w	r6, r8, #2
 800bfa0:	3e01      	subs	r6, #1
 800bfa2:	4638      	mov	r0, r7
 800bfa4:	612e      	str	r6, [r5, #16]
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	f7ff fd98 	bl	800badc <_Bfree>
 800bfac:	4628      	mov	r0, r5
 800bfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	e7c5      	b.n	800bf46 <__lshift+0x4a>
 800bfba:	3904      	subs	r1, #4
 800bfbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfc4:	459c      	cmp	ip, r3
 800bfc6:	d8f9      	bhi.n	800bfbc <__lshift+0xc0>
 800bfc8:	e7ea      	b.n	800bfa0 <__lshift+0xa4>
 800bfca:	bf00      	nop
 800bfcc:	0800d2ee 	.word	0x0800d2ee
 800bfd0:	0800d35f 	.word	0x0800d35f

0800bfd4 <__mcmp>:
 800bfd4:	690a      	ldr	r2, [r1, #16]
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	6900      	ldr	r0, [r0, #16]
 800bfda:	1a80      	subs	r0, r0, r2
 800bfdc:	b530      	push	{r4, r5, lr}
 800bfde:	d10e      	bne.n	800bffe <__mcmp+0x2a>
 800bfe0:	3314      	adds	r3, #20
 800bfe2:	3114      	adds	r1, #20
 800bfe4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bfe8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bfec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bff0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bff4:	4295      	cmp	r5, r2
 800bff6:	d003      	beq.n	800c000 <__mcmp+0x2c>
 800bff8:	d205      	bcs.n	800c006 <__mcmp+0x32>
 800bffa:	f04f 30ff 	mov.w	r0, #4294967295
 800bffe:	bd30      	pop	{r4, r5, pc}
 800c000:	42a3      	cmp	r3, r4
 800c002:	d3f3      	bcc.n	800bfec <__mcmp+0x18>
 800c004:	e7fb      	b.n	800bffe <__mcmp+0x2a>
 800c006:	2001      	movs	r0, #1
 800c008:	e7f9      	b.n	800bffe <__mcmp+0x2a>
	...

0800c00c <__mdiff>:
 800c00c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c010:	4689      	mov	r9, r1
 800c012:	4606      	mov	r6, r0
 800c014:	4611      	mov	r1, r2
 800c016:	4648      	mov	r0, r9
 800c018:	4614      	mov	r4, r2
 800c01a:	f7ff ffdb 	bl	800bfd4 <__mcmp>
 800c01e:	1e05      	subs	r5, r0, #0
 800c020:	d112      	bne.n	800c048 <__mdiff+0x3c>
 800c022:	4629      	mov	r1, r5
 800c024:	4630      	mov	r0, r6
 800c026:	f7ff fd19 	bl	800ba5c <_Balloc>
 800c02a:	4602      	mov	r2, r0
 800c02c:	b928      	cbnz	r0, 800c03a <__mdiff+0x2e>
 800c02e:	4b3f      	ldr	r3, [pc, #252]	@ (800c12c <__mdiff+0x120>)
 800c030:	f240 2137 	movw	r1, #567	@ 0x237
 800c034:	483e      	ldr	r0, [pc, #248]	@ (800c130 <__mdiff+0x124>)
 800c036:	f7fc fb83 	bl	8008740 <__assert_func>
 800c03a:	2301      	movs	r3, #1
 800c03c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c040:	4610      	mov	r0, r2
 800c042:	b003      	add	sp, #12
 800c044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c048:	bfbc      	itt	lt
 800c04a:	464b      	movlt	r3, r9
 800c04c:	46a1      	movlt	r9, r4
 800c04e:	4630      	mov	r0, r6
 800c050:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c054:	bfba      	itte	lt
 800c056:	461c      	movlt	r4, r3
 800c058:	2501      	movlt	r5, #1
 800c05a:	2500      	movge	r5, #0
 800c05c:	f7ff fcfe 	bl	800ba5c <_Balloc>
 800c060:	4602      	mov	r2, r0
 800c062:	b918      	cbnz	r0, 800c06c <__mdiff+0x60>
 800c064:	4b31      	ldr	r3, [pc, #196]	@ (800c12c <__mdiff+0x120>)
 800c066:	f240 2145 	movw	r1, #581	@ 0x245
 800c06a:	e7e3      	b.n	800c034 <__mdiff+0x28>
 800c06c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c070:	6926      	ldr	r6, [r4, #16]
 800c072:	60c5      	str	r5, [r0, #12]
 800c074:	f109 0310 	add.w	r3, r9, #16
 800c078:	f109 0514 	add.w	r5, r9, #20
 800c07c:	f104 0e14 	add.w	lr, r4, #20
 800c080:	f100 0b14 	add.w	fp, r0, #20
 800c084:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c088:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c08c:	9301      	str	r3, [sp, #4]
 800c08e:	46d9      	mov	r9, fp
 800c090:	f04f 0c00 	mov.w	ip, #0
 800c094:	9b01      	ldr	r3, [sp, #4]
 800c096:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c09a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	fa1f f38a 	uxth.w	r3, sl
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	b283      	uxth	r3, r0
 800c0a8:	1acb      	subs	r3, r1, r3
 800c0aa:	0c00      	lsrs	r0, r0, #16
 800c0ac:	4463      	add	r3, ip
 800c0ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c0b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c0bc:	4576      	cmp	r6, lr
 800c0be:	f849 3b04 	str.w	r3, [r9], #4
 800c0c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c0c6:	d8e5      	bhi.n	800c094 <__mdiff+0x88>
 800c0c8:	1b33      	subs	r3, r6, r4
 800c0ca:	3b15      	subs	r3, #21
 800c0cc:	f023 0303 	bic.w	r3, r3, #3
 800c0d0:	3415      	adds	r4, #21
 800c0d2:	3304      	adds	r3, #4
 800c0d4:	42a6      	cmp	r6, r4
 800c0d6:	bf38      	it	cc
 800c0d8:	2304      	movcc	r3, #4
 800c0da:	441d      	add	r5, r3
 800c0dc:	445b      	add	r3, fp
 800c0de:	461e      	mov	r6, r3
 800c0e0:	462c      	mov	r4, r5
 800c0e2:	4544      	cmp	r4, r8
 800c0e4:	d30e      	bcc.n	800c104 <__mdiff+0xf8>
 800c0e6:	f108 0103 	add.w	r1, r8, #3
 800c0ea:	1b49      	subs	r1, r1, r5
 800c0ec:	f021 0103 	bic.w	r1, r1, #3
 800c0f0:	3d03      	subs	r5, #3
 800c0f2:	45a8      	cmp	r8, r5
 800c0f4:	bf38      	it	cc
 800c0f6:	2100      	movcc	r1, #0
 800c0f8:	440b      	add	r3, r1
 800c0fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0fe:	b191      	cbz	r1, 800c126 <__mdiff+0x11a>
 800c100:	6117      	str	r7, [r2, #16]
 800c102:	e79d      	b.n	800c040 <__mdiff+0x34>
 800c104:	f854 1b04 	ldr.w	r1, [r4], #4
 800c108:	46e6      	mov	lr, ip
 800c10a:	0c08      	lsrs	r0, r1, #16
 800c10c:	fa1c fc81 	uxtah	ip, ip, r1
 800c110:	4471      	add	r1, lr
 800c112:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c116:	b289      	uxth	r1, r1
 800c118:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c11c:	f846 1b04 	str.w	r1, [r6], #4
 800c120:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c124:	e7dd      	b.n	800c0e2 <__mdiff+0xd6>
 800c126:	3f01      	subs	r7, #1
 800c128:	e7e7      	b.n	800c0fa <__mdiff+0xee>
 800c12a:	bf00      	nop
 800c12c:	0800d2ee 	.word	0x0800d2ee
 800c130:	0800d35f 	.word	0x0800d35f

0800c134 <__ulp>:
 800c134:	b082      	sub	sp, #8
 800c136:	ed8d 0b00 	vstr	d0, [sp]
 800c13a:	9a01      	ldr	r2, [sp, #4]
 800c13c:	4b0f      	ldr	r3, [pc, #60]	@ (800c17c <__ulp+0x48>)
 800c13e:	4013      	ands	r3, r2
 800c140:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c144:	2b00      	cmp	r3, #0
 800c146:	dc08      	bgt.n	800c15a <__ulp+0x26>
 800c148:	425b      	negs	r3, r3
 800c14a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c14e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c152:	da04      	bge.n	800c15e <__ulp+0x2a>
 800c154:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c158:	4113      	asrs	r3, r2
 800c15a:	2200      	movs	r2, #0
 800c15c:	e008      	b.n	800c170 <__ulp+0x3c>
 800c15e:	f1a2 0314 	sub.w	r3, r2, #20
 800c162:	2b1e      	cmp	r3, #30
 800c164:	bfda      	itte	le
 800c166:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c16a:	40da      	lsrle	r2, r3
 800c16c:	2201      	movgt	r2, #1
 800c16e:	2300      	movs	r3, #0
 800c170:	4619      	mov	r1, r3
 800c172:	4610      	mov	r0, r2
 800c174:	ec41 0b10 	vmov	d0, r0, r1
 800c178:	b002      	add	sp, #8
 800c17a:	4770      	bx	lr
 800c17c:	7ff00000 	.word	0x7ff00000

0800c180 <__b2d>:
 800c180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c184:	6906      	ldr	r6, [r0, #16]
 800c186:	f100 0814 	add.w	r8, r0, #20
 800c18a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c18e:	1f37      	subs	r7, r6, #4
 800c190:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c194:	4610      	mov	r0, r2
 800c196:	f7ff fd53 	bl	800bc40 <__hi0bits>
 800c19a:	f1c0 0320 	rsb	r3, r0, #32
 800c19e:	280a      	cmp	r0, #10
 800c1a0:	600b      	str	r3, [r1, #0]
 800c1a2:	491b      	ldr	r1, [pc, #108]	@ (800c210 <__b2d+0x90>)
 800c1a4:	dc15      	bgt.n	800c1d2 <__b2d+0x52>
 800c1a6:	f1c0 0c0b 	rsb	ip, r0, #11
 800c1aa:	fa22 f30c 	lsr.w	r3, r2, ip
 800c1ae:	45b8      	cmp	r8, r7
 800c1b0:	ea43 0501 	orr.w	r5, r3, r1
 800c1b4:	bf34      	ite	cc
 800c1b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c1ba:	2300      	movcs	r3, #0
 800c1bc:	3015      	adds	r0, #21
 800c1be:	fa02 f000 	lsl.w	r0, r2, r0
 800c1c2:	fa23 f30c 	lsr.w	r3, r3, ip
 800c1c6:	4303      	orrs	r3, r0
 800c1c8:	461c      	mov	r4, r3
 800c1ca:	ec45 4b10 	vmov	d0, r4, r5
 800c1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d2:	45b8      	cmp	r8, r7
 800c1d4:	bf3a      	itte	cc
 800c1d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c1da:	f1a6 0708 	subcc.w	r7, r6, #8
 800c1de:	2300      	movcs	r3, #0
 800c1e0:	380b      	subs	r0, #11
 800c1e2:	d012      	beq.n	800c20a <__b2d+0x8a>
 800c1e4:	f1c0 0120 	rsb	r1, r0, #32
 800c1e8:	fa23 f401 	lsr.w	r4, r3, r1
 800c1ec:	4082      	lsls	r2, r0
 800c1ee:	4322      	orrs	r2, r4
 800c1f0:	4547      	cmp	r7, r8
 800c1f2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c1f6:	bf8c      	ite	hi
 800c1f8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c1fc:	2200      	movls	r2, #0
 800c1fe:	4083      	lsls	r3, r0
 800c200:	40ca      	lsrs	r2, r1
 800c202:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c206:	4313      	orrs	r3, r2
 800c208:	e7de      	b.n	800c1c8 <__b2d+0x48>
 800c20a:	ea42 0501 	orr.w	r5, r2, r1
 800c20e:	e7db      	b.n	800c1c8 <__b2d+0x48>
 800c210:	3ff00000 	.word	0x3ff00000

0800c214 <__d2b>:
 800c214:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c218:	460f      	mov	r7, r1
 800c21a:	2101      	movs	r1, #1
 800c21c:	ec59 8b10 	vmov	r8, r9, d0
 800c220:	4616      	mov	r6, r2
 800c222:	f7ff fc1b 	bl	800ba5c <_Balloc>
 800c226:	4604      	mov	r4, r0
 800c228:	b930      	cbnz	r0, 800c238 <__d2b+0x24>
 800c22a:	4602      	mov	r2, r0
 800c22c:	4b23      	ldr	r3, [pc, #140]	@ (800c2bc <__d2b+0xa8>)
 800c22e:	4824      	ldr	r0, [pc, #144]	@ (800c2c0 <__d2b+0xac>)
 800c230:	f240 310f 	movw	r1, #783	@ 0x30f
 800c234:	f7fc fa84 	bl	8008740 <__assert_func>
 800c238:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c23c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c240:	b10d      	cbz	r5, 800c246 <__d2b+0x32>
 800c242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c246:	9301      	str	r3, [sp, #4]
 800c248:	f1b8 0300 	subs.w	r3, r8, #0
 800c24c:	d023      	beq.n	800c296 <__d2b+0x82>
 800c24e:	4668      	mov	r0, sp
 800c250:	9300      	str	r3, [sp, #0]
 800c252:	f7ff fd14 	bl	800bc7e <__lo0bits>
 800c256:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c25a:	b1d0      	cbz	r0, 800c292 <__d2b+0x7e>
 800c25c:	f1c0 0320 	rsb	r3, r0, #32
 800c260:	fa02 f303 	lsl.w	r3, r2, r3
 800c264:	430b      	orrs	r3, r1
 800c266:	40c2      	lsrs	r2, r0
 800c268:	6163      	str	r3, [r4, #20]
 800c26a:	9201      	str	r2, [sp, #4]
 800c26c:	9b01      	ldr	r3, [sp, #4]
 800c26e:	61a3      	str	r3, [r4, #24]
 800c270:	2b00      	cmp	r3, #0
 800c272:	bf0c      	ite	eq
 800c274:	2201      	moveq	r2, #1
 800c276:	2202      	movne	r2, #2
 800c278:	6122      	str	r2, [r4, #16]
 800c27a:	b1a5      	cbz	r5, 800c2a6 <__d2b+0x92>
 800c27c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c280:	4405      	add	r5, r0
 800c282:	603d      	str	r5, [r7, #0]
 800c284:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c288:	6030      	str	r0, [r6, #0]
 800c28a:	4620      	mov	r0, r4
 800c28c:	b003      	add	sp, #12
 800c28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c292:	6161      	str	r1, [r4, #20]
 800c294:	e7ea      	b.n	800c26c <__d2b+0x58>
 800c296:	a801      	add	r0, sp, #4
 800c298:	f7ff fcf1 	bl	800bc7e <__lo0bits>
 800c29c:	9b01      	ldr	r3, [sp, #4]
 800c29e:	6163      	str	r3, [r4, #20]
 800c2a0:	3020      	adds	r0, #32
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	e7e8      	b.n	800c278 <__d2b+0x64>
 800c2a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c2ae:	6038      	str	r0, [r7, #0]
 800c2b0:	6918      	ldr	r0, [r3, #16]
 800c2b2:	f7ff fcc5 	bl	800bc40 <__hi0bits>
 800c2b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2ba:	e7e5      	b.n	800c288 <__d2b+0x74>
 800c2bc:	0800d2ee 	.word	0x0800d2ee
 800c2c0:	0800d35f 	.word	0x0800d35f

0800c2c4 <__ratio>:
 800c2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c8:	b085      	sub	sp, #20
 800c2ca:	e9cd 1000 	strd	r1, r0, [sp]
 800c2ce:	a902      	add	r1, sp, #8
 800c2d0:	f7ff ff56 	bl	800c180 <__b2d>
 800c2d4:	9800      	ldr	r0, [sp, #0]
 800c2d6:	a903      	add	r1, sp, #12
 800c2d8:	ec55 4b10 	vmov	r4, r5, d0
 800c2dc:	f7ff ff50 	bl	800c180 <__b2d>
 800c2e0:	9b01      	ldr	r3, [sp, #4]
 800c2e2:	6919      	ldr	r1, [r3, #16]
 800c2e4:	9b00      	ldr	r3, [sp, #0]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	1ac9      	subs	r1, r1, r3
 800c2ea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c2ee:	1a9b      	subs	r3, r3, r2
 800c2f0:	ec5b ab10 	vmov	sl, fp, d0
 800c2f4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	bfce      	itee	gt
 800c2fc:	462a      	movgt	r2, r5
 800c2fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c302:	465a      	movle	r2, fp
 800c304:	462f      	mov	r7, r5
 800c306:	46d9      	mov	r9, fp
 800c308:	bfcc      	ite	gt
 800c30a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c30e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c312:	464b      	mov	r3, r9
 800c314:	4652      	mov	r2, sl
 800c316:	4620      	mov	r0, r4
 800c318:	4639      	mov	r1, r7
 800c31a:	f7f4 fa97 	bl	800084c <__aeabi_ddiv>
 800c31e:	ec41 0b10 	vmov	d0, r0, r1
 800c322:	b005      	add	sp, #20
 800c324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c328 <__copybits>:
 800c328:	3901      	subs	r1, #1
 800c32a:	b570      	push	{r4, r5, r6, lr}
 800c32c:	1149      	asrs	r1, r1, #5
 800c32e:	6914      	ldr	r4, [r2, #16]
 800c330:	3101      	adds	r1, #1
 800c332:	f102 0314 	add.w	r3, r2, #20
 800c336:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c33a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c33e:	1f05      	subs	r5, r0, #4
 800c340:	42a3      	cmp	r3, r4
 800c342:	d30c      	bcc.n	800c35e <__copybits+0x36>
 800c344:	1aa3      	subs	r3, r4, r2
 800c346:	3b11      	subs	r3, #17
 800c348:	f023 0303 	bic.w	r3, r3, #3
 800c34c:	3211      	adds	r2, #17
 800c34e:	42a2      	cmp	r2, r4
 800c350:	bf88      	it	hi
 800c352:	2300      	movhi	r3, #0
 800c354:	4418      	add	r0, r3
 800c356:	2300      	movs	r3, #0
 800c358:	4288      	cmp	r0, r1
 800c35a:	d305      	bcc.n	800c368 <__copybits+0x40>
 800c35c:	bd70      	pop	{r4, r5, r6, pc}
 800c35e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c362:	f845 6f04 	str.w	r6, [r5, #4]!
 800c366:	e7eb      	b.n	800c340 <__copybits+0x18>
 800c368:	f840 3b04 	str.w	r3, [r0], #4
 800c36c:	e7f4      	b.n	800c358 <__copybits+0x30>

0800c36e <__any_on>:
 800c36e:	f100 0214 	add.w	r2, r0, #20
 800c372:	6900      	ldr	r0, [r0, #16]
 800c374:	114b      	asrs	r3, r1, #5
 800c376:	4298      	cmp	r0, r3
 800c378:	b510      	push	{r4, lr}
 800c37a:	db11      	blt.n	800c3a0 <__any_on+0x32>
 800c37c:	dd0a      	ble.n	800c394 <__any_on+0x26>
 800c37e:	f011 011f 	ands.w	r1, r1, #31
 800c382:	d007      	beq.n	800c394 <__any_on+0x26>
 800c384:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c388:	fa24 f001 	lsr.w	r0, r4, r1
 800c38c:	fa00 f101 	lsl.w	r1, r0, r1
 800c390:	428c      	cmp	r4, r1
 800c392:	d10b      	bne.n	800c3ac <__any_on+0x3e>
 800c394:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c398:	4293      	cmp	r3, r2
 800c39a:	d803      	bhi.n	800c3a4 <__any_on+0x36>
 800c39c:	2000      	movs	r0, #0
 800c39e:	bd10      	pop	{r4, pc}
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	e7f7      	b.n	800c394 <__any_on+0x26>
 800c3a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c3a8:	2900      	cmp	r1, #0
 800c3aa:	d0f5      	beq.n	800c398 <__any_on+0x2a>
 800c3ac:	2001      	movs	r0, #1
 800c3ae:	e7f6      	b.n	800c39e <__any_on+0x30>

0800c3b0 <_strtol_l.isra.0>:
 800c3b0:	2b24      	cmp	r3, #36	@ 0x24
 800c3b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b6:	4686      	mov	lr, r0
 800c3b8:	4690      	mov	r8, r2
 800c3ba:	d801      	bhi.n	800c3c0 <_strtol_l.isra.0+0x10>
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d106      	bne.n	800c3ce <_strtol_l.isra.0+0x1e>
 800c3c0:	f7fe f90a 	bl	800a5d8 <__errno>
 800c3c4:	2316      	movs	r3, #22
 800c3c6:	6003      	str	r3, [r0, #0]
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ce:	4834      	ldr	r0, [pc, #208]	@ (800c4a0 <_strtol_l.isra.0+0xf0>)
 800c3d0:	460d      	mov	r5, r1
 800c3d2:	462a      	mov	r2, r5
 800c3d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3d8:	5d06      	ldrb	r6, [r0, r4]
 800c3da:	f016 0608 	ands.w	r6, r6, #8
 800c3de:	d1f8      	bne.n	800c3d2 <_strtol_l.isra.0+0x22>
 800c3e0:	2c2d      	cmp	r4, #45	@ 0x2d
 800c3e2:	d110      	bne.n	800c406 <_strtol_l.isra.0+0x56>
 800c3e4:	782c      	ldrb	r4, [r5, #0]
 800c3e6:	2601      	movs	r6, #1
 800c3e8:	1c95      	adds	r5, r2, #2
 800c3ea:	f033 0210 	bics.w	r2, r3, #16
 800c3ee:	d115      	bne.n	800c41c <_strtol_l.isra.0+0x6c>
 800c3f0:	2c30      	cmp	r4, #48	@ 0x30
 800c3f2:	d10d      	bne.n	800c410 <_strtol_l.isra.0+0x60>
 800c3f4:	782a      	ldrb	r2, [r5, #0]
 800c3f6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c3fa:	2a58      	cmp	r2, #88	@ 0x58
 800c3fc:	d108      	bne.n	800c410 <_strtol_l.isra.0+0x60>
 800c3fe:	786c      	ldrb	r4, [r5, #1]
 800c400:	3502      	adds	r5, #2
 800c402:	2310      	movs	r3, #16
 800c404:	e00a      	b.n	800c41c <_strtol_l.isra.0+0x6c>
 800c406:	2c2b      	cmp	r4, #43	@ 0x2b
 800c408:	bf04      	itt	eq
 800c40a:	782c      	ldrbeq	r4, [r5, #0]
 800c40c:	1c95      	addeq	r5, r2, #2
 800c40e:	e7ec      	b.n	800c3ea <_strtol_l.isra.0+0x3a>
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1f6      	bne.n	800c402 <_strtol_l.isra.0+0x52>
 800c414:	2c30      	cmp	r4, #48	@ 0x30
 800c416:	bf14      	ite	ne
 800c418:	230a      	movne	r3, #10
 800c41a:	2308      	moveq	r3, #8
 800c41c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c420:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c424:	2200      	movs	r2, #0
 800c426:	fbbc f9f3 	udiv	r9, ip, r3
 800c42a:	4610      	mov	r0, r2
 800c42c:	fb03 ca19 	mls	sl, r3, r9, ip
 800c430:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c434:	2f09      	cmp	r7, #9
 800c436:	d80f      	bhi.n	800c458 <_strtol_l.isra.0+0xa8>
 800c438:	463c      	mov	r4, r7
 800c43a:	42a3      	cmp	r3, r4
 800c43c:	dd1b      	ble.n	800c476 <_strtol_l.isra.0+0xc6>
 800c43e:	1c57      	adds	r7, r2, #1
 800c440:	d007      	beq.n	800c452 <_strtol_l.isra.0+0xa2>
 800c442:	4581      	cmp	r9, r0
 800c444:	d314      	bcc.n	800c470 <_strtol_l.isra.0+0xc0>
 800c446:	d101      	bne.n	800c44c <_strtol_l.isra.0+0x9c>
 800c448:	45a2      	cmp	sl, r4
 800c44a:	db11      	blt.n	800c470 <_strtol_l.isra.0+0xc0>
 800c44c:	fb00 4003 	mla	r0, r0, r3, r4
 800c450:	2201      	movs	r2, #1
 800c452:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c456:	e7eb      	b.n	800c430 <_strtol_l.isra.0+0x80>
 800c458:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c45c:	2f19      	cmp	r7, #25
 800c45e:	d801      	bhi.n	800c464 <_strtol_l.isra.0+0xb4>
 800c460:	3c37      	subs	r4, #55	@ 0x37
 800c462:	e7ea      	b.n	800c43a <_strtol_l.isra.0+0x8a>
 800c464:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c468:	2f19      	cmp	r7, #25
 800c46a:	d804      	bhi.n	800c476 <_strtol_l.isra.0+0xc6>
 800c46c:	3c57      	subs	r4, #87	@ 0x57
 800c46e:	e7e4      	b.n	800c43a <_strtol_l.isra.0+0x8a>
 800c470:	f04f 32ff 	mov.w	r2, #4294967295
 800c474:	e7ed      	b.n	800c452 <_strtol_l.isra.0+0xa2>
 800c476:	1c53      	adds	r3, r2, #1
 800c478:	d108      	bne.n	800c48c <_strtol_l.isra.0+0xdc>
 800c47a:	2322      	movs	r3, #34	@ 0x22
 800c47c:	f8ce 3000 	str.w	r3, [lr]
 800c480:	4660      	mov	r0, ip
 800c482:	f1b8 0f00 	cmp.w	r8, #0
 800c486:	d0a0      	beq.n	800c3ca <_strtol_l.isra.0+0x1a>
 800c488:	1e69      	subs	r1, r5, #1
 800c48a:	e006      	b.n	800c49a <_strtol_l.isra.0+0xea>
 800c48c:	b106      	cbz	r6, 800c490 <_strtol_l.isra.0+0xe0>
 800c48e:	4240      	negs	r0, r0
 800c490:	f1b8 0f00 	cmp.w	r8, #0
 800c494:	d099      	beq.n	800c3ca <_strtol_l.isra.0+0x1a>
 800c496:	2a00      	cmp	r2, #0
 800c498:	d1f6      	bne.n	800c488 <_strtol_l.isra.0+0xd8>
 800c49a:	f8c8 1000 	str.w	r1, [r8]
 800c49e:	e794      	b.n	800c3ca <_strtol_l.isra.0+0x1a>
 800c4a0:	0800d521 	.word	0x0800d521

0800c4a4 <_strtol_r>:
 800c4a4:	f7ff bf84 	b.w	800c3b0 <_strtol_l.isra.0>

0800c4a8 <__ascii_wctomb>:
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	4608      	mov	r0, r1
 800c4ac:	b141      	cbz	r1, 800c4c0 <__ascii_wctomb+0x18>
 800c4ae:	2aff      	cmp	r2, #255	@ 0xff
 800c4b0:	d904      	bls.n	800c4bc <__ascii_wctomb+0x14>
 800c4b2:	228a      	movs	r2, #138	@ 0x8a
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ba:	4770      	bx	lr
 800c4bc:	700a      	strb	r2, [r1, #0]
 800c4be:	2001      	movs	r0, #1
 800c4c0:	4770      	bx	lr

0800c4c2 <__ssputs_r>:
 800c4c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4c6:	688e      	ldr	r6, [r1, #8]
 800c4c8:	461f      	mov	r7, r3
 800c4ca:	42be      	cmp	r6, r7
 800c4cc:	680b      	ldr	r3, [r1, #0]
 800c4ce:	4682      	mov	sl, r0
 800c4d0:	460c      	mov	r4, r1
 800c4d2:	4690      	mov	r8, r2
 800c4d4:	d82d      	bhi.n	800c532 <__ssputs_r+0x70>
 800c4d6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4da:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c4de:	d026      	beq.n	800c52e <__ssputs_r+0x6c>
 800c4e0:	6965      	ldr	r5, [r4, #20]
 800c4e2:	6909      	ldr	r1, [r1, #16]
 800c4e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4e8:	eba3 0901 	sub.w	r9, r3, r1
 800c4ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4f0:	1c7b      	adds	r3, r7, #1
 800c4f2:	444b      	add	r3, r9
 800c4f4:	106d      	asrs	r5, r5, #1
 800c4f6:	429d      	cmp	r5, r3
 800c4f8:	bf38      	it	cc
 800c4fa:	461d      	movcc	r5, r3
 800c4fc:	0553      	lsls	r3, r2, #21
 800c4fe:	d527      	bpl.n	800c550 <__ssputs_r+0x8e>
 800c500:	4629      	mov	r1, r5
 800c502:	f7fc f965 	bl	80087d0 <_malloc_r>
 800c506:	4606      	mov	r6, r0
 800c508:	b360      	cbz	r0, 800c564 <__ssputs_r+0xa2>
 800c50a:	6921      	ldr	r1, [r4, #16]
 800c50c:	464a      	mov	r2, r9
 800c50e:	f7fe f890 	bl	800a632 <memcpy>
 800c512:	89a3      	ldrh	r3, [r4, #12]
 800c514:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c51c:	81a3      	strh	r3, [r4, #12]
 800c51e:	6126      	str	r6, [r4, #16]
 800c520:	6165      	str	r5, [r4, #20]
 800c522:	444e      	add	r6, r9
 800c524:	eba5 0509 	sub.w	r5, r5, r9
 800c528:	6026      	str	r6, [r4, #0]
 800c52a:	60a5      	str	r5, [r4, #8]
 800c52c:	463e      	mov	r6, r7
 800c52e:	42be      	cmp	r6, r7
 800c530:	d900      	bls.n	800c534 <__ssputs_r+0x72>
 800c532:	463e      	mov	r6, r7
 800c534:	6820      	ldr	r0, [r4, #0]
 800c536:	4632      	mov	r2, r6
 800c538:	4641      	mov	r1, r8
 800c53a:	f000 fb9b 	bl	800cc74 <memmove>
 800c53e:	68a3      	ldr	r3, [r4, #8]
 800c540:	1b9b      	subs	r3, r3, r6
 800c542:	60a3      	str	r3, [r4, #8]
 800c544:	6823      	ldr	r3, [r4, #0]
 800c546:	4433      	add	r3, r6
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	2000      	movs	r0, #0
 800c54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c550:	462a      	mov	r2, r5
 800c552:	f000 fc01 	bl	800cd58 <_realloc_r>
 800c556:	4606      	mov	r6, r0
 800c558:	2800      	cmp	r0, #0
 800c55a:	d1e0      	bne.n	800c51e <__ssputs_r+0x5c>
 800c55c:	6921      	ldr	r1, [r4, #16]
 800c55e:	4650      	mov	r0, sl
 800c560:	f7fe fee6 	bl	800b330 <_free_r>
 800c564:	230c      	movs	r3, #12
 800c566:	f8ca 3000 	str.w	r3, [sl]
 800c56a:	89a3      	ldrh	r3, [r4, #12]
 800c56c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c570:	81a3      	strh	r3, [r4, #12]
 800c572:	f04f 30ff 	mov.w	r0, #4294967295
 800c576:	e7e9      	b.n	800c54c <__ssputs_r+0x8a>

0800c578 <_svfiprintf_r>:
 800c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	4698      	mov	r8, r3
 800c57e:	898b      	ldrh	r3, [r1, #12]
 800c580:	061b      	lsls	r3, r3, #24
 800c582:	b09d      	sub	sp, #116	@ 0x74
 800c584:	4607      	mov	r7, r0
 800c586:	460d      	mov	r5, r1
 800c588:	4614      	mov	r4, r2
 800c58a:	d510      	bpl.n	800c5ae <_svfiprintf_r+0x36>
 800c58c:	690b      	ldr	r3, [r1, #16]
 800c58e:	b973      	cbnz	r3, 800c5ae <_svfiprintf_r+0x36>
 800c590:	2140      	movs	r1, #64	@ 0x40
 800c592:	f7fc f91d 	bl	80087d0 <_malloc_r>
 800c596:	6028      	str	r0, [r5, #0]
 800c598:	6128      	str	r0, [r5, #16]
 800c59a:	b930      	cbnz	r0, 800c5aa <_svfiprintf_r+0x32>
 800c59c:	230c      	movs	r3, #12
 800c59e:	603b      	str	r3, [r7, #0]
 800c5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a4:	b01d      	add	sp, #116	@ 0x74
 800c5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5aa:	2340      	movs	r3, #64	@ 0x40
 800c5ac:	616b      	str	r3, [r5, #20]
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5b2:	2320      	movs	r3, #32
 800c5b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5bc:	2330      	movs	r3, #48	@ 0x30
 800c5be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c75c <_svfiprintf_r+0x1e4>
 800c5c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5c6:	f04f 0901 	mov.w	r9, #1
 800c5ca:	4623      	mov	r3, r4
 800c5cc:	469a      	mov	sl, r3
 800c5ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5d2:	b10a      	cbz	r2, 800c5d8 <_svfiprintf_r+0x60>
 800c5d4:	2a25      	cmp	r2, #37	@ 0x25
 800c5d6:	d1f9      	bne.n	800c5cc <_svfiprintf_r+0x54>
 800c5d8:	ebba 0b04 	subs.w	fp, sl, r4
 800c5dc:	d00b      	beq.n	800c5f6 <_svfiprintf_r+0x7e>
 800c5de:	465b      	mov	r3, fp
 800c5e0:	4622      	mov	r2, r4
 800c5e2:	4629      	mov	r1, r5
 800c5e4:	4638      	mov	r0, r7
 800c5e6:	f7ff ff6c 	bl	800c4c2 <__ssputs_r>
 800c5ea:	3001      	adds	r0, #1
 800c5ec:	f000 80a7 	beq.w	800c73e <_svfiprintf_r+0x1c6>
 800c5f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5f2:	445a      	add	r2, fp
 800c5f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f000 809f 	beq.w	800c73e <_svfiprintf_r+0x1c6>
 800c600:	2300      	movs	r3, #0
 800c602:	f04f 32ff 	mov.w	r2, #4294967295
 800c606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c60a:	f10a 0a01 	add.w	sl, sl, #1
 800c60e:	9304      	str	r3, [sp, #16]
 800c610:	9307      	str	r3, [sp, #28]
 800c612:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c616:	931a      	str	r3, [sp, #104]	@ 0x68
 800c618:	4654      	mov	r4, sl
 800c61a:	2205      	movs	r2, #5
 800c61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c620:	484e      	ldr	r0, [pc, #312]	@ (800c75c <_svfiprintf_r+0x1e4>)
 800c622:	f7f3 fdd5 	bl	80001d0 <memchr>
 800c626:	9a04      	ldr	r2, [sp, #16]
 800c628:	b9d8      	cbnz	r0, 800c662 <_svfiprintf_r+0xea>
 800c62a:	06d0      	lsls	r0, r2, #27
 800c62c:	bf44      	itt	mi
 800c62e:	2320      	movmi	r3, #32
 800c630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c634:	0711      	lsls	r1, r2, #28
 800c636:	bf44      	itt	mi
 800c638:	232b      	movmi	r3, #43	@ 0x2b
 800c63a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c63e:	f89a 3000 	ldrb.w	r3, [sl]
 800c642:	2b2a      	cmp	r3, #42	@ 0x2a
 800c644:	d015      	beq.n	800c672 <_svfiprintf_r+0xfa>
 800c646:	9a07      	ldr	r2, [sp, #28]
 800c648:	4654      	mov	r4, sl
 800c64a:	2000      	movs	r0, #0
 800c64c:	f04f 0c0a 	mov.w	ip, #10
 800c650:	4621      	mov	r1, r4
 800c652:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c656:	3b30      	subs	r3, #48	@ 0x30
 800c658:	2b09      	cmp	r3, #9
 800c65a:	d94b      	bls.n	800c6f4 <_svfiprintf_r+0x17c>
 800c65c:	b1b0      	cbz	r0, 800c68c <_svfiprintf_r+0x114>
 800c65e:	9207      	str	r2, [sp, #28]
 800c660:	e014      	b.n	800c68c <_svfiprintf_r+0x114>
 800c662:	eba0 0308 	sub.w	r3, r0, r8
 800c666:	fa09 f303 	lsl.w	r3, r9, r3
 800c66a:	4313      	orrs	r3, r2
 800c66c:	9304      	str	r3, [sp, #16]
 800c66e:	46a2      	mov	sl, r4
 800c670:	e7d2      	b.n	800c618 <_svfiprintf_r+0xa0>
 800c672:	9b03      	ldr	r3, [sp, #12]
 800c674:	1d19      	adds	r1, r3, #4
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	9103      	str	r1, [sp, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	bfbb      	ittet	lt
 800c67e:	425b      	neglt	r3, r3
 800c680:	f042 0202 	orrlt.w	r2, r2, #2
 800c684:	9307      	strge	r3, [sp, #28]
 800c686:	9307      	strlt	r3, [sp, #28]
 800c688:	bfb8      	it	lt
 800c68a:	9204      	strlt	r2, [sp, #16]
 800c68c:	7823      	ldrb	r3, [r4, #0]
 800c68e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c690:	d10a      	bne.n	800c6a8 <_svfiprintf_r+0x130>
 800c692:	7863      	ldrb	r3, [r4, #1]
 800c694:	2b2a      	cmp	r3, #42	@ 0x2a
 800c696:	d132      	bne.n	800c6fe <_svfiprintf_r+0x186>
 800c698:	9b03      	ldr	r3, [sp, #12]
 800c69a:	1d1a      	adds	r2, r3, #4
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	9203      	str	r2, [sp, #12]
 800c6a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6a4:	3402      	adds	r4, #2
 800c6a6:	9305      	str	r3, [sp, #20]
 800c6a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c76c <_svfiprintf_r+0x1f4>
 800c6ac:	7821      	ldrb	r1, [r4, #0]
 800c6ae:	2203      	movs	r2, #3
 800c6b0:	4650      	mov	r0, sl
 800c6b2:	f7f3 fd8d 	bl	80001d0 <memchr>
 800c6b6:	b138      	cbz	r0, 800c6c8 <_svfiprintf_r+0x150>
 800c6b8:	9b04      	ldr	r3, [sp, #16]
 800c6ba:	eba0 000a 	sub.w	r0, r0, sl
 800c6be:	2240      	movs	r2, #64	@ 0x40
 800c6c0:	4082      	lsls	r2, r0
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	3401      	adds	r4, #1
 800c6c6:	9304      	str	r3, [sp, #16]
 800c6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6cc:	4824      	ldr	r0, [pc, #144]	@ (800c760 <_svfiprintf_r+0x1e8>)
 800c6ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6d2:	2206      	movs	r2, #6
 800c6d4:	f7f3 fd7c 	bl	80001d0 <memchr>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d036      	beq.n	800c74a <_svfiprintf_r+0x1d2>
 800c6dc:	4b21      	ldr	r3, [pc, #132]	@ (800c764 <_svfiprintf_r+0x1ec>)
 800c6de:	bb1b      	cbnz	r3, 800c728 <_svfiprintf_r+0x1b0>
 800c6e0:	9b03      	ldr	r3, [sp, #12]
 800c6e2:	3307      	adds	r3, #7
 800c6e4:	f023 0307 	bic.w	r3, r3, #7
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	9303      	str	r3, [sp, #12]
 800c6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6ee:	4433      	add	r3, r6
 800c6f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f2:	e76a      	b.n	800c5ca <_svfiprintf_r+0x52>
 800c6f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	e7a8      	b.n	800c650 <_svfiprintf_r+0xd8>
 800c6fe:	2300      	movs	r3, #0
 800c700:	3401      	adds	r4, #1
 800c702:	9305      	str	r3, [sp, #20]
 800c704:	4619      	mov	r1, r3
 800c706:	f04f 0c0a 	mov.w	ip, #10
 800c70a:	4620      	mov	r0, r4
 800c70c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c710:	3a30      	subs	r2, #48	@ 0x30
 800c712:	2a09      	cmp	r2, #9
 800c714:	d903      	bls.n	800c71e <_svfiprintf_r+0x1a6>
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0c6      	beq.n	800c6a8 <_svfiprintf_r+0x130>
 800c71a:	9105      	str	r1, [sp, #20]
 800c71c:	e7c4      	b.n	800c6a8 <_svfiprintf_r+0x130>
 800c71e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c722:	4604      	mov	r4, r0
 800c724:	2301      	movs	r3, #1
 800c726:	e7f0      	b.n	800c70a <_svfiprintf_r+0x192>
 800c728:	ab03      	add	r3, sp, #12
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	462a      	mov	r2, r5
 800c72e:	4b0e      	ldr	r3, [pc, #56]	@ (800c768 <_svfiprintf_r+0x1f0>)
 800c730:	a904      	add	r1, sp, #16
 800c732:	4638      	mov	r0, r7
 800c734:	f7fc ff82 	bl	800963c <_printf_float>
 800c738:	1c42      	adds	r2, r0, #1
 800c73a:	4606      	mov	r6, r0
 800c73c:	d1d6      	bne.n	800c6ec <_svfiprintf_r+0x174>
 800c73e:	89ab      	ldrh	r3, [r5, #12]
 800c740:	065b      	lsls	r3, r3, #25
 800c742:	f53f af2d 	bmi.w	800c5a0 <_svfiprintf_r+0x28>
 800c746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c748:	e72c      	b.n	800c5a4 <_svfiprintf_r+0x2c>
 800c74a:	ab03      	add	r3, sp, #12
 800c74c:	9300      	str	r3, [sp, #0]
 800c74e:	462a      	mov	r2, r5
 800c750:	4b05      	ldr	r3, [pc, #20]	@ (800c768 <_svfiprintf_r+0x1f0>)
 800c752:	a904      	add	r1, sp, #16
 800c754:	4638      	mov	r0, r7
 800c756:	f7fd fa09 	bl	8009b6c <_printf_i>
 800c75a:	e7ed      	b.n	800c738 <_svfiprintf_r+0x1c0>
 800c75c:	0800d3b8 	.word	0x0800d3b8
 800c760:	0800d3c2 	.word	0x0800d3c2
 800c764:	0800963d 	.word	0x0800963d
 800c768:	0800c4c3 	.word	0x0800c4c3
 800c76c:	0800d3be 	.word	0x0800d3be

0800c770 <__sfputc_r>:
 800c770:	6893      	ldr	r3, [r2, #8]
 800c772:	3b01      	subs	r3, #1
 800c774:	2b00      	cmp	r3, #0
 800c776:	b410      	push	{r4}
 800c778:	6093      	str	r3, [r2, #8]
 800c77a:	da08      	bge.n	800c78e <__sfputc_r+0x1e>
 800c77c:	6994      	ldr	r4, [r2, #24]
 800c77e:	42a3      	cmp	r3, r4
 800c780:	db01      	blt.n	800c786 <__sfputc_r+0x16>
 800c782:	290a      	cmp	r1, #10
 800c784:	d103      	bne.n	800c78e <__sfputc_r+0x1e>
 800c786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c78a:	f000 b9df 	b.w	800cb4c <__swbuf_r>
 800c78e:	6813      	ldr	r3, [r2, #0]
 800c790:	1c58      	adds	r0, r3, #1
 800c792:	6010      	str	r0, [r2, #0]
 800c794:	7019      	strb	r1, [r3, #0]
 800c796:	4608      	mov	r0, r1
 800c798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c79c:	4770      	bx	lr

0800c79e <__sfputs_r>:
 800c79e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	460f      	mov	r7, r1
 800c7a4:	4614      	mov	r4, r2
 800c7a6:	18d5      	adds	r5, r2, r3
 800c7a8:	42ac      	cmp	r4, r5
 800c7aa:	d101      	bne.n	800c7b0 <__sfputs_r+0x12>
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	e007      	b.n	800c7c0 <__sfputs_r+0x22>
 800c7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b4:	463a      	mov	r2, r7
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	f7ff ffda 	bl	800c770 <__sfputc_r>
 800c7bc:	1c43      	adds	r3, r0, #1
 800c7be:	d1f3      	bne.n	800c7a8 <__sfputs_r+0xa>
 800c7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7c4 <_vfiprintf_r>:
 800c7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c8:	460d      	mov	r5, r1
 800c7ca:	b09d      	sub	sp, #116	@ 0x74
 800c7cc:	4614      	mov	r4, r2
 800c7ce:	4698      	mov	r8, r3
 800c7d0:	4606      	mov	r6, r0
 800c7d2:	b118      	cbz	r0, 800c7dc <_vfiprintf_r+0x18>
 800c7d4:	6a03      	ldr	r3, [r0, #32]
 800c7d6:	b90b      	cbnz	r3, 800c7dc <_vfiprintf_r+0x18>
 800c7d8:	f7fd fd80 	bl	800a2dc <__sinit>
 800c7dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7de:	07d9      	lsls	r1, r3, #31
 800c7e0:	d405      	bmi.n	800c7ee <_vfiprintf_r+0x2a>
 800c7e2:	89ab      	ldrh	r3, [r5, #12]
 800c7e4:	059a      	lsls	r2, r3, #22
 800c7e6:	d402      	bmi.n	800c7ee <_vfiprintf_r+0x2a>
 800c7e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7ea:	f7fd ff20 	bl	800a62e <__retarget_lock_acquire_recursive>
 800c7ee:	89ab      	ldrh	r3, [r5, #12]
 800c7f0:	071b      	lsls	r3, r3, #28
 800c7f2:	d501      	bpl.n	800c7f8 <_vfiprintf_r+0x34>
 800c7f4:	692b      	ldr	r3, [r5, #16]
 800c7f6:	b99b      	cbnz	r3, 800c820 <_vfiprintf_r+0x5c>
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f000 f9e4 	bl	800cbc8 <__swsetup_r>
 800c800:	b170      	cbz	r0, 800c820 <_vfiprintf_r+0x5c>
 800c802:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c804:	07dc      	lsls	r4, r3, #31
 800c806:	d504      	bpl.n	800c812 <_vfiprintf_r+0x4e>
 800c808:	f04f 30ff 	mov.w	r0, #4294967295
 800c80c:	b01d      	add	sp, #116	@ 0x74
 800c80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c812:	89ab      	ldrh	r3, [r5, #12]
 800c814:	0598      	lsls	r0, r3, #22
 800c816:	d4f7      	bmi.n	800c808 <_vfiprintf_r+0x44>
 800c818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c81a:	f7fd ff09 	bl	800a630 <__retarget_lock_release_recursive>
 800c81e:	e7f3      	b.n	800c808 <_vfiprintf_r+0x44>
 800c820:	2300      	movs	r3, #0
 800c822:	9309      	str	r3, [sp, #36]	@ 0x24
 800c824:	2320      	movs	r3, #32
 800c826:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c82a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c82e:	2330      	movs	r3, #48	@ 0x30
 800c830:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c9e0 <_vfiprintf_r+0x21c>
 800c834:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c838:	f04f 0901 	mov.w	r9, #1
 800c83c:	4623      	mov	r3, r4
 800c83e:	469a      	mov	sl, r3
 800c840:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c844:	b10a      	cbz	r2, 800c84a <_vfiprintf_r+0x86>
 800c846:	2a25      	cmp	r2, #37	@ 0x25
 800c848:	d1f9      	bne.n	800c83e <_vfiprintf_r+0x7a>
 800c84a:	ebba 0b04 	subs.w	fp, sl, r4
 800c84e:	d00b      	beq.n	800c868 <_vfiprintf_r+0xa4>
 800c850:	465b      	mov	r3, fp
 800c852:	4622      	mov	r2, r4
 800c854:	4629      	mov	r1, r5
 800c856:	4630      	mov	r0, r6
 800c858:	f7ff ffa1 	bl	800c79e <__sfputs_r>
 800c85c:	3001      	adds	r0, #1
 800c85e:	f000 80a7 	beq.w	800c9b0 <_vfiprintf_r+0x1ec>
 800c862:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c864:	445a      	add	r2, fp
 800c866:	9209      	str	r2, [sp, #36]	@ 0x24
 800c868:	f89a 3000 	ldrb.w	r3, [sl]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 809f 	beq.w	800c9b0 <_vfiprintf_r+0x1ec>
 800c872:	2300      	movs	r3, #0
 800c874:	f04f 32ff 	mov.w	r2, #4294967295
 800c878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c87c:	f10a 0a01 	add.w	sl, sl, #1
 800c880:	9304      	str	r3, [sp, #16]
 800c882:	9307      	str	r3, [sp, #28]
 800c884:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c888:	931a      	str	r3, [sp, #104]	@ 0x68
 800c88a:	4654      	mov	r4, sl
 800c88c:	2205      	movs	r2, #5
 800c88e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c892:	4853      	ldr	r0, [pc, #332]	@ (800c9e0 <_vfiprintf_r+0x21c>)
 800c894:	f7f3 fc9c 	bl	80001d0 <memchr>
 800c898:	9a04      	ldr	r2, [sp, #16]
 800c89a:	b9d8      	cbnz	r0, 800c8d4 <_vfiprintf_r+0x110>
 800c89c:	06d1      	lsls	r1, r2, #27
 800c89e:	bf44      	itt	mi
 800c8a0:	2320      	movmi	r3, #32
 800c8a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8a6:	0713      	lsls	r3, r2, #28
 800c8a8:	bf44      	itt	mi
 800c8aa:	232b      	movmi	r3, #43	@ 0x2b
 800c8ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8b6:	d015      	beq.n	800c8e4 <_vfiprintf_r+0x120>
 800c8b8:	9a07      	ldr	r2, [sp, #28]
 800c8ba:	4654      	mov	r4, sl
 800c8bc:	2000      	movs	r0, #0
 800c8be:	f04f 0c0a 	mov.w	ip, #10
 800c8c2:	4621      	mov	r1, r4
 800c8c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8c8:	3b30      	subs	r3, #48	@ 0x30
 800c8ca:	2b09      	cmp	r3, #9
 800c8cc:	d94b      	bls.n	800c966 <_vfiprintf_r+0x1a2>
 800c8ce:	b1b0      	cbz	r0, 800c8fe <_vfiprintf_r+0x13a>
 800c8d0:	9207      	str	r2, [sp, #28]
 800c8d2:	e014      	b.n	800c8fe <_vfiprintf_r+0x13a>
 800c8d4:	eba0 0308 	sub.w	r3, r0, r8
 800c8d8:	fa09 f303 	lsl.w	r3, r9, r3
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	9304      	str	r3, [sp, #16]
 800c8e0:	46a2      	mov	sl, r4
 800c8e2:	e7d2      	b.n	800c88a <_vfiprintf_r+0xc6>
 800c8e4:	9b03      	ldr	r3, [sp, #12]
 800c8e6:	1d19      	adds	r1, r3, #4
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	9103      	str	r1, [sp, #12]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	bfbb      	ittet	lt
 800c8f0:	425b      	neglt	r3, r3
 800c8f2:	f042 0202 	orrlt.w	r2, r2, #2
 800c8f6:	9307      	strge	r3, [sp, #28]
 800c8f8:	9307      	strlt	r3, [sp, #28]
 800c8fa:	bfb8      	it	lt
 800c8fc:	9204      	strlt	r2, [sp, #16]
 800c8fe:	7823      	ldrb	r3, [r4, #0]
 800c900:	2b2e      	cmp	r3, #46	@ 0x2e
 800c902:	d10a      	bne.n	800c91a <_vfiprintf_r+0x156>
 800c904:	7863      	ldrb	r3, [r4, #1]
 800c906:	2b2a      	cmp	r3, #42	@ 0x2a
 800c908:	d132      	bne.n	800c970 <_vfiprintf_r+0x1ac>
 800c90a:	9b03      	ldr	r3, [sp, #12]
 800c90c:	1d1a      	adds	r2, r3, #4
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	9203      	str	r2, [sp, #12]
 800c912:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c916:	3402      	adds	r4, #2
 800c918:	9305      	str	r3, [sp, #20]
 800c91a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c9f0 <_vfiprintf_r+0x22c>
 800c91e:	7821      	ldrb	r1, [r4, #0]
 800c920:	2203      	movs	r2, #3
 800c922:	4650      	mov	r0, sl
 800c924:	f7f3 fc54 	bl	80001d0 <memchr>
 800c928:	b138      	cbz	r0, 800c93a <_vfiprintf_r+0x176>
 800c92a:	9b04      	ldr	r3, [sp, #16]
 800c92c:	eba0 000a 	sub.w	r0, r0, sl
 800c930:	2240      	movs	r2, #64	@ 0x40
 800c932:	4082      	lsls	r2, r0
 800c934:	4313      	orrs	r3, r2
 800c936:	3401      	adds	r4, #1
 800c938:	9304      	str	r3, [sp, #16]
 800c93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c93e:	4829      	ldr	r0, [pc, #164]	@ (800c9e4 <_vfiprintf_r+0x220>)
 800c940:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c944:	2206      	movs	r2, #6
 800c946:	f7f3 fc43 	bl	80001d0 <memchr>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	d03f      	beq.n	800c9ce <_vfiprintf_r+0x20a>
 800c94e:	4b26      	ldr	r3, [pc, #152]	@ (800c9e8 <_vfiprintf_r+0x224>)
 800c950:	bb1b      	cbnz	r3, 800c99a <_vfiprintf_r+0x1d6>
 800c952:	9b03      	ldr	r3, [sp, #12]
 800c954:	3307      	adds	r3, #7
 800c956:	f023 0307 	bic.w	r3, r3, #7
 800c95a:	3308      	adds	r3, #8
 800c95c:	9303      	str	r3, [sp, #12]
 800c95e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c960:	443b      	add	r3, r7
 800c962:	9309      	str	r3, [sp, #36]	@ 0x24
 800c964:	e76a      	b.n	800c83c <_vfiprintf_r+0x78>
 800c966:	fb0c 3202 	mla	r2, ip, r2, r3
 800c96a:	460c      	mov	r4, r1
 800c96c:	2001      	movs	r0, #1
 800c96e:	e7a8      	b.n	800c8c2 <_vfiprintf_r+0xfe>
 800c970:	2300      	movs	r3, #0
 800c972:	3401      	adds	r4, #1
 800c974:	9305      	str	r3, [sp, #20]
 800c976:	4619      	mov	r1, r3
 800c978:	f04f 0c0a 	mov.w	ip, #10
 800c97c:	4620      	mov	r0, r4
 800c97e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c982:	3a30      	subs	r2, #48	@ 0x30
 800c984:	2a09      	cmp	r2, #9
 800c986:	d903      	bls.n	800c990 <_vfiprintf_r+0x1cc>
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d0c6      	beq.n	800c91a <_vfiprintf_r+0x156>
 800c98c:	9105      	str	r1, [sp, #20]
 800c98e:	e7c4      	b.n	800c91a <_vfiprintf_r+0x156>
 800c990:	fb0c 2101 	mla	r1, ip, r1, r2
 800c994:	4604      	mov	r4, r0
 800c996:	2301      	movs	r3, #1
 800c998:	e7f0      	b.n	800c97c <_vfiprintf_r+0x1b8>
 800c99a:	ab03      	add	r3, sp, #12
 800c99c:	9300      	str	r3, [sp, #0]
 800c99e:	462a      	mov	r2, r5
 800c9a0:	4b12      	ldr	r3, [pc, #72]	@ (800c9ec <_vfiprintf_r+0x228>)
 800c9a2:	a904      	add	r1, sp, #16
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f7fc fe49 	bl	800963c <_printf_float>
 800c9aa:	4607      	mov	r7, r0
 800c9ac:	1c78      	adds	r0, r7, #1
 800c9ae:	d1d6      	bne.n	800c95e <_vfiprintf_r+0x19a>
 800c9b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9b2:	07d9      	lsls	r1, r3, #31
 800c9b4:	d405      	bmi.n	800c9c2 <_vfiprintf_r+0x1fe>
 800c9b6:	89ab      	ldrh	r3, [r5, #12]
 800c9b8:	059a      	lsls	r2, r3, #22
 800c9ba:	d402      	bmi.n	800c9c2 <_vfiprintf_r+0x1fe>
 800c9bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9be:	f7fd fe37 	bl	800a630 <__retarget_lock_release_recursive>
 800c9c2:	89ab      	ldrh	r3, [r5, #12]
 800c9c4:	065b      	lsls	r3, r3, #25
 800c9c6:	f53f af1f 	bmi.w	800c808 <_vfiprintf_r+0x44>
 800c9ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9cc:	e71e      	b.n	800c80c <_vfiprintf_r+0x48>
 800c9ce:	ab03      	add	r3, sp, #12
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	462a      	mov	r2, r5
 800c9d4:	4b05      	ldr	r3, [pc, #20]	@ (800c9ec <_vfiprintf_r+0x228>)
 800c9d6:	a904      	add	r1, sp, #16
 800c9d8:	4630      	mov	r0, r6
 800c9da:	f7fd f8c7 	bl	8009b6c <_printf_i>
 800c9de:	e7e4      	b.n	800c9aa <_vfiprintf_r+0x1e6>
 800c9e0:	0800d3b8 	.word	0x0800d3b8
 800c9e4:	0800d3c2 	.word	0x0800d3c2
 800c9e8:	0800963d 	.word	0x0800963d
 800c9ec:	0800c79f 	.word	0x0800c79f
 800c9f0:	0800d3be 	.word	0x0800d3be

0800c9f4 <__sflush_r>:
 800c9f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fc:	0716      	lsls	r6, r2, #28
 800c9fe:	4605      	mov	r5, r0
 800ca00:	460c      	mov	r4, r1
 800ca02:	d454      	bmi.n	800caae <__sflush_r+0xba>
 800ca04:	684b      	ldr	r3, [r1, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	dc02      	bgt.n	800ca10 <__sflush_r+0x1c>
 800ca0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	dd48      	ble.n	800caa2 <__sflush_r+0xae>
 800ca10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca12:	2e00      	cmp	r6, #0
 800ca14:	d045      	beq.n	800caa2 <__sflush_r+0xae>
 800ca16:	2300      	movs	r3, #0
 800ca18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca1c:	682f      	ldr	r7, [r5, #0]
 800ca1e:	6a21      	ldr	r1, [r4, #32]
 800ca20:	602b      	str	r3, [r5, #0]
 800ca22:	d030      	beq.n	800ca86 <__sflush_r+0x92>
 800ca24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca26:	89a3      	ldrh	r3, [r4, #12]
 800ca28:	0759      	lsls	r1, r3, #29
 800ca2a:	d505      	bpl.n	800ca38 <__sflush_r+0x44>
 800ca2c:	6863      	ldr	r3, [r4, #4]
 800ca2e:	1ad2      	subs	r2, r2, r3
 800ca30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca32:	b10b      	cbz	r3, 800ca38 <__sflush_r+0x44>
 800ca34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca36:	1ad2      	subs	r2, r2, r3
 800ca38:	2300      	movs	r3, #0
 800ca3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca3c:	6a21      	ldr	r1, [r4, #32]
 800ca3e:	4628      	mov	r0, r5
 800ca40:	47b0      	blx	r6
 800ca42:	1c43      	adds	r3, r0, #1
 800ca44:	89a3      	ldrh	r3, [r4, #12]
 800ca46:	d106      	bne.n	800ca56 <__sflush_r+0x62>
 800ca48:	6829      	ldr	r1, [r5, #0]
 800ca4a:	291d      	cmp	r1, #29
 800ca4c:	d82b      	bhi.n	800caa6 <__sflush_r+0xb2>
 800ca4e:	4a2a      	ldr	r2, [pc, #168]	@ (800caf8 <__sflush_r+0x104>)
 800ca50:	40ca      	lsrs	r2, r1
 800ca52:	07d6      	lsls	r6, r2, #31
 800ca54:	d527      	bpl.n	800caa6 <__sflush_r+0xb2>
 800ca56:	2200      	movs	r2, #0
 800ca58:	6062      	str	r2, [r4, #4]
 800ca5a:	04d9      	lsls	r1, r3, #19
 800ca5c:	6922      	ldr	r2, [r4, #16]
 800ca5e:	6022      	str	r2, [r4, #0]
 800ca60:	d504      	bpl.n	800ca6c <__sflush_r+0x78>
 800ca62:	1c42      	adds	r2, r0, #1
 800ca64:	d101      	bne.n	800ca6a <__sflush_r+0x76>
 800ca66:	682b      	ldr	r3, [r5, #0]
 800ca68:	b903      	cbnz	r3, 800ca6c <__sflush_r+0x78>
 800ca6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca6e:	602f      	str	r7, [r5, #0]
 800ca70:	b1b9      	cbz	r1, 800caa2 <__sflush_r+0xae>
 800ca72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca76:	4299      	cmp	r1, r3
 800ca78:	d002      	beq.n	800ca80 <__sflush_r+0x8c>
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	f7fe fc58 	bl	800b330 <_free_r>
 800ca80:	2300      	movs	r3, #0
 800ca82:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca84:	e00d      	b.n	800caa2 <__sflush_r+0xae>
 800ca86:	2301      	movs	r3, #1
 800ca88:	4628      	mov	r0, r5
 800ca8a:	47b0      	blx	r6
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	1c50      	adds	r0, r2, #1
 800ca90:	d1c9      	bne.n	800ca26 <__sflush_r+0x32>
 800ca92:	682b      	ldr	r3, [r5, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d0c6      	beq.n	800ca26 <__sflush_r+0x32>
 800ca98:	2b1d      	cmp	r3, #29
 800ca9a:	d001      	beq.n	800caa0 <__sflush_r+0xac>
 800ca9c:	2b16      	cmp	r3, #22
 800ca9e:	d11e      	bne.n	800cade <__sflush_r+0xea>
 800caa0:	602f      	str	r7, [r5, #0]
 800caa2:	2000      	movs	r0, #0
 800caa4:	e022      	b.n	800caec <__sflush_r+0xf8>
 800caa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caaa:	b21b      	sxth	r3, r3
 800caac:	e01b      	b.n	800cae6 <__sflush_r+0xf2>
 800caae:	690f      	ldr	r7, [r1, #16]
 800cab0:	2f00      	cmp	r7, #0
 800cab2:	d0f6      	beq.n	800caa2 <__sflush_r+0xae>
 800cab4:	0793      	lsls	r3, r2, #30
 800cab6:	680e      	ldr	r6, [r1, #0]
 800cab8:	bf08      	it	eq
 800caba:	694b      	ldreq	r3, [r1, #20]
 800cabc:	600f      	str	r7, [r1, #0]
 800cabe:	bf18      	it	ne
 800cac0:	2300      	movne	r3, #0
 800cac2:	eba6 0807 	sub.w	r8, r6, r7
 800cac6:	608b      	str	r3, [r1, #8]
 800cac8:	f1b8 0f00 	cmp.w	r8, #0
 800cacc:	dde9      	ble.n	800caa2 <__sflush_r+0xae>
 800cace:	6a21      	ldr	r1, [r4, #32]
 800cad0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cad2:	4643      	mov	r3, r8
 800cad4:	463a      	mov	r2, r7
 800cad6:	4628      	mov	r0, r5
 800cad8:	47b0      	blx	r6
 800cada:	2800      	cmp	r0, #0
 800cadc:	dc08      	bgt.n	800caf0 <__sflush_r+0xfc>
 800cade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cae6:	81a3      	strh	r3, [r4, #12]
 800cae8:	f04f 30ff 	mov.w	r0, #4294967295
 800caec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf0:	4407      	add	r7, r0
 800caf2:	eba8 0800 	sub.w	r8, r8, r0
 800caf6:	e7e7      	b.n	800cac8 <__sflush_r+0xd4>
 800caf8:	20400001 	.word	0x20400001

0800cafc <_fflush_r>:
 800cafc:	b538      	push	{r3, r4, r5, lr}
 800cafe:	690b      	ldr	r3, [r1, #16]
 800cb00:	4605      	mov	r5, r0
 800cb02:	460c      	mov	r4, r1
 800cb04:	b913      	cbnz	r3, 800cb0c <_fflush_r+0x10>
 800cb06:	2500      	movs	r5, #0
 800cb08:	4628      	mov	r0, r5
 800cb0a:	bd38      	pop	{r3, r4, r5, pc}
 800cb0c:	b118      	cbz	r0, 800cb16 <_fflush_r+0x1a>
 800cb0e:	6a03      	ldr	r3, [r0, #32]
 800cb10:	b90b      	cbnz	r3, 800cb16 <_fflush_r+0x1a>
 800cb12:	f7fd fbe3 	bl	800a2dc <__sinit>
 800cb16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d0f3      	beq.n	800cb06 <_fflush_r+0xa>
 800cb1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb20:	07d0      	lsls	r0, r2, #31
 800cb22:	d404      	bmi.n	800cb2e <_fflush_r+0x32>
 800cb24:	0599      	lsls	r1, r3, #22
 800cb26:	d402      	bmi.n	800cb2e <_fflush_r+0x32>
 800cb28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb2a:	f7fd fd80 	bl	800a62e <__retarget_lock_acquire_recursive>
 800cb2e:	4628      	mov	r0, r5
 800cb30:	4621      	mov	r1, r4
 800cb32:	f7ff ff5f 	bl	800c9f4 <__sflush_r>
 800cb36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb38:	07da      	lsls	r2, r3, #31
 800cb3a:	4605      	mov	r5, r0
 800cb3c:	d4e4      	bmi.n	800cb08 <_fflush_r+0xc>
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	059b      	lsls	r3, r3, #22
 800cb42:	d4e1      	bmi.n	800cb08 <_fflush_r+0xc>
 800cb44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb46:	f7fd fd73 	bl	800a630 <__retarget_lock_release_recursive>
 800cb4a:	e7dd      	b.n	800cb08 <_fflush_r+0xc>

0800cb4c <__swbuf_r>:
 800cb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4e:	460e      	mov	r6, r1
 800cb50:	4614      	mov	r4, r2
 800cb52:	4605      	mov	r5, r0
 800cb54:	b118      	cbz	r0, 800cb5e <__swbuf_r+0x12>
 800cb56:	6a03      	ldr	r3, [r0, #32]
 800cb58:	b90b      	cbnz	r3, 800cb5e <__swbuf_r+0x12>
 800cb5a:	f7fd fbbf 	bl	800a2dc <__sinit>
 800cb5e:	69a3      	ldr	r3, [r4, #24]
 800cb60:	60a3      	str	r3, [r4, #8]
 800cb62:	89a3      	ldrh	r3, [r4, #12]
 800cb64:	071a      	lsls	r2, r3, #28
 800cb66:	d501      	bpl.n	800cb6c <__swbuf_r+0x20>
 800cb68:	6923      	ldr	r3, [r4, #16]
 800cb6a:	b943      	cbnz	r3, 800cb7e <__swbuf_r+0x32>
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	4628      	mov	r0, r5
 800cb70:	f000 f82a 	bl	800cbc8 <__swsetup_r>
 800cb74:	b118      	cbz	r0, 800cb7e <__swbuf_r+0x32>
 800cb76:	f04f 37ff 	mov.w	r7, #4294967295
 800cb7a:	4638      	mov	r0, r7
 800cb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb7e:	6823      	ldr	r3, [r4, #0]
 800cb80:	6922      	ldr	r2, [r4, #16]
 800cb82:	1a98      	subs	r0, r3, r2
 800cb84:	6963      	ldr	r3, [r4, #20]
 800cb86:	b2f6      	uxtb	r6, r6
 800cb88:	4283      	cmp	r3, r0
 800cb8a:	4637      	mov	r7, r6
 800cb8c:	dc05      	bgt.n	800cb9a <__swbuf_r+0x4e>
 800cb8e:	4621      	mov	r1, r4
 800cb90:	4628      	mov	r0, r5
 800cb92:	f7ff ffb3 	bl	800cafc <_fflush_r>
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d1ed      	bne.n	800cb76 <__swbuf_r+0x2a>
 800cb9a:	68a3      	ldr	r3, [r4, #8]
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	60a3      	str	r3, [r4, #8]
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	1c5a      	adds	r2, r3, #1
 800cba4:	6022      	str	r2, [r4, #0]
 800cba6:	701e      	strb	r6, [r3, #0]
 800cba8:	6962      	ldr	r2, [r4, #20]
 800cbaa:	1c43      	adds	r3, r0, #1
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d004      	beq.n	800cbba <__swbuf_r+0x6e>
 800cbb0:	89a3      	ldrh	r3, [r4, #12]
 800cbb2:	07db      	lsls	r3, r3, #31
 800cbb4:	d5e1      	bpl.n	800cb7a <__swbuf_r+0x2e>
 800cbb6:	2e0a      	cmp	r6, #10
 800cbb8:	d1df      	bne.n	800cb7a <__swbuf_r+0x2e>
 800cbba:	4621      	mov	r1, r4
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	f7ff ff9d 	bl	800cafc <_fflush_r>
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	d0d9      	beq.n	800cb7a <__swbuf_r+0x2e>
 800cbc6:	e7d6      	b.n	800cb76 <__swbuf_r+0x2a>

0800cbc8 <__swsetup_r>:
 800cbc8:	b538      	push	{r3, r4, r5, lr}
 800cbca:	4b29      	ldr	r3, [pc, #164]	@ (800cc70 <__swsetup_r+0xa8>)
 800cbcc:	4605      	mov	r5, r0
 800cbce:	6818      	ldr	r0, [r3, #0]
 800cbd0:	460c      	mov	r4, r1
 800cbd2:	b118      	cbz	r0, 800cbdc <__swsetup_r+0x14>
 800cbd4:	6a03      	ldr	r3, [r0, #32]
 800cbd6:	b90b      	cbnz	r3, 800cbdc <__swsetup_r+0x14>
 800cbd8:	f7fd fb80 	bl	800a2dc <__sinit>
 800cbdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe0:	0719      	lsls	r1, r3, #28
 800cbe2:	d422      	bmi.n	800cc2a <__swsetup_r+0x62>
 800cbe4:	06da      	lsls	r2, r3, #27
 800cbe6:	d407      	bmi.n	800cbf8 <__swsetup_r+0x30>
 800cbe8:	2209      	movs	r2, #9
 800cbea:	602a      	str	r2, [r5, #0]
 800cbec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbf0:	81a3      	strh	r3, [r4, #12]
 800cbf2:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf6:	e033      	b.n	800cc60 <__swsetup_r+0x98>
 800cbf8:	0758      	lsls	r0, r3, #29
 800cbfa:	d512      	bpl.n	800cc22 <__swsetup_r+0x5a>
 800cbfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbfe:	b141      	cbz	r1, 800cc12 <__swsetup_r+0x4a>
 800cc00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc04:	4299      	cmp	r1, r3
 800cc06:	d002      	beq.n	800cc0e <__swsetup_r+0x46>
 800cc08:	4628      	mov	r0, r5
 800cc0a:	f7fe fb91 	bl	800b330 <_free_r>
 800cc0e:	2300      	movs	r3, #0
 800cc10:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc12:	89a3      	ldrh	r3, [r4, #12]
 800cc14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cc18:	81a3      	strh	r3, [r4, #12]
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	6063      	str	r3, [r4, #4]
 800cc1e:	6923      	ldr	r3, [r4, #16]
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	89a3      	ldrh	r3, [r4, #12]
 800cc24:	f043 0308 	orr.w	r3, r3, #8
 800cc28:	81a3      	strh	r3, [r4, #12]
 800cc2a:	6923      	ldr	r3, [r4, #16]
 800cc2c:	b94b      	cbnz	r3, 800cc42 <__swsetup_r+0x7a>
 800cc2e:	89a3      	ldrh	r3, [r4, #12]
 800cc30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cc34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc38:	d003      	beq.n	800cc42 <__swsetup_r+0x7a>
 800cc3a:	4621      	mov	r1, r4
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	f000 f8df 	bl	800ce00 <__smakebuf_r>
 800cc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc46:	f013 0201 	ands.w	r2, r3, #1
 800cc4a:	d00a      	beq.n	800cc62 <__swsetup_r+0x9a>
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	60a2      	str	r2, [r4, #8]
 800cc50:	6962      	ldr	r2, [r4, #20]
 800cc52:	4252      	negs	r2, r2
 800cc54:	61a2      	str	r2, [r4, #24]
 800cc56:	6922      	ldr	r2, [r4, #16]
 800cc58:	b942      	cbnz	r2, 800cc6c <__swsetup_r+0xa4>
 800cc5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc5e:	d1c5      	bne.n	800cbec <__swsetup_r+0x24>
 800cc60:	bd38      	pop	{r3, r4, r5, pc}
 800cc62:	0799      	lsls	r1, r3, #30
 800cc64:	bf58      	it	pl
 800cc66:	6962      	ldrpl	r2, [r4, #20]
 800cc68:	60a2      	str	r2, [r4, #8]
 800cc6a:	e7f4      	b.n	800cc56 <__swsetup_r+0x8e>
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	e7f7      	b.n	800cc60 <__swsetup_r+0x98>
 800cc70:	20000300 	.word	0x20000300

0800cc74 <memmove>:
 800cc74:	4288      	cmp	r0, r1
 800cc76:	b510      	push	{r4, lr}
 800cc78:	eb01 0402 	add.w	r4, r1, r2
 800cc7c:	d902      	bls.n	800cc84 <memmove+0x10>
 800cc7e:	4284      	cmp	r4, r0
 800cc80:	4623      	mov	r3, r4
 800cc82:	d807      	bhi.n	800cc94 <memmove+0x20>
 800cc84:	1e43      	subs	r3, r0, #1
 800cc86:	42a1      	cmp	r1, r4
 800cc88:	d008      	beq.n	800cc9c <memmove+0x28>
 800cc8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc92:	e7f8      	b.n	800cc86 <memmove+0x12>
 800cc94:	4402      	add	r2, r0
 800cc96:	4601      	mov	r1, r0
 800cc98:	428a      	cmp	r2, r1
 800cc9a:	d100      	bne.n	800cc9e <memmove+0x2a>
 800cc9c:	bd10      	pop	{r4, pc}
 800cc9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cca6:	e7f7      	b.n	800cc98 <memmove+0x24>

0800cca8 <_raise_r>:
 800cca8:	291f      	cmp	r1, #31
 800ccaa:	b538      	push	{r3, r4, r5, lr}
 800ccac:	4605      	mov	r5, r0
 800ccae:	460c      	mov	r4, r1
 800ccb0:	d904      	bls.n	800ccbc <_raise_r+0x14>
 800ccb2:	2316      	movs	r3, #22
 800ccb4:	6003      	str	r3, [r0, #0]
 800ccb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccba:	bd38      	pop	{r3, r4, r5, pc}
 800ccbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ccbe:	b112      	cbz	r2, 800ccc6 <_raise_r+0x1e>
 800ccc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccc4:	b94b      	cbnz	r3, 800ccda <_raise_r+0x32>
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	f000 f830 	bl	800cd2c <_getpid_r>
 800cccc:	4622      	mov	r2, r4
 800ccce:	4601      	mov	r1, r0
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccd6:	f000 b817 	b.w	800cd08 <_kill_r>
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d00a      	beq.n	800ccf4 <_raise_r+0x4c>
 800ccde:	1c59      	adds	r1, r3, #1
 800cce0:	d103      	bne.n	800ccea <_raise_r+0x42>
 800cce2:	2316      	movs	r3, #22
 800cce4:	6003      	str	r3, [r0, #0]
 800cce6:	2001      	movs	r0, #1
 800cce8:	e7e7      	b.n	800ccba <_raise_r+0x12>
 800ccea:	2100      	movs	r1, #0
 800ccec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	4798      	blx	r3
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	e7e0      	b.n	800ccba <_raise_r+0x12>

0800ccf8 <raise>:
 800ccf8:	4b02      	ldr	r3, [pc, #8]	@ (800cd04 <raise+0xc>)
 800ccfa:	4601      	mov	r1, r0
 800ccfc:	6818      	ldr	r0, [r3, #0]
 800ccfe:	f7ff bfd3 	b.w	800cca8 <_raise_r>
 800cd02:	bf00      	nop
 800cd04:	20000300 	.word	0x20000300

0800cd08 <_kill_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4d07      	ldr	r5, [pc, #28]	@ (800cd28 <_kill_r+0x20>)
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	4604      	mov	r4, r0
 800cd10:	4608      	mov	r0, r1
 800cd12:	4611      	mov	r1, r2
 800cd14:	602b      	str	r3, [r5, #0]
 800cd16:	f7f6 fa43 	bl	80031a0 <_kill>
 800cd1a:	1c43      	adds	r3, r0, #1
 800cd1c:	d102      	bne.n	800cd24 <_kill_r+0x1c>
 800cd1e:	682b      	ldr	r3, [r5, #0]
 800cd20:	b103      	cbz	r3, 800cd24 <_kill_r+0x1c>
 800cd22:	6023      	str	r3, [r4, #0]
 800cd24:	bd38      	pop	{r3, r4, r5, pc}
 800cd26:	bf00      	nop
 800cd28:	20000edc 	.word	0x20000edc

0800cd2c <_getpid_r>:
 800cd2c:	f7f6 ba30 	b.w	8003190 <_getpid>

0800cd30 <_calloc_r>:
 800cd30:	b570      	push	{r4, r5, r6, lr}
 800cd32:	fba1 5402 	umull	r5, r4, r1, r2
 800cd36:	b934      	cbnz	r4, 800cd46 <_calloc_r+0x16>
 800cd38:	4629      	mov	r1, r5
 800cd3a:	f7fb fd49 	bl	80087d0 <_malloc_r>
 800cd3e:	4606      	mov	r6, r0
 800cd40:	b928      	cbnz	r0, 800cd4e <_calloc_r+0x1e>
 800cd42:	4630      	mov	r0, r6
 800cd44:	bd70      	pop	{r4, r5, r6, pc}
 800cd46:	220c      	movs	r2, #12
 800cd48:	6002      	str	r2, [r0, #0]
 800cd4a:	2600      	movs	r6, #0
 800cd4c:	e7f9      	b.n	800cd42 <_calloc_r+0x12>
 800cd4e:	462a      	mov	r2, r5
 800cd50:	4621      	mov	r1, r4
 800cd52:	f7fd fb70 	bl	800a436 <memset>
 800cd56:	e7f4      	b.n	800cd42 <_calloc_r+0x12>

0800cd58 <_realloc_r>:
 800cd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5c:	4607      	mov	r7, r0
 800cd5e:	4614      	mov	r4, r2
 800cd60:	460d      	mov	r5, r1
 800cd62:	b921      	cbnz	r1, 800cd6e <_realloc_r+0x16>
 800cd64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd68:	4611      	mov	r1, r2
 800cd6a:	f7fb bd31 	b.w	80087d0 <_malloc_r>
 800cd6e:	b92a      	cbnz	r2, 800cd7c <_realloc_r+0x24>
 800cd70:	f7fe fade 	bl	800b330 <_free_r>
 800cd74:	4625      	mov	r5, r4
 800cd76:	4628      	mov	r0, r5
 800cd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd7c:	f000 f89e 	bl	800cebc <_malloc_usable_size_r>
 800cd80:	4284      	cmp	r4, r0
 800cd82:	4606      	mov	r6, r0
 800cd84:	d802      	bhi.n	800cd8c <_realloc_r+0x34>
 800cd86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd8a:	d8f4      	bhi.n	800cd76 <_realloc_r+0x1e>
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	4638      	mov	r0, r7
 800cd90:	f7fb fd1e 	bl	80087d0 <_malloc_r>
 800cd94:	4680      	mov	r8, r0
 800cd96:	b908      	cbnz	r0, 800cd9c <_realloc_r+0x44>
 800cd98:	4645      	mov	r5, r8
 800cd9a:	e7ec      	b.n	800cd76 <_realloc_r+0x1e>
 800cd9c:	42b4      	cmp	r4, r6
 800cd9e:	4622      	mov	r2, r4
 800cda0:	4629      	mov	r1, r5
 800cda2:	bf28      	it	cs
 800cda4:	4632      	movcs	r2, r6
 800cda6:	f7fd fc44 	bl	800a632 <memcpy>
 800cdaa:	4629      	mov	r1, r5
 800cdac:	4638      	mov	r0, r7
 800cdae:	f7fe fabf 	bl	800b330 <_free_r>
 800cdb2:	e7f1      	b.n	800cd98 <_realloc_r+0x40>

0800cdb4 <__swhatbuf_r>:
 800cdb4:	b570      	push	{r4, r5, r6, lr}
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdbc:	2900      	cmp	r1, #0
 800cdbe:	b096      	sub	sp, #88	@ 0x58
 800cdc0:	4615      	mov	r5, r2
 800cdc2:	461e      	mov	r6, r3
 800cdc4:	da0d      	bge.n	800cde2 <__swhatbuf_r+0x2e>
 800cdc6:	89a3      	ldrh	r3, [r4, #12]
 800cdc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cdcc:	f04f 0100 	mov.w	r1, #0
 800cdd0:	bf14      	ite	ne
 800cdd2:	2340      	movne	r3, #64	@ 0x40
 800cdd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cdd8:	2000      	movs	r0, #0
 800cdda:	6031      	str	r1, [r6, #0]
 800cddc:	602b      	str	r3, [r5, #0]
 800cdde:	b016      	add	sp, #88	@ 0x58
 800cde0:	bd70      	pop	{r4, r5, r6, pc}
 800cde2:	466a      	mov	r2, sp
 800cde4:	f000 f848 	bl	800ce78 <_fstat_r>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	dbec      	blt.n	800cdc6 <__swhatbuf_r+0x12>
 800cdec:	9901      	ldr	r1, [sp, #4]
 800cdee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cdf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cdf6:	4259      	negs	r1, r3
 800cdf8:	4159      	adcs	r1, r3
 800cdfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdfe:	e7eb      	b.n	800cdd8 <__swhatbuf_r+0x24>

0800ce00 <__smakebuf_r>:
 800ce00:	898b      	ldrh	r3, [r1, #12]
 800ce02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce04:	079d      	lsls	r5, r3, #30
 800ce06:	4606      	mov	r6, r0
 800ce08:	460c      	mov	r4, r1
 800ce0a:	d507      	bpl.n	800ce1c <__smakebuf_r+0x1c>
 800ce0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	6123      	str	r3, [r4, #16]
 800ce14:	2301      	movs	r3, #1
 800ce16:	6163      	str	r3, [r4, #20]
 800ce18:	b003      	add	sp, #12
 800ce1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce1c:	ab01      	add	r3, sp, #4
 800ce1e:	466a      	mov	r2, sp
 800ce20:	f7ff ffc8 	bl	800cdb4 <__swhatbuf_r>
 800ce24:	9f00      	ldr	r7, [sp, #0]
 800ce26:	4605      	mov	r5, r0
 800ce28:	4639      	mov	r1, r7
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f7fb fcd0 	bl	80087d0 <_malloc_r>
 800ce30:	b948      	cbnz	r0, 800ce46 <__smakebuf_r+0x46>
 800ce32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce36:	059a      	lsls	r2, r3, #22
 800ce38:	d4ee      	bmi.n	800ce18 <__smakebuf_r+0x18>
 800ce3a:	f023 0303 	bic.w	r3, r3, #3
 800ce3e:	f043 0302 	orr.w	r3, r3, #2
 800ce42:	81a3      	strh	r3, [r4, #12]
 800ce44:	e7e2      	b.n	800ce0c <__smakebuf_r+0xc>
 800ce46:	89a3      	ldrh	r3, [r4, #12]
 800ce48:	6020      	str	r0, [r4, #0]
 800ce4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce4e:	81a3      	strh	r3, [r4, #12]
 800ce50:	9b01      	ldr	r3, [sp, #4]
 800ce52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce56:	b15b      	cbz	r3, 800ce70 <__smakebuf_r+0x70>
 800ce58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f000 f81d 	bl	800ce9c <_isatty_r>
 800ce62:	b128      	cbz	r0, 800ce70 <__smakebuf_r+0x70>
 800ce64:	89a3      	ldrh	r3, [r4, #12]
 800ce66:	f023 0303 	bic.w	r3, r3, #3
 800ce6a:	f043 0301 	orr.w	r3, r3, #1
 800ce6e:	81a3      	strh	r3, [r4, #12]
 800ce70:	89a3      	ldrh	r3, [r4, #12]
 800ce72:	431d      	orrs	r5, r3
 800ce74:	81a5      	strh	r5, [r4, #12]
 800ce76:	e7cf      	b.n	800ce18 <__smakebuf_r+0x18>

0800ce78 <_fstat_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	4d07      	ldr	r5, [pc, #28]	@ (800ce98 <_fstat_r+0x20>)
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	4604      	mov	r4, r0
 800ce80:	4608      	mov	r0, r1
 800ce82:	4611      	mov	r1, r2
 800ce84:	602b      	str	r3, [r5, #0]
 800ce86:	f7f6 f9cf 	bl	8003228 <_fstat>
 800ce8a:	1c43      	adds	r3, r0, #1
 800ce8c:	d102      	bne.n	800ce94 <_fstat_r+0x1c>
 800ce8e:	682b      	ldr	r3, [r5, #0]
 800ce90:	b103      	cbz	r3, 800ce94 <_fstat_r+0x1c>
 800ce92:	6023      	str	r3, [r4, #0]
 800ce94:	bd38      	pop	{r3, r4, r5, pc}
 800ce96:	bf00      	nop
 800ce98:	20000edc 	.word	0x20000edc

0800ce9c <_isatty_r>:
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	4d06      	ldr	r5, [pc, #24]	@ (800ceb8 <_isatty_r+0x1c>)
 800cea0:	2300      	movs	r3, #0
 800cea2:	4604      	mov	r4, r0
 800cea4:	4608      	mov	r0, r1
 800cea6:	602b      	str	r3, [r5, #0]
 800cea8:	f7f6 f9ce 	bl	8003248 <_isatty>
 800ceac:	1c43      	adds	r3, r0, #1
 800ceae:	d102      	bne.n	800ceb6 <_isatty_r+0x1a>
 800ceb0:	682b      	ldr	r3, [r5, #0]
 800ceb2:	b103      	cbz	r3, 800ceb6 <_isatty_r+0x1a>
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	bd38      	pop	{r3, r4, r5, pc}
 800ceb8:	20000edc 	.word	0x20000edc

0800cebc <_malloc_usable_size_r>:
 800cebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cec0:	1f18      	subs	r0, r3, #4
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	bfbc      	itt	lt
 800cec6:	580b      	ldrlt	r3, [r1, r0]
 800cec8:	18c0      	addlt	r0, r0, r3
 800ceca:	4770      	bx	lr

0800cecc <_init>:
 800cecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cece:	bf00      	nop
 800ced0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced2:	bc08      	pop	{r3}
 800ced4:	469e      	mov	lr, r3
 800ced6:	4770      	bx	lr

0800ced8 <_fini>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	bf00      	nop
 800cedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cede:	bc08      	pop	{r3}
 800cee0:	469e      	mov	lr, r3
 800cee2:	4770      	bx	lr
