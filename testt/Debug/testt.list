
testt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800a038  0800a038  0000b038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5ac  0800a5ac  0000c2b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a5ac  0800a5ac  0000b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5b4  0800a5b4  0000c2b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b4  0800a5b4  0000b5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5b8  0800a5b8  0000b5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b8  20000000  0800a5bc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c2b8  2**0
                  CONTENTS
 10 .bss          00000484  200002b8  200002b8  0000c2b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000073c  2000073c  0000c2b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c2b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c30  00000000  00000000  0000c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002be4  00000000  00000000  00020f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  00023b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec4  00000000  00000000  00024dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ad9  00000000  00000000  00025c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a6d  00000000  00000000  00049765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d38ec  00000000  00000000  000601d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133abe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000663c  00000000  00000000  00133b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0013a140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b8 	.word	0x200002b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a01c 	.word	0x0800a01c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002bc 	.word	0x200002bc
 80001cc:	0800a01c 	.word	0x0800a01c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <shift_out>:
    // HAL_GPIO_WritePin(TXS_OE3_GPIO_Port,TXS_OE3_Pin,GPIO_PIN_SET);
    // HAL_GPIO_WritePin(TXS_OE4_GPIO_Port,TXS_OE4_Pin,GPIO_PIN_SET);
}

void shift_out(uint8_t num, uint8_t *data)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i =0; i < 8; i++ )
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e058      	b.n	80010e4 <shift_out+0xc4>
    {
        HAL_GPIO_WritePin(PIN_SCKx[num].Port_x,PIN_SCKx[num].PIN_x,GPIO_PIN_RESET);   // Clock LOW
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4a2f      	ldr	r2, [pc, #188]	@ (80010f4 <shift_out+0xd4>)
 8001036:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4a2d      	ldr	r2, [pc, #180]	@ (80010f4 <shift_out+0xd4>)
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4413      	add	r3, r2
 8001042:	889b      	ldrh	r3, [r3, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	f002 faee 	bl	8003628 <HAL_GPIO_WritePin>
        delay_us(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f000 fdeb 	bl	8001c28 <delay_us>
        // Data
        HAL_GPIO_WritePin(PIN_SIx[num/3].Port_x,PIN_SIx[num/3].PIN_x, (data[i]));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4a28      	ldr	r2, [pc, #160]	@ (80010f8 <shift_out+0xd8>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	085b      	lsrs	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	4b26      	ldr	r3, [pc, #152]	@ (80010fc <shift_out+0xdc>)
 8001062:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4a23      	ldr	r2, [pc, #140]	@ (80010f8 <shift_out+0xd8>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	085b      	lsrs	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4a22      	ldr	r2, [pc, #136]	@ (80010fc <shift_out+0xdc>)
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	8899      	ldrh	r1, [r3, #4]
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	4413      	add	r3, r2
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	f002 fad0 	bl	8003628 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PIN_SIx[num/3].Port_x,PIN_SIx[num/3].PIN_x, (data[i]));
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4a1b      	ldr	r2, [pc, #108]	@ (80010f8 <shift_out+0xd8>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	085b      	lsrs	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <shift_out+0xdc>)
 8001098:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4a16      	ldr	r2, [pc, #88]	@ (80010f8 <shift_out+0xd8>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	085b      	lsrs	r3, r3, #1
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <shift_out+0xdc>)
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	8899      	ldrh	r1, [r3, #4]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	f002 fab5 	bl	8003628 <HAL_GPIO_WritePin>
        delay_us(1);
 80010be:	2001      	movs	r0, #1
 80010c0:	f000 fdb2 	bl	8001c28 <delay_us>
        HAL_GPIO_WritePin(PIN_SCKx[num].Port_x,PIN_SCKx[num].PIN_x,GPIO_PIN_SET);   // Clock HIGH
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <shift_out+0xd4>)
 80010c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <shift_out+0xd4>)
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	889b      	ldrh	r3, [r3, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	4619      	mov	r1, r3
 80010da:	f002 faa5 	bl	8003628 <HAL_GPIO_WritePin>
    for(uint8_t i =0; i < 8; i++ )
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	3301      	adds	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b07      	cmp	r3, #7
 80010e8:	d9a3      	bls.n	8001032 <shift_out+0x12>
    }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	aaaaaaab 	.word	0xaaaaaaab
 80010fc:	200000c0 	.word	0x200000c0

08001100 <Write_data>:

void Write_data(uint8_t num, uint8_t *data) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
    // Enable Latch
    uint8_t data_array[8];
    memcpy(data_array,data,sizeof(data_array));
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	6810      	ldr	r0, [r2, #0]
 8001114:	6851      	ldr	r1, [r2, #4]
 8001116:	c303      	stmia	r3!, {r0, r1}
    HAL_GPIO_WritePin(PIN_RCKx[num].Port_x,PIN_RCKx[num].PIN_x,GPIO_PIN_RESET);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	4a13      	ldr	r2, [pc, #76]	@ (8001168 <Write_data+0x68>)
 800111c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4a11      	ldr	r2, [pc, #68]	@ (8001168 <Write_data+0x68>)
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	889b      	ldrh	r3, [r3, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	f002 fa7b 	bl	8003628 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f001 f8ac 	bl	8002290 <HAL_Delay>
    shift_out(num,data_array);
 8001138:	f107 0208 	add.w	r2, r7, #8
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff6d 	bl	8001020 <shift_out>
    HAL_GPIO_WritePin(PIN_RCKx[num].Port_x,PIN_RCKx[num].PIN_x,GPIO_PIN_SET);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4a07      	ldr	r2, [pc, #28]	@ (8001168 <Write_data+0x68>)
 800114a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <Write_data+0x68>)
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	889b      	ldrh	r3, [r3, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	4619      	mov	r1, r3
 800115c:	f002 fa64 	bl	8003628 <HAL_GPIO_WritePin>
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000060 	.word	0x20000060

0800116c <compute_outputLatchIC>:

#define NUM_PIN_LATCH_IC_CONTROL  4 /* each latch IC control 4 pin of IC test */
#define NUM_PIN_IC_TEST           20

/* each Latch IC control 4 pins IC test */
void compute_outputLatchIC(uint8_t *dataIC_test, uint8_t (*data_out_latchIC)[numPin]) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
    uint8_t p_high; /* position HIGH */
    uint8_t p_low;  /* position LOW */
    uint8_t p_pin;  /* position IC test correspond to Latch IC */
    uint8_t Latch_x;
    /* clear all data latch ic */
    for (uint8_t latchIC = 0; latchIC < 5; latchIC++) {
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e00b      	b.n	8001194 <compute_outputLatchIC+0x28>
        memset(data_out_latchIC[latchIC],0,numPin);
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	4413      	add	r3, r2
 8001184:	2208      	movs	r2, #8
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f006 f9ce 	bl	800752a <memset>
    for (uint8_t latchIC = 0; latchIC < 5; latchIC++) {
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	3301      	adds	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b04      	cmp	r3, #4
 8001198:	d9f0      	bls.n	800117c <compute_outputLatchIC+0x10>
    }

    for (uint8_t latchIC_x = 0; latchIC_x < NUM_PIN_IC_TEST; latchIC_x++) {
 800119a:	2300      	movs	r3, #0
 800119c:	73bb      	strb	r3, [r7, #14]
 800119e:	e04b      	b.n	8001238 <compute_outputLatchIC+0xcc>
        Latch_x = latchIC_x / NUM_PIN_LATCH_IC_CONTROL;
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	737b      	strb	r3, [r7, #13]
        p_pin = latchIC_x % NUM_PIN_LATCH_IC_CONTROL;
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	733b      	strb	r3, [r7, #12]
        p_high = p_pin * 2;
 80011ae:	7b3b      	ldrb	r3, [r7, #12]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	72fb      	strb	r3, [r7, #11]
        p_low = p_high + 1;
 80011b4:	7afb      	ldrb	r3, [r7, #11]
 80011b6:	3301      	adds	r3, #1
 80011b8:	72bb      	strb	r3, [r7, #10]
        switch (dataIC_test[latchIC_x]) {
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d024      	beq.n	8001210 <compute_outputLatchIC+0xa4>
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	dc32      	bgt.n	8001230 <compute_outputLatchIC+0xc4>
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <compute_outputLatchIC+0x66>
 80011ce:	2b01      	cmp	r3, #1
            } break;
            case 2 : {
                data_out_latchIC[Latch_x][p_high] |= 1u;
            } break;

            default : break;
 80011d0:	e02e      	b.n	8001230 <compute_outputLatchIC+0xc4>
                data_out_latchIC[Latch_x][p_high] |= 1u;
 80011d2:	7b7b      	ldrb	r3, [r7, #13]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	441a      	add	r2, r3
 80011da:	7afb      	ldrb	r3, [r7, #11]
 80011dc:	5cd1      	ldrb	r1, [r2, r3]
 80011de:	7b7b      	ldrb	r3, [r7, #13]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	441a      	add	r2, r3
 80011e6:	7afb      	ldrb	r3, [r7, #11]
 80011e8:	f041 0101 	orr.w	r1, r1, #1
 80011ec:	b2c9      	uxtb	r1, r1
 80011ee:	54d1      	strb	r1, [r2, r3]
                data_out_latchIC[Latch_x][p_low] |= 1u;
 80011f0:	7b7b      	ldrb	r3, [r7, #13]
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	441a      	add	r2, r3
 80011f8:	7abb      	ldrb	r3, [r7, #10]
 80011fa:	5cd1      	ldrb	r1, [r2, r3]
 80011fc:	7b7b      	ldrb	r3, [r7, #13]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	441a      	add	r2, r3
 8001204:	7abb      	ldrb	r3, [r7, #10]
 8001206:	f041 0101 	orr.w	r1, r1, #1
 800120a:	b2c9      	uxtb	r1, r1
 800120c:	54d1      	strb	r1, [r2, r3]
            } break;
 800120e:	e010      	b.n	8001232 <compute_outputLatchIC+0xc6>
                data_out_latchIC[Latch_x][p_high] |= 1u;
 8001210:	7b7b      	ldrb	r3, [r7, #13]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	441a      	add	r2, r3
 8001218:	7afb      	ldrb	r3, [r7, #11]
 800121a:	5cd1      	ldrb	r1, [r2, r3]
 800121c:	7b7b      	ldrb	r3, [r7, #13]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	441a      	add	r2, r3
 8001224:	7afb      	ldrb	r3, [r7, #11]
 8001226:	f041 0101 	orr.w	r1, r1, #1
 800122a:	b2c9      	uxtb	r1, r1
 800122c:	54d1      	strb	r1, [r2, r3]
            } break;
 800122e:	e000      	b.n	8001232 <compute_outputLatchIC+0xc6>
            default : break;
 8001230:	bf00      	nop
    for (uint8_t latchIC_x = 0; latchIC_x < NUM_PIN_IC_TEST; latchIC_x++) {
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	3301      	adds	r3, #1
 8001236:	73bb      	strb	r3, [r7, #14]
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	2b13      	cmp	r3, #19
 800123c:	d9b0      	bls.n	80011a0 <compute_outputLatchIC+0x34>
        }

    }
    
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <WritePin_ICTest>:


// Control the pin IO TEST
void WritePin_ICTest(uint8_t *dataPin) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    compute_outputLatchIC(dataPin,output_latch);
 8001250:	4920      	ldr	r1, [pc, #128]	@ (80012d4 <WritePin_ICTest+0x8c>)
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff8a 	bl	800116c <compute_outputLatchIC>
    /* reverse data */
    for (int ic = 0; ic < numIC; ++ic) {
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	e01c      	b.n	8001298 <WritePin_ICTest+0x50>
        for (int p = 0; p < numPin; ++p) {
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	e013      	b.n	800128c <WritePin_ICTest+0x44>
            reversed_latch[ic][p] = output_latch[ic][numPin - 1 - p];
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	491a      	ldr	r1, [pc, #104]	@ (80012d4 <WritePin_ICTest+0x8c>)
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	00d2      	lsls	r2, r2, #3
 8001270:	440a      	add	r2, r1
 8001272:	4413      	add	r3, r2
 8001274:	7819      	ldrb	r1, [r3, #0]
 8001276:	4a18      	ldr	r2, [pc, #96]	@ (80012d8 <WritePin_ICTest+0x90>)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	441a      	add	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4413      	add	r3, r2
 8001282:	460a      	mov	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]
        for (int p = 0; p < numPin; ++p) {
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	3301      	adds	r3, #1
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	2b07      	cmp	r3, #7
 8001290:	dde8      	ble.n	8001264 <WritePin_ICTest+0x1c>
    for (int ic = 0; ic < numIC; ++ic) {
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2b04      	cmp	r3, #4
 800129c:	dddf      	ble.n	800125e <WritePin_ICTest+0x16>
        }
    }
    for (uint8_t latch_x = 0; latch_x < 5; latch_x++) {
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e00e      	b.n	80012c2 <WritePin_ICTest+0x7a>
        Write_data(latch_x,reversed_latch[latch_x]);
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <WritePin_ICTest+0x90>)
 80012aa:	441a      	add	r2, r3
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff25 	bl	8001100 <Write_data>
        HAL_Delay(1);
 80012b6:	2001      	movs	r0, #1
 80012b8:	f000 ffea 	bl	8002290 <HAL_Delay>
    for (uint8_t latch_x = 0; latch_x < 5; latch_x++) {
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	3301      	adds	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d9ed      	bls.n	80012a4 <WritePin_ICTest+0x5c>
    }

}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200002d4 	.word	0x200002d4
 80012d8:	200002fc 	.word	0x200002fc

080012dc <convert_character_input>:
    HAL_GPIO_WritePin(PIN_LEx[num].Port_x,PIN_LEx[num].PIN_x,GPIO_PIN_RESET);
    // HAL_GPIO_WritePin(PIN_OEx[num-3].Port_x,PIN_OEx[num-3].PIN_x,GPIO_PIN_SET);

}

uint8_t convert_character_input(char c_input) {
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
    switch (c_input) {
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	3b30      	subs	r3, #48	@ 0x30
 80012ea:	2b26      	cmp	r3, #38	@ 0x26
 80012ec:	d856      	bhi.n	800139c <convert_character_input+0xc0>
 80012ee:	a201      	add	r2, pc, #4	@ (adr r2, 80012f4 <convert_character_input+0x18>)
 80012f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f4:	08001395 	.word	0x08001395
 80012f8:	08001391 	.word	0x08001391
 80012fc:	0800139d 	.word	0x0800139d
 8001300:	0800139d 	.word	0x0800139d
 8001304:	0800139d 	.word	0x0800139d
 8001308:	0800139d 	.word	0x0800139d
 800130c:	0800139d 	.word	0x0800139d
 8001310:	0800139d 	.word	0x0800139d
 8001314:	0800139d 	.word	0x0800139d
 8001318:	0800139d 	.word	0x0800139d
 800131c:	0800139d 	.word	0x0800139d
 8001320:	0800139d 	.word	0x0800139d
 8001324:	0800139d 	.word	0x0800139d
 8001328:	0800139d 	.word	0x0800139d
 800132c:	0800139d 	.word	0x0800139d
 8001330:	0800139d 	.word	0x0800139d
 8001334:	0800139d 	.word	0x0800139d
 8001338:	0800139d 	.word	0x0800139d
 800133c:	0800139d 	.word	0x0800139d
 8001340:	0800139d 	.word	0x0800139d
 8001344:	0800139d 	.word	0x0800139d
 8001348:	0800139d 	.word	0x0800139d
 800134c:	0800139d 	.word	0x0800139d
 8001350:	08001395 	.word	0x08001395
 8001354:	08001399 	.word	0x08001399
 8001358:	0800139d 	.word	0x0800139d
 800135c:	0800139d 	.word	0x0800139d
 8001360:	0800139d 	.word	0x0800139d
 8001364:	08001399 	.word	0x08001399
 8001368:	0800139d 	.word	0x0800139d
 800136c:	0800139d 	.word	0x0800139d
 8001370:	0800139d 	.word	0x0800139d
 8001374:	0800139d 	.word	0x0800139d
 8001378:	0800139d 	.word	0x0800139d
 800137c:	0800139d 	.word	0x0800139d
 8001380:	0800139d 	.word	0x0800139d
 8001384:	0800139d 	.word	0x0800139d
 8001388:	0800139d 	.word	0x0800139d
 800138c:	08001391 	.word	0x08001391
        case 'V' :
        case '1' : {
            return 1;
 8001390:	2301      	movs	r3, #1
 8001392:	e004      	b.n	800139e <convert_character_input+0xc2>
        } break;
        case 'G' :
        case '0' : {
            return 0;
 8001394:	2300      	movs	r3, #0
 8001396:	e002      	b.n	800139e <convert_character_input+0xc2>
        } break;
        case 'L' :
        case 'H' : {
            return 2;
 8001398:	2302      	movs	r3, #2
 800139a:	e000      	b.n	800139e <convert_character_input+0xc2>
        } break;

        default : {
            return 2;
 800139c:	2302      	movs	r3, #2
        } break;
    }
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <convert_data_test>:

void convert_data_test(uint8_t num_pin, char *data_test, uint8_t *data_control) {
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	73fb      	strb	r3, [r7, #15]
    data_control[8]  = 2;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3308      	adds	r3, #8
 80013be:	2202      	movs	r2, #2
 80013c0:	701a      	strb	r2, [r3, #0]
    data_control[9]  = 1;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3309      	adds	r3, #9
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
    data_control[10] = 0;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	330a      	adds	r3, #10
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
    data_control[11] = 2;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	330b      	adds	r3, #11
 80013d6:	2202      	movs	r2, #2
 80013d8:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < 8; i++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	75fb      	strb	r3, [r7, #23]
 80013de:	e00e      	b.n	80013fe <convert_data_test+0x52>
        data_control[i] = convert_character_input(data_test[i]);
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	4413      	add	r3, r2
 80013e6:	7819      	ldrb	r1, [r3, #0]
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	18d4      	adds	r4, r2, r3
 80013ee:	4608      	mov	r0, r1
 80013f0:	f7ff ff74 	bl	80012dc <convert_character_input>
 80013f4:	4603      	mov	r3, r0
 80013f6:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < 8; i++) {
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
 80013fa:	3301      	adds	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
 8001400:	2b07      	cmp	r3, #7
 8001402:	d9ed      	bls.n	80013e0 <convert_data_test+0x34>
    }

    if (num_pin == 18) {
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b12      	cmp	r3, #18
 8001408:	d12d      	bne.n	8001466 <convert_data_test+0xba>
        data_control[8] = convert_character_input(data_test[8]);
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3308      	adds	r3, #8
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f103 0408 	add.w	r4, r3, #8
 8001416:	4610      	mov	r0, r2
 8001418:	f7ff ff60 	bl	80012dc <convert_character_input>
 800141c:	4603      	mov	r3, r0
 800141e:	7023      	strb	r3, [r4, #0]
        data_control[11] = convert_character_input(data_test[9]);
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3309      	adds	r3, #9
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f103 040b 	add.w	r4, r3, #11
 800142c:	4610      	mov	r0, r2
 800142e:	f7ff ff55 	bl	80012dc <convert_character_input>
 8001432:	4603      	mov	r3, r0
 8001434:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 10; i < 18; i++) {
 8001436:	230a      	movs	r3, #10
 8001438:	75bb      	strb	r3, [r7, #22]
 800143a:	e010      	b.n	800145e <convert_data_test+0xb2>
            data_control[12 + (i - 10)] = convert_character_input(data_test[i]);
 800143c:	7dbb      	ldrb	r3, [r7, #22]
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	4413      	add	r3, r2
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	7dbb      	ldrb	r3, [r7, #22]
 8001446:	3302      	adds	r3, #2
 8001448:	4619      	mov	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	185c      	adds	r4, r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	f7ff ff44 	bl	80012dc <convert_character_input>
 8001454:	4603      	mov	r3, r0
 8001456:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 10; i < 18; i++) {
 8001458:	7dbb      	ldrb	r3, [r7, #22]
 800145a:	3301      	adds	r3, #1
 800145c:	75bb      	strb	r3, [r7, #22]
 800145e:	7dbb      	ldrb	r3, [r7, #22]
 8001460:	2b11      	cmp	r3, #17
 8001462:	d9eb      	bls.n	800143c <convert_data_test+0x90>
    } else { 
        for (uint8_t i = 8; i < 16; i++) {
            data_control[12 + (i - 8)] = convert_character_input(data_test[i]);
        }
    }
}
 8001464:	e016      	b.n	8001494 <convert_data_test+0xe8>
        for (uint8_t i = 8; i < 16; i++) {
 8001466:	2308      	movs	r3, #8
 8001468:	757b      	strb	r3, [r7, #21]
 800146a:	e010      	b.n	800148e <convert_data_test+0xe2>
            data_control[12 + (i - 8)] = convert_character_input(data_test[i]);
 800146c:	7d7b      	ldrb	r3, [r7, #21]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	4413      	add	r3, r2
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	7d7b      	ldrb	r3, [r7, #21]
 8001476:	3304      	adds	r3, #4
 8001478:	4619      	mov	r1, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	185c      	adds	r4, r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	f7ff ff2c 	bl	80012dc <convert_character_input>
 8001484:	4603      	mov	r3, r0
 8001486:	7023      	strb	r3, [r4, #0]
        for (uint8_t i = 8; i < 16; i++) {
 8001488:	7d7b      	ldrb	r3, [r7, #21]
 800148a:	3301      	adds	r3, #1
 800148c:	757b      	strb	r3, [r7, #21]
 800148e:	7d7b      	ldrb	r3, [r7, #21]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d9eb      	bls.n	800146c <convert_data_test+0xc0>
}
 8001494:	bf00      	nop
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd90      	pop	{r4, r7, pc}

0800149c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80014bc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00b      	beq.n	80014dc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014c4:	e000      	b.n	80014c8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014c6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f9      	beq.n	80014c6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014dc:	687b      	ldr	r3, [r7, #4]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b5b0      	push	{r4, r5, r7, lr}
 80014ee:	b09e      	sub	sp, #120	@ 0x78
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f2:	f000 fe5b 	bl	80021ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f6:	f000 f8bf 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fa:	f000 fa4d 	bl	8001998 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014fe:	f000 fa21 	bl	8001944 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001502:	f000 f9a5 	bl	8001850 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001506:	f000 f975 	bl	80017f4 <MX_I2C1_Init>
  MX_CAN1_Init();
 800150a:	f000 f91f 	bl	800174c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800150e:	f000 f9ef 	bl	80018f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init STM32
//  HAL_Delay(3000);
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8001512:	2264      	movs	r2, #100	@ 0x64
 8001514:	494c      	ldr	r1, [pc, #304]	@ (8001648 <main+0x15c>)
 8001516:	484d      	ldr	r0, [pc, #308]	@ (800164c <main+0x160>)
 8001518:	f003 fa0c 	bl	8004934 <HAL_UARTEx_ReceiveToIdle_IT>
//  HAL_UART_Receive_IT(&huart2, dataRX, 1);
  HAL_TIM_Base_Start(&htim1);
 800151c:	484c      	ldr	r0, [pc, #304]	@ (8001650 <main+0x164>)
 800151e:	f002 fec7 	bl	80042b0 <HAL_TIM_Base_Start>

// Latch_IC_begin();
  
  //  uint8_t IC_test_data[20] = {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
    // uint8_t IC_test_data[20] = {2,2,2,2,2,2,2,2,2,1,0,2,2,2,2,2,2,2,2,2};
  uint8_t IC_test_data_1[20] = {0,0,2,0,0,0,0,0,2,1,0,2,0,0,0,0,1,0,0,1};  // 0
 8001522:	4b4c      	ldr	r3, [pc, #304]	@ (8001654 <main+0x168>)
 8001524:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001528:	461d      	mov	r5, r3
 800152a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	6023      	str	r3, [r4, #0]
  uint8_t IC_test_data_2[20] = {0,0,2,0,0,0,0,0,2,1,0,2,0,0,0,0,0,0,0,1};  // 0
 8001532:	4b49      	ldr	r3, [pc, #292]	@ (8001658 <main+0x16c>)
 8001534:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8001538:	461d      	mov	r5, r3
 800153a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800153c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800153e:	682b      	ldr	r3, [r5, #0]
 8001540:	6023      	str	r3, [r4, #0]
  uint8_t IC_test_data[20] =   {2,2,2,2,2,2,2,2,2,1,0,2,2,2,2,2,2,2,2,2};
 8001542:	4b46      	ldr	r3, [pc, #280]	@ (800165c <main+0x170>)
 8001544:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001548:	461d      	mov	r5, r3
 800154a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154e:	682b      	ldr	r3, [r5, #0]
 8001550:	6023      	str	r3, [r4, #0]
//  uint8_t IC_test_data[20];
//  memset(IC_test_data,1,sizeof(IC_test_data));
  WritePin_ICTest(IC_test_data);
 8001552:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fe76 	bl	8001248 <WritePin_ICTest>



//  Screen_begin(&huart2);

  uint8_t num_case = 8;
 800155c:	2308      	movs	r3, #8
 800155e:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
  uint8_t num_pin  = 16;
 8001562:	2310      	movs	r3, #16
 8001564:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
  uint8_t (*data_control)[20] = malloc(num_case * sizeof(*data_control));
 8001568:	f897 2072 	ldrb.w	r2, [r7, #114]	@ 0x72
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4618      	mov	r0, r3
 8001576:	f004 f98f 	bl	8005898 <malloc>
 800157a:	4603      	mov	r3, r0
 800157c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  char * ptr_data_test = strtok(data_test,"\n");
 800157e:	4b38      	ldr	r3, [pc, #224]	@ (8001660 <main+0x174>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4938      	ldr	r1, [pc, #224]	@ (8001664 <main+0x178>)
 8001584:	4618      	mov	r0, r3
 8001586:	f005 ffeb 	bl	8007560 <strtok>
 800158a:	6778      	str	r0, [r7, #116]	@ 0x74
  uint8_t count_case = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
  
  uint8_t buffer[20];
  /* convert data test to data control IC test */
  while (ptr_data_test != NULL) {
 8001592:	e02b      	b.n	80015ec <main+0x100>
    convert_data_test(num_pin,ptr_data_test,data_control[count_case]);
 8001594:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	461a      	mov	r2, r3
 80015a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015a4:	441a      	add	r2, r3
 80015a6:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80015aa:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fefd 	bl	80013ac <convert_data_test>
    memcpy(buffer,data_control[count_case],20);
 80015b2:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	461a      	mov	r2, r3
 80015c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015c2:	4413      	add	r3, r2
 80015c4:	f107 041c 	add.w	r4, r7, #28
 80015c8:	461d      	mov	r5, r3
 80015ca:	6828      	ldr	r0, [r5, #0]
 80015cc:	6869      	ldr	r1, [r5, #4]
 80015ce:	68aa      	ldr	r2, [r5, #8]
 80015d0:	68eb      	ldr	r3, [r5, #12]
 80015d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d4:	6928      	ldr	r0, [r5, #16]
 80015d6:	6020      	str	r0, [r4, #0]
    count_case++;
 80015d8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80015dc:	3301      	adds	r3, #1
 80015de:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    // ptr_data_test = strchr(ptr_data_test,'\n');
    ptr_data_test = strtok(NULL,"\n");
 80015e2:	4920      	ldr	r1, [pc, #128]	@ (8001664 <main+0x178>)
 80015e4:	2000      	movs	r0, #0
 80015e6:	f005 ffbb 	bl	8007560 <strtok>
 80015ea:	6778      	str	r0, [r7, #116]	@ 0x74
  while (ptr_data_test != NULL) {
 80015ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1d0      	bne.n	8001594 <main+0xa8>
    // ptr_data_test++;
  }

  Control_IC_Test_t Control_IC_test;

  Control_IC_test.data_control_testing = &data_control[0][0];
 80015f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015f4:	613b      	str	r3, [r7, #16]
  Control_IC_test.cur_case = TEST_SHORT_CIRCUIT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	737b      	strb	r3, [r7, #13]
  //  uint8_t sendBuffer_2[] = {0x5A, 0xA5, 0x05, 0x82, 0x18, 0xF7, 0x00, 0x02};            // SP offset 7 Low
  //  HAL_UART_Transmit(&huart2,sendBuffer_2,sizeof(sendBuffer_2),500);


    // Active the notification
  	TxHeader.DLC = 6;
 80015fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <main+0x17c>)
 80015fc:	2206      	movs	r2, #6
 80015fe:	611a      	str	r2, [r3, #16]
    TxHeader.StdId = 0x103;
 8001600:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <main+0x17c>)
 8001602:	f240 1203 	movw	r2, #259	@ 0x103
 8001606:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 8001608:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <main+0x17c>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 800160e:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <main+0x17c>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]

    uint8_t data_tx[6] = {'H','E','L','L','O','2'};
 8001614:	4a15      	ldr	r2, [pc, #84]	@ (800166c <main+0x180>)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800161c:	6018      	str	r0, [r3, #0]
 800161e:	3304      	adds	r3, #4
 8001620:	8019      	strh	r1, [r3, #0]


  /* start the CAN */
  HAL_CAN_Start(&hcan1);
 8001622:	4813      	ldr	r0, [pc, #76]	@ (8001670 <main+0x184>)
 8001624:	f001 f834 	bl	8002690 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001628:	2102      	movs	r1, #2
 800162a:	4811      	ldr	r0, [pc, #68]	@ (8001670 <main+0x184>)
 800162c:	f001 fa66 	bl	8002afc <HAL_CAN_ActivateNotification>
    while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data_tx, &TxMailbox);
 8001630:	1d3a      	adds	r2, r7, #4
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <main+0x188>)
 8001634:	490c      	ldr	r1, [pc, #48]	@ (8001668 <main+0x17c>)
 8001636:	480e      	ldr	r0, [pc, #56]	@ (8001670 <main+0x184>)
 8001638:	f001 f86e 	bl	8002718 <HAL_CAN_AddTxMessage>
	  HAL_Delay(2000);
 800163c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001640:	f000 fe26 	bl	8002290 <HAL_Delay>
      HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data_tx, &TxMailbox);
 8001644:	bf00      	nop
 8001646:	e7f3      	b.n	8001630 <main+0x144>
 8001648:	20000478 	.word	0x20000478
 800164c:	20000430 	.word	0x20000430
 8001650:	200003a0 	.word	0x200003a0
 8001654:	0800a0c8 	.word	0x0800a0c8
 8001658:	0800a0dc 	.word	0x0800a0dc
 800165c:	0800a0f0 	.word	0x0800a0f0
 8001660:	200000e0 	.word	0x200000e0
 8001664:	0800a0c4 	.word	0x0800a0c4
 8001668:	200004dc 	.word	0x200004dc
 800166c:	0800a104 	.word	0x0800a104
 8001670:	20000324 	.word	0x20000324
 8001674:	20000518 	.word	0x20000518

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b094      	sub	sp, #80	@ 0x50
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	2230      	movs	r2, #48	@ 0x30
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f005 ff4f 	bl	800752a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	4b28      	ldr	r3, [pc, #160]	@ (8001744 <SystemClock_Config+0xcc>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	4a27      	ldr	r2, [pc, #156]	@ (8001744 <SystemClock_Config+0xcc>)
 80016a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ac:	4b25      	ldr	r3, [pc, #148]	@ (8001744 <SystemClock_Config+0xcc>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <SystemClock_Config+0xd0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a21      	ldr	r2, [pc, #132]	@ (8001748 <SystemClock_Config+0xd0>)
 80016c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <SystemClock_Config+0xd0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d4:	2302      	movs	r3, #2
 80016d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d8:	2301      	movs	r3, #1
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016dc:	2310      	movs	r3, #16
 80016de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e0:	2302      	movs	r3, #2
 80016e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e4:	2300      	movs	r3, #0
 80016e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016e8:	2308      	movs	r3, #8
 80016ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016ec:	2348      	movs	r3, #72	@ 0x48
 80016ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f0:	2302      	movs	r3, #2
 80016f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016f4:	2304      	movs	r3, #4
 80016f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f8:	f107 0320 	add.w	r3, r7, #32
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 f8f1 	bl	80038e4 <HAL_RCC_OscConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001708:	f000 faa8 	bl	8001c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170c:	230f      	movs	r3, #15
 800170e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001710:	2302      	movs	r3, #2
 8001712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800171c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800171e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	2102      	movs	r1, #2
 800172a:	4618      	mov	r0, r3
 800172c:	f002 fb52 	bl	8003dd4 <HAL_RCC_ClockConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001736:	f000 fa91 	bl	8001c5c <Error_Handler>
  }
}
 800173a:	bf00      	nop
 800173c:	3750      	adds	r7, #80	@ 0x50
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	40007000 	.word	0x40007000

0800174c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	@ 0x28
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001752:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <MX_CAN1_Init+0xa0>)
 8001754:	4a26      	ldr	r2, [pc, #152]	@ (80017f0 <MX_CAN1_Init+0xa4>)
 8001756:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001758:	4b24      	ldr	r3, [pc, #144]	@ (80017ec <MX_CAN1_Init+0xa0>)
 800175a:	2204      	movs	r2, #4
 800175c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800175e:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <MX_CAN1_Init+0xa0>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001764:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <MX_CAN1_Init+0xa0>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <MX_CAN1_Init+0xa0>)
 800176c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001770:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001772:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <MX_CAN1_Init+0xa0>)
 8001774:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001778:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800177a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <MX_CAN1_Init+0xa0>)
 800177c:	2200      	movs	r2, #0
 800177e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001780:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <MX_CAN1_Init+0xa0>)
 8001782:	2200      	movs	r2, #0
 8001784:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001786:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <MX_CAN1_Init+0xa0>)
 8001788:	2200      	movs	r2, #0
 800178a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800178c:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <MX_CAN1_Init+0xa0>)
 800178e:	2200      	movs	r2, #0
 8001790:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001792:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <MX_CAN1_Init+0xa0>)
 8001794:	2200      	movs	r2, #0
 8001796:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <MX_CAN1_Init+0xa0>)
 800179a:	2200      	movs	r2, #0
 800179c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800179e:	4813      	ldr	r0, [pc, #76]	@ (80017ec <MX_CAN1_Init+0xa0>)
 80017a0:	f000 fd9a 	bl	80022d8 <HAL_CAN_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80017aa:	f000 fa57 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80017b2:	2312      	movs	r3, #18
 80017b4:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 80017ba:	f242 0360 	movw	r3, #8288	@ 0x2060
 80017be:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 80017c4:	f242 0360 	movw	r3, #8288	@ 0x2060
 80017c8:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;
 80017d6:	2314      	movs	r3, #20
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80017da:	463b      	mov	r3, r7
 80017dc:	4619      	mov	r1, r3
 80017de:	4803      	ldr	r0, [pc, #12]	@ (80017ec <MX_CAN1_Init+0xa0>)
 80017e0:	f000 fe76 	bl	80024d0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	@ 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000324 	.word	0x20000324
 80017f0:	40006400 	.word	0x40006400

080017f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <MX_I2C1_Init+0x50>)
 80017fa:	4a13      	ldr	r2, [pc, #76]	@ (8001848 <MX_I2C1_Init+0x54>)
 80017fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017fe:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <MX_I2C1_Init+0x50>)
 8001800:	4a12      	ldr	r2, [pc, #72]	@ (800184c <MX_I2C1_Init+0x58>)
 8001802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001804:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <MX_I2C1_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800180a:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <MX_I2C1_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001810:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <MX_I2C1_Init+0x50>)
 8001812:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001816:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001818:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <MX_I2C1_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <MX_I2C1_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001824:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <MX_I2C1_Init+0x50>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <MX_I2C1_Init+0x50>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	@ (8001844 <MX_I2C1_Init+0x50>)
 8001832:	f001 ff13 	bl	800365c <HAL_I2C_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800183c:	f000 fa0e 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000034c 	.word	0x2000034c
 8001848:	40005400 	.word	0x40005400
 800184c:	00061a80 	.word	0x00061a80

08001850 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	463b      	mov	r3, r7
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <MX_TIM1_Init+0x98>)
 800186e:	4a1f      	ldr	r2, [pc, #124]	@ (80018ec <MX_TIM1_Init+0x9c>)
 8001870:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168 -1;
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <MX_TIM1_Init+0x98>)
 8001874:	22a7      	movs	r2, #167	@ 0xa7
 8001876:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <MX_TIM1_Init+0x98>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF - 1;
 800187e:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <MX_TIM1_Init+0x98>)
 8001880:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001884:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <MX_TIM1_Init+0x98>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800188c:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <MX_TIM1_Init+0x98>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <MX_TIM1_Init+0x98>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001898:	4813      	ldr	r0, [pc, #76]	@ (80018e8 <MX_TIM1_Init+0x98>)
 800189a:	f002 fcb9 	bl	8004210 <HAL_TIM_Base_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018a4:	f000 f9da 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <MX_TIM1_Init+0x98>)
 80018b6:	f002 fd63 	bl	8004380 <HAL_TIM_ConfigClockSource>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018c0:	f000 f9cc 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018cc:	463b      	mov	r3, r7
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <MX_TIM1_Init+0x98>)
 80018d2:	f002 ff63 	bl	800479c <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018dc:	f000 f9be 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  
  /* USER CODE END TIM1_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200003a0 	.word	0x200003a0
 80018ec:	40010000 	.word	0x40010000

080018f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <MX_USART1_UART_Init+0x50>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 80018fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800190e:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b08      	ldr	r3, [pc, #32]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001926:	4805      	ldr	r0, [pc, #20]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 8001928:	f002 ffb4 	bl	8004894 <HAL_UART_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001932:	f000 f993 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200003e8 	.word	0x200003e8
 8001940:	40011000 	.word	0x40011000

08001944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 800194a:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <MX_USART2_UART_Init+0x50>)
 800194c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 8001950:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001956:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001962:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001968:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 800196a:	220c      	movs	r2, #12
 800196c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196e:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 800197c:	f002 ff8a 	bl	8004894 <HAL_UART_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001986:	f000 f969 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000430 	.word	0x20000430
 8001994:	40004400 	.word	0x40004400

08001998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	@ 0x30
 800199c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a6a      	ldr	r2, [pc, #424]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 80019b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b68      	ldr	r3, [pc, #416]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	4b64      	ldr	r3, [pc, #400]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	4a63      	ldr	r2, [pc, #396]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019da:	4b61      	ldr	r3, [pc, #388]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b56      	ldr	r3, [pc, #344]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a55      	ldr	r2, [pc, #340]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b53      	ldr	r3, [pc, #332]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4b4f      	ldr	r3, [pc, #316]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a4e      	ldr	r2, [pc, #312]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 8001a28:	f043 0310 	orr.w	r3, r3, #16
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b48      	ldr	r3, [pc, #288]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a47      	ldr	r2, [pc, #284]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b45      	ldr	r3, [pc, #276]	@ (8001b60 <MX_GPIO_Init+0x1c8>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001a5c:	4841      	ldr	r0, [pc, #260]	@ (8001b64 <MX_GPIO_Init+0x1cc>)
 8001a5e:	f001 fde3 	bl	8003628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001a62:	2200      	movs	r2, #0
 8001a64:	f641 71f0 	movw	r1, #8176	@ 0x1ff0
 8001a68:	483f      	ldr	r0, [pc, #252]	@ (8001b68 <MX_GPIO_Init+0x1d0>)
 8001a6a:	f001 fddd 	bl	8003628 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f643 013b 	movw	r1, #14395	@ 0x383b
 8001a74:	483d      	ldr	r0, [pc, #244]	@ (8001b6c <MX_GPIO_Init+0x1d4>)
 8001a76:	f001 fdd7 	bl	8003628 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f44f 41ff 	mov.w	r1, #32640	@ 0x7f80
 8001a80:	483b      	ldr	r0, [pc, #236]	@ (8001b70 <MX_GPIO_Init+0x1d8>)
 8001a82:	f001 fdd1 	bl	8003628 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001a86:	2200      	movs	r2, #0
 8001a88:	21f7      	movs	r1, #247	@ 0xf7
 8001a8a:	483a      	ldr	r0, [pc, #232]	@ (8001b74 <MX_GPIO_Init+0x1dc>)
 8001a8c:	f001 fdcc 	bl	8003628 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001a90:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	482e      	ldr	r0, [pc, #184]	@ (8001b64 <MX_GPIO_Init+0x1cc>)
 8001aaa:	f001 fc21 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001aae:	f641 73f0 	movw	r3, #8176	@ 0x1ff0
 8001ab2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4828      	ldr	r0, [pc, #160]	@ (8001b68 <MX_GPIO_Init+0x1d0>)
 8001ac8:	f001 fc12 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 PB12
                           PB13 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8001acc:	f643 033b 	movw	r3, #14395	@ 0x383b
 8001ad0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4821      	ldr	r0, [pc, #132]	@ (8001b6c <MX_GPIO_Init+0x1d4>)
 8001ae6:	f001 fc03 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001aea:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 8001aee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	481b      	ldr	r0, [pc, #108]	@ (8001b70 <MX_GPIO_Init+0x1d8>)
 8001b04:	f001 fbf4 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b08:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4813      	ldr	r0, [pc, #76]	@ (8001b6c <MX_GPIO_Init+0x1d4>)
 8001b1e:	f001 fbe7 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b22:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8001b26:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b30:	f107 031c 	add.w	r3, r7, #28
 8001b34:	4619      	mov	r1, r3
 8001b36:	480f      	ldr	r0, [pc, #60]	@ (8001b74 <MX_GPIO_Init+0x1dc>)
 8001b38:	f001 fbda 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001b3c:	23f7      	movs	r3, #247	@ 0xf7
 8001b3e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	4808      	ldr	r0, [pc, #32]	@ (8001b74 <MX_GPIO_Init+0x1dc>)
 8001b54:	f001 fbcc 	bl	80032f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b58:	bf00      	nop
 8001b5a:	3730      	adds	r7, #48	@ 0x30
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40020c00 	.word	0x40020c00

08001b78 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d10c      	bne.n	8001baa <HAL_UARTEx_RxEventCallback+0x32>

		// Call to callback function screen
		Screen_RX_data(dataRX);
 8001b90:	4809      	ldr	r0, [pc, #36]	@ (8001bb8 <HAL_UARTEx_RxEventCallback+0x40>)
 8001b92:	f003 fe29 	bl	80057e8 <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 8001b96:	2264      	movs	r2, #100	@ 0x64
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4807      	ldr	r0, [pc, #28]	@ (8001bb8 <HAL_UARTEx_RxEventCallback+0x40>)
 8001b9c:	f005 fcc5 	bl	800752a <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8001ba0:	2264      	movs	r2, #100	@ 0x64
 8001ba2:	4905      	ldr	r1, [pc, #20]	@ (8001bb8 <HAL_UARTEx_RxEventCallback+0x40>)
 8001ba4:	4803      	ldr	r0, [pc, #12]	@ (8001bb4 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001ba6:	f002 fec5 	bl	8004934 <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000430 	.word	0x20000430
 8001bb8:	20000478 	.word	0x20000478

08001bbc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001bc6:	4a07      	ldr	r2, [pc, #28]	@ (8001be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4807      	ldr	r0, [pc, #28]	@ (8001be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001bcc:	f000 fe74 	bl	80028b8 <HAL_CAN_GetRxMessage>
	RxCAn = 1;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000510 	.word	0x20000510
 8001be4:	200004f4 	.word	0x200004f4
 8001be8:	20000324 	.word	0x20000324
 8001bec:	2000051c 	.word	0x2000051c

08001bf0 <_write>:


int _write(int file, char *ptr, int len) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	e009      	b.n	8001c16 <_write+0x26>
        ITM_SendChar(ptr[i]);
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	4413      	add	r3, r2
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fc46 	bl	800149c <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbf1      	blt.n	8001c02 <_write+0x12>
    }
    return len;
 8001c1e:	687b      	ldr	r3, [r7, #4]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <delay_us>:

/**
 * delay polling in microsecond
 */
void delay_us(uint16_t delay_us) {
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0); // reset time 1 to 0
 8001c32:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <delay_us+0x30>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	@ 0x24

	while(__HAL_TIM_GET_COUNTER(&htim1) < delay_us );
 8001c3a:	bf00      	nop
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <delay_us+0x30>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d3f9      	bcc.n	8001c3c <delay_us+0x14>
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	200003a0 	.word	0x200003a0

08001c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
}
 8001c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <Error_Handler+0x8>

08001c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_MspInit+0x4c>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb4 <HAL_MspInit+0x4c>)
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <HAL_MspInit+0x4c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <HAL_MspInit+0x4c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	4a08      	ldr	r2, [pc, #32]	@ (8001cb4 <HAL_MspInit+0x4c>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	@ 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a21      	ldr	r2, [pc, #132]	@ (8001d5c <HAL_CAN_MspInit+0xa4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d13c      	bne.n	8001d54 <HAL_CAN_MspInit+0x9c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b20      	ldr	r3, [pc, #128]	@ (8001d60 <HAL_CAN_MspInit+0xa8>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d60 <HAL_CAN_MspInit+0xa8>)
 8001ce4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cea:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <HAL_CAN_MspInit+0xa8>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <HAL_CAN_MspInit+0xa8>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <HAL_CAN_MspInit+0xa8>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <HAL_CAN_MspInit+0xa8>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d24:	2309      	movs	r3, #9
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480d      	ldr	r0, [pc, #52]	@ (8001d64 <HAL_CAN_MspInit+0xac>)
 8001d30:	f001 fade 	bl	80032f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	2014      	movs	r0, #20
 8001d3a:	f001 fa10 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d3e:	2014      	movs	r0, #20
 8001d40:	f001 fa29 	bl	8003196 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	2015      	movs	r0, #21
 8001d4a:	f001 fa08 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001d4e:	2015      	movs	r0, #21
 8001d50:	f001 fa21 	bl	8003196 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	@ 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40006400 	.word	0x40006400
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020000 	.word	0x40020000

08001d68 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	@ 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a19      	ldr	r2, [pc, #100]	@ (8001dec <HAL_I2C_MspInit+0x84>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d12b      	bne.n	8001de2 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <HAL_I2C_MspInit+0x88>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a17      	ldr	r2, [pc, #92]	@ (8001df0 <HAL_I2C_MspInit+0x88>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_I2C_MspInit+0x88>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001da6:	23c0      	movs	r3, #192	@ 0xc0
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001daa:	2312      	movs	r3, #18
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001db6:	2304      	movs	r3, #4
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	480c      	ldr	r0, [pc, #48]	@ (8001df4 <HAL_I2C_MspInit+0x8c>)
 8001dc2:	f001 fa95 	bl	80032f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <HAL_I2C_MspInit+0x88>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	4a08      	ldr	r2, [pc, #32]	@ (8001df0 <HAL_I2C_MspInit+0x88>)
 8001dd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_I2C_MspInit+0x88>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001de2:	bf00      	nop
 8001de4:	3728      	adds	r7, #40	@ 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40005400 	.word	0x40005400
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020400 	.word	0x40020400

08001df8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0b      	ldr	r2, [pc, #44]	@ (8001e34 <HAL_TIM_Base_MspInit+0x3c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10d      	bne.n	8001e26 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <HAL_TIM_Base_MspInit+0x40>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	4a09      	ldr	r2, [pc, #36]	@ (8001e38 <HAL_TIM_Base_MspInit+0x40>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <HAL_TIM_Base_MspInit+0x40>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40023800 	.word	0x40023800

08001e3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	@ 0x30
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a36      	ldr	r2, [pc, #216]	@ (8001f34 <HAL_UART_MspInit+0xf8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d12d      	bne.n	8001eba <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	4b35      	ldr	r3, [pc, #212]	@ (8001f38 <HAL_UART_MspInit+0xfc>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	4a34      	ldr	r2, [pc, #208]	@ (8001f38 <HAL_UART_MspInit+0xfc>)
 8001e68:	f043 0310 	orr.w	r3, r3, #16
 8001e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e6e:	4b32      	ldr	r3, [pc, #200]	@ (8001f38 <HAL_UART_MspInit+0xfc>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f38 <HAL_UART_MspInit+0xfc>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	4a2d      	ldr	r2, [pc, #180]	@ (8001f38 <HAL_UART_MspInit+0xfc>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f38 <HAL_UART_MspInit+0xfc>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e96:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4822      	ldr	r0, [pc, #136]	@ (8001f3c <HAL_UART_MspInit+0x100>)
 8001eb4:	f001 fa1c 	bl	80032f0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001eb8:	e038      	b.n	8001f2c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a20      	ldr	r2, [pc, #128]	@ (8001f40 <HAL_UART_MspInit+0x104>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d133      	bne.n	8001f2c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_UART_MspInit+0xfc>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8001f38 <HAL_UART_MspInit+0xfc>)
 8001ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed4:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <HAL_UART_MspInit+0xfc>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <HAL_UART_MspInit+0xfc>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee8:	4a13      	ldr	r2, [pc, #76]	@ (8001f38 <HAL_UART_MspInit+0xfc>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef0:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <HAL_UART_MspInit+0xfc>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001efc:	230c      	movs	r3, #12
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	4619      	mov	r1, r3
 8001f16:	4809      	ldr	r0, [pc, #36]	@ (8001f3c <HAL_UART_MspInit+0x100>)
 8001f18:	f001 f9ea 	bl	80032f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2026      	movs	r0, #38	@ 0x26
 8001f22:	f001 f91c 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f26:	2026      	movs	r0, #38	@ 0x26
 8001f28:	f001 f935 	bl	8003196 <HAL_NVIC_EnableIRQ>
}
 8001f2c:	bf00      	nop
 8001f2e:	3730      	adds	r7, #48	@ 0x30
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40011000 	.word	0x40011000
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40004400 	.word	0x40004400

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <NMI_Handler+0x4>

08001f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <BusFault_Handler+0x4>

08001f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <UsageFault_Handler+0x4>

08001f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9a:	f000 f959 	bl	8002250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fa8:	4802      	ldr	r0, [pc, #8]	@ (8001fb4 <CAN1_RX0_IRQHandler+0x10>)
 8001faa:	f000 fdcd 	bl	8002b48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000324 	.word	0x20000324

08001fb8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fbc:	4802      	ldr	r0, [pc, #8]	@ (8001fc8 <CAN1_RX1_IRQHandler+0x10>)
 8001fbe:	f000 fdc3 	bl	8002b48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000324 	.word	0x20000324

08001fcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fd0:	4802      	ldr	r0, [pc, #8]	@ (8001fdc <USART2_IRQHandler+0x10>)
 8001fd2:	f002 fd0d 	bl	80049f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000430 	.word	0x20000430

08001fe0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return 1;
 8001fe4:	2301      	movs	r3, #1
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <_kill>:

int _kill(int pid, int sig)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ffa:	f005 fb67 	bl	80076cc <__errno>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2216      	movs	r2, #22
 8002002:	601a      	str	r2, [r3, #0]
  return -1;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <_exit>:

void _exit (int status)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ffe7 	bl	8001ff0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002022:	bf00      	nop
 8002024:	e7fd      	b.n	8002022 <_exit+0x12>

08002026 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e00a      	b.n	800204e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002038:	f3af 8000 	nop.w
 800203c:	4601      	mov	r1, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	60ba      	str	r2, [r7, #8]
 8002044:	b2ca      	uxtb	r2, r1
 8002046:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3301      	adds	r3, #1
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	dbf0      	blt.n	8002038 <_read+0x12>
  }

  return len;
 8002056:	687b      	ldr	r3, [r7, #4]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002088:	605a      	str	r2, [r3, #4]
  return 0;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <_isatty>:

int _isatty(int file)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020a0:	2301      	movs	r3, #1
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d0:	4a14      	ldr	r2, [pc, #80]	@ (8002124 <_sbrk+0x5c>)
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <_sbrk+0x60>)
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020dc:	4b13      	ldr	r3, [pc, #76]	@ (800212c <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e4:	4b11      	ldr	r3, [pc, #68]	@ (800212c <_sbrk+0x64>)
 80020e6:	4a12      	ldr	r2, [pc, #72]	@ (8002130 <_sbrk+0x68>)
 80020e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ea:	4b10      	ldr	r3, [pc, #64]	@ (800212c <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d207      	bcs.n	8002108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f8:	f005 fae8 	bl	80076cc <__errno>
 80020fc:	4603      	mov	r3, r0
 80020fe:	220c      	movs	r2, #12
 8002100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	e009      	b.n	800211c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002108:	4b08      	ldr	r3, [pc, #32]	@ (800212c <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800210e:	4b07      	ldr	r3, [pc, #28]	@ (800212c <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	4a05      	ldr	r2, [pc, #20]	@ (800212c <_sbrk+0x64>)
 8002118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800211a:	68fb      	ldr	r3, [r7, #12]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20020000 	.word	0x20020000
 8002128:	00000400 	.word	0x00000400
 800212c:	20000520 	.word	0x20000520
 8002130:	20000740 	.word	0x20000740

08002134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <SystemInit+0x20>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213e:	4a05      	ldr	r2, [pc, #20]	@ (8002154 <SystemInit+0x20>)
 8002140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002158:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002190 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800215c:	f7ff ffea 	bl	8002134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002160:	480c      	ldr	r0, [pc, #48]	@ (8002194 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002162:	490d      	ldr	r1, [pc, #52]	@ (8002198 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002164:	4a0d      	ldr	r2, [pc, #52]	@ (800219c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002168:	e002      	b.n	8002170 <LoopCopyDataInit>

0800216a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800216c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216e:	3304      	adds	r3, #4

08002170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002174:	d3f9      	bcc.n	800216a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002176:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002178:	4c0a      	ldr	r4, [pc, #40]	@ (80021a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800217c:	e001      	b.n	8002182 <LoopFillZerobss>

0800217e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002180:	3204      	adds	r2, #4

08002182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002184:	d3fb      	bcc.n	800217e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002186:	f005 faa7 	bl	80076d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800218a:	f7ff f9af 	bl	80014ec <main>
  bx  lr    
 800218e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002198:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 800219c:	0800a5bc 	.word	0x0800a5bc
  ldr r2, =_sbss
 80021a0:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 80021a4:	2000073c 	.word	0x2000073c

080021a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a8:	e7fe      	b.n	80021a8 <ADC_IRQHandler>
	...

080021ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b0:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <HAL_Init+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0d      	ldr	r2, [pc, #52]	@ (80021ec <HAL_Init+0x40>)
 80021b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021bc:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <HAL_Init+0x40>)
 80021c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	@ (80021ec <HAL_Init+0x40>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 ffb7 	bl	8003148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021da:	200f      	movs	r0, #15
 80021dc:	f000 f808 	bl	80021f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7ff fd42 	bl	8001c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00

080021f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f8:	4b12      	ldr	r3, [pc, #72]	@ (8002244 <HAL_InitTick+0x54>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <HAL_InitTick+0x58>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002206:	fbb3 f3f1 	udiv	r3, r3, r1
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	4618      	mov	r0, r3
 8002210:	f000 ffcf 	bl	80031b2 <HAL_SYSTICK_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e00e      	b.n	800223c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d80a      	bhi.n	800223a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002224:	2200      	movs	r2, #0
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f000 ff97 	bl	800315e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002230:	4a06      	ldr	r2, [pc, #24]	@ (800224c <HAL_InitTick+0x5c>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200000e4 	.word	0x200000e4
 8002248:	200000ec 	.word	0x200000ec
 800224c:	200000e8 	.word	0x200000e8

08002250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_IncTick+0x20>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_IncTick+0x24>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4413      	add	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <HAL_IncTick+0x24>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	200000ec 	.word	0x200000ec
 8002274:	20000524 	.word	0x20000524

08002278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b03      	ldr	r3, [pc, #12]	@ (800228c <HAL_GetTick+0x14>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000524 	.word	0x20000524

08002290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff ffee 	bl	8002278 <HAL_GetTick>
 800229c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d005      	beq.n	80022b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <HAL_Delay+0x44>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022b6:	bf00      	nop
 80022b8:	f7ff ffde 	bl	8002278 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d8f7      	bhi.n	80022b8 <HAL_Delay+0x28>
  {
  }
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200000ec 	.word	0x200000ec

080022d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0ed      	b.n	80024c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff fcde 	bl	8001cb8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800230c:	f7ff ffb4 	bl	8002278 <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002312:	e012      	b.n	800233a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002314:	f7ff ffb0 	bl	8002278 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b0a      	cmp	r3, #10
 8002320:	d90b      	bls.n	800233a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2205      	movs	r2, #5
 8002332:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0c5      	b.n	80024c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0e5      	beq.n	8002314 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0202 	bic.w	r2, r2, #2
 8002356:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002358:	f7ff ff8e 	bl	8002278 <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800235e:	e012      	b.n	8002386 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002360:	f7ff ff8a 	bl	8002278 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b0a      	cmp	r3, #10
 800236c:	d90b      	bls.n	8002386 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2205      	movs	r2, #5
 800237e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e09f      	b.n	80024c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1e5      	bne.n	8002360 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7e1b      	ldrb	r3, [r3, #24]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d108      	bne.n	80023ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e007      	b.n	80023be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7e5b      	ldrb	r3, [r3, #25]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d108      	bne.n	80023d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	e007      	b.n	80023e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	7e9b      	ldrb	r3, [r3, #26]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d108      	bne.n	8002402 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0220 	orr.w	r2, r2, #32
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e007      	b.n	8002412 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0220 	bic.w	r2, r2, #32
 8002410:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7edb      	ldrb	r3, [r3, #27]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d108      	bne.n	800242c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0210 	bic.w	r2, r2, #16
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e007      	b.n	800243c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0210 	orr.w	r2, r2, #16
 800243a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7f1b      	ldrb	r3, [r3, #28]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d108      	bne.n	8002456 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0208 	orr.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e007      	b.n	8002466 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0208 	bic.w	r2, r2, #8
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7f5b      	ldrb	r3, [r3, #29]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d108      	bne.n	8002480 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0204 	orr.w	r2, r2, #4
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e007      	b.n	8002490 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0204 	bic.w	r2, r2, #4
 800248e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	ea42 0103 	orr.w	r1, r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d003      	beq.n	80024f6 <HAL_CAN_ConfigFilter+0x26>
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	f040 80be 	bne.w	8002672 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80024f6:	4b65      	ldr	r3, [pc, #404]	@ (800268c <HAL_CAN_ConfigFilter+0x1bc>)
 80024f8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002510:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	431a      	orrs	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2201      	movs	r2, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43db      	mvns	r3, r3
 8002548:	401a      	ands	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d123      	bne.n	80025a0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	43db      	mvns	r3, r3
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800257a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3248      	adds	r2, #72	@ 0x48
 8002580:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002594:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002596:	6979      	ldr	r1, [r7, #20]
 8002598:	3348      	adds	r3, #72	@ 0x48
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d122      	bne.n	80025ee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	431a      	orrs	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3248      	adds	r2, #72	@ 0x48
 80025ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025e4:	6979      	ldr	r1, [r7, #20]
 80025e6:	3348      	adds	r3, #72	@ 0x48
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	43db      	mvns	r3, r3
 8002600:	401a      	ands	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002608:	e007      	b.n	800261a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	431a      	orrs	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	43db      	mvns	r3, r3
 800262c:	401a      	ands	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002634:	e007      	b.n	8002646 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	431a      	orrs	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d107      	bne.n	800265e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	431a      	orrs	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002664:	f023 0201 	bic.w	r2, r3, #1
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e006      	b.n	8002680 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
  }
}
 8002680:	4618      	mov	r0, r3
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	40006400 	.word	0x40006400

08002690 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d12e      	bne.n	8002702 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026bc:	f7ff fddc 	bl	8002278 <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026c2:	e012      	b.n	80026ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026c4:	f7ff fdd8 	bl	8002278 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b0a      	cmp	r3, #10
 80026d0:	d90b      	bls.n	80026ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2205      	movs	r2, #5
 80026e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e012      	b.n	8002710 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e5      	bne.n	80026c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e006      	b.n	8002710 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
  }
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	@ 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800272c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002736:	7ffb      	ldrb	r3, [r7, #31]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d003      	beq.n	8002744 <HAL_CAN_AddTxMessage+0x2c>
 800273c:	7ffb      	ldrb	r3, [r7, #31]
 800273e:	2b02      	cmp	r3, #2
 8002740:	f040 80ad 	bne.w	800289e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8095 	beq.w	800288e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	0e1b      	lsrs	r3, r3, #24
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800276e:	2201      	movs	r2, #1
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10d      	bne.n	800279c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800278a:	68f9      	ldr	r1, [r7, #12]
 800278c:	6809      	ldr	r1, [r1, #0]
 800278e:	431a      	orrs	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	3318      	adds	r3, #24
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	440b      	add	r3, r1
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e00f      	b.n	80027bc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027a6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027b0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3318      	adds	r3, #24
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	440b      	add	r3, r1
 80027ba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6819      	ldr	r1, [r3, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	3318      	adds	r3, #24
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	440b      	add	r3, r1
 80027cc:	3304      	adds	r3, #4
 80027ce:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	7d1b      	ldrb	r3, [r3, #20]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d111      	bne.n	80027fc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3318      	adds	r3, #24
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	4413      	add	r3, r2
 80027e4:	3304      	adds	r3, #4
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	6811      	ldr	r1, [r2, #0]
 80027ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	3318      	adds	r3, #24
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	440b      	add	r3, r1
 80027f8:	3304      	adds	r3, #4
 80027fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3307      	adds	r3, #7
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	061a      	lsls	r2, r3, #24
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3306      	adds	r3, #6
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3305      	adds	r3, #5
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	4313      	orrs	r3, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	3204      	adds	r2, #4
 800281c:	7812      	ldrb	r2, [r2, #0]
 800281e:	4610      	mov	r0, r2
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	6811      	ldr	r1, [r2, #0]
 8002824:	ea43 0200 	orr.w	r2, r3, r0
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	440b      	add	r3, r1
 800282e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002832:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3303      	adds	r3, #3
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	061a      	lsls	r2, r3, #24
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3302      	adds	r3, #2
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	041b      	lsls	r3, r3, #16
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3301      	adds	r3, #1
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	4313      	orrs	r3, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	7812      	ldrb	r2, [r2, #0]
 8002854:	4610      	mov	r0, r2
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	6811      	ldr	r1, [r2, #0]
 800285a:	ea43 0200 	orr.w	r2, r3, r0
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	440b      	add	r3, r1
 8002864:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002868:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3318      	adds	r3, #24
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	4413      	add	r3, r2
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	6811      	ldr	r1, [r2, #0]
 800287c:	f043 0201 	orr.w	r2, r3, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3318      	adds	r3, #24
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	440b      	add	r3, r1
 8002888:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e00e      	b.n	80028ac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e006      	b.n	80028ac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
  }
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3724      	adds	r7, #36	@ 0x24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028cc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d003      	beq.n	80028dc <HAL_CAN_GetRxMessage+0x24>
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	f040 8103 	bne.w	8002ae2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10e      	bne.n	8002900 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d116      	bne.n	800291e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0f7      	b.n	8002af0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0e8      	b.n	8002af0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	331b      	adds	r3, #27
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	4413      	add	r3, r2
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0204 	and.w	r2, r3, #4
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10c      	bne.n	8002956 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	331b      	adds	r3, #27
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	4413      	add	r3, r2
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	0d5b      	lsrs	r3, r3, #21
 800294c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e00b      	b.n	800296e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	331b      	adds	r3, #27
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	4413      	add	r3, r2
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	08db      	lsrs	r3, r3, #3
 8002966:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	331b      	adds	r3, #27
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	4413      	add	r3, r2
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0202 	and.w	r2, r3, #2
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	331b      	adds	r3, #27
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	4413      	add	r3, r2
 8002990:	3304      	adds	r3, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2208      	movs	r2, #8
 80029a0:	611a      	str	r2, [r3, #16]
 80029a2:	e00b      	b.n	80029bc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	331b      	adds	r3, #27
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	4413      	add	r3, r2
 80029b0:	3304      	adds	r3, #4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 020f 	and.w	r2, r3, #15
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	331b      	adds	r3, #27
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	4413      	add	r3, r2
 80029c8:	3304      	adds	r3, #4
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	331b      	adds	r3, #27
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	4413      	add	r3, r2
 80029e0:	3304      	adds	r3, #4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0c1b      	lsrs	r3, r3, #16
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	0a1a      	lsrs	r2, r3, #8
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	0c1a      	lsrs	r2, r3, #16
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	3302      	adds	r3, #2
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0e1a      	lsrs	r2, r3, #24
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	3303      	adds	r3, #3
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	3304      	adds	r3, #4
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0a1a      	lsrs	r2, r3, #8
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	3305      	adds	r3, #5
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0c1a      	lsrs	r2, r3, #16
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	3306      	adds	r3, #6
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e1a      	lsrs	r2, r3, #24
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	3307      	adds	r3, #7
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d108      	bne.n	8002ace <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0220 	orr.w	r2, r2, #32
 8002aca:	60da      	str	r2, [r3, #12]
 8002acc:	e007      	b.n	8002ade <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0220 	orr.w	r2, r2, #32
 8002adc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e006      	b.n	8002af0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b0c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d002      	beq.n	8002b1a <HAL_CAN_ActivateNotification+0x1e>
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d109      	bne.n	8002b2e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6959      	ldr	r1, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e006      	b.n	8002b3c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b32:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	@ 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d07c      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d023      	beq.n	8002be0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f983 	bl	8002eb6 <HAL_CAN_TxMailbox0CompleteCallback>
 8002bb0:	e016      	b.n	8002be0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d004      	beq.n	8002bc6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc4:	e00c      	b.n	8002be0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd8:	e002      	b.n	8002be0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f989 	bl	8002ef2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d024      	beq.n	8002c34 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bf2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f963 	bl	8002eca <HAL_CAN_TxMailbox1CompleteCallback>
 8002c04:	e016      	b.n	8002c34 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d004      	beq.n	8002c1a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c18:	e00c      	b.n	8002c34 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d004      	beq.n	8002c2e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c2c:	e002      	b.n	8002c34 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f969 	bl	8002f06 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d024      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f943 	bl	8002ede <HAL_CAN_TxMailbox2CompleteCallback>
 8002c58:	e016      	b.n	8002c88 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c6c:	e00c      	b.n	8002c88 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d004      	beq.n	8002c82 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c80:	e002      	b.n	8002c88 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f949 	bl	8002f1a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00c      	beq.n	8002cac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d006      	beq.n	8002cce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f930 	bl	8002f2e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d009      	beq.n	8002cec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fe ff68 	bl	8001bbc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00c      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d06:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f912 	bl	8002f56 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d009      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8f9 	bl	8002f42 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2210      	movs	r2, #16
 8002d6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f8fc 	bl	8002f6a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d006      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f8f5 	bl	8002f7e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d07b      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d072      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	f043 0302 	orr.w	r3, r3, #2
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d043      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d03e      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e16:	2b60      	cmp	r3, #96	@ 0x60
 8002e18:	d02b      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x32a>
 8002e1a:	2b60      	cmp	r3, #96	@ 0x60
 8002e1c:	d82e      	bhi.n	8002e7c <HAL_CAN_IRQHandler+0x334>
 8002e1e:	2b50      	cmp	r3, #80	@ 0x50
 8002e20:	d022      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x320>
 8002e22:	2b50      	cmp	r3, #80	@ 0x50
 8002e24:	d82a      	bhi.n	8002e7c <HAL_CAN_IRQHandler+0x334>
 8002e26:	2b40      	cmp	r3, #64	@ 0x40
 8002e28:	d019      	beq.n	8002e5e <HAL_CAN_IRQHandler+0x316>
 8002e2a:	2b40      	cmp	r3, #64	@ 0x40
 8002e2c:	d826      	bhi.n	8002e7c <HAL_CAN_IRQHandler+0x334>
 8002e2e:	2b30      	cmp	r3, #48	@ 0x30
 8002e30:	d010      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x30c>
 8002e32:	2b30      	cmp	r3, #48	@ 0x30
 8002e34:	d822      	bhi.n	8002e7c <HAL_CAN_IRQHandler+0x334>
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d002      	beq.n	8002e40 <HAL_CAN_IRQHandler+0x2f8>
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d005      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e3e:	e01d      	b.n	8002e7c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	f043 0308 	orr.w	r3, r3, #8
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e48:	e019      	b.n	8002e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	f043 0310 	orr.w	r3, r3, #16
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e52:	e014      	b.n	8002e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	f043 0320 	orr.w	r3, r3, #32
 8002e5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e5c:	e00f      	b.n	8002e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e66:	e00a      	b.n	8002e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e70:	e005      	b.n	8002e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e7a:	e000      	b.n	8002e7e <HAL_CAN_IRQHandler+0x336>
            break;
 8002e7c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002e8c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2204      	movs	r2, #4
 8002e94:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f872 	bl	8002f92 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002eae:	bf00      	nop
 8002eb0:	3728      	adds	r7, #40	@ 0x28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <__NVIC_SetPriorityGrouping>:
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <__NVIC_SetPriorityGrouping+0x44>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fda:	4a04      	ldr	r2, [pc, #16]	@ (8002fec <__NVIC_SetPriorityGrouping+0x44>)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	60d3      	str	r3, [r2, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_GetPriorityGrouping>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff4:	4b04      	ldr	r3, [pc, #16]	@ (8003008 <__NVIC_GetPriorityGrouping+0x18>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	0a1b      	lsrs	r3, r3, #8
 8002ffa:	f003 0307 	and.w	r3, r3, #7
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <__NVIC_EnableIRQ>:
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	2b00      	cmp	r3, #0
 800301c:	db0b      	blt.n	8003036 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	4907      	ldr	r1, [pc, #28]	@ (8003044 <__NVIC_EnableIRQ+0x38>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2001      	movs	r0, #1
 800302e:	fa00 f202 	lsl.w	r2, r0, r2
 8003032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000e100 	.word	0xe000e100

08003048 <__NVIC_SetPriority>:
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	2b00      	cmp	r3, #0
 800305a:	db0a      	blt.n	8003072 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	490c      	ldr	r1, [pc, #48]	@ (8003094 <__NVIC_SetPriority+0x4c>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	440b      	add	r3, r1
 800306c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003070:	e00a      	b.n	8003088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4908      	ldr	r1, [pc, #32]	@ (8003098 <__NVIC_SetPriority+0x50>)
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	3b04      	subs	r3, #4
 8003080:	0112      	lsls	r2, r2, #4
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	440b      	add	r3, r1
 8003086:	761a      	strb	r2, [r3, #24]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000e100 	.word	0xe000e100
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <NVIC_EncodePriority>:
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	@ 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	bf28      	it	cs
 80030ba:	2304      	movcs	r3, #4
 80030bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d902      	bls.n	80030cc <NVIC_EncodePriority+0x30>
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3b03      	subs	r3, #3
 80030ca:	e000      	b.n	80030ce <NVIC_EncodePriority+0x32>
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	4313      	orrs	r3, r2
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	@ 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <SysTick_Config>:
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003114:	d301      	bcc.n	800311a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003116:	2301      	movs	r3, #1
 8003118:	e00f      	b.n	800313a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800311a:	4a0a      	ldr	r2, [pc, #40]	@ (8003144 <SysTick_Config+0x40>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003122:	210f      	movs	r1, #15
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	f7ff ff8e 	bl	8003048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800312c:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <SysTick_Config+0x40>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003132:	4b04      	ldr	r3, [pc, #16]	@ (8003144 <SysTick_Config+0x40>)
 8003134:	2207      	movs	r2, #7
 8003136:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	e000e010 	.word	0xe000e010

08003148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff29 	bl	8002fa8 <__NVIC_SetPriorityGrouping>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	4603      	mov	r3, r0
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003170:	f7ff ff3e 	bl	8002ff0 <__NVIC_GetPriorityGrouping>
 8003174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	6978      	ldr	r0, [r7, #20]
 800317c:	f7ff ff8e 	bl	800309c <NVIC_EncodePriority>
 8003180:	4602      	mov	r2, r0
 8003182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff5d 	bl	8003048 <__NVIC_SetPriority>
}
 800318e:	bf00      	nop
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff31 	bl	800300c <__NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ffa2 	bl	8003104 <SysTick_Config>
 80031c0:	4603      	mov	r3, r0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031d8:	f7ff f84e 	bl	8002278 <HAL_GetTick>
 80031dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d008      	beq.n	80031fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2280      	movs	r2, #128	@ 0x80
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e052      	b.n	80032a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0216 	bic.w	r2, r2, #22
 800320a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800321a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d103      	bne.n	800322c <HAL_DMA_Abort+0x62>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003228:	2b00      	cmp	r3, #0
 800322a:	d007      	beq.n	800323c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0208 	bic.w	r2, r2, #8
 800323a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800324c:	e013      	b.n	8003276 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800324e:	f7ff f813 	bl	8002278 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b05      	cmp	r3, #5
 800325a:	d90c      	bls.n	8003276 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2203      	movs	r2, #3
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e015      	b.n	80032a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e4      	bne.n	800324e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003288:	223f      	movs	r2, #63	@ 0x3f
 800328a:	409a      	lsls	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d004      	beq.n	80032c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2280      	movs	r2, #128	@ 0x80
 80032c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e00c      	b.n	80032e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2205      	movs	r2, #5
 80032cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
	...

080032f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b089      	sub	sp, #36	@ 0x24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	e16b      	b.n	80035e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800330c:	2201      	movs	r2, #1
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	429a      	cmp	r2, r3
 8003326:	f040 815a 	bne.w	80035de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d005      	beq.n	8003342 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800333e:	2b02      	cmp	r3, #2
 8003340:	d130      	bne.n	80033a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	2203      	movs	r2, #3
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003378:	2201      	movs	r2, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 0201 	and.w	r2, r3, #1
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d017      	beq.n	80033e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	2203      	movs	r2, #3
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d123      	bne.n	8003434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	08da      	lsrs	r2, r3, #3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3208      	adds	r2, #8
 80033f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	220f      	movs	r2, #15
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	08da      	lsrs	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3208      	adds	r2, #8
 800342e:	69b9      	ldr	r1, [r7, #24]
 8003430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	2203      	movs	r2, #3
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0203 	and.w	r2, r3, #3
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80b4 	beq.w	80035de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	4b60      	ldr	r3, [pc, #384]	@ (80035fc <HAL_GPIO_Init+0x30c>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	4a5f      	ldr	r2, [pc, #380]	@ (80035fc <HAL_GPIO_Init+0x30c>)
 8003480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003484:	6453      	str	r3, [r2, #68]	@ 0x44
 8003486:	4b5d      	ldr	r3, [pc, #372]	@ (80035fc <HAL_GPIO_Init+0x30c>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003492:	4a5b      	ldr	r2, [pc, #364]	@ (8003600 <HAL_GPIO_Init+0x310>)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	3302      	adds	r3, #2
 800349a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	220f      	movs	r2, #15
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a52      	ldr	r2, [pc, #328]	@ (8003604 <HAL_GPIO_Init+0x314>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d02b      	beq.n	8003516 <HAL_GPIO_Init+0x226>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a51      	ldr	r2, [pc, #324]	@ (8003608 <HAL_GPIO_Init+0x318>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d025      	beq.n	8003512 <HAL_GPIO_Init+0x222>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a50      	ldr	r2, [pc, #320]	@ (800360c <HAL_GPIO_Init+0x31c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01f      	beq.n	800350e <HAL_GPIO_Init+0x21e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003610 <HAL_GPIO_Init+0x320>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d019      	beq.n	800350a <HAL_GPIO_Init+0x21a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003614 <HAL_GPIO_Init+0x324>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_GPIO_Init+0x216>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003618 <HAL_GPIO_Init+0x328>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00d      	beq.n	8003502 <HAL_GPIO_Init+0x212>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4c      	ldr	r2, [pc, #304]	@ (800361c <HAL_GPIO_Init+0x32c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <HAL_GPIO_Init+0x20e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003620 <HAL_GPIO_Init+0x330>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_GPIO_Init+0x20a>
 80034f6:	2307      	movs	r3, #7
 80034f8:	e00e      	b.n	8003518 <HAL_GPIO_Init+0x228>
 80034fa:	2308      	movs	r3, #8
 80034fc:	e00c      	b.n	8003518 <HAL_GPIO_Init+0x228>
 80034fe:	2306      	movs	r3, #6
 8003500:	e00a      	b.n	8003518 <HAL_GPIO_Init+0x228>
 8003502:	2305      	movs	r3, #5
 8003504:	e008      	b.n	8003518 <HAL_GPIO_Init+0x228>
 8003506:	2304      	movs	r3, #4
 8003508:	e006      	b.n	8003518 <HAL_GPIO_Init+0x228>
 800350a:	2303      	movs	r3, #3
 800350c:	e004      	b.n	8003518 <HAL_GPIO_Init+0x228>
 800350e:	2302      	movs	r3, #2
 8003510:	e002      	b.n	8003518 <HAL_GPIO_Init+0x228>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_GPIO_Init+0x228>
 8003516:	2300      	movs	r3, #0
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	f002 0203 	and.w	r2, r2, #3
 800351e:	0092      	lsls	r2, r2, #2
 8003520:	4093      	lsls	r3, r2
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003528:	4935      	ldr	r1, [pc, #212]	@ (8003600 <HAL_GPIO_Init+0x310>)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	3302      	adds	r3, #2
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003536:	4b3b      	ldr	r3, [pc, #236]	@ (8003624 <HAL_GPIO_Init+0x334>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800355a:	4a32      	ldr	r2, [pc, #200]	@ (8003624 <HAL_GPIO_Init+0x334>)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003560:	4b30      	ldr	r3, [pc, #192]	@ (8003624 <HAL_GPIO_Init+0x334>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003584:	4a27      	ldr	r2, [pc, #156]	@ (8003624 <HAL_GPIO_Init+0x334>)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800358a:	4b26      	ldr	r3, [pc, #152]	@ (8003624 <HAL_GPIO_Init+0x334>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003624 <HAL_GPIO_Init+0x334>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <HAL_GPIO_Init+0x334>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d8:	4a12      	ldr	r2, [pc, #72]	@ (8003624 <HAL_GPIO_Init+0x334>)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3301      	adds	r3, #1
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b0f      	cmp	r3, #15
 80035e8:	f67f ae90 	bls.w	800330c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	3724      	adds	r7, #36	@ 0x24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	40013800 	.word	0x40013800
 8003604:	40020000 	.word	0x40020000
 8003608:	40020400 	.word	0x40020400
 800360c:	40020800 	.word	0x40020800
 8003610:	40020c00 	.word	0x40020c00
 8003614:	40021000 	.word	0x40021000
 8003618:	40021400 	.word	0x40021400
 800361c:	40021800 	.word	0x40021800
 8003620:	40021c00 	.word	0x40021c00
 8003624:	40013c00 	.word	0x40013c00

08003628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	807b      	strh	r3, [r7, #2]
 8003634:	4613      	mov	r3, r2
 8003636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003638:	787b      	ldrb	r3, [r7, #1]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003644:	e003      	b.n	800364e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003646:	887b      	ldrh	r3, [r7, #2]
 8003648:	041a      	lsls	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	619a      	str	r2, [r3, #24]
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e12b      	b.n	80038c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe fb70 	bl	8001d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2224      	movs	r2, #36	@ 0x24
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036c0:	f000 fd7e 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 80036c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4a81      	ldr	r2, [pc, #516]	@ (80038d0 <HAL_I2C_Init+0x274>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d807      	bhi.n	80036e0 <HAL_I2C_Init+0x84>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a80      	ldr	r2, [pc, #512]	@ (80038d4 <HAL_I2C_Init+0x278>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	bf94      	ite	ls
 80036d8:	2301      	movls	r3, #1
 80036da:	2300      	movhi	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e006      	b.n	80036ee <HAL_I2C_Init+0x92>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a7d      	ldr	r2, [pc, #500]	@ (80038d8 <HAL_I2C_Init+0x27c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	bf94      	ite	ls
 80036e8:	2301      	movls	r3, #1
 80036ea:	2300      	movhi	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e0e7      	b.n	80038c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4a78      	ldr	r2, [pc, #480]	@ (80038dc <HAL_I2C_Init+0x280>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	0c9b      	lsrs	r3, r3, #18
 8003700:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a6a      	ldr	r2, [pc, #424]	@ (80038d0 <HAL_I2C_Init+0x274>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d802      	bhi.n	8003730 <HAL_I2C_Init+0xd4>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	3301      	adds	r3, #1
 800372e:	e009      	b.n	8003744 <HAL_I2C_Init+0xe8>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	4a69      	ldr	r2, [pc, #420]	@ (80038e0 <HAL_I2C_Init+0x284>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	3301      	adds	r3, #1
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	430b      	orrs	r3, r1
 800374a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003756:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	495c      	ldr	r1, [pc, #368]	@ (80038d0 <HAL_I2C_Init+0x274>)
 8003760:	428b      	cmp	r3, r1
 8003762:	d819      	bhi.n	8003798 <HAL_I2C_Init+0x13c>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1e59      	subs	r1, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003772:	1c59      	adds	r1, r3, #1
 8003774:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003778:	400b      	ands	r3, r1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_I2C_Init+0x138>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1e59      	subs	r1, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fbb1 f3f3 	udiv	r3, r1, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003792:	e051      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 8003794:	2304      	movs	r3, #4
 8003796:	e04f      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d111      	bne.n	80037c4 <HAL_I2C_Init+0x168>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1e58      	subs	r0, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	440b      	add	r3, r1
 80037ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e012      	b.n	80037ea <HAL_I2C_Init+0x18e>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1e58      	subs	r0, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	0099      	lsls	r1, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Init+0x196>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e022      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10e      	bne.n	8003818 <HAL_I2C_Init+0x1bc>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1e58      	subs	r0, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	440b      	add	r3, r1
 8003808:	fbb0 f3f3 	udiv	r3, r0, r3
 800380c:	3301      	adds	r3, #1
 800380e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003816:	e00f      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1e58      	subs	r0, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6859      	ldr	r1, [r3, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	0099      	lsls	r1, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	fbb0 f3f3 	udiv	r3, r0, r3
 800382e:	3301      	adds	r3, #1
 8003830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003834:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	6809      	ldr	r1, [r1, #0]
 800383c:	4313      	orrs	r3, r2
 800383e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003866:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6911      	ldr	r1, [r2, #16]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68d2      	ldr	r2, [r2, #12]
 8003872:	4311      	orrs	r1, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	000186a0 	.word	0x000186a0
 80038d4:	001e847f 	.word	0x001e847f
 80038d8:	003d08ff 	.word	0x003d08ff
 80038dc:	431bde83 	.word	0x431bde83
 80038e0:	10624dd3 	.word	0x10624dd3

080038e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e267      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d075      	beq.n	80039ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003902:	4b88      	ldr	r3, [pc, #544]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b04      	cmp	r3, #4
 800390c:	d00c      	beq.n	8003928 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800390e:	4b85      	ldr	r3, [pc, #532]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003916:	2b08      	cmp	r3, #8
 8003918:	d112      	bne.n	8003940 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391a:	4b82      	ldr	r3, [pc, #520]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003926:	d10b      	bne.n	8003940 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	4b7e      	ldr	r3, [pc, #504]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d05b      	beq.n	80039ec <HAL_RCC_OscConfig+0x108>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d157      	bne.n	80039ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e242      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003948:	d106      	bne.n	8003958 <HAL_RCC_OscConfig+0x74>
 800394a:	4b76      	ldr	r3, [pc, #472]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a75      	ldr	r2, [pc, #468]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e01d      	b.n	8003994 <HAL_RCC_OscConfig+0xb0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003960:	d10c      	bne.n	800397c <HAL_RCC_OscConfig+0x98>
 8003962:	4b70      	ldr	r3, [pc, #448]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a6f      	ldr	r2, [pc, #444]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a6c      	ldr	r2, [pc, #432]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e00b      	b.n	8003994 <HAL_RCC_OscConfig+0xb0>
 800397c:	4b69      	ldr	r3, [pc, #420]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a68      	ldr	r2, [pc, #416]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4b66      	ldr	r3, [pc, #408]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a65      	ldr	r2, [pc, #404]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 800398e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fe fc6c 	bl	8002278 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a4:	f7fe fc68 	bl	8002278 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	@ 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e207      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0xc0>
 80039c2:	e014      	b.n	80039ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fe fc58 	bl	8002278 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039cc:	f7fe fc54 	bl	8002278 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	@ 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e1f3      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039de:	4b51      	ldr	r3, [pc, #324]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0xe8>
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d063      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a06:	4b47      	ldr	r3, [pc, #284]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d11c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a12:	4b44      	ldr	r3, [pc, #272]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d116      	bne.n	8003a4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1e:	4b41      	ldr	r3, [pc, #260]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_RCC_OscConfig+0x152>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e1c7      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a36:	4b3b      	ldr	r3, [pc, #236]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4937      	ldr	r1, [pc, #220]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4a:	e03a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d020      	beq.n	8003a96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a54:	4b34      	ldr	r3, [pc, #208]	@ (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5a:	f7fe fc0d 	bl	8002278 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a62:	f7fe fc09 	bl	8002278 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e1a8      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a74:	4b2b      	ldr	r3, [pc, #172]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a80:	4b28      	ldr	r3, [pc, #160]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4925      	ldr	r1, [pc, #148]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	600b      	str	r3, [r1, #0]
 8003a94:	e015      	b.n	8003ac2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a96:	4b24      	ldr	r3, [pc, #144]	@ (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fbec 	bl	8002278 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa4:	f7fe fbe8 	bl	8002278 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e187      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d036      	beq.n	8003b3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d016      	beq.n	8003b04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad6:	4b15      	ldr	r3, [pc, #84]	@ (8003b2c <HAL_RCC_OscConfig+0x248>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003adc:	f7fe fbcc 	bl	8002278 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae4:	f7fe fbc8 	bl	8002278 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e167      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <HAL_RCC_OscConfig+0x240>)
 8003af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x200>
 8003b02:	e01b      	b.n	8003b3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b04:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <HAL_RCC_OscConfig+0x248>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0a:	f7fe fbb5 	bl	8002278 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b10:	e00e      	b.n	8003b30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b12:	f7fe fbb1 	bl	8002278 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d907      	bls.n	8003b30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e150      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
 8003b24:	40023800 	.word	0x40023800
 8003b28:	42470000 	.word	0x42470000
 8003b2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b30:	4b88      	ldr	r3, [pc, #544]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1ea      	bne.n	8003b12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8097 	beq.w	8003c78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4e:	4b81      	ldr	r3, [pc, #516]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10f      	bne.n	8003b7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b62:	4a7c      	ldr	r2, [pc, #496]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b76:	2301      	movs	r3, #1
 8003b78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7a:	4b77      	ldr	r3, [pc, #476]	@ (8003d58 <HAL_RCC_OscConfig+0x474>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d118      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b86:	4b74      	ldr	r3, [pc, #464]	@ (8003d58 <HAL_RCC_OscConfig+0x474>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a73      	ldr	r2, [pc, #460]	@ (8003d58 <HAL_RCC_OscConfig+0x474>)
 8003b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b92:	f7fe fb71 	bl	8002278 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9a:	f7fe fb6d 	bl	8002278 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e10c      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	4b6a      	ldr	r3, [pc, #424]	@ (8003d58 <HAL_RCC_OscConfig+0x474>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x2ea>
 8003bc0:	4b64      	ldr	r3, [pc, #400]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	4a63      	ldr	r2, [pc, #396]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bcc:	e01c      	b.n	8003c08 <HAL_RCC_OscConfig+0x324>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b05      	cmp	r3, #5
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x30c>
 8003bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bda:	4a5e      	ldr	r2, [pc, #376]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	f043 0304 	orr.w	r3, r3, #4
 8003be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bee:	e00b      	b.n	8003c08 <HAL_RCC_OscConfig+0x324>
 8003bf0:	4b58      	ldr	r3, [pc, #352]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf4:	4a57      	ldr	r2, [pc, #348]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bfc:	4b55      	ldr	r3, [pc, #340]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c00:	4a54      	ldr	r2, [pc, #336]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003c02:	f023 0304 	bic.w	r3, r3, #4
 8003c06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d015      	beq.n	8003c3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fe fb32 	bl	8002278 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c18:	f7fe fb2e 	bl	8002278 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e0cb      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2e:	4b49      	ldr	r3, [pc, #292]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0ee      	beq.n	8003c18 <HAL_RCC_OscConfig+0x334>
 8003c3a:	e014      	b.n	8003c66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3c:	f7fe fb1c 	bl	8002278 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c44:	f7fe fb18 	bl	8002278 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e0b5      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1ee      	bne.n	8003c44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d105      	bne.n	8003c78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6c:	4b39      	ldr	r3, [pc, #228]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	4a38      	ldr	r2, [pc, #224]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80a1 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c82:	4b34      	ldr	r3, [pc, #208]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d05c      	beq.n	8003d48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d141      	bne.n	8003d1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c96:	4b31      	ldr	r3, [pc, #196]	@ (8003d5c <HAL_RCC_OscConfig+0x478>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9c:	f7fe faec 	bl	8002278 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7fe fae8 	bl	8002278 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e087      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb6:	4b27      	ldr	r3, [pc, #156]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69da      	ldr	r2, [r3, #28]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	019b      	lsls	r3, r3, #6
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	041b      	lsls	r3, r3, #16
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	491b      	ldr	r1, [pc, #108]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cec:	4b1b      	ldr	r3, [pc, #108]	@ (8003d5c <HAL_RCC_OscConfig+0x478>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf2:	f7fe fac1 	bl	8002278 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfa:	f7fe fabd 	bl	8002278 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e05c      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0c:	4b11      	ldr	r3, [pc, #68]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x416>
 8003d18:	e054      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1a:	4b10      	ldr	r3, [pc, #64]	@ (8003d5c <HAL_RCC_OscConfig+0x478>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d20:	f7fe faaa 	bl	8002278 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d28:	f7fe faa6 	bl	8002278 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e045      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3a:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x444>
 8003d46:	e03d      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d107      	bne.n	8003d60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e038      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d60:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd0 <HAL_RCC_OscConfig+0x4ec>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d028      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d121      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d11a      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d90:	4013      	ands	r3, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d111      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da6:	085b      	lsrs	r3, r3, #1
 8003da8:	3b01      	subs	r3, #1
 8003daa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d107      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800

08003dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0cc      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b68      	ldr	r3, [pc, #416]	@ (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d90c      	bls.n	8003e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b65      	ldr	r3, [pc, #404]	@ (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b63      	ldr	r3, [pc, #396]	@ (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0b8      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d020      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e28:	4b59      	ldr	r3, [pc, #356]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4a58      	ldr	r2, [pc, #352]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e40:	4b53      	ldr	r3, [pc, #332]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4a52      	ldr	r2, [pc, #328]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e4c:	4b50      	ldr	r3, [pc, #320]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	494d      	ldr	r1, [pc, #308]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d044      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e72:	4b47      	ldr	r3, [pc, #284]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d119      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e07f      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d003      	beq.n	8003e92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	4b3f      	ldr	r3, [pc, #252]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e06f      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e067      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eb2:	4b37      	ldr	r3, [pc, #220]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f023 0203 	bic.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4934      	ldr	r1, [pc, #208]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec4:	f7fe f9d8 	bl	8002278 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ecc:	f7fe f9d4 	bl	8002278 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e04f      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 020c 	and.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d1eb      	bne.n	8003ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef4:	4b25      	ldr	r3, [pc, #148]	@ (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d20c      	bcs.n	8003f1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f02:	4b22      	ldr	r3, [pc, #136]	@ (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0a:	4b20      	ldr	r3, [pc, #128]	@ (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e032      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f28:	4b19      	ldr	r3, [pc, #100]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4916      	ldr	r1, [pc, #88]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f46:	4b12      	ldr	r3, [pc, #72]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	490e      	ldr	r1, [pc, #56]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f5a:	f000 f821 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	490a      	ldr	r1, [pc, #40]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f6c:	5ccb      	ldrb	r3, [r1, r3]
 8003f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f72:	4a09      	ldr	r2, [pc, #36]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f76:	4b09      	ldr	r3, [pc, #36]	@ (8003f9c <HAL_RCC_ClockConfig+0x1c8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe f938 	bl	80021f0 <HAL_InitTick>

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40023c00 	.word	0x40023c00
 8003f90:	40023800 	.word	0x40023800
 8003f94:	0800a10c 	.word	0x0800a10c
 8003f98:	200000e4 	.word	0x200000e4
 8003f9c:	200000e8 	.word	0x200000e8

08003fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa4:	b094      	sub	sp, #80	@ 0x50
 8003fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fb8:	4b79      	ldr	r3, [pc, #484]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d00d      	beq.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	f200 80e1 	bhi.w	800418c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d003      	beq.n	8003fda <HAL_RCC_GetSysClockFreq+0x3a>
 8003fd2:	e0db      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fd4:	4b73      	ldr	r3, [pc, #460]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fd8:	e0db      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fda:	4b72      	ldr	r3, [pc, #456]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fde:	e0d8      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fe8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fea:	4b6d      	ldr	r3, [pc, #436]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d063      	beq.n	80040be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	099b      	lsrs	r3, r3, #6
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004000:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004008:	633b      	str	r3, [r7, #48]	@ 0x30
 800400a:	2300      	movs	r3, #0
 800400c:	637b      	str	r3, [r7, #52]	@ 0x34
 800400e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004012:	4622      	mov	r2, r4
 8004014:	462b      	mov	r3, r5
 8004016:	f04f 0000 	mov.w	r0, #0
 800401a:	f04f 0100 	mov.w	r1, #0
 800401e:	0159      	lsls	r1, r3, #5
 8004020:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004024:	0150      	lsls	r0, r2, #5
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4621      	mov	r1, r4
 800402c:	1a51      	subs	r1, r2, r1
 800402e:	6139      	str	r1, [r7, #16]
 8004030:	4629      	mov	r1, r5
 8004032:	eb63 0301 	sbc.w	r3, r3, r1
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004044:	4659      	mov	r1, fp
 8004046:	018b      	lsls	r3, r1, #6
 8004048:	4651      	mov	r1, sl
 800404a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800404e:	4651      	mov	r1, sl
 8004050:	018a      	lsls	r2, r1, #6
 8004052:	4651      	mov	r1, sl
 8004054:	ebb2 0801 	subs.w	r8, r2, r1
 8004058:	4659      	mov	r1, fp
 800405a:	eb63 0901 	sbc.w	r9, r3, r1
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800406a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800406e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004072:	4690      	mov	r8, r2
 8004074:	4699      	mov	r9, r3
 8004076:	4623      	mov	r3, r4
 8004078:	eb18 0303 	adds.w	r3, r8, r3
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	462b      	mov	r3, r5
 8004080:	eb49 0303 	adc.w	r3, r9, r3
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004092:	4629      	mov	r1, r5
 8004094:	028b      	lsls	r3, r1, #10
 8004096:	4621      	mov	r1, r4
 8004098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800409c:	4621      	mov	r1, r4
 800409e:	028a      	lsls	r2, r1, #10
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a6:	2200      	movs	r2, #0
 80040a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040b0:	f7fc fdea 	bl	8000c88 <__aeabi_uldivmod>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4613      	mov	r3, r2
 80040ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040bc:	e058      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040be:	4b38      	ldr	r3, [pc, #224]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	099b      	lsrs	r3, r3, #6
 80040c4:	2200      	movs	r2, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	4611      	mov	r1, r2
 80040ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040ce:	623b      	str	r3, [r7, #32]
 80040d0:	2300      	movs	r3, #0
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040d8:	4642      	mov	r2, r8
 80040da:	464b      	mov	r3, r9
 80040dc:	f04f 0000 	mov.w	r0, #0
 80040e0:	f04f 0100 	mov.w	r1, #0
 80040e4:	0159      	lsls	r1, r3, #5
 80040e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ea:	0150      	lsls	r0, r2, #5
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4641      	mov	r1, r8
 80040f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80040f6:	4649      	mov	r1, r9
 80040f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004108:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800410c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004110:	ebb2 040a 	subs.w	r4, r2, sl
 8004114:	eb63 050b 	sbc.w	r5, r3, fp
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	00eb      	lsls	r3, r5, #3
 8004122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004126:	00e2      	lsls	r2, r4, #3
 8004128:	4614      	mov	r4, r2
 800412a:	461d      	mov	r5, r3
 800412c:	4643      	mov	r3, r8
 800412e:	18e3      	adds	r3, r4, r3
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	464b      	mov	r3, r9
 8004134:	eb45 0303 	adc.w	r3, r5, r3
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004146:	4629      	mov	r1, r5
 8004148:	028b      	lsls	r3, r1, #10
 800414a:	4621      	mov	r1, r4
 800414c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004150:	4621      	mov	r1, r4
 8004152:	028a      	lsls	r2, r1, #10
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800415a:	2200      	movs	r2, #0
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	61fa      	str	r2, [r7, #28]
 8004160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004164:	f7fc fd90 	bl	8000c88 <__aeabi_uldivmod>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4613      	mov	r3, r2
 800416e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004170:	4b0b      	ldr	r3, [pc, #44]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	3301      	adds	r3, #1
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004180:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800418a:	e002      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800418e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004194:	4618      	mov	r0, r3
 8004196:	3750      	adds	r7, #80	@ 0x50
 8004198:	46bd      	mov	sp, r7
 800419a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800
 80041a4:	00f42400 	.word	0x00f42400

080041a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ac:	4b03      	ldr	r3, [pc, #12]	@ (80041bc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ae:	681b      	ldr	r3, [r3, #0]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	200000e4 	.word	0x200000e4

080041c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041c4:	f7ff fff0 	bl	80041a8 <HAL_RCC_GetHCLKFreq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4b05      	ldr	r3, [pc, #20]	@ (80041e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	0a9b      	lsrs	r3, r3, #10
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	4903      	ldr	r1, [pc, #12]	@ (80041e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d6:	5ccb      	ldrb	r3, [r1, r3]
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041dc:	4618      	mov	r0, r3
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40023800 	.word	0x40023800
 80041e4:	0800a11c 	.word	0x0800a11c

080041e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041ec:	f7ff ffdc 	bl	80041a8 <HAL_RCC_GetHCLKFreq>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	0b5b      	lsrs	r3, r3, #13
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	4903      	ldr	r1, [pc, #12]	@ (800420c <HAL_RCC_GetPCLK2Freq+0x24>)
 80041fe:	5ccb      	ldrb	r3, [r1, r3]
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004204:	4618      	mov	r0, r3
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40023800 	.word	0x40023800
 800420c:	0800a11c 	.word	0x0800a11c

08004210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e041      	b.n	80042a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fd fdde 	bl	8001df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3304      	adds	r3, #4
 800424c:	4619      	mov	r1, r3
 800424e:	4610      	mov	r0, r2
 8004250:	f000 f95e 	bl	8004510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d001      	beq.n	80042c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e046      	b.n	8004356 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a23      	ldr	r2, [pc, #140]	@ (8004364 <HAL_TIM_Base_Start+0xb4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d022      	beq.n	8004320 <HAL_TIM_Base_Start+0x70>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e2:	d01d      	beq.n	8004320 <HAL_TIM_Base_Start+0x70>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004368 <HAL_TIM_Base_Start+0xb8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d018      	beq.n	8004320 <HAL_TIM_Base_Start+0x70>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1e      	ldr	r2, [pc, #120]	@ (800436c <HAL_TIM_Base_Start+0xbc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d013      	beq.n	8004320 <HAL_TIM_Base_Start+0x70>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004370 <HAL_TIM_Base_Start+0xc0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00e      	beq.n	8004320 <HAL_TIM_Base_Start+0x70>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1b      	ldr	r2, [pc, #108]	@ (8004374 <HAL_TIM_Base_Start+0xc4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d009      	beq.n	8004320 <HAL_TIM_Base_Start+0x70>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a19      	ldr	r2, [pc, #100]	@ (8004378 <HAL_TIM_Base_Start+0xc8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_TIM_Base_Start+0x70>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a18      	ldr	r2, [pc, #96]	@ (800437c <HAL_TIM_Base_Start+0xcc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d111      	bne.n	8004344 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b06      	cmp	r3, #6
 8004330:	d010      	beq.n	8004354 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0201 	orr.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004342:	e007      	b.n	8004354 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40010000 	.word	0x40010000
 8004368:	40000400 	.word	0x40000400
 800436c:	40000800 	.word	0x40000800
 8004370:	40000c00 	.word	0x40000c00
 8004374:	40010400 	.word	0x40010400
 8004378:	40014000 	.word	0x40014000
 800437c:	40001800 	.word	0x40001800

08004380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_TIM_ConfigClockSource+0x1c>
 8004398:	2302      	movs	r3, #2
 800439a:	e0b4      	b.n	8004506 <HAL_TIM_ConfigClockSource+0x186>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d4:	d03e      	beq.n	8004454 <HAL_TIM_ConfigClockSource+0xd4>
 80043d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043da:	f200 8087 	bhi.w	80044ec <HAL_TIM_ConfigClockSource+0x16c>
 80043de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e2:	f000 8086 	beq.w	80044f2 <HAL_TIM_ConfigClockSource+0x172>
 80043e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ea:	d87f      	bhi.n	80044ec <HAL_TIM_ConfigClockSource+0x16c>
 80043ec:	2b70      	cmp	r3, #112	@ 0x70
 80043ee:	d01a      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0xa6>
 80043f0:	2b70      	cmp	r3, #112	@ 0x70
 80043f2:	d87b      	bhi.n	80044ec <HAL_TIM_ConfigClockSource+0x16c>
 80043f4:	2b60      	cmp	r3, #96	@ 0x60
 80043f6:	d050      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x11a>
 80043f8:	2b60      	cmp	r3, #96	@ 0x60
 80043fa:	d877      	bhi.n	80044ec <HAL_TIM_ConfigClockSource+0x16c>
 80043fc:	2b50      	cmp	r3, #80	@ 0x50
 80043fe:	d03c      	beq.n	800447a <HAL_TIM_ConfigClockSource+0xfa>
 8004400:	2b50      	cmp	r3, #80	@ 0x50
 8004402:	d873      	bhi.n	80044ec <HAL_TIM_ConfigClockSource+0x16c>
 8004404:	2b40      	cmp	r3, #64	@ 0x40
 8004406:	d058      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x13a>
 8004408:	2b40      	cmp	r3, #64	@ 0x40
 800440a:	d86f      	bhi.n	80044ec <HAL_TIM_ConfigClockSource+0x16c>
 800440c:	2b30      	cmp	r3, #48	@ 0x30
 800440e:	d064      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x15a>
 8004410:	2b30      	cmp	r3, #48	@ 0x30
 8004412:	d86b      	bhi.n	80044ec <HAL_TIM_ConfigClockSource+0x16c>
 8004414:	2b20      	cmp	r3, #32
 8004416:	d060      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x15a>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d867      	bhi.n	80044ec <HAL_TIM_ConfigClockSource+0x16c>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d05c      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x15a>
 8004420:	2b10      	cmp	r3, #16
 8004422:	d05a      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x15a>
 8004424:	e062      	b.n	80044ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004436:	f000 f991 	bl	800475c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004448:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	609a      	str	r2, [r3, #8]
      break;
 8004452:	e04f      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004464:	f000 f97a 	bl	800475c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004476:	609a      	str	r2, [r3, #8]
      break;
 8004478:	e03c      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004486:	461a      	mov	r2, r3
 8004488:	f000 f8ee 	bl	8004668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2150      	movs	r1, #80	@ 0x50
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f947 	bl	8004726 <TIM_ITRx_SetConfig>
      break;
 8004498:	e02c      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044a6:	461a      	mov	r2, r3
 80044a8:	f000 f90d 	bl	80046c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2160      	movs	r1, #96	@ 0x60
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f937 	bl	8004726 <TIM_ITRx_SetConfig>
      break;
 80044b8:	e01c      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c6:	461a      	mov	r2, r3
 80044c8:	f000 f8ce 	bl	8004668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2140      	movs	r1, #64	@ 0x40
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f927 	bl	8004726 <TIM_ITRx_SetConfig>
      break;
 80044d8:	e00c      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4619      	mov	r1, r3
 80044e4:	4610      	mov	r0, r2
 80044e6:	f000 f91e 	bl	8004726 <TIM_ITRx_SetConfig>
      break;
 80044ea:	e003      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
      break;
 80044f0:	e000      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a46      	ldr	r2, [pc, #280]	@ (800463c <TIM_Base_SetConfig+0x12c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d013      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452e:	d00f      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a43      	ldr	r2, [pc, #268]	@ (8004640 <TIM_Base_SetConfig+0x130>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00b      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a42      	ldr	r2, [pc, #264]	@ (8004644 <TIM_Base_SetConfig+0x134>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d007      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a41      	ldr	r2, [pc, #260]	@ (8004648 <TIM_Base_SetConfig+0x138>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a40      	ldr	r2, [pc, #256]	@ (800464c <TIM_Base_SetConfig+0x13c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d108      	bne.n	8004562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a35      	ldr	r2, [pc, #212]	@ (800463c <TIM_Base_SetConfig+0x12c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d02b      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004570:	d027      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a32      	ldr	r2, [pc, #200]	@ (8004640 <TIM_Base_SetConfig+0x130>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d023      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a31      	ldr	r2, [pc, #196]	@ (8004644 <TIM_Base_SetConfig+0x134>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d01f      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a30      	ldr	r2, [pc, #192]	@ (8004648 <TIM_Base_SetConfig+0x138>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01b      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2f      	ldr	r2, [pc, #188]	@ (800464c <TIM_Base_SetConfig+0x13c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d017      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2e      	ldr	r2, [pc, #184]	@ (8004650 <TIM_Base_SetConfig+0x140>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2d      	ldr	r2, [pc, #180]	@ (8004654 <TIM_Base_SetConfig+0x144>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00f      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004658 <TIM_Base_SetConfig+0x148>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00b      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a2b      	ldr	r2, [pc, #172]	@ (800465c <TIM_Base_SetConfig+0x14c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d007      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004660 <TIM_Base_SetConfig+0x150>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a29      	ldr	r2, [pc, #164]	@ (8004664 <TIM_Base_SetConfig+0x154>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d108      	bne.n	80045d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a10      	ldr	r2, [pc, #64]	@ (800463c <TIM_Base_SetConfig+0x12c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_Base_SetConfig+0xf8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a12      	ldr	r2, [pc, #72]	@ (800464c <TIM_Base_SetConfig+0x13c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b01      	cmp	r3, #1
 8004620:	d105      	bne.n	800462e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f023 0201 	bic.w	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	611a      	str	r2, [r3, #16]
  }
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40000c00 	.word	0x40000c00
 800464c:	40010400 	.word	0x40010400
 8004650:	40014000 	.word	0x40014000
 8004654:	40014400 	.word	0x40014400
 8004658:	40014800 	.word	0x40014800
 800465c:	40001800 	.word	0x40001800
 8004660:	40001c00 	.word	0x40001c00
 8004664:	40002000 	.word	0x40002000

08004668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f023 0201 	bic.w	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f023 030a 	bic.w	r3, r3, #10
 80046a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	621a      	str	r2, [r3, #32]
}
 80046ba:	bf00      	nop
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b087      	sub	sp, #28
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	f023 0210 	bic.w	r2, r3, #16
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	031b      	lsls	r3, r3, #12
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004702:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004726:	b480      	push	{r7}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	f043 0307 	orr.w	r3, r3, #7
 8004748:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	609a      	str	r2, [r3, #8]
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004776:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	021a      	lsls	r2, r3, #8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	431a      	orrs	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4313      	orrs	r3, r2
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	609a      	str	r2, [r3, #8]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e05a      	b.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a21      	ldr	r2, [pc, #132]	@ (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d022      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004800:	d01d      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1d      	ldr	r2, [pc, #116]	@ (800487c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d018      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1b      	ldr	r2, [pc, #108]	@ (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1a      	ldr	r2, [pc, #104]	@ (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00e      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a18      	ldr	r2, [pc, #96]	@ (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d009      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a17      	ldr	r2, [pc, #92]	@ (800488c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d004      	beq.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a15      	ldr	r2, [pc, #84]	@ (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d10c      	bne.n	8004858 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004844:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	4313      	orrs	r3, r2
 800484e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40010000 	.word	0x40010000
 800487c:	40000400 	.word	0x40000400
 8004880:	40000800 	.word	0x40000800
 8004884:	40000c00 	.word	0x40000c00
 8004888:	40010400 	.word	0x40010400
 800488c:	40014000 	.word	0x40014000
 8004890:	40001800 	.word	0x40001800

08004894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e042      	b.n	800492c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fd fabe 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2224      	movs	r2, #36	@ 0x24
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fd11 	bl	8005300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800490c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08c      	sub	sp, #48	@ 0x30
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b20      	cmp	r3, #32
 800494c:	d14a      	bne.n	80049e4 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004954:	88fb      	ldrh	r3, [r7, #6]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e043      	b.n	80049e6 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	461a      	mov	r2, r3
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 faed 	bl	8004f50 <UART_Start_Receive_IT>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800497c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004980:	2b00      	cmp	r3, #0
 8004982:	d12c      	bne.n	80049de <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004988:	2b01      	cmp	r3, #1
 800498a:	d125      	bne.n	80049d8 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800498c:	2300      	movs	r3, #0
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	617b      	str	r3, [r7, #20]
   return(result);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f043 0310 	orr.w	r3, r3, #16
 80049b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80049c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6a39      	ldr	r1, [r7, #32]
 80049c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e5      	bne.n	80049a2 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80049d6:	e002      	b.n	80049de <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80049de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80049e2:	e000      	b.n	80049e6 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80049e4:	2302      	movs	r3, #2
  }
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3730      	adds	r7, #48	@ 0x30
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b0ba      	sub	sp, #232	@ 0xe8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10f      	bne.n	8004a56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <HAL_UART_IRQHandler+0x66>
 8004a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fb97 	bl	8005182 <UART_Receive_IT>
      return;
 8004a54:	e25b      	b.n	8004f0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 80de 	beq.w	8004c1c <HAL_UART_IRQHandler+0x22c>
 8004a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d106      	bne.n	8004a7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80d1 	beq.w	8004c1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00b      	beq.n	8004a9e <HAL_UART_IRQHandler+0xae>
 8004a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a96:	f043 0201 	orr.w	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_UART_IRQHandler+0xd2>
 8004aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aba:	f043 0202 	orr.w	r2, r3, #2
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xf6>
 8004ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ade:	f043 0204 	orr.w	r2, r3, #4
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d011      	beq.n	8004b16 <HAL_UART_IRQHandler+0x126>
 8004af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d105      	bne.n	8004b0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0e:	f043 0208 	orr.w	r2, r3, #8
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 81f2 	beq.w	8004f04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_UART_IRQHandler+0x14e>
 8004b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fb22 	bl	8005182 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b48:	2b40      	cmp	r3, #64	@ 0x40
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d103      	bne.n	8004b6a <HAL_UART_IRQHandler+0x17a>
 8004b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d04f      	beq.n	8004c0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fa2a 	bl	8004fc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7a:	2b40      	cmp	r3, #64	@ 0x40
 8004b7c:	d141      	bne.n	8004c02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3314      	adds	r3, #20
 8004b84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3314      	adds	r3, #20
 8004ba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004baa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004bae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1d9      	bne.n	8004b7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d013      	beq.n	8004bfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8004dd0 <HAL_UART_IRQHandler+0x3e0>)
 8004bd8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fe fb63 	bl	80032aa <HAL_DMA_Abort_IT>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d016      	beq.n	8004c18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf8:	e00e      	b.n	8004c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f99e 	bl	8004f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c00:	e00a      	b.n	8004c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f99a 	bl	8004f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c08:	e006      	b.n	8004c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f996 	bl	8004f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c16:	e175      	b.n	8004f04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c18:	bf00      	nop
    return;
 8004c1a:	e173      	b.n	8004f04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	f040 814f 	bne.w	8004ec4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8148 	beq.w	8004ec4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8141 	beq.w	8004ec4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c62:	2b40      	cmp	r3, #64	@ 0x40
 8004c64:	f040 80b6 	bne.w	8004dd4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8145 	beq.w	8004f08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c86:	429a      	cmp	r2, r3
 8004c88:	f080 813e 	bcs.w	8004f08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c92:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c9e:	f000 8088 	beq.w	8004db2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004cce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004cda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1d9      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3314      	adds	r3, #20
 8004cf4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004cfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3314      	adds	r3, #20
 8004d0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e1      	bne.n	8004cee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3314      	adds	r3, #20
 8004d30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3314      	adds	r3, #20
 8004d4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e3      	bne.n	8004d2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	330c      	adds	r3, #12
 8004d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d82:	f023 0310 	bic.w	r3, r3, #16
 8004d86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	330c      	adds	r3, #12
 8004d90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d9c:	e841 2300 	strex	r3, r2, [r1]
 8004da0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e3      	bne.n	8004d70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fe fa0c 	bl	80031ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7fc fed5 	bl	8001b78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dce:	e09b      	b.n	8004f08 <HAL_UART_IRQHandler+0x518>
 8004dd0:	0800508b 	.word	0x0800508b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 808e 	beq.w	8004f0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004df0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8089 	beq.w	8004f0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e3      	bne.n	8004dfa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3314      	adds	r3, #20
 8004e38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	623b      	str	r3, [r7, #32]
   return(result);
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3314      	adds	r3, #20
 8004e52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e56:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e3      	bne.n	8004e32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	e853 3f00 	ldrex	r3, [r3]
 8004e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0310 	bic.w	r3, r3, #16
 8004e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	330c      	adds	r3, #12
 8004e98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e9c:	61fa      	str	r2, [r7, #28]
 8004e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	69b9      	ldr	r1, [r7, #24]
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e3      	bne.n	8004e78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004eba:	4619      	mov	r1, r3
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7fc fe5b 	bl	8001b78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ec2:	e023      	b.n	8004f0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x4f4>
 8004ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f8e8 	bl	80050b2 <UART_Transmit_IT>
    return;
 8004ee2:	e014      	b.n	8004f0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00e      	beq.n	8004f0e <HAL_UART_IRQHandler+0x51e>
 8004ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f928 	bl	8005152 <UART_EndTransmit_IT>
    return;
 8004f02:	e004      	b.n	8004f0e <HAL_UART_IRQHandler+0x51e>
    return;
 8004f04:	bf00      	nop
 8004f06:	e002      	b.n	8004f0e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f08:	bf00      	nop
 8004f0a:	e000      	b.n	8004f0e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f0c:	bf00      	nop
  }
}
 8004f0e:	37e8      	adds	r7, #232	@ 0xe8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	88fa      	ldrh	r2, [r7, #6]
 8004f68:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	88fa      	ldrh	r2, [r7, #6]
 8004f6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2222      	movs	r2, #34	@ 0x22
 8004f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f94:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0201 	orr.w	r2, r2, #1
 8004fa4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0220 	orr.w	r2, r2, #32
 8004fb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b095      	sub	sp, #84	@ 0x54
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	330c      	adds	r3, #12
 8004fea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fec:	643a      	str	r2, [r7, #64]	@ 0x40
 8004fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ff2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e5      	bne.n	8004fcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3314      	adds	r3, #20
 8005006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3314      	adds	r3, #20
 800501e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005020:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005022:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e5      	bne.n	8005000 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005038:	2b01      	cmp	r3, #1
 800503a:	d119      	bne.n	8005070 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	60bb      	str	r3, [r7, #8]
   return(result);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f023 0310 	bic.w	r3, r3, #16
 8005052:	647b      	str	r3, [r7, #68]	@ 0x44
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800505c:	61ba      	str	r2, [r7, #24]
 800505e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6979      	ldr	r1, [r7, #20]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	613b      	str	r3, [r7, #16]
   return(result);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e5      	bne.n	800503c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800507e:	bf00      	nop
 8005080:	3754      	adds	r7, #84	@ 0x54
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005096:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff ff49 	bl	8004f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b21      	cmp	r3, #33	@ 0x21
 80050c4:	d13e      	bne.n	8005144 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ce:	d114      	bne.n	80050fa <UART_Transmit_IT+0x48>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d110      	bne.n	80050fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	1c9a      	adds	r2, r3, #2
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	621a      	str	r2, [r3, #32]
 80050f8:	e008      	b.n	800510c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	1c59      	adds	r1, r3, #1
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6211      	str	r1, [r2, #32]
 8005104:	781a      	ldrb	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29b      	uxth	r3, r3
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4619      	mov	r1, r3
 800511a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10f      	bne.n	8005140 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800512e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800513e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	e000      	b.n	8005146 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005144:	2302      	movs	r3, #2
  }
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005168:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fece 	bl	8004f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b08c      	sub	sp, #48	@ 0x30
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b22      	cmp	r3, #34	@ 0x22
 8005194:	f040 80ae 	bne.w	80052f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051a0:	d117      	bne.n	80051d2 <UART_Receive_IT+0x50>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d113      	bne.n	80051d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ca:	1c9a      	adds	r2, r3, #2
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80051d0:	e026      	b.n	8005220 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051e4:	d007      	beq.n	80051f6 <UART_Receive_IT+0x74>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <UART_Receive_IT+0x82>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	e008      	b.n	8005216 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005210:	b2da      	uxtb	r2, r3
 8005212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005214:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29b      	uxth	r3, r3
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4619      	mov	r1, r3
 800522e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005230:	2b00      	cmp	r3, #0
 8005232:	d15d      	bne.n	80052f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0220 	bic.w	r2, r2, #32
 8005242:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0201 	bic.w	r2, r2, #1
 8005262:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005276:	2b01      	cmp	r3, #1
 8005278:	d135      	bne.n	80052e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	330c      	adds	r3, #12
 8005286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	613b      	str	r3, [r7, #16]
   return(result);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f023 0310 	bic.w	r3, r3, #16
 8005296:	627b      	str	r3, [r7, #36]	@ 0x24
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a0:	623a      	str	r2, [r7, #32]
 80052a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	69f9      	ldr	r1, [r7, #28]
 80052a6:	6a3a      	ldr	r2, [r7, #32]
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e5      	bne.n	8005280 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2b10      	cmp	r3, #16
 80052c0:	d10a      	bne.n	80052d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052dc:	4619      	mov	r1, r3
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fc fc4a 	bl	8001b78 <HAL_UARTEx_RxEventCallback>
 80052e4:	e002      	b.n	80052ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff fe1e 	bl	8004f28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	e002      	b.n	80052f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e000      	b.n	80052f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80052f4:	2302      	movs	r3, #2
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3730      	adds	r7, #48	@ 0x30
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005304:	b0c0      	sub	sp, #256	@ 0x100
 8005306:	af00      	add	r7, sp, #0
 8005308:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531c:	68d9      	ldr	r1, [r3, #12]
 800531e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	ea40 0301 	orr.w	r3, r0, r1
 8005328:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	431a      	orrs	r2, r3
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	431a      	orrs	r2, r3
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005358:	f021 010c 	bic.w	r1, r1, #12
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005366:	430b      	orrs	r3, r1
 8005368:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537a:	6999      	ldr	r1, [r3, #24]
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	ea40 0301 	orr.w	r3, r0, r1
 8005386:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4b8f      	ldr	r3, [pc, #572]	@ (80055cc <UART_SetConfig+0x2cc>)
 8005390:	429a      	cmp	r2, r3
 8005392:	d005      	beq.n	80053a0 <UART_SetConfig+0xa0>
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b8d      	ldr	r3, [pc, #564]	@ (80055d0 <UART_SetConfig+0x2d0>)
 800539c:	429a      	cmp	r2, r3
 800539e:	d104      	bne.n	80053aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053a0:	f7fe ff22 	bl	80041e8 <HAL_RCC_GetPCLK2Freq>
 80053a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053a8:	e003      	b.n	80053b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053aa:	f7fe ff09 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 80053ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053bc:	f040 810c 	bne.w	80055d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053c4:	2200      	movs	r2, #0
 80053c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053d2:	4622      	mov	r2, r4
 80053d4:	462b      	mov	r3, r5
 80053d6:	1891      	adds	r1, r2, r2
 80053d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053da:	415b      	adcs	r3, r3
 80053dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053e2:	4621      	mov	r1, r4
 80053e4:	eb12 0801 	adds.w	r8, r2, r1
 80053e8:	4629      	mov	r1, r5
 80053ea:	eb43 0901 	adc.w	r9, r3, r1
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	f04f 0300 	mov.w	r3, #0
 80053f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005402:	4690      	mov	r8, r2
 8005404:	4699      	mov	r9, r3
 8005406:	4623      	mov	r3, r4
 8005408:	eb18 0303 	adds.w	r3, r8, r3
 800540c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005410:	462b      	mov	r3, r5
 8005412:	eb49 0303 	adc.w	r3, r9, r3
 8005416:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800541a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005426:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800542a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800542e:	460b      	mov	r3, r1
 8005430:	18db      	adds	r3, r3, r3
 8005432:	653b      	str	r3, [r7, #80]	@ 0x50
 8005434:	4613      	mov	r3, r2
 8005436:	eb42 0303 	adc.w	r3, r2, r3
 800543a:	657b      	str	r3, [r7, #84]	@ 0x54
 800543c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005440:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005444:	f7fb fc20 	bl	8000c88 <__aeabi_uldivmod>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4b61      	ldr	r3, [pc, #388]	@ (80055d4 <UART_SetConfig+0x2d4>)
 800544e:	fba3 2302 	umull	r2, r3, r3, r2
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	011c      	lsls	r4, r3, #4
 8005456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800545a:	2200      	movs	r2, #0
 800545c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005460:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005464:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	1891      	adds	r1, r2, r2
 800546e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005470:	415b      	adcs	r3, r3
 8005472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005474:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005478:	4641      	mov	r1, r8
 800547a:	eb12 0a01 	adds.w	sl, r2, r1
 800547e:	4649      	mov	r1, r9
 8005480:	eb43 0b01 	adc.w	fp, r3, r1
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005490:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005498:	4692      	mov	sl, r2
 800549a:	469b      	mov	fp, r3
 800549c:	4643      	mov	r3, r8
 800549e:	eb1a 0303 	adds.w	r3, sl, r3
 80054a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054a6:	464b      	mov	r3, r9
 80054a8:	eb4b 0303 	adc.w	r3, fp, r3
 80054ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054c4:	460b      	mov	r3, r1
 80054c6:	18db      	adds	r3, r3, r3
 80054c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80054ca:	4613      	mov	r3, r2
 80054cc:	eb42 0303 	adc.w	r3, r2, r3
 80054d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054da:	f7fb fbd5 	bl	8000c88 <__aeabi_uldivmod>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	4b3b      	ldr	r3, [pc, #236]	@ (80055d4 <UART_SetConfig+0x2d4>)
 80054e6:	fba3 2301 	umull	r2, r3, r3, r1
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	2264      	movs	r2, #100	@ 0x64
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	1acb      	subs	r3, r1, r3
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054fa:	4b36      	ldr	r3, [pc, #216]	@ (80055d4 <UART_SetConfig+0x2d4>)
 80054fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005508:	441c      	add	r4, r3
 800550a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800550e:	2200      	movs	r2, #0
 8005510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005514:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005518:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800551c:	4642      	mov	r2, r8
 800551e:	464b      	mov	r3, r9
 8005520:	1891      	adds	r1, r2, r2
 8005522:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005524:	415b      	adcs	r3, r3
 8005526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005528:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800552c:	4641      	mov	r1, r8
 800552e:	1851      	adds	r1, r2, r1
 8005530:	6339      	str	r1, [r7, #48]	@ 0x30
 8005532:	4649      	mov	r1, r9
 8005534:	414b      	adcs	r3, r1
 8005536:	637b      	str	r3, [r7, #52]	@ 0x34
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005544:	4659      	mov	r1, fp
 8005546:	00cb      	lsls	r3, r1, #3
 8005548:	4651      	mov	r1, sl
 800554a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800554e:	4651      	mov	r1, sl
 8005550:	00ca      	lsls	r2, r1, #3
 8005552:	4610      	mov	r0, r2
 8005554:	4619      	mov	r1, r3
 8005556:	4603      	mov	r3, r0
 8005558:	4642      	mov	r2, r8
 800555a:	189b      	adds	r3, r3, r2
 800555c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005560:	464b      	mov	r3, r9
 8005562:	460a      	mov	r2, r1
 8005564:	eb42 0303 	adc.w	r3, r2, r3
 8005568:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005578:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800557c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005580:	460b      	mov	r3, r1
 8005582:	18db      	adds	r3, r3, r3
 8005584:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005586:	4613      	mov	r3, r2
 8005588:	eb42 0303 	adc.w	r3, r2, r3
 800558c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800558e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005592:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005596:	f7fb fb77 	bl	8000c88 <__aeabi_uldivmod>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4b0d      	ldr	r3, [pc, #52]	@ (80055d4 <UART_SetConfig+0x2d4>)
 80055a0:	fba3 1302 	umull	r1, r3, r3, r2
 80055a4:	095b      	lsrs	r3, r3, #5
 80055a6:	2164      	movs	r1, #100	@ 0x64
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	3332      	adds	r3, #50	@ 0x32
 80055b2:	4a08      	ldr	r2, [pc, #32]	@ (80055d4 <UART_SetConfig+0x2d4>)
 80055b4:	fba2 2303 	umull	r2, r3, r2, r3
 80055b8:	095b      	lsrs	r3, r3, #5
 80055ba:	f003 0207 	and.w	r2, r3, #7
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4422      	add	r2, r4
 80055c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055c8:	e106      	b.n	80057d8 <UART_SetConfig+0x4d8>
 80055ca:	bf00      	nop
 80055cc:	40011000 	.word	0x40011000
 80055d0:	40011400 	.word	0x40011400
 80055d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055dc:	2200      	movs	r2, #0
 80055de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055ea:	4642      	mov	r2, r8
 80055ec:	464b      	mov	r3, r9
 80055ee:	1891      	adds	r1, r2, r2
 80055f0:	6239      	str	r1, [r7, #32]
 80055f2:	415b      	adcs	r3, r3
 80055f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055fa:	4641      	mov	r1, r8
 80055fc:	1854      	adds	r4, r2, r1
 80055fe:	4649      	mov	r1, r9
 8005600:	eb43 0501 	adc.w	r5, r3, r1
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	00eb      	lsls	r3, r5, #3
 800560e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005612:	00e2      	lsls	r2, r4, #3
 8005614:	4614      	mov	r4, r2
 8005616:	461d      	mov	r5, r3
 8005618:	4643      	mov	r3, r8
 800561a:	18e3      	adds	r3, r4, r3
 800561c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005620:	464b      	mov	r3, r9
 8005622:	eb45 0303 	adc.w	r3, r5, r3
 8005626:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005636:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005646:	4629      	mov	r1, r5
 8005648:	008b      	lsls	r3, r1, #2
 800564a:	4621      	mov	r1, r4
 800564c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005650:	4621      	mov	r1, r4
 8005652:	008a      	lsls	r2, r1, #2
 8005654:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005658:	f7fb fb16 	bl	8000c88 <__aeabi_uldivmod>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4b60      	ldr	r3, [pc, #384]	@ (80057e4 <UART_SetConfig+0x4e4>)
 8005662:	fba3 2302 	umull	r2, r3, r3, r2
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	011c      	lsls	r4, r3, #4
 800566a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800566e:	2200      	movs	r2, #0
 8005670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005674:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005678:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800567c:	4642      	mov	r2, r8
 800567e:	464b      	mov	r3, r9
 8005680:	1891      	adds	r1, r2, r2
 8005682:	61b9      	str	r1, [r7, #24]
 8005684:	415b      	adcs	r3, r3
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800568c:	4641      	mov	r1, r8
 800568e:	1851      	adds	r1, r2, r1
 8005690:	6139      	str	r1, [r7, #16]
 8005692:	4649      	mov	r1, r9
 8005694:	414b      	adcs	r3, r1
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056a4:	4659      	mov	r1, fp
 80056a6:	00cb      	lsls	r3, r1, #3
 80056a8:	4651      	mov	r1, sl
 80056aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ae:	4651      	mov	r1, sl
 80056b0:	00ca      	lsls	r2, r1, #3
 80056b2:	4610      	mov	r0, r2
 80056b4:	4619      	mov	r1, r3
 80056b6:	4603      	mov	r3, r0
 80056b8:	4642      	mov	r2, r8
 80056ba:	189b      	adds	r3, r3, r2
 80056bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056c0:	464b      	mov	r3, r9
 80056c2:	460a      	mov	r2, r1
 80056c4:	eb42 0303 	adc.w	r3, r2, r3
 80056c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056e4:	4649      	mov	r1, r9
 80056e6:	008b      	lsls	r3, r1, #2
 80056e8:	4641      	mov	r1, r8
 80056ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ee:	4641      	mov	r1, r8
 80056f0:	008a      	lsls	r2, r1, #2
 80056f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056f6:	f7fb fac7 	bl	8000c88 <__aeabi_uldivmod>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4611      	mov	r1, r2
 8005700:	4b38      	ldr	r3, [pc, #224]	@ (80057e4 <UART_SetConfig+0x4e4>)
 8005702:	fba3 2301 	umull	r2, r3, r3, r1
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	2264      	movs	r2, #100	@ 0x64
 800570a:	fb02 f303 	mul.w	r3, r2, r3
 800570e:	1acb      	subs	r3, r1, r3
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	3332      	adds	r3, #50	@ 0x32
 8005714:	4a33      	ldr	r2, [pc, #204]	@ (80057e4 <UART_SetConfig+0x4e4>)
 8005716:	fba2 2303 	umull	r2, r3, r2, r3
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005720:	441c      	add	r4, r3
 8005722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005726:	2200      	movs	r2, #0
 8005728:	673b      	str	r3, [r7, #112]	@ 0x70
 800572a:	677a      	str	r2, [r7, #116]	@ 0x74
 800572c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005730:	4642      	mov	r2, r8
 8005732:	464b      	mov	r3, r9
 8005734:	1891      	adds	r1, r2, r2
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	415b      	adcs	r3, r3
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005740:	4641      	mov	r1, r8
 8005742:	1851      	adds	r1, r2, r1
 8005744:	6039      	str	r1, [r7, #0]
 8005746:	4649      	mov	r1, r9
 8005748:	414b      	adcs	r3, r1
 800574a:	607b      	str	r3, [r7, #4]
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005758:	4659      	mov	r1, fp
 800575a:	00cb      	lsls	r3, r1, #3
 800575c:	4651      	mov	r1, sl
 800575e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005762:	4651      	mov	r1, sl
 8005764:	00ca      	lsls	r2, r1, #3
 8005766:	4610      	mov	r0, r2
 8005768:	4619      	mov	r1, r3
 800576a:	4603      	mov	r3, r0
 800576c:	4642      	mov	r2, r8
 800576e:	189b      	adds	r3, r3, r2
 8005770:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005772:	464b      	mov	r3, r9
 8005774:	460a      	mov	r2, r1
 8005776:	eb42 0303 	adc.w	r3, r2, r3
 800577a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800577c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	663b      	str	r3, [r7, #96]	@ 0x60
 8005786:	667a      	str	r2, [r7, #100]	@ 0x64
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005794:	4649      	mov	r1, r9
 8005796:	008b      	lsls	r3, r1, #2
 8005798:	4641      	mov	r1, r8
 800579a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800579e:	4641      	mov	r1, r8
 80057a0:	008a      	lsls	r2, r1, #2
 80057a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057a6:	f7fb fa6f 	bl	8000c88 <__aeabi_uldivmod>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4b0d      	ldr	r3, [pc, #52]	@ (80057e4 <UART_SetConfig+0x4e4>)
 80057b0:	fba3 1302 	umull	r1, r3, r3, r2
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	2164      	movs	r1, #100	@ 0x64
 80057b8:	fb01 f303 	mul.w	r3, r1, r3
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	3332      	adds	r3, #50	@ 0x32
 80057c2:	4a08      	ldr	r2, [pc, #32]	@ (80057e4 <UART_SetConfig+0x4e4>)
 80057c4:	fba2 2303 	umull	r2, r3, r2, r3
 80057c8:	095b      	lsrs	r3, r3, #5
 80057ca:	f003 020f 	and.w	r2, r3, #15
 80057ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4422      	add	r2, r4
 80057d6:	609a      	str	r2, [r3, #8]
}
 80057d8:	bf00      	nop
 80057da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057de:	46bd      	mov	sp, r7
 80057e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057e4:	51eb851f 	.word	0x51eb851f

080057e8 <Screen_RX_data>:

    _Screen.Status_Dev_1 = false;
}

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4803      	ldr	r0, [pc, #12]	@ (8005800 <Screen_RX_data+0x18>)
 80057f4:	f000 f806 	bl	8005804 <DWIN_Listen>
}
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20000528 	.word	0x20000528

08005804 <DWIN_Listen>:
{
    pDwin->p_ListenDWIN_Callback = dwin_callback;
}

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
    uint8_t message_ASCII;
    uint16_t VPaddress;
    uint16_t lastByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b5a      	cmp	r3, #90	@ 0x5a
 8005814:	d13b      	bne.n	800588e <DWIN_Listen+0x8a>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2ba5      	cmp	r3, #165	@ 0xa5
 800581e:	d136      	bne.n	800588e <DWIN_Listen+0x8a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	3303      	adds	r3, #3
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b83      	cmp	r3, #131	@ 0x83
 8005828:	d131      	bne.n	800588e <DWIN_Listen+0x8a>
        {
            datalength = RX_Buffer[2];
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	789b      	ldrb	r3, [r3, #2]
 800582e:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	3302      	adds	r3, #2
 8005834:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	3304      	adds	r3, #4
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	b21b      	sxth	r3, r3
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	b21a      	sxth	r2, r3
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	3305      	adds	r3, #5
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	b21b      	sxth	r3, r3
 800584a:	4313      	orrs	r3, r2
 800584c:	b21b      	sxth	r3, r3
 800584e:	81bb      	strh	r3, [r7, #12]
            // get return key value
            lastByte = (uint16_t)(RX_Buffer[datalength-1] << 8 | RX_Buffer[datalength]);
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	3b01      	subs	r3, #1
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	4413      	add	r3, r2
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	b21b      	sxth	r3, r3
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	b21a      	sxth	r2, r3
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	440b      	add	r3, r1
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	b21b      	sxth	r3, r3
 800586a:	4313      	orrs	r3, r2
 800586c:	b21b      	sxth	r3, r3
 800586e:	817b      	strh	r3, [r7, #10]
            // Get message ASCII
            message_ASCII = RX_Buffer[datalength];
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	4413      	add	r3, r2
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	727b      	strb	r3, [r7, #9]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <DWIN_Listen+0x8a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lastByte,message_ASCII);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	7a7a      	ldrb	r2, [r7, #9]
 8005888:	8979      	ldrh	r1, [r7, #10]
 800588a:	89b8      	ldrh	r0, [r7, #12]
 800588c:	4798      	blx	r3
            }
        }
    }

    
}
 800588e:	bf00      	nop
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <malloc>:
 8005898:	4b02      	ldr	r3, [pc, #8]	@ (80058a4 <malloc+0xc>)
 800589a:	4601      	mov	r1, r0
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	f000 b825 	b.w	80058ec <_malloc_r>
 80058a2:	bf00      	nop
 80058a4:	20000268 	.word	0x20000268

080058a8 <sbrk_aligned>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	4e0f      	ldr	r6, [pc, #60]	@ (80058e8 <sbrk_aligned+0x40>)
 80058ac:	460c      	mov	r4, r1
 80058ae:	6831      	ldr	r1, [r6, #0]
 80058b0:	4605      	mov	r5, r0
 80058b2:	b911      	cbnz	r1, 80058ba <sbrk_aligned+0x12>
 80058b4:	f001 fee8 	bl	8007688 <_sbrk_r>
 80058b8:	6030      	str	r0, [r6, #0]
 80058ba:	4621      	mov	r1, r4
 80058bc:	4628      	mov	r0, r5
 80058be:	f001 fee3 	bl	8007688 <_sbrk_r>
 80058c2:	1c43      	adds	r3, r0, #1
 80058c4:	d103      	bne.n	80058ce <sbrk_aligned+0x26>
 80058c6:	f04f 34ff 	mov.w	r4, #4294967295
 80058ca:	4620      	mov	r0, r4
 80058cc:	bd70      	pop	{r4, r5, r6, pc}
 80058ce:	1cc4      	adds	r4, r0, #3
 80058d0:	f024 0403 	bic.w	r4, r4, #3
 80058d4:	42a0      	cmp	r0, r4
 80058d6:	d0f8      	beq.n	80058ca <sbrk_aligned+0x22>
 80058d8:	1a21      	subs	r1, r4, r0
 80058da:	4628      	mov	r0, r5
 80058dc:	f001 fed4 	bl	8007688 <_sbrk_r>
 80058e0:	3001      	adds	r0, #1
 80058e2:	d1f2      	bne.n	80058ca <sbrk_aligned+0x22>
 80058e4:	e7ef      	b.n	80058c6 <sbrk_aligned+0x1e>
 80058e6:	bf00      	nop
 80058e8:	200005f0 	.word	0x200005f0

080058ec <_malloc_r>:
 80058ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f0:	1ccd      	adds	r5, r1, #3
 80058f2:	f025 0503 	bic.w	r5, r5, #3
 80058f6:	3508      	adds	r5, #8
 80058f8:	2d0c      	cmp	r5, #12
 80058fa:	bf38      	it	cc
 80058fc:	250c      	movcc	r5, #12
 80058fe:	2d00      	cmp	r5, #0
 8005900:	4606      	mov	r6, r0
 8005902:	db01      	blt.n	8005908 <_malloc_r+0x1c>
 8005904:	42a9      	cmp	r1, r5
 8005906:	d904      	bls.n	8005912 <_malloc_r+0x26>
 8005908:	230c      	movs	r3, #12
 800590a:	6033      	str	r3, [r6, #0]
 800590c:	2000      	movs	r0, #0
 800590e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005912:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059e8 <_malloc_r+0xfc>
 8005916:	f000 f869 	bl	80059ec <__malloc_lock>
 800591a:	f8d8 3000 	ldr.w	r3, [r8]
 800591e:	461c      	mov	r4, r3
 8005920:	bb44      	cbnz	r4, 8005974 <_malloc_r+0x88>
 8005922:	4629      	mov	r1, r5
 8005924:	4630      	mov	r0, r6
 8005926:	f7ff ffbf 	bl	80058a8 <sbrk_aligned>
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	4604      	mov	r4, r0
 800592e:	d158      	bne.n	80059e2 <_malloc_r+0xf6>
 8005930:	f8d8 4000 	ldr.w	r4, [r8]
 8005934:	4627      	mov	r7, r4
 8005936:	2f00      	cmp	r7, #0
 8005938:	d143      	bne.n	80059c2 <_malloc_r+0xd6>
 800593a:	2c00      	cmp	r4, #0
 800593c:	d04b      	beq.n	80059d6 <_malloc_r+0xea>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	4639      	mov	r1, r7
 8005942:	4630      	mov	r0, r6
 8005944:	eb04 0903 	add.w	r9, r4, r3
 8005948:	f001 fe9e 	bl	8007688 <_sbrk_r>
 800594c:	4581      	cmp	r9, r0
 800594e:	d142      	bne.n	80059d6 <_malloc_r+0xea>
 8005950:	6821      	ldr	r1, [r4, #0]
 8005952:	1a6d      	subs	r5, r5, r1
 8005954:	4629      	mov	r1, r5
 8005956:	4630      	mov	r0, r6
 8005958:	f7ff ffa6 	bl	80058a8 <sbrk_aligned>
 800595c:	3001      	adds	r0, #1
 800595e:	d03a      	beq.n	80059d6 <_malloc_r+0xea>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	442b      	add	r3, r5
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	f8d8 3000 	ldr.w	r3, [r8]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	bb62      	cbnz	r2, 80059c8 <_malloc_r+0xdc>
 800596e:	f8c8 7000 	str.w	r7, [r8]
 8005972:	e00f      	b.n	8005994 <_malloc_r+0xa8>
 8005974:	6822      	ldr	r2, [r4, #0]
 8005976:	1b52      	subs	r2, r2, r5
 8005978:	d420      	bmi.n	80059bc <_malloc_r+0xd0>
 800597a:	2a0b      	cmp	r2, #11
 800597c:	d917      	bls.n	80059ae <_malloc_r+0xc2>
 800597e:	1961      	adds	r1, r4, r5
 8005980:	42a3      	cmp	r3, r4
 8005982:	6025      	str	r5, [r4, #0]
 8005984:	bf18      	it	ne
 8005986:	6059      	strne	r1, [r3, #4]
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	bf08      	it	eq
 800598c:	f8c8 1000 	streq.w	r1, [r8]
 8005990:	5162      	str	r2, [r4, r5]
 8005992:	604b      	str	r3, [r1, #4]
 8005994:	4630      	mov	r0, r6
 8005996:	f000 f82f 	bl	80059f8 <__malloc_unlock>
 800599a:	f104 000b 	add.w	r0, r4, #11
 800599e:	1d23      	adds	r3, r4, #4
 80059a0:	f020 0007 	bic.w	r0, r0, #7
 80059a4:	1ac2      	subs	r2, r0, r3
 80059a6:	bf1c      	itt	ne
 80059a8:	1a1b      	subne	r3, r3, r0
 80059aa:	50a3      	strne	r3, [r4, r2]
 80059ac:	e7af      	b.n	800590e <_malloc_r+0x22>
 80059ae:	6862      	ldr	r2, [r4, #4]
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	bf0c      	ite	eq
 80059b4:	f8c8 2000 	streq.w	r2, [r8]
 80059b8:	605a      	strne	r2, [r3, #4]
 80059ba:	e7eb      	b.n	8005994 <_malloc_r+0xa8>
 80059bc:	4623      	mov	r3, r4
 80059be:	6864      	ldr	r4, [r4, #4]
 80059c0:	e7ae      	b.n	8005920 <_malloc_r+0x34>
 80059c2:	463c      	mov	r4, r7
 80059c4:	687f      	ldr	r7, [r7, #4]
 80059c6:	e7b6      	b.n	8005936 <_malloc_r+0x4a>
 80059c8:	461a      	mov	r2, r3
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	d1fb      	bne.n	80059c8 <_malloc_r+0xdc>
 80059d0:	2300      	movs	r3, #0
 80059d2:	6053      	str	r3, [r2, #4]
 80059d4:	e7de      	b.n	8005994 <_malloc_r+0xa8>
 80059d6:	230c      	movs	r3, #12
 80059d8:	6033      	str	r3, [r6, #0]
 80059da:	4630      	mov	r0, r6
 80059dc:	f000 f80c 	bl	80059f8 <__malloc_unlock>
 80059e0:	e794      	b.n	800590c <_malloc_r+0x20>
 80059e2:	6005      	str	r5, [r0, #0]
 80059e4:	e7d6      	b.n	8005994 <_malloc_r+0xa8>
 80059e6:	bf00      	nop
 80059e8:	200005f4 	.word	0x200005f4

080059ec <__malloc_lock>:
 80059ec:	4801      	ldr	r0, [pc, #4]	@ (80059f4 <__malloc_lock+0x8>)
 80059ee:	f001 be98 	b.w	8007722 <__retarget_lock_acquire_recursive>
 80059f2:	bf00      	nop
 80059f4:	20000738 	.word	0x20000738

080059f8 <__malloc_unlock>:
 80059f8:	4801      	ldr	r0, [pc, #4]	@ (8005a00 <__malloc_unlock+0x8>)
 80059fa:	f001 be93 	b.w	8007724 <__retarget_lock_release_recursive>
 80059fe:	bf00      	nop
 8005a00:	20000738 	.word	0x20000738

08005a04 <sulp>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	4604      	mov	r4, r0
 8005a08:	460d      	mov	r5, r1
 8005a0a:	ec45 4b10 	vmov	d0, r4, r5
 8005a0e:	4616      	mov	r6, r2
 8005a10:	f003 fc20 	bl	8009254 <__ulp>
 8005a14:	ec51 0b10 	vmov	r0, r1, d0
 8005a18:	b17e      	cbz	r6, 8005a3a <sulp+0x36>
 8005a1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005a1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	dd09      	ble.n	8005a3a <sulp+0x36>
 8005a26:	051b      	lsls	r3, r3, #20
 8005a28:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005a2c:	2400      	movs	r4, #0
 8005a2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005a32:	4622      	mov	r2, r4
 8005a34:	462b      	mov	r3, r5
 8005a36:	f7fa fddf 	bl	80005f8 <__aeabi_dmul>
 8005a3a:	ec41 0b10 	vmov	d0, r0, r1
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}

08005a40 <_strtod_l>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	b09f      	sub	sp, #124	@ 0x7c
 8005a46:	460c      	mov	r4, r1
 8005a48:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8005a4e:	9005      	str	r0, [sp, #20]
 8005a50:	f04f 0a00 	mov.w	sl, #0
 8005a54:	f04f 0b00 	mov.w	fp, #0
 8005a58:	460a      	mov	r2, r1
 8005a5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a5c:	7811      	ldrb	r1, [r2, #0]
 8005a5e:	292b      	cmp	r1, #43	@ 0x2b
 8005a60:	d04a      	beq.n	8005af8 <_strtod_l+0xb8>
 8005a62:	d838      	bhi.n	8005ad6 <_strtod_l+0x96>
 8005a64:	290d      	cmp	r1, #13
 8005a66:	d832      	bhi.n	8005ace <_strtod_l+0x8e>
 8005a68:	2908      	cmp	r1, #8
 8005a6a:	d832      	bhi.n	8005ad2 <_strtod_l+0x92>
 8005a6c:	2900      	cmp	r1, #0
 8005a6e:	d03b      	beq.n	8005ae8 <_strtod_l+0xa8>
 8005a70:	2200      	movs	r2, #0
 8005a72:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005a76:	782a      	ldrb	r2, [r5, #0]
 8005a78:	2a30      	cmp	r2, #48	@ 0x30
 8005a7a:	f040 80b2 	bne.w	8005be2 <_strtod_l+0x1a2>
 8005a7e:	786a      	ldrb	r2, [r5, #1]
 8005a80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a84:	2a58      	cmp	r2, #88	@ 0x58
 8005a86:	d16e      	bne.n	8005b66 <_strtod_l+0x126>
 8005a88:	9302      	str	r3, [sp, #8]
 8005a8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	ab1a      	add	r3, sp, #104	@ 0x68
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	4a8f      	ldr	r2, [pc, #572]	@ (8005cd0 <_strtod_l+0x290>)
 8005a94:	9805      	ldr	r0, [sp, #20]
 8005a96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005a98:	a919      	add	r1, sp, #100	@ 0x64
 8005a9a:	f002 fd8b 	bl	80085b4 <__gethex>
 8005a9e:	f010 060f 	ands.w	r6, r0, #15
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	d005      	beq.n	8005ab2 <_strtod_l+0x72>
 8005aa6:	2e06      	cmp	r6, #6
 8005aa8:	d128      	bne.n	8005afc <_strtod_l+0xbc>
 8005aaa:	3501      	adds	r5, #1
 8005aac:	2300      	movs	r3, #0
 8005aae:	9519      	str	r5, [sp, #100]	@ 0x64
 8005ab0:	930e      	str	r3, [sp, #56]	@ 0x38
 8005ab2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f040 858e 	bne.w	80065d6 <_strtod_l+0xb96>
 8005aba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005abc:	b1cb      	cbz	r3, 8005af2 <_strtod_l+0xb2>
 8005abe:	4652      	mov	r2, sl
 8005ac0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005ac4:	ec43 2b10 	vmov	d0, r2, r3
 8005ac8:	b01f      	add	sp, #124	@ 0x7c
 8005aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ace:	2920      	cmp	r1, #32
 8005ad0:	d1ce      	bne.n	8005a70 <_strtod_l+0x30>
 8005ad2:	3201      	adds	r2, #1
 8005ad4:	e7c1      	b.n	8005a5a <_strtod_l+0x1a>
 8005ad6:	292d      	cmp	r1, #45	@ 0x2d
 8005ad8:	d1ca      	bne.n	8005a70 <_strtod_l+0x30>
 8005ada:	2101      	movs	r1, #1
 8005adc:	910e      	str	r1, [sp, #56]	@ 0x38
 8005ade:	1c51      	adds	r1, r2, #1
 8005ae0:	9119      	str	r1, [sp, #100]	@ 0x64
 8005ae2:	7852      	ldrb	r2, [r2, #1]
 8005ae4:	2a00      	cmp	r2, #0
 8005ae6:	d1c5      	bne.n	8005a74 <_strtod_l+0x34>
 8005ae8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005aea:	9419      	str	r4, [sp, #100]	@ 0x64
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f040 8570 	bne.w	80065d2 <_strtod_l+0xb92>
 8005af2:	4652      	mov	r2, sl
 8005af4:	465b      	mov	r3, fp
 8005af6:	e7e5      	b.n	8005ac4 <_strtod_l+0x84>
 8005af8:	2100      	movs	r1, #0
 8005afa:	e7ef      	b.n	8005adc <_strtod_l+0x9c>
 8005afc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005afe:	b13a      	cbz	r2, 8005b10 <_strtod_l+0xd0>
 8005b00:	2135      	movs	r1, #53	@ 0x35
 8005b02:	a81c      	add	r0, sp, #112	@ 0x70
 8005b04:	f003 fca0 	bl	8009448 <__copybits>
 8005b08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b0a:	9805      	ldr	r0, [sp, #20]
 8005b0c:	f003 f876 	bl	8008bfc <_Bfree>
 8005b10:	3e01      	subs	r6, #1
 8005b12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005b14:	2e04      	cmp	r6, #4
 8005b16:	d806      	bhi.n	8005b26 <_strtod_l+0xe6>
 8005b18:	e8df f006 	tbb	[pc, r6]
 8005b1c:	201d0314 	.word	0x201d0314
 8005b20:	14          	.byte	0x14
 8005b21:	00          	.byte	0x00
 8005b22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005b26:	05e1      	lsls	r1, r4, #23
 8005b28:	bf48      	it	mi
 8005b2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005b2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b32:	0d1b      	lsrs	r3, r3, #20
 8005b34:	051b      	lsls	r3, r3, #20
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1bb      	bne.n	8005ab2 <_strtod_l+0x72>
 8005b3a:	f001 fdc7 	bl	80076cc <__errno>
 8005b3e:	2322      	movs	r3, #34	@ 0x22
 8005b40:	6003      	str	r3, [r0, #0]
 8005b42:	e7b6      	b.n	8005ab2 <_strtod_l+0x72>
 8005b44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005b48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005b4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005b50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005b54:	e7e7      	b.n	8005b26 <_strtod_l+0xe6>
 8005b56:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8005cd8 <_strtod_l+0x298>
 8005b5a:	e7e4      	b.n	8005b26 <_strtod_l+0xe6>
 8005b5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005b60:	f04f 3aff 	mov.w	sl, #4294967295
 8005b64:	e7df      	b.n	8005b26 <_strtod_l+0xe6>
 8005b66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	2b30      	cmp	r3, #48	@ 0x30
 8005b70:	d0f9      	beq.n	8005b66 <_strtod_l+0x126>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d09d      	beq.n	8005ab2 <_strtod_l+0x72>
 8005b76:	2301      	movs	r3, #1
 8005b78:	2700      	movs	r7, #0
 8005b7a:	9308      	str	r3, [sp, #32]
 8005b7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005b80:	970b      	str	r7, [sp, #44]	@ 0x2c
 8005b82:	46b9      	mov	r9, r7
 8005b84:	220a      	movs	r2, #10
 8005b86:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005b88:	7805      	ldrb	r5, [r0, #0]
 8005b8a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005b8e:	b2d9      	uxtb	r1, r3
 8005b90:	2909      	cmp	r1, #9
 8005b92:	d928      	bls.n	8005be6 <_strtod_l+0x1a6>
 8005b94:	494f      	ldr	r1, [pc, #316]	@ (8005cd4 <_strtod_l+0x294>)
 8005b96:	2201      	movs	r2, #1
 8005b98:	f001 fccf 	bl	800753a <strncmp>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d032      	beq.n	8005c06 <_strtod_l+0x1c6>
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	462a      	mov	r2, r5
 8005ba4:	900a      	str	r0, [sp, #40]	@ 0x28
 8005ba6:	464d      	mov	r5, r9
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2a65      	cmp	r2, #101	@ 0x65
 8005bac:	d001      	beq.n	8005bb2 <_strtod_l+0x172>
 8005bae:	2a45      	cmp	r2, #69	@ 0x45
 8005bb0:	d114      	bne.n	8005bdc <_strtod_l+0x19c>
 8005bb2:	b91d      	cbnz	r5, 8005bbc <_strtod_l+0x17c>
 8005bb4:	9a08      	ldr	r2, [sp, #32]
 8005bb6:	4302      	orrs	r2, r0
 8005bb8:	d096      	beq.n	8005ae8 <_strtod_l+0xa8>
 8005bba:	2500      	movs	r5, #0
 8005bbc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005bbe:	1c62      	adds	r2, r4, #1
 8005bc0:	9219      	str	r2, [sp, #100]	@ 0x64
 8005bc2:	7862      	ldrb	r2, [r4, #1]
 8005bc4:	2a2b      	cmp	r2, #43	@ 0x2b
 8005bc6:	d07a      	beq.n	8005cbe <_strtod_l+0x27e>
 8005bc8:	2a2d      	cmp	r2, #45	@ 0x2d
 8005bca:	d07e      	beq.n	8005cca <_strtod_l+0x28a>
 8005bcc:	f04f 0c00 	mov.w	ip, #0
 8005bd0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005bd4:	2909      	cmp	r1, #9
 8005bd6:	f240 8085 	bls.w	8005ce4 <_strtod_l+0x2a4>
 8005bda:	9419      	str	r4, [sp, #100]	@ 0x64
 8005bdc:	f04f 0800 	mov.w	r8, #0
 8005be0:	e0a5      	b.n	8005d2e <_strtod_l+0x2ee>
 8005be2:	2300      	movs	r3, #0
 8005be4:	e7c8      	b.n	8005b78 <_strtod_l+0x138>
 8005be6:	f1b9 0f08 	cmp.w	r9, #8
 8005bea:	bfd8      	it	le
 8005bec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005bee:	f100 0001 	add.w	r0, r0, #1
 8005bf2:	bfda      	itte	le
 8005bf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005bf8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005bfa:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005bfe:	f109 0901 	add.w	r9, r9, #1
 8005c02:	9019      	str	r0, [sp, #100]	@ 0x64
 8005c04:	e7bf      	b.n	8005b86 <_strtod_l+0x146>
 8005c06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c0c:	785a      	ldrb	r2, [r3, #1]
 8005c0e:	f1b9 0f00 	cmp.w	r9, #0
 8005c12:	d03b      	beq.n	8005c8c <_strtod_l+0x24c>
 8005c14:	900a      	str	r0, [sp, #40]	@ 0x28
 8005c16:	464d      	mov	r5, r9
 8005c18:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005c1c:	2b09      	cmp	r3, #9
 8005c1e:	d912      	bls.n	8005c46 <_strtod_l+0x206>
 8005c20:	2301      	movs	r3, #1
 8005c22:	e7c2      	b.n	8005baa <_strtod_l+0x16a>
 8005c24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c2a:	785a      	ldrb	r2, [r3, #1]
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	2a30      	cmp	r2, #48	@ 0x30
 8005c30:	d0f8      	beq.n	8005c24 <_strtod_l+0x1e4>
 8005c32:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	f200 84d2 	bhi.w	80065e0 <_strtod_l+0xba0>
 8005c3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c3e:	900a      	str	r0, [sp, #40]	@ 0x28
 8005c40:	2000      	movs	r0, #0
 8005c42:	930c      	str	r3, [sp, #48]	@ 0x30
 8005c44:	4605      	mov	r5, r0
 8005c46:	3a30      	subs	r2, #48	@ 0x30
 8005c48:	f100 0301 	add.w	r3, r0, #1
 8005c4c:	d018      	beq.n	8005c80 <_strtod_l+0x240>
 8005c4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c50:	4419      	add	r1, r3
 8005c52:	910a      	str	r1, [sp, #40]	@ 0x28
 8005c54:	462e      	mov	r6, r5
 8005c56:	f04f 0e0a 	mov.w	lr, #10
 8005c5a:	1c71      	adds	r1, r6, #1
 8005c5c:	eba1 0c05 	sub.w	ip, r1, r5
 8005c60:	4563      	cmp	r3, ip
 8005c62:	dc15      	bgt.n	8005c90 <_strtod_l+0x250>
 8005c64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005c68:	182b      	adds	r3, r5, r0
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	f105 0501 	add.w	r5, r5, #1
 8005c70:	4405      	add	r5, r0
 8005c72:	dc1a      	bgt.n	8005caa <_strtod_l+0x26a>
 8005c74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c76:	230a      	movs	r3, #10
 8005c78:	fb03 2301 	mla	r3, r3, r1, r2
 8005c7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c7e:	2300      	movs	r3, #0
 8005c80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c82:	1c51      	adds	r1, r2, #1
 8005c84:	9119      	str	r1, [sp, #100]	@ 0x64
 8005c86:	7852      	ldrb	r2, [r2, #1]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	e7c5      	b.n	8005c18 <_strtod_l+0x1d8>
 8005c8c:	4648      	mov	r0, r9
 8005c8e:	e7ce      	b.n	8005c2e <_strtod_l+0x1ee>
 8005c90:	2e08      	cmp	r6, #8
 8005c92:	dc05      	bgt.n	8005ca0 <_strtod_l+0x260>
 8005c94:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005c96:	fb0e f606 	mul.w	r6, lr, r6
 8005c9a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005c9c:	460e      	mov	r6, r1
 8005c9e:	e7dc      	b.n	8005c5a <_strtod_l+0x21a>
 8005ca0:	2910      	cmp	r1, #16
 8005ca2:	bfd8      	it	le
 8005ca4:	fb0e f707 	mulle.w	r7, lr, r7
 8005ca8:	e7f8      	b.n	8005c9c <_strtod_l+0x25c>
 8005caa:	2b0f      	cmp	r3, #15
 8005cac:	bfdc      	itt	le
 8005cae:	230a      	movle	r3, #10
 8005cb0:	fb03 2707 	mlale	r7, r3, r7, r2
 8005cb4:	e7e3      	b.n	8005c7e <_strtod_l+0x23e>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e77a      	b.n	8005bb4 <_strtod_l+0x174>
 8005cbe:	f04f 0c00 	mov.w	ip, #0
 8005cc2:	1ca2      	adds	r2, r4, #2
 8005cc4:	9219      	str	r2, [sp, #100]	@ 0x64
 8005cc6:	78a2      	ldrb	r2, [r4, #2]
 8005cc8:	e782      	b.n	8005bd0 <_strtod_l+0x190>
 8005cca:	f04f 0c01 	mov.w	ip, #1
 8005cce:	e7f8      	b.n	8005cc2 <_strtod_l+0x282>
 8005cd0:	0800a368 	.word	0x0800a368
 8005cd4:	0800a124 	.word	0x0800a124
 8005cd8:	7ff00000 	.word	0x7ff00000
 8005cdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005cde:	1c51      	adds	r1, r2, #1
 8005ce0:	9119      	str	r1, [sp, #100]	@ 0x64
 8005ce2:	7852      	ldrb	r2, [r2, #1]
 8005ce4:	2a30      	cmp	r2, #48	@ 0x30
 8005ce6:	d0f9      	beq.n	8005cdc <_strtod_l+0x29c>
 8005ce8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005cec:	2908      	cmp	r1, #8
 8005cee:	f63f af75 	bhi.w	8005bdc <_strtod_l+0x19c>
 8005cf2:	3a30      	subs	r2, #48	@ 0x30
 8005cf4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cf6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005cf8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005cfa:	f04f 080a 	mov.w	r8, #10
 8005cfe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d00:	1c56      	adds	r6, r2, #1
 8005d02:	9619      	str	r6, [sp, #100]	@ 0x64
 8005d04:	7852      	ldrb	r2, [r2, #1]
 8005d06:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005d0a:	f1be 0f09 	cmp.w	lr, #9
 8005d0e:	d939      	bls.n	8005d84 <_strtod_l+0x344>
 8005d10:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005d12:	1a76      	subs	r6, r6, r1
 8005d14:	2e08      	cmp	r6, #8
 8005d16:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005d1a:	dc03      	bgt.n	8005d24 <_strtod_l+0x2e4>
 8005d1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d1e:	4588      	cmp	r8, r1
 8005d20:	bfa8      	it	ge
 8005d22:	4688      	movge	r8, r1
 8005d24:	f1bc 0f00 	cmp.w	ip, #0
 8005d28:	d001      	beq.n	8005d2e <_strtod_l+0x2ee>
 8005d2a:	f1c8 0800 	rsb	r8, r8, #0
 8005d2e:	2d00      	cmp	r5, #0
 8005d30:	d14e      	bne.n	8005dd0 <_strtod_l+0x390>
 8005d32:	9908      	ldr	r1, [sp, #32]
 8005d34:	4308      	orrs	r0, r1
 8005d36:	f47f aebc 	bne.w	8005ab2 <_strtod_l+0x72>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f47f aed4 	bne.w	8005ae8 <_strtod_l+0xa8>
 8005d40:	2a69      	cmp	r2, #105	@ 0x69
 8005d42:	d028      	beq.n	8005d96 <_strtod_l+0x356>
 8005d44:	dc25      	bgt.n	8005d92 <_strtod_l+0x352>
 8005d46:	2a49      	cmp	r2, #73	@ 0x49
 8005d48:	d025      	beq.n	8005d96 <_strtod_l+0x356>
 8005d4a:	2a4e      	cmp	r2, #78	@ 0x4e
 8005d4c:	f47f aecc 	bne.w	8005ae8 <_strtod_l+0xa8>
 8005d50:	499a      	ldr	r1, [pc, #616]	@ (8005fbc <_strtod_l+0x57c>)
 8005d52:	a819      	add	r0, sp, #100	@ 0x64
 8005d54:	f002 fe50 	bl	80089f8 <__match>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	f43f aec5 	beq.w	8005ae8 <_strtod_l+0xa8>
 8005d5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b28      	cmp	r3, #40	@ 0x28
 8005d64:	d12e      	bne.n	8005dc4 <_strtod_l+0x384>
 8005d66:	4996      	ldr	r1, [pc, #600]	@ (8005fc0 <_strtod_l+0x580>)
 8005d68:	aa1c      	add	r2, sp, #112	@ 0x70
 8005d6a:	a819      	add	r0, sp, #100	@ 0x64
 8005d6c:	f002 fe58 	bl	8008a20 <__hexnan>
 8005d70:	2805      	cmp	r0, #5
 8005d72:	d127      	bne.n	8005dc4 <_strtod_l+0x384>
 8005d74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005d76:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005d7a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005d7e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005d82:	e696      	b.n	8005ab2 <_strtod_l+0x72>
 8005d84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d86:	fb08 2101 	mla	r1, r8, r1, r2
 8005d8a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005d8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d90:	e7b5      	b.n	8005cfe <_strtod_l+0x2be>
 8005d92:	2a6e      	cmp	r2, #110	@ 0x6e
 8005d94:	e7da      	b.n	8005d4c <_strtod_l+0x30c>
 8005d96:	498b      	ldr	r1, [pc, #556]	@ (8005fc4 <_strtod_l+0x584>)
 8005d98:	a819      	add	r0, sp, #100	@ 0x64
 8005d9a:	f002 fe2d 	bl	80089f8 <__match>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	f43f aea2 	beq.w	8005ae8 <_strtod_l+0xa8>
 8005da4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005da6:	4988      	ldr	r1, [pc, #544]	@ (8005fc8 <_strtod_l+0x588>)
 8005da8:	3b01      	subs	r3, #1
 8005daa:	a819      	add	r0, sp, #100	@ 0x64
 8005dac:	9319      	str	r3, [sp, #100]	@ 0x64
 8005dae:	f002 fe23 	bl	80089f8 <__match>
 8005db2:	b910      	cbnz	r0, 8005dba <_strtod_l+0x37a>
 8005db4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005db6:	3301      	adds	r3, #1
 8005db8:	9319      	str	r3, [sp, #100]	@ 0x64
 8005dba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8005fd8 <_strtod_l+0x598>
 8005dbe:	f04f 0a00 	mov.w	sl, #0
 8005dc2:	e676      	b.n	8005ab2 <_strtod_l+0x72>
 8005dc4:	4881      	ldr	r0, [pc, #516]	@ (8005fcc <_strtod_l+0x58c>)
 8005dc6:	f001 fcbf 	bl	8007748 <nan>
 8005dca:	ec5b ab10 	vmov	sl, fp, d0
 8005dce:	e670      	b.n	8005ab2 <_strtod_l+0x72>
 8005dd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dd2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005dd4:	eba8 0303 	sub.w	r3, r8, r3
 8005dd8:	f1b9 0f00 	cmp.w	r9, #0
 8005ddc:	bf08      	it	eq
 8005dde:	46a9      	moveq	r9, r5
 8005de0:	2d10      	cmp	r5, #16
 8005de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005de4:	462c      	mov	r4, r5
 8005de6:	bfa8      	it	ge
 8005de8:	2410      	movge	r4, #16
 8005dea:	f7fa fb8b 	bl	8000504 <__aeabi_ui2d>
 8005dee:	2d09      	cmp	r5, #9
 8005df0:	4682      	mov	sl, r0
 8005df2:	468b      	mov	fp, r1
 8005df4:	dc13      	bgt.n	8005e1e <_strtod_l+0x3de>
 8005df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f43f ae5a 	beq.w	8005ab2 <_strtod_l+0x72>
 8005dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e00:	dd78      	ble.n	8005ef4 <_strtod_l+0x4b4>
 8005e02:	2b16      	cmp	r3, #22
 8005e04:	dc5f      	bgt.n	8005ec6 <_strtod_l+0x486>
 8005e06:	4972      	ldr	r1, [pc, #456]	@ (8005fd0 <_strtod_l+0x590>)
 8005e08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e10:	4652      	mov	r2, sl
 8005e12:	465b      	mov	r3, fp
 8005e14:	f7fa fbf0 	bl	80005f8 <__aeabi_dmul>
 8005e18:	4682      	mov	sl, r0
 8005e1a:	468b      	mov	fp, r1
 8005e1c:	e649      	b.n	8005ab2 <_strtod_l+0x72>
 8005e1e:	4b6c      	ldr	r3, [pc, #432]	@ (8005fd0 <_strtod_l+0x590>)
 8005e20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005e28:	f7fa fbe6 	bl	80005f8 <__aeabi_dmul>
 8005e2c:	4682      	mov	sl, r0
 8005e2e:	4638      	mov	r0, r7
 8005e30:	468b      	mov	fp, r1
 8005e32:	f7fa fb67 	bl	8000504 <__aeabi_ui2d>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	4659      	mov	r1, fp
 8005e3e:	f7fa fa25 	bl	800028c <__adddf3>
 8005e42:	2d0f      	cmp	r5, #15
 8005e44:	4682      	mov	sl, r0
 8005e46:	468b      	mov	fp, r1
 8005e48:	ddd5      	ble.n	8005df6 <_strtod_l+0x3b6>
 8005e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e4c:	1b2c      	subs	r4, r5, r4
 8005e4e:	441c      	add	r4, r3
 8005e50:	2c00      	cmp	r4, #0
 8005e52:	f340 8093 	ble.w	8005f7c <_strtod_l+0x53c>
 8005e56:	f014 030f 	ands.w	r3, r4, #15
 8005e5a:	d00a      	beq.n	8005e72 <_strtod_l+0x432>
 8005e5c:	495c      	ldr	r1, [pc, #368]	@ (8005fd0 <_strtod_l+0x590>)
 8005e5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e62:	4652      	mov	r2, sl
 8005e64:	465b      	mov	r3, fp
 8005e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e6a:	f7fa fbc5 	bl	80005f8 <__aeabi_dmul>
 8005e6e:	4682      	mov	sl, r0
 8005e70:	468b      	mov	fp, r1
 8005e72:	f034 040f 	bics.w	r4, r4, #15
 8005e76:	d073      	beq.n	8005f60 <_strtod_l+0x520>
 8005e78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005e7c:	dd49      	ble.n	8005f12 <_strtod_l+0x4d2>
 8005e7e:	2400      	movs	r4, #0
 8005e80:	46a0      	mov	r8, r4
 8005e82:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e84:	46a1      	mov	r9, r4
 8005e86:	9a05      	ldr	r2, [sp, #20]
 8005e88:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8005fd8 <_strtod_l+0x598>
 8005e8c:	2322      	movs	r3, #34	@ 0x22
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	f04f 0a00 	mov.w	sl, #0
 8005e94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f43f ae0b 	beq.w	8005ab2 <_strtod_l+0x72>
 8005e9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e9e:	9805      	ldr	r0, [sp, #20]
 8005ea0:	f002 feac 	bl	8008bfc <_Bfree>
 8005ea4:	9805      	ldr	r0, [sp, #20]
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	f002 fea8 	bl	8008bfc <_Bfree>
 8005eac:	9805      	ldr	r0, [sp, #20]
 8005eae:	4641      	mov	r1, r8
 8005eb0:	f002 fea4 	bl	8008bfc <_Bfree>
 8005eb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005eb6:	9805      	ldr	r0, [sp, #20]
 8005eb8:	f002 fea0 	bl	8008bfc <_Bfree>
 8005ebc:	9805      	ldr	r0, [sp, #20]
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	f002 fe9c 	bl	8008bfc <_Bfree>
 8005ec4:	e5f5      	b.n	8005ab2 <_strtod_l+0x72>
 8005ec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ec8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	dbbc      	blt.n	8005e4a <_strtod_l+0x40a>
 8005ed0:	4c3f      	ldr	r4, [pc, #252]	@ (8005fd0 <_strtod_l+0x590>)
 8005ed2:	f1c5 050f 	rsb	r5, r5, #15
 8005ed6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005eda:	4652      	mov	r2, sl
 8005edc:	465b      	mov	r3, fp
 8005ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ee2:	f7fa fb89 	bl	80005f8 <__aeabi_dmul>
 8005ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ee8:	1b5d      	subs	r5, r3, r5
 8005eea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005eee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005ef2:	e78f      	b.n	8005e14 <_strtod_l+0x3d4>
 8005ef4:	3316      	adds	r3, #22
 8005ef6:	dba8      	blt.n	8005e4a <_strtod_l+0x40a>
 8005ef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005efa:	eba3 0808 	sub.w	r8, r3, r8
 8005efe:	4b34      	ldr	r3, [pc, #208]	@ (8005fd0 <_strtod_l+0x590>)
 8005f00:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005f04:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005f08:	4650      	mov	r0, sl
 8005f0a:	4659      	mov	r1, fp
 8005f0c:	f7fa fc9e 	bl	800084c <__aeabi_ddiv>
 8005f10:	e782      	b.n	8005e18 <_strtod_l+0x3d8>
 8005f12:	2300      	movs	r3, #0
 8005f14:	4f2f      	ldr	r7, [pc, #188]	@ (8005fd4 <_strtod_l+0x594>)
 8005f16:	1124      	asrs	r4, r4, #4
 8005f18:	4650      	mov	r0, sl
 8005f1a:	4659      	mov	r1, fp
 8005f1c:	461e      	mov	r6, r3
 8005f1e:	2c01      	cmp	r4, #1
 8005f20:	dc21      	bgt.n	8005f66 <_strtod_l+0x526>
 8005f22:	b10b      	cbz	r3, 8005f28 <_strtod_l+0x4e8>
 8005f24:	4682      	mov	sl, r0
 8005f26:	468b      	mov	fp, r1
 8005f28:	492a      	ldr	r1, [pc, #168]	@ (8005fd4 <_strtod_l+0x594>)
 8005f2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005f2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005f32:	4652      	mov	r2, sl
 8005f34:	465b      	mov	r3, fp
 8005f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f3a:	f7fa fb5d 	bl	80005f8 <__aeabi_dmul>
 8005f3e:	4b26      	ldr	r3, [pc, #152]	@ (8005fd8 <_strtod_l+0x598>)
 8005f40:	460a      	mov	r2, r1
 8005f42:	400b      	ands	r3, r1
 8005f44:	4925      	ldr	r1, [pc, #148]	@ (8005fdc <_strtod_l+0x59c>)
 8005f46:	428b      	cmp	r3, r1
 8005f48:	4682      	mov	sl, r0
 8005f4a:	d898      	bhi.n	8005e7e <_strtod_l+0x43e>
 8005f4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf86      	itte	hi
 8005f54:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8005fe0 <_strtod_l+0x5a0>
 8005f58:	f04f 3aff 	movhi.w	sl, #4294967295
 8005f5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005f60:	2300      	movs	r3, #0
 8005f62:	9308      	str	r3, [sp, #32]
 8005f64:	e076      	b.n	8006054 <_strtod_l+0x614>
 8005f66:	07e2      	lsls	r2, r4, #31
 8005f68:	d504      	bpl.n	8005f74 <_strtod_l+0x534>
 8005f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f6e:	f7fa fb43 	bl	80005f8 <__aeabi_dmul>
 8005f72:	2301      	movs	r3, #1
 8005f74:	3601      	adds	r6, #1
 8005f76:	1064      	asrs	r4, r4, #1
 8005f78:	3708      	adds	r7, #8
 8005f7a:	e7d0      	b.n	8005f1e <_strtod_l+0x4de>
 8005f7c:	d0f0      	beq.n	8005f60 <_strtod_l+0x520>
 8005f7e:	4264      	negs	r4, r4
 8005f80:	f014 020f 	ands.w	r2, r4, #15
 8005f84:	d00a      	beq.n	8005f9c <_strtod_l+0x55c>
 8005f86:	4b12      	ldr	r3, [pc, #72]	@ (8005fd0 <_strtod_l+0x590>)
 8005f88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f8c:	4650      	mov	r0, sl
 8005f8e:	4659      	mov	r1, fp
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f7fa fc5a 	bl	800084c <__aeabi_ddiv>
 8005f98:	4682      	mov	sl, r0
 8005f9a:	468b      	mov	fp, r1
 8005f9c:	1124      	asrs	r4, r4, #4
 8005f9e:	d0df      	beq.n	8005f60 <_strtod_l+0x520>
 8005fa0:	2c1f      	cmp	r4, #31
 8005fa2:	dd1f      	ble.n	8005fe4 <_strtod_l+0x5a4>
 8005fa4:	2400      	movs	r4, #0
 8005fa6:	46a0      	mov	r8, r4
 8005fa8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005faa:	46a1      	mov	r9, r4
 8005fac:	9a05      	ldr	r2, [sp, #20]
 8005fae:	2322      	movs	r3, #34	@ 0x22
 8005fb0:	f04f 0a00 	mov.w	sl, #0
 8005fb4:	f04f 0b00 	mov.w	fp, #0
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	e76b      	b.n	8005e94 <_strtod_l+0x454>
 8005fbc:	0800a133 	.word	0x0800a133
 8005fc0:	0800a354 	.word	0x0800a354
 8005fc4:	0800a12b 	.word	0x0800a12b
 8005fc8:	0800a217 	.word	0x0800a217
 8005fcc:	0800a213 	.word	0x0800a213
 8005fd0:	0800a3e0 	.word	0x0800a3e0
 8005fd4:	0800a3b8 	.word	0x0800a3b8
 8005fd8:	7ff00000 	.word	0x7ff00000
 8005fdc:	7ca00000 	.word	0x7ca00000
 8005fe0:	7fefffff 	.word	0x7fefffff
 8005fe4:	f014 0310 	ands.w	r3, r4, #16
 8005fe8:	bf18      	it	ne
 8005fea:	236a      	movne	r3, #106	@ 0x6a
 8005fec:	4ea9      	ldr	r6, [pc, #676]	@ (8006294 <_strtod_l+0x854>)
 8005fee:	9308      	str	r3, [sp, #32]
 8005ff0:	4650      	mov	r0, sl
 8005ff2:	4659      	mov	r1, fp
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	07e7      	lsls	r7, r4, #31
 8005ff8:	d504      	bpl.n	8006004 <_strtod_l+0x5c4>
 8005ffa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ffe:	f7fa fafb 	bl	80005f8 <__aeabi_dmul>
 8006002:	2301      	movs	r3, #1
 8006004:	1064      	asrs	r4, r4, #1
 8006006:	f106 0608 	add.w	r6, r6, #8
 800600a:	d1f4      	bne.n	8005ff6 <_strtod_l+0x5b6>
 800600c:	b10b      	cbz	r3, 8006012 <_strtod_l+0x5d2>
 800600e:	4682      	mov	sl, r0
 8006010:	468b      	mov	fp, r1
 8006012:	9b08      	ldr	r3, [sp, #32]
 8006014:	b1b3      	cbz	r3, 8006044 <_strtod_l+0x604>
 8006016:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800601a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800601e:	2b00      	cmp	r3, #0
 8006020:	4659      	mov	r1, fp
 8006022:	dd0f      	ble.n	8006044 <_strtod_l+0x604>
 8006024:	2b1f      	cmp	r3, #31
 8006026:	dd56      	ble.n	80060d6 <_strtod_l+0x696>
 8006028:	2b34      	cmp	r3, #52	@ 0x34
 800602a:	bfde      	ittt	le
 800602c:	f04f 33ff 	movle.w	r3, #4294967295
 8006030:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006034:	4093      	lslle	r3, r2
 8006036:	f04f 0a00 	mov.w	sl, #0
 800603a:	bfcc      	ite	gt
 800603c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006040:	ea03 0b01 	andle.w	fp, r3, r1
 8006044:	2200      	movs	r2, #0
 8006046:	2300      	movs	r3, #0
 8006048:	4650      	mov	r0, sl
 800604a:	4659      	mov	r1, fp
 800604c:	f7fa fd3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006050:	2800      	cmp	r0, #0
 8006052:	d1a7      	bne.n	8005fa4 <_strtod_l+0x564>
 8006054:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800605a:	9805      	ldr	r0, [sp, #20]
 800605c:	462b      	mov	r3, r5
 800605e:	464a      	mov	r2, r9
 8006060:	f002 fe34 	bl	8008ccc <__s2b>
 8006064:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006066:	2800      	cmp	r0, #0
 8006068:	f43f af09 	beq.w	8005e7e <_strtod_l+0x43e>
 800606c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800606e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006070:	2a00      	cmp	r2, #0
 8006072:	eba3 0308 	sub.w	r3, r3, r8
 8006076:	bfa8      	it	ge
 8006078:	2300      	movge	r3, #0
 800607a:	9312      	str	r3, [sp, #72]	@ 0x48
 800607c:	2400      	movs	r4, #0
 800607e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006082:	9316      	str	r3, [sp, #88]	@ 0x58
 8006084:	46a0      	mov	r8, r4
 8006086:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006088:	9805      	ldr	r0, [sp, #20]
 800608a:	6859      	ldr	r1, [r3, #4]
 800608c:	f002 fd76 	bl	8008b7c <_Balloc>
 8006090:	4681      	mov	r9, r0
 8006092:	2800      	cmp	r0, #0
 8006094:	f43f aef7 	beq.w	8005e86 <_strtod_l+0x446>
 8006098:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	3202      	adds	r2, #2
 800609e:	f103 010c 	add.w	r1, r3, #12
 80060a2:	0092      	lsls	r2, r2, #2
 80060a4:	300c      	adds	r0, #12
 80060a6:	f001 fb3e 	bl	8007726 <memcpy>
 80060aa:	ec4b ab10 	vmov	d0, sl, fp
 80060ae:	9805      	ldr	r0, [sp, #20]
 80060b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80060b2:	a91b      	add	r1, sp, #108	@ 0x6c
 80060b4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80060b8:	f003 f93c 	bl	8009334 <__d2b>
 80060bc:	901a      	str	r0, [sp, #104]	@ 0x68
 80060be:	2800      	cmp	r0, #0
 80060c0:	f43f aee1 	beq.w	8005e86 <_strtod_l+0x446>
 80060c4:	9805      	ldr	r0, [sp, #20]
 80060c6:	2101      	movs	r1, #1
 80060c8:	f002 fe96 	bl	8008df8 <__i2b>
 80060cc:	4680      	mov	r8, r0
 80060ce:	b948      	cbnz	r0, 80060e4 <_strtod_l+0x6a4>
 80060d0:	f04f 0800 	mov.w	r8, #0
 80060d4:	e6d7      	b.n	8005e86 <_strtod_l+0x446>
 80060d6:	f04f 32ff 	mov.w	r2, #4294967295
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	ea03 0a0a 	and.w	sl, r3, sl
 80060e2:	e7af      	b.n	8006044 <_strtod_l+0x604>
 80060e4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80060e6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80060e8:	2d00      	cmp	r5, #0
 80060ea:	bfab      	itete	ge
 80060ec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80060ee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80060f0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80060f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80060f4:	bfac      	ite	ge
 80060f6:	18ef      	addge	r7, r5, r3
 80060f8:	1b5e      	sublt	r6, r3, r5
 80060fa:	9b08      	ldr	r3, [sp, #32]
 80060fc:	1aed      	subs	r5, r5, r3
 80060fe:	4415      	add	r5, r2
 8006100:	4b65      	ldr	r3, [pc, #404]	@ (8006298 <_strtod_l+0x858>)
 8006102:	3d01      	subs	r5, #1
 8006104:	429d      	cmp	r5, r3
 8006106:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800610a:	da50      	bge.n	80061ae <_strtod_l+0x76e>
 800610c:	1b5b      	subs	r3, r3, r5
 800610e:	2b1f      	cmp	r3, #31
 8006110:	eba2 0203 	sub.w	r2, r2, r3
 8006114:	f04f 0101 	mov.w	r1, #1
 8006118:	dc3d      	bgt.n	8006196 <_strtod_l+0x756>
 800611a:	fa01 f303 	lsl.w	r3, r1, r3
 800611e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006120:	2300      	movs	r3, #0
 8006122:	9310      	str	r3, [sp, #64]	@ 0x40
 8006124:	18bd      	adds	r5, r7, r2
 8006126:	9b08      	ldr	r3, [sp, #32]
 8006128:	42af      	cmp	r7, r5
 800612a:	4416      	add	r6, r2
 800612c:	441e      	add	r6, r3
 800612e:	463b      	mov	r3, r7
 8006130:	bfa8      	it	ge
 8006132:	462b      	movge	r3, r5
 8006134:	42b3      	cmp	r3, r6
 8006136:	bfa8      	it	ge
 8006138:	4633      	movge	r3, r6
 800613a:	2b00      	cmp	r3, #0
 800613c:	bfc2      	ittt	gt
 800613e:	1aed      	subgt	r5, r5, r3
 8006140:	1af6      	subgt	r6, r6, r3
 8006142:	1aff      	subgt	r7, r7, r3
 8006144:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006146:	2b00      	cmp	r3, #0
 8006148:	dd16      	ble.n	8006178 <_strtod_l+0x738>
 800614a:	4641      	mov	r1, r8
 800614c:	9805      	ldr	r0, [sp, #20]
 800614e:	461a      	mov	r2, r3
 8006150:	f002 ff0a 	bl	8008f68 <__pow5mult>
 8006154:	4680      	mov	r8, r0
 8006156:	2800      	cmp	r0, #0
 8006158:	d0ba      	beq.n	80060d0 <_strtod_l+0x690>
 800615a:	4601      	mov	r1, r0
 800615c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800615e:	9805      	ldr	r0, [sp, #20]
 8006160:	f002 fe60 	bl	8008e24 <__multiply>
 8006164:	900a      	str	r0, [sp, #40]	@ 0x28
 8006166:	2800      	cmp	r0, #0
 8006168:	f43f ae8d 	beq.w	8005e86 <_strtod_l+0x446>
 800616c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800616e:	9805      	ldr	r0, [sp, #20]
 8006170:	f002 fd44 	bl	8008bfc <_Bfree>
 8006174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006176:	931a      	str	r3, [sp, #104]	@ 0x68
 8006178:	2d00      	cmp	r5, #0
 800617a:	dc1d      	bgt.n	80061b8 <_strtod_l+0x778>
 800617c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	dd23      	ble.n	80061ca <_strtod_l+0x78a>
 8006182:	4649      	mov	r1, r9
 8006184:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006186:	9805      	ldr	r0, [sp, #20]
 8006188:	f002 feee 	bl	8008f68 <__pow5mult>
 800618c:	4681      	mov	r9, r0
 800618e:	b9e0      	cbnz	r0, 80061ca <_strtod_l+0x78a>
 8006190:	f04f 0900 	mov.w	r9, #0
 8006194:	e677      	b.n	8005e86 <_strtod_l+0x446>
 8006196:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800619a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800619e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80061a2:	35e2      	adds	r5, #226	@ 0xe2
 80061a4:	fa01 f305 	lsl.w	r3, r1, r5
 80061a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80061aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80061ac:	e7ba      	b.n	8006124 <_strtod_l+0x6e4>
 80061ae:	2300      	movs	r3, #0
 80061b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80061b2:	2301      	movs	r3, #1
 80061b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80061b6:	e7b5      	b.n	8006124 <_strtod_l+0x6e4>
 80061b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80061ba:	9805      	ldr	r0, [sp, #20]
 80061bc:	462a      	mov	r2, r5
 80061be:	f002 ff2d 	bl	800901c <__lshift>
 80061c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d1d9      	bne.n	800617c <_strtod_l+0x73c>
 80061c8:	e65d      	b.n	8005e86 <_strtod_l+0x446>
 80061ca:	2e00      	cmp	r6, #0
 80061cc:	dd07      	ble.n	80061de <_strtod_l+0x79e>
 80061ce:	4649      	mov	r1, r9
 80061d0:	9805      	ldr	r0, [sp, #20]
 80061d2:	4632      	mov	r2, r6
 80061d4:	f002 ff22 	bl	800901c <__lshift>
 80061d8:	4681      	mov	r9, r0
 80061da:	2800      	cmp	r0, #0
 80061dc:	d0d8      	beq.n	8006190 <_strtod_l+0x750>
 80061de:	2f00      	cmp	r7, #0
 80061e0:	dd08      	ble.n	80061f4 <_strtod_l+0x7b4>
 80061e2:	4641      	mov	r1, r8
 80061e4:	9805      	ldr	r0, [sp, #20]
 80061e6:	463a      	mov	r2, r7
 80061e8:	f002 ff18 	bl	800901c <__lshift>
 80061ec:	4680      	mov	r8, r0
 80061ee:	2800      	cmp	r0, #0
 80061f0:	f43f ae49 	beq.w	8005e86 <_strtod_l+0x446>
 80061f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80061f6:	9805      	ldr	r0, [sp, #20]
 80061f8:	464a      	mov	r2, r9
 80061fa:	f002 ff97 	bl	800912c <__mdiff>
 80061fe:	4604      	mov	r4, r0
 8006200:	2800      	cmp	r0, #0
 8006202:	f43f ae40 	beq.w	8005e86 <_strtod_l+0x446>
 8006206:	68c3      	ldr	r3, [r0, #12]
 8006208:	930f      	str	r3, [sp, #60]	@ 0x3c
 800620a:	2300      	movs	r3, #0
 800620c:	60c3      	str	r3, [r0, #12]
 800620e:	4641      	mov	r1, r8
 8006210:	f002 ff70 	bl	80090f4 <__mcmp>
 8006214:	2800      	cmp	r0, #0
 8006216:	da45      	bge.n	80062a4 <_strtod_l+0x864>
 8006218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800621a:	ea53 030a 	orrs.w	r3, r3, sl
 800621e:	d16b      	bne.n	80062f8 <_strtod_l+0x8b8>
 8006220:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006224:	2b00      	cmp	r3, #0
 8006226:	d167      	bne.n	80062f8 <_strtod_l+0x8b8>
 8006228:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800622c:	0d1b      	lsrs	r3, r3, #20
 800622e:	051b      	lsls	r3, r3, #20
 8006230:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006234:	d960      	bls.n	80062f8 <_strtod_l+0x8b8>
 8006236:	6963      	ldr	r3, [r4, #20]
 8006238:	b913      	cbnz	r3, 8006240 <_strtod_l+0x800>
 800623a:	6923      	ldr	r3, [r4, #16]
 800623c:	2b01      	cmp	r3, #1
 800623e:	dd5b      	ble.n	80062f8 <_strtod_l+0x8b8>
 8006240:	4621      	mov	r1, r4
 8006242:	2201      	movs	r2, #1
 8006244:	9805      	ldr	r0, [sp, #20]
 8006246:	f002 fee9 	bl	800901c <__lshift>
 800624a:	4641      	mov	r1, r8
 800624c:	4604      	mov	r4, r0
 800624e:	f002 ff51 	bl	80090f4 <__mcmp>
 8006252:	2800      	cmp	r0, #0
 8006254:	dd50      	ble.n	80062f8 <_strtod_l+0x8b8>
 8006256:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800625a:	9a08      	ldr	r2, [sp, #32]
 800625c:	0d1b      	lsrs	r3, r3, #20
 800625e:	051b      	lsls	r3, r3, #20
 8006260:	2a00      	cmp	r2, #0
 8006262:	d06a      	beq.n	800633a <_strtod_l+0x8fa>
 8006264:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006268:	d867      	bhi.n	800633a <_strtod_l+0x8fa>
 800626a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800626e:	f67f ae9d 	bls.w	8005fac <_strtod_l+0x56c>
 8006272:	4b0a      	ldr	r3, [pc, #40]	@ (800629c <_strtod_l+0x85c>)
 8006274:	4650      	mov	r0, sl
 8006276:	4659      	mov	r1, fp
 8006278:	2200      	movs	r2, #0
 800627a:	f7fa f9bd 	bl	80005f8 <__aeabi_dmul>
 800627e:	4b08      	ldr	r3, [pc, #32]	@ (80062a0 <_strtod_l+0x860>)
 8006280:	400b      	ands	r3, r1
 8006282:	4682      	mov	sl, r0
 8006284:	468b      	mov	fp, r1
 8006286:	2b00      	cmp	r3, #0
 8006288:	f47f ae08 	bne.w	8005e9c <_strtod_l+0x45c>
 800628c:	9a05      	ldr	r2, [sp, #20]
 800628e:	2322      	movs	r3, #34	@ 0x22
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	e603      	b.n	8005e9c <_strtod_l+0x45c>
 8006294:	0800a380 	.word	0x0800a380
 8006298:	fffffc02 	.word	0xfffffc02
 800629c:	39500000 	.word	0x39500000
 80062a0:	7ff00000 	.word	0x7ff00000
 80062a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80062a8:	d165      	bne.n	8006376 <_strtod_l+0x936>
 80062aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80062ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062b0:	b35a      	cbz	r2, 800630a <_strtod_l+0x8ca>
 80062b2:	4a9f      	ldr	r2, [pc, #636]	@ (8006530 <_strtod_l+0xaf0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d12b      	bne.n	8006310 <_strtod_l+0x8d0>
 80062b8:	9b08      	ldr	r3, [sp, #32]
 80062ba:	4651      	mov	r1, sl
 80062bc:	b303      	cbz	r3, 8006300 <_strtod_l+0x8c0>
 80062be:	4b9d      	ldr	r3, [pc, #628]	@ (8006534 <_strtod_l+0xaf4>)
 80062c0:	465a      	mov	r2, fp
 80062c2:	4013      	ands	r3, r2
 80062c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80062c8:	f04f 32ff 	mov.w	r2, #4294967295
 80062cc:	d81b      	bhi.n	8006306 <_strtod_l+0x8c6>
 80062ce:	0d1b      	lsrs	r3, r3, #20
 80062d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	4299      	cmp	r1, r3
 80062da:	d119      	bne.n	8006310 <_strtod_l+0x8d0>
 80062dc:	4b96      	ldr	r3, [pc, #600]	@ (8006538 <_strtod_l+0xaf8>)
 80062de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d102      	bne.n	80062ea <_strtod_l+0x8aa>
 80062e4:	3101      	adds	r1, #1
 80062e6:	f43f adce 	beq.w	8005e86 <_strtod_l+0x446>
 80062ea:	4b92      	ldr	r3, [pc, #584]	@ (8006534 <_strtod_l+0xaf4>)
 80062ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062ee:	401a      	ands	r2, r3
 80062f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80062f4:	f04f 0a00 	mov.w	sl, #0
 80062f8:	9b08      	ldr	r3, [sp, #32]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1b9      	bne.n	8006272 <_strtod_l+0x832>
 80062fe:	e5cd      	b.n	8005e9c <_strtod_l+0x45c>
 8006300:	f04f 33ff 	mov.w	r3, #4294967295
 8006304:	e7e8      	b.n	80062d8 <_strtod_l+0x898>
 8006306:	4613      	mov	r3, r2
 8006308:	e7e6      	b.n	80062d8 <_strtod_l+0x898>
 800630a:	ea53 030a 	orrs.w	r3, r3, sl
 800630e:	d0a2      	beq.n	8006256 <_strtod_l+0x816>
 8006310:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006312:	b1db      	cbz	r3, 800634c <_strtod_l+0x90c>
 8006314:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006316:	4213      	tst	r3, r2
 8006318:	d0ee      	beq.n	80062f8 <_strtod_l+0x8b8>
 800631a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800631c:	9a08      	ldr	r2, [sp, #32]
 800631e:	4650      	mov	r0, sl
 8006320:	4659      	mov	r1, fp
 8006322:	b1bb      	cbz	r3, 8006354 <_strtod_l+0x914>
 8006324:	f7ff fb6e 	bl	8005a04 <sulp>
 8006328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800632c:	ec53 2b10 	vmov	r2, r3, d0
 8006330:	f7f9 ffac 	bl	800028c <__adddf3>
 8006334:	4682      	mov	sl, r0
 8006336:	468b      	mov	fp, r1
 8006338:	e7de      	b.n	80062f8 <_strtod_l+0x8b8>
 800633a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800633e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006342:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006346:	f04f 3aff 	mov.w	sl, #4294967295
 800634a:	e7d5      	b.n	80062f8 <_strtod_l+0x8b8>
 800634c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800634e:	ea13 0f0a 	tst.w	r3, sl
 8006352:	e7e1      	b.n	8006318 <_strtod_l+0x8d8>
 8006354:	f7ff fb56 	bl	8005a04 <sulp>
 8006358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800635c:	ec53 2b10 	vmov	r2, r3, d0
 8006360:	f7f9 ff92 	bl	8000288 <__aeabi_dsub>
 8006364:	2200      	movs	r2, #0
 8006366:	2300      	movs	r3, #0
 8006368:	4682      	mov	sl, r0
 800636a:	468b      	mov	fp, r1
 800636c:	f7fa fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 8006370:	2800      	cmp	r0, #0
 8006372:	d0c1      	beq.n	80062f8 <_strtod_l+0x8b8>
 8006374:	e61a      	b.n	8005fac <_strtod_l+0x56c>
 8006376:	4641      	mov	r1, r8
 8006378:	4620      	mov	r0, r4
 800637a:	f003 f833 	bl	80093e4 <__ratio>
 800637e:	ec57 6b10 	vmov	r6, r7, d0
 8006382:	2200      	movs	r2, #0
 8006384:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006388:	4630      	mov	r0, r6
 800638a:	4639      	mov	r1, r7
 800638c:	f7fa fbb0 	bl	8000af0 <__aeabi_dcmple>
 8006390:	2800      	cmp	r0, #0
 8006392:	d06f      	beq.n	8006474 <_strtod_l+0xa34>
 8006394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d17a      	bne.n	8006490 <_strtod_l+0xa50>
 800639a:	f1ba 0f00 	cmp.w	sl, #0
 800639e:	d158      	bne.n	8006452 <_strtod_l+0xa12>
 80063a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d15a      	bne.n	8006460 <_strtod_l+0xa20>
 80063aa:	4b64      	ldr	r3, [pc, #400]	@ (800653c <_strtod_l+0xafc>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	4630      	mov	r0, r6
 80063b0:	4639      	mov	r1, r7
 80063b2:	f7fa fb93 	bl	8000adc <__aeabi_dcmplt>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d159      	bne.n	800646e <_strtod_l+0xa2e>
 80063ba:	4630      	mov	r0, r6
 80063bc:	4639      	mov	r1, r7
 80063be:	4b60      	ldr	r3, [pc, #384]	@ (8006540 <_strtod_l+0xb00>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	f7fa f919 	bl	80005f8 <__aeabi_dmul>
 80063c6:	4606      	mov	r6, r0
 80063c8:	460f      	mov	r7, r1
 80063ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80063ce:	9606      	str	r6, [sp, #24]
 80063d0:	9307      	str	r3, [sp, #28]
 80063d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063d6:	4d57      	ldr	r5, [pc, #348]	@ (8006534 <_strtod_l+0xaf4>)
 80063d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80063dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063de:	401d      	ands	r5, r3
 80063e0:	4b58      	ldr	r3, [pc, #352]	@ (8006544 <_strtod_l+0xb04>)
 80063e2:	429d      	cmp	r5, r3
 80063e4:	f040 80b2 	bne.w	800654c <_strtod_l+0xb0c>
 80063e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80063ee:	ec4b ab10 	vmov	d0, sl, fp
 80063f2:	f002 ff2f 	bl	8009254 <__ulp>
 80063f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063fa:	ec51 0b10 	vmov	r0, r1, d0
 80063fe:	f7fa f8fb 	bl	80005f8 <__aeabi_dmul>
 8006402:	4652      	mov	r2, sl
 8006404:	465b      	mov	r3, fp
 8006406:	f7f9 ff41 	bl	800028c <__adddf3>
 800640a:	460b      	mov	r3, r1
 800640c:	4949      	ldr	r1, [pc, #292]	@ (8006534 <_strtod_l+0xaf4>)
 800640e:	4a4e      	ldr	r2, [pc, #312]	@ (8006548 <_strtod_l+0xb08>)
 8006410:	4019      	ands	r1, r3
 8006412:	4291      	cmp	r1, r2
 8006414:	4682      	mov	sl, r0
 8006416:	d942      	bls.n	800649e <_strtod_l+0xa5e>
 8006418:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800641a:	4b47      	ldr	r3, [pc, #284]	@ (8006538 <_strtod_l+0xaf8>)
 800641c:	429a      	cmp	r2, r3
 800641e:	d103      	bne.n	8006428 <_strtod_l+0x9e8>
 8006420:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006422:	3301      	adds	r3, #1
 8006424:	f43f ad2f 	beq.w	8005e86 <_strtod_l+0x446>
 8006428:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006538 <_strtod_l+0xaf8>
 800642c:	f04f 3aff 	mov.w	sl, #4294967295
 8006430:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006432:	9805      	ldr	r0, [sp, #20]
 8006434:	f002 fbe2 	bl	8008bfc <_Bfree>
 8006438:	9805      	ldr	r0, [sp, #20]
 800643a:	4649      	mov	r1, r9
 800643c:	f002 fbde 	bl	8008bfc <_Bfree>
 8006440:	9805      	ldr	r0, [sp, #20]
 8006442:	4641      	mov	r1, r8
 8006444:	f002 fbda 	bl	8008bfc <_Bfree>
 8006448:	9805      	ldr	r0, [sp, #20]
 800644a:	4621      	mov	r1, r4
 800644c:	f002 fbd6 	bl	8008bfc <_Bfree>
 8006450:	e619      	b.n	8006086 <_strtod_l+0x646>
 8006452:	f1ba 0f01 	cmp.w	sl, #1
 8006456:	d103      	bne.n	8006460 <_strtod_l+0xa20>
 8006458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	f43f ada6 	beq.w	8005fac <_strtod_l+0x56c>
 8006460:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006510 <_strtod_l+0xad0>
 8006464:	4f35      	ldr	r7, [pc, #212]	@ (800653c <_strtod_l+0xafc>)
 8006466:	ed8d 7b06 	vstr	d7, [sp, #24]
 800646a:	2600      	movs	r6, #0
 800646c:	e7b1      	b.n	80063d2 <_strtod_l+0x992>
 800646e:	4f34      	ldr	r7, [pc, #208]	@ (8006540 <_strtod_l+0xb00>)
 8006470:	2600      	movs	r6, #0
 8006472:	e7aa      	b.n	80063ca <_strtod_l+0x98a>
 8006474:	4b32      	ldr	r3, [pc, #200]	@ (8006540 <_strtod_l+0xb00>)
 8006476:	4630      	mov	r0, r6
 8006478:	4639      	mov	r1, r7
 800647a:	2200      	movs	r2, #0
 800647c:	f7fa f8bc 	bl	80005f8 <__aeabi_dmul>
 8006480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006482:	4606      	mov	r6, r0
 8006484:	460f      	mov	r7, r1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d09f      	beq.n	80063ca <_strtod_l+0x98a>
 800648a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800648e:	e7a0      	b.n	80063d2 <_strtod_l+0x992>
 8006490:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006518 <_strtod_l+0xad8>
 8006494:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006498:	ec57 6b17 	vmov	r6, r7, d7
 800649c:	e799      	b.n	80063d2 <_strtod_l+0x992>
 800649e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80064a2:	9b08      	ldr	r3, [sp, #32]
 80064a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1c1      	bne.n	8006430 <_strtod_l+0x9f0>
 80064ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80064b0:	0d1b      	lsrs	r3, r3, #20
 80064b2:	051b      	lsls	r3, r3, #20
 80064b4:	429d      	cmp	r5, r3
 80064b6:	d1bb      	bne.n	8006430 <_strtod_l+0x9f0>
 80064b8:	4630      	mov	r0, r6
 80064ba:	4639      	mov	r1, r7
 80064bc:	f7fa fbfc 	bl	8000cb8 <__aeabi_d2lz>
 80064c0:	f7fa f86c 	bl	800059c <__aeabi_l2d>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4630      	mov	r0, r6
 80064ca:	4639      	mov	r1, r7
 80064cc:	f7f9 fedc 	bl	8000288 <__aeabi_dsub>
 80064d0:	460b      	mov	r3, r1
 80064d2:	4602      	mov	r2, r0
 80064d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80064d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80064dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064de:	ea46 060a 	orr.w	r6, r6, sl
 80064e2:	431e      	orrs	r6, r3
 80064e4:	d06f      	beq.n	80065c6 <_strtod_l+0xb86>
 80064e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006520 <_strtod_l+0xae0>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f7fa faf6 	bl	8000adc <__aeabi_dcmplt>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f47f acd3 	bne.w	8005e9c <_strtod_l+0x45c>
 80064f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006528 <_strtod_l+0xae8>)
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006500:	f7fa fb0a 	bl	8000b18 <__aeabi_dcmpgt>
 8006504:	2800      	cmp	r0, #0
 8006506:	d093      	beq.n	8006430 <_strtod_l+0x9f0>
 8006508:	e4c8      	b.n	8005e9c <_strtod_l+0x45c>
 800650a:	bf00      	nop
 800650c:	f3af 8000 	nop.w
 8006510:	00000000 	.word	0x00000000
 8006514:	bff00000 	.word	0xbff00000
 8006518:	00000000 	.word	0x00000000
 800651c:	3ff00000 	.word	0x3ff00000
 8006520:	94a03595 	.word	0x94a03595
 8006524:	3fdfffff 	.word	0x3fdfffff
 8006528:	35afe535 	.word	0x35afe535
 800652c:	3fe00000 	.word	0x3fe00000
 8006530:	000fffff 	.word	0x000fffff
 8006534:	7ff00000 	.word	0x7ff00000
 8006538:	7fefffff 	.word	0x7fefffff
 800653c:	3ff00000 	.word	0x3ff00000
 8006540:	3fe00000 	.word	0x3fe00000
 8006544:	7fe00000 	.word	0x7fe00000
 8006548:	7c9fffff 	.word	0x7c9fffff
 800654c:	9b08      	ldr	r3, [sp, #32]
 800654e:	b323      	cbz	r3, 800659a <_strtod_l+0xb5a>
 8006550:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006554:	d821      	bhi.n	800659a <_strtod_l+0xb5a>
 8006556:	a328      	add	r3, pc, #160	@ (adr r3, 80065f8 <_strtod_l+0xbb8>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	4630      	mov	r0, r6
 800655e:	4639      	mov	r1, r7
 8006560:	f7fa fac6 	bl	8000af0 <__aeabi_dcmple>
 8006564:	b1a0      	cbz	r0, 8006590 <_strtod_l+0xb50>
 8006566:	4639      	mov	r1, r7
 8006568:	4630      	mov	r0, r6
 800656a:	f7fa fb1d 	bl	8000ba8 <__aeabi_d2uiz>
 800656e:	2801      	cmp	r0, #1
 8006570:	bf38      	it	cc
 8006572:	2001      	movcc	r0, #1
 8006574:	f7f9 ffc6 	bl	8000504 <__aeabi_ui2d>
 8006578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800657a:	4606      	mov	r6, r0
 800657c:	460f      	mov	r7, r1
 800657e:	b9fb      	cbnz	r3, 80065c0 <_strtod_l+0xb80>
 8006580:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006584:	9014      	str	r0, [sp, #80]	@ 0x50
 8006586:	9315      	str	r3, [sp, #84]	@ 0x54
 8006588:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800658c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006590:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006592:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006596:	1b5b      	subs	r3, r3, r5
 8006598:	9311      	str	r3, [sp, #68]	@ 0x44
 800659a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800659e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80065a2:	f002 fe57 	bl	8009254 <__ulp>
 80065a6:	4650      	mov	r0, sl
 80065a8:	ec53 2b10 	vmov	r2, r3, d0
 80065ac:	4659      	mov	r1, fp
 80065ae:	f7fa f823 	bl	80005f8 <__aeabi_dmul>
 80065b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80065b6:	f7f9 fe69 	bl	800028c <__adddf3>
 80065ba:	4682      	mov	sl, r0
 80065bc:	468b      	mov	fp, r1
 80065be:	e770      	b.n	80064a2 <_strtod_l+0xa62>
 80065c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80065c4:	e7e0      	b.n	8006588 <_strtod_l+0xb48>
 80065c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006600 <_strtod_l+0xbc0>)
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f7fa fa86 	bl	8000adc <__aeabi_dcmplt>
 80065d0:	e798      	b.n	8006504 <_strtod_l+0xac4>
 80065d2:	2300      	movs	r3, #0
 80065d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80065d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80065d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	f7ff ba6d 	b.w	8005aba <_strtod_l+0x7a>
 80065e0:	2a65      	cmp	r2, #101	@ 0x65
 80065e2:	f43f ab68 	beq.w	8005cb6 <_strtod_l+0x276>
 80065e6:	2a45      	cmp	r2, #69	@ 0x45
 80065e8:	f43f ab65 	beq.w	8005cb6 <_strtod_l+0x276>
 80065ec:	2301      	movs	r3, #1
 80065ee:	f7ff bba0 	b.w	8005d32 <_strtod_l+0x2f2>
 80065f2:	bf00      	nop
 80065f4:	f3af 8000 	nop.w
 80065f8:	ffc00000 	.word	0xffc00000
 80065fc:	41dfffff 	.word	0x41dfffff
 8006600:	94a03595 	.word	0x94a03595
 8006604:	3fcfffff 	.word	0x3fcfffff

08006608 <_strtod_r>:
 8006608:	4b01      	ldr	r3, [pc, #4]	@ (8006610 <_strtod_r+0x8>)
 800660a:	f7ff ba19 	b.w	8005a40 <_strtod_l>
 800660e:	bf00      	nop
 8006610:	200000fc 	.word	0x200000fc

08006614 <__cvt>:
 8006614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006618:	ec57 6b10 	vmov	r6, r7, d0
 800661c:	2f00      	cmp	r7, #0
 800661e:	460c      	mov	r4, r1
 8006620:	4619      	mov	r1, r3
 8006622:	463b      	mov	r3, r7
 8006624:	bfbb      	ittet	lt
 8006626:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800662a:	461f      	movlt	r7, r3
 800662c:	2300      	movge	r3, #0
 800662e:	232d      	movlt	r3, #45	@ 0x2d
 8006630:	700b      	strb	r3, [r1, #0]
 8006632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006634:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006638:	4691      	mov	r9, r2
 800663a:	f023 0820 	bic.w	r8, r3, #32
 800663e:	bfbc      	itt	lt
 8006640:	4632      	movlt	r2, r6
 8006642:	4616      	movlt	r6, r2
 8006644:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006648:	d005      	beq.n	8006656 <__cvt+0x42>
 800664a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800664e:	d100      	bne.n	8006652 <__cvt+0x3e>
 8006650:	3401      	adds	r4, #1
 8006652:	2102      	movs	r1, #2
 8006654:	e000      	b.n	8006658 <__cvt+0x44>
 8006656:	2103      	movs	r1, #3
 8006658:	ab03      	add	r3, sp, #12
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	ab02      	add	r3, sp, #8
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	ec47 6b10 	vmov	d0, r6, r7
 8006664:	4653      	mov	r3, sl
 8006666:	4622      	mov	r2, r4
 8006668:	f001 f922 	bl	80078b0 <_dtoa_r>
 800666c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006670:	4605      	mov	r5, r0
 8006672:	d119      	bne.n	80066a8 <__cvt+0x94>
 8006674:	f019 0f01 	tst.w	r9, #1
 8006678:	d00e      	beq.n	8006698 <__cvt+0x84>
 800667a:	eb00 0904 	add.w	r9, r0, r4
 800667e:	2200      	movs	r2, #0
 8006680:	2300      	movs	r3, #0
 8006682:	4630      	mov	r0, r6
 8006684:	4639      	mov	r1, r7
 8006686:	f7fa fa1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800668a:	b108      	cbz	r0, 8006690 <__cvt+0x7c>
 800668c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006690:	2230      	movs	r2, #48	@ 0x30
 8006692:	9b03      	ldr	r3, [sp, #12]
 8006694:	454b      	cmp	r3, r9
 8006696:	d31e      	bcc.n	80066d6 <__cvt+0xc2>
 8006698:	9b03      	ldr	r3, [sp, #12]
 800669a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800669c:	1b5b      	subs	r3, r3, r5
 800669e:	4628      	mov	r0, r5
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	b004      	add	sp, #16
 80066a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066ac:	eb00 0904 	add.w	r9, r0, r4
 80066b0:	d1e5      	bne.n	800667e <__cvt+0x6a>
 80066b2:	7803      	ldrb	r3, [r0, #0]
 80066b4:	2b30      	cmp	r3, #48	@ 0x30
 80066b6:	d10a      	bne.n	80066ce <__cvt+0xba>
 80066b8:	2200      	movs	r2, #0
 80066ba:	2300      	movs	r3, #0
 80066bc:	4630      	mov	r0, r6
 80066be:	4639      	mov	r1, r7
 80066c0:	f7fa fa02 	bl	8000ac8 <__aeabi_dcmpeq>
 80066c4:	b918      	cbnz	r0, 80066ce <__cvt+0xba>
 80066c6:	f1c4 0401 	rsb	r4, r4, #1
 80066ca:	f8ca 4000 	str.w	r4, [sl]
 80066ce:	f8da 3000 	ldr.w	r3, [sl]
 80066d2:	4499      	add	r9, r3
 80066d4:	e7d3      	b.n	800667e <__cvt+0x6a>
 80066d6:	1c59      	adds	r1, r3, #1
 80066d8:	9103      	str	r1, [sp, #12]
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	e7d9      	b.n	8006692 <__cvt+0x7e>

080066de <__exponent>:
 80066de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066e0:	2900      	cmp	r1, #0
 80066e2:	bfba      	itte	lt
 80066e4:	4249      	neglt	r1, r1
 80066e6:	232d      	movlt	r3, #45	@ 0x2d
 80066e8:	232b      	movge	r3, #43	@ 0x2b
 80066ea:	2909      	cmp	r1, #9
 80066ec:	7002      	strb	r2, [r0, #0]
 80066ee:	7043      	strb	r3, [r0, #1]
 80066f0:	dd29      	ble.n	8006746 <__exponent+0x68>
 80066f2:	f10d 0307 	add.w	r3, sp, #7
 80066f6:	461d      	mov	r5, r3
 80066f8:	270a      	movs	r7, #10
 80066fa:	461a      	mov	r2, r3
 80066fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8006700:	fb07 1416 	mls	r4, r7, r6, r1
 8006704:	3430      	adds	r4, #48	@ 0x30
 8006706:	f802 4c01 	strb.w	r4, [r2, #-1]
 800670a:	460c      	mov	r4, r1
 800670c:	2c63      	cmp	r4, #99	@ 0x63
 800670e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006712:	4631      	mov	r1, r6
 8006714:	dcf1      	bgt.n	80066fa <__exponent+0x1c>
 8006716:	3130      	adds	r1, #48	@ 0x30
 8006718:	1e94      	subs	r4, r2, #2
 800671a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800671e:	1c41      	adds	r1, r0, #1
 8006720:	4623      	mov	r3, r4
 8006722:	42ab      	cmp	r3, r5
 8006724:	d30a      	bcc.n	800673c <__exponent+0x5e>
 8006726:	f10d 0309 	add.w	r3, sp, #9
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	42ac      	cmp	r4, r5
 800672e:	bf88      	it	hi
 8006730:	2300      	movhi	r3, #0
 8006732:	3302      	adds	r3, #2
 8006734:	4403      	add	r3, r0
 8006736:	1a18      	subs	r0, r3, r0
 8006738:	b003      	add	sp, #12
 800673a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800673c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006740:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006744:	e7ed      	b.n	8006722 <__exponent+0x44>
 8006746:	2330      	movs	r3, #48	@ 0x30
 8006748:	3130      	adds	r1, #48	@ 0x30
 800674a:	7083      	strb	r3, [r0, #2]
 800674c:	70c1      	strb	r1, [r0, #3]
 800674e:	1d03      	adds	r3, r0, #4
 8006750:	e7f1      	b.n	8006736 <__exponent+0x58>
	...

08006754 <_printf_float>:
 8006754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006758:	b08d      	sub	sp, #52	@ 0x34
 800675a:	460c      	mov	r4, r1
 800675c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006760:	4616      	mov	r6, r2
 8006762:	461f      	mov	r7, r3
 8006764:	4605      	mov	r5, r0
 8006766:	f000 ff57 	bl	8007618 <_localeconv_r>
 800676a:	6803      	ldr	r3, [r0, #0]
 800676c:	9304      	str	r3, [sp, #16]
 800676e:	4618      	mov	r0, r3
 8006770:	f7f9 fd7e 	bl	8000270 <strlen>
 8006774:	2300      	movs	r3, #0
 8006776:	930a      	str	r3, [sp, #40]	@ 0x28
 8006778:	f8d8 3000 	ldr.w	r3, [r8]
 800677c:	9005      	str	r0, [sp, #20]
 800677e:	3307      	adds	r3, #7
 8006780:	f023 0307 	bic.w	r3, r3, #7
 8006784:	f103 0208 	add.w	r2, r3, #8
 8006788:	f894 a018 	ldrb.w	sl, [r4, #24]
 800678c:	f8d4 b000 	ldr.w	fp, [r4]
 8006790:	f8c8 2000 	str.w	r2, [r8]
 8006794:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006798:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800679c:	9307      	str	r3, [sp, #28]
 800679e:	f8cd 8018 	str.w	r8, [sp, #24]
 80067a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80067a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067aa:	4b9c      	ldr	r3, [pc, #624]	@ (8006a1c <_printf_float+0x2c8>)
 80067ac:	f04f 32ff 	mov.w	r2, #4294967295
 80067b0:	f7fa f9bc 	bl	8000b2c <__aeabi_dcmpun>
 80067b4:	bb70      	cbnz	r0, 8006814 <_printf_float+0xc0>
 80067b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067ba:	4b98      	ldr	r3, [pc, #608]	@ (8006a1c <_printf_float+0x2c8>)
 80067bc:	f04f 32ff 	mov.w	r2, #4294967295
 80067c0:	f7fa f996 	bl	8000af0 <__aeabi_dcmple>
 80067c4:	bb30      	cbnz	r0, 8006814 <_printf_float+0xc0>
 80067c6:	2200      	movs	r2, #0
 80067c8:	2300      	movs	r3, #0
 80067ca:	4640      	mov	r0, r8
 80067cc:	4649      	mov	r1, r9
 80067ce:	f7fa f985 	bl	8000adc <__aeabi_dcmplt>
 80067d2:	b110      	cbz	r0, 80067da <_printf_float+0x86>
 80067d4:	232d      	movs	r3, #45	@ 0x2d
 80067d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067da:	4a91      	ldr	r2, [pc, #580]	@ (8006a20 <_printf_float+0x2cc>)
 80067dc:	4b91      	ldr	r3, [pc, #580]	@ (8006a24 <_printf_float+0x2d0>)
 80067de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80067e2:	bf8c      	ite	hi
 80067e4:	4690      	movhi	r8, r2
 80067e6:	4698      	movls	r8, r3
 80067e8:	2303      	movs	r3, #3
 80067ea:	6123      	str	r3, [r4, #16]
 80067ec:	f02b 0304 	bic.w	r3, fp, #4
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	f04f 0900 	mov.w	r9, #0
 80067f6:	9700      	str	r7, [sp, #0]
 80067f8:	4633      	mov	r3, r6
 80067fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80067fc:	4621      	mov	r1, r4
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 f9d2 	bl	8006ba8 <_printf_common>
 8006804:	3001      	adds	r0, #1
 8006806:	f040 808d 	bne.w	8006924 <_printf_float+0x1d0>
 800680a:	f04f 30ff 	mov.w	r0, #4294967295
 800680e:	b00d      	add	sp, #52	@ 0x34
 8006810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	4642      	mov	r2, r8
 8006816:	464b      	mov	r3, r9
 8006818:	4640      	mov	r0, r8
 800681a:	4649      	mov	r1, r9
 800681c:	f7fa f986 	bl	8000b2c <__aeabi_dcmpun>
 8006820:	b140      	cbz	r0, 8006834 <_printf_float+0xe0>
 8006822:	464b      	mov	r3, r9
 8006824:	2b00      	cmp	r3, #0
 8006826:	bfbc      	itt	lt
 8006828:	232d      	movlt	r3, #45	@ 0x2d
 800682a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800682e:	4a7e      	ldr	r2, [pc, #504]	@ (8006a28 <_printf_float+0x2d4>)
 8006830:	4b7e      	ldr	r3, [pc, #504]	@ (8006a2c <_printf_float+0x2d8>)
 8006832:	e7d4      	b.n	80067de <_printf_float+0x8a>
 8006834:	6863      	ldr	r3, [r4, #4]
 8006836:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800683a:	9206      	str	r2, [sp, #24]
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	d13b      	bne.n	80068b8 <_printf_float+0x164>
 8006840:	2306      	movs	r3, #6
 8006842:	6063      	str	r3, [r4, #4]
 8006844:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006848:	2300      	movs	r3, #0
 800684a:	6022      	str	r2, [r4, #0]
 800684c:	9303      	str	r3, [sp, #12]
 800684e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006850:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006854:	ab09      	add	r3, sp, #36	@ 0x24
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	6861      	ldr	r1, [r4, #4]
 800685a:	ec49 8b10 	vmov	d0, r8, r9
 800685e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006862:	4628      	mov	r0, r5
 8006864:	f7ff fed6 	bl	8006614 <__cvt>
 8006868:	9b06      	ldr	r3, [sp, #24]
 800686a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800686c:	2b47      	cmp	r3, #71	@ 0x47
 800686e:	4680      	mov	r8, r0
 8006870:	d129      	bne.n	80068c6 <_printf_float+0x172>
 8006872:	1cc8      	adds	r0, r1, #3
 8006874:	db02      	blt.n	800687c <_printf_float+0x128>
 8006876:	6863      	ldr	r3, [r4, #4]
 8006878:	4299      	cmp	r1, r3
 800687a:	dd41      	ble.n	8006900 <_printf_float+0x1ac>
 800687c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006880:	fa5f fa8a 	uxtb.w	sl, sl
 8006884:	3901      	subs	r1, #1
 8006886:	4652      	mov	r2, sl
 8006888:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800688c:	9109      	str	r1, [sp, #36]	@ 0x24
 800688e:	f7ff ff26 	bl	80066de <__exponent>
 8006892:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006894:	1813      	adds	r3, r2, r0
 8006896:	2a01      	cmp	r2, #1
 8006898:	4681      	mov	r9, r0
 800689a:	6123      	str	r3, [r4, #16]
 800689c:	dc02      	bgt.n	80068a4 <_printf_float+0x150>
 800689e:	6822      	ldr	r2, [r4, #0]
 80068a0:	07d2      	lsls	r2, r2, #31
 80068a2:	d501      	bpl.n	80068a8 <_printf_float+0x154>
 80068a4:	3301      	adds	r3, #1
 80068a6:	6123      	str	r3, [r4, #16]
 80068a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0a2      	beq.n	80067f6 <_printf_float+0xa2>
 80068b0:	232d      	movs	r3, #45	@ 0x2d
 80068b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068b6:	e79e      	b.n	80067f6 <_printf_float+0xa2>
 80068b8:	9a06      	ldr	r2, [sp, #24]
 80068ba:	2a47      	cmp	r2, #71	@ 0x47
 80068bc:	d1c2      	bne.n	8006844 <_printf_float+0xf0>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1c0      	bne.n	8006844 <_printf_float+0xf0>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e7bd      	b.n	8006842 <_printf_float+0xee>
 80068c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068ca:	d9db      	bls.n	8006884 <_printf_float+0x130>
 80068cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80068d0:	d118      	bne.n	8006904 <_printf_float+0x1b0>
 80068d2:	2900      	cmp	r1, #0
 80068d4:	6863      	ldr	r3, [r4, #4]
 80068d6:	dd0b      	ble.n	80068f0 <_printf_float+0x19c>
 80068d8:	6121      	str	r1, [r4, #16]
 80068da:	b913      	cbnz	r3, 80068e2 <_printf_float+0x18e>
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	07d0      	lsls	r0, r2, #31
 80068e0:	d502      	bpl.n	80068e8 <_printf_float+0x194>
 80068e2:	3301      	adds	r3, #1
 80068e4:	440b      	add	r3, r1
 80068e6:	6123      	str	r3, [r4, #16]
 80068e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80068ea:	f04f 0900 	mov.w	r9, #0
 80068ee:	e7db      	b.n	80068a8 <_printf_float+0x154>
 80068f0:	b913      	cbnz	r3, 80068f8 <_printf_float+0x1a4>
 80068f2:	6822      	ldr	r2, [r4, #0]
 80068f4:	07d2      	lsls	r2, r2, #31
 80068f6:	d501      	bpl.n	80068fc <_printf_float+0x1a8>
 80068f8:	3302      	adds	r3, #2
 80068fa:	e7f4      	b.n	80068e6 <_printf_float+0x192>
 80068fc:	2301      	movs	r3, #1
 80068fe:	e7f2      	b.n	80068e6 <_printf_float+0x192>
 8006900:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006906:	4299      	cmp	r1, r3
 8006908:	db05      	blt.n	8006916 <_printf_float+0x1c2>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	6121      	str	r1, [r4, #16]
 800690e:	07d8      	lsls	r0, r3, #31
 8006910:	d5ea      	bpl.n	80068e8 <_printf_float+0x194>
 8006912:	1c4b      	adds	r3, r1, #1
 8006914:	e7e7      	b.n	80068e6 <_printf_float+0x192>
 8006916:	2900      	cmp	r1, #0
 8006918:	bfd4      	ite	le
 800691a:	f1c1 0202 	rsble	r2, r1, #2
 800691e:	2201      	movgt	r2, #1
 8006920:	4413      	add	r3, r2
 8006922:	e7e0      	b.n	80068e6 <_printf_float+0x192>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	055a      	lsls	r2, r3, #21
 8006928:	d407      	bmi.n	800693a <_printf_float+0x1e6>
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	4642      	mov	r2, r8
 800692e:	4631      	mov	r1, r6
 8006930:	4628      	mov	r0, r5
 8006932:	47b8      	blx	r7
 8006934:	3001      	adds	r0, #1
 8006936:	d12b      	bne.n	8006990 <_printf_float+0x23c>
 8006938:	e767      	b.n	800680a <_printf_float+0xb6>
 800693a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800693e:	f240 80dd 	bls.w	8006afc <_printf_float+0x3a8>
 8006942:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006946:	2200      	movs	r2, #0
 8006948:	2300      	movs	r3, #0
 800694a:	f7fa f8bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800694e:	2800      	cmp	r0, #0
 8006950:	d033      	beq.n	80069ba <_printf_float+0x266>
 8006952:	4a37      	ldr	r2, [pc, #220]	@ (8006a30 <_printf_float+0x2dc>)
 8006954:	2301      	movs	r3, #1
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	f43f af54 	beq.w	800680a <_printf_float+0xb6>
 8006962:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006966:	4543      	cmp	r3, r8
 8006968:	db02      	blt.n	8006970 <_printf_float+0x21c>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	07d8      	lsls	r0, r3, #31
 800696e:	d50f      	bpl.n	8006990 <_printf_float+0x23c>
 8006970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006974:	4631      	mov	r1, r6
 8006976:	4628      	mov	r0, r5
 8006978:	47b8      	blx	r7
 800697a:	3001      	adds	r0, #1
 800697c:	f43f af45 	beq.w	800680a <_printf_float+0xb6>
 8006980:	f04f 0900 	mov.w	r9, #0
 8006984:	f108 38ff 	add.w	r8, r8, #4294967295
 8006988:	f104 0a1a 	add.w	sl, r4, #26
 800698c:	45c8      	cmp	r8, r9
 800698e:	dc09      	bgt.n	80069a4 <_printf_float+0x250>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	079b      	lsls	r3, r3, #30
 8006994:	f100 8103 	bmi.w	8006b9e <_printf_float+0x44a>
 8006998:	68e0      	ldr	r0, [r4, #12]
 800699a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800699c:	4298      	cmp	r0, r3
 800699e:	bfb8      	it	lt
 80069a0:	4618      	movlt	r0, r3
 80069a2:	e734      	b.n	800680e <_printf_float+0xba>
 80069a4:	2301      	movs	r3, #1
 80069a6:	4652      	mov	r2, sl
 80069a8:	4631      	mov	r1, r6
 80069aa:	4628      	mov	r0, r5
 80069ac:	47b8      	blx	r7
 80069ae:	3001      	adds	r0, #1
 80069b0:	f43f af2b 	beq.w	800680a <_printf_float+0xb6>
 80069b4:	f109 0901 	add.w	r9, r9, #1
 80069b8:	e7e8      	b.n	800698c <_printf_float+0x238>
 80069ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dc39      	bgt.n	8006a34 <_printf_float+0x2e0>
 80069c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a30 <_printf_float+0x2dc>)
 80069c2:	2301      	movs	r3, #1
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	f43f af1d 	beq.w	800680a <_printf_float+0xb6>
 80069d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80069d4:	ea59 0303 	orrs.w	r3, r9, r3
 80069d8:	d102      	bne.n	80069e0 <_printf_float+0x28c>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	07d9      	lsls	r1, r3, #31
 80069de:	d5d7      	bpl.n	8006990 <_printf_float+0x23c>
 80069e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069e4:	4631      	mov	r1, r6
 80069e6:	4628      	mov	r0, r5
 80069e8:	47b8      	blx	r7
 80069ea:	3001      	adds	r0, #1
 80069ec:	f43f af0d 	beq.w	800680a <_printf_float+0xb6>
 80069f0:	f04f 0a00 	mov.w	sl, #0
 80069f4:	f104 0b1a 	add.w	fp, r4, #26
 80069f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069fa:	425b      	negs	r3, r3
 80069fc:	4553      	cmp	r3, sl
 80069fe:	dc01      	bgt.n	8006a04 <_printf_float+0x2b0>
 8006a00:	464b      	mov	r3, r9
 8006a02:	e793      	b.n	800692c <_printf_float+0x1d8>
 8006a04:	2301      	movs	r3, #1
 8006a06:	465a      	mov	r2, fp
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b8      	blx	r7
 8006a0e:	3001      	adds	r0, #1
 8006a10:	f43f aefb 	beq.w	800680a <_printf_float+0xb6>
 8006a14:	f10a 0a01 	add.w	sl, sl, #1
 8006a18:	e7ee      	b.n	80069f8 <_printf_float+0x2a4>
 8006a1a:	bf00      	nop
 8006a1c:	7fefffff 	.word	0x7fefffff
 8006a20:	0800a12a 	.word	0x0800a12a
 8006a24:	0800a126 	.word	0x0800a126
 8006a28:	0800a132 	.word	0x0800a132
 8006a2c:	0800a12e 	.word	0x0800a12e
 8006a30:	0800a136 	.word	0x0800a136
 8006a34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a3a:	4553      	cmp	r3, sl
 8006a3c:	bfa8      	it	ge
 8006a3e:	4653      	movge	r3, sl
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	4699      	mov	r9, r3
 8006a44:	dc36      	bgt.n	8006ab4 <_printf_float+0x360>
 8006a46:	f04f 0b00 	mov.w	fp, #0
 8006a4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a4e:	f104 021a 	add.w	r2, r4, #26
 8006a52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a54:	9306      	str	r3, [sp, #24]
 8006a56:	eba3 0309 	sub.w	r3, r3, r9
 8006a5a:	455b      	cmp	r3, fp
 8006a5c:	dc31      	bgt.n	8006ac2 <_printf_float+0x36e>
 8006a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a60:	459a      	cmp	sl, r3
 8006a62:	dc3a      	bgt.n	8006ada <_printf_float+0x386>
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	07da      	lsls	r2, r3, #31
 8006a68:	d437      	bmi.n	8006ada <_printf_float+0x386>
 8006a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a6c:	ebaa 0903 	sub.w	r9, sl, r3
 8006a70:	9b06      	ldr	r3, [sp, #24]
 8006a72:	ebaa 0303 	sub.w	r3, sl, r3
 8006a76:	4599      	cmp	r9, r3
 8006a78:	bfa8      	it	ge
 8006a7a:	4699      	movge	r9, r3
 8006a7c:	f1b9 0f00 	cmp.w	r9, #0
 8006a80:	dc33      	bgt.n	8006aea <_printf_float+0x396>
 8006a82:	f04f 0800 	mov.w	r8, #0
 8006a86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a8a:	f104 0b1a 	add.w	fp, r4, #26
 8006a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a90:	ebaa 0303 	sub.w	r3, sl, r3
 8006a94:	eba3 0309 	sub.w	r3, r3, r9
 8006a98:	4543      	cmp	r3, r8
 8006a9a:	f77f af79 	ble.w	8006990 <_printf_float+0x23c>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	465a      	mov	r2, fp
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b8      	blx	r7
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	f43f aeae 	beq.w	800680a <_printf_float+0xb6>
 8006aae:	f108 0801 	add.w	r8, r8, #1
 8006ab2:	e7ec      	b.n	8006a8e <_printf_float+0x33a>
 8006ab4:	4642      	mov	r2, r8
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4628      	mov	r0, r5
 8006aba:	47b8      	blx	r7
 8006abc:	3001      	adds	r0, #1
 8006abe:	d1c2      	bne.n	8006a46 <_printf_float+0x2f2>
 8006ac0:	e6a3      	b.n	800680a <_printf_float+0xb6>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	9206      	str	r2, [sp, #24]
 8006aca:	47b8      	blx	r7
 8006acc:	3001      	adds	r0, #1
 8006ace:	f43f ae9c 	beq.w	800680a <_printf_float+0xb6>
 8006ad2:	9a06      	ldr	r2, [sp, #24]
 8006ad4:	f10b 0b01 	add.w	fp, fp, #1
 8006ad8:	e7bb      	b.n	8006a52 <_printf_float+0x2fe>
 8006ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b8      	blx	r7
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d1c0      	bne.n	8006a6a <_printf_float+0x316>
 8006ae8:	e68f      	b.n	800680a <_printf_float+0xb6>
 8006aea:	9a06      	ldr	r2, [sp, #24]
 8006aec:	464b      	mov	r3, r9
 8006aee:	4442      	add	r2, r8
 8006af0:	4631      	mov	r1, r6
 8006af2:	4628      	mov	r0, r5
 8006af4:	47b8      	blx	r7
 8006af6:	3001      	adds	r0, #1
 8006af8:	d1c3      	bne.n	8006a82 <_printf_float+0x32e>
 8006afa:	e686      	b.n	800680a <_printf_float+0xb6>
 8006afc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b00:	f1ba 0f01 	cmp.w	sl, #1
 8006b04:	dc01      	bgt.n	8006b0a <_printf_float+0x3b6>
 8006b06:	07db      	lsls	r3, r3, #31
 8006b08:	d536      	bpl.n	8006b78 <_printf_float+0x424>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4628      	mov	r0, r5
 8006b12:	47b8      	blx	r7
 8006b14:	3001      	adds	r0, #1
 8006b16:	f43f ae78 	beq.w	800680a <_printf_float+0xb6>
 8006b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b8      	blx	r7
 8006b24:	3001      	adds	r0, #1
 8006b26:	f43f ae70 	beq.w	800680a <_printf_float+0xb6>
 8006b2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2300      	movs	r3, #0
 8006b32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b36:	f7f9 ffc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b3a:	b9c0      	cbnz	r0, 8006b6e <_printf_float+0x41a>
 8006b3c:	4653      	mov	r3, sl
 8006b3e:	f108 0201 	add.w	r2, r8, #1
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b8      	blx	r7
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d10c      	bne.n	8006b66 <_printf_float+0x412>
 8006b4c:	e65d      	b.n	800680a <_printf_float+0xb6>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	465a      	mov	r2, fp
 8006b52:	4631      	mov	r1, r6
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	f43f ae56 	beq.w	800680a <_printf_float+0xb6>
 8006b5e:	f108 0801 	add.w	r8, r8, #1
 8006b62:	45d0      	cmp	r8, sl
 8006b64:	dbf3      	blt.n	8006b4e <_printf_float+0x3fa>
 8006b66:	464b      	mov	r3, r9
 8006b68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b6c:	e6df      	b.n	800692e <_printf_float+0x1da>
 8006b6e:	f04f 0800 	mov.w	r8, #0
 8006b72:	f104 0b1a 	add.w	fp, r4, #26
 8006b76:	e7f4      	b.n	8006b62 <_printf_float+0x40e>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	4642      	mov	r2, r8
 8006b7c:	e7e1      	b.n	8006b42 <_printf_float+0x3ee>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	464a      	mov	r2, r9
 8006b82:	4631      	mov	r1, r6
 8006b84:	4628      	mov	r0, r5
 8006b86:	47b8      	blx	r7
 8006b88:	3001      	adds	r0, #1
 8006b8a:	f43f ae3e 	beq.w	800680a <_printf_float+0xb6>
 8006b8e:	f108 0801 	add.w	r8, r8, #1
 8006b92:	68e3      	ldr	r3, [r4, #12]
 8006b94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b96:	1a5b      	subs	r3, r3, r1
 8006b98:	4543      	cmp	r3, r8
 8006b9a:	dcf0      	bgt.n	8006b7e <_printf_float+0x42a>
 8006b9c:	e6fc      	b.n	8006998 <_printf_float+0x244>
 8006b9e:	f04f 0800 	mov.w	r8, #0
 8006ba2:	f104 0919 	add.w	r9, r4, #25
 8006ba6:	e7f4      	b.n	8006b92 <_printf_float+0x43e>

08006ba8 <_printf_common>:
 8006ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	4616      	mov	r6, r2
 8006bae:	4698      	mov	r8, r3
 8006bb0:	688a      	ldr	r2, [r1, #8]
 8006bb2:	690b      	ldr	r3, [r1, #16]
 8006bb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	bfb8      	it	lt
 8006bbc:	4613      	movlt	r3, r2
 8006bbe:	6033      	str	r3, [r6, #0]
 8006bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	b10a      	cbz	r2, 8006bce <_printf_common+0x26>
 8006bca:	3301      	adds	r3, #1
 8006bcc:	6033      	str	r3, [r6, #0]
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	0699      	lsls	r1, r3, #26
 8006bd2:	bf42      	ittt	mi
 8006bd4:	6833      	ldrmi	r3, [r6, #0]
 8006bd6:	3302      	addmi	r3, #2
 8006bd8:	6033      	strmi	r3, [r6, #0]
 8006bda:	6825      	ldr	r5, [r4, #0]
 8006bdc:	f015 0506 	ands.w	r5, r5, #6
 8006be0:	d106      	bne.n	8006bf0 <_printf_common+0x48>
 8006be2:	f104 0a19 	add.w	sl, r4, #25
 8006be6:	68e3      	ldr	r3, [r4, #12]
 8006be8:	6832      	ldr	r2, [r6, #0]
 8006bea:	1a9b      	subs	r3, r3, r2
 8006bec:	42ab      	cmp	r3, r5
 8006bee:	dc26      	bgt.n	8006c3e <_printf_common+0x96>
 8006bf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bf4:	6822      	ldr	r2, [r4, #0]
 8006bf6:	3b00      	subs	r3, #0
 8006bf8:	bf18      	it	ne
 8006bfa:	2301      	movne	r3, #1
 8006bfc:	0692      	lsls	r2, r2, #26
 8006bfe:	d42b      	bmi.n	8006c58 <_printf_common+0xb0>
 8006c00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c04:	4641      	mov	r1, r8
 8006c06:	4638      	mov	r0, r7
 8006c08:	47c8      	blx	r9
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d01e      	beq.n	8006c4c <_printf_common+0xa4>
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	6922      	ldr	r2, [r4, #16]
 8006c12:	f003 0306 	and.w	r3, r3, #6
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	bf02      	ittt	eq
 8006c1a:	68e5      	ldreq	r5, [r4, #12]
 8006c1c:	6833      	ldreq	r3, [r6, #0]
 8006c1e:	1aed      	subeq	r5, r5, r3
 8006c20:	68a3      	ldr	r3, [r4, #8]
 8006c22:	bf0c      	ite	eq
 8006c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c28:	2500      	movne	r5, #0
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	bfc4      	itt	gt
 8006c2e:	1a9b      	subgt	r3, r3, r2
 8006c30:	18ed      	addgt	r5, r5, r3
 8006c32:	2600      	movs	r6, #0
 8006c34:	341a      	adds	r4, #26
 8006c36:	42b5      	cmp	r5, r6
 8006c38:	d11a      	bne.n	8006c70 <_printf_common+0xc8>
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	e008      	b.n	8006c50 <_printf_common+0xa8>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4652      	mov	r2, sl
 8006c42:	4641      	mov	r1, r8
 8006c44:	4638      	mov	r0, r7
 8006c46:	47c8      	blx	r9
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d103      	bne.n	8006c54 <_printf_common+0xac>
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c54:	3501      	adds	r5, #1
 8006c56:	e7c6      	b.n	8006be6 <_printf_common+0x3e>
 8006c58:	18e1      	adds	r1, r4, r3
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	2030      	movs	r0, #48	@ 0x30
 8006c5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c62:	4422      	add	r2, r4
 8006c64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	e7c7      	b.n	8006c00 <_printf_common+0x58>
 8006c70:	2301      	movs	r3, #1
 8006c72:	4622      	mov	r2, r4
 8006c74:	4641      	mov	r1, r8
 8006c76:	4638      	mov	r0, r7
 8006c78:	47c8      	blx	r9
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d0e6      	beq.n	8006c4c <_printf_common+0xa4>
 8006c7e:	3601      	adds	r6, #1
 8006c80:	e7d9      	b.n	8006c36 <_printf_common+0x8e>
	...

08006c84 <_printf_i>:
 8006c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	7e0f      	ldrb	r7, [r1, #24]
 8006c8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c8c:	2f78      	cmp	r7, #120	@ 0x78
 8006c8e:	4691      	mov	r9, r2
 8006c90:	4680      	mov	r8, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	469a      	mov	sl, r3
 8006c96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c9a:	d807      	bhi.n	8006cac <_printf_i+0x28>
 8006c9c:	2f62      	cmp	r7, #98	@ 0x62
 8006c9e:	d80a      	bhi.n	8006cb6 <_printf_i+0x32>
 8006ca0:	2f00      	cmp	r7, #0
 8006ca2:	f000 80d1 	beq.w	8006e48 <_printf_i+0x1c4>
 8006ca6:	2f58      	cmp	r7, #88	@ 0x58
 8006ca8:	f000 80b8 	beq.w	8006e1c <_printf_i+0x198>
 8006cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006cb4:	e03a      	b.n	8006d2c <_printf_i+0xa8>
 8006cb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cba:	2b15      	cmp	r3, #21
 8006cbc:	d8f6      	bhi.n	8006cac <_printf_i+0x28>
 8006cbe:	a101      	add	r1, pc, #4	@ (adr r1, 8006cc4 <_printf_i+0x40>)
 8006cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cc4:	08006d1d 	.word	0x08006d1d
 8006cc8:	08006d31 	.word	0x08006d31
 8006ccc:	08006cad 	.word	0x08006cad
 8006cd0:	08006cad 	.word	0x08006cad
 8006cd4:	08006cad 	.word	0x08006cad
 8006cd8:	08006cad 	.word	0x08006cad
 8006cdc:	08006d31 	.word	0x08006d31
 8006ce0:	08006cad 	.word	0x08006cad
 8006ce4:	08006cad 	.word	0x08006cad
 8006ce8:	08006cad 	.word	0x08006cad
 8006cec:	08006cad 	.word	0x08006cad
 8006cf0:	08006e2f 	.word	0x08006e2f
 8006cf4:	08006d5b 	.word	0x08006d5b
 8006cf8:	08006de9 	.word	0x08006de9
 8006cfc:	08006cad 	.word	0x08006cad
 8006d00:	08006cad 	.word	0x08006cad
 8006d04:	08006e51 	.word	0x08006e51
 8006d08:	08006cad 	.word	0x08006cad
 8006d0c:	08006d5b 	.word	0x08006d5b
 8006d10:	08006cad 	.word	0x08006cad
 8006d14:	08006cad 	.word	0x08006cad
 8006d18:	08006df1 	.word	0x08006df1
 8006d1c:	6833      	ldr	r3, [r6, #0]
 8006d1e:	1d1a      	adds	r2, r3, #4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6032      	str	r2, [r6, #0]
 8006d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e09c      	b.n	8006e6a <_printf_i+0x1e6>
 8006d30:	6833      	ldr	r3, [r6, #0]
 8006d32:	6820      	ldr	r0, [r4, #0]
 8006d34:	1d19      	adds	r1, r3, #4
 8006d36:	6031      	str	r1, [r6, #0]
 8006d38:	0606      	lsls	r6, r0, #24
 8006d3a:	d501      	bpl.n	8006d40 <_printf_i+0xbc>
 8006d3c:	681d      	ldr	r5, [r3, #0]
 8006d3e:	e003      	b.n	8006d48 <_printf_i+0xc4>
 8006d40:	0645      	lsls	r5, r0, #25
 8006d42:	d5fb      	bpl.n	8006d3c <_printf_i+0xb8>
 8006d44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d48:	2d00      	cmp	r5, #0
 8006d4a:	da03      	bge.n	8006d54 <_printf_i+0xd0>
 8006d4c:	232d      	movs	r3, #45	@ 0x2d
 8006d4e:	426d      	negs	r5, r5
 8006d50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d54:	4858      	ldr	r0, [pc, #352]	@ (8006eb8 <_printf_i+0x234>)
 8006d56:	230a      	movs	r3, #10
 8006d58:	e011      	b.n	8006d7e <_printf_i+0xfa>
 8006d5a:	6821      	ldr	r1, [r4, #0]
 8006d5c:	6833      	ldr	r3, [r6, #0]
 8006d5e:	0608      	lsls	r0, r1, #24
 8006d60:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d64:	d402      	bmi.n	8006d6c <_printf_i+0xe8>
 8006d66:	0649      	lsls	r1, r1, #25
 8006d68:	bf48      	it	mi
 8006d6a:	b2ad      	uxthmi	r5, r5
 8006d6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d6e:	4852      	ldr	r0, [pc, #328]	@ (8006eb8 <_printf_i+0x234>)
 8006d70:	6033      	str	r3, [r6, #0]
 8006d72:	bf14      	ite	ne
 8006d74:	230a      	movne	r3, #10
 8006d76:	2308      	moveq	r3, #8
 8006d78:	2100      	movs	r1, #0
 8006d7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d7e:	6866      	ldr	r6, [r4, #4]
 8006d80:	60a6      	str	r6, [r4, #8]
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	db05      	blt.n	8006d92 <_printf_i+0x10e>
 8006d86:	6821      	ldr	r1, [r4, #0]
 8006d88:	432e      	orrs	r6, r5
 8006d8a:	f021 0104 	bic.w	r1, r1, #4
 8006d8e:	6021      	str	r1, [r4, #0]
 8006d90:	d04b      	beq.n	8006e2a <_printf_i+0x1a6>
 8006d92:	4616      	mov	r6, r2
 8006d94:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d98:	fb03 5711 	mls	r7, r3, r1, r5
 8006d9c:	5dc7      	ldrb	r7, [r0, r7]
 8006d9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006da2:	462f      	mov	r7, r5
 8006da4:	42bb      	cmp	r3, r7
 8006da6:	460d      	mov	r5, r1
 8006da8:	d9f4      	bls.n	8006d94 <_printf_i+0x110>
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d10b      	bne.n	8006dc6 <_printf_i+0x142>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	07df      	lsls	r7, r3, #31
 8006db2:	d508      	bpl.n	8006dc6 <_printf_i+0x142>
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	6861      	ldr	r1, [r4, #4]
 8006db8:	4299      	cmp	r1, r3
 8006dba:	bfde      	ittt	le
 8006dbc:	2330      	movle	r3, #48	@ 0x30
 8006dbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dc6:	1b92      	subs	r2, r2, r6
 8006dc8:	6122      	str	r2, [r4, #16]
 8006dca:	f8cd a000 	str.w	sl, [sp]
 8006dce:	464b      	mov	r3, r9
 8006dd0:	aa03      	add	r2, sp, #12
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	4640      	mov	r0, r8
 8006dd6:	f7ff fee7 	bl	8006ba8 <_printf_common>
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d14a      	bne.n	8006e74 <_printf_i+0x1f0>
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295
 8006de2:	b004      	add	sp, #16
 8006de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	f043 0320 	orr.w	r3, r3, #32
 8006dee:	6023      	str	r3, [r4, #0]
 8006df0:	4832      	ldr	r0, [pc, #200]	@ (8006ebc <_printf_i+0x238>)
 8006df2:	2778      	movs	r7, #120	@ 0x78
 8006df4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	6831      	ldr	r1, [r6, #0]
 8006dfc:	061f      	lsls	r7, r3, #24
 8006dfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e02:	d402      	bmi.n	8006e0a <_printf_i+0x186>
 8006e04:	065f      	lsls	r7, r3, #25
 8006e06:	bf48      	it	mi
 8006e08:	b2ad      	uxthmi	r5, r5
 8006e0a:	6031      	str	r1, [r6, #0]
 8006e0c:	07d9      	lsls	r1, r3, #31
 8006e0e:	bf44      	itt	mi
 8006e10:	f043 0320 	orrmi.w	r3, r3, #32
 8006e14:	6023      	strmi	r3, [r4, #0]
 8006e16:	b11d      	cbz	r5, 8006e20 <_printf_i+0x19c>
 8006e18:	2310      	movs	r3, #16
 8006e1a:	e7ad      	b.n	8006d78 <_printf_i+0xf4>
 8006e1c:	4826      	ldr	r0, [pc, #152]	@ (8006eb8 <_printf_i+0x234>)
 8006e1e:	e7e9      	b.n	8006df4 <_printf_i+0x170>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	f023 0320 	bic.w	r3, r3, #32
 8006e26:	6023      	str	r3, [r4, #0]
 8006e28:	e7f6      	b.n	8006e18 <_printf_i+0x194>
 8006e2a:	4616      	mov	r6, r2
 8006e2c:	e7bd      	b.n	8006daa <_printf_i+0x126>
 8006e2e:	6833      	ldr	r3, [r6, #0]
 8006e30:	6825      	ldr	r5, [r4, #0]
 8006e32:	6961      	ldr	r1, [r4, #20]
 8006e34:	1d18      	adds	r0, r3, #4
 8006e36:	6030      	str	r0, [r6, #0]
 8006e38:	062e      	lsls	r6, r5, #24
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	d501      	bpl.n	8006e42 <_printf_i+0x1be>
 8006e3e:	6019      	str	r1, [r3, #0]
 8006e40:	e002      	b.n	8006e48 <_printf_i+0x1c4>
 8006e42:	0668      	lsls	r0, r5, #25
 8006e44:	d5fb      	bpl.n	8006e3e <_printf_i+0x1ba>
 8006e46:	8019      	strh	r1, [r3, #0]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	6123      	str	r3, [r4, #16]
 8006e4c:	4616      	mov	r6, r2
 8006e4e:	e7bc      	b.n	8006dca <_printf_i+0x146>
 8006e50:	6833      	ldr	r3, [r6, #0]
 8006e52:	1d1a      	adds	r2, r3, #4
 8006e54:	6032      	str	r2, [r6, #0]
 8006e56:	681e      	ldr	r6, [r3, #0]
 8006e58:	6862      	ldr	r2, [r4, #4]
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f7f9 f9b7 	bl	80001d0 <memchr>
 8006e62:	b108      	cbz	r0, 8006e68 <_printf_i+0x1e4>
 8006e64:	1b80      	subs	r0, r0, r6
 8006e66:	6060      	str	r0, [r4, #4]
 8006e68:	6863      	ldr	r3, [r4, #4]
 8006e6a:	6123      	str	r3, [r4, #16]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e72:	e7aa      	b.n	8006dca <_printf_i+0x146>
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	4632      	mov	r2, r6
 8006e78:	4649      	mov	r1, r9
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	47d0      	blx	sl
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d0ad      	beq.n	8006dde <_printf_i+0x15a>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	079b      	lsls	r3, r3, #30
 8006e86:	d413      	bmi.n	8006eb0 <_printf_i+0x22c>
 8006e88:	68e0      	ldr	r0, [r4, #12]
 8006e8a:	9b03      	ldr	r3, [sp, #12]
 8006e8c:	4298      	cmp	r0, r3
 8006e8e:	bfb8      	it	lt
 8006e90:	4618      	movlt	r0, r3
 8006e92:	e7a6      	b.n	8006de2 <_printf_i+0x15e>
 8006e94:	2301      	movs	r3, #1
 8006e96:	4632      	mov	r2, r6
 8006e98:	4649      	mov	r1, r9
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	47d0      	blx	sl
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d09d      	beq.n	8006dde <_printf_i+0x15a>
 8006ea2:	3501      	adds	r5, #1
 8006ea4:	68e3      	ldr	r3, [r4, #12]
 8006ea6:	9903      	ldr	r1, [sp, #12]
 8006ea8:	1a5b      	subs	r3, r3, r1
 8006eaa:	42ab      	cmp	r3, r5
 8006eac:	dcf2      	bgt.n	8006e94 <_printf_i+0x210>
 8006eae:	e7eb      	b.n	8006e88 <_printf_i+0x204>
 8006eb0:	2500      	movs	r5, #0
 8006eb2:	f104 0619 	add.w	r6, r4, #25
 8006eb6:	e7f5      	b.n	8006ea4 <_printf_i+0x220>
 8006eb8:	0800a138 	.word	0x0800a138
 8006ebc:	0800a149 	.word	0x0800a149

08006ec0 <_scanf_float>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	b087      	sub	sp, #28
 8006ec6:	4691      	mov	r9, r2
 8006ec8:	9303      	str	r3, [sp, #12]
 8006eca:	688b      	ldr	r3, [r1, #8]
 8006ecc:	1e5a      	subs	r2, r3, #1
 8006ece:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006ed2:	bf81      	itttt	hi
 8006ed4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006ed8:	eb03 0b05 	addhi.w	fp, r3, r5
 8006edc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006ee0:	608b      	strhi	r3, [r1, #8]
 8006ee2:	680b      	ldr	r3, [r1, #0]
 8006ee4:	460a      	mov	r2, r1
 8006ee6:	f04f 0500 	mov.w	r5, #0
 8006eea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006eee:	f842 3b1c 	str.w	r3, [r2], #28
 8006ef2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ef6:	4680      	mov	r8, r0
 8006ef8:	460c      	mov	r4, r1
 8006efa:	bf98      	it	ls
 8006efc:	f04f 0b00 	movls.w	fp, #0
 8006f00:	9201      	str	r2, [sp, #4]
 8006f02:	4616      	mov	r6, r2
 8006f04:	46aa      	mov	sl, r5
 8006f06:	462f      	mov	r7, r5
 8006f08:	9502      	str	r5, [sp, #8]
 8006f0a:	68a2      	ldr	r2, [r4, #8]
 8006f0c:	b15a      	cbz	r2, 8006f26 <_scanf_float+0x66>
 8006f0e:	f8d9 3000 	ldr.w	r3, [r9]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b4e      	cmp	r3, #78	@ 0x4e
 8006f16:	d863      	bhi.n	8006fe0 <_scanf_float+0x120>
 8006f18:	2b40      	cmp	r3, #64	@ 0x40
 8006f1a:	d83b      	bhi.n	8006f94 <_scanf_float+0xd4>
 8006f1c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006f20:	b2c8      	uxtb	r0, r1
 8006f22:	280e      	cmp	r0, #14
 8006f24:	d939      	bls.n	8006f9a <_scanf_float+0xda>
 8006f26:	b11f      	cbz	r7, 8006f30 <_scanf_float+0x70>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f34:	f1ba 0f01 	cmp.w	sl, #1
 8006f38:	f200 8114 	bhi.w	8007164 <_scanf_float+0x2a4>
 8006f3c:	9b01      	ldr	r3, [sp, #4]
 8006f3e:	429e      	cmp	r6, r3
 8006f40:	f200 8105 	bhi.w	800714e <_scanf_float+0x28e>
 8006f44:	2001      	movs	r0, #1
 8006f46:	b007      	add	sp, #28
 8006f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006f50:	2a0d      	cmp	r2, #13
 8006f52:	d8e8      	bhi.n	8006f26 <_scanf_float+0x66>
 8006f54:	a101      	add	r1, pc, #4	@ (adr r1, 8006f5c <_scanf_float+0x9c>)
 8006f56:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f5a:	bf00      	nop
 8006f5c:	080070a5 	.word	0x080070a5
 8006f60:	08006f27 	.word	0x08006f27
 8006f64:	08006f27 	.word	0x08006f27
 8006f68:	08006f27 	.word	0x08006f27
 8006f6c:	08007101 	.word	0x08007101
 8006f70:	080070db 	.word	0x080070db
 8006f74:	08006f27 	.word	0x08006f27
 8006f78:	08006f27 	.word	0x08006f27
 8006f7c:	080070b3 	.word	0x080070b3
 8006f80:	08006f27 	.word	0x08006f27
 8006f84:	08006f27 	.word	0x08006f27
 8006f88:	08006f27 	.word	0x08006f27
 8006f8c:	08006f27 	.word	0x08006f27
 8006f90:	0800706f 	.word	0x0800706f
 8006f94:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006f98:	e7da      	b.n	8006f50 <_scanf_float+0x90>
 8006f9a:	290e      	cmp	r1, #14
 8006f9c:	d8c3      	bhi.n	8006f26 <_scanf_float+0x66>
 8006f9e:	a001      	add	r0, pc, #4	@ (adr r0, 8006fa4 <_scanf_float+0xe4>)
 8006fa0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006fa4:	0800705f 	.word	0x0800705f
 8006fa8:	08006f27 	.word	0x08006f27
 8006fac:	0800705f 	.word	0x0800705f
 8006fb0:	080070ef 	.word	0x080070ef
 8006fb4:	08006f27 	.word	0x08006f27
 8006fb8:	08007001 	.word	0x08007001
 8006fbc:	08007045 	.word	0x08007045
 8006fc0:	08007045 	.word	0x08007045
 8006fc4:	08007045 	.word	0x08007045
 8006fc8:	08007045 	.word	0x08007045
 8006fcc:	08007045 	.word	0x08007045
 8006fd0:	08007045 	.word	0x08007045
 8006fd4:	08007045 	.word	0x08007045
 8006fd8:	08007045 	.word	0x08007045
 8006fdc:	08007045 	.word	0x08007045
 8006fe0:	2b6e      	cmp	r3, #110	@ 0x6e
 8006fe2:	d809      	bhi.n	8006ff8 <_scanf_float+0x138>
 8006fe4:	2b60      	cmp	r3, #96	@ 0x60
 8006fe6:	d8b1      	bhi.n	8006f4c <_scanf_float+0x8c>
 8006fe8:	2b54      	cmp	r3, #84	@ 0x54
 8006fea:	d07b      	beq.n	80070e4 <_scanf_float+0x224>
 8006fec:	2b59      	cmp	r3, #89	@ 0x59
 8006fee:	d19a      	bne.n	8006f26 <_scanf_float+0x66>
 8006ff0:	2d07      	cmp	r5, #7
 8006ff2:	d198      	bne.n	8006f26 <_scanf_float+0x66>
 8006ff4:	2508      	movs	r5, #8
 8006ff6:	e02f      	b.n	8007058 <_scanf_float+0x198>
 8006ff8:	2b74      	cmp	r3, #116	@ 0x74
 8006ffa:	d073      	beq.n	80070e4 <_scanf_float+0x224>
 8006ffc:	2b79      	cmp	r3, #121	@ 0x79
 8006ffe:	e7f6      	b.n	8006fee <_scanf_float+0x12e>
 8007000:	6821      	ldr	r1, [r4, #0]
 8007002:	05c8      	lsls	r0, r1, #23
 8007004:	d51e      	bpl.n	8007044 <_scanf_float+0x184>
 8007006:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800700a:	6021      	str	r1, [r4, #0]
 800700c:	3701      	adds	r7, #1
 800700e:	f1bb 0f00 	cmp.w	fp, #0
 8007012:	d003      	beq.n	800701c <_scanf_float+0x15c>
 8007014:	3201      	adds	r2, #1
 8007016:	f10b 3bff 	add.w	fp, fp, #4294967295
 800701a:	60a2      	str	r2, [r4, #8]
 800701c:	68a3      	ldr	r3, [r4, #8]
 800701e:	3b01      	subs	r3, #1
 8007020:	60a3      	str	r3, [r4, #8]
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	3301      	adds	r3, #1
 8007026:	6123      	str	r3, [r4, #16]
 8007028:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800702c:	3b01      	subs	r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	f8c9 3004 	str.w	r3, [r9, #4]
 8007034:	f340 8082 	ble.w	800713c <_scanf_float+0x27c>
 8007038:	f8d9 3000 	ldr.w	r3, [r9]
 800703c:	3301      	adds	r3, #1
 800703e:	f8c9 3000 	str.w	r3, [r9]
 8007042:	e762      	b.n	8006f0a <_scanf_float+0x4a>
 8007044:	eb1a 0105 	adds.w	r1, sl, r5
 8007048:	f47f af6d 	bne.w	8006f26 <_scanf_float+0x66>
 800704c:	6822      	ldr	r2, [r4, #0]
 800704e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007052:	6022      	str	r2, [r4, #0]
 8007054:	460d      	mov	r5, r1
 8007056:	468a      	mov	sl, r1
 8007058:	f806 3b01 	strb.w	r3, [r6], #1
 800705c:	e7de      	b.n	800701c <_scanf_float+0x15c>
 800705e:	6822      	ldr	r2, [r4, #0]
 8007060:	0610      	lsls	r0, r2, #24
 8007062:	f57f af60 	bpl.w	8006f26 <_scanf_float+0x66>
 8007066:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800706a:	6022      	str	r2, [r4, #0]
 800706c:	e7f4      	b.n	8007058 <_scanf_float+0x198>
 800706e:	f1ba 0f00 	cmp.w	sl, #0
 8007072:	d10c      	bne.n	800708e <_scanf_float+0x1ce>
 8007074:	b977      	cbnz	r7, 8007094 <_scanf_float+0x1d4>
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800707c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007080:	d108      	bne.n	8007094 <_scanf_float+0x1d4>
 8007082:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007086:	6022      	str	r2, [r4, #0]
 8007088:	f04f 0a01 	mov.w	sl, #1
 800708c:	e7e4      	b.n	8007058 <_scanf_float+0x198>
 800708e:	f1ba 0f02 	cmp.w	sl, #2
 8007092:	d050      	beq.n	8007136 <_scanf_float+0x276>
 8007094:	2d01      	cmp	r5, #1
 8007096:	d002      	beq.n	800709e <_scanf_float+0x1de>
 8007098:	2d04      	cmp	r5, #4
 800709a:	f47f af44 	bne.w	8006f26 <_scanf_float+0x66>
 800709e:	3501      	adds	r5, #1
 80070a0:	b2ed      	uxtb	r5, r5
 80070a2:	e7d9      	b.n	8007058 <_scanf_float+0x198>
 80070a4:	f1ba 0f01 	cmp.w	sl, #1
 80070a8:	f47f af3d 	bne.w	8006f26 <_scanf_float+0x66>
 80070ac:	f04f 0a02 	mov.w	sl, #2
 80070b0:	e7d2      	b.n	8007058 <_scanf_float+0x198>
 80070b2:	b975      	cbnz	r5, 80070d2 <_scanf_float+0x212>
 80070b4:	2f00      	cmp	r7, #0
 80070b6:	f47f af37 	bne.w	8006f28 <_scanf_float+0x68>
 80070ba:	6822      	ldr	r2, [r4, #0]
 80070bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80070c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80070c4:	f040 8103 	bne.w	80072ce <_scanf_float+0x40e>
 80070c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80070cc:	6022      	str	r2, [r4, #0]
 80070ce:	2501      	movs	r5, #1
 80070d0:	e7c2      	b.n	8007058 <_scanf_float+0x198>
 80070d2:	2d03      	cmp	r5, #3
 80070d4:	d0e3      	beq.n	800709e <_scanf_float+0x1de>
 80070d6:	2d05      	cmp	r5, #5
 80070d8:	e7df      	b.n	800709a <_scanf_float+0x1da>
 80070da:	2d02      	cmp	r5, #2
 80070dc:	f47f af23 	bne.w	8006f26 <_scanf_float+0x66>
 80070e0:	2503      	movs	r5, #3
 80070e2:	e7b9      	b.n	8007058 <_scanf_float+0x198>
 80070e4:	2d06      	cmp	r5, #6
 80070e6:	f47f af1e 	bne.w	8006f26 <_scanf_float+0x66>
 80070ea:	2507      	movs	r5, #7
 80070ec:	e7b4      	b.n	8007058 <_scanf_float+0x198>
 80070ee:	6822      	ldr	r2, [r4, #0]
 80070f0:	0591      	lsls	r1, r2, #22
 80070f2:	f57f af18 	bpl.w	8006f26 <_scanf_float+0x66>
 80070f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80070fa:	6022      	str	r2, [r4, #0]
 80070fc:	9702      	str	r7, [sp, #8]
 80070fe:	e7ab      	b.n	8007058 <_scanf_float+0x198>
 8007100:	6822      	ldr	r2, [r4, #0]
 8007102:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007106:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800710a:	d005      	beq.n	8007118 <_scanf_float+0x258>
 800710c:	0550      	lsls	r0, r2, #21
 800710e:	f57f af0a 	bpl.w	8006f26 <_scanf_float+0x66>
 8007112:	2f00      	cmp	r7, #0
 8007114:	f000 80db 	beq.w	80072ce <_scanf_float+0x40e>
 8007118:	0591      	lsls	r1, r2, #22
 800711a:	bf58      	it	pl
 800711c:	9902      	ldrpl	r1, [sp, #8]
 800711e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007122:	bf58      	it	pl
 8007124:	1a79      	subpl	r1, r7, r1
 8007126:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800712a:	bf58      	it	pl
 800712c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007130:	6022      	str	r2, [r4, #0]
 8007132:	2700      	movs	r7, #0
 8007134:	e790      	b.n	8007058 <_scanf_float+0x198>
 8007136:	f04f 0a03 	mov.w	sl, #3
 800713a:	e78d      	b.n	8007058 <_scanf_float+0x198>
 800713c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007140:	4649      	mov	r1, r9
 8007142:	4640      	mov	r0, r8
 8007144:	4798      	blx	r3
 8007146:	2800      	cmp	r0, #0
 8007148:	f43f aedf 	beq.w	8006f0a <_scanf_float+0x4a>
 800714c:	e6eb      	b.n	8006f26 <_scanf_float+0x66>
 800714e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007152:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007156:	464a      	mov	r2, r9
 8007158:	4640      	mov	r0, r8
 800715a:	4798      	blx	r3
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	3b01      	subs	r3, #1
 8007160:	6123      	str	r3, [r4, #16]
 8007162:	e6eb      	b.n	8006f3c <_scanf_float+0x7c>
 8007164:	1e6b      	subs	r3, r5, #1
 8007166:	2b06      	cmp	r3, #6
 8007168:	d824      	bhi.n	80071b4 <_scanf_float+0x2f4>
 800716a:	2d02      	cmp	r5, #2
 800716c:	d836      	bhi.n	80071dc <_scanf_float+0x31c>
 800716e:	9b01      	ldr	r3, [sp, #4]
 8007170:	429e      	cmp	r6, r3
 8007172:	f67f aee7 	bls.w	8006f44 <_scanf_float+0x84>
 8007176:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800717a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800717e:	464a      	mov	r2, r9
 8007180:	4640      	mov	r0, r8
 8007182:	4798      	blx	r3
 8007184:	6923      	ldr	r3, [r4, #16]
 8007186:	3b01      	subs	r3, #1
 8007188:	6123      	str	r3, [r4, #16]
 800718a:	e7f0      	b.n	800716e <_scanf_float+0x2ae>
 800718c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007190:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007194:	464a      	mov	r2, r9
 8007196:	4640      	mov	r0, r8
 8007198:	4798      	blx	r3
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	3b01      	subs	r3, #1
 800719e:	6123      	str	r3, [r4, #16]
 80071a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071a4:	fa5f fa8a 	uxtb.w	sl, sl
 80071a8:	f1ba 0f02 	cmp.w	sl, #2
 80071ac:	d1ee      	bne.n	800718c <_scanf_float+0x2cc>
 80071ae:	3d03      	subs	r5, #3
 80071b0:	b2ed      	uxtb	r5, r5
 80071b2:	1b76      	subs	r6, r6, r5
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	05da      	lsls	r2, r3, #23
 80071b8:	d530      	bpl.n	800721c <_scanf_float+0x35c>
 80071ba:	055b      	lsls	r3, r3, #21
 80071bc:	d511      	bpl.n	80071e2 <_scanf_float+0x322>
 80071be:	9b01      	ldr	r3, [sp, #4]
 80071c0:	429e      	cmp	r6, r3
 80071c2:	f67f aebf 	bls.w	8006f44 <_scanf_float+0x84>
 80071c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071ce:	464a      	mov	r2, r9
 80071d0:	4640      	mov	r0, r8
 80071d2:	4798      	blx	r3
 80071d4:	6923      	ldr	r3, [r4, #16]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	6123      	str	r3, [r4, #16]
 80071da:	e7f0      	b.n	80071be <_scanf_float+0x2fe>
 80071dc:	46aa      	mov	sl, r5
 80071de:	46b3      	mov	fp, r6
 80071e0:	e7de      	b.n	80071a0 <_scanf_float+0x2e0>
 80071e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	2965      	cmp	r1, #101	@ 0x65
 80071ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80071ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80071f2:	6123      	str	r3, [r4, #16]
 80071f4:	d00c      	beq.n	8007210 <_scanf_float+0x350>
 80071f6:	2945      	cmp	r1, #69	@ 0x45
 80071f8:	d00a      	beq.n	8007210 <_scanf_float+0x350>
 80071fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071fe:	464a      	mov	r2, r9
 8007200:	4640      	mov	r0, r8
 8007202:	4798      	blx	r3
 8007204:	6923      	ldr	r3, [r4, #16]
 8007206:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800720a:	3b01      	subs	r3, #1
 800720c:	1eb5      	subs	r5, r6, #2
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007214:	464a      	mov	r2, r9
 8007216:	4640      	mov	r0, r8
 8007218:	4798      	blx	r3
 800721a:	462e      	mov	r6, r5
 800721c:	6822      	ldr	r2, [r4, #0]
 800721e:	f012 0210 	ands.w	r2, r2, #16
 8007222:	d001      	beq.n	8007228 <_scanf_float+0x368>
 8007224:	2000      	movs	r0, #0
 8007226:	e68e      	b.n	8006f46 <_scanf_float+0x86>
 8007228:	7032      	strb	r2, [r6, #0]
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007234:	d125      	bne.n	8007282 <_scanf_float+0x3c2>
 8007236:	9b02      	ldr	r3, [sp, #8]
 8007238:	429f      	cmp	r7, r3
 800723a:	d00a      	beq.n	8007252 <_scanf_float+0x392>
 800723c:	1bda      	subs	r2, r3, r7
 800723e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007242:	429e      	cmp	r6, r3
 8007244:	bf28      	it	cs
 8007246:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800724a:	4922      	ldr	r1, [pc, #136]	@ (80072d4 <_scanf_float+0x414>)
 800724c:	4630      	mov	r0, r6
 800724e:	f000 f907 	bl	8007460 <siprintf>
 8007252:	9901      	ldr	r1, [sp, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	4640      	mov	r0, r8
 8007258:	f7ff f9d6 	bl	8006608 <_strtod_r>
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	6821      	ldr	r1, [r4, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f011 0f02 	tst.w	r1, #2
 8007266:	ec57 6b10 	vmov	r6, r7, d0
 800726a:	f103 0204 	add.w	r2, r3, #4
 800726e:	d015      	beq.n	800729c <_scanf_float+0x3dc>
 8007270:	9903      	ldr	r1, [sp, #12]
 8007272:	600a      	str	r2, [r1, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	e9c3 6700 	strd	r6, r7, [r3]
 800727a:	68e3      	ldr	r3, [r4, #12]
 800727c:	3301      	adds	r3, #1
 800727e:	60e3      	str	r3, [r4, #12]
 8007280:	e7d0      	b.n	8007224 <_scanf_float+0x364>
 8007282:	9b04      	ldr	r3, [sp, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0e4      	beq.n	8007252 <_scanf_float+0x392>
 8007288:	9905      	ldr	r1, [sp, #20]
 800728a:	230a      	movs	r3, #10
 800728c:	3101      	adds	r1, #1
 800728e:	4640      	mov	r0, r8
 8007290:	f002 f998 	bl	80095c4 <_strtol_r>
 8007294:	9b04      	ldr	r3, [sp, #16]
 8007296:	9e05      	ldr	r6, [sp, #20]
 8007298:	1ac2      	subs	r2, r0, r3
 800729a:	e7d0      	b.n	800723e <_scanf_float+0x37e>
 800729c:	f011 0f04 	tst.w	r1, #4
 80072a0:	9903      	ldr	r1, [sp, #12]
 80072a2:	600a      	str	r2, [r1, #0]
 80072a4:	d1e6      	bne.n	8007274 <_scanf_float+0x3b4>
 80072a6:	681d      	ldr	r5, [r3, #0]
 80072a8:	4632      	mov	r2, r6
 80072aa:	463b      	mov	r3, r7
 80072ac:	4630      	mov	r0, r6
 80072ae:	4639      	mov	r1, r7
 80072b0:	f7f9 fc3c 	bl	8000b2c <__aeabi_dcmpun>
 80072b4:	b128      	cbz	r0, 80072c2 <_scanf_float+0x402>
 80072b6:	4808      	ldr	r0, [pc, #32]	@ (80072d8 <_scanf_float+0x418>)
 80072b8:	f000 fa4e 	bl	8007758 <nanf>
 80072bc:	ed85 0a00 	vstr	s0, [r5]
 80072c0:	e7db      	b.n	800727a <_scanf_float+0x3ba>
 80072c2:	4630      	mov	r0, r6
 80072c4:	4639      	mov	r1, r7
 80072c6:	f7f9 fc8f 	bl	8000be8 <__aeabi_d2f>
 80072ca:	6028      	str	r0, [r5, #0]
 80072cc:	e7d5      	b.n	800727a <_scanf_float+0x3ba>
 80072ce:	2700      	movs	r7, #0
 80072d0:	e62e      	b.n	8006f30 <_scanf_float+0x70>
 80072d2:	bf00      	nop
 80072d4:	0800a15a 	.word	0x0800a15a
 80072d8:	0800a213 	.word	0x0800a213

080072dc <std>:
 80072dc:	2300      	movs	r3, #0
 80072de:	b510      	push	{r4, lr}
 80072e0:	4604      	mov	r4, r0
 80072e2:	e9c0 3300 	strd	r3, r3, [r0]
 80072e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072ea:	6083      	str	r3, [r0, #8]
 80072ec:	8181      	strh	r1, [r0, #12]
 80072ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80072f0:	81c2      	strh	r2, [r0, #14]
 80072f2:	6183      	str	r3, [r0, #24]
 80072f4:	4619      	mov	r1, r3
 80072f6:	2208      	movs	r2, #8
 80072f8:	305c      	adds	r0, #92	@ 0x5c
 80072fa:	f000 f916 	bl	800752a <memset>
 80072fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007334 <std+0x58>)
 8007300:	6263      	str	r3, [r4, #36]	@ 0x24
 8007302:	4b0d      	ldr	r3, [pc, #52]	@ (8007338 <std+0x5c>)
 8007304:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007306:	4b0d      	ldr	r3, [pc, #52]	@ (800733c <std+0x60>)
 8007308:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800730a:	4b0d      	ldr	r3, [pc, #52]	@ (8007340 <std+0x64>)
 800730c:	6323      	str	r3, [r4, #48]	@ 0x30
 800730e:	4b0d      	ldr	r3, [pc, #52]	@ (8007344 <std+0x68>)
 8007310:	6224      	str	r4, [r4, #32]
 8007312:	429c      	cmp	r4, r3
 8007314:	d006      	beq.n	8007324 <std+0x48>
 8007316:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800731a:	4294      	cmp	r4, r2
 800731c:	d002      	beq.n	8007324 <std+0x48>
 800731e:	33d0      	adds	r3, #208	@ 0xd0
 8007320:	429c      	cmp	r4, r3
 8007322:	d105      	bne.n	8007330 <std+0x54>
 8007324:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800732c:	f000 b9f8 	b.w	8007720 <__retarget_lock_init_recursive>
 8007330:	bd10      	pop	{r4, pc}
 8007332:	bf00      	nop
 8007334:	080074a5 	.word	0x080074a5
 8007338:	080074c7 	.word	0x080074c7
 800733c:	080074ff 	.word	0x080074ff
 8007340:	08007523 	.word	0x08007523
 8007344:	200005f8 	.word	0x200005f8

08007348 <stdio_exit_handler>:
 8007348:	4a02      	ldr	r2, [pc, #8]	@ (8007354 <stdio_exit_handler+0xc>)
 800734a:	4903      	ldr	r1, [pc, #12]	@ (8007358 <stdio_exit_handler+0x10>)
 800734c:	4803      	ldr	r0, [pc, #12]	@ (800735c <stdio_exit_handler+0x14>)
 800734e:	f000 b869 	b.w	8007424 <_fwalk_sglue>
 8007352:	bf00      	nop
 8007354:	200000f0 	.word	0x200000f0
 8007358:	08009999 	.word	0x08009999
 800735c:	2000026c 	.word	0x2000026c

08007360 <cleanup_stdio>:
 8007360:	6841      	ldr	r1, [r0, #4]
 8007362:	4b0c      	ldr	r3, [pc, #48]	@ (8007394 <cleanup_stdio+0x34>)
 8007364:	4299      	cmp	r1, r3
 8007366:	b510      	push	{r4, lr}
 8007368:	4604      	mov	r4, r0
 800736a:	d001      	beq.n	8007370 <cleanup_stdio+0x10>
 800736c:	f002 fb14 	bl	8009998 <_fflush_r>
 8007370:	68a1      	ldr	r1, [r4, #8]
 8007372:	4b09      	ldr	r3, [pc, #36]	@ (8007398 <cleanup_stdio+0x38>)
 8007374:	4299      	cmp	r1, r3
 8007376:	d002      	beq.n	800737e <cleanup_stdio+0x1e>
 8007378:	4620      	mov	r0, r4
 800737a:	f002 fb0d 	bl	8009998 <_fflush_r>
 800737e:	68e1      	ldr	r1, [r4, #12]
 8007380:	4b06      	ldr	r3, [pc, #24]	@ (800739c <cleanup_stdio+0x3c>)
 8007382:	4299      	cmp	r1, r3
 8007384:	d004      	beq.n	8007390 <cleanup_stdio+0x30>
 8007386:	4620      	mov	r0, r4
 8007388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800738c:	f002 bb04 	b.w	8009998 <_fflush_r>
 8007390:	bd10      	pop	{r4, pc}
 8007392:	bf00      	nop
 8007394:	200005f8 	.word	0x200005f8
 8007398:	20000660 	.word	0x20000660
 800739c:	200006c8 	.word	0x200006c8

080073a0 <global_stdio_init.part.0>:
 80073a0:	b510      	push	{r4, lr}
 80073a2:	4b0b      	ldr	r3, [pc, #44]	@ (80073d0 <global_stdio_init.part.0+0x30>)
 80073a4:	4c0b      	ldr	r4, [pc, #44]	@ (80073d4 <global_stdio_init.part.0+0x34>)
 80073a6:	4a0c      	ldr	r2, [pc, #48]	@ (80073d8 <global_stdio_init.part.0+0x38>)
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	4620      	mov	r0, r4
 80073ac:	2200      	movs	r2, #0
 80073ae:	2104      	movs	r1, #4
 80073b0:	f7ff ff94 	bl	80072dc <std>
 80073b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073b8:	2201      	movs	r2, #1
 80073ba:	2109      	movs	r1, #9
 80073bc:	f7ff ff8e 	bl	80072dc <std>
 80073c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073c4:	2202      	movs	r2, #2
 80073c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073ca:	2112      	movs	r1, #18
 80073cc:	f7ff bf86 	b.w	80072dc <std>
 80073d0:	20000730 	.word	0x20000730
 80073d4:	200005f8 	.word	0x200005f8
 80073d8:	08007349 	.word	0x08007349

080073dc <__sfp_lock_acquire>:
 80073dc:	4801      	ldr	r0, [pc, #4]	@ (80073e4 <__sfp_lock_acquire+0x8>)
 80073de:	f000 b9a0 	b.w	8007722 <__retarget_lock_acquire_recursive>
 80073e2:	bf00      	nop
 80073e4:	20000739 	.word	0x20000739

080073e8 <__sfp_lock_release>:
 80073e8:	4801      	ldr	r0, [pc, #4]	@ (80073f0 <__sfp_lock_release+0x8>)
 80073ea:	f000 b99b 	b.w	8007724 <__retarget_lock_release_recursive>
 80073ee:	bf00      	nop
 80073f0:	20000739 	.word	0x20000739

080073f4 <__sinit>:
 80073f4:	b510      	push	{r4, lr}
 80073f6:	4604      	mov	r4, r0
 80073f8:	f7ff fff0 	bl	80073dc <__sfp_lock_acquire>
 80073fc:	6a23      	ldr	r3, [r4, #32]
 80073fe:	b11b      	cbz	r3, 8007408 <__sinit+0x14>
 8007400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007404:	f7ff bff0 	b.w	80073e8 <__sfp_lock_release>
 8007408:	4b04      	ldr	r3, [pc, #16]	@ (800741c <__sinit+0x28>)
 800740a:	6223      	str	r3, [r4, #32]
 800740c:	4b04      	ldr	r3, [pc, #16]	@ (8007420 <__sinit+0x2c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1f5      	bne.n	8007400 <__sinit+0xc>
 8007414:	f7ff ffc4 	bl	80073a0 <global_stdio_init.part.0>
 8007418:	e7f2      	b.n	8007400 <__sinit+0xc>
 800741a:	bf00      	nop
 800741c:	08007361 	.word	0x08007361
 8007420:	20000730 	.word	0x20000730

08007424 <_fwalk_sglue>:
 8007424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007428:	4607      	mov	r7, r0
 800742a:	4688      	mov	r8, r1
 800742c:	4614      	mov	r4, r2
 800742e:	2600      	movs	r6, #0
 8007430:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007434:	f1b9 0901 	subs.w	r9, r9, #1
 8007438:	d505      	bpl.n	8007446 <_fwalk_sglue+0x22>
 800743a:	6824      	ldr	r4, [r4, #0]
 800743c:	2c00      	cmp	r4, #0
 800743e:	d1f7      	bne.n	8007430 <_fwalk_sglue+0xc>
 8007440:	4630      	mov	r0, r6
 8007442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007446:	89ab      	ldrh	r3, [r5, #12]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d907      	bls.n	800745c <_fwalk_sglue+0x38>
 800744c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007450:	3301      	adds	r3, #1
 8007452:	d003      	beq.n	800745c <_fwalk_sglue+0x38>
 8007454:	4629      	mov	r1, r5
 8007456:	4638      	mov	r0, r7
 8007458:	47c0      	blx	r8
 800745a:	4306      	orrs	r6, r0
 800745c:	3568      	adds	r5, #104	@ 0x68
 800745e:	e7e9      	b.n	8007434 <_fwalk_sglue+0x10>

08007460 <siprintf>:
 8007460:	b40e      	push	{r1, r2, r3}
 8007462:	b510      	push	{r4, lr}
 8007464:	b09d      	sub	sp, #116	@ 0x74
 8007466:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007468:	9002      	str	r0, [sp, #8]
 800746a:	9006      	str	r0, [sp, #24]
 800746c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007470:	480a      	ldr	r0, [pc, #40]	@ (800749c <siprintf+0x3c>)
 8007472:	9107      	str	r1, [sp, #28]
 8007474:	9104      	str	r1, [sp, #16]
 8007476:	490a      	ldr	r1, [pc, #40]	@ (80074a0 <siprintf+0x40>)
 8007478:	f853 2b04 	ldr.w	r2, [r3], #4
 800747c:	9105      	str	r1, [sp, #20]
 800747e:	2400      	movs	r4, #0
 8007480:	a902      	add	r1, sp, #8
 8007482:	6800      	ldr	r0, [r0, #0]
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007488:	f002 f906 	bl	8009698 <_svfiprintf_r>
 800748c:	9b02      	ldr	r3, [sp, #8]
 800748e:	701c      	strb	r4, [r3, #0]
 8007490:	b01d      	add	sp, #116	@ 0x74
 8007492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007496:	b003      	add	sp, #12
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	20000268 	.word	0x20000268
 80074a0:	ffff0208 	.word	0xffff0208

080074a4 <__sread>:
 80074a4:	b510      	push	{r4, lr}
 80074a6:	460c      	mov	r4, r1
 80074a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ac:	f000 f8da 	bl	8007664 <_read_r>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	bfab      	itete	ge
 80074b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074b6:	89a3      	ldrhlt	r3, [r4, #12]
 80074b8:	181b      	addge	r3, r3, r0
 80074ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074be:	bfac      	ite	ge
 80074c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074c2:	81a3      	strhlt	r3, [r4, #12]
 80074c4:	bd10      	pop	{r4, pc}

080074c6 <__swrite>:
 80074c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ca:	461f      	mov	r7, r3
 80074cc:	898b      	ldrh	r3, [r1, #12]
 80074ce:	05db      	lsls	r3, r3, #23
 80074d0:	4605      	mov	r5, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	4616      	mov	r6, r2
 80074d6:	d505      	bpl.n	80074e4 <__swrite+0x1e>
 80074d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074dc:	2302      	movs	r3, #2
 80074de:	2200      	movs	r2, #0
 80074e0:	f000 f8ae 	bl	8007640 <_lseek_r>
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074ee:	81a3      	strh	r3, [r4, #12]
 80074f0:	4632      	mov	r2, r6
 80074f2:	463b      	mov	r3, r7
 80074f4:	4628      	mov	r0, r5
 80074f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074fa:	f000 b8d5 	b.w	80076a8 <_write_r>

080074fe <__sseek>:
 80074fe:	b510      	push	{r4, lr}
 8007500:	460c      	mov	r4, r1
 8007502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007506:	f000 f89b 	bl	8007640 <_lseek_r>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	bf15      	itete	ne
 8007510:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007512:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007516:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800751a:	81a3      	strheq	r3, [r4, #12]
 800751c:	bf18      	it	ne
 800751e:	81a3      	strhne	r3, [r4, #12]
 8007520:	bd10      	pop	{r4, pc}

08007522 <__sclose>:
 8007522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007526:	f000 b87b 	b.w	8007620 <_close_r>

0800752a <memset>:
 800752a:	4402      	add	r2, r0
 800752c:	4603      	mov	r3, r0
 800752e:	4293      	cmp	r3, r2
 8007530:	d100      	bne.n	8007534 <memset+0xa>
 8007532:	4770      	bx	lr
 8007534:	f803 1b01 	strb.w	r1, [r3], #1
 8007538:	e7f9      	b.n	800752e <memset+0x4>

0800753a <strncmp>:
 800753a:	b510      	push	{r4, lr}
 800753c:	b16a      	cbz	r2, 800755a <strncmp+0x20>
 800753e:	3901      	subs	r1, #1
 8007540:	1884      	adds	r4, r0, r2
 8007542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007546:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800754a:	429a      	cmp	r2, r3
 800754c:	d103      	bne.n	8007556 <strncmp+0x1c>
 800754e:	42a0      	cmp	r0, r4
 8007550:	d001      	beq.n	8007556 <strncmp+0x1c>
 8007552:	2a00      	cmp	r2, #0
 8007554:	d1f5      	bne.n	8007542 <strncmp+0x8>
 8007556:	1ad0      	subs	r0, r2, r3
 8007558:	bd10      	pop	{r4, pc}
 800755a:	4610      	mov	r0, r2
 800755c:	e7fc      	b.n	8007558 <strncmp+0x1e>
	...

08007560 <strtok>:
 8007560:	4b16      	ldr	r3, [pc, #88]	@ (80075bc <strtok+0x5c>)
 8007562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007566:	681f      	ldr	r7, [r3, #0]
 8007568:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800756a:	4605      	mov	r5, r0
 800756c:	460e      	mov	r6, r1
 800756e:	b9ec      	cbnz	r4, 80075ac <strtok+0x4c>
 8007570:	2050      	movs	r0, #80	@ 0x50
 8007572:	f7fe f991 	bl	8005898 <malloc>
 8007576:	4602      	mov	r2, r0
 8007578:	6478      	str	r0, [r7, #68]	@ 0x44
 800757a:	b920      	cbnz	r0, 8007586 <strtok+0x26>
 800757c:	4b10      	ldr	r3, [pc, #64]	@ (80075c0 <strtok+0x60>)
 800757e:	4811      	ldr	r0, [pc, #68]	@ (80075c4 <strtok+0x64>)
 8007580:	215b      	movs	r1, #91	@ 0x5b
 8007582:	f000 f8ef 	bl	8007764 <__assert_func>
 8007586:	e9c0 4400 	strd	r4, r4, [r0]
 800758a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800758e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007592:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007596:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800759a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800759e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80075a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80075a6:	6184      	str	r4, [r0, #24]
 80075a8:	7704      	strb	r4, [r0, #28]
 80075aa:	6244      	str	r4, [r0, #36]	@ 0x24
 80075ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075ae:	4631      	mov	r1, r6
 80075b0:	4628      	mov	r0, r5
 80075b2:	2301      	movs	r3, #1
 80075b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075b8:	f000 b806 	b.w	80075c8 <__strtok_r>
 80075bc:	20000268 	.word	0x20000268
 80075c0:	0800a15f 	.word	0x0800a15f
 80075c4:	0800a176 	.word	0x0800a176

080075c8 <__strtok_r>:
 80075c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ca:	4604      	mov	r4, r0
 80075cc:	b908      	cbnz	r0, 80075d2 <__strtok_r+0xa>
 80075ce:	6814      	ldr	r4, [r2, #0]
 80075d0:	b144      	cbz	r4, 80075e4 <__strtok_r+0x1c>
 80075d2:	4620      	mov	r0, r4
 80075d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80075d8:	460f      	mov	r7, r1
 80075da:	f817 6b01 	ldrb.w	r6, [r7], #1
 80075de:	b91e      	cbnz	r6, 80075e8 <__strtok_r+0x20>
 80075e0:	b965      	cbnz	r5, 80075fc <__strtok_r+0x34>
 80075e2:	6015      	str	r5, [r2, #0]
 80075e4:	2000      	movs	r0, #0
 80075e6:	e005      	b.n	80075f4 <__strtok_r+0x2c>
 80075e8:	42b5      	cmp	r5, r6
 80075ea:	d1f6      	bne.n	80075da <__strtok_r+0x12>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1f0      	bne.n	80075d2 <__strtok_r+0xa>
 80075f0:	6014      	str	r4, [r2, #0]
 80075f2:	7003      	strb	r3, [r0, #0]
 80075f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075f6:	461c      	mov	r4, r3
 80075f8:	e00c      	b.n	8007614 <__strtok_r+0x4c>
 80075fa:	b91d      	cbnz	r5, 8007604 <__strtok_r+0x3c>
 80075fc:	4627      	mov	r7, r4
 80075fe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007602:	460e      	mov	r6, r1
 8007604:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007608:	42ab      	cmp	r3, r5
 800760a:	d1f6      	bne.n	80075fa <__strtok_r+0x32>
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0f2      	beq.n	80075f6 <__strtok_r+0x2e>
 8007610:	2300      	movs	r3, #0
 8007612:	703b      	strb	r3, [r7, #0]
 8007614:	6014      	str	r4, [r2, #0]
 8007616:	e7ed      	b.n	80075f4 <__strtok_r+0x2c>

08007618 <_localeconv_r>:
 8007618:	4800      	ldr	r0, [pc, #0]	@ (800761c <_localeconv_r+0x4>)
 800761a:	4770      	bx	lr
 800761c:	200001ec 	.word	0x200001ec

08007620 <_close_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4d06      	ldr	r5, [pc, #24]	@ (800763c <_close_r+0x1c>)
 8007624:	2300      	movs	r3, #0
 8007626:	4604      	mov	r4, r0
 8007628:	4608      	mov	r0, r1
 800762a:	602b      	str	r3, [r5, #0]
 800762c:	f7fa fd18 	bl	8002060 <_close>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d102      	bne.n	800763a <_close_r+0x1a>
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	b103      	cbz	r3, 800763a <_close_r+0x1a>
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	20000734 	.word	0x20000734

08007640 <_lseek_r>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	4d07      	ldr	r5, [pc, #28]	@ (8007660 <_lseek_r+0x20>)
 8007644:	4604      	mov	r4, r0
 8007646:	4608      	mov	r0, r1
 8007648:	4611      	mov	r1, r2
 800764a:	2200      	movs	r2, #0
 800764c:	602a      	str	r2, [r5, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	f7fa fd2d 	bl	80020ae <_lseek>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d102      	bne.n	800765e <_lseek_r+0x1e>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	b103      	cbz	r3, 800765e <_lseek_r+0x1e>
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	20000734 	.word	0x20000734

08007664 <_read_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4d07      	ldr	r5, [pc, #28]	@ (8007684 <_read_r+0x20>)
 8007668:	4604      	mov	r4, r0
 800766a:	4608      	mov	r0, r1
 800766c:	4611      	mov	r1, r2
 800766e:	2200      	movs	r2, #0
 8007670:	602a      	str	r2, [r5, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	f7fa fcd7 	bl	8002026 <_read>
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	d102      	bne.n	8007682 <_read_r+0x1e>
 800767c:	682b      	ldr	r3, [r5, #0]
 800767e:	b103      	cbz	r3, 8007682 <_read_r+0x1e>
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	20000734 	.word	0x20000734

08007688 <_sbrk_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d06      	ldr	r5, [pc, #24]	@ (80076a4 <_sbrk_r+0x1c>)
 800768c:	2300      	movs	r3, #0
 800768e:	4604      	mov	r4, r0
 8007690:	4608      	mov	r0, r1
 8007692:	602b      	str	r3, [r5, #0]
 8007694:	f7fa fd18 	bl	80020c8 <_sbrk>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d102      	bne.n	80076a2 <_sbrk_r+0x1a>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	b103      	cbz	r3, 80076a2 <_sbrk_r+0x1a>
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	20000734 	.word	0x20000734

080076a8 <_write_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4d07      	ldr	r5, [pc, #28]	@ (80076c8 <_write_r+0x20>)
 80076ac:	4604      	mov	r4, r0
 80076ae:	4608      	mov	r0, r1
 80076b0:	4611      	mov	r1, r2
 80076b2:	2200      	movs	r2, #0
 80076b4:	602a      	str	r2, [r5, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	f7fa fa9a 	bl	8001bf0 <_write>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_write_r+0x1e>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_write_r+0x1e>
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	20000734 	.word	0x20000734

080076cc <__errno>:
 80076cc:	4b01      	ldr	r3, [pc, #4]	@ (80076d4 <__errno+0x8>)
 80076ce:	6818      	ldr	r0, [r3, #0]
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	20000268 	.word	0x20000268

080076d8 <__libc_init_array>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	4d0d      	ldr	r5, [pc, #52]	@ (8007710 <__libc_init_array+0x38>)
 80076dc:	4c0d      	ldr	r4, [pc, #52]	@ (8007714 <__libc_init_array+0x3c>)
 80076de:	1b64      	subs	r4, r4, r5
 80076e0:	10a4      	asrs	r4, r4, #2
 80076e2:	2600      	movs	r6, #0
 80076e4:	42a6      	cmp	r6, r4
 80076e6:	d109      	bne.n	80076fc <__libc_init_array+0x24>
 80076e8:	4d0b      	ldr	r5, [pc, #44]	@ (8007718 <__libc_init_array+0x40>)
 80076ea:	4c0c      	ldr	r4, [pc, #48]	@ (800771c <__libc_init_array+0x44>)
 80076ec:	f002 fc96 	bl	800a01c <_init>
 80076f0:	1b64      	subs	r4, r4, r5
 80076f2:	10a4      	asrs	r4, r4, #2
 80076f4:	2600      	movs	r6, #0
 80076f6:	42a6      	cmp	r6, r4
 80076f8:	d105      	bne.n	8007706 <__libc_init_array+0x2e>
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007700:	4798      	blx	r3
 8007702:	3601      	adds	r6, #1
 8007704:	e7ee      	b.n	80076e4 <__libc_init_array+0xc>
 8007706:	f855 3b04 	ldr.w	r3, [r5], #4
 800770a:	4798      	blx	r3
 800770c:	3601      	adds	r6, #1
 800770e:	e7f2      	b.n	80076f6 <__libc_init_array+0x1e>
 8007710:	0800a5b4 	.word	0x0800a5b4
 8007714:	0800a5b4 	.word	0x0800a5b4
 8007718:	0800a5b4 	.word	0x0800a5b4
 800771c:	0800a5b8 	.word	0x0800a5b8

08007720 <__retarget_lock_init_recursive>:
 8007720:	4770      	bx	lr

08007722 <__retarget_lock_acquire_recursive>:
 8007722:	4770      	bx	lr

08007724 <__retarget_lock_release_recursive>:
 8007724:	4770      	bx	lr

08007726 <memcpy>:
 8007726:	440a      	add	r2, r1
 8007728:	4291      	cmp	r1, r2
 800772a:	f100 33ff 	add.w	r3, r0, #4294967295
 800772e:	d100      	bne.n	8007732 <memcpy+0xc>
 8007730:	4770      	bx	lr
 8007732:	b510      	push	{r4, lr}
 8007734:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800773c:	4291      	cmp	r1, r2
 800773e:	d1f9      	bne.n	8007734 <memcpy+0xe>
 8007740:	bd10      	pop	{r4, pc}
 8007742:	0000      	movs	r0, r0
 8007744:	0000      	movs	r0, r0
	...

08007748 <nan>:
 8007748:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007750 <nan+0x8>
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	00000000 	.word	0x00000000
 8007754:	7ff80000 	.word	0x7ff80000

08007758 <nanf>:
 8007758:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007760 <nanf+0x8>
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	7fc00000 	.word	0x7fc00000

08007764 <__assert_func>:
 8007764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007766:	4614      	mov	r4, r2
 8007768:	461a      	mov	r2, r3
 800776a:	4b09      	ldr	r3, [pc, #36]	@ (8007790 <__assert_func+0x2c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4605      	mov	r5, r0
 8007770:	68d8      	ldr	r0, [r3, #12]
 8007772:	b14c      	cbz	r4, 8007788 <__assert_func+0x24>
 8007774:	4b07      	ldr	r3, [pc, #28]	@ (8007794 <__assert_func+0x30>)
 8007776:	9100      	str	r1, [sp, #0]
 8007778:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800777c:	4906      	ldr	r1, [pc, #24]	@ (8007798 <__assert_func+0x34>)
 800777e:	462b      	mov	r3, r5
 8007780:	f002 f932 	bl	80099e8 <fiprintf>
 8007784:	f002 f95c 	bl	8009a40 <abort>
 8007788:	4b04      	ldr	r3, [pc, #16]	@ (800779c <__assert_func+0x38>)
 800778a:	461c      	mov	r4, r3
 800778c:	e7f3      	b.n	8007776 <__assert_func+0x12>
 800778e:	bf00      	nop
 8007790:	20000268 	.word	0x20000268
 8007794:	0800a1d8 	.word	0x0800a1d8
 8007798:	0800a1e5 	.word	0x0800a1e5
 800779c:	0800a213 	.word	0x0800a213

080077a0 <quorem>:
 80077a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	6903      	ldr	r3, [r0, #16]
 80077a6:	690c      	ldr	r4, [r1, #16]
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	4607      	mov	r7, r0
 80077ac:	db7e      	blt.n	80078ac <quorem+0x10c>
 80077ae:	3c01      	subs	r4, #1
 80077b0:	f101 0814 	add.w	r8, r1, #20
 80077b4:	00a3      	lsls	r3, r4, #2
 80077b6:	f100 0514 	add.w	r5, r0, #20
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077ca:	3301      	adds	r3, #1
 80077cc:	429a      	cmp	r2, r3
 80077ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80077d6:	d32e      	bcc.n	8007836 <quorem+0x96>
 80077d8:	f04f 0a00 	mov.w	sl, #0
 80077dc:	46c4      	mov	ip, r8
 80077de:	46ae      	mov	lr, r5
 80077e0:	46d3      	mov	fp, sl
 80077e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077e6:	b298      	uxth	r0, r3
 80077e8:	fb06 a000 	mla	r0, r6, r0, sl
 80077ec:	0c02      	lsrs	r2, r0, #16
 80077ee:	0c1b      	lsrs	r3, r3, #16
 80077f0:	fb06 2303 	mla	r3, r6, r3, r2
 80077f4:	f8de 2000 	ldr.w	r2, [lr]
 80077f8:	b280      	uxth	r0, r0
 80077fa:	b292      	uxth	r2, r2
 80077fc:	1a12      	subs	r2, r2, r0
 80077fe:	445a      	add	r2, fp
 8007800:	f8de 0000 	ldr.w	r0, [lr]
 8007804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007808:	b29b      	uxth	r3, r3
 800780a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800780e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007812:	b292      	uxth	r2, r2
 8007814:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007818:	45e1      	cmp	r9, ip
 800781a:	f84e 2b04 	str.w	r2, [lr], #4
 800781e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007822:	d2de      	bcs.n	80077e2 <quorem+0x42>
 8007824:	9b00      	ldr	r3, [sp, #0]
 8007826:	58eb      	ldr	r3, [r5, r3]
 8007828:	b92b      	cbnz	r3, 8007836 <quorem+0x96>
 800782a:	9b01      	ldr	r3, [sp, #4]
 800782c:	3b04      	subs	r3, #4
 800782e:	429d      	cmp	r5, r3
 8007830:	461a      	mov	r2, r3
 8007832:	d32f      	bcc.n	8007894 <quorem+0xf4>
 8007834:	613c      	str	r4, [r7, #16]
 8007836:	4638      	mov	r0, r7
 8007838:	f001 fc5c 	bl	80090f4 <__mcmp>
 800783c:	2800      	cmp	r0, #0
 800783e:	db25      	blt.n	800788c <quorem+0xec>
 8007840:	4629      	mov	r1, r5
 8007842:	2000      	movs	r0, #0
 8007844:	f858 2b04 	ldr.w	r2, [r8], #4
 8007848:	f8d1 c000 	ldr.w	ip, [r1]
 800784c:	fa1f fe82 	uxth.w	lr, r2
 8007850:	fa1f f38c 	uxth.w	r3, ip
 8007854:	eba3 030e 	sub.w	r3, r3, lr
 8007858:	4403      	add	r3, r0
 800785a:	0c12      	lsrs	r2, r2, #16
 800785c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007860:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007864:	b29b      	uxth	r3, r3
 8007866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800786a:	45c1      	cmp	r9, r8
 800786c:	f841 3b04 	str.w	r3, [r1], #4
 8007870:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007874:	d2e6      	bcs.n	8007844 <quorem+0xa4>
 8007876:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800787a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800787e:	b922      	cbnz	r2, 800788a <quorem+0xea>
 8007880:	3b04      	subs	r3, #4
 8007882:	429d      	cmp	r5, r3
 8007884:	461a      	mov	r2, r3
 8007886:	d30b      	bcc.n	80078a0 <quorem+0x100>
 8007888:	613c      	str	r4, [r7, #16]
 800788a:	3601      	adds	r6, #1
 800788c:	4630      	mov	r0, r6
 800788e:	b003      	add	sp, #12
 8007890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007894:	6812      	ldr	r2, [r2, #0]
 8007896:	3b04      	subs	r3, #4
 8007898:	2a00      	cmp	r2, #0
 800789a:	d1cb      	bne.n	8007834 <quorem+0x94>
 800789c:	3c01      	subs	r4, #1
 800789e:	e7c6      	b.n	800782e <quorem+0x8e>
 80078a0:	6812      	ldr	r2, [r2, #0]
 80078a2:	3b04      	subs	r3, #4
 80078a4:	2a00      	cmp	r2, #0
 80078a6:	d1ef      	bne.n	8007888 <quorem+0xe8>
 80078a8:	3c01      	subs	r4, #1
 80078aa:	e7ea      	b.n	8007882 <quorem+0xe2>
 80078ac:	2000      	movs	r0, #0
 80078ae:	e7ee      	b.n	800788e <quorem+0xee>

080078b0 <_dtoa_r>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	69c7      	ldr	r7, [r0, #28]
 80078b6:	b097      	sub	sp, #92	@ 0x5c
 80078b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80078bc:	ec55 4b10 	vmov	r4, r5, d0
 80078c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80078c2:	9107      	str	r1, [sp, #28]
 80078c4:	4681      	mov	r9, r0
 80078c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80078c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80078ca:	b97f      	cbnz	r7, 80078ec <_dtoa_r+0x3c>
 80078cc:	2010      	movs	r0, #16
 80078ce:	f7fd ffe3 	bl	8005898 <malloc>
 80078d2:	4602      	mov	r2, r0
 80078d4:	f8c9 001c 	str.w	r0, [r9, #28]
 80078d8:	b920      	cbnz	r0, 80078e4 <_dtoa_r+0x34>
 80078da:	4ba9      	ldr	r3, [pc, #676]	@ (8007b80 <_dtoa_r+0x2d0>)
 80078dc:	21ef      	movs	r1, #239	@ 0xef
 80078de:	48a9      	ldr	r0, [pc, #676]	@ (8007b84 <_dtoa_r+0x2d4>)
 80078e0:	f7ff ff40 	bl	8007764 <__assert_func>
 80078e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80078e8:	6007      	str	r7, [r0, #0]
 80078ea:	60c7      	str	r7, [r0, #12]
 80078ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80078f0:	6819      	ldr	r1, [r3, #0]
 80078f2:	b159      	cbz	r1, 800790c <_dtoa_r+0x5c>
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	604a      	str	r2, [r1, #4]
 80078f8:	2301      	movs	r3, #1
 80078fa:	4093      	lsls	r3, r2
 80078fc:	608b      	str	r3, [r1, #8]
 80078fe:	4648      	mov	r0, r9
 8007900:	f001 f97c 	bl	8008bfc <_Bfree>
 8007904:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	1e2b      	subs	r3, r5, #0
 800790e:	bfb9      	ittee	lt
 8007910:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007914:	9305      	strlt	r3, [sp, #20]
 8007916:	2300      	movge	r3, #0
 8007918:	6033      	strge	r3, [r6, #0]
 800791a:	9f05      	ldr	r7, [sp, #20]
 800791c:	4b9a      	ldr	r3, [pc, #616]	@ (8007b88 <_dtoa_r+0x2d8>)
 800791e:	bfbc      	itt	lt
 8007920:	2201      	movlt	r2, #1
 8007922:	6032      	strlt	r2, [r6, #0]
 8007924:	43bb      	bics	r3, r7
 8007926:	d112      	bne.n	800794e <_dtoa_r+0x9e>
 8007928:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800792a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007934:	4323      	orrs	r3, r4
 8007936:	f000 855a 	beq.w	80083ee <_dtoa_r+0xb3e>
 800793a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800793c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007b9c <_dtoa_r+0x2ec>
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 855c 	beq.w	80083fe <_dtoa_r+0xb4e>
 8007946:	f10a 0303 	add.w	r3, sl, #3
 800794a:	f000 bd56 	b.w	80083fa <_dtoa_r+0xb4a>
 800794e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007952:	2200      	movs	r2, #0
 8007954:	ec51 0b17 	vmov	r0, r1, d7
 8007958:	2300      	movs	r3, #0
 800795a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800795e:	f7f9 f8b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007962:	4680      	mov	r8, r0
 8007964:	b158      	cbz	r0, 800797e <_dtoa_r+0xce>
 8007966:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007968:	2301      	movs	r3, #1
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800796e:	b113      	cbz	r3, 8007976 <_dtoa_r+0xc6>
 8007970:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007972:	4b86      	ldr	r3, [pc, #536]	@ (8007b8c <_dtoa_r+0x2dc>)
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007ba0 <_dtoa_r+0x2f0>
 800797a:	f000 bd40 	b.w	80083fe <_dtoa_r+0xb4e>
 800797e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007982:	aa14      	add	r2, sp, #80	@ 0x50
 8007984:	a915      	add	r1, sp, #84	@ 0x54
 8007986:	4648      	mov	r0, r9
 8007988:	f001 fcd4 	bl	8009334 <__d2b>
 800798c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007990:	9002      	str	r0, [sp, #8]
 8007992:	2e00      	cmp	r6, #0
 8007994:	d078      	beq.n	8007a88 <_dtoa_r+0x1d8>
 8007996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007998:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800799c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80079a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80079a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80079ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80079b0:	4619      	mov	r1, r3
 80079b2:	2200      	movs	r2, #0
 80079b4:	4b76      	ldr	r3, [pc, #472]	@ (8007b90 <_dtoa_r+0x2e0>)
 80079b6:	f7f8 fc67 	bl	8000288 <__aeabi_dsub>
 80079ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8007b68 <_dtoa_r+0x2b8>)
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f7f8 fe1a 	bl	80005f8 <__aeabi_dmul>
 80079c4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007b70 <_dtoa_r+0x2c0>)
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	f7f8 fc5f 	bl	800028c <__adddf3>
 80079ce:	4604      	mov	r4, r0
 80079d0:	4630      	mov	r0, r6
 80079d2:	460d      	mov	r5, r1
 80079d4:	f7f8 fda6 	bl	8000524 <__aeabi_i2d>
 80079d8:	a367      	add	r3, pc, #412	@ (adr r3, 8007b78 <_dtoa_r+0x2c8>)
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f7f8 fe0b 	bl	80005f8 <__aeabi_dmul>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4620      	mov	r0, r4
 80079e8:	4629      	mov	r1, r5
 80079ea:	f7f8 fc4f 	bl	800028c <__adddf3>
 80079ee:	4604      	mov	r4, r0
 80079f0:	460d      	mov	r5, r1
 80079f2:	f7f9 f8b1 	bl	8000b58 <__aeabi_d2iz>
 80079f6:	2200      	movs	r2, #0
 80079f8:	4607      	mov	r7, r0
 80079fa:	2300      	movs	r3, #0
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7f9 f86c 	bl	8000adc <__aeabi_dcmplt>
 8007a04:	b140      	cbz	r0, 8007a18 <_dtoa_r+0x168>
 8007a06:	4638      	mov	r0, r7
 8007a08:	f7f8 fd8c 	bl	8000524 <__aeabi_i2d>
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	462b      	mov	r3, r5
 8007a10:	f7f9 f85a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a14:	b900      	cbnz	r0, 8007a18 <_dtoa_r+0x168>
 8007a16:	3f01      	subs	r7, #1
 8007a18:	2f16      	cmp	r7, #22
 8007a1a:	d852      	bhi.n	8007ac2 <_dtoa_r+0x212>
 8007a1c:	4b5d      	ldr	r3, [pc, #372]	@ (8007b94 <_dtoa_r+0x2e4>)
 8007a1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a2a:	f7f9 f857 	bl	8000adc <__aeabi_dcmplt>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d049      	beq.n	8007ac6 <_dtoa_r+0x216>
 8007a32:	3f01      	subs	r7, #1
 8007a34:	2300      	movs	r3, #0
 8007a36:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a3a:	1b9b      	subs	r3, r3, r6
 8007a3c:	1e5a      	subs	r2, r3, #1
 8007a3e:	bf45      	ittet	mi
 8007a40:	f1c3 0301 	rsbmi	r3, r3, #1
 8007a44:	9300      	strmi	r3, [sp, #0]
 8007a46:	2300      	movpl	r3, #0
 8007a48:	2300      	movmi	r3, #0
 8007a4a:	9206      	str	r2, [sp, #24]
 8007a4c:	bf54      	ite	pl
 8007a4e:	9300      	strpl	r3, [sp, #0]
 8007a50:	9306      	strmi	r3, [sp, #24]
 8007a52:	2f00      	cmp	r7, #0
 8007a54:	db39      	blt.n	8007aca <_dtoa_r+0x21a>
 8007a56:	9b06      	ldr	r3, [sp, #24]
 8007a58:	970d      	str	r7, [sp, #52]	@ 0x34
 8007a5a:	443b      	add	r3, r7
 8007a5c:	9306      	str	r3, [sp, #24]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	9308      	str	r3, [sp, #32]
 8007a62:	9b07      	ldr	r3, [sp, #28]
 8007a64:	2b09      	cmp	r3, #9
 8007a66:	d863      	bhi.n	8007b30 <_dtoa_r+0x280>
 8007a68:	2b05      	cmp	r3, #5
 8007a6a:	bfc4      	itt	gt
 8007a6c:	3b04      	subgt	r3, #4
 8007a6e:	9307      	strgt	r3, [sp, #28]
 8007a70:	9b07      	ldr	r3, [sp, #28]
 8007a72:	f1a3 0302 	sub.w	r3, r3, #2
 8007a76:	bfcc      	ite	gt
 8007a78:	2400      	movgt	r4, #0
 8007a7a:	2401      	movle	r4, #1
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d863      	bhi.n	8007b48 <_dtoa_r+0x298>
 8007a80:	e8df f003 	tbb	[pc, r3]
 8007a84:	2b375452 	.word	0x2b375452
 8007a88:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007a8c:	441e      	add	r6, r3
 8007a8e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a92:	2b20      	cmp	r3, #32
 8007a94:	bfc1      	itttt	gt
 8007a96:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007a9a:	409f      	lslgt	r7, r3
 8007a9c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007aa0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007aa4:	bfd6      	itet	le
 8007aa6:	f1c3 0320 	rsble	r3, r3, #32
 8007aaa:	ea47 0003 	orrgt.w	r0, r7, r3
 8007aae:	fa04 f003 	lslle.w	r0, r4, r3
 8007ab2:	f7f8 fd27 	bl	8000504 <__aeabi_ui2d>
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007abc:	3e01      	subs	r6, #1
 8007abe:	9212      	str	r2, [sp, #72]	@ 0x48
 8007ac0:	e776      	b.n	80079b0 <_dtoa_r+0x100>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e7b7      	b.n	8007a36 <_dtoa_r+0x186>
 8007ac6:	9010      	str	r0, [sp, #64]	@ 0x40
 8007ac8:	e7b6      	b.n	8007a38 <_dtoa_r+0x188>
 8007aca:	9b00      	ldr	r3, [sp, #0]
 8007acc:	1bdb      	subs	r3, r3, r7
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	427b      	negs	r3, r7
 8007ad2:	9308      	str	r3, [sp, #32]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ad8:	e7c3      	b.n	8007a62 <_dtoa_r+0x1b2>
 8007ada:	2301      	movs	r3, #1
 8007adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ade:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ae0:	eb07 0b03 	add.w	fp, r7, r3
 8007ae4:	f10b 0301 	add.w	r3, fp, #1
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	9303      	str	r3, [sp, #12]
 8007aec:	bfb8      	it	lt
 8007aee:	2301      	movlt	r3, #1
 8007af0:	e006      	b.n	8007b00 <_dtoa_r+0x250>
 8007af2:	2301      	movs	r3, #1
 8007af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	dd28      	ble.n	8007b4e <_dtoa_r+0x29e>
 8007afc:	469b      	mov	fp, r3
 8007afe:	9303      	str	r3, [sp, #12]
 8007b00:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007b04:	2100      	movs	r1, #0
 8007b06:	2204      	movs	r2, #4
 8007b08:	f102 0514 	add.w	r5, r2, #20
 8007b0c:	429d      	cmp	r5, r3
 8007b0e:	d926      	bls.n	8007b5e <_dtoa_r+0x2ae>
 8007b10:	6041      	str	r1, [r0, #4]
 8007b12:	4648      	mov	r0, r9
 8007b14:	f001 f832 	bl	8008b7c <_Balloc>
 8007b18:	4682      	mov	sl, r0
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d142      	bne.n	8007ba4 <_dtoa_r+0x2f4>
 8007b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b98 <_dtoa_r+0x2e8>)
 8007b20:	4602      	mov	r2, r0
 8007b22:	f240 11af 	movw	r1, #431	@ 0x1af
 8007b26:	e6da      	b.n	80078de <_dtoa_r+0x2e>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	e7e3      	b.n	8007af4 <_dtoa_r+0x244>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	e7d5      	b.n	8007adc <_dtoa_r+0x22c>
 8007b30:	2401      	movs	r4, #1
 8007b32:	2300      	movs	r3, #0
 8007b34:	9307      	str	r3, [sp, #28]
 8007b36:	9409      	str	r4, [sp, #36]	@ 0x24
 8007b38:	f04f 3bff 	mov.w	fp, #4294967295
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007b42:	2312      	movs	r3, #18
 8007b44:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b46:	e7db      	b.n	8007b00 <_dtoa_r+0x250>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b4c:	e7f4      	b.n	8007b38 <_dtoa_r+0x288>
 8007b4e:	f04f 0b01 	mov.w	fp, #1
 8007b52:	f8cd b00c 	str.w	fp, [sp, #12]
 8007b56:	465b      	mov	r3, fp
 8007b58:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007b5c:	e7d0      	b.n	8007b00 <_dtoa_r+0x250>
 8007b5e:	3101      	adds	r1, #1
 8007b60:	0052      	lsls	r2, r2, #1
 8007b62:	e7d1      	b.n	8007b08 <_dtoa_r+0x258>
 8007b64:	f3af 8000 	nop.w
 8007b68:	636f4361 	.word	0x636f4361
 8007b6c:	3fd287a7 	.word	0x3fd287a7
 8007b70:	8b60c8b3 	.word	0x8b60c8b3
 8007b74:	3fc68a28 	.word	0x3fc68a28
 8007b78:	509f79fb 	.word	0x509f79fb
 8007b7c:	3fd34413 	.word	0x3fd34413
 8007b80:	0800a15f 	.word	0x0800a15f
 8007b84:	0800a221 	.word	0x0800a221
 8007b88:	7ff00000 	.word	0x7ff00000
 8007b8c:	0800a137 	.word	0x0800a137
 8007b90:	3ff80000 	.word	0x3ff80000
 8007b94:	0800a3e0 	.word	0x0800a3e0
 8007b98:	0800a279 	.word	0x0800a279
 8007b9c:	0800a21d 	.word	0x0800a21d
 8007ba0:	0800a136 	.word	0x0800a136
 8007ba4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ba8:	6018      	str	r0, [r3, #0]
 8007baa:	9b03      	ldr	r3, [sp, #12]
 8007bac:	2b0e      	cmp	r3, #14
 8007bae:	f200 80a1 	bhi.w	8007cf4 <_dtoa_r+0x444>
 8007bb2:	2c00      	cmp	r4, #0
 8007bb4:	f000 809e 	beq.w	8007cf4 <_dtoa_r+0x444>
 8007bb8:	2f00      	cmp	r7, #0
 8007bba:	dd33      	ble.n	8007c24 <_dtoa_r+0x374>
 8007bbc:	4b9c      	ldr	r3, [pc, #624]	@ (8007e30 <_dtoa_r+0x580>)
 8007bbe:	f007 020f 	and.w	r2, r7, #15
 8007bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bc6:	ed93 7b00 	vldr	d7, [r3]
 8007bca:	05f8      	lsls	r0, r7, #23
 8007bcc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007bd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007bd4:	d516      	bpl.n	8007c04 <_dtoa_r+0x354>
 8007bd6:	4b97      	ldr	r3, [pc, #604]	@ (8007e34 <_dtoa_r+0x584>)
 8007bd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007bdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007be0:	f7f8 fe34 	bl	800084c <__aeabi_ddiv>
 8007be4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007be8:	f004 040f 	and.w	r4, r4, #15
 8007bec:	2603      	movs	r6, #3
 8007bee:	4d91      	ldr	r5, [pc, #580]	@ (8007e34 <_dtoa_r+0x584>)
 8007bf0:	b954      	cbnz	r4, 8007c08 <_dtoa_r+0x358>
 8007bf2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007bf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bfa:	f7f8 fe27 	bl	800084c <__aeabi_ddiv>
 8007bfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c02:	e028      	b.n	8007c56 <_dtoa_r+0x3a6>
 8007c04:	2602      	movs	r6, #2
 8007c06:	e7f2      	b.n	8007bee <_dtoa_r+0x33e>
 8007c08:	07e1      	lsls	r1, r4, #31
 8007c0a:	d508      	bpl.n	8007c1e <_dtoa_r+0x36e>
 8007c0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007c10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c14:	f7f8 fcf0 	bl	80005f8 <__aeabi_dmul>
 8007c18:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c1c:	3601      	adds	r6, #1
 8007c1e:	1064      	asrs	r4, r4, #1
 8007c20:	3508      	adds	r5, #8
 8007c22:	e7e5      	b.n	8007bf0 <_dtoa_r+0x340>
 8007c24:	f000 80af 	beq.w	8007d86 <_dtoa_r+0x4d6>
 8007c28:	427c      	negs	r4, r7
 8007c2a:	4b81      	ldr	r3, [pc, #516]	@ (8007e30 <_dtoa_r+0x580>)
 8007c2c:	4d81      	ldr	r5, [pc, #516]	@ (8007e34 <_dtoa_r+0x584>)
 8007c2e:	f004 020f 	and.w	r2, r4, #15
 8007c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c3e:	f7f8 fcdb 	bl	80005f8 <__aeabi_dmul>
 8007c42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c46:	1124      	asrs	r4, r4, #4
 8007c48:	2300      	movs	r3, #0
 8007c4a:	2602      	movs	r6, #2
 8007c4c:	2c00      	cmp	r4, #0
 8007c4e:	f040 808f 	bne.w	8007d70 <_dtoa_r+0x4c0>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1d3      	bne.n	8007bfe <_dtoa_r+0x34e>
 8007c56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c58:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 8094 	beq.w	8007d8a <_dtoa_r+0x4da>
 8007c62:	4b75      	ldr	r3, [pc, #468]	@ (8007e38 <_dtoa_r+0x588>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	4620      	mov	r0, r4
 8007c68:	4629      	mov	r1, r5
 8007c6a:	f7f8 ff37 	bl	8000adc <__aeabi_dcmplt>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f000 808b 	beq.w	8007d8a <_dtoa_r+0x4da>
 8007c74:	9b03      	ldr	r3, [sp, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 8087 	beq.w	8007d8a <_dtoa_r+0x4da>
 8007c7c:	f1bb 0f00 	cmp.w	fp, #0
 8007c80:	dd34      	ble.n	8007cec <_dtoa_r+0x43c>
 8007c82:	4620      	mov	r0, r4
 8007c84:	4b6d      	ldr	r3, [pc, #436]	@ (8007e3c <_dtoa_r+0x58c>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	4629      	mov	r1, r5
 8007c8a:	f7f8 fcb5 	bl	80005f8 <__aeabi_dmul>
 8007c8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c92:	f107 38ff 	add.w	r8, r7, #4294967295
 8007c96:	3601      	adds	r6, #1
 8007c98:	465c      	mov	r4, fp
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f7f8 fc42 	bl	8000524 <__aeabi_i2d>
 8007ca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ca4:	f7f8 fca8 	bl	80005f8 <__aeabi_dmul>
 8007ca8:	4b65      	ldr	r3, [pc, #404]	@ (8007e40 <_dtoa_r+0x590>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	f7f8 faee 	bl	800028c <__adddf3>
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007cb6:	2c00      	cmp	r4, #0
 8007cb8:	d16a      	bne.n	8007d90 <_dtoa_r+0x4e0>
 8007cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cbe:	4b61      	ldr	r3, [pc, #388]	@ (8007e44 <_dtoa_r+0x594>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f7f8 fae1 	bl	8000288 <__aeabi_dsub>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cce:	462a      	mov	r2, r5
 8007cd0:	4633      	mov	r3, r6
 8007cd2:	f7f8 ff21 	bl	8000b18 <__aeabi_dcmpgt>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	f040 8298 	bne.w	800820c <_dtoa_r+0x95c>
 8007cdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ce6:	f7f8 fef9 	bl	8000adc <__aeabi_dcmplt>
 8007cea:	bb38      	cbnz	r0, 8007d3c <_dtoa_r+0x48c>
 8007cec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007cf0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007cf4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f2c0 8157 	blt.w	8007faa <_dtoa_r+0x6fa>
 8007cfc:	2f0e      	cmp	r7, #14
 8007cfe:	f300 8154 	bgt.w	8007faa <_dtoa_r+0x6fa>
 8007d02:	4b4b      	ldr	r3, [pc, #300]	@ (8007e30 <_dtoa_r+0x580>)
 8007d04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d08:	ed93 7b00 	vldr	d7, [r3]
 8007d0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	ed8d 7b00 	vstr	d7, [sp]
 8007d14:	f280 80e5 	bge.w	8007ee2 <_dtoa_r+0x632>
 8007d18:	9b03      	ldr	r3, [sp, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f300 80e1 	bgt.w	8007ee2 <_dtoa_r+0x632>
 8007d20:	d10c      	bne.n	8007d3c <_dtoa_r+0x48c>
 8007d22:	4b48      	ldr	r3, [pc, #288]	@ (8007e44 <_dtoa_r+0x594>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	ec51 0b17 	vmov	r0, r1, d7
 8007d2a:	f7f8 fc65 	bl	80005f8 <__aeabi_dmul>
 8007d2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d32:	f7f8 fee7 	bl	8000b04 <__aeabi_dcmpge>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	f000 8266 	beq.w	8008208 <_dtoa_r+0x958>
 8007d3c:	2400      	movs	r4, #0
 8007d3e:	4625      	mov	r5, r4
 8007d40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d42:	4656      	mov	r6, sl
 8007d44:	ea6f 0803 	mvn.w	r8, r3
 8007d48:	2700      	movs	r7, #0
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	4648      	mov	r0, r9
 8007d4e:	f000 ff55 	bl	8008bfc <_Bfree>
 8007d52:	2d00      	cmp	r5, #0
 8007d54:	f000 80bd 	beq.w	8007ed2 <_dtoa_r+0x622>
 8007d58:	b12f      	cbz	r7, 8007d66 <_dtoa_r+0x4b6>
 8007d5a:	42af      	cmp	r7, r5
 8007d5c:	d003      	beq.n	8007d66 <_dtoa_r+0x4b6>
 8007d5e:	4639      	mov	r1, r7
 8007d60:	4648      	mov	r0, r9
 8007d62:	f000 ff4b 	bl	8008bfc <_Bfree>
 8007d66:	4629      	mov	r1, r5
 8007d68:	4648      	mov	r0, r9
 8007d6a:	f000 ff47 	bl	8008bfc <_Bfree>
 8007d6e:	e0b0      	b.n	8007ed2 <_dtoa_r+0x622>
 8007d70:	07e2      	lsls	r2, r4, #31
 8007d72:	d505      	bpl.n	8007d80 <_dtoa_r+0x4d0>
 8007d74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d78:	f7f8 fc3e 	bl	80005f8 <__aeabi_dmul>
 8007d7c:	3601      	adds	r6, #1
 8007d7e:	2301      	movs	r3, #1
 8007d80:	1064      	asrs	r4, r4, #1
 8007d82:	3508      	adds	r5, #8
 8007d84:	e762      	b.n	8007c4c <_dtoa_r+0x39c>
 8007d86:	2602      	movs	r6, #2
 8007d88:	e765      	b.n	8007c56 <_dtoa_r+0x3a6>
 8007d8a:	9c03      	ldr	r4, [sp, #12]
 8007d8c:	46b8      	mov	r8, r7
 8007d8e:	e784      	b.n	8007c9a <_dtoa_r+0x3ea>
 8007d90:	4b27      	ldr	r3, [pc, #156]	@ (8007e30 <_dtoa_r+0x580>)
 8007d92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d9c:	4454      	add	r4, sl
 8007d9e:	2900      	cmp	r1, #0
 8007da0:	d054      	beq.n	8007e4c <_dtoa_r+0x59c>
 8007da2:	4929      	ldr	r1, [pc, #164]	@ (8007e48 <_dtoa_r+0x598>)
 8007da4:	2000      	movs	r0, #0
 8007da6:	f7f8 fd51 	bl	800084c <__aeabi_ddiv>
 8007daa:	4633      	mov	r3, r6
 8007dac:	462a      	mov	r2, r5
 8007dae:	f7f8 fa6b 	bl	8000288 <__aeabi_dsub>
 8007db2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007db6:	4656      	mov	r6, sl
 8007db8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dbc:	f7f8 fecc 	bl	8000b58 <__aeabi_d2iz>
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	f7f8 fbaf 	bl	8000524 <__aeabi_i2d>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dce:	f7f8 fa5b 	bl	8000288 <__aeabi_dsub>
 8007dd2:	3530      	adds	r5, #48	@ 0x30
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ddc:	f806 5b01 	strb.w	r5, [r6], #1
 8007de0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007de4:	f7f8 fe7a 	bl	8000adc <__aeabi_dcmplt>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d172      	bne.n	8007ed2 <_dtoa_r+0x622>
 8007dec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007df0:	4911      	ldr	r1, [pc, #68]	@ (8007e38 <_dtoa_r+0x588>)
 8007df2:	2000      	movs	r0, #0
 8007df4:	f7f8 fa48 	bl	8000288 <__aeabi_dsub>
 8007df8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007dfc:	f7f8 fe6e 	bl	8000adc <__aeabi_dcmplt>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	f040 80b4 	bne.w	8007f6e <_dtoa_r+0x6be>
 8007e06:	42a6      	cmp	r6, r4
 8007e08:	f43f af70 	beq.w	8007cec <_dtoa_r+0x43c>
 8007e0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007e10:	4b0a      	ldr	r3, [pc, #40]	@ (8007e3c <_dtoa_r+0x58c>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	f7f8 fbf0 	bl	80005f8 <__aeabi_dmul>
 8007e18:	4b08      	ldr	r3, [pc, #32]	@ (8007e3c <_dtoa_r+0x58c>)
 8007e1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007e1e:	2200      	movs	r2, #0
 8007e20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e24:	f7f8 fbe8 	bl	80005f8 <__aeabi_dmul>
 8007e28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e2c:	e7c4      	b.n	8007db8 <_dtoa_r+0x508>
 8007e2e:	bf00      	nop
 8007e30:	0800a3e0 	.word	0x0800a3e0
 8007e34:	0800a3b8 	.word	0x0800a3b8
 8007e38:	3ff00000 	.word	0x3ff00000
 8007e3c:	40240000 	.word	0x40240000
 8007e40:	401c0000 	.word	0x401c0000
 8007e44:	40140000 	.word	0x40140000
 8007e48:	3fe00000 	.word	0x3fe00000
 8007e4c:	4631      	mov	r1, r6
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f7f8 fbd2 	bl	80005f8 <__aeabi_dmul>
 8007e54:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007e58:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007e5a:	4656      	mov	r6, sl
 8007e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e60:	f7f8 fe7a 	bl	8000b58 <__aeabi_d2iz>
 8007e64:	4605      	mov	r5, r0
 8007e66:	f7f8 fb5d 	bl	8000524 <__aeabi_i2d>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e72:	f7f8 fa09 	bl	8000288 <__aeabi_dsub>
 8007e76:	3530      	adds	r5, #48	@ 0x30
 8007e78:	f806 5b01 	strb.w	r5, [r6], #1
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	42a6      	cmp	r6, r4
 8007e82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e86:	f04f 0200 	mov.w	r2, #0
 8007e8a:	d124      	bne.n	8007ed6 <_dtoa_r+0x626>
 8007e8c:	4baf      	ldr	r3, [pc, #700]	@ (800814c <_dtoa_r+0x89c>)
 8007e8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007e92:	f7f8 f9fb 	bl	800028c <__adddf3>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e9e:	f7f8 fe3b 	bl	8000b18 <__aeabi_dcmpgt>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d163      	bne.n	8007f6e <_dtoa_r+0x6be>
 8007ea6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007eaa:	49a8      	ldr	r1, [pc, #672]	@ (800814c <_dtoa_r+0x89c>)
 8007eac:	2000      	movs	r0, #0
 8007eae:	f7f8 f9eb 	bl	8000288 <__aeabi_dsub>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eba:	f7f8 fe0f 	bl	8000adc <__aeabi_dcmplt>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	f43f af14 	beq.w	8007cec <_dtoa_r+0x43c>
 8007ec4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007ec6:	1e73      	subs	r3, r6, #1
 8007ec8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007eca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007ece:	2b30      	cmp	r3, #48	@ 0x30
 8007ed0:	d0f8      	beq.n	8007ec4 <_dtoa_r+0x614>
 8007ed2:	4647      	mov	r7, r8
 8007ed4:	e03b      	b.n	8007f4e <_dtoa_r+0x69e>
 8007ed6:	4b9e      	ldr	r3, [pc, #632]	@ (8008150 <_dtoa_r+0x8a0>)
 8007ed8:	f7f8 fb8e 	bl	80005f8 <__aeabi_dmul>
 8007edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ee0:	e7bc      	b.n	8007e5c <_dtoa_r+0x5ac>
 8007ee2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007ee6:	4656      	mov	r6, sl
 8007ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eec:	4620      	mov	r0, r4
 8007eee:	4629      	mov	r1, r5
 8007ef0:	f7f8 fcac 	bl	800084c <__aeabi_ddiv>
 8007ef4:	f7f8 fe30 	bl	8000b58 <__aeabi_d2iz>
 8007ef8:	4680      	mov	r8, r0
 8007efa:	f7f8 fb13 	bl	8000524 <__aeabi_i2d>
 8007efe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f02:	f7f8 fb79 	bl	80005f8 <__aeabi_dmul>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f12:	f7f8 f9b9 	bl	8000288 <__aeabi_dsub>
 8007f16:	f806 4b01 	strb.w	r4, [r6], #1
 8007f1a:	9d03      	ldr	r5, [sp, #12]
 8007f1c:	eba6 040a 	sub.w	r4, r6, sl
 8007f20:	42a5      	cmp	r5, r4
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	d133      	bne.n	8007f90 <_dtoa_r+0x6e0>
 8007f28:	f7f8 f9b0 	bl	800028c <__adddf3>
 8007f2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f30:	4604      	mov	r4, r0
 8007f32:	460d      	mov	r5, r1
 8007f34:	f7f8 fdf0 	bl	8000b18 <__aeabi_dcmpgt>
 8007f38:	b9c0      	cbnz	r0, 8007f6c <_dtoa_r+0x6bc>
 8007f3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f3e:	4620      	mov	r0, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	f7f8 fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f46:	b110      	cbz	r0, 8007f4e <_dtoa_r+0x69e>
 8007f48:	f018 0f01 	tst.w	r8, #1
 8007f4c:	d10e      	bne.n	8007f6c <_dtoa_r+0x6bc>
 8007f4e:	9902      	ldr	r1, [sp, #8]
 8007f50:	4648      	mov	r0, r9
 8007f52:	f000 fe53 	bl	8008bfc <_Bfree>
 8007f56:	2300      	movs	r3, #0
 8007f58:	7033      	strb	r3, [r6, #0]
 8007f5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007f5c:	3701      	adds	r7, #1
 8007f5e:	601f      	str	r7, [r3, #0]
 8007f60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 824b 	beq.w	80083fe <_dtoa_r+0xb4e>
 8007f68:	601e      	str	r6, [r3, #0]
 8007f6a:	e248      	b.n	80083fe <_dtoa_r+0xb4e>
 8007f6c:	46b8      	mov	r8, r7
 8007f6e:	4633      	mov	r3, r6
 8007f70:	461e      	mov	r6, r3
 8007f72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f76:	2a39      	cmp	r2, #57	@ 0x39
 8007f78:	d106      	bne.n	8007f88 <_dtoa_r+0x6d8>
 8007f7a:	459a      	cmp	sl, r3
 8007f7c:	d1f8      	bne.n	8007f70 <_dtoa_r+0x6c0>
 8007f7e:	2230      	movs	r2, #48	@ 0x30
 8007f80:	f108 0801 	add.w	r8, r8, #1
 8007f84:	f88a 2000 	strb.w	r2, [sl]
 8007f88:	781a      	ldrb	r2, [r3, #0]
 8007f8a:	3201      	adds	r2, #1
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	e7a0      	b.n	8007ed2 <_dtoa_r+0x622>
 8007f90:	4b6f      	ldr	r3, [pc, #444]	@ (8008150 <_dtoa_r+0x8a0>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	f7f8 fb30 	bl	80005f8 <__aeabi_dmul>
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	460d      	mov	r5, r1
 8007fa0:	f7f8 fd92 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d09f      	beq.n	8007ee8 <_dtoa_r+0x638>
 8007fa8:	e7d1      	b.n	8007f4e <_dtoa_r+0x69e>
 8007faa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fac:	2a00      	cmp	r2, #0
 8007fae:	f000 80ea 	beq.w	8008186 <_dtoa_r+0x8d6>
 8007fb2:	9a07      	ldr	r2, [sp, #28]
 8007fb4:	2a01      	cmp	r2, #1
 8007fb6:	f300 80cd 	bgt.w	8008154 <_dtoa_r+0x8a4>
 8007fba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007fbc:	2a00      	cmp	r2, #0
 8007fbe:	f000 80c1 	beq.w	8008144 <_dtoa_r+0x894>
 8007fc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007fc6:	9c08      	ldr	r4, [sp, #32]
 8007fc8:	9e00      	ldr	r6, [sp, #0]
 8007fca:	9a00      	ldr	r2, [sp, #0]
 8007fcc:	441a      	add	r2, r3
 8007fce:	9200      	str	r2, [sp, #0]
 8007fd0:	9a06      	ldr	r2, [sp, #24]
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	441a      	add	r2, r3
 8007fd6:	4648      	mov	r0, r9
 8007fd8:	9206      	str	r2, [sp, #24]
 8007fda:	f000 ff0d 	bl	8008df8 <__i2b>
 8007fde:	4605      	mov	r5, r0
 8007fe0:	b166      	cbz	r6, 8007ffc <_dtoa_r+0x74c>
 8007fe2:	9b06      	ldr	r3, [sp, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dd09      	ble.n	8007ffc <_dtoa_r+0x74c>
 8007fe8:	42b3      	cmp	r3, r6
 8007fea:	9a00      	ldr	r2, [sp, #0]
 8007fec:	bfa8      	it	ge
 8007fee:	4633      	movge	r3, r6
 8007ff0:	1ad2      	subs	r2, r2, r3
 8007ff2:	9200      	str	r2, [sp, #0]
 8007ff4:	9a06      	ldr	r2, [sp, #24]
 8007ff6:	1af6      	subs	r6, r6, r3
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	9306      	str	r3, [sp, #24]
 8007ffc:	9b08      	ldr	r3, [sp, #32]
 8007ffe:	b30b      	cbz	r3, 8008044 <_dtoa_r+0x794>
 8008000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 80c6 	beq.w	8008194 <_dtoa_r+0x8e4>
 8008008:	2c00      	cmp	r4, #0
 800800a:	f000 80c0 	beq.w	800818e <_dtoa_r+0x8de>
 800800e:	4629      	mov	r1, r5
 8008010:	4622      	mov	r2, r4
 8008012:	4648      	mov	r0, r9
 8008014:	f000 ffa8 	bl	8008f68 <__pow5mult>
 8008018:	9a02      	ldr	r2, [sp, #8]
 800801a:	4601      	mov	r1, r0
 800801c:	4605      	mov	r5, r0
 800801e:	4648      	mov	r0, r9
 8008020:	f000 ff00 	bl	8008e24 <__multiply>
 8008024:	9902      	ldr	r1, [sp, #8]
 8008026:	4680      	mov	r8, r0
 8008028:	4648      	mov	r0, r9
 800802a:	f000 fde7 	bl	8008bfc <_Bfree>
 800802e:	9b08      	ldr	r3, [sp, #32]
 8008030:	1b1b      	subs	r3, r3, r4
 8008032:	9308      	str	r3, [sp, #32]
 8008034:	f000 80b1 	beq.w	800819a <_dtoa_r+0x8ea>
 8008038:	9a08      	ldr	r2, [sp, #32]
 800803a:	4641      	mov	r1, r8
 800803c:	4648      	mov	r0, r9
 800803e:	f000 ff93 	bl	8008f68 <__pow5mult>
 8008042:	9002      	str	r0, [sp, #8]
 8008044:	2101      	movs	r1, #1
 8008046:	4648      	mov	r0, r9
 8008048:	f000 fed6 	bl	8008df8 <__i2b>
 800804c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800804e:	4604      	mov	r4, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 81d8 	beq.w	8008406 <_dtoa_r+0xb56>
 8008056:	461a      	mov	r2, r3
 8008058:	4601      	mov	r1, r0
 800805a:	4648      	mov	r0, r9
 800805c:	f000 ff84 	bl	8008f68 <__pow5mult>
 8008060:	9b07      	ldr	r3, [sp, #28]
 8008062:	2b01      	cmp	r3, #1
 8008064:	4604      	mov	r4, r0
 8008066:	f300 809f 	bgt.w	80081a8 <_dtoa_r+0x8f8>
 800806a:	9b04      	ldr	r3, [sp, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	f040 8097 	bne.w	80081a0 <_dtoa_r+0x8f0>
 8008072:	9b05      	ldr	r3, [sp, #20]
 8008074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008078:	2b00      	cmp	r3, #0
 800807a:	f040 8093 	bne.w	80081a4 <_dtoa_r+0x8f4>
 800807e:	9b05      	ldr	r3, [sp, #20]
 8008080:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008084:	0d1b      	lsrs	r3, r3, #20
 8008086:	051b      	lsls	r3, r3, #20
 8008088:	b133      	cbz	r3, 8008098 <_dtoa_r+0x7e8>
 800808a:	9b00      	ldr	r3, [sp, #0]
 800808c:	3301      	adds	r3, #1
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	9b06      	ldr	r3, [sp, #24]
 8008092:	3301      	adds	r3, #1
 8008094:	9306      	str	r3, [sp, #24]
 8008096:	2301      	movs	r3, #1
 8008098:	9308      	str	r3, [sp, #32]
 800809a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 81b8 	beq.w	8008412 <_dtoa_r+0xb62>
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080a8:	6918      	ldr	r0, [r3, #16]
 80080aa:	f000 fe59 	bl	8008d60 <__hi0bits>
 80080ae:	f1c0 0020 	rsb	r0, r0, #32
 80080b2:	9b06      	ldr	r3, [sp, #24]
 80080b4:	4418      	add	r0, r3
 80080b6:	f010 001f 	ands.w	r0, r0, #31
 80080ba:	f000 8082 	beq.w	80081c2 <_dtoa_r+0x912>
 80080be:	f1c0 0320 	rsb	r3, r0, #32
 80080c2:	2b04      	cmp	r3, #4
 80080c4:	dd73      	ble.n	80081ae <_dtoa_r+0x8fe>
 80080c6:	9b00      	ldr	r3, [sp, #0]
 80080c8:	f1c0 001c 	rsb	r0, r0, #28
 80080cc:	4403      	add	r3, r0
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	9b06      	ldr	r3, [sp, #24]
 80080d2:	4403      	add	r3, r0
 80080d4:	4406      	add	r6, r0
 80080d6:	9306      	str	r3, [sp, #24]
 80080d8:	9b00      	ldr	r3, [sp, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	dd05      	ble.n	80080ea <_dtoa_r+0x83a>
 80080de:	9902      	ldr	r1, [sp, #8]
 80080e0:	461a      	mov	r2, r3
 80080e2:	4648      	mov	r0, r9
 80080e4:	f000 ff9a 	bl	800901c <__lshift>
 80080e8:	9002      	str	r0, [sp, #8]
 80080ea:	9b06      	ldr	r3, [sp, #24]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dd05      	ble.n	80080fc <_dtoa_r+0x84c>
 80080f0:	4621      	mov	r1, r4
 80080f2:	461a      	mov	r2, r3
 80080f4:	4648      	mov	r0, r9
 80080f6:	f000 ff91 	bl	800901c <__lshift>
 80080fa:	4604      	mov	r4, r0
 80080fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d061      	beq.n	80081c6 <_dtoa_r+0x916>
 8008102:	9802      	ldr	r0, [sp, #8]
 8008104:	4621      	mov	r1, r4
 8008106:	f000 fff5 	bl	80090f4 <__mcmp>
 800810a:	2800      	cmp	r0, #0
 800810c:	da5b      	bge.n	80081c6 <_dtoa_r+0x916>
 800810e:	2300      	movs	r3, #0
 8008110:	9902      	ldr	r1, [sp, #8]
 8008112:	220a      	movs	r2, #10
 8008114:	4648      	mov	r0, r9
 8008116:	f000 fd93 	bl	8008c40 <__multadd>
 800811a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800811c:	9002      	str	r0, [sp, #8]
 800811e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 8177 	beq.w	8008416 <_dtoa_r+0xb66>
 8008128:	4629      	mov	r1, r5
 800812a:	2300      	movs	r3, #0
 800812c:	220a      	movs	r2, #10
 800812e:	4648      	mov	r0, r9
 8008130:	f000 fd86 	bl	8008c40 <__multadd>
 8008134:	f1bb 0f00 	cmp.w	fp, #0
 8008138:	4605      	mov	r5, r0
 800813a:	dc6f      	bgt.n	800821c <_dtoa_r+0x96c>
 800813c:	9b07      	ldr	r3, [sp, #28]
 800813e:	2b02      	cmp	r3, #2
 8008140:	dc49      	bgt.n	80081d6 <_dtoa_r+0x926>
 8008142:	e06b      	b.n	800821c <_dtoa_r+0x96c>
 8008144:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008146:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800814a:	e73c      	b.n	8007fc6 <_dtoa_r+0x716>
 800814c:	3fe00000 	.word	0x3fe00000
 8008150:	40240000 	.word	0x40240000
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	1e5c      	subs	r4, r3, #1
 8008158:	9b08      	ldr	r3, [sp, #32]
 800815a:	42a3      	cmp	r3, r4
 800815c:	db09      	blt.n	8008172 <_dtoa_r+0x8c2>
 800815e:	1b1c      	subs	r4, r3, r4
 8008160:	9b03      	ldr	r3, [sp, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f6bf af30 	bge.w	8007fc8 <_dtoa_r+0x718>
 8008168:	9b00      	ldr	r3, [sp, #0]
 800816a:	9a03      	ldr	r2, [sp, #12]
 800816c:	1a9e      	subs	r6, r3, r2
 800816e:	2300      	movs	r3, #0
 8008170:	e72b      	b.n	8007fca <_dtoa_r+0x71a>
 8008172:	9b08      	ldr	r3, [sp, #32]
 8008174:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008176:	9408      	str	r4, [sp, #32]
 8008178:	1ae3      	subs	r3, r4, r3
 800817a:	441a      	add	r2, r3
 800817c:	9e00      	ldr	r6, [sp, #0]
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	920d      	str	r2, [sp, #52]	@ 0x34
 8008182:	2400      	movs	r4, #0
 8008184:	e721      	b.n	8007fca <_dtoa_r+0x71a>
 8008186:	9c08      	ldr	r4, [sp, #32]
 8008188:	9e00      	ldr	r6, [sp, #0]
 800818a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800818c:	e728      	b.n	8007fe0 <_dtoa_r+0x730>
 800818e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008192:	e751      	b.n	8008038 <_dtoa_r+0x788>
 8008194:	9a08      	ldr	r2, [sp, #32]
 8008196:	9902      	ldr	r1, [sp, #8]
 8008198:	e750      	b.n	800803c <_dtoa_r+0x78c>
 800819a:	f8cd 8008 	str.w	r8, [sp, #8]
 800819e:	e751      	b.n	8008044 <_dtoa_r+0x794>
 80081a0:	2300      	movs	r3, #0
 80081a2:	e779      	b.n	8008098 <_dtoa_r+0x7e8>
 80081a4:	9b04      	ldr	r3, [sp, #16]
 80081a6:	e777      	b.n	8008098 <_dtoa_r+0x7e8>
 80081a8:	2300      	movs	r3, #0
 80081aa:	9308      	str	r3, [sp, #32]
 80081ac:	e779      	b.n	80080a2 <_dtoa_r+0x7f2>
 80081ae:	d093      	beq.n	80080d8 <_dtoa_r+0x828>
 80081b0:	9a00      	ldr	r2, [sp, #0]
 80081b2:	331c      	adds	r3, #28
 80081b4:	441a      	add	r2, r3
 80081b6:	9200      	str	r2, [sp, #0]
 80081b8:	9a06      	ldr	r2, [sp, #24]
 80081ba:	441a      	add	r2, r3
 80081bc:	441e      	add	r6, r3
 80081be:	9206      	str	r2, [sp, #24]
 80081c0:	e78a      	b.n	80080d8 <_dtoa_r+0x828>
 80081c2:	4603      	mov	r3, r0
 80081c4:	e7f4      	b.n	80081b0 <_dtoa_r+0x900>
 80081c6:	9b03      	ldr	r3, [sp, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	46b8      	mov	r8, r7
 80081cc:	dc20      	bgt.n	8008210 <_dtoa_r+0x960>
 80081ce:	469b      	mov	fp, r3
 80081d0:	9b07      	ldr	r3, [sp, #28]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	dd1e      	ble.n	8008214 <_dtoa_r+0x964>
 80081d6:	f1bb 0f00 	cmp.w	fp, #0
 80081da:	f47f adb1 	bne.w	8007d40 <_dtoa_r+0x490>
 80081de:	4621      	mov	r1, r4
 80081e0:	465b      	mov	r3, fp
 80081e2:	2205      	movs	r2, #5
 80081e4:	4648      	mov	r0, r9
 80081e6:	f000 fd2b 	bl	8008c40 <__multadd>
 80081ea:	4601      	mov	r1, r0
 80081ec:	4604      	mov	r4, r0
 80081ee:	9802      	ldr	r0, [sp, #8]
 80081f0:	f000 ff80 	bl	80090f4 <__mcmp>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	f77f ada3 	ble.w	8007d40 <_dtoa_r+0x490>
 80081fa:	4656      	mov	r6, sl
 80081fc:	2331      	movs	r3, #49	@ 0x31
 80081fe:	f806 3b01 	strb.w	r3, [r6], #1
 8008202:	f108 0801 	add.w	r8, r8, #1
 8008206:	e59f      	b.n	8007d48 <_dtoa_r+0x498>
 8008208:	9c03      	ldr	r4, [sp, #12]
 800820a:	46b8      	mov	r8, r7
 800820c:	4625      	mov	r5, r4
 800820e:	e7f4      	b.n	80081fa <_dtoa_r+0x94a>
 8008210:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 8101 	beq.w	800841e <_dtoa_r+0xb6e>
 800821c:	2e00      	cmp	r6, #0
 800821e:	dd05      	ble.n	800822c <_dtoa_r+0x97c>
 8008220:	4629      	mov	r1, r5
 8008222:	4632      	mov	r2, r6
 8008224:	4648      	mov	r0, r9
 8008226:	f000 fef9 	bl	800901c <__lshift>
 800822a:	4605      	mov	r5, r0
 800822c:	9b08      	ldr	r3, [sp, #32]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d05c      	beq.n	80082ec <_dtoa_r+0xa3c>
 8008232:	6869      	ldr	r1, [r5, #4]
 8008234:	4648      	mov	r0, r9
 8008236:	f000 fca1 	bl	8008b7c <_Balloc>
 800823a:	4606      	mov	r6, r0
 800823c:	b928      	cbnz	r0, 800824a <_dtoa_r+0x99a>
 800823e:	4b82      	ldr	r3, [pc, #520]	@ (8008448 <_dtoa_r+0xb98>)
 8008240:	4602      	mov	r2, r0
 8008242:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008246:	f7ff bb4a 	b.w	80078de <_dtoa_r+0x2e>
 800824a:	692a      	ldr	r2, [r5, #16]
 800824c:	3202      	adds	r2, #2
 800824e:	0092      	lsls	r2, r2, #2
 8008250:	f105 010c 	add.w	r1, r5, #12
 8008254:	300c      	adds	r0, #12
 8008256:	f7ff fa66 	bl	8007726 <memcpy>
 800825a:	2201      	movs	r2, #1
 800825c:	4631      	mov	r1, r6
 800825e:	4648      	mov	r0, r9
 8008260:	f000 fedc 	bl	800901c <__lshift>
 8008264:	f10a 0301 	add.w	r3, sl, #1
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	eb0a 030b 	add.w	r3, sl, fp
 800826e:	9308      	str	r3, [sp, #32]
 8008270:	9b04      	ldr	r3, [sp, #16]
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	462f      	mov	r7, r5
 8008278:	9306      	str	r3, [sp, #24]
 800827a:	4605      	mov	r5, r0
 800827c:	9b00      	ldr	r3, [sp, #0]
 800827e:	9802      	ldr	r0, [sp, #8]
 8008280:	4621      	mov	r1, r4
 8008282:	f103 3bff 	add.w	fp, r3, #4294967295
 8008286:	f7ff fa8b 	bl	80077a0 <quorem>
 800828a:	4603      	mov	r3, r0
 800828c:	3330      	adds	r3, #48	@ 0x30
 800828e:	9003      	str	r0, [sp, #12]
 8008290:	4639      	mov	r1, r7
 8008292:	9802      	ldr	r0, [sp, #8]
 8008294:	9309      	str	r3, [sp, #36]	@ 0x24
 8008296:	f000 ff2d 	bl	80090f4 <__mcmp>
 800829a:	462a      	mov	r2, r5
 800829c:	9004      	str	r0, [sp, #16]
 800829e:	4621      	mov	r1, r4
 80082a0:	4648      	mov	r0, r9
 80082a2:	f000 ff43 	bl	800912c <__mdiff>
 80082a6:	68c2      	ldr	r2, [r0, #12]
 80082a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082aa:	4606      	mov	r6, r0
 80082ac:	bb02      	cbnz	r2, 80082f0 <_dtoa_r+0xa40>
 80082ae:	4601      	mov	r1, r0
 80082b0:	9802      	ldr	r0, [sp, #8]
 80082b2:	f000 ff1f 	bl	80090f4 <__mcmp>
 80082b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082b8:	4602      	mov	r2, r0
 80082ba:	4631      	mov	r1, r6
 80082bc:	4648      	mov	r0, r9
 80082be:	920c      	str	r2, [sp, #48]	@ 0x30
 80082c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80082c2:	f000 fc9b 	bl	8008bfc <_Bfree>
 80082c6:	9b07      	ldr	r3, [sp, #28]
 80082c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80082ca:	9e00      	ldr	r6, [sp, #0]
 80082cc:	ea42 0103 	orr.w	r1, r2, r3
 80082d0:	9b06      	ldr	r3, [sp, #24]
 80082d2:	4319      	orrs	r1, r3
 80082d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082d6:	d10d      	bne.n	80082f4 <_dtoa_r+0xa44>
 80082d8:	2b39      	cmp	r3, #57	@ 0x39
 80082da:	d027      	beq.n	800832c <_dtoa_r+0xa7c>
 80082dc:	9a04      	ldr	r2, [sp, #16]
 80082de:	2a00      	cmp	r2, #0
 80082e0:	dd01      	ble.n	80082e6 <_dtoa_r+0xa36>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	3331      	adds	r3, #49	@ 0x31
 80082e6:	f88b 3000 	strb.w	r3, [fp]
 80082ea:	e52e      	b.n	8007d4a <_dtoa_r+0x49a>
 80082ec:	4628      	mov	r0, r5
 80082ee:	e7b9      	b.n	8008264 <_dtoa_r+0x9b4>
 80082f0:	2201      	movs	r2, #1
 80082f2:	e7e2      	b.n	80082ba <_dtoa_r+0xa0a>
 80082f4:	9904      	ldr	r1, [sp, #16]
 80082f6:	2900      	cmp	r1, #0
 80082f8:	db04      	blt.n	8008304 <_dtoa_r+0xa54>
 80082fa:	9807      	ldr	r0, [sp, #28]
 80082fc:	4301      	orrs	r1, r0
 80082fe:	9806      	ldr	r0, [sp, #24]
 8008300:	4301      	orrs	r1, r0
 8008302:	d120      	bne.n	8008346 <_dtoa_r+0xa96>
 8008304:	2a00      	cmp	r2, #0
 8008306:	ddee      	ble.n	80082e6 <_dtoa_r+0xa36>
 8008308:	9902      	ldr	r1, [sp, #8]
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	2201      	movs	r2, #1
 800830e:	4648      	mov	r0, r9
 8008310:	f000 fe84 	bl	800901c <__lshift>
 8008314:	4621      	mov	r1, r4
 8008316:	9002      	str	r0, [sp, #8]
 8008318:	f000 feec 	bl	80090f4 <__mcmp>
 800831c:	2800      	cmp	r0, #0
 800831e:	9b00      	ldr	r3, [sp, #0]
 8008320:	dc02      	bgt.n	8008328 <_dtoa_r+0xa78>
 8008322:	d1e0      	bne.n	80082e6 <_dtoa_r+0xa36>
 8008324:	07da      	lsls	r2, r3, #31
 8008326:	d5de      	bpl.n	80082e6 <_dtoa_r+0xa36>
 8008328:	2b39      	cmp	r3, #57	@ 0x39
 800832a:	d1da      	bne.n	80082e2 <_dtoa_r+0xa32>
 800832c:	2339      	movs	r3, #57	@ 0x39
 800832e:	f88b 3000 	strb.w	r3, [fp]
 8008332:	4633      	mov	r3, r6
 8008334:	461e      	mov	r6, r3
 8008336:	3b01      	subs	r3, #1
 8008338:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800833c:	2a39      	cmp	r2, #57	@ 0x39
 800833e:	d04e      	beq.n	80083de <_dtoa_r+0xb2e>
 8008340:	3201      	adds	r2, #1
 8008342:	701a      	strb	r2, [r3, #0]
 8008344:	e501      	b.n	8007d4a <_dtoa_r+0x49a>
 8008346:	2a00      	cmp	r2, #0
 8008348:	dd03      	ble.n	8008352 <_dtoa_r+0xaa2>
 800834a:	2b39      	cmp	r3, #57	@ 0x39
 800834c:	d0ee      	beq.n	800832c <_dtoa_r+0xa7c>
 800834e:	3301      	adds	r3, #1
 8008350:	e7c9      	b.n	80082e6 <_dtoa_r+0xa36>
 8008352:	9a00      	ldr	r2, [sp, #0]
 8008354:	9908      	ldr	r1, [sp, #32]
 8008356:	f802 3c01 	strb.w	r3, [r2, #-1]
 800835a:	428a      	cmp	r2, r1
 800835c:	d028      	beq.n	80083b0 <_dtoa_r+0xb00>
 800835e:	9902      	ldr	r1, [sp, #8]
 8008360:	2300      	movs	r3, #0
 8008362:	220a      	movs	r2, #10
 8008364:	4648      	mov	r0, r9
 8008366:	f000 fc6b 	bl	8008c40 <__multadd>
 800836a:	42af      	cmp	r7, r5
 800836c:	9002      	str	r0, [sp, #8]
 800836e:	f04f 0300 	mov.w	r3, #0
 8008372:	f04f 020a 	mov.w	r2, #10
 8008376:	4639      	mov	r1, r7
 8008378:	4648      	mov	r0, r9
 800837a:	d107      	bne.n	800838c <_dtoa_r+0xadc>
 800837c:	f000 fc60 	bl	8008c40 <__multadd>
 8008380:	4607      	mov	r7, r0
 8008382:	4605      	mov	r5, r0
 8008384:	9b00      	ldr	r3, [sp, #0]
 8008386:	3301      	adds	r3, #1
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	e777      	b.n	800827c <_dtoa_r+0x9cc>
 800838c:	f000 fc58 	bl	8008c40 <__multadd>
 8008390:	4629      	mov	r1, r5
 8008392:	4607      	mov	r7, r0
 8008394:	2300      	movs	r3, #0
 8008396:	220a      	movs	r2, #10
 8008398:	4648      	mov	r0, r9
 800839a:	f000 fc51 	bl	8008c40 <__multadd>
 800839e:	4605      	mov	r5, r0
 80083a0:	e7f0      	b.n	8008384 <_dtoa_r+0xad4>
 80083a2:	f1bb 0f00 	cmp.w	fp, #0
 80083a6:	bfcc      	ite	gt
 80083a8:	465e      	movgt	r6, fp
 80083aa:	2601      	movle	r6, #1
 80083ac:	4456      	add	r6, sl
 80083ae:	2700      	movs	r7, #0
 80083b0:	9902      	ldr	r1, [sp, #8]
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	2201      	movs	r2, #1
 80083b6:	4648      	mov	r0, r9
 80083b8:	f000 fe30 	bl	800901c <__lshift>
 80083bc:	4621      	mov	r1, r4
 80083be:	9002      	str	r0, [sp, #8]
 80083c0:	f000 fe98 	bl	80090f4 <__mcmp>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	dcb4      	bgt.n	8008332 <_dtoa_r+0xa82>
 80083c8:	d102      	bne.n	80083d0 <_dtoa_r+0xb20>
 80083ca:	9b00      	ldr	r3, [sp, #0]
 80083cc:	07db      	lsls	r3, r3, #31
 80083ce:	d4b0      	bmi.n	8008332 <_dtoa_r+0xa82>
 80083d0:	4633      	mov	r3, r6
 80083d2:	461e      	mov	r6, r3
 80083d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083d8:	2a30      	cmp	r2, #48	@ 0x30
 80083da:	d0fa      	beq.n	80083d2 <_dtoa_r+0xb22>
 80083dc:	e4b5      	b.n	8007d4a <_dtoa_r+0x49a>
 80083de:	459a      	cmp	sl, r3
 80083e0:	d1a8      	bne.n	8008334 <_dtoa_r+0xa84>
 80083e2:	2331      	movs	r3, #49	@ 0x31
 80083e4:	f108 0801 	add.w	r8, r8, #1
 80083e8:	f88a 3000 	strb.w	r3, [sl]
 80083ec:	e4ad      	b.n	8007d4a <_dtoa_r+0x49a>
 80083ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800844c <_dtoa_r+0xb9c>
 80083f4:	b11b      	cbz	r3, 80083fe <_dtoa_r+0xb4e>
 80083f6:	f10a 0308 	add.w	r3, sl, #8
 80083fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	4650      	mov	r0, sl
 8008400:	b017      	add	sp, #92	@ 0x5c
 8008402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008406:	9b07      	ldr	r3, [sp, #28]
 8008408:	2b01      	cmp	r3, #1
 800840a:	f77f ae2e 	ble.w	800806a <_dtoa_r+0x7ba>
 800840e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008410:	9308      	str	r3, [sp, #32]
 8008412:	2001      	movs	r0, #1
 8008414:	e64d      	b.n	80080b2 <_dtoa_r+0x802>
 8008416:	f1bb 0f00 	cmp.w	fp, #0
 800841a:	f77f aed9 	ble.w	80081d0 <_dtoa_r+0x920>
 800841e:	4656      	mov	r6, sl
 8008420:	9802      	ldr	r0, [sp, #8]
 8008422:	4621      	mov	r1, r4
 8008424:	f7ff f9bc 	bl	80077a0 <quorem>
 8008428:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800842c:	f806 3b01 	strb.w	r3, [r6], #1
 8008430:	eba6 020a 	sub.w	r2, r6, sl
 8008434:	4593      	cmp	fp, r2
 8008436:	ddb4      	ble.n	80083a2 <_dtoa_r+0xaf2>
 8008438:	9902      	ldr	r1, [sp, #8]
 800843a:	2300      	movs	r3, #0
 800843c:	220a      	movs	r2, #10
 800843e:	4648      	mov	r0, r9
 8008440:	f000 fbfe 	bl	8008c40 <__multadd>
 8008444:	9002      	str	r0, [sp, #8]
 8008446:	e7eb      	b.n	8008420 <_dtoa_r+0xb70>
 8008448:	0800a279 	.word	0x0800a279
 800844c:	0800a214 	.word	0x0800a214

08008450 <_free_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4605      	mov	r5, r0
 8008454:	2900      	cmp	r1, #0
 8008456:	d041      	beq.n	80084dc <_free_r+0x8c>
 8008458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800845c:	1f0c      	subs	r4, r1, #4
 800845e:	2b00      	cmp	r3, #0
 8008460:	bfb8      	it	lt
 8008462:	18e4      	addlt	r4, r4, r3
 8008464:	f7fd fac2 	bl	80059ec <__malloc_lock>
 8008468:	4a1d      	ldr	r2, [pc, #116]	@ (80084e0 <_free_r+0x90>)
 800846a:	6813      	ldr	r3, [r2, #0]
 800846c:	b933      	cbnz	r3, 800847c <_free_r+0x2c>
 800846e:	6063      	str	r3, [r4, #4]
 8008470:	6014      	str	r4, [r2, #0]
 8008472:	4628      	mov	r0, r5
 8008474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008478:	f7fd babe 	b.w	80059f8 <__malloc_unlock>
 800847c:	42a3      	cmp	r3, r4
 800847e:	d908      	bls.n	8008492 <_free_r+0x42>
 8008480:	6820      	ldr	r0, [r4, #0]
 8008482:	1821      	adds	r1, r4, r0
 8008484:	428b      	cmp	r3, r1
 8008486:	bf01      	itttt	eq
 8008488:	6819      	ldreq	r1, [r3, #0]
 800848a:	685b      	ldreq	r3, [r3, #4]
 800848c:	1809      	addeq	r1, r1, r0
 800848e:	6021      	streq	r1, [r4, #0]
 8008490:	e7ed      	b.n	800846e <_free_r+0x1e>
 8008492:	461a      	mov	r2, r3
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	b10b      	cbz	r3, 800849c <_free_r+0x4c>
 8008498:	42a3      	cmp	r3, r4
 800849a:	d9fa      	bls.n	8008492 <_free_r+0x42>
 800849c:	6811      	ldr	r1, [r2, #0]
 800849e:	1850      	adds	r0, r2, r1
 80084a0:	42a0      	cmp	r0, r4
 80084a2:	d10b      	bne.n	80084bc <_free_r+0x6c>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	4401      	add	r1, r0
 80084a8:	1850      	adds	r0, r2, r1
 80084aa:	4283      	cmp	r3, r0
 80084ac:	6011      	str	r1, [r2, #0]
 80084ae:	d1e0      	bne.n	8008472 <_free_r+0x22>
 80084b0:	6818      	ldr	r0, [r3, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	6053      	str	r3, [r2, #4]
 80084b6:	4408      	add	r0, r1
 80084b8:	6010      	str	r0, [r2, #0]
 80084ba:	e7da      	b.n	8008472 <_free_r+0x22>
 80084bc:	d902      	bls.n	80084c4 <_free_r+0x74>
 80084be:	230c      	movs	r3, #12
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	e7d6      	b.n	8008472 <_free_r+0x22>
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	1821      	adds	r1, r4, r0
 80084c8:	428b      	cmp	r3, r1
 80084ca:	bf04      	itt	eq
 80084cc:	6819      	ldreq	r1, [r3, #0]
 80084ce:	685b      	ldreq	r3, [r3, #4]
 80084d0:	6063      	str	r3, [r4, #4]
 80084d2:	bf04      	itt	eq
 80084d4:	1809      	addeq	r1, r1, r0
 80084d6:	6021      	streq	r1, [r4, #0]
 80084d8:	6054      	str	r4, [r2, #4]
 80084da:	e7ca      	b.n	8008472 <_free_r+0x22>
 80084dc:	bd38      	pop	{r3, r4, r5, pc}
 80084de:	bf00      	nop
 80084e0:	200005f4 	.word	0x200005f4

080084e4 <rshift>:
 80084e4:	6903      	ldr	r3, [r0, #16]
 80084e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80084ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80084f2:	f100 0414 	add.w	r4, r0, #20
 80084f6:	dd45      	ble.n	8008584 <rshift+0xa0>
 80084f8:	f011 011f 	ands.w	r1, r1, #31
 80084fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008500:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008504:	d10c      	bne.n	8008520 <rshift+0x3c>
 8008506:	f100 0710 	add.w	r7, r0, #16
 800850a:	4629      	mov	r1, r5
 800850c:	42b1      	cmp	r1, r6
 800850e:	d334      	bcc.n	800857a <rshift+0x96>
 8008510:	1a9b      	subs	r3, r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	1eea      	subs	r2, r5, #3
 8008516:	4296      	cmp	r6, r2
 8008518:	bf38      	it	cc
 800851a:	2300      	movcc	r3, #0
 800851c:	4423      	add	r3, r4
 800851e:	e015      	b.n	800854c <rshift+0x68>
 8008520:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008524:	f1c1 0820 	rsb	r8, r1, #32
 8008528:	40cf      	lsrs	r7, r1
 800852a:	f105 0e04 	add.w	lr, r5, #4
 800852e:	46a1      	mov	r9, r4
 8008530:	4576      	cmp	r6, lr
 8008532:	46f4      	mov	ip, lr
 8008534:	d815      	bhi.n	8008562 <rshift+0x7e>
 8008536:	1a9a      	subs	r2, r3, r2
 8008538:	0092      	lsls	r2, r2, #2
 800853a:	3a04      	subs	r2, #4
 800853c:	3501      	adds	r5, #1
 800853e:	42ae      	cmp	r6, r5
 8008540:	bf38      	it	cc
 8008542:	2200      	movcc	r2, #0
 8008544:	18a3      	adds	r3, r4, r2
 8008546:	50a7      	str	r7, [r4, r2]
 8008548:	b107      	cbz	r7, 800854c <rshift+0x68>
 800854a:	3304      	adds	r3, #4
 800854c:	1b1a      	subs	r2, r3, r4
 800854e:	42a3      	cmp	r3, r4
 8008550:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008554:	bf08      	it	eq
 8008556:	2300      	moveq	r3, #0
 8008558:	6102      	str	r2, [r0, #16]
 800855a:	bf08      	it	eq
 800855c:	6143      	streq	r3, [r0, #20]
 800855e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008562:	f8dc c000 	ldr.w	ip, [ip]
 8008566:	fa0c fc08 	lsl.w	ip, ip, r8
 800856a:	ea4c 0707 	orr.w	r7, ip, r7
 800856e:	f849 7b04 	str.w	r7, [r9], #4
 8008572:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008576:	40cf      	lsrs	r7, r1
 8008578:	e7da      	b.n	8008530 <rshift+0x4c>
 800857a:	f851 cb04 	ldr.w	ip, [r1], #4
 800857e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008582:	e7c3      	b.n	800850c <rshift+0x28>
 8008584:	4623      	mov	r3, r4
 8008586:	e7e1      	b.n	800854c <rshift+0x68>

08008588 <__hexdig_fun>:
 8008588:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800858c:	2b09      	cmp	r3, #9
 800858e:	d802      	bhi.n	8008596 <__hexdig_fun+0xe>
 8008590:	3820      	subs	r0, #32
 8008592:	b2c0      	uxtb	r0, r0
 8008594:	4770      	bx	lr
 8008596:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800859a:	2b05      	cmp	r3, #5
 800859c:	d801      	bhi.n	80085a2 <__hexdig_fun+0x1a>
 800859e:	3847      	subs	r0, #71	@ 0x47
 80085a0:	e7f7      	b.n	8008592 <__hexdig_fun+0xa>
 80085a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80085a6:	2b05      	cmp	r3, #5
 80085a8:	d801      	bhi.n	80085ae <__hexdig_fun+0x26>
 80085aa:	3827      	subs	r0, #39	@ 0x27
 80085ac:	e7f1      	b.n	8008592 <__hexdig_fun+0xa>
 80085ae:	2000      	movs	r0, #0
 80085b0:	4770      	bx	lr
	...

080085b4 <__gethex>:
 80085b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	b085      	sub	sp, #20
 80085ba:	468a      	mov	sl, r1
 80085bc:	9302      	str	r3, [sp, #8]
 80085be:	680b      	ldr	r3, [r1, #0]
 80085c0:	9001      	str	r0, [sp, #4]
 80085c2:	4690      	mov	r8, r2
 80085c4:	1c9c      	adds	r4, r3, #2
 80085c6:	46a1      	mov	r9, r4
 80085c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80085cc:	2830      	cmp	r0, #48	@ 0x30
 80085ce:	d0fa      	beq.n	80085c6 <__gethex+0x12>
 80085d0:	eba9 0303 	sub.w	r3, r9, r3
 80085d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80085d8:	f7ff ffd6 	bl	8008588 <__hexdig_fun>
 80085dc:	4605      	mov	r5, r0
 80085de:	2800      	cmp	r0, #0
 80085e0:	d168      	bne.n	80086b4 <__gethex+0x100>
 80085e2:	49a0      	ldr	r1, [pc, #640]	@ (8008864 <__gethex+0x2b0>)
 80085e4:	2201      	movs	r2, #1
 80085e6:	4648      	mov	r0, r9
 80085e8:	f7fe ffa7 	bl	800753a <strncmp>
 80085ec:	4607      	mov	r7, r0
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d167      	bne.n	80086c2 <__gethex+0x10e>
 80085f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80085f6:	4626      	mov	r6, r4
 80085f8:	f7ff ffc6 	bl	8008588 <__hexdig_fun>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d062      	beq.n	80086c6 <__gethex+0x112>
 8008600:	4623      	mov	r3, r4
 8008602:	7818      	ldrb	r0, [r3, #0]
 8008604:	2830      	cmp	r0, #48	@ 0x30
 8008606:	4699      	mov	r9, r3
 8008608:	f103 0301 	add.w	r3, r3, #1
 800860c:	d0f9      	beq.n	8008602 <__gethex+0x4e>
 800860e:	f7ff ffbb 	bl	8008588 <__hexdig_fun>
 8008612:	fab0 f580 	clz	r5, r0
 8008616:	096d      	lsrs	r5, r5, #5
 8008618:	f04f 0b01 	mov.w	fp, #1
 800861c:	464a      	mov	r2, r9
 800861e:	4616      	mov	r6, r2
 8008620:	3201      	adds	r2, #1
 8008622:	7830      	ldrb	r0, [r6, #0]
 8008624:	f7ff ffb0 	bl	8008588 <__hexdig_fun>
 8008628:	2800      	cmp	r0, #0
 800862a:	d1f8      	bne.n	800861e <__gethex+0x6a>
 800862c:	498d      	ldr	r1, [pc, #564]	@ (8008864 <__gethex+0x2b0>)
 800862e:	2201      	movs	r2, #1
 8008630:	4630      	mov	r0, r6
 8008632:	f7fe ff82 	bl	800753a <strncmp>
 8008636:	2800      	cmp	r0, #0
 8008638:	d13f      	bne.n	80086ba <__gethex+0x106>
 800863a:	b944      	cbnz	r4, 800864e <__gethex+0x9a>
 800863c:	1c74      	adds	r4, r6, #1
 800863e:	4622      	mov	r2, r4
 8008640:	4616      	mov	r6, r2
 8008642:	3201      	adds	r2, #1
 8008644:	7830      	ldrb	r0, [r6, #0]
 8008646:	f7ff ff9f 	bl	8008588 <__hexdig_fun>
 800864a:	2800      	cmp	r0, #0
 800864c:	d1f8      	bne.n	8008640 <__gethex+0x8c>
 800864e:	1ba4      	subs	r4, r4, r6
 8008650:	00a7      	lsls	r7, r4, #2
 8008652:	7833      	ldrb	r3, [r6, #0]
 8008654:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008658:	2b50      	cmp	r3, #80	@ 0x50
 800865a:	d13e      	bne.n	80086da <__gethex+0x126>
 800865c:	7873      	ldrb	r3, [r6, #1]
 800865e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008660:	d033      	beq.n	80086ca <__gethex+0x116>
 8008662:	2b2d      	cmp	r3, #45	@ 0x2d
 8008664:	d034      	beq.n	80086d0 <__gethex+0x11c>
 8008666:	1c71      	adds	r1, r6, #1
 8008668:	2400      	movs	r4, #0
 800866a:	7808      	ldrb	r0, [r1, #0]
 800866c:	f7ff ff8c 	bl	8008588 <__hexdig_fun>
 8008670:	1e43      	subs	r3, r0, #1
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b18      	cmp	r3, #24
 8008676:	d830      	bhi.n	80086da <__gethex+0x126>
 8008678:	f1a0 0210 	sub.w	r2, r0, #16
 800867c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008680:	f7ff ff82 	bl	8008588 <__hexdig_fun>
 8008684:	f100 3cff 	add.w	ip, r0, #4294967295
 8008688:	fa5f fc8c 	uxtb.w	ip, ip
 800868c:	f1bc 0f18 	cmp.w	ip, #24
 8008690:	f04f 030a 	mov.w	r3, #10
 8008694:	d91e      	bls.n	80086d4 <__gethex+0x120>
 8008696:	b104      	cbz	r4, 800869a <__gethex+0xe6>
 8008698:	4252      	negs	r2, r2
 800869a:	4417      	add	r7, r2
 800869c:	f8ca 1000 	str.w	r1, [sl]
 80086a0:	b1ed      	cbz	r5, 80086de <__gethex+0x12a>
 80086a2:	f1bb 0f00 	cmp.w	fp, #0
 80086a6:	bf0c      	ite	eq
 80086a8:	2506      	moveq	r5, #6
 80086aa:	2500      	movne	r5, #0
 80086ac:	4628      	mov	r0, r5
 80086ae:	b005      	add	sp, #20
 80086b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b4:	2500      	movs	r5, #0
 80086b6:	462c      	mov	r4, r5
 80086b8:	e7b0      	b.n	800861c <__gethex+0x68>
 80086ba:	2c00      	cmp	r4, #0
 80086bc:	d1c7      	bne.n	800864e <__gethex+0x9a>
 80086be:	4627      	mov	r7, r4
 80086c0:	e7c7      	b.n	8008652 <__gethex+0x9e>
 80086c2:	464e      	mov	r6, r9
 80086c4:	462f      	mov	r7, r5
 80086c6:	2501      	movs	r5, #1
 80086c8:	e7c3      	b.n	8008652 <__gethex+0x9e>
 80086ca:	2400      	movs	r4, #0
 80086cc:	1cb1      	adds	r1, r6, #2
 80086ce:	e7cc      	b.n	800866a <__gethex+0xb6>
 80086d0:	2401      	movs	r4, #1
 80086d2:	e7fb      	b.n	80086cc <__gethex+0x118>
 80086d4:	fb03 0002 	mla	r0, r3, r2, r0
 80086d8:	e7ce      	b.n	8008678 <__gethex+0xc4>
 80086da:	4631      	mov	r1, r6
 80086dc:	e7de      	b.n	800869c <__gethex+0xe8>
 80086de:	eba6 0309 	sub.w	r3, r6, r9
 80086e2:	3b01      	subs	r3, #1
 80086e4:	4629      	mov	r1, r5
 80086e6:	2b07      	cmp	r3, #7
 80086e8:	dc0a      	bgt.n	8008700 <__gethex+0x14c>
 80086ea:	9801      	ldr	r0, [sp, #4]
 80086ec:	f000 fa46 	bl	8008b7c <_Balloc>
 80086f0:	4604      	mov	r4, r0
 80086f2:	b940      	cbnz	r0, 8008706 <__gethex+0x152>
 80086f4:	4b5c      	ldr	r3, [pc, #368]	@ (8008868 <__gethex+0x2b4>)
 80086f6:	4602      	mov	r2, r0
 80086f8:	21e4      	movs	r1, #228	@ 0xe4
 80086fa:	485c      	ldr	r0, [pc, #368]	@ (800886c <__gethex+0x2b8>)
 80086fc:	f7ff f832 	bl	8007764 <__assert_func>
 8008700:	3101      	adds	r1, #1
 8008702:	105b      	asrs	r3, r3, #1
 8008704:	e7ef      	b.n	80086e6 <__gethex+0x132>
 8008706:	f100 0a14 	add.w	sl, r0, #20
 800870a:	2300      	movs	r3, #0
 800870c:	4655      	mov	r5, sl
 800870e:	469b      	mov	fp, r3
 8008710:	45b1      	cmp	r9, r6
 8008712:	d337      	bcc.n	8008784 <__gethex+0x1d0>
 8008714:	f845 bb04 	str.w	fp, [r5], #4
 8008718:	eba5 050a 	sub.w	r5, r5, sl
 800871c:	10ad      	asrs	r5, r5, #2
 800871e:	6125      	str	r5, [r4, #16]
 8008720:	4658      	mov	r0, fp
 8008722:	f000 fb1d 	bl	8008d60 <__hi0bits>
 8008726:	016d      	lsls	r5, r5, #5
 8008728:	f8d8 6000 	ldr.w	r6, [r8]
 800872c:	1a2d      	subs	r5, r5, r0
 800872e:	42b5      	cmp	r5, r6
 8008730:	dd54      	ble.n	80087dc <__gethex+0x228>
 8008732:	1bad      	subs	r5, r5, r6
 8008734:	4629      	mov	r1, r5
 8008736:	4620      	mov	r0, r4
 8008738:	f000 fea9 	bl	800948e <__any_on>
 800873c:	4681      	mov	r9, r0
 800873e:	b178      	cbz	r0, 8008760 <__gethex+0x1ac>
 8008740:	1e6b      	subs	r3, r5, #1
 8008742:	1159      	asrs	r1, r3, #5
 8008744:	f003 021f 	and.w	r2, r3, #31
 8008748:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800874c:	f04f 0901 	mov.w	r9, #1
 8008750:	fa09 f202 	lsl.w	r2, r9, r2
 8008754:	420a      	tst	r2, r1
 8008756:	d003      	beq.n	8008760 <__gethex+0x1ac>
 8008758:	454b      	cmp	r3, r9
 800875a:	dc36      	bgt.n	80087ca <__gethex+0x216>
 800875c:	f04f 0902 	mov.w	r9, #2
 8008760:	4629      	mov	r1, r5
 8008762:	4620      	mov	r0, r4
 8008764:	f7ff febe 	bl	80084e4 <rshift>
 8008768:	442f      	add	r7, r5
 800876a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800876e:	42bb      	cmp	r3, r7
 8008770:	da42      	bge.n	80087f8 <__gethex+0x244>
 8008772:	9801      	ldr	r0, [sp, #4]
 8008774:	4621      	mov	r1, r4
 8008776:	f000 fa41 	bl	8008bfc <_Bfree>
 800877a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800877c:	2300      	movs	r3, #0
 800877e:	6013      	str	r3, [r2, #0]
 8008780:	25a3      	movs	r5, #163	@ 0xa3
 8008782:	e793      	b.n	80086ac <__gethex+0xf8>
 8008784:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008788:	2a2e      	cmp	r2, #46	@ 0x2e
 800878a:	d012      	beq.n	80087b2 <__gethex+0x1fe>
 800878c:	2b20      	cmp	r3, #32
 800878e:	d104      	bne.n	800879a <__gethex+0x1e6>
 8008790:	f845 bb04 	str.w	fp, [r5], #4
 8008794:	f04f 0b00 	mov.w	fp, #0
 8008798:	465b      	mov	r3, fp
 800879a:	7830      	ldrb	r0, [r6, #0]
 800879c:	9303      	str	r3, [sp, #12]
 800879e:	f7ff fef3 	bl	8008588 <__hexdig_fun>
 80087a2:	9b03      	ldr	r3, [sp, #12]
 80087a4:	f000 000f 	and.w	r0, r0, #15
 80087a8:	4098      	lsls	r0, r3
 80087aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80087ae:	3304      	adds	r3, #4
 80087b0:	e7ae      	b.n	8008710 <__gethex+0x15c>
 80087b2:	45b1      	cmp	r9, r6
 80087b4:	d8ea      	bhi.n	800878c <__gethex+0x1d8>
 80087b6:	492b      	ldr	r1, [pc, #172]	@ (8008864 <__gethex+0x2b0>)
 80087b8:	9303      	str	r3, [sp, #12]
 80087ba:	2201      	movs	r2, #1
 80087bc:	4630      	mov	r0, r6
 80087be:	f7fe febc 	bl	800753a <strncmp>
 80087c2:	9b03      	ldr	r3, [sp, #12]
 80087c4:	2800      	cmp	r0, #0
 80087c6:	d1e1      	bne.n	800878c <__gethex+0x1d8>
 80087c8:	e7a2      	b.n	8008710 <__gethex+0x15c>
 80087ca:	1ea9      	subs	r1, r5, #2
 80087cc:	4620      	mov	r0, r4
 80087ce:	f000 fe5e 	bl	800948e <__any_on>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d0c2      	beq.n	800875c <__gethex+0x1a8>
 80087d6:	f04f 0903 	mov.w	r9, #3
 80087da:	e7c1      	b.n	8008760 <__gethex+0x1ac>
 80087dc:	da09      	bge.n	80087f2 <__gethex+0x23e>
 80087de:	1b75      	subs	r5, r6, r5
 80087e0:	4621      	mov	r1, r4
 80087e2:	9801      	ldr	r0, [sp, #4]
 80087e4:	462a      	mov	r2, r5
 80087e6:	f000 fc19 	bl	800901c <__lshift>
 80087ea:	1b7f      	subs	r7, r7, r5
 80087ec:	4604      	mov	r4, r0
 80087ee:	f100 0a14 	add.w	sl, r0, #20
 80087f2:	f04f 0900 	mov.w	r9, #0
 80087f6:	e7b8      	b.n	800876a <__gethex+0x1b6>
 80087f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80087fc:	42bd      	cmp	r5, r7
 80087fe:	dd6f      	ble.n	80088e0 <__gethex+0x32c>
 8008800:	1bed      	subs	r5, r5, r7
 8008802:	42ae      	cmp	r6, r5
 8008804:	dc34      	bgt.n	8008870 <__gethex+0x2bc>
 8008806:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800880a:	2b02      	cmp	r3, #2
 800880c:	d022      	beq.n	8008854 <__gethex+0x2a0>
 800880e:	2b03      	cmp	r3, #3
 8008810:	d024      	beq.n	800885c <__gethex+0x2a8>
 8008812:	2b01      	cmp	r3, #1
 8008814:	d115      	bne.n	8008842 <__gethex+0x28e>
 8008816:	42ae      	cmp	r6, r5
 8008818:	d113      	bne.n	8008842 <__gethex+0x28e>
 800881a:	2e01      	cmp	r6, #1
 800881c:	d10b      	bne.n	8008836 <__gethex+0x282>
 800881e:	9a02      	ldr	r2, [sp, #8]
 8008820:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	2301      	movs	r3, #1
 8008828:	6123      	str	r3, [r4, #16]
 800882a:	f8ca 3000 	str.w	r3, [sl]
 800882e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008830:	2562      	movs	r5, #98	@ 0x62
 8008832:	601c      	str	r4, [r3, #0]
 8008834:	e73a      	b.n	80086ac <__gethex+0xf8>
 8008836:	1e71      	subs	r1, r6, #1
 8008838:	4620      	mov	r0, r4
 800883a:	f000 fe28 	bl	800948e <__any_on>
 800883e:	2800      	cmp	r0, #0
 8008840:	d1ed      	bne.n	800881e <__gethex+0x26a>
 8008842:	9801      	ldr	r0, [sp, #4]
 8008844:	4621      	mov	r1, r4
 8008846:	f000 f9d9 	bl	8008bfc <_Bfree>
 800884a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800884c:	2300      	movs	r3, #0
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	2550      	movs	r5, #80	@ 0x50
 8008852:	e72b      	b.n	80086ac <__gethex+0xf8>
 8008854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1f3      	bne.n	8008842 <__gethex+0x28e>
 800885a:	e7e0      	b.n	800881e <__gethex+0x26a>
 800885c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1dd      	bne.n	800881e <__gethex+0x26a>
 8008862:	e7ee      	b.n	8008842 <__gethex+0x28e>
 8008864:	0800a124 	.word	0x0800a124
 8008868:	0800a279 	.word	0x0800a279
 800886c:	0800a28a 	.word	0x0800a28a
 8008870:	1e6f      	subs	r7, r5, #1
 8008872:	f1b9 0f00 	cmp.w	r9, #0
 8008876:	d130      	bne.n	80088da <__gethex+0x326>
 8008878:	b127      	cbz	r7, 8008884 <__gethex+0x2d0>
 800887a:	4639      	mov	r1, r7
 800887c:	4620      	mov	r0, r4
 800887e:	f000 fe06 	bl	800948e <__any_on>
 8008882:	4681      	mov	r9, r0
 8008884:	117a      	asrs	r2, r7, #5
 8008886:	2301      	movs	r3, #1
 8008888:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800888c:	f007 071f 	and.w	r7, r7, #31
 8008890:	40bb      	lsls	r3, r7
 8008892:	4213      	tst	r3, r2
 8008894:	4629      	mov	r1, r5
 8008896:	4620      	mov	r0, r4
 8008898:	bf18      	it	ne
 800889a:	f049 0902 	orrne.w	r9, r9, #2
 800889e:	f7ff fe21 	bl	80084e4 <rshift>
 80088a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80088a6:	1b76      	subs	r6, r6, r5
 80088a8:	2502      	movs	r5, #2
 80088aa:	f1b9 0f00 	cmp.w	r9, #0
 80088ae:	d047      	beq.n	8008940 <__gethex+0x38c>
 80088b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d015      	beq.n	80088e4 <__gethex+0x330>
 80088b8:	2b03      	cmp	r3, #3
 80088ba:	d017      	beq.n	80088ec <__gethex+0x338>
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d109      	bne.n	80088d4 <__gethex+0x320>
 80088c0:	f019 0f02 	tst.w	r9, #2
 80088c4:	d006      	beq.n	80088d4 <__gethex+0x320>
 80088c6:	f8da 3000 	ldr.w	r3, [sl]
 80088ca:	ea49 0903 	orr.w	r9, r9, r3
 80088ce:	f019 0f01 	tst.w	r9, #1
 80088d2:	d10e      	bne.n	80088f2 <__gethex+0x33e>
 80088d4:	f045 0510 	orr.w	r5, r5, #16
 80088d8:	e032      	b.n	8008940 <__gethex+0x38c>
 80088da:	f04f 0901 	mov.w	r9, #1
 80088de:	e7d1      	b.n	8008884 <__gethex+0x2d0>
 80088e0:	2501      	movs	r5, #1
 80088e2:	e7e2      	b.n	80088aa <__gethex+0x2f6>
 80088e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088e6:	f1c3 0301 	rsb	r3, r3, #1
 80088ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0f0      	beq.n	80088d4 <__gethex+0x320>
 80088f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088f6:	f104 0314 	add.w	r3, r4, #20
 80088fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80088fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008902:	f04f 0c00 	mov.w	ip, #0
 8008906:	4618      	mov	r0, r3
 8008908:	f853 2b04 	ldr.w	r2, [r3], #4
 800890c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008910:	d01b      	beq.n	800894a <__gethex+0x396>
 8008912:	3201      	adds	r2, #1
 8008914:	6002      	str	r2, [r0, #0]
 8008916:	2d02      	cmp	r5, #2
 8008918:	f104 0314 	add.w	r3, r4, #20
 800891c:	d13c      	bne.n	8008998 <__gethex+0x3e4>
 800891e:	f8d8 2000 	ldr.w	r2, [r8]
 8008922:	3a01      	subs	r2, #1
 8008924:	42b2      	cmp	r2, r6
 8008926:	d109      	bne.n	800893c <__gethex+0x388>
 8008928:	1171      	asrs	r1, r6, #5
 800892a:	2201      	movs	r2, #1
 800892c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008930:	f006 061f 	and.w	r6, r6, #31
 8008934:	fa02 f606 	lsl.w	r6, r2, r6
 8008938:	421e      	tst	r6, r3
 800893a:	d13a      	bne.n	80089b2 <__gethex+0x3fe>
 800893c:	f045 0520 	orr.w	r5, r5, #32
 8008940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008942:	601c      	str	r4, [r3, #0]
 8008944:	9b02      	ldr	r3, [sp, #8]
 8008946:	601f      	str	r7, [r3, #0]
 8008948:	e6b0      	b.n	80086ac <__gethex+0xf8>
 800894a:	4299      	cmp	r1, r3
 800894c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008950:	d8d9      	bhi.n	8008906 <__gethex+0x352>
 8008952:	68a3      	ldr	r3, [r4, #8]
 8008954:	459b      	cmp	fp, r3
 8008956:	db17      	blt.n	8008988 <__gethex+0x3d4>
 8008958:	6861      	ldr	r1, [r4, #4]
 800895a:	9801      	ldr	r0, [sp, #4]
 800895c:	3101      	adds	r1, #1
 800895e:	f000 f90d 	bl	8008b7c <_Balloc>
 8008962:	4681      	mov	r9, r0
 8008964:	b918      	cbnz	r0, 800896e <__gethex+0x3ba>
 8008966:	4b1a      	ldr	r3, [pc, #104]	@ (80089d0 <__gethex+0x41c>)
 8008968:	4602      	mov	r2, r0
 800896a:	2184      	movs	r1, #132	@ 0x84
 800896c:	e6c5      	b.n	80086fa <__gethex+0x146>
 800896e:	6922      	ldr	r2, [r4, #16]
 8008970:	3202      	adds	r2, #2
 8008972:	f104 010c 	add.w	r1, r4, #12
 8008976:	0092      	lsls	r2, r2, #2
 8008978:	300c      	adds	r0, #12
 800897a:	f7fe fed4 	bl	8007726 <memcpy>
 800897e:	4621      	mov	r1, r4
 8008980:	9801      	ldr	r0, [sp, #4]
 8008982:	f000 f93b 	bl	8008bfc <_Bfree>
 8008986:	464c      	mov	r4, r9
 8008988:	6923      	ldr	r3, [r4, #16]
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008990:	6122      	str	r2, [r4, #16]
 8008992:	2201      	movs	r2, #1
 8008994:	615a      	str	r2, [r3, #20]
 8008996:	e7be      	b.n	8008916 <__gethex+0x362>
 8008998:	6922      	ldr	r2, [r4, #16]
 800899a:	455a      	cmp	r2, fp
 800899c:	dd0b      	ble.n	80089b6 <__gethex+0x402>
 800899e:	2101      	movs	r1, #1
 80089a0:	4620      	mov	r0, r4
 80089a2:	f7ff fd9f 	bl	80084e4 <rshift>
 80089a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089aa:	3701      	adds	r7, #1
 80089ac:	42bb      	cmp	r3, r7
 80089ae:	f6ff aee0 	blt.w	8008772 <__gethex+0x1be>
 80089b2:	2501      	movs	r5, #1
 80089b4:	e7c2      	b.n	800893c <__gethex+0x388>
 80089b6:	f016 061f 	ands.w	r6, r6, #31
 80089ba:	d0fa      	beq.n	80089b2 <__gethex+0x3fe>
 80089bc:	4453      	add	r3, sl
 80089be:	f1c6 0620 	rsb	r6, r6, #32
 80089c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80089c6:	f000 f9cb 	bl	8008d60 <__hi0bits>
 80089ca:	42b0      	cmp	r0, r6
 80089cc:	dbe7      	blt.n	800899e <__gethex+0x3ea>
 80089ce:	e7f0      	b.n	80089b2 <__gethex+0x3fe>
 80089d0:	0800a279 	.word	0x0800a279

080089d4 <L_shift>:
 80089d4:	f1c2 0208 	rsb	r2, r2, #8
 80089d8:	0092      	lsls	r2, r2, #2
 80089da:	b570      	push	{r4, r5, r6, lr}
 80089dc:	f1c2 0620 	rsb	r6, r2, #32
 80089e0:	6843      	ldr	r3, [r0, #4]
 80089e2:	6804      	ldr	r4, [r0, #0]
 80089e4:	fa03 f506 	lsl.w	r5, r3, r6
 80089e8:	432c      	orrs	r4, r5
 80089ea:	40d3      	lsrs	r3, r2
 80089ec:	6004      	str	r4, [r0, #0]
 80089ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80089f2:	4288      	cmp	r0, r1
 80089f4:	d3f4      	bcc.n	80089e0 <L_shift+0xc>
 80089f6:	bd70      	pop	{r4, r5, r6, pc}

080089f8 <__match>:
 80089f8:	b530      	push	{r4, r5, lr}
 80089fa:	6803      	ldr	r3, [r0, #0]
 80089fc:	3301      	adds	r3, #1
 80089fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a02:	b914      	cbnz	r4, 8008a0a <__match+0x12>
 8008a04:	6003      	str	r3, [r0, #0]
 8008a06:	2001      	movs	r0, #1
 8008a08:	bd30      	pop	{r4, r5, pc}
 8008a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008a12:	2d19      	cmp	r5, #25
 8008a14:	bf98      	it	ls
 8008a16:	3220      	addls	r2, #32
 8008a18:	42a2      	cmp	r2, r4
 8008a1a:	d0f0      	beq.n	80089fe <__match+0x6>
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	e7f3      	b.n	8008a08 <__match+0x10>

08008a20 <__hexnan>:
 8008a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	680b      	ldr	r3, [r1, #0]
 8008a26:	6801      	ldr	r1, [r0, #0]
 8008a28:	115e      	asrs	r6, r3, #5
 8008a2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a2e:	f013 031f 	ands.w	r3, r3, #31
 8008a32:	b087      	sub	sp, #28
 8008a34:	bf18      	it	ne
 8008a36:	3604      	addne	r6, #4
 8008a38:	2500      	movs	r5, #0
 8008a3a:	1f37      	subs	r7, r6, #4
 8008a3c:	4682      	mov	sl, r0
 8008a3e:	4690      	mov	r8, r2
 8008a40:	9301      	str	r3, [sp, #4]
 8008a42:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a46:	46b9      	mov	r9, r7
 8008a48:	463c      	mov	r4, r7
 8008a4a:	9502      	str	r5, [sp, #8]
 8008a4c:	46ab      	mov	fp, r5
 8008a4e:	784a      	ldrb	r2, [r1, #1]
 8008a50:	1c4b      	adds	r3, r1, #1
 8008a52:	9303      	str	r3, [sp, #12]
 8008a54:	b342      	cbz	r2, 8008aa8 <__hexnan+0x88>
 8008a56:	4610      	mov	r0, r2
 8008a58:	9105      	str	r1, [sp, #20]
 8008a5a:	9204      	str	r2, [sp, #16]
 8008a5c:	f7ff fd94 	bl	8008588 <__hexdig_fun>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d151      	bne.n	8008b08 <__hexnan+0xe8>
 8008a64:	9a04      	ldr	r2, [sp, #16]
 8008a66:	9905      	ldr	r1, [sp, #20]
 8008a68:	2a20      	cmp	r2, #32
 8008a6a:	d818      	bhi.n	8008a9e <__hexnan+0x7e>
 8008a6c:	9b02      	ldr	r3, [sp, #8]
 8008a6e:	459b      	cmp	fp, r3
 8008a70:	dd13      	ble.n	8008a9a <__hexnan+0x7a>
 8008a72:	454c      	cmp	r4, r9
 8008a74:	d206      	bcs.n	8008a84 <__hexnan+0x64>
 8008a76:	2d07      	cmp	r5, #7
 8008a78:	dc04      	bgt.n	8008a84 <__hexnan+0x64>
 8008a7a:	462a      	mov	r2, r5
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f7ff ffa8 	bl	80089d4 <L_shift>
 8008a84:	4544      	cmp	r4, r8
 8008a86:	d952      	bls.n	8008b2e <__hexnan+0x10e>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f1a4 0904 	sub.w	r9, r4, #4
 8008a8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a92:	f8cd b008 	str.w	fp, [sp, #8]
 8008a96:	464c      	mov	r4, r9
 8008a98:	461d      	mov	r5, r3
 8008a9a:	9903      	ldr	r1, [sp, #12]
 8008a9c:	e7d7      	b.n	8008a4e <__hexnan+0x2e>
 8008a9e:	2a29      	cmp	r2, #41	@ 0x29
 8008aa0:	d157      	bne.n	8008b52 <__hexnan+0x132>
 8008aa2:	3102      	adds	r1, #2
 8008aa4:	f8ca 1000 	str.w	r1, [sl]
 8008aa8:	f1bb 0f00 	cmp.w	fp, #0
 8008aac:	d051      	beq.n	8008b52 <__hexnan+0x132>
 8008aae:	454c      	cmp	r4, r9
 8008ab0:	d206      	bcs.n	8008ac0 <__hexnan+0xa0>
 8008ab2:	2d07      	cmp	r5, #7
 8008ab4:	dc04      	bgt.n	8008ac0 <__hexnan+0xa0>
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	4649      	mov	r1, r9
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7ff ff8a 	bl	80089d4 <L_shift>
 8008ac0:	4544      	cmp	r4, r8
 8008ac2:	d936      	bls.n	8008b32 <__hexnan+0x112>
 8008ac4:	f1a8 0204 	sub.w	r2, r8, #4
 8008ac8:	4623      	mov	r3, r4
 8008aca:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ace:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ad2:	429f      	cmp	r7, r3
 8008ad4:	d2f9      	bcs.n	8008aca <__hexnan+0xaa>
 8008ad6:	1b3b      	subs	r3, r7, r4
 8008ad8:	f023 0303 	bic.w	r3, r3, #3
 8008adc:	3304      	adds	r3, #4
 8008ade:	3401      	adds	r4, #1
 8008ae0:	3e03      	subs	r6, #3
 8008ae2:	42b4      	cmp	r4, r6
 8008ae4:	bf88      	it	hi
 8008ae6:	2304      	movhi	r3, #4
 8008ae8:	4443      	add	r3, r8
 8008aea:	2200      	movs	r2, #0
 8008aec:	f843 2b04 	str.w	r2, [r3], #4
 8008af0:	429f      	cmp	r7, r3
 8008af2:	d2fb      	bcs.n	8008aec <__hexnan+0xcc>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	b91b      	cbnz	r3, 8008b00 <__hexnan+0xe0>
 8008af8:	4547      	cmp	r7, r8
 8008afa:	d128      	bne.n	8008b4e <__hexnan+0x12e>
 8008afc:	2301      	movs	r3, #1
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	2005      	movs	r0, #5
 8008b02:	b007      	add	sp, #28
 8008b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b08:	3501      	adds	r5, #1
 8008b0a:	2d08      	cmp	r5, #8
 8008b0c:	f10b 0b01 	add.w	fp, fp, #1
 8008b10:	dd06      	ble.n	8008b20 <__hexnan+0x100>
 8008b12:	4544      	cmp	r4, r8
 8008b14:	d9c1      	bls.n	8008a9a <__hexnan+0x7a>
 8008b16:	2300      	movs	r3, #0
 8008b18:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b1c:	2501      	movs	r5, #1
 8008b1e:	3c04      	subs	r4, #4
 8008b20:	6822      	ldr	r2, [r4, #0]
 8008b22:	f000 000f 	and.w	r0, r0, #15
 8008b26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008b2a:	6020      	str	r0, [r4, #0]
 8008b2c:	e7b5      	b.n	8008a9a <__hexnan+0x7a>
 8008b2e:	2508      	movs	r5, #8
 8008b30:	e7b3      	b.n	8008a9a <__hexnan+0x7a>
 8008b32:	9b01      	ldr	r3, [sp, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0dd      	beq.n	8008af4 <__hexnan+0xd4>
 8008b38:	f1c3 0320 	rsb	r3, r3, #32
 8008b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b40:	40da      	lsrs	r2, r3
 8008b42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008b46:	4013      	ands	r3, r2
 8008b48:	f846 3c04 	str.w	r3, [r6, #-4]
 8008b4c:	e7d2      	b.n	8008af4 <__hexnan+0xd4>
 8008b4e:	3f04      	subs	r7, #4
 8008b50:	e7d0      	b.n	8008af4 <__hexnan+0xd4>
 8008b52:	2004      	movs	r0, #4
 8008b54:	e7d5      	b.n	8008b02 <__hexnan+0xe2>

08008b56 <__ascii_mbtowc>:
 8008b56:	b082      	sub	sp, #8
 8008b58:	b901      	cbnz	r1, 8008b5c <__ascii_mbtowc+0x6>
 8008b5a:	a901      	add	r1, sp, #4
 8008b5c:	b142      	cbz	r2, 8008b70 <__ascii_mbtowc+0x1a>
 8008b5e:	b14b      	cbz	r3, 8008b74 <__ascii_mbtowc+0x1e>
 8008b60:	7813      	ldrb	r3, [r2, #0]
 8008b62:	600b      	str	r3, [r1, #0]
 8008b64:	7812      	ldrb	r2, [r2, #0]
 8008b66:	1e10      	subs	r0, r2, #0
 8008b68:	bf18      	it	ne
 8008b6a:	2001      	movne	r0, #1
 8008b6c:	b002      	add	sp, #8
 8008b6e:	4770      	bx	lr
 8008b70:	4610      	mov	r0, r2
 8008b72:	e7fb      	b.n	8008b6c <__ascii_mbtowc+0x16>
 8008b74:	f06f 0001 	mvn.w	r0, #1
 8008b78:	e7f8      	b.n	8008b6c <__ascii_mbtowc+0x16>
	...

08008b7c <_Balloc>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	69c6      	ldr	r6, [r0, #28]
 8008b80:	4604      	mov	r4, r0
 8008b82:	460d      	mov	r5, r1
 8008b84:	b976      	cbnz	r6, 8008ba4 <_Balloc+0x28>
 8008b86:	2010      	movs	r0, #16
 8008b88:	f7fc fe86 	bl	8005898 <malloc>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	61e0      	str	r0, [r4, #28]
 8008b90:	b920      	cbnz	r0, 8008b9c <_Balloc+0x20>
 8008b92:	4b18      	ldr	r3, [pc, #96]	@ (8008bf4 <_Balloc+0x78>)
 8008b94:	4818      	ldr	r0, [pc, #96]	@ (8008bf8 <_Balloc+0x7c>)
 8008b96:	216b      	movs	r1, #107	@ 0x6b
 8008b98:	f7fe fde4 	bl	8007764 <__assert_func>
 8008b9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ba0:	6006      	str	r6, [r0, #0]
 8008ba2:	60c6      	str	r6, [r0, #12]
 8008ba4:	69e6      	ldr	r6, [r4, #28]
 8008ba6:	68f3      	ldr	r3, [r6, #12]
 8008ba8:	b183      	cbz	r3, 8008bcc <_Balloc+0x50>
 8008baa:	69e3      	ldr	r3, [r4, #28]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bb2:	b9b8      	cbnz	r0, 8008be4 <_Balloc+0x68>
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	fa01 f605 	lsl.w	r6, r1, r5
 8008bba:	1d72      	adds	r2, r6, #5
 8008bbc:	0092      	lsls	r2, r2, #2
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f000 ff45 	bl	8009a4e <_calloc_r>
 8008bc4:	b160      	cbz	r0, 8008be0 <_Balloc+0x64>
 8008bc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bca:	e00e      	b.n	8008bea <_Balloc+0x6e>
 8008bcc:	2221      	movs	r2, #33	@ 0x21
 8008bce:	2104      	movs	r1, #4
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f000 ff3c 	bl	8009a4e <_calloc_r>
 8008bd6:	69e3      	ldr	r3, [r4, #28]
 8008bd8:	60f0      	str	r0, [r6, #12]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e4      	bne.n	8008baa <_Balloc+0x2e>
 8008be0:	2000      	movs	r0, #0
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	6802      	ldr	r2, [r0, #0]
 8008be6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bea:	2300      	movs	r3, #0
 8008bec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bf0:	e7f7      	b.n	8008be2 <_Balloc+0x66>
 8008bf2:	bf00      	nop
 8008bf4:	0800a15f 	.word	0x0800a15f
 8008bf8:	0800a2ea 	.word	0x0800a2ea

08008bfc <_Bfree>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	69c6      	ldr	r6, [r0, #28]
 8008c00:	4605      	mov	r5, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	b976      	cbnz	r6, 8008c24 <_Bfree+0x28>
 8008c06:	2010      	movs	r0, #16
 8008c08:	f7fc fe46 	bl	8005898 <malloc>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	61e8      	str	r0, [r5, #28]
 8008c10:	b920      	cbnz	r0, 8008c1c <_Bfree+0x20>
 8008c12:	4b09      	ldr	r3, [pc, #36]	@ (8008c38 <_Bfree+0x3c>)
 8008c14:	4809      	ldr	r0, [pc, #36]	@ (8008c3c <_Bfree+0x40>)
 8008c16:	218f      	movs	r1, #143	@ 0x8f
 8008c18:	f7fe fda4 	bl	8007764 <__assert_func>
 8008c1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c20:	6006      	str	r6, [r0, #0]
 8008c22:	60c6      	str	r6, [r0, #12]
 8008c24:	b13c      	cbz	r4, 8008c36 <_Bfree+0x3a>
 8008c26:	69eb      	ldr	r3, [r5, #28]
 8008c28:	6862      	ldr	r2, [r4, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c30:	6021      	str	r1, [r4, #0]
 8008c32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	0800a15f 	.word	0x0800a15f
 8008c3c:	0800a2ea 	.word	0x0800a2ea

08008c40 <__multadd>:
 8008c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c44:	690d      	ldr	r5, [r1, #16]
 8008c46:	4607      	mov	r7, r0
 8008c48:	460c      	mov	r4, r1
 8008c4a:	461e      	mov	r6, r3
 8008c4c:	f101 0c14 	add.w	ip, r1, #20
 8008c50:	2000      	movs	r0, #0
 8008c52:	f8dc 3000 	ldr.w	r3, [ip]
 8008c56:	b299      	uxth	r1, r3
 8008c58:	fb02 6101 	mla	r1, r2, r1, r6
 8008c5c:	0c1e      	lsrs	r6, r3, #16
 8008c5e:	0c0b      	lsrs	r3, r1, #16
 8008c60:	fb02 3306 	mla	r3, r2, r6, r3
 8008c64:	b289      	uxth	r1, r1
 8008c66:	3001      	adds	r0, #1
 8008c68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c6c:	4285      	cmp	r5, r0
 8008c6e:	f84c 1b04 	str.w	r1, [ip], #4
 8008c72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c76:	dcec      	bgt.n	8008c52 <__multadd+0x12>
 8008c78:	b30e      	cbz	r6, 8008cbe <__multadd+0x7e>
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	42ab      	cmp	r3, r5
 8008c7e:	dc19      	bgt.n	8008cb4 <__multadd+0x74>
 8008c80:	6861      	ldr	r1, [r4, #4]
 8008c82:	4638      	mov	r0, r7
 8008c84:	3101      	adds	r1, #1
 8008c86:	f7ff ff79 	bl	8008b7c <_Balloc>
 8008c8a:	4680      	mov	r8, r0
 8008c8c:	b928      	cbnz	r0, 8008c9a <__multadd+0x5a>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc4 <__multadd+0x84>)
 8008c92:	480d      	ldr	r0, [pc, #52]	@ (8008cc8 <__multadd+0x88>)
 8008c94:	21ba      	movs	r1, #186	@ 0xba
 8008c96:	f7fe fd65 	bl	8007764 <__assert_func>
 8008c9a:	6922      	ldr	r2, [r4, #16]
 8008c9c:	3202      	adds	r2, #2
 8008c9e:	f104 010c 	add.w	r1, r4, #12
 8008ca2:	0092      	lsls	r2, r2, #2
 8008ca4:	300c      	adds	r0, #12
 8008ca6:	f7fe fd3e 	bl	8007726 <memcpy>
 8008caa:	4621      	mov	r1, r4
 8008cac:	4638      	mov	r0, r7
 8008cae:	f7ff ffa5 	bl	8008bfc <_Bfree>
 8008cb2:	4644      	mov	r4, r8
 8008cb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cb8:	3501      	adds	r5, #1
 8008cba:	615e      	str	r6, [r3, #20]
 8008cbc:	6125      	str	r5, [r4, #16]
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc4:	0800a279 	.word	0x0800a279
 8008cc8:	0800a2ea 	.word	0x0800a2ea

08008ccc <__s2b>:
 8008ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	4615      	mov	r5, r2
 8008cd4:	461f      	mov	r7, r3
 8008cd6:	2209      	movs	r2, #9
 8008cd8:	3308      	adds	r3, #8
 8008cda:	4606      	mov	r6, r0
 8008cdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	db09      	blt.n	8008cfc <__s2b+0x30>
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7ff ff47 	bl	8008b7c <_Balloc>
 8008cee:	b940      	cbnz	r0, 8008d02 <__s2b+0x36>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	4b19      	ldr	r3, [pc, #100]	@ (8008d58 <__s2b+0x8c>)
 8008cf4:	4819      	ldr	r0, [pc, #100]	@ (8008d5c <__s2b+0x90>)
 8008cf6:	21d3      	movs	r1, #211	@ 0xd3
 8008cf8:	f7fe fd34 	bl	8007764 <__assert_func>
 8008cfc:	0052      	lsls	r2, r2, #1
 8008cfe:	3101      	adds	r1, #1
 8008d00:	e7f0      	b.n	8008ce4 <__s2b+0x18>
 8008d02:	9b08      	ldr	r3, [sp, #32]
 8008d04:	6143      	str	r3, [r0, #20]
 8008d06:	2d09      	cmp	r5, #9
 8008d08:	f04f 0301 	mov.w	r3, #1
 8008d0c:	6103      	str	r3, [r0, #16]
 8008d0e:	dd16      	ble.n	8008d3e <__s2b+0x72>
 8008d10:	f104 0909 	add.w	r9, r4, #9
 8008d14:	46c8      	mov	r8, r9
 8008d16:	442c      	add	r4, r5
 8008d18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d1c:	4601      	mov	r1, r0
 8008d1e:	3b30      	subs	r3, #48	@ 0x30
 8008d20:	220a      	movs	r2, #10
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff ff8c 	bl	8008c40 <__multadd>
 8008d28:	45a0      	cmp	r8, r4
 8008d2a:	d1f5      	bne.n	8008d18 <__s2b+0x4c>
 8008d2c:	f1a5 0408 	sub.w	r4, r5, #8
 8008d30:	444c      	add	r4, r9
 8008d32:	1b2d      	subs	r5, r5, r4
 8008d34:	1963      	adds	r3, r4, r5
 8008d36:	42bb      	cmp	r3, r7
 8008d38:	db04      	blt.n	8008d44 <__s2b+0x78>
 8008d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d3e:	340a      	adds	r4, #10
 8008d40:	2509      	movs	r5, #9
 8008d42:	e7f6      	b.n	8008d32 <__s2b+0x66>
 8008d44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d48:	4601      	mov	r1, r0
 8008d4a:	3b30      	subs	r3, #48	@ 0x30
 8008d4c:	220a      	movs	r2, #10
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f7ff ff76 	bl	8008c40 <__multadd>
 8008d54:	e7ee      	b.n	8008d34 <__s2b+0x68>
 8008d56:	bf00      	nop
 8008d58:	0800a279 	.word	0x0800a279
 8008d5c:	0800a2ea 	.word	0x0800a2ea

08008d60 <__hi0bits>:
 8008d60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d64:	4603      	mov	r3, r0
 8008d66:	bf36      	itet	cc
 8008d68:	0403      	lslcc	r3, r0, #16
 8008d6a:	2000      	movcs	r0, #0
 8008d6c:	2010      	movcc	r0, #16
 8008d6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d72:	bf3c      	itt	cc
 8008d74:	021b      	lslcc	r3, r3, #8
 8008d76:	3008      	addcc	r0, #8
 8008d78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d7c:	bf3c      	itt	cc
 8008d7e:	011b      	lslcc	r3, r3, #4
 8008d80:	3004      	addcc	r0, #4
 8008d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d86:	bf3c      	itt	cc
 8008d88:	009b      	lslcc	r3, r3, #2
 8008d8a:	3002      	addcc	r0, #2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	db05      	blt.n	8008d9c <__hi0bits+0x3c>
 8008d90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d94:	f100 0001 	add.w	r0, r0, #1
 8008d98:	bf08      	it	eq
 8008d9a:	2020      	moveq	r0, #32
 8008d9c:	4770      	bx	lr

08008d9e <__lo0bits>:
 8008d9e:	6803      	ldr	r3, [r0, #0]
 8008da0:	4602      	mov	r2, r0
 8008da2:	f013 0007 	ands.w	r0, r3, #7
 8008da6:	d00b      	beq.n	8008dc0 <__lo0bits+0x22>
 8008da8:	07d9      	lsls	r1, r3, #31
 8008daa:	d421      	bmi.n	8008df0 <__lo0bits+0x52>
 8008dac:	0798      	lsls	r0, r3, #30
 8008dae:	bf49      	itett	mi
 8008db0:	085b      	lsrmi	r3, r3, #1
 8008db2:	089b      	lsrpl	r3, r3, #2
 8008db4:	2001      	movmi	r0, #1
 8008db6:	6013      	strmi	r3, [r2, #0]
 8008db8:	bf5c      	itt	pl
 8008dba:	6013      	strpl	r3, [r2, #0]
 8008dbc:	2002      	movpl	r0, #2
 8008dbe:	4770      	bx	lr
 8008dc0:	b299      	uxth	r1, r3
 8008dc2:	b909      	cbnz	r1, 8008dc8 <__lo0bits+0x2a>
 8008dc4:	0c1b      	lsrs	r3, r3, #16
 8008dc6:	2010      	movs	r0, #16
 8008dc8:	b2d9      	uxtb	r1, r3
 8008dca:	b909      	cbnz	r1, 8008dd0 <__lo0bits+0x32>
 8008dcc:	3008      	adds	r0, #8
 8008dce:	0a1b      	lsrs	r3, r3, #8
 8008dd0:	0719      	lsls	r1, r3, #28
 8008dd2:	bf04      	itt	eq
 8008dd4:	091b      	lsreq	r3, r3, #4
 8008dd6:	3004      	addeq	r0, #4
 8008dd8:	0799      	lsls	r1, r3, #30
 8008dda:	bf04      	itt	eq
 8008ddc:	089b      	lsreq	r3, r3, #2
 8008dde:	3002      	addeq	r0, #2
 8008de0:	07d9      	lsls	r1, r3, #31
 8008de2:	d403      	bmi.n	8008dec <__lo0bits+0x4e>
 8008de4:	085b      	lsrs	r3, r3, #1
 8008de6:	f100 0001 	add.w	r0, r0, #1
 8008dea:	d003      	beq.n	8008df4 <__lo0bits+0x56>
 8008dec:	6013      	str	r3, [r2, #0]
 8008dee:	4770      	bx	lr
 8008df0:	2000      	movs	r0, #0
 8008df2:	4770      	bx	lr
 8008df4:	2020      	movs	r0, #32
 8008df6:	4770      	bx	lr

08008df8 <__i2b>:
 8008df8:	b510      	push	{r4, lr}
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	f7ff febd 	bl	8008b7c <_Balloc>
 8008e02:	4602      	mov	r2, r0
 8008e04:	b928      	cbnz	r0, 8008e12 <__i2b+0x1a>
 8008e06:	4b05      	ldr	r3, [pc, #20]	@ (8008e1c <__i2b+0x24>)
 8008e08:	4805      	ldr	r0, [pc, #20]	@ (8008e20 <__i2b+0x28>)
 8008e0a:	f240 1145 	movw	r1, #325	@ 0x145
 8008e0e:	f7fe fca9 	bl	8007764 <__assert_func>
 8008e12:	2301      	movs	r3, #1
 8008e14:	6144      	str	r4, [r0, #20]
 8008e16:	6103      	str	r3, [r0, #16]
 8008e18:	bd10      	pop	{r4, pc}
 8008e1a:	bf00      	nop
 8008e1c:	0800a279 	.word	0x0800a279
 8008e20:	0800a2ea 	.word	0x0800a2ea

08008e24 <__multiply>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	4617      	mov	r7, r2
 8008e2a:	690a      	ldr	r2, [r1, #16]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	bfa8      	it	ge
 8008e32:	463b      	movge	r3, r7
 8008e34:	4689      	mov	r9, r1
 8008e36:	bfa4      	itt	ge
 8008e38:	460f      	movge	r7, r1
 8008e3a:	4699      	movge	r9, r3
 8008e3c:	693d      	ldr	r5, [r7, #16]
 8008e3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	eb05 060a 	add.w	r6, r5, sl
 8008e4a:	42b3      	cmp	r3, r6
 8008e4c:	b085      	sub	sp, #20
 8008e4e:	bfb8      	it	lt
 8008e50:	3101      	addlt	r1, #1
 8008e52:	f7ff fe93 	bl	8008b7c <_Balloc>
 8008e56:	b930      	cbnz	r0, 8008e66 <__multiply+0x42>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	4b41      	ldr	r3, [pc, #260]	@ (8008f60 <__multiply+0x13c>)
 8008e5c:	4841      	ldr	r0, [pc, #260]	@ (8008f64 <__multiply+0x140>)
 8008e5e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e62:	f7fe fc7f 	bl	8007764 <__assert_func>
 8008e66:	f100 0414 	add.w	r4, r0, #20
 8008e6a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008e6e:	4623      	mov	r3, r4
 8008e70:	2200      	movs	r2, #0
 8008e72:	4573      	cmp	r3, lr
 8008e74:	d320      	bcc.n	8008eb8 <__multiply+0x94>
 8008e76:	f107 0814 	add.w	r8, r7, #20
 8008e7a:	f109 0114 	add.w	r1, r9, #20
 8008e7e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008e82:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008e86:	9302      	str	r3, [sp, #8]
 8008e88:	1beb      	subs	r3, r5, r7
 8008e8a:	3b15      	subs	r3, #21
 8008e8c:	f023 0303 	bic.w	r3, r3, #3
 8008e90:	3304      	adds	r3, #4
 8008e92:	3715      	adds	r7, #21
 8008e94:	42bd      	cmp	r5, r7
 8008e96:	bf38      	it	cc
 8008e98:	2304      	movcc	r3, #4
 8008e9a:	9301      	str	r3, [sp, #4]
 8008e9c:	9b02      	ldr	r3, [sp, #8]
 8008e9e:	9103      	str	r1, [sp, #12]
 8008ea0:	428b      	cmp	r3, r1
 8008ea2:	d80c      	bhi.n	8008ebe <__multiply+0x9a>
 8008ea4:	2e00      	cmp	r6, #0
 8008ea6:	dd03      	ble.n	8008eb0 <__multiply+0x8c>
 8008ea8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d055      	beq.n	8008f5c <__multiply+0x138>
 8008eb0:	6106      	str	r6, [r0, #16]
 8008eb2:	b005      	add	sp, #20
 8008eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb8:	f843 2b04 	str.w	r2, [r3], #4
 8008ebc:	e7d9      	b.n	8008e72 <__multiply+0x4e>
 8008ebe:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ec2:	f1ba 0f00 	cmp.w	sl, #0
 8008ec6:	d01f      	beq.n	8008f08 <__multiply+0xe4>
 8008ec8:	46c4      	mov	ip, r8
 8008eca:	46a1      	mov	r9, r4
 8008ecc:	2700      	movs	r7, #0
 8008ece:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ed2:	f8d9 3000 	ldr.w	r3, [r9]
 8008ed6:	fa1f fb82 	uxth.w	fp, r2
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ee0:	443b      	add	r3, r7
 8008ee2:	f8d9 7000 	ldr.w	r7, [r9]
 8008ee6:	0c12      	lsrs	r2, r2, #16
 8008ee8:	0c3f      	lsrs	r7, r7, #16
 8008eea:	fb0a 7202 	mla	r2, sl, r2, r7
 8008eee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ef8:	4565      	cmp	r5, ip
 8008efa:	f849 3b04 	str.w	r3, [r9], #4
 8008efe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008f02:	d8e4      	bhi.n	8008ece <__multiply+0xaa>
 8008f04:	9b01      	ldr	r3, [sp, #4]
 8008f06:	50e7      	str	r7, [r4, r3]
 8008f08:	9b03      	ldr	r3, [sp, #12]
 8008f0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f0e:	3104      	adds	r1, #4
 8008f10:	f1b9 0f00 	cmp.w	r9, #0
 8008f14:	d020      	beq.n	8008f58 <__multiply+0x134>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	4647      	mov	r7, r8
 8008f1a:	46a4      	mov	ip, r4
 8008f1c:	f04f 0a00 	mov.w	sl, #0
 8008f20:	f8b7 b000 	ldrh.w	fp, [r7]
 8008f24:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008f28:	fb09 220b 	mla	r2, r9, fp, r2
 8008f2c:	4452      	add	r2, sl
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f34:	f84c 3b04 	str.w	r3, [ip], #4
 8008f38:	f857 3b04 	ldr.w	r3, [r7], #4
 8008f3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f40:	f8bc 3000 	ldrh.w	r3, [ip]
 8008f44:	fb09 330a 	mla	r3, r9, sl, r3
 8008f48:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008f4c:	42bd      	cmp	r5, r7
 8008f4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f52:	d8e5      	bhi.n	8008f20 <__multiply+0xfc>
 8008f54:	9a01      	ldr	r2, [sp, #4]
 8008f56:	50a3      	str	r3, [r4, r2]
 8008f58:	3404      	adds	r4, #4
 8008f5a:	e79f      	b.n	8008e9c <__multiply+0x78>
 8008f5c:	3e01      	subs	r6, #1
 8008f5e:	e7a1      	b.n	8008ea4 <__multiply+0x80>
 8008f60:	0800a279 	.word	0x0800a279
 8008f64:	0800a2ea 	.word	0x0800a2ea

08008f68 <__pow5mult>:
 8008f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f6c:	4615      	mov	r5, r2
 8008f6e:	f012 0203 	ands.w	r2, r2, #3
 8008f72:	4607      	mov	r7, r0
 8008f74:	460e      	mov	r6, r1
 8008f76:	d007      	beq.n	8008f88 <__pow5mult+0x20>
 8008f78:	4c25      	ldr	r4, [pc, #148]	@ (8009010 <__pow5mult+0xa8>)
 8008f7a:	3a01      	subs	r2, #1
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f82:	f7ff fe5d 	bl	8008c40 <__multadd>
 8008f86:	4606      	mov	r6, r0
 8008f88:	10ad      	asrs	r5, r5, #2
 8008f8a:	d03d      	beq.n	8009008 <__pow5mult+0xa0>
 8008f8c:	69fc      	ldr	r4, [r7, #28]
 8008f8e:	b97c      	cbnz	r4, 8008fb0 <__pow5mult+0x48>
 8008f90:	2010      	movs	r0, #16
 8008f92:	f7fc fc81 	bl	8005898 <malloc>
 8008f96:	4602      	mov	r2, r0
 8008f98:	61f8      	str	r0, [r7, #28]
 8008f9a:	b928      	cbnz	r0, 8008fa8 <__pow5mult+0x40>
 8008f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009014 <__pow5mult+0xac>)
 8008f9e:	481e      	ldr	r0, [pc, #120]	@ (8009018 <__pow5mult+0xb0>)
 8008fa0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008fa4:	f7fe fbde 	bl	8007764 <__assert_func>
 8008fa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fac:	6004      	str	r4, [r0, #0]
 8008fae:	60c4      	str	r4, [r0, #12]
 8008fb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fb8:	b94c      	cbnz	r4, 8008fce <__pow5mult+0x66>
 8008fba:	f240 2171 	movw	r1, #625	@ 0x271
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	f7ff ff1a 	bl	8008df8 <__i2b>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fca:	4604      	mov	r4, r0
 8008fcc:	6003      	str	r3, [r0, #0]
 8008fce:	f04f 0900 	mov.w	r9, #0
 8008fd2:	07eb      	lsls	r3, r5, #31
 8008fd4:	d50a      	bpl.n	8008fec <__pow5mult+0x84>
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4638      	mov	r0, r7
 8008fdc:	f7ff ff22 	bl	8008e24 <__multiply>
 8008fe0:	4631      	mov	r1, r6
 8008fe2:	4680      	mov	r8, r0
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	f7ff fe09 	bl	8008bfc <_Bfree>
 8008fea:	4646      	mov	r6, r8
 8008fec:	106d      	asrs	r5, r5, #1
 8008fee:	d00b      	beq.n	8009008 <__pow5mult+0xa0>
 8008ff0:	6820      	ldr	r0, [r4, #0]
 8008ff2:	b938      	cbnz	r0, 8009004 <__pow5mult+0x9c>
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7ff ff13 	bl	8008e24 <__multiply>
 8008ffe:	6020      	str	r0, [r4, #0]
 8009000:	f8c0 9000 	str.w	r9, [r0]
 8009004:	4604      	mov	r4, r0
 8009006:	e7e4      	b.n	8008fd2 <__pow5mult+0x6a>
 8009008:	4630      	mov	r0, r6
 800900a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800900e:	bf00      	nop
 8009010:	0800a3a8 	.word	0x0800a3a8
 8009014:	0800a15f 	.word	0x0800a15f
 8009018:	0800a2ea 	.word	0x0800a2ea

0800901c <__lshift>:
 800901c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009020:	460c      	mov	r4, r1
 8009022:	6849      	ldr	r1, [r1, #4]
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	4607      	mov	r7, r0
 800902e:	4691      	mov	r9, r2
 8009030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009034:	f108 0601 	add.w	r6, r8, #1
 8009038:	42b3      	cmp	r3, r6
 800903a:	db0b      	blt.n	8009054 <__lshift+0x38>
 800903c:	4638      	mov	r0, r7
 800903e:	f7ff fd9d 	bl	8008b7c <_Balloc>
 8009042:	4605      	mov	r5, r0
 8009044:	b948      	cbnz	r0, 800905a <__lshift+0x3e>
 8009046:	4602      	mov	r2, r0
 8009048:	4b28      	ldr	r3, [pc, #160]	@ (80090ec <__lshift+0xd0>)
 800904a:	4829      	ldr	r0, [pc, #164]	@ (80090f0 <__lshift+0xd4>)
 800904c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009050:	f7fe fb88 	bl	8007764 <__assert_func>
 8009054:	3101      	adds	r1, #1
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	e7ee      	b.n	8009038 <__lshift+0x1c>
 800905a:	2300      	movs	r3, #0
 800905c:	f100 0114 	add.w	r1, r0, #20
 8009060:	f100 0210 	add.w	r2, r0, #16
 8009064:	4618      	mov	r0, r3
 8009066:	4553      	cmp	r3, sl
 8009068:	db33      	blt.n	80090d2 <__lshift+0xb6>
 800906a:	6920      	ldr	r0, [r4, #16]
 800906c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009070:	f104 0314 	add.w	r3, r4, #20
 8009074:	f019 091f 	ands.w	r9, r9, #31
 8009078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800907c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009080:	d02b      	beq.n	80090da <__lshift+0xbe>
 8009082:	f1c9 0e20 	rsb	lr, r9, #32
 8009086:	468a      	mov	sl, r1
 8009088:	2200      	movs	r2, #0
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	fa00 f009 	lsl.w	r0, r0, r9
 8009090:	4310      	orrs	r0, r2
 8009092:	f84a 0b04 	str.w	r0, [sl], #4
 8009096:	f853 2b04 	ldr.w	r2, [r3], #4
 800909a:	459c      	cmp	ip, r3
 800909c:	fa22 f20e 	lsr.w	r2, r2, lr
 80090a0:	d8f3      	bhi.n	800908a <__lshift+0x6e>
 80090a2:	ebac 0304 	sub.w	r3, ip, r4
 80090a6:	3b15      	subs	r3, #21
 80090a8:	f023 0303 	bic.w	r3, r3, #3
 80090ac:	3304      	adds	r3, #4
 80090ae:	f104 0015 	add.w	r0, r4, #21
 80090b2:	4560      	cmp	r0, ip
 80090b4:	bf88      	it	hi
 80090b6:	2304      	movhi	r3, #4
 80090b8:	50ca      	str	r2, [r1, r3]
 80090ba:	b10a      	cbz	r2, 80090c0 <__lshift+0xa4>
 80090bc:	f108 0602 	add.w	r6, r8, #2
 80090c0:	3e01      	subs	r6, #1
 80090c2:	4638      	mov	r0, r7
 80090c4:	612e      	str	r6, [r5, #16]
 80090c6:	4621      	mov	r1, r4
 80090c8:	f7ff fd98 	bl	8008bfc <_Bfree>
 80090cc:	4628      	mov	r0, r5
 80090ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80090d6:	3301      	adds	r3, #1
 80090d8:	e7c5      	b.n	8009066 <__lshift+0x4a>
 80090da:	3904      	subs	r1, #4
 80090dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80090e4:	459c      	cmp	ip, r3
 80090e6:	d8f9      	bhi.n	80090dc <__lshift+0xc0>
 80090e8:	e7ea      	b.n	80090c0 <__lshift+0xa4>
 80090ea:	bf00      	nop
 80090ec:	0800a279 	.word	0x0800a279
 80090f0:	0800a2ea 	.word	0x0800a2ea

080090f4 <__mcmp>:
 80090f4:	690a      	ldr	r2, [r1, #16]
 80090f6:	4603      	mov	r3, r0
 80090f8:	6900      	ldr	r0, [r0, #16]
 80090fa:	1a80      	subs	r0, r0, r2
 80090fc:	b530      	push	{r4, r5, lr}
 80090fe:	d10e      	bne.n	800911e <__mcmp+0x2a>
 8009100:	3314      	adds	r3, #20
 8009102:	3114      	adds	r1, #20
 8009104:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009108:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800910c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009110:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009114:	4295      	cmp	r5, r2
 8009116:	d003      	beq.n	8009120 <__mcmp+0x2c>
 8009118:	d205      	bcs.n	8009126 <__mcmp+0x32>
 800911a:	f04f 30ff 	mov.w	r0, #4294967295
 800911e:	bd30      	pop	{r4, r5, pc}
 8009120:	42a3      	cmp	r3, r4
 8009122:	d3f3      	bcc.n	800910c <__mcmp+0x18>
 8009124:	e7fb      	b.n	800911e <__mcmp+0x2a>
 8009126:	2001      	movs	r0, #1
 8009128:	e7f9      	b.n	800911e <__mcmp+0x2a>
	...

0800912c <__mdiff>:
 800912c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009130:	4689      	mov	r9, r1
 8009132:	4606      	mov	r6, r0
 8009134:	4611      	mov	r1, r2
 8009136:	4648      	mov	r0, r9
 8009138:	4614      	mov	r4, r2
 800913a:	f7ff ffdb 	bl	80090f4 <__mcmp>
 800913e:	1e05      	subs	r5, r0, #0
 8009140:	d112      	bne.n	8009168 <__mdiff+0x3c>
 8009142:	4629      	mov	r1, r5
 8009144:	4630      	mov	r0, r6
 8009146:	f7ff fd19 	bl	8008b7c <_Balloc>
 800914a:	4602      	mov	r2, r0
 800914c:	b928      	cbnz	r0, 800915a <__mdiff+0x2e>
 800914e:	4b3f      	ldr	r3, [pc, #252]	@ (800924c <__mdiff+0x120>)
 8009150:	f240 2137 	movw	r1, #567	@ 0x237
 8009154:	483e      	ldr	r0, [pc, #248]	@ (8009250 <__mdiff+0x124>)
 8009156:	f7fe fb05 	bl	8007764 <__assert_func>
 800915a:	2301      	movs	r3, #1
 800915c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009160:	4610      	mov	r0, r2
 8009162:	b003      	add	sp, #12
 8009164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009168:	bfbc      	itt	lt
 800916a:	464b      	movlt	r3, r9
 800916c:	46a1      	movlt	r9, r4
 800916e:	4630      	mov	r0, r6
 8009170:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009174:	bfba      	itte	lt
 8009176:	461c      	movlt	r4, r3
 8009178:	2501      	movlt	r5, #1
 800917a:	2500      	movge	r5, #0
 800917c:	f7ff fcfe 	bl	8008b7c <_Balloc>
 8009180:	4602      	mov	r2, r0
 8009182:	b918      	cbnz	r0, 800918c <__mdiff+0x60>
 8009184:	4b31      	ldr	r3, [pc, #196]	@ (800924c <__mdiff+0x120>)
 8009186:	f240 2145 	movw	r1, #581	@ 0x245
 800918a:	e7e3      	b.n	8009154 <__mdiff+0x28>
 800918c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009190:	6926      	ldr	r6, [r4, #16]
 8009192:	60c5      	str	r5, [r0, #12]
 8009194:	f109 0310 	add.w	r3, r9, #16
 8009198:	f109 0514 	add.w	r5, r9, #20
 800919c:	f104 0e14 	add.w	lr, r4, #20
 80091a0:	f100 0b14 	add.w	fp, r0, #20
 80091a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	46d9      	mov	r9, fp
 80091b0:	f04f 0c00 	mov.w	ip, #0
 80091b4:	9b01      	ldr	r3, [sp, #4]
 80091b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	fa1f f38a 	uxth.w	r3, sl
 80091c4:	4619      	mov	r1, r3
 80091c6:	b283      	uxth	r3, r0
 80091c8:	1acb      	subs	r3, r1, r3
 80091ca:	0c00      	lsrs	r0, r0, #16
 80091cc:	4463      	add	r3, ip
 80091ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091dc:	4576      	cmp	r6, lr
 80091de:	f849 3b04 	str.w	r3, [r9], #4
 80091e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091e6:	d8e5      	bhi.n	80091b4 <__mdiff+0x88>
 80091e8:	1b33      	subs	r3, r6, r4
 80091ea:	3b15      	subs	r3, #21
 80091ec:	f023 0303 	bic.w	r3, r3, #3
 80091f0:	3415      	adds	r4, #21
 80091f2:	3304      	adds	r3, #4
 80091f4:	42a6      	cmp	r6, r4
 80091f6:	bf38      	it	cc
 80091f8:	2304      	movcc	r3, #4
 80091fa:	441d      	add	r5, r3
 80091fc:	445b      	add	r3, fp
 80091fe:	461e      	mov	r6, r3
 8009200:	462c      	mov	r4, r5
 8009202:	4544      	cmp	r4, r8
 8009204:	d30e      	bcc.n	8009224 <__mdiff+0xf8>
 8009206:	f108 0103 	add.w	r1, r8, #3
 800920a:	1b49      	subs	r1, r1, r5
 800920c:	f021 0103 	bic.w	r1, r1, #3
 8009210:	3d03      	subs	r5, #3
 8009212:	45a8      	cmp	r8, r5
 8009214:	bf38      	it	cc
 8009216:	2100      	movcc	r1, #0
 8009218:	440b      	add	r3, r1
 800921a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800921e:	b191      	cbz	r1, 8009246 <__mdiff+0x11a>
 8009220:	6117      	str	r7, [r2, #16]
 8009222:	e79d      	b.n	8009160 <__mdiff+0x34>
 8009224:	f854 1b04 	ldr.w	r1, [r4], #4
 8009228:	46e6      	mov	lr, ip
 800922a:	0c08      	lsrs	r0, r1, #16
 800922c:	fa1c fc81 	uxtah	ip, ip, r1
 8009230:	4471      	add	r1, lr
 8009232:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009236:	b289      	uxth	r1, r1
 8009238:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800923c:	f846 1b04 	str.w	r1, [r6], #4
 8009240:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009244:	e7dd      	b.n	8009202 <__mdiff+0xd6>
 8009246:	3f01      	subs	r7, #1
 8009248:	e7e7      	b.n	800921a <__mdiff+0xee>
 800924a:	bf00      	nop
 800924c:	0800a279 	.word	0x0800a279
 8009250:	0800a2ea 	.word	0x0800a2ea

08009254 <__ulp>:
 8009254:	b082      	sub	sp, #8
 8009256:	ed8d 0b00 	vstr	d0, [sp]
 800925a:	9a01      	ldr	r2, [sp, #4]
 800925c:	4b0f      	ldr	r3, [pc, #60]	@ (800929c <__ulp+0x48>)
 800925e:	4013      	ands	r3, r2
 8009260:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009264:	2b00      	cmp	r3, #0
 8009266:	dc08      	bgt.n	800927a <__ulp+0x26>
 8009268:	425b      	negs	r3, r3
 800926a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800926e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009272:	da04      	bge.n	800927e <__ulp+0x2a>
 8009274:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009278:	4113      	asrs	r3, r2
 800927a:	2200      	movs	r2, #0
 800927c:	e008      	b.n	8009290 <__ulp+0x3c>
 800927e:	f1a2 0314 	sub.w	r3, r2, #20
 8009282:	2b1e      	cmp	r3, #30
 8009284:	bfda      	itte	le
 8009286:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800928a:	40da      	lsrle	r2, r3
 800928c:	2201      	movgt	r2, #1
 800928e:	2300      	movs	r3, #0
 8009290:	4619      	mov	r1, r3
 8009292:	4610      	mov	r0, r2
 8009294:	ec41 0b10 	vmov	d0, r0, r1
 8009298:	b002      	add	sp, #8
 800929a:	4770      	bx	lr
 800929c:	7ff00000 	.word	0x7ff00000

080092a0 <__b2d>:
 80092a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a4:	6906      	ldr	r6, [r0, #16]
 80092a6:	f100 0814 	add.w	r8, r0, #20
 80092aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80092ae:	1f37      	subs	r7, r6, #4
 80092b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80092b4:	4610      	mov	r0, r2
 80092b6:	f7ff fd53 	bl	8008d60 <__hi0bits>
 80092ba:	f1c0 0320 	rsb	r3, r0, #32
 80092be:	280a      	cmp	r0, #10
 80092c0:	600b      	str	r3, [r1, #0]
 80092c2:	491b      	ldr	r1, [pc, #108]	@ (8009330 <__b2d+0x90>)
 80092c4:	dc15      	bgt.n	80092f2 <__b2d+0x52>
 80092c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80092ca:	fa22 f30c 	lsr.w	r3, r2, ip
 80092ce:	45b8      	cmp	r8, r7
 80092d0:	ea43 0501 	orr.w	r5, r3, r1
 80092d4:	bf34      	ite	cc
 80092d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80092da:	2300      	movcs	r3, #0
 80092dc:	3015      	adds	r0, #21
 80092de:	fa02 f000 	lsl.w	r0, r2, r0
 80092e2:	fa23 f30c 	lsr.w	r3, r3, ip
 80092e6:	4303      	orrs	r3, r0
 80092e8:	461c      	mov	r4, r3
 80092ea:	ec45 4b10 	vmov	d0, r4, r5
 80092ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f2:	45b8      	cmp	r8, r7
 80092f4:	bf3a      	itte	cc
 80092f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80092fa:	f1a6 0708 	subcc.w	r7, r6, #8
 80092fe:	2300      	movcs	r3, #0
 8009300:	380b      	subs	r0, #11
 8009302:	d012      	beq.n	800932a <__b2d+0x8a>
 8009304:	f1c0 0120 	rsb	r1, r0, #32
 8009308:	fa23 f401 	lsr.w	r4, r3, r1
 800930c:	4082      	lsls	r2, r0
 800930e:	4322      	orrs	r2, r4
 8009310:	4547      	cmp	r7, r8
 8009312:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009316:	bf8c      	ite	hi
 8009318:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800931c:	2200      	movls	r2, #0
 800931e:	4083      	lsls	r3, r0
 8009320:	40ca      	lsrs	r2, r1
 8009322:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009326:	4313      	orrs	r3, r2
 8009328:	e7de      	b.n	80092e8 <__b2d+0x48>
 800932a:	ea42 0501 	orr.w	r5, r2, r1
 800932e:	e7db      	b.n	80092e8 <__b2d+0x48>
 8009330:	3ff00000 	.word	0x3ff00000

08009334 <__d2b>:
 8009334:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009338:	460f      	mov	r7, r1
 800933a:	2101      	movs	r1, #1
 800933c:	ec59 8b10 	vmov	r8, r9, d0
 8009340:	4616      	mov	r6, r2
 8009342:	f7ff fc1b 	bl	8008b7c <_Balloc>
 8009346:	4604      	mov	r4, r0
 8009348:	b930      	cbnz	r0, 8009358 <__d2b+0x24>
 800934a:	4602      	mov	r2, r0
 800934c:	4b23      	ldr	r3, [pc, #140]	@ (80093dc <__d2b+0xa8>)
 800934e:	4824      	ldr	r0, [pc, #144]	@ (80093e0 <__d2b+0xac>)
 8009350:	f240 310f 	movw	r1, #783	@ 0x30f
 8009354:	f7fe fa06 	bl	8007764 <__assert_func>
 8009358:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800935c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009360:	b10d      	cbz	r5, 8009366 <__d2b+0x32>
 8009362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009366:	9301      	str	r3, [sp, #4]
 8009368:	f1b8 0300 	subs.w	r3, r8, #0
 800936c:	d023      	beq.n	80093b6 <__d2b+0x82>
 800936e:	4668      	mov	r0, sp
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	f7ff fd14 	bl	8008d9e <__lo0bits>
 8009376:	e9dd 1200 	ldrd	r1, r2, [sp]
 800937a:	b1d0      	cbz	r0, 80093b2 <__d2b+0x7e>
 800937c:	f1c0 0320 	rsb	r3, r0, #32
 8009380:	fa02 f303 	lsl.w	r3, r2, r3
 8009384:	430b      	orrs	r3, r1
 8009386:	40c2      	lsrs	r2, r0
 8009388:	6163      	str	r3, [r4, #20]
 800938a:	9201      	str	r2, [sp, #4]
 800938c:	9b01      	ldr	r3, [sp, #4]
 800938e:	61a3      	str	r3, [r4, #24]
 8009390:	2b00      	cmp	r3, #0
 8009392:	bf0c      	ite	eq
 8009394:	2201      	moveq	r2, #1
 8009396:	2202      	movne	r2, #2
 8009398:	6122      	str	r2, [r4, #16]
 800939a:	b1a5      	cbz	r5, 80093c6 <__d2b+0x92>
 800939c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093a0:	4405      	add	r5, r0
 80093a2:	603d      	str	r5, [r7, #0]
 80093a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093a8:	6030      	str	r0, [r6, #0]
 80093aa:	4620      	mov	r0, r4
 80093ac:	b003      	add	sp, #12
 80093ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093b2:	6161      	str	r1, [r4, #20]
 80093b4:	e7ea      	b.n	800938c <__d2b+0x58>
 80093b6:	a801      	add	r0, sp, #4
 80093b8:	f7ff fcf1 	bl	8008d9e <__lo0bits>
 80093bc:	9b01      	ldr	r3, [sp, #4]
 80093be:	6163      	str	r3, [r4, #20]
 80093c0:	3020      	adds	r0, #32
 80093c2:	2201      	movs	r2, #1
 80093c4:	e7e8      	b.n	8009398 <__d2b+0x64>
 80093c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093ce:	6038      	str	r0, [r7, #0]
 80093d0:	6918      	ldr	r0, [r3, #16]
 80093d2:	f7ff fcc5 	bl	8008d60 <__hi0bits>
 80093d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093da:	e7e5      	b.n	80093a8 <__d2b+0x74>
 80093dc:	0800a279 	.word	0x0800a279
 80093e0:	0800a2ea 	.word	0x0800a2ea

080093e4 <__ratio>:
 80093e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e8:	b085      	sub	sp, #20
 80093ea:	e9cd 1000 	strd	r1, r0, [sp]
 80093ee:	a902      	add	r1, sp, #8
 80093f0:	f7ff ff56 	bl	80092a0 <__b2d>
 80093f4:	9800      	ldr	r0, [sp, #0]
 80093f6:	a903      	add	r1, sp, #12
 80093f8:	ec55 4b10 	vmov	r4, r5, d0
 80093fc:	f7ff ff50 	bl	80092a0 <__b2d>
 8009400:	9b01      	ldr	r3, [sp, #4]
 8009402:	6919      	ldr	r1, [r3, #16]
 8009404:	9b00      	ldr	r3, [sp, #0]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	1ac9      	subs	r1, r1, r3
 800940a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800940e:	1a9b      	subs	r3, r3, r2
 8009410:	ec5b ab10 	vmov	sl, fp, d0
 8009414:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009418:	2b00      	cmp	r3, #0
 800941a:	bfce      	itee	gt
 800941c:	462a      	movgt	r2, r5
 800941e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009422:	465a      	movle	r2, fp
 8009424:	462f      	mov	r7, r5
 8009426:	46d9      	mov	r9, fp
 8009428:	bfcc      	ite	gt
 800942a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800942e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009432:	464b      	mov	r3, r9
 8009434:	4652      	mov	r2, sl
 8009436:	4620      	mov	r0, r4
 8009438:	4639      	mov	r1, r7
 800943a:	f7f7 fa07 	bl	800084c <__aeabi_ddiv>
 800943e:	ec41 0b10 	vmov	d0, r0, r1
 8009442:	b005      	add	sp, #20
 8009444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009448 <__copybits>:
 8009448:	3901      	subs	r1, #1
 800944a:	b570      	push	{r4, r5, r6, lr}
 800944c:	1149      	asrs	r1, r1, #5
 800944e:	6914      	ldr	r4, [r2, #16]
 8009450:	3101      	adds	r1, #1
 8009452:	f102 0314 	add.w	r3, r2, #20
 8009456:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800945a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800945e:	1f05      	subs	r5, r0, #4
 8009460:	42a3      	cmp	r3, r4
 8009462:	d30c      	bcc.n	800947e <__copybits+0x36>
 8009464:	1aa3      	subs	r3, r4, r2
 8009466:	3b11      	subs	r3, #17
 8009468:	f023 0303 	bic.w	r3, r3, #3
 800946c:	3211      	adds	r2, #17
 800946e:	42a2      	cmp	r2, r4
 8009470:	bf88      	it	hi
 8009472:	2300      	movhi	r3, #0
 8009474:	4418      	add	r0, r3
 8009476:	2300      	movs	r3, #0
 8009478:	4288      	cmp	r0, r1
 800947a:	d305      	bcc.n	8009488 <__copybits+0x40>
 800947c:	bd70      	pop	{r4, r5, r6, pc}
 800947e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009482:	f845 6f04 	str.w	r6, [r5, #4]!
 8009486:	e7eb      	b.n	8009460 <__copybits+0x18>
 8009488:	f840 3b04 	str.w	r3, [r0], #4
 800948c:	e7f4      	b.n	8009478 <__copybits+0x30>

0800948e <__any_on>:
 800948e:	f100 0214 	add.w	r2, r0, #20
 8009492:	6900      	ldr	r0, [r0, #16]
 8009494:	114b      	asrs	r3, r1, #5
 8009496:	4298      	cmp	r0, r3
 8009498:	b510      	push	{r4, lr}
 800949a:	db11      	blt.n	80094c0 <__any_on+0x32>
 800949c:	dd0a      	ble.n	80094b4 <__any_on+0x26>
 800949e:	f011 011f 	ands.w	r1, r1, #31
 80094a2:	d007      	beq.n	80094b4 <__any_on+0x26>
 80094a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094a8:	fa24 f001 	lsr.w	r0, r4, r1
 80094ac:	fa00 f101 	lsl.w	r1, r0, r1
 80094b0:	428c      	cmp	r4, r1
 80094b2:	d10b      	bne.n	80094cc <__any_on+0x3e>
 80094b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d803      	bhi.n	80094c4 <__any_on+0x36>
 80094bc:	2000      	movs	r0, #0
 80094be:	bd10      	pop	{r4, pc}
 80094c0:	4603      	mov	r3, r0
 80094c2:	e7f7      	b.n	80094b4 <__any_on+0x26>
 80094c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094c8:	2900      	cmp	r1, #0
 80094ca:	d0f5      	beq.n	80094b8 <__any_on+0x2a>
 80094cc:	2001      	movs	r0, #1
 80094ce:	e7f6      	b.n	80094be <__any_on+0x30>

080094d0 <_strtol_l.isra.0>:
 80094d0:	2b24      	cmp	r3, #36	@ 0x24
 80094d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d6:	4686      	mov	lr, r0
 80094d8:	4690      	mov	r8, r2
 80094da:	d801      	bhi.n	80094e0 <_strtol_l.isra.0+0x10>
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d106      	bne.n	80094ee <_strtol_l.isra.0+0x1e>
 80094e0:	f7fe f8f4 	bl	80076cc <__errno>
 80094e4:	2316      	movs	r3, #22
 80094e6:	6003      	str	r3, [r0, #0]
 80094e8:	2000      	movs	r0, #0
 80094ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ee:	4834      	ldr	r0, [pc, #208]	@ (80095c0 <_strtol_l.isra.0+0xf0>)
 80094f0:	460d      	mov	r5, r1
 80094f2:	462a      	mov	r2, r5
 80094f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094f8:	5d06      	ldrb	r6, [r0, r4]
 80094fa:	f016 0608 	ands.w	r6, r6, #8
 80094fe:	d1f8      	bne.n	80094f2 <_strtol_l.isra.0+0x22>
 8009500:	2c2d      	cmp	r4, #45	@ 0x2d
 8009502:	d110      	bne.n	8009526 <_strtol_l.isra.0+0x56>
 8009504:	782c      	ldrb	r4, [r5, #0]
 8009506:	2601      	movs	r6, #1
 8009508:	1c95      	adds	r5, r2, #2
 800950a:	f033 0210 	bics.w	r2, r3, #16
 800950e:	d115      	bne.n	800953c <_strtol_l.isra.0+0x6c>
 8009510:	2c30      	cmp	r4, #48	@ 0x30
 8009512:	d10d      	bne.n	8009530 <_strtol_l.isra.0+0x60>
 8009514:	782a      	ldrb	r2, [r5, #0]
 8009516:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800951a:	2a58      	cmp	r2, #88	@ 0x58
 800951c:	d108      	bne.n	8009530 <_strtol_l.isra.0+0x60>
 800951e:	786c      	ldrb	r4, [r5, #1]
 8009520:	3502      	adds	r5, #2
 8009522:	2310      	movs	r3, #16
 8009524:	e00a      	b.n	800953c <_strtol_l.isra.0+0x6c>
 8009526:	2c2b      	cmp	r4, #43	@ 0x2b
 8009528:	bf04      	itt	eq
 800952a:	782c      	ldrbeq	r4, [r5, #0]
 800952c:	1c95      	addeq	r5, r2, #2
 800952e:	e7ec      	b.n	800950a <_strtol_l.isra.0+0x3a>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1f6      	bne.n	8009522 <_strtol_l.isra.0+0x52>
 8009534:	2c30      	cmp	r4, #48	@ 0x30
 8009536:	bf14      	ite	ne
 8009538:	230a      	movne	r3, #10
 800953a:	2308      	moveq	r3, #8
 800953c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009540:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009544:	2200      	movs	r2, #0
 8009546:	fbbc f9f3 	udiv	r9, ip, r3
 800954a:	4610      	mov	r0, r2
 800954c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009550:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009554:	2f09      	cmp	r7, #9
 8009556:	d80f      	bhi.n	8009578 <_strtol_l.isra.0+0xa8>
 8009558:	463c      	mov	r4, r7
 800955a:	42a3      	cmp	r3, r4
 800955c:	dd1b      	ble.n	8009596 <_strtol_l.isra.0+0xc6>
 800955e:	1c57      	adds	r7, r2, #1
 8009560:	d007      	beq.n	8009572 <_strtol_l.isra.0+0xa2>
 8009562:	4581      	cmp	r9, r0
 8009564:	d314      	bcc.n	8009590 <_strtol_l.isra.0+0xc0>
 8009566:	d101      	bne.n	800956c <_strtol_l.isra.0+0x9c>
 8009568:	45a2      	cmp	sl, r4
 800956a:	db11      	blt.n	8009590 <_strtol_l.isra.0+0xc0>
 800956c:	fb00 4003 	mla	r0, r0, r3, r4
 8009570:	2201      	movs	r2, #1
 8009572:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009576:	e7eb      	b.n	8009550 <_strtol_l.isra.0+0x80>
 8009578:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800957c:	2f19      	cmp	r7, #25
 800957e:	d801      	bhi.n	8009584 <_strtol_l.isra.0+0xb4>
 8009580:	3c37      	subs	r4, #55	@ 0x37
 8009582:	e7ea      	b.n	800955a <_strtol_l.isra.0+0x8a>
 8009584:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009588:	2f19      	cmp	r7, #25
 800958a:	d804      	bhi.n	8009596 <_strtol_l.isra.0+0xc6>
 800958c:	3c57      	subs	r4, #87	@ 0x57
 800958e:	e7e4      	b.n	800955a <_strtol_l.isra.0+0x8a>
 8009590:	f04f 32ff 	mov.w	r2, #4294967295
 8009594:	e7ed      	b.n	8009572 <_strtol_l.isra.0+0xa2>
 8009596:	1c53      	adds	r3, r2, #1
 8009598:	d108      	bne.n	80095ac <_strtol_l.isra.0+0xdc>
 800959a:	2322      	movs	r3, #34	@ 0x22
 800959c:	f8ce 3000 	str.w	r3, [lr]
 80095a0:	4660      	mov	r0, ip
 80095a2:	f1b8 0f00 	cmp.w	r8, #0
 80095a6:	d0a0      	beq.n	80094ea <_strtol_l.isra.0+0x1a>
 80095a8:	1e69      	subs	r1, r5, #1
 80095aa:	e006      	b.n	80095ba <_strtol_l.isra.0+0xea>
 80095ac:	b106      	cbz	r6, 80095b0 <_strtol_l.isra.0+0xe0>
 80095ae:	4240      	negs	r0, r0
 80095b0:	f1b8 0f00 	cmp.w	r8, #0
 80095b4:	d099      	beq.n	80094ea <_strtol_l.isra.0+0x1a>
 80095b6:	2a00      	cmp	r2, #0
 80095b8:	d1f6      	bne.n	80095a8 <_strtol_l.isra.0+0xd8>
 80095ba:	f8c8 1000 	str.w	r1, [r8]
 80095be:	e794      	b.n	80094ea <_strtol_l.isra.0+0x1a>
 80095c0:	0800a4a9 	.word	0x0800a4a9

080095c4 <_strtol_r>:
 80095c4:	f7ff bf84 	b.w	80094d0 <_strtol_l.isra.0>

080095c8 <__ascii_wctomb>:
 80095c8:	4603      	mov	r3, r0
 80095ca:	4608      	mov	r0, r1
 80095cc:	b141      	cbz	r1, 80095e0 <__ascii_wctomb+0x18>
 80095ce:	2aff      	cmp	r2, #255	@ 0xff
 80095d0:	d904      	bls.n	80095dc <__ascii_wctomb+0x14>
 80095d2:	228a      	movs	r2, #138	@ 0x8a
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	f04f 30ff 	mov.w	r0, #4294967295
 80095da:	4770      	bx	lr
 80095dc:	700a      	strb	r2, [r1, #0]
 80095de:	2001      	movs	r0, #1
 80095e0:	4770      	bx	lr

080095e2 <__ssputs_r>:
 80095e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e6:	688e      	ldr	r6, [r1, #8]
 80095e8:	461f      	mov	r7, r3
 80095ea:	42be      	cmp	r6, r7
 80095ec:	680b      	ldr	r3, [r1, #0]
 80095ee:	4682      	mov	sl, r0
 80095f0:	460c      	mov	r4, r1
 80095f2:	4690      	mov	r8, r2
 80095f4:	d82d      	bhi.n	8009652 <__ssputs_r+0x70>
 80095f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095fa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095fe:	d026      	beq.n	800964e <__ssputs_r+0x6c>
 8009600:	6965      	ldr	r5, [r4, #20]
 8009602:	6909      	ldr	r1, [r1, #16]
 8009604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009608:	eba3 0901 	sub.w	r9, r3, r1
 800960c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009610:	1c7b      	adds	r3, r7, #1
 8009612:	444b      	add	r3, r9
 8009614:	106d      	asrs	r5, r5, #1
 8009616:	429d      	cmp	r5, r3
 8009618:	bf38      	it	cc
 800961a:	461d      	movcc	r5, r3
 800961c:	0553      	lsls	r3, r2, #21
 800961e:	d527      	bpl.n	8009670 <__ssputs_r+0x8e>
 8009620:	4629      	mov	r1, r5
 8009622:	f7fc f963 	bl	80058ec <_malloc_r>
 8009626:	4606      	mov	r6, r0
 8009628:	b360      	cbz	r0, 8009684 <__ssputs_r+0xa2>
 800962a:	6921      	ldr	r1, [r4, #16]
 800962c:	464a      	mov	r2, r9
 800962e:	f7fe f87a 	bl	8007726 <memcpy>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800963c:	81a3      	strh	r3, [r4, #12]
 800963e:	6126      	str	r6, [r4, #16]
 8009640:	6165      	str	r5, [r4, #20]
 8009642:	444e      	add	r6, r9
 8009644:	eba5 0509 	sub.w	r5, r5, r9
 8009648:	6026      	str	r6, [r4, #0]
 800964a:	60a5      	str	r5, [r4, #8]
 800964c:	463e      	mov	r6, r7
 800964e:	42be      	cmp	r6, r7
 8009650:	d900      	bls.n	8009654 <__ssputs_r+0x72>
 8009652:	463e      	mov	r6, r7
 8009654:	6820      	ldr	r0, [r4, #0]
 8009656:	4632      	mov	r2, r6
 8009658:	4641      	mov	r1, r8
 800965a:	f000 f9d7 	bl	8009a0c <memmove>
 800965e:	68a3      	ldr	r3, [r4, #8]
 8009660:	1b9b      	subs	r3, r3, r6
 8009662:	60a3      	str	r3, [r4, #8]
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	4433      	add	r3, r6
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	2000      	movs	r0, #0
 800966c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009670:	462a      	mov	r2, r5
 8009672:	f000 fa00 	bl	8009a76 <_realloc_r>
 8009676:	4606      	mov	r6, r0
 8009678:	2800      	cmp	r0, #0
 800967a:	d1e0      	bne.n	800963e <__ssputs_r+0x5c>
 800967c:	6921      	ldr	r1, [r4, #16]
 800967e:	4650      	mov	r0, sl
 8009680:	f7fe fee6 	bl	8008450 <_free_r>
 8009684:	230c      	movs	r3, #12
 8009686:	f8ca 3000 	str.w	r3, [sl]
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009690:	81a3      	strh	r3, [r4, #12]
 8009692:	f04f 30ff 	mov.w	r0, #4294967295
 8009696:	e7e9      	b.n	800966c <__ssputs_r+0x8a>

08009698 <_svfiprintf_r>:
 8009698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	4698      	mov	r8, r3
 800969e:	898b      	ldrh	r3, [r1, #12]
 80096a0:	061b      	lsls	r3, r3, #24
 80096a2:	b09d      	sub	sp, #116	@ 0x74
 80096a4:	4607      	mov	r7, r0
 80096a6:	460d      	mov	r5, r1
 80096a8:	4614      	mov	r4, r2
 80096aa:	d510      	bpl.n	80096ce <_svfiprintf_r+0x36>
 80096ac:	690b      	ldr	r3, [r1, #16]
 80096ae:	b973      	cbnz	r3, 80096ce <_svfiprintf_r+0x36>
 80096b0:	2140      	movs	r1, #64	@ 0x40
 80096b2:	f7fc f91b 	bl	80058ec <_malloc_r>
 80096b6:	6028      	str	r0, [r5, #0]
 80096b8:	6128      	str	r0, [r5, #16]
 80096ba:	b930      	cbnz	r0, 80096ca <_svfiprintf_r+0x32>
 80096bc:	230c      	movs	r3, #12
 80096be:	603b      	str	r3, [r7, #0]
 80096c0:	f04f 30ff 	mov.w	r0, #4294967295
 80096c4:	b01d      	add	sp, #116	@ 0x74
 80096c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ca:	2340      	movs	r3, #64	@ 0x40
 80096cc:	616b      	str	r3, [r5, #20]
 80096ce:	2300      	movs	r3, #0
 80096d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80096d2:	2320      	movs	r3, #32
 80096d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80096dc:	2330      	movs	r3, #48	@ 0x30
 80096de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800987c <_svfiprintf_r+0x1e4>
 80096e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096e6:	f04f 0901 	mov.w	r9, #1
 80096ea:	4623      	mov	r3, r4
 80096ec:	469a      	mov	sl, r3
 80096ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096f2:	b10a      	cbz	r2, 80096f8 <_svfiprintf_r+0x60>
 80096f4:	2a25      	cmp	r2, #37	@ 0x25
 80096f6:	d1f9      	bne.n	80096ec <_svfiprintf_r+0x54>
 80096f8:	ebba 0b04 	subs.w	fp, sl, r4
 80096fc:	d00b      	beq.n	8009716 <_svfiprintf_r+0x7e>
 80096fe:	465b      	mov	r3, fp
 8009700:	4622      	mov	r2, r4
 8009702:	4629      	mov	r1, r5
 8009704:	4638      	mov	r0, r7
 8009706:	f7ff ff6c 	bl	80095e2 <__ssputs_r>
 800970a:	3001      	adds	r0, #1
 800970c:	f000 80a7 	beq.w	800985e <_svfiprintf_r+0x1c6>
 8009710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009712:	445a      	add	r2, fp
 8009714:	9209      	str	r2, [sp, #36]	@ 0x24
 8009716:	f89a 3000 	ldrb.w	r3, [sl]
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 809f 	beq.w	800985e <_svfiprintf_r+0x1c6>
 8009720:	2300      	movs	r3, #0
 8009722:	f04f 32ff 	mov.w	r2, #4294967295
 8009726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800972a:	f10a 0a01 	add.w	sl, sl, #1
 800972e:	9304      	str	r3, [sp, #16]
 8009730:	9307      	str	r3, [sp, #28]
 8009732:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009736:	931a      	str	r3, [sp, #104]	@ 0x68
 8009738:	4654      	mov	r4, sl
 800973a:	2205      	movs	r2, #5
 800973c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009740:	484e      	ldr	r0, [pc, #312]	@ (800987c <_svfiprintf_r+0x1e4>)
 8009742:	f7f6 fd45 	bl	80001d0 <memchr>
 8009746:	9a04      	ldr	r2, [sp, #16]
 8009748:	b9d8      	cbnz	r0, 8009782 <_svfiprintf_r+0xea>
 800974a:	06d0      	lsls	r0, r2, #27
 800974c:	bf44      	itt	mi
 800974e:	2320      	movmi	r3, #32
 8009750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009754:	0711      	lsls	r1, r2, #28
 8009756:	bf44      	itt	mi
 8009758:	232b      	movmi	r3, #43	@ 0x2b
 800975a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800975e:	f89a 3000 	ldrb.w	r3, [sl]
 8009762:	2b2a      	cmp	r3, #42	@ 0x2a
 8009764:	d015      	beq.n	8009792 <_svfiprintf_r+0xfa>
 8009766:	9a07      	ldr	r2, [sp, #28]
 8009768:	4654      	mov	r4, sl
 800976a:	2000      	movs	r0, #0
 800976c:	f04f 0c0a 	mov.w	ip, #10
 8009770:	4621      	mov	r1, r4
 8009772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009776:	3b30      	subs	r3, #48	@ 0x30
 8009778:	2b09      	cmp	r3, #9
 800977a:	d94b      	bls.n	8009814 <_svfiprintf_r+0x17c>
 800977c:	b1b0      	cbz	r0, 80097ac <_svfiprintf_r+0x114>
 800977e:	9207      	str	r2, [sp, #28]
 8009780:	e014      	b.n	80097ac <_svfiprintf_r+0x114>
 8009782:	eba0 0308 	sub.w	r3, r0, r8
 8009786:	fa09 f303 	lsl.w	r3, r9, r3
 800978a:	4313      	orrs	r3, r2
 800978c:	9304      	str	r3, [sp, #16]
 800978e:	46a2      	mov	sl, r4
 8009790:	e7d2      	b.n	8009738 <_svfiprintf_r+0xa0>
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	1d19      	adds	r1, r3, #4
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	9103      	str	r1, [sp, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	bfbb      	ittet	lt
 800979e:	425b      	neglt	r3, r3
 80097a0:	f042 0202 	orrlt.w	r2, r2, #2
 80097a4:	9307      	strge	r3, [sp, #28]
 80097a6:	9307      	strlt	r3, [sp, #28]
 80097a8:	bfb8      	it	lt
 80097aa:	9204      	strlt	r2, [sp, #16]
 80097ac:	7823      	ldrb	r3, [r4, #0]
 80097ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80097b0:	d10a      	bne.n	80097c8 <_svfiprintf_r+0x130>
 80097b2:	7863      	ldrb	r3, [r4, #1]
 80097b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80097b6:	d132      	bne.n	800981e <_svfiprintf_r+0x186>
 80097b8:	9b03      	ldr	r3, [sp, #12]
 80097ba:	1d1a      	adds	r2, r3, #4
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	9203      	str	r2, [sp, #12]
 80097c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097c4:	3402      	adds	r4, #2
 80097c6:	9305      	str	r3, [sp, #20]
 80097c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800988c <_svfiprintf_r+0x1f4>
 80097cc:	7821      	ldrb	r1, [r4, #0]
 80097ce:	2203      	movs	r2, #3
 80097d0:	4650      	mov	r0, sl
 80097d2:	f7f6 fcfd 	bl	80001d0 <memchr>
 80097d6:	b138      	cbz	r0, 80097e8 <_svfiprintf_r+0x150>
 80097d8:	9b04      	ldr	r3, [sp, #16]
 80097da:	eba0 000a 	sub.w	r0, r0, sl
 80097de:	2240      	movs	r2, #64	@ 0x40
 80097e0:	4082      	lsls	r2, r0
 80097e2:	4313      	orrs	r3, r2
 80097e4:	3401      	adds	r4, #1
 80097e6:	9304      	str	r3, [sp, #16]
 80097e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ec:	4824      	ldr	r0, [pc, #144]	@ (8009880 <_svfiprintf_r+0x1e8>)
 80097ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097f2:	2206      	movs	r2, #6
 80097f4:	f7f6 fcec 	bl	80001d0 <memchr>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d036      	beq.n	800986a <_svfiprintf_r+0x1d2>
 80097fc:	4b21      	ldr	r3, [pc, #132]	@ (8009884 <_svfiprintf_r+0x1ec>)
 80097fe:	bb1b      	cbnz	r3, 8009848 <_svfiprintf_r+0x1b0>
 8009800:	9b03      	ldr	r3, [sp, #12]
 8009802:	3307      	adds	r3, #7
 8009804:	f023 0307 	bic.w	r3, r3, #7
 8009808:	3308      	adds	r3, #8
 800980a:	9303      	str	r3, [sp, #12]
 800980c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800980e:	4433      	add	r3, r6
 8009810:	9309      	str	r3, [sp, #36]	@ 0x24
 8009812:	e76a      	b.n	80096ea <_svfiprintf_r+0x52>
 8009814:	fb0c 3202 	mla	r2, ip, r2, r3
 8009818:	460c      	mov	r4, r1
 800981a:	2001      	movs	r0, #1
 800981c:	e7a8      	b.n	8009770 <_svfiprintf_r+0xd8>
 800981e:	2300      	movs	r3, #0
 8009820:	3401      	adds	r4, #1
 8009822:	9305      	str	r3, [sp, #20]
 8009824:	4619      	mov	r1, r3
 8009826:	f04f 0c0a 	mov.w	ip, #10
 800982a:	4620      	mov	r0, r4
 800982c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009830:	3a30      	subs	r2, #48	@ 0x30
 8009832:	2a09      	cmp	r2, #9
 8009834:	d903      	bls.n	800983e <_svfiprintf_r+0x1a6>
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0c6      	beq.n	80097c8 <_svfiprintf_r+0x130>
 800983a:	9105      	str	r1, [sp, #20]
 800983c:	e7c4      	b.n	80097c8 <_svfiprintf_r+0x130>
 800983e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009842:	4604      	mov	r4, r0
 8009844:	2301      	movs	r3, #1
 8009846:	e7f0      	b.n	800982a <_svfiprintf_r+0x192>
 8009848:	ab03      	add	r3, sp, #12
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	462a      	mov	r2, r5
 800984e:	4b0e      	ldr	r3, [pc, #56]	@ (8009888 <_svfiprintf_r+0x1f0>)
 8009850:	a904      	add	r1, sp, #16
 8009852:	4638      	mov	r0, r7
 8009854:	f7fc ff7e 	bl	8006754 <_printf_float>
 8009858:	1c42      	adds	r2, r0, #1
 800985a:	4606      	mov	r6, r0
 800985c:	d1d6      	bne.n	800980c <_svfiprintf_r+0x174>
 800985e:	89ab      	ldrh	r3, [r5, #12]
 8009860:	065b      	lsls	r3, r3, #25
 8009862:	f53f af2d 	bmi.w	80096c0 <_svfiprintf_r+0x28>
 8009866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009868:	e72c      	b.n	80096c4 <_svfiprintf_r+0x2c>
 800986a:	ab03      	add	r3, sp, #12
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	462a      	mov	r2, r5
 8009870:	4b05      	ldr	r3, [pc, #20]	@ (8009888 <_svfiprintf_r+0x1f0>)
 8009872:	a904      	add	r1, sp, #16
 8009874:	4638      	mov	r0, r7
 8009876:	f7fd fa05 	bl	8006c84 <_printf_i>
 800987a:	e7ed      	b.n	8009858 <_svfiprintf_r+0x1c0>
 800987c:	0800a343 	.word	0x0800a343
 8009880:	0800a34d 	.word	0x0800a34d
 8009884:	08006755 	.word	0x08006755
 8009888:	080095e3 	.word	0x080095e3
 800988c:	0800a349 	.word	0x0800a349

08009890 <__sflush_r>:
 8009890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009898:	0716      	lsls	r6, r2, #28
 800989a:	4605      	mov	r5, r0
 800989c:	460c      	mov	r4, r1
 800989e:	d454      	bmi.n	800994a <__sflush_r+0xba>
 80098a0:	684b      	ldr	r3, [r1, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	dc02      	bgt.n	80098ac <__sflush_r+0x1c>
 80098a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	dd48      	ble.n	800993e <__sflush_r+0xae>
 80098ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098ae:	2e00      	cmp	r6, #0
 80098b0:	d045      	beq.n	800993e <__sflush_r+0xae>
 80098b2:	2300      	movs	r3, #0
 80098b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098b8:	682f      	ldr	r7, [r5, #0]
 80098ba:	6a21      	ldr	r1, [r4, #32]
 80098bc:	602b      	str	r3, [r5, #0]
 80098be:	d030      	beq.n	8009922 <__sflush_r+0x92>
 80098c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	0759      	lsls	r1, r3, #29
 80098c6:	d505      	bpl.n	80098d4 <__sflush_r+0x44>
 80098c8:	6863      	ldr	r3, [r4, #4]
 80098ca:	1ad2      	subs	r2, r2, r3
 80098cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098ce:	b10b      	cbz	r3, 80098d4 <__sflush_r+0x44>
 80098d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098d2:	1ad2      	subs	r2, r2, r3
 80098d4:	2300      	movs	r3, #0
 80098d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098d8:	6a21      	ldr	r1, [r4, #32]
 80098da:	4628      	mov	r0, r5
 80098dc:	47b0      	blx	r6
 80098de:	1c43      	adds	r3, r0, #1
 80098e0:	89a3      	ldrh	r3, [r4, #12]
 80098e2:	d106      	bne.n	80098f2 <__sflush_r+0x62>
 80098e4:	6829      	ldr	r1, [r5, #0]
 80098e6:	291d      	cmp	r1, #29
 80098e8:	d82b      	bhi.n	8009942 <__sflush_r+0xb2>
 80098ea:	4a2a      	ldr	r2, [pc, #168]	@ (8009994 <__sflush_r+0x104>)
 80098ec:	40ca      	lsrs	r2, r1
 80098ee:	07d6      	lsls	r6, r2, #31
 80098f0:	d527      	bpl.n	8009942 <__sflush_r+0xb2>
 80098f2:	2200      	movs	r2, #0
 80098f4:	6062      	str	r2, [r4, #4]
 80098f6:	04d9      	lsls	r1, r3, #19
 80098f8:	6922      	ldr	r2, [r4, #16]
 80098fa:	6022      	str	r2, [r4, #0]
 80098fc:	d504      	bpl.n	8009908 <__sflush_r+0x78>
 80098fe:	1c42      	adds	r2, r0, #1
 8009900:	d101      	bne.n	8009906 <__sflush_r+0x76>
 8009902:	682b      	ldr	r3, [r5, #0]
 8009904:	b903      	cbnz	r3, 8009908 <__sflush_r+0x78>
 8009906:	6560      	str	r0, [r4, #84]	@ 0x54
 8009908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800990a:	602f      	str	r7, [r5, #0]
 800990c:	b1b9      	cbz	r1, 800993e <__sflush_r+0xae>
 800990e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009912:	4299      	cmp	r1, r3
 8009914:	d002      	beq.n	800991c <__sflush_r+0x8c>
 8009916:	4628      	mov	r0, r5
 8009918:	f7fe fd9a 	bl	8008450 <_free_r>
 800991c:	2300      	movs	r3, #0
 800991e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009920:	e00d      	b.n	800993e <__sflush_r+0xae>
 8009922:	2301      	movs	r3, #1
 8009924:	4628      	mov	r0, r5
 8009926:	47b0      	blx	r6
 8009928:	4602      	mov	r2, r0
 800992a:	1c50      	adds	r0, r2, #1
 800992c:	d1c9      	bne.n	80098c2 <__sflush_r+0x32>
 800992e:	682b      	ldr	r3, [r5, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d0c6      	beq.n	80098c2 <__sflush_r+0x32>
 8009934:	2b1d      	cmp	r3, #29
 8009936:	d001      	beq.n	800993c <__sflush_r+0xac>
 8009938:	2b16      	cmp	r3, #22
 800993a:	d11e      	bne.n	800997a <__sflush_r+0xea>
 800993c:	602f      	str	r7, [r5, #0]
 800993e:	2000      	movs	r0, #0
 8009940:	e022      	b.n	8009988 <__sflush_r+0xf8>
 8009942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009946:	b21b      	sxth	r3, r3
 8009948:	e01b      	b.n	8009982 <__sflush_r+0xf2>
 800994a:	690f      	ldr	r7, [r1, #16]
 800994c:	2f00      	cmp	r7, #0
 800994e:	d0f6      	beq.n	800993e <__sflush_r+0xae>
 8009950:	0793      	lsls	r3, r2, #30
 8009952:	680e      	ldr	r6, [r1, #0]
 8009954:	bf08      	it	eq
 8009956:	694b      	ldreq	r3, [r1, #20]
 8009958:	600f      	str	r7, [r1, #0]
 800995a:	bf18      	it	ne
 800995c:	2300      	movne	r3, #0
 800995e:	eba6 0807 	sub.w	r8, r6, r7
 8009962:	608b      	str	r3, [r1, #8]
 8009964:	f1b8 0f00 	cmp.w	r8, #0
 8009968:	dde9      	ble.n	800993e <__sflush_r+0xae>
 800996a:	6a21      	ldr	r1, [r4, #32]
 800996c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800996e:	4643      	mov	r3, r8
 8009970:	463a      	mov	r2, r7
 8009972:	4628      	mov	r0, r5
 8009974:	47b0      	blx	r6
 8009976:	2800      	cmp	r0, #0
 8009978:	dc08      	bgt.n	800998c <__sflush_r+0xfc>
 800997a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800997e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009982:	81a3      	strh	r3, [r4, #12]
 8009984:	f04f 30ff 	mov.w	r0, #4294967295
 8009988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800998c:	4407      	add	r7, r0
 800998e:	eba8 0800 	sub.w	r8, r8, r0
 8009992:	e7e7      	b.n	8009964 <__sflush_r+0xd4>
 8009994:	20400001 	.word	0x20400001

08009998 <_fflush_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	690b      	ldr	r3, [r1, #16]
 800999c:	4605      	mov	r5, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	b913      	cbnz	r3, 80099a8 <_fflush_r+0x10>
 80099a2:	2500      	movs	r5, #0
 80099a4:	4628      	mov	r0, r5
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	b118      	cbz	r0, 80099b2 <_fflush_r+0x1a>
 80099aa:	6a03      	ldr	r3, [r0, #32]
 80099ac:	b90b      	cbnz	r3, 80099b2 <_fflush_r+0x1a>
 80099ae:	f7fd fd21 	bl	80073f4 <__sinit>
 80099b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0f3      	beq.n	80099a2 <_fflush_r+0xa>
 80099ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099bc:	07d0      	lsls	r0, r2, #31
 80099be:	d404      	bmi.n	80099ca <_fflush_r+0x32>
 80099c0:	0599      	lsls	r1, r3, #22
 80099c2:	d402      	bmi.n	80099ca <_fflush_r+0x32>
 80099c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099c6:	f7fd feac 	bl	8007722 <__retarget_lock_acquire_recursive>
 80099ca:	4628      	mov	r0, r5
 80099cc:	4621      	mov	r1, r4
 80099ce:	f7ff ff5f 	bl	8009890 <__sflush_r>
 80099d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099d4:	07da      	lsls	r2, r3, #31
 80099d6:	4605      	mov	r5, r0
 80099d8:	d4e4      	bmi.n	80099a4 <_fflush_r+0xc>
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	059b      	lsls	r3, r3, #22
 80099de:	d4e1      	bmi.n	80099a4 <_fflush_r+0xc>
 80099e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099e2:	f7fd fe9f 	bl	8007724 <__retarget_lock_release_recursive>
 80099e6:	e7dd      	b.n	80099a4 <_fflush_r+0xc>

080099e8 <fiprintf>:
 80099e8:	b40e      	push	{r1, r2, r3}
 80099ea:	b503      	push	{r0, r1, lr}
 80099ec:	4601      	mov	r1, r0
 80099ee:	ab03      	add	r3, sp, #12
 80099f0:	4805      	ldr	r0, [pc, #20]	@ (8009a08 <fiprintf+0x20>)
 80099f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099f6:	6800      	ldr	r0, [r0, #0]
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	f000 f893 	bl	8009b24 <_vfiprintf_r>
 80099fe:	b002      	add	sp, #8
 8009a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a04:	b003      	add	sp, #12
 8009a06:	4770      	bx	lr
 8009a08:	20000268 	.word	0x20000268

08009a0c <memmove>:
 8009a0c:	4288      	cmp	r0, r1
 8009a0e:	b510      	push	{r4, lr}
 8009a10:	eb01 0402 	add.w	r4, r1, r2
 8009a14:	d902      	bls.n	8009a1c <memmove+0x10>
 8009a16:	4284      	cmp	r4, r0
 8009a18:	4623      	mov	r3, r4
 8009a1a:	d807      	bhi.n	8009a2c <memmove+0x20>
 8009a1c:	1e43      	subs	r3, r0, #1
 8009a1e:	42a1      	cmp	r1, r4
 8009a20:	d008      	beq.n	8009a34 <memmove+0x28>
 8009a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a2a:	e7f8      	b.n	8009a1e <memmove+0x12>
 8009a2c:	4402      	add	r2, r0
 8009a2e:	4601      	mov	r1, r0
 8009a30:	428a      	cmp	r2, r1
 8009a32:	d100      	bne.n	8009a36 <memmove+0x2a>
 8009a34:	bd10      	pop	{r4, pc}
 8009a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a3e:	e7f7      	b.n	8009a30 <memmove+0x24>

08009a40 <abort>:
 8009a40:	b508      	push	{r3, lr}
 8009a42:	2006      	movs	r0, #6
 8009a44:	f000 fa42 	bl	8009ecc <raise>
 8009a48:	2001      	movs	r0, #1
 8009a4a:	f7f8 fae1 	bl	8002010 <_exit>

08009a4e <_calloc_r>:
 8009a4e:	b570      	push	{r4, r5, r6, lr}
 8009a50:	fba1 5402 	umull	r5, r4, r1, r2
 8009a54:	b934      	cbnz	r4, 8009a64 <_calloc_r+0x16>
 8009a56:	4629      	mov	r1, r5
 8009a58:	f7fb ff48 	bl	80058ec <_malloc_r>
 8009a5c:	4606      	mov	r6, r0
 8009a5e:	b928      	cbnz	r0, 8009a6c <_calloc_r+0x1e>
 8009a60:	4630      	mov	r0, r6
 8009a62:	bd70      	pop	{r4, r5, r6, pc}
 8009a64:	220c      	movs	r2, #12
 8009a66:	6002      	str	r2, [r0, #0]
 8009a68:	2600      	movs	r6, #0
 8009a6a:	e7f9      	b.n	8009a60 <_calloc_r+0x12>
 8009a6c:	462a      	mov	r2, r5
 8009a6e:	4621      	mov	r1, r4
 8009a70:	f7fd fd5b 	bl	800752a <memset>
 8009a74:	e7f4      	b.n	8009a60 <_calloc_r+0x12>

08009a76 <_realloc_r>:
 8009a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	4614      	mov	r4, r2
 8009a7e:	460d      	mov	r5, r1
 8009a80:	b921      	cbnz	r1, 8009a8c <_realloc_r+0x16>
 8009a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a86:	4611      	mov	r1, r2
 8009a88:	f7fb bf30 	b.w	80058ec <_malloc_r>
 8009a8c:	b92a      	cbnz	r2, 8009a9a <_realloc_r+0x24>
 8009a8e:	f7fe fcdf 	bl	8008450 <_free_r>
 8009a92:	4625      	mov	r5, r4
 8009a94:	4628      	mov	r0, r5
 8009a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a9a:	f000 fa33 	bl	8009f04 <_malloc_usable_size_r>
 8009a9e:	4284      	cmp	r4, r0
 8009aa0:	4606      	mov	r6, r0
 8009aa2:	d802      	bhi.n	8009aaa <_realloc_r+0x34>
 8009aa4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009aa8:	d8f4      	bhi.n	8009a94 <_realloc_r+0x1e>
 8009aaa:	4621      	mov	r1, r4
 8009aac:	4638      	mov	r0, r7
 8009aae:	f7fb ff1d 	bl	80058ec <_malloc_r>
 8009ab2:	4680      	mov	r8, r0
 8009ab4:	b908      	cbnz	r0, 8009aba <_realloc_r+0x44>
 8009ab6:	4645      	mov	r5, r8
 8009ab8:	e7ec      	b.n	8009a94 <_realloc_r+0x1e>
 8009aba:	42b4      	cmp	r4, r6
 8009abc:	4622      	mov	r2, r4
 8009abe:	4629      	mov	r1, r5
 8009ac0:	bf28      	it	cs
 8009ac2:	4632      	movcs	r2, r6
 8009ac4:	f7fd fe2f 	bl	8007726 <memcpy>
 8009ac8:	4629      	mov	r1, r5
 8009aca:	4638      	mov	r0, r7
 8009acc:	f7fe fcc0 	bl	8008450 <_free_r>
 8009ad0:	e7f1      	b.n	8009ab6 <_realloc_r+0x40>

08009ad2 <__sfputc_r>:
 8009ad2:	6893      	ldr	r3, [r2, #8]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	b410      	push	{r4}
 8009ada:	6093      	str	r3, [r2, #8]
 8009adc:	da08      	bge.n	8009af0 <__sfputc_r+0x1e>
 8009ade:	6994      	ldr	r4, [r2, #24]
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	db01      	blt.n	8009ae8 <__sfputc_r+0x16>
 8009ae4:	290a      	cmp	r1, #10
 8009ae6:	d103      	bne.n	8009af0 <__sfputc_r+0x1e>
 8009ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aec:	f000 b932 	b.w	8009d54 <__swbuf_r>
 8009af0:	6813      	ldr	r3, [r2, #0]
 8009af2:	1c58      	adds	r0, r3, #1
 8009af4:	6010      	str	r0, [r2, #0]
 8009af6:	7019      	strb	r1, [r3, #0]
 8009af8:	4608      	mov	r0, r1
 8009afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <__sfputs_r>:
 8009b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b02:	4606      	mov	r6, r0
 8009b04:	460f      	mov	r7, r1
 8009b06:	4614      	mov	r4, r2
 8009b08:	18d5      	adds	r5, r2, r3
 8009b0a:	42ac      	cmp	r4, r5
 8009b0c:	d101      	bne.n	8009b12 <__sfputs_r+0x12>
 8009b0e:	2000      	movs	r0, #0
 8009b10:	e007      	b.n	8009b22 <__sfputs_r+0x22>
 8009b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b16:	463a      	mov	r2, r7
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f7ff ffda 	bl	8009ad2 <__sfputc_r>
 8009b1e:	1c43      	adds	r3, r0, #1
 8009b20:	d1f3      	bne.n	8009b0a <__sfputs_r+0xa>
 8009b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b24 <_vfiprintf_r>:
 8009b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b28:	460d      	mov	r5, r1
 8009b2a:	b09d      	sub	sp, #116	@ 0x74
 8009b2c:	4614      	mov	r4, r2
 8009b2e:	4698      	mov	r8, r3
 8009b30:	4606      	mov	r6, r0
 8009b32:	b118      	cbz	r0, 8009b3c <_vfiprintf_r+0x18>
 8009b34:	6a03      	ldr	r3, [r0, #32]
 8009b36:	b90b      	cbnz	r3, 8009b3c <_vfiprintf_r+0x18>
 8009b38:	f7fd fc5c 	bl	80073f4 <__sinit>
 8009b3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b3e:	07d9      	lsls	r1, r3, #31
 8009b40:	d405      	bmi.n	8009b4e <_vfiprintf_r+0x2a>
 8009b42:	89ab      	ldrh	r3, [r5, #12]
 8009b44:	059a      	lsls	r2, r3, #22
 8009b46:	d402      	bmi.n	8009b4e <_vfiprintf_r+0x2a>
 8009b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b4a:	f7fd fdea 	bl	8007722 <__retarget_lock_acquire_recursive>
 8009b4e:	89ab      	ldrh	r3, [r5, #12]
 8009b50:	071b      	lsls	r3, r3, #28
 8009b52:	d501      	bpl.n	8009b58 <_vfiprintf_r+0x34>
 8009b54:	692b      	ldr	r3, [r5, #16]
 8009b56:	b99b      	cbnz	r3, 8009b80 <_vfiprintf_r+0x5c>
 8009b58:	4629      	mov	r1, r5
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f000 f938 	bl	8009dd0 <__swsetup_r>
 8009b60:	b170      	cbz	r0, 8009b80 <_vfiprintf_r+0x5c>
 8009b62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b64:	07dc      	lsls	r4, r3, #31
 8009b66:	d504      	bpl.n	8009b72 <_vfiprintf_r+0x4e>
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6c:	b01d      	add	sp, #116	@ 0x74
 8009b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b72:	89ab      	ldrh	r3, [r5, #12]
 8009b74:	0598      	lsls	r0, r3, #22
 8009b76:	d4f7      	bmi.n	8009b68 <_vfiprintf_r+0x44>
 8009b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b7a:	f7fd fdd3 	bl	8007724 <__retarget_lock_release_recursive>
 8009b7e:	e7f3      	b.n	8009b68 <_vfiprintf_r+0x44>
 8009b80:	2300      	movs	r3, #0
 8009b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b84:	2320      	movs	r3, #32
 8009b86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b8e:	2330      	movs	r3, #48	@ 0x30
 8009b90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d40 <_vfiprintf_r+0x21c>
 8009b94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b98:	f04f 0901 	mov.w	r9, #1
 8009b9c:	4623      	mov	r3, r4
 8009b9e:	469a      	mov	sl, r3
 8009ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ba4:	b10a      	cbz	r2, 8009baa <_vfiprintf_r+0x86>
 8009ba6:	2a25      	cmp	r2, #37	@ 0x25
 8009ba8:	d1f9      	bne.n	8009b9e <_vfiprintf_r+0x7a>
 8009baa:	ebba 0b04 	subs.w	fp, sl, r4
 8009bae:	d00b      	beq.n	8009bc8 <_vfiprintf_r+0xa4>
 8009bb0:	465b      	mov	r3, fp
 8009bb2:	4622      	mov	r2, r4
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f7ff ffa2 	bl	8009b00 <__sfputs_r>
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	f000 80a7 	beq.w	8009d10 <_vfiprintf_r+0x1ec>
 8009bc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bc4:	445a      	add	r2, fp
 8009bc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 809f 	beq.w	8009d10 <_vfiprintf_r+0x1ec>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bdc:	f10a 0a01 	add.w	sl, sl, #1
 8009be0:	9304      	str	r3, [sp, #16]
 8009be2:	9307      	str	r3, [sp, #28]
 8009be4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009be8:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bea:	4654      	mov	r4, sl
 8009bec:	2205      	movs	r2, #5
 8009bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf2:	4853      	ldr	r0, [pc, #332]	@ (8009d40 <_vfiprintf_r+0x21c>)
 8009bf4:	f7f6 faec 	bl	80001d0 <memchr>
 8009bf8:	9a04      	ldr	r2, [sp, #16]
 8009bfa:	b9d8      	cbnz	r0, 8009c34 <_vfiprintf_r+0x110>
 8009bfc:	06d1      	lsls	r1, r2, #27
 8009bfe:	bf44      	itt	mi
 8009c00:	2320      	movmi	r3, #32
 8009c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c06:	0713      	lsls	r3, r2, #28
 8009c08:	bf44      	itt	mi
 8009c0a:	232b      	movmi	r3, #43	@ 0x2b
 8009c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c10:	f89a 3000 	ldrb.w	r3, [sl]
 8009c14:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c16:	d015      	beq.n	8009c44 <_vfiprintf_r+0x120>
 8009c18:	9a07      	ldr	r2, [sp, #28]
 8009c1a:	4654      	mov	r4, sl
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	f04f 0c0a 	mov.w	ip, #10
 8009c22:	4621      	mov	r1, r4
 8009c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c28:	3b30      	subs	r3, #48	@ 0x30
 8009c2a:	2b09      	cmp	r3, #9
 8009c2c:	d94b      	bls.n	8009cc6 <_vfiprintf_r+0x1a2>
 8009c2e:	b1b0      	cbz	r0, 8009c5e <_vfiprintf_r+0x13a>
 8009c30:	9207      	str	r2, [sp, #28]
 8009c32:	e014      	b.n	8009c5e <_vfiprintf_r+0x13a>
 8009c34:	eba0 0308 	sub.w	r3, r0, r8
 8009c38:	fa09 f303 	lsl.w	r3, r9, r3
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	9304      	str	r3, [sp, #16]
 8009c40:	46a2      	mov	sl, r4
 8009c42:	e7d2      	b.n	8009bea <_vfiprintf_r+0xc6>
 8009c44:	9b03      	ldr	r3, [sp, #12]
 8009c46:	1d19      	adds	r1, r3, #4
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	9103      	str	r1, [sp, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	bfbb      	ittet	lt
 8009c50:	425b      	neglt	r3, r3
 8009c52:	f042 0202 	orrlt.w	r2, r2, #2
 8009c56:	9307      	strge	r3, [sp, #28]
 8009c58:	9307      	strlt	r3, [sp, #28]
 8009c5a:	bfb8      	it	lt
 8009c5c:	9204      	strlt	r2, [sp, #16]
 8009c5e:	7823      	ldrb	r3, [r4, #0]
 8009c60:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c62:	d10a      	bne.n	8009c7a <_vfiprintf_r+0x156>
 8009c64:	7863      	ldrb	r3, [r4, #1]
 8009c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c68:	d132      	bne.n	8009cd0 <_vfiprintf_r+0x1ac>
 8009c6a:	9b03      	ldr	r3, [sp, #12]
 8009c6c:	1d1a      	adds	r2, r3, #4
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	9203      	str	r2, [sp, #12]
 8009c72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c76:	3402      	adds	r4, #2
 8009c78:	9305      	str	r3, [sp, #20]
 8009c7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d50 <_vfiprintf_r+0x22c>
 8009c7e:	7821      	ldrb	r1, [r4, #0]
 8009c80:	2203      	movs	r2, #3
 8009c82:	4650      	mov	r0, sl
 8009c84:	f7f6 faa4 	bl	80001d0 <memchr>
 8009c88:	b138      	cbz	r0, 8009c9a <_vfiprintf_r+0x176>
 8009c8a:	9b04      	ldr	r3, [sp, #16]
 8009c8c:	eba0 000a 	sub.w	r0, r0, sl
 8009c90:	2240      	movs	r2, #64	@ 0x40
 8009c92:	4082      	lsls	r2, r0
 8009c94:	4313      	orrs	r3, r2
 8009c96:	3401      	adds	r4, #1
 8009c98:	9304      	str	r3, [sp, #16]
 8009c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c9e:	4829      	ldr	r0, [pc, #164]	@ (8009d44 <_vfiprintf_r+0x220>)
 8009ca0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ca4:	2206      	movs	r2, #6
 8009ca6:	f7f6 fa93 	bl	80001d0 <memchr>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	d03f      	beq.n	8009d2e <_vfiprintf_r+0x20a>
 8009cae:	4b26      	ldr	r3, [pc, #152]	@ (8009d48 <_vfiprintf_r+0x224>)
 8009cb0:	bb1b      	cbnz	r3, 8009cfa <_vfiprintf_r+0x1d6>
 8009cb2:	9b03      	ldr	r3, [sp, #12]
 8009cb4:	3307      	adds	r3, #7
 8009cb6:	f023 0307 	bic.w	r3, r3, #7
 8009cba:	3308      	adds	r3, #8
 8009cbc:	9303      	str	r3, [sp, #12]
 8009cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc0:	443b      	add	r3, r7
 8009cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cc4:	e76a      	b.n	8009b9c <_vfiprintf_r+0x78>
 8009cc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cca:	460c      	mov	r4, r1
 8009ccc:	2001      	movs	r0, #1
 8009cce:	e7a8      	b.n	8009c22 <_vfiprintf_r+0xfe>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	3401      	adds	r4, #1
 8009cd4:	9305      	str	r3, [sp, #20]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	f04f 0c0a 	mov.w	ip, #10
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ce2:	3a30      	subs	r2, #48	@ 0x30
 8009ce4:	2a09      	cmp	r2, #9
 8009ce6:	d903      	bls.n	8009cf0 <_vfiprintf_r+0x1cc>
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d0c6      	beq.n	8009c7a <_vfiprintf_r+0x156>
 8009cec:	9105      	str	r1, [sp, #20]
 8009cee:	e7c4      	b.n	8009c7a <_vfiprintf_r+0x156>
 8009cf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e7f0      	b.n	8009cdc <_vfiprintf_r+0x1b8>
 8009cfa:	ab03      	add	r3, sp, #12
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	462a      	mov	r2, r5
 8009d00:	4b12      	ldr	r3, [pc, #72]	@ (8009d4c <_vfiprintf_r+0x228>)
 8009d02:	a904      	add	r1, sp, #16
 8009d04:	4630      	mov	r0, r6
 8009d06:	f7fc fd25 	bl	8006754 <_printf_float>
 8009d0a:	4607      	mov	r7, r0
 8009d0c:	1c78      	adds	r0, r7, #1
 8009d0e:	d1d6      	bne.n	8009cbe <_vfiprintf_r+0x19a>
 8009d10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d12:	07d9      	lsls	r1, r3, #31
 8009d14:	d405      	bmi.n	8009d22 <_vfiprintf_r+0x1fe>
 8009d16:	89ab      	ldrh	r3, [r5, #12]
 8009d18:	059a      	lsls	r2, r3, #22
 8009d1a:	d402      	bmi.n	8009d22 <_vfiprintf_r+0x1fe>
 8009d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d1e:	f7fd fd01 	bl	8007724 <__retarget_lock_release_recursive>
 8009d22:	89ab      	ldrh	r3, [r5, #12]
 8009d24:	065b      	lsls	r3, r3, #25
 8009d26:	f53f af1f 	bmi.w	8009b68 <_vfiprintf_r+0x44>
 8009d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d2c:	e71e      	b.n	8009b6c <_vfiprintf_r+0x48>
 8009d2e:	ab03      	add	r3, sp, #12
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	462a      	mov	r2, r5
 8009d34:	4b05      	ldr	r3, [pc, #20]	@ (8009d4c <_vfiprintf_r+0x228>)
 8009d36:	a904      	add	r1, sp, #16
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7fc ffa3 	bl	8006c84 <_printf_i>
 8009d3e:	e7e4      	b.n	8009d0a <_vfiprintf_r+0x1e6>
 8009d40:	0800a343 	.word	0x0800a343
 8009d44:	0800a34d 	.word	0x0800a34d
 8009d48:	08006755 	.word	0x08006755
 8009d4c:	08009b01 	.word	0x08009b01
 8009d50:	0800a349 	.word	0x0800a349

08009d54 <__swbuf_r>:
 8009d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d56:	460e      	mov	r6, r1
 8009d58:	4614      	mov	r4, r2
 8009d5a:	4605      	mov	r5, r0
 8009d5c:	b118      	cbz	r0, 8009d66 <__swbuf_r+0x12>
 8009d5e:	6a03      	ldr	r3, [r0, #32]
 8009d60:	b90b      	cbnz	r3, 8009d66 <__swbuf_r+0x12>
 8009d62:	f7fd fb47 	bl	80073f4 <__sinit>
 8009d66:	69a3      	ldr	r3, [r4, #24]
 8009d68:	60a3      	str	r3, [r4, #8]
 8009d6a:	89a3      	ldrh	r3, [r4, #12]
 8009d6c:	071a      	lsls	r2, r3, #28
 8009d6e:	d501      	bpl.n	8009d74 <__swbuf_r+0x20>
 8009d70:	6923      	ldr	r3, [r4, #16]
 8009d72:	b943      	cbnz	r3, 8009d86 <__swbuf_r+0x32>
 8009d74:	4621      	mov	r1, r4
 8009d76:	4628      	mov	r0, r5
 8009d78:	f000 f82a 	bl	8009dd0 <__swsetup_r>
 8009d7c:	b118      	cbz	r0, 8009d86 <__swbuf_r+0x32>
 8009d7e:	f04f 37ff 	mov.w	r7, #4294967295
 8009d82:	4638      	mov	r0, r7
 8009d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	6922      	ldr	r2, [r4, #16]
 8009d8a:	1a98      	subs	r0, r3, r2
 8009d8c:	6963      	ldr	r3, [r4, #20]
 8009d8e:	b2f6      	uxtb	r6, r6
 8009d90:	4283      	cmp	r3, r0
 8009d92:	4637      	mov	r7, r6
 8009d94:	dc05      	bgt.n	8009da2 <__swbuf_r+0x4e>
 8009d96:	4621      	mov	r1, r4
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f7ff fdfd 	bl	8009998 <_fflush_r>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d1ed      	bne.n	8009d7e <__swbuf_r+0x2a>
 8009da2:	68a3      	ldr	r3, [r4, #8]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	60a3      	str	r3, [r4, #8]
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	6022      	str	r2, [r4, #0]
 8009dae:	701e      	strb	r6, [r3, #0]
 8009db0:	6962      	ldr	r2, [r4, #20]
 8009db2:	1c43      	adds	r3, r0, #1
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d004      	beq.n	8009dc2 <__swbuf_r+0x6e>
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	07db      	lsls	r3, r3, #31
 8009dbc:	d5e1      	bpl.n	8009d82 <__swbuf_r+0x2e>
 8009dbe:	2e0a      	cmp	r6, #10
 8009dc0:	d1df      	bne.n	8009d82 <__swbuf_r+0x2e>
 8009dc2:	4621      	mov	r1, r4
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	f7ff fde7 	bl	8009998 <_fflush_r>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d0d9      	beq.n	8009d82 <__swbuf_r+0x2e>
 8009dce:	e7d6      	b.n	8009d7e <__swbuf_r+0x2a>

08009dd0 <__swsetup_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4b29      	ldr	r3, [pc, #164]	@ (8009e78 <__swsetup_r+0xa8>)
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	6818      	ldr	r0, [r3, #0]
 8009dd8:	460c      	mov	r4, r1
 8009dda:	b118      	cbz	r0, 8009de4 <__swsetup_r+0x14>
 8009ddc:	6a03      	ldr	r3, [r0, #32]
 8009dde:	b90b      	cbnz	r3, 8009de4 <__swsetup_r+0x14>
 8009de0:	f7fd fb08 	bl	80073f4 <__sinit>
 8009de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de8:	0719      	lsls	r1, r3, #28
 8009dea:	d422      	bmi.n	8009e32 <__swsetup_r+0x62>
 8009dec:	06da      	lsls	r2, r3, #27
 8009dee:	d407      	bmi.n	8009e00 <__swsetup_r+0x30>
 8009df0:	2209      	movs	r2, #9
 8009df2:	602a      	str	r2, [r5, #0]
 8009df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfe:	e033      	b.n	8009e68 <__swsetup_r+0x98>
 8009e00:	0758      	lsls	r0, r3, #29
 8009e02:	d512      	bpl.n	8009e2a <__swsetup_r+0x5a>
 8009e04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e06:	b141      	cbz	r1, 8009e1a <__swsetup_r+0x4a>
 8009e08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e0c:	4299      	cmp	r1, r3
 8009e0e:	d002      	beq.n	8009e16 <__swsetup_r+0x46>
 8009e10:	4628      	mov	r0, r5
 8009e12:	f7fe fb1d 	bl	8008450 <_free_r>
 8009e16:	2300      	movs	r3, #0
 8009e18:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e20:	81a3      	strh	r3, [r4, #12]
 8009e22:	2300      	movs	r3, #0
 8009e24:	6063      	str	r3, [r4, #4]
 8009e26:	6923      	ldr	r3, [r4, #16]
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	f043 0308 	orr.w	r3, r3, #8
 8009e30:	81a3      	strh	r3, [r4, #12]
 8009e32:	6923      	ldr	r3, [r4, #16]
 8009e34:	b94b      	cbnz	r3, 8009e4a <__swsetup_r+0x7a>
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e40:	d003      	beq.n	8009e4a <__swsetup_r+0x7a>
 8009e42:	4621      	mov	r1, r4
 8009e44:	4628      	mov	r0, r5
 8009e46:	f000 f88b 	bl	8009f60 <__smakebuf_r>
 8009e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e4e:	f013 0201 	ands.w	r2, r3, #1
 8009e52:	d00a      	beq.n	8009e6a <__swsetup_r+0x9a>
 8009e54:	2200      	movs	r2, #0
 8009e56:	60a2      	str	r2, [r4, #8]
 8009e58:	6962      	ldr	r2, [r4, #20]
 8009e5a:	4252      	negs	r2, r2
 8009e5c:	61a2      	str	r2, [r4, #24]
 8009e5e:	6922      	ldr	r2, [r4, #16]
 8009e60:	b942      	cbnz	r2, 8009e74 <__swsetup_r+0xa4>
 8009e62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e66:	d1c5      	bne.n	8009df4 <__swsetup_r+0x24>
 8009e68:	bd38      	pop	{r3, r4, r5, pc}
 8009e6a:	0799      	lsls	r1, r3, #30
 8009e6c:	bf58      	it	pl
 8009e6e:	6962      	ldrpl	r2, [r4, #20]
 8009e70:	60a2      	str	r2, [r4, #8]
 8009e72:	e7f4      	b.n	8009e5e <__swsetup_r+0x8e>
 8009e74:	2000      	movs	r0, #0
 8009e76:	e7f7      	b.n	8009e68 <__swsetup_r+0x98>
 8009e78:	20000268 	.word	0x20000268

08009e7c <_raise_r>:
 8009e7c:	291f      	cmp	r1, #31
 8009e7e:	b538      	push	{r3, r4, r5, lr}
 8009e80:	4605      	mov	r5, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	d904      	bls.n	8009e90 <_raise_r+0x14>
 8009e86:	2316      	movs	r3, #22
 8009e88:	6003      	str	r3, [r0, #0]
 8009e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}
 8009e90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e92:	b112      	cbz	r2, 8009e9a <_raise_r+0x1e>
 8009e94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e98:	b94b      	cbnz	r3, 8009eae <_raise_r+0x32>
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	f000 f830 	bl	8009f00 <_getpid_r>
 8009ea0:	4622      	mov	r2, r4
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eaa:	f000 b817 	b.w	8009edc <_kill_r>
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d00a      	beq.n	8009ec8 <_raise_r+0x4c>
 8009eb2:	1c59      	adds	r1, r3, #1
 8009eb4:	d103      	bne.n	8009ebe <_raise_r+0x42>
 8009eb6:	2316      	movs	r3, #22
 8009eb8:	6003      	str	r3, [r0, #0]
 8009eba:	2001      	movs	r0, #1
 8009ebc:	e7e7      	b.n	8009e8e <_raise_r+0x12>
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	4798      	blx	r3
 8009ec8:	2000      	movs	r0, #0
 8009eca:	e7e0      	b.n	8009e8e <_raise_r+0x12>

08009ecc <raise>:
 8009ecc:	4b02      	ldr	r3, [pc, #8]	@ (8009ed8 <raise+0xc>)
 8009ece:	4601      	mov	r1, r0
 8009ed0:	6818      	ldr	r0, [r3, #0]
 8009ed2:	f7ff bfd3 	b.w	8009e7c <_raise_r>
 8009ed6:	bf00      	nop
 8009ed8:	20000268 	.word	0x20000268

08009edc <_kill_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d07      	ldr	r5, [pc, #28]	@ (8009efc <_kill_r+0x20>)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	602b      	str	r3, [r5, #0]
 8009eea:	f7f8 f881 	bl	8001ff0 <_kill>
 8009eee:	1c43      	adds	r3, r0, #1
 8009ef0:	d102      	bne.n	8009ef8 <_kill_r+0x1c>
 8009ef2:	682b      	ldr	r3, [r5, #0]
 8009ef4:	b103      	cbz	r3, 8009ef8 <_kill_r+0x1c>
 8009ef6:	6023      	str	r3, [r4, #0]
 8009ef8:	bd38      	pop	{r3, r4, r5, pc}
 8009efa:	bf00      	nop
 8009efc:	20000734 	.word	0x20000734

08009f00 <_getpid_r>:
 8009f00:	f7f8 b86e 	b.w	8001fe0 <_getpid>

08009f04 <_malloc_usable_size_r>:
 8009f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f08:	1f18      	subs	r0, r3, #4
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	bfbc      	itt	lt
 8009f0e:	580b      	ldrlt	r3, [r1, r0]
 8009f10:	18c0      	addlt	r0, r0, r3
 8009f12:	4770      	bx	lr

08009f14 <__swhatbuf_r>:
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	460c      	mov	r4, r1
 8009f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	b096      	sub	sp, #88	@ 0x58
 8009f20:	4615      	mov	r5, r2
 8009f22:	461e      	mov	r6, r3
 8009f24:	da0d      	bge.n	8009f42 <__swhatbuf_r+0x2e>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f2c:	f04f 0100 	mov.w	r1, #0
 8009f30:	bf14      	ite	ne
 8009f32:	2340      	movne	r3, #64	@ 0x40
 8009f34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f38:	2000      	movs	r0, #0
 8009f3a:	6031      	str	r1, [r6, #0]
 8009f3c:	602b      	str	r3, [r5, #0]
 8009f3e:	b016      	add	sp, #88	@ 0x58
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
 8009f42:	466a      	mov	r2, sp
 8009f44:	f000 f848 	bl	8009fd8 <_fstat_r>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	dbec      	blt.n	8009f26 <__swhatbuf_r+0x12>
 8009f4c:	9901      	ldr	r1, [sp, #4]
 8009f4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f56:	4259      	negs	r1, r3
 8009f58:	4159      	adcs	r1, r3
 8009f5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f5e:	e7eb      	b.n	8009f38 <__swhatbuf_r+0x24>

08009f60 <__smakebuf_r>:
 8009f60:	898b      	ldrh	r3, [r1, #12]
 8009f62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f64:	079d      	lsls	r5, r3, #30
 8009f66:	4606      	mov	r6, r0
 8009f68:	460c      	mov	r4, r1
 8009f6a:	d507      	bpl.n	8009f7c <__smakebuf_r+0x1c>
 8009f6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	6123      	str	r3, [r4, #16]
 8009f74:	2301      	movs	r3, #1
 8009f76:	6163      	str	r3, [r4, #20]
 8009f78:	b003      	add	sp, #12
 8009f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f7c:	ab01      	add	r3, sp, #4
 8009f7e:	466a      	mov	r2, sp
 8009f80:	f7ff ffc8 	bl	8009f14 <__swhatbuf_r>
 8009f84:	9f00      	ldr	r7, [sp, #0]
 8009f86:	4605      	mov	r5, r0
 8009f88:	4639      	mov	r1, r7
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f7fb fcae 	bl	80058ec <_malloc_r>
 8009f90:	b948      	cbnz	r0, 8009fa6 <__smakebuf_r+0x46>
 8009f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f96:	059a      	lsls	r2, r3, #22
 8009f98:	d4ee      	bmi.n	8009f78 <__smakebuf_r+0x18>
 8009f9a:	f023 0303 	bic.w	r3, r3, #3
 8009f9e:	f043 0302 	orr.w	r3, r3, #2
 8009fa2:	81a3      	strh	r3, [r4, #12]
 8009fa4:	e7e2      	b.n	8009f6c <__smakebuf_r+0xc>
 8009fa6:	89a3      	ldrh	r3, [r4, #12]
 8009fa8:	6020      	str	r0, [r4, #0]
 8009faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fae:	81a3      	strh	r3, [r4, #12]
 8009fb0:	9b01      	ldr	r3, [sp, #4]
 8009fb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fb6:	b15b      	cbz	r3, 8009fd0 <__smakebuf_r+0x70>
 8009fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f000 f81d 	bl	8009ffc <_isatty_r>
 8009fc2:	b128      	cbz	r0, 8009fd0 <__smakebuf_r+0x70>
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	f023 0303 	bic.w	r3, r3, #3
 8009fca:	f043 0301 	orr.w	r3, r3, #1
 8009fce:	81a3      	strh	r3, [r4, #12]
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	431d      	orrs	r5, r3
 8009fd4:	81a5      	strh	r5, [r4, #12]
 8009fd6:	e7cf      	b.n	8009f78 <__smakebuf_r+0x18>

08009fd8 <_fstat_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4d07      	ldr	r5, [pc, #28]	@ (8009ff8 <_fstat_r+0x20>)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	4604      	mov	r4, r0
 8009fe0:	4608      	mov	r0, r1
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	602b      	str	r3, [r5, #0]
 8009fe6:	f7f8 f847 	bl	8002078 <_fstat>
 8009fea:	1c43      	adds	r3, r0, #1
 8009fec:	d102      	bne.n	8009ff4 <_fstat_r+0x1c>
 8009fee:	682b      	ldr	r3, [r5, #0]
 8009ff0:	b103      	cbz	r3, 8009ff4 <_fstat_r+0x1c>
 8009ff2:	6023      	str	r3, [r4, #0]
 8009ff4:	bd38      	pop	{r3, r4, r5, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20000734 	.word	0x20000734

08009ffc <_isatty_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4d06      	ldr	r5, [pc, #24]	@ (800a018 <_isatty_r+0x1c>)
 800a000:	2300      	movs	r3, #0
 800a002:	4604      	mov	r4, r0
 800a004:	4608      	mov	r0, r1
 800a006:	602b      	str	r3, [r5, #0]
 800a008:	f7f8 f846 	bl	8002098 <_isatty>
 800a00c:	1c43      	adds	r3, r0, #1
 800a00e:	d102      	bne.n	800a016 <_isatty_r+0x1a>
 800a010:	682b      	ldr	r3, [r5, #0]
 800a012:	b103      	cbz	r3, 800a016 <_isatty_r+0x1a>
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	bd38      	pop	{r3, r4, r5, pc}
 800a018:	20000734 	.word	0x20000734

0800a01c <_init>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	bf00      	nop
 800a020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a022:	bc08      	pop	{r3}
 800a024:	469e      	mov	lr, r3
 800a026:	4770      	bx	lr

0800a028 <_fini>:
 800a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02a:	bf00      	nop
 800a02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02e:	bc08      	pop	{r3}
 800a030:	469e      	mov	lr, r3
 800a032:	4770      	bx	lr
