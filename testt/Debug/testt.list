
testt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800b000  0800b000  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b564  0800b564  0000d31c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b564  0800b564  0000c564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b56c  0800b56c  0000d31c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b56c  0800b56c  0000c56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b570  0800b570  0000c570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  0800b574  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d31c  2**0
                  CONTENTS
 10 .bss          000004c8  2000031c  2000031c  0000d31c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007e4  200007e4  0000d31c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d31c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015369  00000000  00000000  0000d34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d72  00000000  00000000  000226b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  00025428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee4  00000000  00000000  00026720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023dbb  00000000  00000000  00027604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173fe  00000000  00000000  0004b3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d38f1  00000000  00000000  000627bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001360ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066e8  00000000  00000000  001360f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0013c7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000031c 	.word	0x2000031c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800afe4 	.word	0x0800afe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000320 	.word	0x20000320
 80001cc:	0800afe4 	.word	0x0800afe4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <shift_out>:
    // HAL_GPIO_WritePin(TXS_OE3_GPIO_Port,TXS_OE3_Pin,GPIO_PIN_SET);
    // HAL_GPIO_WritePin(TXS_OE4_GPIO_Port,TXS_OE4_Pin,GPIO_PIN_SET);
}

void shift_out(uint8_t num, uint8_t *data)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i =0; i < 8; i++ )
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e058      	b.n	80010e4 <shift_out+0xc4>
    {
        HAL_GPIO_WritePin(PIN_SCKx[num].Port_x,PIN_SCKx[num].PIN_x,GPIO_PIN_RESET);   // Clock LOW
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4a2f      	ldr	r2, [pc, #188]	@ (80010f4 <shift_out+0xd4>)
 8001036:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4a2d      	ldr	r2, [pc, #180]	@ (80010f4 <shift_out+0xd4>)
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4413      	add	r3, r2
 8001042:	889b      	ldrh	r3, [r3, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	f001 fcf6 	bl	8002a38 <HAL_GPIO_WritePin>
        delay_us(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f000 fd83 	bl	8001b58 <delay_us>
        // Data
        HAL_GPIO_WritePin(PIN_SIx[num/3].Port_x,PIN_SIx[num/3].PIN_x, (data[i]));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4a28      	ldr	r2, [pc, #160]	@ (80010f8 <shift_out+0xd8>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	085b      	lsrs	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	4b26      	ldr	r3, [pc, #152]	@ (80010fc <shift_out+0xdc>)
 8001062:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4a23      	ldr	r2, [pc, #140]	@ (80010f8 <shift_out+0xd8>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	085b      	lsrs	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4a22      	ldr	r2, [pc, #136]	@ (80010fc <shift_out+0xdc>)
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	8899      	ldrh	r1, [r3, #4]
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	4413      	add	r3, r2
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	f001 fcd8 	bl	8002a38 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PIN_SIx[num/3].Port_x,PIN_SIx[num/3].PIN_x, (data[i]));
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4a1b      	ldr	r2, [pc, #108]	@ (80010f8 <shift_out+0xd8>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	085b      	lsrs	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <shift_out+0xdc>)
 8001098:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4a16      	ldr	r2, [pc, #88]	@ (80010f8 <shift_out+0xd8>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	085b      	lsrs	r3, r3, #1
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <shift_out+0xdc>)
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	8899      	ldrh	r1, [r3, #4]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	f001 fcbd 	bl	8002a38 <HAL_GPIO_WritePin>
        delay_us(1);
 80010be:	2001      	movs	r0, #1
 80010c0:	f000 fd4a 	bl	8001b58 <delay_us>
        HAL_GPIO_WritePin(PIN_SCKx[num].Port_x,PIN_SCKx[num].PIN_x,GPIO_PIN_SET);   // Clock HIGH
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <shift_out+0xd4>)
 80010c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <shift_out+0xd4>)
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	889b      	ldrh	r3, [r3, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	4619      	mov	r1, r3
 80010da:	f001 fcad 	bl	8002a38 <HAL_GPIO_WritePin>
    for(uint8_t i =0; i < 8; i++ )
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	3301      	adds	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b07      	cmp	r3, #7
 80010e8:	d9a3      	bls.n	8001032 <shift_out+0x12>
    }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	aaaaaaab 	.word	0xaaaaaaab
 80010fc:	200000c0 	.word	0x200000c0

08001100 <Write_data>:

void Write_data(uint8_t num, uint8_t *data) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
    // Enable Latch
    uint8_t data_array[8];
    memcpy(data_array,data,sizeof(data_array));
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	6810      	ldr	r0, [r2, #0]
 8001114:	6851      	ldr	r1, [r2, #4]
 8001116:	c303      	stmia	r3!, {r0, r1}
    HAL_GPIO_WritePin(PIN_RCKx[num].Port_x,PIN_RCKx[num].PIN_x,GPIO_PIN_RESET);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	4a13      	ldr	r2, [pc, #76]	@ (8001168 <Write_data+0x68>)
 800111c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4a11      	ldr	r2, [pc, #68]	@ (8001168 <Write_data+0x68>)
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	889b      	ldrh	r3, [r3, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	f001 fc83 	bl	8002a38 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f001 f820 	bl	8002178 <HAL_Delay>
    shift_out(num,data_array);
 8001138:	f107 0208 	add.w	r2, r7, #8
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff6d 	bl	8001020 <shift_out>
    HAL_GPIO_WritePin(PIN_RCKx[num].Port_x,PIN_RCKx[num].PIN_x,GPIO_PIN_SET);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4a07      	ldr	r2, [pc, #28]	@ (8001168 <Write_data+0x68>)
 800114a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <Write_data+0x68>)
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	889b      	ldrh	r3, [r3, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	4619      	mov	r1, r3
 800115c:	f001 fc6c 	bl	8002a38 <HAL_GPIO_WritePin>
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000060 	.word	0x20000060

0800116c <Latch_IC_begin>:
/**
 * @brief Control 74HC164D , the output of 74HC164D is the OE and LE of 74HC164D
 * 
 */
void Latch_IC_begin(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	// Disable Latch IC Output IC test
	// for(uint8_t i = 0; i < 3; i++) {
	// 	HAL_GPIO_WritePin(PIN_OEx[i].Port_x,PIN_OEx[i].PIN_x,GPIO_PIN_SET);
	// }
    // HAL_GPIO_WritePin(PIN_SCKx[num].Port_x,PIN_SCKx[num].PIN_x,GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);   // Clock LOW
 8001170:	2200      	movs	r2, #0
 8001172:	2101      	movs	r1, #1
 8001174:	480e      	ldr	r0, [pc, #56]	@ (80011b0 <Latch_IC_begin+0x44>)
 8001176:	f001 fc5f 	bl	8002a38 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(PIN_TXS_OEx[0].Port_x,PIN_TXS_OEx[0].PIN_x,GPIO_PIN_RESET);
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <Latch_IC_begin+0x48>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a0d      	ldr	r2, [pc, #52]	@ (80011b4 <Latch_IC_begin+0x48>)
 8001180:	8891      	ldrh	r1, [r2, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f001 fc57 	bl	8002a38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_TXS_OEx[1].Port_x,PIN_TXS_OEx[1].PIN_x,GPIO_PIN_RESET);
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <Latch_IC_begin+0x48>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4a09      	ldr	r2, [pc, #36]	@ (80011b4 <Latch_IC_begin+0x48>)
 8001190:	8991      	ldrh	r1, [r2, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fc4f 	bl	8002a38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_TXS_OEx[2].Port_x,PIN_TXS_OEx[2].PIN_x,GPIO_PIN_RESET);
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <Latch_IC_begin+0x48>)
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	4a05      	ldr	r2, [pc, #20]	@ (80011b4 <Latch_IC_begin+0x48>)
 80011a0:	8a91      	ldrh	r1, [r2, #20]
 80011a2:	2200      	movs	r2, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 fc47 	bl	8002a38 <HAL_GPIO_WritePin>

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020400 	.word	0x40020400
 80011b4:	200000e0 	.word	0x200000e0

080011b8 <compute_outputLatchIC>:

#define NUM_PIN_LATCH_IC_CONTROL  4 /* each latch IC control 4 pin of IC test */
#define NUM_PIN_IC_TEST           20

/* each Latch IC control 4 pins IC test */
void compute_outputLatchIC(uint8_t *dataIC_test, uint8_t (*data_out_latchIC)[numPin]) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
    uint8_t p_high; /* position HIGH */
    uint8_t p_low;  /* position LOW */
    uint8_t p_pin;  /* position IC test correspond to Latch IC */
    uint8_t Latch_x;
    /* clear all data latch ic */
    for (uint8_t latchIC = 0; latchIC < 5; latchIC++) {
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	e00b      	b.n	80011e0 <compute_outputLatchIC+0x28>
        memset(data_out_latchIC[latchIC],0,numPin);
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	2208      	movs	r2, #8
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f007 f932 	bl	800843e <memset>
    for (uint8_t latchIC = 0; latchIC < 5; latchIC++) {
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	3301      	adds	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d9f0      	bls.n	80011c8 <compute_outputLatchIC+0x10>
    }

    for (uint8_t latchIC_x = 0; latchIC_x < NUM_PIN_IC_TEST; latchIC_x++) {
 80011e6:	2300      	movs	r3, #0
 80011e8:	73bb      	strb	r3, [r7, #14]
 80011ea:	e04b      	b.n	8001284 <compute_outputLatchIC+0xcc>
        Latch_x = latchIC_x / NUM_PIN_LATCH_IC_CONTROL;
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	737b      	strb	r3, [r7, #13]
        p_pin = latchIC_x % NUM_PIN_LATCH_IC_CONTROL;
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	733b      	strb	r3, [r7, #12]
        p_high = p_pin * 2;
 80011fa:	7b3b      	ldrb	r3, [r7, #12]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	72fb      	strb	r3, [r7, #11]
        p_low = p_high + 1;
 8001200:	7afb      	ldrb	r3, [r7, #11]
 8001202:	3301      	adds	r3, #1
 8001204:	72bb      	strb	r3, [r7, #10]
        switch (dataIC_test[latchIC_x]) {
 8001206:	7bbb      	ldrb	r3, [r7, #14]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d024      	beq.n	800125c <compute_outputLatchIC+0xa4>
 8001212:	2b02      	cmp	r3, #2
 8001214:	dc32      	bgt.n	800127c <compute_outputLatchIC+0xc4>
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <compute_outputLatchIC+0x66>
 800121a:	2b01      	cmp	r3, #1
            } break;
            case 2 : {
                data_out_latchIC[Latch_x][p_high] |= 1u;
            } break;

            default : break;
 800121c:	e02e      	b.n	800127c <compute_outputLatchIC+0xc4>
                data_out_latchIC[Latch_x][p_high] |= 1u;
 800121e:	7b7b      	ldrb	r3, [r7, #13]
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	441a      	add	r2, r3
 8001226:	7afb      	ldrb	r3, [r7, #11]
 8001228:	5cd1      	ldrb	r1, [r2, r3]
 800122a:	7b7b      	ldrb	r3, [r7, #13]
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	441a      	add	r2, r3
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	f041 0101 	orr.w	r1, r1, #1
 8001238:	b2c9      	uxtb	r1, r1
 800123a:	54d1      	strb	r1, [r2, r3]
                data_out_latchIC[Latch_x][p_low] |= 1u;
 800123c:	7b7b      	ldrb	r3, [r7, #13]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	441a      	add	r2, r3
 8001244:	7abb      	ldrb	r3, [r7, #10]
 8001246:	5cd1      	ldrb	r1, [r2, r3]
 8001248:	7b7b      	ldrb	r3, [r7, #13]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	441a      	add	r2, r3
 8001250:	7abb      	ldrb	r3, [r7, #10]
 8001252:	f041 0101 	orr.w	r1, r1, #1
 8001256:	b2c9      	uxtb	r1, r1
 8001258:	54d1      	strb	r1, [r2, r3]
            } break;
 800125a:	e010      	b.n	800127e <compute_outputLatchIC+0xc6>
                data_out_latchIC[Latch_x][p_high] |= 1u;
 800125c:	7b7b      	ldrb	r3, [r7, #13]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	441a      	add	r2, r3
 8001264:	7afb      	ldrb	r3, [r7, #11]
 8001266:	5cd1      	ldrb	r1, [r2, r3]
 8001268:	7b7b      	ldrb	r3, [r7, #13]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	441a      	add	r2, r3
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	f041 0101 	orr.w	r1, r1, #1
 8001276:	b2c9      	uxtb	r1, r1
 8001278:	54d1      	strb	r1, [r2, r3]
            } break;
 800127a:	e000      	b.n	800127e <compute_outputLatchIC+0xc6>
            default : break;
 800127c:	bf00      	nop
    for (uint8_t latchIC_x = 0; latchIC_x < NUM_PIN_IC_TEST; latchIC_x++) {
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	3301      	adds	r3, #1
 8001282:	73bb      	strb	r3, [r7, #14]
 8001284:	7bbb      	ldrb	r3, [r7, #14]
 8001286:	2b13      	cmp	r3, #19
 8001288:	d9b0      	bls.n	80011ec <compute_outputLatchIC+0x34>
        }

    }
    
}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <WritePin_ICTest>:


// Control the pin IO TEST
void WritePin_ICTest(uint8_t *dataPin) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    compute_outputLatchIC(dataPin,output_latch);
 800129c:	4920      	ldr	r1, [pc, #128]	@ (8001320 <WritePin_ICTest+0x8c>)
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ff8a 	bl	80011b8 <compute_outputLatchIC>
    /* reverse data */
    for (int ic = 0; ic < numIC; ++ic) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	e01c      	b.n	80012e4 <WritePin_ICTest+0x50>
        for (int p = 0; p < numPin; ++p) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	e013      	b.n	80012d8 <WritePin_ICTest+0x44>
            reversed_latch[ic][p] = output_latch[ic][numPin - 1 - p];
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	491a      	ldr	r1, [pc, #104]	@ (8001320 <WritePin_ICTest+0x8c>)
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	00d2      	lsls	r2, r2, #3
 80012bc:	440a      	add	r2, r1
 80012be:	4413      	add	r3, r2
 80012c0:	7819      	ldrb	r1, [r3, #0]
 80012c2:	4a18      	ldr	r2, [pc, #96]	@ (8001324 <WritePin_ICTest+0x90>)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	441a      	add	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4413      	add	r3, r2
 80012ce:	460a      	mov	r2, r1
 80012d0:	701a      	strb	r2, [r3, #0]
        for (int p = 0; p < numPin; ++p) {
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	3301      	adds	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	dde8      	ble.n	80012b0 <WritePin_ICTest+0x1c>
    for (int ic = 0; ic < numIC; ++ic) {
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	dddf      	ble.n	80012aa <WritePin_ICTest+0x16>
        }
    }
    for (uint8_t latch_x = 0; latch_x < 5; latch_x++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e00e      	b.n	800130e <WritePin_ICTest+0x7a>
        Write_data(latch_x,reversed_latch[latch_x]);
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <WritePin_ICTest+0x90>)
 80012f6:	441a      	add	r2, r3
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff feff 	bl	8001100 <Write_data>
        HAL_Delay(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f000 ff38 	bl	8002178 <HAL_Delay>
    for (uint8_t latch_x = 0; latch_x < 5; latch_x++) {
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	3301      	adds	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2b04      	cmp	r3, #4
 8001312:	d9ed      	bls.n	80012f0 <WritePin_ICTest+0x5c>
    }

}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000338 	.word	0x20000338
 8001324:	20000360 	.word	0x20000360

08001328 <WritePin_Ron>:
    WritePin_ICTest(data_float);
}



void WritePin_Ron(uint8_t *dataPin) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    // for (uint8_t latch_x = 6; latch_x < 9; latch_x++) {
    //     Write_data(latch_x,output_latch[latch_x]);
    // }
    Write_data(6,dataPin);
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	2006      	movs	r0, #6
 8001334:	f7ff fee4 	bl	8001100 <Write_data>
    Write_data(7,dataPin);
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	2007      	movs	r0, #7
 800133c:	f7ff fee0 	bl	8001100 <Write_data>
    Write_data(8,dataPin);
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	2008      	movs	r0, #8
 8001344:	f7ff fedc 	bl	8001100 <Write_data>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <WritePin_CurrentLeakage>:

void WritePin_CurrentLeakage(uint8_t *dataPin) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    Write_data(9,dataPin);
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	2009      	movs	r0, #9
 800135c:	f7ff fed0 	bl	8001100 <Write_data>
    Write_data(10,dataPin);
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	200a      	movs	r0, #10
 8001364:	f7ff fecc 	bl	8001100 <Write_data>
    Write_data(11,dataPin);
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	200b      	movs	r0, #11
 800136c:	f7ff fec8 	bl	8001100 <Write_data>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <Read_ADC_IC_test>:
        }
        dataPin[Pinx] = HAL_GPIO_ReadPin(PIN_SIGx[Pinx%8].Port_x,PIN_SIGx[Pinx%8].PIN_x);
    }
}

void Read_ADC_IC_test(ADS1115_t *pADS1115, uint8_t pin,float *data_buf) {
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	460b      	mov	r3, r1
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	72fb      	strb	r3, [r7, #11]
    /* disable all */
    uint8_t channel_adc;
    uint8_t index_pin;
    for (uint8_t i = 0; i < 3; i++) {
 8001386:	2300      	movs	r3, #0
 8001388:	75bb      	strb	r3, [r7, #22]
 800138a:	e00f      	b.n	80013ac <Read_ADC_IC_test+0x34>
        HAL_GPIO_WritePin(PIN_ADC_ENx[i].Port_x,PIN_ADC_ENx[i].PIN_x,GPIO_PIN_SET);
 800138c:	7dbb      	ldrb	r3, [r7, #22]
 800138e:	4a38      	ldr	r2, [pc, #224]	@ (8001470 <Read_ADC_IC_test+0xf8>)
 8001390:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001394:	7dbb      	ldrb	r3, [r7, #22]
 8001396:	4a36      	ldr	r2, [pc, #216]	@ (8001470 <Read_ADC_IC_test+0xf8>)
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4413      	add	r3, r2
 800139c:	889b      	ldrh	r3, [r3, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	4619      	mov	r1, r3
 80013a2:	f001 fb49 	bl	8002a38 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 80013a6:	7dbb      	ldrb	r3, [r7, #22]
 80013a8:	3301      	adds	r3, #1
 80013aa:	75bb      	strb	r3, [r7, #22]
 80013ac:	7dbb      	ldrb	r3, [r7, #22]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d9ec      	bls.n	800138c <Read_ADC_IC_test+0x14>
    }
    HAL_GPIO_WritePin(PIN_ADC_ENx[pin/8].Port_x,PIN_ADC_ENx[pin/8].PIN_x,GPIO_PIN_RESET);
 80013b2:	7afb      	ldrb	r3, [r7, #11]
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001470 <Read_ADC_IC_test+0xf8>)
 80013bc:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80013c0:	7afb      	ldrb	r3, [r7, #11]
 80013c2:	08db      	lsrs	r3, r3, #3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001470 <Read_ADC_IC_test+0xf8>)
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4413      	add	r3, r2
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	f001 fb31 	bl	8002a38 <HAL_GPIO_WritePin>

    /* Control Select pin */
    HAL_GPIO_WritePin(PIN_ADC_Sx[0].Port_x,PIN_ADC_Sx[0].PIN_x,(GPIO_PinState)(pin & 0x01));        /* bit 1*/
 80013d6:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <Read_ADC_IC_test+0xfc>)
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <Read_ADC_IC_test+0xfc>)
 80013dc:	8899      	ldrh	r1, [r3, #4]
 80013de:	7afb      	ldrb	r3, [r7, #11]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	f001 fb26 	bl	8002a38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_ADC_Sx[1].Port_x,PIN_ADC_Sx[1].PIN_x,(GPIO_PinState)((pin >> 1) & 0x01)); /* bit 2*/
 80013ec:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <Read_ADC_IC_test+0xfc>)
 80013ee:	6898      	ldr	r0, [r3, #8]
 80013f0:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <Read_ADC_IC_test+0xfc>)
 80013f2:	8999      	ldrh	r1, [r3, #12]
 80013f4:	7afb      	ldrb	r3, [r7, #11]
 80013f6:	085b      	lsrs	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	f001 fb19 	bl	8002a38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_ADC_Sx[2].Port_x,PIN_ADC_Sx[2].PIN_x,(GPIO_PinState)((pin >> 2) & 0x01));
 8001406:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <Read_ADC_IC_test+0xfc>)
 8001408:	6918      	ldr	r0, [r3, #16]
 800140a:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <Read_ADC_IC_test+0xfc>)
 800140c:	8a99      	ldrh	r1, [r3, #20]
 800140e:	7afb      	ldrb	r3, [r7, #11]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	b2db      	uxtb	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	f001 fb0c 	bl	8002a38 <HAL_GPIO_WritePin>

    index_pin = pin/8;
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	08db      	lsrs	r3, r3, #3
 8001424:	757b      	strb	r3, [r7, #21]
    switch (index_pin) {
 8001426:	7d7b      	ldrb	r3, [r7, #21]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d00c      	beq.n	8001446 <Read_ADC_IC_test+0xce>
 800142c:	2b02      	cmp	r3, #2
 800142e:	dc0d      	bgt.n	800144c <Read_ADC_IC_test+0xd4>
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <Read_ADC_IC_test+0xc2>
 8001434:	2b01      	cmp	r3, #1
 8001436:	d003      	beq.n	8001440 <Read_ADC_IC_test+0xc8>
            channel_adc = CHANNEL_AIN1_GND;
        } break;
        case 2 : {
            channel_adc = CHANNEL_AIN2_GND;
        } break;
        default : break;
 8001438:	e008      	b.n	800144c <Read_ADC_IC_test+0xd4>
            channel_adc = CHANNEL_AIN0_GND;
 800143a:	2304      	movs	r3, #4
 800143c:	75fb      	strb	r3, [r7, #23]
        } break;
 800143e:	e006      	b.n	800144e <Read_ADC_IC_test+0xd6>
            channel_adc = CHANNEL_AIN1_GND;
 8001440:	2305      	movs	r3, #5
 8001442:	75fb      	strb	r3, [r7, #23]
        } break;
 8001444:	e003      	b.n	800144e <Read_ADC_IC_test+0xd6>
            channel_adc = CHANNEL_AIN2_GND;
 8001446:	2306      	movs	r3, #6
 8001448:	75fb      	strb	r3, [r7, #23]
        } break;
 800144a:	e000      	b.n	800144e <Read_ADC_IC_test+0xd6>
        default : break;
 800144c:	bf00      	nop
    }
    /* read value */
    data_buf[pin] = ADS1115_single_getdata(pADS1115,channel_adc);
 800144e:	7afb      	ldrb	r3, [r7, #11]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	18d4      	adds	r4, r2, r3
 8001456:	7dfb      	ldrb	r3, [r7, #23]
 8001458:	4619      	mov	r1, r3
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f004 ffee 	bl	800643c <ADS1115_single_getdata>
 8001460:	eef0 7a40 	vmov.f32	s15, s0
 8001464:	edc4 7a00 	vstr	s15, [r4]
}
 8001468:	bf00      	nop
 800146a:	371c      	adds	r7, #28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	20000110 	.word	0x20000110
 8001474:	200000f8 	.word	0x200000f8

08001478 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001480:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001484:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001490:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001494:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001498:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00b      	beq.n	80014b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014a0:	e000      	b.n	80014a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f9      	beq.n	80014a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014ae:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b0a6      	sub	sp, #152	@ 0x98
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ce:	f000 fde1 	bl	8002094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d2:	f000 f8a3 	bl	800161c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d6:	f000 fa11 	bl	80018fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014da:	f000 f9e5 	bl	80018a8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80014de:	f000 f969 	bl	80017b4 <MX_TIM1_Init>
  MX_I2C1_Init();
 80014e2:	f000 f939 	bl	8001758 <MX_I2C1_Init>
  MX_CAN1_Init();
 80014e6:	f000 f903 	bl	80016f0 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80014ea:	f000 f9b3 	bl	8001854 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init STM32
//  HAL_Delay(3000);
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 80014ee:	2264      	movs	r2, #100	@ 0x64
 80014f0:	4941      	ldr	r1, [pc, #260]	@ (80015f8 <main+0x130>)
 80014f2:	4842      	ldr	r0, [pc, #264]	@ (80015fc <main+0x134>)
 80014f4:	f003 fcaf 	bl	8004e56 <HAL_UARTEx_ReceiveToIdle_IT>
//  HAL_UART_Receive_IT(&huart2, dataRX, 1);
  HAL_TIM_Base_Start(&htim1);
 80014f8:	4841      	ldr	r0, [pc, #260]	@ (8001600 <main+0x138>)
 80014fa:	f003 f8df 	bl	80046bc <HAL_TIM_Base_Start>

  // Init custom code
//  Control_IC_begin();

 Latch_IC_begin();
 80014fe:	f7ff fe35 	bl	800116c <Latch_IC_begin>
  
  //  uint8_t IC_test_data[20] = {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
    // uint8_t IC_test_data[20] = {2,2,2,2,2,2,2,2,2,1,0,2,2,2,2,2,2,2,2,2};
  uint8_t IC_test_data_1[20] = {0,0,2,0,0,0,0,0,2,1,0,2,0,0,0,0,1,0,0,1};  // 0
 8001502:	4b40      	ldr	r3, [pc, #256]	@ (8001604 <main+0x13c>)
 8001504:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8001508:	461d      	mov	r5, r3
 800150a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150e:	682b      	ldr	r3, [r5, #0]
 8001510:	6023      	str	r3, [r4, #0]
  uint8_t IC_test_data_2[20] = {0,0,2,0,0,0,0,0,2,1,0,2,0,0,0,0,0,0,0,1};  // 0
 8001512:	4b3d      	ldr	r3, [pc, #244]	@ (8001608 <main+0x140>)
 8001514:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8001518:	461d      	mov	r5, r3
 800151a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151e:	682b      	ldr	r3, [r5, #0]
 8001520:	6023      	str	r3, [r4, #0]
  uint8_t IC_test_data[20] =   {2,2,2,2,2,2,2,2,2,1,0,2,2,2,2,2,2,2,2,2};
 8001522:	4b3a      	ldr	r3, [pc, #232]	@ (800160c <main+0x144>)
 8001524:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001528:	461d      	mov	r5, r3
 800152a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	6023      	str	r3, [r4, #0]
//  uint8_t IC_test_data[20];
//  memset(IC_test_data,1,sizeof(IC_test_data));
 WritePin_ICTest(IC_test_data);
 8001532:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff feac 	bl	8001294 <WritePin_ICTest>

  uint8_t data_Ron[20];
  memset(data_Ron,1,sizeof(data_Ron));
 800153c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001540:	2214      	movs	r2, #20
 8001542:	2101      	movs	r1, #1
 8001544:	4618      	mov	r0, r3
 8001546:	f006 ff7a 	bl	800843e <memset>
  WritePin_Ron(data_Ron);
 800154a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff feea 	bl	8001328 <WritePin_Ron>

  uint8_t data_Current[20];
  memset(data_Current,0,sizeof(data_Current));
 8001554:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001558:	2214      	movs	r2, #20
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f006 ff6e 	bl	800843e <memset>
  WritePin_CurrentLeakage(data_Current);
 8001562:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fef2 	bl	8001350 <WritePin_CurrentLeakage>
//  Control_Vcc_pin(0XFF); // disable all vcc in pin

  uint8_t data_read[20] = {0};
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]

  ADS1115_t ADS1115;
  config_reg_t config_reg_ads;
  config_reg_ads.PGA = PGA_6_144;
 800157c:	2300      	movs	r3, #0
 800157e:	71bb      	strb	r3, [r7, #6]
  config_reg_ads.channel = DEFAULT_VALUE_CHANNEL;
 8001580:	2300      	movs	r3, #0
 8001582:	713b      	strb	r3, [r7, #4]
  config_reg_ads.compareMode = DEFAULT_VALUE_COMP_MODE;
 8001584:	2300      	movs	r3, #0
 8001586:	723b      	strb	r3, [r7, #8]
  config_reg_ads.DataRate = DEFAULT_VALUE_DATARATE;
 8001588:	2304      	movs	r3, #4
 800158a:	717b      	strb	r3, [r7, #5]
  config_reg_ads.latchingMode = DEFAULT_VALUE_COMP_LAT;
 800158c:	2300      	movs	r3, #0
 800158e:	72bb      	strb	r3, [r7, #10]
  config_reg_ads.mode = DEFAULT_VALUE_MODE;
 8001590:	2301      	movs	r3, #1
 8001592:	71fb      	strb	r3, [r7, #7]
  config_reg_ads.polarityMode = DEFAULT_VALUE_COMP_POL;
 8001594:	2300      	movs	r3, #0
 8001596:	727b      	strb	r3, [r7, #9]
  config_reg_ads.queueComparator = DEFAULT_VALUE_COMP_QUE;
 8001598:	2303      	movs	r3, #3
 800159a:	72fb      	strb	r3, [r7, #11]

  ADS1115.config = &config_reg_ads;
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	61bb      	str	r3, [r7, #24]

  ADS1115_Init(&ADS1115,&hi2c1,ADS1115_READ_ADC_ADDRESS);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2248      	movs	r2, #72	@ 0x48
 80015a6:	491a      	ldr	r1, [pc, #104]	@ (8001610 <main+0x148>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 ff21 	bl	80063f0 <ADS1115_Init>



  Screen_begin(&huart2);
 80015ae:	4813      	ldr	r0, [pc, #76]	@ (80015fc <main+0x134>)
 80015b0:	f004 fc02 	bl	8005db8 <Screen_begin>
	  //  HAL_Delay(1000);
//    WritePin_ICTest(IC_test_data_1);
//    ReadPin_IC_test(data_read);
    // WritePin_ICTest(IC_test_data);
    // ReadPin_IC_test(data_read);
    for (uint8_t i = 0; i < 20; i++) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80015ba:	e00c      	b.n	80015d6 <main+0x10e>
      Read_ADC_IC_test(&ADS1115,i,ADC_data);
 80015bc:	f897 1097 	ldrb.w	r1, [r7, #151]	@ 0x97
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	4a13      	ldr	r2, [pc, #76]	@ (8001614 <main+0x14c>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fed6 	bl	8001378 <Read_ADC_IC_test>
    for (uint8_t i = 0; i < 20; i++) {
 80015cc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80015d0:	3301      	adds	r3, #1
 80015d2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80015d6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80015da:	2b13      	cmp	r3, #19
 80015dc:	d9ee      	bls.n	80015bc <main+0xf4>
      // ADC_DUT1 = ADS1115_single_getdata(&ADS1115, CHANNEL_AIN0_GND);
    }
    Read_ADC_IC_test(&ADS1115,channel_read_adc,ADC_data);
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <main+0x150>)
 80015e0:	7819      	ldrb	r1, [r3, #0]
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001614 <main+0x14c>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fec5 	bl	8001378 <Read_ADC_IC_test>
//	  Control_Output_IC_Test(Latch_IC4,data_output);
//	  Control_Output_IC_Test(Latch_IC5,data_output);
//	  Control_Output_IC_Test(Latch_IC6,data_output);
//	  HAL_Delay(10);
	  // printf("SWO Debug!!!\n");
	  HAL_Delay(1000);
 80015ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015f2:	f000 fdc1 	bl	8002178 <HAL_Delay>
    for (uint8_t i = 0; i < 20; i++) {
 80015f6:	e7dd      	b.n	80015b4 <main+0xec>
 80015f8:	200004dc 	.word	0x200004dc
 80015fc:	20000494 	.word	0x20000494
 8001600:	20000404 	.word	0x20000404
 8001604:	0800b0b4 	.word	0x0800b0b4
 8001608:	0800b0c8 	.word	0x0800b0c8
 800160c:	0800b0dc 	.word	0x0800b0dc
 8001610:	200003b0 	.word	0x200003b0
 8001614:	20000540 	.word	0x20000540
 8001618:	20000590 	.word	0x20000590

0800161c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b094      	sub	sp, #80	@ 0x50
 8001620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001622:	f107 0320 	add.w	r3, r7, #32
 8001626:	2230      	movs	r2, #48	@ 0x30
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f006 ff07 	bl	800843e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	4b28      	ldr	r3, [pc, #160]	@ (80016e8 <SystemClock_Config+0xcc>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	4a27      	ldr	r2, [pc, #156]	@ (80016e8 <SystemClock_Config+0xcc>)
 800164a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800164e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001650:	4b25      	ldr	r3, [pc, #148]	@ (80016e8 <SystemClock_Config+0xcc>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <SystemClock_Config+0xd0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a21      	ldr	r2, [pc, #132]	@ (80016ec <SystemClock_Config+0xd0>)
 8001666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <SystemClock_Config+0xd0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001678:	2302      	movs	r3, #2
 800167a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167c:	2301      	movs	r3, #1
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001680:	2310      	movs	r3, #16
 8001682:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001684:	2302      	movs	r3, #2
 8001686:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001688:	2300      	movs	r3, #0
 800168a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800168c:	2308      	movs	r3, #8
 800168e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001690:	23a8      	movs	r3, #168	@ 0xa8
 8001692:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001694:	2302      	movs	r3, #2
 8001696:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001698:	2304      	movs	r3, #4
 800169a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169c:	f107 0320 	add.w	r3, r7, #32
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 fb25 	bl	8003cf0 <HAL_RCC_OscConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016ac:	f000 fa6e 	bl	8001b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b0:	230f      	movs	r3, #15
 80016b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b4:	2302      	movs	r3, #2
 80016b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	2105      	movs	r1, #5
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fd86 	bl	80041e0 <HAL_RCC_ClockConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016da:	f000 fa57 	bl	8001b8c <Error_Handler>
  }
}
 80016de:	bf00      	nop
 80016e0:	3750      	adds	r7, #80	@ 0x50
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40007000 	.word	0x40007000

080016f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80016f4:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <MX_CAN1_Init+0x60>)
 80016f6:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <MX_CAN1_Init+0x64>)
 80016f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <MX_CAN1_Init+0x60>)
 80016fc:	2210      	movs	r2, #16
 80016fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001700:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <MX_CAN1_Init+0x60>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <MX_CAN1_Init+0x60>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800170c:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <MX_CAN1_Init+0x60>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001712:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <MX_CAN1_Init+0x60>)
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001718:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <MX_CAN1_Init+0x60>)
 800171a:	2200      	movs	r2, #0
 800171c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800171e:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <MX_CAN1_Init+0x60>)
 8001720:	2200      	movs	r2, #0
 8001722:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001724:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <MX_CAN1_Init+0x60>)
 8001726:	2200      	movs	r2, #0
 8001728:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <MX_CAN1_Init+0x60>)
 800172c:	2200      	movs	r2, #0
 800172e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <MX_CAN1_Init+0x60>)
 8001732:	2200      	movs	r2, #0
 8001734:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <MX_CAN1_Init+0x60>)
 8001738:	2200      	movs	r2, #0
 800173a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800173c:	4804      	ldr	r0, [pc, #16]	@ (8001750 <MX_CAN1_Init+0x60>)
 800173e:	f000 fd3f 	bl	80021c0 <HAL_CAN_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001748:	f000 fa20 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000388 	.word	0x20000388
 8001754:	40006400 	.word	0x40006400

08001758 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <MX_I2C1_Init+0x50>)
 800175e:	4a13      	ldr	r2, [pc, #76]	@ (80017ac <MX_I2C1_Init+0x54>)
 8001760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <MX_I2C1_Init+0x50>)
 8001764:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <MX_I2C1_Init+0x58>)
 8001766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <MX_I2C1_Init+0x50>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <MX_I2C1_Init+0x50>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <MX_I2C1_Init+0x50>)
 8001776:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800177a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <MX_I2C1_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <MX_I2C1_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001788:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <MX_I2C1_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <MX_I2C1_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <MX_I2C1_Init+0x50>)
 8001796:	f001 f969 	bl	8002a6c <HAL_I2C_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017a0:	f000 f9f4 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200003b0 	.word	0x200003b0
 80017ac:	40005400 	.word	0x40005400
 80017b0:	00061a80 	.word	0x00061a80

080017b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c8:	463b      	mov	r3, r7
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017d0:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <MX_TIM1_Init+0x98>)
 80017d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001850 <MX_TIM1_Init+0x9c>)
 80017d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168 -1;
 80017d6:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <MX_TIM1_Init+0x98>)
 80017d8:	22a7      	movs	r2, #167	@ 0xa7
 80017da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <MX_TIM1_Init+0x98>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF - 1;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <MX_TIM1_Init+0x98>)
 80017e4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80017e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ea:	4b18      	ldr	r3, [pc, #96]	@ (800184c <MX_TIM1_Init+0x98>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017f0:	4b16      	ldr	r3, [pc, #88]	@ (800184c <MX_TIM1_Init+0x98>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <MX_TIM1_Init+0x98>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017fc:	4813      	ldr	r0, [pc, #76]	@ (800184c <MX_TIM1_Init+0x98>)
 80017fe:	f002 ff0d 	bl	800461c <HAL_TIM_Base_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001808:	f000 f9c0 	bl	8001b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001810:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	4619      	mov	r1, r3
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <MX_TIM1_Init+0x98>)
 800181a:	f002 ffb7 	bl	800478c <HAL_TIM_ConfigClockSource>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001824:	f000 f9b2 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_TIM1_Init+0x98>)
 8001836:	f003 f9b7 	bl	8004ba8 <HAL_TIMEx_MasterConfigSynchronization>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001840:	f000 f9a4 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000404 	.word	0x20000404
 8001850:	40010000 	.word	0x40010000

08001854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <MX_USART1_UART_Init+0x50>)
 800185c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 800188c:	f003 fa08 	bl	8004ca0 <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001896:	f000 f979 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000044c 	.word	0x2000044c
 80018a4:	40011000 	.word	0x40011000

080018a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <MX_USART2_UART_Init+0x50>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018b4:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80018b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018e0:	f003 f9de 	bl	8004ca0 <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018ea:	f000 f94f 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000494 	.word	0x20000494
 80018f8:	40004400 	.word	0x40004400

080018fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	@ 0x30
 8001900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a6a      	ldr	r2, [pc, #424]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 800191c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b68      	ldr	r3, [pc, #416]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	4b64      	ldr	r3, [pc, #400]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a63      	ldr	r2, [pc, #396]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b61      	ldr	r3, [pc, #388]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a5c      	ldr	r2, [pc, #368]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b56      	ldr	r3, [pc, #344]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a55      	ldr	r2, [pc, #340]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b53      	ldr	r3, [pc, #332]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b4f      	ldr	r3, [pc, #316]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a4e      	ldr	r2, [pc, #312]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 800198c:	f043 0310 	orr.w	r3, r3, #16
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b48      	ldr	r3, [pc, #288]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a47      	ldr	r2, [pc, #284]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 80019a8:	f043 0308 	orr.w	r3, r3, #8
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b45      	ldr	r3, [pc, #276]	@ (8001ac4 <MX_GPIO_Init+0x1c8>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80019c0:	4841      	ldr	r0, [pc, #260]	@ (8001ac8 <MX_GPIO_Init+0x1cc>)
 80019c2:	f001 f839 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80019c6:	2200      	movs	r2, #0
 80019c8:	f641 71f0 	movw	r1, #8176	@ 0x1ff0
 80019cc:	483f      	ldr	r0, [pc, #252]	@ (8001acc <MX_GPIO_Init+0x1d0>)
 80019ce:	f001 f833 	bl	8002a38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 80019d2:	2200      	movs	r2, #0
 80019d4:	f643 013b 	movw	r1, #14395	@ 0x383b
 80019d8:	483d      	ldr	r0, [pc, #244]	@ (8001ad0 <MX_GPIO_Init+0x1d4>)
 80019da:	f001 f82d 	bl	8002a38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 41ff 	mov.w	r1, #32640	@ 0x7f80
 80019e4:	483b      	ldr	r0, [pc, #236]	@ (8001ad4 <MX_GPIO_Init+0x1d8>)
 80019e6:	f001 f827 	bl	8002a38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80019ea:	2200      	movs	r2, #0
 80019ec:	21f7      	movs	r1, #247	@ 0xf7
 80019ee:	483a      	ldr	r0, [pc, #232]	@ (8001ad8 <MX_GPIO_Init+0x1dc>)
 80019f0:	f001 f822 	bl	8002a38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80019f4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	482e      	ldr	r0, [pc, #184]	@ (8001ac8 <MX_GPIO_Init+0x1cc>)
 8001a0e:	f000 fe77 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001a12:	f641 73f0 	movw	r3, #8176	@ 0x1ff0
 8001a16:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4828      	ldr	r0, [pc, #160]	@ (8001acc <MX_GPIO_Init+0x1d0>)
 8001a2c:	f000 fe68 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 PB12
                           PB13 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8001a30:	f643 033b 	movw	r3, #14395	@ 0x383b
 8001a34:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	4821      	ldr	r0, [pc, #132]	@ (8001ad0 <MX_GPIO_Init+0x1d4>)
 8001a4a:	f000 fe59 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a4e:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 8001a52:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4619      	mov	r1, r3
 8001a66:	481b      	ldr	r0, [pc, #108]	@ (8001ad4 <MX_GPIO_Init+0x1d8>)
 8001a68:	f000 fe4a 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001a6c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4813      	ldr	r0, [pc, #76]	@ (8001ad0 <MX_GPIO_Init+0x1d4>)
 8001a82:	f000 fe3d 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a86:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8001a8a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480f      	ldr	r0, [pc, #60]	@ (8001ad8 <MX_GPIO_Init+0x1dc>)
 8001a9c:	f000 fe30 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001aa0:	23f7      	movs	r3, #247	@ 0xf7
 8001aa2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4808      	ldr	r0, [pc, #32]	@ (8001ad8 <MX_GPIO_Init+0x1dc>)
 8001ab8:	f000 fe22 	bl	8002700 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001abc:	bf00      	nop
 8001abe:	3730      	adds	r7, #48	@ 0x30
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40020c00 	.word	0x40020c00

08001adc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d10c      	bne.n	8001b0e <HAL_UARTEx_RxEventCallback+0x32>

		// Call to callback function screen
		Screen_RX_data(dataRX);
 8001af4:	4809      	ldr	r0, [pc, #36]	@ (8001b1c <HAL_UARTEx_RxEventCallback+0x40>)
 8001af6:	f004 f9ab 	bl	8005e50 <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 8001afa:	2264      	movs	r2, #100	@ 0x64
 8001afc:	2100      	movs	r1, #0
 8001afe:	4807      	ldr	r0, [pc, #28]	@ (8001b1c <HAL_UARTEx_RxEventCallback+0x40>)
 8001b00:	f006 fc9d 	bl	800843e <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8001b04:	2264      	movs	r2, #100	@ 0x64
 8001b06:	4905      	ldr	r1, [pc, #20]	@ (8001b1c <HAL_UARTEx_RxEventCallback+0x40>)
 8001b08:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001b0a:	f003 f9a4 	bl	8004e56 <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000494 	.word	0x20000494
 8001b1c:	200004dc 	.word	0x200004dc

08001b20 <_write>:
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
	RxCAn = 1;
}


int _write(int file, char *ptr, int len) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e009      	b.n	8001b46 <_write+0x26>
        ITM_SendChar(ptr[i]);
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	4413      	add	r3, r2
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fc9c 	bl	8001478 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	dbf1      	blt.n	8001b32 <_write+0x12>
    }
    return len;
 8001b4e:	687b      	ldr	r3, [r7, #4]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <delay_us>:

/**
 * delay polling in microsecond
 */
void delay_us(uint16_t delay_us) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0); // reset time 1 to 0
 8001b62:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <delay_us+0x30>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	@ 0x24

	while(__HAL_TIM_GET_COUNTER(&htim1) < delay_us );
 8001b6a:	bf00      	nop
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <delay_us+0x30>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d3f9      	bcc.n	8001b6c <delay_us+0x14>
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000404 	.word	0x20000404

08001b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b90:	b672      	cpsid	i
}
 8001b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <Error_Handler+0x8>

08001b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <HAL_MspInit+0x4c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8001be4 <HAL_MspInit+0x4c>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bae:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <HAL_MspInit+0x4c>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <HAL_MspInit+0x4c>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	4a08      	ldr	r2, [pc, #32]	@ (8001be4 <HAL_MspInit+0x4c>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_MspInit+0x4c>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	@ 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a19      	ldr	r2, [pc, #100]	@ (8001c6c <HAL_CAN_MspInit+0x84>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d12c      	bne.n	8001c64 <HAL_CAN_MspInit+0x7c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_CAN_MspInit+0x88>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	4a17      	ldr	r2, [pc, #92]	@ (8001c70 <HAL_CAN_MspInit+0x88>)
 8001c14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_CAN_MspInit+0x88>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <HAL_CAN_MspInit+0x88>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a10      	ldr	r2, [pc, #64]	@ (8001c70 <HAL_CAN_MspInit+0x88>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_CAN_MspInit+0x88>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c42:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c54:	2309      	movs	r3, #9
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <HAL_CAN_MspInit+0x8c>)
 8001c60:	f000 fd4e 	bl	8002700 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001c64:	bf00      	nop
 8001c66:	3728      	adds	r7, #40	@ 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40006400 	.word	0x40006400
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020000 	.word	0x40020000

08001c78 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a19      	ldr	r2, [pc, #100]	@ (8001cfc <HAL_I2C_MspInit+0x84>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d12b      	bne.n	8001cf2 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b18      	ldr	r3, [pc, #96]	@ (8001d00 <HAL_I2C_MspInit+0x88>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a17      	ldr	r2, [pc, #92]	@ (8001d00 <HAL_I2C_MspInit+0x88>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <HAL_I2C_MspInit+0x88>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cb6:	23c0      	movs	r3, #192	@ 0xc0
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cba:	2312      	movs	r3, #18
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480c      	ldr	r0, [pc, #48]	@ (8001d04 <HAL_I2C_MspInit+0x8c>)
 8001cd2:	f000 fd15 	bl	8002700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <HAL_I2C_MspInit+0x88>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <HAL_I2C_MspInit+0x88>)
 8001ce0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_I2C_MspInit+0x88>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	@ 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40005400 	.word	0x40005400
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020400 	.word	0x40020400

08001d08 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0b      	ldr	r2, [pc, #44]	@ (8001d44 <HAL_TIM_Base_MspInit+0x3c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d10d      	bne.n	8001d36 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_TIM_Base_MspInit+0x40>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	4a09      	ldr	r2, [pc, #36]	@ (8001d48 <HAL_TIM_Base_MspInit+0x40>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2a:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <HAL_TIM_Base_MspInit+0x40>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40010000 	.word	0x40010000
 8001d48:	40023800 	.word	0x40023800

08001d4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	@ 0x30
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a36      	ldr	r2, [pc, #216]	@ (8001e44 <HAL_UART_MspInit+0xf8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d12d      	bne.n	8001dca <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	4b35      	ldr	r3, [pc, #212]	@ (8001e48 <HAL_UART_MspInit+0xfc>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	4a34      	ldr	r2, [pc, #208]	@ (8001e48 <HAL_UART_MspInit+0xfc>)
 8001d78:	f043 0310 	orr.w	r3, r3, #16
 8001d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7e:	4b32      	ldr	r3, [pc, #200]	@ (8001e48 <HAL_UART_MspInit+0xfc>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e48 <HAL_UART_MspInit+0xfc>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a2d      	ldr	r2, [pc, #180]	@ (8001e48 <HAL_UART_MspInit+0xfc>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e48 <HAL_UART_MspInit+0xfc>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001da6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001db8:	2307      	movs	r3, #7
 8001dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4822      	ldr	r0, [pc, #136]	@ (8001e4c <HAL_UART_MspInit+0x100>)
 8001dc4:	f000 fc9c 	bl	8002700 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dc8:	e038      	b.n	8001e3c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a20      	ldr	r2, [pc, #128]	@ (8001e50 <HAL_UART_MspInit+0x104>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d133      	bne.n	8001e3c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <HAL_UART_MspInit+0xfc>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8001e48 <HAL_UART_MspInit+0xfc>)
 8001dde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de4:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <HAL_UART_MspInit+0xfc>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <HAL_UART_MspInit+0xfc>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	4a13      	ldr	r2, [pc, #76]	@ (8001e48 <HAL_UART_MspInit+0xfc>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <HAL_UART_MspInit+0xfc>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e0c:	230c      	movs	r3, #12
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	4619      	mov	r1, r3
 8001e26:	4809      	ldr	r0, [pc, #36]	@ (8001e4c <HAL_UART_MspInit+0x100>)
 8001e28:	f000 fc6a 	bl	8002700 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2026      	movs	r0, #38	@ 0x26
 8001e32:	f000 fb9c 	bl	800256e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e36:	2026      	movs	r0, #38	@ 0x26
 8001e38:	f000 fbb5 	bl	80025a6 <HAL_NVIC_EnableIRQ>
}
 8001e3c:	bf00      	nop
 8001e3e:	3730      	adds	r7, #48	@ 0x30
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40011000 	.word	0x40011000
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40004400 	.word	0x40004400

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <NMI_Handler+0x4>

08001e5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <HardFault_Handler+0x4>

08001e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <MemManage_Handler+0x4>

08001e6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <BusFault_Handler+0x4>

08001e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <UsageFault_Handler+0x4>

08001e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eaa:	f000 f945 	bl	8002138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001eb8:	4802      	ldr	r0, [pc, #8]	@ (8001ec4 <USART2_IRQHandler+0x10>)
 8001eba:	f003 f829 	bl	8004f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000494 	.word	0x20000494

08001ec8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return 1;
 8001ecc:	2301      	movs	r3, #1
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_kill>:

int _kill(int pid, int sig)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ee2:	f006 fb11 	bl	8008508 <__errno>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2216      	movs	r2, #22
 8001eea:	601a      	str	r2, [r3, #0]
  return -1;
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <_exit>:

void _exit (int status)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ffe7 	bl	8001ed8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f0a:	bf00      	nop
 8001f0c:	e7fd      	b.n	8001f0a <_exit+0x12>

08001f0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e00a      	b.n	8001f36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f20:	f3af 8000 	nop.w
 8001f24:	4601      	mov	r1, r0
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	60ba      	str	r2, [r7, #8]
 8001f2c:	b2ca      	uxtb	r2, r1
 8001f2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3301      	adds	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	dbf0      	blt.n	8001f20 <_read+0x12>
  }

  return len;
 8001f3e:	687b      	ldr	r3, [r7, #4]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f70:	605a      	str	r2, [r3, #4]
  return 0;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <_isatty>:

int _isatty(int file)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f88:	2301      	movs	r3, #1
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb8:	4a14      	ldr	r2, [pc, #80]	@ (800200c <_sbrk+0x5c>)
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <_sbrk+0x60>)
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc4:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <_sbrk+0x64>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	@ (8002018 <_sbrk+0x68>)
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d207      	bcs.n	8001ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe0:	f006 fa92 	bl	8008508 <__errno>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	e009      	b.n	8002004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff6:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a05      	ldr	r2, [pc, #20]	@ (8002014 <_sbrk+0x64>)
 8002000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20020000 	.word	0x20020000
 8002010:	00000400 	.word	0x00000400
 8002014:	20000594 	.word	0x20000594
 8002018:	200007e8 	.word	0x200007e8

0800201c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <SystemInit+0x20>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002026:	4a05      	ldr	r2, [pc, #20]	@ (800203c <SystemInit+0x20>)
 8002028:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800202c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002040:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002078 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002044:	f7ff ffea 	bl	800201c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002048:	480c      	ldr	r0, [pc, #48]	@ (800207c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800204a:	490d      	ldr	r1, [pc, #52]	@ (8002080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800204c:	4a0d      	ldr	r2, [pc, #52]	@ (8002084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002060:	4c0a      	ldr	r4, [pc, #40]	@ (800208c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800206e:	f006 fa51 	bl	8008514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002072:	f7ff fa29 	bl	80014c8 <main>
  bx  lr    
 8002076:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800207c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002080:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 8002084:	0800b574 	.word	0x0800b574
  ldr r2, =_sbss
 8002088:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 800208c:	200007e4 	.word	0x200007e4

08002090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC_IRQHandler>
	...

08002094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002098:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0d      	ldr	r2, [pc, #52]	@ (80020d4 <HAL_Init+0x40>)
 800209e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0a      	ldr	r2, [pc, #40]	@ (80020d4 <HAL_Init+0x40>)
 80020aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b0:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a07      	ldr	r2, [pc, #28]	@ (80020d4 <HAL_Init+0x40>)
 80020b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 fa4b 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c2:	200f      	movs	r0, #15
 80020c4:	f000 f808 	bl	80020d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c8:	f7ff fd66 	bl	8001b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023c00 	.word	0x40023c00

080020d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_InitTick+0x54>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <HAL_InitTick+0x58>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4619      	mov	r1, r3
 80020ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fa63 	bl	80025c2 <HAL_SYSTICK_Config>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e00e      	b.n	8002124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b0f      	cmp	r3, #15
 800210a:	d80a      	bhi.n	8002122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800210c:	2200      	movs	r2, #0
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f000 fa2b 	bl	800256e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002118:	4a06      	ldr	r2, [pc, #24]	@ (8002134 <HAL_InitTick+0x5c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000128 	.word	0x20000128
 8002130:	20000130 	.word	0x20000130
 8002134:	2000012c 	.word	0x2000012c

08002138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_IncTick+0x20>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_IncTick+0x24>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4413      	add	r3, r2
 8002148:	4a04      	ldr	r2, [pc, #16]	@ (800215c <HAL_IncTick+0x24>)
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000130 	.word	0x20000130
 800215c:	20000598 	.word	0x20000598

08002160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return uwTick;
 8002164:	4b03      	ldr	r3, [pc, #12]	@ (8002174 <HAL_GetTick+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000598 	.word	0x20000598

08002178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002180:	f7ff ffee 	bl	8002160 <HAL_GetTick>
 8002184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d005      	beq.n	800219e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002192:	4b0a      	ldr	r3, [pc, #40]	@ (80021bc <HAL_Delay+0x44>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800219e:	bf00      	nop
 80021a0:	f7ff ffde 	bl	8002160 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d8f7      	bhi.n	80021a0 <HAL_Delay+0x28>
  {
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000130 	.word	0x20000130

080021c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0ed      	b.n	80023ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fd02 	bl	8001be8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021f4:	f7ff ffb4 	bl	8002160 <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021fa:	e012      	b.n	8002222 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021fc:	f7ff ffb0 	bl	8002160 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b0a      	cmp	r3, #10
 8002208:	d90b      	bls.n	8002222 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2205      	movs	r2, #5
 800221a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0c5      	b.n	80023ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0e5      	beq.n	80021fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0202 	bic.w	r2, r2, #2
 800223e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002240:	f7ff ff8e 	bl	8002160 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002246:	e012      	b.n	800226e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002248:	f7ff ff8a 	bl	8002160 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b0a      	cmp	r3, #10
 8002254:	d90b      	bls.n	800226e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2205      	movs	r2, #5
 8002266:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e09f      	b.n	80023ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1e5      	bne.n	8002248 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7e1b      	ldrb	r3, [r3, #24]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d108      	bne.n	8002296 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e007      	b.n	80022a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7e5b      	ldrb	r3, [r3, #25]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	e007      	b.n	80022d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7e9b      	ldrb	r3, [r3, #26]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d108      	bne.n	80022ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0220 	orr.w	r2, r2, #32
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e007      	b.n	80022fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0220 	bic.w	r2, r2, #32
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7edb      	ldrb	r3, [r3, #27]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d108      	bne.n	8002314 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0210 	bic.w	r2, r2, #16
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	e007      	b.n	8002324 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0210 	orr.w	r2, r2, #16
 8002322:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	7f1b      	ldrb	r3, [r3, #28]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d108      	bne.n	800233e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0208 	orr.w	r2, r2, #8
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e007      	b.n	800234e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0208 	bic.w	r2, r2, #8
 800234c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7f5b      	ldrb	r3, [r3, #29]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d108      	bne.n	8002368 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0204 	orr.w	r2, r2, #4
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e007      	b.n	8002378 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0204 	bic.w	r2, r2, #4
 8002376:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	ea42 0103 	orr.w	r1, r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	1e5a      	subs	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <__NVIC_SetPriorityGrouping>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	@ (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	@ (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	@ (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	@ 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <SysTick_Config>:
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002524:	d301      	bcc.n	800252a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002526:	2301      	movs	r3, #1
 8002528:	e00f      	b.n	800254a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252a:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <SysTick_Config+0x40>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002532:	210f      	movs	r1, #15
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f7ff ff8e 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <SysTick_Config+0x40>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <SysTick_Config+0x40>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff29 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff3e 	bl	8002400 <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff8e 	bl	80024ac <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff5d 	bl	8002458 <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff31 	bl	800241c <__NVIC_EnableIRQ>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffa2 	bl	8002514 <SysTick_Config>
 80025d0:	4603      	mov	r3, r0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025e8:	f7ff fdba 	bl	8002160 <HAL_GetTick>
 80025ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d008      	beq.n	800260c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2280      	movs	r2, #128	@ 0x80
 80025fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e052      	b.n	80026b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0216 	bic.w	r2, r2, #22
 800261a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800262a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d103      	bne.n	800263c <HAL_DMA_Abort+0x62>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0208 	bic.w	r2, r2, #8
 800264a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800265c:	e013      	b.n	8002686 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800265e:	f7ff fd7f 	bl	8002160 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b05      	cmp	r3, #5
 800266a:	d90c      	bls.n	8002686 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2203      	movs	r2, #3
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e015      	b.n	80026b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e4      	bne.n	800265e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002698:	223f      	movs	r2, #63	@ 0x3f
 800269a:	409a      	lsls	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d004      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2280      	movs	r2, #128	@ 0x80
 80026d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e00c      	b.n	80026f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2205      	movs	r2, #5
 80026dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	@ 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e16b      	b.n	80029f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	429a      	cmp	r2, r3
 8002736:	f040 815a 	bne.w	80029ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d005      	beq.n	8002752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274e:	2b02      	cmp	r3, #2
 8002750:	d130      	bne.n	80027b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	2203      	movs	r2, #3
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 0201 	and.w	r2, r3, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d017      	beq.n	80027f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d123      	bne.n	8002844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	08da      	lsrs	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3208      	adds	r2, #8
 8002804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	220f      	movs	r2, #15
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3208      	adds	r2, #8
 800283e:	69b9      	ldr	r1, [r7, #24]
 8002840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0203 	and.w	r2, r3, #3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80b4 	beq.w	80029ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b60      	ldr	r3, [pc, #384]	@ (8002a0c <HAL_GPIO_Init+0x30c>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	4a5f      	ldr	r2, [pc, #380]	@ (8002a0c <HAL_GPIO_Init+0x30c>)
 8002890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002894:	6453      	str	r3, [r2, #68]	@ 0x44
 8002896:	4b5d      	ldr	r3, [pc, #372]	@ (8002a0c <HAL_GPIO_Init+0x30c>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a10 <HAL_GPIO_Init+0x310>)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	3302      	adds	r3, #2
 80028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	220f      	movs	r2, #15
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a52      	ldr	r2, [pc, #328]	@ (8002a14 <HAL_GPIO_Init+0x314>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d02b      	beq.n	8002926 <HAL_GPIO_Init+0x226>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a51      	ldr	r2, [pc, #324]	@ (8002a18 <HAL_GPIO_Init+0x318>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d025      	beq.n	8002922 <HAL_GPIO_Init+0x222>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a50      	ldr	r2, [pc, #320]	@ (8002a1c <HAL_GPIO_Init+0x31c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01f      	beq.n	800291e <HAL_GPIO_Init+0x21e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002a20 <HAL_GPIO_Init+0x320>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d019      	beq.n	800291a <HAL_GPIO_Init+0x21a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002a24 <HAL_GPIO_Init+0x324>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0x216>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002a28 <HAL_GPIO_Init+0x328>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00d      	beq.n	8002912 <HAL_GPIO_Init+0x212>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4c      	ldr	r2, [pc, #304]	@ (8002a2c <HAL_GPIO_Init+0x32c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <HAL_GPIO_Init+0x20e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4b      	ldr	r2, [pc, #300]	@ (8002a30 <HAL_GPIO_Init+0x330>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_GPIO_Init+0x20a>
 8002906:	2307      	movs	r3, #7
 8002908:	e00e      	b.n	8002928 <HAL_GPIO_Init+0x228>
 800290a:	2308      	movs	r3, #8
 800290c:	e00c      	b.n	8002928 <HAL_GPIO_Init+0x228>
 800290e:	2306      	movs	r3, #6
 8002910:	e00a      	b.n	8002928 <HAL_GPIO_Init+0x228>
 8002912:	2305      	movs	r3, #5
 8002914:	e008      	b.n	8002928 <HAL_GPIO_Init+0x228>
 8002916:	2304      	movs	r3, #4
 8002918:	e006      	b.n	8002928 <HAL_GPIO_Init+0x228>
 800291a:	2303      	movs	r3, #3
 800291c:	e004      	b.n	8002928 <HAL_GPIO_Init+0x228>
 800291e:	2302      	movs	r3, #2
 8002920:	e002      	b.n	8002928 <HAL_GPIO_Init+0x228>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_GPIO_Init+0x228>
 8002926:	2300      	movs	r3, #0
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f002 0203 	and.w	r2, r2, #3
 800292e:	0092      	lsls	r2, r2, #2
 8002930:	4093      	lsls	r3, r2
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002938:	4935      	ldr	r1, [pc, #212]	@ (8002a10 <HAL_GPIO_Init+0x310>)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	3302      	adds	r3, #2
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002946:	4b3b      	ldr	r3, [pc, #236]	@ (8002a34 <HAL_GPIO_Init+0x334>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800296a:	4a32      	ldr	r2, [pc, #200]	@ (8002a34 <HAL_GPIO_Init+0x334>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002970:	4b30      	ldr	r3, [pc, #192]	@ (8002a34 <HAL_GPIO_Init+0x334>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002994:	4a27      	ldr	r2, [pc, #156]	@ (8002a34 <HAL_GPIO_Init+0x334>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800299a:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <HAL_GPIO_Init+0x334>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029be:	4a1d      	ldr	r2, [pc, #116]	@ (8002a34 <HAL_GPIO_Init+0x334>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <HAL_GPIO_Init+0x334>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e8:	4a12      	ldr	r2, [pc, #72]	@ (8002a34 <HAL_GPIO_Init+0x334>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	f67f ae90 	bls.w	800271c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3724      	adds	r7, #36	@ 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40013800 	.word	0x40013800
 8002a14:	40020000 	.word	0x40020000
 8002a18:	40020400 	.word	0x40020400
 8002a1c:	40020800 	.word	0x40020800
 8002a20:	40020c00 	.word	0x40020c00
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40021400 	.word	0x40021400
 8002a2c:	40021800 	.word	0x40021800
 8002a30:	40021c00 	.word	0x40021c00
 8002a34:	40013c00 	.word	0x40013c00

08002a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
 8002a44:	4613      	mov	r3, r2
 8002a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a48:	787b      	ldrb	r3, [r7, #1]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a54:	e003      	b.n	8002a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	041a      	lsls	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	619a      	str	r2, [r3, #24]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e12b      	b.n	8002cd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff f8f0 	bl	8001c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2224      	movs	r2, #36	@ 0x24
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002abe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ace:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ad0:	f001 fd7c 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 8002ad4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4a81      	ldr	r2, [pc, #516]	@ (8002ce0 <HAL_I2C_Init+0x274>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d807      	bhi.n	8002af0 <HAL_I2C_Init+0x84>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a80      	ldr	r2, [pc, #512]	@ (8002ce4 <HAL_I2C_Init+0x278>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	bf94      	ite	ls
 8002ae8:	2301      	movls	r3, #1
 8002aea:	2300      	movhi	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e006      	b.n	8002afe <HAL_I2C_Init+0x92>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4a7d      	ldr	r2, [pc, #500]	@ (8002ce8 <HAL_I2C_Init+0x27c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	bf94      	ite	ls
 8002af8:	2301      	movls	r3, #1
 8002afa:	2300      	movhi	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0e7      	b.n	8002cd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4a78      	ldr	r2, [pc, #480]	@ (8002cec <HAL_I2C_Init+0x280>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0c9b      	lsrs	r3, r3, #18
 8002b10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce0 <HAL_I2C_Init+0x274>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d802      	bhi.n	8002b40 <HAL_I2C_Init+0xd4>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	e009      	b.n	8002b54 <HAL_I2C_Init+0xe8>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	4a69      	ldr	r2, [pc, #420]	@ (8002cf0 <HAL_I2C_Init+0x284>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	099b      	lsrs	r3, r3, #6
 8002b52:	3301      	adds	r3, #1
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	495c      	ldr	r1, [pc, #368]	@ (8002ce0 <HAL_I2C_Init+0x274>)
 8002b70:	428b      	cmp	r3, r1
 8002b72:	d819      	bhi.n	8002ba8 <HAL_I2C_Init+0x13c>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1e59      	subs	r1, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b82:	1c59      	adds	r1, r3, #1
 8002b84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b88:	400b      	ands	r3, r1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_I2C_Init+0x138>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1e59      	subs	r1, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba2:	e051      	b.n	8002c48 <HAL_I2C_Init+0x1dc>
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	e04f      	b.n	8002c48 <HAL_I2C_Init+0x1dc>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d111      	bne.n	8002bd4 <HAL_I2C_Init+0x168>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1e58      	subs	r0, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	440b      	add	r3, r1
 8002bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e012      	b.n	8002bfa <HAL_I2C_Init+0x18e>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e58      	subs	r0, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	0099      	lsls	r1, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2301      	moveq	r3, #1
 8002bf6:	2300      	movne	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_I2C_Init+0x196>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e022      	b.n	8002c48 <HAL_I2C_Init+0x1dc>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10e      	bne.n	8002c28 <HAL_I2C_Init+0x1bc>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1e58      	subs	r0, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6859      	ldr	r1, [r3, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	440b      	add	r3, r1
 8002c18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c26:	e00f      	b.n	8002c48 <HAL_I2C_Init+0x1dc>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1e58      	subs	r0, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	0099      	lsls	r1, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	6809      	ldr	r1, [r1, #0]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6911      	ldr	r1, [r2, #16]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68d2      	ldr	r2, [r2, #12]
 8002c82:	4311      	orrs	r1, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	000186a0 	.word	0x000186a0
 8002ce4:	001e847f 	.word	0x001e847f
 8002ce8:	003d08ff 	.word	0x003d08ff
 8002cec:	431bde83 	.word	0x431bde83
 8002cf0:	10624dd3 	.word	0x10624dd3

08002cf4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	460b      	mov	r3, r1
 8002d02:	817b      	strh	r3, [r7, #10]
 8002d04:	4613      	mov	r3, r2
 8002d06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff fa2a 	bl	8002160 <HAL_GetTick>
 8002d0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	f040 80e0 	bne.w	8002edc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2319      	movs	r3, #25
 8002d22:	2201      	movs	r2, #1
 8002d24:	4970      	ldr	r1, [pc, #448]	@ (8002ee8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fdac 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d32:	2302      	movs	r3, #2
 8002d34:	e0d3      	b.n	8002ede <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_I2C_Master_Transmit+0x50>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e0cc      	b.n	8002ede <HAL_I2C_Master_Transmit+0x1ea>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d007      	beq.n	8002d6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0201 	orr.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2221      	movs	r2, #33	@ 0x21
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2210      	movs	r2, #16
 8002d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	893a      	ldrh	r2, [r7, #8]
 8002d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a50      	ldr	r2, [pc, #320]	@ (8002eec <HAL_I2C_Master_Transmit+0x1f8>)
 8002daa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dac:	8979      	ldrh	r1, [r7, #10]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	6a3a      	ldr	r2, [r7, #32]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fbfc 	bl	80035b0 <I2C_MasterRequestWrite>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e08d      	b.n	8002ede <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002dd8:	e066      	b.n	8002ea8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	6a39      	ldr	r1, [r7, #32]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fe6a 	bl	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00d      	beq.n	8002e06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d107      	bne.n	8002e02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06b      	b.n	8002ede <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d11b      	bne.n	8002e7c <HAL_I2C_Master_Transmit+0x188>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d017      	beq.n	8002e7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	6a39      	ldr	r1, [r7, #32]
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fe61 	bl	8003b48 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00d      	beq.n	8002ea8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d107      	bne.n	8002ea4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e01a      	b.n	8002ede <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d194      	bne.n	8002dda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e000      	b.n	8002ede <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002edc:	2302      	movs	r3, #2
  }
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	00100002 	.word	0x00100002
 8002eec:	ffff0000 	.word	0xffff0000

08002ef0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	@ 0x30
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	817b      	strh	r3, [r7, #10]
 8002f02:	460b      	mov	r3, r1
 8002f04:	813b      	strh	r3, [r7, #8]
 8002f06:	4613      	mov	r3, r2
 8002f08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f0a:	f7ff f929 	bl	8002160 <HAL_GetTick>
 8002f0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	f040 8214 	bne.w	8003346 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2319      	movs	r3, #25
 8002f24:	2201      	movs	r2, #1
 8002f26:	497b      	ldr	r1, [pc, #492]	@ (8003114 <HAL_I2C_Mem_Read+0x224>)
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fcab 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
 8002f36:	e207      	b.n	8003348 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_I2C_Mem_Read+0x56>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e200      	b.n	8003348 <HAL_I2C_Mem_Read+0x458>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d007      	beq.n	8002f6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2222      	movs	r2, #34	@ 0x22
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2240      	movs	r2, #64	@ 0x40
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4a5b      	ldr	r2, [pc, #364]	@ (8003118 <HAL_I2C_Mem_Read+0x228>)
 8002fac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fae:	88f8      	ldrh	r0, [r7, #6]
 8002fb0:	893a      	ldrh	r2, [r7, #8]
 8002fb2:	8979      	ldrh	r1, [r7, #10]
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fb78 	bl	80036b4 <I2C_RequestMemoryRead>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1bc      	b.n	8003348 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d113      	bne.n	8002ffe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	623b      	str	r3, [r7, #32]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	623b      	str	r3, [r7, #32]
 8002fea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e190      	b.n	8003320 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003002:	2b01      	cmp	r3, #1
 8003004:	d11b      	bne.n	800303e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003014:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e170      	b.n	8003320 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003042:	2b02      	cmp	r3, #2
 8003044:	d11b      	bne.n	800307e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003054:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003064:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	e150      	b.n	8003320 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003094:	e144      	b.n	8003320 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309a:	2b03      	cmp	r3, #3
 800309c:	f200 80f1 	bhi.w	8003282 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d123      	bne.n	80030f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fd93 	bl	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e145      	b.n	8003348 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030ee:	e117      	b.n	8003320 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d14e      	bne.n	8003196 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fe:	2200      	movs	r2, #0
 8003100:	4906      	ldr	r1, [pc, #24]	@ (800311c <HAL_I2C_Mem_Read+0x22c>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fbbe 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d008      	beq.n	8003120 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e11a      	b.n	8003348 <HAL_I2C_Mem_Read+0x458>
 8003112:	bf00      	nop
 8003114:	00100002 	.word	0x00100002
 8003118:	ffff0000 	.word	0xffff0000
 800311c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800312e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003194:	e0c4      	b.n	8003320 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319c:	2200      	movs	r2, #0
 800319e:	496c      	ldr	r1, [pc, #432]	@ (8003350 <HAL_I2C_Mem_Read+0x460>)
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fb6f 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0cb      	b.n	8003348 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f8:	2200      	movs	r2, #0
 80031fa:	4955      	ldr	r1, [pc, #340]	@ (8003350 <HAL_I2C_Mem_Read+0x460>)
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fb41 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e09d      	b.n	8003348 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800321a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003280:	e04e      	b.n	8003320 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003284:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fca6 	bl	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e058      	b.n	8003348 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d124      	bne.n	8003320 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d107      	bne.n	80032ee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003324:	2b00      	cmp	r3, #0
 8003326:	f47f aeb6 	bne.w	8003096 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003346:	2302      	movs	r3, #2
  }
}
 8003348:	4618      	mov	r0, r3
 800334a:	3728      	adds	r7, #40	@ 0x28
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	00010004 	.word	0x00010004

08003354 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	@ 0x28
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	460b      	mov	r3, r1
 8003362:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003364:	f7fe fefc 	bl	8002160 <HAL_GetTick>
 8003368:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b20      	cmp	r3, #32
 8003378:	f040 8111 	bne.w	800359e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2319      	movs	r3, #25
 8003382:	2201      	movs	r2, #1
 8003384:	4988      	ldr	r1, [pc, #544]	@ (80035a8 <HAL_I2C_IsDeviceReady+0x254>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fa7c 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
 8003394:	e104      	b.n	80035a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_I2C_IsDeviceReady+0x50>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e0fd      	b.n	80035a0 <HAL_I2C_IsDeviceReady+0x24c>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d007      	beq.n	80033ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2224      	movs	r2, #36	@ 0x24
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a70      	ldr	r2, [pc, #448]	@ (80035ac <HAL_I2C_IsDeviceReady+0x258>)
 80033ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2200      	movs	r2, #0
 8003406:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fa3a 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003424:	d103      	bne.n	800342e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800342c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e0b6      	b.n	80035a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003432:	897b      	ldrh	r3, [r7, #10]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003440:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003442:	f7fe fe8d 	bl	8002160 <HAL_GetTick>
 8003446:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	bf0c      	ite	eq
 8003456:	2301      	moveq	r3, #1
 8003458:	2300      	movne	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800346c:	bf0c      	ite	eq
 800346e:	2301      	moveq	r3, #1
 8003470:	2300      	movne	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003476:	e025      	b.n	80034c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003478:	f7fe fe72 	bl	8002160 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d302      	bcc.n	800348e <HAL_I2C_IsDeviceReady+0x13a>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	22a0      	movs	r2, #160	@ 0xa0
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80034ce:	d005      	beq.n	80034dc <HAL_I2C_IsDeviceReady+0x188>
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <HAL_I2C_IsDeviceReady+0x188>
 80034d6:	7dbb      	ldrb	r3, [r7, #22]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0cd      	beq.n	8003478 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d129      	bne.n	8003546 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003500:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2319      	movs	r3, #25
 800351e:	2201      	movs	r2, #1
 8003520:	4921      	ldr	r1, [pc, #132]	@ (80035a8 <HAL_I2C_IsDeviceReady+0x254>)
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f9ae 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e036      	b.n	80035a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e02c      	b.n	80035a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003554:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800355e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2319      	movs	r3, #25
 8003566:	2201      	movs	r2, #1
 8003568:	490f      	ldr	r1, [pc, #60]	@ (80035a8 <HAL_I2C_IsDeviceReady+0x254>)
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f98a 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e012      	b.n	80035a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	3301      	adds	r3, #1
 800357e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	f4ff af32 	bcc.w	80033ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800359e:	2302      	movs	r3, #2
  }
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	00100002 	.word	0x00100002
 80035ac:	ffff0000 	.word	0xffff0000

080035b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	460b      	mov	r3, r1
 80035be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d006      	beq.n	80035da <I2C_MasterRequestWrite+0x2a>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d003      	beq.n	80035da <I2C_MasterRequestWrite+0x2a>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035d8:	d108      	bne.n	80035ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e00b      	b.n	8003604 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f0:	2b12      	cmp	r3, #18
 80035f2:	d107      	bne.n	8003604 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003602:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f937 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00d      	beq.n	8003638 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800362a:	d103      	bne.n	8003634 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e035      	b.n	80036a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003640:	d108      	bne.n	8003654 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003642:	897b      	ldrh	r3, [r7, #10]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003650:	611a      	str	r2, [r3, #16]
 8003652:	e01b      	b.n	800368c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003654:	897b      	ldrh	r3, [r7, #10]
 8003656:	11db      	asrs	r3, r3, #7
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f003 0306 	and.w	r3, r3, #6
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f063 030f 	orn	r3, r3, #15
 8003664:	b2da      	uxtb	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	490e      	ldr	r1, [pc, #56]	@ (80036ac <I2C_MasterRequestWrite+0xfc>)
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f980 	bl	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e010      	b.n	80036a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003682:	897b      	ldrh	r3, [r7, #10]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4907      	ldr	r1, [pc, #28]	@ (80036b0 <I2C_MasterRequestWrite+0x100>)
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f970 	bl	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	00010008 	.word	0x00010008
 80036b0:	00010002 	.word	0x00010002

080036b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	4608      	mov	r0, r1
 80036be:	4611      	mov	r1, r2
 80036c0:	461a      	mov	r2, r3
 80036c2:	4603      	mov	r3, r0
 80036c4:	817b      	strh	r3, [r7, #10]
 80036c6:	460b      	mov	r3, r1
 80036c8:	813b      	strh	r3, [r7, #8]
 80036ca:	4613      	mov	r3, r2
 80036cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f8c2 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003714:	d103      	bne.n	800371e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800371c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e0aa      	b.n	8003878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003722:	897b      	ldrh	r3, [r7, #10]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003730:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	6a3a      	ldr	r2, [r7, #32]
 8003736:	4952      	ldr	r1, [pc, #328]	@ (8003880 <I2C_RequestMemoryRead+0x1cc>)
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f91d 	bl	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e097      	b.n	8003878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800375e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003760:	6a39      	ldr	r1, [r7, #32]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f9a8 	bl	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00d      	beq.n	800378a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	2b04      	cmp	r3, #4
 8003774:	d107      	bne.n	8003786 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003784:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e076      	b.n	8003878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d105      	bne.n	800379c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003790:	893b      	ldrh	r3, [r7, #8]
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	611a      	str	r2, [r3, #16]
 800379a:	e021      	b.n	80037e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800379c:	893b      	ldrh	r3, [r7, #8]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ac:	6a39      	ldr	r1, [r7, #32]
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f982 	bl	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d107      	bne.n	80037d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e050      	b.n	8003878 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037d6:	893b      	ldrh	r3, [r7, #8]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e2:	6a39      	ldr	r1, [r7, #32]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f967 	bl	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00d      	beq.n	800380c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d107      	bne.n	8003808 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003806:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e035      	b.n	8003878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800381a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	2200      	movs	r2, #0
 8003824:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f82b 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003842:	d103      	bne.n	800384c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800384a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e013      	b.n	8003878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003850:	897b      	ldrh	r3, [r7, #10]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003862:	6a3a      	ldr	r2, [r7, #32]
 8003864:	4906      	ldr	r1, [pc, #24]	@ (8003880 <I2C_RequestMemoryRead+0x1cc>)
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f886 	bl	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	00010002 	.word	0x00010002

08003884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003894:	e048      	b.n	8003928 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d044      	beq.n	8003928 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389e:	f7fe fc5f 	bl	8002160 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d139      	bne.n	8003928 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d10d      	bne.n	80038da <I2C_WaitOnFlagUntilTimeout+0x56>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	43da      	mvns	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4013      	ands	r3, r2
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	e00c      	b.n	80038f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	43da      	mvns	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4013      	ands	r3, r2
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d116      	bne.n	8003928 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e023      	b.n	8003970 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	0c1b      	lsrs	r3, r3, #16
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d10d      	bne.n	800394e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	43da      	mvns	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4013      	ands	r3, r2
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	e00c      	b.n	8003968 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	43da      	mvns	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4013      	ands	r3, r2
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	429a      	cmp	r2, r3
 800396c:	d093      	beq.n	8003896 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003986:	e071      	b.n	8003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003996:	d123      	bne.n	80039e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039cc:	f043 0204 	orr.w	r2, r3, #4
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e067      	b.n	8003ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d041      	beq.n	8003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e8:	f7fe fbba 	bl	8002160 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d302      	bcc.n	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d136      	bne.n	8003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	0c1b      	lsrs	r3, r3, #16
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d10c      	bne.n	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4013      	ands	r3, r2
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bf14      	ite	ne
 8003a1a:	2301      	movne	r3, #1
 8003a1c:	2300      	moveq	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	e00b      	b.n	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	43da      	mvns	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf14      	ite	ne
 8003a34:	2301      	movne	r3, #1
 8003a36:	2300      	moveq	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d016      	beq.n	8003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	f043 0220 	orr.w	r2, r3, #32
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e021      	b.n	8003ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	0c1b      	lsrs	r3, r3, #16
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d10c      	bne.n	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	43da      	mvns	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4013      	ands	r3, r2
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e00b      	b.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	43da      	mvns	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bf14      	ite	ne
 8003aa2:	2301      	movne	r3, #1
 8003aa4:	2300      	moveq	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f47f af6d 	bne.w	8003988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ac4:	e034      	b.n	8003b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f8e3 	bl	8003c92 <I2C_IsAcknowledgeFailed>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e034      	b.n	8003b40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d028      	beq.n	8003b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7fe fb3f 	bl	8002160 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d11d      	bne.n	8003b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afe:	2b80      	cmp	r3, #128	@ 0x80
 8003b00:	d016      	beq.n	8003b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e007      	b.n	8003b40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3a:	2b80      	cmp	r3, #128	@ 0x80
 8003b3c:	d1c3      	bne.n	8003ac6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b54:	e034      	b.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f89b 	bl	8003c92 <I2C_IsAcknowledgeFailed>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e034      	b.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d028      	beq.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6e:	f7fe faf7 	bl	8002160 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d11d      	bne.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d016      	beq.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e007      	b.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d1c3      	bne.n	8003b56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003be4:	e049      	b.n	8003c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d119      	bne.n	8003c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0210 	mvn.w	r2, #16
 8003bfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e030      	b.n	8003c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fe fa9a 	bl	8002160 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d11d      	bne.n	8003c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c48:	2b40      	cmp	r3, #64	@ 0x40
 8003c4a:	d016      	beq.n	8003c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	f043 0220 	orr.w	r2, r3, #32
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e007      	b.n	8003c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c84:	2b40      	cmp	r3, #64	@ 0x40
 8003c86:	d1ae      	bne.n	8003be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca8:	d11b      	bne.n	8003ce2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cb2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	f043 0204 	orr.w	r2, r3, #4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e267      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d075      	beq.n	8003dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d0e:	4b88      	ldr	r3, [pc, #544]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d00c      	beq.n	8003d34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1a:	4b85      	ldr	r3, [pc, #532]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d112      	bne.n	8003d4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d26:	4b82      	ldr	r3, [pc, #520]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d32:	d10b      	bne.n	8003d4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d34:	4b7e      	ldr	r3, [pc, #504]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d05b      	beq.n	8003df8 <HAL_RCC_OscConfig+0x108>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d157      	bne.n	8003df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e242      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d54:	d106      	bne.n	8003d64 <HAL_RCC_OscConfig+0x74>
 8003d56:	4b76      	ldr	r3, [pc, #472]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a75      	ldr	r2, [pc, #468]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	e01d      	b.n	8003da0 <HAL_RCC_OscConfig+0xb0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x98>
 8003d6e:	4b70      	ldr	r3, [pc, #448]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a6f      	ldr	r2, [pc, #444]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6c      	ldr	r2, [pc, #432]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e00b      	b.n	8003da0 <HAL_RCC_OscConfig+0xb0>
 8003d88:	4b69      	ldr	r3, [pc, #420]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a68      	ldr	r2, [pc, #416]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b66      	ldr	r3, [pc, #408]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a65      	ldr	r2, [pc, #404]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d013      	beq.n	8003dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fe f9da 	bl	8002160 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fe f9d6 	bl	8002160 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	@ 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e207      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0xc0>
 8003dce:	e014      	b.n	8003dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fe f9c6 	bl	8002160 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fe f9c2 	bl	8002160 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	@ 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e1f3      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	4b51      	ldr	r3, [pc, #324]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0xe8>
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d063      	beq.n	8003ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e06:	4b4a      	ldr	r3, [pc, #296]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e12:	4b47      	ldr	r3, [pc, #284]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d11c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e1e:	4b44      	ldr	r3, [pc, #272]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d116      	bne.n	8003e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2a:	4b41      	ldr	r3, [pc, #260]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_RCC_OscConfig+0x152>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e1c7      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e42:	4b3b      	ldr	r3, [pc, #236]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4937      	ldr	r1, [pc, #220]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e56:	e03a      	b.n	8003ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e60:	4b34      	ldr	r3, [pc, #208]	@ (8003f34 <HAL_RCC_OscConfig+0x244>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fe f97b 	bl	8002160 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6e:	f7fe f977 	bl	8002160 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e1a8      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e80:	4b2b      	ldr	r3, [pc, #172]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	4b28      	ldr	r3, [pc, #160]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4925      	ldr	r1, [pc, #148]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]
 8003ea0:	e015      	b.n	8003ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea2:	4b24      	ldr	r3, [pc, #144]	@ (8003f34 <HAL_RCC_OscConfig+0x244>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe f95a 	bl	8002160 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb0:	f7fe f956 	bl	8002160 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e187      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d036      	beq.n	8003f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d016      	beq.n	8003f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee2:	4b15      	ldr	r3, [pc, #84]	@ (8003f38 <HAL_RCC_OscConfig+0x248>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee8:	f7fe f93a 	bl	8002160 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef0:	f7fe f936 	bl	8002160 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e167      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f02:	4b0b      	ldr	r3, [pc, #44]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x200>
 8003f0e:	e01b      	b.n	8003f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f10:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <HAL_RCC_OscConfig+0x248>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f16:	f7fe f923 	bl	8002160 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f1c:	e00e      	b.n	8003f3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1e:	f7fe f91f 	bl	8002160 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d907      	bls.n	8003f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e150      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
 8003f30:	40023800 	.word	0x40023800
 8003f34:	42470000 	.word	0x42470000
 8003f38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f3c:	4b88      	ldr	r3, [pc, #544]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1ea      	bne.n	8003f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8097 	beq.w	8004084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f56:	2300      	movs	r3, #0
 8003f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5a:	4b81      	ldr	r3, [pc, #516]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10f      	bne.n	8003f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	4b7d      	ldr	r3, [pc, #500]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	4a7c      	ldr	r2, [pc, #496]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f76:	4b7a      	ldr	r3, [pc, #488]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f82:	2301      	movs	r3, #1
 8003f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f86:	4b77      	ldr	r3, [pc, #476]	@ (8004164 <HAL_RCC_OscConfig+0x474>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d118      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f92:	4b74      	ldr	r3, [pc, #464]	@ (8004164 <HAL_RCC_OscConfig+0x474>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a73      	ldr	r2, [pc, #460]	@ (8004164 <HAL_RCC_OscConfig+0x474>)
 8003f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe f8df 	bl	8002160 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa6:	f7fe f8db 	bl	8002160 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e10c      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb8:	4b6a      	ldr	r3, [pc, #424]	@ (8004164 <HAL_RCC_OscConfig+0x474>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x2ea>
 8003fcc:	4b64      	ldr	r3, [pc, #400]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd0:	4a63      	ldr	r2, [pc, #396]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd8:	e01c      	b.n	8004014 <HAL_RCC_OscConfig+0x324>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x30c>
 8003fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe6:	4a5e      	ldr	r2, [pc, #376]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	f043 0304 	orr.w	r3, r3, #4
 8003fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fee:	4b5c      	ldr	r3, [pc, #368]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff2:	4a5b      	ldr	r2, [pc, #364]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0x324>
 8003ffc:	4b58      	ldr	r3, [pc, #352]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004000:	4a57      	ldr	r2, [pc, #348]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	6713      	str	r3, [r2, #112]	@ 0x70
 8004008:	4b55      	ldr	r3, [pc, #340]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400c:	4a54      	ldr	r2, [pc, #336]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 800400e:	f023 0304 	bic.w	r3, r3, #4
 8004012:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d015      	beq.n	8004048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401c:	f7fe f8a0 	bl	8002160 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004022:	e00a      	b.n	800403a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004024:	f7fe f89c 	bl	8002160 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e0cb      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403a:	4b49      	ldr	r3, [pc, #292]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0ee      	beq.n	8004024 <HAL_RCC_OscConfig+0x334>
 8004046:	e014      	b.n	8004072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004048:	f7fe f88a 	bl	8002160 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404e:	e00a      	b.n	8004066 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fe f886 	bl	8002160 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e0b5      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004066:	4b3e      	ldr	r3, [pc, #248]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1ee      	bne.n	8004050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d105      	bne.n	8004084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004078:	4b39      	ldr	r3, [pc, #228]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	4a38      	ldr	r2, [pc, #224]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 800407e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004082:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80a1 	beq.w	80041d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800408e:	4b34      	ldr	r3, [pc, #208]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b08      	cmp	r3, #8
 8004098:	d05c      	beq.n	8004154 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d141      	bne.n	8004126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a2:	4b31      	ldr	r3, [pc, #196]	@ (8004168 <HAL_RCC_OscConfig+0x478>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fe f85a 	bl	8002160 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fe f856 	bl	8002160 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e087      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c2:	4b27      	ldr	r3, [pc, #156]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69da      	ldr	r2, [r3, #28]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	019b      	lsls	r3, r3, #6
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	3b01      	subs	r3, #1
 80040e8:	041b      	lsls	r3, r3, #16
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	491b      	ldr	r1, [pc, #108]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <HAL_RCC_OscConfig+0x478>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fe:	f7fe f82f 	bl	8002160 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004106:	f7fe f82b 	bl	8002160 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e05c      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004118:	4b11      	ldr	r3, [pc, #68]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x416>
 8004124:	e054      	b.n	80041d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004126:	4b10      	ldr	r3, [pc, #64]	@ (8004168 <HAL_RCC_OscConfig+0x478>)
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412c:	f7fe f818 	bl	8002160 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004134:	f7fe f814 	bl	8002160 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e045      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004146:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x444>
 8004152:	e03d      	b.n	80041d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d107      	bne.n	800416c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e038      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
 8004160:	40023800 	.word	0x40023800
 8004164:	40007000 	.word	0x40007000
 8004168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800416c:	4b1b      	ldr	r3, [pc, #108]	@ (80041dc <HAL_RCC_OscConfig+0x4ec>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d028      	beq.n	80041cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d121      	bne.n	80041cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004192:	429a      	cmp	r2, r3
 8004194:	d11a      	bne.n	80041cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800419c:	4013      	ands	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d111      	bne.n	80041cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b2:	085b      	lsrs	r3, r3, #1
 80041b4:	3b01      	subs	r3, #1
 80041b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d107      	bne.n	80041cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800

080041e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0cc      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f4:	4b68      	ldr	r3, [pc, #416]	@ (8004398 <HAL_RCC_ClockConfig+0x1b8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d90c      	bls.n	800421c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004202:	4b65      	ldr	r3, [pc, #404]	@ (8004398 <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420a:	4b63      	ldr	r3, [pc, #396]	@ (8004398 <HAL_RCC_ClockConfig+0x1b8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0b8      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d020      	beq.n	800426a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004234:	4b59      	ldr	r3, [pc, #356]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	4a58      	ldr	r2, [pc, #352]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800423e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800424c:	4b53      	ldr	r3, [pc, #332]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a52      	ldr	r2, [pc, #328]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004258:	4b50      	ldr	r3, [pc, #320]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	494d      	ldr	r1, [pc, #308]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d044      	beq.n	8004300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b47      	ldr	r3, [pc, #284]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d119      	bne.n	80042be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e07f      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d003      	beq.n	800429e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800429a:	2b03      	cmp	r3, #3
 800429c:	d107      	bne.n	80042ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429e:	4b3f      	ldr	r3, [pc, #252]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e06f      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ae:	4b3b      	ldr	r3, [pc, #236]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e067      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042be:	4b37      	ldr	r3, [pc, #220]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f023 0203 	bic.w	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4934      	ldr	r1, [pc, #208]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042d0:	f7fd ff46 	bl	8002160 <HAL_GetTick>
 80042d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d6:	e00a      	b.n	80042ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d8:	f7fd ff42 	bl	8002160 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e04f      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	4b2b      	ldr	r3, [pc, #172]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 020c 	and.w	r2, r3, #12
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d1eb      	bne.n	80042d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004300:	4b25      	ldr	r3, [pc, #148]	@ (8004398 <HAL_RCC_ClockConfig+0x1b8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d20c      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b22      	ldr	r3, [pc, #136]	@ (8004398 <HAL_RCC_ClockConfig+0x1b8>)
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b20      	ldr	r3, [pc, #128]	@ (8004398 <HAL_RCC_ClockConfig+0x1b8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e032      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004334:	4b19      	ldr	r3, [pc, #100]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4916      	ldr	r1, [pc, #88]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004352:	4b12      	ldr	r3, [pc, #72]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	490e      	ldr	r1, [pc, #56]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	4313      	orrs	r3, r2
 8004364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004366:	f000 f821 	bl	80043ac <HAL_RCC_GetSysClockFreq>
 800436a:	4602      	mov	r2, r0
 800436c:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	490a      	ldr	r1, [pc, #40]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004378:	5ccb      	ldrb	r3, [r1, r3]
 800437a:	fa22 f303 	lsr.w	r3, r2, r3
 800437e:	4a09      	ldr	r2, [pc, #36]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004382:	4b09      	ldr	r3, [pc, #36]	@ (80043a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd fea6 	bl	80020d8 <HAL_InitTick>

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40023c00 	.word	0x40023c00
 800439c:	40023800 	.word	0x40023800
 80043a0:	0800b120 	.word	0x0800b120
 80043a4:	20000128 	.word	0x20000128
 80043a8:	2000012c 	.word	0x2000012c

080043ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b0:	b094      	sub	sp, #80	@ 0x50
 80043b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c4:	4b79      	ldr	r3, [pc, #484]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 030c 	and.w	r3, r3, #12
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d00d      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x40>
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	f200 80e1 	bhi.w	8004598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0x34>
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d003      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80043de:	e0db      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e0:	4b73      	ldr	r3, [pc, #460]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043e4:	e0db      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043e6:	4b72      	ldr	r3, [pc, #456]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ea:	e0d8      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043ec:	4b6f      	ldr	r3, [pc, #444]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043f6:	4b6d      	ldr	r3, [pc, #436]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d063      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004402:	4b6a      	ldr	r3, [pc, #424]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	2200      	movs	r2, #0
 800440a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800440c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800440e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004414:	633b      	str	r3, [r7, #48]	@ 0x30
 8004416:	2300      	movs	r3, #0
 8004418:	637b      	str	r3, [r7, #52]	@ 0x34
 800441a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800441e:	4622      	mov	r2, r4
 8004420:	462b      	mov	r3, r5
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f04f 0100 	mov.w	r1, #0
 800442a:	0159      	lsls	r1, r3, #5
 800442c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004430:	0150      	lsls	r0, r2, #5
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4621      	mov	r1, r4
 8004438:	1a51      	subs	r1, r2, r1
 800443a:	6139      	str	r1, [r7, #16]
 800443c:	4629      	mov	r1, r5
 800443e:	eb63 0301 	sbc.w	r3, r3, r1
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004450:	4659      	mov	r1, fp
 8004452:	018b      	lsls	r3, r1, #6
 8004454:	4651      	mov	r1, sl
 8004456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800445a:	4651      	mov	r1, sl
 800445c:	018a      	lsls	r2, r1, #6
 800445e:	4651      	mov	r1, sl
 8004460:	ebb2 0801 	subs.w	r8, r2, r1
 8004464:	4659      	mov	r1, fp
 8004466:	eb63 0901 	sbc.w	r9, r3, r1
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800447a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800447e:	4690      	mov	r8, r2
 8004480:	4699      	mov	r9, r3
 8004482:	4623      	mov	r3, r4
 8004484:	eb18 0303 	adds.w	r3, r8, r3
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	462b      	mov	r3, r5
 800448c:	eb49 0303 	adc.w	r3, r9, r3
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800449e:	4629      	mov	r1, r5
 80044a0:	028b      	lsls	r3, r1, #10
 80044a2:	4621      	mov	r1, r4
 80044a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044a8:	4621      	mov	r1, r4
 80044aa:	028a      	lsls	r2, r1, #10
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044b2:	2200      	movs	r2, #0
 80044b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044bc:	f7fc fbe4 	bl	8000c88 <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4613      	mov	r3, r2
 80044c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c8:	e058      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ca:	4b38      	ldr	r3, [pc, #224]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	2200      	movs	r2, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	4611      	mov	r1, r2
 80044d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044da:	623b      	str	r3, [r7, #32]
 80044dc:	2300      	movs	r3, #0
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044e4:	4642      	mov	r2, r8
 80044e6:	464b      	mov	r3, r9
 80044e8:	f04f 0000 	mov.w	r0, #0
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	0159      	lsls	r1, r3, #5
 80044f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f6:	0150      	lsls	r0, r2, #5
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4641      	mov	r1, r8
 80044fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004502:	4649      	mov	r1, r9
 8004504:	eb63 0b01 	sbc.w	fp, r3, r1
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800451c:	ebb2 040a 	subs.w	r4, r2, sl
 8004520:	eb63 050b 	sbc.w	r5, r3, fp
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	00eb      	lsls	r3, r5, #3
 800452e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004532:	00e2      	lsls	r2, r4, #3
 8004534:	4614      	mov	r4, r2
 8004536:	461d      	mov	r5, r3
 8004538:	4643      	mov	r3, r8
 800453a:	18e3      	adds	r3, r4, r3
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	464b      	mov	r3, r9
 8004540:	eb45 0303 	adc.w	r3, r5, r3
 8004544:	607b      	str	r3, [r7, #4]
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004552:	4629      	mov	r1, r5
 8004554:	028b      	lsls	r3, r1, #10
 8004556:	4621      	mov	r1, r4
 8004558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800455c:	4621      	mov	r1, r4
 800455e:	028a      	lsls	r2, r1, #10
 8004560:	4610      	mov	r0, r2
 8004562:	4619      	mov	r1, r3
 8004564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004566:	2200      	movs	r2, #0
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	61fa      	str	r2, [r7, #28]
 800456c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004570:	f7fc fb8a 	bl	8000c88 <__aeabi_uldivmod>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4613      	mov	r3, r2
 800457a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	3301      	adds	r3, #1
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800458c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800458e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004596:	e002      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800459a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800459c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800459e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3750      	adds	r7, #80	@ 0x50
 80045a4:	46bd      	mov	sp, r7
 80045a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800
 80045b0:	00f42400 	.word	0x00f42400

080045b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b8:	4b03      	ldr	r3, [pc, #12]	@ (80045c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ba:	681b      	ldr	r3, [r3, #0]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000128 	.word	0x20000128

080045cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045d0:	f7ff fff0 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	0a9b      	lsrs	r3, r3, #10
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4903      	ldr	r1, [pc, #12]	@ (80045f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	0800b130 	.word	0x0800b130

080045f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045f8:	f7ff ffdc 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	0b5b      	lsrs	r3, r3, #13
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4903      	ldr	r1, [pc, #12]	@ (8004618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40023800 	.word	0x40023800
 8004618:	0800b130 	.word	0x0800b130

0800461c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e041      	b.n	80046b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fd fb60 	bl	8001d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f000 f95e 	bl	800491c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d001      	beq.n	80046d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e046      	b.n	8004762 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a23      	ldr	r2, [pc, #140]	@ (8004770 <HAL_TIM_Base_Start+0xb4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d022      	beq.n	800472c <HAL_TIM_Base_Start+0x70>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ee:	d01d      	beq.n	800472c <HAL_TIM_Base_Start+0x70>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004774 <HAL_TIM_Base_Start+0xb8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d018      	beq.n	800472c <HAL_TIM_Base_Start+0x70>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004778 <HAL_TIM_Base_Start+0xbc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <HAL_TIM_Base_Start+0x70>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1c      	ldr	r2, [pc, #112]	@ (800477c <HAL_TIM_Base_Start+0xc0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00e      	beq.n	800472c <HAL_TIM_Base_Start+0x70>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1b      	ldr	r2, [pc, #108]	@ (8004780 <HAL_TIM_Base_Start+0xc4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d009      	beq.n	800472c <HAL_TIM_Base_Start+0x70>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a19      	ldr	r2, [pc, #100]	@ (8004784 <HAL_TIM_Base_Start+0xc8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_TIM_Base_Start+0x70>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a18      	ldr	r2, [pc, #96]	@ (8004788 <HAL_TIM_Base_Start+0xcc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d111      	bne.n	8004750 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b06      	cmp	r3, #6
 800473c:	d010      	beq.n	8004760 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474e:	e007      	b.n	8004760 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40010000 	.word	0x40010000
 8004774:	40000400 	.word	0x40000400
 8004778:	40000800 	.word	0x40000800
 800477c:	40000c00 	.word	0x40000c00
 8004780:	40010400 	.word	0x40010400
 8004784:	40014000 	.word	0x40014000
 8004788:	40001800 	.word	0x40001800

0800478c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_TIM_ConfigClockSource+0x1c>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e0b4      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x186>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047e0:	d03e      	beq.n	8004860 <HAL_TIM_ConfigClockSource+0xd4>
 80047e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047e6:	f200 8087 	bhi.w	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 80047ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ee:	f000 8086 	beq.w	80048fe <HAL_TIM_ConfigClockSource+0x172>
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f6:	d87f      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 80047f8:	2b70      	cmp	r3, #112	@ 0x70
 80047fa:	d01a      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0xa6>
 80047fc:	2b70      	cmp	r3, #112	@ 0x70
 80047fe:	d87b      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b60      	cmp	r3, #96	@ 0x60
 8004802:	d050      	beq.n	80048a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004804:	2b60      	cmp	r3, #96	@ 0x60
 8004806:	d877      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004808:	2b50      	cmp	r3, #80	@ 0x50
 800480a:	d03c      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0xfa>
 800480c:	2b50      	cmp	r3, #80	@ 0x50
 800480e:	d873      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004810:	2b40      	cmp	r3, #64	@ 0x40
 8004812:	d058      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004814:	2b40      	cmp	r3, #64	@ 0x40
 8004816:	d86f      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004818:	2b30      	cmp	r3, #48	@ 0x30
 800481a:	d064      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x15a>
 800481c:	2b30      	cmp	r3, #48	@ 0x30
 800481e:	d86b      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004820:	2b20      	cmp	r3, #32
 8004822:	d060      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004824:	2b20      	cmp	r3, #32
 8004826:	d867      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d05c      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x15a>
 800482c:	2b10      	cmp	r3, #16
 800482e:	d05a      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004830:	e062      	b.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004842:	f000 f991 	bl	8004b68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004854:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	609a      	str	r2, [r3, #8]
      break;
 800485e:	e04f      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004870:	f000 f97a 	bl	8004b68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004882:	609a      	str	r2, [r3, #8]
      break;
 8004884:	e03c      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004892:	461a      	mov	r2, r3
 8004894:	f000 f8ee 	bl	8004a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2150      	movs	r1, #80	@ 0x50
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 f947 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 80048a4:	e02c      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048b2:	461a      	mov	r2, r3
 80048b4:	f000 f90d 	bl	8004ad2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2160      	movs	r1, #96	@ 0x60
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f937 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 80048c4:	e01c      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d2:	461a      	mov	r2, r3
 80048d4:	f000 f8ce 	bl	8004a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2140      	movs	r1, #64	@ 0x40
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f927 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 80048e4:	e00c      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4619      	mov	r1, r3
 80048f0:	4610      	mov	r0, r2
 80048f2:	f000 f91e 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 80048f6:	e003      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
      break;
 80048fc:	e000      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004910:	7bfb      	ldrb	r3, [r7, #15]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a46      	ldr	r2, [pc, #280]	@ (8004a48 <TIM_Base_SetConfig+0x12c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d013      	beq.n	800495c <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800493a:	d00f      	beq.n	800495c <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a43      	ldr	r2, [pc, #268]	@ (8004a4c <TIM_Base_SetConfig+0x130>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00b      	beq.n	800495c <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a42      	ldr	r2, [pc, #264]	@ (8004a50 <TIM_Base_SetConfig+0x134>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d007      	beq.n	800495c <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a41      	ldr	r2, [pc, #260]	@ (8004a54 <TIM_Base_SetConfig+0x138>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a40      	ldr	r2, [pc, #256]	@ (8004a58 <TIM_Base_SetConfig+0x13c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d108      	bne.n	800496e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a35      	ldr	r2, [pc, #212]	@ (8004a48 <TIM_Base_SetConfig+0x12c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d02b      	beq.n	80049ce <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800497c:	d027      	beq.n	80049ce <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a32      	ldr	r2, [pc, #200]	@ (8004a4c <TIM_Base_SetConfig+0x130>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d023      	beq.n	80049ce <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a31      	ldr	r2, [pc, #196]	@ (8004a50 <TIM_Base_SetConfig+0x134>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01f      	beq.n	80049ce <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a30      	ldr	r2, [pc, #192]	@ (8004a54 <TIM_Base_SetConfig+0x138>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d01b      	beq.n	80049ce <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2f      	ldr	r2, [pc, #188]	@ (8004a58 <TIM_Base_SetConfig+0x13c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d017      	beq.n	80049ce <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2e      	ldr	r2, [pc, #184]	@ (8004a5c <TIM_Base_SetConfig+0x140>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004a60 <TIM_Base_SetConfig+0x144>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00f      	beq.n	80049ce <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004a64 <TIM_Base_SetConfig+0x148>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00b      	beq.n	80049ce <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a68 <TIM_Base_SetConfig+0x14c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d007      	beq.n	80049ce <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2a      	ldr	r2, [pc, #168]	@ (8004a6c <TIM_Base_SetConfig+0x150>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d003      	beq.n	80049ce <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a29      	ldr	r2, [pc, #164]	@ (8004a70 <TIM_Base_SetConfig+0x154>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d108      	bne.n	80049e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a10      	ldr	r2, [pc, #64]	@ (8004a48 <TIM_Base_SetConfig+0x12c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d003      	beq.n	8004a14 <TIM_Base_SetConfig+0xf8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a12      	ldr	r2, [pc, #72]	@ (8004a58 <TIM_Base_SetConfig+0x13c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d103      	bne.n	8004a1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d105      	bne.n	8004a3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f023 0201 	bic.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	611a      	str	r2, [r3, #16]
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40010400 	.word	0x40010400
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	40014400 	.word	0x40014400
 8004a64:	40014800 	.word	0x40014800
 8004a68:	40001800 	.word	0x40001800
 8004a6c:	40001c00 	.word	0x40001c00
 8004a70:	40002000 	.word	0x40002000

08004a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f023 0201 	bic.w	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f023 030a 	bic.w	r3, r3, #10
 8004ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b087      	sub	sp, #28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f023 0210 	bic.w	r2, r3, #16
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	031b      	lsls	r3, r3, #12
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b085      	sub	sp, #20
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f043 0307 	orr.w	r3, r3, #7
 8004b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	021a      	lsls	r2, r3, #8
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	609a      	str	r2, [r3, #8]
}
 8004b9c:	bf00      	nop
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e05a      	b.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a21      	ldr	r2, [pc, #132]	@ (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d022      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0c:	d01d      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1d      	ldr	r2, [pc, #116]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d018      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d013      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a1a      	ldr	r2, [pc, #104]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00e      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a18      	ldr	r2, [pc, #96]	@ (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d009      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a17      	ldr	r2, [pc, #92]	@ (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d004      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a15      	ldr	r2, [pc, #84]	@ (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d10c      	bne.n	8004c64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40010000 	.word	0x40010000
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	40000800 	.word	0x40000800
 8004c90:	40000c00 	.word	0x40000c00
 8004c94:	40010400 	.word	0x40010400
 8004c98:	40014000 	.word	0x40014000
 8004c9c:	40001800 	.word	0x40001800

08004ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e042      	b.n	8004d38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd f840 	bl	8001d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2224      	movs	r2, #36	@ 0x24
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fdf3 	bl	80058d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	@ 0x28
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d175      	bne.n	8004e4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <HAL_UART_Transmit+0x2c>
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e06e      	b.n	8004e4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2221      	movs	r2, #33	@ 0x21
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d7e:	f7fd f9ef 	bl	8002160 <HAL_GetTick>
 8004d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	88fa      	ldrh	r2, [r7, #6]
 8004d88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	88fa      	ldrh	r2, [r7, #6]
 8004d8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d98:	d108      	bne.n	8004dac <HAL_UART_Transmit+0x6c>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d104      	bne.n	8004dac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e003      	b.n	8004db4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004db4:	e02e      	b.n	8004e14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2180      	movs	r1, #128	@ 0x80
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fb55 	bl	8005470 <UART_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e03a      	b.n	8004e4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	3302      	adds	r3, #2
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	e007      	b.n	8004e06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	3301      	adds	r3, #1
 8004e04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1cb      	bne.n	8004db6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2200      	movs	r2, #0
 8004e26:	2140      	movs	r1, #64	@ 0x40
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fb21 	bl	8005470 <UART_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e006      	b.n	8004e4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e000      	b.n	8004e4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3720      	adds	r7, #32
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b08c      	sub	sp, #48	@ 0x30
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	4613      	mov	r3, r2
 8004e62:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d14a      	bne.n	8004f06 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004e76:	88fb      	ldrh	r3, [r7, #6]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e043      	b.n	8004f08 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fb45 	bl	8005522 <UART_Start_Receive_IT>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d12c      	bne.n	8004f00 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d125      	bne.n	8004efa <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f043 0310 	orr.w	r3, r3, #16
 8004eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ee4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6a39      	ldr	r1, [r7, #32]
 8004eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e5      	bne.n	8004ec4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004ef8:	e002      	b.n	8004f00 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004f00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f04:	e000      	b.n	8004f08 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004f06:	2302      	movs	r3, #2
  }
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3730      	adds	r7, #48	@ 0x30
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b0ba      	sub	sp, #232	@ 0xe8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10f      	bne.n	8004f76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_UART_IRQHandler+0x66>
 8004f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fbf0 	bl	8005754 <UART_Receive_IT>
      return;
 8004f74:	e25b      	b.n	800542e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80de 	beq.w	800513c <HAL_UART_IRQHandler+0x22c>
 8004f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d106      	bne.n	8004f9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80d1 	beq.w	800513c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <HAL_UART_IRQHandler+0xae>
 8004fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_UART_IRQHandler+0xd2>
 8004fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fda:	f043 0202 	orr.w	r2, r3, #2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <HAL_UART_IRQHandler+0xf6>
 8004fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffe:	f043 0204 	orr.w	r2, r3, #4
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d011      	beq.n	8005036 <HAL_UART_IRQHandler+0x126>
 8005012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d105      	bne.n	800502a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800501e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d005      	beq.n	8005036 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502e:	f043 0208 	orr.w	r2, r3, #8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 81f2 	beq.w	8005424 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_UART_IRQHandler+0x14e>
 800504c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fb7b 	bl	8005754 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005068:	2b40      	cmp	r3, #64	@ 0x40
 800506a:	bf0c      	ite	eq
 800506c:	2301      	moveq	r3, #1
 800506e:	2300      	movne	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d103      	bne.n	800508a <HAL_UART_IRQHandler+0x17a>
 8005082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d04f      	beq.n	800512a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fa83 	bl	8005596 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509a:	2b40      	cmp	r3, #64	@ 0x40
 800509c:	d141      	bne.n	8005122 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3314      	adds	r3, #20
 80050a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80050b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3314      	adds	r3, #20
 80050c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80050ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80050ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80050d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80050e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1d9      	bne.n	800509e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d013      	beq.n	800511a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f6:	4a7e      	ldr	r2, [pc, #504]	@ (80052f0 <HAL_UART_IRQHandler+0x3e0>)
 80050f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fd fadb 	bl	80026ba <HAL_DMA_Abort_IT>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d016      	beq.n	8005138 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005114:	4610      	mov	r0, r2
 8005116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	e00e      	b.n	8005138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f99e 	bl	800545c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005120:	e00a      	b.n	8005138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f99a 	bl	800545c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005128:	e006      	b.n	8005138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f996 	bl	800545c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005136:	e175      	b.n	8005424 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005138:	bf00      	nop
    return;
 800513a:	e173      	b.n	8005424 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005140:	2b01      	cmp	r3, #1
 8005142:	f040 814f 	bne.w	80053e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800514a:	f003 0310 	and.w	r3, r3, #16
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8148 	beq.w	80053e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8141 	beq.w	80053e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005182:	2b40      	cmp	r3, #64	@ 0x40
 8005184:	f040 80b6 	bne.w	80052f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005194:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 8145 	beq.w	8005428 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051a6:	429a      	cmp	r2, r3
 80051a8:	f080 813e 	bcs.w	8005428 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051be:	f000 8088 	beq.w	80052d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80051d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80051ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1d9      	bne.n	80051c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3314      	adds	r3, #20
 8005214:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800521e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3314      	adds	r3, #20
 800522e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005232:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005236:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800523a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005244:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e1      	bne.n	800520e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3314      	adds	r3, #20
 8005250:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800525a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800525c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005260:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3314      	adds	r3, #20
 800526a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800526e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005270:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005274:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800527c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e3      	bne.n	800524a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052a2:	f023 0310 	bic.w	r3, r3, #16
 80052a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80052b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80052b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e3      	bne.n	8005290 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fd f984 	bl	80025da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	4619      	mov	r1, r3
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7fc fbf7 	bl	8001adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052ee:	e09b      	b.n	8005428 <HAL_UART_IRQHandler+0x518>
 80052f0:	0800565d 	.word	0x0800565d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 808e 	beq.w	800542c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8089 	beq.w	800542c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800532a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800532c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005330:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800533e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005340:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005344:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800534c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e3      	bne.n	800531a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3314      	adds	r3, #20
 8005358:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	623b      	str	r3, [r7, #32]
   return(result);
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3314      	adds	r3, #20
 8005372:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005376:	633a      	str	r2, [r7, #48]	@ 0x30
 8005378:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800537c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e3      	bne.n	8005352 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	330c      	adds	r3, #12
 800539e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	e853 3f00 	ldrex	r3, [r3]
 80053a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0310 	bic.w	r3, r3, #16
 80053ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	330c      	adds	r3, #12
 80053b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80053bc:	61fa      	str	r2, [r7, #28]
 80053be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	69b9      	ldr	r1, [r7, #24]
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	617b      	str	r3, [r7, #20]
   return(result);
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e3      	bne.n	8005398 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7fc fb7d 	bl	8001adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053e2:	e023      	b.n	800542c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <HAL_UART_IRQHandler+0x4f4>
 80053f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f941 	bl	8005684 <UART_Transmit_IT>
    return;
 8005402:	e014      	b.n	800542e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00e      	beq.n	800542e <HAL_UART_IRQHandler+0x51e>
 8005410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d008      	beq.n	800542e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f981 	bl	8005724 <UART_EndTransmit_IT>
    return;
 8005422:	e004      	b.n	800542e <HAL_UART_IRQHandler+0x51e>
    return;
 8005424:	bf00      	nop
 8005426:	e002      	b.n	800542e <HAL_UART_IRQHandler+0x51e>
      return;
 8005428:	bf00      	nop
 800542a:	e000      	b.n	800542e <HAL_UART_IRQHandler+0x51e>
      return;
 800542c:	bf00      	nop
  }
}
 800542e:	37e8      	adds	r7, #232	@ 0xe8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	4613      	mov	r3, r2
 800547e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005480:	e03b      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d037      	beq.n	80054fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800548a:	f7fc fe69 	bl	8002160 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	6a3a      	ldr	r2, [r7, #32]
 8005496:	429a      	cmp	r2, r3
 8005498:	d302      	bcc.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e03a      	b.n	800551a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d023      	beq.n	80054fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b80      	cmp	r3, #128	@ 0x80
 80054b6:	d020      	beq.n	80054fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b40      	cmp	r3, #64	@ 0x40
 80054bc:	d01d      	beq.n	80054fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d116      	bne.n	80054fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 f857 	bl	8005596 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2208      	movs	r2, #8
 80054ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e00f      	b.n	800551a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4013      	ands	r3, r2
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	bf0c      	ite	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	2300      	movne	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	429a      	cmp	r2, r3
 8005516:	d0b4      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	4613      	mov	r3, r2
 800552e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2222      	movs	r2, #34	@ 0x22
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005566:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695a      	ldr	r2, [r3, #20]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0220 	orr.w	r2, r2, #32
 8005586:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005596:	b480      	push	{r7}
 8005598:	b095      	sub	sp, #84	@ 0x54
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	330c      	adds	r3, #12
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a8:	e853 3f00 	ldrex	r3, [r3]
 80055ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	330c      	adds	r3, #12
 80055bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055be:	643a      	str	r2, [r7, #64]	@ 0x40
 80055c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e5      	bne.n	800559e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3314      	adds	r3, #20
 80055f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e5      	bne.n	80055d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560a:	2b01      	cmp	r3, #1
 800560c:	d119      	bne.n	8005642 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	330c      	adds	r3, #12
 8005614:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	60bb      	str	r3, [r7, #8]
   return(result);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f023 0310 	bic.w	r3, r3, #16
 8005624:	647b      	str	r3, [r7, #68]	@ 0x44
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	330c      	adds	r3, #12
 800562c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800562e:	61ba      	str	r2, [r7, #24]
 8005630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	6979      	ldr	r1, [r7, #20]
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	613b      	str	r3, [r7, #16]
   return(result);
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e5      	bne.n	800560e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005650:	bf00      	nop
 8005652:	3754      	adds	r7, #84	@ 0x54
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fef0 	bl	800545c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b21      	cmp	r3, #33	@ 0x21
 8005696:	d13e      	bne.n	8005716 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a0:	d114      	bne.n	80056cc <UART_Transmit_IT+0x48>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d110      	bne.n	80056cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	1c9a      	adds	r2, r3, #2
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	621a      	str	r2, [r3, #32]
 80056ca:	e008      	b.n	80056de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	1c59      	adds	r1, r3, #1
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6211      	str	r1, [r2, #32]
 80056d6:	781a      	ldrb	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4619      	mov	r1, r3
 80056ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10f      	bne.n	8005712 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005700:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005710:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	e000      	b.n	8005718 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005716:	2302      	movs	r3, #2
  }
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800573a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff fe75 	bl	8005434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08c      	sub	sp, #48	@ 0x30
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b22      	cmp	r3, #34	@ 0x22
 8005766:	f040 80ae 	bne.w	80058c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005772:	d117      	bne.n	80057a4 <UART_Receive_IT+0x50>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d113      	bne.n	80057a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800577c:	2300      	movs	r3, #0
 800577e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005784:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	b29b      	uxth	r3, r3
 800578e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005792:	b29a      	uxth	r2, r3
 8005794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005796:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	1c9a      	adds	r2, r3, #2
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80057a2:	e026      	b.n	80057f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b6:	d007      	beq.n	80057c8 <UART_Receive_IT+0x74>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <UART_Receive_IT+0x82>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d106      	bne.n	80057d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d2:	701a      	strb	r2, [r3, #0]
 80057d4:	e008      	b.n	80057e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	4619      	mov	r1, r3
 8005800:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005802:	2b00      	cmp	r3, #0
 8005804:	d15d      	bne.n	80058c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0220 	bic.w	r2, r2, #32
 8005814:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005824:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695a      	ldr	r2, [r3, #20]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0201 	bic.w	r2, r2, #1
 8005834:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005848:	2b01      	cmp	r3, #1
 800584a:	d135      	bne.n	80058b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	330c      	adds	r3, #12
 8005858:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	613b      	str	r3, [r7, #16]
   return(result);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f023 0310 	bic.w	r3, r3, #16
 8005868:	627b      	str	r3, [r7, #36]	@ 0x24
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
 8005870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005872:	623a      	str	r2, [r7, #32]
 8005874:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	69f9      	ldr	r1, [r7, #28]
 8005878:	6a3a      	ldr	r2, [r7, #32]
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e5      	bne.n	8005852 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b10      	cmp	r3, #16
 8005892:	d10a      	bne.n	80058aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fc f913 	bl	8001adc <HAL_UARTEx_RxEventCallback>
 80058b6:	e002      	b.n	80058be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff fdc5 	bl	8005448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e002      	b.n	80058c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e000      	b.n	80058c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80058c6:	2302      	movs	r3, #2
  }
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3730      	adds	r7, #48	@ 0x30
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d4:	b0c0      	sub	sp, #256	@ 0x100
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ec:	68d9      	ldr	r1, [r3, #12]
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	ea40 0301 	orr.w	r3, r0, r1
 80058f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	431a      	orrs	r2, r3
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	431a      	orrs	r2, r3
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005928:	f021 010c 	bic.w	r1, r1, #12
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005936:	430b      	orrs	r3, r1
 8005938:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594a:	6999      	ldr	r1, [r3, #24]
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	ea40 0301 	orr.w	r3, r0, r1
 8005956:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	4b8f      	ldr	r3, [pc, #572]	@ (8005b9c <UART_SetConfig+0x2cc>)
 8005960:	429a      	cmp	r2, r3
 8005962:	d005      	beq.n	8005970 <UART_SetConfig+0xa0>
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b8d      	ldr	r3, [pc, #564]	@ (8005ba0 <UART_SetConfig+0x2d0>)
 800596c:	429a      	cmp	r2, r3
 800596e:	d104      	bne.n	800597a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005970:	f7fe fe40 	bl	80045f4 <HAL_RCC_GetPCLK2Freq>
 8005974:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005978:	e003      	b.n	8005982 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800597a:	f7fe fe27 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 800597e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800598c:	f040 810c 	bne.w	8005ba8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005994:	2200      	movs	r2, #0
 8005996:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800599a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800599e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059a2:	4622      	mov	r2, r4
 80059a4:	462b      	mov	r3, r5
 80059a6:	1891      	adds	r1, r2, r2
 80059a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059aa:	415b      	adcs	r3, r3
 80059ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059b2:	4621      	mov	r1, r4
 80059b4:	eb12 0801 	adds.w	r8, r2, r1
 80059b8:	4629      	mov	r1, r5
 80059ba:	eb43 0901 	adc.w	r9, r3, r1
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	f04f 0300 	mov.w	r3, #0
 80059c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059d2:	4690      	mov	r8, r2
 80059d4:	4699      	mov	r9, r3
 80059d6:	4623      	mov	r3, r4
 80059d8:	eb18 0303 	adds.w	r3, r8, r3
 80059dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059e0:	462b      	mov	r3, r5
 80059e2:	eb49 0303 	adc.w	r3, r9, r3
 80059e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059fe:	460b      	mov	r3, r1
 8005a00:	18db      	adds	r3, r3, r3
 8005a02:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a04:	4613      	mov	r3, r2
 8005a06:	eb42 0303 	adc.w	r3, r2, r3
 8005a0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a14:	f7fb f938 	bl	8000c88 <__aeabi_uldivmod>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4b61      	ldr	r3, [pc, #388]	@ (8005ba4 <UART_SetConfig+0x2d4>)
 8005a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	011c      	lsls	r4, r3, #4
 8005a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a38:	4642      	mov	r2, r8
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	1891      	adds	r1, r2, r2
 8005a3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a40:	415b      	adcs	r3, r3
 8005a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a48:	4641      	mov	r1, r8
 8005a4a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a4e:	4649      	mov	r1, r9
 8005a50:	eb43 0b01 	adc.w	fp, r3, r1
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a68:	4692      	mov	sl, r2
 8005a6a:	469b      	mov	fp, r3
 8005a6c:	4643      	mov	r3, r8
 8005a6e:	eb1a 0303 	adds.w	r3, sl, r3
 8005a72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a76:	464b      	mov	r3, r9
 8005a78:	eb4b 0303 	adc.w	r3, fp, r3
 8005a7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a94:	460b      	mov	r3, r1
 8005a96:	18db      	adds	r3, r3, r3
 8005a98:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	eb42 0303 	adc.w	r3, r2, r3
 8005aa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005aa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005aaa:	f7fb f8ed 	bl	8000c88 <__aeabi_uldivmod>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba4 <UART_SetConfig+0x2d4>)
 8005ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	2264      	movs	r2, #100	@ 0x64
 8005abe:	fb02 f303 	mul.w	r3, r2, r3
 8005ac2:	1acb      	subs	r3, r1, r3
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005aca:	4b36      	ldr	r3, [pc, #216]	@ (8005ba4 <UART_SetConfig+0x2d4>)
 8005acc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ad8:	441c      	add	r4, r3
 8005ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ae4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ae8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	1891      	adds	r1, r2, r2
 8005af2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005af4:	415b      	adcs	r3, r3
 8005af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005af8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005afc:	4641      	mov	r1, r8
 8005afe:	1851      	adds	r1, r2, r1
 8005b00:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b02:	4649      	mov	r1, r9
 8005b04:	414b      	adcs	r3, r1
 8005b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b14:	4659      	mov	r1, fp
 8005b16:	00cb      	lsls	r3, r1, #3
 8005b18:	4651      	mov	r1, sl
 8005b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b1e:	4651      	mov	r1, sl
 8005b20:	00ca      	lsls	r2, r1, #3
 8005b22:	4610      	mov	r0, r2
 8005b24:	4619      	mov	r1, r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	4642      	mov	r2, r8
 8005b2a:	189b      	adds	r3, r3, r2
 8005b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b30:	464b      	mov	r3, r9
 8005b32:	460a      	mov	r2, r1
 8005b34:	eb42 0303 	adc.w	r3, r2, r3
 8005b38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b50:	460b      	mov	r3, r1
 8005b52:	18db      	adds	r3, r3, r3
 8005b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b56:	4613      	mov	r3, r2
 8005b58:	eb42 0303 	adc.w	r3, r2, r3
 8005b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b66:	f7fb f88f 	bl	8000c88 <__aeabi_uldivmod>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba4 <UART_SetConfig+0x2d4>)
 8005b70:	fba3 1302 	umull	r1, r3, r3, r2
 8005b74:	095b      	lsrs	r3, r3, #5
 8005b76:	2164      	movs	r1, #100	@ 0x64
 8005b78:	fb01 f303 	mul.w	r3, r1, r3
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	3332      	adds	r3, #50	@ 0x32
 8005b82:	4a08      	ldr	r2, [pc, #32]	@ (8005ba4 <UART_SetConfig+0x2d4>)
 8005b84:	fba2 2303 	umull	r2, r3, r2, r3
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	f003 0207 	and.w	r2, r3, #7
 8005b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4422      	add	r2, r4
 8005b96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b98:	e106      	b.n	8005da8 <UART_SetConfig+0x4d8>
 8005b9a:	bf00      	nop
 8005b9c:	40011000 	.word	0x40011000
 8005ba0:	40011400 	.word	0x40011400
 8005ba4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bba:	4642      	mov	r2, r8
 8005bbc:	464b      	mov	r3, r9
 8005bbe:	1891      	adds	r1, r2, r2
 8005bc0:	6239      	str	r1, [r7, #32]
 8005bc2:	415b      	adcs	r3, r3
 8005bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bca:	4641      	mov	r1, r8
 8005bcc:	1854      	adds	r4, r2, r1
 8005bce:	4649      	mov	r1, r9
 8005bd0:	eb43 0501 	adc.w	r5, r3, r1
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	00eb      	lsls	r3, r5, #3
 8005bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005be2:	00e2      	lsls	r2, r4, #3
 8005be4:	4614      	mov	r4, r2
 8005be6:	461d      	mov	r5, r3
 8005be8:	4643      	mov	r3, r8
 8005bea:	18e3      	adds	r3, r4, r3
 8005bec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	eb45 0303 	adc.w	r3, r5, r3
 8005bf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c16:	4629      	mov	r1, r5
 8005c18:	008b      	lsls	r3, r1, #2
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c20:	4621      	mov	r1, r4
 8005c22:	008a      	lsls	r2, r1, #2
 8005c24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c28:	f7fb f82e 	bl	8000c88 <__aeabi_uldivmod>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4b60      	ldr	r3, [pc, #384]	@ (8005db4 <UART_SetConfig+0x4e4>)
 8005c32:	fba3 2302 	umull	r2, r3, r3, r2
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	011c      	lsls	r4, r3, #4
 8005c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c4c:	4642      	mov	r2, r8
 8005c4e:	464b      	mov	r3, r9
 8005c50:	1891      	adds	r1, r2, r2
 8005c52:	61b9      	str	r1, [r7, #24]
 8005c54:	415b      	adcs	r3, r3
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	1851      	adds	r1, r2, r1
 8005c60:	6139      	str	r1, [r7, #16]
 8005c62:	4649      	mov	r1, r9
 8005c64:	414b      	adcs	r3, r1
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c74:	4659      	mov	r1, fp
 8005c76:	00cb      	lsls	r3, r1, #3
 8005c78:	4651      	mov	r1, sl
 8005c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c7e:	4651      	mov	r1, sl
 8005c80:	00ca      	lsls	r2, r1, #3
 8005c82:	4610      	mov	r0, r2
 8005c84:	4619      	mov	r1, r3
 8005c86:	4603      	mov	r3, r0
 8005c88:	4642      	mov	r2, r8
 8005c8a:	189b      	adds	r3, r3, r2
 8005c8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c90:	464b      	mov	r3, r9
 8005c92:	460a      	mov	r2, r1
 8005c94:	eb42 0303 	adc.w	r3, r2, r3
 8005c98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ca6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	008b      	lsls	r3, r1, #2
 8005cb8:	4641      	mov	r1, r8
 8005cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cbe:	4641      	mov	r1, r8
 8005cc0:	008a      	lsls	r2, r1, #2
 8005cc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cc6:	f7fa ffdf 	bl	8000c88 <__aeabi_uldivmod>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4611      	mov	r1, r2
 8005cd0:	4b38      	ldr	r3, [pc, #224]	@ (8005db4 <UART_SetConfig+0x4e4>)
 8005cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	2264      	movs	r2, #100	@ 0x64
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	1acb      	subs	r3, r1, r3
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	3332      	adds	r3, #50	@ 0x32
 8005ce4:	4a33      	ldr	r2, [pc, #204]	@ (8005db4 <UART_SetConfig+0x4e4>)
 8005ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cf0:	441c      	add	r4, r3
 8005cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8005cfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d00:	4642      	mov	r2, r8
 8005d02:	464b      	mov	r3, r9
 8005d04:	1891      	adds	r1, r2, r2
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d10:	4641      	mov	r1, r8
 8005d12:	1851      	adds	r1, r2, r1
 8005d14:	6039      	str	r1, [r7, #0]
 8005d16:	4649      	mov	r1, r9
 8005d18:	414b      	adcs	r3, r1
 8005d1a:	607b      	str	r3, [r7, #4]
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d28:	4659      	mov	r1, fp
 8005d2a:	00cb      	lsls	r3, r1, #3
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d32:	4651      	mov	r1, sl
 8005d34:	00ca      	lsls	r2, r1, #3
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	189b      	adds	r3, r3, r2
 8005d40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d42:	464b      	mov	r3, r9
 8005d44:	460a      	mov	r2, r1
 8005d46:	eb42 0303 	adc.w	r3, r2, r3
 8005d4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d56:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d64:	4649      	mov	r1, r9
 8005d66:	008b      	lsls	r3, r1, #2
 8005d68:	4641      	mov	r1, r8
 8005d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d6e:	4641      	mov	r1, r8
 8005d70:	008a      	lsls	r2, r1, #2
 8005d72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d76:	f7fa ff87 	bl	8000c88 <__aeabi_uldivmod>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005db4 <UART_SetConfig+0x4e4>)
 8005d80:	fba3 1302 	umull	r1, r3, r3, r2
 8005d84:	095b      	lsrs	r3, r3, #5
 8005d86:	2164      	movs	r1, #100	@ 0x64
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	3332      	adds	r3, #50	@ 0x32
 8005d92:	4a08      	ldr	r2, [pc, #32]	@ (8005db4 <UART_SetConfig+0x4e4>)
 8005d94:	fba2 2303 	umull	r2, r3, r2, r3
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	f003 020f 	and.w	r2, r3, #15
 8005d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4422      	add	r2, r4
 8005da6:	609a      	str	r2, [r3, #8]
}
 8005da8:	bf00      	nop
 8005daa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005dae:	46bd      	mov	sp, r7
 8005db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db4:	51eb851f 	.word	0x51eb851f

08005db8 <Screen_begin>:
    [CONDITION_YEAR]     = {.max_value = 99, .min_value = 1},
    [CONDITION_HOUR]     = {.max_value = 23, .min_value = 0},
    [CONDITION_MINUTE]   = {.max_value = 59, .min_value = 0}
};

void Screen_begin(UART_HandleTypeDef * UART_Screen) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
    // Init _DWIN UART
	_Screen.Screen_DWIN.pUart = UART_Screen;
 8005dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e40 <Screen_begin+0x88>)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6013      	str	r3, [r2, #0]

    // add receive function callback
	Screen_init_handler_table(&_Screen);
 8005dc6:	481e      	ldr	r0, [pc, #120]	@ (8005e40 <Screen_begin+0x88>)
 8005dc8:	f000 f9fe 	bl	80061c8 <Screen_init_handler_table>
    DWIN_SetCallback((Dwin_t *)&_Screen,(pListenDWIN)Screen_RX_Callback);
 8005dcc:	491d      	ldr	r1, [pc, #116]	@ (8005e44 <Screen_begin+0x8c>)
 8005dce:	481c      	ldr	r0, [pc, #112]	@ (8005e40 <Screen_begin+0x88>)
 8005dd0:	f000 fd05 	bl	80067de <DWIN_SetCallback>

    // Init screen keyboard     
    _Screen.Screen_keyboard.VP_Text = 0xFFFF;
 8005dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e40 <Screen_begin+0x88>)
 8005dd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dda:	819a      	strh	r2, [r3, #12]
    _Screen.Screen_keyboard.Index_String = 0;
 8005ddc:	4b18      	ldr	r3, [pc, #96]	@ (8005e40 <Screen_begin+0x88>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    _Screen.Screen_keyboard.Caplock = 0;   
 8005de4:	4b16      	ldr	r3, [pc, #88]	@ (8005e40 <Screen_begin+0x88>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    DWIN_SetPage((Dwin_t *)&_Screen,106);  // Go to first page when start
 8005dec:	216a      	movs	r1, #106	@ 0x6a
 8005dee:	4814      	ldr	r0, [pc, #80]	@ (8005e40 <Screen_begin+0x88>)
 8005df0:	f000 fc32 	bl	8006658 <DWIN_SetPage>
    DWIN_SetText((Dwin_t *)&_Screen,0x7000,(uint8_t *)"Dang tt", strlen("Dangtt"));
 8005df4:	2306      	movs	r3, #6
 8005df6:	4a14      	ldr	r2, [pc, #80]	@ (8005e48 <Screen_begin+0x90>)
 8005df8:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8005dfc:	4810      	ldr	r0, [pc, #64]	@ (8005e40 <Screen_begin+0x88>)
 8005dfe:	f000 fc52 	bl	80066a6 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)&_Screen,0x7010,(uint8_t *)"Dangtt1762003", sizeof("Dangtt1762003"));
 8005e02:	230e      	movs	r3, #14
 8005e04:	4a11      	ldr	r2, [pc, #68]	@ (8005e4c <Screen_begin+0x94>)
 8005e06:	f247 0110 	movw	r1, #28688	@ 0x7010
 8005e0a:	480d      	ldr	r0, [pc, #52]	@ (8005e40 <Screen_begin+0x88>)
 8005e0c:	f000 fc4b 	bl	80066a6 <DWIN_SetText>
    uint8_t text_show[] = {0x31,0x32};
 8005e10:	f243 2331 	movw	r3, #12849	@ 0x3231
 8005e14:	81bb      	strh	r3, [r7, #12]
    DWIN_SetText((Dwin_t *)&_Screen,0x9000,text_show,2);
 8005e16:	f107 020c 	add.w	r2, r7, #12
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8005e20:	4807      	ldr	r0, [pc, #28]	@ (8005e40 <Screen_begin+0x88>)
 8005e22:	f000 fc40 	bl	80066a6 <DWIN_SetText>
    _Screen.pre_page = 106;
 8005e26:	4b06      	ldr	r3, [pc, #24]	@ (8005e40 <Screen_begin+0x88>)
 8005e28:	226a      	movs	r2, #106	@ 0x6a
 8005e2a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    //     DWIN_Create_Basic_line((Dwin_t *)&_Screen,0x1800,25,200,data,current);
    //     ++current;
    //     HAL_Delay(500);
    // }

    _Screen.Status_Dev_1 = false;
 8005e2e:	4b04      	ldr	r3, [pc, #16]	@ (8005e40 <Screen_begin+0x88>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
}
 8005e36:	bf00      	nop
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	2000059c 	.word	0x2000059c
 8005e44:	08005e6d 	.word	0x08005e6d
 8005e48:	0800b0f0 	.word	0x0800b0f0
 8005e4c:	0800b0f8 	.word	0x0800b0f8

08005e50 <Screen_RX_data>:

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	4803      	ldr	r0, [pc, #12]	@ (8005e68 <Screen_RX_data+0x18>)
 8005e5c:	f000 fccd 	bl	80067fa <DWIN_Listen>
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	2000059c 	.word	0x2000059c

08005e6c <Screen_RX_Callback>:

void Screen_RX_Callback(uint16_t Vpaddress, uint16_t lastByte, uint8_t ASCII_Code) { 
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	80fb      	strh	r3, [r7, #6]
 8005e76:	460b      	mov	r3, r1
 8005e78:	80bb      	strh	r3, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	70fb      	strb	r3, [r7, #3]
    screen_event_t screen_event;

    screen_event.event = Index_VP(Vpaddress,lookup_VP_SIG,SIZE_LOOKUP_VP_SIG);
 8005e7e:	88fb      	ldrh	r3, [r7, #6]
 8005e80:	2204      	movs	r2, #4
 8005e82:	490a      	ldr	r1, [pc, #40]	@ (8005eac <Screen_RX_Callback+0x40>)
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 f954 	bl	8006132 <Index_VP>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	723b      	strb	r3, [r7, #8]
    screen_event.data = lastByte;
 8005e8e:	88bb      	ldrh	r3, [r7, #4]
 8005e90:	817b      	strh	r3, [r7, #10]
    screen_event.ASCII_Code = ASCII_Code;
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	733b      	strb	r3, [r7, #12]

    // call to respective function
    Screen_excute_RX_function(&_Screen,&screen_event);
 8005e96:	f107 0308 	add.w	r3, r7, #8
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4804      	ldr	r0, [pc, #16]	@ (8005eb0 <Screen_RX_Callback+0x44>)
 8005e9e:	f000 f9d1 	bl	8006244 <Screen_excute_RX_function>
}
 8005ea2:	bf00      	nop
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000134 	.word	0x20000134
 8005eb0:	2000059c 	.word	0x2000059c

08005eb4 <Navigation_setting_page>:


#pragma region CALLBACK FUNCTION VP ADRRESS 

void Navigation_setting_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
 8005ebe:	2168      	movs	r1, #104	@ 0x68
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fbc9 	bl	8006658 <DWIN_SetPage>
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <Navigation_home_page>:

void Navigation_home_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
    // Show data

}   
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <Navigation_Next_MainPage>:

void Navigation_Next_MainPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]

    // Change current device
    screen_obj->curr_device++;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

    // Show data with correspond device index
    switch (screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain) {
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8005f04:	4619      	mov	r1, r3
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	440b      	add	r3, r1
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	3349      	adds	r3, #73	@ 0x49
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	3b64      	subs	r3, #100	@ 0x64
 8005f18:	2b0b      	cmp	r3, #11
 8005f1a:	d81c      	bhi.n	8005f56 <Navigation_Next_MainPage+0x72>
 8005f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f24 <Navigation_Next_MainPage+0x40>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005f55 	.word	0x08005f55
 8005f28:	08005f55 	.word	0x08005f55
 8005f2c:	08005f55 	.word	0x08005f55
 8005f30:	08005f57 	.word	0x08005f57
 8005f34:	08005f57 	.word	0x08005f57
 8005f38:	08005f57 	.word	0x08005f57
 8005f3c:	08005f57 	.word	0x08005f57
 8005f40:	08005f57 	.word	0x08005f57
 8005f44:	08005f57 	.word	0x08005f57
 8005f48:	08005f57 	.word	0x08005f57
 8005f4c:	08005f57 	.word	0x08005f57
 8005f50:	08005f55 	.word	0x08005f55
        case DWINPAGE_MAIN : {
            // Show info 

        } break;
 8005f54:	bf00      	nop
        } break;
        case DWINPAGE_MAIN_GRAPH : {

        } break;
    }
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop

08005f64 <Navigation_Next_PrevPage>:

void Navigation_Next_PrevPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]

}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <ON_OFF_Button>:

void ON_OFF_Button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
    // do sth
    screen_obj->Status_Dev_1 = !screen_obj->Status_Dev_1;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bf14      	ite	ne
 8005f8e:	2301      	movne	r3, #1
 8005f90:	2300      	moveq	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	f083 0301 	eor.w	r3, r3, #1
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
    // change icon
    // DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ON_OFF_Icon_1,ON_ICON);
    //    HAL_Delay(1000);
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ON_OFF_Icon_1,screen_obj->Status_Dev_1);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8005fac:	461a      	mov	r2, r3
 8005fae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fbe6 	bl	8006784 <DWIN_SetVariable_Icon>

}
 8005fb8:	bf00      	nop
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <Navigation_keyboard>:

void Navigation_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
    // Switch screen keyboard will excute in screen

    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->data;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	885a      	ldrh	r2, [r3, #2]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	330e      	adds	r3, #14
 8005fde:	2232      	movs	r2, #50	@ 0x32
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f002 fa2b 	bl	800843e <memset>
    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f103 020e 	add.w	r2, r3, #14
 8005fee:	2332      	movs	r3, #50	@ 0x32
 8005ff0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fb56 	bl	80066a6 <DWIN_SetText>
}
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <Keyboard>:

void Keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]
    
    /* The other Functions button */
    if (screen_event->data == 0xF3) { // Delete button
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	885b      	ldrh	r3, [r3, #2]
 8006010:	2bf3      	cmp	r3, #243	@ 0xf3
 8006012:	d10d      	bne.n	8006030 <Keyboard+0x2e>
        if (screen_obj->Screen_keyboard.Index_String != 0) {
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d07a      	beq.n	8006114 <Keyboard+0x112>
            --screen_obj->Screen_keyboard.Index_String;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800602e:	e071      	b.n	8006114 <Keyboard+0x112>
        }
    } else if (screen_event->data == 0xF4) { // Caplock button
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	885b      	ldrh	r3, [r3, #2]
 8006034:	2bf4      	cmp	r3, #244	@ 0xf4
 8006036:	d111      	bne.n	800605c <Keyboard+0x5a>
        /* Toggle status Caplock keyboard */
        screen_obj->Screen_keyboard.Caplock = !screen_obj->Screen_keyboard.Caplock; 
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800603e:	2b00      	cmp	r3, #0
 8006040:	bf14      	ite	ne
 8006042:	2301      	movne	r3, #1
 8006044:	2300      	moveq	r3, #0
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f083 0301 	eor.w	r3, r3, #1
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	b2da      	uxtb	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800605a:	e05b      	b.n	8006114 <Keyboard+0x112>
    } else if (screen_event->data == 0xF1) { // Enter button
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	885b      	ldrh	r3, [r3, #2]
 8006060:	2bf1      	cmp	r3, #241	@ 0xf1
 8006062:	d118      	bne.n	8006096 <Keyboard+0x94>
        // Check if the data is valid
        if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f921 	bl	80062ac <Screen_CheckInput_Keyboard>
 800606a:	4603      	mov	r3, r0
 800606c:	2b01      	cmp	r3, #1
 800606e:	d151      	bne.n	8006114 <Keyboard+0x112>
            // Show data input to VP 
            DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	8999      	ldrh	r1, [r3, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f103 020e 	add.w	r2, r3, #14
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fb10 	bl	80066a6 <DWIN_SetText>
            DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fae2 	bl	8006658 <DWIN_SetPage>
 8006094:	e03e      	b.n	8006114 <Keyboard+0x112>
        }
    }
    /* the data value is the character input -> add to string */
    else if (screen_event->data >= 0x41 && screen_event->data <= 0x5A) { // letter need check Caplock
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	885b      	ldrh	r3, [r3, #2]
 800609a:	2b40      	cmp	r3, #64	@ 0x40
 800609c:	d92b      	bls.n	80060f6 <Keyboard+0xf4>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	885b      	ldrh	r3, [r3, #2]
 80060a2:	2b5a      	cmp	r3, #90	@ 0x5a
 80060a4:	d827      	bhi.n	80060f6 <Keyboard+0xf4>
        if (screen_obj->Screen_keyboard.Caplock) { // Caplock is on
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d012      	beq.n	80060d6 <Keyboard+0xd4>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data + 0x20;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	885b      	ldrh	r3, [r3, #2]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80060bc:	1c59      	adds	r1, r3, #1
 80060be:	b288      	uxth	r0, r1
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	f8a1 0040 	strh.w	r0, [r1, #64]	@ 0x40
 80060c6:	4619      	mov	r1, r3
 80060c8:	f102 0320 	add.w	r3, r2, #32
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	440b      	add	r3, r1
 80060d2:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock) { // Caplock is on
 80060d4:	e01e      	b.n	8006114 <Keyboard+0x112>
        } else {
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	8858      	ldrh	r0, [r3, #2]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	b291      	uxth	r1, r2
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 80060ea:	4619      	mov	r1, r3
 80060ec:	b2c2      	uxtb	r2, r0
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	440b      	add	r3, r1
 80060f2:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock) { // Caplock is on
 80060f4:	e00e      	b.n	8006114 <Keyboard+0x112>
        }
    } else {
        screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	8858      	ldrh	r0, [r3, #2]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	b291      	uxth	r1, r2
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 800610a:	4619      	mov	r1, r3
 800610c:	b2c2      	uxtb	r2, r0
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	440b      	add	r3, r1
 8006112:	739a      	strb	r2, [r3, #14]
    }

    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f103 020e 	add.w	r2, r3, #14
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006120:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fabe 	bl	80066a6 <DWIN_SetText>
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <Index_VP>:
#pragma endregion CALLBACK FUNCTION VP ADRRESS 

#pragma region FUNCTION EXCUTE SCREEN

// binary search index of VP address
uint8_t Index_VP(uint16_t vp, VP_item* VP_array, uint8_t Size_array) {
 8006132:	b480      	push	{r7}
 8006134:	b087      	sub	sp, #28
 8006136:	af00      	add	r7, sp, #0
 8006138:	4603      	mov	r3, r0
 800613a:	6039      	str	r1, [r7, #0]
 800613c:	80fb      	strh	r3, [r7, #6]
 800613e:	4613      	mov	r3, r2
 8006140:	717b      	strb	r3, [r7, #5]
    int left = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
    int right = Size_array - 1;
 8006146:	797b      	ldrb	r3, [r7, #5]
 8006148:	3b01      	subs	r3, #1
 800614a:	613b      	str	r3, [r7, #16]
    int mid;
    for (int i = left; i <= right; i++) {
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	e02e      	b.n	80061b0 <Index_VP+0x7e>
        mid = (left + right)/2;
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4413      	add	r3, r2
 8006158:	0fda      	lsrs	r2, r3, #31
 800615a:	4413      	add	r3, r2
 800615c:	105b      	asrs	r3, r3, #1
 800615e:	60bb      	str	r3, [r7, #8]
        if (VP_array[mid].VP_address == vp) {
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	88fa      	ldrh	r2, [r7, #6]
 800616c:	429a      	cmp	r2, r3
 800616e:	d105      	bne.n	800617c <Index_VP+0x4a>
            return VP_array[mid].index;     // Return the index corresponding to the VP
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	4413      	add	r3, r2
 8006178:	789b      	ldrb	r3, [r3, #2]
 800617a:	e01e      	b.n	80061ba <Index_VP+0x88>
        } else if (VP_array[mid].VP_address > vp) {
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	4413      	add	r3, r2
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	88fa      	ldrh	r2, [r7, #6]
 8006188:	429a      	cmp	r2, r3
 800618a:	d203      	bcs.n	8006194 <Index_VP+0x62>
            right = mid - 1;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	3b01      	subs	r3, #1
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	e00a      	b.n	80061aa <Index_VP+0x78>
        } else if (VP_array[mid].VP_address < vp) {
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	4413      	add	r3, r2
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	88fa      	ldrh	r2, [r7, #6]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d902      	bls.n	80061aa <Index_VP+0x78>
            left = mid + 1;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	3301      	adds	r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
    for (int i = left; i <= right; i++) {
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3301      	adds	r3, #1
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	ddcc      	ble.n	8006152 <Index_VP+0x20>
        }
    }
    return 255; // VP input is not valid
 80061b8:	23ff      	movs	r3, #255	@ 0xff
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <Screen_init_handler_table>:

void Screen_init_handler_table(Screen_t *const obj_screen) {
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
                                                                a_handler_on_off_sig ,
                                                                a_handler_keyboard_sig,
                                                                a_handler_navigation_keyboard  };

    // Assign the callback function to handler table
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PAGE]     = Navigation_setting_page ;
 80061d0:	4b14      	ldr	r3, [pc, #80]	@ (8006224 <Screen_init_handler_table+0x5c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a14      	ldr	r2, [pc, #80]	@ (8006228 <Screen_init_handler_table+0x60>)
 80061d6:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_HOME]             = Navigation_home_page;
 80061d8:	4b12      	ldr	r3, [pc, #72]	@ (8006224 <Screen_init_handler_table+0x5c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3308      	adds	r3, #8
 80061de:	4a13      	ldr	r2, [pc, #76]	@ (800622c <Screen_init_handler_table+0x64>)
 80061e0:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_NEXT_MAINPAGE]    = Navigation_Next_MainPage;
 80061e2:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <Screen_init_handler_table+0x5c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3318      	adds	r3, #24
 80061e8:	4a11      	ldr	r2, [pc, #68]	@ (8006230 <Screen_init_handler_table+0x68>)
 80061ea:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_PREV_MAINPAGE]    = Navigation_Next_PrevPage;
 80061ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <Screen_init_handler_table+0x5c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	331c      	adds	r3, #28
 80061f2:	4a10      	ldr	r2, [pc, #64]	@ (8006234 <Screen_init_handler_table+0x6c>)
 80061f4:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ON_OFF][ON_OFF_DEV_1]                    = ON_OFF_Button;
 80061f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006224 <Screen_init_handler_table+0x5c>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	4a0f      	ldr	r2, [pc, #60]	@ (8006238 <Screen_init_handler_table+0x70>)
 80061fc:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_NAVIGATION_KEYBOARD][VALUE_NAVIGATION_KEYBOARD] = Navigation_keyboard;
 80061fe:	4b09      	ldr	r3, [pc, #36]	@ (8006224 <Screen_init_handler_table+0x5c>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	4a0e      	ldr	r2, [pc, #56]	@ (800623c <Screen_init_handler_table+0x74>)
 8006204:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD]             = Keyboard;
 8006206:	4b07      	ldr	r3, [pc, #28]	@ (8006224 <Screen_init_handler_table+0x5c>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	4a0d      	ldr	r2, [pc, #52]	@ (8006240 <Screen_init_handler_table+0x78>)
 800620c:	601a      	str	r2, [r3, #0]

    // assign handler table to handler table of object
    obj_screen->p_handler_table = (void *)handler_function_table;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a04      	ldr	r2, [pc, #16]	@ (8006224 <Screen_init_handler_table+0x5c>)
 8006212:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20000144 	.word	0x20000144
 8006228:	08005eb5 	.word	0x08005eb5
 800622c:	08005ecf 	.word	0x08005ecf
 8006230:	08005ee5 	.word	0x08005ee5
 8006234:	08005f65 	.word	0x08005f65
 8006238:	08005f7b 	.word	0x08005f7b
 800623c:	08005fc1 	.word	0x08005fc1
 8006240:	08006003 	.word	0x08006003

08006244 <Screen_excute_RX_function>:

void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
    // do sth ...


	handler_func **handler_function_table = (handler_func **) obj_screen->p_handler_table;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006254:	60fb      	str	r3, [r7, #12]
    // excute the callback function
    if (screen_e->event == SIG_KEYBOARD) {  // ENVENT KEYBOARD
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d107      	bne.n	800626e <Screen_excute_RX_function+0x2a>
        handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD](obj_screen, screen_e);   
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3308      	adds	r3, #8
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	4798      	blx	r3
    } else if (screen_e->event ==SIG_NAVIGATION_KEYBOARD) {  // SWTICH TO KEYBOARD BUTTON
        handler_function_table[SIG_NAVIGATION_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
    } else {
        handler_function_table[screen_e->event][screen_e->data](obj_screen, screen_e);
    }  
}
 800626c:	e019      	b.n	80062a2 <Screen_excute_RX_function+0x5e>
    } else if (screen_e->event ==SIG_NAVIGATION_KEYBOARD) {  // SWTICH TO KEYBOARD BUTTON
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b03      	cmp	r3, #3
 8006274:	d107      	bne.n	8006286 <Screen_excute_RX_function+0x42>
        handler_function_table[SIG_NAVIGATION_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	330c      	adds	r3, #12
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	4798      	blx	r3
}
 8006284:	e00d      	b.n	80062a2 <Screen_excute_RX_function+0x5e>
        handler_function_table[screen_e->event][screen_e->data](obj_screen, screen_e);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	885b      	ldrh	r3, [r3, #2]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
}
 80062a2:	bf00      	nop
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <Screen_CheckInput_Keyboard>:

#pragma endregion FUNCTION EXCUTE SCREEN

#pragma region FUNCTION SCREEN 

Return_Status Screen_CheckInput_Keyboard(Screen_t *const obj_screen) {
 80062ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062b0:	b08d      	sub	sp, #52	@ 0x34
 80062b2:	af02      	add	r7, sp, #8
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	466b      	mov	r3, sp
 80062b8:	461e      	mov	r6, r3
    char string[obj_screen->Screen_keyboard.Index_String];
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 80062c0:	460b      	mov	r3, r1
 80062c2:	3b01      	subs	r3, #1
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80062c6:	b28b      	uxth	r3, r1
 80062c8:	2200      	movs	r2, #0
 80062ca:	4698      	mov	r8, r3
 80062cc:	4691      	mov	r9, r2
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062e2:	b28b      	uxth	r3, r1
 80062e4:	2200      	movs	r2, #0
 80062e6:	461c      	mov	r4, r3
 80062e8:	4615      	mov	r5, r2
 80062ea:	f04f 0200 	mov.w	r2, #0
 80062ee:	f04f 0300 	mov.w	r3, #0
 80062f2:	00eb      	lsls	r3, r5, #3
 80062f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062f8:	00e2      	lsls	r2, r4, #3
 80062fa:	460b      	mov	r3, r1
 80062fc:	3307      	adds	r3, #7
 80062fe:	08db      	lsrs	r3, r3, #3
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	ebad 0d03 	sub.w	sp, sp, r3
 8006306:	ab02      	add	r3, sp, #8
 8006308:	3300      	adds	r3, #0
 800630a:	623b      	str	r3, [r7, #32]
    char warm_string[20] = {0};
 800630c:	f107 0308 	add.w	r3, r7, #8
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	605a      	str	r2, [r3, #4]
 8006316:	609a      	str	r2, [r3, #8]
 8006318:	60da      	str	r2, [r3, #12]
 800631a:	611a      	str	r2, [r3, #16]
    float data_compare;
    // copy string
    memcpy(string,obj_screen->Screen_keyboard.String,obj_screen->Screen_keyboard.Index_String);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f103 010e 	add.w	r1, r3, #14
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006328:	461a      	mov	r2, r3
 800632a:	6a38      	ldr	r0, [r7, #32]
 800632c:	f002 f919 	bl	8008562 <memcpy>
    /* compare data with limit */
    data_compare = atof(string);
 8006330:	6a38      	ldr	r0, [r7, #32]
 8006332:	f000 faab 	bl	800688c <atof>
 8006336:	ec53 2b10 	vmov	r2, r3, d0
 800633a:	4610      	mov	r0, r2
 800633c:	4619      	mov	r1, r3
 800633e:	f7fa fc53 	bl	8000be8 <__aeabi_d2f>
 8006342:	4603      	mov	r3, r0
 8006344:	61fb      	str	r3, [r7, #28]
    if (data_compare > obj_screen->Screen_condition->max_value) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634a:	edd3 7a00 	vldr	s15, [r3]
 800634e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800635a:	dd19      	ble.n	8006390 <Screen_CheckInput_Keyboard+0xe4>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MAX: %.2f", obj_screen->Screen_condition->max_value);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f7fa f8f0 	bl	8000548 <__aeabi_f2d>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	f107 0008 	add.w	r0, r7, #8
 8006370:	e9cd 2300 	strd	r2, r3, [sp]
 8006374:	4a1c      	ldr	r2, [pc, #112]	@ (80063e8 <Screen_CheckInput_Keyboard+0x13c>)
 8006376:	2114      	movs	r1, #20
 8006378:	f001 ffc6 	bl	8008308 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,(uint8_t *)warm_string,sizeof(warm_string));
 800637c:	f107 0208 	add.w	r2, r7, #8
 8006380:	2314      	movs	r3, #20
 8006382:	f44f 4172 	mov.w	r1, #61952	@ 0xf200
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f98d 	bl	80066a6 <DWIN_SetText>
        return Status_ERROR;
 800638c:	2300      	movs	r3, #0
 800638e:	e025      	b.n	80063dc <Screen_CheckInput_Keyboard+0x130>
    } else if (data_compare < obj_screen->Screen_condition->min_value) {
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006394:	edd3 7a01 	vldr	s15, [r3, #4]
 8006398:	ed97 7a07 	vldr	s14, [r7, #28]
 800639c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a4:	d519      	bpl.n	80063da <Screen_CheckInput_Keyboard+0x12e>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MIN: %.2f", obj_screen->Screen_condition->min_value);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fa f8cb 	bl	8000548 <__aeabi_f2d>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	f107 0008 	add.w	r0, r7, #8
 80063ba:	e9cd 2300 	strd	r2, r3, [sp]
 80063be:	4a0b      	ldr	r2, [pc, #44]	@ (80063ec <Screen_CheckInput_Keyboard+0x140>)
 80063c0:	2114      	movs	r1, #20
 80063c2:	f001 ffa1 	bl	8008308 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,(uint8_t *)warm_string,sizeof(warm_string));
 80063c6:	f107 0208 	add.w	r2, r7, #8
 80063ca:	2314      	movs	r3, #20
 80063cc:	f44f 4172 	mov.w	r1, #61952	@ 0xf200
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f968 	bl	80066a6 <DWIN_SetText>
        return Status_ERROR;
 80063d6:	2300      	movs	r3, #0
 80063d8:	e000      	b.n	80063dc <Screen_CheckInput_Keyboard+0x130>
    } 
    return Status_SUCCESS; 
 80063da:	2301      	movs	r3, #1
 80063dc:	46b5      	mov	sp, r6
}
 80063de:	4618      	mov	r0, r3
 80063e0:	372c      	adds	r7, #44	@ 0x2c
 80063e2:	46bd      	mov	sp, r7
 80063e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063e8:	0800b108 	.word	0x0800b108
 80063ec:	0800b114 	.word	0x0800b114

080063f0 <ADS1115_Init>:
void ADS1115_makeConfig_frame(uint8_t *buffer,config_reg_t *reg_config);
void compute_VoltageConv(ADS1115_t *pADS1115);
float getValue(ADS1115_t *pADS1115);
void ADS1115_setThresholds(ADS1115_t *pADS1115, int16_t lowValue, int16_t highValue);

ADS115_Status ADS1115_Init(ADS1115_t *pADS1115, I2C_HandleTypeDef *i2c, uint16_t dev_address) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	4613      	mov	r3, r2
 80063fc:	80fb      	strh	r3, [r7, #6]
    pADS1115->i2c_port = i2c;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	601a      	str	r2, [r3, #0]
//    memcpy(pADS1115->i2c_port,i2c,sizeof(I2C_HandleTypeDef));
    pADS1115->dev_address = dev_address << 1;
 8006404:	88fb      	ldrh	r3, [r7, #6]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	b2da      	uxtb	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	711a      	strb	r2, [r3, #4]

    compute_VoltageConv(pADS1115);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f8dd 	bl	80065d0 <compute_VoltageConv>
    /* Test communication */
    if (HAL_I2C_IsDeviceReady(pADS1115->i2c_port, pADS1115->dev_address, 1, 100) == HAL_OK) {
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	791b      	ldrb	r3, [r3, #4]
 800641e:	4619      	mov	r1, r3
 8006420:	2364      	movs	r3, #100	@ 0x64
 8006422:	2201      	movs	r2, #1
 8006424:	f7fc ff96 	bl	8003354 <HAL_I2C_IsDeviceReady>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <ADS1115_Init+0x42>
        return ADS1115_Init_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	e000      	b.n	8006434 <ADS1115_Init+0x44>
    }
    return ADS1115_Init_Fail;
 8006432:	2301      	movs	r3, #1
    HAL_Delay(1);
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <ADS1115_single_getdata>:

float ADS1115_single_getdata(ADS1115_t *pADS1115, MultiplexerConfig_t channel) {
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af04      	add	r7, sp, #16
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	70fb      	strb	r3, [r7, #3]
    uint8_t  config_val[2];
    uint16_t config_check;
    /* update channel */
    uint8_t bytes[3] = {0};
 8006448:	f107 0308 	add.w	r3, r7, #8
 800644c:	2100      	movs	r1, #0
 800644e:	460a      	mov	r2, r1
 8006450:	801a      	strh	r2, [r3, #0]
 8006452:	460a      	mov	r2, r1
 8006454:	709a      	strb	r2, [r3, #2]
    pADS1115->config->channel = channel;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	78fa      	ldrb	r2, [r7, #3]
 800645c:	701a      	strb	r2, [r3, #0]

    ADS1115_makeConfig_frame(bytes,pADS1115->config);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	f107 0308 	add.w	r3, r7, #8
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f000 f86b 	bl	8006544 <ADS1115_makeConfig_frame>
    /* Set single conversion */
    bytes[1] |= (1u << 7);
 800646e:	7a7b      	ldrb	r3, [r7, #9]
 8006470:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006474:	b2db      	uxtb	r3, r3
 8006476:	727b      	strb	r3, [r7, #9]

    HAL_I2C_Master_Transmit(pADS1115->i2c_port,pADS1115->dev_address,bytes,3,100);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	791b      	ldrb	r3, [r3, #4]
 8006480:	4619      	mov	r1, r3
 8006482:	f107 0208 	add.w	r2, r7, #8
 8006486:	2364      	movs	r3, #100	@ 0x64
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	2303      	movs	r3, #3
 800648c:	f7fc fc32 	bl	8002cf4 <HAL_I2C_Master_Transmit>
    HAL_Delay(8);
 8006490:	2008      	movs	r0, #8
 8006492:	f7fb fe71 	bl	8002178 <HAL_Delay>
    // if (HAL_I2C_Mem_Read( pADS1115->i2c_port, pADS1115->dev_address, 0x01, I2C_MEMADD_SIZE_8BIT, config_val, 2, 100 ) != HAL_OK ) {
    // 	return -1;
    // }
    /* wait conversion complete */
    do {
        HAL_I2C_Mem_Read( pADS1115->i2c_port, pADS1115->dev_address, 0x01, I2C_MEMADD_SIZE_8BIT, config_val, 2, 100 );
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	791b      	ldrb	r3, [r3, #4]
 800649e:	4619      	mov	r1, r3
 80064a0:	2364      	movs	r3, #100	@ 0x64
 80064a2:	9302      	str	r3, [sp, #8]
 80064a4:	2302      	movs	r3, #2
 80064a6:	9301      	str	r3, [sp, #4]
 80064a8:	f107 030c 	add.w	r3, r7, #12
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	2301      	movs	r3, #1
 80064b0:	2201      	movs	r2, #1
 80064b2:	f7fc fd1d 	bl	8002ef0 <HAL_I2C_Mem_Read>
        config_check = ((config_val[0] << 8) | config_val[1]);
 80064b6:	7b3b      	ldrb	r3, [r7, #12]
 80064b8:	b21b      	sxth	r3, r3
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	b21a      	sxth	r2, r3
 80064be:	7b7b      	ldrb	r3, [r7, #13]
 80064c0:	b21b      	sxth	r3, r3
 80064c2:	4313      	orrs	r3, r2
 80064c4:	b21b      	sxth	r3, r3
 80064c6:	81fb      	strh	r3, [r7, #14]
    } while ((config_check & 0x8000) == 0);
 80064c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dae2      	bge.n	8006496 <ADS1115_single_getdata+0x5a>
    
    return getValue(pADS1115);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f807 	bl	80064e4 <getValue>
 80064d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80064da:	eeb0 0a67 	vmov.f32	s0, s15
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <getValue>:

float getValue(ADS1115_t *pADS1115) {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af04      	add	r7, sp, #16
 80064ea:	6078      	str	r0, [r7, #4]
    uint8_t bytes[2] = {0};
 80064ec:	2300      	movs	r3, #0
 80064ee:	81bb      	strh	r3, [r7, #12]
    int16_t value_ret;
	bytes[0] = 0x00; /* Conversion register contains the result */
 80064f0:	2300      	movs	r3, #0
 80064f2:	733b      	strb	r3, [r7, #12]
    // HAL_I2C_Master_Transmit(pADS1115->i2c_port,pADS1115->dev_address,bytes,1,100);

    // if (HAL_I2C_Master_Receive(pADS1115->i2c_port,pADS1115->dev_address,bytes,2,100) != HAL_OK) {
    //     return ADS1115_Read_Data_Fail;
    // }
    HAL_I2C_Mem_Read(pADS1115->i2c_port, pADS1115->dev_address, 0x00, I2C_MEMADD_SIZE_8BIT, bytes, 2, 100);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	791b      	ldrb	r3, [r3, #4]
 80064fc:	4619      	mov	r1, r3
 80064fe:	2364      	movs	r3, #100	@ 0x64
 8006500:	9302      	str	r3, [sp, #8]
 8006502:	2302      	movs	r3, #2
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	f107 030c 	add.w	r3, r7, #12
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	2301      	movs	r3, #1
 800650e:	2200      	movs	r2, #0
 8006510:	f7fc fcee 	bl	8002ef0 <HAL_I2C_Mem_Read>

    value_ret = ((bytes[0] << 8) | bytes[1]);
 8006514:	7b3b      	ldrb	r3, [r7, #12]
 8006516:	b21b      	sxth	r3, r3
 8006518:	021b      	lsls	r3, r3, #8
 800651a:	b21a      	sxth	r2, r3
 800651c:	7b7b      	ldrb	r3, [r7, #13]
 800651e:	b21b      	sxth	r3, r3
 8006520:	4313      	orrs	r3, r2
 8006522:	81fb      	strh	r3, [r7, #14]
    /* Convert to Voltage */
    return value_ret * pADS1115->voltageConv;
 8006524:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006528:	ee07 3a90 	vmov	s15, r3
 800652c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	edd3 7a02 	vldr	s15, [r3, #8]
 8006536:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800653a:	eeb0 0a67 	vmov.f32	s0, s15
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <ADS1115_makeConfig_frame>:
    ADS1115_makeConfig_frame(byte_write,pADS1115->config);

    HAL_I2C_Master_Transmit(pADS1115->i2c_port,pADS1115->dev_address,byte_write,3,100);
}

void ADS1115_makeConfig_frame(uint8_t *buffer,config_reg_t *reg_config) {
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
    buffer[0] = 0x01; /* points to Config register */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	701a      	strb	r2, [r3, #0]
    buffer[1] = (reg_config->channel << 4) | (reg_config->PGA << 1) | (reg_config->mode << 0);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	b25b      	sxtb	r3, r3
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	b25a      	sxtb	r2, r3
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	789b      	ldrb	r3, [r3, #2]
 8006562:	b25b      	sxtb	r3, r3
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	b25b      	sxtb	r3, r3
 8006568:	4313      	orrs	r3, r2
 800656a:	b25a      	sxtb	r2, r3
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	78db      	ldrb	r3, [r3, #3]
 8006570:	b25b      	sxtb	r3, r3
 8006572:	4313      	orrs	r3, r2
 8006574:	b25a      	sxtb	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3301      	adds	r3, #1
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]
    buffer[2] = (reg_config->DataRate << 5) | (reg_config->compareMode << 4) | (reg_config->polarityMode << 3) | (reg_config->latchingMode << 2) | (reg_config->queueComparator << 0);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	b25b      	sxtb	r3, r3
 8006584:	015b      	lsls	r3, r3, #5
 8006586:	b25a      	sxtb	r2, r3
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	791b      	ldrb	r3, [r3, #4]
 800658c:	b25b      	sxtb	r3, r3
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	b25b      	sxtb	r3, r3
 8006592:	4313      	orrs	r3, r2
 8006594:	b25a      	sxtb	r2, r3
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	795b      	ldrb	r3, [r3, #5]
 800659a:	b25b      	sxtb	r3, r3
 800659c:	00db      	lsls	r3, r3, #3
 800659e:	b25b      	sxtb	r3, r3
 80065a0:	4313      	orrs	r3, r2
 80065a2:	b25a      	sxtb	r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	799b      	ldrb	r3, [r3, #6]
 80065a8:	b25b      	sxtb	r3, r3
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	b25b      	sxtb	r3, r3
 80065ae:	4313      	orrs	r3, r2
 80065b0:	b25a      	sxtb	r2, r3
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	79db      	ldrb	r3, [r3, #7]
 80065b6:	b25b      	sxtb	r3, r3
 80065b8:	4313      	orrs	r3, r2
 80065ba:	b25a      	sxtb	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3302      	adds	r3, #2
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <compute_VoltageConv>:

void compute_VoltageConv(ADS1115_t *pADS1115) {
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
    switch (pADS1115->config->PGA) {
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	789b      	ldrb	r3, [r3, #2]
 80065de:	2b05      	cmp	r3, #5
 80065e0:	d826      	bhi.n	8006630 <compute_VoltageConv+0x60>
 80065e2:	a201      	add	r2, pc, #4	@ (adr r2, 80065e8 <compute_VoltageConv+0x18>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	08006601 	.word	0x08006601
 80065ec:	08006609 	.word	0x08006609
 80065f0:	08006611 	.word	0x08006611
 80065f4:	08006619 	.word	0x08006619
 80065f8:	08006621 	.word	0x08006621
 80065fc:	08006629 	.word	0x08006629
        case PGA_6_144 : {
            pADS1115->voltageConv = (6.144f)/(32768.0f);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a0f      	ldr	r2, [pc, #60]	@ (8006640 <compute_VoltageConv+0x70>)
 8006604:	609a      	str	r2, [r3, #8]
        } break;
 8006606:	e014      	b.n	8006632 <compute_VoltageConv+0x62>
        case PGA_4_096 : {
            pADS1115->voltageConv = (4.096f)/(32768.0f);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a0e      	ldr	r2, [pc, #56]	@ (8006644 <compute_VoltageConv+0x74>)
 800660c:	609a      	str	r2, [r3, #8]
        } break;
 800660e:	e010      	b.n	8006632 <compute_VoltageConv+0x62>
        case PGA_2_048 : {
            pADS1115->voltageConv = (2.048f)/(32768.0f);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a0d      	ldr	r2, [pc, #52]	@ (8006648 <compute_VoltageConv+0x78>)
 8006614:	609a      	str	r2, [r3, #8]
        } break;
 8006616:	e00c      	b.n	8006632 <compute_VoltageConv+0x62>
        case PGA_1_024 : {
            pADS1115->voltageConv = (1.024f)/(32768.0f);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a0c      	ldr	r2, [pc, #48]	@ (800664c <compute_VoltageConv+0x7c>)
 800661c:	609a      	str	r2, [r3, #8]
        } break;
 800661e:	e008      	b.n	8006632 <compute_VoltageConv+0x62>
        case PGA_0_512 : {
            pADS1115->voltageConv = (0.512f)/(32768.0f);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a0b      	ldr	r2, [pc, #44]	@ (8006650 <compute_VoltageConv+0x80>)
 8006624:	609a      	str	r2, [r3, #8]
        } break;
 8006626:	e004      	b.n	8006632 <compute_VoltageConv+0x62>
        case PGA_0_256 : {
            pADS1115->voltageConv = (0.256f)/(32768.0f);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a0a      	ldr	r2, [pc, #40]	@ (8006654 <compute_VoltageConv+0x84>)
 800662c:	609a      	str	r2, [r3, #8]
        } break; 
 800662e:	e000      	b.n	8006632 <compute_VoltageConv+0x62>
        
        default : break;
 8006630:	bf00      	nop
    }
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	39449ba6 	.word	0x39449ba6
 8006644:	3903126f 	.word	0x3903126f
 8006648:	3883126f 	.word	0x3883126f
 800664c:	3803126f 	.word	0x3803126f
 8006650:	3783126f 	.word	0x3783126f
 8006654:	3703126f 	.word	0x3703126f

08006658 <DWIN_SetPage>:
#include "DWIN_HMI.h"

void DWIN_SetPage(Dwin_t *pDwin, uint8_t page)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	70fb      	strb	r3, [r7, #3]
    uint8_t sendBuffer[10] = {CMD_HEAD1, CMD_HEAD2, 0x07, CMD_WRITE, 0x00, 0x84, 0x5A, 0x01, 0x00, page};
 8006664:	235a      	movs	r3, #90	@ 0x5a
 8006666:	733b      	strb	r3, [r7, #12]
 8006668:	23a5      	movs	r3, #165	@ 0xa5
 800666a:	737b      	strb	r3, [r7, #13]
 800666c:	2307      	movs	r3, #7
 800666e:	73bb      	strb	r3, [r7, #14]
 8006670:	2382      	movs	r3, #130	@ 0x82
 8006672:	73fb      	strb	r3, [r7, #15]
 8006674:	2300      	movs	r3, #0
 8006676:	743b      	strb	r3, [r7, #16]
 8006678:	2384      	movs	r3, #132	@ 0x84
 800667a:	747b      	strb	r3, [r7, #17]
 800667c:	235a      	movs	r3, #90	@ 0x5a
 800667e:	74bb      	strb	r3, [r7, #18]
 8006680:	2301      	movs	r3, #1
 8006682:	74fb      	strb	r3, [r7, #19]
 8006684:	2300      	movs	r3, #0
 8006686:	753b      	strb	r3, [r7, #20]
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	f107 010c 	add.w	r1, r7, #12
 8006694:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006698:	220a      	movs	r2, #10
 800669a:	f7fe fb51 	bl	8004d40 <HAL_UART_Transmit>
}
 800669e:	bf00      	nop
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <DWIN_SetText>:

void DWIN_SetText(Dwin_t *pDwin, uint16_t VP_address, uint8_t *textData, uint16_t datalen) {
 80066a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066aa:	b08a      	sub	sp, #40	@ 0x28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	607a      	str	r2, [r7, #4]
 80066b2:	461a      	mov	r2, r3
 80066b4:	460b      	mov	r3, r1
 80066b6:	817b      	strh	r3, [r7, #10]
 80066b8:	4613      	mov	r3, r2
 80066ba:	813b      	strh	r3, [r7, #8]
 80066bc:	466b      	mov	r3, sp
 80066be:	469a      	mov	sl, r3
    uint8_t ffEnding[2] = { 0xFF, 0xFF };
 80066c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80066c4:	83bb      	strh	r3, [r7, #28]
    uint8_t sendBuffer[8 + datalen];
 80066c6:	893b      	ldrh	r3, [r7, #8]
 80066c8:	f103 0608 	add.w	r6, r3, #8
 80066cc:	1e73      	subs	r3, r6, #1
 80066ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d0:	4632      	mov	r2, r6
 80066d2:	2300      	movs	r3, #0
 80066d4:	4690      	mov	r8, r2
 80066d6:	4699      	mov	r9, r3
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066ec:	4632      	mov	r2, r6
 80066ee:	2300      	movs	r3, #0
 80066f0:	4614      	mov	r4, r2
 80066f2:	461d      	mov	r5, r3
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	00eb      	lsls	r3, r5, #3
 80066fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006702:	00e2      	lsls	r2, r4, #3
 8006704:	4633      	mov	r3, r6
 8006706:	3307      	adds	r3, #7
 8006708:	08db      	lsrs	r3, r3, #3
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	ebad 0d03 	sub.w	sp, sp, r3
 8006710:	466b      	mov	r3, sp
 8006712:	3300      	adds	r3, #0
 8006714:	623b      	str	r3, [r7, #32]

    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 8006716:	235a      	movs	r3, #90	@ 0x5a
 8006718:	753b      	strb	r3, [r7, #20]
 800671a:	23a5      	movs	r3, #165	@ 0xa5
 800671c:	757b      	strb	r3, [r7, #21]
 800671e:	893b      	ldrh	r3, [r7, #8]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	3305      	adds	r3, #5
 8006724:	b2db      	uxtb	r3, r3
 8006726:	75bb      	strb	r3, [r7, #22]
 8006728:	2382      	movs	r3, #130	@ 0x82
 800672a:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 800672c:	897b      	ldrh	r3, [r7, #10]
 800672e:	0a1b      	lsrs	r3, r3, #8
 8006730:	b29b      	uxth	r3, r3
 8006732:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 8006734:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 8006736:	897b      	ldrh	r3, [r7, #10]
 8006738:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800673a:	767b      	strb	r3, [r7, #25]
    
    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	461a      	mov	r2, r3
 8006740:	f107 0314 	add.w	r3, r7, #20
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	6010      	str	r0, [r2, #0]
 8006748:	889b      	ldrh	r3, [r3, #4]
 800674a:	8093      	strh	r3, [r2, #4]
    memcpy(sendBuffer + 6, textData, datalen);
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	3306      	adds	r3, #6
 8006750:	893a      	ldrh	r2, [r7, #8]
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	4618      	mov	r0, r3
 8006756:	f001 ff04 	bl	8008562 <memcpy>
    memcpy(sendBuffer + (6 + datalen), ffEnding, sizeof(ffEnding));
 800675a:	893b      	ldrh	r3, [r7, #8]
 800675c:	3306      	adds	r3, #6
 800675e:	461a      	mov	r2, r3
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	4413      	add	r3, r2
 8006764:	8bba      	ldrh	r2, [r7, #28]
 8006766:	801a      	strh	r2, [r3, #0]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6818      	ldr	r0, [r3, #0]
 800676c:	b2b2      	uxth	r2, r6
 800676e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006772:	6a39      	ldr	r1, [r7, #32]
 8006774:	f7fe fae4 	bl	8004d40 <HAL_UART_Transmit>
 8006778:	46d5      	mov	sp, sl
}
 800677a:	bf00      	nop
 800677c:	3728      	adds	r7, #40	@ 0x28
 800677e:	46bd      	mov	sp, r7
 8006780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006784 <DWIN_SetVariable_Icon>:
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
}

void DWIN_SetVariable_Icon(Dwin_t *pDwin, uint16_t VP_address, uint16_t data ) {
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	807b      	strh	r3, [r7, #2]
 8006790:	4613      	mov	r3, r2
 8006792:	803b      	strh	r3, [r7, #0]
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8006794:	235a      	movs	r3, #90	@ 0x5a
 8006796:	723b      	strb	r3, [r7, #8]
 8006798:	23a5      	movs	r3, #165	@ 0xa5
 800679a:	727b      	strb	r3, [r7, #9]
 800679c:	2305      	movs	r3, #5
 800679e:	72bb      	strb	r3, [r7, #10]
 80067a0:	2382      	movs	r3, #130	@ 0x82
 80067a2:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 80067a4:	887b      	ldrh	r3, [r7, #2]
 80067a6:	0a1b      	lsrs	r3, r3, #8
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80067ac:	733b      	strb	r3, [r7, #12]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 80067ae:	887b      	ldrh	r3, [r7, #2]
 80067b0:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80067b2:	737b      	strb	r3, [r7, #13]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 80067b4:	883b      	ldrh	r3, [r7, #0]
 80067b6:	0a1b      	lsrs	r3, r3, #8
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80067bc:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 80067be:	883b      	ldrh	r3, [r7, #0]
 80067c0:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80067c2:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6818      	ldr	r0, [r3, #0]
 80067c8:	f107 0108 	add.w	r1, r7, #8
 80067cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80067d0:	2208      	movs	r2, #8
 80067d2:	f7fe fab5 	bl	8004d40 <HAL_UART_Transmit>
}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <DWIN_SetCallback>:
    }
}

// Set DWIN callback function when receive data 
void DWIN_SetCallback(Dwin_t *pDwin, pListenDWIN dwin_callback)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
    pDwin->p_ListenDWIN_Callback = dwin_callback;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	609a      	str	r2, [r3, #8]
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <DWIN_Listen>:

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
    uint8_t message_ASCII;
    uint16_t VPaddress;
    uint16_t lastByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b5a      	cmp	r3, #90	@ 0x5a
 800680a:	d13b      	bne.n	8006884 <DWIN_Listen+0x8a>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	3301      	adds	r3, #1
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2ba5      	cmp	r3, #165	@ 0xa5
 8006814:	d136      	bne.n	8006884 <DWIN_Listen+0x8a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	3303      	adds	r3, #3
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b83      	cmp	r3, #131	@ 0x83
 800681e:	d131      	bne.n	8006884 <DWIN_Listen+0x8a>
        {
            datalength = RX_Buffer[2];
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	789b      	ldrb	r3, [r3, #2]
 8006824:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	3302      	adds	r3, #2
 800682a:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	3304      	adds	r3, #4
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	b21b      	sxth	r3, r3
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	b21a      	sxth	r2, r3
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	3305      	adds	r3, #5
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	b21b      	sxth	r3, r3
 8006840:	4313      	orrs	r3, r2
 8006842:	b21b      	sxth	r3, r3
 8006844:	81bb      	strh	r3, [r7, #12]
            // get return key value
            lastByte = (uint16_t)(RX_Buffer[datalength-1] << 8 | RX_Buffer[datalength]);
 8006846:	7bfb      	ldrb	r3, [r7, #15]
 8006848:	3b01      	subs	r3, #1
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	4413      	add	r3, r2
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	b21b      	sxth	r3, r3
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	b21a      	sxth	r2, r3
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	440b      	add	r3, r1
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	b21b      	sxth	r3, r3
 8006860:	4313      	orrs	r3, r2
 8006862:	b21b      	sxth	r3, r3
 8006864:	817b      	strh	r3, [r7, #10]
            // Get message ASCII
            message_ASCII = RX_Buffer[datalength];
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	4413      	add	r3, r2
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	727b      	strb	r3, [r7, #9]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <DWIN_Listen+0x8a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lastByte,message_ASCII);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	7a7a      	ldrb	r2, [r7, #9]
 800687e:	8979      	ldrh	r1, [r7, #10]
 8006880:	89b8      	ldrh	r0, [r7, #12]
 8006882:	4798      	blx	r3
            }
        }
    }

    
}
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <atof>:
 800688c:	2100      	movs	r1, #0
 800688e:	f000 be09 	b.w	80074a4 <strtod>

08006892 <sulp>:
 8006892:	b570      	push	{r4, r5, r6, lr}
 8006894:	4604      	mov	r4, r0
 8006896:	460d      	mov	r5, r1
 8006898:	ec45 4b10 	vmov	d0, r4, r5
 800689c:	4616      	mov	r6, r2
 800689e:	f003 fc8f 	bl	800a1c0 <__ulp>
 80068a2:	ec51 0b10 	vmov	r0, r1, d0
 80068a6:	b17e      	cbz	r6, 80068c8 <sulp+0x36>
 80068a8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80068ac:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	dd09      	ble.n	80068c8 <sulp+0x36>
 80068b4:	051b      	lsls	r3, r3, #20
 80068b6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80068ba:	2400      	movs	r4, #0
 80068bc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80068c0:	4622      	mov	r2, r4
 80068c2:	462b      	mov	r3, r5
 80068c4:	f7f9 fe98 	bl	80005f8 <__aeabi_dmul>
 80068c8:	ec41 0b10 	vmov	d0, r0, r1
 80068cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080068d0 <_strtod_l>:
 80068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d4:	b09f      	sub	sp, #124	@ 0x7c
 80068d6:	460c      	mov	r4, r1
 80068d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80068da:	2200      	movs	r2, #0
 80068dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80068de:	9005      	str	r0, [sp, #20]
 80068e0:	f04f 0a00 	mov.w	sl, #0
 80068e4:	f04f 0b00 	mov.w	fp, #0
 80068e8:	460a      	mov	r2, r1
 80068ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80068ec:	7811      	ldrb	r1, [r2, #0]
 80068ee:	292b      	cmp	r1, #43	@ 0x2b
 80068f0:	d04a      	beq.n	8006988 <_strtod_l+0xb8>
 80068f2:	d838      	bhi.n	8006966 <_strtod_l+0x96>
 80068f4:	290d      	cmp	r1, #13
 80068f6:	d832      	bhi.n	800695e <_strtod_l+0x8e>
 80068f8:	2908      	cmp	r1, #8
 80068fa:	d832      	bhi.n	8006962 <_strtod_l+0x92>
 80068fc:	2900      	cmp	r1, #0
 80068fe:	d03b      	beq.n	8006978 <_strtod_l+0xa8>
 8006900:	2200      	movs	r2, #0
 8006902:	920e      	str	r2, [sp, #56]	@ 0x38
 8006904:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006906:	782a      	ldrb	r2, [r5, #0]
 8006908:	2a30      	cmp	r2, #48	@ 0x30
 800690a:	f040 80b2 	bne.w	8006a72 <_strtod_l+0x1a2>
 800690e:	786a      	ldrb	r2, [r5, #1]
 8006910:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006914:	2a58      	cmp	r2, #88	@ 0x58
 8006916:	d16e      	bne.n	80069f6 <_strtod_l+0x126>
 8006918:	9302      	str	r3, [sp, #8]
 800691a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	4a8f      	ldr	r2, [pc, #572]	@ (8006b60 <_strtod_l+0x290>)
 8006924:	9805      	ldr	r0, [sp, #20]
 8006926:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006928:	a919      	add	r1, sp, #100	@ 0x64
 800692a:	f002 fd43 	bl	80093b4 <__gethex>
 800692e:	f010 060f 	ands.w	r6, r0, #15
 8006932:	4604      	mov	r4, r0
 8006934:	d005      	beq.n	8006942 <_strtod_l+0x72>
 8006936:	2e06      	cmp	r6, #6
 8006938:	d128      	bne.n	800698c <_strtod_l+0xbc>
 800693a:	3501      	adds	r5, #1
 800693c:	2300      	movs	r3, #0
 800693e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006940:	930e      	str	r3, [sp, #56]	@ 0x38
 8006942:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006944:	2b00      	cmp	r3, #0
 8006946:	f040 858e 	bne.w	8007466 <_strtod_l+0xb96>
 800694a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800694c:	b1cb      	cbz	r3, 8006982 <_strtod_l+0xb2>
 800694e:	4652      	mov	r2, sl
 8006950:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006954:	ec43 2b10 	vmov	d0, r2, r3
 8006958:	b01f      	add	sp, #124	@ 0x7c
 800695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695e:	2920      	cmp	r1, #32
 8006960:	d1ce      	bne.n	8006900 <_strtod_l+0x30>
 8006962:	3201      	adds	r2, #1
 8006964:	e7c1      	b.n	80068ea <_strtod_l+0x1a>
 8006966:	292d      	cmp	r1, #45	@ 0x2d
 8006968:	d1ca      	bne.n	8006900 <_strtod_l+0x30>
 800696a:	2101      	movs	r1, #1
 800696c:	910e      	str	r1, [sp, #56]	@ 0x38
 800696e:	1c51      	adds	r1, r2, #1
 8006970:	9119      	str	r1, [sp, #100]	@ 0x64
 8006972:	7852      	ldrb	r2, [r2, #1]
 8006974:	2a00      	cmp	r2, #0
 8006976:	d1c5      	bne.n	8006904 <_strtod_l+0x34>
 8006978:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800697a:	9419      	str	r4, [sp, #100]	@ 0x64
 800697c:	2b00      	cmp	r3, #0
 800697e:	f040 8570 	bne.w	8007462 <_strtod_l+0xb92>
 8006982:	4652      	mov	r2, sl
 8006984:	465b      	mov	r3, fp
 8006986:	e7e5      	b.n	8006954 <_strtod_l+0x84>
 8006988:	2100      	movs	r1, #0
 800698a:	e7ef      	b.n	800696c <_strtod_l+0x9c>
 800698c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800698e:	b13a      	cbz	r2, 80069a0 <_strtod_l+0xd0>
 8006990:	2135      	movs	r1, #53	@ 0x35
 8006992:	a81c      	add	r0, sp, #112	@ 0x70
 8006994:	f003 fd0e 	bl	800a3b4 <__copybits>
 8006998:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800699a:	9805      	ldr	r0, [sp, #20]
 800699c:	f003 f8e4 	bl	8009b68 <_Bfree>
 80069a0:	3e01      	subs	r6, #1
 80069a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80069a4:	2e04      	cmp	r6, #4
 80069a6:	d806      	bhi.n	80069b6 <_strtod_l+0xe6>
 80069a8:	e8df f006 	tbb	[pc, r6]
 80069ac:	201d0314 	.word	0x201d0314
 80069b0:	14          	.byte	0x14
 80069b1:	00          	.byte	0x00
 80069b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80069b6:	05e1      	lsls	r1, r4, #23
 80069b8:	bf48      	it	mi
 80069ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80069be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80069c2:	0d1b      	lsrs	r3, r3, #20
 80069c4:	051b      	lsls	r3, r3, #20
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1bb      	bne.n	8006942 <_strtod_l+0x72>
 80069ca:	f001 fd9d 	bl	8008508 <__errno>
 80069ce:	2322      	movs	r3, #34	@ 0x22
 80069d0:	6003      	str	r3, [r0, #0]
 80069d2:	e7b6      	b.n	8006942 <_strtod_l+0x72>
 80069d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80069d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80069dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80069e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80069e4:	e7e7      	b.n	80069b6 <_strtod_l+0xe6>
 80069e6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006b68 <_strtod_l+0x298>
 80069ea:	e7e4      	b.n	80069b6 <_strtod_l+0xe6>
 80069ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80069f0:	f04f 3aff 	mov.w	sl, #4294967295
 80069f4:	e7df      	b.n	80069b6 <_strtod_l+0xe6>
 80069f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	2b30      	cmp	r3, #48	@ 0x30
 8006a00:	d0f9      	beq.n	80069f6 <_strtod_l+0x126>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d09d      	beq.n	8006942 <_strtod_l+0x72>
 8006a06:	2301      	movs	r3, #1
 8006a08:	2700      	movs	r7, #0
 8006a0a:	9308      	str	r3, [sp, #32]
 8006a0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a10:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006a12:	46b9      	mov	r9, r7
 8006a14:	220a      	movs	r2, #10
 8006a16:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006a18:	7805      	ldrb	r5, [r0, #0]
 8006a1a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006a1e:	b2d9      	uxtb	r1, r3
 8006a20:	2909      	cmp	r1, #9
 8006a22:	d928      	bls.n	8006a76 <_strtod_l+0x1a6>
 8006a24:	494f      	ldr	r1, [pc, #316]	@ (8006b64 <_strtod_l+0x294>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	f001 fd11 	bl	800844e <strncmp>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d032      	beq.n	8006a96 <_strtod_l+0x1c6>
 8006a30:	2000      	movs	r0, #0
 8006a32:	462a      	mov	r2, r5
 8006a34:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a36:	464d      	mov	r5, r9
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2a65      	cmp	r2, #101	@ 0x65
 8006a3c:	d001      	beq.n	8006a42 <_strtod_l+0x172>
 8006a3e:	2a45      	cmp	r2, #69	@ 0x45
 8006a40:	d114      	bne.n	8006a6c <_strtod_l+0x19c>
 8006a42:	b91d      	cbnz	r5, 8006a4c <_strtod_l+0x17c>
 8006a44:	9a08      	ldr	r2, [sp, #32]
 8006a46:	4302      	orrs	r2, r0
 8006a48:	d096      	beq.n	8006978 <_strtod_l+0xa8>
 8006a4a:	2500      	movs	r5, #0
 8006a4c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006a4e:	1c62      	adds	r2, r4, #1
 8006a50:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a52:	7862      	ldrb	r2, [r4, #1]
 8006a54:	2a2b      	cmp	r2, #43	@ 0x2b
 8006a56:	d07a      	beq.n	8006b4e <_strtod_l+0x27e>
 8006a58:	2a2d      	cmp	r2, #45	@ 0x2d
 8006a5a:	d07e      	beq.n	8006b5a <_strtod_l+0x28a>
 8006a5c:	f04f 0c00 	mov.w	ip, #0
 8006a60:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006a64:	2909      	cmp	r1, #9
 8006a66:	f240 8085 	bls.w	8006b74 <_strtod_l+0x2a4>
 8006a6a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006a6c:	f04f 0800 	mov.w	r8, #0
 8006a70:	e0a5      	b.n	8006bbe <_strtod_l+0x2ee>
 8006a72:	2300      	movs	r3, #0
 8006a74:	e7c8      	b.n	8006a08 <_strtod_l+0x138>
 8006a76:	f1b9 0f08 	cmp.w	r9, #8
 8006a7a:	bfd8      	it	le
 8006a7c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006a7e:	f100 0001 	add.w	r0, r0, #1
 8006a82:	bfda      	itte	le
 8006a84:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a88:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006a8a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006a8e:	f109 0901 	add.w	r9, r9, #1
 8006a92:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a94:	e7bf      	b.n	8006a16 <_strtod_l+0x146>
 8006a96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a9c:	785a      	ldrb	r2, [r3, #1]
 8006a9e:	f1b9 0f00 	cmp.w	r9, #0
 8006aa2:	d03b      	beq.n	8006b1c <_strtod_l+0x24c>
 8006aa4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006aa6:	464d      	mov	r5, r9
 8006aa8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006aac:	2b09      	cmp	r3, #9
 8006aae:	d912      	bls.n	8006ad6 <_strtod_l+0x206>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e7c2      	b.n	8006a3a <_strtod_l+0x16a>
 8006ab4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006aba:	785a      	ldrb	r2, [r3, #1]
 8006abc:	3001      	adds	r0, #1
 8006abe:	2a30      	cmp	r2, #48	@ 0x30
 8006ac0:	d0f8      	beq.n	8006ab4 <_strtod_l+0x1e4>
 8006ac2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006ac6:	2b08      	cmp	r3, #8
 8006ac8:	f200 84d2 	bhi.w	8007470 <_strtod_l+0xba0>
 8006acc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ace:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	3a30      	subs	r2, #48	@ 0x30
 8006ad8:	f100 0301 	add.w	r3, r0, #1
 8006adc:	d018      	beq.n	8006b10 <_strtod_l+0x240>
 8006ade:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ae0:	4419      	add	r1, r3
 8006ae2:	910a      	str	r1, [sp, #40]	@ 0x28
 8006ae4:	462e      	mov	r6, r5
 8006ae6:	f04f 0e0a 	mov.w	lr, #10
 8006aea:	1c71      	adds	r1, r6, #1
 8006aec:	eba1 0c05 	sub.w	ip, r1, r5
 8006af0:	4563      	cmp	r3, ip
 8006af2:	dc15      	bgt.n	8006b20 <_strtod_l+0x250>
 8006af4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006af8:	182b      	adds	r3, r5, r0
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	f105 0501 	add.w	r5, r5, #1
 8006b00:	4405      	add	r5, r0
 8006b02:	dc1a      	bgt.n	8006b3a <_strtod_l+0x26a>
 8006b04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b06:	230a      	movs	r3, #10
 8006b08:	fb03 2301 	mla	r3, r3, r1, r2
 8006b0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b0e:	2300      	movs	r3, #0
 8006b10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b12:	1c51      	adds	r1, r2, #1
 8006b14:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b16:	7852      	ldrb	r2, [r2, #1]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	e7c5      	b.n	8006aa8 <_strtod_l+0x1d8>
 8006b1c:	4648      	mov	r0, r9
 8006b1e:	e7ce      	b.n	8006abe <_strtod_l+0x1ee>
 8006b20:	2e08      	cmp	r6, #8
 8006b22:	dc05      	bgt.n	8006b30 <_strtod_l+0x260>
 8006b24:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006b26:	fb0e f606 	mul.w	r6, lr, r6
 8006b2a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006b2c:	460e      	mov	r6, r1
 8006b2e:	e7dc      	b.n	8006aea <_strtod_l+0x21a>
 8006b30:	2910      	cmp	r1, #16
 8006b32:	bfd8      	it	le
 8006b34:	fb0e f707 	mulle.w	r7, lr, r7
 8006b38:	e7f8      	b.n	8006b2c <_strtod_l+0x25c>
 8006b3a:	2b0f      	cmp	r3, #15
 8006b3c:	bfdc      	itt	le
 8006b3e:	230a      	movle	r3, #10
 8006b40:	fb03 2707 	mlale	r7, r3, r7, r2
 8006b44:	e7e3      	b.n	8006b0e <_strtod_l+0x23e>
 8006b46:	2300      	movs	r3, #0
 8006b48:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e77a      	b.n	8006a44 <_strtod_l+0x174>
 8006b4e:	f04f 0c00 	mov.w	ip, #0
 8006b52:	1ca2      	adds	r2, r4, #2
 8006b54:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b56:	78a2      	ldrb	r2, [r4, #2]
 8006b58:	e782      	b.n	8006a60 <_strtod_l+0x190>
 8006b5a:	f04f 0c01 	mov.w	ip, #1
 8006b5e:	e7f8      	b.n	8006b52 <_strtod_l+0x282>
 8006b60:	0800b324 	.word	0x0800b324
 8006b64:	0800b138 	.word	0x0800b138
 8006b68:	7ff00000 	.word	0x7ff00000
 8006b6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b6e:	1c51      	adds	r1, r2, #1
 8006b70:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b72:	7852      	ldrb	r2, [r2, #1]
 8006b74:	2a30      	cmp	r2, #48	@ 0x30
 8006b76:	d0f9      	beq.n	8006b6c <_strtod_l+0x29c>
 8006b78:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006b7c:	2908      	cmp	r1, #8
 8006b7e:	f63f af75 	bhi.w	8006a6c <_strtod_l+0x19c>
 8006b82:	3a30      	subs	r2, #48	@ 0x30
 8006b84:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b88:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006b8a:	f04f 080a 	mov.w	r8, #10
 8006b8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b90:	1c56      	adds	r6, r2, #1
 8006b92:	9619      	str	r6, [sp, #100]	@ 0x64
 8006b94:	7852      	ldrb	r2, [r2, #1]
 8006b96:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006b9a:	f1be 0f09 	cmp.w	lr, #9
 8006b9e:	d939      	bls.n	8006c14 <_strtod_l+0x344>
 8006ba0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006ba2:	1a76      	subs	r6, r6, r1
 8006ba4:	2e08      	cmp	r6, #8
 8006ba6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006baa:	dc03      	bgt.n	8006bb4 <_strtod_l+0x2e4>
 8006bac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bae:	4588      	cmp	r8, r1
 8006bb0:	bfa8      	it	ge
 8006bb2:	4688      	movge	r8, r1
 8006bb4:	f1bc 0f00 	cmp.w	ip, #0
 8006bb8:	d001      	beq.n	8006bbe <_strtod_l+0x2ee>
 8006bba:	f1c8 0800 	rsb	r8, r8, #0
 8006bbe:	2d00      	cmp	r5, #0
 8006bc0:	d14e      	bne.n	8006c60 <_strtod_l+0x390>
 8006bc2:	9908      	ldr	r1, [sp, #32]
 8006bc4:	4308      	orrs	r0, r1
 8006bc6:	f47f aebc 	bne.w	8006942 <_strtod_l+0x72>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f47f aed4 	bne.w	8006978 <_strtod_l+0xa8>
 8006bd0:	2a69      	cmp	r2, #105	@ 0x69
 8006bd2:	d028      	beq.n	8006c26 <_strtod_l+0x356>
 8006bd4:	dc25      	bgt.n	8006c22 <_strtod_l+0x352>
 8006bd6:	2a49      	cmp	r2, #73	@ 0x49
 8006bd8:	d025      	beq.n	8006c26 <_strtod_l+0x356>
 8006bda:	2a4e      	cmp	r2, #78	@ 0x4e
 8006bdc:	f47f aecc 	bne.w	8006978 <_strtod_l+0xa8>
 8006be0:	499a      	ldr	r1, [pc, #616]	@ (8006e4c <_strtod_l+0x57c>)
 8006be2:	a819      	add	r0, sp, #100	@ 0x64
 8006be4:	f002 fe08 	bl	80097f8 <__match>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	f43f aec5 	beq.w	8006978 <_strtod_l+0xa8>
 8006bee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b28      	cmp	r3, #40	@ 0x28
 8006bf4:	d12e      	bne.n	8006c54 <_strtod_l+0x384>
 8006bf6:	4996      	ldr	r1, [pc, #600]	@ (8006e50 <_strtod_l+0x580>)
 8006bf8:	aa1c      	add	r2, sp, #112	@ 0x70
 8006bfa:	a819      	add	r0, sp, #100	@ 0x64
 8006bfc:	f002 fe10 	bl	8009820 <__hexnan>
 8006c00:	2805      	cmp	r0, #5
 8006c02:	d127      	bne.n	8006c54 <_strtod_l+0x384>
 8006c04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006c06:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006c0a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006c0e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006c12:	e696      	b.n	8006942 <_strtod_l+0x72>
 8006c14:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c16:	fb08 2101 	mla	r1, r8, r1, r2
 8006c1a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006c1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c20:	e7b5      	b.n	8006b8e <_strtod_l+0x2be>
 8006c22:	2a6e      	cmp	r2, #110	@ 0x6e
 8006c24:	e7da      	b.n	8006bdc <_strtod_l+0x30c>
 8006c26:	498b      	ldr	r1, [pc, #556]	@ (8006e54 <_strtod_l+0x584>)
 8006c28:	a819      	add	r0, sp, #100	@ 0x64
 8006c2a:	f002 fde5 	bl	80097f8 <__match>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f43f aea2 	beq.w	8006978 <_strtod_l+0xa8>
 8006c34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c36:	4988      	ldr	r1, [pc, #544]	@ (8006e58 <_strtod_l+0x588>)
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	a819      	add	r0, sp, #100	@ 0x64
 8006c3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c3e:	f002 fddb 	bl	80097f8 <__match>
 8006c42:	b910      	cbnz	r0, 8006c4a <_strtod_l+0x37a>
 8006c44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c46:	3301      	adds	r3, #1
 8006c48:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c4a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006e68 <_strtod_l+0x598>
 8006c4e:	f04f 0a00 	mov.w	sl, #0
 8006c52:	e676      	b.n	8006942 <_strtod_l+0x72>
 8006c54:	4881      	ldr	r0, [pc, #516]	@ (8006e5c <_strtod_l+0x58c>)
 8006c56:	f001 fc93 	bl	8008580 <nan>
 8006c5a:	ec5b ab10 	vmov	sl, fp, d0
 8006c5e:	e670      	b.n	8006942 <_strtod_l+0x72>
 8006c60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c62:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006c64:	eba8 0303 	sub.w	r3, r8, r3
 8006c68:	f1b9 0f00 	cmp.w	r9, #0
 8006c6c:	bf08      	it	eq
 8006c6e:	46a9      	moveq	r9, r5
 8006c70:	2d10      	cmp	r5, #16
 8006c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c74:	462c      	mov	r4, r5
 8006c76:	bfa8      	it	ge
 8006c78:	2410      	movge	r4, #16
 8006c7a:	f7f9 fc43 	bl	8000504 <__aeabi_ui2d>
 8006c7e:	2d09      	cmp	r5, #9
 8006c80:	4682      	mov	sl, r0
 8006c82:	468b      	mov	fp, r1
 8006c84:	dc13      	bgt.n	8006cae <_strtod_l+0x3de>
 8006c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f43f ae5a 	beq.w	8006942 <_strtod_l+0x72>
 8006c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c90:	dd78      	ble.n	8006d84 <_strtod_l+0x4b4>
 8006c92:	2b16      	cmp	r3, #22
 8006c94:	dc5f      	bgt.n	8006d56 <_strtod_l+0x486>
 8006c96:	4972      	ldr	r1, [pc, #456]	@ (8006e60 <_strtod_l+0x590>)
 8006c98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ca0:	4652      	mov	r2, sl
 8006ca2:	465b      	mov	r3, fp
 8006ca4:	f7f9 fca8 	bl	80005f8 <__aeabi_dmul>
 8006ca8:	4682      	mov	sl, r0
 8006caa:	468b      	mov	fp, r1
 8006cac:	e649      	b.n	8006942 <_strtod_l+0x72>
 8006cae:	4b6c      	ldr	r3, [pc, #432]	@ (8006e60 <_strtod_l+0x590>)
 8006cb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006cb8:	f7f9 fc9e 	bl	80005f8 <__aeabi_dmul>
 8006cbc:	4682      	mov	sl, r0
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	468b      	mov	fp, r1
 8006cc2:	f7f9 fc1f 	bl	8000504 <__aeabi_ui2d>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4650      	mov	r0, sl
 8006ccc:	4659      	mov	r1, fp
 8006cce:	f7f9 fadd 	bl	800028c <__adddf3>
 8006cd2:	2d0f      	cmp	r5, #15
 8006cd4:	4682      	mov	sl, r0
 8006cd6:	468b      	mov	fp, r1
 8006cd8:	ddd5      	ble.n	8006c86 <_strtod_l+0x3b6>
 8006cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cdc:	1b2c      	subs	r4, r5, r4
 8006cde:	441c      	add	r4, r3
 8006ce0:	2c00      	cmp	r4, #0
 8006ce2:	f340 8093 	ble.w	8006e0c <_strtod_l+0x53c>
 8006ce6:	f014 030f 	ands.w	r3, r4, #15
 8006cea:	d00a      	beq.n	8006d02 <_strtod_l+0x432>
 8006cec:	495c      	ldr	r1, [pc, #368]	@ (8006e60 <_strtod_l+0x590>)
 8006cee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cf2:	4652      	mov	r2, sl
 8006cf4:	465b      	mov	r3, fp
 8006cf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cfa:	f7f9 fc7d 	bl	80005f8 <__aeabi_dmul>
 8006cfe:	4682      	mov	sl, r0
 8006d00:	468b      	mov	fp, r1
 8006d02:	f034 040f 	bics.w	r4, r4, #15
 8006d06:	d073      	beq.n	8006df0 <_strtod_l+0x520>
 8006d08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006d0c:	dd49      	ble.n	8006da2 <_strtod_l+0x4d2>
 8006d0e:	2400      	movs	r4, #0
 8006d10:	46a0      	mov	r8, r4
 8006d12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d14:	46a1      	mov	r9, r4
 8006d16:	9a05      	ldr	r2, [sp, #20]
 8006d18:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006e68 <_strtod_l+0x598>
 8006d1c:	2322      	movs	r3, #34	@ 0x22
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	f04f 0a00 	mov.w	sl, #0
 8006d24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f43f ae0b 	beq.w	8006942 <_strtod_l+0x72>
 8006d2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d2e:	9805      	ldr	r0, [sp, #20]
 8006d30:	f002 ff1a 	bl	8009b68 <_Bfree>
 8006d34:	9805      	ldr	r0, [sp, #20]
 8006d36:	4649      	mov	r1, r9
 8006d38:	f002 ff16 	bl	8009b68 <_Bfree>
 8006d3c:	9805      	ldr	r0, [sp, #20]
 8006d3e:	4641      	mov	r1, r8
 8006d40:	f002 ff12 	bl	8009b68 <_Bfree>
 8006d44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d46:	9805      	ldr	r0, [sp, #20]
 8006d48:	f002 ff0e 	bl	8009b68 <_Bfree>
 8006d4c:	9805      	ldr	r0, [sp, #20]
 8006d4e:	4621      	mov	r1, r4
 8006d50:	f002 ff0a 	bl	8009b68 <_Bfree>
 8006d54:	e5f5      	b.n	8006942 <_strtod_l+0x72>
 8006d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	dbbc      	blt.n	8006cda <_strtod_l+0x40a>
 8006d60:	4c3f      	ldr	r4, [pc, #252]	@ (8006e60 <_strtod_l+0x590>)
 8006d62:	f1c5 050f 	rsb	r5, r5, #15
 8006d66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d6a:	4652      	mov	r2, sl
 8006d6c:	465b      	mov	r3, fp
 8006d6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d72:	f7f9 fc41 	bl	80005f8 <__aeabi_dmul>
 8006d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d78:	1b5d      	subs	r5, r3, r5
 8006d7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006d7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d82:	e78f      	b.n	8006ca4 <_strtod_l+0x3d4>
 8006d84:	3316      	adds	r3, #22
 8006d86:	dba8      	blt.n	8006cda <_strtod_l+0x40a>
 8006d88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d8a:	eba3 0808 	sub.w	r8, r3, r8
 8006d8e:	4b34      	ldr	r3, [pc, #208]	@ (8006e60 <_strtod_l+0x590>)
 8006d90:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006d94:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006d98:	4650      	mov	r0, sl
 8006d9a:	4659      	mov	r1, fp
 8006d9c:	f7f9 fd56 	bl	800084c <__aeabi_ddiv>
 8006da0:	e782      	b.n	8006ca8 <_strtod_l+0x3d8>
 8006da2:	2300      	movs	r3, #0
 8006da4:	4f2f      	ldr	r7, [pc, #188]	@ (8006e64 <_strtod_l+0x594>)
 8006da6:	1124      	asrs	r4, r4, #4
 8006da8:	4650      	mov	r0, sl
 8006daa:	4659      	mov	r1, fp
 8006dac:	461e      	mov	r6, r3
 8006dae:	2c01      	cmp	r4, #1
 8006db0:	dc21      	bgt.n	8006df6 <_strtod_l+0x526>
 8006db2:	b10b      	cbz	r3, 8006db8 <_strtod_l+0x4e8>
 8006db4:	4682      	mov	sl, r0
 8006db6:	468b      	mov	fp, r1
 8006db8:	492a      	ldr	r1, [pc, #168]	@ (8006e64 <_strtod_l+0x594>)
 8006dba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006dbe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006dc2:	4652      	mov	r2, sl
 8006dc4:	465b      	mov	r3, fp
 8006dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dca:	f7f9 fc15 	bl	80005f8 <__aeabi_dmul>
 8006dce:	4b26      	ldr	r3, [pc, #152]	@ (8006e68 <_strtod_l+0x598>)
 8006dd0:	460a      	mov	r2, r1
 8006dd2:	400b      	ands	r3, r1
 8006dd4:	4925      	ldr	r1, [pc, #148]	@ (8006e6c <_strtod_l+0x59c>)
 8006dd6:	428b      	cmp	r3, r1
 8006dd8:	4682      	mov	sl, r0
 8006dda:	d898      	bhi.n	8006d0e <_strtod_l+0x43e>
 8006ddc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006de0:	428b      	cmp	r3, r1
 8006de2:	bf86      	itte	hi
 8006de4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006e70 <_strtod_l+0x5a0>
 8006de8:	f04f 3aff 	movhi.w	sl, #4294967295
 8006dec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006df0:	2300      	movs	r3, #0
 8006df2:	9308      	str	r3, [sp, #32]
 8006df4:	e076      	b.n	8006ee4 <_strtod_l+0x614>
 8006df6:	07e2      	lsls	r2, r4, #31
 8006df8:	d504      	bpl.n	8006e04 <_strtod_l+0x534>
 8006dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dfe:	f7f9 fbfb 	bl	80005f8 <__aeabi_dmul>
 8006e02:	2301      	movs	r3, #1
 8006e04:	3601      	adds	r6, #1
 8006e06:	1064      	asrs	r4, r4, #1
 8006e08:	3708      	adds	r7, #8
 8006e0a:	e7d0      	b.n	8006dae <_strtod_l+0x4de>
 8006e0c:	d0f0      	beq.n	8006df0 <_strtod_l+0x520>
 8006e0e:	4264      	negs	r4, r4
 8006e10:	f014 020f 	ands.w	r2, r4, #15
 8006e14:	d00a      	beq.n	8006e2c <_strtod_l+0x55c>
 8006e16:	4b12      	ldr	r3, [pc, #72]	@ (8006e60 <_strtod_l+0x590>)
 8006e18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e1c:	4650      	mov	r0, sl
 8006e1e:	4659      	mov	r1, fp
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f7f9 fd12 	bl	800084c <__aeabi_ddiv>
 8006e28:	4682      	mov	sl, r0
 8006e2a:	468b      	mov	fp, r1
 8006e2c:	1124      	asrs	r4, r4, #4
 8006e2e:	d0df      	beq.n	8006df0 <_strtod_l+0x520>
 8006e30:	2c1f      	cmp	r4, #31
 8006e32:	dd1f      	ble.n	8006e74 <_strtod_l+0x5a4>
 8006e34:	2400      	movs	r4, #0
 8006e36:	46a0      	mov	r8, r4
 8006e38:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e3a:	46a1      	mov	r9, r4
 8006e3c:	9a05      	ldr	r2, [sp, #20]
 8006e3e:	2322      	movs	r3, #34	@ 0x22
 8006e40:	f04f 0a00 	mov.w	sl, #0
 8006e44:	f04f 0b00 	mov.w	fp, #0
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	e76b      	b.n	8006d24 <_strtod_l+0x454>
 8006e4c:	0800b147 	.word	0x0800b147
 8006e50:	0800b310 	.word	0x0800b310
 8006e54:	0800b13f 	.word	0x0800b13f
 8006e58:	0800b17e 	.word	0x0800b17e
 8006e5c:	0800b30d 	.word	0x0800b30d
 8006e60:	0800b398 	.word	0x0800b398
 8006e64:	0800b370 	.word	0x0800b370
 8006e68:	7ff00000 	.word	0x7ff00000
 8006e6c:	7ca00000 	.word	0x7ca00000
 8006e70:	7fefffff 	.word	0x7fefffff
 8006e74:	f014 0310 	ands.w	r3, r4, #16
 8006e78:	bf18      	it	ne
 8006e7a:	236a      	movne	r3, #106	@ 0x6a
 8006e7c:	4ea9      	ldr	r6, [pc, #676]	@ (8007124 <_strtod_l+0x854>)
 8006e7e:	9308      	str	r3, [sp, #32]
 8006e80:	4650      	mov	r0, sl
 8006e82:	4659      	mov	r1, fp
 8006e84:	2300      	movs	r3, #0
 8006e86:	07e7      	lsls	r7, r4, #31
 8006e88:	d504      	bpl.n	8006e94 <_strtod_l+0x5c4>
 8006e8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e8e:	f7f9 fbb3 	bl	80005f8 <__aeabi_dmul>
 8006e92:	2301      	movs	r3, #1
 8006e94:	1064      	asrs	r4, r4, #1
 8006e96:	f106 0608 	add.w	r6, r6, #8
 8006e9a:	d1f4      	bne.n	8006e86 <_strtod_l+0x5b6>
 8006e9c:	b10b      	cbz	r3, 8006ea2 <_strtod_l+0x5d2>
 8006e9e:	4682      	mov	sl, r0
 8006ea0:	468b      	mov	fp, r1
 8006ea2:	9b08      	ldr	r3, [sp, #32]
 8006ea4:	b1b3      	cbz	r3, 8006ed4 <_strtod_l+0x604>
 8006ea6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006eaa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	4659      	mov	r1, fp
 8006eb2:	dd0f      	ble.n	8006ed4 <_strtod_l+0x604>
 8006eb4:	2b1f      	cmp	r3, #31
 8006eb6:	dd56      	ble.n	8006f66 <_strtod_l+0x696>
 8006eb8:	2b34      	cmp	r3, #52	@ 0x34
 8006eba:	bfde      	ittt	le
 8006ebc:	f04f 33ff 	movle.w	r3, #4294967295
 8006ec0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006ec4:	4093      	lslle	r3, r2
 8006ec6:	f04f 0a00 	mov.w	sl, #0
 8006eca:	bfcc      	ite	gt
 8006ecc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006ed0:	ea03 0b01 	andle.w	fp, r3, r1
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	4650      	mov	r0, sl
 8006eda:	4659      	mov	r1, fp
 8006edc:	f7f9 fdf4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d1a7      	bne.n	8006e34 <_strtod_l+0x564>
 8006ee4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006eea:	9805      	ldr	r0, [sp, #20]
 8006eec:	462b      	mov	r3, r5
 8006eee:	464a      	mov	r2, r9
 8006ef0:	f002 fea2 	bl	8009c38 <__s2b>
 8006ef4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	f43f af09 	beq.w	8006d0e <_strtod_l+0x43e>
 8006efc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006efe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f00:	2a00      	cmp	r2, #0
 8006f02:	eba3 0308 	sub.w	r3, r3, r8
 8006f06:	bfa8      	it	ge
 8006f08:	2300      	movge	r3, #0
 8006f0a:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f0c:	2400      	movs	r4, #0
 8006f0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f12:	9316      	str	r3, [sp, #88]	@ 0x58
 8006f14:	46a0      	mov	r8, r4
 8006f16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f18:	9805      	ldr	r0, [sp, #20]
 8006f1a:	6859      	ldr	r1, [r3, #4]
 8006f1c:	f002 fde4 	bl	8009ae8 <_Balloc>
 8006f20:	4681      	mov	r9, r0
 8006f22:	2800      	cmp	r0, #0
 8006f24:	f43f aef7 	beq.w	8006d16 <_strtod_l+0x446>
 8006f28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	3202      	adds	r2, #2
 8006f2e:	f103 010c 	add.w	r1, r3, #12
 8006f32:	0092      	lsls	r2, r2, #2
 8006f34:	300c      	adds	r0, #12
 8006f36:	f001 fb14 	bl	8008562 <memcpy>
 8006f3a:	ec4b ab10 	vmov	d0, sl, fp
 8006f3e:	9805      	ldr	r0, [sp, #20]
 8006f40:	aa1c      	add	r2, sp, #112	@ 0x70
 8006f42:	a91b      	add	r1, sp, #108	@ 0x6c
 8006f44:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006f48:	f003 f9aa 	bl	800a2a0 <__d2b>
 8006f4c:	901a      	str	r0, [sp, #104]	@ 0x68
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	f43f aee1 	beq.w	8006d16 <_strtod_l+0x446>
 8006f54:	9805      	ldr	r0, [sp, #20]
 8006f56:	2101      	movs	r1, #1
 8006f58:	f002 ff04 	bl	8009d64 <__i2b>
 8006f5c:	4680      	mov	r8, r0
 8006f5e:	b948      	cbnz	r0, 8006f74 <_strtod_l+0x6a4>
 8006f60:	f04f 0800 	mov.w	r8, #0
 8006f64:	e6d7      	b.n	8006d16 <_strtod_l+0x446>
 8006f66:	f04f 32ff 	mov.w	r2, #4294967295
 8006f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6e:	ea03 0a0a 	and.w	sl, r3, sl
 8006f72:	e7af      	b.n	8006ed4 <_strtod_l+0x604>
 8006f74:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006f76:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006f78:	2d00      	cmp	r5, #0
 8006f7a:	bfab      	itete	ge
 8006f7c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006f7e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006f80:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006f82:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006f84:	bfac      	ite	ge
 8006f86:	18ef      	addge	r7, r5, r3
 8006f88:	1b5e      	sublt	r6, r3, r5
 8006f8a:	9b08      	ldr	r3, [sp, #32]
 8006f8c:	1aed      	subs	r5, r5, r3
 8006f8e:	4415      	add	r5, r2
 8006f90:	4b65      	ldr	r3, [pc, #404]	@ (8007128 <_strtod_l+0x858>)
 8006f92:	3d01      	subs	r5, #1
 8006f94:	429d      	cmp	r5, r3
 8006f96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006f9a:	da50      	bge.n	800703e <_strtod_l+0x76e>
 8006f9c:	1b5b      	subs	r3, r3, r5
 8006f9e:	2b1f      	cmp	r3, #31
 8006fa0:	eba2 0203 	sub.w	r2, r2, r3
 8006fa4:	f04f 0101 	mov.w	r1, #1
 8006fa8:	dc3d      	bgt.n	8007026 <_strtod_l+0x756>
 8006faa:	fa01 f303 	lsl.w	r3, r1, r3
 8006fae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fb4:	18bd      	adds	r5, r7, r2
 8006fb6:	9b08      	ldr	r3, [sp, #32]
 8006fb8:	42af      	cmp	r7, r5
 8006fba:	4416      	add	r6, r2
 8006fbc:	441e      	add	r6, r3
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	bfa8      	it	ge
 8006fc2:	462b      	movge	r3, r5
 8006fc4:	42b3      	cmp	r3, r6
 8006fc6:	bfa8      	it	ge
 8006fc8:	4633      	movge	r3, r6
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bfc2      	ittt	gt
 8006fce:	1aed      	subgt	r5, r5, r3
 8006fd0:	1af6      	subgt	r6, r6, r3
 8006fd2:	1aff      	subgt	r7, r7, r3
 8006fd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	dd16      	ble.n	8007008 <_strtod_l+0x738>
 8006fda:	4641      	mov	r1, r8
 8006fdc:	9805      	ldr	r0, [sp, #20]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f002 ff78 	bl	8009ed4 <__pow5mult>
 8006fe4:	4680      	mov	r8, r0
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d0ba      	beq.n	8006f60 <_strtod_l+0x690>
 8006fea:	4601      	mov	r1, r0
 8006fec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006fee:	9805      	ldr	r0, [sp, #20]
 8006ff0:	f002 fece 	bl	8009d90 <__multiply>
 8006ff4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f43f ae8d 	beq.w	8006d16 <_strtod_l+0x446>
 8006ffc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ffe:	9805      	ldr	r0, [sp, #20]
 8007000:	f002 fdb2 	bl	8009b68 <_Bfree>
 8007004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007006:	931a      	str	r3, [sp, #104]	@ 0x68
 8007008:	2d00      	cmp	r5, #0
 800700a:	dc1d      	bgt.n	8007048 <_strtod_l+0x778>
 800700c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800700e:	2b00      	cmp	r3, #0
 8007010:	dd23      	ble.n	800705a <_strtod_l+0x78a>
 8007012:	4649      	mov	r1, r9
 8007014:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007016:	9805      	ldr	r0, [sp, #20]
 8007018:	f002 ff5c 	bl	8009ed4 <__pow5mult>
 800701c:	4681      	mov	r9, r0
 800701e:	b9e0      	cbnz	r0, 800705a <_strtod_l+0x78a>
 8007020:	f04f 0900 	mov.w	r9, #0
 8007024:	e677      	b.n	8006d16 <_strtod_l+0x446>
 8007026:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800702a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800702e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007032:	35e2      	adds	r5, #226	@ 0xe2
 8007034:	fa01 f305 	lsl.w	r3, r1, r5
 8007038:	9310      	str	r3, [sp, #64]	@ 0x40
 800703a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800703c:	e7ba      	b.n	8006fb4 <_strtod_l+0x6e4>
 800703e:	2300      	movs	r3, #0
 8007040:	9310      	str	r3, [sp, #64]	@ 0x40
 8007042:	2301      	movs	r3, #1
 8007044:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007046:	e7b5      	b.n	8006fb4 <_strtod_l+0x6e4>
 8007048:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800704a:	9805      	ldr	r0, [sp, #20]
 800704c:	462a      	mov	r2, r5
 800704e:	f002 ff9b 	bl	8009f88 <__lshift>
 8007052:	901a      	str	r0, [sp, #104]	@ 0x68
 8007054:	2800      	cmp	r0, #0
 8007056:	d1d9      	bne.n	800700c <_strtod_l+0x73c>
 8007058:	e65d      	b.n	8006d16 <_strtod_l+0x446>
 800705a:	2e00      	cmp	r6, #0
 800705c:	dd07      	ble.n	800706e <_strtod_l+0x79e>
 800705e:	4649      	mov	r1, r9
 8007060:	9805      	ldr	r0, [sp, #20]
 8007062:	4632      	mov	r2, r6
 8007064:	f002 ff90 	bl	8009f88 <__lshift>
 8007068:	4681      	mov	r9, r0
 800706a:	2800      	cmp	r0, #0
 800706c:	d0d8      	beq.n	8007020 <_strtod_l+0x750>
 800706e:	2f00      	cmp	r7, #0
 8007070:	dd08      	ble.n	8007084 <_strtod_l+0x7b4>
 8007072:	4641      	mov	r1, r8
 8007074:	9805      	ldr	r0, [sp, #20]
 8007076:	463a      	mov	r2, r7
 8007078:	f002 ff86 	bl	8009f88 <__lshift>
 800707c:	4680      	mov	r8, r0
 800707e:	2800      	cmp	r0, #0
 8007080:	f43f ae49 	beq.w	8006d16 <_strtod_l+0x446>
 8007084:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007086:	9805      	ldr	r0, [sp, #20]
 8007088:	464a      	mov	r2, r9
 800708a:	f003 f805 	bl	800a098 <__mdiff>
 800708e:	4604      	mov	r4, r0
 8007090:	2800      	cmp	r0, #0
 8007092:	f43f ae40 	beq.w	8006d16 <_strtod_l+0x446>
 8007096:	68c3      	ldr	r3, [r0, #12]
 8007098:	930f      	str	r3, [sp, #60]	@ 0x3c
 800709a:	2300      	movs	r3, #0
 800709c:	60c3      	str	r3, [r0, #12]
 800709e:	4641      	mov	r1, r8
 80070a0:	f002 ffde 	bl	800a060 <__mcmp>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	da45      	bge.n	8007134 <_strtod_l+0x864>
 80070a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070aa:	ea53 030a 	orrs.w	r3, r3, sl
 80070ae:	d16b      	bne.n	8007188 <_strtod_l+0x8b8>
 80070b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d167      	bne.n	8007188 <_strtod_l+0x8b8>
 80070b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070bc:	0d1b      	lsrs	r3, r3, #20
 80070be:	051b      	lsls	r3, r3, #20
 80070c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80070c4:	d960      	bls.n	8007188 <_strtod_l+0x8b8>
 80070c6:	6963      	ldr	r3, [r4, #20]
 80070c8:	b913      	cbnz	r3, 80070d0 <_strtod_l+0x800>
 80070ca:	6923      	ldr	r3, [r4, #16]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	dd5b      	ble.n	8007188 <_strtod_l+0x8b8>
 80070d0:	4621      	mov	r1, r4
 80070d2:	2201      	movs	r2, #1
 80070d4:	9805      	ldr	r0, [sp, #20]
 80070d6:	f002 ff57 	bl	8009f88 <__lshift>
 80070da:	4641      	mov	r1, r8
 80070dc:	4604      	mov	r4, r0
 80070de:	f002 ffbf 	bl	800a060 <__mcmp>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	dd50      	ble.n	8007188 <_strtod_l+0x8b8>
 80070e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070ea:	9a08      	ldr	r2, [sp, #32]
 80070ec:	0d1b      	lsrs	r3, r3, #20
 80070ee:	051b      	lsls	r3, r3, #20
 80070f0:	2a00      	cmp	r2, #0
 80070f2:	d06a      	beq.n	80071ca <_strtod_l+0x8fa>
 80070f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80070f8:	d867      	bhi.n	80071ca <_strtod_l+0x8fa>
 80070fa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80070fe:	f67f ae9d 	bls.w	8006e3c <_strtod_l+0x56c>
 8007102:	4b0a      	ldr	r3, [pc, #40]	@ (800712c <_strtod_l+0x85c>)
 8007104:	4650      	mov	r0, sl
 8007106:	4659      	mov	r1, fp
 8007108:	2200      	movs	r2, #0
 800710a:	f7f9 fa75 	bl	80005f8 <__aeabi_dmul>
 800710e:	4b08      	ldr	r3, [pc, #32]	@ (8007130 <_strtod_l+0x860>)
 8007110:	400b      	ands	r3, r1
 8007112:	4682      	mov	sl, r0
 8007114:	468b      	mov	fp, r1
 8007116:	2b00      	cmp	r3, #0
 8007118:	f47f ae08 	bne.w	8006d2c <_strtod_l+0x45c>
 800711c:	9a05      	ldr	r2, [sp, #20]
 800711e:	2322      	movs	r3, #34	@ 0x22
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e603      	b.n	8006d2c <_strtod_l+0x45c>
 8007124:	0800b338 	.word	0x0800b338
 8007128:	fffffc02 	.word	0xfffffc02
 800712c:	39500000 	.word	0x39500000
 8007130:	7ff00000 	.word	0x7ff00000
 8007134:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007138:	d165      	bne.n	8007206 <_strtod_l+0x936>
 800713a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800713c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007140:	b35a      	cbz	r2, 800719a <_strtod_l+0x8ca>
 8007142:	4a9f      	ldr	r2, [pc, #636]	@ (80073c0 <_strtod_l+0xaf0>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d12b      	bne.n	80071a0 <_strtod_l+0x8d0>
 8007148:	9b08      	ldr	r3, [sp, #32]
 800714a:	4651      	mov	r1, sl
 800714c:	b303      	cbz	r3, 8007190 <_strtod_l+0x8c0>
 800714e:	4b9d      	ldr	r3, [pc, #628]	@ (80073c4 <_strtod_l+0xaf4>)
 8007150:	465a      	mov	r2, fp
 8007152:	4013      	ands	r3, r2
 8007154:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007158:	f04f 32ff 	mov.w	r2, #4294967295
 800715c:	d81b      	bhi.n	8007196 <_strtod_l+0x8c6>
 800715e:	0d1b      	lsrs	r3, r3, #20
 8007160:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007164:	fa02 f303 	lsl.w	r3, r2, r3
 8007168:	4299      	cmp	r1, r3
 800716a:	d119      	bne.n	80071a0 <_strtod_l+0x8d0>
 800716c:	4b96      	ldr	r3, [pc, #600]	@ (80073c8 <_strtod_l+0xaf8>)
 800716e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007170:	429a      	cmp	r2, r3
 8007172:	d102      	bne.n	800717a <_strtod_l+0x8aa>
 8007174:	3101      	adds	r1, #1
 8007176:	f43f adce 	beq.w	8006d16 <_strtod_l+0x446>
 800717a:	4b92      	ldr	r3, [pc, #584]	@ (80073c4 <_strtod_l+0xaf4>)
 800717c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800717e:	401a      	ands	r2, r3
 8007180:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007184:	f04f 0a00 	mov.w	sl, #0
 8007188:	9b08      	ldr	r3, [sp, #32]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1b9      	bne.n	8007102 <_strtod_l+0x832>
 800718e:	e5cd      	b.n	8006d2c <_strtod_l+0x45c>
 8007190:	f04f 33ff 	mov.w	r3, #4294967295
 8007194:	e7e8      	b.n	8007168 <_strtod_l+0x898>
 8007196:	4613      	mov	r3, r2
 8007198:	e7e6      	b.n	8007168 <_strtod_l+0x898>
 800719a:	ea53 030a 	orrs.w	r3, r3, sl
 800719e:	d0a2      	beq.n	80070e6 <_strtod_l+0x816>
 80071a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80071a2:	b1db      	cbz	r3, 80071dc <_strtod_l+0x90c>
 80071a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071a6:	4213      	tst	r3, r2
 80071a8:	d0ee      	beq.n	8007188 <_strtod_l+0x8b8>
 80071aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ac:	9a08      	ldr	r2, [sp, #32]
 80071ae:	4650      	mov	r0, sl
 80071b0:	4659      	mov	r1, fp
 80071b2:	b1bb      	cbz	r3, 80071e4 <_strtod_l+0x914>
 80071b4:	f7ff fb6d 	bl	8006892 <sulp>
 80071b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071bc:	ec53 2b10 	vmov	r2, r3, d0
 80071c0:	f7f9 f864 	bl	800028c <__adddf3>
 80071c4:	4682      	mov	sl, r0
 80071c6:	468b      	mov	fp, r1
 80071c8:	e7de      	b.n	8007188 <_strtod_l+0x8b8>
 80071ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80071ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80071d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80071d6:	f04f 3aff 	mov.w	sl, #4294967295
 80071da:	e7d5      	b.n	8007188 <_strtod_l+0x8b8>
 80071dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071de:	ea13 0f0a 	tst.w	r3, sl
 80071e2:	e7e1      	b.n	80071a8 <_strtod_l+0x8d8>
 80071e4:	f7ff fb55 	bl	8006892 <sulp>
 80071e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071ec:	ec53 2b10 	vmov	r2, r3, d0
 80071f0:	f7f9 f84a 	bl	8000288 <__aeabi_dsub>
 80071f4:	2200      	movs	r2, #0
 80071f6:	2300      	movs	r3, #0
 80071f8:	4682      	mov	sl, r0
 80071fa:	468b      	mov	fp, r1
 80071fc:	f7f9 fc64 	bl	8000ac8 <__aeabi_dcmpeq>
 8007200:	2800      	cmp	r0, #0
 8007202:	d0c1      	beq.n	8007188 <_strtod_l+0x8b8>
 8007204:	e61a      	b.n	8006e3c <_strtod_l+0x56c>
 8007206:	4641      	mov	r1, r8
 8007208:	4620      	mov	r0, r4
 800720a:	f003 f8a1 	bl	800a350 <__ratio>
 800720e:	ec57 6b10 	vmov	r6, r7, d0
 8007212:	2200      	movs	r2, #0
 8007214:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007218:	4630      	mov	r0, r6
 800721a:	4639      	mov	r1, r7
 800721c:	f7f9 fc68 	bl	8000af0 <__aeabi_dcmple>
 8007220:	2800      	cmp	r0, #0
 8007222:	d06f      	beq.n	8007304 <_strtod_l+0xa34>
 8007224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d17a      	bne.n	8007320 <_strtod_l+0xa50>
 800722a:	f1ba 0f00 	cmp.w	sl, #0
 800722e:	d158      	bne.n	80072e2 <_strtod_l+0xa12>
 8007230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007232:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007236:	2b00      	cmp	r3, #0
 8007238:	d15a      	bne.n	80072f0 <_strtod_l+0xa20>
 800723a:	4b64      	ldr	r3, [pc, #400]	@ (80073cc <_strtod_l+0xafc>)
 800723c:	2200      	movs	r2, #0
 800723e:	4630      	mov	r0, r6
 8007240:	4639      	mov	r1, r7
 8007242:	f7f9 fc4b 	bl	8000adc <__aeabi_dcmplt>
 8007246:	2800      	cmp	r0, #0
 8007248:	d159      	bne.n	80072fe <_strtod_l+0xa2e>
 800724a:	4630      	mov	r0, r6
 800724c:	4639      	mov	r1, r7
 800724e:	4b60      	ldr	r3, [pc, #384]	@ (80073d0 <_strtod_l+0xb00>)
 8007250:	2200      	movs	r2, #0
 8007252:	f7f9 f9d1 	bl	80005f8 <__aeabi_dmul>
 8007256:	4606      	mov	r6, r0
 8007258:	460f      	mov	r7, r1
 800725a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800725e:	9606      	str	r6, [sp, #24]
 8007260:	9307      	str	r3, [sp, #28]
 8007262:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007266:	4d57      	ldr	r5, [pc, #348]	@ (80073c4 <_strtod_l+0xaf4>)
 8007268:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800726c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800726e:	401d      	ands	r5, r3
 8007270:	4b58      	ldr	r3, [pc, #352]	@ (80073d4 <_strtod_l+0xb04>)
 8007272:	429d      	cmp	r5, r3
 8007274:	f040 80b2 	bne.w	80073dc <_strtod_l+0xb0c>
 8007278:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800727a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800727e:	ec4b ab10 	vmov	d0, sl, fp
 8007282:	f002 ff9d 	bl	800a1c0 <__ulp>
 8007286:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800728a:	ec51 0b10 	vmov	r0, r1, d0
 800728e:	f7f9 f9b3 	bl	80005f8 <__aeabi_dmul>
 8007292:	4652      	mov	r2, sl
 8007294:	465b      	mov	r3, fp
 8007296:	f7f8 fff9 	bl	800028c <__adddf3>
 800729a:	460b      	mov	r3, r1
 800729c:	4949      	ldr	r1, [pc, #292]	@ (80073c4 <_strtod_l+0xaf4>)
 800729e:	4a4e      	ldr	r2, [pc, #312]	@ (80073d8 <_strtod_l+0xb08>)
 80072a0:	4019      	ands	r1, r3
 80072a2:	4291      	cmp	r1, r2
 80072a4:	4682      	mov	sl, r0
 80072a6:	d942      	bls.n	800732e <_strtod_l+0xa5e>
 80072a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80072aa:	4b47      	ldr	r3, [pc, #284]	@ (80073c8 <_strtod_l+0xaf8>)
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d103      	bne.n	80072b8 <_strtod_l+0x9e8>
 80072b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072b2:	3301      	adds	r3, #1
 80072b4:	f43f ad2f 	beq.w	8006d16 <_strtod_l+0x446>
 80072b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80073c8 <_strtod_l+0xaf8>
 80072bc:	f04f 3aff 	mov.w	sl, #4294967295
 80072c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072c2:	9805      	ldr	r0, [sp, #20]
 80072c4:	f002 fc50 	bl	8009b68 <_Bfree>
 80072c8:	9805      	ldr	r0, [sp, #20]
 80072ca:	4649      	mov	r1, r9
 80072cc:	f002 fc4c 	bl	8009b68 <_Bfree>
 80072d0:	9805      	ldr	r0, [sp, #20]
 80072d2:	4641      	mov	r1, r8
 80072d4:	f002 fc48 	bl	8009b68 <_Bfree>
 80072d8:	9805      	ldr	r0, [sp, #20]
 80072da:	4621      	mov	r1, r4
 80072dc:	f002 fc44 	bl	8009b68 <_Bfree>
 80072e0:	e619      	b.n	8006f16 <_strtod_l+0x646>
 80072e2:	f1ba 0f01 	cmp.w	sl, #1
 80072e6:	d103      	bne.n	80072f0 <_strtod_l+0xa20>
 80072e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f43f ada6 	beq.w	8006e3c <_strtod_l+0x56c>
 80072f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80073a0 <_strtod_l+0xad0>
 80072f4:	4f35      	ldr	r7, [pc, #212]	@ (80073cc <_strtod_l+0xafc>)
 80072f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80072fa:	2600      	movs	r6, #0
 80072fc:	e7b1      	b.n	8007262 <_strtod_l+0x992>
 80072fe:	4f34      	ldr	r7, [pc, #208]	@ (80073d0 <_strtod_l+0xb00>)
 8007300:	2600      	movs	r6, #0
 8007302:	e7aa      	b.n	800725a <_strtod_l+0x98a>
 8007304:	4b32      	ldr	r3, [pc, #200]	@ (80073d0 <_strtod_l+0xb00>)
 8007306:	4630      	mov	r0, r6
 8007308:	4639      	mov	r1, r7
 800730a:	2200      	movs	r2, #0
 800730c:	f7f9 f974 	bl	80005f8 <__aeabi_dmul>
 8007310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007312:	4606      	mov	r6, r0
 8007314:	460f      	mov	r7, r1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d09f      	beq.n	800725a <_strtod_l+0x98a>
 800731a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800731e:	e7a0      	b.n	8007262 <_strtod_l+0x992>
 8007320:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80073a8 <_strtod_l+0xad8>
 8007324:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007328:	ec57 6b17 	vmov	r6, r7, d7
 800732c:	e799      	b.n	8007262 <_strtod_l+0x992>
 800732e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007332:	9b08      	ldr	r3, [sp, #32]
 8007334:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1c1      	bne.n	80072c0 <_strtod_l+0x9f0>
 800733c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007340:	0d1b      	lsrs	r3, r3, #20
 8007342:	051b      	lsls	r3, r3, #20
 8007344:	429d      	cmp	r5, r3
 8007346:	d1bb      	bne.n	80072c0 <_strtod_l+0x9f0>
 8007348:	4630      	mov	r0, r6
 800734a:	4639      	mov	r1, r7
 800734c:	f7f9 fcb4 	bl	8000cb8 <__aeabi_d2lz>
 8007350:	f7f9 f924 	bl	800059c <__aeabi_l2d>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4630      	mov	r0, r6
 800735a:	4639      	mov	r1, r7
 800735c:	f7f8 ff94 	bl	8000288 <__aeabi_dsub>
 8007360:	460b      	mov	r3, r1
 8007362:	4602      	mov	r2, r0
 8007364:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007368:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800736c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800736e:	ea46 060a 	orr.w	r6, r6, sl
 8007372:	431e      	orrs	r6, r3
 8007374:	d06f      	beq.n	8007456 <_strtod_l+0xb86>
 8007376:	a30e      	add	r3, pc, #56	@ (adr r3, 80073b0 <_strtod_l+0xae0>)
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f7f9 fbae 	bl	8000adc <__aeabi_dcmplt>
 8007380:	2800      	cmp	r0, #0
 8007382:	f47f acd3 	bne.w	8006d2c <_strtod_l+0x45c>
 8007386:	a30c      	add	r3, pc, #48	@ (adr r3, 80073b8 <_strtod_l+0xae8>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007390:	f7f9 fbc2 	bl	8000b18 <__aeabi_dcmpgt>
 8007394:	2800      	cmp	r0, #0
 8007396:	d093      	beq.n	80072c0 <_strtod_l+0x9f0>
 8007398:	e4c8      	b.n	8006d2c <_strtod_l+0x45c>
 800739a:	bf00      	nop
 800739c:	f3af 8000 	nop.w
 80073a0:	00000000 	.word	0x00000000
 80073a4:	bff00000 	.word	0xbff00000
 80073a8:	00000000 	.word	0x00000000
 80073ac:	3ff00000 	.word	0x3ff00000
 80073b0:	94a03595 	.word	0x94a03595
 80073b4:	3fdfffff 	.word	0x3fdfffff
 80073b8:	35afe535 	.word	0x35afe535
 80073bc:	3fe00000 	.word	0x3fe00000
 80073c0:	000fffff 	.word	0x000fffff
 80073c4:	7ff00000 	.word	0x7ff00000
 80073c8:	7fefffff 	.word	0x7fefffff
 80073cc:	3ff00000 	.word	0x3ff00000
 80073d0:	3fe00000 	.word	0x3fe00000
 80073d4:	7fe00000 	.word	0x7fe00000
 80073d8:	7c9fffff 	.word	0x7c9fffff
 80073dc:	9b08      	ldr	r3, [sp, #32]
 80073de:	b323      	cbz	r3, 800742a <_strtod_l+0xb5a>
 80073e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80073e4:	d821      	bhi.n	800742a <_strtod_l+0xb5a>
 80073e6:	a328      	add	r3, pc, #160	@ (adr r3, 8007488 <_strtod_l+0xbb8>)
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	4630      	mov	r0, r6
 80073ee:	4639      	mov	r1, r7
 80073f0:	f7f9 fb7e 	bl	8000af0 <__aeabi_dcmple>
 80073f4:	b1a0      	cbz	r0, 8007420 <_strtod_l+0xb50>
 80073f6:	4639      	mov	r1, r7
 80073f8:	4630      	mov	r0, r6
 80073fa:	f7f9 fbd5 	bl	8000ba8 <__aeabi_d2uiz>
 80073fe:	2801      	cmp	r0, #1
 8007400:	bf38      	it	cc
 8007402:	2001      	movcc	r0, #1
 8007404:	f7f9 f87e 	bl	8000504 <__aeabi_ui2d>
 8007408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	b9fb      	cbnz	r3, 8007450 <_strtod_l+0xb80>
 8007410:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007414:	9014      	str	r0, [sp, #80]	@ 0x50
 8007416:	9315      	str	r3, [sp, #84]	@ 0x54
 8007418:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800741c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007420:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007422:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007426:	1b5b      	subs	r3, r3, r5
 8007428:	9311      	str	r3, [sp, #68]	@ 0x44
 800742a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800742e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007432:	f002 fec5 	bl	800a1c0 <__ulp>
 8007436:	4650      	mov	r0, sl
 8007438:	ec53 2b10 	vmov	r2, r3, d0
 800743c:	4659      	mov	r1, fp
 800743e:	f7f9 f8db 	bl	80005f8 <__aeabi_dmul>
 8007442:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007446:	f7f8 ff21 	bl	800028c <__adddf3>
 800744a:	4682      	mov	sl, r0
 800744c:	468b      	mov	fp, r1
 800744e:	e770      	b.n	8007332 <_strtod_l+0xa62>
 8007450:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007454:	e7e0      	b.n	8007418 <_strtod_l+0xb48>
 8007456:	a30e      	add	r3, pc, #56	@ (adr r3, 8007490 <_strtod_l+0xbc0>)
 8007458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745c:	f7f9 fb3e 	bl	8000adc <__aeabi_dcmplt>
 8007460:	e798      	b.n	8007394 <_strtod_l+0xac4>
 8007462:	2300      	movs	r3, #0
 8007464:	930e      	str	r3, [sp, #56]	@ 0x38
 8007466:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007468:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	f7ff ba6d 	b.w	800694a <_strtod_l+0x7a>
 8007470:	2a65      	cmp	r2, #101	@ 0x65
 8007472:	f43f ab68 	beq.w	8006b46 <_strtod_l+0x276>
 8007476:	2a45      	cmp	r2, #69	@ 0x45
 8007478:	f43f ab65 	beq.w	8006b46 <_strtod_l+0x276>
 800747c:	2301      	movs	r3, #1
 800747e:	f7ff bba0 	b.w	8006bc2 <_strtod_l+0x2f2>
 8007482:	bf00      	nop
 8007484:	f3af 8000 	nop.w
 8007488:	ffc00000 	.word	0xffc00000
 800748c:	41dfffff 	.word	0x41dfffff
 8007490:	94a03595 	.word	0x94a03595
 8007494:	3fcfffff 	.word	0x3fcfffff

08007498 <_strtod_r>:
 8007498:	4b01      	ldr	r3, [pc, #4]	@ (80074a0 <_strtod_r+0x8>)
 800749a:	f7ff ba19 	b.w	80068d0 <_strtod_l>
 800749e:	bf00      	nop
 80074a0:	20000160 	.word	0x20000160

080074a4 <strtod>:
 80074a4:	460a      	mov	r2, r1
 80074a6:	4601      	mov	r1, r0
 80074a8:	4802      	ldr	r0, [pc, #8]	@ (80074b4 <strtod+0x10>)
 80074aa:	4b03      	ldr	r3, [pc, #12]	@ (80074b8 <strtod+0x14>)
 80074ac:	6800      	ldr	r0, [r0, #0]
 80074ae:	f7ff ba0f 	b.w	80068d0 <_strtod_l>
 80074b2:	bf00      	nop
 80074b4:	200002cc 	.word	0x200002cc
 80074b8:	20000160 	.word	0x20000160

080074bc <__cvt>:
 80074bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	ec57 6b10 	vmov	r6, r7, d0
 80074c4:	2f00      	cmp	r7, #0
 80074c6:	460c      	mov	r4, r1
 80074c8:	4619      	mov	r1, r3
 80074ca:	463b      	mov	r3, r7
 80074cc:	bfbb      	ittet	lt
 80074ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80074d2:	461f      	movlt	r7, r3
 80074d4:	2300      	movge	r3, #0
 80074d6:	232d      	movlt	r3, #45	@ 0x2d
 80074d8:	700b      	strb	r3, [r1, #0]
 80074da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80074e0:	4691      	mov	r9, r2
 80074e2:	f023 0820 	bic.w	r8, r3, #32
 80074e6:	bfbc      	itt	lt
 80074e8:	4632      	movlt	r2, r6
 80074ea:	4616      	movlt	r6, r2
 80074ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074f0:	d005      	beq.n	80074fe <__cvt+0x42>
 80074f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80074f6:	d100      	bne.n	80074fa <__cvt+0x3e>
 80074f8:	3401      	adds	r4, #1
 80074fa:	2102      	movs	r1, #2
 80074fc:	e000      	b.n	8007500 <__cvt+0x44>
 80074fe:	2103      	movs	r1, #3
 8007500:	ab03      	add	r3, sp, #12
 8007502:	9301      	str	r3, [sp, #4]
 8007504:	ab02      	add	r3, sp, #8
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	ec47 6b10 	vmov	d0, r6, r7
 800750c:	4653      	mov	r3, sl
 800750e:	4622      	mov	r2, r4
 8007510:	f001 f8ce 	bl	80086b0 <_dtoa_r>
 8007514:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007518:	4605      	mov	r5, r0
 800751a:	d119      	bne.n	8007550 <__cvt+0x94>
 800751c:	f019 0f01 	tst.w	r9, #1
 8007520:	d00e      	beq.n	8007540 <__cvt+0x84>
 8007522:	eb00 0904 	add.w	r9, r0, r4
 8007526:	2200      	movs	r2, #0
 8007528:	2300      	movs	r3, #0
 800752a:	4630      	mov	r0, r6
 800752c:	4639      	mov	r1, r7
 800752e:	f7f9 facb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007532:	b108      	cbz	r0, 8007538 <__cvt+0x7c>
 8007534:	f8cd 900c 	str.w	r9, [sp, #12]
 8007538:	2230      	movs	r2, #48	@ 0x30
 800753a:	9b03      	ldr	r3, [sp, #12]
 800753c:	454b      	cmp	r3, r9
 800753e:	d31e      	bcc.n	800757e <__cvt+0xc2>
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007544:	1b5b      	subs	r3, r3, r5
 8007546:	4628      	mov	r0, r5
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	b004      	add	sp, #16
 800754c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007550:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007554:	eb00 0904 	add.w	r9, r0, r4
 8007558:	d1e5      	bne.n	8007526 <__cvt+0x6a>
 800755a:	7803      	ldrb	r3, [r0, #0]
 800755c:	2b30      	cmp	r3, #48	@ 0x30
 800755e:	d10a      	bne.n	8007576 <__cvt+0xba>
 8007560:	2200      	movs	r2, #0
 8007562:	2300      	movs	r3, #0
 8007564:	4630      	mov	r0, r6
 8007566:	4639      	mov	r1, r7
 8007568:	f7f9 faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800756c:	b918      	cbnz	r0, 8007576 <__cvt+0xba>
 800756e:	f1c4 0401 	rsb	r4, r4, #1
 8007572:	f8ca 4000 	str.w	r4, [sl]
 8007576:	f8da 3000 	ldr.w	r3, [sl]
 800757a:	4499      	add	r9, r3
 800757c:	e7d3      	b.n	8007526 <__cvt+0x6a>
 800757e:	1c59      	adds	r1, r3, #1
 8007580:	9103      	str	r1, [sp, #12]
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	e7d9      	b.n	800753a <__cvt+0x7e>

08007586 <__exponent>:
 8007586:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007588:	2900      	cmp	r1, #0
 800758a:	bfba      	itte	lt
 800758c:	4249      	neglt	r1, r1
 800758e:	232d      	movlt	r3, #45	@ 0x2d
 8007590:	232b      	movge	r3, #43	@ 0x2b
 8007592:	2909      	cmp	r1, #9
 8007594:	7002      	strb	r2, [r0, #0]
 8007596:	7043      	strb	r3, [r0, #1]
 8007598:	dd29      	ble.n	80075ee <__exponent+0x68>
 800759a:	f10d 0307 	add.w	r3, sp, #7
 800759e:	461d      	mov	r5, r3
 80075a0:	270a      	movs	r7, #10
 80075a2:	461a      	mov	r2, r3
 80075a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80075a8:	fb07 1416 	mls	r4, r7, r6, r1
 80075ac:	3430      	adds	r4, #48	@ 0x30
 80075ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 80075b2:	460c      	mov	r4, r1
 80075b4:	2c63      	cmp	r4, #99	@ 0x63
 80075b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80075ba:	4631      	mov	r1, r6
 80075bc:	dcf1      	bgt.n	80075a2 <__exponent+0x1c>
 80075be:	3130      	adds	r1, #48	@ 0x30
 80075c0:	1e94      	subs	r4, r2, #2
 80075c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075c6:	1c41      	adds	r1, r0, #1
 80075c8:	4623      	mov	r3, r4
 80075ca:	42ab      	cmp	r3, r5
 80075cc:	d30a      	bcc.n	80075e4 <__exponent+0x5e>
 80075ce:	f10d 0309 	add.w	r3, sp, #9
 80075d2:	1a9b      	subs	r3, r3, r2
 80075d4:	42ac      	cmp	r4, r5
 80075d6:	bf88      	it	hi
 80075d8:	2300      	movhi	r3, #0
 80075da:	3302      	adds	r3, #2
 80075dc:	4403      	add	r3, r0
 80075de:	1a18      	subs	r0, r3, r0
 80075e0:	b003      	add	sp, #12
 80075e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075ec:	e7ed      	b.n	80075ca <__exponent+0x44>
 80075ee:	2330      	movs	r3, #48	@ 0x30
 80075f0:	3130      	adds	r1, #48	@ 0x30
 80075f2:	7083      	strb	r3, [r0, #2]
 80075f4:	70c1      	strb	r1, [r0, #3]
 80075f6:	1d03      	adds	r3, r0, #4
 80075f8:	e7f1      	b.n	80075de <__exponent+0x58>
	...

080075fc <_printf_float>:
 80075fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007600:	b08d      	sub	sp, #52	@ 0x34
 8007602:	460c      	mov	r4, r1
 8007604:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007608:	4616      	mov	r6, r2
 800760a:	461f      	mov	r7, r3
 800760c:	4605      	mov	r5, r0
 800760e:	f000 ff31 	bl	8008474 <_localeconv_r>
 8007612:	6803      	ldr	r3, [r0, #0]
 8007614:	9304      	str	r3, [sp, #16]
 8007616:	4618      	mov	r0, r3
 8007618:	f7f8 fe2a 	bl	8000270 <strlen>
 800761c:	2300      	movs	r3, #0
 800761e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007620:	f8d8 3000 	ldr.w	r3, [r8]
 8007624:	9005      	str	r0, [sp, #20]
 8007626:	3307      	adds	r3, #7
 8007628:	f023 0307 	bic.w	r3, r3, #7
 800762c:	f103 0208 	add.w	r2, r3, #8
 8007630:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007634:	f8d4 b000 	ldr.w	fp, [r4]
 8007638:	f8c8 2000 	str.w	r2, [r8]
 800763c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007640:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007644:	9307      	str	r3, [sp, #28]
 8007646:	f8cd 8018 	str.w	r8, [sp, #24]
 800764a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800764e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007652:	4b9c      	ldr	r3, [pc, #624]	@ (80078c4 <_printf_float+0x2c8>)
 8007654:	f04f 32ff 	mov.w	r2, #4294967295
 8007658:	f7f9 fa68 	bl	8000b2c <__aeabi_dcmpun>
 800765c:	bb70      	cbnz	r0, 80076bc <_printf_float+0xc0>
 800765e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007662:	4b98      	ldr	r3, [pc, #608]	@ (80078c4 <_printf_float+0x2c8>)
 8007664:	f04f 32ff 	mov.w	r2, #4294967295
 8007668:	f7f9 fa42 	bl	8000af0 <__aeabi_dcmple>
 800766c:	bb30      	cbnz	r0, 80076bc <_printf_float+0xc0>
 800766e:	2200      	movs	r2, #0
 8007670:	2300      	movs	r3, #0
 8007672:	4640      	mov	r0, r8
 8007674:	4649      	mov	r1, r9
 8007676:	f7f9 fa31 	bl	8000adc <__aeabi_dcmplt>
 800767a:	b110      	cbz	r0, 8007682 <_printf_float+0x86>
 800767c:	232d      	movs	r3, #45	@ 0x2d
 800767e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007682:	4a91      	ldr	r2, [pc, #580]	@ (80078c8 <_printf_float+0x2cc>)
 8007684:	4b91      	ldr	r3, [pc, #580]	@ (80078cc <_printf_float+0x2d0>)
 8007686:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800768a:	bf8c      	ite	hi
 800768c:	4690      	movhi	r8, r2
 800768e:	4698      	movls	r8, r3
 8007690:	2303      	movs	r3, #3
 8007692:	6123      	str	r3, [r4, #16]
 8007694:	f02b 0304 	bic.w	r3, fp, #4
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	f04f 0900 	mov.w	r9, #0
 800769e:	9700      	str	r7, [sp, #0]
 80076a0:	4633      	mov	r3, r6
 80076a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80076a4:	4621      	mov	r1, r4
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 f9d2 	bl	8007a50 <_printf_common>
 80076ac:	3001      	adds	r0, #1
 80076ae:	f040 808d 	bne.w	80077cc <_printf_float+0x1d0>
 80076b2:	f04f 30ff 	mov.w	r0, #4294967295
 80076b6:	b00d      	add	sp, #52	@ 0x34
 80076b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076bc:	4642      	mov	r2, r8
 80076be:	464b      	mov	r3, r9
 80076c0:	4640      	mov	r0, r8
 80076c2:	4649      	mov	r1, r9
 80076c4:	f7f9 fa32 	bl	8000b2c <__aeabi_dcmpun>
 80076c8:	b140      	cbz	r0, 80076dc <_printf_float+0xe0>
 80076ca:	464b      	mov	r3, r9
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bfbc      	itt	lt
 80076d0:	232d      	movlt	r3, #45	@ 0x2d
 80076d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80076d6:	4a7e      	ldr	r2, [pc, #504]	@ (80078d0 <_printf_float+0x2d4>)
 80076d8:	4b7e      	ldr	r3, [pc, #504]	@ (80078d4 <_printf_float+0x2d8>)
 80076da:	e7d4      	b.n	8007686 <_printf_float+0x8a>
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80076e2:	9206      	str	r2, [sp, #24]
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	d13b      	bne.n	8007760 <_printf_float+0x164>
 80076e8:	2306      	movs	r3, #6
 80076ea:	6063      	str	r3, [r4, #4]
 80076ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80076f0:	2300      	movs	r3, #0
 80076f2:	6022      	str	r2, [r4, #0]
 80076f4:	9303      	str	r3, [sp, #12]
 80076f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80076f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80076fc:	ab09      	add	r3, sp, #36	@ 0x24
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	6861      	ldr	r1, [r4, #4]
 8007702:	ec49 8b10 	vmov	d0, r8, r9
 8007706:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800770a:	4628      	mov	r0, r5
 800770c:	f7ff fed6 	bl	80074bc <__cvt>
 8007710:	9b06      	ldr	r3, [sp, #24]
 8007712:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007714:	2b47      	cmp	r3, #71	@ 0x47
 8007716:	4680      	mov	r8, r0
 8007718:	d129      	bne.n	800776e <_printf_float+0x172>
 800771a:	1cc8      	adds	r0, r1, #3
 800771c:	db02      	blt.n	8007724 <_printf_float+0x128>
 800771e:	6863      	ldr	r3, [r4, #4]
 8007720:	4299      	cmp	r1, r3
 8007722:	dd41      	ble.n	80077a8 <_printf_float+0x1ac>
 8007724:	f1aa 0a02 	sub.w	sl, sl, #2
 8007728:	fa5f fa8a 	uxtb.w	sl, sl
 800772c:	3901      	subs	r1, #1
 800772e:	4652      	mov	r2, sl
 8007730:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007734:	9109      	str	r1, [sp, #36]	@ 0x24
 8007736:	f7ff ff26 	bl	8007586 <__exponent>
 800773a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800773c:	1813      	adds	r3, r2, r0
 800773e:	2a01      	cmp	r2, #1
 8007740:	4681      	mov	r9, r0
 8007742:	6123      	str	r3, [r4, #16]
 8007744:	dc02      	bgt.n	800774c <_printf_float+0x150>
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	07d2      	lsls	r2, r2, #31
 800774a:	d501      	bpl.n	8007750 <_printf_float+0x154>
 800774c:	3301      	adds	r3, #1
 800774e:	6123      	str	r3, [r4, #16]
 8007750:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0a2      	beq.n	800769e <_printf_float+0xa2>
 8007758:	232d      	movs	r3, #45	@ 0x2d
 800775a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800775e:	e79e      	b.n	800769e <_printf_float+0xa2>
 8007760:	9a06      	ldr	r2, [sp, #24]
 8007762:	2a47      	cmp	r2, #71	@ 0x47
 8007764:	d1c2      	bne.n	80076ec <_printf_float+0xf0>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1c0      	bne.n	80076ec <_printf_float+0xf0>
 800776a:	2301      	movs	r3, #1
 800776c:	e7bd      	b.n	80076ea <_printf_float+0xee>
 800776e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007772:	d9db      	bls.n	800772c <_printf_float+0x130>
 8007774:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007778:	d118      	bne.n	80077ac <_printf_float+0x1b0>
 800777a:	2900      	cmp	r1, #0
 800777c:	6863      	ldr	r3, [r4, #4]
 800777e:	dd0b      	ble.n	8007798 <_printf_float+0x19c>
 8007780:	6121      	str	r1, [r4, #16]
 8007782:	b913      	cbnz	r3, 800778a <_printf_float+0x18e>
 8007784:	6822      	ldr	r2, [r4, #0]
 8007786:	07d0      	lsls	r0, r2, #31
 8007788:	d502      	bpl.n	8007790 <_printf_float+0x194>
 800778a:	3301      	adds	r3, #1
 800778c:	440b      	add	r3, r1
 800778e:	6123      	str	r3, [r4, #16]
 8007790:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007792:	f04f 0900 	mov.w	r9, #0
 8007796:	e7db      	b.n	8007750 <_printf_float+0x154>
 8007798:	b913      	cbnz	r3, 80077a0 <_printf_float+0x1a4>
 800779a:	6822      	ldr	r2, [r4, #0]
 800779c:	07d2      	lsls	r2, r2, #31
 800779e:	d501      	bpl.n	80077a4 <_printf_float+0x1a8>
 80077a0:	3302      	adds	r3, #2
 80077a2:	e7f4      	b.n	800778e <_printf_float+0x192>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e7f2      	b.n	800778e <_printf_float+0x192>
 80077a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80077ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ae:	4299      	cmp	r1, r3
 80077b0:	db05      	blt.n	80077be <_printf_float+0x1c2>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	6121      	str	r1, [r4, #16]
 80077b6:	07d8      	lsls	r0, r3, #31
 80077b8:	d5ea      	bpl.n	8007790 <_printf_float+0x194>
 80077ba:	1c4b      	adds	r3, r1, #1
 80077bc:	e7e7      	b.n	800778e <_printf_float+0x192>
 80077be:	2900      	cmp	r1, #0
 80077c0:	bfd4      	ite	le
 80077c2:	f1c1 0202 	rsble	r2, r1, #2
 80077c6:	2201      	movgt	r2, #1
 80077c8:	4413      	add	r3, r2
 80077ca:	e7e0      	b.n	800778e <_printf_float+0x192>
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	055a      	lsls	r2, r3, #21
 80077d0:	d407      	bmi.n	80077e2 <_printf_float+0x1e6>
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	4642      	mov	r2, r8
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	d12b      	bne.n	8007838 <_printf_float+0x23c>
 80077e0:	e767      	b.n	80076b2 <_printf_float+0xb6>
 80077e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077e6:	f240 80dd 	bls.w	80079a4 <_printf_float+0x3a8>
 80077ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077ee:	2200      	movs	r2, #0
 80077f0:	2300      	movs	r3, #0
 80077f2:	f7f9 f969 	bl	8000ac8 <__aeabi_dcmpeq>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d033      	beq.n	8007862 <_printf_float+0x266>
 80077fa:	4a37      	ldr	r2, [pc, #220]	@ (80078d8 <_printf_float+0x2dc>)
 80077fc:	2301      	movs	r3, #1
 80077fe:	4631      	mov	r1, r6
 8007800:	4628      	mov	r0, r5
 8007802:	47b8      	blx	r7
 8007804:	3001      	adds	r0, #1
 8007806:	f43f af54 	beq.w	80076b2 <_printf_float+0xb6>
 800780a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800780e:	4543      	cmp	r3, r8
 8007810:	db02      	blt.n	8007818 <_printf_float+0x21c>
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	07d8      	lsls	r0, r3, #31
 8007816:	d50f      	bpl.n	8007838 <_printf_float+0x23c>
 8007818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800781c:	4631      	mov	r1, r6
 800781e:	4628      	mov	r0, r5
 8007820:	47b8      	blx	r7
 8007822:	3001      	adds	r0, #1
 8007824:	f43f af45 	beq.w	80076b2 <_printf_float+0xb6>
 8007828:	f04f 0900 	mov.w	r9, #0
 800782c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007830:	f104 0a1a 	add.w	sl, r4, #26
 8007834:	45c8      	cmp	r8, r9
 8007836:	dc09      	bgt.n	800784c <_printf_float+0x250>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	079b      	lsls	r3, r3, #30
 800783c:	f100 8103 	bmi.w	8007a46 <_printf_float+0x44a>
 8007840:	68e0      	ldr	r0, [r4, #12]
 8007842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007844:	4298      	cmp	r0, r3
 8007846:	bfb8      	it	lt
 8007848:	4618      	movlt	r0, r3
 800784a:	e734      	b.n	80076b6 <_printf_float+0xba>
 800784c:	2301      	movs	r3, #1
 800784e:	4652      	mov	r2, sl
 8007850:	4631      	mov	r1, r6
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	f43f af2b 	beq.w	80076b2 <_printf_float+0xb6>
 800785c:	f109 0901 	add.w	r9, r9, #1
 8007860:	e7e8      	b.n	8007834 <_printf_float+0x238>
 8007862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007864:	2b00      	cmp	r3, #0
 8007866:	dc39      	bgt.n	80078dc <_printf_float+0x2e0>
 8007868:	4a1b      	ldr	r2, [pc, #108]	@ (80078d8 <_printf_float+0x2dc>)
 800786a:	2301      	movs	r3, #1
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	47b8      	blx	r7
 8007872:	3001      	adds	r0, #1
 8007874:	f43f af1d 	beq.w	80076b2 <_printf_float+0xb6>
 8007878:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800787c:	ea59 0303 	orrs.w	r3, r9, r3
 8007880:	d102      	bne.n	8007888 <_printf_float+0x28c>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	07d9      	lsls	r1, r3, #31
 8007886:	d5d7      	bpl.n	8007838 <_printf_float+0x23c>
 8007888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800788c:	4631      	mov	r1, r6
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	f43f af0d 	beq.w	80076b2 <_printf_float+0xb6>
 8007898:	f04f 0a00 	mov.w	sl, #0
 800789c:	f104 0b1a 	add.w	fp, r4, #26
 80078a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a2:	425b      	negs	r3, r3
 80078a4:	4553      	cmp	r3, sl
 80078a6:	dc01      	bgt.n	80078ac <_printf_float+0x2b0>
 80078a8:	464b      	mov	r3, r9
 80078aa:	e793      	b.n	80077d4 <_printf_float+0x1d8>
 80078ac:	2301      	movs	r3, #1
 80078ae:	465a      	mov	r2, fp
 80078b0:	4631      	mov	r1, r6
 80078b2:	4628      	mov	r0, r5
 80078b4:	47b8      	blx	r7
 80078b6:	3001      	adds	r0, #1
 80078b8:	f43f aefb 	beq.w	80076b2 <_printf_float+0xb6>
 80078bc:	f10a 0a01 	add.w	sl, sl, #1
 80078c0:	e7ee      	b.n	80078a0 <_printf_float+0x2a4>
 80078c2:	bf00      	nop
 80078c4:	7fefffff 	.word	0x7fefffff
 80078c8:	0800b13e 	.word	0x0800b13e
 80078cc:	0800b13a 	.word	0x0800b13a
 80078d0:	0800b146 	.word	0x0800b146
 80078d4:	0800b142 	.word	0x0800b142
 80078d8:	0800b14a 	.word	0x0800b14a
 80078dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078e2:	4553      	cmp	r3, sl
 80078e4:	bfa8      	it	ge
 80078e6:	4653      	movge	r3, sl
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	4699      	mov	r9, r3
 80078ec:	dc36      	bgt.n	800795c <_printf_float+0x360>
 80078ee:	f04f 0b00 	mov.w	fp, #0
 80078f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078f6:	f104 021a 	add.w	r2, r4, #26
 80078fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078fc:	9306      	str	r3, [sp, #24]
 80078fe:	eba3 0309 	sub.w	r3, r3, r9
 8007902:	455b      	cmp	r3, fp
 8007904:	dc31      	bgt.n	800796a <_printf_float+0x36e>
 8007906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007908:	459a      	cmp	sl, r3
 800790a:	dc3a      	bgt.n	8007982 <_printf_float+0x386>
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	07da      	lsls	r2, r3, #31
 8007910:	d437      	bmi.n	8007982 <_printf_float+0x386>
 8007912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007914:	ebaa 0903 	sub.w	r9, sl, r3
 8007918:	9b06      	ldr	r3, [sp, #24]
 800791a:	ebaa 0303 	sub.w	r3, sl, r3
 800791e:	4599      	cmp	r9, r3
 8007920:	bfa8      	it	ge
 8007922:	4699      	movge	r9, r3
 8007924:	f1b9 0f00 	cmp.w	r9, #0
 8007928:	dc33      	bgt.n	8007992 <_printf_float+0x396>
 800792a:	f04f 0800 	mov.w	r8, #0
 800792e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007932:	f104 0b1a 	add.w	fp, r4, #26
 8007936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007938:	ebaa 0303 	sub.w	r3, sl, r3
 800793c:	eba3 0309 	sub.w	r3, r3, r9
 8007940:	4543      	cmp	r3, r8
 8007942:	f77f af79 	ble.w	8007838 <_printf_float+0x23c>
 8007946:	2301      	movs	r3, #1
 8007948:	465a      	mov	r2, fp
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	47b8      	blx	r7
 8007950:	3001      	adds	r0, #1
 8007952:	f43f aeae 	beq.w	80076b2 <_printf_float+0xb6>
 8007956:	f108 0801 	add.w	r8, r8, #1
 800795a:	e7ec      	b.n	8007936 <_printf_float+0x33a>
 800795c:	4642      	mov	r2, r8
 800795e:	4631      	mov	r1, r6
 8007960:	4628      	mov	r0, r5
 8007962:	47b8      	blx	r7
 8007964:	3001      	adds	r0, #1
 8007966:	d1c2      	bne.n	80078ee <_printf_float+0x2f2>
 8007968:	e6a3      	b.n	80076b2 <_printf_float+0xb6>
 800796a:	2301      	movs	r3, #1
 800796c:	4631      	mov	r1, r6
 800796e:	4628      	mov	r0, r5
 8007970:	9206      	str	r2, [sp, #24]
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	f43f ae9c 	beq.w	80076b2 <_printf_float+0xb6>
 800797a:	9a06      	ldr	r2, [sp, #24]
 800797c:	f10b 0b01 	add.w	fp, fp, #1
 8007980:	e7bb      	b.n	80078fa <_printf_float+0x2fe>
 8007982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007986:	4631      	mov	r1, r6
 8007988:	4628      	mov	r0, r5
 800798a:	47b8      	blx	r7
 800798c:	3001      	adds	r0, #1
 800798e:	d1c0      	bne.n	8007912 <_printf_float+0x316>
 8007990:	e68f      	b.n	80076b2 <_printf_float+0xb6>
 8007992:	9a06      	ldr	r2, [sp, #24]
 8007994:	464b      	mov	r3, r9
 8007996:	4442      	add	r2, r8
 8007998:	4631      	mov	r1, r6
 800799a:	4628      	mov	r0, r5
 800799c:	47b8      	blx	r7
 800799e:	3001      	adds	r0, #1
 80079a0:	d1c3      	bne.n	800792a <_printf_float+0x32e>
 80079a2:	e686      	b.n	80076b2 <_printf_float+0xb6>
 80079a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079a8:	f1ba 0f01 	cmp.w	sl, #1
 80079ac:	dc01      	bgt.n	80079b2 <_printf_float+0x3b6>
 80079ae:	07db      	lsls	r3, r3, #31
 80079b0:	d536      	bpl.n	8007a20 <_printf_float+0x424>
 80079b2:	2301      	movs	r3, #1
 80079b4:	4642      	mov	r2, r8
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b8      	blx	r7
 80079bc:	3001      	adds	r0, #1
 80079be:	f43f ae78 	beq.w	80076b2 <_printf_float+0xb6>
 80079c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079c6:	4631      	mov	r1, r6
 80079c8:	4628      	mov	r0, r5
 80079ca:	47b8      	blx	r7
 80079cc:	3001      	adds	r0, #1
 80079ce:	f43f ae70 	beq.w	80076b2 <_printf_float+0xb6>
 80079d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079d6:	2200      	movs	r2, #0
 80079d8:	2300      	movs	r3, #0
 80079da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079de:	f7f9 f873 	bl	8000ac8 <__aeabi_dcmpeq>
 80079e2:	b9c0      	cbnz	r0, 8007a16 <_printf_float+0x41a>
 80079e4:	4653      	mov	r3, sl
 80079e6:	f108 0201 	add.w	r2, r8, #1
 80079ea:	4631      	mov	r1, r6
 80079ec:	4628      	mov	r0, r5
 80079ee:	47b8      	blx	r7
 80079f0:	3001      	adds	r0, #1
 80079f2:	d10c      	bne.n	8007a0e <_printf_float+0x412>
 80079f4:	e65d      	b.n	80076b2 <_printf_float+0xb6>
 80079f6:	2301      	movs	r3, #1
 80079f8:	465a      	mov	r2, fp
 80079fa:	4631      	mov	r1, r6
 80079fc:	4628      	mov	r0, r5
 80079fe:	47b8      	blx	r7
 8007a00:	3001      	adds	r0, #1
 8007a02:	f43f ae56 	beq.w	80076b2 <_printf_float+0xb6>
 8007a06:	f108 0801 	add.w	r8, r8, #1
 8007a0a:	45d0      	cmp	r8, sl
 8007a0c:	dbf3      	blt.n	80079f6 <_printf_float+0x3fa>
 8007a0e:	464b      	mov	r3, r9
 8007a10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a14:	e6df      	b.n	80077d6 <_printf_float+0x1da>
 8007a16:	f04f 0800 	mov.w	r8, #0
 8007a1a:	f104 0b1a 	add.w	fp, r4, #26
 8007a1e:	e7f4      	b.n	8007a0a <_printf_float+0x40e>
 8007a20:	2301      	movs	r3, #1
 8007a22:	4642      	mov	r2, r8
 8007a24:	e7e1      	b.n	80079ea <_printf_float+0x3ee>
 8007a26:	2301      	movs	r3, #1
 8007a28:	464a      	mov	r2, r9
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b8      	blx	r7
 8007a30:	3001      	adds	r0, #1
 8007a32:	f43f ae3e 	beq.w	80076b2 <_printf_float+0xb6>
 8007a36:	f108 0801 	add.w	r8, r8, #1
 8007a3a:	68e3      	ldr	r3, [r4, #12]
 8007a3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a3e:	1a5b      	subs	r3, r3, r1
 8007a40:	4543      	cmp	r3, r8
 8007a42:	dcf0      	bgt.n	8007a26 <_printf_float+0x42a>
 8007a44:	e6fc      	b.n	8007840 <_printf_float+0x244>
 8007a46:	f04f 0800 	mov.w	r8, #0
 8007a4a:	f104 0919 	add.w	r9, r4, #25
 8007a4e:	e7f4      	b.n	8007a3a <_printf_float+0x43e>

08007a50 <_printf_common>:
 8007a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a54:	4616      	mov	r6, r2
 8007a56:	4698      	mov	r8, r3
 8007a58:	688a      	ldr	r2, [r1, #8]
 8007a5a:	690b      	ldr	r3, [r1, #16]
 8007a5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a60:	4293      	cmp	r3, r2
 8007a62:	bfb8      	it	lt
 8007a64:	4613      	movlt	r3, r2
 8007a66:	6033      	str	r3, [r6, #0]
 8007a68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	460c      	mov	r4, r1
 8007a70:	b10a      	cbz	r2, 8007a76 <_printf_common+0x26>
 8007a72:	3301      	adds	r3, #1
 8007a74:	6033      	str	r3, [r6, #0]
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	0699      	lsls	r1, r3, #26
 8007a7a:	bf42      	ittt	mi
 8007a7c:	6833      	ldrmi	r3, [r6, #0]
 8007a7e:	3302      	addmi	r3, #2
 8007a80:	6033      	strmi	r3, [r6, #0]
 8007a82:	6825      	ldr	r5, [r4, #0]
 8007a84:	f015 0506 	ands.w	r5, r5, #6
 8007a88:	d106      	bne.n	8007a98 <_printf_common+0x48>
 8007a8a:	f104 0a19 	add.w	sl, r4, #25
 8007a8e:	68e3      	ldr	r3, [r4, #12]
 8007a90:	6832      	ldr	r2, [r6, #0]
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	42ab      	cmp	r3, r5
 8007a96:	dc26      	bgt.n	8007ae6 <_printf_common+0x96>
 8007a98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a9c:	6822      	ldr	r2, [r4, #0]
 8007a9e:	3b00      	subs	r3, #0
 8007aa0:	bf18      	it	ne
 8007aa2:	2301      	movne	r3, #1
 8007aa4:	0692      	lsls	r2, r2, #26
 8007aa6:	d42b      	bmi.n	8007b00 <_printf_common+0xb0>
 8007aa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007aac:	4641      	mov	r1, r8
 8007aae:	4638      	mov	r0, r7
 8007ab0:	47c8      	blx	r9
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	d01e      	beq.n	8007af4 <_printf_common+0xa4>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	6922      	ldr	r2, [r4, #16]
 8007aba:	f003 0306 	and.w	r3, r3, #6
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	bf02      	ittt	eq
 8007ac2:	68e5      	ldreq	r5, [r4, #12]
 8007ac4:	6833      	ldreq	r3, [r6, #0]
 8007ac6:	1aed      	subeq	r5, r5, r3
 8007ac8:	68a3      	ldr	r3, [r4, #8]
 8007aca:	bf0c      	ite	eq
 8007acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ad0:	2500      	movne	r5, #0
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	bfc4      	itt	gt
 8007ad6:	1a9b      	subgt	r3, r3, r2
 8007ad8:	18ed      	addgt	r5, r5, r3
 8007ada:	2600      	movs	r6, #0
 8007adc:	341a      	adds	r4, #26
 8007ade:	42b5      	cmp	r5, r6
 8007ae0:	d11a      	bne.n	8007b18 <_printf_common+0xc8>
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	e008      	b.n	8007af8 <_printf_common+0xa8>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4652      	mov	r2, sl
 8007aea:	4641      	mov	r1, r8
 8007aec:	4638      	mov	r0, r7
 8007aee:	47c8      	blx	r9
 8007af0:	3001      	adds	r0, #1
 8007af2:	d103      	bne.n	8007afc <_printf_common+0xac>
 8007af4:	f04f 30ff 	mov.w	r0, #4294967295
 8007af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afc:	3501      	adds	r5, #1
 8007afe:	e7c6      	b.n	8007a8e <_printf_common+0x3e>
 8007b00:	18e1      	adds	r1, r4, r3
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	2030      	movs	r0, #48	@ 0x30
 8007b06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b0a:	4422      	add	r2, r4
 8007b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b14:	3302      	adds	r3, #2
 8007b16:	e7c7      	b.n	8007aa8 <_printf_common+0x58>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	4622      	mov	r2, r4
 8007b1c:	4641      	mov	r1, r8
 8007b1e:	4638      	mov	r0, r7
 8007b20:	47c8      	blx	r9
 8007b22:	3001      	adds	r0, #1
 8007b24:	d0e6      	beq.n	8007af4 <_printf_common+0xa4>
 8007b26:	3601      	adds	r6, #1
 8007b28:	e7d9      	b.n	8007ade <_printf_common+0x8e>
	...

08007b2c <_printf_i>:
 8007b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b30:	7e0f      	ldrb	r7, [r1, #24]
 8007b32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b34:	2f78      	cmp	r7, #120	@ 0x78
 8007b36:	4691      	mov	r9, r2
 8007b38:	4680      	mov	r8, r0
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	469a      	mov	sl, r3
 8007b3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b42:	d807      	bhi.n	8007b54 <_printf_i+0x28>
 8007b44:	2f62      	cmp	r7, #98	@ 0x62
 8007b46:	d80a      	bhi.n	8007b5e <_printf_i+0x32>
 8007b48:	2f00      	cmp	r7, #0
 8007b4a:	f000 80d1 	beq.w	8007cf0 <_printf_i+0x1c4>
 8007b4e:	2f58      	cmp	r7, #88	@ 0x58
 8007b50:	f000 80b8 	beq.w	8007cc4 <_printf_i+0x198>
 8007b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b5c:	e03a      	b.n	8007bd4 <_printf_i+0xa8>
 8007b5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b62:	2b15      	cmp	r3, #21
 8007b64:	d8f6      	bhi.n	8007b54 <_printf_i+0x28>
 8007b66:	a101      	add	r1, pc, #4	@ (adr r1, 8007b6c <_printf_i+0x40>)
 8007b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b6c:	08007bc5 	.word	0x08007bc5
 8007b70:	08007bd9 	.word	0x08007bd9
 8007b74:	08007b55 	.word	0x08007b55
 8007b78:	08007b55 	.word	0x08007b55
 8007b7c:	08007b55 	.word	0x08007b55
 8007b80:	08007b55 	.word	0x08007b55
 8007b84:	08007bd9 	.word	0x08007bd9
 8007b88:	08007b55 	.word	0x08007b55
 8007b8c:	08007b55 	.word	0x08007b55
 8007b90:	08007b55 	.word	0x08007b55
 8007b94:	08007b55 	.word	0x08007b55
 8007b98:	08007cd7 	.word	0x08007cd7
 8007b9c:	08007c03 	.word	0x08007c03
 8007ba0:	08007c91 	.word	0x08007c91
 8007ba4:	08007b55 	.word	0x08007b55
 8007ba8:	08007b55 	.word	0x08007b55
 8007bac:	08007cf9 	.word	0x08007cf9
 8007bb0:	08007b55 	.word	0x08007b55
 8007bb4:	08007c03 	.word	0x08007c03
 8007bb8:	08007b55 	.word	0x08007b55
 8007bbc:	08007b55 	.word	0x08007b55
 8007bc0:	08007c99 	.word	0x08007c99
 8007bc4:	6833      	ldr	r3, [r6, #0]
 8007bc6:	1d1a      	adds	r2, r3, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6032      	str	r2, [r6, #0]
 8007bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e09c      	b.n	8007d12 <_printf_i+0x1e6>
 8007bd8:	6833      	ldr	r3, [r6, #0]
 8007bda:	6820      	ldr	r0, [r4, #0]
 8007bdc:	1d19      	adds	r1, r3, #4
 8007bde:	6031      	str	r1, [r6, #0]
 8007be0:	0606      	lsls	r6, r0, #24
 8007be2:	d501      	bpl.n	8007be8 <_printf_i+0xbc>
 8007be4:	681d      	ldr	r5, [r3, #0]
 8007be6:	e003      	b.n	8007bf0 <_printf_i+0xc4>
 8007be8:	0645      	lsls	r5, r0, #25
 8007bea:	d5fb      	bpl.n	8007be4 <_printf_i+0xb8>
 8007bec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	da03      	bge.n	8007bfc <_printf_i+0xd0>
 8007bf4:	232d      	movs	r3, #45	@ 0x2d
 8007bf6:	426d      	negs	r5, r5
 8007bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bfc:	4858      	ldr	r0, [pc, #352]	@ (8007d60 <_printf_i+0x234>)
 8007bfe:	230a      	movs	r3, #10
 8007c00:	e011      	b.n	8007c26 <_printf_i+0xfa>
 8007c02:	6821      	ldr	r1, [r4, #0]
 8007c04:	6833      	ldr	r3, [r6, #0]
 8007c06:	0608      	lsls	r0, r1, #24
 8007c08:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c0c:	d402      	bmi.n	8007c14 <_printf_i+0xe8>
 8007c0e:	0649      	lsls	r1, r1, #25
 8007c10:	bf48      	it	mi
 8007c12:	b2ad      	uxthmi	r5, r5
 8007c14:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c16:	4852      	ldr	r0, [pc, #328]	@ (8007d60 <_printf_i+0x234>)
 8007c18:	6033      	str	r3, [r6, #0]
 8007c1a:	bf14      	ite	ne
 8007c1c:	230a      	movne	r3, #10
 8007c1e:	2308      	moveq	r3, #8
 8007c20:	2100      	movs	r1, #0
 8007c22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c26:	6866      	ldr	r6, [r4, #4]
 8007c28:	60a6      	str	r6, [r4, #8]
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	db05      	blt.n	8007c3a <_printf_i+0x10e>
 8007c2e:	6821      	ldr	r1, [r4, #0]
 8007c30:	432e      	orrs	r6, r5
 8007c32:	f021 0104 	bic.w	r1, r1, #4
 8007c36:	6021      	str	r1, [r4, #0]
 8007c38:	d04b      	beq.n	8007cd2 <_printf_i+0x1a6>
 8007c3a:	4616      	mov	r6, r2
 8007c3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c40:	fb03 5711 	mls	r7, r3, r1, r5
 8007c44:	5dc7      	ldrb	r7, [r0, r7]
 8007c46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c4a:	462f      	mov	r7, r5
 8007c4c:	42bb      	cmp	r3, r7
 8007c4e:	460d      	mov	r5, r1
 8007c50:	d9f4      	bls.n	8007c3c <_printf_i+0x110>
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d10b      	bne.n	8007c6e <_printf_i+0x142>
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	07df      	lsls	r7, r3, #31
 8007c5a:	d508      	bpl.n	8007c6e <_printf_i+0x142>
 8007c5c:	6923      	ldr	r3, [r4, #16]
 8007c5e:	6861      	ldr	r1, [r4, #4]
 8007c60:	4299      	cmp	r1, r3
 8007c62:	bfde      	ittt	le
 8007c64:	2330      	movle	r3, #48	@ 0x30
 8007c66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c6e:	1b92      	subs	r2, r2, r6
 8007c70:	6122      	str	r2, [r4, #16]
 8007c72:	f8cd a000 	str.w	sl, [sp]
 8007c76:	464b      	mov	r3, r9
 8007c78:	aa03      	add	r2, sp, #12
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	f7ff fee7 	bl	8007a50 <_printf_common>
 8007c82:	3001      	adds	r0, #1
 8007c84:	d14a      	bne.n	8007d1c <_printf_i+0x1f0>
 8007c86:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8a:	b004      	add	sp, #16
 8007c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	f043 0320 	orr.w	r3, r3, #32
 8007c96:	6023      	str	r3, [r4, #0]
 8007c98:	4832      	ldr	r0, [pc, #200]	@ (8007d64 <_printf_i+0x238>)
 8007c9a:	2778      	movs	r7, #120	@ 0x78
 8007c9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	6831      	ldr	r1, [r6, #0]
 8007ca4:	061f      	lsls	r7, r3, #24
 8007ca6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007caa:	d402      	bmi.n	8007cb2 <_printf_i+0x186>
 8007cac:	065f      	lsls	r7, r3, #25
 8007cae:	bf48      	it	mi
 8007cb0:	b2ad      	uxthmi	r5, r5
 8007cb2:	6031      	str	r1, [r6, #0]
 8007cb4:	07d9      	lsls	r1, r3, #31
 8007cb6:	bf44      	itt	mi
 8007cb8:	f043 0320 	orrmi.w	r3, r3, #32
 8007cbc:	6023      	strmi	r3, [r4, #0]
 8007cbe:	b11d      	cbz	r5, 8007cc8 <_printf_i+0x19c>
 8007cc0:	2310      	movs	r3, #16
 8007cc2:	e7ad      	b.n	8007c20 <_printf_i+0xf4>
 8007cc4:	4826      	ldr	r0, [pc, #152]	@ (8007d60 <_printf_i+0x234>)
 8007cc6:	e7e9      	b.n	8007c9c <_printf_i+0x170>
 8007cc8:	6823      	ldr	r3, [r4, #0]
 8007cca:	f023 0320 	bic.w	r3, r3, #32
 8007cce:	6023      	str	r3, [r4, #0]
 8007cd0:	e7f6      	b.n	8007cc0 <_printf_i+0x194>
 8007cd2:	4616      	mov	r6, r2
 8007cd4:	e7bd      	b.n	8007c52 <_printf_i+0x126>
 8007cd6:	6833      	ldr	r3, [r6, #0]
 8007cd8:	6825      	ldr	r5, [r4, #0]
 8007cda:	6961      	ldr	r1, [r4, #20]
 8007cdc:	1d18      	adds	r0, r3, #4
 8007cde:	6030      	str	r0, [r6, #0]
 8007ce0:	062e      	lsls	r6, r5, #24
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	d501      	bpl.n	8007cea <_printf_i+0x1be>
 8007ce6:	6019      	str	r1, [r3, #0]
 8007ce8:	e002      	b.n	8007cf0 <_printf_i+0x1c4>
 8007cea:	0668      	lsls	r0, r5, #25
 8007cec:	d5fb      	bpl.n	8007ce6 <_printf_i+0x1ba>
 8007cee:	8019      	strh	r1, [r3, #0]
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	6123      	str	r3, [r4, #16]
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	e7bc      	b.n	8007c72 <_printf_i+0x146>
 8007cf8:	6833      	ldr	r3, [r6, #0]
 8007cfa:	1d1a      	adds	r2, r3, #4
 8007cfc:	6032      	str	r2, [r6, #0]
 8007cfe:	681e      	ldr	r6, [r3, #0]
 8007d00:	6862      	ldr	r2, [r4, #4]
 8007d02:	2100      	movs	r1, #0
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7f8 fa63 	bl	80001d0 <memchr>
 8007d0a:	b108      	cbz	r0, 8007d10 <_printf_i+0x1e4>
 8007d0c:	1b80      	subs	r0, r0, r6
 8007d0e:	6060      	str	r0, [r4, #4]
 8007d10:	6863      	ldr	r3, [r4, #4]
 8007d12:	6123      	str	r3, [r4, #16]
 8007d14:	2300      	movs	r3, #0
 8007d16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d1a:	e7aa      	b.n	8007c72 <_printf_i+0x146>
 8007d1c:	6923      	ldr	r3, [r4, #16]
 8007d1e:	4632      	mov	r2, r6
 8007d20:	4649      	mov	r1, r9
 8007d22:	4640      	mov	r0, r8
 8007d24:	47d0      	blx	sl
 8007d26:	3001      	adds	r0, #1
 8007d28:	d0ad      	beq.n	8007c86 <_printf_i+0x15a>
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	079b      	lsls	r3, r3, #30
 8007d2e:	d413      	bmi.n	8007d58 <_printf_i+0x22c>
 8007d30:	68e0      	ldr	r0, [r4, #12]
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	4298      	cmp	r0, r3
 8007d36:	bfb8      	it	lt
 8007d38:	4618      	movlt	r0, r3
 8007d3a:	e7a6      	b.n	8007c8a <_printf_i+0x15e>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	4632      	mov	r2, r6
 8007d40:	4649      	mov	r1, r9
 8007d42:	4640      	mov	r0, r8
 8007d44:	47d0      	blx	sl
 8007d46:	3001      	adds	r0, #1
 8007d48:	d09d      	beq.n	8007c86 <_printf_i+0x15a>
 8007d4a:	3501      	adds	r5, #1
 8007d4c:	68e3      	ldr	r3, [r4, #12]
 8007d4e:	9903      	ldr	r1, [sp, #12]
 8007d50:	1a5b      	subs	r3, r3, r1
 8007d52:	42ab      	cmp	r3, r5
 8007d54:	dcf2      	bgt.n	8007d3c <_printf_i+0x210>
 8007d56:	e7eb      	b.n	8007d30 <_printf_i+0x204>
 8007d58:	2500      	movs	r5, #0
 8007d5a:	f104 0619 	add.w	r6, r4, #25
 8007d5e:	e7f5      	b.n	8007d4c <_printf_i+0x220>
 8007d60:	0800b14c 	.word	0x0800b14c
 8007d64:	0800b15d 	.word	0x0800b15d

08007d68 <_scanf_float>:
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	b087      	sub	sp, #28
 8007d6e:	4691      	mov	r9, r2
 8007d70:	9303      	str	r3, [sp, #12]
 8007d72:	688b      	ldr	r3, [r1, #8]
 8007d74:	1e5a      	subs	r2, r3, #1
 8007d76:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007d7a:	bf81      	itttt	hi
 8007d7c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007d80:	eb03 0b05 	addhi.w	fp, r3, r5
 8007d84:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007d88:	608b      	strhi	r3, [r1, #8]
 8007d8a:	680b      	ldr	r3, [r1, #0]
 8007d8c:	460a      	mov	r2, r1
 8007d8e:	f04f 0500 	mov.w	r5, #0
 8007d92:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007d96:	f842 3b1c 	str.w	r3, [r2], #28
 8007d9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007d9e:	4680      	mov	r8, r0
 8007da0:	460c      	mov	r4, r1
 8007da2:	bf98      	it	ls
 8007da4:	f04f 0b00 	movls.w	fp, #0
 8007da8:	9201      	str	r2, [sp, #4]
 8007daa:	4616      	mov	r6, r2
 8007dac:	46aa      	mov	sl, r5
 8007dae:	462f      	mov	r7, r5
 8007db0:	9502      	str	r5, [sp, #8]
 8007db2:	68a2      	ldr	r2, [r4, #8]
 8007db4:	b15a      	cbz	r2, 8007dce <_scanf_float+0x66>
 8007db6:	f8d9 3000 	ldr.w	r3, [r9]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b4e      	cmp	r3, #78	@ 0x4e
 8007dbe:	d863      	bhi.n	8007e88 <_scanf_float+0x120>
 8007dc0:	2b40      	cmp	r3, #64	@ 0x40
 8007dc2:	d83b      	bhi.n	8007e3c <_scanf_float+0xd4>
 8007dc4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007dc8:	b2c8      	uxtb	r0, r1
 8007dca:	280e      	cmp	r0, #14
 8007dcc:	d939      	bls.n	8007e42 <_scanf_float+0xda>
 8007dce:	b11f      	cbz	r7, 8007dd8 <_scanf_float+0x70>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dd6:	6023      	str	r3, [r4, #0]
 8007dd8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ddc:	f1ba 0f01 	cmp.w	sl, #1
 8007de0:	f200 8114 	bhi.w	800800c <_scanf_float+0x2a4>
 8007de4:	9b01      	ldr	r3, [sp, #4]
 8007de6:	429e      	cmp	r6, r3
 8007de8:	f200 8105 	bhi.w	8007ff6 <_scanf_float+0x28e>
 8007dec:	2001      	movs	r0, #1
 8007dee:	b007      	add	sp, #28
 8007df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007df8:	2a0d      	cmp	r2, #13
 8007dfa:	d8e8      	bhi.n	8007dce <_scanf_float+0x66>
 8007dfc:	a101      	add	r1, pc, #4	@ (adr r1, 8007e04 <_scanf_float+0x9c>)
 8007dfe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e02:	bf00      	nop
 8007e04:	08007f4d 	.word	0x08007f4d
 8007e08:	08007dcf 	.word	0x08007dcf
 8007e0c:	08007dcf 	.word	0x08007dcf
 8007e10:	08007dcf 	.word	0x08007dcf
 8007e14:	08007fa9 	.word	0x08007fa9
 8007e18:	08007f83 	.word	0x08007f83
 8007e1c:	08007dcf 	.word	0x08007dcf
 8007e20:	08007dcf 	.word	0x08007dcf
 8007e24:	08007f5b 	.word	0x08007f5b
 8007e28:	08007dcf 	.word	0x08007dcf
 8007e2c:	08007dcf 	.word	0x08007dcf
 8007e30:	08007dcf 	.word	0x08007dcf
 8007e34:	08007dcf 	.word	0x08007dcf
 8007e38:	08007f17 	.word	0x08007f17
 8007e3c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007e40:	e7da      	b.n	8007df8 <_scanf_float+0x90>
 8007e42:	290e      	cmp	r1, #14
 8007e44:	d8c3      	bhi.n	8007dce <_scanf_float+0x66>
 8007e46:	a001      	add	r0, pc, #4	@ (adr r0, 8007e4c <_scanf_float+0xe4>)
 8007e48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007e4c:	08007f07 	.word	0x08007f07
 8007e50:	08007dcf 	.word	0x08007dcf
 8007e54:	08007f07 	.word	0x08007f07
 8007e58:	08007f97 	.word	0x08007f97
 8007e5c:	08007dcf 	.word	0x08007dcf
 8007e60:	08007ea9 	.word	0x08007ea9
 8007e64:	08007eed 	.word	0x08007eed
 8007e68:	08007eed 	.word	0x08007eed
 8007e6c:	08007eed 	.word	0x08007eed
 8007e70:	08007eed 	.word	0x08007eed
 8007e74:	08007eed 	.word	0x08007eed
 8007e78:	08007eed 	.word	0x08007eed
 8007e7c:	08007eed 	.word	0x08007eed
 8007e80:	08007eed 	.word	0x08007eed
 8007e84:	08007eed 	.word	0x08007eed
 8007e88:	2b6e      	cmp	r3, #110	@ 0x6e
 8007e8a:	d809      	bhi.n	8007ea0 <_scanf_float+0x138>
 8007e8c:	2b60      	cmp	r3, #96	@ 0x60
 8007e8e:	d8b1      	bhi.n	8007df4 <_scanf_float+0x8c>
 8007e90:	2b54      	cmp	r3, #84	@ 0x54
 8007e92:	d07b      	beq.n	8007f8c <_scanf_float+0x224>
 8007e94:	2b59      	cmp	r3, #89	@ 0x59
 8007e96:	d19a      	bne.n	8007dce <_scanf_float+0x66>
 8007e98:	2d07      	cmp	r5, #7
 8007e9a:	d198      	bne.n	8007dce <_scanf_float+0x66>
 8007e9c:	2508      	movs	r5, #8
 8007e9e:	e02f      	b.n	8007f00 <_scanf_float+0x198>
 8007ea0:	2b74      	cmp	r3, #116	@ 0x74
 8007ea2:	d073      	beq.n	8007f8c <_scanf_float+0x224>
 8007ea4:	2b79      	cmp	r3, #121	@ 0x79
 8007ea6:	e7f6      	b.n	8007e96 <_scanf_float+0x12e>
 8007ea8:	6821      	ldr	r1, [r4, #0]
 8007eaa:	05c8      	lsls	r0, r1, #23
 8007eac:	d51e      	bpl.n	8007eec <_scanf_float+0x184>
 8007eae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007eb2:	6021      	str	r1, [r4, #0]
 8007eb4:	3701      	adds	r7, #1
 8007eb6:	f1bb 0f00 	cmp.w	fp, #0
 8007eba:	d003      	beq.n	8007ec4 <_scanf_float+0x15c>
 8007ebc:	3201      	adds	r2, #1
 8007ebe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ec2:	60a2      	str	r2, [r4, #8]
 8007ec4:	68a3      	ldr	r3, [r4, #8]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	60a3      	str	r3, [r4, #8]
 8007eca:	6923      	ldr	r3, [r4, #16]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	6123      	str	r3, [r4, #16]
 8007ed0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f8c9 3004 	str.w	r3, [r9, #4]
 8007edc:	f340 8082 	ble.w	8007fe4 <_scanf_float+0x27c>
 8007ee0:	f8d9 3000 	ldr.w	r3, [r9]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	f8c9 3000 	str.w	r3, [r9]
 8007eea:	e762      	b.n	8007db2 <_scanf_float+0x4a>
 8007eec:	eb1a 0105 	adds.w	r1, sl, r5
 8007ef0:	f47f af6d 	bne.w	8007dce <_scanf_float+0x66>
 8007ef4:	6822      	ldr	r2, [r4, #0]
 8007ef6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007efa:	6022      	str	r2, [r4, #0]
 8007efc:	460d      	mov	r5, r1
 8007efe:	468a      	mov	sl, r1
 8007f00:	f806 3b01 	strb.w	r3, [r6], #1
 8007f04:	e7de      	b.n	8007ec4 <_scanf_float+0x15c>
 8007f06:	6822      	ldr	r2, [r4, #0]
 8007f08:	0610      	lsls	r0, r2, #24
 8007f0a:	f57f af60 	bpl.w	8007dce <_scanf_float+0x66>
 8007f0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f12:	6022      	str	r2, [r4, #0]
 8007f14:	e7f4      	b.n	8007f00 <_scanf_float+0x198>
 8007f16:	f1ba 0f00 	cmp.w	sl, #0
 8007f1a:	d10c      	bne.n	8007f36 <_scanf_float+0x1ce>
 8007f1c:	b977      	cbnz	r7, 8007f3c <_scanf_float+0x1d4>
 8007f1e:	6822      	ldr	r2, [r4, #0]
 8007f20:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007f24:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007f28:	d108      	bne.n	8007f3c <_scanf_float+0x1d4>
 8007f2a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007f2e:	6022      	str	r2, [r4, #0]
 8007f30:	f04f 0a01 	mov.w	sl, #1
 8007f34:	e7e4      	b.n	8007f00 <_scanf_float+0x198>
 8007f36:	f1ba 0f02 	cmp.w	sl, #2
 8007f3a:	d050      	beq.n	8007fde <_scanf_float+0x276>
 8007f3c:	2d01      	cmp	r5, #1
 8007f3e:	d002      	beq.n	8007f46 <_scanf_float+0x1de>
 8007f40:	2d04      	cmp	r5, #4
 8007f42:	f47f af44 	bne.w	8007dce <_scanf_float+0x66>
 8007f46:	3501      	adds	r5, #1
 8007f48:	b2ed      	uxtb	r5, r5
 8007f4a:	e7d9      	b.n	8007f00 <_scanf_float+0x198>
 8007f4c:	f1ba 0f01 	cmp.w	sl, #1
 8007f50:	f47f af3d 	bne.w	8007dce <_scanf_float+0x66>
 8007f54:	f04f 0a02 	mov.w	sl, #2
 8007f58:	e7d2      	b.n	8007f00 <_scanf_float+0x198>
 8007f5a:	b975      	cbnz	r5, 8007f7a <_scanf_float+0x212>
 8007f5c:	2f00      	cmp	r7, #0
 8007f5e:	f47f af37 	bne.w	8007dd0 <_scanf_float+0x68>
 8007f62:	6822      	ldr	r2, [r4, #0]
 8007f64:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007f68:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007f6c:	f040 8103 	bne.w	8008176 <_scanf_float+0x40e>
 8007f70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007f74:	6022      	str	r2, [r4, #0]
 8007f76:	2501      	movs	r5, #1
 8007f78:	e7c2      	b.n	8007f00 <_scanf_float+0x198>
 8007f7a:	2d03      	cmp	r5, #3
 8007f7c:	d0e3      	beq.n	8007f46 <_scanf_float+0x1de>
 8007f7e:	2d05      	cmp	r5, #5
 8007f80:	e7df      	b.n	8007f42 <_scanf_float+0x1da>
 8007f82:	2d02      	cmp	r5, #2
 8007f84:	f47f af23 	bne.w	8007dce <_scanf_float+0x66>
 8007f88:	2503      	movs	r5, #3
 8007f8a:	e7b9      	b.n	8007f00 <_scanf_float+0x198>
 8007f8c:	2d06      	cmp	r5, #6
 8007f8e:	f47f af1e 	bne.w	8007dce <_scanf_float+0x66>
 8007f92:	2507      	movs	r5, #7
 8007f94:	e7b4      	b.n	8007f00 <_scanf_float+0x198>
 8007f96:	6822      	ldr	r2, [r4, #0]
 8007f98:	0591      	lsls	r1, r2, #22
 8007f9a:	f57f af18 	bpl.w	8007dce <_scanf_float+0x66>
 8007f9e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007fa2:	6022      	str	r2, [r4, #0]
 8007fa4:	9702      	str	r7, [sp, #8]
 8007fa6:	e7ab      	b.n	8007f00 <_scanf_float+0x198>
 8007fa8:	6822      	ldr	r2, [r4, #0]
 8007faa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007fae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007fb2:	d005      	beq.n	8007fc0 <_scanf_float+0x258>
 8007fb4:	0550      	lsls	r0, r2, #21
 8007fb6:	f57f af0a 	bpl.w	8007dce <_scanf_float+0x66>
 8007fba:	2f00      	cmp	r7, #0
 8007fbc:	f000 80db 	beq.w	8008176 <_scanf_float+0x40e>
 8007fc0:	0591      	lsls	r1, r2, #22
 8007fc2:	bf58      	it	pl
 8007fc4:	9902      	ldrpl	r1, [sp, #8]
 8007fc6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007fca:	bf58      	it	pl
 8007fcc:	1a79      	subpl	r1, r7, r1
 8007fce:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007fd2:	bf58      	it	pl
 8007fd4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007fd8:	6022      	str	r2, [r4, #0]
 8007fda:	2700      	movs	r7, #0
 8007fdc:	e790      	b.n	8007f00 <_scanf_float+0x198>
 8007fde:	f04f 0a03 	mov.w	sl, #3
 8007fe2:	e78d      	b.n	8007f00 <_scanf_float+0x198>
 8007fe4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007fe8:	4649      	mov	r1, r9
 8007fea:	4640      	mov	r0, r8
 8007fec:	4798      	blx	r3
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	f43f aedf 	beq.w	8007db2 <_scanf_float+0x4a>
 8007ff4:	e6eb      	b.n	8007dce <_scanf_float+0x66>
 8007ff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ffa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ffe:	464a      	mov	r2, r9
 8008000:	4640      	mov	r0, r8
 8008002:	4798      	blx	r3
 8008004:	6923      	ldr	r3, [r4, #16]
 8008006:	3b01      	subs	r3, #1
 8008008:	6123      	str	r3, [r4, #16]
 800800a:	e6eb      	b.n	8007de4 <_scanf_float+0x7c>
 800800c:	1e6b      	subs	r3, r5, #1
 800800e:	2b06      	cmp	r3, #6
 8008010:	d824      	bhi.n	800805c <_scanf_float+0x2f4>
 8008012:	2d02      	cmp	r5, #2
 8008014:	d836      	bhi.n	8008084 <_scanf_float+0x31c>
 8008016:	9b01      	ldr	r3, [sp, #4]
 8008018:	429e      	cmp	r6, r3
 800801a:	f67f aee7 	bls.w	8007dec <_scanf_float+0x84>
 800801e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008022:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008026:	464a      	mov	r2, r9
 8008028:	4640      	mov	r0, r8
 800802a:	4798      	blx	r3
 800802c:	6923      	ldr	r3, [r4, #16]
 800802e:	3b01      	subs	r3, #1
 8008030:	6123      	str	r3, [r4, #16]
 8008032:	e7f0      	b.n	8008016 <_scanf_float+0x2ae>
 8008034:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008038:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800803c:	464a      	mov	r2, r9
 800803e:	4640      	mov	r0, r8
 8008040:	4798      	blx	r3
 8008042:	6923      	ldr	r3, [r4, #16]
 8008044:	3b01      	subs	r3, #1
 8008046:	6123      	str	r3, [r4, #16]
 8008048:	f10a 3aff 	add.w	sl, sl, #4294967295
 800804c:	fa5f fa8a 	uxtb.w	sl, sl
 8008050:	f1ba 0f02 	cmp.w	sl, #2
 8008054:	d1ee      	bne.n	8008034 <_scanf_float+0x2cc>
 8008056:	3d03      	subs	r5, #3
 8008058:	b2ed      	uxtb	r5, r5
 800805a:	1b76      	subs	r6, r6, r5
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	05da      	lsls	r2, r3, #23
 8008060:	d530      	bpl.n	80080c4 <_scanf_float+0x35c>
 8008062:	055b      	lsls	r3, r3, #21
 8008064:	d511      	bpl.n	800808a <_scanf_float+0x322>
 8008066:	9b01      	ldr	r3, [sp, #4]
 8008068:	429e      	cmp	r6, r3
 800806a:	f67f aebf 	bls.w	8007dec <_scanf_float+0x84>
 800806e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008072:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008076:	464a      	mov	r2, r9
 8008078:	4640      	mov	r0, r8
 800807a:	4798      	blx	r3
 800807c:	6923      	ldr	r3, [r4, #16]
 800807e:	3b01      	subs	r3, #1
 8008080:	6123      	str	r3, [r4, #16]
 8008082:	e7f0      	b.n	8008066 <_scanf_float+0x2fe>
 8008084:	46aa      	mov	sl, r5
 8008086:	46b3      	mov	fp, r6
 8008088:	e7de      	b.n	8008048 <_scanf_float+0x2e0>
 800808a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800808e:	6923      	ldr	r3, [r4, #16]
 8008090:	2965      	cmp	r1, #101	@ 0x65
 8008092:	f103 33ff 	add.w	r3, r3, #4294967295
 8008096:	f106 35ff 	add.w	r5, r6, #4294967295
 800809a:	6123      	str	r3, [r4, #16]
 800809c:	d00c      	beq.n	80080b8 <_scanf_float+0x350>
 800809e:	2945      	cmp	r1, #69	@ 0x45
 80080a0:	d00a      	beq.n	80080b8 <_scanf_float+0x350>
 80080a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080a6:	464a      	mov	r2, r9
 80080a8:	4640      	mov	r0, r8
 80080aa:	4798      	blx	r3
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	1eb5      	subs	r5, r6, #2
 80080b6:	6123      	str	r3, [r4, #16]
 80080b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080bc:	464a      	mov	r2, r9
 80080be:	4640      	mov	r0, r8
 80080c0:	4798      	blx	r3
 80080c2:	462e      	mov	r6, r5
 80080c4:	6822      	ldr	r2, [r4, #0]
 80080c6:	f012 0210 	ands.w	r2, r2, #16
 80080ca:	d001      	beq.n	80080d0 <_scanf_float+0x368>
 80080cc:	2000      	movs	r0, #0
 80080ce:	e68e      	b.n	8007dee <_scanf_float+0x86>
 80080d0:	7032      	strb	r2, [r6, #0]
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80080d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080dc:	d125      	bne.n	800812a <_scanf_float+0x3c2>
 80080de:	9b02      	ldr	r3, [sp, #8]
 80080e0:	429f      	cmp	r7, r3
 80080e2:	d00a      	beq.n	80080fa <_scanf_float+0x392>
 80080e4:	1bda      	subs	r2, r3, r7
 80080e6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80080ea:	429e      	cmp	r6, r3
 80080ec:	bf28      	it	cs
 80080ee:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80080f2:	4922      	ldr	r1, [pc, #136]	@ (800817c <_scanf_float+0x414>)
 80080f4:	4630      	mov	r0, r6
 80080f6:	f000 f93d 	bl	8008374 <siprintf>
 80080fa:	9901      	ldr	r1, [sp, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	4640      	mov	r0, r8
 8008100:	f7ff f9ca 	bl	8007498 <_strtod_r>
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	6821      	ldr	r1, [r4, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f011 0f02 	tst.w	r1, #2
 800810e:	ec57 6b10 	vmov	r6, r7, d0
 8008112:	f103 0204 	add.w	r2, r3, #4
 8008116:	d015      	beq.n	8008144 <_scanf_float+0x3dc>
 8008118:	9903      	ldr	r1, [sp, #12]
 800811a:	600a      	str	r2, [r1, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	e9c3 6700 	strd	r6, r7, [r3]
 8008122:	68e3      	ldr	r3, [r4, #12]
 8008124:	3301      	adds	r3, #1
 8008126:	60e3      	str	r3, [r4, #12]
 8008128:	e7d0      	b.n	80080cc <_scanf_float+0x364>
 800812a:	9b04      	ldr	r3, [sp, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0e4      	beq.n	80080fa <_scanf_float+0x392>
 8008130:	9905      	ldr	r1, [sp, #20]
 8008132:	230a      	movs	r3, #10
 8008134:	3101      	adds	r1, #1
 8008136:	4640      	mov	r0, r8
 8008138:	f002 f9fa 	bl	800a530 <_strtol_r>
 800813c:	9b04      	ldr	r3, [sp, #16]
 800813e:	9e05      	ldr	r6, [sp, #20]
 8008140:	1ac2      	subs	r2, r0, r3
 8008142:	e7d0      	b.n	80080e6 <_scanf_float+0x37e>
 8008144:	f011 0f04 	tst.w	r1, #4
 8008148:	9903      	ldr	r1, [sp, #12]
 800814a:	600a      	str	r2, [r1, #0]
 800814c:	d1e6      	bne.n	800811c <_scanf_float+0x3b4>
 800814e:	681d      	ldr	r5, [r3, #0]
 8008150:	4632      	mov	r2, r6
 8008152:	463b      	mov	r3, r7
 8008154:	4630      	mov	r0, r6
 8008156:	4639      	mov	r1, r7
 8008158:	f7f8 fce8 	bl	8000b2c <__aeabi_dcmpun>
 800815c:	b128      	cbz	r0, 800816a <_scanf_float+0x402>
 800815e:	4808      	ldr	r0, [pc, #32]	@ (8008180 <_scanf_float+0x418>)
 8008160:	f000 fa16 	bl	8008590 <nanf>
 8008164:	ed85 0a00 	vstr	s0, [r5]
 8008168:	e7db      	b.n	8008122 <_scanf_float+0x3ba>
 800816a:	4630      	mov	r0, r6
 800816c:	4639      	mov	r1, r7
 800816e:	f7f8 fd3b 	bl	8000be8 <__aeabi_d2f>
 8008172:	6028      	str	r0, [r5, #0]
 8008174:	e7d5      	b.n	8008122 <_scanf_float+0x3ba>
 8008176:	2700      	movs	r7, #0
 8008178:	e62e      	b.n	8007dd8 <_scanf_float+0x70>
 800817a:	bf00      	nop
 800817c:	0800b16e 	.word	0x0800b16e
 8008180:	0800b30d 	.word	0x0800b30d

08008184 <std>:
 8008184:	2300      	movs	r3, #0
 8008186:	b510      	push	{r4, lr}
 8008188:	4604      	mov	r4, r0
 800818a:	e9c0 3300 	strd	r3, r3, [r0]
 800818e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008192:	6083      	str	r3, [r0, #8]
 8008194:	8181      	strh	r1, [r0, #12]
 8008196:	6643      	str	r3, [r0, #100]	@ 0x64
 8008198:	81c2      	strh	r2, [r0, #14]
 800819a:	6183      	str	r3, [r0, #24]
 800819c:	4619      	mov	r1, r3
 800819e:	2208      	movs	r2, #8
 80081a0:	305c      	adds	r0, #92	@ 0x5c
 80081a2:	f000 f94c 	bl	800843e <memset>
 80081a6:	4b0d      	ldr	r3, [pc, #52]	@ (80081dc <std+0x58>)
 80081a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80081aa:	4b0d      	ldr	r3, [pc, #52]	@ (80081e0 <std+0x5c>)
 80081ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081ae:	4b0d      	ldr	r3, [pc, #52]	@ (80081e4 <std+0x60>)
 80081b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081b2:	4b0d      	ldr	r3, [pc, #52]	@ (80081e8 <std+0x64>)
 80081b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80081b6:	4b0d      	ldr	r3, [pc, #52]	@ (80081ec <std+0x68>)
 80081b8:	6224      	str	r4, [r4, #32]
 80081ba:	429c      	cmp	r4, r3
 80081bc:	d006      	beq.n	80081cc <std+0x48>
 80081be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081c2:	4294      	cmp	r4, r2
 80081c4:	d002      	beq.n	80081cc <std+0x48>
 80081c6:	33d0      	adds	r3, #208	@ 0xd0
 80081c8:	429c      	cmp	r4, r3
 80081ca:	d105      	bne.n	80081d8 <std+0x54>
 80081cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d4:	f000 b9c2 	b.w	800855c <__retarget_lock_init_recursive>
 80081d8:	bd10      	pop	{r4, pc}
 80081da:	bf00      	nop
 80081dc:	080083b9 	.word	0x080083b9
 80081e0:	080083db 	.word	0x080083db
 80081e4:	08008413 	.word	0x08008413
 80081e8:	08008437 	.word	0x08008437
 80081ec:	20000698 	.word	0x20000698

080081f0 <stdio_exit_handler>:
 80081f0:	4a02      	ldr	r2, [pc, #8]	@ (80081fc <stdio_exit_handler+0xc>)
 80081f2:	4903      	ldr	r1, [pc, #12]	@ (8008200 <stdio_exit_handler+0x10>)
 80081f4:	4803      	ldr	r0, [pc, #12]	@ (8008204 <stdio_exit_handler+0x14>)
 80081f6:	f000 b869 	b.w	80082cc <_fwalk_sglue>
 80081fa:	bf00      	nop
 80081fc:	20000154 	.word	0x20000154
 8008200:	0800a905 	.word	0x0800a905
 8008204:	200002d0 	.word	0x200002d0

08008208 <cleanup_stdio>:
 8008208:	6841      	ldr	r1, [r0, #4]
 800820a:	4b0c      	ldr	r3, [pc, #48]	@ (800823c <cleanup_stdio+0x34>)
 800820c:	4299      	cmp	r1, r3
 800820e:	b510      	push	{r4, lr}
 8008210:	4604      	mov	r4, r0
 8008212:	d001      	beq.n	8008218 <cleanup_stdio+0x10>
 8008214:	f002 fb76 	bl	800a904 <_fflush_r>
 8008218:	68a1      	ldr	r1, [r4, #8]
 800821a:	4b09      	ldr	r3, [pc, #36]	@ (8008240 <cleanup_stdio+0x38>)
 800821c:	4299      	cmp	r1, r3
 800821e:	d002      	beq.n	8008226 <cleanup_stdio+0x1e>
 8008220:	4620      	mov	r0, r4
 8008222:	f002 fb6f 	bl	800a904 <_fflush_r>
 8008226:	68e1      	ldr	r1, [r4, #12]
 8008228:	4b06      	ldr	r3, [pc, #24]	@ (8008244 <cleanup_stdio+0x3c>)
 800822a:	4299      	cmp	r1, r3
 800822c:	d004      	beq.n	8008238 <cleanup_stdio+0x30>
 800822e:	4620      	mov	r0, r4
 8008230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008234:	f002 bb66 	b.w	800a904 <_fflush_r>
 8008238:	bd10      	pop	{r4, pc}
 800823a:	bf00      	nop
 800823c:	20000698 	.word	0x20000698
 8008240:	20000700 	.word	0x20000700
 8008244:	20000768 	.word	0x20000768

08008248 <global_stdio_init.part.0>:
 8008248:	b510      	push	{r4, lr}
 800824a:	4b0b      	ldr	r3, [pc, #44]	@ (8008278 <global_stdio_init.part.0+0x30>)
 800824c:	4c0b      	ldr	r4, [pc, #44]	@ (800827c <global_stdio_init.part.0+0x34>)
 800824e:	4a0c      	ldr	r2, [pc, #48]	@ (8008280 <global_stdio_init.part.0+0x38>)
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	4620      	mov	r0, r4
 8008254:	2200      	movs	r2, #0
 8008256:	2104      	movs	r1, #4
 8008258:	f7ff ff94 	bl	8008184 <std>
 800825c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008260:	2201      	movs	r2, #1
 8008262:	2109      	movs	r1, #9
 8008264:	f7ff ff8e 	bl	8008184 <std>
 8008268:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800826c:	2202      	movs	r2, #2
 800826e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008272:	2112      	movs	r1, #18
 8008274:	f7ff bf86 	b.w	8008184 <std>
 8008278:	200007d0 	.word	0x200007d0
 800827c:	20000698 	.word	0x20000698
 8008280:	080081f1 	.word	0x080081f1

08008284 <__sfp_lock_acquire>:
 8008284:	4801      	ldr	r0, [pc, #4]	@ (800828c <__sfp_lock_acquire+0x8>)
 8008286:	f000 b96a 	b.w	800855e <__retarget_lock_acquire_recursive>
 800828a:	bf00      	nop
 800828c:	200007d9 	.word	0x200007d9

08008290 <__sfp_lock_release>:
 8008290:	4801      	ldr	r0, [pc, #4]	@ (8008298 <__sfp_lock_release+0x8>)
 8008292:	f000 b965 	b.w	8008560 <__retarget_lock_release_recursive>
 8008296:	bf00      	nop
 8008298:	200007d9 	.word	0x200007d9

0800829c <__sinit>:
 800829c:	b510      	push	{r4, lr}
 800829e:	4604      	mov	r4, r0
 80082a0:	f7ff fff0 	bl	8008284 <__sfp_lock_acquire>
 80082a4:	6a23      	ldr	r3, [r4, #32]
 80082a6:	b11b      	cbz	r3, 80082b0 <__sinit+0x14>
 80082a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082ac:	f7ff bff0 	b.w	8008290 <__sfp_lock_release>
 80082b0:	4b04      	ldr	r3, [pc, #16]	@ (80082c4 <__sinit+0x28>)
 80082b2:	6223      	str	r3, [r4, #32]
 80082b4:	4b04      	ldr	r3, [pc, #16]	@ (80082c8 <__sinit+0x2c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1f5      	bne.n	80082a8 <__sinit+0xc>
 80082bc:	f7ff ffc4 	bl	8008248 <global_stdio_init.part.0>
 80082c0:	e7f2      	b.n	80082a8 <__sinit+0xc>
 80082c2:	bf00      	nop
 80082c4:	08008209 	.word	0x08008209
 80082c8:	200007d0 	.word	0x200007d0

080082cc <_fwalk_sglue>:
 80082cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d0:	4607      	mov	r7, r0
 80082d2:	4688      	mov	r8, r1
 80082d4:	4614      	mov	r4, r2
 80082d6:	2600      	movs	r6, #0
 80082d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082dc:	f1b9 0901 	subs.w	r9, r9, #1
 80082e0:	d505      	bpl.n	80082ee <_fwalk_sglue+0x22>
 80082e2:	6824      	ldr	r4, [r4, #0]
 80082e4:	2c00      	cmp	r4, #0
 80082e6:	d1f7      	bne.n	80082d8 <_fwalk_sglue+0xc>
 80082e8:	4630      	mov	r0, r6
 80082ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ee:	89ab      	ldrh	r3, [r5, #12]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d907      	bls.n	8008304 <_fwalk_sglue+0x38>
 80082f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082f8:	3301      	adds	r3, #1
 80082fa:	d003      	beq.n	8008304 <_fwalk_sglue+0x38>
 80082fc:	4629      	mov	r1, r5
 80082fe:	4638      	mov	r0, r7
 8008300:	47c0      	blx	r8
 8008302:	4306      	orrs	r6, r0
 8008304:	3568      	adds	r5, #104	@ 0x68
 8008306:	e7e9      	b.n	80082dc <_fwalk_sglue+0x10>

08008308 <sniprintf>:
 8008308:	b40c      	push	{r2, r3}
 800830a:	b530      	push	{r4, r5, lr}
 800830c:	4b18      	ldr	r3, [pc, #96]	@ (8008370 <sniprintf+0x68>)
 800830e:	1e0c      	subs	r4, r1, #0
 8008310:	681d      	ldr	r5, [r3, #0]
 8008312:	b09d      	sub	sp, #116	@ 0x74
 8008314:	da08      	bge.n	8008328 <sniprintf+0x20>
 8008316:	238b      	movs	r3, #139	@ 0x8b
 8008318:	602b      	str	r3, [r5, #0]
 800831a:	f04f 30ff 	mov.w	r0, #4294967295
 800831e:	b01d      	add	sp, #116	@ 0x74
 8008320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008324:	b002      	add	sp, #8
 8008326:	4770      	bx	lr
 8008328:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800832c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008330:	f04f 0300 	mov.w	r3, #0
 8008334:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008336:	bf14      	ite	ne
 8008338:	f104 33ff 	addne.w	r3, r4, #4294967295
 800833c:	4623      	moveq	r3, r4
 800833e:	9304      	str	r3, [sp, #16]
 8008340:	9307      	str	r3, [sp, #28]
 8008342:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008346:	9002      	str	r0, [sp, #8]
 8008348:	9006      	str	r0, [sp, #24]
 800834a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800834e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008350:	ab21      	add	r3, sp, #132	@ 0x84
 8008352:	a902      	add	r1, sp, #8
 8008354:	4628      	mov	r0, r5
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	f002 f954 	bl	800a604 <_svfiprintf_r>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	bfbc      	itt	lt
 8008360:	238b      	movlt	r3, #139	@ 0x8b
 8008362:	602b      	strlt	r3, [r5, #0]
 8008364:	2c00      	cmp	r4, #0
 8008366:	d0da      	beq.n	800831e <sniprintf+0x16>
 8008368:	9b02      	ldr	r3, [sp, #8]
 800836a:	2200      	movs	r2, #0
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	e7d6      	b.n	800831e <sniprintf+0x16>
 8008370:	200002cc 	.word	0x200002cc

08008374 <siprintf>:
 8008374:	b40e      	push	{r1, r2, r3}
 8008376:	b510      	push	{r4, lr}
 8008378:	b09d      	sub	sp, #116	@ 0x74
 800837a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800837c:	9002      	str	r0, [sp, #8]
 800837e:	9006      	str	r0, [sp, #24]
 8008380:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008384:	480a      	ldr	r0, [pc, #40]	@ (80083b0 <siprintf+0x3c>)
 8008386:	9107      	str	r1, [sp, #28]
 8008388:	9104      	str	r1, [sp, #16]
 800838a:	490a      	ldr	r1, [pc, #40]	@ (80083b4 <siprintf+0x40>)
 800838c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008390:	9105      	str	r1, [sp, #20]
 8008392:	2400      	movs	r4, #0
 8008394:	a902      	add	r1, sp, #8
 8008396:	6800      	ldr	r0, [r0, #0]
 8008398:	9301      	str	r3, [sp, #4]
 800839a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800839c:	f002 f932 	bl	800a604 <_svfiprintf_r>
 80083a0:	9b02      	ldr	r3, [sp, #8]
 80083a2:	701c      	strb	r4, [r3, #0]
 80083a4:	b01d      	add	sp, #116	@ 0x74
 80083a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083aa:	b003      	add	sp, #12
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	200002cc 	.word	0x200002cc
 80083b4:	ffff0208 	.word	0xffff0208

080083b8 <__sread>:
 80083b8:	b510      	push	{r4, lr}
 80083ba:	460c      	mov	r4, r1
 80083bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c0:	f000 f87e 	bl	80084c0 <_read_r>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	bfab      	itete	ge
 80083c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80083ca:	89a3      	ldrhlt	r3, [r4, #12]
 80083cc:	181b      	addge	r3, r3, r0
 80083ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083d2:	bfac      	ite	ge
 80083d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083d6:	81a3      	strhlt	r3, [r4, #12]
 80083d8:	bd10      	pop	{r4, pc}

080083da <__swrite>:
 80083da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083de:	461f      	mov	r7, r3
 80083e0:	898b      	ldrh	r3, [r1, #12]
 80083e2:	05db      	lsls	r3, r3, #23
 80083e4:	4605      	mov	r5, r0
 80083e6:	460c      	mov	r4, r1
 80083e8:	4616      	mov	r6, r2
 80083ea:	d505      	bpl.n	80083f8 <__swrite+0x1e>
 80083ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f0:	2302      	movs	r3, #2
 80083f2:	2200      	movs	r2, #0
 80083f4:	f000 f852 	bl	800849c <_lseek_r>
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008402:	81a3      	strh	r3, [r4, #12]
 8008404:	4632      	mov	r2, r6
 8008406:	463b      	mov	r3, r7
 8008408:	4628      	mov	r0, r5
 800840a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800840e:	f000 b869 	b.w	80084e4 <_write_r>

08008412 <__sseek>:
 8008412:	b510      	push	{r4, lr}
 8008414:	460c      	mov	r4, r1
 8008416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800841a:	f000 f83f 	bl	800849c <_lseek_r>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	89a3      	ldrh	r3, [r4, #12]
 8008422:	bf15      	itete	ne
 8008424:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008426:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800842a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800842e:	81a3      	strheq	r3, [r4, #12]
 8008430:	bf18      	it	ne
 8008432:	81a3      	strhne	r3, [r4, #12]
 8008434:	bd10      	pop	{r4, pc}

08008436 <__sclose>:
 8008436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843a:	f000 b81f 	b.w	800847c <_close_r>

0800843e <memset>:
 800843e:	4402      	add	r2, r0
 8008440:	4603      	mov	r3, r0
 8008442:	4293      	cmp	r3, r2
 8008444:	d100      	bne.n	8008448 <memset+0xa>
 8008446:	4770      	bx	lr
 8008448:	f803 1b01 	strb.w	r1, [r3], #1
 800844c:	e7f9      	b.n	8008442 <memset+0x4>

0800844e <strncmp>:
 800844e:	b510      	push	{r4, lr}
 8008450:	b16a      	cbz	r2, 800846e <strncmp+0x20>
 8008452:	3901      	subs	r1, #1
 8008454:	1884      	adds	r4, r0, r2
 8008456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800845a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800845e:	429a      	cmp	r2, r3
 8008460:	d103      	bne.n	800846a <strncmp+0x1c>
 8008462:	42a0      	cmp	r0, r4
 8008464:	d001      	beq.n	800846a <strncmp+0x1c>
 8008466:	2a00      	cmp	r2, #0
 8008468:	d1f5      	bne.n	8008456 <strncmp+0x8>
 800846a:	1ad0      	subs	r0, r2, r3
 800846c:	bd10      	pop	{r4, pc}
 800846e:	4610      	mov	r0, r2
 8008470:	e7fc      	b.n	800846c <strncmp+0x1e>
	...

08008474 <_localeconv_r>:
 8008474:	4800      	ldr	r0, [pc, #0]	@ (8008478 <_localeconv_r+0x4>)
 8008476:	4770      	bx	lr
 8008478:	20000250 	.word	0x20000250

0800847c <_close_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4d06      	ldr	r5, [pc, #24]	@ (8008498 <_close_r+0x1c>)
 8008480:	2300      	movs	r3, #0
 8008482:	4604      	mov	r4, r0
 8008484:	4608      	mov	r0, r1
 8008486:	602b      	str	r3, [r5, #0]
 8008488:	f7f9 fd5e 	bl	8001f48 <_close>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	d102      	bne.n	8008496 <_close_r+0x1a>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	b103      	cbz	r3, 8008496 <_close_r+0x1a>
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	200007d4 	.word	0x200007d4

0800849c <_lseek_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4d07      	ldr	r5, [pc, #28]	@ (80084bc <_lseek_r+0x20>)
 80084a0:	4604      	mov	r4, r0
 80084a2:	4608      	mov	r0, r1
 80084a4:	4611      	mov	r1, r2
 80084a6:	2200      	movs	r2, #0
 80084a8:	602a      	str	r2, [r5, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	f7f9 fd73 	bl	8001f96 <_lseek>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_lseek_r+0x1e>
 80084b4:	682b      	ldr	r3, [r5, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_lseek_r+0x1e>
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	200007d4 	.word	0x200007d4

080084c0 <_read_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4d07      	ldr	r5, [pc, #28]	@ (80084e0 <_read_r+0x20>)
 80084c4:	4604      	mov	r4, r0
 80084c6:	4608      	mov	r0, r1
 80084c8:	4611      	mov	r1, r2
 80084ca:	2200      	movs	r2, #0
 80084cc:	602a      	str	r2, [r5, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	f7f9 fd1d 	bl	8001f0e <_read>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_read_r+0x1e>
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	b103      	cbz	r3, 80084de <_read_r+0x1e>
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	200007d4 	.word	0x200007d4

080084e4 <_write_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4d07      	ldr	r5, [pc, #28]	@ (8008504 <_write_r+0x20>)
 80084e8:	4604      	mov	r4, r0
 80084ea:	4608      	mov	r0, r1
 80084ec:	4611      	mov	r1, r2
 80084ee:	2200      	movs	r2, #0
 80084f0:	602a      	str	r2, [r5, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	f7f9 fb14 	bl	8001b20 <_write>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_write_r+0x1e>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_write_r+0x1e>
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	200007d4 	.word	0x200007d4

08008508 <__errno>:
 8008508:	4b01      	ldr	r3, [pc, #4]	@ (8008510 <__errno+0x8>)
 800850a:	6818      	ldr	r0, [r3, #0]
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	200002cc 	.word	0x200002cc

08008514 <__libc_init_array>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	4d0d      	ldr	r5, [pc, #52]	@ (800854c <__libc_init_array+0x38>)
 8008518:	4c0d      	ldr	r4, [pc, #52]	@ (8008550 <__libc_init_array+0x3c>)
 800851a:	1b64      	subs	r4, r4, r5
 800851c:	10a4      	asrs	r4, r4, #2
 800851e:	2600      	movs	r6, #0
 8008520:	42a6      	cmp	r6, r4
 8008522:	d109      	bne.n	8008538 <__libc_init_array+0x24>
 8008524:	4d0b      	ldr	r5, [pc, #44]	@ (8008554 <__libc_init_array+0x40>)
 8008526:	4c0c      	ldr	r4, [pc, #48]	@ (8008558 <__libc_init_array+0x44>)
 8008528:	f002 fd5c 	bl	800afe4 <_init>
 800852c:	1b64      	subs	r4, r4, r5
 800852e:	10a4      	asrs	r4, r4, #2
 8008530:	2600      	movs	r6, #0
 8008532:	42a6      	cmp	r6, r4
 8008534:	d105      	bne.n	8008542 <__libc_init_array+0x2e>
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	f855 3b04 	ldr.w	r3, [r5], #4
 800853c:	4798      	blx	r3
 800853e:	3601      	adds	r6, #1
 8008540:	e7ee      	b.n	8008520 <__libc_init_array+0xc>
 8008542:	f855 3b04 	ldr.w	r3, [r5], #4
 8008546:	4798      	blx	r3
 8008548:	3601      	adds	r6, #1
 800854a:	e7f2      	b.n	8008532 <__libc_init_array+0x1e>
 800854c:	0800b56c 	.word	0x0800b56c
 8008550:	0800b56c 	.word	0x0800b56c
 8008554:	0800b56c 	.word	0x0800b56c
 8008558:	0800b570 	.word	0x0800b570

0800855c <__retarget_lock_init_recursive>:
 800855c:	4770      	bx	lr

0800855e <__retarget_lock_acquire_recursive>:
 800855e:	4770      	bx	lr

08008560 <__retarget_lock_release_recursive>:
 8008560:	4770      	bx	lr

08008562 <memcpy>:
 8008562:	440a      	add	r2, r1
 8008564:	4291      	cmp	r1, r2
 8008566:	f100 33ff 	add.w	r3, r0, #4294967295
 800856a:	d100      	bne.n	800856e <memcpy+0xc>
 800856c:	4770      	bx	lr
 800856e:	b510      	push	{r4, lr}
 8008570:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008578:	4291      	cmp	r1, r2
 800857a:	d1f9      	bne.n	8008570 <memcpy+0xe>
 800857c:	bd10      	pop	{r4, pc}
	...

08008580 <nan>:
 8008580:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008588 <nan+0x8>
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	00000000 	.word	0x00000000
 800858c:	7ff80000 	.word	0x7ff80000

08008590 <nanf>:
 8008590:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008598 <nanf+0x8>
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	7fc00000 	.word	0x7fc00000

0800859c <quorem>:
 800859c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	6903      	ldr	r3, [r0, #16]
 80085a2:	690c      	ldr	r4, [r1, #16]
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	4607      	mov	r7, r0
 80085a8:	db7e      	blt.n	80086a8 <quorem+0x10c>
 80085aa:	3c01      	subs	r4, #1
 80085ac:	f101 0814 	add.w	r8, r1, #20
 80085b0:	00a3      	lsls	r3, r4, #2
 80085b2:	f100 0514 	add.w	r5, r0, #20
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085c6:	3301      	adds	r3, #1
 80085c8:	429a      	cmp	r2, r3
 80085ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80085d2:	d32e      	bcc.n	8008632 <quorem+0x96>
 80085d4:	f04f 0a00 	mov.w	sl, #0
 80085d8:	46c4      	mov	ip, r8
 80085da:	46ae      	mov	lr, r5
 80085dc:	46d3      	mov	fp, sl
 80085de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085e2:	b298      	uxth	r0, r3
 80085e4:	fb06 a000 	mla	r0, r6, r0, sl
 80085e8:	0c02      	lsrs	r2, r0, #16
 80085ea:	0c1b      	lsrs	r3, r3, #16
 80085ec:	fb06 2303 	mla	r3, r6, r3, r2
 80085f0:	f8de 2000 	ldr.w	r2, [lr]
 80085f4:	b280      	uxth	r0, r0
 80085f6:	b292      	uxth	r2, r2
 80085f8:	1a12      	subs	r2, r2, r0
 80085fa:	445a      	add	r2, fp
 80085fc:	f8de 0000 	ldr.w	r0, [lr]
 8008600:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008604:	b29b      	uxth	r3, r3
 8008606:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800860a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800860e:	b292      	uxth	r2, r2
 8008610:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008614:	45e1      	cmp	r9, ip
 8008616:	f84e 2b04 	str.w	r2, [lr], #4
 800861a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800861e:	d2de      	bcs.n	80085de <quorem+0x42>
 8008620:	9b00      	ldr	r3, [sp, #0]
 8008622:	58eb      	ldr	r3, [r5, r3]
 8008624:	b92b      	cbnz	r3, 8008632 <quorem+0x96>
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	3b04      	subs	r3, #4
 800862a:	429d      	cmp	r5, r3
 800862c:	461a      	mov	r2, r3
 800862e:	d32f      	bcc.n	8008690 <quorem+0xf4>
 8008630:	613c      	str	r4, [r7, #16]
 8008632:	4638      	mov	r0, r7
 8008634:	f001 fd14 	bl	800a060 <__mcmp>
 8008638:	2800      	cmp	r0, #0
 800863a:	db25      	blt.n	8008688 <quorem+0xec>
 800863c:	4629      	mov	r1, r5
 800863e:	2000      	movs	r0, #0
 8008640:	f858 2b04 	ldr.w	r2, [r8], #4
 8008644:	f8d1 c000 	ldr.w	ip, [r1]
 8008648:	fa1f fe82 	uxth.w	lr, r2
 800864c:	fa1f f38c 	uxth.w	r3, ip
 8008650:	eba3 030e 	sub.w	r3, r3, lr
 8008654:	4403      	add	r3, r0
 8008656:	0c12      	lsrs	r2, r2, #16
 8008658:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800865c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008660:	b29b      	uxth	r3, r3
 8008662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008666:	45c1      	cmp	r9, r8
 8008668:	f841 3b04 	str.w	r3, [r1], #4
 800866c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008670:	d2e6      	bcs.n	8008640 <quorem+0xa4>
 8008672:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008676:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800867a:	b922      	cbnz	r2, 8008686 <quorem+0xea>
 800867c:	3b04      	subs	r3, #4
 800867e:	429d      	cmp	r5, r3
 8008680:	461a      	mov	r2, r3
 8008682:	d30b      	bcc.n	800869c <quorem+0x100>
 8008684:	613c      	str	r4, [r7, #16]
 8008686:	3601      	adds	r6, #1
 8008688:	4630      	mov	r0, r6
 800868a:	b003      	add	sp, #12
 800868c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008690:	6812      	ldr	r2, [r2, #0]
 8008692:	3b04      	subs	r3, #4
 8008694:	2a00      	cmp	r2, #0
 8008696:	d1cb      	bne.n	8008630 <quorem+0x94>
 8008698:	3c01      	subs	r4, #1
 800869a:	e7c6      	b.n	800862a <quorem+0x8e>
 800869c:	6812      	ldr	r2, [r2, #0]
 800869e:	3b04      	subs	r3, #4
 80086a0:	2a00      	cmp	r2, #0
 80086a2:	d1ef      	bne.n	8008684 <quorem+0xe8>
 80086a4:	3c01      	subs	r4, #1
 80086a6:	e7ea      	b.n	800867e <quorem+0xe2>
 80086a8:	2000      	movs	r0, #0
 80086aa:	e7ee      	b.n	800868a <quorem+0xee>
 80086ac:	0000      	movs	r0, r0
	...

080086b0 <_dtoa_r>:
 80086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	69c7      	ldr	r7, [r0, #28]
 80086b6:	b097      	sub	sp, #92	@ 0x5c
 80086b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80086bc:	ec55 4b10 	vmov	r4, r5, d0
 80086c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80086c2:	9107      	str	r1, [sp, #28]
 80086c4:	4681      	mov	r9, r0
 80086c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80086c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80086ca:	b97f      	cbnz	r7, 80086ec <_dtoa_r+0x3c>
 80086cc:	2010      	movs	r0, #16
 80086ce:	f001 f943 	bl	8009958 <malloc>
 80086d2:	4602      	mov	r2, r0
 80086d4:	f8c9 001c 	str.w	r0, [r9, #28]
 80086d8:	b920      	cbnz	r0, 80086e4 <_dtoa_r+0x34>
 80086da:	4ba9      	ldr	r3, [pc, #676]	@ (8008980 <_dtoa_r+0x2d0>)
 80086dc:	21ef      	movs	r1, #239	@ 0xef
 80086de:	48a9      	ldr	r0, [pc, #676]	@ (8008984 <_dtoa_r+0x2d4>)
 80086e0:	f002 f962 	bl	800a9a8 <__assert_func>
 80086e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80086e8:	6007      	str	r7, [r0, #0]
 80086ea:	60c7      	str	r7, [r0, #12]
 80086ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80086f0:	6819      	ldr	r1, [r3, #0]
 80086f2:	b159      	cbz	r1, 800870c <_dtoa_r+0x5c>
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	604a      	str	r2, [r1, #4]
 80086f8:	2301      	movs	r3, #1
 80086fa:	4093      	lsls	r3, r2
 80086fc:	608b      	str	r3, [r1, #8]
 80086fe:	4648      	mov	r0, r9
 8008700:	f001 fa32 	bl	8009b68 <_Bfree>
 8008704:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	1e2b      	subs	r3, r5, #0
 800870e:	bfb9      	ittee	lt
 8008710:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008714:	9305      	strlt	r3, [sp, #20]
 8008716:	2300      	movge	r3, #0
 8008718:	6033      	strge	r3, [r6, #0]
 800871a:	9f05      	ldr	r7, [sp, #20]
 800871c:	4b9a      	ldr	r3, [pc, #616]	@ (8008988 <_dtoa_r+0x2d8>)
 800871e:	bfbc      	itt	lt
 8008720:	2201      	movlt	r2, #1
 8008722:	6032      	strlt	r2, [r6, #0]
 8008724:	43bb      	bics	r3, r7
 8008726:	d112      	bne.n	800874e <_dtoa_r+0x9e>
 8008728:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800872a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008734:	4323      	orrs	r3, r4
 8008736:	f000 855a 	beq.w	80091ee <_dtoa_r+0xb3e>
 800873a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800873c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800899c <_dtoa_r+0x2ec>
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 855c 	beq.w	80091fe <_dtoa_r+0xb4e>
 8008746:	f10a 0303 	add.w	r3, sl, #3
 800874a:	f000 bd56 	b.w	80091fa <_dtoa_r+0xb4a>
 800874e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008752:	2200      	movs	r2, #0
 8008754:	ec51 0b17 	vmov	r0, r1, d7
 8008758:	2300      	movs	r3, #0
 800875a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800875e:	f7f8 f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008762:	4680      	mov	r8, r0
 8008764:	b158      	cbz	r0, 800877e <_dtoa_r+0xce>
 8008766:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008768:	2301      	movs	r3, #1
 800876a:	6013      	str	r3, [r2, #0]
 800876c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800876e:	b113      	cbz	r3, 8008776 <_dtoa_r+0xc6>
 8008770:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008772:	4b86      	ldr	r3, [pc, #536]	@ (800898c <_dtoa_r+0x2dc>)
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80089a0 <_dtoa_r+0x2f0>
 800877a:	f000 bd40 	b.w	80091fe <_dtoa_r+0xb4e>
 800877e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008782:	aa14      	add	r2, sp, #80	@ 0x50
 8008784:	a915      	add	r1, sp, #84	@ 0x54
 8008786:	4648      	mov	r0, r9
 8008788:	f001 fd8a 	bl	800a2a0 <__d2b>
 800878c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008790:	9002      	str	r0, [sp, #8]
 8008792:	2e00      	cmp	r6, #0
 8008794:	d078      	beq.n	8008888 <_dtoa_r+0x1d8>
 8008796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008798:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800879c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80087a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80087a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80087ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80087b0:	4619      	mov	r1, r3
 80087b2:	2200      	movs	r2, #0
 80087b4:	4b76      	ldr	r3, [pc, #472]	@ (8008990 <_dtoa_r+0x2e0>)
 80087b6:	f7f7 fd67 	bl	8000288 <__aeabi_dsub>
 80087ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8008968 <_dtoa_r+0x2b8>)
 80087bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c0:	f7f7 ff1a 	bl	80005f8 <__aeabi_dmul>
 80087c4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008970 <_dtoa_r+0x2c0>)
 80087c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ca:	f7f7 fd5f 	bl	800028c <__adddf3>
 80087ce:	4604      	mov	r4, r0
 80087d0:	4630      	mov	r0, r6
 80087d2:	460d      	mov	r5, r1
 80087d4:	f7f7 fea6 	bl	8000524 <__aeabi_i2d>
 80087d8:	a367      	add	r3, pc, #412	@ (adr r3, 8008978 <_dtoa_r+0x2c8>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f7f7 ff0b 	bl	80005f8 <__aeabi_dmul>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4620      	mov	r0, r4
 80087e8:	4629      	mov	r1, r5
 80087ea:	f7f7 fd4f 	bl	800028c <__adddf3>
 80087ee:	4604      	mov	r4, r0
 80087f0:	460d      	mov	r5, r1
 80087f2:	f7f8 f9b1 	bl	8000b58 <__aeabi_d2iz>
 80087f6:	2200      	movs	r2, #0
 80087f8:	4607      	mov	r7, r0
 80087fa:	2300      	movs	r3, #0
 80087fc:	4620      	mov	r0, r4
 80087fe:	4629      	mov	r1, r5
 8008800:	f7f8 f96c 	bl	8000adc <__aeabi_dcmplt>
 8008804:	b140      	cbz	r0, 8008818 <_dtoa_r+0x168>
 8008806:	4638      	mov	r0, r7
 8008808:	f7f7 fe8c 	bl	8000524 <__aeabi_i2d>
 800880c:	4622      	mov	r2, r4
 800880e:	462b      	mov	r3, r5
 8008810:	f7f8 f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008814:	b900      	cbnz	r0, 8008818 <_dtoa_r+0x168>
 8008816:	3f01      	subs	r7, #1
 8008818:	2f16      	cmp	r7, #22
 800881a:	d852      	bhi.n	80088c2 <_dtoa_r+0x212>
 800881c:	4b5d      	ldr	r3, [pc, #372]	@ (8008994 <_dtoa_r+0x2e4>)
 800881e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800882a:	f7f8 f957 	bl	8000adc <__aeabi_dcmplt>
 800882e:	2800      	cmp	r0, #0
 8008830:	d049      	beq.n	80088c6 <_dtoa_r+0x216>
 8008832:	3f01      	subs	r7, #1
 8008834:	2300      	movs	r3, #0
 8008836:	9310      	str	r3, [sp, #64]	@ 0x40
 8008838:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800883a:	1b9b      	subs	r3, r3, r6
 800883c:	1e5a      	subs	r2, r3, #1
 800883e:	bf45      	ittet	mi
 8008840:	f1c3 0301 	rsbmi	r3, r3, #1
 8008844:	9300      	strmi	r3, [sp, #0]
 8008846:	2300      	movpl	r3, #0
 8008848:	2300      	movmi	r3, #0
 800884a:	9206      	str	r2, [sp, #24]
 800884c:	bf54      	ite	pl
 800884e:	9300      	strpl	r3, [sp, #0]
 8008850:	9306      	strmi	r3, [sp, #24]
 8008852:	2f00      	cmp	r7, #0
 8008854:	db39      	blt.n	80088ca <_dtoa_r+0x21a>
 8008856:	9b06      	ldr	r3, [sp, #24]
 8008858:	970d      	str	r7, [sp, #52]	@ 0x34
 800885a:	443b      	add	r3, r7
 800885c:	9306      	str	r3, [sp, #24]
 800885e:	2300      	movs	r3, #0
 8008860:	9308      	str	r3, [sp, #32]
 8008862:	9b07      	ldr	r3, [sp, #28]
 8008864:	2b09      	cmp	r3, #9
 8008866:	d863      	bhi.n	8008930 <_dtoa_r+0x280>
 8008868:	2b05      	cmp	r3, #5
 800886a:	bfc4      	itt	gt
 800886c:	3b04      	subgt	r3, #4
 800886e:	9307      	strgt	r3, [sp, #28]
 8008870:	9b07      	ldr	r3, [sp, #28]
 8008872:	f1a3 0302 	sub.w	r3, r3, #2
 8008876:	bfcc      	ite	gt
 8008878:	2400      	movgt	r4, #0
 800887a:	2401      	movle	r4, #1
 800887c:	2b03      	cmp	r3, #3
 800887e:	d863      	bhi.n	8008948 <_dtoa_r+0x298>
 8008880:	e8df f003 	tbb	[pc, r3]
 8008884:	2b375452 	.word	0x2b375452
 8008888:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800888c:	441e      	add	r6, r3
 800888e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008892:	2b20      	cmp	r3, #32
 8008894:	bfc1      	itttt	gt
 8008896:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800889a:	409f      	lslgt	r7, r3
 800889c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80088a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80088a4:	bfd6      	itet	le
 80088a6:	f1c3 0320 	rsble	r3, r3, #32
 80088aa:	ea47 0003 	orrgt.w	r0, r7, r3
 80088ae:	fa04 f003 	lslle.w	r0, r4, r3
 80088b2:	f7f7 fe27 	bl	8000504 <__aeabi_ui2d>
 80088b6:	2201      	movs	r2, #1
 80088b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80088bc:	3e01      	subs	r6, #1
 80088be:	9212      	str	r2, [sp, #72]	@ 0x48
 80088c0:	e776      	b.n	80087b0 <_dtoa_r+0x100>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e7b7      	b.n	8008836 <_dtoa_r+0x186>
 80088c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80088c8:	e7b6      	b.n	8008838 <_dtoa_r+0x188>
 80088ca:	9b00      	ldr	r3, [sp, #0]
 80088cc:	1bdb      	subs	r3, r3, r7
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	427b      	negs	r3, r7
 80088d2:	9308      	str	r3, [sp, #32]
 80088d4:	2300      	movs	r3, #0
 80088d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80088d8:	e7c3      	b.n	8008862 <_dtoa_r+0x1b2>
 80088da:	2301      	movs	r3, #1
 80088dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80088de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088e0:	eb07 0b03 	add.w	fp, r7, r3
 80088e4:	f10b 0301 	add.w	r3, fp, #1
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	9303      	str	r3, [sp, #12]
 80088ec:	bfb8      	it	lt
 80088ee:	2301      	movlt	r3, #1
 80088f0:	e006      	b.n	8008900 <_dtoa_r+0x250>
 80088f2:	2301      	movs	r3, #1
 80088f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	dd28      	ble.n	800894e <_dtoa_r+0x29e>
 80088fc:	469b      	mov	fp, r3
 80088fe:	9303      	str	r3, [sp, #12]
 8008900:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008904:	2100      	movs	r1, #0
 8008906:	2204      	movs	r2, #4
 8008908:	f102 0514 	add.w	r5, r2, #20
 800890c:	429d      	cmp	r5, r3
 800890e:	d926      	bls.n	800895e <_dtoa_r+0x2ae>
 8008910:	6041      	str	r1, [r0, #4]
 8008912:	4648      	mov	r0, r9
 8008914:	f001 f8e8 	bl	8009ae8 <_Balloc>
 8008918:	4682      	mov	sl, r0
 800891a:	2800      	cmp	r0, #0
 800891c:	d142      	bne.n	80089a4 <_dtoa_r+0x2f4>
 800891e:	4b1e      	ldr	r3, [pc, #120]	@ (8008998 <_dtoa_r+0x2e8>)
 8008920:	4602      	mov	r2, r0
 8008922:	f240 11af 	movw	r1, #431	@ 0x1af
 8008926:	e6da      	b.n	80086de <_dtoa_r+0x2e>
 8008928:	2300      	movs	r3, #0
 800892a:	e7e3      	b.n	80088f4 <_dtoa_r+0x244>
 800892c:	2300      	movs	r3, #0
 800892e:	e7d5      	b.n	80088dc <_dtoa_r+0x22c>
 8008930:	2401      	movs	r4, #1
 8008932:	2300      	movs	r3, #0
 8008934:	9307      	str	r3, [sp, #28]
 8008936:	9409      	str	r4, [sp, #36]	@ 0x24
 8008938:	f04f 3bff 	mov.w	fp, #4294967295
 800893c:	2200      	movs	r2, #0
 800893e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008942:	2312      	movs	r3, #18
 8008944:	920c      	str	r2, [sp, #48]	@ 0x30
 8008946:	e7db      	b.n	8008900 <_dtoa_r+0x250>
 8008948:	2301      	movs	r3, #1
 800894a:	9309      	str	r3, [sp, #36]	@ 0x24
 800894c:	e7f4      	b.n	8008938 <_dtoa_r+0x288>
 800894e:	f04f 0b01 	mov.w	fp, #1
 8008952:	f8cd b00c 	str.w	fp, [sp, #12]
 8008956:	465b      	mov	r3, fp
 8008958:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800895c:	e7d0      	b.n	8008900 <_dtoa_r+0x250>
 800895e:	3101      	adds	r1, #1
 8008960:	0052      	lsls	r2, r2, #1
 8008962:	e7d1      	b.n	8008908 <_dtoa_r+0x258>
 8008964:	f3af 8000 	nop.w
 8008968:	636f4361 	.word	0x636f4361
 800896c:	3fd287a7 	.word	0x3fd287a7
 8008970:	8b60c8b3 	.word	0x8b60c8b3
 8008974:	3fc68a28 	.word	0x3fc68a28
 8008978:	509f79fb 	.word	0x509f79fb
 800897c:	3fd34413 	.word	0x3fd34413
 8008980:	0800b188 	.word	0x0800b188
 8008984:	0800b19f 	.word	0x0800b19f
 8008988:	7ff00000 	.word	0x7ff00000
 800898c:	0800b14b 	.word	0x0800b14b
 8008990:	3ff80000 	.word	0x3ff80000
 8008994:	0800b398 	.word	0x0800b398
 8008998:	0800b1f7 	.word	0x0800b1f7
 800899c:	0800b184 	.word	0x0800b184
 80089a0:	0800b14a 	.word	0x0800b14a
 80089a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80089a8:	6018      	str	r0, [r3, #0]
 80089aa:	9b03      	ldr	r3, [sp, #12]
 80089ac:	2b0e      	cmp	r3, #14
 80089ae:	f200 80a1 	bhi.w	8008af4 <_dtoa_r+0x444>
 80089b2:	2c00      	cmp	r4, #0
 80089b4:	f000 809e 	beq.w	8008af4 <_dtoa_r+0x444>
 80089b8:	2f00      	cmp	r7, #0
 80089ba:	dd33      	ble.n	8008a24 <_dtoa_r+0x374>
 80089bc:	4b9c      	ldr	r3, [pc, #624]	@ (8008c30 <_dtoa_r+0x580>)
 80089be:	f007 020f 	and.w	r2, r7, #15
 80089c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089c6:	ed93 7b00 	vldr	d7, [r3]
 80089ca:	05f8      	lsls	r0, r7, #23
 80089cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80089d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80089d4:	d516      	bpl.n	8008a04 <_dtoa_r+0x354>
 80089d6:	4b97      	ldr	r3, [pc, #604]	@ (8008c34 <_dtoa_r+0x584>)
 80089d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80089dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089e0:	f7f7 ff34 	bl	800084c <__aeabi_ddiv>
 80089e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089e8:	f004 040f 	and.w	r4, r4, #15
 80089ec:	2603      	movs	r6, #3
 80089ee:	4d91      	ldr	r5, [pc, #580]	@ (8008c34 <_dtoa_r+0x584>)
 80089f0:	b954      	cbnz	r4, 8008a08 <_dtoa_r+0x358>
 80089f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80089f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089fa:	f7f7 ff27 	bl	800084c <__aeabi_ddiv>
 80089fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a02:	e028      	b.n	8008a56 <_dtoa_r+0x3a6>
 8008a04:	2602      	movs	r6, #2
 8008a06:	e7f2      	b.n	80089ee <_dtoa_r+0x33e>
 8008a08:	07e1      	lsls	r1, r4, #31
 8008a0a:	d508      	bpl.n	8008a1e <_dtoa_r+0x36e>
 8008a0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008a10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a14:	f7f7 fdf0 	bl	80005f8 <__aeabi_dmul>
 8008a18:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a1c:	3601      	adds	r6, #1
 8008a1e:	1064      	asrs	r4, r4, #1
 8008a20:	3508      	adds	r5, #8
 8008a22:	e7e5      	b.n	80089f0 <_dtoa_r+0x340>
 8008a24:	f000 80af 	beq.w	8008b86 <_dtoa_r+0x4d6>
 8008a28:	427c      	negs	r4, r7
 8008a2a:	4b81      	ldr	r3, [pc, #516]	@ (8008c30 <_dtoa_r+0x580>)
 8008a2c:	4d81      	ldr	r5, [pc, #516]	@ (8008c34 <_dtoa_r+0x584>)
 8008a2e:	f004 020f 	and.w	r2, r4, #15
 8008a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a3e:	f7f7 fddb 	bl	80005f8 <__aeabi_dmul>
 8008a42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a46:	1124      	asrs	r4, r4, #4
 8008a48:	2300      	movs	r3, #0
 8008a4a:	2602      	movs	r6, #2
 8008a4c:	2c00      	cmp	r4, #0
 8008a4e:	f040 808f 	bne.w	8008b70 <_dtoa_r+0x4c0>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1d3      	bne.n	80089fe <_dtoa_r+0x34e>
 8008a56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a58:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 8094 	beq.w	8008b8a <_dtoa_r+0x4da>
 8008a62:	4b75      	ldr	r3, [pc, #468]	@ (8008c38 <_dtoa_r+0x588>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	4620      	mov	r0, r4
 8008a68:	4629      	mov	r1, r5
 8008a6a:	f7f8 f837 	bl	8000adc <__aeabi_dcmplt>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	f000 808b 	beq.w	8008b8a <_dtoa_r+0x4da>
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 8087 	beq.w	8008b8a <_dtoa_r+0x4da>
 8008a7c:	f1bb 0f00 	cmp.w	fp, #0
 8008a80:	dd34      	ble.n	8008aec <_dtoa_r+0x43c>
 8008a82:	4620      	mov	r0, r4
 8008a84:	4b6d      	ldr	r3, [pc, #436]	@ (8008c3c <_dtoa_r+0x58c>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	4629      	mov	r1, r5
 8008a8a:	f7f7 fdb5 	bl	80005f8 <__aeabi_dmul>
 8008a8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a92:	f107 38ff 	add.w	r8, r7, #4294967295
 8008a96:	3601      	adds	r6, #1
 8008a98:	465c      	mov	r4, fp
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f7f7 fd42 	bl	8000524 <__aeabi_i2d>
 8008aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008aa4:	f7f7 fda8 	bl	80005f8 <__aeabi_dmul>
 8008aa8:	4b65      	ldr	r3, [pc, #404]	@ (8008c40 <_dtoa_r+0x590>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f7f7 fbee 	bl	800028c <__adddf3>
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008ab6:	2c00      	cmp	r4, #0
 8008ab8:	d16a      	bne.n	8008b90 <_dtoa_r+0x4e0>
 8008aba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008abe:	4b61      	ldr	r3, [pc, #388]	@ (8008c44 <_dtoa_r+0x594>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f7f7 fbe1 	bl	8000288 <__aeabi_dsub>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ace:	462a      	mov	r2, r5
 8008ad0:	4633      	mov	r3, r6
 8008ad2:	f7f8 f821 	bl	8000b18 <__aeabi_dcmpgt>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	f040 8298 	bne.w	800900c <_dtoa_r+0x95c>
 8008adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ae0:	462a      	mov	r2, r5
 8008ae2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ae6:	f7f7 fff9 	bl	8000adc <__aeabi_dcmplt>
 8008aea:	bb38      	cbnz	r0, 8008b3c <_dtoa_r+0x48c>
 8008aec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008af0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008af4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f2c0 8157 	blt.w	8008daa <_dtoa_r+0x6fa>
 8008afc:	2f0e      	cmp	r7, #14
 8008afe:	f300 8154 	bgt.w	8008daa <_dtoa_r+0x6fa>
 8008b02:	4b4b      	ldr	r3, [pc, #300]	@ (8008c30 <_dtoa_r+0x580>)
 8008b04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b08:	ed93 7b00 	vldr	d7, [r3]
 8008b0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	ed8d 7b00 	vstr	d7, [sp]
 8008b14:	f280 80e5 	bge.w	8008ce2 <_dtoa_r+0x632>
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f300 80e1 	bgt.w	8008ce2 <_dtoa_r+0x632>
 8008b20:	d10c      	bne.n	8008b3c <_dtoa_r+0x48c>
 8008b22:	4b48      	ldr	r3, [pc, #288]	@ (8008c44 <_dtoa_r+0x594>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	ec51 0b17 	vmov	r0, r1, d7
 8008b2a:	f7f7 fd65 	bl	80005f8 <__aeabi_dmul>
 8008b2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b32:	f7f7 ffe7 	bl	8000b04 <__aeabi_dcmpge>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f000 8266 	beq.w	8009008 <_dtoa_r+0x958>
 8008b3c:	2400      	movs	r4, #0
 8008b3e:	4625      	mov	r5, r4
 8008b40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b42:	4656      	mov	r6, sl
 8008b44:	ea6f 0803 	mvn.w	r8, r3
 8008b48:	2700      	movs	r7, #0
 8008b4a:	4621      	mov	r1, r4
 8008b4c:	4648      	mov	r0, r9
 8008b4e:	f001 f80b 	bl	8009b68 <_Bfree>
 8008b52:	2d00      	cmp	r5, #0
 8008b54:	f000 80bd 	beq.w	8008cd2 <_dtoa_r+0x622>
 8008b58:	b12f      	cbz	r7, 8008b66 <_dtoa_r+0x4b6>
 8008b5a:	42af      	cmp	r7, r5
 8008b5c:	d003      	beq.n	8008b66 <_dtoa_r+0x4b6>
 8008b5e:	4639      	mov	r1, r7
 8008b60:	4648      	mov	r0, r9
 8008b62:	f001 f801 	bl	8009b68 <_Bfree>
 8008b66:	4629      	mov	r1, r5
 8008b68:	4648      	mov	r0, r9
 8008b6a:	f000 fffd 	bl	8009b68 <_Bfree>
 8008b6e:	e0b0      	b.n	8008cd2 <_dtoa_r+0x622>
 8008b70:	07e2      	lsls	r2, r4, #31
 8008b72:	d505      	bpl.n	8008b80 <_dtoa_r+0x4d0>
 8008b74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b78:	f7f7 fd3e 	bl	80005f8 <__aeabi_dmul>
 8008b7c:	3601      	adds	r6, #1
 8008b7e:	2301      	movs	r3, #1
 8008b80:	1064      	asrs	r4, r4, #1
 8008b82:	3508      	adds	r5, #8
 8008b84:	e762      	b.n	8008a4c <_dtoa_r+0x39c>
 8008b86:	2602      	movs	r6, #2
 8008b88:	e765      	b.n	8008a56 <_dtoa_r+0x3a6>
 8008b8a:	9c03      	ldr	r4, [sp, #12]
 8008b8c:	46b8      	mov	r8, r7
 8008b8e:	e784      	b.n	8008a9a <_dtoa_r+0x3ea>
 8008b90:	4b27      	ldr	r3, [pc, #156]	@ (8008c30 <_dtoa_r+0x580>)
 8008b92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b9c:	4454      	add	r4, sl
 8008b9e:	2900      	cmp	r1, #0
 8008ba0:	d054      	beq.n	8008c4c <_dtoa_r+0x59c>
 8008ba2:	4929      	ldr	r1, [pc, #164]	@ (8008c48 <_dtoa_r+0x598>)
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	f7f7 fe51 	bl	800084c <__aeabi_ddiv>
 8008baa:	4633      	mov	r3, r6
 8008bac:	462a      	mov	r2, r5
 8008bae:	f7f7 fb6b 	bl	8000288 <__aeabi_dsub>
 8008bb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008bb6:	4656      	mov	r6, sl
 8008bb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bbc:	f7f7 ffcc 	bl	8000b58 <__aeabi_d2iz>
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	f7f7 fcaf 	bl	8000524 <__aeabi_i2d>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bce:	f7f7 fb5b 	bl	8000288 <__aeabi_dsub>
 8008bd2:	3530      	adds	r5, #48	@ 0x30
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bdc:	f806 5b01 	strb.w	r5, [r6], #1
 8008be0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008be4:	f7f7 ff7a 	bl	8000adc <__aeabi_dcmplt>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d172      	bne.n	8008cd2 <_dtoa_r+0x622>
 8008bec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bf0:	4911      	ldr	r1, [pc, #68]	@ (8008c38 <_dtoa_r+0x588>)
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	f7f7 fb48 	bl	8000288 <__aeabi_dsub>
 8008bf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008bfc:	f7f7 ff6e 	bl	8000adc <__aeabi_dcmplt>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f040 80b4 	bne.w	8008d6e <_dtoa_r+0x6be>
 8008c06:	42a6      	cmp	r6, r4
 8008c08:	f43f af70 	beq.w	8008aec <_dtoa_r+0x43c>
 8008c0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008c10:	4b0a      	ldr	r3, [pc, #40]	@ (8008c3c <_dtoa_r+0x58c>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	f7f7 fcf0 	bl	80005f8 <__aeabi_dmul>
 8008c18:	4b08      	ldr	r3, [pc, #32]	@ (8008c3c <_dtoa_r+0x58c>)
 8008c1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008c1e:	2200      	movs	r2, #0
 8008c20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c24:	f7f7 fce8 	bl	80005f8 <__aeabi_dmul>
 8008c28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c2c:	e7c4      	b.n	8008bb8 <_dtoa_r+0x508>
 8008c2e:	bf00      	nop
 8008c30:	0800b398 	.word	0x0800b398
 8008c34:	0800b370 	.word	0x0800b370
 8008c38:	3ff00000 	.word	0x3ff00000
 8008c3c:	40240000 	.word	0x40240000
 8008c40:	401c0000 	.word	0x401c0000
 8008c44:	40140000 	.word	0x40140000
 8008c48:	3fe00000 	.word	0x3fe00000
 8008c4c:	4631      	mov	r1, r6
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f7f7 fcd2 	bl	80005f8 <__aeabi_dmul>
 8008c54:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008c58:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008c5a:	4656      	mov	r6, sl
 8008c5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c60:	f7f7 ff7a 	bl	8000b58 <__aeabi_d2iz>
 8008c64:	4605      	mov	r5, r0
 8008c66:	f7f7 fc5d 	bl	8000524 <__aeabi_i2d>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c72:	f7f7 fb09 	bl	8000288 <__aeabi_dsub>
 8008c76:	3530      	adds	r5, #48	@ 0x30
 8008c78:	f806 5b01 	strb.w	r5, [r6], #1
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	42a6      	cmp	r6, r4
 8008c82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c86:	f04f 0200 	mov.w	r2, #0
 8008c8a:	d124      	bne.n	8008cd6 <_dtoa_r+0x626>
 8008c8c:	4baf      	ldr	r3, [pc, #700]	@ (8008f4c <_dtoa_r+0x89c>)
 8008c8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008c92:	f7f7 fafb 	bl	800028c <__adddf3>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c9e:	f7f7 ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d163      	bne.n	8008d6e <_dtoa_r+0x6be>
 8008ca6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008caa:	49a8      	ldr	r1, [pc, #672]	@ (8008f4c <_dtoa_r+0x89c>)
 8008cac:	2000      	movs	r0, #0
 8008cae:	f7f7 faeb 	bl	8000288 <__aeabi_dsub>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cba:	f7f7 ff0f 	bl	8000adc <__aeabi_dcmplt>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	f43f af14 	beq.w	8008aec <_dtoa_r+0x43c>
 8008cc4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008cc6:	1e73      	subs	r3, r6, #1
 8008cc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008cca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008cce:	2b30      	cmp	r3, #48	@ 0x30
 8008cd0:	d0f8      	beq.n	8008cc4 <_dtoa_r+0x614>
 8008cd2:	4647      	mov	r7, r8
 8008cd4:	e03b      	b.n	8008d4e <_dtoa_r+0x69e>
 8008cd6:	4b9e      	ldr	r3, [pc, #632]	@ (8008f50 <_dtoa_r+0x8a0>)
 8008cd8:	f7f7 fc8e 	bl	80005f8 <__aeabi_dmul>
 8008cdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ce0:	e7bc      	b.n	8008c5c <_dtoa_r+0x5ac>
 8008ce2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008ce6:	4656      	mov	r6, sl
 8008ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cec:	4620      	mov	r0, r4
 8008cee:	4629      	mov	r1, r5
 8008cf0:	f7f7 fdac 	bl	800084c <__aeabi_ddiv>
 8008cf4:	f7f7 ff30 	bl	8000b58 <__aeabi_d2iz>
 8008cf8:	4680      	mov	r8, r0
 8008cfa:	f7f7 fc13 	bl	8000524 <__aeabi_i2d>
 8008cfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d02:	f7f7 fc79 	bl	80005f8 <__aeabi_dmul>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d12:	f7f7 fab9 	bl	8000288 <__aeabi_dsub>
 8008d16:	f806 4b01 	strb.w	r4, [r6], #1
 8008d1a:	9d03      	ldr	r5, [sp, #12]
 8008d1c:	eba6 040a 	sub.w	r4, r6, sl
 8008d20:	42a5      	cmp	r5, r4
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	d133      	bne.n	8008d90 <_dtoa_r+0x6e0>
 8008d28:	f7f7 fab0 	bl	800028c <__adddf3>
 8008d2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d30:	4604      	mov	r4, r0
 8008d32:	460d      	mov	r5, r1
 8008d34:	f7f7 fef0 	bl	8000b18 <__aeabi_dcmpgt>
 8008d38:	b9c0      	cbnz	r0, 8008d6c <_dtoa_r+0x6bc>
 8008d3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d3e:	4620      	mov	r0, r4
 8008d40:	4629      	mov	r1, r5
 8008d42:	f7f7 fec1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d46:	b110      	cbz	r0, 8008d4e <_dtoa_r+0x69e>
 8008d48:	f018 0f01 	tst.w	r8, #1
 8008d4c:	d10e      	bne.n	8008d6c <_dtoa_r+0x6bc>
 8008d4e:	9902      	ldr	r1, [sp, #8]
 8008d50:	4648      	mov	r0, r9
 8008d52:	f000 ff09 	bl	8009b68 <_Bfree>
 8008d56:	2300      	movs	r3, #0
 8008d58:	7033      	strb	r3, [r6, #0]
 8008d5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d5c:	3701      	adds	r7, #1
 8008d5e:	601f      	str	r7, [r3, #0]
 8008d60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 824b 	beq.w	80091fe <_dtoa_r+0xb4e>
 8008d68:	601e      	str	r6, [r3, #0]
 8008d6a:	e248      	b.n	80091fe <_dtoa_r+0xb4e>
 8008d6c:	46b8      	mov	r8, r7
 8008d6e:	4633      	mov	r3, r6
 8008d70:	461e      	mov	r6, r3
 8008d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d76:	2a39      	cmp	r2, #57	@ 0x39
 8008d78:	d106      	bne.n	8008d88 <_dtoa_r+0x6d8>
 8008d7a:	459a      	cmp	sl, r3
 8008d7c:	d1f8      	bne.n	8008d70 <_dtoa_r+0x6c0>
 8008d7e:	2230      	movs	r2, #48	@ 0x30
 8008d80:	f108 0801 	add.w	r8, r8, #1
 8008d84:	f88a 2000 	strb.w	r2, [sl]
 8008d88:	781a      	ldrb	r2, [r3, #0]
 8008d8a:	3201      	adds	r2, #1
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	e7a0      	b.n	8008cd2 <_dtoa_r+0x622>
 8008d90:	4b6f      	ldr	r3, [pc, #444]	@ (8008f50 <_dtoa_r+0x8a0>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	f7f7 fc30 	bl	80005f8 <__aeabi_dmul>
 8008d98:	2200      	movs	r2, #0
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	460d      	mov	r5, r1
 8008da0:	f7f7 fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d09f      	beq.n	8008ce8 <_dtoa_r+0x638>
 8008da8:	e7d1      	b.n	8008d4e <_dtoa_r+0x69e>
 8008daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dac:	2a00      	cmp	r2, #0
 8008dae:	f000 80ea 	beq.w	8008f86 <_dtoa_r+0x8d6>
 8008db2:	9a07      	ldr	r2, [sp, #28]
 8008db4:	2a01      	cmp	r2, #1
 8008db6:	f300 80cd 	bgt.w	8008f54 <_dtoa_r+0x8a4>
 8008dba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008dbc:	2a00      	cmp	r2, #0
 8008dbe:	f000 80c1 	beq.w	8008f44 <_dtoa_r+0x894>
 8008dc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008dc6:	9c08      	ldr	r4, [sp, #32]
 8008dc8:	9e00      	ldr	r6, [sp, #0]
 8008dca:	9a00      	ldr	r2, [sp, #0]
 8008dcc:	441a      	add	r2, r3
 8008dce:	9200      	str	r2, [sp, #0]
 8008dd0:	9a06      	ldr	r2, [sp, #24]
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	441a      	add	r2, r3
 8008dd6:	4648      	mov	r0, r9
 8008dd8:	9206      	str	r2, [sp, #24]
 8008dda:	f000 ffc3 	bl	8009d64 <__i2b>
 8008dde:	4605      	mov	r5, r0
 8008de0:	b166      	cbz	r6, 8008dfc <_dtoa_r+0x74c>
 8008de2:	9b06      	ldr	r3, [sp, #24]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	dd09      	ble.n	8008dfc <_dtoa_r+0x74c>
 8008de8:	42b3      	cmp	r3, r6
 8008dea:	9a00      	ldr	r2, [sp, #0]
 8008dec:	bfa8      	it	ge
 8008dee:	4633      	movge	r3, r6
 8008df0:	1ad2      	subs	r2, r2, r3
 8008df2:	9200      	str	r2, [sp, #0]
 8008df4:	9a06      	ldr	r2, [sp, #24]
 8008df6:	1af6      	subs	r6, r6, r3
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	9306      	str	r3, [sp, #24]
 8008dfc:	9b08      	ldr	r3, [sp, #32]
 8008dfe:	b30b      	cbz	r3, 8008e44 <_dtoa_r+0x794>
 8008e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 80c6 	beq.w	8008f94 <_dtoa_r+0x8e4>
 8008e08:	2c00      	cmp	r4, #0
 8008e0a:	f000 80c0 	beq.w	8008f8e <_dtoa_r+0x8de>
 8008e0e:	4629      	mov	r1, r5
 8008e10:	4622      	mov	r2, r4
 8008e12:	4648      	mov	r0, r9
 8008e14:	f001 f85e 	bl	8009ed4 <__pow5mult>
 8008e18:	9a02      	ldr	r2, [sp, #8]
 8008e1a:	4601      	mov	r1, r0
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	4648      	mov	r0, r9
 8008e20:	f000 ffb6 	bl	8009d90 <__multiply>
 8008e24:	9902      	ldr	r1, [sp, #8]
 8008e26:	4680      	mov	r8, r0
 8008e28:	4648      	mov	r0, r9
 8008e2a:	f000 fe9d 	bl	8009b68 <_Bfree>
 8008e2e:	9b08      	ldr	r3, [sp, #32]
 8008e30:	1b1b      	subs	r3, r3, r4
 8008e32:	9308      	str	r3, [sp, #32]
 8008e34:	f000 80b1 	beq.w	8008f9a <_dtoa_r+0x8ea>
 8008e38:	9a08      	ldr	r2, [sp, #32]
 8008e3a:	4641      	mov	r1, r8
 8008e3c:	4648      	mov	r0, r9
 8008e3e:	f001 f849 	bl	8009ed4 <__pow5mult>
 8008e42:	9002      	str	r0, [sp, #8]
 8008e44:	2101      	movs	r1, #1
 8008e46:	4648      	mov	r0, r9
 8008e48:	f000 ff8c 	bl	8009d64 <__i2b>
 8008e4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e4e:	4604      	mov	r4, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 81d8 	beq.w	8009206 <_dtoa_r+0xb56>
 8008e56:	461a      	mov	r2, r3
 8008e58:	4601      	mov	r1, r0
 8008e5a:	4648      	mov	r0, r9
 8008e5c:	f001 f83a 	bl	8009ed4 <__pow5mult>
 8008e60:	9b07      	ldr	r3, [sp, #28]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	4604      	mov	r4, r0
 8008e66:	f300 809f 	bgt.w	8008fa8 <_dtoa_r+0x8f8>
 8008e6a:	9b04      	ldr	r3, [sp, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f040 8097 	bne.w	8008fa0 <_dtoa_r+0x8f0>
 8008e72:	9b05      	ldr	r3, [sp, #20]
 8008e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f040 8093 	bne.w	8008fa4 <_dtoa_r+0x8f4>
 8008e7e:	9b05      	ldr	r3, [sp, #20]
 8008e80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e84:	0d1b      	lsrs	r3, r3, #20
 8008e86:	051b      	lsls	r3, r3, #20
 8008e88:	b133      	cbz	r3, 8008e98 <_dtoa_r+0x7e8>
 8008e8a:	9b00      	ldr	r3, [sp, #0]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	9b06      	ldr	r3, [sp, #24]
 8008e92:	3301      	adds	r3, #1
 8008e94:	9306      	str	r3, [sp, #24]
 8008e96:	2301      	movs	r3, #1
 8008e98:	9308      	str	r3, [sp, #32]
 8008e9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 81b8 	beq.w	8009212 <_dtoa_r+0xb62>
 8008ea2:	6923      	ldr	r3, [r4, #16]
 8008ea4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ea8:	6918      	ldr	r0, [r3, #16]
 8008eaa:	f000 ff0f 	bl	8009ccc <__hi0bits>
 8008eae:	f1c0 0020 	rsb	r0, r0, #32
 8008eb2:	9b06      	ldr	r3, [sp, #24]
 8008eb4:	4418      	add	r0, r3
 8008eb6:	f010 001f 	ands.w	r0, r0, #31
 8008eba:	f000 8082 	beq.w	8008fc2 <_dtoa_r+0x912>
 8008ebe:	f1c0 0320 	rsb	r3, r0, #32
 8008ec2:	2b04      	cmp	r3, #4
 8008ec4:	dd73      	ble.n	8008fae <_dtoa_r+0x8fe>
 8008ec6:	9b00      	ldr	r3, [sp, #0]
 8008ec8:	f1c0 001c 	rsb	r0, r0, #28
 8008ecc:	4403      	add	r3, r0
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	9b06      	ldr	r3, [sp, #24]
 8008ed2:	4403      	add	r3, r0
 8008ed4:	4406      	add	r6, r0
 8008ed6:	9306      	str	r3, [sp, #24]
 8008ed8:	9b00      	ldr	r3, [sp, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	dd05      	ble.n	8008eea <_dtoa_r+0x83a>
 8008ede:	9902      	ldr	r1, [sp, #8]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4648      	mov	r0, r9
 8008ee4:	f001 f850 	bl	8009f88 <__lshift>
 8008ee8:	9002      	str	r0, [sp, #8]
 8008eea:	9b06      	ldr	r3, [sp, #24]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	dd05      	ble.n	8008efc <_dtoa_r+0x84c>
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	4648      	mov	r0, r9
 8008ef6:	f001 f847 	bl	8009f88 <__lshift>
 8008efa:	4604      	mov	r4, r0
 8008efc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d061      	beq.n	8008fc6 <_dtoa_r+0x916>
 8008f02:	9802      	ldr	r0, [sp, #8]
 8008f04:	4621      	mov	r1, r4
 8008f06:	f001 f8ab 	bl	800a060 <__mcmp>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	da5b      	bge.n	8008fc6 <_dtoa_r+0x916>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	9902      	ldr	r1, [sp, #8]
 8008f12:	220a      	movs	r2, #10
 8008f14:	4648      	mov	r0, r9
 8008f16:	f000 fe49 	bl	8009bac <__multadd>
 8008f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f1c:	9002      	str	r0, [sp, #8]
 8008f1e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 8177 	beq.w	8009216 <_dtoa_r+0xb66>
 8008f28:	4629      	mov	r1, r5
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	220a      	movs	r2, #10
 8008f2e:	4648      	mov	r0, r9
 8008f30:	f000 fe3c 	bl	8009bac <__multadd>
 8008f34:	f1bb 0f00 	cmp.w	fp, #0
 8008f38:	4605      	mov	r5, r0
 8008f3a:	dc6f      	bgt.n	800901c <_dtoa_r+0x96c>
 8008f3c:	9b07      	ldr	r3, [sp, #28]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	dc49      	bgt.n	8008fd6 <_dtoa_r+0x926>
 8008f42:	e06b      	b.n	800901c <_dtoa_r+0x96c>
 8008f44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008f46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008f4a:	e73c      	b.n	8008dc6 <_dtoa_r+0x716>
 8008f4c:	3fe00000 	.word	0x3fe00000
 8008f50:	40240000 	.word	0x40240000
 8008f54:	9b03      	ldr	r3, [sp, #12]
 8008f56:	1e5c      	subs	r4, r3, #1
 8008f58:	9b08      	ldr	r3, [sp, #32]
 8008f5a:	42a3      	cmp	r3, r4
 8008f5c:	db09      	blt.n	8008f72 <_dtoa_r+0x8c2>
 8008f5e:	1b1c      	subs	r4, r3, r4
 8008f60:	9b03      	ldr	r3, [sp, #12]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f6bf af30 	bge.w	8008dc8 <_dtoa_r+0x718>
 8008f68:	9b00      	ldr	r3, [sp, #0]
 8008f6a:	9a03      	ldr	r2, [sp, #12]
 8008f6c:	1a9e      	subs	r6, r3, r2
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e72b      	b.n	8008dca <_dtoa_r+0x71a>
 8008f72:	9b08      	ldr	r3, [sp, #32]
 8008f74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f76:	9408      	str	r4, [sp, #32]
 8008f78:	1ae3      	subs	r3, r4, r3
 8008f7a:	441a      	add	r2, r3
 8008f7c:	9e00      	ldr	r6, [sp, #0]
 8008f7e:	9b03      	ldr	r3, [sp, #12]
 8008f80:	920d      	str	r2, [sp, #52]	@ 0x34
 8008f82:	2400      	movs	r4, #0
 8008f84:	e721      	b.n	8008dca <_dtoa_r+0x71a>
 8008f86:	9c08      	ldr	r4, [sp, #32]
 8008f88:	9e00      	ldr	r6, [sp, #0]
 8008f8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008f8c:	e728      	b.n	8008de0 <_dtoa_r+0x730>
 8008f8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008f92:	e751      	b.n	8008e38 <_dtoa_r+0x788>
 8008f94:	9a08      	ldr	r2, [sp, #32]
 8008f96:	9902      	ldr	r1, [sp, #8]
 8008f98:	e750      	b.n	8008e3c <_dtoa_r+0x78c>
 8008f9a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008f9e:	e751      	b.n	8008e44 <_dtoa_r+0x794>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	e779      	b.n	8008e98 <_dtoa_r+0x7e8>
 8008fa4:	9b04      	ldr	r3, [sp, #16]
 8008fa6:	e777      	b.n	8008e98 <_dtoa_r+0x7e8>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	9308      	str	r3, [sp, #32]
 8008fac:	e779      	b.n	8008ea2 <_dtoa_r+0x7f2>
 8008fae:	d093      	beq.n	8008ed8 <_dtoa_r+0x828>
 8008fb0:	9a00      	ldr	r2, [sp, #0]
 8008fb2:	331c      	adds	r3, #28
 8008fb4:	441a      	add	r2, r3
 8008fb6:	9200      	str	r2, [sp, #0]
 8008fb8:	9a06      	ldr	r2, [sp, #24]
 8008fba:	441a      	add	r2, r3
 8008fbc:	441e      	add	r6, r3
 8008fbe:	9206      	str	r2, [sp, #24]
 8008fc0:	e78a      	b.n	8008ed8 <_dtoa_r+0x828>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	e7f4      	b.n	8008fb0 <_dtoa_r+0x900>
 8008fc6:	9b03      	ldr	r3, [sp, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	46b8      	mov	r8, r7
 8008fcc:	dc20      	bgt.n	8009010 <_dtoa_r+0x960>
 8008fce:	469b      	mov	fp, r3
 8008fd0:	9b07      	ldr	r3, [sp, #28]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	dd1e      	ble.n	8009014 <_dtoa_r+0x964>
 8008fd6:	f1bb 0f00 	cmp.w	fp, #0
 8008fda:	f47f adb1 	bne.w	8008b40 <_dtoa_r+0x490>
 8008fde:	4621      	mov	r1, r4
 8008fe0:	465b      	mov	r3, fp
 8008fe2:	2205      	movs	r2, #5
 8008fe4:	4648      	mov	r0, r9
 8008fe6:	f000 fde1 	bl	8009bac <__multadd>
 8008fea:	4601      	mov	r1, r0
 8008fec:	4604      	mov	r4, r0
 8008fee:	9802      	ldr	r0, [sp, #8]
 8008ff0:	f001 f836 	bl	800a060 <__mcmp>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f77f ada3 	ble.w	8008b40 <_dtoa_r+0x490>
 8008ffa:	4656      	mov	r6, sl
 8008ffc:	2331      	movs	r3, #49	@ 0x31
 8008ffe:	f806 3b01 	strb.w	r3, [r6], #1
 8009002:	f108 0801 	add.w	r8, r8, #1
 8009006:	e59f      	b.n	8008b48 <_dtoa_r+0x498>
 8009008:	9c03      	ldr	r4, [sp, #12]
 800900a:	46b8      	mov	r8, r7
 800900c:	4625      	mov	r5, r4
 800900e:	e7f4      	b.n	8008ffa <_dtoa_r+0x94a>
 8009010:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009016:	2b00      	cmp	r3, #0
 8009018:	f000 8101 	beq.w	800921e <_dtoa_r+0xb6e>
 800901c:	2e00      	cmp	r6, #0
 800901e:	dd05      	ble.n	800902c <_dtoa_r+0x97c>
 8009020:	4629      	mov	r1, r5
 8009022:	4632      	mov	r2, r6
 8009024:	4648      	mov	r0, r9
 8009026:	f000 ffaf 	bl	8009f88 <__lshift>
 800902a:	4605      	mov	r5, r0
 800902c:	9b08      	ldr	r3, [sp, #32]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d05c      	beq.n	80090ec <_dtoa_r+0xa3c>
 8009032:	6869      	ldr	r1, [r5, #4]
 8009034:	4648      	mov	r0, r9
 8009036:	f000 fd57 	bl	8009ae8 <_Balloc>
 800903a:	4606      	mov	r6, r0
 800903c:	b928      	cbnz	r0, 800904a <_dtoa_r+0x99a>
 800903e:	4b82      	ldr	r3, [pc, #520]	@ (8009248 <_dtoa_r+0xb98>)
 8009040:	4602      	mov	r2, r0
 8009042:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009046:	f7ff bb4a 	b.w	80086de <_dtoa_r+0x2e>
 800904a:	692a      	ldr	r2, [r5, #16]
 800904c:	3202      	adds	r2, #2
 800904e:	0092      	lsls	r2, r2, #2
 8009050:	f105 010c 	add.w	r1, r5, #12
 8009054:	300c      	adds	r0, #12
 8009056:	f7ff fa84 	bl	8008562 <memcpy>
 800905a:	2201      	movs	r2, #1
 800905c:	4631      	mov	r1, r6
 800905e:	4648      	mov	r0, r9
 8009060:	f000 ff92 	bl	8009f88 <__lshift>
 8009064:	f10a 0301 	add.w	r3, sl, #1
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	eb0a 030b 	add.w	r3, sl, fp
 800906e:	9308      	str	r3, [sp, #32]
 8009070:	9b04      	ldr	r3, [sp, #16]
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	462f      	mov	r7, r5
 8009078:	9306      	str	r3, [sp, #24]
 800907a:	4605      	mov	r5, r0
 800907c:	9b00      	ldr	r3, [sp, #0]
 800907e:	9802      	ldr	r0, [sp, #8]
 8009080:	4621      	mov	r1, r4
 8009082:	f103 3bff 	add.w	fp, r3, #4294967295
 8009086:	f7ff fa89 	bl	800859c <quorem>
 800908a:	4603      	mov	r3, r0
 800908c:	3330      	adds	r3, #48	@ 0x30
 800908e:	9003      	str	r0, [sp, #12]
 8009090:	4639      	mov	r1, r7
 8009092:	9802      	ldr	r0, [sp, #8]
 8009094:	9309      	str	r3, [sp, #36]	@ 0x24
 8009096:	f000 ffe3 	bl	800a060 <__mcmp>
 800909a:	462a      	mov	r2, r5
 800909c:	9004      	str	r0, [sp, #16]
 800909e:	4621      	mov	r1, r4
 80090a0:	4648      	mov	r0, r9
 80090a2:	f000 fff9 	bl	800a098 <__mdiff>
 80090a6:	68c2      	ldr	r2, [r0, #12]
 80090a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090aa:	4606      	mov	r6, r0
 80090ac:	bb02      	cbnz	r2, 80090f0 <_dtoa_r+0xa40>
 80090ae:	4601      	mov	r1, r0
 80090b0:	9802      	ldr	r0, [sp, #8]
 80090b2:	f000 ffd5 	bl	800a060 <__mcmp>
 80090b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b8:	4602      	mov	r2, r0
 80090ba:	4631      	mov	r1, r6
 80090bc:	4648      	mov	r0, r9
 80090be:	920c      	str	r2, [sp, #48]	@ 0x30
 80090c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80090c2:	f000 fd51 	bl	8009b68 <_Bfree>
 80090c6:	9b07      	ldr	r3, [sp, #28]
 80090c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80090ca:	9e00      	ldr	r6, [sp, #0]
 80090cc:	ea42 0103 	orr.w	r1, r2, r3
 80090d0:	9b06      	ldr	r3, [sp, #24]
 80090d2:	4319      	orrs	r1, r3
 80090d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d6:	d10d      	bne.n	80090f4 <_dtoa_r+0xa44>
 80090d8:	2b39      	cmp	r3, #57	@ 0x39
 80090da:	d027      	beq.n	800912c <_dtoa_r+0xa7c>
 80090dc:	9a04      	ldr	r2, [sp, #16]
 80090de:	2a00      	cmp	r2, #0
 80090e0:	dd01      	ble.n	80090e6 <_dtoa_r+0xa36>
 80090e2:	9b03      	ldr	r3, [sp, #12]
 80090e4:	3331      	adds	r3, #49	@ 0x31
 80090e6:	f88b 3000 	strb.w	r3, [fp]
 80090ea:	e52e      	b.n	8008b4a <_dtoa_r+0x49a>
 80090ec:	4628      	mov	r0, r5
 80090ee:	e7b9      	b.n	8009064 <_dtoa_r+0x9b4>
 80090f0:	2201      	movs	r2, #1
 80090f2:	e7e2      	b.n	80090ba <_dtoa_r+0xa0a>
 80090f4:	9904      	ldr	r1, [sp, #16]
 80090f6:	2900      	cmp	r1, #0
 80090f8:	db04      	blt.n	8009104 <_dtoa_r+0xa54>
 80090fa:	9807      	ldr	r0, [sp, #28]
 80090fc:	4301      	orrs	r1, r0
 80090fe:	9806      	ldr	r0, [sp, #24]
 8009100:	4301      	orrs	r1, r0
 8009102:	d120      	bne.n	8009146 <_dtoa_r+0xa96>
 8009104:	2a00      	cmp	r2, #0
 8009106:	ddee      	ble.n	80090e6 <_dtoa_r+0xa36>
 8009108:	9902      	ldr	r1, [sp, #8]
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	2201      	movs	r2, #1
 800910e:	4648      	mov	r0, r9
 8009110:	f000 ff3a 	bl	8009f88 <__lshift>
 8009114:	4621      	mov	r1, r4
 8009116:	9002      	str	r0, [sp, #8]
 8009118:	f000 ffa2 	bl	800a060 <__mcmp>
 800911c:	2800      	cmp	r0, #0
 800911e:	9b00      	ldr	r3, [sp, #0]
 8009120:	dc02      	bgt.n	8009128 <_dtoa_r+0xa78>
 8009122:	d1e0      	bne.n	80090e6 <_dtoa_r+0xa36>
 8009124:	07da      	lsls	r2, r3, #31
 8009126:	d5de      	bpl.n	80090e6 <_dtoa_r+0xa36>
 8009128:	2b39      	cmp	r3, #57	@ 0x39
 800912a:	d1da      	bne.n	80090e2 <_dtoa_r+0xa32>
 800912c:	2339      	movs	r3, #57	@ 0x39
 800912e:	f88b 3000 	strb.w	r3, [fp]
 8009132:	4633      	mov	r3, r6
 8009134:	461e      	mov	r6, r3
 8009136:	3b01      	subs	r3, #1
 8009138:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800913c:	2a39      	cmp	r2, #57	@ 0x39
 800913e:	d04e      	beq.n	80091de <_dtoa_r+0xb2e>
 8009140:	3201      	adds	r2, #1
 8009142:	701a      	strb	r2, [r3, #0]
 8009144:	e501      	b.n	8008b4a <_dtoa_r+0x49a>
 8009146:	2a00      	cmp	r2, #0
 8009148:	dd03      	ble.n	8009152 <_dtoa_r+0xaa2>
 800914a:	2b39      	cmp	r3, #57	@ 0x39
 800914c:	d0ee      	beq.n	800912c <_dtoa_r+0xa7c>
 800914e:	3301      	adds	r3, #1
 8009150:	e7c9      	b.n	80090e6 <_dtoa_r+0xa36>
 8009152:	9a00      	ldr	r2, [sp, #0]
 8009154:	9908      	ldr	r1, [sp, #32]
 8009156:	f802 3c01 	strb.w	r3, [r2, #-1]
 800915a:	428a      	cmp	r2, r1
 800915c:	d028      	beq.n	80091b0 <_dtoa_r+0xb00>
 800915e:	9902      	ldr	r1, [sp, #8]
 8009160:	2300      	movs	r3, #0
 8009162:	220a      	movs	r2, #10
 8009164:	4648      	mov	r0, r9
 8009166:	f000 fd21 	bl	8009bac <__multadd>
 800916a:	42af      	cmp	r7, r5
 800916c:	9002      	str	r0, [sp, #8]
 800916e:	f04f 0300 	mov.w	r3, #0
 8009172:	f04f 020a 	mov.w	r2, #10
 8009176:	4639      	mov	r1, r7
 8009178:	4648      	mov	r0, r9
 800917a:	d107      	bne.n	800918c <_dtoa_r+0xadc>
 800917c:	f000 fd16 	bl	8009bac <__multadd>
 8009180:	4607      	mov	r7, r0
 8009182:	4605      	mov	r5, r0
 8009184:	9b00      	ldr	r3, [sp, #0]
 8009186:	3301      	adds	r3, #1
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	e777      	b.n	800907c <_dtoa_r+0x9cc>
 800918c:	f000 fd0e 	bl	8009bac <__multadd>
 8009190:	4629      	mov	r1, r5
 8009192:	4607      	mov	r7, r0
 8009194:	2300      	movs	r3, #0
 8009196:	220a      	movs	r2, #10
 8009198:	4648      	mov	r0, r9
 800919a:	f000 fd07 	bl	8009bac <__multadd>
 800919e:	4605      	mov	r5, r0
 80091a0:	e7f0      	b.n	8009184 <_dtoa_r+0xad4>
 80091a2:	f1bb 0f00 	cmp.w	fp, #0
 80091a6:	bfcc      	ite	gt
 80091a8:	465e      	movgt	r6, fp
 80091aa:	2601      	movle	r6, #1
 80091ac:	4456      	add	r6, sl
 80091ae:	2700      	movs	r7, #0
 80091b0:	9902      	ldr	r1, [sp, #8]
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	2201      	movs	r2, #1
 80091b6:	4648      	mov	r0, r9
 80091b8:	f000 fee6 	bl	8009f88 <__lshift>
 80091bc:	4621      	mov	r1, r4
 80091be:	9002      	str	r0, [sp, #8]
 80091c0:	f000 ff4e 	bl	800a060 <__mcmp>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	dcb4      	bgt.n	8009132 <_dtoa_r+0xa82>
 80091c8:	d102      	bne.n	80091d0 <_dtoa_r+0xb20>
 80091ca:	9b00      	ldr	r3, [sp, #0]
 80091cc:	07db      	lsls	r3, r3, #31
 80091ce:	d4b0      	bmi.n	8009132 <_dtoa_r+0xa82>
 80091d0:	4633      	mov	r3, r6
 80091d2:	461e      	mov	r6, r3
 80091d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091d8:	2a30      	cmp	r2, #48	@ 0x30
 80091da:	d0fa      	beq.n	80091d2 <_dtoa_r+0xb22>
 80091dc:	e4b5      	b.n	8008b4a <_dtoa_r+0x49a>
 80091de:	459a      	cmp	sl, r3
 80091e0:	d1a8      	bne.n	8009134 <_dtoa_r+0xa84>
 80091e2:	2331      	movs	r3, #49	@ 0x31
 80091e4:	f108 0801 	add.w	r8, r8, #1
 80091e8:	f88a 3000 	strb.w	r3, [sl]
 80091ec:	e4ad      	b.n	8008b4a <_dtoa_r+0x49a>
 80091ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80091f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800924c <_dtoa_r+0xb9c>
 80091f4:	b11b      	cbz	r3, 80091fe <_dtoa_r+0xb4e>
 80091f6:	f10a 0308 	add.w	r3, sl, #8
 80091fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	4650      	mov	r0, sl
 8009200:	b017      	add	sp, #92	@ 0x5c
 8009202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009206:	9b07      	ldr	r3, [sp, #28]
 8009208:	2b01      	cmp	r3, #1
 800920a:	f77f ae2e 	ble.w	8008e6a <_dtoa_r+0x7ba>
 800920e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009210:	9308      	str	r3, [sp, #32]
 8009212:	2001      	movs	r0, #1
 8009214:	e64d      	b.n	8008eb2 <_dtoa_r+0x802>
 8009216:	f1bb 0f00 	cmp.w	fp, #0
 800921a:	f77f aed9 	ble.w	8008fd0 <_dtoa_r+0x920>
 800921e:	4656      	mov	r6, sl
 8009220:	9802      	ldr	r0, [sp, #8]
 8009222:	4621      	mov	r1, r4
 8009224:	f7ff f9ba 	bl	800859c <quorem>
 8009228:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800922c:	f806 3b01 	strb.w	r3, [r6], #1
 8009230:	eba6 020a 	sub.w	r2, r6, sl
 8009234:	4593      	cmp	fp, r2
 8009236:	ddb4      	ble.n	80091a2 <_dtoa_r+0xaf2>
 8009238:	9902      	ldr	r1, [sp, #8]
 800923a:	2300      	movs	r3, #0
 800923c:	220a      	movs	r2, #10
 800923e:	4648      	mov	r0, r9
 8009240:	f000 fcb4 	bl	8009bac <__multadd>
 8009244:	9002      	str	r0, [sp, #8]
 8009246:	e7eb      	b.n	8009220 <_dtoa_r+0xb70>
 8009248:	0800b1f7 	.word	0x0800b1f7
 800924c:	0800b17b 	.word	0x0800b17b

08009250 <_free_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4605      	mov	r5, r0
 8009254:	2900      	cmp	r1, #0
 8009256:	d041      	beq.n	80092dc <_free_r+0x8c>
 8009258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800925c:	1f0c      	subs	r4, r1, #4
 800925e:	2b00      	cmp	r3, #0
 8009260:	bfb8      	it	lt
 8009262:	18e4      	addlt	r4, r4, r3
 8009264:	f000 fc34 	bl	8009ad0 <__malloc_lock>
 8009268:	4a1d      	ldr	r2, [pc, #116]	@ (80092e0 <_free_r+0x90>)
 800926a:	6813      	ldr	r3, [r2, #0]
 800926c:	b933      	cbnz	r3, 800927c <_free_r+0x2c>
 800926e:	6063      	str	r3, [r4, #4]
 8009270:	6014      	str	r4, [r2, #0]
 8009272:	4628      	mov	r0, r5
 8009274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009278:	f000 bc30 	b.w	8009adc <__malloc_unlock>
 800927c:	42a3      	cmp	r3, r4
 800927e:	d908      	bls.n	8009292 <_free_r+0x42>
 8009280:	6820      	ldr	r0, [r4, #0]
 8009282:	1821      	adds	r1, r4, r0
 8009284:	428b      	cmp	r3, r1
 8009286:	bf01      	itttt	eq
 8009288:	6819      	ldreq	r1, [r3, #0]
 800928a:	685b      	ldreq	r3, [r3, #4]
 800928c:	1809      	addeq	r1, r1, r0
 800928e:	6021      	streq	r1, [r4, #0]
 8009290:	e7ed      	b.n	800926e <_free_r+0x1e>
 8009292:	461a      	mov	r2, r3
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	b10b      	cbz	r3, 800929c <_free_r+0x4c>
 8009298:	42a3      	cmp	r3, r4
 800929a:	d9fa      	bls.n	8009292 <_free_r+0x42>
 800929c:	6811      	ldr	r1, [r2, #0]
 800929e:	1850      	adds	r0, r2, r1
 80092a0:	42a0      	cmp	r0, r4
 80092a2:	d10b      	bne.n	80092bc <_free_r+0x6c>
 80092a4:	6820      	ldr	r0, [r4, #0]
 80092a6:	4401      	add	r1, r0
 80092a8:	1850      	adds	r0, r2, r1
 80092aa:	4283      	cmp	r3, r0
 80092ac:	6011      	str	r1, [r2, #0]
 80092ae:	d1e0      	bne.n	8009272 <_free_r+0x22>
 80092b0:	6818      	ldr	r0, [r3, #0]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	6053      	str	r3, [r2, #4]
 80092b6:	4408      	add	r0, r1
 80092b8:	6010      	str	r0, [r2, #0]
 80092ba:	e7da      	b.n	8009272 <_free_r+0x22>
 80092bc:	d902      	bls.n	80092c4 <_free_r+0x74>
 80092be:	230c      	movs	r3, #12
 80092c0:	602b      	str	r3, [r5, #0]
 80092c2:	e7d6      	b.n	8009272 <_free_r+0x22>
 80092c4:	6820      	ldr	r0, [r4, #0]
 80092c6:	1821      	adds	r1, r4, r0
 80092c8:	428b      	cmp	r3, r1
 80092ca:	bf04      	itt	eq
 80092cc:	6819      	ldreq	r1, [r3, #0]
 80092ce:	685b      	ldreq	r3, [r3, #4]
 80092d0:	6063      	str	r3, [r4, #4]
 80092d2:	bf04      	itt	eq
 80092d4:	1809      	addeq	r1, r1, r0
 80092d6:	6021      	streq	r1, [r4, #0]
 80092d8:	6054      	str	r4, [r2, #4]
 80092da:	e7ca      	b.n	8009272 <_free_r+0x22>
 80092dc:	bd38      	pop	{r3, r4, r5, pc}
 80092de:	bf00      	nop
 80092e0:	200007e0 	.word	0x200007e0

080092e4 <rshift>:
 80092e4:	6903      	ldr	r3, [r0, #16]
 80092e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80092ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80092f2:	f100 0414 	add.w	r4, r0, #20
 80092f6:	dd45      	ble.n	8009384 <rshift+0xa0>
 80092f8:	f011 011f 	ands.w	r1, r1, #31
 80092fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009300:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009304:	d10c      	bne.n	8009320 <rshift+0x3c>
 8009306:	f100 0710 	add.w	r7, r0, #16
 800930a:	4629      	mov	r1, r5
 800930c:	42b1      	cmp	r1, r6
 800930e:	d334      	bcc.n	800937a <rshift+0x96>
 8009310:	1a9b      	subs	r3, r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	1eea      	subs	r2, r5, #3
 8009316:	4296      	cmp	r6, r2
 8009318:	bf38      	it	cc
 800931a:	2300      	movcc	r3, #0
 800931c:	4423      	add	r3, r4
 800931e:	e015      	b.n	800934c <rshift+0x68>
 8009320:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009324:	f1c1 0820 	rsb	r8, r1, #32
 8009328:	40cf      	lsrs	r7, r1
 800932a:	f105 0e04 	add.w	lr, r5, #4
 800932e:	46a1      	mov	r9, r4
 8009330:	4576      	cmp	r6, lr
 8009332:	46f4      	mov	ip, lr
 8009334:	d815      	bhi.n	8009362 <rshift+0x7e>
 8009336:	1a9a      	subs	r2, r3, r2
 8009338:	0092      	lsls	r2, r2, #2
 800933a:	3a04      	subs	r2, #4
 800933c:	3501      	adds	r5, #1
 800933e:	42ae      	cmp	r6, r5
 8009340:	bf38      	it	cc
 8009342:	2200      	movcc	r2, #0
 8009344:	18a3      	adds	r3, r4, r2
 8009346:	50a7      	str	r7, [r4, r2]
 8009348:	b107      	cbz	r7, 800934c <rshift+0x68>
 800934a:	3304      	adds	r3, #4
 800934c:	1b1a      	subs	r2, r3, r4
 800934e:	42a3      	cmp	r3, r4
 8009350:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009354:	bf08      	it	eq
 8009356:	2300      	moveq	r3, #0
 8009358:	6102      	str	r2, [r0, #16]
 800935a:	bf08      	it	eq
 800935c:	6143      	streq	r3, [r0, #20]
 800935e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009362:	f8dc c000 	ldr.w	ip, [ip]
 8009366:	fa0c fc08 	lsl.w	ip, ip, r8
 800936a:	ea4c 0707 	orr.w	r7, ip, r7
 800936e:	f849 7b04 	str.w	r7, [r9], #4
 8009372:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009376:	40cf      	lsrs	r7, r1
 8009378:	e7da      	b.n	8009330 <rshift+0x4c>
 800937a:	f851 cb04 	ldr.w	ip, [r1], #4
 800937e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009382:	e7c3      	b.n	800930c <rshift+0x28>
 8009384:	4623      	mov	r3, r4
 8009386:	e7e1      	b.n	800934c <rshift+0x68>

08009388 <__hexdig_fun>:
 8009388:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800938c:	2b09      	cmp	r3, #9
 800938e:	d802      	bhi.n	8009396 <__hexdig_fun+0xe>
 8009390:	3820      	subs	r0, #32
 8009392:	b2c0      	uxtb	r0, r0
 8009394:	4770      	bx	lr
 8009396:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800939a:	2b05      	cmp	r3, #5
 800939c:	d801      	bhi.n	80093a2 <__hexdig_fun+0x1a>
 800939e:	3847      	subs	r0, #71	@ 0x47
 80093a0:	e7f7      	b.n	8009392 <__hexdig_fun+0xa>
 80093a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80093a6:	2b05      	cmp	r3, #5
 80093a8:	d801      	bhi.n	80093ae <__hexdig_fun+0x26>
 80093aa:	3827      	subs	r0, #39	@ 0x27
 80093ac:	e7f1      	b.n	8009392 <__hexdig_fun+0xa>
 80093ae:	2000      	movs	r0, #0
 80093b0:	4770      	bx	lr
	...

080093b4 <__gethex>:
 80093b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	b085      	sub	sp, #20
 80093ba:	468a      	mov	sl, r1
 80093bc:	9302      	str	r3, [sp, #8]
 80093be:	680b      	ldr	r3, [r1, #0]
 80093c0:	9001      	str	r0, [sp, #4]
 80093c2:	4690      	mov	r8, r2
 80093c4:	1c9c      	adds	r4, r3, #2
 80093c6:	46a1      	mov	r9, r4
 80093c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80093cc:	2830      	cmp	r0, #48	@ 0x30
 80093ce:	d0fa      	beq.n	80093c6 <__gethex+0x12>
 80093d0:	eba9 0303 	sub.w	r3, r9, r3
 80093d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80093d8:	f7ff ffd6 	bl	8009388 <__hexdig_fun>
 80093dc:	4605      	mov	r5, r0
 80093de:	2800      	cmp	r0, #0
 80093e0:	d168      	bne.n	80094b4 <__gethex+0x100>
 80093e2:	49a0      	ldr	r1, [pc, #640]	@ (8009664 <__gethex+0x2b0>)
 80093e4:	2201      	movs	r2, #1
 80093e6:	4648      	mov	r0, r9
 80093e8:	f7ff f831 	bl	800844e <strncmp>
 80093ec:	4607      	mov	r7, r0
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d167      	bne.n	80094c2 <__gethex+0x10e>
 80093f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80093f6:	4626      	mov	r6, r4
 80093f8:	f7ff ffc6 	bl	8009388 <__hexdig_fun>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d062      	beq.n	80094c6 <__gethex+0x112>
 8009400:	4623      	mov	r3, r4
 8009402:	7818      	ldrb	r0, [r3, #0]
 8009404:	2830      	cmp	r0, #48	@ 0x30
 8009406:	4699      	mov	r9, r3
 8009408:	f103 0301 	add.w	r3, r3, #1
 800940c:	d0f9      	beq.n	8009402 <__gethex+0x4e>
 800940e:	f7ff ffbb 	bl	8009388 <__hexdig_fun>
 8009412:	fab0 f580 	clz	r5, r0
 8009416:	096d      	lsrs	r5, r5, #5
 8009418:	f04f 0b01 	mov.w	fp, #1
 800941c:	464a      	mov	r2, r9
 800941e:	4616      	mov	r6, r2
 8009420:	3201      	adds	r2, #1
 8009422:	7830      	ldrb	r0, [r6, #0]
 8009424:	f7ff ffb0 	bl	8009388 <__hexdig_fun>
 8009428:	2800      	cmp	r0, #0
 800942a:	d1f8      	bne.n	800941e <__gethex+0x6a>
 800942c:	498d      	ldr	r1, [pc, #564]	@ (8009664 <__gethex+0x2b0>)
 800942e:	2201      	movs	r2, #1
 8009430:	4630      	mov	r0, r6
 8009432:	f7ff f80c 	bl	800844e <strncmp>
 8009436:	2800      	cmp	r0, #0
 8009438:	d13f      	bne.n	80094ba <__gethex+0x106>
 800943a:	b944      	cbnz	r4, 800944e <__gethex+0x9a>
 800943c:	1c74      	adds	r4, r6, #1
 800943e:	4622      	mov	r2, r4
 8009440:	4616      	mov	r6, r2
 8009442:	3201      	adds	r2, #1
 8009444:	7830      	ldrb	r0, [r6, #0]
 8009446:	f7ff ff9f 	bl	8009388 <__hexdig_fun>
 800944a:	2800      	cmp	r0, #0
 800944c:	d1f8      	bne.n	8009440 <__gethex+0x8c>
 800944e:	1ba4      	subs	r4, r4, r6
 8009450:	00a7      	lsls	r7, r4, #2
 8009452:	7833      	ldrb	r3, [r6, #0]
 8009454:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009458:	2b50      	cmp	r3, #80	@ 0x50
 800945a:	d13e      	bne.n	80094da <__gethex+0x126>
 800945c:	7873      	ldrb	r3, [r6, #1]
 800945e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009460:	d033      	beq.n	80094ca <__gethex+0x116>
 8009462:	2b2d      	cmp	r3, #45	@ 0x2d
 8009464:	d034      	beq.n	80094d0 <__gethex+0x11c>
 8009466:	1c71      	adds	r1, r6, #1
 8009468:	2400      	movs	r4, #0
 800946a:	7808      	ldrb	r0, [r1, #0]
 800946c:	f7ff ff8c 	bl	8009388 <__hexdig_fun>
 8009470:	1e43      	subs	r3, r0, #1
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b18      	cmp	r3, #24
 8009476:	d830      	bhi.n	80094da <__gethex+0x126>
 8009478:	f1a0 0210 	sub.w	r2, r0, #16
 800947c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009480:	f7ff ff82 	bl	8009388 <__hexdig_fun>
 8009484:	f100 3cff 	add.w	ip, r0, #4294967295
 8009488:	fa5f fc8c 	uxtb.w	ip, ip
 800948c:	f1bc 0f18 	cmp.w	ip, #24
 8009490:	f04f 030a 	mov.w	r3, #10
 8009494:	d91e      	bls.n	80094d4 <__gethex+0x120>
 8009496:	b104      	cbz	r4, 800949a <__gethex+0xe6>
 8009498:	4252      	negs	r2, r2
 800949a:	4417      	add	r7, r2
 800949c:	f8ca 1000 	str.w	r1, [sl]
 80094a0:	b1ed      	cbz	r5, 80094de <__gethex+0x12a>
 80094a2:	f1bb 0f00 	cmp.w	fp, #0
 80094a6:	bf0c      	ite	eq
 80094a8:	2506      	moveq	r5, #6
 80094aa:	2500      	movne	r5, #0
 80094ac:	4628      	mov	r0, r5
 80094ae:	b005      	add	sp, #20
 80094b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b4:	2500      	movs	r5, #0
 80094b6:	462c      	mov	r4, r5
 80094b8:	e7b0      	b.n	800941c <__gethex+0x68>
 80094ba:	2c00      	cmp	r4, #0
 80094bc:	d1c7      	bne.n	800944e <__gethex+0x9a>
 80094be:	4627      	mov	r7, r4
 80094c0:	e7c7      	b.n	8009452 <__gethex+0x9e>
 80094c2:	464e      	mov	r6, r9
 80094c4:	462f      	mov	r7, r5
 80094c6:	2501      	movs	r5, #1
 80094c8:	e7c3      	b.n	8009452 <__gethex+0x9e>
 80094ca:	2400      	movs	r4, #0
 80094cc:	1cb1      	adds	r1, r6, #2
 80094ce:	e7cc      	b.n	800946a <__gethex+0xb6>
 80094d0:	2401      	movs	r4, #1
 80094d2:	e7fb      	b.n	80094cc <__gethex+0x118>
 80094d4:	fb03 0002 	mla	r0, r3, r2, r0
 80094d8:	e7ce      	b.n	8009478 <__gethex+0xc4>
 80094da:	4631      	mov	r1, r6
 80094dc:	e7de      	b.n	800949c <__gethex+0xe8>
 80094de:	eba6 0309 	sub.w	r3, r6, r9
 80094e2:	3b01      	subs	r3, #1
 80094e4:	4629      	mov	r1, r5
 80094e6:	2b07      	cmp	r3, #7
 80094e8:	dc0a      	bgt.n	8009500 <__gethex+0x14c>
 80094ea:	9801      	ldr	r0, [sp, #4]
 80094ec:	f000 fafc 	bl	8009ae8 <_Balloc>
 80094f0:	4604      	mov	r4, r0
 80094f2:	b940      	cbnz	r0, 8009506 <__gethex+0x152>
 80094f4:	4b5c      	ldr	r3, [pc, #368]	@ (8009668 <__gethex+0x2b4>)
 80094f6:	4602      	mov	r2, r0
 80094f8:	21e4      	movs	r1, #228	@ 0xe4
 80094fa:	485c      	ldr	r0, [pc, #368]	@ (800966c <__gethex+0x2b8>)
 80094fc:	f001 fa54 	bl	800a9a8 <__assert_func>
 8009500:	3101      	adds	r1, #1
 8009502:	105b      	asrs	r3, r3, #1
 8009504:	e7ef      	b.n	80094e6 <__gethex+0x132>
 8009506:	f100 0a14 	add.w	sl, r0, #20
 800950a:	2300      	movs	r3, #0
 800950c:	4655      	mov	r5, sl
 800950e:	469b      	mov	fp, r3
 8009510:	45b1      	cmp	r9, r6
 8009512:	d337      	bcc.n	8009584 <__gethex+0x1d0>
 8009514:	f845 bb04 	str.w	fp, [r5], #4
 8009518:	eba5 050a 	sub.w	r5, r5, sl
 800951c:	10ad      	asrs	r5, r5, #2
 800951e:	6125      	str	r5, [r4, #16]
 8009520:	4658      	mov	r0, fp
 8009522:	f000 fbd3 	bl	8009ccc <__hi0bits>
 8009526:	016d      	lsls	r5, r5, #5
 8009528:	f8d8 6000 	ldr.w	r6, [r8]
 800952c:	1a2d      	subs	r5, r5, r0
 800952e:	42b5      	cmp	r5, r6
 8009530:	dd54      	ble.n	80095dc <__gethex+0x228>
 8009532:	1bad      	subs	r5, r5, r6
 8009534:	4629      	mov	r1, r5
 8009536:	4620      	mov	r0, r4
 8009538:	f000 ff5f 	bl	800a3fa <__any_on>
 800953c:	4681      	mov	r9, r0
 800953e:	b178      	cbz	r0, 8009560 <__gethex+0x1ac>
 8009540:	1e6b      	subs	r3, r5, #1
 8009542:	1159      	asrs	r1, r3, #5
 8009544:	f003 021f 	and.w	r2, r3, #31
 8009548:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800954c:	f04f 0901 	mov.w	r9, #1
 8009550:	fa09 f202 	lsl.w	r2, r9, r2
 8009554:	420a      	tst	r2, r1
 8009556:	d003      	beq.n	8009560 <__gethex+0x1ac>
 8009558:	454b      	cmp	r3, r9
 800955a:	dc36      	bgt.n	80095ca <__gethex+0x216>
 800955c:	f04f 0902 	mov.w	r9, #2
 8009560:	4629      	mov	r1, r5
 8009562:	4620      	mov	r0, r4
 8009564:	f7ff febe 	bl	80092e4 <rshift>
 8009568:	442f      	add	r7, r5
 800956a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800956e:	42bb      	cmp	r3, r7
 8009570:	da42      	bge.n	80095f8 <__gethex+0x244>
 8009572:	9801      	ldr	r0, [sp, #4]
 8009574:	4621      	mov	r1, r4
 8009576:	f000 faf7 	bl	8009b68 <_Bfree>
 800957a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800957c:	2300      	movs	r3, #0
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	25a3      	movs	r5, #163	@ 0xa3
 8009582:	e793      	b.n	80094ac <__gethex+0xf8>
 8009584:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009588:	2a2e      	cmp	r2, #46	@ 0x2e
 800958a:	d012      	beq.n	80095b2 <__gethex+0x1fe>
 800958c:	2b20      	cmp	r3, #32
 800958e:	d104      	bne.n	800959a <__gethex+0x1e6>
 8009590:	f845 bb04 	str.w	fp, [r5], #4
 8009594:	f04f 0b00 	mov.w	fp, #0
 8009598:	465b      	mov	r3, fp
 800959a:	7830      	ldrb	r0, [r6, #0]
 800959c:	9303      	str	r3, [sp, #12]
 800959e:	f7ff fef3 	bl	8009388 <__hexdig_fun>
 80095a2:	9b03      	ldr	r3, [sp, #12]
 80095a4:	f000 000f 	and.w	r0, r0, #15
 80095a8:	4098      	lsls	r0, r3
 80095aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80095ae:	3304      	adds	r3, #4
 80095b0:	e7ae      	b.n	8009510 <__gethex+0x15c>
 80095b2:	45b1      	cmp	r9, r6
 80095b4:	d8ea      	bhi.n	800958c <__gethex+0x1d8>
 80095b6:	492b      	ldr	r1, [pc, #172]	@ (8009664 <__gethex+0x2b0>)
 80095b8:	9303      	str	r3, [sp, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	4630      	mov	r0, r6
 80095be:	f7fe ff46 	bl	800844e <strncmp>
 80095c2:	9b03      	ldr	r3, [sp, #12]
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d1e1      	bne.n	800958c <__gethex+0x1d8>
 80095c8:	e7a2      	b.n	8009510 <__gethex+0x15c>
 80095ca:	1ea9      	subs	r1, r5, #2
 80095cc:	4620      	mov	r0, r4
 80095ce:	f000 ff14 	bl	800a3fa <__any_on>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d0c2      	beq.n	800955c <__gethex+0x1a8>
 80095d6:	f04f 0903 	mov.w	r9, #3
 80095da:	e7c1      	b.n	8009560 <__gethex+0x1ac>
 80095dc:	da09      	bge.n	80095f2 <__gethex+0x23e>
 80095de:	1b75      	subs	r5, r6, r5
 80095e0:	4621      	mov	r1, r4
 80095e2:	9801      	ldr	r0, [sp, #4]
 80095e4:	462a      	mov	r2, r5
 80095e6:	f000 fccf 	bl	8009f88 <__lshift>
 80095ea:	1b7f      	subs	r7, r7, r5
 80095ec:	4604      	mov	r4, r0
 80095ee:	f100 0a14 	add.w	sl, r0, #20
 80095f2:	f04f 0900 	mov.w	r9, #0
 80095f6:	e7b8      	b.n	800956a <__gethex+0x1b6>
 80095f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80095fc:	42bd      	cmp	r5, r7
 80095fe:	dd6f      	ble.n	80096e0 <__gethex+0x32c>
 8009600:	1bed      	subs	r5, r5, r7
 8009602:	42ae      	cmp	r6, r5
 8009604:	dc34      	bgt.n	8009670 <__gethex+0x2bc>
 8009606:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800960a:	2b02      	cmp	r3, #2
 800960c:	d022      	beq.n	8009654 <__gethex+0x2a0>
 800960e:	2b03      	cmp	r3, #3
 8009610:	d024      	beq.n	800965c <__gethex+0x2a8>
 8009612:	2b01      	cmp	r3, #1
 8009614:	d115      	bne.n	8009642 <__gethex+0x28e>
 8009616:	42ae      	cmp	r6, r5
 8009618:	d113      	bne.n	8009642 <__gethex+0x28e>
 800961a:	2e01      	cmp	r6, #1
 800961c:	d10b      	bne.n	8009636 <__gethex+0x282>
 800961e:	9a02      	ldr	r2, [sp, #8]
 8009620:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	2301      	movs	r3, #1
 8009628:	6123      	str	r3, [r4, #16]
 800962a:	f8ca 3000 	str.w	r3, [sl]
 800962e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009630:	2562      	movs	r5, #98	@ 0x62
 8009632:	601c      	str	r4, [r3, #0]
 8009634:	e73a      	b.n	80094ac <__gethex+0xf8>
 8009636:	1e71      	subs	r1, r6, #1
 8009638:	4620      	mov	r0, r4
 800963a:	f000 fede 	bl	800a3fa <__any_on>
 800963e:	2800      	cmp	r0, #0
 8009640:	d1ed      	bne.n	800961e <__gethex+0x26a>
 8009642:	9801      	ldr	r0, [sp, #4]
 8009644:	4621      	mov	r1, r4
 8009646:	f000 fa8f 	bl	8009b68 <_Bfree>
 800964a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800964c:	2300      	movs	r3, #0
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	2550      	movs	r5, #80	@ 0x50
 8009652:	e72b      	b.n	80094ac <__gethex+0xf8>
 8009654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1f3      	bne.n	8009642 <__gethex+0x28e>
 800965a:	e7e0      	b.n	800961e <__gethex+0x26a>
 800965c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1dd      	bne.n	800961e <__gethex+0x26a>
 8009662:	e7ee      	b.n	8009642 <__gethex+0x28e>
 8009664:	0800b138 	.word	0x0800b138
 8009668:	0800b1f7 	.word	0x0800b1f7
 800966c:	0800b208 	.word	0x0800b208
 8009670:	1e6f      	subs	r7, r5, #1
 8009672:	f1b9 0f00 	cmp.w	r9, #0
 8009676:	d130      	bne.n	80096da <__gethex+0x326>
 8009678:	b127      	cbz	r7, 8009684 <__gethex+0x2d0>
 800967a:	4639      	mov	r1, r7
 800967c:	4620      	mov	r0, r4
 800967e:	f000 febc 	bl	800a3fa <__any_on>
 8009682:	4681      	mov	r9, r0
 8009684:	117a      	asrs	r2, r7, #5
 8009686:	2301      	movs	r3, #1
 8009688:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800968c:	f007 071f 	and.w	r7, r7, #31
 8009690:	40bb      	lsls	r3, r7
 8009692:	4213      	tst	r3, r2
 8009694:	4629      	mov	r1, r5
 8009696:	4620      	mov	r0, r4
 8009698:	bf18      	it	ne
 800969a:	f049 0902 	orrne.w	r9, r9, #2
 800969e:	f7ff fe21 	bl	80092e4 <rshift>
 80096a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80096a6:	1b76      	subs	r6, r6, r5
 80096a8:	2502      	movs	r5, #2
 80096aa:	f1b9 0f00 	cmp.w	r9, #0
 80096ae:	d047      	beq.n	8009740 <__gethex+0x38c>
 80096b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d015      	beq.n	80096e4 <__gethex+0x330>
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d017      	beq.n	80096ec <__gethex+0x338>
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d109      	bne.n	80096d4 <__gethex+0x320>
 80096c0:	f019 0f02 	tst.w	r9, #2
 80096c4:	d006      	beq.n	80096d4 <__gethex+0x320>
 80096c6:	f8da 3000 	ldr.w	r3, [sl]
 80096ca:	ea49 0903 	orr.w	r9, r9, r3
 80096ce:	f019 0f01 	tst.w	r9, #1
 80096d2:	d10e      	bne.n	80096f2 <__gethex+0x33e>
 80096d4:	f045 0510 	orr.w	r5, r5, #16
 80096d8:	e032      	b.n	8009740 <__gethex+0x38c>
 80096da:	f04f 0901 	mov.w	r9, #1
 80096de:	e7d1      	b.n	8009684 <__gethex+0x2d0>
 80096e0:	2501      	movs	r5, #1
 80096e2:	e7e2      	b.n	80096aa <__gethex+0x2f6>
 80096e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096e6:	f1c3 0301 	rsb	r3, r3, #1
 80096ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d0f0      	beq.n	80096d4 <__gethex+0x320>
 80096f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80096f6:	f104 0314 	add.w	r3, r4, #20
 80096fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80096fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009702:	f04f 0c00 	mov.w	ip, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f853 2b04 	ldr.w	r2, [r3], #4
 800970c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009710:	d01b      	beq.n	800974a <__gethex+0x396>
 8009712:	3201      	adds	r2, #1
 8009714:	6002      	str	r2, [r0, #0]
 8009716:	2d02      	cmp	r5, #2
 8009718:	f104 0314 	add.w	r3, r4, #20
 800971c:	d13c      	bne.n	8009798 <__gethex+0x3e4>
 800971e:	f8d8 2000 	ldr.w	r2, [r8]
 8009722:	3a01      	subs	r2, #1
 8009724:	42b2      	cmp	r2, r6
 8009726:	d109      	bne.n	800973c <__gethex+0x388>
 8009728:	1171      	asrs	r1, r6, #5
 800972a:	2201      	movs	r2, #1
 800972c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009730:	f006 061f 	and.w	r6, r6, #31
 8009734:	fa02 f606 	lsl.w	r6, r2, r6
 8009738:	421e      	tst	r6, r3
 800973a:	d13a      	bne.n	80097b2 <__gethex+0x3fe>
 800973c:	f045 0520 	orr.w	r5, r5, #32
 8009740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009742:	601c      	str	r4, [r3, #0]
 8009744:	9b02      	ldr	r3, [sp, #8]
 8009746:	601f      	str	r7, [r3, #0]
 8009748:	e6b0      	b.n	80094ac <__gethex+0xf8>
 800974a:	4299      	cmp	r1, r3
 800974c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009750:	d8d9      	bhi.n	8009706 <__gethex+0x352>
 8009752:	68a3      	ldr	r3, [r4, #8]
 8009754:	459b      	cmp	fp, r3
 8009756:	db17      	blt.n	8009788 <__gethex+0x3d4>
 8009758:	6861      	ldr	r1, [r4, #4]
 800975a:	9801      	ldr	r0, [sp, #4]
 800975c:	3101      	adds	r1, #1
 800975e:	f000 f9c3 	bl	8009ae8 <_Balloc>
 8009762:	4681      	mov	r9, r0
 8009764:	b918      	cbnz	r0, 800976e <__gethex+0x3ba>
 8009766:	4b1a      	ldr	r3, [pc, #104]	@ (80097d0 <__gethex+0x41c>)
 8009768:	4602      	mov	r2, r0
 800976a:	2184      	movs	r1, #132	@ 0x84
 800976c:	e6c5      	b.n	80094fa <__gethex+0x146>
 800976e:	6922      	ldr	r2, [r4, #16]
 8009770:	3202      	adds	r2, #2
 8009772:	f104 010c 	add.w	r1, r4, #12
 8009776:	0092      	lsls	r2, r2, #2
 8009778:	300c      	adds	r0, #12
 800977a:	f7fe fef2 	bl	8008562 <memcpy>
 800977e:	4621      	mov	r1, r4
 8009780:	9801      	ldr	r0, [sp, #4]
 8009782:	f000 f9f1 	bl	8009b68 <_Bfree>
 8009786:	464c      	mov	r4, r9
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009790:	6122      	str	r2, [r4, #16]
 8009792:	2201      	movs	r2, #1
 8009794:	615a      	str	r2, [r3, #20]
 8009796:	e7be      	b.n	8009716 <__gethex+0x362>
 8009798:	6922      	ldr	r2, [r4, #16]
 800979a:	455a      	cmp	r2, fp
 800979c:	dd0b      	ble.n	80097b6 <__gethex+0x402>
 800979e:	2101      	movs	r1, #1
 80097a0:	4620      	mov	r0, r4
 80097a2:	f7ff fd9f 	bl	80092e4 <rshift>
 80097a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097aa:	3701      	adds	r7, #1
 80097ac:	42bb      	cmp	r3, r7
 80097ae:	f6ff aee0 	blt.w	8009572 <__gethex+0x1be>
 80097b2:	2501      	movs	r5, #1
 80097b4:	e7c2      	b.n	800973c <__gethex+0x388>
 80097b6:	f016 061f 	ands.w	r6, r6, #31
 80097ba:	d0fa      	beq.n	80097b2 <__gethex+0x3fe>
 80097bc:	4453      	add	r3, sl
 80097be:	f1c6 0620 	rsb	r6, r6, #32
 80097c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80097c6:	f000 fa81 	bl	8009ccc <__hi0bits>
 80097ca:	42b0      	cmp	r0, r6
 80097cc:	dbe7      	blt.n	800979e <__gethex+0x3ea>
 80097ce:	e7f0      	b.n	80097b2 <__gethex+0x3fe>
 80097d0:	0800b1f7 	.word	0x0800b1f7

080097d4 <L_shift>:
 80097d4:	f1c2 0208 	rsb	r2, r2, #8
 80097d8:	0092      	lsls	r2, r2, #2
 80097da:	b570      	push	{r4, r5, r6, lr}
 80097dc:	f1c2 0620 	rsb	r6, r2, #32
 80097e0:	6843      	ldr	r3, [r0, #4]
 80097e2:	6804      	ldr	r4, [r0, #0]
 80097e4:	fa03 f506 	lsl.w	r5, r3, r6
 80097e8:	432c      	orrs	r4, r5
 80097ea:	40d3      	lsrs	r3, r2
 80097ec:	6004      	str	r4, [r0, #0]
 80097ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80097f2:	4288      	cmp	r0, r1
 80097f4:	d3f4      	bcc.n	80097e0 <L_shift+0xc>
 80097f6:	bd70      	pop	{r4, r5, r6, pc}

080097f8 <__match>:
 80097f8:	b530      	push	{r4, r5, lr}
 80097fa:	6803      	ldr	r3, [r0, #0]
 80097fc:	3301      	adds	r3, #1
 80097fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009802:	b914      	cbnz	r4, 800980a <__match+0x12>
 8009804:	6003      	str	r3, [r0, #0]
 8009806:	2001      	movs	r0, #1
 8009808:	bd30      	pop	{r4, r5, pc}
 800980a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800980e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009812:	2d19      	cmp	r5, #25
 8009814:	bf98      	it	ls
 8009816:	3220      	addls	r2, #32
 8009818:	42a2      	cmp	r2, r4
 800981a:	d0f0      	beq.n	80097fe <__match+0x6>
 800981c:	2000      	movs	r0, #0
 800981e:	e7f3      	b.n	8009808 <__match+0x10>

08009820 <__hexnan>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	680b      	ldr	r3, [r1, #0]
 8009826:	6801      	ldr	r1, [r0, #0]
 8009828:	115e      	asrs	r6, r3, #5
 800982a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800982e:	f013 031f 	ands.w	r3, r3, #31
 8009832:	b087      	sub	sp, #28
 8009834:	bf18      	it	ne
 8009836:	3604      	addne	r6, #4
 8009838:	2500      	movs	r5, #0
 800983a:	1f37      	subs	r7, r6, #4
 800983c:	4682      	mov	sl, r0
 800983e:	4690      	mov	r8, r2
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	f846 5c04 	str.w	r5, [r6, #-4]
 8009846:	46b9      	mov	r9, r7
 8009848:	463c      	mov	r4, r7
 800984a:	9502      	str	r5, [sp, #8]
 800984c:	46ab      	mov	fp, r5
 800984e:	784a      	ldrb	r2, [r1, #1]
 8009850:	1c4b      	adds	r3, r1, #1
 8009852:	9303      	str	r3, [sp, #12]
 8009854:	b342      	cbz	r2, 80098a8 <__hexnan+0x88>
 8009856:	4610      	mov	r0, r2
 8009858:	9105      	str	r1, [sp, #20]
 800985a:	9204      	str	r2, [sp, #16]
 800985c:	f7ff fd94 	bl	8009388 <__hexdig_fun>
 8009860:	2800      	cmp	r0, #0
 8009862:	d151      	bne.n	8009908 <__hexnan+0xe8>
 8009864:	9a04      	ldr	r2, [sp, #16]
 8009866:	9905      	ldr	r1, [sp, #20]
 8009868:	2a20      	cmp	r2, #32
 800986a:	d818      	bhi.n	800989e <__hexnan+0x7e>
 800986c:	9b02      	ldr	r3, [sp, #8]
 800986e:	459b      	cmp	fp, r3
 8009870:	dd13      	ble.n	800989a <__hexnan+0x7a>
 8009872:	454c      	cmp	r4, r9
 8009874:	d206      	bcs.n	8009884 <__hexnan+0x64>
 8009876:	2d07      	cmp	r5, #7
 8009878:	dc04      	bgt.n	8009884 <__hexnan+0x64>
 800987a:	462a      	mov	r2, r5
 800987c:	4649      	mov	r1, r9
 800987e:	4620      	mov	r0, r4
 8009880:	f7ff ffa8 	bl	80097d4 <L_shift>
 8009884:	4544      	cmp	r4, r8
 8009886:	d952      	bls.n	800992e <__hexnan+0x10e>
 8009888:	2300      	movs	r3, #0
 800988a:	f1a4 0904 	sub.w	r9, r4, #4
 800988e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009892:	f8cd b008 	str.w	fp, [sp, #8]
 8009896:	464c      	mov	r4, r9
 8009898:	461d      	mov	r5, r3
 800989a:	9903      	ldr	r1, [sp, #12]
 800989c:	e7d7      	b.n	800984e <__hexnan+0x2e>
 800989e:	2a29      	cmp	r2, #41	@ 0x29
 80098a0:	d157      	bne.n	8009952 <__hexnan+0x132>
 80098a2:	3102      	adds	r1, #2
 80098a4:	f8ca 1000 	str.w	r1, [sl]
 80098a8:	f1bb 0f00 	cmp.w	fp, #0
 80098ac:	d051      	beq.n	8009952 <__hexnan+0x132>
 80098ae:	454c      	cmp	r4, r9
 80098b0:	d206      	bcs.n	80098c0 <__hexnan+0xa0>
 80098b2:	2d07      	cmp	r5, #7
 80098b4:	dc04      	bgt.n	80098c0 <__hexnan+0xa0>
 80098b6:	462a      	mov	r2, r5
 80098b8:	4649      	mov	r1, r9
 80098ba:	4620      	mov	r0, r4
 80098bc:	f7ff ff8a 	bl	80097d4 <L_shift>
 80098c0:	4544      	cmp	r4, r8
 80098c2:	d936      	bls.n	8009932 <__hexnan+0x112>
 80098c4:	f1a8 0204 	sub.w	r2, r8, #4
 80098c8:	4623      	mov	r3, r4
 80098ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80098ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80098d2:	429f      	cmp	r7, r3
 80098d4:	d2f9      	bcs.n	80098ca <__hexnan+0xaa>
 80098d6:	1b3b      	subs	r3, r7, r4
 80098d8:	f023 0303 	bic.w	r3, r3, #3
 80098dc:	3304      	adds	r3, #4
 80098de:	3401      	adds	r4, #1
 80098e0:	3e03      	subs	r6, #3
 80098e2:	42b4      	cmp	r4, r6
 80098e4:	bf88      	it	hi
 80098e6:	2304      	movhi	r3, #4
 80098e8:	4443      	add	r3, r8
 80098ea:	2200      	movs	r2, #0
 80098ec:	f843 2b04 	str.w	r2, [r3], #4
 80098f0:	429f      	cmp	r7, r3
 80098f2:	d2fb      	bcs.n	80098ec <__hexnan+0xcc>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	b91b      	cbnz	r3, 8009900 <__hexnan+0xe0>
 80098f8:	4547      	cmp	r7, r8
 80098fa:	d128      	bne.n	800994e <__hexnan+0x12e>
 80098fc:	2301      	movs	r3, #1
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	2005      	movs	r0, #5
 8009902:	b007      	add	sp, #28
 8009904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009908:	3501      	adds	r5, #1
 800990a:	2d08      	cmp	r5, #8
 800990c:	f10b 0b01 	add.w	fp, fp, #1
 8009910:	dd06      	ble.n	8009920 <__hexnan+0x100>
 8009912:	4544      	cmp	r4, r8
 8009914:	d9c1      	bls.n	800989a <__hexnan+0x7a>
 8009916:	2300      	movs	r3, #0
 8009918:	f844 3c04 	str.w	r3, [r4, #-4]
 800991c:	2501      	movs	r5, #1
 800991e:	3c04      	subs	r4, #4
 8009920:	6822      	ldr	r2, [r4, #0]
 8009922:	f000 000f 	and.w	r0, r0, #15
 8009926:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800992a:	6020      	str	r0, [r4, #0]
 800992c:	e7b5      	b.n	800989a <__hexnan+0x7a>
 800992e:	2508      	movs	r5, #8
 8009930:	e7b3      	b.n	800989a <__hexnan+0x7a>
 8009932:	9b01      	ldr	r3, [sp, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d0dd      	beq.n	80098f4 <__hexnan+0xd4>
 8009938:	f1c3 0320 	rsb	r3, r3, #32
 800993c:	f04f 32ff 	mov.w	r2, #4294967295
 8009940:	40da      	lsrs	r2, r3
 8009942:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009946:	4013      	ands	r3, r2
 8009948:	f846 3c04 	str.w	r3, [r6, #-4]
 800994c:	e7d2      	b.n	80098f4 <__hexnan+0xd4>
 800994e:	3f04      	subs	r7, #4
 8009950:	e7d0      	b.n	80098f4 <__hexnan+0xd4>
 8009952:	2004      	movs	r0, #4
 8009954:	e7d5      	b.n	8009902 <__hexnan+0xe2>
	...

08009958 <malloc>:
 8009958:	4b02      	ldr	r3, [pc, #8]	@ (8009964 <malloc+0xc>)
 800995a:	4601      	mov	r1, r0
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	f000 b825 	b.w	80099ac <_malloc_r>
 8009962:	bf00      	nop
 8009964:	200002cc 	.word	0x200002cc

08009968 <sbrk_aligned>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	4e0f      	ldr	r6, [pc, #60]	@ (80099a8 <sbrk_aligned+0x40>)
 800996c:	460c      	mov	r4, r1
 800996e:	6831      	ldr	r1, [r6, #0]
 8009970:	4605      	mov	r5, r0
 8009972:	b911      	cbnz	r1, 800997a <sbrk_aligned+0x12>
 8009974:	f001 f808 	bl	800a988 <_sbrk_r>
 8009978:	6030      	str	r0, [r6, #0]
 800997a:	4621      	mov	r1, r4
 800997c:	4628      	mov	r0, r5
 800997e:	f001 f803 	bl	800a988 <_sbrk_r>
 8009982:	1c43      	adds	r3, r0, #1
 8009984:	d103      	bne.n	800998e <sbrk_aligned+0x26>
 8009986:	f04f 34ff 	mov.w	r4, #4294967295
 800998a:	4620      	mov	r0, r4
 800998c:	bd70      	pop	{r4, r5, r6, pc}
 800998e:	1cc4      	adds	r4, r0, #3
 8009990:	f024 0403 	bic.w	r4, r4, #3
 8009994:	42a0      	cmp	r0, r4
 8009996:	d0f8      	beq.n	800998a <sbrk_aligned+0x22>
 8009998:	1a21      	subs	r1, r4, r0
 800999a:	4628      	mov	r0, r5
 800999c:	f000 fff4 	bl	800a988 <_sbrk_r>
 80099a0:	3001      	adds	r0, #1
 80099a2:	d1f2      	bne.n	800998a <sbrk_aligned+0x22>
 80099a4:	e7ef      	b.n	8009986 <sbrk_aligned+0x1e>
 80099a6:	bf00      	nop
 80099a8:	200007dc 	.word	0x200007dc

080099ac <_malloc_r>:
 80099ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b0:	1ccd      	adds	r5, r1, #3
 80099b2:	f025 0503 	bic.w	r5, r5, #3
 80099b6:	3508      	adds	r5, #8
 80099b8:	2d0c      	cmp	r5, #12
 80099ba:	bf38      	it	cc
 80099bc:	250c      	movcc	r5, #12
 80099be:	2d00      	cmp	r5, #0
 80099c0:	4606      	mov	r6, r0
 80099c2:	db01      	blt.n	80099c8 <_malloc_r+0x1c>
 80099c4:	42a9      	cmp	r1, r5
 80099c6:	d904      	bls.n	80099d2 <_malloc_r+0x26>
 80099c8:	230c      	movs	r3, #12
 80099ca:	6033      	str	r3, [r6, #0]
 80099cc:	2000      	movs	r0, #0
 80099ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009aa8 <_malloc_r+0xfc>
 80099d6:	f000 f87b 	bl	8009ad0 <__malloc_lock>
 80099da:	f8d8 3000 	ldr.w	r3, [r8]
 80099de:	461c      	mov	r4, r3
 80099e0:	bb44      	cbnz	r4, 8009a34 <_malloc_r+0x88>
 80099e2:	4629      	mov	r1, r5
 80099e4:	4630      	mov	r0, r6
 80099e6:	f7ff ffbf 	bl	8009968 <sbrk_aligned>
 80099ea:	1c43      	adds	r3, r0, #1
 80099ec:	4604      	mov	r4, r0
 80099ee:	d158      	bne.n	8009aa2 <_malloc_r+0xf6>
 80099f0:	f8d8 4000 	ldr.w	r4, [r8]
 80099f4:	4627      	mov	r7, r4
 80099f6:	2f00      	cmp	r7, #0
 80099f8:	d143      	bne.n	8009a82 <_malloc_r+0xd6>
 80099fa:	2c00      	cmp	r4, #0
 80099fc:	d04b      	beq.n	8009a96 <_malloc_r+0xea>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	4639      	mov	r1, r7
 8009a02:	4630      	mov	r0, r6
 8009a04:	eb04 0903 	add.w	r9, r4, r3
 8009a08:	f000 ffbe 	bl	800a988 <_sbrk_r>
 8009a0c:	4581      	cmp	r9, r0
 8009a0e:	d142      	bne.n	8009a96 <_malloc_r+0xea>
 8009a10:	6821      	ldr	r1, [r4, #0]
 8009a12:	1a6d      	subs	r5, r5, r1
 8009a14:	4629      	mov	r1, r5
 8009a16:	4630      	mov	r0, r6
 8009a18:	f7ff ffa6 	bl	8009968 <sbrk_aligned>
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	d03a      	beq.n	8009a96 <_malloc_r+0xea>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	442b      	add	r3, r5
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	f8d8 3000 	ldr.w	r3, [r8]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	bb62      	cbnz	r2, 8009a88 <_malloc_r+0xdc>
 8009a2e:	f8c8 7000 	str.w	r7, [r8]
 8009a32:	e00f      	b.n	8009a54 <_malloc_r+0xa8>
 8009a34:	6822      	ldr	r2, [r4, #0]
 8009a36:	1b52      	subs	r2, r2, r5
 8009a38:	d420      	bmi.n	8009a7c <_malloc_r+0xd0>
 8009a3a:	2a0b      	cmp	r2, #11
 8009a3c:	d917      	bls.n	8009a6e <_malloc_r+0xc2>
 8009a3e:	1961      	adds	r1, r4, r5
 8009a40:	42a3      	cmp	r3, r4
 8009a42:	6025      	str	r5, [r4, #0]
 8009a44:	bf18      	it	ne
 8009a46:	6059      	strne	r1, [r3, #4]
 8009a48:	6863      	ldr	r3, [r4, #4]
 8009a4a:	bf08      	it	eq
 8009a4c:	f8c8 1000 	streq.w	r1, [r8]
 8009a50:	5162      	str	r2, [r4, r5]
 8009a52:	604b      	str	r3, [r1, #4]
 8009a54:	4630      	mov	r0, r6
 8009a56:	f000 f841 	bl	8009adc <__malloc_unlock>
 8009a5a:	f104 000b 	add.w	r0, r4, #11
 8009a5e:	1d23      	adds	r3, r4, #4
 8009a60:	f020 0007 	bic.w	r0, r0, #7
 8009a64:	1ac2      	subs	r2, r0, r3
 8009a66:	bf1c      	itt	ne
 8009a68:	1a1b      	subne	r3, r3, r0
 8009a6a:	50a3      	strne	r3, [r4, r2]
 8009a6c:	e7af      	b.n	80099ce <_malloc_r+0x22>
 8009a6e:	6862      	ldr	r2, [r4, #4]
 8009a70:	42a3      	cmp	r3, r4
 8009a72:	bf0c      	ite	eq
 8009a74:	f8c8 2000 	streq.w	r2, [r8]
 8009a78:	605a      	strne	r2, [r3, #4]
 8009a7a:	e7eb      	b.n	8009a54 <_malloc_r+0xa8>
 8009a7c:	4623      	mov	r3, r4
 8009a7e:	6864      	ldr	r4, [r4, #4]
 8009a80:	e7ae      	b.n	80099e0 <_malloc_r+0x34>
 8009a82:	463c      	mov	r4, r7
 8009a84:	687f      	ldr	r7, [r7, #4]
 8009a86:	e7b6      	b.n	80099f6 <_malloc_r+0x4a>
 8009a88:	461a      	mov	r2, r3
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	42a3      	cmp	r3, r4
 8009a8e:	d1fb      	bne.n	8009a88 <_malloc_r+0xdc>
 8009a90:	2300      	movs	r3, #0
 8009a92:	6053      	str	r3, [r2, #4]
 8009a94:	e7de      	b.n	8009a54 <_malloc_r+0xa8>
 8009a96:	230c      	movs	r3, #12
 8009a98:	6033      	str	r3, [r6, #0]
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f000 f81e 	bl	8009adc <__malloc_unlock>
 8009aa0:	e794      	b.n	80099cc <_malloc_r+0x20>
 8009aa2:	6005      	str	r5, [r0, #0]
 8009aa4:	e7d6      	b.n	8009a54 <_malloc_r+0xa8>
 8009aa6:	bf00      	nop
 8009aa8:	200007e0 	.word	0x200007e0

08009aac <__ascii_mbtowc>:
 8009aac:	b082      	sub	sp, #8
 8009aae:	b901      	cbnz	r1, 8009ab2 <__ascii_mbtowc+0x6>
 8009ab0:	a901      	add	r1, sp, #4
 8009ab2:	b142      	cbz	r2, 8009ac6 <__ascii_mbtowc+0x1a>
 8009ab4:	b14b      	cbz	r3, 8009aca <__ascii_mbtowc+0x1e>
 8009ab6:	7813      	ldrb	r3, [r2, #0]
 8009ab8:	600b      	str	r3, [r1, #0]
 8009aba:	7812      	ldrb	r2, [r2, #0]
 8009abc:	1e10      	subs	r0, r2, #0
 8009abe:	bf18      	it	ne
 8009ac0:	2001      	movne	r0, #1
 8009ac2:	b002      	add	sp, #8
 8009ac4:	4770      	bx	lr
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	e7fb      	b.n	8009ac2 <__ascii_mbtowc+0x16>
 8009aca:	f06f 0001 	mvn.w	r0, #1
 8009ace:	e7f8      	b.n	8009ac2 <__ascii_mbtowc+0x16>

08009ad0 <__malloc_lock>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	@ (8009ad8 <__malloc_lock+0x8>)
 8009ad2:	f7fe bd44 	b.w	800855e <__retarget_lock_acquire_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	200007d8 	.word	0x200007d8

08009adc <__malloc_unlock>:
 8009adc:	4801      	ldr	r0, [pc, #4]	@ (8009ae4 <__malloc_unlock+0x8>)
 8009ade:	f7fe bd3f 	b.w	8008560 <__retarget_lock_release_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	200007d8 	.word	0x200007d8

08009ae8 <_Balloc>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	69c6      	ldr	r6, [r0, #28]
 8009aec:	4604      	mov	r4, r0
 8009aee:	460d      	mov	r5, r1
 8009af0:	b976      	cbnz	r6, 8009b10 <_Balloc+0x28>
 8009af2:	2010      	movs	r0, #16
 8009af4:	f7ff ff30 	bl	8009958 <malloc>
 8009af8:	4602      	mov	r2, r0
 8009afa:	61e0      	str	r0, [r4, #28]
 8009afc:	b920      	cbnz	r0, 8009b08 <_Balloc+0x20>
 8009afe:	4b18      	ldr	r3, [pc, #96]	@ (8009b60 <_Balloc+0x78>)
 8009b00:	4818      	ldr	r0, [pc, #96]	@ (8009b64 <_Balloc+0x7c>)
 8009b02:	216b      	movs	r1, #107	@ 0x6b
 8009b04:	f000 ff50 	bl	800a9a8 <__assert_func>
 8009b08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b0c:	6006      	str	r6, [r0, #0]
 8009b0e:	60c6      	str	r6, [r0, #12]
 8009b10:	69e6      	ldr	r6, [r4, #28]
 8009b12:	68f3      	ldr	r3, [r6, #12]
 8009b14:	b183      	cbz	r3, 8009b38 <_Balloc+0x50>
 8009b16:	69e3      	ldr	r3, [r4, #28]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b1e:	b9b8      	cbnz	r0, 8009b50 <_Balloc+0x68>
 8009b20:	2101      	movs	r1, #1
 8009b22:	fa01 f605 	lsl.w	r6, r1, r5
 8009b26:	1d72      	adds	r2, r6, #5
 8009b28:	0092      	lsls	r2, r2, #2
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f000 ff5a 	bl	800a9e4 <_calloc_r>
 8009b30:	b160      	cbz	r0, 8009b4c <_Balloc+0x64>
 8009b32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b36:	e00e      	b.n	8009b56 <_Balloc+0x6e>
 8009b38:	2221      	movs	r2, #33	@ 0x21
 8009b3a:	2104      	movs	r1, #4
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f000 ff51 	bl	800a9e4 <_calloc_r>
 8009b42:	69e3      	ldr	r3, [r4, #28]
 8009b44:	60f0      	str	r0, [r6, #12]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1e4      	bne.n	8009b16 <_Balloc+0x2e>
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	bd70      	pop	{r4, r5, r6, pc}
 8009b50:	6802      	ldr	r2, [r0, #0]
 8009b52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b56:	2300      	movs	r3, #0
 8009b58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b5c:	e7f7      	b.n	8009b4e <_Balloc+0x66>
 8009b5e:	bf00      	nop
 8009b60:	0800b188 	.word	0x0800b188
 8009b64:	0800b268 	.word	0x0800b268

08009b68 <_Bfree>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	69c6      	ldr	r6, [r0, #28]
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	460c      	mov	r4, r1
 8009b70:	b976      	cbnz	r6, 8009b90 <_Bfree+0x28>
 8009b72:	2010      	movs	r0, #16
 8009b74:	f7ff fef0 	bl	8009958 <malloc>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	61e8      	str	r0, [r5, #28]
 8009b7c:	b920      	cbnz	r0, 8009b88 <_Bfree+0x20>
 8009b7e:	4b09      	ldr	r3, [pc, #36]	@ (8009ba4 <_Bfree+0x3c>)
 8009b80:	4809      	ldr	r0, [pc, #36]	@ (8009ba8 <_Bfree+0x40>)
 8009b82:	218f      	movs	r1, #143	@ 0x8f
 8009b84:	f000 ff10 	bl	800a9a8 <__assert_func>
 8009b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b8c:	6006      	str	r6, [r0, #0]
 8009b8e:	60c6      	str	r6, [r0, #12]
 8009b90:	b13c      	cbz	r4, 8009ba2 <_Bfree+0x3a>
 8009b92:	69eb      	ldr	r3, [r5, #28]
 8009b94:	6862      	ldr	r2, [r4, #4]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b9c:	6021      	str	r1, [r4, #0]
 8009b9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ba2:	bd70      	pop	{r4, r5, r6, pc}
 8009ba4:	0800b188 	.word	0x0800b188
 8009ba8:	0800b268 	.word	0x0800b268

08009bac <__multadd>:
 8009bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb0:	690d      	ldr	r5, [r1, #16]
 8009bb2:	4607      	mov	r7, r0
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	461e      	mov	r6, r3
 8009bb8:	f101 0c14 	add.w	ip, r1, #20
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	f8dc 3000 	ldr.w	r3, [ip]
 8009bc2:	b299      	uxth	r1, r3
 8009bc4:	fb02 6101 	mla	r1, r2, r1, r6
 8009bc8:	0c1e      	lsrs	r6, r3, #16
 8009bca:	0c0b      	lsrs	r3, r1, #16
 8009bcc:	fb02 3306 	mla	r3, r2, r6, r3
 8009bd0:	b289      	uxth	r1, r1
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bd8:	4285      	cmp	r5, r0
 8009bda:	f84c 1b04 	str.w	r1, [ip], #4
 8009bde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009be2:	dcec      	bgt.n	8009bbe <__multadd+0x12>
 8009be4:	b30e      	cbz	r6, 8009c2a <__multadd+0x7e>
 8009be6:	68a3      	ldr	r3, [r4, #8]
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	dc19      	bgt.n	8009c20 <__multadd+0x74>
 8009bec:	6861      	ldr	r1, [r4, #4]
 8009bee:	4638      	mov	r0, r7
 8009bf0:	3101      	adds	r1, #1
 8009bf2:	f7ff ff79 	bl	8009ae8 <_Balloc>
 8009bf6:	4680      	mov	r8, r0
 8009bf8:	b928      	cbnz	r0, 8009c06 <__multadd+0x5a>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8009c30 <__multadd+0x84>)
 8009bfe:	480d      	ldr	r0, [pc, #52]	@ (8009c34 <__multadd+0x88>)
 8009c00:	21ba      	movs	r1, #186	@ 0xba
 8009c02:	f000 fed1 	bl	800a9a8 <__assert_func>
 8009c06:	6922      	ldr	r2, [r4, #16]
 8009c08:	3202      	adds	r2, #2
 8009c0a:	f104 010c 	add.w	r1, r4, #12
 8009c0e:	0092      	lsls	r2, r2, #2
 8009c10:	300c      	adds	r0, #12
 8009c12:	f7fe fca6 	bl	8008562 <memcpy>
 8009c16:	4621      	mov	r1, r4
 8009c18:	4638      	mov	r0, r7
 8009c1a:	f7ff ffa5 	bl	8009b68 <_Bfree>
 8009c1e:	4644      	mov	r4, r8
 8009c20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c24:	3501      	adds	r5, #1
 8009c26:	615e      	str	r6, [r3, #20]
 8009c28:	6125      	str	r5, [r4, #16]
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c30:	0800b1f7 	.word	0x0800b1f7
 8009c34:	0800b268 	.word	0x0800b268

08009c38 <__s2b>:
 8009c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c3c:	460c      	mov	r4, r1
 8009c3e:	4615      	mov	r5, r2
 8009c40:	461f      	mov	r7, r3
 8009c42:	2209      	movs	r2, #9
 8009c44:	3308      	adds	r3, #8
 8009c46:	4606      	mov	r6, r0
 8009c48:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	2201      	movs	r2, #1
 8009c50:	429a      	cmp	r2, r3
 8009c52:	db09      	blt.n	8009c68 <__s2b+0x30>
 8009c54:	4630      	mov	r0, r6
 8009c56:	f7ff ff47 	bl	8009ae8 <_Balloc>
 8009c5a:	b940      	cbnz	r0, 8009c6e <__s2b+0x36>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	4b19      	ldr	r3, [pc, #100]	@ (8009cc4 <__s2b+0x8c>)
 8009c60:	4819      	ldr	r0, [pc, #100]	@ (8009cc8 <__s2b+0x90>)
 8009c62:	21d3      	movs	r1, #211	@ 0xd3
 8009c64:	f000 fea0 	bl	800a9a8 <__assert_func>
 8009c68:	0052      	lsls	r2, r2, #1
 8009c6a:	3101      	adds	r1, #1
 8009c6c:	e7f0      	b.n	8009c50 <__s2b+0x18>
 8009c6e:	9b08      	ldr	r3, [sp, #32]
 8009c70:	6143      	str	r3, [r0, #20]
 8009c72:	2d09      	cmp	r5, #9
 8009c74:	f04f 0301 	mov.w	r3, #1
 8009c78:	6103      	str	r3, [r0, #16]
 8009c7a:	dd16      	ble.n	8009caa <__s2b+0x72>
 8009c7c:	f104 0909 	add.w	r9, r4, #9
 8009c80:	46c8      	mov	r8, r9
 8009c82:	442c      	add	r4, r5
 8009c84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c88:	4601      	mov	r1, r0
 8009c8a:	3b30      	subs	r3, #48	@ 0x30
 8009c8c:	220a      	movs	r2, #10
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f7ff ff8c 	bl	8009bac <__multadd>
 8009c94:	45a0      	cmp	r8, r4
 8009c96:	d1f5      	bne.n	8009c84 <__s2b+0x4c>
 8009c98:	f1a5 0408 	sub.w	r4, r5, #8
 8009c9c:	444c      	add	r4, r9
 8009c9e:	1b2d      	subs	r5, r5, r4
 8009ca0:	1963      	adds	r3, r4, r5
 8009ca2:	42bb      	cmp	r3, r7
 8009ca4:	db04      	blt.n	8009cb0 <__s2b+0x78>
 8009ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009caa:	340a      	adds	r4, #10
 8009cac:	2509      	movs	r5, #9
 8009cae:	e7f6      	b.n	8009c9e <__s2b+0x66>
 8009cb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009cb4:	4601      	mov	r1, r0
 8009cb6:	3b30      	subs	r3, #48	@ 0x30
 8009cb8:	220a      	movs	r2, #10
 8009cba:	4630      	mov	r0, r6
 8009cbc:	f7ff ff76 	bl	8009bac <__multadd>
 8009cc0:	e7ee      	b.n	8009ca0 <__s2b+0x68>
 8009cc2:	bf00      	nop
 8009cc4:	0800b1f7 	.word	0x0800b1f7
 8009cc8:	0800b268 	.word	0x0800b268

08009ccc <__hi0bits>:
 8009ccc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	bf36      	itet	cc
 8009cd4:	0403      	lslcc	r3, r0, #16
 8009cd6:	2000      	movcs	r0, #0
 8009cd8:	2010      	movcc	r0, #16
 8009cda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cde:	bf3c      	itt	cc
 8009ce0:	021b      	lslcc	r3, r3, #8
 8009ce2:	3008      	addcc	r0, #8
 8009ce4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ce8:	bf3c      	itt	cc
 8009cea:	011b      	lslcc	r3, r3, #4
 8009cec:	3004      	addcc	r0, #4
 8009cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cf2:	bf3c      	itt	cc
 8009cf4:	009b      	lslcc	r3, r3, #2
 8009cf6:	3002      	addcc	r0, #2
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	db05      	blt.n	8009d08 <__hi0bits+0x3c>
 8009cfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009d00:	f100 0001 	add.w	r0, r0, #1
 8009d04:	bf08      	it	eq
 8009d06:	2020      	moveq	r0, #32
 8009d08:	4770      	bx	lr

08009d0a <__lo0bits>:
 8009d0a:	6803      	ldr	r3, [r0, #0]
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	f013 0007 	ands.w	r0, r3, #7
 8009d12:	d00b      	beq.n	8009d2c <__lo0bits+0x22>
 8009d14:	07d9      	lsls	r1, r3, #31
 8009d16:	d421      	bmi.n	8009d5c <__lo0bits+0x52>
 8009d18:	0798      	lsls	r0, r3, #30
 8009d1a:	bf49      	itett	mi
 8009d1c:	085b      	lsrmi	r3, r3, #1
 8009d1e:	089b      	lsrpl	r3, r3, #2
 8009d20:	2001      	movmi	r0, #1
 8009d22:	6013      	strmi	r3, [r2, #0]
 8009d24:	bf5c      	itt	pl
 8009d26:	6013      	strpl	r3, [r2, #0]
 8009d28:	2002      	movpl	r0, #2
 8009d2a:	4770      	bx	lr
 8009d2c:	b299      	uxth	r1, r3
 8009d2e:	b909      	cbnz	r1, 8009d34 <__lo0bits+0x2a>
 8009d30:	0c1b      	lsrs	r3, r3, #16
 8009d32:	2010      	movs	r0, #16
 8009d34:	b2d9      	uxtb	r1, r3
 8009d36:	b909      	cbnz	r1, 8009d3c <__lo0bits+0x32>
 8009d38:	3008      	adds	r0, #8
 8009d3a:	0a1b      	lsrs	r3, r3, #8
 8009d3c:	0719      	lsls	r1, r3, #28
 8009d3e:	bf04      	itt	eq
 8009d40:	091b      	lsreq	r3, r3, #4
 8009d42:	3004      	addeq	r0, #4
 8009d44:	0799      	lsls	r1, r3, #30
 8009d46:	bf04      	itt	eq
 8009d48:	089b      	lsreq	r3, r3, #2
 8009d4a:	3002      	addeq	r0, #2
 8009d4c:	07d9      	lsls	r1, r3, #31
 8009d4e:	d403      	bmi.n	8009d58 <__lo0bits+0x4e>
 8009d50:	085b      	lsrs	r3, r3, #1
 8009d52:	f100 0001 	add.w	r0, r0, #1
 8009d56:	d003      	beq.n	8009d60 <__lo0bits+0x56>
 8009d58:	6013      	str	r3, [r2, #0]
 8009d5a:	4770      	bx	lr
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	4770      	bx	lr
 8009d60:	2020      	movs	r0, #32
 8009d62:	4770      	bx	lr

08009d64 <__i2b>:
 8009d64:	b510      	push	{r4, lr}
 8009d66:	460c      	mov	r4, r1
 8009d68:	2101      	movs	r1, #1
 8009d6a:	f7ff febd 	bl	8009ae8 <_Balloc>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	b928      	cbnz	r0, 8009d7e <__i2b+0x1a>
 8009d72:	4b05      	ldr	r3, [pc, #20]	@ (8009d88 <__i2b+0x24>)
 8009d74:	4805      	ldr	r0, [pc, #20]	@ (8009d8c <__i2b+0x28>)
 8009d76:	f240 1145 	movw	r1, #325	@ 0x145
 8009d7a:	f000 fe15 	bl	800a9a8 <__assert_func>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	6144      	str	r4, [r0, #20]
 8009d82:	6103      	str	r3, [r0, #16]
 8009d84:	bd10      	pop	{r4, pc}
 8009d86:	bf00      	nop
 8009d88:	0800b1f7 	.word	0x0800b1f7
 8009d8c:	0800b268 	.word	0x0800b268

08009d90 <__multiply>:
 8009d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d94:	4617      	mov	r7, r2
 8009d96:	690a      	ldr	r2, [r1, #16]
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	bfa8      	it	ge
 8009d9e:	463b      	movge	r3, r7
 8009da0:	4689      	mov	r9, r1
 8009da2:	bfa4      	itt	ge
 8009da4:	460f      	movge	r7, r1
 8009da6:	4699      	movge	r9, r3
 8009da8:	693d      	ldr	r5, [r7, #16]
 8009daa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	6879      	ldr	r1, [r7, #4]
 8009db2:	eb05 060a 	add.w	r6, r5, sl
 8009db6:	42b3      	cmp	r3, r6
 8009db8:	b085      	sub	sp, #20
 8009dba:	bfb8      	it	lt
 8009dbc:	3101      	addlt	r1, #1
 8009dbe:	f7ff fe93 	bl	8009ae8 <_Balloc>
 8009dc2:	b930      	cbnz	r0, 8009dd2 <__multiply+0x42>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	4b41      	ldr	r3, [pc, #260]	@ (8009ecc <__multiply+0x13c>)
 8009dc8:	4841      	ldr	r0, [pc, #260]	@ (8009ed0 <__multiply+0x140>)
 8009dca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009dce:	f000 fdeb 	bl	800a9a8 <__assert_func>
 8009dd2:	f100 0414 	add.w	r4, r0, #20
 8009dd6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009dda:	4623      	mov	r3, r4
 8009ddc:	2200      	movs	r2, #0
 8009dde:	4573      	cmp	r3, lr
 8009de0:	d320      	bcc.n	8009e24 <__multiply+0x94>
 8009de2:	f107 0814 	add.w	r8, r7, #20
 8009de6:	f109 0114 	add.w	r1, r9, #20
 8009dea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009dee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009df2:	9302      	str	r3, [sp, #8]
 8009df4:	1beb      	subs	r3, r5, r7
 8009df6:	3b15      	subs	r3, #21
 8009df8:	f023 0303 	bic.w	r3, r3, #3
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	3715      	adds	r7, #21
 8009e00:	42bd      	cmp	r5, r7
 8009e02:	bf38      	it	cc
 8009e04:	2304      	movcc	r3, #4
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	9b02      	ldr	r3, [sp, #8]
 8009e0a:	9103      	str	r1, [sp, #12]
 8009e0c:	428b      	cmp	r3, r1
 8009e0e:	d80c      	bhi.n	8009e2a <__multiply+0x9a>
 8009e10:	2e00      	cmp	r6, #0
 8009e12:	dd03      	ble.n	8009e1c <__multiply+0x8c>
 8009e14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d055      	beq.n	8009ec8 <__multiply+0x138>
 8009e1c:	6106      	str	r6, [r0, #16]
 8009e1e:	b005      	add	sp, #20
 8009e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e24:	f843 2b04 	str.w	r2, [r3], #4
 8009e28:	e7d9      	b.n	8009dde <__multiply+0x4e>
 8009e2a:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e2e:	f1ba 0f00 	cmp.w	sl, #0
 8009e32:	d01f      	beq.n	8009e74 <__multiply+0xe4>
 8009e34:	46c4      	mov	ip, r8
 8009e36:	46a1      	mov	r9, r4
 8009e38:	2700      	movs	r7, #0
 8009e3a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e3e:	f8d9 3000 	ldr.w	r3, [r9]
 8009e42:	fa1f fb82 	uxth.w	fp, r2
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	fb0a 330b 	mla	r3, sl, fp, r3
 8009e4c:	443b      	add	r3, r7
 8009e4e:	f8d9 7000 	ldr.w	r7, [r9]
 8009e52:	0c12      	lsrs	r2, r2, #16
 8009e54:	0c3f      	lsrs	r7, r7, #16
 8009e56:	fb0a 7202 	mla	r2, sl, r2, r7
 8009e5a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e64:	4565      	cmp	r5, ip
 8009e66:	f849 3b04 	str.w	r3, [r9], #4
 8009e6a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009e6e:	d8e4      	bhi.n	8009e3a <__multiply+0xaa>
 8009e70:	9b01      	ldr	r3, [sp, #4]
 8009e72:	50e7      	str	r7, [r4, r3]
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009e7a:	3104      	adds	r1, #4
 8009e7c:	f1b9 0f00 	cmp.w	r9, #0
 8009e80:	d020      	beq.n	8009ec4 <__multiply+0x134>
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	4647      	mov	r7, r8
 8009e86:	46a4      	mov	ip, r4
 8009e88:	f04f 0a00 	mov.w	sl, #0
 8009e8c:	f8b7 b000 	ldrh.w	fp, [r7]
 8009e90:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009e94:	fb09 220b 	mla	r2, r9, fp, r2
 8009e98:	4452      	add	r2, sl
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ea0:	f84c 3b04 	str.w	r3, [ip], #4
 8009ea4:	f857 3b04 	ldr.w	r3, [r7], #4
 8009ea8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009eac:	f8bc 3000 	ldrh.w	r3, [ip]
 8009eb0:	fb09 330a 	mla	r3, r9, sl, r3
 8009eb4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009eb8:	42bd      	cmp	r5, r7
 8009eba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ebe:	d8e5      	bhi.n	8009e8c <__multiply+0xfc>
 8009ec0:	9a01      	ldr	r2, [sp, #4]
 8009ec2:	50a3      	str	r3, [r4, r2]
 8009ec4:	3404      	adds	r4, #4
 8009ec6:	e79f      	b.n	8009e08 <__multiply+0x78>
 8009ec8:	3e01      	subs	r6, #1
 8009eca:	e7a1      	b.n	8009e10 <__multiply+0x80>
 8009ecc:	0800b1f7 	.word	0x0800b1f7
 8009ed0:	0800b268 	.word	0x0800b268

08009ed4 <__pow5mult>:
 8009ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ed8:	4615      	mov	r5, r2
 8009eda:	f012 0203 	ands.w	r2, r2, #3
 8009ede:	4607      	mov	r7, r0
 8009ee0:	460e      	mov	r6, r1
 8009ee2:	d007      	beq.n	8009ef4 <__pow5mult+0x20>
 8009ee4:	4c25      	ldr	r4, [pc, #148]	@ (8009f7c <__pow5mult+0xa8>)
 8009ee6:	3a01      	subs	r2, #1
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009eee:	f7ff fe5d 	bl	8009bac <__multadd>
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	10ad      	asrs	r5, r5, #2
 8009ef6:	d03d      	beq.n	8009f74 <__pow5mult+0xa0>
 8009ef8:	69fc      	ldr	r4, [r7, #28]
 8009efa:	b97c      	cbnz	r4, 8009f1c <__pow5mult+0x48>
 8009efc:	2010      	movs	r0, #16
 8009efe:	f7ff fd2b 	bl	8009958 <malloc>
 8009f02:	4602      	mov	r2, r0
 8009f04:	61f8      	str	r0, [r7, #28]
 8009f06:	b928      	cbnz	r0, 8009f14 <__pow5mult+0x40>
 8009f08:	4b1d      	ldr	r3, [pc, #116]	@ (8009f80 <__pow5mult+0xac>)
 8009f0a:	481e      	ldr	r0, [pc, #120]	@ (8009f84 <__pow5mult+0xb0>)
 8009f0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009f10:	f000 fd4a 	bl	800a9a8 <__assert_func>
 8009f14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f18:	6004      	str	r4, [r0, #0]
 8009f1a:	60c4      	str	r4, [r0, #12]
 8009f1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009f20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f24:	b94c      	cbnz	r4, 8009f3a <__pow5mult+0x66>
 8009f26:	f240 2171 	movw	r1, #625	@ 0x271
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	f7ff ff1a 	bl	8009d64 <__i2b>
 8009f30:	2300      	movs	r3, #0
 8009f32:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f36:	4604      	mov	r4, r0
 8009f38:	6003      	str	r3, [r0, #0]
 8009f3a:	f04f 0900 	mov.w	r9, #0
 8009f3e:	07eb      	lsls	r3, r5, #31
 8009f40:	d50a      	bpl.n	8009f58 <__pow5mult+0x84>
 8009f42:	4631      	mov	r1, r6
 8009f44:	4622      	mov	r2, r4
 8009f46:	4638      	mov	r0, r7
 8009f48:	f7ff ff22 	bl	8009d90 <__multiply>
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	4680      	mov	r8, r0
 8009f50:	4638      	mov	r0, r7
 8009f52:	f7ff fe09 	bl	8009b68 <_Bfree>
 8009f56:	4646      	mov	r6, r8
 8009f58:	106d      	asrs	r5, r5, #1
 8009f5a:	d00b      	beq.n	8009f74 <__pow5mult+0xa0>
 8009f5c:	6820      	ldr	r0, [r4, #0]
 8009f5e:	b938      	cbnz	r0, 8009f70 <__pow5mult+0x9c>
 8009f60:	4622      	mov	r2, r4
 8009f62:	4621      	mov	r1, r4
 8009f64:	4638      	mov	r0, r7
 8009f66:	f7ff ff13 	bl	8009d90 <__multiply>
 8009f6a:	6020      	str	r0, [r4, #0]
 8009f6c:	f8c0 9000 	str.w	r9, [r0]
 8009f70:	4604      	mov	r4, r0
 8009f72:	e7e4      	b.n	8009f3e <__pow5mult+0x6a>
 8009f74:	4630      	mov	r0, r6
 8009f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f7a:	bf00      	nop
 8009f7c:	0800b360 	.word	0x0800b360
 8009f80:	0800b188 	.word	0x0800b188
 8009f84:	0800b268 	.word	0x0800b268

08009f88 <__lshift>:
 8009f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	6849      	ldr	r1, [r1, #4]
 8009f90:	6923      	ldr	r3, [r4, #16]
 8009f92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f96:	68a3      	ldr	r3, [r4, #8]
 8009f98:	4607      	mov	r7, r0
 8009f9a:	4691      	mov	r9, r2
 8009f9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fa0:	f108 0601 	add.w	r6, r8, #1
 8009fa4:	42b3      	cmp	r3, r6
 8009fa6:	db0b      	blt.n	8009fc0 <__lshift+0x38>
 8009fa8:	4638      	mov	r0, r7
 8009faa:	f7ff fd9d 	bl	8009ae8 <_Balloc>
 8009fae:	4605      	mov	r5, r0
 8009fb0:	b948      	cbnz	r0, 8009fc6 <__lshift+0x3e>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	4b28      	ldr	r3, [pc, #160]	@ (800a058 <__lshift+0xd0>)
 8009fb6:	4829      	ldr	r0, [pc, #164]	@ (800a05c <__lshift+0xd4>)
 8009fb8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009fbc:	f000 fcf4 	bl	800a9a8 <__assert_func>
 8009fc0:	3101      	adds	r1, #1
 8009fc2:	005b      	lsls	r3, r3, #1
 8009fc4:	e7ee      	b.n	8009fa4 <__lshift+0x1c>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f100 0114 	add.w	r1, r0, #20
 8009fcc:	f100 0210 	add.w	r2, r0, #16
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	4553      	cmp	r3, sl
 8009fd4:	db33      	blt.n	800a03e <__lshift+0xb6>
 8009fd6:	6920      	ldr	r0, [r4, #16]
 8009fd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fdc:	f104 0314 	add.w	r3, r4, #20
 8009fe0:	f019 091f 	ands.w	r9, r9, #31
 8009fe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fe8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fec:	d02b      	beq.n	800a046 <__lshift+0xbe>
 8009fee:	f1c9 0e20 	rsb	lr, r9, #32
 8009ff2:	468a      	mov	sl, r1
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	6818      	ldr	r0, [r3, #0]
 8009ff8:	fa00 f009 	lsl.w	r0, r0, r9
 8009ffc:	4310      	orrs	r0, r2
 8009ffe:	f84a 0b04 	str.w	r0, [sl], #4
 800a002:	f853 2b04 	ldr.w	r2, [r3], #4
 800a006:	459c      	cmp	ip, r3
 800a008:	fa22 f20e 	lsr.w	r2, r2, lr
 800a00c:	d8f3      	bhi.n	8009ff6 <__lshift+0x6e>
 800a00e:	ebac 0304 	sub.w	r3, ip, r4
 800a012:	3b15      	subs	r3, #21
 800a014:	f023 0303 	bic.w	r3, r3, #3
 800a018:	3304      	adds	r3, #4
 800a01a:	f104 0015 	add.w	r0, r4, #21
 800a01e:	4560      	cmp	r0, ip
 800a020:	bf88      	it	hi
 800a022:	2304      	movhi	r3, #4
 800a024:	50ca      	str	r2, [r1, r3]
 800a026:	b10a      	cbz	r2, 800a02c <__lshift+0xa4>
 800a028:	f108 0602 	add.w	r6, r8, #2
 800a02c:	3e01      	subs	r6, #1
 800a02e:	4638      	mov	r0, r7
 800a030:	612e      	str	r6, [r5, #16]
 800a032:	4621      	mov	r1, r4
 800a034:	f7ff fd98 	bl	8009b68 <_Bfree>
 800a038:	4628      	mov	r0, r5
 800a03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a03e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a042:	3301      	adds	r3, #1
 800a044:	e7c5      	b.n	8009fd2 <__lshift+0x4a>
 800a046:	3904      	subs	r1, #4
 800a048:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a050:	459c      	cmp	ip, r3
 800a052:	d8f9      	bhi.n	800a048 <__lshift+0xc0>
 800a054:	e7ea      	b.n	800a02c <__lshift+0xa4>
 800a056:	bf00      	nop
 800a058:	0800b1f7 	.word	0x0800b1f7
 800a05c:	0800b268 	.word	0x0800b268

0800a060 <__mcmp>:
 800a060:	690a      	ldr	r2, [r1, #16]
 800a062:	4603      	mov	r3, r0
 800a064:	6900      	ldr	r0, [r0, #16]
 800a066:	1a80      	subs	r0, r0, r2
 800a068:	b530      	push	{r4, r5, lr}
 800a06a:	d10e      	bne.n	800a08a <__mcmp+0x2a>
 800a06c:	3314      	adds	r3, #20
 800a06e:	3114      	adds	r1, #20
 800a070:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a074:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a078:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a07c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a080:	4295      	cmp	r5, r2
 800a082:	d003      	beq.n	800a08c <__mcmp+0x2c>
 800a084:	d205      	bcs.n	800a092 <__mcmp+0x32>
 800a086:	f04f 30ff 	mov.w	r0, #4294967295
 800a08a:	bd30      	pop	{r4, r5, pc}
 800a08c:	42a3      	cmp	r3, r4
 800a08e:	d3f3      	bcc.n	800a078 <__mcmp+0x18>
 800a090:	e7fb      	b.n	800a08a <__mcmp+0x2a>
 800a092:	2001      	movs	r0, #1
 800a094:	e7f9      	b.n	800a08a <__mcmp+0x2a>
	...

0800a098 <__mdiff>:
 800a098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09c:	4689      	mov	r9, r1
 800a09e:	4606      	mov	r6, r0
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	4648      	mov	r0, r9
 800a0a4:	4614      	mov	r4, r2
 800a0a6:	f7ff ffdb 	bl	800a060 <__mcmp>
 800a0aa:	1e05      	subs	r5, r0, #0
 800a0ac:	d112      	bne.n	800a0d4 <__mdiff+0x3c>
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	f7ff fd19 	bl	8009ae8 <_Balloc>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	b928      	cbnz	r0, 800a0c6 <__mdiff+0x2e>
 800a0ba:	4b3f      	ldr	r3, [pc, #252]	@ (800a1b8 <__mdiff+0x120>)
 800a0bc:	f240 2137 	movw	r1, #567	@ 0x237
 800a0c0:	483e      	ldr	r0, [pc, #248]	@ (800a1bc <__mdiff+0x124>)
 800a0c2:	f000 fc71 	bl	800a9a8 <__assert_func>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	b003      	add	sp, #12
 800a0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d4:	bfbc      	itt	lt
 800a0d6:	464b      	movlt	r3, r9
 800a0d8:	46a1      	movlt	r9, r4
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a0e0:	bfba      	itte	lt
 800a0e2:	461c      	movlt	r4, r3
 800a0e4:	2501      	movlt	r5, #1
 800a0e6:	2500      	movge	r5, #0
 800a0e8:	f7ff fcfe 	bl	8009ae8 <_Balloc>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	b918      	cbnz	r0, 800a0f8 <__mdiff+0x60>
 800a0f0:	4b31      	ldr	r3, [pc, #196]	@ (800a1b8 <__mdiff+0x120>)
 800a0f2:	f240 2145 	movw	r1, #581	@ 0x245
 800a0f6:	e7e3      	b.n	800a0c0 <__mdiff+0x28>
 800a0f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a0fc:	6926      	ldr	r6, [r4, #16]
 800a0fe:	60c5      	str	r5, [r0, #12]
 800a100:	f109 0310 	add.w	r3, r9, #16
 800a104:	f109 0514 	add.w	r5, r9, #20
 800a108:	f104 0e14 	add.w	lr, r4, #20
 800a10c:	f100 0b14 	add.w	fp, r0, #20
 800a110:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a114:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a118:	9301      	str	r3, [sp, #4]
 800a11a:	46d9      	mov	r9, fp
 800a11c:	f04f 0c00 	mov.w	ip, #0
 800a120:	9b01      	ldr	r3, [sp, #4]
 800a122:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a126:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a12a:	9301      	str	r3, [sp, #4]
 800a12c:	fa1f f38a 	uxth.w	r3, sl
 800a130:	4619      	mov	r1, r3
 800a132:	b283      	uxth	r3, r0
 800a134:	1acb      	subs	r3, r1, r3
 800a136:	0c00      	lsrs	r0, r0, #16
 800a138:	4463      	add	r3, ip
 800a13a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a13e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a142:	b29b      	uxth	r3, r3
 800a144:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a148:	4576      	cmp	r6, lr
 800a14a:	f849 3b04 	str.w	r3, [r9], #4
 800a14e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a152:	d8e5      	bhi.n	800a120 <__mdiff+0x88>
 800a154:	1b33      	subs	r3, r6, r4
 800a156:	3b15      	subs	r3, #21
 800a158:	f023 0303 	bic.w	r3, r3, #3
 800a15c:	3415      	adds	r4, #21
 800a15e:	3304      	adds	r3, #4
 800a160:	42a6      	cmp	r6, r4
 800a162:	bf38      	it	cc
 800a164:	2304      	movcc	r3, #4
 800a166:	441d      	add	r5, r3
 800a168:	445b      	add	r3, fp
 800a16a:	461e      	mov	r6, r3
 800a16c:	462c      	mov	r4, r5
 800a16e:	4544      	cmp	r4, r8
 800a170:	d30e      	bcc.n	800a190 <__mdiff+0xf8>
 800a172:	f108 0103 	add.w	r1, r8, #3
 800a176:	1b49      	subs	r1, r1, r5
 800a178:	f021 0103 	bic.w	r1, r1, #3
 800a17c:	3d03      	subs	r5, #3
 800a17e:	45a8      	cmp	r8, r5
 800a180:	bf38      	it	cc
 800a182:	2100      	movcc	r1, #0
 800a184:	440b      	add	r3, r1
 800a186:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a18a:	b191      	cbz	r1, 800a1b2 <__mdiff+0x11a>
 800a18c:	6117      	str	r7, [r2, #16]
 800a18e:	e79d      	b.n	800a0cc <__mdiff+0x34>
 800a190:	f854 1b04 	ldr.w	r1, [r4], #4
 800a194:	46e6      	mov	lr, ip
 800a196:	0c08      	lsrs	r0, r1, #16
 800a198:	fa1c fc81 	uxtah	ip, ip, r1
 800a19c:	4471      	add	r1, lr
 800a19e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a1a2:	b289      	uxth	r1, r1
 800a1a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a1a8:	f846 1b04 	str.w	r1, [r6], #4
 800a1ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1b0:	e7dd      	b.n	800a16e <__mdiff+0xd6>
 800a1b2:	3f01      	subs	r7, #1
 800a1b4:	e7e7      	b.n	800a186 <__mdiff+0xee>
 800a1b6:	bf00      	nop
 800a1b8:	0800b1f7 	.word	0x0800b1f7
 800a1bc:	0800b268 	.word	0x0800b268

0800a1c0 <__ulp>:
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	ed8d 0b00 	vstr	d0, [sp]
 800a1c6:	9a01      	ldr	r2, [sp, #4]
 800a1c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a208 <__ulp+0x48>)
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	dc08      	bgt.n	800a1e6 <__ulp+0x26>
 800a1d4:	425b      	negs	r3, r3
 800a1d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a1da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a1de:	da04      	bge.n	800a1ea <__ulp+0x2a>
 800a1e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a1e4:	4113      	asrs	r3, r2
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	e008      	b.n	800a1fc <__ulp+0x3c>
 800a1ea:	f1a2 0314 	sub.w	r3, r2, #20
 800a1ee:	2b1e      	cmp	r3, #30
 800a1f0:	bfda      	itte	le
 800a1f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a1f6:	40da      	lsrle	r2, r3
 800a1f8:	2201      	movgt	r2, #1
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4610      	mov	r0, r2
 800a200:	ec41 0b10 	vmov	d0, r0, r1
 800a204:	b002      	add	sp, #8
 800a206:	4770      	bx	lr
 800a208:	7ff00000 	.word	0x7ff00000

0800a20c <__b2d>:
 800a20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a210:	6906      	ldr	r6, [r0, #16]
 800a212:	f100 0814 	add.w	r8, r0, #20
 800a216:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a21a:	1f37      	subs	r7, r6, #4
 800a21c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a220:	4610      	mov	r0, r2
 800a222:	f7ff fd53 	bl	8009ccc <__hi0bits>
 800a226:	f1c0 0320 	rsb	r3, r0, #32
 800a22a:	280a      	cmp	r0, #10
 800a22c:	600b      	str	r3, [r1, #0]
 800a22e:	491b      	ldr	r1, [pc, #108]	@ (800a29c <__b2d+0x90>)
 800a230:	dc15      	bgt.n	800a25e <__b2d+0x52>
 800a232:	f1c0 0c0b 	rsb	ip, r0, #11
 800a236:	fa22 f30c 	lsr.w	r3, r2, ip
 800a23a:	45b8      	cmp	r8, r7
 800a23c:	ea43 0501 	orr.w	r5, r3, r1
 800a240:	bf34      	ite	cc
 800a242:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a246:	2300      	movcs	r3, #0
 800a248:	3015      	adds	r0, #21
 800a24a:	fa02 f000 	lsl.w	r0, r2, r0
 800a24e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a252:	4303      	orrs	r3, r0
 800a254:	461c      	mov	r4, r3
 800a256:	ec45 4b10 	vmov	d0, r4, r5
 800a25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25e:	45b8      	cmp	r8, r7
 800a260:	bf3a      	itte	cc
 800a262:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a266:	f1a6 0708 	subcc.w	r7, r6, #8
 800a26a:	2300      	movcs	r3, #0
 800a26c:	380b      	subs	r0, #11
 800a26e:	d012      	beq.n	800a296 <__b2d+0x8a>
 800a270:	f1c0 0120 	rsb	r1, r0, #32
 800a274:	fa23 f401 	lsr.w	r4, r3, r1
 800a278:	4082      	lsls	r2, r0
 800a27a:	4322      	orrs	r2, r4
 800a27c:	4547      	cmp	r7, r8
 800a27e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a282:	bf8c      	ite	hi
 800a284:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a288:	2200      	movls	r2, #0
 800a28a:	4083      	lsls	r3, r0
 800a28c:	40ca      	lsrs	r2, r1
 800a28e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a292:	4313      	orrs	r3, r2
 800a294:	e7de      	b.n	800a254 <__b2d+0x48>
 800a296:	ea42 0501 	orr.w	r5, r2, r1
 800a29a:	e7db      	b.n	800a254 <__b2d+0x48>
 800a29c:	3ff00000 	.word	0x3ff00000

0800a2a0 <__d2b>:
 800a2a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2a4:	460f      	mov	r7, r1
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	ec59 8b10 	vmov	r8, r9, d0
 800a2ac:	4616      	mov	r6, r2
 800a2ae:	f7ff fc1b 	bl	8009ae8 <_Balloc>
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	b930      	cbnz	r0, 800a2c4 <__d2b+0x24>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	4b23      	ldr	r3, [pc, #140]	@ (800a348 <__d2b+0xa8>)
 800a2ba:	4824      	ldr	r0, [pc, #144]	@ (800a34c <__d2b+0xac>)
 800a2bc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a2c0:	f000 fb72 	bl	800a9a8 <__assert_func>
 800a2c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a2c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2cc:	b10d      	cbz	r5, 800a2d2 <__d2b+0x32>
 800a2ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a2d2:	9301      	str	r3, [sp, #4]
 800a2d4:	f1b8 0300 	subs.w	r3, r8, #0
 800a2d8:	d023      	beq.n	800a322 <__d2b+0x82>
 800a2da:	4668      	mov	r0, sp
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	f7ff fd14 	bl	8009d0a <__lo0bits>
 800a2e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a2e6:	b1d0      	cbz	r0, 800a31e <__d2b+0x7e>
 800a2e8:	f1c0 0320 	rsb	r3, r0, #32
 800a2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f0:	430b      	orrs	r3, r1
 800a2f2:	40c2      	lsrs	r2, r0
 800a2f4:	6163      	str	r3, [r4, #20]
 800a2f6:	9201      	str	r2, [sp, #4]
 800a2f8:	9b01      	ldr	r3, [sp, #4]
 800a2fa:	61a3      	str	r3, [r4, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	bf0c      	ite	eq
 800a300:	2201      	moveq	r2, #1
 800a302:	2202      	movne	r2, #2
 800a304:	6122      	str	r2, [r4, #16]
 800a306:	b1a5      	cbz	r5, 800a332 <__d2b+0x92>
 800a308:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a30c:	4405      	add	r5, r0
 800a30e:	603d      	str	r5, [r7, #0]
 800a310:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a314:	6030      	str	r0, [r6, #0]
 800a316:	4620      	mov	r0, r4
 800a318:	b003      	add	sp, #12
 800a31a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a31e:	6161      	str	r1, [r4, #20]
 800a320:	e7ea      	b.n	800a2f8 <__d2b+0x58>
 800a322:	a801      	add	r0, sp, #4
 800a324:	f7ff fcf1 	bl	8009d0a <__lo0bits>
 800a328:	9b01      	ldr	r3, [sp, #4]
 800a32a:	6163      	str	r3, [r4, #20]
 800a32c:	3020      	adds	r0, #32
 800a32e:	2201      	movs	r2, #1
 800a330:	e7e8      	b.n	800a304 <__d2b+0x64>
 800a332:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a336:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a33a:	6038      	str	r0, [r7, #0]
 800a33c:	6918      	ldr	r0, [r3, #16]
 800a33e:	f7ff fcc5 	bl	8009ccc <__hi0bits>
 800a342:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a346:	e7e5      	b.n	800a314 <__d2b+0x74>
 800a348:	0800b1f7 	.word	0x0800b1f7
 800a34c:	0800b268 	.word	0x0800b268

0800a350 <__ratio>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	b085      	sub	sp, #20
 800a356:	e9cd 1000 	strd	r1, r0, [sp]
 800a35a:	a902      	add	r1, sp, #8
 800a35c:	f7ff ff56 	bl	800a20c <__b2d>
 800a360:	9800      	ldr	r0, [sp, #0]
 800a362:	a903      	add	r1, sp, #12
 800a364:	ec55 4b10 	vmov	r4, r5, d0
 800a368:	f7ff ff50 	bl	800a20c <__b2d>
 800a36c:	9b01      	ldr	r3, [sp, #4]
 800a36e:	6919      	ldr	r1, [r3, #16]
 800a370:	9b00      	ldr	r3, [sp, #0]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	1ac9      	subs	r1, r1, r3
 800a376:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a37a:	1a9b      	subs	r3, r3, r2
 800a37c:	ec5b ab10 	vmov	sl, fp, d0
 800a380:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a384:	2b00      	cmp	r3, #0
 800a386:	bfce      	itee	gt
 800a388:	462a      	movgt	r2, r5
 800a38a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a38e:	465a      	movle	r2, fp
 800a390:	462f      	mov	r7, r5
 800a392:	46d9      	mov	r9, fp
 800a394:	bfcc      	ite	gt
 800a396:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a39a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a39e:	464b      	mov	r3, r9
 800a3a0:	4652      	mov	r2, sl
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	f7f6 fa51 	bl	800084c <__aeabi_ddiv>
 800a3aa:	ec41 0b10 	vmov	d0, r0, r1
 800a3ae:	b005      	add	sp, #20
 800a3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3b4 <__copybits>:
 800a3b4:	3901      	subs	r1, #1
 800a3b6:	b570      	push	{r4, r5, r6, lr}
 800a3b8:	1149      	asrs	r1, r1, #5
 800a3ba:	6914      	ldr	r4, [r2, #16]
 800a3bc:	3101      	adds	r1, #1
 800a3be:	f102 0314 	add.w	r3, r2, #20
 800a3c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a3c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a3ca:	1f05      	subs	r5, r0, #4
 800a3cc:	42a3      	cmp	r3, r4
 800a3ce:	d30c      	bcc.n	800a3ea <__copybits+0x36>
 800a3d0:	1aa3      	subs	r3, r4, r2
 800a3d2:	3b11      	subs	r3, #17
 800a3d4:	f023 0303 	bic.w	r3, r3, #3
 800a3d8:	3211      	adds	r2, #17
 800a3da:	42a2      	cmp	r2, r4
 800a3dc:	bf88      	it	hi
 800a3de:	2300      	movhi	r3, #0
 800a3e0:	4418      	add	r0, r3
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	4288      	cmp	r0, r1
 800a3e6:	d305      	bcc.n	800a3f4 <__copybits+0x40>
 800a3e8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ea:	f853 6b04 	ldr.w	r6, [r3], #4
 800a3ee:	f845 6f04 	str.w	r6, [r5, #4]!
 800a3f2:	e7eb      	b.n	800a3cc <__copybits+0x18>
 800a3f4:	f840 3b04 	str.w	r3, [r0], #4
 800a3f8:	e7f4      	b.n	800a3e4 <__copybits+0x30>

0800a3fa <__any_on>:
 800a3fa:	f100 0214 	add.w	r2, r0, #20
 800a3fe:	6900      	ldr	r0, [r0, #16]
 800a400:	114b      	asrs	r3, r1, #5
 800a402:	4298      	cmp	r0, r3
 800a404:	b510      	push	{r4, lr}
 800a406:	db11      	blt.n	800a42c <__any_on+0x32>
 800a408:	dd0a      	ble.n	800a420 <__any_on+0x26>
 800a40a:	f011 011f 	ands.w	r1, r1, #31
 800a40e:	d007      	beq.n	800a420 <__any_on+0x26>
 800a410:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a414:	fa24 f001 	lsr.w	r0, r4, r1
 800a418:	fa00 f101 	lsl.w	r1, r0, r1
 800a41c:	428c      	cmp	r4, r1
 800a41e:	d10b      	bne.n	800a438 <__any_on+0x3e>
 800a420:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a424:	4293      	cmp	r3, r2
 800a426:	d803      	bhi.n	800a430 <__any_on+0x36>
 800a428:	2000      	movs	r0, #0
 800a42a:	bd10      	pop	{r4, pc}
 800a42c:	4603      	mov	r3, r0
 800a42e:	e7f7      	b.n	800a420 <__any_on+0x26>
 800a430:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a434:	2900      	cmp	r1, #0
 800a436:	d0f5      	beq.n	800a424 <__any_on+0x2a>
 800a438:	2001      	movs	r0, #1
 800a43a:	e7f6      	b.n	800a42a <__any_on+0x30>

0800a43c <_strtol_l.isra.0>:
 800a43c:	2b24      	cmp	r3, #36	@ 0x24
 800a43e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a442:	4686      	mov	lr, r0
 800a444:	4690      	mov	r8, r2
 800a446:	d801      	bhi.n	800a44c <_strtol_l.isra.0+0x10>
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d106      	bne.n	800a45a <_strtol_l.isra.0+0x1e>
 800a44c:	f7fe f85c 	bl	8008508 <__errno>
 800a450:	2316      	movs	r3, #22
 800a452:	6003      	str	r3, [r0, #0]
 800a454:	2000      	movs	r0, #0
 800a456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45a:	4834      	ldr	r0, [pc, #208]	@ (800a52c <_strtol_l.isra.0+0xf0>)
 800a45c:	460d      	mov	r5, r1
 800a45e:	462a      	mov	r2, r5
 800a460:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a464:	5d06      	ldrb	r6, [r0, r4]
 800a466:	f016 0608 	ands.w	r6, r6, #8
 800a46a:	d1f8      	bne.n	800a45e <_strtol_l.isra.0+0x22>
 800a46c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a46e:	d110      	bne.n	800a492 <_strtol_l.isra.0+0x56>
 800a470:	782c      	ldrb	r4, [r5, #0]
 800a472:	2601      	movs	r6, #1
 800a474:	1c95      	adds	r5, r2, #2
 800a476:	f033 0210 	bics.w	r2, r3, #16
 800a47a:	d115      	bne.n	800a4a8 <_strtol_l.isra.0+0x6c>
 800a47c:	2c30      	cmp	r4, #48	@ 0x30
 800a47e:	d10d      	bne.n	800a49c <_strtol_l.isra.0+0x60>
 800a480:	782a      	ldrb	r2, [r5, #0]
 800a482:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a486:	2a58      	cmp	r2, #88	@ 0x58
 800a488:	d108      	bne.n	800a49c <_strtol_l.isra.0+0x60>
 800a48a:	786c      	ldrb	r4, [r5, #1]
 800a48c:	3502      	adds	r5, #2
 800a48e:	2310      	movs	r3, #16
 800a490:	e00a      	b.n	800a4a8 <_strtol_l.isra.0+0x6c>
 800a492:	2c2b      	cmp	r4, #43	@ 0x2b
 800a494:	bf04      	itt	eq
 800a496:	782c      	ldrbeq	r4, [r5, #0]
 800a498:	1c95      	addeq	r5, r2, #2
 800a49a:	e7ec      	b.n	800a476 <_strtol_l.isra.0+0x3a>
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1f6      	bne.n	800a48e <_strtol_l.isra.0+0x52>
 800a4a0:	2c30      	cmp	r4, #48	@ 0x30
 800a4a2:	bf14      	ite	ne
 800a4a4:	230a      	movne	r3, #10
 800a4a6:	2308      	moveq	r3, #8
 800a4a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a4ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	fbbc f9f3 	udiv	r9, ip, r3
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a4bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a4c0:	2f09      	cmp	r7, #9
 800a4c2:	d80f      	bhi.n	800a4e4 <_strtol_l.isra.0+0xa8>
 800a4c4:	463c      	mov	r4, r7
 800a4c6:	42a3      	cmp	r3, r4
 800a4c8:	dd1b      	ble.n	800a502 <_strtol_l.isra.0+0xc6>
 800a4ca:	1c57      	adds	r7, r2, #1
 800a4cc:	d007      	beq.n	800a4de <_strtol_l.isra.0+0xa2>
 800a4ce:	4581      	cmp	r9, r0
 800a4d0:	d314      	bcc.n	800a4fc <_strtol_l.isra.0+0xc0>
 800a4d2:	d101      	bne.n	800a4d8 <_strtol_l.isra.0+0x9c>
 800a4d4:	45a2      	cmp	sl, r4
 800a4d6:	db11      	blt.n	800a4fc <_strtol_l.isra.0+0xc0>
 800a4d8:	fb00 4003 	mla	r0, r0, r3, r4
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4e2:	e7eb      	b.n	800a4bc <_strtol_l.isra.0+0x80>
 800a4e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a4e8:	2f19      	cmp	r7, #25
 800a4ea:	d801      	bhi.n	800a4f0 <_strtol_l.isra.0+0xb4>
 800a4ec:	3c37      	subs	r4, #55	@ 0x37
 800a4ee:	e7ea      	b.n	800a4c6 <_strtol_l.isra.0+0x8a>
 800a4f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a4f4:	2f19      	cmp	r7, #25
 800a4f6:	d804      	bhi.n	800a502 <_strtol_l.isra.0+0xc6>
 800a4f8:	3c57      	subs	r4, #87	@ 0x57
 800a4fa:	e7e4      	b.n	800a4c6 <_strtol_l.isra.0+0x8a>
 800a4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a500:	e7ed      	b.n	800a4de <_strtol_l.isra.0+0xa2>
 800a502:	1c53      	adds	r3, r2, #1
 800a504:	d108      	bne.n	800a518 <_strtol_l.isra.0+0xdc>
 800a506:	2322      	movs	r3, #34	@ 0x22
 800a508:	f8ce 3000 	str.w	r3, [lr]
 800a50c:	4660      	mov	r0, ip
 800a50e:	f1b8 0f00 	cmp.w	r8, #0
 800a512:	d0a0      	beq.n	800a456 <_strtol_l.isra.0+0x1a>
 800a514:	1e69      	subs	r1, r5, #1
 800a516:	e006      	b.n	800a526 <_strtol_l.isra.0+0xea>
 800a518:	b106      	cbz	r6, 800a51c <_strtol_l.isra.0+0xe0>
 800a51a:	4240      	negs	r0, r0
 800a51c:	f1b8 0f00 	cmp.w	r8, #0
 800a520:	d099      	beq.n	800a456 <_strtol_l.isra.0+0x1a>
 800a522:	2a00      	cmp	r2, #0
 800a524:	d1f6      	bne.n	800a514 <_strtol_l.isra.0+0xd8>
 800a526:	f8c8 1000 	str.w	r1, [r8]
 800a52a:	e794      	b.n	800a456 <_strtol_l.isra.0+0x1a>
 800a52c:	0800b461 	.word	0x0800b461

0800a530 <_strtol_r>:
 800a530:	f7ff bf84 	b.w	800a43c <_strtol_l.isra.0>

0800a534 <__ascii_wctomb>:
 800a534:	4603      	mov	r3, r0
 800a536:	4608      	mov	r0, r1
 800a538:	b141      	cbz	r1, 800a54c <__ascii_wctomb+0x18>
 800a53a:	2aff      	cmp	r2, #255	@ 0xff
 800a53c:	d904      	bls.n	800a548 <__ascii_wctomb+0x14>
 800a53e:	228a      	movs	r2, #138	@ 0x8a
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	f04f 30ff 	mov.w	r0, #4294967295
 800a546:	4770      	bx	lr
 800a548:	700a      	strb	r2, [r1, #0]
 800a54a:	2001      	movs	r0, #1
 800a54c:	4770      	bx	lr

0800a54e <__ssputs_r>:
 800a54e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a552:	688e      	ldr	r6, [r1, #8]
 800a554:	461f      	mov	r7, r3
 800a556:	42be      	cmp	r6, r7
 800a558:	680b      	ldr	r3, [r1, #0]
 800a55a:	4682      	mov	sl, r0
 800a55c:	460c      	mov	r4, r1
 800a55e:	4690      	mov	r8, r2
 800a560:	d82d      	bhi.n	800a5be <__ssputs_r+0x70>
 800a562:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a566:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a56a:	d026      	beq.n	800a5ba <__ssputs_r+0x6c>
 800a56c:	6965      	ldr	r5, [r4, #20]
 800a56e:	6909      	ldr	r1, [r1, #16]
 800a570:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a574:	eba3 0901 	sub.w	r9, r3, r1
 800a578:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a57c:	1c7b      	adds	r3, r7, #1
 800a57e:	444b      	add	r3, r9
 800a580:	106d      	asrs	r5, r5, #1
 800a582:	429d      	cmp	r5, r3
 800a584:	bf38      	it	cc
 800a586:	461d      	movcc	r5, r3
 800a588:	0553      	lsls	r3, r2, #21
 800a58a:	d527      	bpl.n	800a5dc <__ssputs_r+0x8e>
 800a58c:	4629      	mov	r1, r5
 800a58e:	f7ff fa0d 	bl	80099ac <_malloc_r>
 800a592:	4606      	mov	r6, r0
 800a594:	b360      	cbz	r0, 800a5f0 <__ssputs_r+0xa2>
 800a596:	6921      	ldr	r1, [r4, #16]
 800a598:	464a      	mov	r2, r9
 800a59a:	f7fd ffe2 	bl	8008562 <memcpy>
 800a59e:	89a3      	ldrh	r3, [r4, #12]
 800a5a0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a5a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5a8:	81a3      	strh	r3, [r4, #12]
 800a5aa:	6126      	str	r6, [r4, #16]
 800a5ac:	6165      	str	r5, [r4, #20]
 800a5ae:	444e      	add	r6, r9
 800a5b0:	eba5 0509 	sub.w	r5, r5, r9
 800a5b4:	6026      	str	r6, [r4, #0]
 800a5b6:	60a5      	str	r5, [r4, #8]
 800a5b8:	463e      	mov	r6, r7
 800a5ba:	42be      	cmp	r6, r7
 800a5bc:	d900      	bls.n	800a5c0 <__ssputs_r+0x72>
 800a5be:	463e      	mov	r6, r7
 800a5c0:	6820      	ldr	r0, [r4, #0]
 800a5c2:	4632      	mov	r2, r6
 800a5c4:	4641      	mov	r1, r8
 800a5c6:	f000 f9c5 	bl	800a954 <memmove>
 800a5ca:	68a3      	ldr	r3, [r4, #8]
 800a5cc:	1b9b      	subs	r3, r3, r6
 800a5ce:	60a3      	str	r3, [r4, #8]
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	4433      	add	r3, r6
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5dc:	462a      	mov	r2, r5
 800a5de:	f000 fa15 	bl	800aa0c <_realloc_r>
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d1e0      	bne.n	800a5aa <__ssputs_r+0x5c>
 800a5e8:	6921      	ldr	r1, [r4, #16]
 800a5ea:	4650      	mov	r0, sl
 800a5ec:	f7fe fe30 	bl	8009250 <_free_r>
 800a5f0:	230c      	movs	r3, #12
 800a5f2:	f8ca 3000 	str.w	r3, [sl]
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5fc:	81a3      	strh	r3, [r4, #12]
 800a5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a602:	e7e9      	b.n	800a5d8 <__ssputs_r+0x8a>

0800a604 <_svfiprintf_r>:
 800a604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a608:	4698      	mov	r8, r3
 800a60a:	898b      	ldrh	r3, [r1, #12]
 800a60c:	061b      	lsls	r3, r3, #24
 800a60e:	b09d      	sub	sp, #116	@ 0x74
 800a610:	4607      	mov	r7, r0
 800a612:	460d      	mov	r5, r1
 800a614:	4614      	mov	r4, r2
 800a616:	d510      	bpl.n	800a63a <_svfiprintf_r+0x36>
 800a618:	690b      	ldr	r3, [r1, #16]
 800a61a:	b973      	cbnz	r3, 800a63a <_svfiprintf_r+0x36>
 800a61c:	2140      	movs	r1, #64	@ 0x40
 800a61e:	f7ff f9c5 	bl	80099ac <_malloc_r>
 800a622:	6028      	str	r0, [r5, #0]
 800a624:	6128      	str	r0, [r5, #16]
 800a626:	b930      	cbnz	r0, 800a636 <_svfiprintf_r+0x32>
 800a628:	230c      	movs	r3, #12
 800a62a:	603b      	str	r3, [r7, #0]
 800a62c:	f04f 30ff 	mov.w	r0, #4294967295
 800a630:	b01d      	add	sp, #116	@ 0x74
 800a632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a636:	2340      	movs	r3, #64	@ 0x40
 800a638:	616b      	str	r3, [r5, #20]
 800a63a:	2300      	movs	r3, #0
 800a63c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a63e:	2320      	movs	r3, #32
 800a640:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a644:	f8cd 800c 	str.w	r8, [sp, #12]
 800a648:	2330      	movs	r3, #48	@ 0x30
 800a64a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a7e8 <_svfiprintf_r+0x1e4>
 800a64e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a652:	f04f 0901 	mov.w	r9, #1
 800a656:	4623      	mov	r3, r4
 800a658:	469a      	mov	sl, r3
 800a65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a65e:	b10a      	cbz	r2, 800a664 <_svfiprintf_r+0x60>
 800a660:	2a25      	cmp	r2, #37	@ 0x25
 800a662:	d1f9      	bne.n	800a658 <_svfiprintf_r+0x54>
 800a664:	ebba 0b04 	subs.w	fp, sl, r4
 800a668:	d00b      	beq.n	800a682 <_svfiprintf_r+0x7e>
 800a66a:	465b      	mov	r3, fp
 800a66c:	4622      	mov	r2, r4
 800a66e:	4629      	mov	r1, r5
 800a670:	4638      	mov	r0, r7
 800a672:	f7ff ff6c 	bl	800a54e <__ssputs_r>
 800a676:	3001      	adds	r0, #1
 800a678:	f000 80a7 	beq.w	800a7ca <_svfiprintf_r+0x1c6>
 800a67c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a67e:	445a      	add	r2, fp
 800a680:	9209      	str	r2, [sp, #36]	@ 0x24
 800a682:	f89a 3000 	ldrb.w	r3, [sl]
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 809f 	beq.w	800a7ca <_svfiprintf_r+0x1c6>
 800a68c:	2300      	movs	r3, #0
 800a68e:	f04f 32ff 	mov.w	r2, #4294967295
 800a692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a696:	f10a 0a01 	add.w	sl, sl, #1
 800a69a:	9304      	str	r3, [sp, #16]
 800a69c:	9307      	str	r3, [sp, #28]
 800a69e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6a4:	4654      	mov	r4, sl
 800a6a6:	2205      	movs	r2, #5
 800a6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ac:	484e      	ldr	r0, [pc, #312]	@ (800a7e8 <_svfiprintf_r+0x1e4>)
 800a6ae:	f7f5 fd8f 	bl	80001d0 <memchr>
 800a6b2:	9a04      	ldr	r2, [sp, #16]
 800a6b4:	b9d8      	cbnz	r0, 800a6ee <_svfiprintf_r+0xea>
 800a6b6:	06d0      	lsls	r0, r2, #27
 800a6b8:	bf44      	itt	mi
 800a6ba:	2320      	movmi	r3, #32
 800a6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6c0:	0711      	lsls	r1, r2, #28
 800a6c2:	bf44      	itt	mi
 800a6c4:	232b      	movmi	r3, #43	@ 0x2b
 800a6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6d0:	d015      	beq.n	800a6fe <_svfiprintf_r+0xfa>
 800a6d2:	9a07      	ldr	r2, [sp, #28]
 800a6d4:	4654      	mov	r4, sl
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	f04f 0c0a 	mov.w	ip, #10
 800a6dc:	4621      	mov	r1, r4
 800a6de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6e2:	3b30      	subs	r3, #48	@ 0x30
 800a6e4:	2b09      	cmp	r3, #9
 800a6e6:	d94b      	bls.n	800a780 <_svfiprintf_r+0x17c>
 800a6e8:	b1b0      	cbz	r0, 800a718 <_svfiprintf_r+0x114>
 800a6ea:	9207      	str	r2, [sp, #28]
 800a6ec:	e014      	b.n	800a718 <_svfiprintf_r+0x114>
 800a6ee:	eba0 0308 	sub.w	r3, r0, r8
 800a6f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	9304      	str	r3, [sp, #16]
 800a6fa:	46a2      	mov	sl, r4
 800a6fc:	e7d2      	b.n	800a6a4 <_svfiprintf_r+0xa0>
 800a6fe:	9b03      	ldr	r3, [sp, #12]
 800a700:	1d19      	adds	r1, r3, #4
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	9103      	str	r1, [sp, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	bfbb      	ittet	lt
 800a70a:	425b      	neglt	r3, r3
 800a70c:	f042 0202 	orrlt.w	r2, r2, #2
 800a710:	9307      	strge	r3, [sp, #28]
 800a712:	9307      	strlt	r3, [sp, #28]
 800a714:	bfb8      	it	lt
 800a716:	9204      	strlt	r2, [sp, #16]
 800a718:	7823      	ldrb	r3, [r4, #0]
 800a71a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a71c:	d10a      	bne.n	800a734 <_svfiprintf_r+0x130>
 800a71e:	7863      	ldrb	r3, [r4, #1]
 800a720:	2b2a      	cmp	r3, #42	@ 0x2a
 800a722:	d132      	bne.n	800a78a <_svfiprintf_r+0x186>
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	1d1a      	adds	r2, r3, #4
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	9203      	str	r2, [sp, #12]
 800a72c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a730:	3402      	adds	r4, #2
 800a732:	9305      	str	r3, [sp, #20]
 800a734:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a7f8 <_svfiprintf_r+0x1f4>
 800a738:	7821      	ldrb	r1, [r4, #0]
 800a73a:	2203      	movs	r2, #3
 800a73c:	4650      	mov	r0, sl
 800a73e:	f7f5 fd47 	bl	80001d0 <memchr>
 800a742:	b138      	cbz	r0, 800a754 <_svfiprintf_r+0x150>
 800a744:	9b04      	ldr	r3, [sp, #16]
 800a746:	eba0 000a 	sub.w	r0, r0, sl
 800a74a:	2240      	movs	r2, #64	@ 0x40
 800a74c:	4082      	lsls	r2, r0
 800a74e:	4313      	orrs	r3, r2
 800a750:	3401      	adds	r4, #1
 800a752:	9304      	str	r3, [sp, #16]
 800a754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a758:	4824      	ldr	r0, [pc, #144]	@ (800a7ec <_svfiprintf_r+0x1e8>)
 800a75a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a75e:	2206      	movs	r2, #6
 800a760:	f7f5 fd36 	bl	80001d0 <memchr>
 800a764:	2800      	cmp	r0, #0
 800a766:	d036      	beq.n	800a7d6 <_svfiprintf_r+0x1d2>
 800a768:	4b21      	ldr	r3, [pc, #132]	@ (800a7f0 <_svfiprintf_r+0x1ec>)
 800a76a:	bb1b      	cbnz	r3, 800a7b4 <_svfiprintf_r+0x1b0>
 800a76c:	9b03      	ldr	r3, [sp, #12]
 800a76e:	3307      	adds	r3, #7
 800a770:	f023 0307 	bic.w	r3, r3, #7
 800a774:	3308      	adds	r3, #8
 800a776:	9303      	str	r3, [sp, #12]
 800a778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a77a:	4433      	add	r3, r6
 800a77c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a77e:	e76a      	b.n	800a656 <_svfiprintf_r+0x52>
 800a780:	fb0c 3202 	mla	r2, ip, r2, r3
 800a784:	460c      	mov	r4, r1
 800a786:	2001      	movs	r0, #1
 800a788:	e7a8      	b.n	800a6dc <_svfiprintf_r+0xd8>
 800a78a:	2300      	movs	r3, #0
 800a78c:	3401      	adds	r4, #1
 800a78e:	9305      	str	r3, [sp, #20]
 800a790:	4619      	mov	r1, r3
 800a792:	f04f 0c0a 	mov.w	ip, #10
 800a796:	4620      	mov	r0, r4
 800a798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a79c:	3a30      	subs	r2, #48	@ 0x30
 800a79e:	2a09      	cmp	r2, #9
 800a7a0:	d903      	bls.n	800a7aa <_svfiprintf_r+0x1a6>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d0c6      	beq.n	800a734 <_svfiprintf_r+0x130>
 800a7a6:	9105      	str	r1, [sp, #20]
 800a7a8:	e7c4      	b.n	800a734 <_svfiprintf_r+0x130>
 800a7aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e7f0      	b.n	800a796 <_svfiprintf_r+0x192>
 800a7b4:	ab03      	add	r3, sp, #12
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	462a      	mov	r2, r5
 800a7ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a7f4 <_svfiprintf_r+0x1f0>)
 800a7bc:	a904      	add	r1, sp, #16
 800a7be:	4638      	mov	r0, r7
 800a7c0:	f7fc ff1c 	bl	80075fc <_printf_float>
 800a7c4:	1c42      	adds	r2, r0, #1
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	d1d6      	bne.n	800a778 <_svfiprintf_r+0x174>
 800a7ca:	89ab      	ldrh	r3, [r5, #12]
 800a7cc:	065b      	lsls	r3, r3, #25
 800a7ce:	f53f af2d 	bmi.w	800a62c <_svfiprintf_r+0x28>
 800a7d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7d4:	e72c      	b.n	800a630 <_svfiprintf_r+0x2c>
 800a7d6:	ab03      	add	r3, sp, #12
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	462a      	mov	r2, r5
 800a7dc:	4b05      	ldr	r3, [pc, #20]	@ (800a7f4 <_svfiprintf_r+0x1f0>)
 800a7de:	a904      	add	r1, sp, #16
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f7fd f9a3 	bl	8007b2c <_printf_i>
 800a7e6:	e7ed      	b.n	800a7c4 <_svfiprintf_r+0x1c0>
 800a7e8:	0800b2c1 	.word	0x0800b2c1
 800a7ec:	0800b2cb 	.word	0x0800b2cb
 800a7f0:	080075fd 	.word	0x080075fd
 800a7f4:	0800a54f 	.word	0x0800a54f
 800a7f8:	0800b2c7 	.word	0x0800b2c7

0800a7fc <__sflush_r>:
 800a7fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a804:	0716      	lsls	r6, r2, #28
 800a806:	4605      	mov	r5, r0
 800a808:	460c      	mov	r4, r1
 800a80a:	d454      	bmi.n	800a8b6 <__sflush_r+0xba>
 800a80c:	684b      	ldr	r3, [r1, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	dc02      	bgt.n	800a818 <__sflush_r+0x1c>
 800a812:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a814:	2b00      	cmp	r3, #0
 800a816:	dd48      	ble.n	800a8aa <__sflush_r+0xae>
 800a818:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a81a:	2e00      	cmp	r6, #0
 800a81c:	d045      	beq.n	800a8aa <__sflush_r+0xae>
 800a81e:	2300      	movs	r3, #0
 800a820:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a824:	682f      	ldr	r7, [r5, #0]
 800a826:	6a21      	ldr	r1, [r4, #32]
 800a828:	602b      	str	r3, [r5, #0]
 800a82a:	d030      	beq.n	800a88e <__sflush_r+0x92>
 800a82c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a82e:	89a3      	ldrh	r3, [r4, #12]
 800a830:	0759      	lsls	r1, r3, #29
 800a832:	d505      	bpl.n	800a840 <__sflush_r+0x44>
 800a834:	6863      	ldr	r3, [r4, #4]
 800a836:	1ad2      	subs	r2, r2, r3
 800a838:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a83a:	b10b      	cbz	r3, 800a840 <__sflush_r+0x44>
 800a83c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a83e:	1ad2      	subs	r2, r2, r3
 800a840:	2300      	movs	r3, #0
 800a842:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a844:	6a21      	ldr	r1, [r4, #32]
 800a846:	4628      	mov	r0, r5
 800a848:	47b0      	blx	r6
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	d106      	bne.n	800a85e <__sflush_r+0x62>
 800a850:	6829      	ldr	r1, [r5, #0]
 800a852:	291d      	cmp	r1, #29
 800a854:	d82b      	bhi.n	800a8ae <__sflush_r+0xb2>
 800a856:	4a2a      	ldr	r2, [pc, #168]	@ (800a900 <__sflush_r+0x104>)
 800a858:	40ca      	lsrs	r2, r1
 800a85a:	07d6      	lsls	r6, r2, #31
 800a85c:	d527      	bpl.n	800a8ae <__sflush_r+0xb2>
 800a85e:	2200      	movs	r2, #0
 800a860:	6062      	str	r2, [r4, #4]
 800a862:	04d9      	lsls	r1, r3, #19
 800a864:	6922      	ldr	r2, [r4, #16]
 800a866:	6022      	str	r2, [r4, #0]
 800a868:	d504      	bpl.n	800a874 <__sflush_r+0x78>
 800a86a:	1c42      	adds	r2, r0, #1
 800a86c:	d101      	bne.n	800a872 <__sflush_r+0x76>
 800a86e:	682b      	ldr	r3, [r5, #0]
 800a870:	b903      	cbnz	r3, 800a874 <__sflush_r+0x78>
 800a872:	6560      	str	r0, [r4, #84]	@ 0x54
 800a874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a876:	602f      	str	r7, [r5, #0]
 800a878:	b1b9      	cbz	r1, 800a8aa <__sflush_r+0xae>
 800a87a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a87e:	4299      	cmp	r1, r3
 800a880:	d002      	beq.n	800a888 <__sflush_r+0x8c>
 800a882:	4628      	mov	r0, r5
 800a884:	f7fe fce4 	bl	8009250 <_free_r>
 800a888:	2300      	movs	r3, #0
 800a88a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a88c:	e00d      	b.n	800a8aa <__sflush_r+0xae>
 800a88e:	2301      	movs	r3, #1
 800a890:	4628      	mov	r0, r5
 800a892:	47b0      	blx	r6
 800a894:	4602      	mov	r2, r0
 800a896:	1c50      	adds	r0, r2, #1
 800a898:	d1c9      	bne.n	800a82e <__sflush_r+0x32>
 800a89a:	682b      	ldr	r3, [r5, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d0c6      	beq.n	800a82e <__sflush_r+0x32>
 800a8a0:	2b1d      	cmp	r3, #29
 800a8a2:	d001      	beq.n	800a8a8 <__sflush_r+0xac>
 800a8a4:	2b16      	cmp	r3, #22
 800a8a6:	d11e      	bne.n	800a8e6 <__sflush_r+0xea>
 800a8a8:	602f      	str	r7, [r5, #0]
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e022      	b.n	800a8f4 <__sflush_r+0xf8>
 800a8ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8b2:	b21b      	sxth	r3, r3
 800a8b4:	e01b      	b.n	800a8ee <__sflush_r+0xf2>
 800a8b6:	690f      	ldr	r7, [r1, #16]
 800a8b8:	2f00      	cmp	r7, #0
 800a8ba:	d0f6      	beq.n	800a8aa <__sflush_r+0xae>
 800a8bc:	0793      	lsls	r3, r2, #30
 800a8be:	680e      	ldr	r6, [r1, #0]
 800a8c0:	bf08      	it	eq
 800a8c2:	694b      	ldreq	r3, [r1, #20]
 800a8c4:	600f      	str	r7, [r1, #0]
 800a8c6:	bf18      	it	ne
 800a8c8:	2300      	movne	r3, #0
 800a8ca:	eba6 0807 	sub.w	r8, r6, r7
 800a8ce:	608b      	str	r3, [r1, #8]
 800a8d0:	f1b8 0f00 	cmp.w	r8, #0
 800a8d4:	dde9      	ble.n	800a8aa <__sflush_r+0xae>
 800a8d6:	6a21      	ldr	r1, [r4, #32]
 800a8d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8da:	4643      	mov	r3, r8
 800a8dc:	463a      	mov	r2, r7
 800a8de:	4628      	mov	r0, r5
 800a8e0:	47b0      	blx	r6
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	dc08      	bgt.n	800a8f8 <__sflush_r+0xfc>
 800a8e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ee:	81a3      	strh	r3, [r4, #12]
 800a8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f8:	4407      	add	r7, r0
 800a8fa:	eba8 0800 	sub.w	r8, r8, r0
 800a8fe:	e7e7      	b.n	800a8d0 <__sflush_r+0xd4>
 800a900:	20400001 	.word	0x20400001

0800a904 <_fflush_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	690b      	ldr	r3, [r1, #16]
 800a908:	4605      	mov	r5, r0
 800a90a:	460c      	mov	r4, r1
 800a90c:	b913      	cbnz	r3, 800a914 <_fflush_r+0x10>
 800a90e:	2500      	movs	r5, #0
 800a910:	4628      	mov	r0, r5
 800a912:	bd38      	pop	{r3, r4, r5, pc}
 800a914:	b118      	cbz	r0, 800a91e <_fflush_r+0x1a>
 800a916:	6a03      	ldr	r3, [r0, #32]
 800a918:	b90b      	cbnz	r3, 800a91e <_fflush_r+0x1a>
 800a91a:	f7fd fcbf 	bl	800829c <__sinit>
 800a91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d0f3      	beq.n	800a90e <_fflush_r+0xa>
 800a926:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a928:	07d0      	lsls	r0, r2, #31
 800a92a:	d404      	bmi.n	800a936 <_fflush_r+0x32>
 800a92c:	0599      	lsls	r1, r3, #22
 800a92e:	d402      	bmi.n	800a936 <_fflush_r+0x32>
 800a930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a932:	f7fd fe14 	bl	800855e <__retarget_lock_acquire_recursive>
 800a936:	4628      	mov	r0, r5
 800a938:	4621      	mov	r1, r4
 800a93a:	f7ff ff5f 	bl	800a7fc <__sflush_r>
 800a93e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a940:	07da      	lsls	r2, r3, #31
 800a942:	4605      	mov	r5, r0
 800a944:	d4e4      	bmi.n	800a910 <_fflush_r+0xc>
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	059b      	lsls	r3, r3, #22
 800a94a:	d4e1      	bmi.n	800a910 <_fflush_r+0xc>
 800a94c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a94e:	f7fd fe07 	bl	8008560 <__retarget_lock_release_recursive>
 800a952:	e7dd      	b.n	800a910 <_fflush_r+0xc>

0800a954 <memmove>:
 800a954:	4288      	cmp	r0, r1
 800a956:	b510      	push	{r4, lr}
 800a958:	eb01 0402 	add.w	r4, r1, r2
 800a95c:	d902      	bls.n	800a964 <memmove+0x10>
 800a95e:	4284      	cmp	r4, r0
 800a960:	4623      	mov	r3, r4
 800a962:	d807      	bhi.n	800a974 <memmove+0x20>
 800a964:	1e43      	subs	r3, r0, #1
 800a966:	42a1      	cmp	r1, r4
 800a968:	d008      	beq.n	800a97c <memmove+0x28>
 800a96a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a96e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a972:	e7f8      	b.n	800a966 <memmove+0x12>
 800a974:	4402      	add	r2, r0
 800a976:	4601      	mov	r1, r0
 800a978:	428a      	cmp	r2, r1
 800a97a:	d100      	bne.n	800a97e <memmove+0x2a>
 800a97c:	bd10      	pop	{r4, pc}
 800a97e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a982:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a986:	e7f7      	b.n	800a978 <memmove+0x24>

0800a988 <_sbrk_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4d06      	ldr	r5, [pc, #24]	@ (800a9a4 <_sbrk_r+0x1c>)
 800a98c:	2300      	movs	r3, #0
 800a98e:	4604      	mov	r4, r0
 800a990:	4608      	mov	r0, r1
 800a992:	602b      	str	r3, [r5, #0]
 800a994:	f7f7 fb0c 	bl	8001fb0 <_sbrk>
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d102      	bne.n	800a9a2 <_sbrk_r+0x1a>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	b103      	cbz	r3, 800a9a2 <_sbrk_r+0x1a>
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	200007d4 	.word	0x200007d4

0800a9a8 <__assert_func>:
 800a9a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9aa:	4614      	mov	r4, r2
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	4b09      	ldr	r3, [pc, #36]	@ (800a9d4 <__assert_func+0x2c>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4605      	mov	r5, r0
 800a9b4:	68d8      	ldr	r0, [r3, #12]
 800a9b6:	b14c      	cbz	r4, 800a9cc <__assert_func+0x24>
 800a9b8:	4b07      	ldr	r3, [pc, #28]	@ (800a9d8 <__assert_func+0x30>)
 800a9ba:	9100      	str	r1, [sp, #0]
 800a9bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9c0:	4906      	ldr	r1, [pc, #24]	@ (800a9dc <__assert_func+0x34>)
 800a9c2:	462b      	mov	r3, r5
 800a9c4:	f000 f850 	bl	800aa68 <fiprintf>
 800a9c8:	f000 f860 	bl	800aa8c <abort>
 800a9cc:	4b04      	ldr	r3, [pc, #16]	@ (800a9e0 <__assert_func+0x38>)
 800a9ce:	461c      	mov	r4, r3
 800a9d0:	e7f3      	b.n	800a9ba <__assert_func+0x12>
 800a9d2:	bf00      	nop
 800a9d4:	200002cc 	.word	0x200002cc
 800a9d8:	0800b2d2 	.word	0x0800b2d2
 800a9dc:	0800b2df 	.word	0x0800b2df
 800a9e0:	0800b30d 	.word	0x0800b30d

0800a9e4 <_calloc_r>:
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	fba1 5402 	umull	r5, r4, r1, r2
 800a9ea:	b934      	cbnz	r4, 800a9fa <_calloc_r+0x16>
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	f7fe ffdd 	bl	80099ac <_malloc_r>
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	b928      	cbnz	r0, 800aa02 <_calloc_r+0x1e>
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	bd70      	pop	{r4, r5, r6, pc}
 800a9fa:	220c      	movs	r2, #12
 800a9fc:	6002      	str	r2, [r0, #0]
 800a9fe:	2600      	movs	r6, #0
 800aa00:	e7f9      	b.n	800a9f6 <_calloc_r+0x12>
 800aa02:	462a      	mov	r2, r5
 800aa04:	4621      	mov	r1, r4
 800aa06:	f7fd fd1a 	bl	800843e <memset>
 800aa0a:	e7f4      	b.n	800a9f6 <_calloc_r+0x12>

0800aa0c <_realloc_r>:
 800aa0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa10:	4607      	mov	r7, r0
 800aa12:	4614      	mov	r4, r2
 800aa14:	460d      	mov	r5, r1
 800aa16:	b921      	cbnz	r1, 800aa22 <_realloc_r+0x16>
 800aa18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	f7fe bfc5 	b.w	80099ac <_malloc_r>
 800aa22:	b92a      	cbnz	r2, 800aa30 <_realloc_r+0x24>
 800aa24:	f7fe fc14 	bl	8009250 <_free_r>
 800aa28:	4625      	mov	r5, r4
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa30:	f000 f833 	bl	800aa9a <_malloc_usable_size_r>
 800aa34:	4284      	cmp	r4, r0
 800aa36:	4606      	mov	r6, r0
 800aa38:	d802      	bhi.n	800aa40 <_realloc_r+0x34>
 800aa3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa3e:	d8f4      	bhi.n	800aa2a <_realloc_r+0x1e>
 800aa40:	4621      	mov	r1, r4
 800aa42:	4638      	mov	r0, r7
 800aa44:	f7fe ffb2 	bl	80099ac <_malloc_r>
 800aa48:	4680      	mov	r8, r0
 800aa4a:	b908      	cbnz	r0, 800aa50 <_realloc_r+0x44>
 800aa4c:	4645      	mov	r5, r8
 800aa4e:	e7ec      	b.n	800aa2a <_realloc_r+0x1e>
 800aa50:	42b4      	cmp	r4, r6
 800aa52:	4622      	mov	r2, r4
 800aa54:	4629      	mov	r1, r5
 800aa56:	bf28      	it	cs
 800aa58:	4632      	movcs	r2, r6
 800aa5a:	f7fd fd82 	bl	8008562 <memcpy>
 800aa5e:	4629      	mov	r1, r5
 800aa60:	4638      	mov	r0, r7
 800aa62:	f7fe fbf5 	bl	8009250 <_free_r>
 800aa66:	e7f1      	b.n	800aa4c <_realloc_r+0x40>

0800aa68 <fiprintf>:
 800aa68:	b40e      	push	{r1, r2, r3}
 800aa6a:	b503      	push	{r0, r1, lr}
 800aa6c:	4601      	mov	r1, r0
 800aa6e:	ab03      	add	r3, sp, #12
 800aa70:	4805      	ldr	r0, [pc, #20]	@ (800aa88 <fiprintf+0x20>)
 800aa72:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa76:	6800      	ldr	r0, [r0, #0]
 800aa78:	9301      	str	r3, [sp, #4]
 800aa7a:	f000 f83f 	bl	800aafc <_vfiprintf_r>
 800aa7e:	b002      	add	sp, #8
 800aa80:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa84:	b003      	add	sp, #12
 800aa86:	4770      	bx	lr
 800aa88:	200002cc 	.word	0x200002cc

0800aa8c <abort>:
 800aa8c:	b508      	push	{r3, lr}
 800aa8e:	2006      	movs	r0, #6
 800aa90:	f000 fa08 	bl	800aea4 <raise>
 800aa94:	2001      	movs	r0, #1
 800aa96:	f7f7 fa2f 	bl	8001ef8 <_exit>

0800aa9a <_malloc_usable_size_r>:
 800aa9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa9e:	1f18      	subs	r0, r3, #4
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	bfbc      	itt	lt
 800aaa4:	580b      	ldrlt	r3, [r1, r0]
 800aaa6:	18c0      	addlt	r0, r0, r3
 800aaa8:	4770      	bx	lr

0800aaaa <__sfputc_r>:
 800aaaa:	6893      	ldr	r3, [r2, #8]
 800aaac:	3b01      	subs	r3, #1
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	b410      	push	{r4}
 800aab2:	6093      	str	r3, [r2, #8]
 800aab4:	da08      	bge.n	800aac8 <__sfputc_r+0x1e>
 800aab6:	6994      	ldr	r4, [r2, #24]
 800aab8:	42a3      	cmp	r3, r4
 800aaba:	db01      	blt.n	800aac0 <__sfputc_r+0x16>
 800aabc:	290a      	cmp	r1, #10
 800aabe:	d103      	bne.n	800aac8 <__sfputc_r+0x1e>
 800aac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aac4:	f000 b932 	b.w	800ad2c <__swbuf_r>
 800aac8:	6813      	ldr	r3, [r2, #0]
 800aaca:	1c58      	adds	r0, r3, #1
 800aacc:	6010      	str	r0, [r2, #0]
 800aace:	7019      	strb	r1, [r3, #0]
 800aad0:	4608      	mov	r0, r1
 800aad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <__sfputs_r>:
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	4606      	mov	r6, r0
 800aadc:	460f      	mov	r7, r1
 800aade:	4614      	mov	r4, r2
 800aae0:	18d5      	adds	r5, r2, r3
 800aae2:	42ac      	cmp	r4, r5
 800aae4:	d101      	bne.n	800aaea <__sfputs_r+0x12>
 800aae6:	2000      	movs	r0, #0
 800aae8:	e007      	b.n	800aafa <__sfputs_r+0x22>
 800aaea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaee:	463a      	mov	r2, r7
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	f7ff ffda 	bl	800aaaa <__sfputc_r>
 800aaf6:	1c43      	adds	r3, r0, #1
 800aaf8:	d1f3      	bne.n	800aae2 <__sfputs_r+0xa>
 800aafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aafc <_vfiprintf_r>:
 800aafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab00:	460d      	mov	r5, r1
 800ab02:	b09d      	sub	sp, #116	@ 0x74
 800ab04:	4614      	mov	r4, r2
 800ab06:	4698      	mov	r8, r3
 800ab08:	4606      	mov	r6, r0
 800ab0a:	b118      	cbz	r0, 800ab14 <_vfiprintf_r+0x18>
 800ab0c:	6a03      	ldr	r3, [r0, #32]
 800ab0e:	b90b      	cbnz	r3, 800ab14 <_vfiprintf_r+0x18>
 800ab10:	f7fd fbc4 	bl	800829c <__sinit>
 800ab14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab16:	07d9      	lsls	r1, r3, #31
 800ab18:	d405      	bmi.n	800ab26 <_vfiprintf_r+0x2a>
 800ab1a:	89ab      	ldrh	r3, [r5, #12]
 800ab1c:	059a      	lsls	r2, r3, #22
 800ab1e:	d402      	bmi.n	800ab26 <_vfiprintf_r+0x2a>
 800ab20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab22:	f7fd fd1c 	bl	800855e <__retarget_lock_acquire_recursive>
 800ab26:	89ab      	ldrh	r3, [r5, #12]
 800ab28:	071b      	lsls	r3, r3, #28
 800ab2a:	d501      	bpl.n	800ab30 <_vfiprintf_r+0x34>
 800ab2c:	692b      	ldr	r3, [r5, #16]
 800ab2e:	b99b      	cbnz	r3, 800ab58 <_vfiprintf_r+0x5c>
 800ab30:	4629      	mov	r1, r5
 800ab32:	4630      	mov	r0, r6
 800ab34:	f000 f938 	bl	800ada8 <__swsetup_r>
 800ab38:	b170      	cbz	r0, 800ab58 <_vfiprintf_r+0x5c>
 800ab3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab3c:	07dc      	lsls	r4, r3, #31
 800ab3e:	d504      	bpl.n	800ab4a <_vfiprintf_r+0x4e>
 800ab40:	f04f 30ff 	mov.w	r0, #4294967295
 800ab44:	b01d      	add	sp, #116	@ 0x74
 800ab46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4a:	89ab      	ldrh	r3, [r5, #12]
 800ab4c:	0598      	lsls	r0, r3, #22
 800ab4e:	d4f7      	bmi.n	800ab40 <_vfiprintf_r+0x44>
 800ab50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab52:	f7fd fd05 	bl	8008560 <__retarget_lock_release_recursive>
 800ab56:	e7f3      	b.n	800ab40 <_vfiprintf_r+0x44>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab5c:	2320      	movs	r3, #32
 800ab5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab62:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab66:	2330      	movs	r3, #48	@ 0x30
 800ab68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad18 <_vfiprintf_r+0x21c>
 800ab6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab70:	f04f 0901 	mov.w	r9, #1
 800ab74:	4623      	mov	r3, r4
 800ab76:	469a      	mov	sl, r3
 800ab78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab7c:	b10a      	cbz	r2, 800ab82 <_vfiprintf_r+0x86>
 800ab7e:	2a25      	cmp	r2, #37	@ 0x25
 800ab80:	d1f9      	bne.n	800ab76 <_vfiprintf_r+0x7a>
 800ab82:	ebba 0b04 	subs.w	fp, sl, r4
 800ab86:	d00b      	beq.n	800aba0 <_vfiprintf_r+0xa4>
 800ab88:	465b      	mov	r3, fp
 800ab8a:	4622      	mov	r2, r4
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f7ff ffa2 	bl	800aad8 <__sfputs_r>
 800ab94:	3001      	adds	r0, #1
 800ab96:	f000 80a7 	beq.w	800ace8 <_vfiprintf_r+0x1ec>
 800ab9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab9c:	445a      	add	r2, fp
 800ab9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800aba0:	f89a 3000 	ldrb.w	r3, [sl]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f000 809f 	beq.w	800ace8 <_vfiprintf_r+0x1ec>
 800abaa:	2300      	movs	r3, #0
 800abac:	f04f 32ff 	mov.w	r2, #4294967295
 800abb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abb4:	f10a 0a01 	add.w	sl, sl, #1
 800abb8:	9304      	str	r3, [sp, #16]
 800abba:	9307      	str	r3, [sp, #28]
 800abbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800abc2:	4654      	mov	r4, sl
 800abc4:	2205      	movs	r2, #5
 800abc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abca:	4853      	ldr	r0, [pc, #332]	@ (800ad18 <_vfiprintf_r+0x21c>)
 800abcc:	f7f5 fb00 	bl	80001d0 <memchr>
 800abd0:	9a04      	ldr	r2, [sp, #16]
 800abd2:	b9d8      	cbnz	r0, 800ac0c <_vfiprintf_r+0x110>
 800abd4:	06d1      	lsls	r1, r2, #27
 800abd6:	bf44      	itt	mi
 800abd8:	2320      	movmi	r3, #32
 800abda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abde:	0713      	lsls	r3, r2, #28
 800abe0:	bf44      	itt	mi
 800abe2:	232b      	movmi	r3, #43	@ 0x2b
 800abe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abe8:	f89a 3000 	ldrb.w	r3, [sl]
 800abec:	2b2a      	cmp	r3, #42	@ 0x2a
 800abee:	d015      	beq.n	800ac1c <_vfiprintf_r+0x120>
 800abf0:	9a07      	ldr	r2, [sp, #28]
 800abf2:	4654      	mov	r4, sl
 800abf4:	2000      	movs	r0, #0
 800abf6:	f04f 0c0a 	mov.w	ip, #10
 800abfa:	4621      	mov	r1, r4
 800abfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac00:	3b30      	subs	r3, #48	@ 0x30
 800ac02:	2b09      	cmp	r3, #9
 800ac04:	d94b      	bls.n	800ac9e <_vfiprintf_r+0x1a2>
 800ac06:	b1b0      	cbz	r0, 800ac36 <_vfiprintf_r+0x13a>
 800ac08:	9207      	str	r2, [sp, #28]
 800ac0a:	e014      	b.n	800ac36 <_vfiprintf_r+0x13a>
 800ac0c:	eba0 0308 	sub.w	r3, r0, r8
 800ac10:	fa09 f303 	lsl.w	r3, r9, r3
 800ac14:	4313      	orrs	r3, r2
 800ac16:	9304      	str	r3, [sp, #16]
 800ac18:	46a2      	mov	sl, r4
 800ac1a:	e7d2      	b.n	800abc2 <_vfiprintf_r+0xc6>
 800ac1c:	9b03      	ldr	r3, [sp, #12]
 800ac1e:	1d19      	adds	r1, r3, #4
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	9103      	str	r1, [sp, #12]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	bfbb      	ittet	lt
 800ac28:	425b      	neglt	r3, r3
 800ac2a:	f042 0202 	orrlt.w	r2, r2, #2
 800ac2e:	9307      	strge	r3, [sp, #28]
 800ac30:	9307      	strlt	r3, [sp, #28]
 800ac32:	bfb8      	it	lt
 800ac34:	9204      	strlt	r2, [sp, #16]
 800ac36:	7823      	ldrb	r3, [r4, #0]
 800ac38:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac3a:	d10a      	bne.n	800ac52 <_vfiprintf_r+0x156>
 800ac3c:	7863      	ldrb	r3, [r4, #1]
 800ac3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac40:	d132      	bne.n	800aca8 <_vfiprintf_r+0x1ac>
 800ac42:	9b03      	ldr	r3, [sp, #12]
 800ac44:	1d1a      	adds	r2, r3, #4
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	9203      	str	r2, [sp, #12]
 800ac4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac4e:	3402      	adds	r4, #2
 800ac50:	9305      	str	r3, [sp, #20]
 800ac52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad28 <_vfiprintf_r+0x22c>
 800ac56:	7821      	ldrb	r1, [r4, #0]
 800ac58:	2203      	movs	r2, #3
 800ac5a:	4650      	mov	r0, sl
 800ac5c:	f7f5 fab8 	bl	80001d0 <memchr>
 800ac60:	b138      	cbz	r0, 800ac72 <_vfiprintf_r+0x176>
 800ac62:	9b04      	ldr	r3, [sp, #16]
 800ac64:	eba0 000a 	sub.w	r0, r0, sl
 800ac68:	2240      	movs	r2, #64	@ 0x40
 800ac6a:	4082      	lsls	r2, r0
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	3401      	adds	r4, #1
 800ac70:	9304      	str	r3, [sp, #16]
 800ac72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac76:	4829      	ldr	r0, [pc, #164]	@ (800ad1c <_vfiprintf_r+0x220>)
 800ac78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac7c:	2206      	movs	r2, #6
 800ac7e:	f7f5 faa7 	bl	80001d0 <memchr>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d03f      	beq.n	800ad06 <_vfiprintf_r+0x20a>
 800ac86:	4b26      	ldr	r3, [pc, #152]	@ (800ad20 <_vfiprintf_r+0x224>)
 800ac88:	bb1b      	cbnz	r3, 800acd2 <_vfiprintf_r+0x1d6>
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	3307      	adds	r3, #7
 800ac8e:	f023 0307 	bic.w	r3, r3, #7
 800ac92:	3308      	adds	r3, #8
 800ac94:	9303      	str	r3, [sp, #12]
 800ac96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac98:	443b      	add	r3, r7
 800ac9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac9c:	e76a      	b.n	800ab74 <_vfiprintf_r+0x78>
 800ac9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aca2:	460c      	mov	r4, r1
 800aca4:	2001      	movs	r0, #1
 800aca6:	e7a8      	b.n	800abfa <_vfiprintf_r+0xfe>
 800aca8:	2300      	movs	r3, #0
 800acaa:	3401      	adds	r4, #1
 800acac:	9305      	str	r3, [sp, #20]
 800acae:	4619      	mov	r1, r3
 800acb0:	f04f 0c0a 	mov.w	ip, #10
 800acb4:	4620      	mov	r0, r4
 800acb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acba:	3a30      	subs	r2, #48	@ 0x30
 800acbc:	2a09      	cmp	r2, #9
 800acbe:	d903      	bls.n	800acc8 <_vfiprintf_r+0x1cc>
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d0c6      	beq.n	800ac52 <_vfiprintf_r+0x156>
 800acc4:	9105      	str	r1, [sp, #20]
 800acc6:	e7c4      	b.n	800ac52 <_vfiprintf_r+0x156>
 800acc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800accc:	4604      	mov	r4, r0
 800acce:	2301      	movs	r3, #1
 800acd0:	e7f0      	b.n	800acb4 <_vfiprintf_r+0x1b8>
 800acd2:	ab03      	add	r3, sp, #12
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	462a      	mov	r2, r5
 800acd8:	4b12      	ldr	r3, [pc, #72]	@ (800ad24 <_vfiprintf_r+0x228>)
 800acda:	a904      	add	r1, sp, #16
 800acdc:	4630      	mov	r0, r6
 800acde:	f7fc fc8d 	bl	80075fc <_printf_float>
 800ace2:	4607      	mov	r7, r0
 800ace4:	1c78      	adds	r0, r7, #1
 800ace6:	d1d6      	bne.n	800ac96 <_vfiprintf_r+0x19a>
 800ace8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acea:	07d9      	lsls	r1, r3, #31
 800acec:	d405      	bmi.n	800acfa <_vfiprintf_r+0x1fe>
 800acee:	89ab      	ldrh	r3, [r5, #12]
 800acf0:	059a      	lsls	r2, r3, #22
 800acf2:	d402      	bmi.n	800acfa <_vfiprintf_r+0x1fe>
 800acf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acf6:	f7fd fc33 	bl	8008560 <__retarget_lock_release_recursive>
 800acfa:	89ab      	ldrh	r3, [r5, #12]
 800acfc:	065b      	lsls	r3, r3, #25
 800acfe:	f53f af1f 	bmi.w	800ab40 <_vfiprintf_r+0x44>
 800ad02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad04:	e71e      	b.n	800ab44 <_vfiprintf_r+0x48>
 800ad06:	ab03      	add	r3, sp, #12
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	462a      	mov	r2, r5
 800ad0c:	4b05      	ldr	r3, [pc, #20]	@ (800ad24 <_vfiprintf_r+0x228>)
 800ad0e:	a904      	add	r1, sp, #16
 800ad10:	4630      	mov	r0, r6
 800ad12:	f7fc ff0b 	bl	8007b2c <_printf_i>
 800ad16:	e7e4      	b.n	800ace2 <_vfiprintf_r+0x1e6>
 800ad18:	0800b2c1 	.word	0x0800b2c1
 800ad1c:	0800b2cb 	.word	0x0800b2cb
 800ad20:	080075fd 	.word	0x080075fd
 800ad24:	0800aad9 	.word	0x0800aad9
 800ad28:	0800b2c7 	.word	0x0800b2c7

0800ad2c <__swbuf_r>:
 800ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2e:	460e      	mov	r6, r1
 800ad30:	4614      	mov	r4, r2
 800ad32:	4605      	mov	r5, r0
 800ad34:	b118      	cbz	r0, 800ad3e <__swbuf_r+0x12>
 800ad36:	6a03      	ldr	r3, [r0, #32]
 800ad38:	b90b      	cbnz	r3, 800ad3e <__swbuf_r+0x12>
 800ad3a:	f7fd faaf 	bl	800829c <__sinit>
 800ad3e:	69a3      	ldr	r3, [r4, #24]
 800ad40:	60a3      	str	r3, [r4, #8]
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	071a      	lsls	r2, r3, #28
 800ad46:	d501      	bpl.n	800ad4c <__swbuf_r+0x20>
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	b943      	cbnz	r3, 800ad5e <__swbuf_r+0x32>
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	4628      	mov	r0, r5
 800ad50:	f000 f82a 	bl	800ada8 <__swsetup_r>
 800ad54:	b118      	cbz	r0, 800ad5e <__swbuf_r+0x32>
 800ad56:	f04f 37ff 	mov.w	r7, #4294967295
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	6922      	ldr	r2, [r4, #16]
 800ad62:	1a98      	subs	r0, r3, r2
 800ad64:	6963      	ldr	r3, [r4, #20]
 800ad66:	b2f6      	uxtb	r6, r6
 800ad68:	4283      	cmp	r3, r0
 800ad6a:	4637      	mov	r7, r6
 800ad6c:	dc05      	bgt.n	800ad7a <__swbuf_r+0x4e>
 800ad6e:	4621      	mov	r1, r4
 800ad70:	4628      	mov	r0, r5
 800ad72:	f7ff fdc7 	bl	800a904 <_fflush_r>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d1ed      	bne.n	800ad56 <__swbuf_r+0x2a>
 800ad7a:	68a3      	ldr	r3, [r4, #8]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	60a3      	str	r3, [r4, #8]
 800ad80:	6823      	ldr	r3, [r4, #0]
 800ad82:	1c5a      	adds	r2, r3, #1
 800ad84:	6022      	str	r2, [r4, #0]
 800ad86:	701e      	strb	r6, [r3, #0]
 800ad88:	6962      	ldr	r2, [r4, #20]
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d004      	beq.n	800ad9a <__swbuf_r+0x6e>
 800ad90:	89a3      	ldrh	r3, [r4, #12]
 800ad92:	07db      	lsls	r3, r3, #31
 800ad94:	d5e1      	bpl.n	800ad5a <__swbuf_r+0x2e>
 800ad96:	2e0a      	cmp	r6, #10
 800ad98:	d1df      	bne.n	800ad5a <__swbuf_r+0x2e>
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	f7ff fdb1 	bl	800a904 <_fflush_r>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d0d9      	beq.n	800ad5a <__swbuf_r+0x2e>
 800ada6:	e7d6      	b.n	800ad56 <__swbuf_r+0x2a>

0800ada8 <__swsetup_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4b29      	ldr	r3, [pc, #164]	@ (800ae50 <__swsetup_r+0xa8>)
 800adac:	4605      	mov	r5, r0
 800adae:	6818      	ldr	r0, [r3, #0]
 800adb0:	460c      	mov	r4, r1
 800adb2:	b118      	cbz	r0, 800adbc <__swsetup_r+0x14>
 800adb4:	6a03      	ldr	r3, [r0, #32]
 800adb6:	b90b      	cbnz	r3, 800adbc <__swsetup_r+0x14>
 800adb8:	f7fd fa70 	bl	800829c <__sinit>
 800adbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adc0:	0719      	lsls	r1, r3, #28
 800adc2:	d422      	bmi.n	800ae0a <__swsetup_r+0x62>
 800adc4:	06da      	lsls	r2, r3, #27
 800adc6:	d407      	bmi.n	800add8 <__swsetup_r+0x30>
 800adc8:	2209      	movs	r2, #9
 800adca:	602a      	str	r2, [r5, #0]
 800adcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800add0:	81a3      	strh	r3, [r4, #12]
 800add2:	f04f 30ff 	mov.w	r0, #4294967295
 800add6:	e033      	b.n	800ae40 <__swsetup_r+0x98>
 800add8:	0758      	lsls	r0, r3, #29
 800adda:	d512      	bpl.n	800ae02 <__swsetup_r+0x5a>
 800addc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adde:	b141      	cbz	r1, 800adf2 <__swsetup_r+0x4a>
 800ade0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ade4:	4299      	cmp	r1, r3
 800ade6:	d002      	beq.n	800adee <__swsetup_r+0x46>
 800ade8:	4628      	mov	r0, r5
 800adea:	f7fe fa31 	bl	8009250 <_free_r>
 800adee:	2300      	movs	r3, #0
 800adf0:	6363      	str	r3, [r4, #52]	@ 0x34
 800adf2:	89a3      	ldrh	r3, [r4, #12]
 800adf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800adf8:	81a3      	strh	r3, [r4, #12]
 800adfa:	2300      	movs	r3, #0
 800adfc:	6063      	str	r3, [r4, #4]
 800adfe:	6923      	ldr	r3, [r4, #16]
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	f043 0308 	orr.w	r3, r3, #8
 800ae08:	81a3      	strh	r3, [r4, #12]
 800ae0a:	6923      	ldr	r3, [r4, #16]
 800ae0c:	b94b      	cbnz	r3, 800ae22 <__swsetup_r+0x7a>
 800ae0e:	89a3      	ldrh	r3, [r4, #12]
 800ae10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae18:	d003      	beq.n	800ae22 <__swsetup_r+0x7a>
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	f000 f883 	bl	800af28 <__smakebuf_r>
 800ae22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae26:	f013 0201 	ands.w	r2, r3, #1
 800ae2a:	d00a      	beq.n	800ae42 <__swsetup_r+0x9a>
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	60a2      	str	r2, [r4, #8]
 800ae30:	6962      	ldr	r2, [r4, #20]
 800ae32:	4252      	negs	r2, r2
 800ae34:	61a2      	str	r2, [r4, #24]
 800ae36:	6922      	ldr	r2, [r4, #16]
 800ae38:	b942      	cbnz	r2, 800ae4c <__swsetup_r+0xa4>
 800ae3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae3e:	d1c5      	bne.n	800adcc <__swsetup_r+0x24>
 800ae40:	bd38      	pop	{r3, r4, r5, pc}
 800ae42:	0799      	lsls	r1, r3, #30
 800ae44:	bf58      	it	pl
 800ae46:	6962      	ldrpl	r2, [r4, #20]
 800ae48:	60a2      	str	r2, [r4, #8]
 800ae4a:	e7f4      	b.n	800ae36 <__swsetup_r+0x8e>
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	e7f7      	b.n	800ae40 <__swsetup_r+0x98>
 800ae50:	200002cc 	.word	0x200002cc

0800ae54 <_raise_r>:
 800ae54:	291f      	cmp	r1, #31
 800ae56:	b538      	push	{r3, r4, r5, lr}
 800ae58:	4605      	mov	r5, r0
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	d904      	bls.n	800ae68 <_raise_r+0x14>
 800ae5e:	2316      	movs	r3, #22
 800ae60:	6003      	str	r3, [r0, #0]
 800ae62:	f04f 30ff 	mov.w	r0, #4294967295
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae6a:	b112      	cbz	r2, 800ae72 <_raise_r+0x1e>
 800ae6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae70:	b94b      	cbnz	r3, 800ae86 <_raise_r+0x32>
 800ae72:	4628      	mov	r0, r5
 800ae74:	f000 f830 	bl	800aed8 <_getpid_r>
 800ae78:	4622      	mov	r2, r4
 800ae7a:	4601      	mov	r1, r0
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae82:	f000 b817 	b.w	800aeb4 <_kill_r>
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d00a      	beq.n	800aea0 <_raise_r+0x4c>
 800ae8a:	1c59      	adds	r1, r3, #1
 800ae8c:	d103      	bne.n	800ae96 <_raise_r+0x42>
 800ae8e:	2316      	movs	r3, #22
 800ae90:	6003      	str	r3, [r0, #0]
 800ae92:	2001      	movs	r0, #1
 800ae94:	e7e7      	b.n	800ae66 <_raise_r+0x12>
 800ae96:	2100      	movs	r1, #0
 800ae98:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	4798      	blx	r3
 800aea0:	2000      	movs	r0, #0
 800aea2:	e7e0      	b.n	800ae66 <_raise_r+0x12>

0800aea4 <raise>:
 800aea4:	4b02      	ldr	r3, [pc, #8]	@ (800aeb0 <raise+0xc>)
 800aea6:	4601      	mov	r1, r0
 800aea8:	6818      	ldr	r0, [r3, #0]
 800aeaa:	f7ff bfd3 	b.w	800ae54 <_raise_r>
 800aeae:	bf00      	nop
 800aeb0:	200002cc 	.word	0x200002cc

0800aeb4 <_kill_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d07      	ldr	r5, [pc, #28]	@ (800aed4 <_kill_r+0x20>)
 800aeb8:	2300      	movs	r3, #0
 800aeba:	4604      	mov	r4, r0
 800aebc:	4608      	mov	r0, r1
 800aebe:	4611      	mov	r1, r2
 800aec0:	602b      	str	r3, [r5, #0]
 800aec2:	f7f7 f809 	bl	8001ed8 <_kill>
 800aec6:	1c43      	adds	r3, r0, #1
 800aec8:	d102      	bne.n	800aed0 <_kill_r+0x1c>
 800aeca:	682b      	ldr	r3, [r5, #0]
 800aecc:	b103      	cbz	r3, 800aed0 <_kill_r+0x1c>
 800aece:	6023      	str	r3, [r4, #0]
 800aed0:	bd38      	pop	{r3, r4, r5, pc}
 800aed2:	bf00      	nop
 800aed4:	200007d4 	.word	0x200007d4

0800aed8 <_getpid_r>:
 800aed8:	f7f6 bff6 	b.w	8001ec8 <_getpid>

0800aedc <__swhatbuf_r>:
 800aedc:	b570      	push	{r4, r5, r6, lr}
 800aede:	460c      	mov	r4, r1
 800aee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee4:	2900      	cmp	r1, #0
 800aee6:	b096      	sub	sp, #88	@ 0x58
 800aee8:	4615      	mov	r5, r2
 800aeea:	461e      	mov	r6, r3
 800aeec:	da0d      	bge.n	800af0a <__swhatbuf_r+0x2e>
 800aeee:	89a3      	ldrh	r3, [r4, #12]
 800aef0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aef4:	f04f 0100 	mov.w	r1, #0
 800aef8:	bf14      	ite	ne
 800aefa:	2340      	movne	r3, #64	@ 0x40
 800aefc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af00:	2000      	movs	r0, #0
 800af02:	6031      	str	r1, [r6, #0]
 800af04:	602b      	str	r3, [r5, #0]
 800af06:	b016      	add	sp, #88	@ 0x58
 800af08:	bd70      	pop	{r4, r5, r6, pc}
 800af0a:	466a      	mov	r2, sp
 800af0c:	f000 f848 	bl	800afa0 <_fstat_r>
 800af10:	2800      	cmp	r0, #0
 800af12:	dbec      	blt.n	800aeee <__swhatbuf_r+0x12>
 800af14:	9901      	ldr	r1, [sp, #4]
 800af16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af1e:	4259      	negs	r1, r3
 800af20:	4159      	adcs	r1, r3
 800af22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af26:	e7eb      	b.n	800af00 <__swhatbuf_r+0x24>

0800af28 <__smakebuf_r>:
 800af28:	898b      	ldrh	r3, [r1, #12]
 800af2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af2c:	079d      	lsls	r5, r3, #30
 800af2e:	4606      	mov	r6, r0
 800af30:	460c      	mov	r4, r1
 800af32:	d507      	bpl.n	800af44 <__smakebuf_r+0x1c>
 800af34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	6123      	str	r3, [r4, #16]
 800af3c:	2301      	movs	r3, #1
 800af3e:	6163      	str	r3, [r4, #20]
 800af40:	b003      	add	sp, #12
 800af42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af44:	ab01      	add	r3, sp, #4
 800af46:	466a      	mov	r2, sp
 800af48:	f7ff ffc8 	bl	800aedc <__swhatbuf_r>
 800af4c:	9f00      	ldr	r7, [sp, #0]
 800af4e:	4605      	mov	r5, r0
 800af50:	4639      	mov	r1, r7
 800af52:	4630      	mov	r0, r6
 800af54:	f7fe fd2a 	bl	80099ac <_malloc_r>
 800af58:	b948      	cbnz	r0, 800af6e <__smakebuf_r+0x46>
 800af5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af5e:	059a      	lsls	r2, r3, #22
 800af60:	d4ee      	bmi.n	800af40 <__smakebuf_r+0x18>
 800af62:	f023 0303 	bic.w	r3, r3, #3
 800af66:	f043 0302 	orr.w	r3, r3, #2
 800af6a:	81a3      	strh	r3, [r4, #12]
 800af6c:	e7e2      	b.n	800af34 <__smakebuf_r+0xc>
 800af6e:	89a3      	ldrh	r3, [r4, #12]
 800af70:	6020      	str	r0, [r4, #0]
 800af72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af76:	81a3      	strh	r3, [r4, #12]
 800af78:	9b01      	ldr	r3, [sp, #4]
 800af7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af7e:	b15b      	cbz	r3, 800af98 <__smakebuf_r+0x70>
 800af80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af84:	4630      	mov	r0, r6
 800af86:	f000 f81d 	bl	800afc4 <_isatty_r>
 800af8a:	b128      	cbz	r0, 800af98 <__smakebuf_r+0x70>
 800af8c:	89a3      	ldrh	r3, [r4, #12]
 800af8e:	f023 0303 	bic.w	r3, r3, #3
 800af92:	f043 0301 	orr.w	r3, r3, #1
 800af96:	81a3      	strh	r3, [r4, #12]
 800af98:	89a3      	ldrh	r3, [r4, #12]
 800af9a:	431d      	orrs	r5, r3
 800af9c:	81a5      	strh	r5, [r4, #12]
 800af9e:	e7cf      	b.n	800af40 <__smakebuf_r+0x18>

0800afa0 <_fstat_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4d07      	ldr	r5, [pc, #28]	@ (800afc0 <_fstat_r+0x20>)
 800afa4:	2300      	movs	r3, #0
 800afa6:	4604      	mov	r4, r0
 800afa8:	4608      	mov	r0, r1
 800afaa:	4611      	mov	r1, r2
 800afac:	602b      	str	r3, [r5, #0]
 800afae:	f7f6 ffd7 	bl	8001f60 <_fstat>
 800afb2:	1c43      	adds	r3, r0, #1
 800afb4:	d102      	bne.n	800afbc <_fstat_r+0x1c>
 800afb6:	682b      	ldr	r3, [r5, #0]
 800afb8:	b103      	cbz	r3, 800afbc <_fstat_r+0x1c>
 800afba:	6023      	str	r3, [r4, #0]
 800afbc:	bd38      	pop	{r3, r4, r5, pc}
 800afbe:	bf00      	nop
 800afc0:	200007d4 	.word	0x200007d4

0800afc4 <_isatty_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	4d06      	ldr	r5, [pc, #24]	@ (800afe0 <_isatty_r+0x1c>)
 800afc8:	2300      	movs	r3, #0
 800afca:	4604      	mov	r4, r0
 800afcc:	4608      	mov	r0, r1
 800afce:	602b      	str	r3, [r5, #0]
 800afd0:	f7f6 ffd6 	bl	8001f80 <_isatty>
 800afd4:	1c43      	adds	r3, r0, #1
 800afd6:	d102      	bne.n	800afde <_isatty_r+0x1a>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	b103      	cbz	r3, 800afde <_isatty_r+0x1a>
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	200007d4 	.word	0x200007d4

0800afe4 <_init>:
 800afe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe6:	bf00      	nop
 800afe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afea:	bc08      	pop	{r3}
 800afec:	469e      	mov	lr, r3
 800afee:	4770      	bx	lr

0800aff0 <_fini>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	bf00      	nop
 800aff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff6:	bc08      	pop	{r3}
 800aff8:	469e      	mov	lr, r3
 800affa:	4770      	bx	lr
